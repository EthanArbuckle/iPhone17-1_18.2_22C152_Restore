void static GlobalSearchResponseProcessor.makeWebImages(experience:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  os_log_type_t v52;
  _WORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(void);
  uint64_t v58;
  char v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(void);
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(void);
  uint64_t v86;
  void *v87;
  os_log_type_t v88;
  _WORD *v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(void);
  void (*v93)(void);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(void);
  void (*v113)(void);
  uint64_t *v114;
  void (*v115)(uint64_t, uint64_t);
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  int *v126;
  uint64_t v127;
  void (*v128)(uint64_t);
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;

  OUTLINED_FUNCTION_104_0();
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_184_0();
  v124 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, url: URL?));
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_36_21();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_43_4();
  v123 = v7;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_27_10();
  v122 = v9;
  OUTLINED_FUNCTION_26_8();
  type metadata accessor for WebImage();
  OUTLINED_FUNCTION_1();
  v126 = v10;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_95_1();
  v13 = (uint64_t *)(v11 - v12);
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_27_10();
  v117 = v15;
  OUTLINED_FUNCTION_26_8();
  v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent();
  OUTLINED_FUNCTION_1();
  v129 = v17;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_18_8();
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Searchfoundation_Card?);
  v20 = OUTLINED_FUNCTION_81(v19);
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_184_0();
  v118 = v21;
  type metadata accessor for Searchfoundation_Card();
  OUTLINED_FUNCTION_1();
  v127 = v22;
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_95_1();
  v25 = v23 - v24;
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_27_10();
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent?);
  v28 = OUTLINED_FUNCTION_81(v27);
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_12_7();
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails?);
  v30 = OUTLINED_FUNCTION_81(v29);
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_21_7();
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
  v32 = OUTLINED_FUNCTION_81(v31);
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_185_0();
  v119 = v33;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_27_10();
  v125 = v35;
  v36 = static GlobalSearchResponseProcessor.parseExperience(experience:)();
  v37 = MEMORY[0x263F8EE78];
  if (!v36) {
    goto LABEL_17;
  }
  v38 = v36;
  v116 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v39 = *(void *)(v38 + 16);
  if (!v39)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  specialized Collection.first.getter(v38, v0);
  v40 = OUTLINED_FUNCTION_33_19();
  v42 = OUTLINED_FUNCTION_53_2(v40, v41, v16);
  if (v47)
  {
    v43 = &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent?;
    v44 = v0;
LABEL_10:
    outlined destroy of PQAVerificationModelProtocol?(v44, v43);
    v48 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet();
    v49 = v125;
    __swift_storeEnumTagSinglePayload(v125, 1, 1, v48);
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v45 = MEMORY[0x25A2C5D40](v42);
  v115 = *(void (**)(uint64_t, uint64_t))(v129 + 8);
  v115(v0, v16);
  specialized Collection.first.getter(v45, v3);
  swift_bridgeObjectRelease();
  v46 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails();
  OUTLINED_FUNCTION_53_2(v3, 1, v46);
  if (v47)
  {
    v43 = &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails?;
    v44 = v3;
    goto LABEL_10;
  }
  v114 = v13;
  Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.snippet.getter();
  OUTLINED_FUNCTION_16_1();
  v57();
  v58 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet();
  OUTLINED_FUNCTION_53_2(v125, 1, v58);
  if (v59)
  {
    swift_bridgeObjectRelease();
    v49 = v125;
    goto LABEL_11;
  }
  outlined init with copy of SearchResult?(v125, v119, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
  v60 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v58 - 8) + 88))(v119, v58);
  if (v60 != *MEMORY[0x263F5CFE8])
  {
    if (v60 == *MEMORY[0x263F5CFF0])
    {
      v128 = *(void (**)(uint64_t))(v129 + 16);
      OUTLINED_FUNCTION_137();
      v71 = v38 + v70;
      v73 = *(void *)(v72 + 56);
      swift_bridgeObjectRetain();
      do
      {
        v74 = OUTLINED_FUNCTION_58_13();
        v128(v74);
        static GlobalSearchResponseProcessor.makeLegacySnippet(layoutSnippet:)(v1);
        v115(v1, v16);
        specialized Array.append<A>(contentsOf:)();
        v71 += v73;
        --v39;
      }
      while (v39);
      swift_bridgeObjectRelease_n();
      v75 = *(void *)(v37 + 16);
      if (v75)
      {
        v133 = v37;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v76 = v37 + 40;
        do
        {
          swift_bridgeObjectRetain();
          UUID.init()();
          v77 = UUID.uuidString.getter();
          v79 = v78;
          OUTLINED_FUNCTION_30();
          v80();
          URL.init(string:)();
          swift_bridgeObjectRelease();
          *v114 = v77;
          v114[1] = v79;
          OUTLINED_FUNCTION_54_15(v126[6]);
          OUTLINED_FUNCTION_54_15(v126[7]);
          OUTLINED_FUNCTION_54_15(v126[8]);
          OUTLINED_FUNCTION_54_15(v126[9]);
          v81 = v133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_41_21();
            v81 = v133;
          }
          v82 = *(void *)(v81 + 16);
          if (v82 >= *(void *)(v81 + 24) >> 1) {
            OUTLINED_FUNCTION_42_17();
          }
          v76 += 16;
          OUTLINED_FUNCTION_33_20();
          outlined init with take of SearchResultItem((uint64_t)v114, v83 + v84 * v82, (void (*)(void))type metadata accessor for WebImage);
          --v75;
        }
        while (v75);
      }
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_22_24();
      goto LABEL_60;
    }
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_22_24();
    OUTLINED_FUNCTION_16_1();
    v85();
    v49 = v125;
LABEL_11:
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    v50 = type metadata accessor for Logger();
    v51 = (void *)OUTLINED_FUNCTION_43_1(v50, (uint64_t)static Logging.search);
    v52 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_24_13(v52))
    {
      v53 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_130_0(v53);
      OUTLINED_FUNCTION_99_3(&dword_257DC6000, v54, v55, "Unsupported web_image snippet type");
      OUTLINED_FUNCTION_34();
    }

    v56 = v49;
    goto LABEL_16;
  }
  v61 = *(void *)(v38 + 16);
  if (v61)
  {
    OUTLINED_FUNCTION_43_21();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v130 = *(void (**)(uint64_t, uint64_t, uint64_t))(v129 + 16);
    OUTLINED_FUNCTION_137();
    v64 = v38 + v63;
    v120 = *(void *)(v62 + 56);
    do
    {
      v65 = v62;
      v130(v1, v64, v16);
      static GlobalSearchResponseProcessor.makeCard(layoutSnippet:)();
      v115(v1, v16);
      v66 = v132;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v66 = v132;
      }
      v67 = *(void *)(v66 + 16);
      if (v67 >= *(void *)(v66 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v66 = v132;
      }
      *(void *)(v66 + 16) = v67 + 1;
      OUTLINED_FUNCTION_46_8();
      (*(void (**)(unint64_t, uint64_t))(v69 + 32))(v66 + v68 + *(void *)(v69 + 72) * v67, v25);
      v132 = v66;
      v64 += v120;
      --v61;
      v62 = v65;
    }
    while (v61);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v66 = MEMORY[0x263F8EE78];
  }
  specialized Collection.first.getter(v66, v118);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_53_2(v118, 1, v127);
  if (!v47)
  {
    OUTLINED_FUNCTION_58_1();
    v93();
    v94 = static GlobalSearchResponseProcessor.parseCardForURL(card:)();
    v95 = v94;
    v96 = *(void *)(v94 + 16);
    if (v96)
    {
      OUTLINED_FUNCTION_43_21();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      OUTLINED_FUNCTION_46_8();
      v98 = v95 + v97;
      v121 = *(void *)(v99 + 72);
      v100 = v132;
      do
      {
        v131 = v96;
        v101 = OUTLINED_FUNCTION_58_13();
        outlined init with copy of SearchResult?(v101, v102, (uint64_t *)&demangling cache variable for type metadata for (id: String, url: URL?));
        v103 = *(int *)(v124 + 48);
        v104 = (uint64_t)v123 + v103;
        v105 = (uint64_t)v122 + v103;
        v106 = *v122;
        v107 = v122[1];
        *v123 = *v122;
        v123[1] = v107;
        outlined init with copy of SearchResult?((uint64_t)v122 + v103, (uint64_t)v123 + v103, &demangling cache variable for type metadata for URL?);
        v108 = v116 + *(int *)(v124 + 48);
        outlined init with copy of SearchResult?(v105, v108, &demangling cache variable for type metadata for URL?);
        *v117 = v106;
        v117[1] = v107;
        outlined init with take of PQAVerificationModelProtocol?(v108, (uint64_t)v117 + v126[5], &demangling cache variable for type metadata for URL?);
        OUTLINED_FUNCTION_65_11(v126[6]);
        OUTLINED_FUNCTION_65_11(v126[7]);
        OUTLINED_FUNCTION_65_11(v126[8]);
        OUTLINED_FUNCTION_65_11(v126[9]);
        swift_bridgeObjectRetain();
        outlined destroy of PQAVerificationModelProtocol?(v104, &demangling cache variable for type metadata for URL?);
        outlined destroy of PQAVerificationModelProtocol?((uint64_t)v122, (uint64_t *)&demangling cache variable for type metadata for (id: String, url: URL?));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_41_21();
          v100 = v132;
        }
        v109 = *(void *)(v100 + 16);
        if (v109 >= *(void *)(v100 + 24) >> 1)
        {
          OUTLINED_FUNCTION_42_17();
          v100 = v132;
        }
        OUTLINED_FUNCTION_33_20();
        outlined init with take of SearchResultItem((uint64_t)v117, v110 + v111 * v109, (void (*)(void))type metadata accessor for WebImage);
        v98 += v121;
        v96 = v131 - 1;
      }
      while (v131 != 1);
    }
    OUTLINED_FUNCTION_16_1();
    v112();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_22_24();
LABEL_60:
    OUTLINED_FUNCTION_16_1();
    v113();
    v56 = v125;
LABEL_16:
    outlined destroy of PQAVerificationModelProtocol?(v56, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
    goto LABEL_17;
  }
  outlined destroy of PQAVerificationModelProtocol?(v118, &demangling cache variable for type metadata for Searchfoundation_Card?);
  if (one-time initialization token for search != -1) {
    swift_once();
  }
  v86 = type metadata accessor for Logger();
  v87 = (void *)OUTLINED_FUNCTION_43_1(v86, (uint64_t)static Logging.search);
  v88 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_24_13(v88))
  {
    v89 = (_WORD *)OUTLINED_FUNCTION_55();
    OUTLINED_FUNCTION_130_0(v89);
    OUTLINED_FUNCTION_99_3(&dword_257DC6000, v90, v91, "No SFCard found in the web_image layout snippet component");
    OUTLINED_FUNCTION_34();
  }

  OUTLINED_FUNCTION_22_24();
  OUTLINED_FUNCTION_16_1();
  v92();
  outlined destroy of PQAVerificationModelProtocol?(v125, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
LABEL_17:
  OUTLINED_FUNCTION_119_0();
}

uint64_t static GlobalSearchResponseProcessor.parseCardForURL(card:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, url: URL?)?);
  MEMORY[0x270FA5388](v0 - 8);
  v2 = (void *)((char *)v59 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, url: URL?));
  uint64_t v68 = *(void *)(v79 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v79);
  uint64_t v78 = (uint64_t)v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v67 = (uint64_t)v59 - v5;
  uint64_t v63 = type metadata accessor for Searchfoundation_GridCardSection();
  uint64_t v6 = *(void *)(v63 - 8);
  MEMORY[0x270FA5388](v63);
  v62 = (char *)v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = type metadata accessor for Searchfoundation_CardSectionValue();
  uint64_t v8 = *(void *)(v73 - 8);
  MEMORY[0x270FA5388](v73);
  v10 = (char *)v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Searchfoundation_CardSection();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  v15 = (char *)v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  v69 = (char *)v59 - v17;
  MEMORY[0x270FA5388](v16);
  v19 = (char *)v59 - v18;
  uint64_t v20 = Searchfoundation_Card.cardSections.getter();
  uint64_t v21 = *(void *)(v20 + 16);
  v70 = v2;
  v80 = v15;
  uint64_t v60 = v12;
  if (v21)
  {
    v66 = v10;
    uint64_t v22 = v12 + 16;
    v76 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    unint64_t v23 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v59[1] = v20;
    unint64_t v71 = v23;
    unint64_t v24 = v20 + v23;
    v81 = *(void (**)(char *, unint64_t, uint64_t))(v22 + 56);
    uint64_t v77 = v22;
    v75 = (void (**)(char *, uint64_t))(v22 - 8);
    v25 = (void (**)(char *, uint64_t))(v8 + 8);
    v61 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v26 = MEMORY[0x263F8EE78];
    v27 = v69;
    v64 = v25;
    v65 = v19;
    while (1)
    {
      v28 = v76;
      v76(v19, (char *)v24, v11);
      char v29 = Searchfoundation_CardSection.hasValue.getter();
      v28(v27, v19, v11);
      if (v29)
      {
        uint64_t v74 = v26;
        v30 = v27;
        uint64_t v31 = v11;
        v32 = v66;
        v33 = v75;
        Searchfoundation_CardSection.value.getter();
        char v34 = Searchfoundation_CardSectionValue.hasGridCardSection.getter();
        v72 = *v64;
        v72(v32, v73);
        v35 = *v33;
        v36 = v30;
        uint64_t v37 = v31;
        (*v33)(v36, v31);
        if (v34)
        {
          v19 = v65;
          Searchfoundation_CardSection.value.getter();
          v38 = v62;
          Searchfoundation_CardSectionValue.gridCardSection.getter();
          v72(v32, v73);
          uint64_t v39 = Searchfoundation_GridCardSection.cardSections.getter();
          (*v61)(v38, v63);
          uint64_t v11 = v37;
          uint64_t v26 = v74;
          v27 = v69;
        }
        else
        {
          uint64_t v39 = MEMORY[0x263F8EE78];
          uint64_t v11 = v31;
          uint64_t v26 = v74;
          v27 = v69;
          v19 = v65;
        }
      }
      else
      {
        v35 = *v75;
        (*v75)(v27, v11);
        uint64_t v39 = MEMORY[0x263F8EE78];
      }
      v35(v19, v11);
      v40 = *(void (***)(char *, uint64_t))(v39 + 16);
      uint64_t v41 = *(void *)(v26 + 16);
      v15 = (char *)v40 + v41;
      if (__OFADD__(v41, v40)) {
        break;
      }
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || (uint64_t)v15 > *(void *)(v26 + 24) >> 1)
      {
        if (v41 <= (uint64_t)v15) {
          uint64_t v43 = (uint64_t)v40 + v41;
        }
        else {
          uint64_t v43 = v41;
        }
        uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v43, 1, v26);
      }
      v15 = v80;
      if (*(void *)(v39 + 16))
      {
        uint64_t v44 = *(void *)(v26 + 16);
        if ((*(void *)(v26 + 24) >> 1) - v44 < (uint64_t)v40) {
          goto LABEL_44;
        }
        unint64_t v45 = v26 + v71 + v44 * (void)v81;
        if (v39 + v71 < v45 + (void)v40 * (void)v81 && v45 < v39 + v71 + (void)v40 * (void)v81) {
          goto LABEL_46;
        }
        swift_arrayInitWithCopy();
        if (v40)
        {
          uint64_t v47 = *(void *)(v26 + 16);
          BOOL v48 = __OFADD__(v47, v40);
          v49 = (char *)v40 + v47;
          if (v48) {
            goto LABEL_45;
          }
          *(void *)(v26 + 16) = v49;
        }
      }
      else if (v40)
      {
        goto LABEL_43;
      }
      swift_bridgeObjectRelease();
      v24 += (unint64_t)v81;
      if (!--v21)
      {
        swift_bridgeObjectRelease();
        v2 = v70;
        goto LABEL_29;
      }
    }
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    (*v40)(v15, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_46:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v26 = MEMORY[0x263F8EE78];
LABEL_29:
    uint64_t v50 = *(void *)(v26 + 16);
    if (v50)
    {
      uint64_t v51 = v60 + 16;
      v81 = *(void (**)(char *, unint64_t, uint64_t))(v60 + 16);
      unint64_t v52 = v26 + ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80));
      v53 = (void (**)(char *, uint64_t))(v60 + 8);
      uint64_t v77 = *(void *)(v60 + 72);
      swift_bridgeObjectRetain();
      uint64_t v54 = MEMORY[0x263F8EE78];
      do
      {
        v81(v15, v52, v11);
        closure #2 in static GlobalSearchResponseProcessor.parseCardForURL(card:)(v15, v2);
        (*v53)(v15, v11);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2, 1, v79) == 1)
        {
          outlined destroy of PQAVerificationModelProtocol?((uint64_t)v2, &demangling cache variable for type metadata for (id: String, url: URL?)?);
        }
        else
        {
          uint64_t v55 = v51;
          uint64_t v56 = v67;
          outlined init with take of PQAVerificationModelProtocol?((uint64_t)v2, v67, (uint64_t *)&demangling cache variable for type metadata for (id: String, url: URL?));
          outlined init with take of PQAVerificationModelProtocol?(v56, v78, (uint64_t *)&demangling cache variable for type metadata for (id: String, url: URL?));
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          unint64_t v57 = *(void *)(v54 + 16);
          if (v57 >= *(void *)(v54 + 24) >> 1) {
            uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          *(void *)(v54 + 16) = v57 + 1;
          outlined init with take of PQAVerificationModelProtocol?(v78, v54+ ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80))+ *(void *)(v68 + 72) * v57, (uint64_t *)&demangling cache variable for type metadata for (id: String, url: URL?));
          v2 = v70;
          uint64_t v51 = v55;
          v15 = v80;
        }
        v52 += v77;
        --v50;
      }
      while (v50);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x263F8EE78];
    }
    return v54;
  }
  return result;
}

uint64_t static GlobalSearchResponseProcessor.makeLegacySnippet(layoutSnippet:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent();
  os_log_t v84 = *(os_log_t *)(v2 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  v81 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v74 - v5;
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_Legacy_PodView();
  uint64_t v8 = *(void *)(v7 - 8);
  v82 = (uint8_t *)v7;
  uint64_t v83 = v8;
  MEMORY[0x270FA5388](v7);
  v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet();
  uint64_t v76 = *(void *)(v14 - 8);
  uint64_t v77 = v14;
  MEMORY[0x270FA5388](v14);
  v75 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Apple_Parsec_Siri_Legacy_LegacySnippet();
  uint64_t v79 = *(void *)(v22 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  uint64_t v74 = (char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v78 = (char *)&v74 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  v80 = (char *)&v74 - v28;
  uint64_t v29 = MEMORY[0x25A2C5D40](v27);
  specialized Collection.first.getter(v29, (uint64_t)v18);
  swift_bridgeObjectRelease();
  uint64_t v30 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails();
  if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v30) == 1)
  {
    outlined destroy of PQAVerificationModelProtocol?((uint64_t)v18, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails?);
    uint64_t v31 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet();
    __swift_storeEnumTagSinglePayload((uint64_t)v21, 1, 1, v31);
LABEL_4:
    outlined destroy of PQAVerificationModelProtocol?((uint64_t)v21, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
LABEL_5:
    os_log_t v33 = v84;
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logging.search);
    isa = (void (*)(char *, uint64_t, uint64_t))v33[2].isa;
    isa(v6, a1, v2);
    v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v83 = swift_slowAlloc();
      uint64_t v86 = v83;
      *(_DWORD *)v38 = 136315138;
      v82 = v38 + 4;
      isa(v81, (uint64_t)v6, v2);
      uint64_t v39 = String.init<A>(describing:)();
      uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v33[1].isa)(v6, v2);
      _os_log_impl(&dword_257DC6000, v36, v37, "InfoViewFactory invalid legacy snippet %s", v38, 0xCu);
      uint64_t v41 = v83;
      swift_arrayDestroy();
      MEMORY[0x25A2C94B0](v41, -1, -1);
      MEMORY[0x25A2C94B0](v38, -1, -1);
    }
    else
    {
      ((void (*)(char *, uint64_t))v33[1].isa)(v6, v2);
    }

    return MEMORY[0x263F8EE78];
  }
  Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.snippet.getter();
  (*(void (**)(char *, uint64_t))(*(void *)(v30 - 8) + 8))(v18, v30);
  uint64_t v32 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet();
  if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v32) == 1) {
    goto LABEL_4;
  }
  uint64_t v44 = *(void *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v44 + 88))(v21, v32) != *MEMORY[0x263F5CFF0])
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v21, v32);
    goto LABEL_5;
  }
  (*(void (**)(char *, uint64_t))(v44 + 96))(v21, v32);
  uint64_t v46 = v79;
  unint64_t v45 = v80;
  (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v80, v21, v22);
  Apple_Parsec_Siri_Legacy_LegacySnippet.snippet.getter();
  uint64_t v47 = type metadata accessor for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet();
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v47) == 1)
  {
    outlined destroy of PQAVerificationModelProtocol?((uint64_t)v13, &demangling cache variable for type metadata for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet?);
    goto LABEL_38;
  }
  uint64_t v48 = *(void *)(v47 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v48 + 88))(v13, v47) != *MEMORY[0x263F5C9F8])
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v13, v47);
LABEL_38:
    v42 = v78;
    if (one-time initialization token for search == -1)
    {
LABEL_39:
      uint64_t v61 = type metadata accessor for Logger();
      __swift_project_value_buffer(v61, (uint64_t)static Logging.search);
      v62 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
      v62(v42, v45, v22);
      uint64_t v63 = v42;
      v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v66 = swift_slowAlloc();
        os_log_t v84 = v64;
        uint64_t v67 = (uint8_t *)v66;
        uint64_t v68 = swift_slowAlloc();
        uint64_t v86 = v68;
        *(_DWORD *)uint64_t v67 = 136315138;
        uint64_t v83 = (uint64_t)(v67 + 4);
        v62(v74, v63, v22);
        uint64_t v69 = String.init<A>(describing:)();
        uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        unint64_t v71 = *(void (**)(char *, uint64_t))(v46 + 8);
        v71(v63, v22);
        os_log_t v72 = v84;
        _os_log_impl(&dword_257DC6000, v84, v65, "InfoViewFactory invalid general knowledge snippet %s", v67, 0xCu);
        swift_arrayDestroy();
        uint64_t v73 = v68;
        unint64_t v45 = v80;
        MEMORY[0x25A2C94B0](v73, -1, -1);
        MEMORY[0x25A2C94B0](v67, -1, -1);
      }
      else
      {
        unint64_t v71 = *(void (**)(char *, uint64_t))(v46 + 8);
        v71(v63, v22);
      }
      v71(v45, v22);
      return MEMORY[0x263F8EE78];
    }
LABEL_49:
    swift_once();
    goto LABEL_39;
  }
  uint64_t v74 = (char *)v22;
  (*(void (**)(char *, uint64_t))(v48 + 96))(v13, v47);
  (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v75, v13, v77);
  uint64_t v78 = (char *)Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.pods.getter();
  uint64_t v22 = *((void *)v78 + 2);
  if (v22)
  {
    v49 = *(NSObject **)(v83 + 16);
    v83 += 16;
    os_log_t v84 = v49;
    unint64_t v45 = &v78[(*(unsigned __int8 *)(v83 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 64)];
    uint64_t v50 = (void (**)(char *, uint8_t *))(v83 - 8);
    v81 = *(char **)(v83 + 56);
    swift_bridgeObjectRetain();
    v42 = (char *)MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v51 = v82;
      ((void (*)(char *, char *, uint8_t *))v84)(v10, v45, v82);
      closure #1 in static GlobalSearchResponseProcessor.makeLegacySnippet(layoutSnippet:)((uint64_t)v10, &v86);
      (*v50)(v10, v51);
      uint64_t v52 = v86;
      uint64_t v53 = *(void *)(v86 + 16);
      uint64_t v46 = *((void *)v42 + 2);
      if (__OFADD__(v46, v53)) {
        break;
      }
      if (!swift_isUniquelyReferenced_nonNull_native() || v46 + v53 > *((void *)v42 + 3) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v42 = v54;
      }
      if (*(void *)(v52 + 16))
      {
        uint64_t v55 = *((void *)v42 + 2);
        if ((*((void *)v42 + 3) >> 1) - v55 < v53) {
          goto LABEL_47;
        }
        unint64_t v56 = (unint64_t)&v42[16 * v55 + 32];
        if (v52 + 32 < v56 + 16 * v53 && v56 < v52 + 32 + 16 * v53)
        {
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        swift_arrayInitWithCopy();
        if (v53)
        {
          uint64_t v58 = *((void *)v42 + 2);
          BOOL v59 = __OFADD__(v58, v53);
          uint64_t v60 = v58 + v53;
          if (v59) {
            goto LABEL_48;
          }
          *((void *)v42 + 2) = v60;
        }
      }
      else if (v53)
      {
        goto LABEL_46;
      }
      swift_bridgeObjectRelease();
      unint64_t v45 = &v81[(void)v45];
      if (!--v22)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v46 = v79;
        unint64_t v45 = v80;
        goto LABEL_44;
      }
    }
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  swift_bridgeObjectRelease();
  v42 = (char *)MEMORY[0x263F8EE78];
LABEL_44:
  (*(void (**)(char *, uint64_t))(v76 + 8))(v75, v77);
  (*(void (**)(char *, char *))(v46 + 8))(v45, v74);
  return (uint64_t)v42;
}

void closure #1 in static GlobalSearchResponseProcessor.makeGeoLocations(experience:)(uint64_t a1, char *a2)
{
  uint64_t v43 = a2;
  uint64_t v44 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoObjectComponent();
  uint64_t v2 = *(void *)(v44 - 8);
  MEMORY[0x270FA5388](v44);
  uint64_t v4 = (char *)v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainObjectComponent.OneOf_Component?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent.OneOf_Component();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  v42 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  unint64_t v45 = (char *)v39 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v39 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)v39 - v17;
  Apple_Parsec_Siri_V2alpha_DomainObjectComponent.component.getter();
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8) == 1)
  {
    outlined destroy of PQAVerificationModelProtocol?((uint64_t)v7, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainObjectComponent.OneOf_Component?);
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logging.search);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_257DC6000, v20, v21, "PegasusResult component missing type", v22, 2u);
      MEMORY[0x25A2C94B0](v22, -1, -1);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v7, v8);
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v23(v16, v18, v8);
    if ((*(unsigned int (**)(char *, uint64_t))(v9 + 88))(v16, v8) == *MEMORY[0x263F5CFC8])
    {
      (*(void (**)(char *, uint64_t))(v9 + 96))(v16, v8);
      uint64_t v24 = v44;
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v16, v44);
      uint64_t v25 = v43;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v26 = *(void *)(*(void *)v25 + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v26);
      uint64_t v27 = *(void *)v25;
      *(void *)(v27 + 16) = v26 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v2 + 16))(v27+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v26, v4, v24);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v24);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
    }
    else
    {
      uint64_t v44 = v9;
      if (one-time initialization token for search != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Logging.search);
      uint64_t v29 = v45;
      v23(v45, v18, v8);
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = v23;
        os_log_t v33 = (uint8_t *)swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        uint64_t v47 = v41;
        uint64_t v43 = v18;
        *(_DWORD *)os_log_t v33 = 136315138;
        v39[1] = v33 + 4;
        unint64_t v40 = v33;
        v32(v42, v29, v8);
        uint64_t v34 = String.init<A>(describing:)();
        uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v36 = *(void (**)(char *, uint64_t))(v44 + 8);
        v36(v29, v8);
        os_log_type_t v37 = v40;
        _os_log_impl(&dword_257DC6000, v30, v31, "PegasusResult skipping component %s", v40, 0xCu);
        uint64_t v38 = v41;
        swift_arrayDestroy();
        MEMORY[0x25A2C94B0](v38, -1, -1);
        MEMORY[0x25A2C94B0](v37, -1, -1);

        v36(v43, v8);
      }
      else
      {

        v36 = *(void (**)(char *, uint64_t))(v44 + 8);
        v36(v29, v8);
        v36(v18, v8);
      }
      v36(v16, v8);
    }
  }
}

uint64_t GeoLocation.init(geoObject:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mapspb_Hours?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_11_0();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_66_14();
  type metadata accessor for Locationpb_Location();
  OUTLINED_FUNCTION_1();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_95_1();
  MEMORY[0x270FA5388](v10);
  uint64_t v55 = Mapspb_LocalSearchBusiness.uid.getter();
  uint64_t v11 = Mapspb_LocalSearchBusiness.name.getter();
  uint64_t v53 = v12;
  uint64_t v54 = v11;
  uint64_t v13 = Mapspb_LocalSearchBusiness.address.getter();
  uint64_t v51 = v14;
  uint64_t v52 = v13;
  uint64_t v15 = Mapspb_LocalSearchBusiness.thoroughfare.getter();
  uint64_t v49 = v16;
  uint64_t v50 = v15;
  uint64_t v17 = Mapspb_LocalSearchBusiness.placeCardURL.getter();
  uint64_t v47 = v18;
  uint64_t v48 = v17;
  Mapspb_LocalSearchBusiness.location.getter();
  Locationpb_Location.lat.getter();
  int v20 = v19;
  os_log_type_t v21 = *(void (**)(void))(v8 + 8);
  OUTLINED_FUNCTION_30();
  v21();
  Mapspb_LocalSearchBusiness.location.getter();
  Locationpb_Location.lon.getter();
  int v23 = v22;
  OUTLINED_FUNCTION_30();
  v21();
  uint64_t v46 = Mapspb_LocalSearchBusiness.telephone.getter();
  uint64_t v24 = Mapspb_LocalSearchBusiness.url.getter();
  uint64_t v44 = v25;
  uint64_t v45 = v24;
  uint64_t v43 = Mapspb_LocalSearchBusiness.photos.getter();
  uint64_t v26 = Mapspb_LocalSearchBusiness.category.getter();
  uint64_t v41 = v27;
  uint64_t v42 = v26;
  uint64_t v28 = Mapspb_LocalSearchBusiness.subcategory.getter();
  uint64_t v30 = v29;
  uint64_t v31 = Mapspb_LocalSearchBusiness.openingHours.getter();
  specialized Collection.first.getter(v31, v2);
  swift_bridgeObjectRelease();
  uint64_t v32 = type metadata accessor for Mapspb_Hours();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v2, 1, v32);
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of PQAVerificationModelProtocol?(v2, &demangling cache variable for type metadata for Mapspb_Hours?);
    int v34 = 0;
  }
  else
  {
    int v34 = MEMORY[0x25A2C5560]();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v2, v32);
  }
  uint64_t v35 = Mapspb_LocalSearchBusiness.openingHours.getter();
  specialized Collection.first.getter(v35, v1);
  swift_bridgeObjectRelease();
  int v36 = __swift_getEnumTagSinglePayload(v1, 1, v32);
  if (v36 == 1)
  {
    type metadata accessor for Mapspb_LocalSearchBusiness();
    OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_16_1();
    v37();
    uint64_t result = outlined destroy of PQAVerificationModelProtocol?(v1, &demangling cache variable for type metadata for Mapspb_Hours?);
    int v39 = 0;
  }
  else
  {
    int v39 = Mapspb_Hours.closeTime.getter();
    type metadata accessor for Mapspb_LocalSearchBusiness();
    OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_16_1();
    v40();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v1, v32);
  }
  *(void *)a1 = v55;
  *(void *)(a1 + 8) = v54;
  *(void *)(a1 + 16) = v53;
  *(void *)(a1 + 24) = v52;
  *(void *)(a1 + 32) = v51;
  *(void *)(a1 + 40) = v50;
  *(void *)(a1 + 48) = v49;
  *(void *)(a1 + 56) = v48;
  *(void *)(a1 + 64) = v47;
  *(_DWORD *)(a1 + 72) = v20;
  *(_DWORD *)(a1 + 76) = v23;
  *(void *)(a1 + 80) = v46;
  *(void *)(a1 + 88) = v45;
  *(void *)(a1 + 96) = v44;
  *(void *)(a1 + 104) = v43;
  *(void *)(a1 + 112) = v42;
  *(void *)(a1 + 120) = v41;
  *(void *)(a1 + 128) = v28;
  *(void *)(a1 + 136) = v30;
  *(_DWORD *)(a1 + 144) = v34;
  *(unsigned char *)(a1 + 148) = EnumTagSinglePayload == 1;
  *(_DWORD *)(a1 + 152) = v39;
  *(unsigned char *)(a1 + 156) = v36 == 1;
  return result;
}

void static GlobalSearchResponseProcessor.makeWebAnswer(experience:)()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Searchfoundation_URL?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_184_0();
  OUTLINED_FUNCTION_22_13(v5);
  uint64_t v179 = type metadata accessor for Searchfoundation_Punchout();
  OUTLINED_FUNCTION_1();
  uint64_t v216 = v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v177 = OUTLINED_FUNCTION_26_24(v8, v159[0]);
  OUTLINED_FUNCTION_1();
  uint64_t v175 = v9;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_44_3();
  uint64_t v176 = type metadata accessor for Searchfoundation_AttributionFooterCardSection();
  OUTLINED_FUNCTION_1();
  uint64_t v213 = (uint64_t)v11;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_184_0();
  OUTLINED_FUNCTION_22_13(v13);
  uint64_t v210 = type metadata accessor for Searchfoundation_Text();
  OUTLINED_FUNCTION_1();
  unint64_t v212 = v14;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_184_0();
  uint64_t v209 = v16;
  OUTLINED_FUNCTION_26_8();
  uint64_t v17 = type metadata accessor for Searchfoundation_FormattedText();
  OUTLINED_FUNCTION_1();
  uint64_t v184 = v18;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_185_0();
  uint64_t v201 = v20;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_43_4();
  uint64_t v214 = v22;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_43_4();
  v215 = v24;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)v159 - v26;
  uint64_t v189 = type metadata accessor for Searchfoundation_RichText();
  OUTLINED_FUNCTION_1();
  uint64_t v211 = v28;
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_184_0();
  OUTLINED_FUNCTION_22_13(v30);
  uint64_t v183 = type metadata accessor for Searchfoundation_RichTitleCardSection();
  OUTLINED_FUNCTION_1();
  unint64_t v203 = v31;
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_184_0();
  v182 = v33;
  uint64_t v188 = type metadata accessor for Searchfoundation_CardSectionValue();
  OUTLINED_FUNCTION_1();
  unint64_t v208 = v34;
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_184_0();
  uint64_t v187 = v36;
  uint64_t v199 = type metadata accessor for Searchfoundation_CardSectionType();
  OUTLINED_FUNCTION_1();
  v191 = v37;
  MEMORY[0x270FA5388](v38);
  v197 = (char *)v159 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v40);
  OUTLINED_FUNCTION_27_10();
  OUTLINED_FUNCTION_22_13(v41);
  uint64_t v204 = type metadata accessor for Searchfoundation_CardSection();
  OUTLINED_FUNCTION_1();
  uint64_t v198 = v42;
  MEMORY[0x270FA5388](v43);
  OUTLINED_FUNCTION_184_0();
  uint64_t v205 = v44;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v46 = OUTLINED_FUNCTION_81(v45);
  MEMORY[0x270FA5388](v46);
  OUTLINED_FUNCTION_185_0();
  uint64_t v172 = v47;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v48);
  OUTLINED_FUNCTION_66_14();
  uint64_t v49 = type metadata accessor for Searchfoundation_Card();
  OUTLINED_FUNCTION_1();
  uint64_t v51 = v50;
  MEMORY[0x270FA5388](v52);
  OUTLINED_FUNCTION_184_0();
  uint64_t v169 = v53;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent?);
  uint64_t v55 = OUTLINED_FUNCTION_81(v54);
  MEMORY[0x270FA5388](v55);
  OUTLINED_FUNCTION_21_7();
  uint64_t v56 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent();
  OUTLINED_FUNCTION_1();
  uint64_t v168 = v57;
  MEMORY[0x270FA5388](v58);
  OUTLINED_FUNCTION_184_0();
  uint64_t v167 = v59;
  uint64_t v60 = static GlobalSearchResponseProcessor.parseExperience(experience:)();
  if (!v60)
  {
LABEL_5:
    if (one-time initialization token for search == -1)
    {
LABEL_6:
      uint64_t v63 = type metadata accessor for Logger();
      v64 = (void *)OUTLINED_FUNCTION_43_1(v63, (uint64_t)static Logging.search);
      os_log_type_t v65 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_24_13(v65))
      {
        uint64_t v66 = (_WORD *)OUTLINED_FUNCTION_55();
        OUTLINED_FUNCTION_130_0(v66);
        OUTLINED_FUNCTION_99_3(&dword_257DC6000, v67, v68, "Layout snippet missing in the web answer experience components");
        OUTLINED_FUNCTION_34();
      }

      goto LABEL_9;
    }
LABEL_60:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v61 = v60;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized Collection.first.getter(v61, v2);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_53_2(v2, 1, v56);
  if (v62)
  {
    outlined destroy of PQAVerificationModelProtocol?(v2, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent?);
    goto LABEL_5;
  }
  uint64_t v161 = v56;
  OUTLINED_FUNCTION_58_1();
  v69();
  uint64_t v70 = v169;
  static GlobalSearchResponseProcessor.makeCard(layoutSnippet:)();
  uint64_t v71 = Searchfoundation_Card.entityIdentifier.getter();
  unint64_t v73 = v72;
  Swift::String v160 = Data.base64EncodedString(options:)(0);
  outlined consume of Data._Representation(v71, v73);
  uint64_t v74 = type metadata accessor for URL();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v74);
  uint64_t v196 = *(void *)(Searchfoundation_Card.cardSections.getter() + 16);
  if (v196)
  {
    uint64_t v165 = v1;
    v159[1] = v51;
    v159[2] = v49;
    v164 = v0;
    uint64_t v200 = 0;
    uint64_t v206 = 0;
    uint64_t v207 = 0;
    OUTLINED_FUNCTION_46_8();
    uint64_t v194 = v75 + v76;
    uint64_t v193 = v77 + 16;
    unsigned int v192 = *MEMORY[0x263F5CC28];
    uint64_t v78 = (uint64_t *)(v191 + 13);
    ++v191;
    unsigned int v181 = *MEMORY[0x263F5CC20];
    v190 = (void (**)(uint64_t, uint64_t))(v77 + 8);
    unint64_t v186 = v208 + 8;
    uint64_t v185 = v211 + 8;
    uint64_t v79 = v184 + 16;
    v80 = (void (**)(void))(v184 + 8);
    unint64_t v208 = v212 + 8;
    uint64_t v171 = v216 + 8;
    uint64_t v166 = v175 + 16;
    v163 = (void (**)(void (*)(void), uint64_t, void (*)(void)))(v175 + 32);
    uint64_t v162 = v175 + 8;
    v170 = (char *)(v213 + 8);
    unint64_t v180 = v203 + 8;
    unint64_t v212 = 0xE000000000000000;
    uint64_t v81 = v199;
    OUTLINED_FUNCTION_7_33();
    uint64_t v84 = v205;
    v202 = v78;
    uint64_t v195 = v82;
    uint64_t v211 = v79;
    v174 = v27;
    while (v83 < *(void *)(v82 + 16))
    {
      uint64_t v85 = *(void *)(v198 + 72);
      unint64_t v203 = v83;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v198 + 16))(v84, v194 + v85 * v83, v204);
      Searchfoundation_CardSection.type.getter();
      uint64_t v213 = *v78;
      ((void (*)(void (*)(void), void, uint64_t))v213)(v0, v192, v81);
      lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type Searchfoundation_CardSectionType and conformance Searchfoundation_CardSectionType, MEMORY[0x263F5CC30]);
      OUTLINED_FUNCTION_61_11();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v87 = v217;
      uint64_t v86 = v218;
      v88 = v0;
      uint64_t v0 = *v191;
      OUTLINED_FUNCTION_56_0();
      v0();
      OUTLINED_FUNCTION_56_0();
      v0();
      uint64_t v216 = (unint64_t)v80 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      if (v86 == v87)
      {
        OUTLINED_FUNCTION_55_18();
        uint64_t v84 = v205;
        Searchfoundation_CardSection.value.getter();
        uint64_t v0 = v182;
        Searchfoundation_CardSectionValue.richTitleCardSection.getter();
        OUTLINED_FUNCTION_17_24();
        OUTLINED_FUNCTION_16_1();
        v89();
        Searchfoundation_RichTitleCardSection.richSubtitle.getter();
        OUTLINED_FUNCTION_51_19();
        OUTLINED_FUNCTION_16_1();
        v90();
        uint64_t v70 = Searchfoundation_RichText.formattedTextPieces.getter();
        OUTLINED_FUNCTION_17_24();
        OUTLINED_FUNCTION_16_1();
        v91();
        uint64_t v92 = *(void *)(v70 + 16);
        if (v92)
        {
          OUTLINED_FUNCTION_46_8();
          uint64_t v213 = v70;
          uint64_t v94 = v70 + v93;
          uint64_t v96 = *(void *)(v95 + 72);
          v97 = *(void (**)(void))(v95 + 16);
          uint64_t v0 = v215;
          while (1)
          {
            OUTLINED_FUNCTION_30_26();
            v97();
            uint64_t v70 = Searchfoundation_FormattedText.isEmphasized.getter();
            OUTLINED_FUNCTION_30_26();
            v97();
            if ((v70 & 1) == 0) {
              break;
            }
            uint64_t v70 = Searchfoundation_FormattedText.hasText.getter();
            v98 = *v80;
            OUTLINED_FUNCTION_111_0();
            v98();
            if ((v70 & 1) == 0) {
              goto LABEL_20;
            }
            swift_bridgeObjectRelease();
            uint64_t v99 = v209;
            Searchfoundation_FormattedText.text.getter();
            uint64_t v70 = v99;
            uint64_t v206 = Searchfoundation_Text.text.getter();
            unint64_t v212 = v100;
            OUTLINED_FUNCTION_64_10();
            OUTLINED_FUNCTION_16_1();
            v101();
            OUTLINED_FUNCTION_58_13();
            OUTLINED_FUNCTION_111_0();
            v98();
LABEL_21:
            v94 += v96;
            --v92;
            uint64_t v0 = v215;
            if (!v92)
            {
              swift_bridgeObjectRelease();
              uint64_t v84 = v205;
              goto LABEL_35;
            }
          }
          v102 = v0;
          v98 = *v80;
          ((void (*)(void (*)(void), uint64_t))*v80)(v102, v17);
LABEL_20:
          uint64_t v103 = OUTLINED_FUNCTION_58_13();
          ((void (*)(uint64_t))v98)(v103);
          goto LABEL_21;
        }
        swift_bridgeObjectRelease();
LABEL_35:
        OUTLINED_FUNCTION_16_1();
        v121();
        uint64_t v81 = v199;
        OUTLINED_FUNCTION_7_33();
        goto LABEL_46;
      }
      Searchfoundation_CardSection.type.getter();
      ((void (*)(void (*)(void), void, uint64_t))v213)(v88, v181, v81);
      OUTLINED_FUNCTION_61_11();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v70 = v217;
      uint64_t v104 = v218;
      OUTLINED_FUNCTION_56_0();
      v0();
      OUTLINED_FUNCTION_56_0();
      v0();
      if (v104 == v70)
      {
        Searchfoundation_CardSection.value.getter();
        Searchfoundation_CardSectionValue.attributionFooterCardSection.getter();
        OUTLINED_FUNCTION_51_19();
        OUTLINED_FUNCTION_16_1();
        v105();
        Searchfoundation_AttributionFooterCardSection.leadingAttribution.getter();
        uint64_t v106 = Searchfoundation_RichText.formattedTextPieces.getter();
        OUTLINED_FUNCTION_51_19();
        OUTLINED_FUNCTION_16_1();
        v107();
        uint64_t v108 = *(void *)(v106 + 16);
        if (v108)
        {
          OUTLINED_FUNCTION_46_8();
          uint64_t v173 = v106;
          uint64_t v110 = v106 + v109;
          uint64_t v213 = *(void *)(v111 + 72);
          v112 = *(void (**)(void))(v111 + 16);
          uint64_t v113 = v201;
          while (1)
          {
            OUTLINED_FUNCTION_30_26();
            v112();
            char v114 = Searchfoundation_FormattedText.isEmphasized.getter();
            OUTLINED_FUNCTION_30_26();
            v112();
            if ((v114 & 1) == 0) {
              break;
            }
            char v115 = Searchfoundation_FormattedText.hasText.getter();
            v116 = *v80;
            OUTLINED_FUNCTION_111_0();
            v116();
            if ((v115 & 1) == 0) {
              goto LABEL_30;
            }
            swift_bridgeObjectRelease();
            Searchfoundation_FormattedText.text.getter();
            uint64_t v200 = Searchfoundation_Text.text.getter();
            uint64_t v207 = v117;
            OUTLINED_FUNCTION_64_10();
            uint64_t v118 = v201;
            OUTLINED_FUNCTION_16_1();
            v119();
            uint64_t v113 = v118;
            OUTLINED_FUNCTION_111_0();
            v116();
LABEL_31:
            v110 += v213;
            if (!--v108) {
              goto LABEL_36;
            }
          }
          v116 = *v80;
          ((void (*)(uint64_t, uint64_t))*v80)(v113, v17);
LABEL_30:
          ((void (*)(uint64_t, uint64_t))v116)(v214, v17);
          goto LABEL_31;
        }
LABEL_36:
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_55_18();
        Searchfoundation_AttributionFooterCardSection.leadingAttributionPunchout.getter();
        uint64_t v122 = Searchfoundation_Punchout.urls.getter();
        OUTLINED_FUNCTION_17_24();
        OUTLINED_FUNCTION_16_1();
        v123();
        uint64_t v81 = v199;
        uint64_t v78 = v202;
        if (*(void *)(v122 + 16))
        {
          OUTLINED_FUNCTION_46_8();
          uint64_t v126 = v178;
          uint64_t v0 = (void (*)(void))v177;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v125 + 16))(v178, v122 + v124, v177);
          uint64_t v127 = 0;
        }
        else
        {
          uint64_t v127 = 1;
          uint64_t v126 = v178;
          uint64_t v0 = (void (*)(void))v177;
        }
        uint64_t v84 = v205;
        __swift_storeEnumTagSinglePayload(v126, v127, 1, (uint64_t)v0);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_53_2(v126, 1, (uint64_t)v0);
        if (v62)
        {
          outlined destroy of PQAVerificationModelProtocol?(v126, &demangling cache variable for type metadata for Searchfoundation_URL?);
          if (one-time initialization token for search != -1) {
            swift_once();
          }
          uint64_t v128 = type metadata accessor for Logger();
          uint64_t v70 = OUTLINED_FUNCTION_43_1(v128, (uint64_t)static Logging.search);
          os_log_type_t v129 = static os_log_type_t.error.getter();
          os_log_type_enabled((os_log_t)v70, v129);
          OUTLINED_FUNCTION_7_33();
          if (v130)
          {
            v131 = (uint8_t *)OUTLINED_FUNCTION_55();
            *(_WORD *)v131 = 0;
            _os_log_impl(&dword_257DC6000, (os_log_t)v70, v129, "No URL available in the attribution footer punchout", v131, 2u);
            uint64_t v81 = v199;
            OUTLINED_FUNCTION_34();
          }

          OUTLINED_FUNCTION_16_1();
          v132();
          uint64_t v84 = v205;
          (*v190)(v205, v204);
LABEL_46:
          uint64_t v78 = v202;
          goto LABEL_47;
        }
        (*v163)(v164, v126, v0);
        Searchfoundation_URL.address.getter();
        uint64_t v133 = v172;
        URL.init(string:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_17_24();
        OUTLINED_FUNCTION_16_1();
        v134();
        OUTLINED_FUNCTION_16_1();
        v135();
        OUTLINED_FUNCTION_16_1();
        v136();
        uint64_t v137 = v165;
        uint64_t v70 = (uint64_t)&demangling cache variable for type metadata for URL?;
        outlined destroy of PQAVerificationModelProtocol?(v165, &demangling cache variable for type metadata for URL?);
        outlined init with take of PQAVerificationModelProtocol?(v133, v137, &demangling cache variable for type metadata for URL?);
        OUTLINED_FUNCTION_7_33();
      }
      else
      {
        uint64_t v84 = v205;
        OUTLINED_FUNCTION_16_1();
        v120();
        OUTLINED_FUNCTION_7_33();
        uint64_t v78 = v202;
        uint64_t v81 = v199;
      }
LABEL_47:
      unint64_t v83 = v203 + 1;
      uint64_t v82 = v195;
      if (v203 + 1 == v196)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = v165;
        uint64_t v139 = v206;
        uint64_t v138 = v207;
        uint64_t v140 = v200;
        unint64_t v141 = v212;
        goto LABEL_50;
      }
    }
    __break(1u);
    goto LABEL_60;
  }
  swift_bridgeObjectRelease();
  uint64_t v140 = 0;
  uint64_t v138 = 0;
  uint64_t v139 = 0;
  unint64_t v141 = 0xE000000000000000;
LABEL_50:
  uint64_t v142 = HIBYTE(v141) & 0xF;
  if ((v141 & 0x2000000000000000) == 0) {
    uint64_t v142 = v139 & 0xFFFFFFFFFFFFLL;
  }
  if (v142)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<WebAnswer>);
    unint64_t v143 = v141;
    OUTLINED_FUNCTION_60_11();
    type metadata accessor for WebAnswer();
    OUTLINED_FUNCTION_15_28();
    uint64_t v144 = OUTLINED_FUNCTION_35_23();
    *(_OWORD *)(v144 + 16) = xmmword_258661700;
    v145 = (uint64_t *)((char *)v0 + v144);
    outlined init with copy of SearchResult?(v1, (uint64_t)v145 + *(int *)(v70 + 36), &demangling cache variable for type metadata for URL?);
    object = v160._object;
    uint64_t *v145 = v160._countAndFlagsBits;
    v145[1] = (uint64_t)object;
    v145[2] = v139;
    v145[3] = v143;
    v145[4] = v140;
    v145[5] = v138;
    outlined destroy of PQAVerificationModelProtocol?(v1, &demangling cache variable for type metadata for URL?);
    uint64_t v147 = OUTLINED_FUNCTION_34_23();
    v148(v147);
    OUTLINED_FUNCTION_16_1();
    v149();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v150 = type metadata accessor for Logger();
    v151 = (void *)OUTLINED_FUNCTION_43_1(v150, (uint64_t)static Logging.search);
    os_log_type_t v152 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_24_13(v152))
    {
      v153 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_130_0(v153);
      OUTLINED_FUNCTION_99_3(&dword_257DC6000, v154, v155, "No answer available in the web answer card");
      OUTLINED_FUNCTION_34();
    }

    outlined destroy of PQAVerificationModelProtocol?(v1, &demangling cache variable for type metadata for URL?);
    uint64_t v156 = OUTLINED_FUNCTION_34_23();
    v157(v156);
    OUTLINED_FUNCTION_16_1();
    v158();
  }
LABEL_9:
  OUTLINED_FUNCTION_119_0();
}

void static GlobalSearchResponseProcessor.makeKnowledge(experience:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_104_0();
  a19 = v22;
  a20 = v23;
  uint64_t v169 = type metadata accessor for Searchfoundation_Text();
  OUTLINED_FUNCTION_1();
  uint64_t v206 = v24;
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_184_0();
  OUTLINED_FUNCTION_22_13(v26);
  uint64_t v168 = type metadata accessor for Searchfoundation_DescriptionCardSection();
  OUTLINED_FUNCTION_1();
  uint64_t v205 = v27;
  MEMORY[0x270FA5388](v28);
  uint64_t v191 = OUTLINED_FUNCTION_26_24(v29, v155);
  OUTLINED_FUNCTION_1();
  unint64_t v200 = v30;
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_184_0();
  uint64_t v190 = v32;
  OUTLINED_FUNCTION_26_8();
  uint64_t v183 = type metadata accessor for Searchfoundation_URLImage();
  OUTLINED_FUNCTION_1();
  unint64_t v199 = v33;
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_184_0();
  OUTLINED_FUNCTION_22_13(v35);
  uint64_t v182 = type metadata accessor for Searchfoundation_Image();
  OUTLINED_FUNCTION_1();
  v197 = v36;
  MEMORY[0x270FA5388](v37);
  OUTLINED_FUNCTION_184_0();
  uint64_t v181 = v38;
  uint64_t v189 = type metadata accessor for Searchfoundation_CardSectionValue();
  OUTLINED_FUNCTION_1();
  uint64_t v186 = v39;
  MEMORY[0x270FA5388](v40);
  OUTLINED_FUNCTION_184_0();
  uint64_t v188 = v41;
  uint64_t v180 = type metadata accessor for Searchfoundation_RichTitleCardSection();
  OUTLINED_FUNCTION_1();
  unint64_t v175 = v42;
  MEMORY[0x270FA5388](v43);
  OUTLINED_FUNCTION_184_0();
  uint64_t v179 = v44;
  uint64_t v201 = type metadata accessor for Searchfoundation_CardSectionType();
  OUTLINED_FUNCTION_1();
  uint64_t v46 = v45;
  MEMORY[0x270FA5388](v47);
  OUTLINED_FUNCTION_95_1();
  uint64_t v50 = v48 - v49;
  MEMORY[0x270FA5388](v51);
  uint64_t v53 = (char *)&v155 - v52;
  type metadata accessor for Searchfoundation_CardSection();
  OUTLINED_FUNCTION_1();
  uint64_t v202 = v54;
  uint64_t v203 = v55;
  MEMORY[0x270FA5388](v54);
  OUTLINED_FUNCTION_184_0();
  uint64_t v204 = v56;
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v58 = OUTLINED_FUNCTION_81(v57);
  MEMORY[0x270FA5388](v58);
  uint64_t v187 = (char *)&v155 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v60);
  OUTLINED_FUNCTION_43_4();
  uint64_t v170 = v61;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v62);
  OUTLINED_FUNCTION_27_10();
  OUTLINED_FUNCTION_22_13(v63);
  uint64_t v64 = type metadata accessor for Searchfoundation_Card();
  OUTLINED_FUNCTION_1();
  uint64_t v66 = v65;
  MEMORY[0x270FA5388](v67);
  OUTLINED_FUNCTION_12_7();
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent?);
  uint64_t v69 = OUTLINED_FUNCTION_81(v68);
  MEMORY[0x270FA5388](v69);
  uint64_t v70 = OUTLINED_FUNCTION_39_19();
  OUTLINED_FUNCTION_1();
  uint64_t v163 = v71;
  MEMORY[0x270FA5388](v72);
  OUTLINED_FUNCTION_184_0();
  uint64_t v162 = v73;
  uint64_t v74 = static GlobalSearchResponseProcessor.parseExperience(experience:)();
  if (!v74) {
    goto LABEL_5;
  }
  uint64_t v75 = v74;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized Collection.first.getter(v75, v21);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_53_2(v21, 1, v70);
  if (v76)
  {
    outlined destroy of PQAVerificationModelProtocol?(v21, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent?);
LABEL_5:
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v77 = type metadata accessor for Logger();
    uint64_t v78 = (void *)OUTLINED_FUNCTION_43_1(v77, (uint64_t)static Logging.search);
    os_log_type_t v79 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_24_13(v79))
    {
      v80 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_130_0(v80);
      OUTLINED_FUNCTION_99_3(&dword_257DC6000, v81, v82, "Layout snippet missing in the knowledge experience components");
      OUTLINED_FUNCTION_34();
    }

    goto LABEL_10;
  }
  uint64_t v160 = v66;
  uint64_t v161 = (int *)v64;
  uint64_t v158 = v70;
  OUTLINED_FUNCTION_58_1();
  v83();
  static GlobalSearchResponseProcessor.makeCard(layoutSnippet:)();
  uint64_t v84 = Searchfoundation_Card.resultIdentifier.getter();
  uint64_t v86 = v85;
  type metadata accessor for URL();
  OUTLINED_FUNCTION_53_14((uint64_t)&a15);
  OUTLINED_FUNCTION_53_14((uint64_t)&v201);
  uint64_t v159 = v20;
  if (*(void *)(Searchfoundation_Card.cardSections.getter() + 16))
  {
    uint64_t v156 = v84;
    uint64_t v157 = v86;
    uint64_t v198 = v50;
    uint64_t v166 = 0;
    uint64_t v176 = 0;
    OUTLINED_FUNCTION_62_12();
    uint64_t v167 = 0;
    uint64_t v87 = (void (**)(uint64_t, void, uint64_t))(v46 + 104);
    uint64_t v196 = *(void (**)(void))(v203 + 16);
    OUTLINED_FUNCTION_137();
    uint64_t v155 = v89;
    uint64_t v91 = v89 + v90;
    uint64_t v195 = *(void *)(v92 + 56);
    unsigned int v194 = *MEMORY[0x263F5CC28];
    uint64_t v193 = (void (**)(void))(v46 + 8);
    uint64_t v203 = v92;
    unsigned int v192 = (void (**)(void (**)(void, void, uint64_t), uint64_t))(v92 - 8);
    unsigned int v174 = *MEMORY[0x263F5CC10];
    v186 += 8;
    uint64_t v165 = v206 + 8;
    unint64_t v185 = v200 + 8;
    uint64_t v164 = v205 + 8;
    uint64_t v173 = v197 + 1;
    unint64_t v172 = v199 + 8;
    unint64_t v171 = v175 + 8;
    unint64_t v199 = 0xE000000000000000;
    unint64_t v200 = 0xE000000000000000;
    unint64_t v175 = 0xE000000000000000;
    uint64_t v93 = v204;
    v197 = v87;
    uint64_t v94 = v193;
    while (1)
    {
      uint64_t v205 = v91;
      uint64_t v206 = v88;
      v196(v93);
      Searchfoundation_CardSection.type.getter();
      uint64_t v95 = *v87;
      uint64_t v66 = (uint64_t)v53;
      uint64_t v96 = v198;
      uint64_t v97 = v201;
      (*v87)(v198, v194, v201);
      lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type Searchfoundation_CardSectionType and conformance Searchfoundation_CardSectionType, MEMORY[0x263F5CC30]);
      OUTLINED_FUNCTION_59_14();
      OUTLINED_FUNCTION_59_14();
      uint64_t v99 = v207;
      uint64_t v98 = v208;
      unint64_t v100 = *v94;
      OUTLINED_FUNCTION_111_0();
      v100(v101);
      OUTLINED_FUNCTION_111_0();
      v100(v102);
      if (v98 == v99)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_68_14();
        Searchfoundation_CardSectionValue.richTitleCardSection.getter();
        OUTLINED_FUNCTION_16_1();
        v104(v103);
        uint64_t v178 = Searchfoundation_RichTitleCardSection.title.getter();
        unint64_t v199 = v105;
        uint64_t v177 = Searchfoundation_RichTitleCardSection.subtitle.getter();
        unint64_t v200 = v106;
        OUTLINED_FUNCTION_55_18();
        Searchfoundation_RichTitleCardSection.titleImage.getter();
        Searchfoundation_Image.urlImage.getter();
        OUTLINED_FUNCTION_17_24();
        OUTLINED_FUNCTION_16_1();
        v108(v107);
        Searchfoundation_URLImage.urlValue.getter();
        OUTLINED_FUNCTION_16_1();
        v110(v109);
        Searchfoundation_URL.address.getter();
        OUTLINED_FUNCTION_16_1();
        v112(v111);
        uint64_t v113 = (uint64_t)v187;
        URL.init(string:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_16_1();
        v115(v114);
        OUTLINED_FUNCTION_16_1();
        v117(v116);
        uint64_t v118 = v184;
        outlined destroy of PQAVerificationModelProtocol?(v184, &demangling cache variable for type metadata for URL?);
        outlined init with take of PQAVerificationModelProtocol?(v113, v118, &demangling cache variable for type metadata for URL?);
        uint64_t v53 = (char *)v66;
      }
      else
      {
        Searchfoundation_CardSection.type.getter();
        v95(v96, v174, v97);
        OUTLINED_FUNCTION_59_14();
        OUTLINED_FUNCTION_59_14();
        uint64_t v120 = v207;
        uint64_t v119 = v208;
        OUTLINED_FUNCTION_111_0();
        v100(v121);
        OUTLINED_FUNCTION_111_0();
        v100(v122);
        uint64_t v53 = (char *)v66;
        if (v119 != v120)
        {
          uint64_t v93 = v204;
          (*v192)(v204, v202);
          goto LABEL_19;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_68_14();
        Searchfoundation_CardSectionValue.descriptionCardSection.getter();
        OUTLINED_FUNCTION_16_1();
        v124(v123);
        OUTLINED_FUNCTION_55_18();
        Searchfoundation_DescriptionCardSection.descriptionText.getter();
        uint64_t v167 = Searchfoundation_Text.text.getter();
        unint64_t v175 = v125;
        OUTLINED_FUNCTION_17_24();
        OUTLINED_FUNCTION_16_1();
        v127(v126);
        uint64_t v166 = Searchfoundation_DescriptionCardSection.attributionText.getter();
        uint64_t v176 = v128;
        Searchfoundation_DescriptionCardSection.attributionURL.getter();
        Searchfoundation_URL.address.getter();
        OUTLINED_FUNCTION_16_1();
        v130(v129);
        uint64_t v66 = (uint64_t)v187;
        URL.init(string:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_16_1();
        v132(v131);
        OUTLINED_FUNCTION_16_1();
        v134(v133);
        uint64_t v135 = v170;
        outlined destroy of PQAVerificationModelProtocol?(v170, &demangling cache variable for type metadata for URL?);
        outlined init with take of PQAVerificationModelProtocol?(v66, v135, &demangling cache variable for type metadata for URL?);
      }
      uint64_t v93 = v87;
LABEL_19:
      uint64_t v91 = v205 + v195;
      uint64_t v88 = v206 - 1;
      uint64_t v87 = v197;
      if (v206 == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v86 = v157;
        uint64_t v84 = v156;
        uint64_t v136 = v176;
        uint64_t v137 = v167;
        unint64_t v138 = v175;
        goto LABEL_22;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v166 = 0;
  uint64_t v136 = 0;
  OUTLINED_FUNCTION_62_12();
  uint64_t v137 = 0;
  unint64_t v199 = 0xE000000000000000;
  unint64_t v200 = 0xE000000000000000;
  unint64_t v138 = 0xE000000000000000;
LABEL_22:
  uint64_t v139 = HIBYTE(v138) & 0xF;
  if ((v138 & 0x2000000000000000) == 0) {
    uint64_t v139 = v137 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v140 = v161;
  if (v139)
  {
    uint64_t v167 = v137;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<KGDocument>);
    OUTLINED_FUNCTION_60_11();
    type metadata accessor for KGDocument();
    OUTLINED_FUNCTION_15_28();
    uint64_t v141 = OUTLINED_FUNCTION_35_23();
    *(_OWORD *)(v141 + 16) = xmmword_258661700;
    uint64_t v142 = (uint64_t *)(v141 + v66);
    uint64_t v143 = v170;
    outlined init with copy of SearchResult?(v170, v141 + v66 + v140[7], &demangling cache variable for type metadata for URL?);
    uint64_t v144 = v184;
    outlined init with copy of SearchResult?(v184, v141 + v66 + v140[11], &demangling cache variable for type metadata for URL?);
    *uint64_t v142 = v84;
    v142[1] = v86;
    v145 = (uint64_t *)(v141 + v66 + v140[8]);
    uint64_t *v145 = v167;
    v145[1] = v138;
    v146 = (uint64_t *)(v141 + v66 + v140[9]);
    unint64_t v147 = v199;
    uint64_t *v146 = v178;
    v146[1] = v147;
    v148 = (uint64_t *)(v141 + v66 + v140[10]);
    unint64_t v149 = v200;
    uint64_t *v148 = v177;
    v148[1] = v149;
    uint64_t v150 = (uint64_t *)(v141 + v66 + v140[12]);
    *uint64_t v150 = v166;
    v150[1] = v136;
    outlined destroy of PQAVerificationModelProtocol?(v143, &demangling cache variable for type metadata for URL?);
    outlined destroy of PQAVerificationModelProtocol?(v144, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of PQAVerificationModelProtocol?(v170, &demangling cache variable for type metadata for URL?);
    outlined destroy of PQAVerificationModelProtocol?(v184, &demangling cache variable for type metadata for URL?);
  }
  OUTLINED_FUNCTION_52_15();
  OUTLINED_FUNCTION_16_1();
  v152(v151);
  OUTLINED_FUNCTION_16_1();
  v154(v153);
LABEL_10:
  OUTLINED_FUNCTION_119_0();
}

uint64_t closure #1 in static GlobalSearchResponseProcessor.makeGlobalItems(experience:domain:lowConfidenceKnowledge:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  uint64_t v36 = a5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AppEntity?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GlobalDialog?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v17 = UUID.uuidString.getter();
  uint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v20 = type metadata accessor for GlobalDialog();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v12, a4, v20);
  __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v20);
  uint64_t v21 = GlobalDialog.print.getter();
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0) {
    uint64_t v24 = v21 & 0xFFFFFFFFFFFFLL;
  }
  if (v24) {
    uint64_t v25 = GlobalDialog.print.getter();
  }
  else {
    uint64_t v25 = GlobalDialog.speak.getter();
  }
  uint64_t v27 = v25;
  uint64_t v28 = v26;
  uint64_t v29 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppEntity();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v9, v34, v29);
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v29);
  swift_bridgeObjectRetain();
  unint64_t v30 = v36;
  GlobalItem.init(id:domain:dialog:text:parsecEntity:lowConfidenceKnowledge:)(v17, v19, v35, a3, (uint64_t)v12, v27, v28, (uint64_t)v9, v36, 0);
  uint64_t v31 = type metadata accessor for GlobalItem();
  return __swift_storeEnumTagSinglePayload((uint64_t)v30, 0, 1, v31);
}

uint64_t closure #2 in static GlobalSearchResponseProcessor.parseCardForURL(card:)@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v81 = a2;
  uint64_t v3 = type metadata accessor for Searchfoundation_URL();
  uint64_t v67 = *(void *)(v3 - 8);
  uint64_t v68 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v66 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for Searchfoundation_URLImage();
  uint64_t v72 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70);
  uint64_t v69 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Searchfoundation_Image();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v73 = v6;
  uint64_t v74 = v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v71 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for Searchfoundation_VerticalLayoutCardSection();
  uint64_t v77 = *(void *)(v75 - 8);
  MEMORY[0x270FA5388](v75);
  uint64_t v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for Searchfoundation_CardSectionValue();
  uint64_t v83 = *(void *)(v79 - 8);
  MEMORY[0x270FA5388](v79);
  uint64_t v78 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Searchfoundation_CardSection();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  v80 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v82 = (char *)&v61 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v61 - v19;
  MEMORY[0x270FA5388](v18);
  unint64_t v22 = (char *)&v61 - v21;
  char v23 = Searchfoundation_CardSection.hasValue.getter();
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v24(v22, a1, v12);
  if ((v23 & 1) == 0)
  {
    uint64_t v57 = *(void (**)(char *, uint64_t))(v13 + 8);
    v57(v22, v12);
    v24(v20, a1, v12);
    uint64_t v58 = v80;
LABEL_9:
    v57(v20, v12);
    uint64_t v59 = v82;
    v24(v82, a1, v12);
    v57(v59, v12);
LABEL_10:
    v24(v58, a1, v12);
    v57(v58, v12);
LABEL_11:
    uint64_t v48 = v81;
    goto LABEL_12;
  }
  uint64_t v65 = v10;
  uint64_t v25 = v78;
  Searchfoundation_CardSection.value.getter();
  char v26 = Searchfoundation_CardSectionValue.hasVerticalLayoutCardSection.getter();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v83 + 8);
  v83 += 8;
  uint64_t v64 = v27;
  v27(v25, v79);
  char v76 = *(void (**)(char *, uint64_t))(v13 + 8);
  v76(v22, v12);
  v24(v20, a1, v12);
  if ((v26 & 1) == 0)
  {
    uint64_t v58 = v80;
    uint64_t v57 = v76;
    goto LABEL_9;
  }
  uint64_t v28 = v78;
  Searchfoundation_CardSection.value.getter();
  uint64_t v63 = v24;
  uint64_t v29 = v65;
  Searchfoundation_CardSectionValue.verticalLayoutCardSection.getter();
  v64(v28, v79);
  char v30 = Searchfoundation_VerticalLayoutCardSection.hasThumbnail.getter();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v77 + 8);
  uint64_t v32 = v29;
  uint64_t v24 = v63;
  uint64_t v33 = v75;
  v77 += 8;
  uint64_t v62 = v31;
  v31(v32, v75);
  v76(v20, v12);
  uint64_t v34 = v82;
  v24(v82, a1, v12);
  if ((v30 & 1) == 0)
  {
    uint64_t v58 = v80;
    uint64_t v57 = v76;
    v76(v34, v12);
    goto LABEL_10;
  }
  uint64_t v35 = v78;
  Searchfoundation_CardSection.value.getter();
  uint64_t v36 = v65;
  Searchfoundation_CardSectionValue.verticalLayoutCardSection.getter();
  v64(v35, v79);
  uint64_t v37 = v33;
  uint64_t v38 = v71;
  Searchfoundation_VerticalLayoutCardSection.thumbnail.getter();
  v62(v36, v37);
  LOBYTE(v37) = Searchfoundation_Image.hasURLImage.getter();
  uint64_t v39 = v73;
  uint64_t v40 = *(void (**)(char *, uint64_t))(v74 + 8);
  uint64_t v41 = v38;
  v74 += 8;
  uint64_t v61 = v40;
  v40(v38, v73);
  v76(v82, v12);
  unint64_t v42 = v80;
  v63(v80, a1, v12);
  if ((v37 & 1) == 0)
  {
    v76(v42, v12);
    goto LABEL_11;
  }
  uint64_t v82 = a1;
  uint64_t v43 = v78;
  Searchfoundation_CardSection.value.getter();
  uint64_t v44 = v65;
  Searchfoundation_CardSectionValue.verticalLayoutCardSection.getter();
  v64(v43, v79);
  Searchfoundation_VerticalLayoutCardSection.thumbnail.getter();
  v62(v44, v75);
  uint64_t v45 = v69;
  Searchfoundation_Image.urlImage.getter();
  v61(v41, v39);
  LOBYTE(v43) = Searchfoundation_URLImage.hasURLValue.getter();
  uint64_t v46 = v72 + 8;
  uint64_t v47 = v70;
  uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v72 + 8);
  ((void (*)(char *, uint64_t))v63)(v45, v70);
  v76(v42, v12);
  uint64_t v48 = v81;
  if ((v43 & 1) == 0)
  {
LABEL_12:
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, url: URL?));
    uint64_t v54 = (uint64_t)v48;
    uint64_t v55 = 1;
    return __swift_storeEnumTagSinglePayload(v54, v55, 1, v56);
  }
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, url: URL?));
  v80 = (char *)v48 + *(int *)(v49 + 48);
  uint64_t v72 = v46;
  *uint64_t v48 = Searchfoundation_CardSection.resultIdentifier.getter();
  v48[1] = v50;
  uint64_t v51 = v78;
  Searchfoundation_CardSection.value.getter();
  uint64_t v52 = v65;
  Searchfoundation_CardSectionValue.verticalLayoutCardSection.getter();
  v64(v51, v79);
  Searchfoundation_VerticalLayoutCardSection.thumbnail.getter();
  v62(v52, v75);
  Searchfoundation_Image.urlImage.getter();
  v61(v41, v73);
  uint64_t v53 = v66;
  Searchfoundation_URLImage.urlValue.getter();
  ((void (*)(char *, uint64_t))v63)(v45, v47);
  Searchfoundation_URL.address.getter();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v53, v68);
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v54 = (uint64_t)v48;
  uint64_t v55 = 0;
  uint64_t v56 = v49;
  return __swift_storeEnumTagSinglePayload(v54, v55, 1, v56);
}

uint64_t closure #1 in static GlobalSearchResponseProcessor.makeCard(layoutSnippet:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v33 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v34 = (char *)&v30 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_CasinoSnippet();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.snippet.getter();
  uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v15) == 1)
  {
    outlined destroy of PQAVerificationModelProtocol?((uint64_t)v10, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
  }
  else
  {
    uint64_t v16 = v4;
    uint64_t v17 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v17 + 88))(v10, v15) == *MEMORY[0x263F5CFE8])
    {
      (*(void (**)(char *, uint64_t))(v17 + 96))(v10, v15);
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
      static GlobalSearchResponseProcessor.makeCard(casinoSnippet:)((uint64_t)v14, v35);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    uint64_t v4 = v16;
  }
  uint64_t v19 = v34;
  if (one-time initialization token for search != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logging.search);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v21(v19, a1, v3);
  unint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v37 = v32;
    uint64_t v31 = v24;
    *(_DWORD *)uint64_t v24 = 136315138;
    char v30 = v24 + 4;
    v21(v33, (uint64_t)v19, v3);
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v19, v3);
    uint64_t v27 = v31;
    _os_log_impl(&dword_257DC6000, v22, v23, "InfoViewFactory non casino snippet %s", v31, 0xCu);
    uint64_t v28 = v32;
    swift_arrayDestroy();
    MEMORY[0x25A2C94B0](v28, -1, -1);
    MEMORY[0x25A2C94B0](v27, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v19, v3);
  }

  uint64_t v29 = type metadata accessor for Searchfoundation_Card();
  return __swift_storeEnumTagSinglePayload(v35, 1, 1, v29);
}

uint64_t static GlobalSearchResponseProcessor.makeCard(casinoSnippet:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v3 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v4 = type metadata accessor for Google_Protobuf_Any();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v5 = type metadata accessor for Searchfoundation_Card();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_CasinoSnippet();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v26 - v14;
  if (Apple_Parsec_Siri_V2alpha_CasinoSnippet.hasCardData.getter())
  {
    Apple_Parsec_Siri_V2alpha_CasinoSnippet.cardData.getter();
    uint64_t v31 = 0;
    memset(v30, 0, sizeof(v30));
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(&lazy protocol witness table cache variable for type Searchfoundation_Card and conformance Searchfoundation_Card, MEMORY[0x263F5CB50]);
    uint64_t v16 = 0;
    Message.init(unpackingAny:extensions:options:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v29, v8, v5);
  }
  else
  {
    uint64_t v28 = v5;
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logging.search);
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v18(v15, a1, v9);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(void *)&v30[0] = v27;
      *(_DWORD *)uint64_t v21 = 136315138;
      v26[1] = v21 + 4;
      v18(v13, (uint64_t)v15, v9);
      uint64_t v22 = String.init<A>(describing:)();
      uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, (uint64_t *)v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
      _os_log_impl(&dword_257DC6000, v19, v20, "InfoViewFactory casinoSnippet has no card data %s", v21, 0xCu);
      uint64_t v16 = 1;
      uint64_t v24 = v27;
      swift_arrayDestroy();
      MEMORY[0x25A2C94B0](v24, -1, -1);
      MEMORY[0x25A2C94B0](v21, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);

      uint64_t v16 = 1;
    }
    uint64_t v5 = v28;
  }
  return __swift_storeEnumTagSinglePayload(v29, v16, 1, v5);
}

uint64_t closure #2 in static GlobalSearchResponseProcessor.makeCard(layoutSnippet:)(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = type metadata accessor for Searchfoundation_Card();
  uint64_t v5 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Searchfoundation_CardSource();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a2 + 16);
  if (v12)
  {
    uint64_t v25 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v26 = a2;
    uint64_t v27 = v9;
    uint64_t v28 = v8;
    uint64_t v29 = a1;
    uint64_t v30 = v2;
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v13 = v5 + 16;
    uint64_t v15 = a2 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
    uint64_t v31 = *(void *)(v13 + 56);
    uint64_t v32 = v14;
    uint64_t v33 = v13;
    uint64_t v16 = (void (**)(char *, uint64_t))(v13 - 8);
    swift_bridgeObjectRetain();
    uint64_t v17 = MEMORY[0x263F8EE78];
    do
    {
      uint64_t v18 = v34;
      v32(v7, v15, v34);
      uint64_t v19 = Searchfoundation_Card.cardSections.getter();
      (*v16)(v7, v18);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v17 = v21;
      }
      unint64_t v20 = *(void *)(v17 + 16);
      if (v20 >= *(void *)(v17 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v17 = v22;
      }
      *(void *)(v17 + 16) = v20 + 1;
      *(void *)(v17 + 8 * v20 + 32) = v19;
      v15 += v31;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    uint64_t v9 = v27;
    uint64_t v8 = v28;
    uint64_t v11 = v25;
  }
  else
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
  }
  specialized _copySequenceToContiguousArray<A>(_:)(v17);
  swift_bridgeObjectRelease();
  Searchfoundation_Card.cardSections.setter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F5CB90], v8);
  return Searchfoundation_Card.source.setter();
}

uint64_t closure #1 in static GlobalSearchResponseProcessor.makeLegacySnippet(layoutSnippet:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v88 = a2;
  uint64_t v95 = type metadata accessor for Apple_Parsec_Siri_Legacy_PodView();
  Class v90 = *(Class *)(v95 - 8);
  MEMORY[0x270FA5388](v95);
  uint64_t v89 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImageLinkedAnswer();
  uint64_t v6 = *(NSObject **)(v5 - 8);
  uint64_t v93 = (uint8_t *)v5;
  os_log_t v94 = v6;
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImagePod();
  uint64_t v84 = *(void *)(v9 - 8);
  uint64_t v85 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImageResource();
  uint64_t v82 = *(void *)(v92 - 8);
  MEMORY[0x270FA5388](v92);
  uint64_t v91 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_Legacy_SummaryPod();
  uint64_t v80 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v78 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v79 = (char *)&v77 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v81 = (char *)&v77 - v18;
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Legacy_PodView.OneOf_Pod?);
  uint64_t v19 = MEMORY[0x270FA5388](v83);
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v77 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v77 - v23;
  uint64_t v25 = a1;
  Apple_Parsec_Siri_Legacy_PodView.pod.getter();
  uint64_t v26 = type metadata accessor for Apple_Parsec_Siri_Legacy_PodView.OneOf_Pod();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v24, 1, v26);
  uint64_t v86 = v2;
  uint64_t v87 = v24;
  if (EnumTagSinglePayload == 1) {
    goto LABEL_18;
  }
  outlined init with copy of SearchResult?((uint64_t)v24, (uint64_t)v22, &demangling cache variable for type metadata for Apple_Parsec_Siri_Legacy_PodView.OneOf_Pod?);
  uint64_t v28 = *(void *)(v26 - 8);
  int v29 = (*(uint64_t (**)(char *, uint64_t))(v28 + 88))(v22, v26);
  if (v29 != *MEMORY[0x263F5CC00])
  {
    if (v29 == *MEMORY[0x263F5CC08])
    {
      (*(void (**)(char *, uint64_t))(v28 + 96))(v22, v26);
      uint64_t v47 = v80;
      uint64_t v46 = v81;
      (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v81, v22, v13);
      if (Apple_Parsec_Siri_Legacy_SummaryPod.hasImageResource.getter())
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t v37 = swift_allocObject();
        *(_OWORD *)(v37 + 16) = xmmword_258661700;
        uint64_t v48 = v91;
        Apple_Parsec_Siri_Legacy_SummaryPod.imageResource.getter();
        uint64_t v49 = Apple_Parsec_Siri_Legacy_ImageResource.resourceURL.getter();
        uint64_t v51 = v50;
        (*(void (**)(char *, uint64_t))(v82 + 8))(v48, v92);
        *(void *)(v37 + 32) = v49;
        *(void *)(v37 + 40) = v51;
        (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v13);
        goto LABEL_27;
      }
      if (one-time initialization token for search != -1) {
        swift_once();
      }
      uint64_t v64 = type metadata accessor for Logger();
      __swift_project_value_buffer(v64, (uint64_t)static Logging.search);
      uint64_t v65 = v47;
      uint64_t v66 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
      uint64_t v67 = v79;
      v66(v79, v46, v13);
      uint64_t v68 = Logger.logObject.getter();
      os_log_type_t v69 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v68, v69))
      {
        uint64_t v70 = swift_slowAlloc();
        os_log_t v94 = v68;
        uint64_t v71 = (uint8_t *)v70;
        uint64_t v95 = swift_slowAlloc();
        uint64_t v97 = v95;
        *(_DWORD *)uint64_t v71 = 136315138;
        uint64_t v93 = v71 + 4;
        v66(v78, v67, v13);
        uint64_t v72 = String.init<A>(describing:)();
        uint64_t v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, &v97);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v74 = *(void (**)(char *, uint64_t))(v65 + 8);
        v74(v67, v13);
        os_log_t v75 = v94;
        _os_log_impl(&dword_257DC6000, v94, v69, "SummaryPod has no image resource: %s", v71, 0xCu);
        uint64_t v76 = v95;
        swift_arrayDestroy();
        MEMORY[0x25A2C94B0](v76, -1, -1);
        MEMORY[0x25A2C94B0](v71, -1, -1);
      }
      else
      {
        uint64_t v74 = *(void (**)(char *, uint64_t))(v65 + 8);
        v74(v67, v13);
      }
      v74(v81, v13);
LABEL_24:
      uint64_t v37 = MEMORY[0x263F8EE78];
      goto LABEL_27;
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v22, v26);
LABEL_18:
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)static Logging.search);
    uint64_t v53 = v89;
    Class v54 = v90;
    uint64_t v55 = v95;
    (*((void (**)(char *, uint64_t, uint64_t))v90 + 2))(v89, v25, v95);
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      uint64_t v97 = v59;
      *(_DWORD *)uint64_t v58 = 136315138;
      os_log_t v94 = (os_log_t)(v58 + 4);
      Apple_Parsec_Siri_Legacy_PodView.pod.getter();
      uint64_t v60 = String.init<A>(describing:)();
      uint64_t v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, &v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*((void (**)(char *, uint64_t))v54 + 1))(v53, v95);
      _os_log_impl(&dword_257DC6000, v56, v57, "Received unexpected gkSnippet pod %s", (uint8_t *)v58, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A2C94B0](v59, -1, -1);
      MEMORY[0x25A2C94B0](v58, -1, -1);
    }
    else
    {
      (*((void (**)(char *, uint64_t))v54 + 1))(v53, v55);
    }

    goto LABEL_24;
  }
  (*(void (**)(char *, uint64_t))(v28 + 96))(v22, v26);
  (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v11, v22, v85);
  uint64_t v30 = Apple_Parsec_Siri_Legacy_ImagePod.images.getter();
  uint64_t v31 = *(void *)(v30 + 16);
  if (v31)
  {
    uint64_t v83 = (uint64_t)v11;
    uint64_t v32 = v93;
    Class isa = v94[2].isa;
    uint64_t isa_low = LOBYTE(v94[10].isa);
    uint64_t v81 = (char *)v30;
    uint64_t v35 = v30 + ((isa_low + 32) & ~isa_low);
    uint64_t v95 = (uint64_t)v94[9].isa;
    os_log_t v36 = v94 + 1;
    uint64_t v89 = (char *)(v82 + 8);
    uint64_t v37 = MEMORY[0x263F8EE78];
    v94 += 2;
    Class v90 = isa;
    do
    {
      ((void (*)(char *, uint64_t, uint8_t *))isa)(v8, v35, v32);
      if (Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.hasImageResource.getter())
      {
        uint64_t v38 = v91;
        Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.imageResource.getter();
        uint64_t v39 = Apple_Parsec_Siri_Legacy_ImageResource.resourceURL.getter();
        uint64_t v41 = v40;
        (*(void (**)(char *, uint64_t))v89)(v38, v92);
        ((void (*)(char *, uint8_t *))v36->isa)(v8, v32);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v37 = v44;
        }
        unint64_t v42 = *(void *)(v37 + 16);
        if (v42 >= *(void *)(v37 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v37 = v45;
        }
        *(void *)(v37 + 16) = v42 + 1;
        uint64_t v43 = v37 + 16 * v42;
        *(void *)(v43 + 32) = v39;
        *(void *)(v43 + 40) = v41;
        uint64_t v32 = v93;
        Class isa = v90;
      }
      else
      {
        ((void (*)(char *, uint8_t *))v36->isa)(v8, v32);
      }
      v35 += v95;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
    uint64_t v11 = (char *)v83;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v37 = MEMORY[0x263F8EE78];
  }
  (*(void (**)(char *, uint64_t))(v84 + 8))(v11, v85);
LABEL_27:
  uint64_t v62 = (uint64_t)v87;
  *uint64_t v88 = v37;
  return outlined destroy of PQAVerificationModelProtocol?(v62, &demangling cache variable for type metadata for Apple_Parsec_Siri_Legacy_PodView.OneOf_Pod?);
}

void closure #1 in static GlobalSearchResponseProcessor.collatePegasusComponents(components:)(uint64_t a1, uint64_t *a2, char *a3, char *a4)
{
  uint64_t v65 = a2;
  uint64_t v66 = a4;
  uint64_t v62 = a3;
  uint64_t v67 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent();
  uint64_t v4 = *(void *)(v67 - 8);
  MEMORY[0x270FA5388](v67);
  uint64_t v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent();
  uint64_t v59 = *(void *)(v7 - 8);
  uint64_t v60 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v58 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (uint8_t *)type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent();
  uint64_t v63 = (uint8_t *)*((void *)v9 - 1);
  uint64_t v64 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  os_log_type_t v57 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  unint64_t v61 = (char *)&v56 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v56 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)&v56 - v24;
  Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15) == 1)
  {
    outlined destroy of PQAVerificationModelProtocol?((uint64_t)v14, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logging.search);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      int v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v29 = 0;
      _os_log_impl(&dword_257DC6000, v27, v28, "PegasusResult component missing type", v29, 2u);
      MEMORY[0x25A2C94B0](v29, -1, -1);
    }

    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v25, v14, v15);
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v30(v23, v25, v15);
  int v31 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v23, v15);
  if (v31 == *MEMORY[0x263F5CF10])
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v23, v15);
    uint64_t v32 = v67;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v23, v67);
    uint64_t v33 = v66;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v34 = *(void *)(*(void *)v33 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v34);
LABEL_13:
    uint64_t v41 = *(void *)v33;
    *(void *)(v41 + 16) = v34 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 16))(v41+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v34, v6, v32);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v32);
    goto LABEL_14;
  }
  if (v31 == *MEMORY[0x263F5CF08])
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v23, v15);
    uint64_t v35 = v63;
    os_log_t v36 = v23;
    uint64_t v37 = v64;
    (*((void (**)(char *, char *, uint8_t *))v63 + 4))(v11, v36, v64);
    uint64_t v38 = v65;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v39 = *(void *)(*v38 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v39);
    uint64_t v40 = *v38;
    *(void *)(v40 + 16) = v39 + 1;
    (*((void (**)(unint64_t, char *, uint8_t *))v35 + 2))(v40 + ((v35[80] + 32) & ~(unint64_t)v35[80]) + *((void *)v35 + 9) * v39, v11, v37);
    (*((void (**)(char *, uint8_t *))v35 + 1))(v11, v37);
LABEL_14:
    (*(void (**)(char *, uint64_t))(v16 + 8))(v25, v15);
    return;
  }
  if (v31 == *MEMORY[0x263F5CEF0])
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v23, v15);
    uint64_t v6 = v58;
    uint64_t v4 = v59;
    uint64_t v32 = v60;
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v58, v23, v60);
    uint64_t v33 = v62;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v34 = *(void *)(*(void *)v33 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v34);
    goto LABEL_13;
  }
  unint64_t v42 = v30;
  uint64_t v67 = v16;
  if (one-time initialization token for search != -1) {
    swift_once();
  }
  uint64_t v43 = type metadata accessor for Logger();
  __swift_project_value_buffer(v43, (uint64_t)static Logging.search);
  uint64_t v44 = v61;
  v30(v61, v25, v15);
  uint64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.info.getter();
  int v47 = v46;
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v48 = swift_slowAlloc();
    LODWORD(v65) = v47;
    uint64_t v49 = (uint8_t *)v48;
    uint64_t v50 = swift_slowAlloc();
    uint64_t v66 = v25;
    uint64_t v51 = v50;
    uint64_t v69 = v50;
    uint64_t v64 = v49;
    *(_DWORD *)uint64_t v49 = 136315138;
    uint64_t v63 = v49 + 4;
    v42(v57, v44, v15);
    uint64_t v52 = String.init<A>(describing:)();
    uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    Class v54 = *(void (**)(char *, uint64_t))(v67 + 8);
    v54(v44, v15);
    uint64_t v55 = v64;
    _os_log_impl(&dword_257DC6000, v45, (os_log_type_t)v65, "PegasusResult skipping component %s", v64, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2C94B0](v51, -1, -1);
    MEMORY[0x25A2C94B0](v55, -1, -1);

    v54(v66, v15);
  }
  else
  {

    Class v54 = *(void (**)(char *, uint64_t))(v67 + 8);
    v54(v44, v15);
    v54(v25, v15);
  }
  v54(v23, v15);
}

uint64_t GlobalSearchResponseProcessor.PegasusComponents.domainObjectComponents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t GlobalSearchResponseProcessor.PegasusComponents.dialogs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t outlined consume of GlobalSearchResponseProcessor.PegasusComponents?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t partial apply for closure #2 in static GlobalSearchResponseProcessor.makeCard(layoutSnippet:)(uint64_t a1)
{
  return closure #2 in static GlobalSearchResponseProcessor.makeCard(layoutSnippet:)(a1, *(void *)(v1 + 16));
}

uint64_t lazy protocol witness table accessor for type Searchfoundation_Card and conformance Searchfoundation_Card(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for GlobalSearchResponseProcessor()
{
  return &type metadata for GlobalSearchResponseProcessor;
}

ValueMetadata *type metadata accessor for GlobalSearchResponseProcessor.PegasusComponents()
{
  return &type metadata for GlobalSearchResponseProcessor.PegasusComponents;
}

uint64_t outlined init with take of SearchResultItem(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_7_2();
  uint64_t v4 = OUTLINED_FUNCTION_211();
  v5(v4);
  return a2;
}

uint64_t outlined destroy of KGDocument()
{
  uint64_t v1 = OUTLINED_FUNCTION_60_11();
  v2(v1);
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_16_1();
  v3();
  return v0;
}

uint64_t partial apply for closure #1 in static GlobalSearchResponseProcessor.makeGlobalItems(experience:domain:lowConfidenceKnowledge:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static GlobalSearchResponseProcessor.makeGlobalItems(experience:domain:lowConfidenceKnowledge:)(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t OUTLINED_FUNCTION_17_24()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_22_24()
{
  return *(void *)(v0 - 192);
}

uint64_t OUTLINED_FUNCTION_26_24@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 440) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for Searchfoundation_URL();
}

void OUTLINED_FUNCTION_33_20()
{
  *(void *)(v1 + 16) = v0;
}

uint64_t OUTLINED_FUNCTION_34_23()
{
  return *(void *)(v0 - 520);
}

uint64_t OUTLINED_FUNCTION_35_23()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_39_19()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent();
}

void OUTLINED_FUNCTION_41_21()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_42_17()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_43_21()
{
  *(void *)(v1 - 96) = v0;
  return 0;
}

uint64_t OUTLINED_FUNCTION_50_23()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_51_19()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_52_15()
{
  return *(void *)(v0 - 512);
}

uint64_t OUTLINED_FUNCTION_53_14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(a1 - 256);
  return __swift_storeEnumTagSinglePayload(v3, 1, 1, v1);
}

void OUTLINED_FUNCTION_54_15(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)(v1 + a1);
  void *v2 = 0;
  v2[1] = 0;
}

uint64_t OUTLINED_FUNCTION_58_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_59_14()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t OUTLINED_FUNCTION_60_11()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_61_11()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

void OUTLINED_FUNCTION_62_12()
{
  *(void *)(v0 - 352) = 0;
  *(void *)(v0 - 344) = 0;
}

uint64_t OUTLINED_FUNCTION_63_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_64_10()
{
  return v0;
}

void OUTLINED_FUNCTION_65_11(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)(v1 + a1);
  void *v2 = 0;
  v2[1] = 0;
}

uint64_t OUTLINED_FUNCTION_66_14()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_68_14()
{
  return Searchfoundation_CardSection.value.getter();
}

uint64_t GeoLocation.llmConsumableDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v90 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  long long v5 = *(_OWORD *)(v0 + 56);
  long long v156 = *(_OWORD *)(v0 + 40);
  long long v157 = v5;
  int v6 = *(_DWORD *)(v0 + 72);
  int v7 = *(_DWORD *)(v0 + 76);
  uint64_t v9 = *(void **)(v0 + 80);
  uint64_t v8 = *(void *)(v0 + 88);
  uint64_t v10 = *(void *)(v0 + 96);
  uint64_t v108 = *(void *)(v0 + 112);
  uint64_t v114 = *(void *)(v0 + 104);
  uint64_t v124 = *(void *)(v0 + 128);
  uint64_t v125 = *(void *)(v0 + 136);
  uint64_t v126 = *(void *)(v0 + 120);
  int v123 = *(_DWORD *)(v0 + 144);
  char v11 = *(unsigned char *)(v0 + 148);
  char v155 = *(unsigned char *)(v0 + 151);
  __int16 v154 = *(_WORD *)(v0 + 149);
  HIDWORD(v102) = *(_DWORD *)(v0 + 152);
  char v127 = *(unsigned char *)(v0 + 156);
  char v128 = v11;
  MEMORY[0x25A2C7B90](293);
  uint64_t v152 = 0;
  unint64_t v153 = 0xE000000000000000;
  v12._countAndFlagsBits = 0xD000000000000016;
  v12._object = (void *)0x8000000258683720;
  String.append(_:)(v12);
  uint64_t v13 = MEMORY[0x263F8D310];
  uint64_t v14 = MEMORY[0x263F8D378];
  uint64_t v132 = MEMORY[0x263F8D310];
  uint64_t v133 = MEMORY[0x263F8D378];
  uint64_t v129 = v1;
  uint64_t v130 = v2;
  uint64_t v121 = v2;
  swift_bridgeObjectRetain();
  uint64_t v15 = LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&v129);
  OUTLINED_FUNCTION_6_33(v15, v16, v17, v18, v19, v20, v21, v22, v1, v90, v96, v102, v108, v114);
  v23._countAndFlagsBits = 0x6461202020200A2CLL;
  v23._object = (void *)0xEF203A7373657264;
  String.append(_:)(v23);
  uint64_t v132 = v13;
  uint64_t v133 = v14;
  uint64_t v122 = v3;
  uint64_t v129 = v3;
  uint64_t v130 = v4;
  uint64_t v120 = v4;
  swift_bridgeObjectRetain();
  uint64_t v24 = LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&v129);
  OUTLINED_FUNCTION_6_33(v24, v25, v26, v27, v28, v29, v30, v31, v85, v91, v97, v103, v109, v115);
  OUTLINED_FUNCTION_4_28((uint64_t)",\n    latitude: ");
  uint64_t v32 = MEMORY[0x263F8D5C8];
  uint64_t v33 = MEMORY[0x263F8D638];
  uint64_t v132 = MEMORY[0x263F8D5C8];
  uint64_t v133 = MEMORY[0x263F8D638];
  LODWORD(v129) = v6;
  uint64_t v34 = LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&v129);
  OUTLINED_FUNCTION_6_33(v34, v35, v36, v37, v38, v39, v40, v41, v86, v92, v98, v104, v110, v116);
  v42._object = (void *)0x8000000258683760;
  v42._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v42);
  uint64_t v132 = v32;
  uint64_t v133 = v33;
  uint64_t v43 = v9;
  LODWORD(v129) = v7;
  uint64_t v44 = LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&v129);
  OUTLINED_FUNCTION_6_33(v44, v45, v46, v47, v48, v49, v50, v51, v87, v93, v99, v105, v111, v117);
  v52._object = (void *)0x8000000258683780;
  v52._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v52);
  v158.value._rawValue = v9;
  LLMFormatter.StringInterpolation.appendInterpolation(names:)(v158);
  v53._countAndFlagsBits = 0x6577202020200A2CLL;
  v53._object = (void *)0xEF203A6574697362;
  String.append(_:)(v53);
  uint64_t v100 = v8;
  if (v10)
  {
    uint64_t v132 = v13;
    uint64_t v133 = v14;
    uint64_t v129 = v8;
    uint64_t v130 = v10;
  }
  else
  {
    OUTLINED_FUNCTION_0_19();
  }
  swift_bridgeObjectRetain();
  LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&v129);
  outlined destroy of Any?((uint64_t)&v129, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_4_28((uint64_t)",\n    category: ");
  uint64_t v54 = v112;
  if (v126)
  {
    uint64_t v132 = v13;
    uint64_t v133 = v14;
    uint64_t v129 = v112;
    uint64_t v130 = v126;
  }
  else
  {
    OUTLINED_FUNCTION_0_19();
  }
  swift_bridgeObjectRetain();
  LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&v129);
  outlined destroy of Any?((uint64_t)&v129, &demangling cache variable for type metadata for CustomStringConvertible?);
  v55._countAndFlagsBits = 0xD000000000000013;
  v55._object = (void *)0x80000002586837C0;
  String.append(_:)(v55);
  if (v125)
  {
    uint64_t v132 = v13;
    uint64_t v133 = v14;
    uint64_t v129 = v124;
    uint64_t v130 = v125;
  }
  else
  {
    OUTLINED_FUNCTION_0_19();
  }
  swift_bridgeObjectRetain();
  LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&v129);
  outlined destroy of Any?((uint64_t)&v129, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_4_28((uint64_t)",\n    openTime: ");
  uint64_t v56 = MEMORY[0x263F8E8F8];
  uint64_t v57 = MEMORY[0x263F8E950];
  if (v128)
  {
    OUTLINED_FUNCTION_0_19();
  }
  else
  {
    uint64_t v132 = MEMORY[0x263F8E8F8];
    uint64_t v133 = MEMORY[0x263F8E950];
    LODWORD(v129) = v123;
  }
  LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&v129);
  outlined destroy of Any?((uint64_t)&v129, &demangling cache variable for type metadata for CustomStringConvertible?);
  v58._countAndFlagsBits = 0xD000000000000011;
  v58._object = (void *)0x8000000258683800;
  String.append(_:)(v58);
  uint64_t v59 = v14;
  uint64_t v60 = v10;
  uint64_t v61 = v13;
  if (v127)
  {
    OUTLINED_FUNCTION_0_19();
  }
  else
  {
    uint64_t v132 = v56;
    uint64_t v133 = v57;
    LODWORD(v129) = HIDWORD(v106);
  }
  int v62 = HIDWORD(v106);
  uint64_t v64 = v88;
  uint64_t v63 = v94;
  uint64_t v65 = LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&v129);
  OUTLINED_FUNCTION_6_33(v65, v66, v67, v68, v69, v70, v71, v72, v88, v94, v100, v106, v112, v118);
  v73._countAndFlagsBits = 0x617473202020200ALL;
  v73._object = (void *)0xED0000203A737574;
  String.append(_:)(v73);
  long long v134 = v156;
  uint64_t v129 = v63;
  uint64_t v130 = v64;
  uint64_t v131 = v121;
  uint64_t v132 = v122;
  uint64_t v133 = v120;
  long long v135 = v157;
  int v136 = v6;
  int v137 = v7;
  unint64_t v138 = v43;
  uint64_t v139 = v101;
  uint64_t v140 = v60;
  uint64_t v141 = v119;
  uint64_t v142 = v54;
  uint64_t v143 = v126;
  uint64_t v144 = v124;
  uint64_t v145 = v125;
  int v146 = v123;
  char v147 = v128;
  char v149 = v155;
  __int16 v148 = v154;
  int v150 = v62;
  char v151 = v127;
  uint64_t v74 = GeoLocation.openNow.getter();
  uint64_t v132 = v61;
  uint64_t v133 = v59;
  uint64_t v129 = v74;
  uint64_t v130 = v75;
  uint64_t v76 = LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&v129);
  OUTLINED_FUNCTION_6_33(v76, v77, v78, v79, v80, v81, v82, v83, v89, v95, v101, v107, v113, v119);
  LLMFormatter.sanitized.getter();
  OUTLINED_FUNCTION_3_26();
  return OUTLINED_FUNCTION_148();
}

uint64_t WebImage.llmConsumableDescription.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v22 = 0;
  *((void *)&v22 + 1) = 0xE000000000000000;
  MEMORY[0x25A2C7B90](67);
  long long v25 = v22;
  v4._countAndFlagsBits = 0x67616D6920626557;
  v4._object = (void *)0xEB00000000203A65;
  String.append(_:)(v4);
  long long v5 = (int *)type metadata accessor for WebImage();
  uint64_t v6 = OUTLINED_FUNCTION_130_2(v5[6]);
  uint64_t v8 = MEMORY[0x263F8D310];
  uint64_t v9 = MEMORY[0x263F8D378];
  if (v6) {
    OUTLINED_FUNCTION_1_26(v6, v7);
  }
  else {
    OUTLINED_FUNCTION_5_28();
  }
  swift_bridgeObjectRetain();
  LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&v22);
  outlined destroy of Any?((uint64_t)&v22, &demangling cache variable for type metadata for CustomStringConvertible?);
  v10._countAndFlagsBits = 32;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  uint64_t v11 = OUTLINED_FUNCTION_130_2(v5[7]);
  if (v11) {
    OUTLINED_FUNCTION_1_26(v11, v12);
  }
  else {
    OUTLINED_FUNCTION_5_28();
  }
  swift_bridgeObjectRetain();
  LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&v22);
  outlined destroy of Any?((uint64_t)&v22, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_111_5();
  uint64_t v13 = OUTLINED_FUNCTION_130_2(v5[8]);
  if (v13) {
    OUTLINED_FUNCTION_1_26(v13, v14);
  }
  else {
    OUTLINED_FUNCTION_5_28();
  }
  swift_bridgeObjectRetain();
  LLMFormatter.StringInterpolation.appendInterpolation(_:if:skipLastDot:)(0x3A74786554746C61, 0xE800000000000000, (uint64_t)&v22, 0);
  outlined destroy of Any?((uint64_t)&v22, &demangling cache variable for type metadata for CustomStringConvertible?);
  v15._countAndFlagsBits = 32;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  uint64_t v16 = OUTLINED_FUNCTION_130_2(v5[9]);
  if (v16) {
    OUTLINED_FUNCTION_1_26(v16, v17);
  }
  else {
    OUTLINED_FUNCTION_5_28();
  }
  swift_bridgeObjectRetain();
  LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&v22);
  outlined destroy of Any?((uint64_t)&v22, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_111_5();
  outlined init with copy of URL?(v0 + v5[5], (uint64_t)v3);
  uint64_t v18 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v3, 1, v18) == 1)
  {
    outlined destroy of Any?((uint64_t)v3, &demangling cache variable for type metadata for URL?);
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v19 = URL.path.getter();
    *((void *)&v23 + 1) = v8;
    uint64_t v24 = v9;
    *(void *)&long long v22 = v19;
    *((void *)&v22 + 1) = v20;
    (*(void (**)(char *, uint64_t))(*(void *)(v18 - 8) + 8))(v3, v18);
  }
  LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&v22);
  outlined destroy of Any?((uint64_t)&v22, &demangling cache variable for type metadata for CustomStringConvertible?);
  LLMFormatter.sanitized.getter();
  OUTLINED_FUNCTION_3_26();
  return OUTLINED_FUNCTION_148();
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t KGDocument.llmConsumableDescription.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v18 = 0;
  *((void *)&v18 + 1) = 0xE000000000000000;
  MEMORY[0x25A2C7B90](70);
  long long v21 = v18;
  v4._countAndFlagsBits = 0x656D75636F44474BLL;
  v4._object = (void *)0xEC000000203A746ELL;
  String.append(_:)(v4);
  long long v5 = (int *)type metadata accessor for KGDocument();
  uint64_t v6 = (uint64_t *)(v0 + v5[7]);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  uint64_t v9 = MEMORY[0x263F8D310];
  uint64_t v10 = MEMORY[0x263F8D378];
  *((void *)&v19 + 1) = MEMORY[0x263F8D310];
  uint64_t v20 = MEMORY[0x263F8D378];
  *(void *)&long long v18 = v8;
  *((void *)&v18 + 1) = v7;
  swift_bridgeObjectRetain();
  LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&v18);
  outlined destroy of Any?((uint64_t)&v18, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_111_5();
  OUTLINED_FUNCTION_8_15(v5[8]);
  LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&v18);
  outlined destroy of Any?((uint64_t)&v18, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_111_5();
  OUTLINED_FUNCTION_8_15(v5[6]);
  LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&v18);
  outlined destroy of Any?((uint64_t)&v18, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_111_5();
  outlined init with copy of URL?(v0 + v5[9], (uint64_t)v3);
  uint64_t v11 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v3, 1, v11) == 1)
  {
    outlined destroy of Any?((uint64_t)v3, &demangling cache variable for type metadata for URL?);
    long long v18 = 0u;
    long long v19 = 0u;
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v12 = URL.path.getter();
    *((void *)&v19 + 1) = v9;
    uint64_t v20 = v10;
    *(void *)&long long v18 = v12;
    *((void *)&v18 + 1) = v13;
    (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v3, v11);
  }
  LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&v18);
  outlined destroy of Any?((uint64_t)&v18, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_111_5();
  uint64_t v14 = (uint64_t *)(v0 + v5[10]);
  uint64_t v15 = v14[1];
  if (v15)
  {
    uint64_t v16 = *v14;
    *((void *)&v19 + 1) = v9;
    uint64_t v20 = v10;
    *(void *)&long long v18 = v16;
    *((void *)&v18 + 1) = v15;
  }
  else
  {
    uint64_t v20 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
  }
  swift_bridgeObjectRetain();
  LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&v18);
  outlined destroy of Any?((uint64_t)&v18, &demangling cache variable for type metadata for CustomStringConvertible?);
  LLMFormatter.sanitized.getter();
  OUTLINED_FUNCTION_3_26();
  return OUTLINED_FUNCTION_148();
}

uint64_t WebAnswer.llmConsumableDescription.getter()
{
  *(void *)&long long v9 = 0;
  *((void *)&v9 + 1) = 0xE000000000000000;
  MEMORY[0x25A2C7B90](34);
  long long v12 = v9;
  v1._countAndFlagsBits = 0x77736E6120626557;
  v1._object = (void *)0xEC000000203A7265;
  String.append(_:)(v1);
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v4 = MEMORY[0x263F8D310];
  uint64_t v5 = MEMORY[0x263F8D378];
  *((void *)&v10 + 1) = MEMORY[0x263F8D310];
  uint64_t v11 = MEMORY[0x263F8D378];
  *(void *)&long long v9 = v3;
  *((void *)&v9 + 1) = v2;
  swift_bridgeObjectRetain();
  LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&v9);
  outlined destroy of Any?((uint64_t)&v9, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_111_5();
  uint64_t v6 = v0[5];
  if (v6)
  {
    uint64_t v7 = v0[4];
    *((void *)&v10 + 1) = v4;
    uint64_t v11 = v5;
    *(void *)&long long v9 = v7;
    *((void *)&v9 + 1) = v6;
  }
  else
  {
    uint64_t v11 = 0;
    long long v9 = 0u;
    long long v10 = 0u;
  }
  swift_bridgeObjectRetain();
  LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&v9);
  outlined destroy of Any?((uint64_t)&v9, &demangling cache variable for type metadata for CustomStringConvertible?);
  LLMFormatter.sanitized.getter();
  OUTLINED_FUNCTION_3_26();
  return OUTLINED_FUNCTION_148();
}

double OUTLINED_FUNCTION_0_19()
{
  return 0.0;
}

uint64_t OUTLINED_FUNCTION_1_26@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *a2;
  *(void *)(v4 - 88) = v2;
  *(void *)(v4 - 80) = v3;
  *(void *)(v4 - 112) = v5;
  *(void *)(v4 - 104) = result;
  return result;
}

void OUTLINED_FUNCTION_4_28(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD000000000000010;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
}

double OUTLINED_FUNCTION_5_28()
{
  *(void *)(v0 - 80) = 0;
  double result = 0.0;
  *(_OWORD *)(v0 - 112) = 0u;
  *(_OWORD *)(v0 - 96) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_6_33(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  return outlined destroy of Any?((uint64_t)va, v14);
}

uint64_t OUTLINED_FUNCTION_8_15@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = (uint64_t *)(v1 + a1);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  *(void *)(v4 - 104) = v2;
  *(void *)(v4 - 96) = v3;
  *(void *)(v4 - 128) = v8;
  *(void *)(v4 - 120) = v7;
  return swift_bridgeObjectRetain();
}

uint64_t KGDocument.init(id:url:description:title:subtitle:thumbnail:attributionTitle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *a9 = a1;
  a9[1] = a2;
  uint64_t v20 = (int *)type metadata accessor for KGDocument();
  outlined init with take of URL?(a3, (uint64_t)a9 + v20[5]);
  long long v21 = (void *)((char *)a9 + v20[6]);
  *long long v21 = a4;
  v21[1] = a5;
  long long v22 = (void *)((char *)a9 + v20[7]);
  *long long v22 = a6;
  v22[1] = a7;
  long long v23 = (void *)((char *)a9 + v20[8]);
  *long long v23 = a8;
  v23[1] = a10;
  uint64_t result = outlined init with take of URL?(a11, (uint64_t)a9 + v20[9]);
  long long v25 = (void *)((char *)a9 + v20[10]);
  *long long v25 = a12;
  v25[1] = a13;
  return result;
}

uint64_t type metadata accessor for KGDocument()
{
  uint64_t result = type metadata singleton initialization cache for KGDocument;
  if (!type metadata singleton initialization cache for KGDocument) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t KGDocument.id.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t KGDocument.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*KGDocument.id.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t KGDocument.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for KGDocument() + 20);
  return outlined init with copy of URL?(v3, a1);
}

uint64_t KGDocument.url.setter()
{
  uint64_t v2 = v1 + *(int *)(OUTLINED_FUNCTION_2_23() + 20);
  return outlined assign with take of URL?(v0, v2);
}

uint64_t outlined assign with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*KGDocument.url.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t KGDocument.description.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t KGDocument.description.setter()
{
  OUTLINED_FUNCTION_3_40();
  uint64_t result = OUTLINED_FUNCTION_11_30();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*KGDocument.description.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t KGDocument.title.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t KGDocument.title.setter()
{
  OUTLINED_FUNCTION_3_40();
  uint64_t result = OUTLINED_FUNCTION_11_30();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*KGDocument.title.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t KGDocument.subtitle.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t KGDocument.subtitle.setter()
{
  OUTLINED_FUNCTION_3_40();
  uint64_t result = OUTLINED_FUNCTION_11_30();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*KGDocument.subtitle.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t KGDocument.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for KGDocument() + 36);
  return outlined init with copy of URL?(v3, a1);
}

uint64_t KGDocument.thumbnail.setter()
{
  uint64_t v2 = v1 + *(int *)(OUTLINED_FUNCTION_2_23() + 36);
  return outlined assign with take of URL?(v0, v2);
}

uint64_t (*KGDocument.thumbnail.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t KGDocument.attributionTitle.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t KGDocument.attributionTitle.setter()
{
  OUTLINED_FUNCTION_3_40();
  uint64_t result = OUTLINED_FUNCTION_11_30();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*KGDocument.attributionTitle.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t KGDocument.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 7107189 && a2 == 0xE300000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x656C746974627573 && a2 == 0xE800000000000000;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v10 = a1 == 0x69616E626D756874 && a2 == 0xE90000000000006CLL;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else if (a1 == 0xD000000000000010 && a2 == 0x8000000258683820)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else
            {
              char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v11) {
                return 6;
              }
              else {
                return 7;
              }
            }
          }
        }
      }
    }
  }
}

uint64_t KGDocument.CodingKeys.init(intValue:)()
{
  return 7;
}

unint64_t KGDocument.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 7107189;
      break;
    case 2:
      unint64_t result = 0x7470697263736564;
      break;
    case 3:
      unint64_t result = 0x656C746974;
      break;
    case 4:
      unint64_t result = 0x656C746974627573;
      break;
    case 5:
      unint64_t result = 0x69616E626D756874;
      break;
    case 6:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance KGDocument.CodingKeys()
{
  return KGDocument.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance KGDocument.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = KGDocument.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance KGDocument.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = KGDocument.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance KGDocument.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance KGDocument.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t KGDocument.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<KGDocument.CodingKeys>);
  OUTLINED_FUNCTION_1();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_15();
  uint64_t v9 = v8 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  OUTLINED_FUNCTION_4_29();
  if (!v1)
  {
    BOOL v10 = (int *)type metadata accessor for KGDocument();
    type metadata accessor for URL();
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    OUTLINED_FUNCTION_8_16();
    OUTLINED_FUNCTION_10_29(v10[6]);
    OUTLINED_FUNCTION_4_29();
    OUTLINED_FUNCTION_10_29(v10[7]);
    OUTLINED_FUNCTION_4_29();
    OUTLINED_FUNCTION_10_29(v10[8]);
    OUTLINED_FUNCTION_4_29();
    OUTLINED_FUNCTION_8_16();
    OUTLINED_FUNCTION_10_29(v10[10]);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

unint64_t lazy protocol witness table accessor for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys;
  if (!lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys);
  }
  return result;
}

uint64_t KGDocument.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v41 - v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<KGDocument.CodingKeys>);
  OUTLINED_FUNCTION_1();
  uint64_t v43 = v10;
  uint64_t v44 = v9;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_15();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = (int *)type metadata accessor for KGDocument();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_15();
  uint64_t v17 = (uint64_t *)(v16 - v15);
  uint64_t v19 = v16 - v15 + *(int *)(v18 + 20);
  uint64_t v20 = type metadata accessor for URL();
  uint64_t v50 = v19;
  __swift_storeEnumTagSinglePayload(v19, 1, 1, v20);
  uint64_t v49 = (uint64_t)v17 + v14[9];
  __swift_storeEnumTagSinglePayload(v49, 1, 1, v20);
  long long v21 = (uint64_t *)((char *)v17 + v14[10]);
  *long long v21 = 0;
  v21[1] = 0;
  uint64_t v46 = a1;
  uint64_t v47 = v21;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type KGDocument.CodingKeys and conformance KGDocument.CodingKeys();
  uint64_t v45 = v13;
  long long v22 = v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v22)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v46);
    outlined destroy of URL?(v50);
    outlined destroy of URL?(v49);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v48 = v6;
    char v57 = 0;
    *uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
    v17[1] = v23;
    char v56 = 1;
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    OUTLINED_FUNCTION_6_34();
    outlined assign with take of URL?((uint64_t)v8, v50);
    char v55 = 2;
    uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)();
    long long v25 = (uint64_t *)((char *)v17 + v14[6]);
    *long long v25 = v24;
    v25[1] = v26;
    char v54 = 3;
    uint64_t v27 = KeyedDecodingContainer.decode(_:forKey:)();
    v41[1] = 1;
    uint64_t v28 = (uint64_t *)((char *)v17 + v14[7]);
    *uint64_t v28 = v27;
    v28[1] = v29;
    char v53 = 4;
    uint64_t v30 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v31 = (uint64_t *)((char *)v17 + v14[8]);
    *uint64_t v31 = v30;
    v31[1] = v32;
    char v52 = 5;
    uint64_t v33 = (uint64_t)v48;
    OUTLINED_FUNCTION_6_34();
    outlined assign with take of URL?(v33, v49);
    char v51 = 6;
    uint64_t v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v36 = v35;
    uint64_t v37 = OUTLINED_FUNCTION_1_27();
    v38(v37);
    uint64_t v39 = v47;
    swift_bridgeObjectRelease();
    *uint64_t v39 = v34;
    v39[1] = v36;
    outlined init with copy of KGDocument((uint64_t)v17, v42);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v46);
    return outlined destroy of KGDocument((uint64_t)v17);
  }
}

uint64_t outlined init with copy of KGDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KGDocument();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of KGDocument(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KGDocument();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t instantiation function for generic protocol witness table for KGDocument(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type KGDocument and conformance KGDocument, (void (*)(uint64_t))type metadata accessor for KGDocument);
  a1[2] = lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type KGDocument and conformance KGDocument, (void (*)(uint64_t))type metadata accessor for KGDocument);
  uint64_t result = lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type KGDocument and conformance KGDocument, (void (*)(uint64_t))type metadata accessor for KGDocument);
  a1[3] = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance KGDocument@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return KGDocument.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance KGDocument(void *a1)
{
  return KGDocument.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for KGDocument(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = (uint64_t *)((char *)v4 + v14);
    uint64_t v17 = (uint64_t *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = (uint64_t *)((char *)v4 + v15);
    uint64_t v20 = (uint64_t *)((char *)a2 + v15);
    uint64_t v21 = v20[1];
    void *v19 = *v20;
    v19[1] = v21;
    uint64_t v22 = a3[8];
    uint64_t v23 = a3[9];
    uint64_t v24 = (uint64_t *)((char *)v4 + v22);
    long long v25 = (uint64_t *)((char *)a2 + v22);
    uint64_t v26 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v26;
    uint64_t v27 = (char *)v4 + v23;
    uint64_t v28 = (char *)a2 + v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v28, 1, v11))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v27, v28, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v27, 0, 1, v11);
    }
    uint64_t v30 = a3[10];
    uint64_t v31 = (uint64_t *)((char *)v4 + v30);
    uint64_t v32 = (uint64_t *)((char *)a2 + v30);
    uint64_t v33 = v32[1];
    *uint64_t v31 = *v32;
    v31[1] = v33;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for KGDocument(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + *(int *)(a2 + 36);
  if (!__swift_getEnumTagSinglePayload(v6, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v6, v5);
  }
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for KGDocument(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v12);
  uint64_t v15 = (void *)((char *)a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (void *)((char *)a1 + v13);
  uint64_t v18 = (void *)((char *)a2 + v13);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = a3[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = (void *)((char *)a1 + v20);
  uint64_t v23 = (void *)((char *)a2 + v20);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  long long v25 = (char *)a1 + v21;
  uint64_t v26 = (char *)a2 + v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, v10))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v25, v26, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v25, 0, 1, v10);
  }
  uint64_t v28 = a3[10];
  uint64_t v29 = (void *)((char *)a1 + v28);
  uint64_t v30 = (void *)((char *)a2 + v28);
  uint64_t v31 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v31;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for KGDocument(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  void *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[8];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[9];
  uint64_t v24 = (char *)a1 + v23;
  long long v25 = (char *)a2 + v23;
  int v26 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v23, 1, v9);
  int v27 = __swift_getEnumTagSinglePayload((uint64_t)v25, 1, v9);
  if (!v26)
  {
    uint64_t v28 = *(void *)(v9 - 8);
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 24))(v24, v25, v9);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v24, v9);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v24, v25, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v24, 0, 1, v9);
LABEL_13:
  uint64_t v30 = a3[10];
  uint64_t v31 = (void *)((char *)a1 + v30);
  uint64_t v32 = (void *)((char *)a2 + v30);
  *uint64_t v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for KGDocument(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  uint64_t v12 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v12, 1, v9))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v13, v14, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v9);
  }
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  return a1;
}

void *assignWithTake for KGDocument(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  int v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (EnumTagSinglePayload)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[7];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[8];
  int v26 = (void *)((char *)a1 + v25);
  int v27 = (void *)((char *)a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  *int v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[9];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  int v33 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v30, 1, v10);
  int v34 = __swift_getEnumTagSinglePayload((uint64_t)v32, 1, v10);
  if (!v33)
  {
    uint64_t v35 = *(void *)(v10 - 8);
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 40))(v31, v32, v10);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v31, v10);
    goto LABEL_12;
  }
  if (v34)
  {
LABEL_12:
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v31, v32, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v31, v32, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v31, 0, 1, v10);
LABEL_13:
  uint64_t v37 = a3[10];
  uint64_t v38 = (void *)((char *)a1 + v37);
  uint64_t v39 = (void *)((char *)a2 + v37);
  uint64_t v41 = *v39;
  uint64_t v40 = v39[1];
  void *v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for KGDocument(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_258451200);
}

uint64_t sub_258451200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for KGDocument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2584512A0);
}

uint64_t sub_2584512A0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v8 = v5 + *(int *)(a4 + 20);
    return __swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

void type metadata completion function for KGDocument()
{
  type metadata accessor for URL?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for URL?()
{
  if (!lazy cache variable for type metadata for URL?)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for URL?);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for KGDocument.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2584514F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void *type metadata accessor for KGDocument.CodingKeys()
{
  return &unk_2706AEC20;
}

uint64_t OUTLINED_FUNCTION_1_27()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_2_23()
{
  return type metadata accessor for KGDocument();
}

uint64_t OUTLINED_FUNCTION_3_40()
{
  return type metadata accessor for KGDocument();
}

uint64_t OUTLINED_FUNCTION_4_29()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_6_34()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_8_16()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_10_29@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + a1);
}

uint64_t OUTLINED_FUNCTION_11_30()
{
  return swift_bridgeObjectRelease();
}

uint64_t WebAnswer.init(id:answer:attributionTitle:url:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  uint64_t v9 = (uint64_t)a8 + *(int *)(type metadata accessor for WebAnswer() + 28);
  return outlined init with take of URL?(a7, v9);
}

uint64_t type metadata accessor for WebAnswer()
{
  uint64_t result = type metadata singleton initialization cache for WebAnswer;
  if (!type metadata singleton initialization cache for WebAnswer) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t WebAnswer.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WebAnswer.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*WebAnswer.id.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t WebAnswer.answer.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WebAnswer.answer.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*WebAnswer.answer.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t WebAnswer.attributionTitle.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WebAnswer.attributionTitle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*WebAnswer.attributionTitle.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t WebAnswer.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for WebAnswer() + 28);
  return outlined init with copy of URL?(v3, a1);
}

uint64_t WebAnswer.url.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for WebAnswer() + 28);
  return outlined assign with take of URL?(a1, v3);
}

uint64_t (*WebAnswer.url.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t WebAnswer.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x726577736E61 && a2 == 0xE600000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x8000000258683820 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (a1 == 7107189 && a2 == 0xE300000000000000)
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 3;
      }
      else {
        return 4;
      }
    }
  }
}

unint64_t WebAnswer.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x726577736E61;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 7107189;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance WebAnswer.CodingKeys()
{
  return WebAnswer.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WebAnswer.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WebAnswer.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WebAnswer.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WebAnswer.CodingKeys and conformance WebAnswer.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WebAnswer.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WebAnswer.CodingKeys and conformance WebAnswer.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t WebAnswer.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WebAnswer.CodingKeys>);
  OUTLINED_FUNCTION_1();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_59_0();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WebAnswer.CodingKeys and conformance WebAnswer.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    KeyedEncodingContainer.encode(_:forKey:)();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    type metadata accessor for WebAnswer();
    type metadata accessor for URL();
    _s10Foundation3URLVACSEAAWlTm_0(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

unint64_t lazy protocol witness table accessor for type WebAnswer.CodingKeys and conformance WebAnswer.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WebAnswer.CodingKeys and conformance WebAnswer.CodingKeys;
  if (!lazy protocol witness table cache variable for type WebAnswer.CodingKeys and conformance WebAnswer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WebAnswer.CodingKeys and conformance WebAnswer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WebAnswer.CodingKeys and conformance WebAnswer.CodingKeys;
  if (!lazy protocol witness table cache variable for type WebAnswer.CodingKeys and conformance WebAnswer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WebAnswer.CodingKeys and conformance WebAnswer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WebAnswer.CodingKeys and conformance WebAnswer.CodingKeys;
  if (!lazy protocol witness table cache variable for type WebAnswer.CodingKeys and conformance WebAnswer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WebAnswer.CodingKeys and conformance WebAnswer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WebAnswer.CodingKeys and conformance WebAnswer.CodingKeys;
  if (!lazy protocol witness table cache variable for type WebAnswer.CodingKeys and conformance WebAnswer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WebAnswer.CodingKeys and conformance WebAnswer.CodingKeys);
  }
  return result;
}

uint64_t WebAnswer.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WebAnswer.CodingKeys>);
  OUTLINED_FUNCTION_1();
  uint64_t v23 = v9;
  uint64_t v24 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = type metadata accessor for WebAnswer();
  MEMORY[0x270FA5388](v10 - 8);
  OUTLINED_FUNCTION_59_0();
  v3[4] = 0;
  v3[5] = 0;
  uint64_t v12 = (uint64_t)v3 + *(int *)(v11 + 36);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v25 = v12;
  __swift_storeEnumTagSinglePayload(v12, 1, 1, v13);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WebAnswer.CodingKeys and conformance WebAnswer.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v14 = v25;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    return outlined destroy of URL?(v14);
  }
  else
  {
    v21[1] = v13;
    char v29 = 0;
    *uint64_t v3 = KeyedDecodingContainer.decode(_:forKey:)();
    v3[1] = v15;
    char v28 = 1;
    v3[2] = KeyedDecodingContainer.decode(_:forKey:)();
    v3[3] = v16;
    char v27 = 2;
    v3[4] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v3[5] = v17;
    char v26 = 3;
    _s10Foundation3URLVACSEAAWlTm_0(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v18 = OUTLINED_FUNCTION_1_28();
    v19(v18);
    outlined assign with take of URL?((uint64_t)v7, v25);
    outlined init with copy of WebAnswer((uint64_t)v3, v22);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    return outlined destroy of WebAnswer((uint64_t)v3);
  }
}

uint64_t outlined init with copy of WebAnswer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WebAnswer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of WebAnswer(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WebAnswer();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t instantiation function for generic protocol witness table for WebAnswer(void *a1)
{
  a1[1] = _s10Foundation3URLVACSEAAWlTm_0(&lazy protocol witness table cache variable for type WebAnswer and conformance WebAnswer, (void (*)(uint64_t))type metadata accessor for WebAnswer);
  a1[2] = _s10Foundation3URLVACSEAAWlTm_0(&lazy protocol witness table cache variable for type WebAnswer and conformance WebAnswer, (void (*)(uint64_t))type metadata accessor for WebAnswer);
  uint64_t result = _s10Foundation3URLVACSEAAWlTm_0(&lazy protocol witness table cache variable for type WebAnswer and conformance WebAnswer, (void (*)(uint64_t))type metadata accessor for WebAnswer);
  a1[3] = result;
  return result;
}

uint64_t _s10Foundation3URLVACSEAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance WebAnswer@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return WebAnswer.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WebAnswer(void *a1)
{
  return WebAnswer.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for WebAnswer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    uint64_t v8 = *(int *)(a3 + 28);
    uint64_t v9 = (char *)a2 + v8;
    uint64_t v10 = (char *)a1 + v8;
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v11 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v11))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v10, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v10, v9, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v11);
    }
  }
  return v3;
}

uint64_t destroy for WebAnswer(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t result = __swift_getEnumTagSinglePayload(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v7(v4, v5);
  }
  return result;
}

void *initializeWithCopy for WebAnswer(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)a2 + v7;
  uint64_t v9 = (char *)a1 + v7;
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v10 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v9, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v9, v8, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v10);
  }
  return a1;
}

void *assignWithCopy for WebAnswer(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  return a1;
}

_OWORD *initializeWithTake for WebAnswer(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8))
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v8);
  }
  return a1;
}

void *assignWithTake for WebAnswer(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = (char *)a1 + v9;
  int v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v12);
  int v14 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12);
  if (!EnumTagSinglePayload)
  {
    uint64_t v15 = *(void *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for WebAnswer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_258452B1C);
}

uint64_t sub_258452B1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v9 = a1 + *(int *)(a3 + 28);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for WebAnswer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_258452BBC);
}

uint64_t sub_258452BBC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v8 = v5 + *(int *)(a4 + 28);
    return __swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

void type metadata completion function for WebAnswer()
{
  type metadata accessor for URL?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *storeEnumTagSinglePayload for WebAnswer.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x258452DB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for WebAnswer.CodingKeys()
{
  return &unk_2706AECE8;
}

uint64_t OUTLINED_FUNCTION_1_28()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_41()
{
  return v0;
}

uint64_t WebImage.init(id:url:title:description:altText:surroundingText:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *a9 = a1;
  a9[1] = a2;
  uint64_t v18 = (int *)type metadata accessor for WebImage();
  uint64_t result = outlined init with take of URL?(a3, (uint64_t)a9 + v18[5]);
  uint64_t v20 = (void *)((char *)a9 + v18[6]);
  *uint64_t v20 = a4;
  v20[1] = a5;
  uint64_t v21 = (void *)((char *)a9 + v18[7]);
  *uint64_t v21 = a6;
  v21[1] = a7;
  uint64_t v22 = (void *)((char *)a9 + v18[8]);
  *uint64_t v22 = a8;
  v22[1] = a10;
  uint64_t v23 = (void *)((char *)a9 + v18[9]);
  *uint64_t v23 = a11;
  v23[1] = a12;
  return result;
}

uint64_t type metadata accessor for WebImage()
{
  uint64_t result = type metadata singleton initialization cache for WebImage;
  if (!type metadata singleton initialization cache for WebImage) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t WebImage.id.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t WebImage.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for WebImage() + 20);
  return outlined init with copy of URL?(v3, a1);
}

uint64_t WebImage.title.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t WebImage.description.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t WebImage.altText.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t WebImage.surroundingText.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t WebImage.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 7107189 && a2 == 0xE300000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x74786554746C61 && a2 == 0xE700000000000000;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else if (a1 == 0x646E756F72727573 && a2 == 0xEF74786554676E69)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else
          {
            char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v11) {
              return 5;
            }
            else {
              return 6;
            }
          }
        }
      }
    }
  }
}

uint64_t WebImage.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 25705;
  switch(a1)
  {
    case 1:
      uint64_t result = 7107189;
      break;
    case 2:
      uint64_t result = 0x656C746974;
      break;
    case 3:
      uint64_t result = 0x7470697263736564;
      break;
    case 4:
      uint64_t result = 0x74786554746C61;
      break;
    case 5:
      uint64_t result = 0x646E756F72727573;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WebImage.CodingKeys()
{
  return WebImage.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WebImage.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WebImage.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WebImage.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WebImage.CodingKeys and conformance WebImage.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WebImage.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WebImage.CodingKeys and conformance WebImage.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t WebImage.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WebImage.CodingKeys>);
  OUTLINED_FUNCTION_1();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_15();
  uint64_t v9 = v8 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WebImage.CodingKeys and conformance WebImage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    uint64_t v10 = (int *)type metadata accessor for WebImage();
    type metadata accessor for URL();
    _s10Foundation3URLVACSEAAWlTm_1(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_10_29(v10[6]);
    OUTLINED_FUNCTION_2_24();
    OUTLINED_FUNCTION_10_29(v10[7]);
    OUTLINED_FUNCTION_2_24();
    OUTLINED_FUNCTION_10_29(v10[8]);
    OUTLINED_FUNCTION_2_24();
    OUTLINED_FUNCTION_10_29(v10[9]);
    OUTLINED_FUNCTION_2_24();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

unint64_t lazy protocol witness table accessor for type WebImage.CodingKeys and conformance WebImage.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WebImage.CodingKeys and conformance WebImage.CodingKeys;
  if (!lazy protocol witness table cache variable for type WebImage.CodingKeys and conformance WebImage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WebImage.CodingKeys and conformance WebImage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WebImage.CodingKeys and conformance WebImage.CodingKeys;
  if (!lazy protocol witness table cache variable for type WebImage.CodingKeys and conformance WebImage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WebImage.CodingKeys and conformance WebImage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WebImage.CodingKeys and conformance WebImage.CodingKeys;
  if (!lazy protocol witness table cache variable for type WebImage.CodingKeys and conformance WebImage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WebImage.CodingKeys and conformance WebImage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WebImage.CodingKeys and conformance WebImage.CodingKeys;
  if (!lazy protocol witness table cache variable for type WebImage.CodingKeys and conformance WebImage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WebImage.CodingKeys and conformance WebImage.CodingKeys);
  }
  return result;
}

uint64_t WebImage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v4 - 8);
  OUTLINED_FUNCTION_15();
  uint64_t v7 = v6 - v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WebImage.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_15();
  char v29 = (int *)type metadata accessor for WebImage();
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_15();
  uint64_t v30 = (uint64_t *)(v10 - v9);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WebImage.CodingKeys and conformance WebImage.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  uint64_t *v30 = KeyedDecodingContainer.decode(_:forKey:)();
  v30[1] = v11;
  type metadata accessor for URL();
  _s10Foundation3URLVACSEAAWlTm_1(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  outlined init with take of URL?(v7, (uint64_t)v30 + v29[5]);
  uint64_t v12 = OUTLINED_FUNCTION_4_30();
  uint64_t v13 = (uint64_t *)((char *)v30 + v29[6]);
  *uint64_t v13 = v12;
  v13[1] = v14;
  uint64_t v15 = OUTLINED_FUNCTION_4_30();
  uint64_t v16 = (uint64_t *)((char *)v30 + v29[7]);
  *uint64_t v16 = v15;
  v16[1] = v17;
  uint64_t v18 = OUTLINED_FUNCTION_4_30();
  uint64_t v19 = (uint64_t *)((char *)v30 + v29[8]);
  uint64_t *v19 = v18;
  v19[1] = v20;
  uint64_t v21 = OUTLINED_FUNCTION_4_30();
  uint64_t v23 = v22;
  uint64_t v24 = OUTLINED_FUNCTION_0_20();
  v25(v24);
  char v26 = (uint64_t *)((char *)v30 + v29[9]);
  *char v26 = v21;
  v26[1] = v23;
  outlined init with copy of WebImage((uint64_t)v30, a2);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return outlined destroy of WebImage((uint64_t)v30);
}

uint64_t outlined init with copy of WebImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WebImage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of WebImage(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WebImage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t instantiation function for generic protocol witness table for WebImage(void *a1)
{
  a1[1] = _s10Foundation3URLVACSEAAWlTm_1(&lazy protocol witness table cache variable for type WebImage and conformance WebImage, (void (*)(uint64_t))type metadata accessor for WebImage);
  a1[2] = _s10Foundation3URLVACSEAAWlTm_1(&lazy protocol witness table cache variable for type WebImage and conformance WebImage, (void (*)(uint64_t))type metadata accessor for WebImage);
  uint64_t result = _s10Foundation3URLVACSEAAWlTm_1(&lazy protocol witness table cache variable for type WebImage and conformance WebImage, (void (*)(uint64_t))type metadata accessor for WebImage);
  a1[3] = result;
  return result;
}

uint64_t _s10Foundation3URLVACSEAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance WebImage@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return WebImage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WebImage(void *a1)
{
  return WebImage.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for WebImage(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = (uint64_t *)((char *)v4 + v14);
    uint64_t v17 = (uint64_t *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = (uint64_t *)((char *)v4 + v15);
    uint64_t v20 = (uint64_t *)((char *)a2 + v15);
    uint64_t v21 = v20[1];
    void *v19 = *v20;
    v19[1] = v21;
    uint64_t v22 = a3[8];
    uint64_t v23 = a3[9];
    uint64_t v24 = (uint64_t *)((char *)v4 + v22);
    uint64_t v25 = (uint64_t *)((char *)a2 + v22);
    uint64_t v26 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v26;
    char v27 = (uint64_t *)((char *)v4 + v23);
    char v28 = (uint64_t *)((char *)a2 + v23);
    uint64_t v29 = v28[1];
    void *v27 = *v28;
    v27[1] = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for WebImage(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for WebImage(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v12);
  uint64_t v15 = (void *)((char *)a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (void *)((char *)a1 + v13);
  uint64_t v18 = (void *)((char *)a2 + v13);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = a3[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = (void *)((char *)a1 + v20);
  uint64_t v23 = (void *)((char *)a2 + v20);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = (void *)((char *)a1 + v21);
  uint64_t v26 = (void *)((char *)a2 + v21);
  uint64_t v27 = v26[1];
  *uint64_t v25 = *v26;
  v25[1] = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for WebImage(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
LABEL_7:
  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  void *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[8];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[9];
  uint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (void *)((char *)a2 + v23);
  *uint64_t v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for WebImage(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  uint64_t v12 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  return a1;
}

void *assignWithTake for WebImage(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  int v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (!EnumTagSinglePayload)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[7];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[8];
  uint64_t v26 = (void *)((char *)a1 + v25);
  uint64_t v27 = (void *)((char *)a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  *uint64_t v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[9];
  uint64_t v31 = (void *)((char *)a1 + v30);
  uint64_t v32 = (void *)((char *)a2 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WebImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_258454670);
}

uint64_t sub_258454670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for WebImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_258454710);
}

uint64_t sub_258454710(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v8 = v5 + *(int *)(a4 + 20);
    return __swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

void type metadata completion function for WebImage()
{
  type metadata accessor for URL?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *storeEnumTagSinglePayload for WebImage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x258454908);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for WebImage.CodingKeys()
{
  return &unk_2706AEDB0;
}

uint64_t OUTLINED_FUNCTION_0_20()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_2_24()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_4_30()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

void *BundleId.calendar.unsafeMutableAddressor()
{
  return &static BundleId.calendar;
}

void *BundleId.reminders.unsafeMutableAddressor()
{
  return &static BundleId.reminders;
}

void *BundleId.contacts.unsafeMutableAddressor()
{
  return &static BundleId.contacts;
}

void *BundleId.mail.unsafeMutableAddressor()
{
  return &static BundleId.mail;
}

void *BundleId.messages.unsafeMutableAddressor()
{
  return &static BundleId.messages;
}

void *BundleId.voiceMemos.unsafeMutableAddressor()
{
  return &static BundleId.voiceMemos;
}

void *BundleId.phone.unsafeMutableAddressor()
{
  return &static BundleId.phone;
}

void *BundleId.notes.unsafeMutableAddressor()
{
  return &static BundleId.notes;
}

void *BundleId.journal.unsafeMutableAddressor()
{
  return &static BundleId.journal;
}

void *BundleId.iCloudFiles.unsafeMutableAddressor()
{
  return &static BundleId.iCloudFiles;
}

void *BundleId.localFiles.unsafeMutableAddressor()
{
  return &static BundleId.localFiles;
}

void *BundleId.photos.unsafeMutableAddressor()
{
  return &static BundleId.photos;
}

void *BundleId.wallet.unsafeMutableAddressor()
{
  return &static BundleId.wallet;
}

void *BundleId.safari.unsafeMutableAddressor()
{
  return &static BundleId.safari;
}

void *BundleId.mailSearchIndexer.unsafeMutableAddressor()
{
  return &static BundleId.mailSearchIndexer;
}

uint64_t *BundleIdEventSourceIdMapping.dict.unsafeMutableAddressor()
{
  if (one-time initialization token for dict != -1) {
    swift_once();
  }
  return &static BundleIdEventSourceIdMapping.dict;
}

void *BundleId.spotlightEvents.unsafeMutableAddressor()
{
  return &static BundleId.spotlightEvents;
}

unint64_t static BundleId.contacts.getter()
{
  return OUTLINED_FUNCTION_91_1(27);
}

unint64_t static BundleId.calendar.getter()
{
  return OUTLINED_FUNCTION_91_1(19);
}

unint64_t static BundleId.mail.getter()
{
  return OUTLINED_FUNCTION_91_1(20);
}

unint64_t static BundleId.notes.getter()
{
  return OUTLINED_FUNCTION_91_1(21);
}

unint64_t static BundleId.photos.getter()
{
  return OUTLINED_FUNCTION_91_1(25);
}

unint64_t static BundleId.mailSearchIndexer.getter()
{
  return OUTLINED_FUNCTION_91_1(29);
}

unint64_t static BundleId.iCloudFiles.getter()
{
  return OUTLINED_FUNCTION_91_1(43);
}

unint64_t static BundleId.localFiles.getter()
{
  return OUTLINED_FUNCTION_91_1(35);
}

unint64_t static BundleId.messages.getter()
{
  return OUTLINED_FUNCTION_91_1(19);
}

unint64_t static BundleId.wallet.getter()
{
  return OUTLINED_FUNCTION_91_1(18);
}

unint64_t static BundleId.reminders.getter()
{
  return OUTLINED_FUNCTION_91_1(19);
}

unint64_t static BundleId.phone.getter()
{
  return OUTLINED_FUNCTION_91_1(21);
}

unint64_t static BundleId.journal.getter()
{
  return OUTLINED_FUNCTION_91_1(17);
}

unint64_t static BundleId.safari.getter()
{
  return OUTLINED_FUNCTION_91_1(22);
}

unint64_t static BundleId.voiceMemos.getter()
{
  return OUTLINED_FUNCTION_91_1(20);
}

void *BundleId.omniSearch.unsafeMutableAddressor()
{
  return &static BundleId.omniSearch;
}

unint64_t static BundleId.omniSearch.getter()
{
  return OUTLINED_FUNCTION_91_1(20);
}

unint64_t static BundleId.spotlightEvents.getter()
{
  return OUTLINED_FUNCTION_91_1(26);
}

uint64_t one-time initialization function for dict()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_258661700;
  *(void *)(inited + 32) = 0xD000000000000014;
  *(void *)(inited + 40) = 0x800000025867C750;
  *(void *)(inited + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 56) = v1;
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  static BundleIdEventSourceIdMapping.dict = result;
  return result;
}

uint64_t static BundleIdEventSourceIdMapping.dict.getter()
{
  if (one-time initialization token for dict != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for BundleId()
{
  return &type metadata for BundleId;
}

ValueMetadata *type metadata accessor for BundleIdEventSourceIdMapping()
{
  return &type metadata for BundleIdEventSourceIdMapping;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1)
{
  uint64_t v9 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v4 = (id)MEMORY[0x25A2C8550](v3, a1);
LABEL_7:
        uint64_t v5 = v4;
        unint64_t v6 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_15;
        }
        if (CSSearchableItem.isEventTypeItem.getter())
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v3;
        if (v6 == v2)
        {
          uint64_t v7 = v9;
          goto LABEL_18;
        }
      }
      if (v3 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2) {
        goto LABEL_17;
      }
    }
    id v4 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_7;
  }
LABEL_17:
  uint64_t v7 = MEMORY[0x263F8EE78];
LABEL_18:
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Photo?);
  MEMORY[0x270FA5388](v4 - 8);
  unint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for Photo(0);
  uint64_t v22 = *(void *)(v25 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v25);
  uint64_t v24 = (uint64_t)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v21 = (uint64_t)v20 - v9;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v10; uint64_t v10 = _CocoaArrayWrapper.endIndex.getter())
  {
    v20[1] = v2;
    unint64_t v23 = a1 & 0xC000000000000001;
    uint64_t v11 = MEMORY[0x263F8EE78];
    uint64_t v12 = 4;
    uint64_t v13 = (id *)a1;
    while (1)
    {
      uint64_t v2 = v10;
      uint64_t v14 = v23 ? (id *)MEMORY[0x25A2C8550](v12 - 4, a1) : (id *)*(id *)(a1 + 8 * v12);
      a1 = (unint64_t)v14;
      uint64_t v15 = v12 - 3;
      if (__OFADD__(v12 - 4, 1)) {
        break;
      }
      LocalIndexClient.constructPhotoDocument(item:)(v14, (uint64_t)v6);

      if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v25) == 1)
      {
        outlined destroy of EagerResolutionService?((uint64_t)v6, &demangling cache variable for type metadata for Photo?);
      }
      else
      {
        uint64_t v16 = v21;
        outlined init with take of VoiceMemo((uint64_t)v6, v21, (void (*)(void))type metadata accessor for Photo);
        outlined init with take of VoiceMemo(v16, v24, (void (*)(void))type metadata accessor for Photo);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1, v11);
        }
        unint64_t v18 = *(void *)(v11 + 16);
        unint64_t v17 = *(void *)(v11 + 24);
        if (v18 >= v17 >> 1) {
          uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1, v11);
        }
        *(void *)(v11 + 16) = v18 + 1;
        outlined init with take of VoiceMemo(v24, v11+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(void *)(v22 + 72) * v18, (void (*)(void))type metadata accessor for Photo);
      }
      ++v12;
      a1 = (unint64_t)v13;
      if (v15 == v10)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return v11;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1, SEL *a2)
{
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
    uint64_t v6 = 4;
    uint64_t v16 = v4;
    while (1)
    {
      uint64_t v7 = v6 - 4;
      id v8 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x25A2C8550](v6 - 4, a1) : *(id *)(a1 + 8 * v6);
      uint64_t v9 = v8;
      uint64_t v10 = v6 - 3;
      if (__OFADD__(v7, 1)) {
        break;
      }
      outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.filename.getter(objc_msgSend(v8, sel_attributeSet), a2);
      OUTLINED_FUNCTION_152_3();

      if (v2)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v5 = v13;
        }
        unint64_t v11 = *(void *)(v5 + 16);
        if (v11 >= *(void *)(v5 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v5 = v14;
        }
        *(void *)(v5 + 16) = v11 + 1;
        uint64_t v12 = v5 + 16 * v11;
        *(void *)(v12 + 32) = v7;
        *(void *)(v12 + 40) = v2;
        uint64_t v4 = v16;
      }
      ++v6;
      if (v10 == v4) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
LABEL_19:
  swift_bridgeObjectRelease();
  return v5;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys11AnyHashableVypG_SSs5NeverOTg505_ss11de31VypSSIgnno_AB3key_yp5valuetSSs5F111OIegnrzr_TR073_sSo28CSSearchableItemAttributeSetC10OmniSearchE10keyStringsSaySSGvgSSs11aB10V_yptXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v20 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v3 = specialized Dictionary.startIndex.getter(a1);
    if ((v3 & 0x8000000000000000) == 0)
    {
      unint64_t v5 = v3;
      if (v3 < 1 << *(unsigned char *)(a1 + 32))
      {
        int v6 = v4;
        uint64_t v7 = a1 + 64;
        while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
        {
          if (v6 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_20;
          }
          outlined init with copy of AnyHashable(*(void *)(a1 + 48) + 40 * v5, (uint64_t)v18);
          outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v5, (uint64_t)v19);
          outlined init with copy of AnyHashable((uint64_t)v18, (uint64_t)__src);
          outlined init with copy of Any((uint64_t)v19, (uint64_t)&__src[40]);
          memcpy(__dst, __src, sizeof(__dst));
          outlined destroy of EagerResolutionService?((uint64_t)v18, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
          uint64_t v8 = AnyHashable.description.getter();
          uint64_t v14 = v9;
          uint64_t v15 = v8;
          outlined destroy of EagerResolutionService?((uint64_t)__dst, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
          uint64_t v10 = v20;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v10 = v20;
          }
          unint64_t v11 = *(void *)(v10 + 16);
          if (v11 >= *(void *)(v10 + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v10 = v20;
          }
          *(void *)(v10 + 16) = v11 + 1;
          uint64_t v12 = v10 + 16 * v11;
          *(void *)(v12 + 32) = v15;
          *(void *)(v12 + 40) = v14;
          if ((uint64_t)v5 >= -(-1 << *(unsigned char *)(a1 + 32))) {
            goto LABEL_21;
          }
          uint64_t v7 = a1 + 64;
          if ((*(void *)(a1 + 64 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
            goto LABEL_22;
          }
          if (v6 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_23;
          }
          uint64_t v13 = _HashTable.occupiedBucket(after:)();
          if (!--v1) {
            return;
          }
          unint64_t v5 = v13;
          if ((v13 & 0x8000000000000000) == 0)
          {
            int v6 = *(_DWORD *)(a1 + 36);
            if (v13 < 1 << *(unsigned char *)(a1 + 32)) {
              continue;
            }
          }
          goto LABEL_24;
        }
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
      }
    }
LABEL_24:
    __break(1u);
  }
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys11AnyHashableVypG_SS_SSts5NeverOTg505_ss11de37VypS2SIgnnoo_AB3key_yp5valuetSS_SSts5f75OIegnrzr_TR070_sSo28CSSearchableItemAttributeSetC10OmniSearchE9kvStringsSayM40_SStGvgr7_SSts11aB10V_yptXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v24 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v3 = specialized Dictionary.startIndex.getter(a1);
    if ((v3 & 0x8000000000000000) == 0)
    {
      unint64_t v5 = v3;
      if (v3 < 1 << *(unsigned char *)(a1 + 32))
      {
        uint64_t v6 = a1 + 64;
        while ((*(void *)(v6 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
        {
          if (v4 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_20;
          }
          int v15 = v4;
          outlined init with copy of AnyHashable(*(void *)(a1 + 48) + 40 * v5, (uint64_t)v22);
          outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v5, (uint64_t)v23);
          outlined init with copy of AnyHashable((uint64_t)v22, (uint64_t)__src);
          outlined init with copy of Any((uint64_t)v23, (uint64_t)&__src[40]);
          memcpy(__dst, __src, sizeof(__dst));
          outlined destroy of EagerResolutionService?((uint64_t)v22, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
          uint64_t v7 = AnyHashable.description.getter();
          uint64_t v17 = v8;
          uint64_t v18 = v7;
          outlined init with copy of Any((uint64_t)&__dst[40], (uint64_t)v19);
          uint64_t v9 = String.init<A>(describing:)();
          uint64_t v16 = v10;
          outlined destroy of EagerResolutionService?((uint64_t)__dst, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
          uint64_t v11 = v24;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v11 = v24;
          }
          unint64_t v12 = *(void *)(v11 + 16);
          if (v12 >= *(void *)(v11 + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v11 = v24;
          }
          *(void *)(v11 + 16) = v12 + 1;
          uint64_t v13 = (void *)(v11 + 32 * v12);
          v13[4] = v18;
          v13[5] = v17;
          v13[6] = v9;
          v13[7] = v16;
          if ((uint64_t)v5 >= -(-1 << *(unsigned char *)(a1 + 32))) {
            goto LABEL_21;
          }
          uint64_t v6 = a1 + 64;
          if ((*(void *)(a1 + 64 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
            goto LABEL_22;
          }
          if (v15 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_23;
          }
          uint64_t v14 = _HashTable.occupiedBucket(after:)();
          if (!--v1) {
            return;
          }
          unint64_t v5 = v14;
          if ((v14 & 0x8000000000000000) == 0)
          {
            int v4 = *(_DWORD *)(a1 + 36);
            if (v14 < 1 << *(unsigned char *)(a1 + 32)) {
              continue;
            }
          }
          goto LABEL_24;
        }
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
      }
    }
LABEL_24:
    __break(1u);
  }
}

uint64_t specialized Array.init<A>(_:)(uint64_t a1)
{
  specialized _copyCollectionToContiguousArray<A>(_:)(a1);
  OUTLINED_FUNCTION_38_18();
  return v1;
}

void specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:));
    swift_bridgeObjectRelease();
  }
  else
  {
    id v3 = (id)specialized Dictionary._Variant.removeValue(forKey:)(a2, a3);
    swift_bridgeObjectRelease();
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:));
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized Sequence.forEach(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t v8 = swift_bridgeObjectRetain() + 40;
    do
    {
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 - 8);
      swift_retain();
      v9(a2, a3, a4);
      swift_release();
      v8 += 16;
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t static LocalIndexClient.displayName(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)Dictionary.init(dictionaryLiteral:)();
  if (a2)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v5 = OUTLINED_FUNCTION_186_2();
    uint64_t v7 = specialized Dictionary.subscript.getter(v5, v6, (uint64_t)v4);
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v9)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v7 = a1;
      uint64_t v9 = a2;
    }
    type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for LSBundleRecord);
    OUTLINED_FUNCTION_197_2();
    swift_bridgeObjectRetain();
    @nonobjc LSBundleRecord.__allocating_init(bundleIdentifier:allowPlaceholder:)(v7, v9, 0);
    OUTLINED_FUNCTION_197_2();
    swift_bridgeObjectRelease();
    id v10 = objc_msgSend(v4, sel_localizedName);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_187_1();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return OUTLINED_FUNCTION_186_2();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> specialized static Array.+ infix(_:_:)()
{
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [CSSearchableItem]) -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for CSSearchableItem);
  OUTLINED_FUNCTION_175_2();
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  id v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

void static LocalIndexClient.emailDocument(from:)()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v1 = v0;
  uint64_t v67 = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_184_0();
  uint64_t v6 = v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v8 = OUTLINED_FUNCTION_81(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_15();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for Date();
  OUTLINED_FUNCTION_0_10();
  uint64_t v14 = v13;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_95_1();
  uint64_t v18 = v16 - v17;
  MEMORY[0x270FA5388](v19);
  uint64_t v68 = (uint64_t)&v56 - v20;
  uint64_t v69 = v1;
  id v21 = objc_msgSend(v1, sel_attributeSet);
  id v22 = objc_msgSend(v21, sel_mailRead);
  if (v22)
  {
    unint64_t v23 = v22;
    unsigned int v24 = objc_msgSend(v22, sel_BOOLValue);

    int v25 = v24 ^ 1;
  }
  else
  {
    int v25 = 2;
  }
  int v66 = v25;
  id v26 = objc_msgSend(v69, sel_uniqueIdentifier);
  uint64_t v27 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v64 = v28;
  uint64_t v65 = v27;

  if (objc_msgSend(v21, sel_attributeForKey_, *MEMORY[0x263F029A8]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_116_7();
  }
  outlined init with take of Any?((uint64_t)v74, (uint64_t)v72, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v73)
  {
    if (OUTLINED_FUNCTION_169_1())
    {
      uint64_t v63 = v70;
      unint64_t v29 = v71;
      goto LABEL_12;
    }
  }
  else
  {
    outlined destroy of EagerResolutionService?((uint64_t)v72, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v63 = 0;
  unint64_t v29 = 0xE000000000000000;
LABEL_12:
  unint64_t v62 = v29;
  uint64_t v61 = (uint64_t *)outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v21, (SEL *)&selRef_subject);
  uint64_t v60 = v30;
  uint64_t v31 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v21, (SEL *)&selRef_contentSnippet);
  OUTLINED_FUNCTION_167_2(v31, v32);
  uint64_t v33 = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v21, (SEL *)&selRef_authorNames);
  uint64_t v34 = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v21, (SEL *)&selRef_authorEmailAddresses);
  if (objc_msgSend(v21, sel_attributeForKey_, *MEMORY[0x263F02710]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_116_7();
  }
  outlined init with take of Any?((uint64_t)v74, (uint64_t)v72, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v73)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (OUTLINED_FUNCTION_169_1())
    {
      uint64_t v35 = v70;
      goto LABEL_20;
    }
  }
  else
  {
    outlined destroy of EagerResolutionService?((uint64_t)v72, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v35 = MEMORY[0x263F8EE78];
LABEL_20:
  uint64_t v57 = v35;
  uint64_t v36 = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v21, (SEL *)&selRef_recipientEmailAddresses);
  id v37 = objc_msgSend(v21, sel_mailDateReceived);
  if (v37)
  {
    uint64_t v38 = v37;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
    v39(v11, v18, v12);
    __swift_storeEnumTagSinglePayload(v11, 0, 1, v12);
    OUTLINED_FUNCTION_53_2(v11, 1, v12);
    if (!v40)
    {
      v39(v68, v11, v12);
      goto LABEL_25;
    }
  }
  else
  {
    __swift_storeEnumTagSinglePayload(v11, 1, 1, v12);
  }
  static Date.now.getter();
  outlined destroy of EagerResolutionService?(v11, &demangling cache variable for type metadata for Date?);
LABEL_25:
  uint64_t v41 = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v21, (SEL *)&selRef_attachmentNames);
  uint64_t v42 = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v21, (SEL *)&selRef_attachmentTypes);
  uint64_t v43 = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v21, (SEL *)&selRef_attachmentPaths);
  uint64_t v44 = outlined bridged method (pb) of @objc CSSearchableItem.bundleID.getter(v69);
  if (v45)
  {
    if (v44 == 0xD000000000000014 && v45 == 0x800000025867C750) {
      char v46 = 1;
    }
    else {
      char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v46 = 0;
  }
  if (v43) {
    uint64_t v47 = v43;
  }
  else {
    uint64_t v47 = MEMORY[0x263F8EE78];
  }
  uint64_t v56 = v47;
  if (!v42) {
    uint64_t v42 = MEMORY[0x263F8EE78];
  }
  if (!v41) {
    uint64_t v41 = MEMORY[0x263F8EE78];
  }
  if (v36) {
    uint64_t v48 = v36;
  }
  else {
    uint64_t v48 = MEMORY[0x263F8EE78];
  }
  if (v34) {
    uint64_t v49 = v34;
  }
  else {
    uint64_t v49 = MEMORY[0x263F8EE78];
  }
  if (!v33) {
    uint64_t v33 = MEMORY[0x263F8EE78];
  }
  type metadata accessor for PartialExtractedAttributes(0);
  OUTLINED_FUNCTION_166_3();
  __swift_storeEnumTagSinglePayload(v6, 1, 1, v50);
  type metadata accessor for FeatureFlagService();
  uint64_t v51 = swift_allocObject();
  uint64_t v52 = (uint64_t)v69;
  id v53 = v69;
  BYTE1(v54) = v46 & 1;
  LOBYTE(v54) = v66;
  EmailDocument.init(id:mailMessageId:subject:body:authorNames:from:to:cc:date:attachmentNames:attachmentTypes:attachmentPaths:unread:hydratable:dataDetectorResults:extractedEventsLLMConsumableDescription:partialExtractedAttributes:csItem:featureFlagService:)((uint64_t)v65, v64, v63, v62, (uint64_t)v61, v60, v59, v58, v33, v49, v57, v48, v68, v41, v42, v56, v54, (uint64_t)v72, 0,
    0,
    v6,
    v52,
    v51,
    v55,
    v56,
    v57,
    v58,
    v59,
    v60,
    SBYTE1(v60),
    v61,
    v62,
    v63,
    v64,
    v65);

  OUTLINED_FUNCTION_119_0();
}

void *specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v18 = Set.init(minimumCapacity:)();
  uint64_t result = specialized _NativeDictionary.makeIterator()(v19, a1);
  uint64_t v3 = v19[0];
  uint64_t v4 = v19[1];
  int64_t v5 = v19[3];
  unint64_t v6 = v20;
  int64_t v7 = (unint64_t)(v19[2] + 64) >> 6;
  if (!v20) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v9 = v8 | (v5 << 6);
  while (1)
  {
    uint64_t v14 = (Swift::Int *)(*(void *)(v3 + 48) + 16 * v9);
    Swift::Int v15 = *v14;
    Swift::Int v16 = v14[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v15, v16);
    uint64_t result = (void *)swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    if (v10 >= v7) {
      goto LABEL_21;
    }
    unint64_t v11 = *(void *)(v4 + 8 * v10);
    int64_t v12 = v5 + 1;
    if (!v11)
    {
      int64_t v12 = v5 + 2;
      if (v5 + 2 >= v7) {
        goto LABEL_21;
      }
      unint64_t v11 = *(void *)(v4 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v5 + 3;
        if (v5 + 3 >= v7) {
          goto LABEL_21;
        }
        unint64_t v11 = *(void *)(v4 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v5 + 4;
          if (v5 + 4 >= v7) {
            goto LABEL_21;
          }
          unint64_t v11 = *(void *)(v4 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v5 + 5;
            if (v5 + 5 >= v7) {
              goto LABEL_21;
            }
            unint64_t v11 = *(void *)(v4 + 8 * v12);
            if (!v11)
            {
              int64_t v13 = v5 + 6;
              while (v13 < v7)
              {
                unint64_t v11 = *(void *)(v4 + 8 * v13++);
                if (v11)
                {
                  int64_t v12 = v13 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              swift_release();
              return (void *)v18;
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    int64_t v5 = v12;
  }
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v9 = Set.init(minimumCapacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v8, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    OUTLINED_FUNCTION_38_18();
  }
  return v1;
}

uint64_t ItemFetcher.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static LocalIndexClient.results(for:)(unint64_t a1)
{
  uint64_t v58 = MEMORY[0x263F8EE78];
  if (a1 >> 62)
  {
LABEL_46:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
LABEL_47:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_47;
  }
LABEL_3:
  unint64_t v3 = 0;
  uint64_t v51 = *MEMORY[0x263F02938];
  uint64_t v50 = *MEMORY[0x263F02020];
  unint64_t v4 = 0x263F78000uLL;
  uint64_t v47 = v2;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      id v5 = (id)MEMORY[0x25A2C8550](v3, a1);
    }
    else
    {
      if (v3 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_45;
      }
      id v5 = *(id *)(a1 + 32 + 8 * v3);
    }
    Swift::Int v6 = v5;
    BOOL v7 = __OFADD__(v3, 1);
    unint64_t v8 = v3 + 1;
    if (v7)
    {
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logging.search);
    id v10 = v6;
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    id v54 = v10;
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = OUTLINED_FUNCTION_14_1();
      v57[0] = OUTLINED_FUNCTION_13_1();
      *(_DWORD *)uint64_t v13 = 136315138;
      id v14 = v10;
      id v15 = objc_msgSend(v14, sel_description);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_152_3();

      id v10 = v54;
      *(void *)(v13 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v4, v57);

      unint64_t v4 = 0x263F78000;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_257DC6000, v11, v12, "Found section: %s", (uint8_t *)v13, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_34();
    }
    else
    {
    }
    unint64_t result = outlined bridged method (pb) of @objc SFResultSection.results.getter(v10, (SEL *)&selRef_results, &lazy cache variable for type metadata for SFSearchResult);
    if (!result) {
      break;
    }
    uint64_t v1 = result;
    unint64_t v48 = v8;
    if (result >> 62)
    {
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      if (!v17) {
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v17 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v17) {
        goto LABEL_41;
      }
    }
    if (v17 < 1) {
      goto LABEL_44;
    }
    uint64_t v18 = 0;
    unint64_t v56 = v1 & 0xC000000000000001;
    uint64_t v52 = v17;
    uint64_t v53 = v1;
    do
    {
      if (v56) {
        id v19 = (id)MEMORY[0x25A2C8550](v18, v1);
      }
      else {
        id v19 = *(id *)(v1 + 8 * v18 + 32);
      }
      unint64_t v20 = v19;
      self;
      id v21 = (void *)swift_dynamicCastObjCClass();
      id v22 = v20;
      unint64_t v23 = v22;
      if (v21)
      {
        id v24 = v22;
        MEMORY[0x25A2C7E10]();
        OUTLINED_FUNCTION_198_1();
        if (v25) {
          OUTLINED_FUNCTION_194_1();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for NSString);
        uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
        if (objc_msgSend(v21, sel_valueForAttribute_withType_, v51, ObjCClassFromMetadata))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          OUTLINED_FUNCTION_116_7();
        }
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
        uint64_t v55 = String.init<A>(describing:)();
        unint64_t v32 = v31;
        if (objc_msgSend(v21, sel_valueForAttribute_withType_, v50, ObjCClassFromMetadata))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          OUTLINED_FUNCTION_116_7();
        }
        uint64_t v33 = String.init<A>(describing:)();
        unint64_t v35 = v34;
        id v36 = v24;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v37, v38))
        {
          uint64_t v39 = OUTLINED_FUNCTION_13_1();
          v57[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136315650;
          id v40 = v36;
          id v41 = objc_msgSend(v21, sel_description);
          uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v49 = v33;
          unint64_t v44 = v43;

          uint64_t v45 = v42;
          unint64_t v4 = 0x263F78000;
          *(void *)(v39 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v44, v57);

          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2080;
          swift_bridgeObjectRetain();
          *(void *)(v39 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v32, v57);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v39 + 22) = 2080;
          swift_bridgeObjectRetain();
          *(void *)(v39 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v35, v57);
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_257DC6000, v37, v38, "Found result: %s, uniqueId:%s, domainId: %s", (uint8_t *)v39, 0x20u);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_34();
          OUTLINED_FUNCTION_34();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          OUTLINED_FUNCTION_148_2();
        }
        uint64_t v1 = v53;
        id v10 = v54;
        uint64_t v17 = v52;
      }
      else
      {
        uint64_t v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v29 = OUTLINED_FUNCTION_14_1();
          uint64_t v30 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v29 = 138412290;
          *(void *)(v29 + 4) = v23;
          void *v30 = v23;
          _os_log_impl(&dword_257DC6000, v27, v28, "Failed to cast search result to spotlightExtras: %@", (uint8_t *)v29, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          OUTLINED_FUNCTION_182_3();
          OUTLINED_FUNCTION_34();
          OUTLINED_FUNCTION_34();
        }
        else
        {
        }
      }
      ++v18;
    }
    while (v17 != v18);
LABEL_41:

    swift_bridgeObjectRelease();
    unint64_t v3 = v48;
    if (v48 == v47)
    {
      swift_bridgeObjectRelease();
      return v58;
    }
  }
  __break(1u);
  return result;
}

void static LocalIndexClient.searchableItems(for:)()
{
  OUTLINED_FUNCTION_104_0();
  unint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  uint64_t v3 = OUTLINED_FUNCTION_81(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_184_0();
  uint64_t v78 = v4;
  uint64_t v77 = type metadata accessor for UTType();
  OUTLINED_FUNCTION_0_10();
  Swift::Int v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_185_0();
  uint64_t v67 = v8;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v9);
  int v66 = (char *)&v62 - v10;
  v91[4] = MEMORY[0x263F8EE78];
  if (v1 >> 62) {
    goto LABEL_58;
  }
  uint64_t v11 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v11; uint64_t v11 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v13 = 0;
    unint64_t v80 = v1 & 0xC000000000000001;
    uint64_t v69 = v1 & 0xFFFFFFFFFFFFFF8;
    unint64_t v68 = v1 + 32;
    uint64_t v65 = v6 + 4;
    uint64_t v64 = v6 + 2;
    uint64_t v63 = v6 + 1;
    id v14 = v91;
    uint64_t v75 = *MEMORY[0x263F01F98];
    uint64_t v74 = *MEMORY[0x263F01FA0];
    uint64_t v73 = *MEMORY[0x263F02938];
    uint64_t v72 = *MEMORY[0x263F02020];
    *(void *)&long long v12 = 138412290;
    long long v62 = v12;
    OUTLINED_FUNCTION_115_5();
    uint64_t v71 = v15;
    uint64_t v16 = MEMORY[0x263F8EE58];
    uint64_t v70 = MEMORY[0x263F8EE58] + 8;
    uint64_t v79 = v11;
    unint64_t v76 = v1;
    while (1)
    {
      if (v80)
      {
        uint64_t v17 = OUTLINED_FUNCTION_77_7();
        id v18 = (id)MEMORY[0x25A2C8550](v17);
      }
      else
      {
        if (v13 >= *(void *)(v69 + 16)) {
          goto LABEL_57;
        }
        id v18 = *(id *)(v68 + 8 * v13);
      }
      if (__OFADD__(v13++, 1)) {
        break;
      }
      id v83 = v18;
      uint64_t v20 = outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.filename.getter(v83, (SEL *)&selRef_contentType);
      if (v21)
      {
        uint64_t v22 = v20;
        unint64_t v23 = v21;
        swift_bridgeObjectRetain();
        uint64_t v24 = v78;
        UTType.init(_:)();
        OUTLINED_FUNCTION_53_2(v24, 1, v77);
        unint64_t v82 = v13;
        uint64_t v81 = v22;
        if (v25)
        {
          outlined destroy of EagerResolutionService?(v24, &demangling cache variable for type metadata for UTType?);
          type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for CSSearchableItemAttributeSet);
          swift_bridgeObjectRetain();
          v26._countAndFlagsBits = v22;
          v26._object = v23;
          Class isa = CSSearchableItemAttributeSet.__allocating_init(itemContentType:)(v26).super.isa;
        }
        else
        {
          OUTLINED_FUNCTION_99_9();
          v32();
          type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for CSSearchableItemAttributeSet);
          uint64_t v33 = v67;
          OUTLINED_FUNCTION_51_2();
          v34();
          Class isa = CSSearchableItemAttributeSet.__allocating_init(contentType:)(v33);
          OUTLINED_FUNCTION_14_25();
          v36();
        }
        id v37 = v83;
        id v38 = v83;
        CSSearchableItemAttributeSet.spotlightSearchResult.setter(v37);
        id v39 = objc_msgSend(v38, sel_backendData);
        if (v39)
        {
          id v40 = v39;
          NSDictionary.makeIterator()();
          swift_retain();
          while (1)
          {
            NSDictionary.Iterator.next()();
            outlined init with take of Any?((uint64_t)&v87, (uint64_t)&v89, (uint64_t *)&demangling cache variable for type metadata for (key: Any, value: Any)?);
            if (!v90) {
              break;
            }
            outlined init with take of Any(v14, &v87);
            outlined init with take of Any(&v89, &v86);
            if (OUTLINED_FUNCTION_176_3())
            {
              uint64_t v41 = v84;
              uint64_t v42 = v85;
              uint64_t v43 = v16;
              unint64_t v44 = v14;
              __swift_project_boxed_opaque_existential_1(&v87, *((uint64_t *)&v88 + 1));
              uint64_t v45 = _bridgeAnythingToObjectiveC<A>(_:)();
              char v46 = (void *)MEMORY[0x25A2C7AB0](v41, v42);
              swift_bridgeObjectRelease();
              objc_msgSend(isa, sel_setAttribute_forKey_, v45, v46);
              id v14 = v44;
              uint64_t v16 = v43;
              swift_unknownObjectRelease();
            }
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v87);
          }

          swift_release_n();
        }
        uint64_t v47 = (void *)MEMORY[0x25A2C7AB0](v81, v23);
        swift_bridgeObjectRelease();
        objc_msgSend(isa, sel_setAttribute_forKey_, v47, v75);

        id v48 = v38;
        if (outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentPaths.getter(v48, (SEL *)&selRef_contentTypeTree))
        {
          v49.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
        }
        else
        {
          v49.super.Class isa = 0;
        }
        objc_msgSend(isa, sel_setAttribute_forKey_, v49.super.isa, v74);
        swift_unknownObjectRelease();
        if (outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v48, (SEL *)&selRef_answerAttributes))
        {
          v50.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
        }
        else
        {
          v50.super.Class isa = 0;
        }
        uint64_t v51 = (void *)MEMORY[0x25A2C7AB0](0xD000000000000025, v71);
        objc_msgSend(isa, sel_setAttribute_forKey_, v50.super.isa, v51);
        swift_unknownObjectRelease();

        if (objc_msgSend(isa, sel_attributeForKey_, v73))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v87 = 0u;
          long long v88 = 0u;
        }
        outlined init with take of Any?((uint64_t)&v87, (uint64_t)&v89, (uint64_t *)&demangling cache variable for type metadata for Any?);
        if (v90) {
          OUTLINED_FUNCTION_176_3();
        }
        else {
          outlined destroy of EagerResolutionService?((uint64_t)&v89, (uint64_t *)&demangling cache variable for type metadata for Any?);
        }
        if (objc_msgSend(isa, sel_attributeForKey_, v72))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v87 = 0u;
          long long v88 = 0u;
        }
        outlined init with take of Any?((uint64_t)&v87, (uint64_t)&v89, (uint64_t *)&demangling cache variable for type metadata for Any?);
        if (v90)
        {
          int v52 = OUTLINED_FUNCTION_176_3();
          if (v52) {
            uint64_t v53 = v86;
          }
          else {
            uint64_t v53 = 0;
          }
          if (v52) {
            uint64_t v54 = *((void *)&v86 + 1);
          }
          else {
            uint64_t v54 = 0;
          }
        }
        else
        {
          outlined destroy of EagerResolutionService?((uint64_t)&v89, (uint64_t *)&demangling cache variable for type metadata for Any?);
          uint64_t v53 = 0;
          uint64_t v54 = 0;
        }
        objc_allocWithZone(MEMORY[0x263F02AE0]);
        os_log_type_t v28 = isa;
        uint64_t v55 = OUTLINED_FUNCTION_79_0();
        id v57 = @nonobjc CSSearchableItem.init(uniqueIdentifier:domainIdentifier:attributeSet:)(v55, v56, v53, v54, v28);
        uint64_t v58 = outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.filename.getter(v48, (SEL *)&selRef_resultBundleId);
        if (v59)
        {
          uint64_t v60 = (void *)MEMORY[0x25A2C7AB0](v58);
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v60 = 0;
        }
        unint64_t v1 = v76;
        unint64_t v13 = v82;
        objc_msgSend(v57, sel_setBundleID_, v60);

        Swift::Int v6 = v57;
        MEMORY[0x25A2C7E10]();
        OUTLINED_FUNCTION_198_1();
        if (v61) {
          OUTLINED_FUNCTION_194_1();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        uint64_t v11 = v79;
      }
      else
      {
        if (one-time initialization token for search != -1) {
          swift_once();
        }
        uint64_t v27 = type metadata accessor for Logger();
        __swift_project_value_buffer(v27, (uint64_t)static Logging.search);
        Swift::Int v6 = v83;
        os_log_type_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v30 = OUTLINED_FUNCTION_14_1();
          unint64_t v31 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v30 = v62;
          *(void *)(v30 + 4) = v6;
          *unint64_t v31 = v6;
          _os_log_impl(&dword_257DC6000, v28, v29, "Failed to synthesize searchable item from result: %@", (uint8_t *)v30, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          OUTLINED_FUNCTION_182_3();
          OUTLINED_FUNCTION_34();
          uint64_t v11 = v79;
          OUTLINED_FUNCTION_34();
        }
        else
        {

          os_log_type_t v28 = v6;
        }
      }

      if (v13 == v11) {
        goto LABEL_59;
      }
    }
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    swift_bridgeObjectRetain();
  }
LABEL_59:
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_119_0();
}

void *LocalIndexClient.keyAttributeResultRetrievalType.unsafeMutableAddressor()
{
  return &static LocalIndexClient.keyAttributeResultRetrievalType;
}

unint64_t static LocalIndexClient.keyAttributeResultRetrievalType.getter()
{
  return OUTLINED_FUNCTION_91_1(27);
}

void *LocalIndexClient.keyAttributePersonalAnswerAttributes.unsafeMutableAddressor()
{
  return &static LocalIndexClient.keyAttributePersonalAnswerAttributes;
}

unint64_t static LocalIndexClient.keyAttributePersonalAnswerAttributes.getter()
{
  return OUTLINED_FUNCTION_91_1(37);
}

void *LocalIndexClient.keyAttributeResultEmbeddingDistances.unsafeMutableAddressor()
{
  return &static LocalIndexClient.keyAttributeResultEmbeddingDistances;
}

unint64_t static LocalIndexClient.keyAttributeResultEmbeddingDistances.getter()
{
  return OUTLINED_FUNCTION_91_1(32);
}

void one-time initialization function for keyAttributeItemAppEntityTypeIdentifier()
{
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);

  OUTLINED_FUNCTION_145();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  Swift::Int v6 = v5;
  uint64_t v7 = type metadata accessor for SpotlightKeys();
  OUTLINED_FUNCTION_0_10();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_18_8();
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v0, *v6, v7);
  uint64_t v11 = SpotlightKeys.description.getter();
  unint64_t v13 = v12;
  id v14 = OUTLINED_FUNCTION_105_4();
  v15(v14);
  *uint64_t v4 = v11;
  void *v2 = v13;
  OUTLINED_FUNCTION_141_0();
}

uint64_t *LocalIndexClient.keyAttributeItemAppEntityTypeIdentifier.unsafeMutableAddressor()
{
  if (one-time initialization token for keyAttributeItemAppEntityTypeIdentifier != -1) {
    swift_once();
  }
  return &static LocalIndexClient.keyAttributeItemAppEntityTypeIdentifier;
}

uint64_t static LocalIndexClient.keyAttributeItemAppEntityTypeIdentifier.getter()
{
  return static LocalIndexClient.keyAttributeItemAppEntityTypeIdentifier.getter(&one-time initialization token for keyAttributeItemAppEntityTypeIdentifier);
}

void one-time initialization function for keyAItemAppEntityInstanceIdentifier()
{
}

uint64_t *LocalIndexClient.keyAItemAppEntityInstanceIdentifier.unsafeMutableAddressor()
{
  if (one-time initialization token for keyAItemAppEntityInstanceIdentifier != -1) {
    swift_once();
  }
  return &static LocalIndexClient.keyAItemAppEntityInstanceIdentifier;
}

uint64_t static LocalIndexClient.keyAItemAppEntityInstanceIdentifier.getter()
{
  return static LocalIndexClient.keyAttributeItemAppEntityTypeIdentifier.getter(&one-time initialization token for keyAItemAppEntityInstanceIdentifier);
}

uint64_t static LocalIndexClient.keyAttributeItemAppEntityTypeIdentifier.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_19_0();
}

void *LocalIndexClient.keyAttributePhoneCallStatus.unsafeMutableAddressor()
{
  return &static LocalIndexClient.keyAttributePhoneCallStatus;
}

unint64_t static LocalIndexClient.keyAttributePhoneCallStatus.getter()
{
  return OUTLINED_FUNCTION_91_1(41);
}

void *LocalIndexClient.keyAttributePhoneCallType.unsafeMutableAddressor()
{
  return &static LocalIndexClient.keyAttributePhoneCallType;
}

unint64_t static LocalIndexClient.keyAttributePhoneCallType.getter()
{
  return OUTLINED_FUNCTION_91_1(30);
}

void *LocalIndexClient.keyAttributeMailMessageIdHeader.unsafeMutableAddressor()
{
  return &static LocalIndexClient.keyAttributeMailMessageIdHeader;
}

unint64_t static LocalIndexClient.keyAttributeMailMessageIdHeader.getter()
{
  return OUTLINED_FUNCTION_91_1(32);
}

void *LocalIndexClient.keyAttributeSpotlightMetrics.unsafeMutableAddressor()
{
  return &static LocalIndexClient.keyAttributeSpotlightMetrics;
}

unint64_t static LocalIndexClient.keyAttributeSpotlightMetrics.getter()
{
  return OUTLINED_FUNCTION_91_1(38);
}

void *LocalIndexClient.kLocalIndexClientSearchTimeout.unsafeMutableAddressor()
{
  return &static LocalIndexClient.kLocalIndexClientSearchTimeout;
}

uint64_t static LocalIndexClient.kLocalIndexClientSearchTimeout.getter()
{
  return 5;
}

void *LocalIndexClient.kLocalIndexClientDefaultTargetMatches.unsafeMutableAddressor()
{
  return &static LocalIndexClient.kLocalIndexClientDefaultTargetMatches;
}

uint64_t static LocalIndexClient.kLocalIndexClientDefaultTargetMatches.getter()
{
  return 20;
}

uint64_t static LocalIndexClient.fetchAttributes.getter()
{
  if (one-time initialization token for fetchAttributes != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

uint64_t LocalIndexClient.__allocating_init()()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v0 = static LocalSearchManager.shared;
  uint64_t v1 = type metadata accessor for ItemFetcher();
  uint64_t v2 = swift_allocObject();
  OUTLINED_FUNCTION_154_3();
  uint64_t v3 = swift_allocObject();
  uint64_t v9 = type metadata accessor for LocalSearchManager();
  uint64_t v10 = &protocol witness table for LocalSearchManager;
  uint64_t v7 = &protocol witness table for ItemFetcher;
  *(void *)&long long v8 = v0;
  uint64_t v6 = v1;
  *(void *)&long long v5 = v2;
  outlined init with take of SageSearchClient(&v8, v3 + 16);
  outlined init with take of SageSearchClient(&v5, v3 + 56);
  swift_retain();
  return v3;
}

void LocalIndexClient.__allocating_init(searchAgent:itemFetcher:)()
{
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_104_0();
  uint64_t v3 = v2;
  uint64_t v4 = v0;
  uint64_t v6 = v5;
  long long v8 = v7;
  uint64_t v10 = *(void *)(v7 + 24);
  uint64_t v9 = *(void *)(v7 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v7, v10);
  OUTLINED_FUNCTION_0_10();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_13_12();
  (*(void (**)(uint64_t))(v12 + 16))(v1);
  unint64_t v13 = *(void *)(v6 + 24);
  id v14 = *(void *)(v6 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v6, v13);
  OUTLINED_FUNCTION_0_10();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_15();
  id v18 = v17 - v16;
  (*(void (**)(uint64_t))(v19 + 16))(v17 - v16);
  v3(v1, v18, v4, v10, v13, v9, v14);
  __swift_destroy_boxed_opaque_existential_1Tm(v6);
  __swift_destroy_boxed_opaque_existential_1Tm(v8);
  OUTLINED_FUNCTION_119_0();
}

void LocalIndexClient.init(searchAgent:itemFetcher:)()
{
}

Swift::Void __swiftcall LocalIndexClient.prewarm()()
{
  outlined init with copy of ExtractionRule(v0 + 16, (uint64_t)v3);
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v1 = OUTLINED_FUNCTION_56_1();
  v2(v1);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
}

uint64_t LocalIndexClient.search(spotlightRequest:)()
{
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_44_0(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for AnswerResolvable.extractInfo(query:results:assistantLocale:) in conformance AnswerResolver;
  OUTLINED_FUNCTION_56_1();
  return LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)();
}

uint64_t LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  OUTLINED_FUNCTION_27();
  v1[192] = v0;
  v1[191] = v2;
  v1[190] = v3;
  v1[189] = v4;
  v1[193] = *v0;
  uint64_t v5 = type metadata accessor for VoiceMemo(0);
  OUTLINED_FUNCTION_12_0(v5);
  v1[194] = v6;
  v1[195] = *(void *)(v7 + 64);
  v1[196] = OUTLINED_FUNCTION_50_0();
  v1[197] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Safari(0);
  OUTLINED_FUNCTION_12_0(v8);
  v1[198] = v9;
  v1[199] = *(void *)(v10 + 64);
  v1[200] = OUTLINED_FUNCTION_50_0();
  v1[201] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for JournalEntry(0);
  OUTLINED_FUNCTION_12_0(v11);
  v1[202] = v12;
  v1[203] = *(void *)(v13 + 64);
  v1[204] = OUTLINED_FUNCTION_50_0();
  v1[205] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for PhoneHistory(0);
  OUTLINED_FUNCTION_12_0(v14);
  v1[206] = v15;
  v1[207] = *(void *)(v16 + 64);
  v1[208] = OUTLINED_FUNCTION_50_0();
  v1[209] = swift_task_alloc();
  uint64_t v17 = type metadata accessor for VoicemailTranscript(0);
  OUTLINED_FUNCTION_12_0(v17);
  v1[210] = v18;
  v1[211] = *(void *)(v19 + 64);
  v1[212] = OUTLINED_FUNCTION_50_0();
  v1[213] = swift_task_alloc();
  uint64_t v20 = type metadata accessor for CharacterSet();
  v1[214] = v20;
  OUTLINED_FUNCTION_12_0(v20);
  v1[215] = v21;
  v1[216] = OUTLINED_FUNCTION_49_1();
  uint64_t v22 = type metadata accessor for Reminder(0);
  OUTLINED_FUNCTION_12_0(v22);
  v1[217] = v23;
  v1[218] = *(void *)(v24 + 64);
  v1[219] = OUTLINED_FUNCTION_50_0();
  v1[220] = swift_task_alloc();
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResult?);
  OUTLINED_FUNCTION_81(v25);
  v1[221] = OUTLINED_FUNCTION_49_1();
  uint64_t v26 = type metadata accessor for NoteDocument(0);
  OUTLINED_FUNCTION_12_0(v26);
  v1[222] = v27;
  v1[223] = *(void *)(v28 + 64);
  v1[224] = OUTLINED_FUNCTION_50_0();
  v1[225] = swift_task_alloc();
  uint64_t v29 = type metadata accessor for CalendarEvent(0);
  OUTLINED_FUNCTION_12_0(v29);
  v1[226] = v30;
  v1[227] = *(void *)(v31 + 64);
  v1[228] = OUTLINED_FUNCTION_50_0();
  v1[229] = swift_task_alloc();
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
  OUTLINED_FUNCTION_81(v32);
  v1[230] = OUTLINED_FUNCTION_49_1();
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_81(v33);
  v1[231] = OUTLINED_FUNCTION_50_0();
  v1[232] = swift_task_alloc();
  v1[233] = swift_task_alloc();
  v1[234] = swift_task_alloc();
  v1[235] = swift_task_alloc();
  v1[236] = swift_task_alloc();
  v1[237] = swift_task_alloc();
  v1[238] = swift_task_alloc();
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_81(v34);
  v1[239] = OUTLINED_FUNCTION_50_0();
  v1[240] = swift_task_alloc();
  v1[241] = swift_task_alloc();
  v1[242] = swift_task_alloc();
  v1[243] = swift_task_alloc();
  v1[244] = swift_task_alloc();
  v1[245] = swift_task_alloc();
  v1[246] = swift_task_alloc();
  v1[247] = swift_task_alloc();
  v1[248] = swift_task_alloc();
  v1[249] = swift_task_alloc();
  v1[250] = swift_task_alloc();
  uint64_t v35 = type metadata accessor for MobileSMSDocument(0);
  OUTLINED_FUNCTION_81(v35);
  v1[251] = OUTLINED_FUNCTION_49_1();
  uint64_t v36 = type metadata accessor for EmailDocument(0);
  OUTLINED_FUNCTION_81(v36);
  v1[252] = OUTLINED_FUNCTION_49_1();
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
  OUTLINED_FUNCTION_81(v37);
  v1[253] = OUTLINED_FUNCTION_49_1();
  uint64_t v38 = type metadata accessor for Trip(0);
  v1[254] = v38;
  OUTLINED_FUNCTION_12_0(v38);
  v1[255] = v39;
  v1[256] = *(void *)(v40 + 64);
  v1[257] = OUTLINED_FUNCTION_50_0();
  v1[258] = swift_task_alloc();
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
  OUTLINED_FUNCTION_81(v41);
  v1[259] = OUTLINED_FUNCTION_49_1();
  uint64_t v42 = type metadata accessor for Party(0);
  v1[260] = v42;
  OUTLINED_FUNCTION_12_0(v42);
  v1[261] = v43;
  v1[262] = *(void *)(v44 + 64);
  v1[263] = OUTLINED_FUNCTION_50_0();
  v1[264] = swift_task_alloc();
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
  OUTLINED_FUNCTION_81(v45);
  v1[265] = OUTLINED_FUNCTION_49_1();
  uint64_t v46 = type metadata accessor for Appointment(0);
  v1[266] = v46;
  OUTLINED_FUNCTION_12_0(v46);
  v1[267] = v47;
  v1[268] = *(void *)(v48 + 64);
  v1[269] = OUTLINED_FUNCTION_50_0();
  v1[270] = swift_task_alloc();
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
  OUTLINED_FUNCTION_81(v49);
  v1[271] = OUTLINED_FUNCTION_49_1();
  uint64_t v50 = type metadata accessor for TicketedShow(0);
  v1[272] = v50;
  OUTLINED_FUNCTION_12_0(v50);
  v1[273] = v51;
  v1[274] = *(void *)(v52 + 64);
  v1[275] = OUTLINED_FUNCTION_50_0();
  v1[276] = swift_task_alloc();
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
  OUTLINED_FUNCTION_81(v53);
  v1[277] = OUTLINED_FUNCTION_49_1();
  uint64_t v54 = type metadata accessor for TicketedTransportation(0);
  v1[278] = v54;
  OUTLINED_FUNCTION_12_0(v54);
  v1[279] = v55;
  v1[280] = *(void *)(v56 + 64);
  v1[281] = OUTLINED_FUNCTION_50_0();
  v1[282] = swift_task_alloc();
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
  OUTLINED_FUNCTION_81(v57);
  v1[283] = OUTLINED_FUNCTION_49_1();
  uint64_t v58 = type metadata accessor for RentalCarReservation(0);
  v1[284] = v58;
  OUTLINED_FUNCTION_12_0(v58);
  v1[285] = v59;
  v1[286] = *(void *)(v60 + 64);
  v1[287] = OUTLINED_FUNCTION_50_0();
  v1[288] = swift_task_alloc();
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
  OUTLINED_FUNCTION_81(v61);
  v1[289] = OUTLINED_FUNCTION_49_1();
  uint64_t v62 = type metadata accessor for RestaurantReservation(0);
  v1[290] = v62;
  OUTLINED_FUNCTION_12_0(v62);
  v1[291] = v63;
  v1[292] = *(void *)(v64 + 64);
  v1[293] = OUTLINED_FUNCTION_50_0();
  v1[294] = swift_task_alloc();
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
  OUTLINED_FUNCTION_81(v65);
  v1[295] = OUTLINED_FUNCTION_49_1();
  uint64_t v66 = type metadata accessor for HotelReservation(0);
  v1[296] = v66;
  OUTLINED_FUNCTION_12_0(v66);
  v1[297] = v67;
  v1[298] = *(void *)(v68 + 64);
  v1[299] = OUTLINED_FUNCTION_50_0();
  v1[300] = swift_task_alloc();
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
  OUTLINED_FUNCTION_81(v69);
  v1[301] = OUTLINED_FUNCTION_49_1();
  uint64_t v70 = type metadata accessor for FlightReservation(0);
  v1[302] = v70;
  OUTLINED_FUNCTION_12_0(v70);
  v1[303] = v71;
  v1[304] = *(void *)(v72 + 64);
  v1[305] = OUTLINED_FUNCTION_50_0();
  v1[306] = swift_task_alloc();
  uint64_t v73 = type metadata accessor for SearchResultItem(0);
  v1[307] = v73;
  OUTLINED_FUNCTION_81(v73);
  v1[308] = OUTLINED_FUNCTION_49_1();
  uint64_t v74 = type metadata accessor for SearchResult(0);
  v1[309] = v74;
  OUTLINED_FUNCTION_81(v74);
  v1[310] = OUTLINED_FUNCTION_50_0();
  v1[311] = swift_task_alloc();
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Photo?);
  OUTLINED_FUNCTION_81(v75);
  v1[312] = OUTLINED_FUNCTION_49_1();
  uint64_t v76 = type metadata accessor for Photo(0);
  v1[313] = v76;
  OUTLINED_FUNCTION_12_0(v76);
  v1[314] = v77;
  v1[315] = *(void *)(v78 + 64);
  v1[316] = OUTLINED_FUNCTION_50_0();
  v1[317] = swift_task_alloc();
  uint64_t v79 = type metadata accessor for Logger();
  v1[318] = v79;
  OUTLINED_FUNCTION_12_0(v79);
  v1[319] = v80;
  v1[320] = OUTLINED_FUNCTION_50_0();
  v1[321] = swift_task_alloc();
  v1[322] = swift_task_alloc();
  v1[323] = swift_task_alloc();
  v1[324] = swift_task_alloc();
  v1[325] = swift_task_alloc();
  v1[326] = swift_task_alloc();
  v1[327] = swift_task_alloc();
  v1[328] = swift_task_alloc();
  v1[329] = swift_task_alloc();
  v1[330] = swift_task_alloc();
  v1[331] = swift_task_alloc();
  v1[332] = swift_task_alloc();
  v1[333] = swift_task_alloc();
  v1[334] = swift_task_alloc();
  v1[335] = swift_task_alloc();
  v1[336] = swift_task_alloc();
  v1[337] = swift_task_alloc();
  v1[338] = swift_task_alloc();
  v1[339] = swift_task_alloc();
  v1[340] = swift_task_alloc();
  v1[341] = swift_task_alloc();
  v1[342] = swift_task_alloc();
  v1[343] = swift_task_alloc();
  v1[344] = swift_task_alloc();
  v1[345] = swift_task_alloc();
  v1[346] = swift_task_alloc();
  v1[347] = swift_task_alloc();
  v1[348] = swift_task_alloc();
  v1[349] = swift_task_alloc();
  v1[350] = swift_task_alloc();
  v1[351] = swift_task_alloc();
  v1[352] = swift_task_alloc();
  v1[353] = swift_task_alloc();
  v1[354] = swift_task_alloc();
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v81, v82, v83);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_2();
  *(void *)(v2 + 2856) = v1;
  *(void *)(v2 + 2864) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_2();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  void *v2 = v1;
  *(void *)(v4 + 2904) = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v5, v6, v7);
}

void LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  uint64_t v90 = v0;
  uint64_t v1 = v0[191];
  type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for SPSearchQueryContext);
  swift_bridgeObjectRetain();
  uint64_t v2 = OUTLINED_FUNCTION_79_0();
  id v4 = SPSearchQueryContext.__allocating_init(search:)(v2, v3);
  uint64_t v5 = v4;
  v0[355] = v4;
  if (v1) {
    objc_msgSend(v4, sel_setSpQUParse_, v0[191]);
  }
  if (AFIsInternalInstall())
  {
    type metadata accessor for NSUserDefaults(0, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
    uint64_t Bundle = static NSUserDefaults.spotlightQueryBundleIDs.getter();
    BOOL v7 = specialized Collection.isEmpty.getter(Bundle);
    swift_bridgeObjectRelease();
    if (!v7)
    {
      Logging.search.unsafeMutableAddressor();
      uint64_t v8 = OUTLINED_FUNCTION_117_6();
      v9(v8);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      uint64_t v12 = OUTLINED_FUNCTION_8_17();
      *(unsigned char *)(v12 + 16) = 32;
      uint64_t v13 = OUTLINED_FUNCTION_8_17();
      OUTLINED_FUNCTION_41_22(v13);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>);
      uint64_t v14 = swift_allocObject();
      uint64_t v15 = (void *)specialized static Array._adoptStorage(_:count:)(v14, 3);
      *uint64_t v16 = closure #1 in OSLogArguments.append(_:)partial apply;
      v16[1] = v12;
      v16[2] = closure #1 in OSLogArguments.append(_:)partial apply;
      v16[3] = v13;
      v16[4] = specialized closure #1 in OSLogArguments.append(_:);
      v16[5] = 0;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v17 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v18 = OUTLINED_FUNCTION_13_1();
        long long v86 = 0;
        uint64_t v87 = v18;
        *(_WORD *)uint64_t v17 = 258;
        long long v88 = closure #1 in OSLogArguments.append(_:)partial apply;
        uint64_t v89 = v12;
        OUTLINED_FUNCTION_132_4(v18, v19);
        if (!v15)
        {
          uint64_t v20 = swift_release();
          long long v88 = closure #1 in OSLogArguments.append(_:)partial apply;
          uint64_t v89 = v13;
          OUTLINED_FUNCTION_76_10(v20, v21);
          uint64_t v22 = swift_release();
          long long v88 = (uint64_t (*)())specialized closure #1 in OSLogArguments.append(_:);
          uint64_t v89 = 0;
          OUTLINED_FUNCTION_76_10(v22, v23);
          _os_log_impl(&dword_257DC6000, v10, v11, "LocalIndexClient limiting search to bundle IDs based on user default: %s", v17, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_34();
          specialized UnsafeMutablePointer.deallocate()();
        }
LABEL_16:

        return;
      }
      uint64_t v24 = v0[354];
      uint64_t v25 = v0[319];
      uint64_t v26 = v0[318];
      swift_release();
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
      static NSUserDefaults.spotlightQueryBundleIDs.getter();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v5, sel_setBundleIDs_, isa);
    }
  }
  objc_msgSend(v5, sel_setWhyQuery_, 23);
  objc_msgSend(v5, sel_setFetchL2Signals_, 1);
  objc_msgSend(v5, sel_setQueryKind_, 11);
  objc_msgSend(v5, sel_setCurrentTime_, CFAbsoluteTimeGetCurrent());
  objc_msgSend(v5, sel_setAllowInternet_, 0);
  objc_msgSend(v5, sel_setRetainBackendData_, 1);
  objc_msgSend(v5, sel_setEnablePersonalAnswers_, 1);
  objc_msgSend(v5, sel_setIsAppEntitySearch_, 0);
  type metadata accessor for NSUserDefaults(0, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
  uint64_t v28 = static NSUserDefaults.currentTime.getter();
  uint64_t v29 = v0[319];
  uint64_t v30 = v0[318];
  if (v31)
  {
    Logging.search.unsafeMutableAddressor();
    uint64_t v51 = OUTLINED_FUNCTION_117_6();
    v52(v51);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.debug.getter();
    uint64_t v55 = specialized static Array._allocateUninitialized(_:)(0);
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v56 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v87 = 0;
      long long v88 = 0;
      *(_WORD *)uint64_t v56 = 0;
      long long v86 = v56 + 2;
      specialized Sequence.forEach(_:)(v55, (uint64_t)&v86, (uint64_t)&v87, (uint64_t)&v88);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_257DC6000, v53, v54, "LocalIndexClient.findMatches - using currentTime as of now", v56, 2u);
      specialized UnsafeMutablePointer.deallocate()();
    }
    swift_bridgeObjectRelease();

    uint64_t v59 = OUTLINED_FUNCTION_77_7();
    v60(v59);
    double Current = CFAbsoluteTimeGetCurrent();
  }
  else
  {
    uint64_t v32 = v28;
    uint64_t v33 = v0[353];
    double Current = *(double *)&v28;
    uint64_t v35 = Logging.search.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v33, v35, v30);
    uint64_t v36 = OUTLINED_FUNCTION_48_14();
    *(void *)(v36 + 16) = v32;
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    uint64_t v39 = OUTLINED_FUNCTION_8_17();
    *(unsigned char *)(v39 + 16) = 0;
    uint64_t v40 = OUTLINED_FUNCTION_8_17();
    OUTLINED_FUNCTION_41_22(v40);
    uint64_t v41 = OUTLINED_FUNCTION_141();
    *(void *)(v41 + 16) = partial apply for implicit closure #3 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
    *(void *)(v41 + 24) = v36;
    uint64_t v42 = OUTLINED_FUNCTION_141();
    *(void *)(v42 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:);
    *(void *)(v42 + 24) = v41;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>);
    uint64_t v43 = swift_allocObject();
    uint64_t v15 = (void *)specialized static Array._adoptStorage(_:count:)(v43, 3);
    *uint64_t v44 = closure #1 in OSLogArguments.append(_:)partial apply;
    v44[1] = v39;
    v44[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v44[3] = v40;
    v44[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v44[5] = v42;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v45 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      long long v86 = 0;
      uint64_t v87 = 0;
      *(_WORD *)uint64_t v45 = 256;
      long long v88 = closure #1 in OSLogArguments.append(_:)partial apply;
      uint64_t v89 = v39;
      OUTLINED_FUNCTION_132_4((uint64_t)v45, v46);
      if (!v15)
      {
        uint64_t v47 = swift_release();
        long long v88 = closure #1 in OSLogArguments.append(_:)partial apply;
        uint64_t v89 = v40;
        OUTLINED_FUNCTION_76_10(v47, v48);
        uint64_t v49 = swift_release();
        long long v88 = (uint64_t (*)())partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v89 = v42;
        OUTLINED_FUNCTION_76_10(v49, v50);
        swift_release();
        _os_log_impl(&dword_257DC6000, v37, v38, "LocalIndexClient.findMatches - using currentTime from user defaults %f", v45, 0xCu);
        specialized UnsafeMutablePointer.deallocate()();
      }
      goto LABEL_16;
    }
    swift_release();
    swift_release();
    swift_release();

    uint64_t v57 = OUTLINED_FUNCTION_78_0();
    v58(v57);
  }
  uint64_t v61 = v0[192];
  objc_msgSend(v5, sel_setCurrentTime_, Current);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v62 = swift_allocObject();
  uint64_t v63 = specialized static Array._adoptStorage(_:count:)(v62, 1);
  uint64_t v65 = v64;
  long long v88 = (uint64_t (*)())DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  uint64_t v89 = v66;
  v67._countAndFlagsBits = 10280;
  v67._object = (void *)0xE200000000000000;
  DefaultStringInterpolation.appendLiteral(_:)(v67);
  v68._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v68);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_179_2();
  v69._object = (void *)0x800000025867C750;
  v69._countAndFlagsBits = 0xD000000000000014;
  specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v69);
  v70._countAndFlagsBits = 0x2026262022;
  v70._object = (void *)0xE500000000000000;
  DefaultStringInterpolation.appendLiteral(_:)(v70);
  v71._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v71);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_179_2();
  v72._countAndFlagsBits = 0xD00000000000001DLL;
  v72._object = (void *)0x80000002586800F0;
  specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v72);
  v73._countAndFlagsBits = 0x207C7C202922;
  v73._object = (void *)0xE600000000000000;
  DefaultStringInterpolation.appendLiteral(_:)(v73);
  v74._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v74);
  swift_bridgeObjectRelease();
  v75._countAndFlagsBits = 0x22203D2120;
  v75._object = (void *)0xE500000000000000;
  DefaultStringInterpolation.appendLiteral(_:)(v75);
  v76._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v76);
  swift_bridgeObjectRelease();
  v77._countAndFlagsBits = 10530;
  v77._object = (void *)0xE200000000000000;
  DefaultStringInterpolation.appendLiteral(_:)(v77);
  uint64_t *v65 = String.init(stringInterpolation:)();
  v65[1] = v78;
  destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType(v63);
  Class v79 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_setFilterQueries_, v79);

  outlined init with copy of ExtractionRule(v61 + 16, (uint64_t)(v0 + 12));
  uint64_t v80 = v0[15];
  uint64_t v81 = v0[16];
  uint64_t v82 = (void *)OUTLINED_FUNCTION_78_0();
  __swift_project_boxed_opaque_existential_1(v82, v83);
  uint64_t v85 = (void (*)(void *, uint64_t, uint64_t))(*(void *)(v81 + 24) + **(int **)(v81 + 24));
  uint64_t v84 = (void *)swift_task_alloc();
  v0[356] = v84;
  *uint64_t v84 = v0;
  v84[1] = LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
  v85(v5, v80, v81);
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  void *v28;
  uint64_t v30;
  void v31[3];

  uint64_t v1 = v0[357];
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 12));
  if (specialized Array.count.getter(v1))
  {
    uint64_t v2 = v0[358];
    uint64_t v3 = v0[192];
    static LocalIndexClient.results(for:)(v0[357]);
    swift_bridgeObjectRelease();
    static LocalIndexClient.searchableItems(for:)();
    v0[359] = v4;
    swift_bridgeObjectRelease();
    uint64_t v5 = swift_bridgeObjectRetain();
    uint64_t v6 = specialized _ArrayProtocol.filter(_:)(v5);
    BOOL v7 = specialized Sequence.compactMap<A>(_:)(v6, (SEL *)&selRef_eventMessageIdentifier);
    specialized Set.init<A>(_:)(v7);
    uint64_t v8 = specialized Sequence.compactMap<A>(_:)(v6, (SEL *)&selRef_mailMessageID);
    v0[360] = v2;
    swift_bridgeObjectRelease();
    uint64_t v9 = specialized Set.init<A>(_:)(v8);
    outlined init with copy of ExtractionRule(v3 + 56, (uint64_t)(v0 + 17));
    uint64_t v10 = (void *)OUTLINED_FUNCTION_148();
    __swift_project_boxed_opaque_existential_1(v10, v11);
    uint64_t v12 = OUTLINED_FUNCTION_197_2();
    v0[361] = specialized Set.union<A>(_:)(v12, v9);
    uint64_t v13 = (void *)swift_task_alloc();
    v0[362] = v13;
    *uint64_t v13 = v0;
    v13[1] = LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
    OUTLINED_FUNCTION_56_1();
    OUTLINED_FUNCTION_43_16();
    __asm { BRAA            X4, X16 }
  }
  uint64_t v16 = v0[351];
  uint64_t v17 = v0[319];
  uint64_t v18 = v0[318];
  swift_bridgeObjectRelease();
  uint64_t v19 = Logging.search.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v19, v18);
  uint64_t v20 = Logger.logObject.getter();
  uint64_t v21 = static os_log_type_t.debug.getter();
  uint64_t v22 = specialized static Array._allocateUninitialized(_:)(0);
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v23 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
    v31[0] = 0;
    OUTLINED_FUNCTION_144_3(v23);
    specialized Sequence.forEach(_:)(v22, v24, v25, (uint64_t)v31);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_257DC6000, v20, v21, "LocalIndexClient.findMatches - Returning early. No sections found!", v23, 2u);
    specialized UnsafeMutablePointer.deallocate()();
  }
  swift_bridgeObjectRelease();

  uint64_t v26 = OUTLINED_FUNCTION_78_0();
  v27(v26);
  uint64_t v28 = (void *)v0[355];
  specialized static Array._allocateUninitialized(_:)(0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_149();
  OUTLINED_FUNCTION_43_16();
  __asm { BRAA            X2, X16 }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(void);
  uint64_t v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  unsigned char *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint8_t *v29;
  void *v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void (*v35)(void);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint8_t *v59;
  uint64_t v60;
  void (*v61)(void);
  void *v62;
  id v63;
  void (*v64)(void);
  uint64_t v65;
  uint64_t v66;
  unsigned char *v67;
  void *v68;
  uint64_t v69;
  void *v70;
  unsigned char *v71;
  uint64_t v72;
  void *v73;
  unsigned char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint8_t *v81;
  uint64_t v82;
  void (*v83)(void);
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _WORD *v89;
  void *v90;
  void (*v91)(void);
  uint64_t v92;
  uint64_t v93;
  void (*v94)(void);
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  unsigned char *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  void *v103;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  id v108;
  void (*v109)(void);
  NSObject *v110;
  os_log_type_t v111;
  uint64_t v112;
  uint8_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(uint64_t);
  uint64_t v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  id v135;
  uint64_t (*v136)(uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  NSObject *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint8_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(void);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  NSObject *v152;
  unsigned char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  void *v160;
  unsigned char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  void *v167;
  uint8_t *v168;
  uint64_t v169;
  void (*v170)(void);
  uint64_t v171;
  BOOL v172;
  uint64_t v173;
  uint64_t v175;
  uint64_t v177;
  uint64_t v179;
  uint64_t v181;
  uint64_t v183;
  uint64_t v185;
  uint64_t v187;
  void (*v189)(void);
  uint64_t v190;
  NSObject *v191;
  os_log_type_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  id v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  void (*v206)(void);
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  id v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  uint64_t v217;
  void *v218;
  uint64_t v219;
  void *v220;
  unsigned char *v221;
  void *v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  void *v226;
  void *v227;
  uint8_t *v228;
  uint64_t v229;
  void *v230;
  void (*v231)(void);
  uint64_t v232;
  uint64_t v233;
  NSObject *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  void *v242;
  uint64_t v243;
  void *v244;
  uint64_t v246;
  os_log_type_t v247;
  uint64_t v248;
  uint64_t v249;
  void (*v250)(uint64_t);
  uint64_t v251;
  id v252;
  void *v253;
  uint64_t v254;
  void (*v255)(void);
  void (*v256)(void);
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  uint8_t *v268;
  uint64_t v269;
  void *v270;
  uint64_t v271;
  unsigned char *v272;
  uint64_t v273;
  void *v274;
  uint64_t v275;
  void *v276;
  void *v277;
  void *v278;
  uint8_t *v279;
  uint64_t v280;
  uint64_t v281;
  void (*v282)(void);
  uint64_t v283;
  uint64_t v284;
  os_log_t v285;
  id v286;
  void *v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  void *v292;
  void (*v293)(void);
  uint64_t v294;
  void (*v295)(void);
  uint64_t v296;
  uint64_t v297;
  NSObject *v298;
  os_log_type_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  void *v303;
  uint64_t v304;
  void *v305;
  uint64_t v306;
  void *v307;
  void (*v308)(void);
  uint64_t v309;
  NSObject *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  void *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  void *v318;
  uint64_t v319;
  void *v320;
  uint64_t v322;
  os_log_type_t v323;
  uint64_t v324;
  uint64_t v325;
  void *v327;
  uint64_t v328;
  void (*v329)(void);
  id v330;
  uint64_t v331;
  void *v332;
  void (*v333)(void);
  uint64_t v334;
  uint64_t v335;
  NSObject *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  void *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  void *v344;
  uint64_t v345;
  void *v346;
  uint64_t v348;
  os_log_type_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  id v356;
  void *v357;
  id v358;
  void *v359;
  uint64_t v360;
  id v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  id v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  void *v377;
  uint64_t v378;
  NSObject *v379;
  NSObject *v380;
  uint64_t v381;
  uint64_t v382;
  id v383;
  void *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  id v389;
  void *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  id v399;
  void (*v400)(void);
  uint64_t v401;
  id v402;
  NSObject *v403;
  os_log_type_t v404;
  unsigned char *v405;
  void *v406;
  uint64_t v407;
  void *v408;
  uint64_t v409;
  void *v410;
  uint8_t *v411;
  uint64_t v412;
  uint64_t v413;
  void (*v414)(void);
  id v415;
  uint64_t v416;
  void (*v417)(void);
  id v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  id v423;
  void *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  void *v429;
  void *v430;
  void *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  void *v442;
  void (*v443)(void);
  uint64_t v444;
  NSObject *v445;
  os_log_type_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  void *v450;
  uint64_t v451;
  void *v452;
  uint64_t v453;
  uint64_t v454;
  void (*v455)(void);
  void *v456;
  id v457;
  uint64_t v458;
  void (*v459)(void);
  void *v460;
  void (*v461)(void);
  uint64_t v462;
  NSObject *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  void *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  void *v471;
  uint64_t v472;
  void *v473;
  uint64_t v475;
  os_log_type_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  void (*v480)(void);
  id v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  id v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  id v490;
  void *v491;
  void *v492;
  uint64_t v493;
  void *v494;
  void (*v495)(void);
  uint64_t v496;
  uint64_t v497;
  os_log_type_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  void *v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  void *v506;
  uint64_t v507;
  void *v508;
  uint64_t v510;
  os_log_type_t v511;
  id v512;
  Swift::String v513;
  void *object;
  uint64_t countAndFlagsBits;
  void *v516;
  void (*v517)(void);
  void *v518;
  id v519;
  NSObject *v520;
  os_log_type_t v521;
  unsigned char *v522;
  void *v523;
  uint64_t v524;
  void *v525;
  uint64_t v526;
  void *v527;
  uint8_t *v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  id v533;
  void *v534;
  uint64_t v535;
  void *v536;
  void *v537;
  uint64_t v538;
  void (*v539)(void);
  uint64_t v540;
  os_log_type_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  void *v546;
  uint64_t v547;
  void (*v548)(void);
  uint64_t v549;
  uint64_t v550;
  void (*v551)(uint64_t);
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  id v558;
  unint64_t v559;
  uint64_t v560;
  void *v561;
  void (*v562)(void);
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  void *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  void *v572;
  uint64_t v573;
  void *v574;
  uint64_t v576;
  void *v577;
  NSObject *v578;
  os_log_type_t v579;
  uint64_t v580;
  uint64_t v581;
  void (*v582)(uint64_t);
  unint64_t v583;
  uint64_t v584;
  void *v585;
  void (*v586)(void);
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  void *v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  void *v595;
  uint64_t v596;
  void *v597;
  uint64_t v599;
  void *v600;
  NSObject *v601;
  os_log_type_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  void (*v608)(uint64_t);
  uint64_t v609;
  uint64_t v610;
  unint64_t v611;
  uint64_t v612;
  void *v613;
  void (*v614)(void);
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  void *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  void *v623;
  uint64_t v624;
  void *v625;
  uint64_t v627;
  void *v628;
  NSObject *v629;
  os_log_type_t v630;
  id v631;
  uint64_t v632;
  void *v633;
  void *v634;
  uint64_t v635;
  void *v636;
  void *v637;
  uint64_t v638;
  void *v639;
  uint64_t v640;
  Swift::OpaquePointer v641;
  uint64_t v642;
  Swift::OpaquePointer v643;
  uint64_t v644;
  Swift::String v645;
  Swift::String_optional v646;
  uint64_t v647;
  void *v648;
  void (*v649)(void);
  uint64_t v650;
  NSObject *v651;
  os_log_type_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  void *v656;
  uint64_t v657;
  void *v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  void (*v662)(uint64_t);
  uint64_t v663;
  void (*v664)(uint64_t);
  uint64_t v665;
  uint64_t *v666;
  uint64_t *v667;
  unint64_t v668;
  uint64_t v669;
  void *v670;
  void (*v671)(void);
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  void *v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  void *v680;
  uint64_t v681;
  void *v682;
  uint64_t v684;
  void *v685;
  NSObject *v686;
  os_log_type_t v687;
  id v688;
  void *v689;
  id v690;
  uint64_t v691;
  uint64_t v692;
  void (*v693)(uint64_t);
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  int v697;
  void (*v698)(void);
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  id v702;
  uint64_t v703;
  int v704;
  void (*v705)(void);
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  id v709;
  id v710;
  id v711;
  void *v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  void *v717;
  uint64_t v718;
  uint64_t v719;
  unint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  void (*v726)(void);
  uint64_t v727;
  NSObject *v728;
  os_log_type_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  void *v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  void (*v738)(uint64_t);
  NSObject *v739;
  BOOL v740;
  char v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  char v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  void (*v750)(void);
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  char v755;
  id v756;
  void *v757;
  uint64_t v758;
  void *v759;
  id v760;
  id v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  void *v769;
  void *v770;
  uint64_t v771;
  void (*v772)(void);
  uint64_t v773;
  os_log_type_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  void *v779;
  uint64_t v780;
  uint64_t v781;
  void (*v782)(uint64_t);
  uint64_t v783;
  uint64_t v784;
  void (*v785)(void);
  uint64_t v786;
  id v787;
  id v788;
  void *v789;
  uint64_t v790;
  void *v791;
  uint64_t v792;
  void *v793;
  uint64_t v794;
  void *v795;
  uint64_t v796;
  void (*v797)(void);
  uint64_t v798;
  os_log_type_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  void *v804;
  uint64_t v805;
  uint64_t v806;
  void (*v807)(uint64_t);
  id v808;
  id v809;
  void *v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  id v815;
  void *v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  void *v821;
  id v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  int v826;
  uint64_t v827;
  uint64_t v828;
  id v829;
  void *v830;
  uint64_t v831;
  void *v832;
  uint64_t v833;
  void *v834;
  uint64_t v835;
  uint64_t v836;
  unint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  void *v843;
  void (*v844)(void);
  uint64_t v845;
  os_log_type_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  void *v851;
  uint64_t v852;
  uint64_t v853;
  void (*v854)(uint64_t);
  uint64_t v855;
  void *v856;
  uint64_t v857;
  void *v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  id v862;
  void *v863;
  uint64_t v864;
  void *v865;
  uint64_t v866;
  uint64_t v867;
  unint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  void (*v872)(void);
  uint64_t v873;
  os_log_type_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  void *v879;
  uint64_t v880;
  uint64_t v881;
  void (*v882)(uint64_t);
  id v883;
  void *v884;
  id v885;
  void *v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  id v890;
  void *v891;
  void *v892;
  void *v893;
  void *v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  void *v900;
  uint64_t v901;
  unint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  void *v906;
  void (*v907)(void);
  uint64_t v908;
  os_log_type_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  void *v914;
  uint64_t v915;
  uint64_t v916;
  void (*v917)(uint64_t);
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t *v921;
  Swift::String v922;
  Swift::String v923;
  Swift::String v924;
  OmniSearch::AppEntityItem *v925;
  long long v926;
  long long v927;
  void *rawValue;
  long long v929;
  uint64_t *v930;
  void (*v931)(void);
  uint64_t v932;
  NSObject *v933;
  os_log_type_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  void *v938;
  uint64_t v939;
  void *v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  void *v944;
  uint64_t v945;
  uint64_t v946;
  void (*v947)(uint64_t);
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  unint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  long long *v969;
  uint64_t v970;
  const char *v971;
  const char *v972;
  char *v973;
  _OWORD *v974;
  uint64_t v975;
  _OWORD *v976;
  uint64_t v977;
  _OWORD *v978;
  uint64_t v979;
  _OWORD *v980;
  uint64_t v981;
  uint64_t v982;
  char *v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  _OWORD *v989;
  uint64_t v990;
  _OWORD *v991;
  uint64_t v992;
  _OWORD *v993;
  _OWORD *v994;
  _OWORD *v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  void *__dst;
  uint64_t v1000;
  uint64_t v1001;
  _OWORD *v1002;
  void *v1003;
  uint64_t v1004;
  uint64_t v1005;
  _OWORD *v1006;
  _OWORD *v1007;
  uint64_t *v1008;
  _OWORD *v1009;
  uint64_t v1010;
  uint64_t v1011;
  _OWORD *v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  _OWORD *v1016;
  void *v1017;
  uint64_t v1018;
  unsigned char *v1019;
  void *v1020;
  void *v1021;
  void *v1022;
  id v1023;
  os_log_type_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint8_t *v1027;
  uint8_t *v1028;
  unsigned char *v1029;
  void *v1030;
  void *bundleId;
  uint64_t v1032;
  NSObject *oslog;
  os_log_t osloga;
  uint8_t *v1035;
  uint8_t *v1036;
  uint8_t *v1037;
  unsigned char *v1038;
  id v1039;
  uint64_t v1040;
  unsigned char *v1041;
  uint64_t v1042;
  id v1043;
  uint64_t v1044;
  unsigned char *v1045;
  uint64_t v1046;
  unsigned char *v1047;
  unsigned char *v1048;
  id v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  void (**v1053)(void);
  void *v1054;
  unsigned char *v1055;
  void *v1056;
  void *v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  unsigned char *v1061;
  unsigned char *v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  unsigned char *v1066;
  void *v1067;
  unsigned char *v1068;
  uint64_t v1069;
  char v1070;
  uint64_t v1071;
  uint64_t v1072;
  void (**v1073)(uint64_t);
  unsigned char *v1074;
  uint64_t v1075;
  os_log_type_t v1076;
  uint64_t v1077;
  void *v1078;
  uint64_t v1079;
  unsigned char *v1080;
  uint64_t v1081;
  unsigned char *v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  id v1086;
  os_log_type_t v1087;
  os_log_type_t v1088;
  os_log_t v1089;
  os_log_t v1090;
  os_log_t v1091;
  os_log_t v1092;
  NSObject *v1093;
  os_log_t v1094;
  os_log_t v1095;
  os_log_t v1096;
  void *v1097;
  uint64_t v1098;
  void *v1099;
  uint64_t v1100;
  uint64_t v1101;
  void *v1102;
  unsigned char *v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  void *v1108;
  os_log_type_t v1109;
  NSObject *v1110;
  NSObject *v1111;
  void *v1112;
  uint64_t v1113;
  id v1114;
  void *v1115;
  void *v1116;
  void *v1117;
  os_log_t v1118[2];
  void *v1119;
  uint64_t v1120;
  os_log_t log;
  NSObject *loga;
  os_log_t logb;
  os_log_t logc;
  os_log_t logd;
  os_log_t loge;
  NSObject *logf;
  uint64_t v1128;
  void *v1129;
  void *v1130;
  unsigned char *v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  Swift::String v1135;
  uint64_t v1136;
  uint64_t v1137;
  void v1138[2];
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  OmniSearch::Contact v1144;
  uint8_t *v1145;
  uint64_t v1146;
  uint64_t v1147;
  void *v1148;
  uint64_t v1149;

  v1148 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0[359];
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 17));
  v1138[0] = specialized static Array._allocateUninitialized(_:)(0);
  v1138[1] = specialized static Array._allocateUninitialized(_:)(0);
  specialized static Array._allocateUninitialized(_:)(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  uint64_t v3 = Dictionary.init(dictionaryLiteral:)();
  v1139 = v3;
  specialized static Array._allocateUninitialized(_:)(0);
  type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for CSSearchableItem);
  id v4 = Dictionary.init(dictionaryLiteral:)();
  v1140 = v4;
  v1141 = v2;
  v1142 = 0;
  v1143 = 0;
  uint64_t v5 = specialized EnumeratedSequence.Iterator.next()();
  if (!v6)
  {
LABEL_528:
    v944 = (void *)v1[355];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v945 = OUTLINED_FUNCTION_186_2();
    specialized static Array.+ infix(_:_:)();
    v946 = v945;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v1138[0] = v946;
    LocalIndexClient.populateMobileSMSDocumentPhotos(results:messageIdToPhotoAttachmentIds:photoAttachmentIdToPhotoItem:)((uint64_t)v1138, v3, v4);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v1137 = v1138[0];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_149();
    v947(v1137);
    return;
  }
  BOOL v7 = v5;
  uint64_t v8 = v6;
  uint64_t v9 = v0[319];
  v1073 = (void (**)(uint64_t))(v9 + 16);
  v1053 = (void (**)(void))(v9 + 8);
  v1015 = *MEMORY[0x263F029E8];
  v982 = *MEMORY[0x263F02000];
  v988 = *MEMORY[0x263F01F60];
  v987 = *MEMORY[0x263F02028];
  v985 = *MEMORY[0x263F02580];
  v986 = *MEMORY[0x263F02458];
  v984 = *MEMORY[0x263F02358];
  v1001 = *MEMORY[0x263F02590];
  v1005 = *MEMORY[0x263F02020];
  v1004 = *MEMORY[0x263F02550];
  v1010 = *MEMORY[0x263F02280];
  __dst = v0 + 2;
  v998 = (uint64_t)(v0 + 22);
  v997 = (uint64_t)(v0 + 26);
  v1032 = (uint64_t)(v0 + 30);
  v1012 = v0 + 34;
  v1018 = (uint64_t)(v0 + 38);
  v1016 = v0 + 42;
  v1014 = (uint64_t)(v0 + 46);
  v1013 = (uint64_t)(v0 + 50);
  v981 = (uint64_t)(v0 + 54);
  v980 = v0 + 58;
  v1009 = v0 + 62;
  v979 = (uint64_t)(v0 + 70);
  v978 = v0 + 74;
  v977 = (uint64_t)(v0 + 78);
  v976 = v0 + 82;
  v975 = (uint64_t)(v0 + 86);
  v974 = v0 + 90;
  v1011 = (uint64_t)(v0 + 94);
  v1007 = v0 + 102;
  v1003 = v0 + 106;
  v996 = (uint64_t)(v0 + 110);
  v995 = v0 + 114;
  v1006 = v0 + 118;
  v994 = v0 + 122;
  v993 = v0 + 130;
  v992 = (uint64_t)(v0 + 134);
  v991 = v0 + 138;
  v990 = (uint64_t)(v0 + 142);
  v989 = v0 + 146;
  v1002 = v0 + 150;
  v970 = (uint64_t)(v0 + 172);
  v969 = (long long *)(v0 + 178);
  v968 = (uint64_t)(v0 + 180);
  v967 = (uint64_t)(v0 + 184);
  v1008 = v0 + 188;
  v983 = (char *)(v0 + 364);
  v1000 = v0[308];
  v966 = v0[198];
  v965 = v0[194];
  v973 = "arch_spotlight_metrics";
  v971 = "com.apple.MobileSMS";
  v972 = "com.apple.Passbook";
  v963 = 0x800000025867FE90;
  v964 = 0x800000025867FFB0;
  v1022 = v0;
  v1017 = v0 + 158;
  while (1)
  {
    uint64_t v10 = OUTLINED_FUNCTION_102_7();
    os_log_type_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    v1[168] = v11;
    v1[169] = v13;
    v1[158] = 1096110926;
    v1[159] = 0xE400000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    LOBYTE(v10) = BidirectionalCollection<>.starts<A>(with:)();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      break;
    }

LABEL_176:
    BOOL v7 = specialized EnumeratedSequence.Iterator.next()();
    uint64_t v8 = v327;
    if (!v327)
    {
      uint64_t v3 = v1139;
      id v4 = v1140;
      goto LABEL_528;
    }
  }
  v1128 = outlined bridged method (pb) of @objc CSSearchableItem.bundleID.getter(v8);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = objc_msgSend(v8, sel_attributeSet);
    uint64_t v17 = outlined bridged method (pb) of @objc CSSearchableItem.bundleID.getter(v8);
    v1023 = v8;
    if (v18)
    {
      os_log_type_t v11 = v18;
      if (v17 == 0xD000000000000013 && v18 == 0x800000025867FE10)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
      uint64_t v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v13)
      {
LABEL_14:
        outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.identifier.getter(v16);
        if (v33)
        {
          OUTLINED_FUNCTION_187_1();
        }
        else
        {
          os_log_type_t v11 = 0xE300000000000000;
          uint64_t v13 = 7104878;
        }
        goto LABEL_19;
      }
    }
    uint64_t v34 = OUTLINED_FUNCTION_102_7();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_187_1();

LABEL_19:
    uint64_t v36 = v1[350];
    Logging.search.unsafeMutableAddressor();
    (*v1073)(v36);
    uint64_t v37 = OUTLINED_FUNCTION_48_14();
    *(void *)(v37 + 16) = v7;
    os_log_type_t v38 = OUTLINED_FUNCTION_141();
    *(void *)(v38 + 16) = v13;
    *(void *)(v38 + 24) = v11;
    uint64_t v39 = OUTLINED_FUNCTION_141();
    *(void *)(v39 + 16) = v1128;
    *(void *)(v39 + 24) = v15;
    uint64_t v40 = OUTLINED_FUNCTION_48_14();
    *(void *)(v40 + 16) = v16;
    uint64_t v41 = OUTLINED_FUNCTION_48_14();
    *(void *)(v41 + 16) = v16;
    uint64_t v42 = OUTLINED_FUNCTION_48_14();
    *(void *)(v42 + 16) = v16;
    v1025 = OUTLINED_FUNCTION_48_14();
    *(void *)(v1025 + 16) = v16;
    v1086 = v16;
    bundleId = v15;
    swift_bridgeObjectRetain();
    oslog = Logger.logObject.getter();
    v1024 = static os_log_type_t.info.getter();
    uint64_t v43 = OUTLINED_FUNCTION_8_17();
    *(unsigned char *)(v43 + 16) = 0;
    uint64_t v44 = v43;
    v1019 = (unsigned char *)OUTLINED_FUNCTION_8_17();
    v1019[16] = 8;
    uint64_t v45 = OUTLINED_FUNCTION_141();
    *(void *)(v45 + 16) = partial apply for implicit closure #6 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
    *(void *)(v45 + 24) = v37;
    v1020 = (void *)OUTLINED_FUNCTION_141();
    v1020[2] = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    v1020[3] = v45;
    v1045 = (unsigned char *)OUTLINED_FUNCTION_8_17();
    v1045[16] = 32;
    v1047 = (unsigned char *)OUTLINED_FUNCTION_8_17();
    v1047[16] = 8;
    uint64_t v46 = OUTLINED_FUNCTION_141();
    *(void *)(v46 + 16) = partial apply for implicit closure #8 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
    *(void *)(v46 + 24) = v38;
    uint64_t v47 = OUTLINED_FUNCTION_141();
    *(void *)(v47 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(void *)(v47 + 24) = v46;
    uint64_t v48 = (void *)v47;
    v1029 = (unsigned char *)OUTLINED_FUNCTION_8_17();
    v1029[16] = 32;
    v1041 = (unsigned char *)OUTLINED_FUNCTION_8_17();
    v1041[16] = 8;
    uint64_t v49 = OUTLINED_FUNCTION_141();
    *(void *)(v49 + 16) = partial apply for implicit closure #8 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
    *(void *)(v49 + 24) = v39;
    v1097 = (void *)OUTLINED_FUNCTION_141();
    v1097[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    v1097[3] = v49;
    uint64_t v50 = OUTLINED_FUNCTION_8_17();
    *(unsigned char *)(v50 + 16) = 32;
    uint64_t v51 = v50;
    v1027 = (uint8_t *)v50;
    v1038 = (unsigned char *)OUTLINED_FUNCTION_8_17();
    v1038[16] = 8;
    uint64_t v52 = OUTLINED_FUNCTION_141();
    *(void *)(v52 + 16) = partial apply for implicit closure #9 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
    *(void *)(v52 + 24) = v40;
    v1035 = (uint8_t *)OUTLINED_FUNCTION_141();
    *((void *)v1035 + 2) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *((void *)v1035 + 3) = v52;
    v1066 = (unsigned char *)OUTLINED_FUNCTION_8_17();
    v1066[16] = 32;
    v1089 = (os_log_t)OUTLINED_FUNCTION_8_17();
    LOBYTE(v1089[2].isa) = 8;
    uint64_t v53 = OUTLINED_FUNCTION_141();
    *(void *)(v53 + 16) = partial apply for implicit closure #11 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
    *(void *)(v53 + 24) = v41;
    v1108 = (void *)OUTLINED_FUNCTION_141();
    v1108[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    v1108[3] = v53;
    v1061 = (unsigned char *)OUTLINED_FUNCTION_8_17();
    v1061[16] = 32;
    v1080 = (unsigned char *)OUTLINED_FUNCTION_8_17();
    v1080[16] = 8;
    os_log_type_t v54 = OUTLINED_FUNCTION_141();
    *(void *)(v54 + 16) = partial apply for implicit closure #12 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
    *(void *)(v54 + 24) = v42;
    v1054 = (void *)OUTLINED_FUNCTION_141();
    v1054[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    v1054[3] = v54;
    v1074 = (unsigned char *)OUTLINED_FUNCTION_8_17();
    v1074[16] = 32;
    log = (os_log_t)OUTLINED_FUNCTION_8_17();
    LOBYTE(log[2].isa) = 8;
    uint64_t v55 = OUTLINED_FUNCTION_141();
    *(void *)(v55 + 16) = partial apply for implicit closure #13 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
    *(void *)(v55 + 24) = v1025;
    v1026 = OUTLINED_FUNCTION_141();
    *(void *)(v1026 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(void *)(v1026 + 24) = v55;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>);
    uint64_t v56 = swift_allocObject();
    specialized static Array._adoptStorage(_:count:)(v56, 21);
    *uint64_t v57 = closure #1 in OSLogArguments.append(_:)partial apply;
    v57[1] = v44;
    uint64_t v58 = (void *)v44;
    v57[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v57[3] = v1019;
    uint64_t v57[4] = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
    v57[5] = v1020;
    v57[6] = closure #1 in OSLogArguments.append(_:)partial apply;
    v57[7] = v1045;
    v57[8] = closure #1 in OSLogArguments.append(_:)partial apply;
    v57[9] = v1047;
    v57[10] = closure #1 in OSLogArguments.append(_:)partial apply;
    v57[11] = v48;
    v57[12] = closure #1 in OSLogArguments.append(_:)partial apply;
    v57[13] = v1029;
    v57[14] = closure #1 in OSLogArguments.append(_:)partial apply;
    v57[15] = v1041;
    v57[16] = closure #1 in OSLogArguments.append(_:)partial apply;
    v57[17] = v1097;
    v57[18] = closure #1 in OSLogArguments.append(_:)partial apply;
    v57[19] = v51;
    v57[20] = closure #1 in OSLogArguments.append(_:)partial apply;
    v57[21] = v1038;
    v57[22] = closure #1 in OSLogArguments.append(_:)partial apply;
    v57[23] = v1035;
    v57[24] = closure #1 in OSLogArguments.append(_:)partial apply;
    v57[25] = v1066;
    v57[26] = closure #1 in OSLogArguments.append(_:)partial apply;
    v57[27] = v1089;
    v57[28] = closure #1 in OSLogArguments.append(_:)partial apply;
    v57[29] = v1108;
    v57[30] = closure #1 in OSLogArguments.append(_:)partial apply;
    v57[31] = v1061;
    v57[32] = closure #1 in OSLogArguments.append(_:)partial apply;
    v57[33] = v1080;
    v57[34] = closure #1 in OSLogArguments.append(_:)partial apply;
    v57[35] = v1054;
    v57[36] = closure #1 in OSLogArguments.append(_:)partial apply;
    v57[37] = v1074;
    v57[38] = closure #1 in OSLogArguments.append(_:)partial apply;
    v57[39] = log;
    uint64_t v29 = (uint8_t *)v1026;
    v57[40] = closure #1 in OSLogArguments.append(_:)partial apply;
    v57[41] = v1026;
    v1021 = v58;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v1024))
    {
      uint64_t v59 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v60 = swift_slowAlloc();
      v1146 = 0;
      v1147 = v60;
      *(_WORD *)uint64_t v59 = 1794;
      v1145 = v59 + 2;
      v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
      v1144.id._object = v1021;
      OUTLINED_FUNCTION_7_34();
      if (!v1026)
      {
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v1019;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
        v1144.id._object = v1020;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v1045;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v1047;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v48;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v1029;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v1041;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v1097;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v1027;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v1038;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v1035;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v1066;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v1089;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v1108;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v1061;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v1080;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v1054;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v1074;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = log;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = 0;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        _os_log_impl(&dword_257DC6000, oslog, v1024, "Result Rank %ld: id:%s, bundle:%s, contentType: %s, L2:%s, L1:%s, detectedEvents:%s", v59, 0x48u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_34();
        specialized UnsafeMutablePointer.deallocate()();
      }
      goto LABEL_531;
    }
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    OUTLINED_FUNCTION_180_3();
    OUTLINED_FUNCTION_16_1();
    v61();
    uint64_t v62 = (void *)MEMORY[0x25A2C7AB0](0xD00000000000001BLL, 0x8000000258683860);
    uint64_t v63 = objc_msgSend(v1086, sel_attributeForKey_, v62);

    if (v63)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      *v1012 = 0u;
      v1012[1] = 0u;
    }
    outlined init with take of Any?((uint64_t)v1012, v1032, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (objc_msgSend(v1086, sel_attributeForKey_, v1015))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      *v1016 = 0u;
      v1016[1] = 0u;
    }
    outlined init with take of Any?((uint64_t)v1016, v1018, (uint64_t *)&demangling cache variable for type metadata for Any?);
    OUTLINED_FUNCTION_10_30();
    v64();
    uint64_t v65 = OUTLINED_FUNCTION_141();
    *(void *)(v65 + 16) = v1128;
    *(void *)(v65 + 24) = bundleId;
    outlined init with copy of StructuredQueryEntity?(v1032, v1014, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v66 = swift_allocObject();
    outlined init with take of Any?(v1014, v66 + 16, (uint64_t *)&demangling cache variable for type metadata for Any?);
    outlined init with copy of StructuredQueryEntity?(v1018, v1013, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v1098 = swift_allocObject();
    outlined init with take of Any?(v1013, v1098 + 16, (uint64_t *)&demangling cache variable for type metadata for Any?);
    swift_bridgeObjectRetain();
    loga = Logger.logObject.getter();
    v1109 = static os_log_type_t.info.getter();
    Swift::String v67 = (unsigned char *)OUTLINED_FUNCTION_8_17();
    v67[16] = 32;
    Swift::String v68 = (void *)OUTLINED_FUNCTION_8_17();
    OUTLINED_FUNCTION_41_22((uint64_t)v68);
    Swift::String v69 = OUTLINED_FUNCTION_141();
    *(void *)(v69 + 16) = partial apply for implicit closure #15 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
    *(void *)(v69 + 24) = v65;
    Swift::String v70 = (void *)OUTLINED_FUNCTION_141();
    v70[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    v70[3] = v69;
    Swift::String v71 = (unsigned char *)OUTLINED_FUNCTION_8_17();
    v71[16] = 32;
    uint64_t v29 = (uint8_t *)OUTLINED_FUNCTION_8_17();
    v29[16] = 8;
    Swift::String v72 = OUTLINED_FUNCTION_141();
    *(void *)(v72 + 16) = partial apply for implicit closure #16 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
    *(void *)(v72 + 24) = v66;
    Swift::String v73 = (void *)OUTLINED_FUNCTION_141();
    v73[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    v73[3] = v72;
    Swift::String v74 = (unsigned char *)OUTLINED_FUNCTION_8_17();
    v74[16] = 32;
    Swift::String v75 = OUTLINED_FUNCTION_8_17();
    OUTLINED_FUNCTION_41_22(v75);
    Swift::String v76 = OUTLINED_FUNCTION_141();
    *(void *)(v76 + 16) = partial apply for implicit closure #17 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
    *(void *)(v76 + 24) = v1098;
    Swift::String v77 = OUTLINED_FUNCTION_141();
    *(void *)(v77 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(void *)(v77 + 24) = v76;
    uint64_t v78 = swift_allocObject();
    specialized static Array._adoptStorage(_:count:)(v78, 9);
    *Class v79 = closure #1 in OSLogArguments.append(_:)partial apply;
    v79[1] = v67;
    v79[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v79[3] = v68;
    v79[4] = closure #1 in OSLogArguments.append(_:)partial apply;
    v79[5] = v70;
    v79[6] = closure #1 in OSLogArguments.append(_:)partial apply;
    v79[7] = v71;
    v79[8] = closure #1 in OSLogArguments.append(_:)partial apply;
    v79[9] = v29;
    v79[10] = closure #1 in OSLogArguments.append(_:)partial apply;
    v79[11] = v73;
    v79[12] = closure #1 in OSLogArguments.append(_:)partial apply;
    v79[13] = v74;
    v79[14] = closure #1 in OSLogArguments.append(_:)partial apply;
    v79[15] = v75;
    v79[16] = closure #1 in OSLogArguments.append(_:)partial apply;
    v79[17] = v77;
    uint64_t v80 = v67;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v1099 = (void *)v75;
    swift_retain();
    v1090 = (os_log_t)v77;
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(loga, v1109))
    {
      uint64_t v81 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v82 = swift_slowAlloc();
      v1146 = 0;
      v1147 = v82;
      *(_WORD *)uint64_t v81 = 770;
      v1145 = v81 + 2;
      v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
      v1144.id._object = v67;
      OUTLINED_FUNCTION_7_34();
      if (!v29)
      {
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v68;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v70;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v71;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = 0;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v73;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v74;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v1099;
        OUTLINED_FUNCTION_2_25();
        swift_release();
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v1090;
        OUTLINED_FUNCTION_2_25();
        OUTLINED_FUNCTION_143_3();
        swift_release();
        _os_log_impl(&dword_257DC6000, loga, v1109, "Fetched result from bundleId %s with result retrieval type: %s, embedding distance for item: %s", v81, 0x20u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_34();
        specialized UnsafeMutablePointer.deallocate()();
      }
      goto LABEL_531;
    }
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    uint64_t v83 = *v1053;
    OUTLINED_FUNCTION_28();
    v83();
    uint64_t v1 = v1022;
    uint64_t v84 = &demangling cache variable for type metadata for Any?;
    if (CSSearchableItem.isPhotoOrVideo.getter())
    {
      uint64_t v85 = v1022[313];
      long long v86 = v1022[312];
      LocalIndexClient.constructPhotoDocument(item:)(v1023, v86);
      OUTLINED_FUNCTION_53_2(v86, 1, v85);
      if (!v172)
      {
        uint64_t v87 = v1022[317];
        long long v88 = v1022[316];
        uint64_t v89 = (_WORD *)v1022[315];
        uint64_t v90 = (void *)v1022[312];
        swift_bridgeObjectRelease();
        outlined init with take of VoiceMemo((uint64_t)v90, v87, (void (*)(void))type metadata accessor for Photo);
        OUTLINED_FUNCTION_10_30();
        v91();
        uint64_t v92 = OUTLINED_FUNCTION_56_1();
        outlined init with copy of VoiceMemo(v92, v93, v94);
        OUTLINED_FUNCTION_126_4();
        swift_allocObject();
        OUTLINED_FUNCTION_189_1();
        outlined init with take of VoiceMemo(v88, v95, (void (*)(void))type metadata accessor for Photo);
        uint64_t v96 = Logger.logObject.getter();
        uint64_t v97 = static os_log_type_t.debug.getter();
        uint64_t v98 = (unsigned char *)OUTLINED_FUNCTION_8_17();
        v98[16] = 37;
        uint64_t v99 = OUTLINED_FUNCTION_8_17();
        OUTLINED_FUNCTION_38_20(v99);
        uint64_t v100 = OUTLINED_FUNCTION_141();
        *(void *)(v100 + 16) = partial apply for implicit closure #18 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
        *(void *)(v100 + 24) = v87;
        uint64_t v101 = (void *)OUTLINED_FUNCTION_141();
        v101[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        v101[3] = v100;
        uint64_t v102 = OUTLINED_FUNCTION_33_21();
        uint64_t v29 = (uint8_t *)specialized static Array._adoptStorage(_:count:)(v102, 3);
        *uint64_t v103 = closure #1 in OSLogArguments.append(_:)partial apply;
        v103[1] = v98;
        v103[2] = closure #1 in OSLogArguments.append(_:)partial apply;
        v103[3] = v90;
        v103[4] = closure #1 in OSLogArguments.append(_:)partial apply;
        v103[5] = v101;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        if (OUTLINED_FUNCTION_65_12())
        {
          specialized static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v105 = OUTLINED_FUNCTION_39_20();
          v1146 = 0;
          v1147 = v105;
          *uint64_t v89 = 259;
          v1145 = (uint8_t *)(v89 + 1);
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v98;
          OUTLINED_FUNCTION_7_34();
          if (!v29)
          {
            swift_release();
            v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
            v1144.id._object = v90;
            OUTLINED_FUNCTION_2_25();
            swift_release();
            v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
            v1144.id._object = v101;
            OUTLINED_FUNCTION_2_25();
            OUTLINED_FUNCTION_114_9();
            OUTLINED_FUNCTION_66_15(&dword_257DC6000, v96, v97, "Photo or Video found: %{sensitive}s");
            OUTLINED_FUNCTION_121_0();
            OUTLINED_FUNCTION_34();
            specialized UnsafeMutablePointer.deallocate()();
          }
          goto LABEL_531;
        }
        swift_release();
        swift_release();
        swift_release();

        uint64_t v122 = OUTLINED_FUNCTION_36_22();
        v123(v122);
        uint64_t v124 = v1022[311];
        uint64_t v125 = v1022[308];
        outlined init with copy of VoiceMemo(v1022[317], v125, (void (*)(void))type metadata accessor for Photo);
        swift_storeEnumTagMultiPayload();
        SearchResult.init(_:csItem:)(v125, (uint64_t)v1023, v124);
        uint64_t v126 = v1023;
        specialized Array.append(_:)(v124);
        char v127 = outlined bridged method (pb) of @objc CSSearchableItem.bundleID.getter(v126);
        if (!v128) {
          goto LABEL_70;
        }
        if (v127 == 0xD000000000000013 && v128 == 0x800000025867FE70)
        {
          swift_bridgeObjectRelease();
          goto LABEL_69;
        }
        uint64_t v129 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v129)
        {
LABEL_69:
          uint64_t v130 = v1022[317];
          uint64_t v131 = objc_msgSend(v126, sel_uniqueIdentifier);
          uint64_t v132 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          long long v134 = v133;

          long long v135 = v126;
          specialized Dictionary.subscript.setter((uint64_t)v1023, v132, v134);

          int v136 = type metadata accessor for Photo;
          int v137 = v130;
        }
        else
        {
LABEL_70:
          unint64_t v138 = v1022[317];

          int v136 = type metadata accessor for Photo;
          int v137 = v138;
        }
LABEL_231:
        outlined destroy of VoiceMemo(v137, (void (*)(void))v136);
        goto LABEL_174;
      }
      outlined destroy of EagerResolutionService?(v1022[312], &demangling cache variable for type metadata for Photo?);
    }
    OUTLINED_FUNCTION_49_9();
    OUTLINED_FUNCTION_89_7();
    if (v172 && bundleId == (void *)0x800000025867C6E0 || (OUTLINED_FUNCTION_73_11() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if (objc_msgSend(v1086, sel_attributeForKey_, v1010))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        *(_OWORD *)v1011 = 0u;
        *(_OWORD *)(v1011 + 16) = 0u;
      }
      OUTLINED_FUNCTION_153_3(v1011);
      if (!v1022[101])
      {
        OUTLINED_FUNCTION_158_3();
LABEL_50:
        OUTLINED_FUNCTION_10_30();
        v109();
        uint64_t v110 = Logger.logObject.getter();
        uint64_t v111 = static os_log_type_t.error.getter();
        uint64_t v112 = specialized static Array._allocateUninitialized(_:)(0);
        if (os_log_type_enabled(v110, v111))
        {
          uint64_t v113 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
          v1147 = 0;
          v1144.id._countAndFlagsBits = 0;
          OUTLINED_FUNCTION_144_3(v113);
          specialized Sequence.forEach(_:)(v112, v114, v115, (uint64_t)&v1144);
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_257DC6000, v110, v111, "LocalIndexClient: InstantAnswer has no eventType", v113, 2u);
          specialized UnsafeMutablePointer.deallocate()();
        }
        swift_bridgeObjectRelease();

        OUTLINED_FUNCTION_28();
        v83();
        goto LABEL_174;
      }
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_50;
      }
      v1075 = v1022[182];
      v1081 = v1022[183];
      OUTLINED_FUNCTION_49_9();
      uint64_t v107 = (void *)MEMORY[0x25A2C7AB0](v106 + 18, 0x8000000258683880);
      uint64_t v108 = objc_msgSend(v1086, sel_attributeForKey_, v107);

      if (v108)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        *v1009 = 0u;
        v1009[1] = 0u;
      }
      OUTLINED_FUNCTION_153_3((uint64_t)v1009);
      if (v1022[69])
      {
        OUTLINED_FUNCTION_79_0();
        if (swift_dynamicCast())
        {
          uint64_t v139 = *v1008;
          goto LABEL_77;
        }
      }
      else
      {
        OUTLINED_FUNCTION_158_3();
      }
      uint64_t v139 = specialized static Array._allocateUninitialized(_:)(0);
LABEL_77:
      uint64_t v140 = v1022[363];
      uint64_t v141 = outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.filename.getter(objc_msgSend(v1023, sel_attributeSet), (SEL *)&selRef_mailMessageID);
      uint64_t v143 = v142;
      swift_bridgeObjectRetain();
      _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSS_s5NeverOSo16CSSearchableItemCTg5055_s10OmniSearch16LocalIndexClientC11findMatches3for12maxf61Count9spQUParseSayAA0B6ResultVGSS_SiSo9SPQUParseCSgtYaKFSo012E13J0CSgSSXEfU2_SDySSAGGTf1cn_nTm(v141, v143, (uint64_t)v140);
      OUTLINED_FUNCTION_38_18();
      if (v140)
      {
        v1042 = v139;
        osloga = v140;
        v1036 = (uint8_t *)v140;
      }
      else
      {
        uint64_t v144 = (uint8_t *)v1022[363];
        uint64_t v145 = outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.filename.getter(objc_msgSend(v1023, sel_attributeSet), (SEL *)&selRef_eventMessageIdentifier);
        char v147 = v146;
        swift_bridgeObjectRetain();
        _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSS_s5NeverOSo16CSSearchableItemCTg5055_s10OmniSearch16LocalIndexClientC11findMatches3for12maxf61Count9spQUParseSayAA0B6ResultVGSS_SiSo9SPQUParseCSgtYaKFSo012E13J0CSgSSXEfU2_SDySSAGGTf1cn_nTm(v145, v147, (uint64_t)v144);
        OUTLINED_FUNCTION_38_18();
        if (!v144)
        {
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_10_30();
          v256();
          v257 = OUTLINED_FUNCTION_141();
          *(void *)(v257 + 16) = v1075;
          *(void *)(v257 + 24) = v1081;
          v258 = OUTLINED_FUNCTION_48_14();
          *(void *)(v258 + 16) = v1023;
          v259 = OUTLINED_FUNCTION_48_14();
          *(void *)(v259 + 16) = v1023;
          v260 = OUTLINED_FUNCTION_48_14();
          *(void *)(v260 + 16) = v1023;
          v1049 = v1023;
          v1093 = Logger.logObject.getter();
          v1076 = static os_log_type_t.error.getter();
          v1131 = (unsigned char *)OUTLINED_FUNCTION_8_17();
          v1131[16] = 32;
          v1112 = (void *)OUTLINED_FUNCTION_8_17();
          OUTLINED_FUNCTION_41_22((uint64_t)v1112);
          v261 = OUTLINED_FUNCTION_141();
          *(void *)(v261 + 16) = partial apply for implicit closure #8 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
          *(void *)(v261 + 24) = v257;
          v262 = OUTLINED_FUNCTION_141();
          *(void *)(v262 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
          *(void *)(v262 + 24) = v261;
          v263 = v262;
          logd = (os_log_t)v262;
          v264 = OUTLINED_FUNCTION_8_17();
          *(unsigned char *)(v264 + 16) = 32;
          v265 = (void *)v264;
          v1103 = (unsigned char *)OUTLINED_FUNCTION_8_17();
          v1103[16] = 8;
          v266 = OUTLINED_FUNCTION_141();
          *(void *)(v266 + 16) = partial apply for implicit closure #22 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
          *(void *)(v266 + 24) = v258;
          v267 = OUTLINED_FUNCTION_141();
          *(void *)(v267 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
          *(void *)(v267 + 24) = v266;
          v268 = (uint8_t *)v267;
          v1082 = (unsigned char *)OUTLINED_FUNCTION_8_17();
          v1082[16] = 32;
          v1068 = (unsigned char *)OUTLINED_FUNCTION_8_17();
          v1068[16] = 8;
          v269 = OUTLINED_FUNCTION_141();
          *(void *)(v269 + 16) = partial apply for implicit closure #24 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
          *(void *)(v269 + 24) = v259;
          v270 = (void *)OUTLINED_FUNCTION_141();
          v270[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
          v270[3] = v269;
          v271 = OUTLINED_FUNCTION_8_17();
          *(unsigned char *)(v271 + 16) = 32;
          v272 = (unsigned char *)OUTLINED_FUNCTION_8_17();
          v272[16] = 8;
          v273 = OUTLINED_FUNCTION_141();
          *(void *)(v273 + 16) = partial apply for implicit closure #26 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
          *(void *)(v273 + 24) = v260;
          v274 = (void *)OUTLINED_FUNCTION_141();
          v274[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
          v274[3] = v273;
          v275 = OUTLINED_FUNCTION_127_5();
          specialized static Array._adoptStorage(_:count:)(v275, 12);
          *v276 = closure #1 in OSLogArguments.append(_:)partial apply;
          v276[1] = v1131;
          v276[2] = closure #1 in OSLogArguments.append(_:)partial apply;
          v276[3] = v1112;
          v276[4] = closure #1 in OSLogArguments.append(_:)partial apply;
          v276[5] = v263;
          v276[6] = closure #1 in OSLogArguments.append(_:)partial apply;
          v276[7] = v265;
          v276[8] = closure #1 in OSLogArguments.append(_:)partial apply;
          v276[9] = v1103;
          v276[10] = closure #1 in OSLogArguments.append(_:)partial apply;
          v276[11] = v268;
          v276[12] = closure #1 in OSLogArguments.append(_:)partial apply;
          v276[13] = v1082;
          v276[14] = closure #1 in OSLogArguments.append(_:)partial apply;
          v276[15] = v1068;
          v276[16] = closure #1 in OSLogArguments.append(_:)partial apply;
          v276[17] = v270;
          v276[18] = closure #1 in OSLogArguments.append(_:)partial apply;
          v276[19] = v271;
          v276[20] = closure #1 in OSLogArguments.append(_:)partial apply;
          v276[21] = v272;
          v276[22] = closure #1 in OSLogArguments.append(_:)partial apply;
          v276[23] = v274;
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t v29 = v268;
          v1057 = v265;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          v277 = (void *)v271;
          swift_retain();
          v278 = v272;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          if (os_log_type_enabled(v1093, v1076))
          {
            v279 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
            v280 = swift_slowAlloc();
            v1146 = 0;
            v1147 = v280;
            *(_WORD *)v279 = 1026;
            v1145 = v279 + 2;
            v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
            v1144.id._object = v1131;
            OUTLINED_FUNCTION_7_34();
            if (!v268)
            {
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v1112;
              OUTLINED_FUNCTION_2_25();
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = logd;
              OUTLINED_FUNCTION_2_25();
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v1057;
              OUTLINED_FUNCTION_2_25();
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v1103;
              OUTLINED_FUNCTION_2_25();
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = 0;
              OUTLINED_FUNCTION_2_25();
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v1082;
              OUTLINED_FUNCTION_2_25();
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v1068;
              OUTLINED_FUNCTION_2_25();
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v270;
              OUTLINED_FUNCTION_2_25();
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v277;
              OUTLINED_FUNCTION_2_25();
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v272;
              OUTLINED_FUNCTION_2_25();
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v274;
              OUTLINED_FUNCTION_2_25();
              OUTLINED_FUNCTION_143_3();
              swift_release();
              _os_log_impl(&dword_257DC6000, v1093, v1076, "Pre-Extraction event is discarded. InstantAnswer has no source email: eventType: %s, mailMessageId: %s, eventMessageId: %s, SourceBundle:%s,", v279, 0x2Au);
              swift_arrayDestroy();
              OUTLINED_FUNCTION_34();
              specialized UnsafeMutablePointer.deallocate()();
            }
            goto LABEL_531;
          }
          uint64_t v1 = v1022;
          v292 = (void *)v1022[318];
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();

          v293 = *v1053;
          OUTLINED_FUNCTION_28();
          v293();
          v294 = v1022[363];
          OUTLINED_FUNCTION_10_30();
          v295();
          v296 = OUTLINED_FUNCTION_48_14();
          *(void *)(v296 + 16) = v294;
          v297 = OUTLINED_FUNCTION_141();
          *(void *)(v297 + 16) = partial apply for implicit closure #28 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
          *(void *)(v297 + 24) = v296;
          swift_bridgeObjectRetain();
          v298 = Logger.logObject.getter();
          v299 = static os_log_type_t.error.getter();
          v300 = OUTLINED_FUNCTION_8_17();
          OUTLINED_FUNCTION_43_22(v300);
          v301 = OUTLINED_FUNCTION_8_17();
          OUTLINED_FUNCTION_38_20(v301);
          v302 = OUTLINED_FUNCTION_141();
          *(void *)(v302 + 16) = partial apply for specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
          *(void *)(v302 + 24) = v297;
          v303 = (void *)OUTLINED_FUNCTION_141();
          v303[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
          v303[3] = v302;
          v304 = OUTLINED_FUNCTION_33_21();
          uint64_t v29 = (uint8_t *)specialized static Array._adoptStorage(_:count:)(v304, 3);
          *v305 = closure #1 in OSLogArguments.append(_:)partial apply;
          v305[1] = v292;
          v305[2] = closure #1 in OSLogArguments.append(_:)partial apply;
          v305[3] = v278;
          v305[4] = closure #1 in OSLogArguments.append(_:)partial apply;
          v305[5] = v303;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          if (OUTLINED_FUNCTION_65_12())
          {
            specialized static UnsafeMutablePointer.allocate(capacity:)();
            v306 = OUTLINED_FUNCTION_39_20();
            OUTLINED_FUNCTION_13_33(v306);
            v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
            v1144.id._object = v292;
            OUTLINED_FUNCTION_7_34();
            if (!v29)
            {
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v278;
              OUTLINED_FUNCTION_2_25();
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v303;
              OUTLINED_FUNCTION_2_25();
              OUTLINED_FUNCTION_114_9();
              OUTLINED_FUNCTION_66_15(&dword_257DC6000, v298, v299, "InstantAnswer Source Email Mapping Keys: %s");
              OUTLINED_FUNCTION_121_0();
              OUTLINED_FUNCTION_34();
              specialized UnsafeMutablePointer.deallocate()();
            }
            goto LABEL_531;
          }

          swift_release();
          swift_release();
          swift_release();

          OUTLINED_FUNCTION_28();
          v293();
          goto LABEL_152;
        }
        v1042 = v139;
        v1036 = v144;
        osloga = v144;
        uint64_t v140 = 0;
      }
      OUTLINED_FUNCTION_10_30();
      v148();
      char v149 = OUTLINED_FUNCTION_48_14();
      *(void *)(v149 + 16) = v1086;
      int v150 = OUTLINED_FUNCTION_48_14();
      *(void *)(v150 + 16) = v1086;
      char v151 = OUTLINED_FUNCTION_48_14();
      *(void *)(v151 + 16) = v1086;
      v1100 = OUTLINED_FUNCTION_48_14();
      *(void *)(v1100 + 16) = v1086;
      v1039 = v1086;
      uint64_t v152 = v140;
      v1110 = Logger.logObject.getter();
      v1087 = static os_log_type_t.info.getter();
      unint64_t v153 = (unsigned char *)OUTLINED_FUNCTION_8_17();
      v153[16] = 37;
      v1067 = (void *)OUTLINED_FUNCTION_8_17();
      OUTLINED_FUNCTION_41_22((uint64_t)v1067);
      __int16 v154 = OUTLINED_FUNCTION_141();
      *(void *)(v154 + 16) = partial apply for implicit closure #29 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
      *(void *)(v154 + 24) = v149;
      char v155 = OUTLINED_FUNCTION_141();
      *(void *)(v155 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      *(void *)(v155 + 24) = v154;
      long long v156 = v155;
      v1129 = (void *)v155;
      v1091 = (os_log_t)OUTLINED_FUNCTION_8_17();
      LOBYTE(v1091[2].isa) = 37;
      logb = (os_log_t)OUTLINED_FUNCTION_8_17();
      LOBYTE(logb[2].isa) = 8;
      long long v157 = OUTLINED_FUNCTION_141();
      *(void *)(v157 + 16) = partial apply for implicit closure #30 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
      *(void *)(v157 + 24) = v150;
      Swift::OpaquePointer_optional v158 = (void *)OUTLINED_FUNCTION_141();
      v158[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      v158[3] = v157;
      v1062 = (unsigned char *)OUTLINED_FUNCTION_8_17();
      v1062[16] = 37;
      v1055 = (unsigned char *)OUTLINED_FUNCTION_8_17();
      v1055[16] = 8;
      uint64_t v159 = OUTLINED_FUNCTION_141();
      *(void *)(v159 + 16) = partial apply for implicit closure #31 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
      *(void *)(v159 + 24) = v151;
      uint64_t v160 = (void *)OUTLINED_FUNCTION_141();
      v160[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      v160[3] = v159;
      uint64_t v161 = (unsigned char *)OUTLINED_FUNCTION_8_17();
      v161[16] = 37;
      uint64_t v162 = OUTLINED_FUNCTION_8_17();
      *(unsigned char *)(v162 + 16) = 8;
      uint64_t v163 = OUTLINED_FUNCTION_141();
      *(void *)(v163 + 16) = partial apply for implicit closure #32 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
      *(void *)(v163 + 24) = v1100;
      uint64_t v164 = OUTLINED_FUNCTION_141();
      *(void *)(v164 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      *(void *)(v164 + 24) = v163;
      uint64_t v165 = OUTLINED_FUNCTION_127_5();
      specialized static Array._adoptStorage(_:count:)(v165, 12);
      *uint64_t v166 = closure #1 in OSLogArguments.append(_:)partial apply;
      v166[1] = v153;
      v166[2] = closure #1 in OSLogArguments.append(_:)partial apply;
      v166[3] = v1067;
      v166[4] = closure #1 in OSLogArguments.append(_:)partial apply;
      v166[5] = v156;
      v166[6] = closure #1 in OSLogArguments.append(_:)partial apply;
      v166[7] = v1091;
      v166[8] = closure #1 in OSLogArguments.append(_:)partial apply;
      v166[9] = logb;
      v166[10] = closure #1 in OSLogArguments.append(_:)partial apply;
      v166[11] = v158;
      v166[12] = closure #1 in OSLogArguments.append(_:)partial apply;
      v166[13] = v1062;
      v166[14] = closure #1 in OSLogArguments.append(_:)partial apply;
      v166[15] = v1055;
      v166[16] = closure #1 in OSLogArguments.append(_:)partial apply;
      v166[17] = v160;
      v166[18] = closure #1 in OSLogArguments.append(_:)partial apply;
      v166[19] = v161;
      v166[20] = closure #1 in OSLogArguments.append(_:)partial apply;
      v166[21] = v162;
      v166[22] = closure #1 in OSLogArguments.append(_:)partial apply;
      v166[23] = v164;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v1110, v1087))
      {
        v1030 = (void *)v164;
        uint64_t v167 = (void *)v162;
        uint64_t v168 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v169 = swift_slowAlloc();
        v1146 = 0;
        v1147 = v169;
        v1028 = v168;
        *(_WORD *)uint64_t v168 = 1027;
        uint64_t v29 = v168 + 2;
        v1145 = v29;
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v153;
        OUTLINED_FUNCTION_7_34();
        if (!v29)
        {
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v1067;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v1129;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v1091;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = logb;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v158;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v1062;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v1055;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v160;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v161;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v167;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v1030;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          _os_log_impl(&dword_257DC6000, v1110, v1087, "Pre-Extraction found: %{sensitive}s, %{sensitive}s, %{sensitive}s, %{sensitive}s", v1028, 0x2Au);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_34();
          specialized UnsafeMutablePointer.deallocate()();
        }
        goto LABEL_531;
      }
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      uint64_t v170 = *v1053;
      OUTLINED_FUNCTION_28();
      v170();
      unint64_t v172 = static String._unconditionallyBridgeFromObjectiveC(_:)() == v1075 && v171 == v1081;
      if (v172)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = v1022;
      }
      else
      {
        OUTLINED_FUNCTION_62_13();
        OUTLINED_FUNCTION_72_11();
        uint64_t v1 = v1022;
        if ((v164 & 1) == 0)
        {
          if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v1075 && v173 == v1081)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            OUTLINED_FUNCTION_62_13();
            OUTLINED_FUNCTION_72_11();
            if ((v164 & 1) == 0)
            {
              if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v1075 && v175 == v1081)
              {
                swift_bridgeObjectRelease();
LABEL_181:
                swift_bridgeObjectRelease();
                OUTLINED_FUNCTION_9();
                v330 = v1023;
                OUTLINED_FUNCTION_172_3();
                RestaurantReservation.init(item:answerAttributes:requireDates:)();
                OUTLINED_FUNCTION_32_21();
                if (v172)
                {
                  v331 = v1022[289];

                  OUTLINED_FUNCTION_124_7();
                  OUTLINED_FUNCTION_130_4();
                  uint64_t v203 = v331;
                  uint64_t v204 = (uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?;
                  goto LABEL_175;
                }
                OUTLINED_FUNCTION_151_2();
                uint64_t v29 = (uint8_t *)v1022[294];
                v332 = (void *)v1022[293];
                outlined init with take of VoiceMemo(v1022[289], (uint64_t)v29, (void (*)(void))type metadata accessor for RestaurantReservation);
                OUTLINED_FUNCTION_10_30();
                v333();
                outlined init with copy of VoiceMemo((uint64_t)v29, (uint64_t)v332, (void (*)(void))type metadata accessor for RestaurantReservation);
                OUTLINED_FUNCTION_30_27();
                v334 = OUTLINED_FUNCTION_47_17();
                OUTLINED_FUNCTION_28_19(v334);
                OUTLINED_FUNCTION_55_19();
                v335 = OUTLINED_FUNCTION_47_17();
                OUTLINED_FUNCTION_28_19(v335);
                v336 = Logger.logObject.getter();
                static os_log_type_t.info.getter();
                v337 = OUTLINED_FUNCTION_8_17();
                OUTLINED_FUNCTION_51_20(v337);
                v338 = OUTLINED_FUNCTION_8_17();
                OUTLINED_FUNCTION_56_13(v338);
                v339 = OUTLINED_FUNCTION_141();
                *(void *)(v339 + 16) = partial apply for implicit closure #37 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
                *(void *)(v339 + 24) = v334;
                v340 = (void *)OUTLINED_FUNCTION_141();
                v340[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
                v340[3] = v339;
                v341 = OUTLINED_FUNCTION_8_17();
                OUTLINED_FUNCTION_86_10(v341);
                v342 = OUTLINED_FUNCTION_8_17();
                OUTLINED_FUNCTION_105_12(v342);
                v343 = OUTLINED_FUNCTION_141();
                *(void *)(v343 + 16) = partial apply for implicit closure #38 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
                *(void *)(v343 + 24) = v335;
                v344 = (void *)OUTLINED_FUNCTION_141();
                v344[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
                v344[3] = v343;
                v345 = OUTLINED_FUNCTION_49_18();
                specialized static Array._adoptStorage(_:count:)(v345, 6);
                *v346 = closure #1 in OSLogArguments.append(_:)partial apply;
                v346[1] = v1022;
                v346[2] = closure #1 in OSLogArguments.append(_:)partial apply;
                v346[3] = v1017;
                v346[4] = closure #1 in OSLogArguments.append(_:)partial apply;
                v346[5] = v340;
                v346[6] = closure #1 in OSLogArguments.append(_:)partial apply;
                v346[7] = type metadata accessor for RestaurantReservation;
                v346[8] = closure #1 in OSLogArguments.append(_:)partial apply;
                v346[9] = v332;
                v346[10] = closure #1 in OSLogArguments.append(_:)partial apply;
                v346[11] = v344;
                swift_retain();
                swift_retain();
                swift_retain();
                swift_retain();
                swift_retain();
                swift_retain();
                swift_bridgeObjectRelease();
                if (OUTLINED_FUNCTION_106_10())
                {
                  OUTLINED_FUNCTION_191_2();
                  v348 = OUTLINED_FUNCTION_53_15();
                  OUTLINED_FUNCTION_23_20(v348);
                  v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                  v1144.id._object = v1022;
                  OUTLINED_FUNCTION_7_34();
                  if (!v29)
                  {
                    swift_release();
                    v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                    v1144.id._object = v1017;
                    OUTLINED_FUNCTION_2_25();
                    swift_release();
                    v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                    v1144.id._object = v340;
                    OUTLINED_FUNCTION_2_25();
                    swift_release();
                    v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                    v1144.id._object = type metadata accessor for RestaurantReservation;
                    OUTLINED_FUNCTION_2_25();
                    swift_release();
                    v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                    v1144.id._object = v332;
                    OUTLINED_FUNCTION_2_25();
                    swift_release();
                    v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                    v1144.id._object = v344;
                    OUTLINED_FUNCTION_2_25();
                    OUTLINED_FUNCTION_100_10();
                    OUTLINED_FUNCTION_192_2();
                    OUTLINED_FUNCTION_85_14(&dword_257DC6000, v336, v349, "Restaurant reservation found: %{sensitive}s ; %{sensitive}s");
                    OUTLINED_FUNCTION_50_24();
                    OUTLINED_FUNCTION_34();
                    specialized UnsafeMutablePointer.deallocate()();
                  }
                  goto LABEL_531;
                }
                v416 = v1022[344];
                OUTLINED_FUNCTION_173_3();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();

                OUTLINED_FUNCTION_24_28();
                v417();
                uint64_t v1 = v1022;
                OUTLINED_FUNCTION_44_20();
                outlined init with copy of VoiceMemo(v1022[294], v416, (void (*)(void))type metadata accessor for RestaurantReservation);
                OUTLINED_FUNCTION_148();
LABEL_233:
                swift_storeEnumTagMultiPayload();
                OUTLINED_FUNCTION_142_3();
                specialized Array.append(_:)(v335);

                int v137 = OUTLINED_FUNCTION_77_7();
                goto LABEL_231;
              }
              OUTLINED_FUNCTION_62_13();
              OUTLINED_FUNCTION_72_11();
              if (v164) {
                goto LABEL_181;
              }
              swift_bridgeObjectRelease();
              if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v1075 && v177 == v1081)
              {
                swift_bridgeObjectRelease();
LABEL_235:
                swift_bridgeObjectRelease();
                v418 = v1023;
                RentalCarReservation.init(item:)((uint64_t)v418);
                OUTLINED_FUNCTION_32_21();
                if (!v172)
                {
                  OUTLINED_FUNCTION_151_2();
                  uint64_t v29 = (uint8_t *)v1022[288];
                  v460 = (void *)v1022[287];
                  outlined init with take of VoiceMemo(v1022[283], (uint64_t)v29, (void (*)(void))type metadata accessor for RentalCarReservation);
                  OUTLINED_FUNCTION_10_30();
                  v461();
                  outlined init with copy of VoiceMemo((uint64_t)v29, (uint64_t)v460, (void (*)(void))type metadata accessor for RentalCarReservation);
                  OUTLINED_FUNCTION_30_27();
                  v462 = OUTLINED_FUNCTION_47_17();
                  OUTLINED_FUNCTION_28_19(v462);
                  OUTLINED_FUNCTION_55_19();
                  v335 = OUTLINED_FUNCTION_47_17();
                  OUTLINED_FUNCTION_28_19(v335);
                  v463 = Logger.logObject.getter();
                  static os_log_type_t.info.getter();
                  v464 = OUTLINED_FUNCTION_8_17();
                  OUTLINED_FUNCTION_51_20(v464);
                  v465 = OUTLINED_FUNCTION_8_17();
                  OUTLINED_FUNCTION_56_13(v465);
                  v466 = OUTLINED_FUNCTION_141();
                  *(void *)(v466 + 16) = partial apply for implicit closure #39 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
                  *(void *)(v466 + 24) = v462;
                  v467 = (void *)OUTLINED_FUNCTION_141();
                  v467[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
                  v467[3] = v466;
                  v468 = OUTLINED_FUNCTION_8_17();
                  OUTLINED_FUNCTION_86_10(v468);
                  v469 = OUTLINED_FUNCTION_8_17();
                  OUTLINED_FUNCTION_105_12(v469);
                  v470 = OUTLINED_FUNCTION_141();
                  *(void *)(v470 + 16) = partial apply for implicit closure #40 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
                  *(void *)(v470 + 24) = v335;
                  v471 = (void *)OUTLINED_FUNCTION_141();
                  v471[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
                  v471[3] = v470;
                  v472 = OUTLINED_FUNCTION_49_18();
                  specialized static Array._adoptStorage(_:count:)(v472, 6);
                  *v473 = closure #1 in OSLogArguments.append(_:)partial apply;
                  v473[1] = v1022;
                  v473[2] = closure #1 in OSLogArguments.append(_:)partial apply;
                  v473[3] = v1017;
                  v473[4] = closure #1 in OSLogArguments.append(_:)partial apply;
                  v473[5] = v467;
                  v473[6] = closure #1 in OSLogArguments.append(_:)partial apply;
                  v473[7] = type metadata accessor for RentalCarReservation;
                  v473[8] = closure #1 in OSLogArguments.append(_:)partial apply;
                  v473[9] = v460;
                  v473[10] = closure #1 in OSLogArguments.append(_:)partial apply;
                  v473[11] = v471;
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_bridgeObjectRelease();
                  if (OUTLINED_FUNCTION_106_10())
                  {
                    OUTLINED_FUNCTION_191_2();
                    v475 = OUTLINED_FUNCTION_53_15();
                    OUTLINED_FUNCTION_23_20(v475);
                    v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                    v1144.id._object = v1022;
                    OUTLINED_FUNCTION_7_34();
                    if (!v29)
                    {
                      swift_release();
                      v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                      v1144.id._object = v1017;
                      OUTLINED_FUNCTION_2_25();
                      swift_release();
                      v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                      v1144.id._object = v467;
                      OUTLINED_FUNCTION_2_25();
                      swift_release();
                      v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                      v1144.id._object = type metadata accessor for RentalCarReservation;
                      OUTLINED_FUNCTION_2_25();
                      swift_release();
                      v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                      v1144.id._object = v460;
                      OUTLINED_FUNCTION_2_25();
                      swift_release();
                      v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                      v1144.id._object = v471;
                      OUTLINED_FUNCTION_2_25();
                      OUTLINED_FUNCTION_100_10();
                      OUTLINED_FUNCTION_192_2();
                      OUTLINED_FUNCTION_85_14(&dword_257DC6000, v463, v476, "Rental car reservation found: %{sensitive}s ; %{sensitive}s");
                      OUTLINED_FUNCTION_50_24();
                      OUTLINED_FUNCTION_34();
                      specialized UnsafeMutablePointer.deallocate()();
                    }
                    goto LABEL_531;
                  }
                  v479 = v1022[343];
                  OUTLINED_FUNCTION_173_3();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();

                  OUTLINED_FUNCTION_24_28();
                  v480();
                  uint64_t v1 = v1022;
                  OUTLINED_FUNCTION_44_20();
                  outlined init with copy of VoiceMemo(v1022[288], v479, (void (*)(void))type metadata accessor for RentalCarReservation);
                  OUTLINED_FUNCTION_148();
                  goto LABEL_233;
                }
                v419 = v1022[283];

                OUTLINED_FUNCTION_124_7();
                OUTLINED_FUNCTION_130_4();
                uint64_t v203 = v419;
                uint64_t v204 = &demangling cache variable for type metadata for RentalCarReservation?;
LABEL_175:
                outlined destroy of EagerResolutionService?(v203, v204);
                goto LABEL_176;
              }
              OUTLINED_FUNCTION_62_13();
              OUTLINED_FUNCTION_72_11();
              if (v164) {
                goto LABEL_235;
              }
              if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v1075 && v179 == v1081)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                OUTLINED_FUNCTION_62_13();
                OUTLINED_FUNCTION_72_11();
                if ((v164 & 1) == 0)
                {
                  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v1075 && v181 == v1081)
                  {
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    OUTLINED_FUNCTION_62_13();
                    OUTLINED_FUNCTION_72_11();
                    if ((v164 & 1) == 0)
                    {
                      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v1075 && v183 == v1081)
                      {
                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        OUTLINED_FUNCTION_95_10();
                        OUTLINED_FUNCTION_72_11();
                        if ((v164 & 1) == 0)
                        {
                          if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v1075 && v185 == v1081)
                          {
                            swift_bridgeObjectRelease();
                          }
                          else
                          {
                            OUTLINED_FUNCTION_95_10();
                            OUTLINED_FUNCTION_72_11();
                            if ((v164 & 1) == 0)
                            {
                              if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v1075 && v187 == v1081)
                              {
                                swift_bridgeObjectRelease();
                              }
                              else
                              {
                                OUTLINED_FUNCTION_95_10();
                                OUTLINED_FUNCTION_72_11();
                                if ((v164 & 1) == 0)
                                {
                                  OUTLINED_FUNCTION_10_30();
                                  v189();
                                  uint64_t v190 = OUTLINED_FUNCTION_141();
                                  *(void *)(v190 + 16) = v1075;
                                  *(void *)(v190 + 24) = v1081;
                                  uint64_t v191 = Logger.logObject.getter();
                                  unsigned int v192 = static os_log_type_t.error.getter();
                                  uint64_t v193 = OUTLINED_FUNCTION_8_17();
                                  OUTLINED_FUNCTION_43_22(v193);
                                  unsigned int v194 = OUTLINED_FUNCTION_8_17();
                                  OUTLINED_FUNCTION_38_20(v194);
                                  uint64_t v195 = OUTLINED_FUNCTION_141();
                                  *(void *)(v195 + 16) = partial apply for implicit closure #8 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
                                  *(void *)(v195 + 24) = v190;
                                  uint64_t v196 = (void *)OUTLINED_FUNCTION_141();
                                  v196[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
                                  v196[3] = v195;
                                  v197 = OUTLINED_FUNCTION_33_21();
                                  uint64_t v29 = (uint8_t *)specialized static Array._adoptStorage(_:count:)(v197, 3);
                                  *uint64_t v198 = closure #1 in OSLogArguments.append(_:)partial apply;
                                  v198[1] = v1023;
                                  v198[2] = closure #1 in OSLogArguments.append(_:)partial apply;
                                  v198[3] = &demangling cache variable for type metadata for Any?;
                                  v198[4] = closure #1 in OSLogArguments.append(_:)partial apply;
                                  v198[5] = v196;
                                  swift_retain();
                                  swift_retain();
                                  swift_retain();
                                  swift_bridgeObjectRelease();
                                  if (OUTLINED_FUNCTION_65_12())
                                  {
                                    specialized static UnsafeMutablePointer.allocate(capacity:)();
                                    unint64_t v199 = OUTLINED_FUNCTION_39_20();
                                    OUTLINED_FUNCTION_13_33(v199);
                                    v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                                    v1144.id._object = v1023;
                                    OUTLINED_FUNCTION_7_34();
                                    if (!v29)
                                    {
                                      swift_release();
                                      v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                                      v1144.id._object = &demangling cache variable for type metadata for Any?;
                                      OUTLINED_FUNCTION_2_25();
                                      swift_release();
                                      v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                                      v1144.id._object = v196;
                                      OUTLINED_FUNCTION_2_25();
                                      OUTLINED_FUNCTION_114_9();
                                      OUTLINED_FUNCTION_66_15(&dword_257DC6000, v191, v192, "LocalIndexClient: Found instant answer of unknown type: %s");
                                      OUTLINED_FUNCTION_121_0();
                                      OUTLINED_FUNCTION_34();
                                      specialized UnsafeMutablePointer.deallocate()();
                                    }
                                    goto LABEL_531;
                                  }
                                  uint64_t v1 = v1022;
                                  v694 = v1022[337];
                                  v695 = v1022[318];

                                  swift_release();
                                  swift_release();
                                  swift_release();

                                  ((void (*)(uint64_t, uint64_t))v170)(v694, v695);
                                  goto LABEL_174;
                                }
                              }
                              swift_bridgeObjectRelease();
                              v668 = OUTLINED_FUNCTION_181_3((unint64_t)v1023);
                              Trip.init(item:)(v668);
                              OUTLINED_FUNCTION_32_21();
                              if (v172)
                              {
                                uint64_t v1 = v1022;
                                v669 = v1022[253];

                                outlined destroy of EagerResolutionService?(v1018, (uint64_t *)&demangling cache variable for type metadata for Any?);
                                OUTLINED_FUNCTION_131_5();
                                uint64_t v203 = v669;
                                uint64_t v204 = (uint64_t *)&demangling cache variable for type metadata for Trip?;
                                goto LABEL_175;
                              }
                              uint64_t v29 = (uint8_t *)v1022[258];
                              v670 = (void *)v1022[257];
                              outlined init with take of VoiceMemo(v1022[253], (uint64_t)v29, (void (*)(void))type metadata accessor for Trip);
                              OUTLINED_FUNCTION_10_30();
                              v671();
                              outlined init with copy of VoiceMemo((uint64_t)v29, (uint64_t)v670, (void (*)(void))type metadata accessor for Trip);
                              OUTLINED_FUNCTION_30_27();
                              v672 = OUTLINED_FUNCTION_47_17();
                              OUTLINED_FUNCTION_28_19(v672);
                              OUTLINED_FUNCTION_55_19();
                              v564 = OUTLINED_FUNCTION_47_17();
                              OUTLINED_FUNCTION_28_19(v564);
                              v1119 = (void *)Logger.logObject.getter();
                              static os_log_type_t.info.getter();
                              v673 = OUTLINED_FUNCTION_8_17();
                              OUTLINED_FUNCTION_51_20(v673);
                              v674 = OUTLINED_FUNCTION_8_17();
                              OUTLINED_FUNCTION_56_13(v674);
                              v675 = OUTLINED_FUNCTION_141();
                              *(void *)(v675 + 16) = partial apply for implicit closure #49 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
                              *(void *)(v675 + 24) = v672;
                              v676 = (void *)OUTLINED_FUNCTION_141();
                              v676[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
                              v676[3] = v675;
                              v677 = OUTLINED_FUNCTION_8_17();
                              OUTLINED_FUNCTION_86_10(v677);
                              v678 = OUTLINED_FUNCTION_8_17();
                              OUTLINED_FUNCTION_149_1(v678);
                              v679 = OUTLINED_FUNCTION_141();
                              *(void *)(v679 + 16) = partial apply for implicit closure #50 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
                              *(void *)(v679 + 24) = v564;
                              v680 = (void *)OUTLINED_FUNCTION_141();
                              v680[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
                              v680[3] = v679;
                              v681 = OUTLINED_FUNCTION_49_18();
                              specialized static Array._adoptStorage(_:count:)(v681, 6);
                              *v682 = closure #1 in OSLogArguments.append(_:)partial apply;
                              v682[1] = v1022;
                              v682[2] = closure #1 in OSLogArguments.append(_:)partial apply;
                              v682[3] = v1017;
                              v682[4] = closure #1 in OSLogArguments.append(_:)partial apply;
                              v682[5] = v676;
                              v682[6] = closure #1 in OSLogArguments.append(_:)partial apply;
                              v682[7] = type metadata accessor for Trip;
                              v682[8] = closure #1 in OSLogArguments.append(_:)partial apply;
                              v682[9] = v670;
                              v682[10] = closure #1 in OSLogArguments.append(_:)partial apply;
                              v682[11] = v680;
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_bridgeObjectRelease();
                              if (OUTLINED_FUNCTION_91_11())
                              {
                                specialized static UnsafeMutablePointer.allocate(capacity:)();
                                v684 = OUTLINED_FUNCTION_53_15();
                                OUTLINED_FUNCTION_23_20(v684);
                                v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                                v1144.id._object = v1022;
                                OUTLINED_FUNCTION_7_34();
                                if (!v29)
                                {
                                  swift_release();
                                  v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                                  v1144.id._object = v1017;
                                  OUTLINED_FUNCTION_2_25();
                                  swift_release();
                                  v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                                  v1144.id._object = v676;
                                  OUTLINED_FUNCTION_2_25();
                                  swift_release();
                                  v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                                  v1144.id._object = type metadata accessor for Trip;
                                  OUTLINED_FUNCTION_2_25();
                                  swift_release();
                                  v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                                  v1144.id._object = v670;
                                  OUTLINED_FUNCTION_2_25();
                                  swift_release();
                                  v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                                  v1144.id._object = v680;
                                  OUTLINED_FUNCTION_2_25();
                                  OUTLINED_FUNCTION_162_3();
                                  OUTLINED_FUNCTION_125_7();
                                  OUTLINED_FUNCTION_161_3();
                                  OUTLINED_FUNCTION_85_14(v685, v686, v687, "Trip found: %{sensitive}s ; %{sensitive}s");
                                  OUTLINED_FUNCTION_50_24();
                                  OUTLINED_FUNCTION_34();
                                  specialized UnsafeMutablePointer.deallocate()();
                                }
                                goto LABEL_531;
                              }
                              v691 = v1022[338];
                              OUTLINED_FUNCTION_163_3();
                              swift_release();
                              swift_release();
                              swift_release();
                              swift_release();
                              swift_release();

                              v692 = OUTLINED_FUNCTION_58_14();
                              v693(v692);
                              uint64_t v1 = v1022;
                              OUTLINED_FUNCTION_44_20();
                              outlined init with copy of VoiceMemo(v1022[258], v691, (void (*)(void))type metadata accessor for Trip);
                              OUTLINED_FUNCTION_148();
                              goto LABEL_301;
                            }
                          }
                          swift_bridgeObjectRelease();
                          v611 = OUTLINED_FUNCTION_181_3((unint64_t)v1023);
                          Party.init(item:)(v611);
                          OUTLINED_FUNCTION_32_21();
                          if (v172)
                          {
                            uint64_t v1 = v1022;
                            v612 = v1022[259];

                            outlined destroy of EagerResolutionService?(v1018, (uint64_t *)&demangling cache variable for type metadata for Any?);
                            OUTLINED_FUNCTION_131_5();
                            uint64_t v203 = v612;
                            uint64_t v204 = &demangling cache variable for type metadata for Party?;
                            goto LABEL_175;
                          }
                          uint64_t v29 = (uint8_t *)v1022[264];
                          v613 = (void *)v1022[263];
                          outlined init with take of VoiceMemo(v1022[259], (uint64_t)v29, (void (*)(void))type metadata accessor for Party);
                          OUTLINED_FUNCTION_10_30();
                          v614();
                          outlined init with copy of VoiceMemo((uint64_t)v29, (uint64_t)v613, (void (*)(void))type metadata accessor for Party);
                          OUTLINED_FUNCTION_30_27();
                          v615 = OUTLINED_FUNCTION_47_17();
                          OUTLINED_FUNCTION_28_19(v615);
                          OUTLINED_FUNCTION_55_19();
                          v564 = OUTLINED_FUNCTION_47_17();
                          OUTLINED_FUNCTION_28_19(v564);
                          v1117 = (void *)Logger.logObject.getter();
                          static os_log_type_t.info.getter();
                          v616 = OUTLINED_FUNCTION_8_17();
                          OUTLINED_FUNCTION_51_20(v616);
                          v617 = OUTLINED_FUNCTION_8_17();
                          OUTLINED_FUNCTION_56_13(v617);
                          v618 = OUTLINED_FUNCTION_141();
                          *(void *)(v618 + 16) = partial apply for implicit closure #47 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
                          *(void *)(v618 + 24) = v615;
                          v619 = (void *)OUTLINED_FUNCTION_141();
                          v619[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
                          v619[3] = v618;
                          v620 = OUTLINED_FUNCTION_8_17();
                          OUTLINED_FUNCTION_86_10(v620);
                          v621 = OUTLINED_FUNCTION_8_17();
                          OUTLINED_FUNCTION_149_1(v621);
                          v622 = OUTLINED_FUNCTION_141();
                          *(void *)(v622 + 16) = partial apply for implicit closure #48 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
                          *(void *)(v622 + 24) = v564;
                          v623 = (void *)OUTLINED_FUNCTION_141();
                          v623[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
                          v623[3] = v622;
                          v624 = OUTLINED_FUNCTION_49_18();
                          specialized static Array._adoptStorage(_:count:)(v624, 6);
                          *v625 = closure #1 in OSLogArguments.append(_:)partial apply;
                          v625[1] = v1022;
                          v625[2] = closure #1 in OSLogArguments.append(_:)partial apply;
                          v625[3] = v1017;
                          v625[4] = closure #1 in OSLogArguments.append(_:)partial apply;
                          v625[5] = v619;
                          v625[6] = closure #1 in OSLogArguments.append(_:)partial apply;
                          v625[7] = type metadata accessor for Party;
                          v625[8] = closure #1 in OSLogArguments.append(_:)partial apply;
                          v625[9] = v613;
                          v625[10] = closure #1 in OSLogArguments.append(_:)partial apply;
                          v625[11] = v623;
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_bridgeObjectRelease();
                          if (OUTLINED_FUNCTION_91_11())
                          {
                            specialized static UnsafeMutablePointer.allocate(capacity:)();
                            v627 = OUTLINED_FUNCTION_53_15();
                            OUTLINED_FUNCTION_23_20(v627);
                            v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                            v1144.id._object = v1022;
                            OUTLINED_FUNCTION_7_34();
                            if (!v29)
                            {
                              swift_release();
                              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                              v1144.id._object = v1017;
                              OUTLINED_FUNCTION_2_25();
                              swift_release();
                              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                              v1144.id._object = v619;
                              OUTLINED_FUNCTION_2_25();
                              swift_release();
                              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                              v1144.id._object = type metadata accessor for Party;
                              OUTLINED_FUNCTION_2_25();
                              swift_release();
                              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                              v1144.id._object = v613;
                              OUTLINED_FUNCTION_2_25();
                              swift_release();
                              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                              v1144.id._object = v623;
                              OUTLINED_FUNCTION_2_25();
                              OUTLINED_FUNCTION_162_3();
                              OUTLINED_FUNCTION_125_7();
                              OUTLINED_FUNCTION_161_3();
                              OUTLINED_FUNCTION_85_14(v628, v629, v630, "Party found: %{sensitive}s ; %{sensitive}s");
                              OUTLINED_FUNCTION_50_24();
                              OUTLINED_FUNCTION_34();
                              specialized UnsafeMutablePointer.deallocate()();
                            }
                            goto LABEL_531;
                          }
                          v660 = v1022[339];
                          OUTLINED_FUNCTION_163_3();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();

                          v661 = OUTLINED_FUNCTION_58_14();
                          v662(v661);
                          uint64_t v1 = v1022;
                          OUTLINED_FUNCTION_44_20();
                          outlined init with copy of VoiceMemo(v1022[264], v660, (void (*)(void))type metadata accessor for Party);
                          OUTLINED_FUNCTION_148();
LABEL_301:
                          swift_storeEnumTagMultiPayload();
                          OUTLINED_FUNCTION_142_3();
                          specialized Array.append(_:)(v564);

                          v285 = logb;
                          goto LABEL_150;
                        }
                      }
                      swift_bridgeObjectRelease();
                      v583 = OUTLINED_FUNCTION_181_3((unint64_t)v1023);
                      Appointment.init(item:)(v583);
                      OUTLINED_FUNCTION_32_21();
                      if (v172)
                      {
                        uint64_t v1 = v1022;
                        v584 = v1022[265];

                        outlined destroy of EagerResolutionService?(v1018, (uint64_t *)&demangling cache variable for type metadata for Any?);
                        OUTLINED_FUNCTION_131_5();
                        uint64_t v203 = v584;
                        uint64_t v204 = (uint64_t *)&demangling cache variable for type metadata for Appointment?;
                        goto LABEL_175;
                      }
                      uint64_t v29 = (uint8_t *)v1022[270];
                      v585 = (void *)v1022[269];
                      outlined init with take of VoiceMemo(v1022[265], (uint64_t)v29, (void (*)(void))type metadata accessor for Appointment);
                      OUTLINED_FUNCTION_10_30();
                      v586();
                      outlined init with copy of VoiceMemo((uint64_t)v29, (uint64_t)v585, (void (*)(void))type metadata accessor for Appointment);
                      OUTLINED_FUNCTION_30_27();
                      v587 = OUTLINED_FUNCTION_47_17();
                      OUTLINED_FUNCTION_28_19(v587);
                      OUTLINED_FUNCTION_55_19();
                      v564 = OUTLINED_FUNCTION_47_17();
                      OUTLINED_FUNCTION_28_19(v564);
                      v1116 = (void *)Logger.logObject.getter();
                      static os_log_type_t.info.getter();
                      v588 = OUTLINED_FUNCTION_8_17();
                      OUTLINED_FUNCTION_51_20(v588);
                      v589 = OUTLINED_FUNCTION_8_17();
                      OUTLINED_FUNCTION_56_13(v589);
                      v590 = OUTLINED_FUNCTION_141();
                      *(void *)(v590 + 16) = partial apply for implicit closure #45 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
                      *(void *)(v590 + 24) = v587;
                      v591 = (void *)OUTLINED_FUNCTION_141();
                      v591[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
                      v591[3] = v590;
                      v592 = OUTLINED_FUNCTION_8_17();
                      OUTLINED_FUNCTION_86_10(v592);
                      v593 = OUTLINED_FUNCTION_8_17();
                      OUTLINED_FUNCTION_149_1(v593);
                      v594 = OUTLINED_FUNCTION_141();
                      *(void *)(v594 + 16) = partial apply for implicit closure #46 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
                      *(void *)(v594 + 24) = v564;
                      v595 = (void *)OUTLINED_FUNCTION_141();
                      v595[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
                      v595[3] = v594;
                      v596 = OUTLINED_FUNCTION_49_18();
                      specialized static Array._adoptStorage(_:count:)(v596, 6);
                      *v597 = closure #1 in OSLogArguments.append(_:)partial apply;
                      v597[1] = v1022;
                      v597[2] = closure #1 in OSLogArguments.append(_:)partial apply;
                      v597[3] = v1017;
                      v597[4] = closure #1 in OSLogArguments.append(_:)partial apply;
                      v597[5] = v591;
                      v597[6] = closure #1 in OSLogArguments.append(_:)partial apply;
                      v597[7] = type metadata accessor for Appointment;
                      v597[8] = closure #1 in OSLogArguments.append(_:)partial apply;
                      v597[9] = v585;
                      v597[10] = closure #1 in OSLogArguments.append(_:)partial apply;
                      v597[11] = v595;
                      swift_retain();
                      swift_retain();
                      swift_retain();
                      swift_retain();
                      swift_retain();
                      swift_retain();
                      swift_bridgeObjectRelease();
                      if (OUTLINED_FUNCTION_91_11())
                      {
                        specialized static UnsafeMutablePointer.allocate(capacity:)();
                        v599 = OUTLINED_FUNCTION_53_15();
                        OUTLINED_FUNCTION_23_20(v599);
                        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                        v1144.id._object = v1022;
                        OUTLINED_FUNCTION_7_34();
                        if (!v29)
                        {
                          swift_release();
                          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                          v1144.id._object = v1017;
                          OUTLINED_FUNCTION_2_25();
                          swift_release();
                          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                          v1144.id._object = v591;
                          OUTLINED_FUNCTION_2_25();
                          swift_release();
                          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                          v1144.id._object = type metadata accessor for Appointment;
                          OUTLINED_FUNCTION_2_25();
                          swift_release();
                          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                          v1144.id._object = v585;
                          OUTLINED_FUNCTION_2_25();
                          swift_release();
                          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                          v1144.id._object = v595;
                          OUTLINED_FUNCTION_2_25();
                          OUTLINED_FUNCTION_162_3();
                          OUTLINED_FUNCTION_125_7();
                          OUTLINED_FUNCTION_161_3();
                          OUTLINED_FUNCTION_85_14(v600, v601, v602, "Appointment found: %{sensitive}s ; %{sensitive}s");
                          OUTLINED_FUNCTION_50_24();
                          OUTLINED_FUNCTION_34();
                          specialized UnsafeMutablePointer.deallocate()();
                        }
                        goto LABEL_531;
                      }
                      v606 = v1022[340];
                      OUTLINED_FUNCTION_163_3();
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();

                      v607 = OUTLINED_FUNCTION_58_14();
                      v608(v607);
                      uint64_t v1 = v1022;
                      OUTLINED_FUNCTION_44_20();
                      outlined init with copy of VoiceMemo(v1022[270], v606, (void (*)(void))type metadata accessor for Appointment);
                      OUTLINED_FUNCTION_148();
                      goto LABEL_301;
                    }
                  }
                  uint64_t v1 = v1022;
                  swift_bridgeObjectRelease();
                  v559 = OUTLINED_FUNCTION_181_3((unint64_t)v1023);
                  TicketedShow.init(item:)(v559);
                  OUTLINED_FUNCTION_32_21();
                  if (v172)
                  {
                    v560 = v1022[271];

                    outlined destroy of EagerResolutionService?(v1018, (uint64_t *)&demangling cache variable for type metadata for Any?);
                    OUTLINED_FUNCTION_131_5();
                    uint64_t v203 = v560;
                    uint64_t v204 = &demangling cache variable for type metadata for TicketedShow?;
                    goto LABEL_175;
                  }
                  uint64_t v29 = (uint8_t *)v1022[276];
                  v561 = (void *)v1022[275];
                  outlined init with take of VoiceMemo(v1022[271], (uint64_t)v29, (void (*)(void))type metadata accessor for TicketedShow);
                  OUTLINED_FUNCTION_10_30();
                  v562();
                  outlined init with copy of VoiceMemo((uint64_t)v29, (uint64_t)v561, (void (*)(void))type metadata accessor for TicketedShow);
                  OUTLINED_FUNCTION_30_27();
                  v563 = OUTLINED_FUNCTION_47_17();
                  OUTLINED_FUNCTION_28_19(v563);
                  OUTLINED_FUNCTION_55_19();
                  v564 = OUTLINED_FUNCTION_47_17();
                  OUTLINED_FUNCTION_28_19(v564);
                  v1115 = (void *)Logger.logObject.getter();
                  static os_log_type_t.info.getter();
                  v565 = OUTLINED_FUNCTION_8_17();
                  OUTLINED_FUNCTION_51_20(v565);
                  v566 = OUTLINED_FUNCTION_8_17();
                  OUTLINED_FUNCTION_56_13(v566);
                  v567 = OUTLINED_FUNCTION_141();
                  *(void *)(v567 + 16) = partial apply for implicit closure #43 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
                  *(void *)(v567 + 24) = v563;
                  v568 = (void *)OUTLINED_FUNCTION_141();
                  v568[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
                  v568[3] = v567;
                  v569 = OUTLINED_FUNCTION_8_17();
                  OUTLINED_FUNCTION_86_10(v569);
                  v570 = OUTLINED_FUNCTION_8_17();
                  OUTLINED_FUNCTION_149_1(v570);
                  v571 = OUTLINED_FUNCTION_141();
                  *(void *)(v571 + 16) = partial apply for implicit closure #44 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
                  *(void *)(v571 + 24) = v564;
                  v572 = (void *)OUTLINED_FUNCTION_141();
                  v572[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
                  v572[3] = v571;
                  v573 = OUTLINED_FUNCTION_49_18();
                  specialized static Array._adoptStorage(_:count:)(v573, 6);
                  *v574 = closure #1 in OSLogArguments.append(_:)partial apply;
                  v574[1] = v1022;
                  v574[2] = closure #1 in OSLogArguments.append(_:)partial apply;
                  v574[3] = v1017;
                  v574[4] = closure #1 in OSLogArguments.append(_:)partial apply;
                  v574[5] = v568;
                  v574[6] = closure #1 in OSLogArguments.append(_:)partial apply;
                  v574[7] = type metadata accessor for TicketedShow;
                  v574[8] = closure #1 in OSLogArguments.append(_:)partial apply;
                  v574[9] = v561;
                  v574[10] = closure #1 in OSLogArguments.append(_:)partial apply;
                  v574[11] = v572;
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_bridgeObjectRelease();
                  if (OUTLINED_FUNCTION_91_11())
                  {
                    specialized static UnsafeMutablePointer.allocate(capacity:)();
                    v576 = OUTLINED_FUNCTION_53_15();
                    OUTLINED_FUNCTION_23_20(v576);
                    v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                    v1144.id._object = v1022;
                    OUTLINED_FUNCTION_7_34();
                    if (!v29)
                    {
                      swift_release();
                      v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                      v1144.id._object = v1017;
                      OUTLINED_FUNCTION_2_25();
                      swift_release();
                      v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                      v1144.id._object = v568;
                      OUTLINED_FUNCTION_2_25();
                      swift_release();
                      v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                      v1144.id._object = type metadata accessor for TicketedShow;
                      OUTLINED_FUNCTION_2_25();
                      swift_release();
                      v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                      v1144.id._object = v561;
                      OUTLINED_FUNCTION_2_25();
                      swift_release();
                      v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                      v1144.id._object = v572;
                      OUTLINED_FUNCTION_2_25();
                      OUTLINED_FUNCTION_162_3();
                      OUTLINED_FUNCTION_125_7();
                      OUTLINED_FUNCTION_161_3();
                      OUTLINED_FUNCTION_85_14(v577, v578, v579, "Ticketed show found: %{sensitive}s ; %{sensitive}s");
                      OUTLINED_FUNCTION_50_24();
                      OUTLINED_FUNCTION_34();
                      specialized UnsafeMutablePointer.deallocate()();
                    }
                    goto LABEL_531;
                  }
                  v580 = v1022[341];
                  OUTLINED_FUNCTION_163_3();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();

                  v581 = OUTLINED_FUNCTION_58_14();
                  v582(v581);
                  uint64_t v1 = v1022;
                  OUTLINED_FUNCTION_44_20();
                  outlined init with copy of VoiceMemo(v1022[276], v580, (void (*)(void))type metadata accessor for TicketedShow);
                  OUTLINED_FUNCTION_148();
                  goto LABEL_301;
                }
              }
              swift_bridgeObjectRelease();
              v481 = v1023;
              TicketedTransportation.init(item:)((uint64_t)v481);
              OUTLINED_FUNCTION_32_21();
              if (v172)
              {
                v482 = v1022[277];

                OUTLINED_FUNCTION_124_7();
                OUTLINED_FUNCTION_130_4();
                uint64_t v203 = v482;
                uint64_t v204 = (uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?;
                goto LABEL_175;
              }
              OUTLINED_FUNCTION_151_2();
              uint64_t v29 = (uint8_t *)v1022[282];
              v494 = (void *)v1022[281];
              outlined init with take of VoiceMemo(v1022[277], (uint64_t)v29, (void (*)(void))type metadata accessor for TicketedTransportation);
              OUTLINED_FUNCTION_10_30();
              v495();
              outlined init with copy of VoiceMemo((uint64_t)v29, (uint64_t)v494, (void (*)(void))type metadata accessor for TicketedTransportation);
              OUTLINED_FUNCTION_30_27();
              v496 = OUTLINED_FUNCTION_47_17();
              OUTLINED_FUNCTION_28_19(v496);
              OUTLINED_FUNCTION_55_19();
              v497 = OUTLINED_FUNCTION_47_17();
              OUTLINED_FUNCTION_28_19(v497);
              logf = Logger.logObject.getter();
              v498 = static os_log_type_t.info.getter();
              v499 = OUTLINED_FUNCTION_8_17();
              OUTLINED_FUNCTION_51_20(v499);
              v500 = OUTLINED_FUNCTION_8_17();
              OUTLINED_FUNCTION_56_13(v500);
              v501 = OUTLINED_FUNCTION_141();
              *(void *)(v501 + 16) = partial apply for implicit closure #41 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
              *(void *)(v501 + 24) = v496;
              v502 = (void *)OUTLINED_FUNCTION_141();
              v502[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
              v502[3] = v501;
              v503 = OUTLINED_FUNCTION_8_17();
              OUTLINED_FUNCTION_86_10(v503);
              v504 = OUTLINED_FUNCTION_8_17();
              OUTLINED_FUNCTION_149_1(v504);
              v505 = OUTLINED_FUNCTION_141();
              *(void *)(v505 + 16) = partial apply for implicit closure #42 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
              *(void *)(v505 + 24) = v497;
              v506 = (void *)OUTLINED_FUNCTION_141();
              v506[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
              v506[3] = v505;
              v507 = OUTLINED_FUNCTION_49_18();
              specialized static Array._adoptStorage(_:count:)(v507, 6);
              *v508 = closure #1 in OSLogArguments.append(_:)partial apply;
              v508[1] = v1022;
              v508[2] = closure #1 in OSLogArguments.append(_:)partial apply;
              v508[3] = v1017;
              v508[4] = closure #1 in OSLogArguments.append(_:)partial apply;
              v508[5] = v502;
              v508[6] = closure #1 in OSLogArguments.append(_:)partial apply;
              v508[7] = type metadata accessor for TicketedTransportation;
              v508[8] = closure #1 in OSLogArguments.append(_:)partial apply;
              v508[9] = v494;
              v508[10] = closure #1 in OSLogArguments.append(_:)partial apply;
              v508[11] = v506;
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_bridgeObjectRelease();
              if (os_log_type_enabled(logf, v498))
              {
                specialized static UnsafeMutablePointer.allocate(capacity:)();
                v510 = OUTLINED_FUNCTION_53_15();
                OUTLINED_FUNCTION_23_20(v510);
                v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                v1144.id._object = v1022;
                OUTLINED_FUNCTION_7_34();
                if (!v29)
                {
                  swift_release();
                  v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                  v1144.id._object = v1017;
                  OUTLINED_FUNCTION_2_25();
                  swift_release();
                  v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                  v1144.id._object = v502;
                  OUTLINED_FUNCTION_2_25();
                  swift_release();
                  v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                  v1144.id._object = type metadata accessor for TicketedTransportation;
                  OUTLINED_FUNCTION_2_25();
                  swift_release();
                  v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                  v1144.id._object = v494;
                  OUTLINED_FUNCTION_2_25();
                  swift_release();
                  v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                  v1144.id._object = v506;
                  OUTLINED_FUNCTION_2_25();
                  OUTLINED_FUNCTION_100_10();
                  OUTLINED_FUNCTION_125_7();
                  OUTLINED_FUNCTION_85_14(&dword_257DC6000, logf, v511, "Ticketed transportation found: %{sensitive}s ; %{sensitive}s");
                  OUTLINED_FUNCTION_50_24();
                  OUTLINED_FUNCTION_34();
                  specialized UnsafeMutablePointer.deallocate()();
                }
                goto LABEL_531;
              }
              v549 = v1022[342];
              v233 = v1022[318];
              uint64_t v1 = v1022;
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();

              v550 = OUTLINED_FUNCTION_58_14();
              v551(v550);
              OUTLINED_FUNCTION_44_20();
              outlined init with copy of VoiceMemo(v1022[282], v549, (void (*)(void))type metadata accessor for TicketedTransportation);
              OUTLINED_FUNCTION_148();
LABEL_149:
              swift_storeEnumTagMultiPayload();
              OUTLINED_FUNCTION_142_3();
              specialized Array.append(_:)(v233);

              v285 = v1110;
LABEL_150:

              v254 = OUTLINED_FUNCTION_77_7();
              goto LABEL_151;
            }
          }
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_9();
          v286 = v1023;
          OUTLINED_FUNCTION_172_3();
          HotelReservation.init(item:answerAttributes:requireDates:)(v287, v288, v289, v290);
          OUTLINED_FUNCTION_32_21();
          if (v172)
          {
            v291 = v1022[295];

            OUTLINED_FUNCTION_124_7();
            OUTLINED_FUNCTION_130_4();
            uint64_t v203 = v291;
            uint64_t v204 = &demangling cache variable for type metadata for HotelReservation?;
            goto LABEL_175;
          }
          OUTLINED_FUNCTION_151_2();
          uint64_t v29 = (uint8_t *)v1022[300];
          v307 = (void *)v1022[299];
          outlined init with take of VoiceMemo(v1022[295], (uint64_t)v29, (void (*)(void))type metadata accessor for HotelReservation);
          OUTLINED_FUNCTION_10_30();
          v308();
          outlined init with copy of VoiceMemo((uint64_t)v29, (uint64_t)v307, (void (*)(void))type metadata accessor for HotelReservation);
          OUTLINED_FUNCTION_30_27();
          v309 = OUTLINED_FUNCTION_47_17();
          OUTLINED_FUNCTION_28_19(v309);
          OUTLINED_FUNCTION_55_19();
          v233 = OUTLINED_FUNCTION_47_17();
          OUTLINED_FUNCTION_28_19(v233);
          v310 = Logger.logObject.getter();
          static os_log_type_t.info.getter();
          v311 = OUTLINED_FUNCTION_8_17();
          OUTLINED_FUNCTION_51_20(v311);
          v312 = OUTLINED_FUNCTION_8_17();
          OUTLINED_FUNCTION_56_13(v312);
          v313 = OUTLINED_FUNCTION_141();
          *(void *)(v313 + 16) = partial apply for implicit closure #35 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
          *(void *)(v313 + 24) = v309;
          v314 = (void *)OUTLINED_FUNCTION_141();
          v314[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
          v314[3] = v313;
          v315 = OUTLINED_FUNCTION_8_17();
          OUTLINED_FUNCTION_86_10(v315);
          v316 = OUTLINED_FUNCTION_8_17();
          OUTLINED_FUNCTION_105_12(v316);
          v317 = OUTLINED_FUNCTION_141();
          *(void *)(v317 + 16) = partial apply for implicit closure #36 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
          *(void *)(v317 + 24) = v233;
          v318 = (void *)OUTLINED_FUNCTION_141();
          v318[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
          v318[3] = v317;
          v319 = OUTLINED_FUNCTION_49_18();
          specialized static Array._adoptStorage(_:count:)(v319, 6);
          *v320 = closure #1 in OSLogArguments.append(_:)partial apply;
          v320[1] = v1022;
          v320[2] = closure #1 in OSLogArguments.append(_:)partial apply;
          v320[3] = v1017;
          v320[4] = closure #1 in OSLogArguments.append(_:)partial apply;
          v320[5] = v314;
          v320[6] = closure #1 in OSLogArguments.append(_:)partial apply;
          v320[7] = type metadata accessor for HotelReservation;
          v320[8] = closure #1 in OSLogArguments.append(_:)partial apply;
          v320[9] = v307;
          v320[10] = closure #1 in OSLogArguments.append(_:)partial apply;
          v320[11] = v318;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          if (OUTLINED_FUNCTION_106_10())
          {
            OUTLINED_FUNCTION_191_2();
            v322 = OUTLINED_FUNCTION_53_15();
            OUTLINED_FUNCTION_23_20(v322);
            v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
            v1144.id._object = v1022;
            OUTLINED_FUNCTION_7_34();
            if (!v29)
            {
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v1017;
              OUTLINED_FUNCTION_2_25();
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v314;
              OUTLINED_FUNCTION_2_25();
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = type metadata accessor for HotelReservation;
              OUTLINED_FUNCTION_2_25();
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v307;
              OUTLINED_FUNCTION_2_25();
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v318;
              OUTLINED_FUNCTION_2_25();
              OUTLINED_FUNCTION_143_3();
              OUTLINED_FUNCTION_100_10();
              OUTLINED_FUNCTION_192_2();
              OUTLINED_FUNCTION_85_14(&dword_257DC6000, v310, v323, "Hotel reservation found: %{sensitive}s ; %{sensitive}s");
              OUTLINED_FUNCTION_50_24();
              OUTLINED_FUNCTION_34();
              specialized UnsafeMutablePointer.deallocate()();
            }
            goto LABEL_531;
          }
          v328 = v1022[345];
          OUTLINED_FUNCTION_173_3();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();

          OUTLINED_FUNCTION_24_28();
          v329();
          uint64_t v1 = v1022;
          OUTLINED_FUNCTION_44_20();
          outlined init with copy of VoiceMemo(v1022[300], v328, (void (*)(void))type metadata accessor for HotelReservation);
          OUTLINED_FUNCTION_148();
          goto LABEL_149;
        }
      }
      unint64_t v200 = v1[301];
      swift_bridgeObjectRelease();
      uint64_t v201 = v1023;
      FlightReservation.init(item:answerAttributes:)(v201, v1042, v200);
      OUTLINED_FUNCTION_32_21();
      if (v172)
      {
        uint64_t v202 = v1[301];

        OUTLINED_FUNCTION_124_7();
        OUTLINED_FUNCTION_130_4();
        uint64_t v203 = v202;
        uint64_t v204 = (uint64_t *)&demangling cache variable for type metadata for FlightReservation?;
        goto LABEL_175;
      }
      OUTLINED_FUNCTION_151_2();
      uint64_t v29 = (uint8_t *)v1[306];
      v230 = (void *)v1[305];
      outlined init with take of VoiceMemo(v1[301], (uint64_t)v29, (void (*)(void))type metadata accessor for FlightReservation);
      OUTLINED_FUNCTION_10_30();
      v231();
      outlined init with copy of VoiceMemo((uint64_t)v29, (uint64_t)v230, (void (*)(void))type metadata accessor for FlightReservation);
      OUTLINED_FUNCTION_30_27();
      v232 = OUTLINED_FUNCTION_47_17();
      OUTLINED_FUNCTION_28_19(v232);
      OUTLINED_FUNCTION_55_19();
      v233 = OUTLINED_FUNCTION_47_17();
      OUTLINED_FUNCTION_28_19(v233);
      v234 = Logger.logObject.getter();
      static os_log_type_t.info.getter();
      v235 = OUTLINED_FUNCTION_8_17();
      OUTLINED_FUNCTION_51_20(v235);
      v236 = OUTLINED_FUNCTION_8_17();
      OUTLINED_FUNCTION_56_13(v236);
      v237 = OUTLINED_FUNCTION_141();
      *(void *)(v237 + 16) = partial apply for implicit closure #33 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
      *(void *)(v237 + 24) = v232;
      v238 = (void *)OUTLINED_FUNCTION_141();
      v238[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      v238[3] = v237;
      v239 = OUTLINED_FUNCTION_8_17();
      OUTLINED_FUNCTION_86_10(v239);
      v240 = OUTLINED_FUNCTION_8_17();
      OUTLINED_FUNCTION_105_12(v240);
      v241 = OUTLINED_FUNCTION_141();
      *(void *)(v241 + 16) = partial apply for implicit closure #34 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
      *(void *)(v241 + 24) = v233;
      v242 = (void *)OUTLINED_FUNCTION_141();
      v242[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      v242[3] = v241;
      v243 = OUTLINED_FUNCTION_49_18();
      specialized static Array._adoptStorage(_:count:)(v243, 6);
      *v244 = closure #1 in OSLogArguments.append(_:)partial apply;
      v244[1] = v1;
      v244[2] = closure #1 in OSLogArguments.append(_:)partial apply;
      v244[3] = v1017;
      v244[4] = closure #1 in OSLogArguments.append(_:)partial apply;
      v244[5] = v238;
      v244[6] = closure #1 in OSLogArguments.append(_:)partial apply;
      v244[7] = type metadata accessor for FlightReservation;
      v244[8] = closure #1 in OSLogArguments.append(_:)partial apply;
      v244[9] = v230;
      v244[10] = closure #1 in OSLogArguments.append(_:)partial apply;
      v244[11] = v242;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (OUTLINED_FUNCTION_106_10())
      {
        OUTLINED_FUNCTION_191_2();
        v246 = OUTLINED_FUNCTION_53_15();
        OUTLINED_FUNCTION_23_20(v246);
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v1;
        OUTLINED_FUNCTION_7_34();
        if (!v29)
        {
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v1017;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v238;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = type metadata accessor for FlightReservation;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v230;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v242;
          OUTLINED_FUNCTION_2_25();
          OUTLINED_FUNCTION_143_3();
          OUTLINED_FUNCTION_100_10();
          OUTLINED_FUNCTION_192_2();
          OUTLINED_FUNCTION_85_14(&dword_257DC6000, v234, v247, "Flight reservation found: %{sensitive}s ; %{sensitive}s");
          OUTLINED_FUNCTION_50_24();
          OUTLINED_FUNCTION_34();
          specialized UnsafeMutablePointer.deallocate()();
        }
        goto LABEL_531;
      }
      v281 = v1022[346];
      OUTLINED_FUNCTION_173_3();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      OUTLINED_FUNCTION_24_28();
      v282();
      uint64_t v1 = v1022;
      OUTLINED_FUNCTION_44_20();
      v283 = v1022[306];
      v284 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]))
                    + 48);
      outlined init with copy of VoiceMemo(v283, v281, (void (*)(void))type metadata accessor for FlightReservation);
      *(void *)(v281 + v284) = default argument 1 of SearchResultItem.flightReservation(_:)();
      OUTLINED_FUNCTION_148();
      goto LABEL_149;
    }
    OUTLINED_FUNCTION_49_9();
    uint64_t v117 = (void *)(v116 + 1);
    if (v1128 == v116 + 1 && bundleId == (void *)0x800000025867C750
      || (OUTLINED_FUNCTION_73_11() & 1) != 0
      || (OUTLINED_FUNCTION_49_9(), OUTLINED_FUNCTION_89_7(), v172) && bundleId == (void *)0x80000002586800F0
      || (OUTLINED_FUNCTION_73_11() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v1086, (SEL *)&selRef_contentType);
      if (!v118) {
        goto LABEL_173;
      }
      uint64_t v119 = v118;
      OUTLINED_FUNCTION_49_9();
      if (v121 == v120 + 1 && v119 == 0x80000002586839F0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        _stringCompareWithSmolCheck(_:_:expecting:)();
        OUTLINED_FUNCTION_72_11();
        if ((v1011 & 1) == 0) {
          goto LABEL_173;
        }
      }
      uint64_t v205 = v1022[192];
      OUTLINED_FUNCTION_10_30();
      v206();
      uint64_t v207 = OUTLINED_FUNCTION_48_14();
      *(void *)(v207 + 16) = v1086;
      uint64_t v208 = OUTLINED_FUNCTION_48_14();
      *(void *)(v208 + 16) = v1086;
      uint64_t v209 = OUTLINED_FUNCTION_141();
      *(void *)(v209 + 16) = v205;
      *(void *)(v209 + 24) = v1086;
      v1101 = OUTLINED_FUNCTION_141();
      *(void *)(v1101 + 16) = v205;
      *(void *)(v1101 + 24) = v1086;
      uint64_t v210 = v1086;
      swift_retain_n();
      v1043 = v210;
      v1111 = Logger.logObject.getter();
      v1088 = static os_log_type_t.debug.getter();
      uint64_t v211 = OUTLINED_FUNCTION_8_17();
      *(unsigned char *)(v211 + 16) = 32;
      v1056 = (void *)OUTLINED_FUNCTION_8_17();
      OUTLINED_FUNCTION_41_22((uint64_t)v1056);
      unint64_t v212 = OUTLINED_FUNCTION_141();
      *(void *)(v212 + 16) = partial apply for implicit closure #52 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
      *(void *)(v212 + 24) = v207;
      uint64_t v213 = OUTLINED_FUNCTION_141();
      *(void *)(v213 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      *(void *)(v213 + 24) = v212;
      uint64_t v214 = v213;
      v1130 = (void *)v213;
      v1048 = (unsigned char *)OUTLINED_FUNCTION_8_17();
      v1048[16] = 32;
      logc = (os_log_t)OUTLINED_FUNCTION_8_17();
      LOBYTE(logc[2].isa) = 8;
      v215 = OUTLINED_FUNCTION_141();
      *(void *)(v215 + 16) = partial apply for implicit closure #53 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
      *(void *)(v215 + 24) = v208;
      uint64_t v216 = (void *)OUTLINED_FUNCTION_141();
      v216[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      v216[3] = v215;
      uint64_t v217 = OUTLINED_FUNCTION_8_17();
      *(unsigned char *)(v217 + 16) = 32;
      uint64_t v218 = (void *)v217;
      v1092 = (os_log_t)OUTLINED_FUNCTION_8_17();
      LOBYTE(v1092[2].isa) = 8;
      v219 = OUTLINED_FUNCTION_141();
      *(void *)(v219 + 16) = partial apply for implicit closure #54 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
      *(void *)(v219 + 24) = v209;
      v220 = (void *)OUTLINED_FUNCTION_141();
      v220[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      v220[3] = v219;
      v221 = (unsigned char *)OUTLINED_FUNCTION_8_17();
      v221[16] = 32;
      v222 = (void *)OUTLINED_FUNCTION_8_17();
      OUTLINED_FUNCTION_41_22((uint64_t)v222);
      v223 = OUTLINED_FUNCTION_141();
      *(void *)(v223 + 16) = partial apply for implicit closure #55 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
      *(void *)(v223 + 24) = v1101;
      v224 = (void *)OUTLINED_FUNCTION_141();
      v224[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      v224[3] = v223;
      v225 = OUTLINED_FUNCTION_127_5();
      specialized static Array._adoptStorage(_:count:)(v225, 12);
      *v226 = closure #1 in OSLogArguments.append(_:)partial apply;
      v226[1] = v211;
      v226[2] = closure #1 in OSLogArguments.append(_:)partial apply;
      v226[3] = v1056;
      v226[4] = closure #1 in OSLogArguments.append(_:)partial apply;
      v226[5] = v214;
      v226[6] = closure #1 in OSLogArguments.append(_:)partial apply;
      v226[7] = v1048;
      v226[8] = closure #1 in OSLogArguments.append(_:)partial apply;
      v226[9] = logc;
      v226[10] = closure #1 in OSLogArguments.append(_:)partial apply;
      v226[11] = v216;
      v226[12] = closure #1 in OSLogArguments.append(_:)partial apply;
      v226[13] = v218;
      v226[14] = closure #1 in OSLogArguments.append(_:)partial apply;
      v226[15] = v1092;
      v226[16] = closure #1 in OSLogArguments.append(_:)partial apply;
      v226[17] = v220;
      v226[18] = closure #1 in OSLogArguments.append(_:)partial apply;
      v226[19] = v221;
      v226[20] = closure #1 in OSLogArguments.append(_:)partial apply;
      v226[21] = v222;
      v226[22] = closure #1 in OSLogArguments.append(_:)partial apply;
      v226[23] = v224;
      v1102 = (void *)v211;
      v227 = v1056;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v1111, v1088))
      {
        v228 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
        v229 = swift_slowAlloc();
        v1146 = 0;
        v1147 = v229;
        v1037 = v228;
        *(_WORD *)v228 = 1026;
        uint64_t v29 = v228 + 2;
        v1145 = v29;
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v1102;
        OUTLINED_FUNCTION_7_34();
        if (!v29)
        {
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v1056;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v1130;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v1048;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = logc;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v216;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v218;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v1092;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v220;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v221;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v222;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v224;
          OUTLINED_FUNCTION_2_25();
          OUTLINED_FUNCTION_143_3();
          swift_release();
          _os_log_impl(&dword_257DC6000, v1111, v1088, "Email found: %s, subject: %s, authors:%s, recipients: %s", v1037, 0x2Au);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_34();
          specialized UnsafeMutablePointer.deallocate()();
        }
        goto LABEL_531;
      }
      uint64_t v1 = v1022;
      v248 = v1022[318];
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      OUTLINED_FUNCTION_180_3();
      v249 = OUTLINED_FUNCTION_105_4();
      v250(v249);
      OUTLINED_FUNCTION_54_16();
      v251 = v1022[252];
      static LocalIndexClient.emailDocument(from:)();
      outlined init with copy of VoiceMemo(v251, (uint64_t)v1092, (void (*)(void))type metadata accessor for EmailDocument);
      OUTLINED_FUNCTION_19_0();
      swift_storeEnumTagMultiPayload();
      SearchResult.init(_:csItem:)((uint64_t)v1092, (uint64_t)v1023, v248);
      v252 = v1023;
      OUTLINED_FUNCTION_103_11();
      v253 = v1043;
      goto LABEL_144;
    }
    OUTLINED_FUNCTION_101_10();
    if (v172 && bundleId == (void *)0x800000025867FE70 || (OUTLINED_FUNCTION_73_11() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v324 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v1086, (SEL *)&selRef_contentType);
      if (!v325) {
        goto LABEL_173;
      }
      if (v324 == 0x6D2E63696C627570 && v325 == 0xEE00656761737365)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        _stringCompareWithSmolCheck(_:_:expecting:)();
        OUTLINED_FUNCTION_72_11();
        if ((v1011 & 1) == 0) {
          goto LABEL_173;
        }
      }
      v361 = OUTLINED_FUNCTION_102_7();
      v362 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v364 = v363;

      v365 = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v1086, (SEL *)&selRef_attachmentNames);
      if (!v365) {
        v365 = specialized static Array._allocateUninitialized(_:)(0);
      }
      specialized Dictionary.subscript.setter(v365, v362, v364);
      v366 = OUTLINED_FUNCTION_102_7();
      v367 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v369 = v368;

      if (objc_msgSend(v1086, sel_attributeForKey_, v1005))
      {
        _bridgeAnyObjectToAny(_:)();
        v370 = (uint64_t)v1006;
        swift_unknownObjectRelease();
      }
      else
      {
        v370 = (uint64_t)v1006;
        *v1006 = 0u;
        v1006[1] = 0u;
      }
      OUTLINED_FUNCTION_153_3(v370);
      if (v1022[129])
      {
        swift_dynamicCast();
        OUTLINED_FUNCTION_138_2();
        v1063 = v372;
        if (v172) {
          v373 = 0;
        }
        else {
          v373 = v371;
        }
        v1058 = v373;
      }
      else
      {
        OUTLINED_FUNCTION_158_3();
        v1063 = 0;
        v1058 = 0;
      }
      if (objc_msgSend(v1086, sel_attributeForKey_, v1004))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        *v1007 = 0u;
        v1007[1] = 0u;
      }
      OUTLINED_FUNCTION_153_3((uint64_t)v1007);
      if (v1022[109])
      {
        swift_dynamicCast();
        OUTLINED_FUNCTION_138_2();
        v1050 = v375;
        if (v172) {
          v376 = 0;
        }
        else {
          v376 = v374;
        }
        v1046 = v376;
      }
      else
      {
        OUTLINED_FUNCTION_158_3();
        v1050 = 0;
        v1046 = 0;
      }
      v377 = (void *)OUTLINED_FUNCTION_118_7();
      v378 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v377, (SEL *)&selRef_displayName);
      v380 = v379;
      outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v1003, (SEL *)&selRef_contentSnippet);
      OUTLINED_FUNCTION_152_3();
      v381 = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v1003, (SEL *)&selRef_authorNames);
      if (!v381) {
        v381 = specialized static Array._allocateUninitialized(_:)(0);
      }
      v1044 = v381;
      v382 = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v1086, (SEL *)&selRef_recipientNames);
      if (!v382) {
        v382 = specialized static Array._allocateUninitialized(_:)(0);
      }
      v1040 = v382;
      v383 = objc_msgSend(v1086, sel_contentCreationDate);
      v1132 = v367;
      if (v383)
      {
        v384 = v383;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        v385 = 0;
      }
      else
      {
        v385 = 1;
      }
      v386 = v1022[250];
      v387 = type metadata accessor for Date();
      v388 = 1;
      __swift_storeEnumTagSinglePayload(v386, v385, 1, v387);
      v389 = objc_msgSend(v1086, sel_URL);
      v1104 = v378;
      v1094 = v380;
      if (v389)
      {
        v390 = v389;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        v388 = 0;
      }
      v391 = v1022[250];
      v392 = v1022[238];
      v393 = v1022[230];
      v394 = type metadata accessor for URL();
      __swift_storeEnumTagSinglePayload(v392, v388, 1, v394);
      v395 = specialized static Array._allocateUninitialized(_:)(0);
      v396 = type metadata accessor for PartialExtractedAttributes(0);
      memset(&v1144, 0, 40);
      __swift_storeEnumTagSinglePayload(v393, 1, 1, v396);
      v397 = default argument 11 of MobileSMSDocument.init(id:chatId:displayName:body:from:to:date:contentURL:photoAttachments:serviceName:chatName:chatParticipants:chatMessages:dataDetectorResults:extractedEventsLLMConsumableDescription:partialExtractedAttributes:csItem:)();
      v398 = default argument 12 of MobileSMSDocument.init(id:chatId:displayName:body:from:to:date:contentURL:photoAttachments:serviceName:chatName:chatParticipants:chatMessages:dataDetectorResults:extractedEventsLLMConsumableDescription:partialExtractedAttributes:csItem:)();
      v399 = v1023;
      MobileSMSDocument.init(id:chatId:displayName:body:from:to:date:contentURL:photoAttachments:serviceName:chatName:chatParticipants:chatMessages:dataDetectorResults:extractedEventsLLMConsumableDescription:partialExtractedAttributes:csItem:)(v1132, v369, v1063, v1058, v1104, (uint64_t)v1094, 0x265435000, (uint64_t)&demangling cache variable for type metadata for Any?, v1044, v1040, v391, v392, v395, v1050, v1046, 0, 0, v397, v398,
        (uint64_t)&v1144,
        0,
        0,
        v393,
        (uint64_t)v1023,
        v962,
        v963,
        v964,
        v965,
        v966,
        v967,
        v968,
        v969,
        v970,
        (uint64_t)v971,
        (uint64_t)v972,
        v973);
      OUTLINED_FUNCTION_10_30();
      v400();
      v401 = OUTLINED_FUNCTION_48_14();
      *(void *)(v401 + 16) = v399;
      v402 = v399;
      v403 = Logger.logObject.getter();
      v404 = static os_log_type_t.info.getter();
      v405 = (unsigned char *)OUTLINED_FUNCTION_8_17();
      v405[16] = 32;
      v406 = (void *)OUTLINED_FUNCTION_8_17();
      OUTLINED_FUNCTION_41_22((uint64_t)v406);
      v407 = OUTLINED_FUNCTION_141();
      *(void *)(v407 + 16) = partial apply for implicit closure #59 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
      *(void *)(v407 + 24) = v401;
      v408 = (void *)OUTLINED_FUNCTION_141();
      v408[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      v408[3] = v407;
      v409 = OUTLINED_FUNCTION_33_21();
      uint64_t v29 = (uint8_t *)specialized static Array._adoptStorage(_:count:)(v409, 3);
      *v410 = closure #1 in OSLogArguments.append(_:)partial apply;
      v410[1] = v405;
      v410[2] = closure #1 in OSLogArguments.append(_:)partial apply;
      v410[3] = v406;
      v410[4] = closure #1 in OSLogArguments.append(_:)partial apply;
      v410[5] = v408;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v403, v404))
      {
        v411 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
        v412 = OUTLINED_FUNCTION_13_1();
        v1146 = 0;
        v1147 = v412;
        OUTLINED_FUNCTION_35_24(v411);
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v405;
        OUTLINED_FUNCTION_7_34();
        if (!v29)
        {
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v406;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v408;
          OUTLINED_FUNCTION_2_25();
          OUTLINED_FUNCTION_100_10();
          _os_log_impl(&dword_257DC6000, v403, v404, "Message found: %s", v411, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_34();
          specialized UnsafeMutablePointer.deallocate()();
        }
        goto LABEL_531;
      }
      uint64_t v1 = v1022;
      v413 = v1022[332];
      swift_release();
      swift_release();
      swift_release();

      OUTLINED_FUNCTION_56_1();
      OUTLINED_FUNCTION_19_26();
      v414();
      OUTLINED_FUNCTION_44_20();
      outlined init with copy of VoiceMemo(v1022[251], (uint64_t)v403, (void (*)(void))type metadata accessor for MobileSMSDocument);
      OUTLINED_FUNCTION_148();
      swift_storeEnumTagMultiPayload();
      SearchResult.init(_:csItem:)((uint64_t)v403, (uint64_t)v402, v413);
      v415 = v402;
      specialized Array.append(_:)(v413);

      int v137 = OUTLINED_FUNCTION_77_7();
      goto LABEL_231;
    }
    OUTLINED_FUNCTION_101_10();
    loge = (os_log_t)v83;
    if (v172 && bundleId == (void *)0x800000025867FE10 || (OUTLINED_FUNCTION_73_11() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v350 = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v1086, (SEL *)&selRef_authorNames);
      if (!v350) {
        v350 = specialized static Array._allocateUninitialized(_:)(0);
      }
      v351 = v350;
      v352 = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v1086, (SEL *)&selRef_recipientNames);
      if (!v352) {
        v352 = specialized static Array._allocateUninitialized(_:)(0);
      }
      v353 = v352;
      v354 = specialized Set.init<A>(_:)(v351);
      v355 = specialized Set.init<A>(_:)(v353);
      v356 = OUTLINED_FUNCTION_102_7();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v357 = (void *)OUTLINED_FUNCTION_118_7();
      outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v357, (SEL *)&selRef_title);
      outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v356, (SEL *)&selRef_contentDescription);
      v358 = objc_msgSend(v356, sel_startDate);
      if (v358)
      {
        v359 = v358;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        v360 = 0;
      }
      else
      {
        v360 = 1;
      }
      v420 = v1022[249];
      v421 = type metadata accessor for Date();
      v422 = 1;
      __swift_storeEnumTagSinglePayload(v420, v360, 1, v421);
      v423 = objc_msgSend(v1086, sel_endDate);
      if (v423)
      {
        v424 = v423;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        v422 = 0;
      }
      v425 = v1022[249];
      v426 = v1022[248];
      v427 = v1022[229];
      v428 = v1022[228];
      __swift_storeEnumTagSinglePayload(v426, v422, 1, v421);
      v429 = (void *)outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v1086, (SEL *)&selRef_namedLocation);
      v431 = v430;
      v432 = specialized Array.init<A>(_:)(v354);
      v433 = specialized Array.init<A>(_:)(v355);
      v434 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v1086, (SEL *)&selRef_comment);
      memset(&v1144, 0, 40);
      v953 = v435;
      v951 = v434;
      v436 = OUTLINED_FUNCTION_70_12();
      CalendarEvent.init(id:title:contentDescription:startDate:endDate:locationName:organizerNames:participantNames:notes:dataDetectorResults:)(v436, v437, v438, v439, v440, v441, v425, v426, v442, (uint64_t)v429, (uint64_t)v431, v432, v433, v951, v953, (__n128 *)&v1144);
      OUTLINED_FUNCTION_10_30();
      v443();
      outlined init with copy of VoiceMemo(v427, v428, (void (*)(void))type metadata accessor for CalendarEvent);
      swift_allocObject();
      OUTLINED_FUNCTION_189_1();
      outlined init with take of VoiceMemo(v428, v444, (void (*)(void))type metadata accessor for CalendarEvent);
      v445 = Logger.logObject.getter();
      v446 = static os_log_type_t.debug.getter();
      v447 = OUTLINED_FUNCTION_8_17();
      OUTLINED_FUNCTION_43_22(v447);
      v448 = OUTLINED_FUNCTION_8_17();
      OUTLINED_FUNCTION_38_20(v448);
      v449 = OUTLINED_FUNCTION_141();
      *(void *)(v449 + 16) = partial apply for implicit closure #62 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
      *(void *)(v449 + 24) = v1086;
      v450 = (void *)OUTLINED_FUNCTION_141();
      v450[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      v450[3] = v449;
      v451 = OUTLINED_FUNCTION_33_21();
      uint64_t v29 = (uint8_t *)specialized static Array._adoptStorage(_:count:)(v451, 3);
      *v452 = closure #1 in OSLogArguments.append(_:)partial apply;
      v452[1] = v431;
      v452[2] = closure #1 in OSLogArguments.append(_:)partial apply;
      v452[3] = v429;
      v452[4] = closure #1 in OSLogArguments.append(_:)partial apply;
      v452[5] = v450;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (OUTLINED_FUNCTION_65_12())
      {
        specialized static UnsafeMutablePointer.allocate(capacity:)();
        v453 = OUTLINED_FUNCTION_39_20();
        OUTLINED_FUNCTION_13_33(v453);
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v431;
        OUTLINED_FUNCTION_7_34();
        if (!v29)
        {
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v429;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v450;
          OUTLINED_FUNCTION_2_25();
          OUTLINED_FUNCTION_114_9();
          OUTLINED_FUNCTION_66_15(&dword_257DC6000, v445, v446, "Calendar event found: %s");
          OUTLINED_FUNCTION_121_0();
          OUTLINED_FUNCTION_34();
          specialized UnsafeMutablePointer.deallocate()();
        }
        goto LABEL_531;
      }
      v454 = v1022[331];
      swift_release();
      swift_release();
      swift_release();

      OUTLINED_FUNCTION_19_26();
      v455();
      v456 = v1023;
      OUTLINED_FUNCTION_54_16();
      outlined init with copy of VoiceMemo(v1022[229], (uint64_t)v445, (void (*)(void))type metadata accessor for CalendarEvent);
      OUTLINED_FUNCTION_19_0();
      goto LABEL_245;
    }
    OUTLINED_FUNCTION_49_9();
    v478 = v477 + 2;
    if (v1128 == v477 + 2 && bundleId == (void *)0x800000025867FED0 || (OUTLINED_FUNCTION_73_11() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if (objc_msgSend(v1086, sel_attributeForKey_, v1001))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        *v1002 = 0u;
        v1002[1] = 0u;
      }
      OUTLINED_FUNCTION_153_3((uint64_t)v1002);
      if (!v1022[157])
      {
        OUTLINED_FUNCTION_158_3();
LABEL_267:
        swift_bridgeObjectRelease();
        v483 = 0;
        v484 = 0;
LABEL_268:
        v1133 = v483;
        v486 = OUTLINED_FUNCTION_102_7();
        v1113 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v1105 = v487;

        v1095 = (os_log_t)outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v1086, (SEL *)&selRef_title);
        v1083 = v488;
        v1077 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v1086, (SEL *)&selRef_contentSnippet);
        v1069 = v489;
        v490 = objc_msgSend(v1086, sel_contentCreationDate);
        if (v490)
        {
          v491 = v490;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v492 = v1022;
          v493 = 0;
        }
        else
        {
          v492 = v1022;
          v493 = 1;
        }
        v530 = v492[247];
        v531 = type metadata accessor for Date();
        v532 = 1;
        OUTLINED_FUNCTION_121_7(v530, v493);
        v533 = objc_msgSend(v1086, sel_lastUsedDate);
        if (v533)
        {
          v534 = v533;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v532 = 0;
        }
        v535 = v492[247];
        v536 = (void *)v492[246];
        v537 = (void *)v492[225];
        v538 = v492[224];
        OUTLINED_FUNCTION_121_7((uint64_t)v536, v532);
        NoteDocument.init(id:title:contentSnippet:folderName:creationDate:lastUsedDate:)(v1113, v1105, (uint64_t)v1095, v1083, v1077, v1069, v1133, v484, v537, v535, (uint64_t)v536);
        OUTLINED_FUNCTION_10_30();
        v539();
        outlined init with copy of VoiceMemo((uint64_t)v537, v538, (void (*)(void))type metadata accessor for NoteDocument);
        OUTLINED_FUNCTION_78_11();
        swift_allocObject();
        OUTLINED_FUNCTION_188_1();
        outlined init with take of VoiceMemo(v538, v540, (void (*)(void))type metadata accessor for NoteDocument);
        v445 = Logger.logObject.getter();
        v541 = static os_log_type_t.debug.getter();
        v542 = OUTLINED_FUNCTION_8_17();
        OUTLINED_FUNCTION_43_22(v542);
        v543 = OUTLINED_FUNCTION_8_17();
        OUTLINED_FUNCTION_38_20(v543);
        v544 = OUTLINED_FUNCTION_141();
        *(void *)(v544 + 16) = partial apply for implicit closure #63 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
        *(void *)(v544 + 24) = v531;
        v450 = (void *)OUTLINED_FUNCTION_141();
        v450[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        v450[3] = v544;
        v545 = OUTLINED_FUNCTION_33_21();
        uint64_t v29 = (uint8_t *)specialized static Array._adoptStorage(_:count:)(v545, 3);
        *v546 = closure #1 in OSLogArguments.append(_:)partial apply;
        v546[1] = v536;
        v546[2] = closure #1 in OSLogArguments.append(_:)partial apply;
        v546[3] = v532;
        v546[4] = closure #1 in OSLogArguments.append(_:)partial apply;
        v546[5] = v450;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        if (OUTLINED_FUNCTION_65_12())
        {
          specialized static UnsafeMutablePointer.allocate(capacity:)();
          v547 = OUTLINED_FUNCTION_39_20();
          OUTLINED_FUNCTION_13_33(v547);
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v536;
          OUTLINED_FUNCTION_7_34();
          if (!v29)
          {
            swift_release();
            v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
            v1144.id._object = (void *)v532;
            OUTLINED_FUNCTION_2_25();
            swift_release();
            v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
            v1144.id._object = v450;
            OUTLINED_FUNCTION_2_25();
            OUTLINED_FUNCTION_114_9();
            OUTLINED_FUNCTION_66_15(&dword_257DC6000, v445, v541, "Note found: %s");
            OUTLINED_FUNCTION_121_0();
            OUTLINED_FUNCTION_34();
            specialized UnsafeMutablePointer.deallocate()();
          }
          goto LABEL_531;
        }
        v454 = v492[330];
        swift_release();
        swift_release();
        swift_release();

        OUTLINED_FUNCTION_19_26();
        v548();
        uint64_t v1 = v492;
        v456 = v1023;
        OUTLINED_FUNCTION_54_16();
        outlined init with copy of VoiceMemo(v492[225], (uint64_t)v445, (void (*)(void))type metadata accessor for NoteDocument);
        OUTLINED_FUNCTION_19_0();
LABEL_245:
        swift_storeEnumTagMultiPayload();
        SearchResult.init(_:csItem:)((uint64_t)v445, (uint64_t)v456, v454);
        v457 = v456;
        OUTLINED_FUNCTION_103_11();

        v458 = OUTLINED_FUNCTION_78_0();
        outlined destroy of VoiceMemo(v458, v459);
        outlined destroy of EagerResolutionService?(v1018, (uint64_t *)&demangling cache variable for type metadata for Any?);
        OUTLINED_FUNCTION_170_3();
        goto LABEL_176;
      }
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_267;
      }
      v483 = v1022[164];
      v484 = v1022[165];
      OUTLINED_FUNCTION_49_9();
      if ((v483 != v485 - 3 || v484 != 0x80000002586839D0)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        goto LABEL_268;
      }
      swift_bridgeObjectRelease();
LABEL_173:

LABEL_174:
      outlined destroy of EagerResolutionService?(v1018, (uint64_t *)&demangling cache variable for type metadata for Any?);
      uint64_t v203 = v1032;
      uint64_t v204 = (uint64_t *)&demangling cache variable for type metadata for Any?;
      goto LABEL_175;
    }
    OUTLINED_FUNCTION_49_9();
    OUTLINED_FUNCTION_89_7();
    if (v172 && bundleId == (void *)0x800000025867FF10
      || (OUTLINED_FUNCTION_174_3() & 1) != 0
      || (OUTLINED_FUNCTION_49_9(), OUTLINED_FUNCTION_89_7(), v172) && bundleId == (void *)0x800000025867FF40
      || (OUTLINED_FUNCTION_174_3() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v512 = OUTLINED_FUNCTION_102_7();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v513._countAndFlagsBits = OUTLINED_FUNCTION_78_0();
      FileDocument.init(id:item:)(v513, (CSSearchableItem)v1023);
      countAndFlagsBits = v1144.id._countAndFlagsBits;
      object = v1144.id._object;
      v516 = (void *)v1144.name.value._countAndFlagsBits;
      OUTLINED_FUNCTION_10_30();
      v517();
      v518 = (void *)swift_allocObject();
      v1134 = countAndFlagsBits;
      v518[2] = countAndFlagsBits;
      v518[3] = object;
      v518[4] = v516;
      v519 = v1023;
      swift_bridgeObjectRetain();
      v1114 = v516;
      v520 = Logger.logObject.getter();
      v521 = static os_log_type_t.debug.getter();
      v522 = (unsigned char *)OUTLINED_FUNCTION_8_17();
      v522[16] = 32;
      v523 = (void *)OUTLINED_FUNCTION_8_17();
      OUTLINED_FUNCTION_41_22((uint64_t)v523);
      v524 = OUTLINED_FUNCTION_141();
      *(void *)(v524 + 16) = partial apply for implicit closure #64 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
      *(void *)(v524 + 24) = v518;
      v525 = (void *)OUTLINED_FUNCTION_141();
      v525[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      v525[3] = v524;
      v526 = OUTLINED_FUNCTION_33_21();
      uint64_t v29 = (uint8_t *)specialized static Array._adoptStorage(_:count:)(v526, 3);
      *v527 = closure #1 in OSLogArguments.append(_:)partial apply;
      v527[1] = v522;
      v527[2] = closure #1 in OSLogArguments.append(_:)partial apply;
      v527[3] = v523;
      v527[4] = closure #1 in OSLogArguments.append(_:)partial apply;
      v527[5] = v525;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v520, v521))
      {
        v528 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
        v529 = OUTLINED_FUNCTION_13_1();
        v1146 = 0;
        v1147 = v529;
        OUTLINED_FUNCTION_35_24(v528);
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v522;
        OUTLINED_FUNCTION_7_34();
        if (!v29)
        {
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v523;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v525;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          _os_log_impl(&dword_257DC6000, v520, v521, "File SearchResult found: %s", v528, 0xCu);
          OUTLINED_FUNCTION_182_3();
          OUTLINED_FUNCTION_34();
          specialized UnsafeMutablePointer.deallocate()();
        }
        goto LABEL_531;
      }
      v552 = v1022[329];
      v553 = v1022[318];
      swift_release();
      swift_release();
      swift_release();

      ((void (*)(uint64_t, uint64_t))loge)(v552, v553);
      v554 = v1022[311];
      *(void *)v1022[308] = v1134;
      *(void *)(v1000 + 8) = object;
      *(void *)(v1000 + 16) = v1114;
      swift_storeEnumTagMultiPayload();
      v555 = OUTLINED_FUNCTION_19_0();
      SearchResult.init(_:csItem:)(v555, v556, v557);
      v558 = v519;
      specialized Array.append(_:)(v554);

      goto LABEL_152;
    }
    OUTLINED_FUNCTION_49_9();
    OUTLINED_FUNCTION_89_7();
    if (v172 && (OUTLINED_FUNCTION_113_10(), v172) || (OUTLINED_FUNCTION_46_19() & 1) != 0)
    {
      v603 = v1022[309];
      v604 = v1022[221];
      swift_bridgeObjectRelease();
      static LocalIndexClient.walletDocument(from:)();
      OUTLINED_FUNCTION_53_2(v604, 1, v603);
      if (v172)
      {
        uint64_t v1 = v1022;
        v605 = v1022[221];

        outlined destroy of EagerResolutionService?(v1018, (uint64_t *)&demangling cache variable for type metadata for Any?);
        OUTLINED_FUNCTION_131_5();
        uint64_t v203 = v605;
        uint64_t v204 = &demangling cache variable for type metadata for SearchResult?;
        goto LABEL_175;
      }
      uint64_t v1 = v1022;
      v609 = v1022[311];
      v610 = v1022[310];
      outlined init with take of VoiceMemo(v1022[221], v610, (void (*)(void))type metadata accessor for SearchResult);
      outlined init with copy of VoiceMemo(v610, v609, (void (*)(void))type metadata accessor for SearchResult);
      specialized Array.append(_:)(v609);

      int v137 = OUTLINED_FUNCTION_56_1();
      goto LABEL_231;
    }
    OUTLINED_FUNCTION_89_7();
    if (v172 && (OUTLINED_FUNCTION_113_10(), v172) || (OUTLINED_FUNCTION_46_19() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v631 = objc_msgSend(v1023, sel_uniqueIdentifier);
      v632 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v634 = v633;

      v635 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v1086, (SEL *)&selRef_displayName);
      v637 = v636;
      v638 = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v1086, (SEL *)&selRef_phoneNumbers);
      if (!v638) {
        v638 = specialized static Array._allocateUninitialized(_:)(0);
      }
      v639 = (void *)v638;
      v640 = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v1086, (SEL *)&selRef_emailAddresses);
      if (!v640) {
        v640 = specialized static Array._allocateUninitialized(_:)(0);
      }
      v641._rawValue = (void *)v640;
      v642 = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v1086, (SEL *)&selRef_authorAddresses);
      if (!v642) {
        v642 = specialized static Array._allocateUninitialized(_:)(0);
      }
      v643._rawValue = (void *)v642;
      v644 = specialized static Array._allocateUninitialized(_:)(0);
      v645._countAndFlagsBits = v632;
      v645._object = v634;
      v646.value._countAndFlagsBits = v635;
      v646.value._object = v637;
      Contact.init(id:name:phoneNumbers:emailAddresses:physicalAddresses:dates:birthday:)(&v1144, v645, v646, (Swift::OpaquePointer)v639, v641, v643, (Swift::OpaquePointer)v644, (Swift::String_optional)0);
      memcpy(__dst, &v1144, 0x50uLL);
      v647 = v1144.id._countAndFlagsBits;
      v648 = v1144.id._object;
      v1106 = v1144.name.value._countAndFlagsBits;
      v1096 = (os_log_t)v1144.name.value._object;
      v1135 = *(Swift::String *)&v1144.phoneNumbers._rawValue;
      *(_OWORD *)v1118 = *(_OWORD *)&v1144.physicalAddresses._rawValue;
      v1084 = v1144.birthday.value._countAndFlagsBits;
      v1078 = v1144.birthday.value._object;
      OUTLINED_FUNCTION_10_30();
      v649();
      v650 = swift_allocObject();
      memcpy((void *)(v650 + 16), __dst, 0x50uLL);
      outlined retain of Contact((uint64_t)__dst);
      v651 = Logger.logObject.getter();
      v652 = static os_log_type_t.debug.getter();
      v653 = OUTLINED_FUNCTION_8_17();
      OUTLINED_FUNCTION_43_22(v653);
      v654 = OUTLINED_FUNCTION_8_17();
      OUTLINED_FUNCTION_38_20(v654);
      v655 = OUTLINED_FUNCTION_141();
      *(void *)(v655 + 16) = partial apply for implicit closure #68 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
      *(void *)(v655 + 24) = v650;
      v656 = (void *)OUTLINED_FUNCTION_141();
      v656[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      v656[3] = v655;
      v657 = OUTLINED_FUNCTION_33_21();
      uint64_t v29 = (uint8_t *)specialized static Array._adoptStorage(_:count:)(v657, 3);
      *v658 = closure #1 in OSLogArguments.append(_:)partial apply;
      v658[1] = v639;
      v658[2] = closure #1 in OSLogArguments.append(_:)partial apply;
      v658[3] = v637;
      v658[4] = closure #1 in OSLogArguments.append(_:)partial apply;
      v658[5] = v656;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (OUTLINED_FUNCTION_65_12())
      {
        specialized static UnsafeMutablePointer.allocate(capacity:)();
        v659 = OUTLINED_FUNCTION_39_20();
        OUTLINED_FUNCTION_13_33(v659);
        v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
        v1144.id._object = v639;
        OUTLINED_FUNCTION_7_34();
        if (!v29)
        {
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v637;
          OUTLINED_FUNCTION_2_25();
          swift_release();
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v656;
          OUTLINED_FUNCTION_2_25();
          OUTLINED_FUNCTION_110_8();
          OUTLINED_FUNCTION_66_15(&dword_257DC6000, v651, v652, "Contact found: %s");
          OUTLINED_FUNCTION_121_0();
          OUTLINED_FUNCTION_34();
          specialized UnsafeMutablePointer.deallocate()();
        }
        goto LABEL_531;
      }
      OUTLINED_FUNCTION_90_11();
      swift_release();
      swift_release();

      v663 = OUTLINED_FUNCTION_36_22();
      v664(v663);
      v665 = v1022[311];
      v666 = (uint64_t *)v1022[308];
      *v666 = v647;
      *(void *)(v1000 + 8) = v648;
      uint64_t v1 = v1022;
      *(void *)(v1000 + 16) = v1106;
      *(void *)(v1000 + 24) = v1096;
      *(Swift::String *)(v1000 + 32) = v1135;
      *(_OWORD *)(v1000 + 48) = *(_OWORD *)v1118;
      *(void *)(v1000 + 64) = v1084;
      *(void *)(v1000 + 72) = v1078;
      swift_storeEnumTagMultiPayload();
      OUTLINED_FUNCTION_157_2(v665);
      v667 = v666;
      OUTLINED_FUNCTION_103_11();

      goto LABEL_152;
    }
    OUTLINED_FUNCTION_101_10();
    if (v172 && (OUTLINED_FUNCTION_113_10(), v172) || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v688 = objc_msgSend(v1023, sel_uniqueIdentifier);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v689 = (void *)OUTLINED_FUNCTION_118_7();
      outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v689, (SEL *)&selRef_title);
      outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v117, (SEL *)&selRef_comment);
      v690 = objc_msgSend(v117, sel_attributeForKey_, v988);
      if (v690)
      {
        uint64_t v84 = v690;
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        *v995 = 0u;
        v995[1] = 0u;
      }
      outlined init with take of Any?((uint64_t)v995, v996, (uint64_t *)&demangling cache variable for type metadata for Any?);
      v696 = v1022[244];
      if (v1022[113])
      {
        uint64_t v84 = (void *)type metadata accessor for Date();
        v697 = swift_dynamicCast();
        __swift_storeEnumTagSinglePayload(v696, v697 ^ 1u, 1, (uint64_t)v84);
        OUTLINED_FUNCTION_53_2(v696, 1, (uint64_t)v84);
        if (!v172)
        {
          OUTLINED_FUNCTION_1_0();
          OUTLINED_FUNCTION_99_9();
          v698();
          OUTLINED_FUNCTION_190_2();
          goto LABEL_360;
        }
      }
      else
      {
        outlined destroy of EagerResolutionService?(v996, (uint64_t *)&demangling cache variable for type metadata for Any?);
        v699 = type metadata accessor for Date();
        OUTLINED_FUNCTION_141_3(v699);
      }
      v700 = v1022[245];
      v701 = v1022[244];
      type metadata accessor for Date();
      __swift_storeEnumTagSinglePayload(v700, 1, 1, (uint64_t)v84);
      outlined destroy of EagerResolutionService?(v701, &demangling cache variable for type metadata for Date?);
LABEL_360:
      v702 = objc_msgSend(v1086, sel_attributeForKey_, v987);
      if (v702)
      {
        uint64_t v84 = v702;
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        *v994 = 0u;
        v994[1] = 0u;
      }
      outlined init with take of Any?((uint64_t)v994, v998, (uint64_t *)&demangling cache variable for type metadata for Any?);
      v703 = v1022[242];
      if (v1022[25])
      {
        uint64_t v84 = (void *)type metadata accessor for Date();
        v704 = swift_dynamicCast();
        __swift_storeEnumTagSinglePayload(v703, v704 ^ 1u, 1, (uint64_t)v84);
        OUTLINED_FUNCTION_53_2(v703, 1, (uint64_t)v84);
        if (!v172)
        {
          OUTLINED_FUNCTION_1_0();
          OUTLINED_FUNCTION_99_9();
          v705();
          OUTLINED_FUNCTION_190_2();
          goto LABEL_368;
        }
      }
      else
      {
        outlined destroy of EagerResolutionService?(v998, (uint64_t *)&demangling cache variable for type metadata for Any?);
        v706 = type metadata accessor for Date();
        OUTLINED_FUNCTION_141_3(v706);
      }
      v707 = v1022[243];
      v708 = v1022[242];
      type metadata accessor for Date();
      __swift_storeEnumTagSinglePayload(v707, 1, 1, (uint64_t)v84);
      outlined destroy of EagerResolutionService?(v708, &demangling cache variable for type metadata for Date?);
LABEL_368:
      v709 = objc_msgSend(v1086, sel_attributeForKey_, v986);
      if (v709)
      {
        uint64_t v84 = v709;
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        *v993 = 0u;
        v993[1] = 0u;
      }
      outlined init with take of Any?((uint64_t)v993, v997, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v1022[29])
      {
        if (swift_dynamicCast())
        {
          v1070 = *v983;
          goto LABEL_376;
        }
      }
      else
      {
        outlined destroy of EagerResolutionService?(v997, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      v1070 = 0;
LABEL_376:
      v710 = objc_msgSend(v1086, sel_attributeForKey_, v985);
      if (v710)
      {
        uint64_t v84 = v710;
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        *v991 = 0u;
        v991[1] = 0u;
      }
      outlined init with take of Any?((uint64_t)v991, v992, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v1022[137])
      {
        if (swift_dynamicCast())
        {
          v1064 = v1022[160];
          v1059 = v1022[161];
          goto LABEL_384;
        }
      }
      else
      {
        outlined destroy of EagerResolutionService?(v992, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      v1064 = 0;
      v1059 = 0;
LABEL_384:
      v711 = objc_msgSend(v1086, sel_attributeForKey_, v984);
      if (v711)
      {
        uint64_t v84 = v711;
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        *v989 = 0u;
        v989[1] = 0u;
      }
      outlined init with take of Any?((uint64_t)v989, v990, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v1022[145])
      {
        if (swift_dynamicCast())
        {
          v1051 = v1022[162];
          v712 = (void *)v1022[163];
LABEL_392:
          if (objc_msgSend(v1086, sel_URL))
          {
            OUTLINED_FUNCTION_177_3();
            static URL._unconditionallyBridgeFromObjectiveC(_:)();

            v713 = 0;
          }
          else
          {
            v713 = 1;
          }
          v714 = v1022[245];
          v715 = v1022[243];
          v716 = v1022[237];
          v717 = (void *)v1022[220];
          v718 = v1022[219];
          v719 = type metadata accessor for URL();
          __swift_storeEnumTagSinglePayload(v716, v713, 1, v719);
          v720 = OUTLINED_FUNCTION_70_12();
          Reminder.init(id:title:note:creationDate:dueDate:dueDateIsAllDay:namedLocation:physicalAddress:url:)(v720, v721, v722, v723, v724, v725, v714, v715, v1070, v1064, v1059, v1051, (uint64_t)v712, v716);
          OUTLINED_FUNCTION_10_30();
          v726();
          outlined init with copy of VoiceMemo((uint64_t)v717, v718, (void (*)(void))type metadata accessor for Reminder);
          OUTLINED_FUNCTION_78_11();
          swift_allocObject();
          OUTLINED_FUNCTION_188_1();
          outlined init with take of VoiceMemo(v718, v727, (void (*)(void))type metadata accessor for Reminder);
          v728 = Logger.logObject.getter();
          v729 = static os_log_type_t.debug.getter();
          v730 = OUTLINED_FUNCTION_8_17();
          OUTLINED_FUNCTION_43_22(v730);
          v731 = OUTLINED_FUNCTION_8_17();
          OUTLINED_FUNCTION_38_20(v731);
          v732 = OUTLINED_FUNCTION_141();
          *(void *)(v732 + 16) = partial apply for implicit closure #74 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
          *(void *)(v732 + 24) = v716;
          v227 = (void *)OUTLINED_FUNCTION_141();
          v227[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
          v227[3] = v732;
          v733 = OUTLINED_FUNCTION_33_21();
          uint64_t v29 = (uint8_t *)specialized static Array._adoptStorage(_:count:)(v733, 3);
          *v734 = closure #1 in OSLogArguments.append(_:)partial apply;
          v734[1] = v712;
          v734[2] = closure #1 in OSLogArguments.append(_:)partial apply;
          v734[3] = v717;
          v734[4] = closure #1 in OSLogArguments.append(_:)partial apply;
          v734[5] = v227;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          if (OUTLINED_FUNCTION_65_12())
          {
            specialized static UnsafeMutablePointer.allocate(capacity:)();
            v735 = OUTLINED_FUNCTION_39_20();
            OUTLINED_FUNCTION_13_33(v735);
            v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
            v1144.id._object = v712;
            OUTLINED_FUNCTION_7_34();
            if (!v29)
            {
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v717;
              OUTLINED_FUNCTION_2_25();
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v227;
              OUTLINED_FUNCTION_2_25();
              OUTLINED_FUNCTION_110_8();
              OUTLINED_FUNCTION_66_15(&dword_257DC6000, v728, v729, "Reminder found: %s");
              OUTLINED_FUNCTION_121_0();
              OUTLINED_FUNCTION_34();
              specialized UnsafeMutablePointer.deallocate()();
            }
            goto LABEL_531;
          }
          v736 = v1022[327];
          OUTLINED_FUNCTION_90_11();
          swift_release();
          swift_release();

          v737 = OUTLINED_FUNCTION_36_22();
          v738(v737);
          uint64_t v1 = v1022;
          OUTLINED_FUNCTION_54_16();
          outlined init with copy of VoiceMemo(v1022[220], (uint64_t)v728, (void (*)(void))type metadata accessor for Reminder);
          OUTLINED_FUNCTION_19_0();
LABEL_399:
          swift_storeEnumTagMultiPayload();
          OUTLINED_FUNCTION_157_2(v736);
          v739 = v728;
          OUTLINED_FUNCTION_103_11();
          v253 = v1086;
LABEL_144:

          v254 = OUTLINED_FUNCTION_78_0();
LABEL_151:
          outlined destroy of VoiceMemo(v254, v255);
LABEL_152:
          outlined destroy of EagerResolutionService?(v1018, (uint64_t *)&demangling cache variable for type metadata for Any?);
          OUTLINED_FUNCTION_170_3();
          goto LABEL_176;
        }
      }
      else
      {
        outlined destroy of EagerResolutionService?(v990, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      v1051 = 0;
      v712 = 0;
      goto LABEL_392;
    }
    v740 = v1128 == v478 && bundleId == (void *)0x800000025867FEB0;
    v741 = v740;
    if (v740 || (OUTLINED_FUNCTION_46_19() & 1) != 0)
    {
      outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v1086, (SEL *)&selRef_contentType);
      if (v742)
      {
        v743 = v742;
        OUTLINED_FUNCTION_49_9();
        if (v745 == v744 + 8 && v743 == 0x80000002586839B0)
        {
          swift_bridgeObjectRelease();
LABEL_413:
          swift_bridgeObjectRelease();
          v747 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v1086, (SEL *)&selRef_contentSnippet);
          if (v748)
          {
            v1022[170] = v747;
            v1022[171] = v748;
            static CharacterSet.punctuationCharacters.getter();
            lazy protocol witness table accessor for type String and conformance String();
            v749 = StringProtocol.components(separatedBy:)();
            OUTLINED_FUNCTION_16_1();
            v750();
            swift_bridgeObjectRelease();
            specialized Collection.first.getter(v749);
            swift_bridgeObjectRelease();
          }
          v761 = objc_msgSend(v1023, sel_uniqueIdentifier);
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          v762 = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v1086, (SEL *)&selRef_phoneNumbers);
          if (v762)
          {
            uint64_t v84 = (void *)v762;
            specialized Collection.first.getter(v762);
            swift_bridgeObjectRelease();
          }
          if (objc_msgSend(v1086, sel_contentCreationDate))
          {
            OUTLINED_FUNCTION_177_3();
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            v763 = 0;
          }
          else
          {
            v763 = 1;
          }
          v764 = v1022[241];
          v765 = type metadata accessor for Date();
          v766 = 1;
          __swift_storeEnumTagSinglePayload(v764, v763, 1, v765);
          if (objc_msgSend(v1086, sel_URL))
          {
            OUTLINED_FUNCTION_177_3();
            static URL._unconditionallyBridgeFromObjectiveC(_:)();

            v766 = 0;
          }
          v767 = v1022[236];
          v768 = v1022[213];
          v769 = (void *)v1022[212];
          v770 = (void *)v1022[211];
          v771 = type metadata accessor for URL();
          __swift_storeEnumTagSinglePayload(v767, v766, 1, v771);
          VoicemailTranscript.init(id:displayTitle:phoneNumber:date:url:)();
          OUTLINED_FUNCTION_10_30();
          v772();
          outlined init with copy of VoiceMemo(v768, (uint64_t)v769, (void (*)(void))type metadata accessor for VoicemailTranscript);
          OUTLINED_FUNCTION_78_11();
          swift_allocObject();
          OUTLINED_FUNCTION_188_1();
          outlined init with take of VoiceMemo((uint64_t)v769, v773, (void (*)(void))type metadata accessor for VoicemailTranscript);
          v728 = Logger.logObject.getter();
          v774 = static os_log_type_t.debug.getter();
          v775 = OUTLINED_FUNCTION_8_17();
          OUTLINED_FUNCTION_43_22(v775);
          v776 = OUTLINED_FUNCTION_8_17();
          OUTLINED_FUNCTION_38_20(v776);
          v777 = OUTLINED_FUNCTION_141();
          *(void *)(v777 + 16) = partial apply for implicit closure #75 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
          *(void *)(v777 + 24) = v768;
          v227 = (void *)OUTLINED_FUNCTION_141();
          v227[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
          v227[3] = v777;
          v778 = OUTLINED_FUNCTION_33_21();
          uint64_t v29 = (uint8_t *)specialized static Array._adoptStorage(_:count:)(v778, 3);
          *v779 = closure #1 in OSLogArguments.append(_:)partial apply;
          v779[1] = v770;
          v779[2] = closure #1 in OSLogArguments.append(_:)partial apply;
          v779[3] = v769;
          v779[4] = closure #1 in OSLogArguments.append(_:)partial apply;
          v779[5] = v227;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          if (OUTLINED_FUNCTION_65_12())
          {
            specialized static UnsafeMutablePointer.allocate(capacity:)();
            v780 = OUTLINED_FUNCTION_39_20();
            OUTLINED_FUNCTION_13_33(v780);
            v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
            v1144.id._object = v770;
            OUTLINED_FUNCTION_7_34();
            if (!v29)
            {
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v769;
              OUTLINED_FUNCTION_2_25();
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v227;
              OUTLINED_FUNCTION_2_25();
              OUTLINED_FUNCTION_110_8();
              OUTLINED_FUNCTION_66_15(&dword_257DC6000, v728, v774, "Voicemail Transcript found: %s");
              OUTLINED_FUNCTION_121_0();
              OUTLINED_FUNCTION_34();
              specialized UnsafeMutablePointer.deallocate()();
            }
            goto LABEL_531;
          }
          v736 = v1022[326];
          OUTLINED_FUNCTION_90_11();
          swift_release();
          swift_release();

          v781 = OUTLINED_FUNCTION_36_22();
          v782(v781);
          uint64_t v1 = v1022;
          OUTLINED_FUNCTION_54_16();
          outlined init with copy of VoiceMemo(v1022[213], (uint64_t)v728, (void (*)(void))type metadata accessor for VoicemailTranscript);
          OUTLINED_FUNCTION_19_0();
          goto LABEL_399;
        }
        v746 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v746) {
          goto LABEL_413;
        }
      }
      if (v741) {
        goto LABEL_537;
      }
    }
    if (OUTLINED_FUNCTION_46_19())
    {
LABEL_537:
      outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v1086, (SEL *)&selRef_contentType);
      if (v751)
      {
        v752 = v751;
        OUTLINED_FUNCTION_49_9();
        if (v754 == v753 + 3 && v752 == 0x8000000258683990)
        {
          swift_bridgeObjectRelease();
LABEL_422:
          swift_bridgeObjectRelease();
          v756 = objc_msgSend(v1023, sel_uniqueIdentifier);
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          v757 = (void *)OUTLINED_FUNCTION_118_7();
          outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v757, (SEL *)&selRef_authorNames);
          outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v756, (SEL *)&selRef_recipientNames);
          outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v756, (SEL *)&selRef_participants);
          outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v756, (SEL *)&selRef_phoneNumbers);
          OUTLINED_FUNCTION_49_9();
          v759 = (void *)MEMORY[0x25A2C7AB0](v758 + 22, 0x80000002586838E0);
          v760 = objc_msgSend(v756, sel_attributeForKey_, v759);

          if (v760)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            *v978 = 0u;
            v978[1] = 0u;
          }
          outlined init with take of Any?((uint64_t)v978, v979, (uint64_t *)&demangling cache variable for type metadata for Any?);
          if (v1022[73])
          {
            swift_dynamicCast();
            OUTLINED_FUNCTION_138_2();
            v1071 = v813;
            if (v172) {
              v814 = 0;
            }
            else {
              v814 = v812;
            }
            v1065 = v814;
          }
          else
          {
            outlined destroy of EagerResolutionService?(v979, (uint64_t *)&demangling cache variable for type metadata for Any?);
            v1071 = 0;
            v1065 = 0;
          }
          v815 = objc_msgSend(v1086, sel_contentCreationDate);
          if (v815)
          {
            v816 = v815;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            v817 = 0;
          }
          else
          {
            v817 = 1;
          }
          v818 = v1022[240];
          v819 = type metadata accessor for Date();
          __swift_storeEnumTagSinglePayload(v818, v817, 1, v819);
          OUTLINED_FUNCTION_49_9();
          v821 = (void *)MEMORY[0x25A2C7AB0](v820 + 11, 0x8000000258683910);
          v822 = objc_msgSend(v1086, sel_attributeForKey_, v821);

          if (v822)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            *v976 = 0u;
            v976[1] = 0u;
          }
          outlined init with take of Any?((uint64_t)v976, v977, (uint64_t *)&demangling cache variable for type metadata for Any?);
          if (v1022[81])
          {
            swift_dynamicCast();
            OUTLINED_FUNCTION_138_2();
            v1060 = v824;
            if (v172) {
              v825 = 0;
            }
            else {
              v825 = v823;
            }
            v1052 = v825;
          }
          else
          {
            outlined destroy of EagerResolutionService?(v977, (uint64_t *)&demangling cache variable for type metadata for Any?);
            v1060 = 0;
            v1052 = 0;
          }
          if (objc_msgSend(v1086, sel_attributeForKey_, v982))
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            *v974 = 0u;
            v974[1] = 0u;
          }
          outlined init with take of Any?((uint64_t)v974, v975, (uint64_t *)&demangling cache variable for type metadata for Any?);
          if (v1022[89])
          {
            v826 = swift_dynamicCast();
            if (v826) {
              v827 = v1022[180];
            }
            else {
              v827 = 0;
            }
            if (v826) {
              v828 = v1022[181];
            }
            else {
              v828 = 0;
            }
          }
          else
          {
            outlined destroy of EagerResolutionService?(v975, (uint64_t *)&demangling cache variable for type metadata for Any?);
            v827 = 0;
            v828 = 0;
          }
          v829 = objc_msgSend(v1086, sel_URL);
          if (v829)
          {
            v830 = v829;
            static URL._unconditionallyBridgeFromObjectiveC(_:)();

            v831 = 0;
          }
          else
          {
            v831 = 1;
          }
          v832 = (void *)v1022[240];
          v833 = v1022[235];
          v834 = (void *)v1022[209];
          v835 = v1022[208];
          v836 = type metadata accessor for URL();
          __swift_storeEnumTagSinglePayload(v833, v831, 1, v836);
          v837 = OUTLINED_FUNCTION_70_12();
          PhoneHistory.init(id:authors:recipients:participants:phoneNumbers:callStatus:callDate:callType:description:url:)(v837, v838, v839, v840, v841, v842, v1071, v1065, v843, (uint64_t)v832, v1060, v1052, v827, v828, v833);
          OUTLINED_FUNCTION_10_30();
          v844();
          outlined init with copy of VoiceMemo((uint64_t)v834, v835, (void (*)(void))type metadata accessor for PhoneHistory);
          OUTLINED_FUNCTION_126_4();
          swift_allocObject();
          OUTLINED_FUNCTION_189_1();
          outlined init with take of VoiceMemo(v835, v845, (void (*)(void))type metadata accessor for PhoneHistory);
          v728 = Logger.logObject.getter();
          v846 = static os_log_type_t.debug.getter();
          v847 = OUTLINED_FUNCTION_8_17();
          OUTLINED_FUNCTION_43_22(v847);
          v848 = OUTLINED_FUNCTION_8_17();
          OUTLINED_FUNCTION_38_20(v848);
          v849 = OUTLINED_FUNCTION_141();
          *(void *)(v849 + 16) = partial apply for implicit closure #76 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
          *(void *)(v849 + 24) = v833;
          v227 = (void *)OUTLINED_FUNCTION_141();
          v227[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
          v227[3] = v849;
          v850 = OUTLINED_FUNCTION_33_21();
          uint64_t v29 = (uint8_t *)specialized static Array._adoptStorage(_:count:)(v850, 3);
          *v851 = closure #1 in OSLogArguments.append(_:)partial apply;
          v851[1] = v832;
          v851[2] = closure #1 in OSLogArguments.append(_:)partial apply;
          v851[3] = v834;
          v851[4] = closure #1 in OSLogArguments.append(_:)partial apply;
          v851[5] = v227;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          if (OUTLINED_FUNCTION_65_12())
          {
            specialized static UnsafeMutablePointer.allocate(capacity:)();
            v852 = OUTLINED_FUNCTION_39_20();
            OUTLINED_FUNCTION_13_33(v852);
            v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
            v1144.id._object = v832;
            OUTLINED_FUNCTION_7_34();
            if (!v29)
            {
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v834;
              OUTLINED_FUNCTION_2_25();
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v227;
              OUTLINED_FUNCTION_2_25();
              OUTLINED_FUNCTION_110_8();
              OUTLINED_FUNCTION_66_15(&dword_257DC6000, v728, v846, "Phone History found: %s");
              OUTLINED_FUNCTION_121_0();
              OUTLINED_FUNCTION_34();
              specialized UnsafeMutablePointer.deallocate()();
            }
            goto LABEL_531;
          }
          v736 = v1022[325];
          OUTLINED_FUNCTION_90_11();
          swift_release();
          swift_release();

          v853 = OUTLINED_FUNCTION_36_22();
          v854(v853);
          uint64_t v1 = v1022;
          OUTLINED_FUNCTION_54_16();
          outlined init with copy of VoiceMemo(v1022[209], (uint64_t)v728, (void (*)(void))type metadata accessor for PhoneHistory);
          OUTLINED_FUNCTION_19_0();
          goto LABEL_399;
        }
        v755 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v755) {
          goto LABEL_422;
        }
      }
    }
    OUTLINED_FUNCTION_49_9();
    OUTLINED_FUNCTION_89_7();
    if (!v172 || (OUTLINED_FUNCTION_113_10(), !v172))
    {
      if ((OUTLINED_FUNCTION_46_19() & 1) == 0)
      {
        OUTLINED_FUNCTION_49_9();
        OUTLINED_FUNCTION_89_7();
        if (v172 && (OUTLINED_FUNCTION_113_10(), v172) || (OUTLINED_FUNCTION_46_19() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v808 = objc_msgSend(v1023, sel_uniqueIdentifier);
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          CSSearchableItem.title.getter();
          v809 = objc_msgSend(v1086, sel_contentURL);
          if (v809)
          {
            v810 = v809;
            static URL._unconditionallyBridgeFromObjectiveC(_:)();

            v811 = 0;
          }
          else
          {
            v811 = 1;
          }
          v855 = v1022[233];
          v856 = (void *)type metadata accessor for URL();
          v857 = 1;
          __swift_storeEnumTagSinglePayload(v855, v811, 1, (uint64_t)v856);
          v858 = (void *)OUTLINED_FUNCTION_118_7();
          v1085 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v858, (SEL *)&selRef_contentSnippet);
          v1079 = v859;
          v1072 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v1023, (SEL *)&selRef_contentType);
          v861 = v860;
          v862 = objc_msgSend(v1023, sel_URL);
          if (v862)
          {
            v863 = v862;
            static URL._unconditionallyBridgeFromObjectiveC(_:)();

            v857 = 0;
          }
          v864 = v1022[233];
          v865 = (void *)v1022[232];
          v866 = v1022[201];
          v867 = v1022[200];
          __swift_storeEnumTagSinglePayload((uint64_t)v865, v857, 1, (uint64_t)v856);
          v868 = OUTLINED_FUNCTION_160_2();
          Safari.init(id:websiteTitle:websiteUrl:body:contentType:url:)(v868, v869, v870, v871, v864, v1085, v1079, v1072, v861, (uint64_t)v865, v948, v949, v950, v952, v954, v955, v956, v957, v958,
            v959,
            v960,
            v961);
          OUTLINED_FUNCTION_10_30();
          v872();
          outlined init with copy of VoiceMemo(v866, v867, (void (*)(void))type metadata accessor for Safari);
          OUTLINED_FUNCTION_78_11();
          swift_allocObject();
          OUTLINED_FUNCTION_188_1();
          outlined init with take of VoiceMemo(v867, v873, (void (*)(void))type metadata accessor for Safari);
          v728 = Logger.logObject.getter();
          v874 = static os_log_type_t.debug.getter();
          v875 = OUTLINED_FUNCTION_8_17();
          OUTLINED_FUNCTION_43_22(v875);
          v876 = OUTLINED_FUNCTION_8_17();
          OUTLINED_FUNCTION_38_20(v876);
          v877 = OUTLINED_FUNCTION_141();
          *(void *)(v877 + 16) = partial apply for implicit closure #78 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
          *(void *)(v877 + 24) = v857;
          v227 = (void *)OUTLINED_FUNCTION_141();
          v227[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
          v227[3] = v877;
          v878 = OUTLINED_FUNCTION_33_21();
          uint64_t v29 = (uint8_t *)specialized static Array._adoptStorage(_:count:)(v878, 3);
          *v879 = closure #1 in OSLogArguments.append(_:)partial apply;
          v879[1] = v856;
          v879[2] = closure #1 in OSLogArguments.append(_:)partial apply;
          v879[3] = v865;
          v879[4] = closure #1 in OSLogArguments.append(_:)partial apply;
          v879[5] = v227;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          if (OUTLINED_FUNCTION_65_12())
          {
            specialized static UnsafeMutablePointer.allocate(capacity:)();
            v880 = OUTLINED_FUNCTION_39_20();
            OUTLINED_FUNCTION_13_33(v880);
            v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
            v1144.id._object = v856;
            OUTLINED_FUNCTION_7_34();
            if (!v29)
            {
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v865;
              OUTLINED_FUNCTION_2_25();
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v227;
              OUTLINED_FUNCTION_2_25();
              OUTLINED_FUNCTION_110_8();
              OUTLINED_FUNCTION_66_15(&dword_257DC6000, v728, v874, "Safari item found: %s");
              OUTLINED_FUNCTION_121_0();
              OUTLINED_FUNCTION_34();
              specialized UnsafeMutablePointer.deallocate()();
            }
            goto LABEL_531;
          }
          v736 = v1022[323];
          OUTLINED_FUNCTION_90_11();
          swift_release();
          swift_release();

          v881 = OUTLINED_FUNCTION_36_22();
          v882(v881);
          uint64_t v1 = v1022;
          OUTLINED_FUNCTION_54_16();
          outlined init with copy of VoiceMemo(v1022[201], (uint64_t)v728, (void (*)(void))type metadata accessor for Safari);
          OUTLINED_FUNCTION_19_0();
        }
        else
        {
          if ((void *)v1128 != v117 || (OUTLINED_FUNCTION_113_10(), !v172))
          {
            OUTLINED_FUNCTION_49_9();
            if ((OUTLINED_FUNCTION_46_19() & 1) == 0)
            {
              CSSearchableItem.associatedAppEntityId.getter();
              if (v918)
              {
                OUTLINED_FUNCTION_187_1();
                CSSearchableItem.associatedAppEntityTypeId.getter();
                if (v919)
                {
                  uint64_t v1 = v1022;
                  v920 = v1022[311];
                  v921 = (uint64_t *)v1022[308];
                  v922._countAndFlagsBits = OUTLINED_FUNCTION_186_2();
                  v923._countAndFlagsBits = v1128;
                  v923._object = bundleId;
                  AppEntityItem.init(id:bundleId:typeId:protocolId:)(v925, v922, v923, v924, (Swift::String_optional)0);
                  v926 = *(_OWORD *)&v1144.id._object;
                  v927 = *(_OWORD *)&v1144.name.value._object;
                  rawValue = v1144.emailAddresses._rawValue;
                  v929 = *(_OWORD *)&v1144.physicalAddresses._rawValue;
                  *v921 = v1144.id._countAndFlagsBits;
                  *(_OWORD *)(v1000 + 8) = v926;
                  *(_OWORD *)(v1000 + 24) = v927;
                  *(void *)(v1000 + 40) = rawValue;
                  *(_OWORD *)(v1000 + 48) = v929;
                  swift_storeEnumTagMultiPayload();
                  OUTLINED_FUNCTION_157_2(v920);
                  v930 = v921;
                  specialized Array.append(_:)(v920);

                  goto LABEL_174;
                }
                swift_bridgeObjectRelease();
              }
              OUTLINED_FUNCTION_10_30();
              v931();
              v932 = OUTLINED_FUNCTION_141();
              *(void *)(v932 + 16) = v1128;
              *(void *)(v932 + 24) = bundleId;
              v933 = Logger.logObject.getter();
              v934 = static os_log_type_t.error.getter();
              v935 = OUTLINED_FUNCTION_8_17();
              OUTLINED_FUNCTION_43_22(v935);
              v936 = OUTLINED_FUNCTION_8_17();
              OUTLINED_FUNCTION_38_20(v936);
              v937 = OUTLINED_FUNCTION_141();
              *(void *)(v937 + 16) = partial apply for implicit closure #8 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
              *(void *)(v937 + 24) = v932;
              v938 = (void *)OUTLINED_FUNCTION_141();
              v938[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
              v938[3] = v937;
              v939 = OUTLINED_FUNCTION_33_21();
              uint64_t v29 = (uint8_t *)specialized static Array._adoptStorage(_:count:)(v939, 3);
              *v940 = closure #1 in OSLogArguments.append(_:)partial apply;
              v940[1] = v1023;
              v940[2] = closure #1 in OSLogArguments.append(_:)partial apply;
              v940[3] = v80;
              v940[4] = closure #1 in OSLogArguments.append(_:)partial apply;
              v940[5] = v938;
              swift_retain();
              swift_retain();
              swift_retain();
              swift_bridgeObjectRelease();
              if (OUTLINED_FUNCTION_65_12())
              {
                specialized static UnsafeMutablePointer.allocate(capacity:)();
                v941 = OUTLINED_FUNCTION_39_20();
                OUTLINED_FUNCTION_13_33(v941);
                v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                v1144.id._object = v1023;
                OUTLINED_FUNCTION_7_34();
                if (!v29)
                {
                  swift_release();
                  v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                  v1144.id._object = v80;
                  OUTLINED_FUNCTION_2_25();
                  swift_release();
                  v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
                  v1144.id._object = v938;
                  OUTLINED_FUNCTION_2_25();
                  OUTLINED_FUNCTION_114_9();
                  OUTLINED_FUNCTION_66_15(&dword_257DC6000, v933, v934, "Item found with un-handled bundleId: %s");
                  OUTLINED_FUNCTION_121_0();
                  OUTLINED_FUNCTION_34();
                  specialized UnsafeMutablePointer.deallocate()();
                }
                goto LABEL_531;
              }
              uint64_t v1 = v1022;
              v942 = v1022[321];
              v943 = v1022[318];

              swift_release();
              swift_release();
              swift_release();

              ((void (*)(uint64_t, uint64_t))loge)(v942, v943);
              goto LABEL_174;
            }
          }
          swift_bridgeObjectRelease();
          v883 = objc_msgSend(v1023, sel_uniqueIdentifier);
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          v884 = (void *)OUTLINED_FUNCTION_118_7();
          outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v884, (SEL *)&selRef_displayName);
          v885 = objc_msgSend(v117, sel_contentCreationDate);
          if (v885)
          {
            v886 = v885;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            v887 = 0;
          }
          else
          {
            v887 = 1;
          }
          v888 = v1022[239];
          v889 = type metadata accessor for Date();
          __swift_storeEnumTagSinglePayload(v888, v887, 1, v889);
          v890 = objc_msgSend(v1086, sel_duration);
          v891 = v890;
          if (v890)
          {
            objc_msgSend(v890, sel_doubleValue);
            v893 = v892;

            v894 = v893;
          }
          else
          {
            v894 = 0;
          }
          if (objc_msgSend(v1086, sel_URL))
          {
            OUTLINED_FUNCTION_177_3();
            static URL._unconditionallyBridgeFromObjectiveC(_:)();

            v895 = 0;
          }
          else
          {
            v895 = 1;
          }
          v896 = v1022[239];
          v897 = v1022[231];
          v898 = v1022[197];
          v899 = v1022[196];
          v900 = (void *)v1022[195];
          v901 = type metadata accessor for URL();
          __swift_storeEnumTagSinglePayload(v897, v895, 1, v901);
          v902 = OUTLINED_FUNCTION_160_2();
          VoiceMemo.init(id:displayName:creationDate:durationInSeconds:url:)(v902, v903, v904, v905, v896, (uint64_t)v894, v891 == 0, v897, v906);
          OUTLINED_FUNCTION_10_30();
          v907();
          outlined init with copy of VoiceMemo(v898, v899, (void (*)(void))type metadata accessor for VoiceMemo);
          OUTLINED_FUNCTION_78_11();
          v908 = swift_allocObject();
          outlined init with take of VoiceMemo(v899, v908 + v897, (void (*)(void))type metadata accessor for VoiceMemo);
          v728 = Logger.logObject.getter();
          v909 = static os_log_type_t.debug.getter();
          v910 = OUTLINED_FUNCTION_8_17();
          OUTLINED_FUNCTION_43_22(v910);
          v911 = OUTLINED_FUNCTION_8_17();
          OUTLINED_FUNCTION_38_20(v911);
          v912 = OUTLINED_FUNCTION_141();
          *(void *)(v912 + 16) = partial apply for implicit closure #79 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
          *(void *)(v912 + 24) = v908;
          v227 = (void *)OUTLINED_FUNCTION_141();
          v227[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
          v227[3] = v912;
          v913 = OUTLINED_FUNCTION_33_21();
          uint64_t v29 = (uint8_t *)specialized static Array._adoptStorage(_:count:)(v913, 3);
          *v914 = closure #1 in OSLogArguments.append(_:)partial apply;
          v914[1] = v894;
          v914[2] = closure #1 in OSLogArguments.append(_:)partial apply;
          v914[3] = v900;
          v914[4] = closure #1 in OSLogArguments.append(_:)partial apply;
          v914[5] = v227;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          if (OUTLINED_FUNCTION_65_12())
          {
            specialized static UnsafeMutablePointer.allocate(capacity:)();
            v915 = OUTLINED_FUNCTION_39_20();
            OUTLINED_FUNCTION_13_33(v915);
            v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
            v1144.id._object = v894;
            OUTLINED_FUNCTION_7_34();
            if (!v29)
            {
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v900;
              OUTLINED_FUNCTION_2_25();
              swift_release();
              v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
              v1144.id._object = v227;
              OUTLINED_FUNCTION_2_25();
              OUTLINED_FUNCTION_110_8();
              OUTLINED_FUNCTION_66_15(&dword_257DC6000, v728, v909, "Voice Memo found: %s");
              OUTLINED_FUNCTION_121_0();
              OUTLINED_FUNCTION_34();
              specialized UnsafeMutablePointer.deallocate()();
            }
            goto LABEL_531;
          }
          v736 = v1022[322];
          OUTLINED_FUNCTION_90_11();
          swift_release();
          swift_release();

          v916 = OUTLINED_FUNCTION_36_22();
          v917(v916);
          uint64_t v1 = v1022;
          OUTLINED_FUNCTION_54_16();
          outlined init with copy of VoiceMemo(v1022[197], (uint64_t)v728, (void (*)(void))type metadata accessor for VoiceMemo);
          OUTLINED_FUNCTION_19_0();
        }
        goto LABEL_399;
      }
    }
    swift_bridgeObjectRelease();
    if (objc_msgSend(v1086, sel_attributeForKey_, v982))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      *v980 = 0u;
      v980[1] = 0u;
    }
    outlined init with take of Any?((uint64_t)v980, v981, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v1022[57])
    {
      if (swift_dynamicCast())
      {
        v783 = v1022[167];
        v1136 = v1022[166];
        v1022[184] = v1136;
        v1022[185] = v783;
        swift_bridgeObjectRetain();
        static CharacterSet.punctuationCharacters.getter();
        lazy protocol witness table accessor for type String and conformance String();
        v784 = StringProtocol.components(separatedBy:)();
        OUTLINED_FUNCTION_78_0();
        OUTLINED_FUNCTION_16_1();
        v785();
        swift_bridgeObjectRelease();
        v1120 = specialized Collection.first.getter(v784);
        v1107 = v786;
        swift_bridgeObjectRelease();
LABEL_447:
        v787 = objc_msgSend(v1023, sel_uniqueIdentifier);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        OUTLINED_FUNCTION_152_3();

        v788 = objc_msgSend(v1086, sel_URL);
        if (v788)
        {
          v789 = v788;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          v790 = 0;
        }
        else
        {
          v790 = 1;
        }
        v791 = (void *)v1022[324];
        v792 = v1022[234];
        v793 = (void *)v1022[205];
        v794 = v1022[204];
        v795 = (void *)v1022[203];
        v796 = type metadata accessor for URL();
        __swift_storeEnumTagSinglePayload(v792, v790, 1, v796);
        JournalEntry.init(id:displayTitle:text:url:)(0x265435000, (uint64_t)&demangling cache variable for type metadata for Any?, v1120, v1107, v1136, v783, v792, v793);
        OUTLINED_FUNCTION_10_30();
        v797();
        outlined init with copy of VoiceMemo((uint64_t)v793, v794, (void (*)(void))type metadata accessor for JournalEntry);
        swift_allocObject();
        OUTLINED_FUNCTION_189_1();
        outlined init with take of VoiceMemo(v794, v798, (void (*)(void))type metadata accessor for JournalEntry);
        v728 = Logger.logObject.getter();
        v799 = static os_log_type_t.debug.getter();
        v800 = OUTLINED_FUNCTION_8_17();
        OUTLINED_FUNCTION_43_22(v800);
        v801 = OUTLINED_FUNCTION_8_17();
        OUTLINED_FUNCTION_38_20(v801);
        v802 = OUTLINED_FUNCTION_141();
        *(void *)(v802 + 16) = partial apply for implicit closure #77 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
        *(void *)(v802 + 24) = v783;
        v227 = (void *)OUTLINED_FUNCTION_141();
        v227[2] = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        v227[3] = v802;
        v803 = OUTLINED_FUNCTION_33_21();
        uint64_t v29 = (uint8_t *)specialized static Array._adoptStorage(_:count:)(v803, 3);
        *v804 = closure #1 in OSLogArguments.append(_:)partial apply;
        v804[1] = v791;
        v804[2] = closure #1 in OSLogArguments.append(_:)partial apply;
        v804[3] = v795;
        v804[4] = closure #1 in OSLogArguments.append(_:)partial apply;
        v804[5] = v227;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        if (OUTLINED_FUNCTION_65_12())
        {
          specialized static UnsafeMutablePointer.allocate(capacity:)();
          v805 = OUTLINED_FUNCTION_39_20();
          OUTLINED_FUNCTION_13_33(v805);
          v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
          v1144.id._object = v791;
          OUTLINED_FUNCTION_7_34();
          if (!v29)
          {
            swift_release();
            v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
            v1144.id._object = v795;
            OUTLINED_FUNCTION_2_25();
            swift_release();
            v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
            v1144.id._object = v227;
            OUTLINED_FUNCTION_2_25();
            OUTLINED_FUNCTION_110_8();
            OUTLINED_FUNCTION_66_15(&dword_257DC6000, v728, v799, "Journal Entry found: %s");
            OUTLINED_FUNCTION_121_0();
            OUTLINED_FUNCTION_34();
            specialized UnsafeMutablePointer.deallocate()();
          }
          goto LABEL_531;
        }
        v736 = v1022[324];
        OUTLINED_FUNCTION_90_11();
        swift_release();
        swift_release();

        v806 = OUTLINED_FUNCTION_36_22();
        v807(v806);
        uint64_t v1 = v1022;
        OUTLINED_FUNCTION_54_16();
        outlined init with copy of VoiceMemo(v1022[205], (uint64_t)v728, (void (*)(void))type metadata accessor for JournalEntry);
        OUTLINED_FUNCTION_19_0();
        goto LABEL_399;
      }
    }
    else
    {
      outlined destroy of EagerResolutionService?(v981, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    v1120 = 0;
    v1107 = 0;
    v1136 = 0;
    v783 = 0;
    goto LABEL_447;
  }
  Logging.search.unsafeMutableAddressor();
  OUTLINED_FUNCTION_51_2();
  v19();
  uint64_t v20 = OUTLINED_FUNCTION_48_14();
  *(void *)(v20 + 16) = v8;
  uint64_t v21 = v8;
  uint64_t v22 = Logger.logObject.getter();
  uint64_t v23 = static os_log_type_t.error.getter();
  uint64_t v24 = (unsigned char *)OUTLINED_FUNCTION_8_17();
  v24[16] = 32;
  uint64_t v25 = (void *)OUTLINED_FUNCTION_8_17();
  OUTLINED_FUNCTION_41_22((uint64_t)v25);
  uint64_t v26 = OUTLINED_FUNCTION_141();
  *(void *)(v26 + 16) = partial apply for implicit closure #4 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:);
  *(void *)(v26 + 24) = v20;
  uint64_t v27 = (void *)OUTLINED_FUNCTION_141();
  v27[2] = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v27[3] = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>);
  uint64_t v28 = swift_allocObject();
  uint64_t v29 = (uint8_t *)specialized static Array._adoptStorage(_:count:)(v28, 3);
  void *v30 = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[1] = v24;
  _OWORD v30[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v30[3] = v25;
  v30[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[5] = v27;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v22, v23))
  {

    swift_release();
    swift_release();
    swift_release();

    OUTLINED_FUNCTION_180_3();
    OUTLINED_FUNCTION_14_25();
    v35();
    goto LABEL_176;
  }
  char v31 = (uint8_t *)specialized static UnsafeMutablePointer.allocate(capacity:)();
  uint64_t v32 = OUTLINED_FUNCTION_13_1();
  v1146 = 0;
  v1147 = v32;
  OUTLINED_FUNCTION_35_24(v31);
  v1144.id._countAndFlagsBits = (uint64_t)partial apply for closure #1 in OSLogArguments.append(_:);
  v1144.id._object = v24;
  OUTLINED_FUNCTION_7_34();
  if (!v29)
  {
    swift_release();
    v1144.id._countAndFlagsBits = (uint64_t)closure #1 in OSLogArguments.append(_:)partial apply;
    v1144.id._object = v25;
    OUTLINED_FUNCTION_2_25();
    swift_release();
    v1144.id._countAndFlagsBits = (uint64_t)partial apply for closure #1 in OSLogArguments.append(_:);
    v1144.id._object = v27;
    OUTLINED_FUNCTION_2_25();
    OUTLINED_FUNCTION_100_10();
    _os_log_impl(&dword_257DC6000, v22, v23, "Skipping item with missing bundleID: %s", v31, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_34();
    specialized UnsafeMutablePointer.deallocate()();
  }
LABEL_531:
}

{
  uint64_t v0;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_43_16();
  __asm { BRAA            X1, X16 }
}

void sub_25845A99C()
{
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  JUMPOUT(0x25845A690);
}

void static LocalIndexClient.getSpotlightMetrics(for:attributeSet:)(void *a1, void *a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntelligenceFlowSearchToolTelemetry.SearchToolSpotlightSearchRetrievalType?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_59_0();
  IntelligenceFlowSearchToolTelemetry.SearchToolSpotlightResult.init()();
  if (objc_msgSend(a2, sel_attributeForKey_, *MEMORY[0x263F02A08]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  outlined init with take of Any?((uint64_t)v10, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v12)
  {
    type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for NSNumber);
    if (swift_dynamicCast())
    {
      MEMORY[0x25A2C72C0](objc_msgSend(v9, sel_integerValue));
      MEMORY[0x25A2C6D50](v2);
    }
  }
  else
  {
    outlined destroy of EagerResolutionService?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(a2, (SEL *)&selRef_bundleID);
  IntelligenceFlowSearchToolTelemetry.SearchToolSpotlightResult.bundleId.setter();
  id v7 = objc_msgSend(a1, sel_rankingItem);
  if (v7)
  {
    uint64_t v8 = v7;
    objc_msgSend(v7, sel_likelihood);
    OUTLINED_FUNCTION_45_14();
    MEMORY[0x25A2C6D20]();
    objc_msgSend(v8, sel_topicalityScore);
    OUTLINED_FUNCTION_45_14();
    MEMORY[0x25A2C6D30]();
    objc_msgSend(v8, sel_pommesL1Score);
    OUTLINED_FUNCTION_45_14();
    MEMORY[0x25A2C6D40]();
    objc_msgSend(v8, sel_pommesCalibratedL1Score);
    OUTLINED_FUNCTION_45_14();
    MEMORY[0x25A2C6D80]();
    objc_msgSend(v8, sel_embeddingSimilarity);
    OUTLINED_FUNCTION_45_14();
    MEMORY[0x25A2C6D70]();
    objc_msgSend(v8, sel_keywordMatchScore);
    OUTLINED_FUNCTION_45_14();
    IntelligenceFlowSearchToolTelemetry.SearchToolSpotlightResult.keywordMatchScore.setter();
    objc_msgSend(v8, sel_freshnessScore);
    OUTLINED_FUNCTION_45_14();
    IntelligenceFlowSearchToolTelemetry.SearchToolSpotlightResult.freshness.setter();
  }
}

id CSSearchableItemAttributeSet.__allocating_init(contentType:)(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = UTType._bridgeToObjectiveC()().super.isa;
  id v4 = objc_msgSend(v2, sel_initWithContentType_, isa);

  uint64_t v5 = type metadata accessor for UTType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return v4;
}

CSSearchableItemAttributeSet __swiftcall CSSearchableItemAttributeSet.__allocating_init(itemContentType:)(Swift::String itemContentType)
{
  object = itemContentType._object;
  uint64_t countAndFlagsBits = itemContentType._countAndFlagsBits;
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v4 = (void *)MEMORY[0x25A2C7AB0](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v3, sel_initWithItemContentType_, v4);

  return (CSSearchableItemAttributeSet)v5;
}

void CSSearchableItemAttributeSet.spotlightSearchResult.setter(void *a1)
{
  type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for CSCustomAttributeKey);
  id v3 = (id)static CSCustomAttributeKey.spotlightSFSearchResultKey.getter();
  objc_msgSend(v1, sel_setValue_forCustomKey_, a1, v3);
}

BOOL CSSearchableItem.isEventTypeItem.getter()
{
  id v1 = objc_msgSend(v0, sel_attributeSet);
  id v2 = objc_msgSend(v1, sel_eventType);

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v5 = v4;

  swift_bridgeObjectRelease();
  uint64_t v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  }
  return v6 != 0;
}

uint64_t specialized Set.union<A>(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0;
  uint64_t v18 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v9 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    uint64_t v14 = (Swift::Int *)(*(void *)(v2 + 48) + 16 * i);
    Swift::Int v15 = *v14;
    Swift::Int v16 = v14[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v15, v16);
    unint64_t result = swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v7 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v3 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t implicit closure #9 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(void *a1)
{
  uint64_t result = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(a1, (SEL *)&selRef_contentType);
  if (!v2) {
    return 7104878;
  }
  return result;
}

uint64_t implicit closure #11 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_attributeDictionary);
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)&long long v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v5 + 1) = v3;
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.getter((uint64_t)v6, v2, &v5);
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  return String.init<A>(describing:)();
}

uint64_t implicit closure #13 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(void *a1)
{
  uint64_t v1 = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.detectedEventTypes.getter(a1);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = MEMORY[0x263F8EE78];
  }
  uint64_t v3 = MEMORY[0x25A2C7E60](v2, MEMORY[0x263F8D310]);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t implicit closure #15 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(uint64_t a1)
{
  return a1;
}

uint64_t implicit closure #16 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(uint64_t a1)
{
  outlined init with copy of StructuredQueryEntity?(a1, (uint64_t)&v2, (uint64_t *)&demangling cache variable for type metadata for Any?);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  return String.init<A>(describing:)();
}

uint64_t CSSearchableItem.isPhotoOrVideo.getter()
{
  uint64_t v0 = type metadata accessor for UTType();
  OUTLINED_FUNCTION_0_10();
  uint64_t v2 = v1;
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_15();
  uint64_t v6 = v5 - v4;
  static UTType.image.getter();
  char v7 = CSSearchableItem.isContentType(_:)();
  int64_t v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v8(v6, v0);
  if (v7)
  {
    char v9 = 1;
  }
  else
  {
    static UTType.video.getter();
    char v9 = CSSearchableItem.isContentType(_:)();
    v8(v6, v0);
  }
  return v9 & 1;
}

uint64_t LocalIndexClient.constructPhotoDocument(item:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v7 - 8);
  char v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v69 = a1;
  id v10 = objc_msgSend(a1, sel_attributeSet);
  if (objc_msgSend(v10, sel_attributeForKey_, *MEMORY[0x263F02678]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v71 = 0u;
    long long v72 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v71, (uint64_t)v73, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v74)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (swift_dynamicCast())
    {
      int64_t v11 = v70;
      goto LABEL_9;
    }
  }
  else
  {
    outlined destroy of EagerResolutionService?((uint64_t)v73, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  int64_t v11 = (void *)MEMORY[0x263F8EE78];
LABEL_9:
  unint64_t v12 = outlined bridged method (pb) of @objc SFResultSection.results.getter(v10, (SEL *)&selRef_photosSceneClassifications, &lazy cache variable for type metadata for CSSceneClassification);
  Swift::String v67 = v6;
  uint64_t v68 = a2;
  uint64_t v66 = v11;
  if (v12)
  {
    unint64_t v13 = v12;
    id v65 = v10;
    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v14 = result;
    }
    else
    {
      uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
    }
    uint64_t v58 = v9;
    if (v14)
    {
      if (v14 < 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v16 = 0;
      uint64_t v17 = MEMORY[0x263F8EE78];
      do
      {
        if ((v13 & 0xC000000000000001) != 0) {
          id v18 = (id)MEMORY[0x25A2C8550](v16, v13);
        }
        else {
          id v18 = *(id *)(v13 + 8 * v16 + 32);
        }
        uint64_t v19 = v18;
        uint64_t v20 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_label);
        uint64_t v22 = v21;

        if (v22)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v17 = v25;
          }
          unint64_t v23 = *(void *)(v17 + 16);
          if (v23 >= *(void *)(v17 + 24) >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v17 = v26;
          }
          *(void *)(v17 + 16) = v23 + 1;
          uint64_t v24 = v17 + 16 * v23;
          *(void *)(v24 + 32) = v20;
          *(void *)(v24 + 40) = v22;
        }
        ++v16;
      }
      while (v14 != v16);
    }
    else
    {
      uint64_t v17 = MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease_n();
    id v10 = v65;
    char v9 = v58;
  }
  else
  {
    uint64_t v17 = 0;
  }
  if (objc_msgSend(v10, sel_attributeForKey_, *MEMORY[0x263F026A8]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v71 = 0u;
    long long v72 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v71, (uint64_t)v73, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v74)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (swift_dynamicCast())
    {
      uint64_t v27 = (uint64_t)v70;
      goto LABEL_37;
    }
  }
  else
  {
    outlined destroy of EagerResolutionService?((uint64_t)v73, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v27 = MEMORY[0x263F8EE78];
LABEL_37:
  uint64_t v61 = v27;
  if (objc_msgSend(v10, sel_attributeForKey_, *MEMORY[0x263F026A0]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v71 = 0u;
    long long v72 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v71, (uint64_t)v73, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v74)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (swift_dynamicCast())
    {
      uint64_t v28 = (uint64_t)v70;
      goto LABEL_45;
    }
  }
  else
  {
    outlined destroy of EagerResolutionService?((uint64_t)v73, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v28 = MEMORY[0x263F8EE78];
LABEL_45:
  uint64_t v60 = v28;
  if (objc_msgSend(v10, sel_attributeForKey_, *MEMORY[0x263F026B8]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v71 = 0u;
    long long v72 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v71, (uint64_t)v73, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v74)
  {
    outlined destroy of EagerResolutionService?((uint64_t)v73, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_52;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if (!swift_dynamicCast())
  {
LABEL_52:
    uint64_t v29 = MEMORY[0x263F8EE78];
    goto LABEL_53;
  }
  uint64_t v29 = (uint64_t)v70;
LABEL_53:
  uint64_t v59 = v29;
  uint64_t v30 = MEMORY[0x263F8EE78];
  id v31 = objc_msgSend(v69, sel_uniqueIdentifier);
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;

  uint64_t v35 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v10, (SEL *)&selRef_photosContentDescription);
  uint64_t v37 = v36;
  uint64_t v38 = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v10, (SEL *)&selRef_photosSeasons);
  uint64_t v39 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v10, (SEL *)&selRef_contentSnippet);
  uint64_t v62 = v40;
  uint64_t v63 = v39;
  id v41 = objc_msgSend(v10, sel_contentCreationDate);
  uint64_t v64 = v37;
  id v65 = (id)v35;
  if (v41)
  {
    uint64_t v42 = v41;
    uint64_t v43 = v32;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v44 = 0;
  }
  else
  {
    uint64_t v43 = v32;
    uint64_t v44 = 1;
  }
  uint64_t v45 = type metadata accessor for Date();
  __swift_storeEnumTagSinglePayload((uint64_t)v9, v44, 1, v45);
  if (!v17) {
    uint64_t v17 = v30;
  }
  if (!v38) {
    uint64_t v38 = v30;
  }
  uint64_t v46 = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v10, (SEL *)&selRef_photosBusinessNames);
  if (v46) {
    uint64_t v47 = v46;
  }
  else {
    uint64_t v47 = v30;
  }
  uint64_t v48 = type metadata accessor for PartialExtractedAttributes(0);
  uint64_t v49 = v10;
  uint64_t v50 = (uint64_t)v67;
  __swift_storeEnumTagSinglePayload((uint64_t)v67, 1, 1, v48);
  type metadata accessor for FeatureFlagService();
  uint64_t v51 = swift_allocObject();
  uint64_t v52 = (uint64_t)v69;
  id v53 = v69;
  *(void *)&long long v56 = v51;
  uint64_t v54 = v68;
  Photo.init(id:photoDescription:locationKeywords:season:sceneClassificationLabels:snippet:ocrString:date:businessNames:peopleNames:peopleContactIdentifiers:peoplePersonIdentifiers:extractedEventsLLMConsumableDescription:partialExtractedAttributes:csItem:featureFlagService:)(v43, v34, (uint64_t)v65, v64, (uint64_t)v66, v38, v17, v63, v62, 0, 0, (uint64_t)v9, v47, v61, v60, v59, 0, 0, v50,
    v52,
    v56,
    v57,
    (uint64_t)v58,
    v59,
    v60,
    v61,
    v62,
    v63,
    v64,
    (uint64_t)v65,
    v66);

  uint64_t v55 = type metadata accessor for Photo(0);
  return __swift_storeEnumTagSinglePayload(v54, 0, 1, v55);
}

void *_sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSS_s5NeverOSo16CSSearchableItemCTg5055_s10OmniSearch16LocalIndexClientC11findMatches3for12maxf61Count9spQUParseSayAA0B6ResultVGSS_SiSo9SPQUParseCSgtYaKFSo012E13J0CSgSSXEfU2_SDySSAGGTf1cn_nTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || !*(void *)(a3 + 16))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v4 = OUTLINED_FUNCTION_105_4();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return 0;
  }
  uint64_t v8 = *(void **)(*(void *)(a3 + 56) + 8 * v6);
  id v9 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return v8;
}

uint64_t implicit closure #22 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(void *a1, SEL *a2)
{
  uint64_t result = outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.filename.getter(objc_msgSend(a1, sel_attributeSet), a2);
  if (!v3) {
    return 0;
  }
  return result;
}

void *implicit closure #28 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)@<X0>(void *a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t result = specialized Set.init<A>(_:)(v2);
  *a1 = result;
  return result;
}

uint64_t implicit closure #29 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(uint64_t a1, void (*a2)(void))
{
  return String.init<A>(describing:)();
}

uint64_t implicit closure #32 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(void *a1)
{
  return String.init<A>(describing:)();
}

void implicit closure #18 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  OUTLINED_FUNCTION_145();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for String.Encoding();
  uint64_t v3 = OUTLINED_FUNCTION_81(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_15();
  if (one-time initialization token for iso8601PrettyPrinted != -1) {
    swift_once();
  }
  v1(0);
  uint64_t v4 = (unint64_t *)OUTLINED_FUNCTION_105_4();
  lazy protocol witness table accessor for type Photo and conformance Photo(v4, v5);
  uint64_t v6 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v8 = v7;
  static String.Encoding.utf8.getter();
  String.init(data:encoding:)();
  outlined consume of Data._Representation(v6, v8);
  OUTLINED_FUNCTION_79_0();
  OUTLINED_FUNCTION_141_0();
}

uint64_t implicit closure #4 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_uniqueIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  return OUTLINED_FUNCTION_148();
}

void static LocalIndexClient.walletDocument(from:)()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v151 = v1;
  id v152 = v0;
  uint64_t v159 = *MEMORY[0x263EF8340];
  uint64_t v148 = type metadata accessor for WalletPass(0);
  OUTLINED_FUNCTION_1_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_185_0();
  uint64_t v149 = v3;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (uint64_t *)((char *)&v138 - v5);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v8 = OUTLINED_FUNCTION_81(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_95_1();
  uint64_t v11 = v9 - v10;
  MEMORY[0x270FA5388](v12);
  char v147 = (char *)&v138 - v13;
  OUTLINED_FUNCTION_113_1();
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v138 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v138 - v18;
  uint64_t v20 = (int *)type metadata accessor for WalletTransaction(0);
  OUTLINED_FUNCTION_1_0();
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_185_0();
  uint64_t v150 = v22;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (uint64_t *)((char *)&v138 - v24);
  id v26 = objc_msgSend(v152, sel_attributeSet);
  id v27 = objc_msgSend(v152, sel_uniqueIdentifier);
  uint64_t v28 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v29;

  v157[0] = v28;
  v157[1] = v30;
  unint64_t v31 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v32 = MEMORY[0x25A2C83D0](45, 0xE100000000000000, 1, 1, MEMORY[0x263F8D310], v31);
  swift_bridgeObjectRelease();
  uint64_t v33 = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySsG_SSs5NeverOTg5012_sSsSSIeggo_f4SSs5D153OIegnrzr_TR129_s10OmniSearch14ResultHydratorC32fetchFullContentForPhotosResults33_4DC86B6DF70367122DAA7E88D902EF60LLySayAA0bC0VGAHYaKFSSSshcfu_Tf3nnnpf_nTf1cn_n(v32);
  swift_bridgeObjectRelease();
  if (!v33[2])
  {
    __break(1u);
    goto LABEL_80;
  }
  uint64_t v34 = v33[4];
  uint64_t v35 = v33[5];
  BOOL v36 = v34 == 0x746361736E617274 && v35 == 0xEB000000006E6F69;
  if (v36 || (OUTLINED_FUNCTION_146_3() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    id v37 = objc_msgSend(v152, sel_uniqueIdentifier);
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v148 = v39;
    uint64_t v149 = v38;

    uint64_t v141 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v26, (SEL *)&selRef_displayName);
    uint64_t v140 = v40;
    uint64_t v139 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v26, (SEL *)&selRef_contentDescription);
    uint64_t v138 = v41;
    if (objc_msgSend(v26, sel_attributeForKey_, *MEMORY[0x263F02450]))
    {
      _bridgeAnyObjectToAny(_:)();
      uint64_t v42 = swift_unknownObjectRelease();
    }
    else
    {
      OUTLINED_FUNCTION_129_5();
    }
    OUTLINED_FUNCTION_139_3(v42, v43, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v158)
    {
      uint64_t v44 = type metadata accessor for Date();
      int v45 = swift_dynamicCast();
      __swift_storeEnumTagSinglePayload((uint64_t)v17, v45 ^ 1u, 1, v44);
      OUTLINED_FUNCTION_53_2((uint64_t)v17, 1, v44);
      if (!v36)
      {
        OUTLINED_FUNCTION_1_0();
        OUTLINED_FUNCTION_99_9();
        v46();
        __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v44);
        goto LABEL_15;
      }
    }
    else
    {
      outlined destroy of EagerResolutionService?((uint64_t)v157, (uint64_t *)&demangling cache variable for type metadata for Any?);
      type metadata accessor for Date();
      OUTLINED_FUNCTION_92_12((uint64_t)v17);
    }
    type metadata accessor for Date();
    OUTLINED_FUNCTION_92_12((uint64_t)v19);
    outlined destroy of EagerResolutionService?((uint64_t)v17, &demangling cache variable for type metadata for Date?);
LABEL_15:
    uint64_t v47 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v26, (SEL *)&selRef_city);
    uint64_t v49 = v48;
    uint64_t v50 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v26, (SEL *)&selRef_stateOrProvince);
    uint64_t v144 = v51;
    uint64_t v52 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v26, (SEL *)&selRef_country);
    OUTLINED_FUNCTION_167_2(v52, v53);
    if (objc_msgSend(v26, sel_attributeForKey_, *MEMORY[0x263F02610]))
    {
      _bridgeAnyObjectToAny(_:)();
      uint64_t v54 = swift_unknownObjectRelease();
    }
    else
    {
      OUTLINED_FUNCTION_129_5();
    }
    char v147 = v19;
    OUTLINED_FUNCTION_139_3(v54, v55, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v146 = v49;
    uint64_t v145 = v50;
    uint64_t v56 = v47;
    if (v158)
    {
      type metadata accessor for NSDecimal(0);
      if (OUTLINED_FUNCTION_123_7())
      {
        char v57 = 0;
        int v58 = v155;
        uint64_t v60 = v153;
        unint64_t v59 = v154;
        goto LABEL_23;
      }
    }
    else
    {
      outlined destroy of EagerResolutionService?((uint64_t)v157, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    uint64_t v60 = 0;
    unint64_t v59 = 0;
    int v58 = 0;
    char v57 = 1;
LABEL_23:
    if (objc_msgSend(v26, (SEL)&selRef__ios_meContactWithKeysToFetch_error_ + 1, *MEMORY[0x263F02618]))
    {
      _bridgeAnyObjectToAny(_:)();
      uint64_t v61 = swift_unknownObjectRelease();
    }
    else
    {
      OUTLINED_FUNCTION_129_5();
    }
    OUTLINED_FUNCTION_139_3(v61, v62, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v158)
    {
      if (OUTLINED_FUNCTION_123_7())
      {
        uint64_t v63 = v153;
        unint64_t v64 = v154;
        goto LABEL_31;
      }
    }
    else
    {
      outlined destroy of EagerResolutionService?((uint64_t)v157, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    uint64_t v63 = 0;
    unint64_t v64 = 0;
LABEL_31:
    uint64_t v65 = v141;
    uint64_t v66 = v140;
    uint64_t v67 = v139;
    uint64_t v68 = v138;
    *uint64_t v25 = v149;
    uint64_t v69 = (uint64_t)v147;
    v25[1] = v148;
    v25[2] = v65;
    v25[3] = v66;
    v25[4] = v67;
    v25[5] = v68;
    outlined init with take of Any?(v69, (uint64_t)v25 + v20[7], &demangling cache variable for type metadata for Date?);
    Swift::String v70 = (void *)((char *)v25 + v20[8]);
    uint64_t v71 = v146;
    uint64_t *v70 = v56;
    v70[1] = v71;
    long long v72 = (void *)((char *)v25 + v20[9]);
    *long long v72 = v145;
    v72[1] = v144;
    Swift::String v73 = (void *)((char *)v25 + v20[10]);
    *Swift::String v73 = v143;
    v73[1] = v142;
    uint64_t v74 = (char *)v25 + v20[11];
    *(void *)uint64_t v74 = v60;
    *((void *)v74 + 1) = v59;
    *((_DWORD *)v74 + 4) = v58;
    v74[20] = v57;
    Swift::String v75 = (void *)((char *)v25 + v20[12]);
    uint64_t *v75 = v63;
    v75[1] = v64;
    if (one-time initialization token for search == -1)
    {
LABEL_32:
      uint64_t v76 = type metadata accessor for Logger();
      __swift_project_value_buffer(v76, (uint64_t)static Logging.search);
      uint64_t v77 = v150;
      outlined init with copy of VoiceMemo((uint64_t)v25, v150, (void (*)(void))type metadata accessor for WalletTransaction);
      uint64_t v78 = Logger.logObject.getter();
      os_log_type_t v79 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v78, v79))
      {
        uint64_t v80 = (uint8_t *)OUTLINED_FUNCTION_14_1();
        v157[0] = (id)OUTLINED_FUNCTION_13_1();
        OUTLINED_FUNCTION_168_2(4.8149e-34);
        uint64_t v81 = specialized Encodable.oms_jsonPrettyPrinted()();
        uint64_t v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, (uint64_t *)v157);
        OUTLINED_FUNCTION_111_9(v83);
        swift_bridgeObjectRelease();
        outlined destroy of VoiceMemo(v77, (void (*)(void))type metadata accessor for WalletTransaction);
        _os_log_impl(&dword_257DC6000, v78, v79, "Wallet transaction found: %s", v80, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_34();
        OUTLINED_FUNCTION_34();
      }
      else
      {
        outlined destroy of VoiceMemo(v77, (void (*)(void))type metadata accessor for WalletTransaction);
      }

      uint64_t v84 = v151;
      outlined init with take of VoiceMemo((uint64_t)v25, v151, (void (*)(void))type metadata accessor for WalletTransaction);
      type metadata accessor for SearchResultItem(0);
      OUTLINED_FUNCTION_175_2();
LABEL_36:
      swift_storeEnumTagMultiPayload();
      uint64_t v85 = type metadata accessor for SearchResult(0);
      long long v86 = (void *)(v84 + *(int *)(v85 + 24));
      *long long v86 = 0;
      v86[1] = 0;
      *(void *)(v84 + *(int *)(v85 + 20)) = v152;
      __swift_storeEnumTagSinglePayload(v84, 0, 1, v85);
      OUTLINED_FUNCTION_119_0();
      id v89 = v87;
      return;
    }
LABEL_80:
    swift_once();
    goto LABEL_32;
  }
  BOOL v90 = v34 == 1936941424 && v35 == 0xE400000000000000;
  if (v90 || (OUTLINED_FUNCTION_146_3() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (objc_msgSend(v26, sel_attributeForKey_, *MEMORY[0x263F022A8]))
    {
      _bridgeAnyObjectToAny(_:)();
      uint64_t v91 = swift_unknownObjectRelease();
    }
    else
    {
      OUTLINED_FUNCTION_129_5();
    }
    OUTLINED_FUNCTION_139_3(v91, v92, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v158)
    {
      uint64_t v17 = (char *)MEMORY[0x263F8EE58];
      if (OUTLINED_FUNCTION_123_7())
      {
        uint64_t v93 = v153;
        unint64_t v94 = v154;
        uint64_t v95 = self;
        OUTLINED_FUNCTION_79_0();
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        v157[0] = 0;
        id v97 = objc_msgSend(v95, sel_JSONObjectWithData_options_error_, isa, 0, v157);

        if (v97)
        {
          id v98 = v157[0];
          _bridgeAnyObjectToAny(_:)();
          outlined consume of Data._Representation(v93, v94);
          swift_unknownObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
          swift_dynamicCast();
          OUTLINED_FUNCTION_138_2();
          uint64_t v146 = v99;
          goto LABEL_58;
        }
        id v102 = v157[0];
        uint64_t v103 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        outlined consume of Data._Representation(v93, v94);
      }
    }
    else
    {
      outlined destroy of EagerResolutionService?((uint64_t)v157, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    uint64_t v146 = 0;
LABEL_58:
    id v104 = objc_msgSend(v152, sel_uniqueIdentifier);
    uint64_t v105 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v107 = v106;

    uint64_t v150 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v26, (SEL *)&selRef_displayName);
    uint64_t v109 = v108;
    outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v26, (SEL *)&selRef_contentDescription);
    OUTLINED_FUNCTION_152_3();
    if (objc_msgSend(v26, sel_attributeForKey_, *MEMORY[0x263F02450]))
    {
      _bridgeAnyObjectToAny(_:)();
      uint64_t v110 = swift_unknownObjectRelease();
    }
    else
    {
      OUTLINED_FUNCTION_129_5();
    }
    OUTLINED_FUNCTION_139_3(v110, v111, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v158)
    {
      uint64_t v112 = v105;
      uint64_t v113 = type metadata accessor for Date();
      int v114 = OUTLINED_FUNCTION_176_3();
      OUTLINED_FUNCTION_193_2(v11, v114 ^ 1u);
      uint64_t v115 = v107;
      if (__swift_getEnumTagSinglePayload(v11, 1, v113) != 1)
      {
        OUTLINED_FUNCTION_1_0();
        uint64_t v116 = (uint64_t)v147;
        OUTLINED_FUNCTION_99_9();
        v117();
        OUTLINED_FUNCTION_193_2(v116, 0);
LABEL_66:
        uint64_t v118 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v26, (SEL *)&selRef_creator);
        uint64_t v120 = v119;
        *uint64_t v6 = v112;
        v6[1] = v115;
        v6[2] = v150;
        v6[3] = v109;
        v6[4] = (uint64_t)v17;
        v6[5] = v35;
        uint64_t v121 = v148;
        outlined init with take of Any?(v116, (uint64_t)v6 + *(int *)(v148 + 28), &demangling cache variable for type metadata for Date?);
        uint64_t v122 = (uint64_t *)((char *)v6 + *(int *)(v121 + 32));
        *uint64_t v122 = v118;
        v122[1] = v120;
        *(uint64_t *)((char *)v6 + *(int *)(v121 + 36)) = v146;
        if (one-time initialization token for search != -1) {
          swift_once();
        }
        uint64_t v123 = type metadata accessor for Logger();
        __swift_project_value_buffer(v123, (uint64_t)static Logging.search);
        uint64_t v124 = v149;
        outlined init with copy of VoiceMemo((uint64_t)v6, v149, (void (*)(void))type metadata accessor for WalletPass);
        uint64_t v125 = Logger.logObject.getter();
        os_log_type_t v126 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v125, v126))
        {
          char v127 = (uint8_t *)OUTLINED_FUNCTION_14_1();
          v157[0] = (id)OUTLINED_FUNCTION_13_1();
          OUTLINED_FUNCTION_168_2(4.8149e-34);
          uint64_t v128 = specialized Encodable.oms_jsonPrettyPrinted()();
          uint64_t v130 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v128, v129, (uint64_t *)v157);
          OUTLINED_FUNCTION_111_9(v130);
          swift_bridgeObjectRelease();
          outlined destroy of VoiceMemo(v124, (void (*)(void))type metadata accessor for WalletPass);
          _os_log_impl(&dword_257DC6000, v125, v126, "Wallet pass found: %s", v127, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_34();
          OUTLINED_FUNCTION_34();
        }
        else
        {

          outlined destroy of VoiceMemo(v124, (void (*)(void))type metadata accessor for WalletPass);
        }
        uint64_t v84 = v151;
        outlined init with take of VoiceMemo((uint64_t)v6, v151, (void (*)(void))type metadata accessor for WalletPass);
        type metadata accessor for SearchResultItem(0);
        OUTLINED_FUNCTION_175_2();
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v112 = v105;
      uint64_t v115 = v107;
      outlined destroy of EagerResolutionService?((uint64_t)v157, (uint64_t *)&demangling cache variable for type metadata for Any?);
      type metadata accessor for Date();
      OUTLINED_FUNCTION_193_2(v11, 1);
    }
    type metadata accessor for Date();
    uint64_t v116 = (uint64_t)v147;
    OUTLINED_FUNCTION_193_2((uint64_t)v147, 1);
    outlined destroy of EagerResolutionService?(v11, &demangling cache variable for type metadata for Date?);
    goto LABEL_66;
  }
  if (v34 == 0xD000000000000010 && v35 == 0x8000000258683A10 || (OUTLINED_FUNCTION_146_3() & 1) != 0)
  {
    swift_bridgeObjectRelease();

    uint64_t v100 = type metadata accessor for SearchResult(0);
    uint64_t v101 = v151;
  }
  else
  {
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v131 = type metadata accessor for Logger();
    __swift_project_value_buffer(v131, (uint64_t)static Logging.search);
    swift_bridgeObjectRetain();
    uint64_t v132 = Logger.logObject.getter();
    os_log_type_t v133 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v132, v133))
    {
      long long v134 = (uint8_t *)OUTLINED_FUNCTION_14_1();
      v157[0] = (id)OUTLINED_FUNCTION_13_1();
      *(_DWORD *)long long v134 = 136315138;
      uint64_t v135 = v33[4];
      unint64_t v136 = v33[5];
      swift_bridgeObjectRetain();
      uint64_t v156 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v135, v136, (uint64_t *)v157);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_148_2();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_257DC6000, v132, v133, "Wallet document found with unrecognized type: %s", v134, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_34();
    }
    else
    {

      OUTLINED_FUNCTION_148_2();
    }

    uint64_t v137 = v151;
    uint64_t v100 = type metadata accessor for SearchResult(0);
    uint64_t v101 = v137;
  }
  __swift_storeEnumTagSinglePayload(v101, 1, 1, v100);
  OUTLINED_FUNCTION_119_0();
}

uint64_t implicit closure #68 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(const void *a1)
{
  uint64_t v2 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v2 - 8);
  memcpy(__dst, a1, sizeof(__dst));
  if (one-time initialization token for iso8601PrettyPrinted != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type Contact and conformance Contact();
  uint64_t v3 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v5 = v4;
  static String.Encoding.utf8.getter();
  uint64_t v6 = String.init(data:encoding:)();
  if (v7)
  {
    uint64_t v8 = v6;
    outlined consume of Data._Representation(v3, v5);
  }
  else
  {
    outlined consume of Data._Representation(v3, v5);
    return 0;
  }
  return v8;
}

uint64_t implicit closure #53 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(void *a1, SEL *a2)
{
  return String.init<A>(describing:)();
}

uint64_t LocalIndexClient.formatStringArray(stringArray:)(uint64_t a1)
{
  if (!a1) {
    return 7104878;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t implicit closure #54 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(uint64_t a1, void *a2, SEL *a3)
{
  uint64_t v3 = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(a2, a3);
  LocalIndexClient.formatStringArray(stringArray:)(v3);
  OUTLINED_FUNCTION_3_26();
  return OUTLINED_FUNCTION_148();
}

uint64_t implicit closure #64 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  uint64_t v0 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v0 - 8);
  if (one-time initialization token for iso8601PrettyPrinted != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type FileDocument and conformance FileDocument();
  uint64_t v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v3 = v2;
  static String.Encoding.utf8.getter();
  uint64_t v4 = String.init(data:encoding:)();
  if (v5)
  {
    uint64_t v6 = v4;
    outlined consume of Data._Representation(v1, v3);
  }
  else
  {
    outlined consume of Data._Representation(v1, v3);
    return 0;
  }
  return v6;
}

uint64_t LocalIndexClient.populateMobileSMSDocumentPhotos(results:messageIdToPhotoAttachmentIds:photoAttachmentIdToPhotoItem:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v90 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v121 = (uint64_t)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v120 = (uint64_t)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v119 = (uint64_t)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = type metadata accessor for SearchResultItem(0);
  MEMORY[0x270FA5388](v126);
  uint64_t v12 = (uint64_t *)((char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v92 = type metadata accessor for MobileSMSDocument(0);
  uint64_t v13 = MEMORY[0x270FA5388](v92);
  uint64_t v15 = (uint64_t *)((char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v118 = (uint64_t)&v89 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (uint64_t *)((char *)&v89 - v18);
  uint64_t v20 = type metadata accessor for SearchResult(0);
  uint64_t v122 = *(void *)(v20 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v117 = (uint64_t)&v89 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v89 - v23;
  uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SearchResult));
  MEMORY[0x270FA5388](v129);
  id v98 = (char *)&v89 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SearchResult)?);
  uint64_t v27 = MEMORY[0x270FA5388](v26 - 8);
  uint64_t v128 = (unint64_t *)((char *)&v89 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v27);
  uint64_t v30 = (uint64_t *)((char *)&v89 - v29);
  uint64_t v31 = *(void *)a1;
  uint64_t v124 = *(char **)(*(void *)a1 + 16);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v33 = v130;
  uint64_t v99 = v31;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
LABEL_28:
  }
    uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew()(*((void *)v33 - 32));
  unint64_t v34 = 0;
  uint64_t v91 = 0;
  *(void *)a1 = v31;
  unint64_t v94 = (uint64_t *)a1;
  uint64_t v96 = v12;
  char v127 = v24;
  uint64_t v35 = (uint64_t)v128;
  a1 = v129;
  uint64_t v123 = v30;
  uint64_t v95 = a2;
  uint64_t v97 = v20;
  uint64_t v93 = v19;
  BOOL v36 = (int *)v92;
  while (1)
  {
    uint64_t v33 = v124;
    if ((char *)v34 == v124)
    {
      uint64_t v37 = 1;
      unint64_t v34 = (unint64_t)v124;
    }
    else
    {
      if ((v34 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      uint64_t v33 = *(char **)(v99 + 16);
      if (v34 >= (unint64_t)v33) {
        goto LABEL_25;
      }
      uint64_t v38 = (uint64_t)&v98[*(int *)(v129 + 48)];
      outlined init with copy of VoiceMemo(v99+ ((*(unsigned __int8 *)(v122 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80))+ *(void *)(v122 + 72) * v34, v38, (void (*)(void))type metadata accessor for SearchResult);
      uint64_t v39 = (uint64_t)v128 + *(int *)(v129 + 48);
      *uint64_t v128 = v34;
      uint64_t v40 = v38;
      uint64_t v24 = v127;
      outlined init with take of VoiceMemo(v40, v39, (void (*)(void))type metadata accessor for SearchResult);
      uint64_t v37 = 0;
      ++v34;
      uint64_t v35 = (uint64_t)v128;
      a1 = v129;
    }
    uint64_t v41 = v35;
    __swift_storeEnumTagSinglePayload(v35, v37, 1, a1);
    uint64_t v42 = v41;
    uint64_t v30 = v123;
    outlined init with take of Any?(v42, (uint64_t)v123, &demangling cache variable for type metadata for (offset: Int, element: SearchResult)?);
    if (__swift_getEnumTagSinglePayload((uint64_t)v30, 1, a1) == 1) {
      return swift_bridgeObjectRelease();
    }
    unint64_t v125 = *v30;
    outlined init with take of VoiceMemo((uint64_t)v30 + *(int *)(a1 + 48), (uint64_t)v24, (void (*)(void))type metadata accessor for SearchResult);
    uint64_t v43 = *(void **)&v24[*(int *)(v20 + 20)];
    outlined init with copy of VoiceMemo((uint64_t)v24, (uint64_t)v12, (void (*)(void))type metadata accessor for SearchResultItem);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined destroy of VoiceMemo((uint64_t)v24, (void (*)(void))type metadata accessor for SearchResult);
      outlined destroy of VoiceMemo((uint64_t)v12, (void (*)(void))type metadata accessor for SearchResultItem);
      goto LABEL_21;
    }
    outlined init with take of VoiceMemo((uint64_t)v12, (uint64_t)v19, (void (*)(void))type metadata accessor for MobileSMSDocument);
    uint64_t v30 = v43;
    id v44 = objc_msgSend(v30, sel_uniqueIdentifier);
    uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v47 = v46;

    if (*(void *)(a2 + 16) && (unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(v45, v47), (v49 & 1) != 0))
    {
      uint64_t v50 = *(void *)(*(void *)(a2 + 56) + 8 * v48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v51 = v90;
      swift_bridgeObjectRetain();
      uint64_t v52 = v51;
      uint64_t v53 = v91;
      unint64_t v54 = specialized Sequence.compactMap<A>(_:)(v50, v52);
      swift_bridgeObjectRelease();
      swift_retain();
      uint64_t v55 = specialized Sequence.compactMap<A>(_:)(v54);
      uint64_t v91 = v53;
    }
    else
    {
      uint64_t v55 = MEMORY[0x263F8EE78];
    }
    uint64_t v24 = v127;
    a1 = v129;
    swift_bridgeObjectRelease();
    if (*(void *)(v55 + 16))
    {
      unint64_t v115 = v34;
      uint64_t v109 = *v19;
      uint64_t v104 = v19[1];
      uint64_t v108 = v19[2];
      uint64_t v113 = v55;
      uint64_t v100 = v19[3];
      uint64_t v56 = v100;
      uint64_t v57 = v19[5];
      uint64_t v107 = v19[4];
      uint64_t v101 = v57;
      uint64_t v106 = v19[6];
      uint64_t v58 = v19[8];
      uint64_t v105 = (void *)v19[7];
      uint64_t v59 = (uint64_t)v19 + v36[10];
      uint64_t v102 = v58;
      uint64_t v60 = v19[9];
      outlined init with copy of StructuredQueryEntity?(v59, v119, &demangling cache variable for type metadata for Date?);
      uint64_t v61 = (uint64_t)v19 + v36[11];
      uint64_t v116 = v30;
      outlined init with copy of StructuredQueryEntity?(v61, v120, &demangling cache variable for type metadata for URL?);
      uint64_t v62 = (void *)((char *)v19 + v36[13]);
      uint64_t v64 = *v62;
      uint64_t v63 = v62[1];
      uint64_t v112 = v64;
      uint64_t v111 = v63;
      uint64_t v110 = *(void *)((char *)v19 + v36[16]);
      uint64_t v65 = type metadata accessor for PartialExtractedAttributes(0);
      __swift_storeEnumTagSinglePayload(v121, 1, 1, v65);
      uint64_t v66 = (char *)v15 + v36[17];
      uint64_t v103 = (void *)((char *)v15 + v36[18]);
      uint64_t v114 = (uint64_t)v15 + v36[19];
      __swift_storeEnumTagSinglePayload(v114, 1, 1, v65);
      uint64_t v67 = (uint64_t)v15 + v36[20];
      uint64_t v68 = type metadata accessor for PreExtractedCard(0);
      __swift_storeEnumTagSinglePayload(v67, 1, 1, v68);
      uint64_t v69 = (uint64_t)v15 + v36[21];
      uint64_t v70 = type metadata accessor for PreExtractedContact(0);
      __swift_storeEnumTagSinglePayload(v69, 1, 1, v70);
      uint64_t v71 = (uint64_t)v15 + v36[22];
      uint64_t v72 = type metadata accessor for PreExtractedSharedLink(0);
      __swift_storeEnumTagSinglePayload(v71, 1, 1, v72);
      uint64_t v73 = (uint64_t)v15 + v36[23];
      _s10OmniSearch0B7ContextVSgWOi0_(v130);
      outlined init with take of Any?((uint64_t)v130, v73, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
      uint64_t v74 = v104;
      void *v15 = v109;
      v15[1] = v74;
      v15[2] = v108;
      v15[3] = v56;
      v15[4] = v107;
      v15[5] = v57;
      uint64_t v30 = v105;
      v15[6] = v106;
      v15[7] = v30;
      v15[8] = v58;
      v15[9] = v60;
      uint64_t v75 = v119;
      outlined init with copy of StructuredQueryEntity?(v119, (uint64_t)v15 + v36[10], &demangling cache variable for type metadata for Date?);
      uint64_t v76 = v120;
      outlined init with copy of StructuredQueryEntity?(v120, (uint64_t)v15 + v36[11], &demangling cache variable for type metadata for URL?);
      *(void *)((char *)v15 + v36[12]) = v113;
      uint64_t v77 = (void *)((char *)v15 + v36[14]);
      *uint64_t v77 = 0;
      v77[1] = 0;
      *(void *)((char *)v15 + v36[15]) = MEMORY[0x263F8EE78];
      *(void *)((char *)v15 + v36[16]) = v110;
      uint64_t v78 = (void *)((char *)v15 + v36[13]);
      uint64_t v79 = v111;
      *uint64_t v78 = v112;
      v78[1] = v79;
      *(_OWORD *)uint64_t v66 = 0u;
      *((_OWORD *)v66 + 1) = 0u;
      *((void *)v66 + 4) = 0;
      uint64_t v80 = v103;
      *uint64_t v103 = 0;
      v80[1] = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined assign with take of PartialExtractedAttributes?(v121, v114);
      outlined destroy of EagerResolutionService?(v76, &demangling cache variable for type metadata for URL?);
      outlined destroy of EagerResolutionService?(v75, &demangling cache variable for type metadata for Date?);
      uint64_t v81 = v118;
      outlined init with take of VoiceMemo((uint64_t)v15, v118, (void (*)(void))type metadata accessor for MobileSMSDocument);
      swift_bridgeObjectRelease();
      uint64_t v82 = v81;
      uint64_t v83 = v117;
      outlined init with copy of VoiceMemo(v82, v117, (void (*)(void))type metadata accessor for MobileSMSDocument);
      swift_storeEnumTagMultiPayload();
      uint64_t v20 = v97;
      uint64_t v84 = (void *)(v83 + *(int *)(v97 + 24));
      *uint64_t v84 = 0;
      v84[1] = 0;
      uint64_t v85 = v116;
      *(void *)(v83 + *(int *)(v20 + 20)) = v116;
      uint64_t v12 = v94;
      a1 = *v94;
      uint64_t v24 = v85;
      char v86 = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v12 = a1;
      if ((v86 & 1) == 0)
      {
        a1 = specialized _ArrayBuffer._consumeAndCreateNew()(a1);
        *uint64_t v12 = a1;
      }
      a2 = v95;
      uint64_t v19 = v93;
      uint64_t v33 = &v131;
      unint64_t v34 = v115;
      if ((v125 & 0x8000000000000000) != 0) {
        goto LABEL_26;
      }
      uint64_t v33 = *(char **)(a1 + 16);
      if (v125 >= (unint64_t)v33) {
        goto LABEL_27;
      }
      outlined assign with take of SearchResult(v117, a1+ ((*(unsigned __int8 *)(v122 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80))+ *(void *)(v122 + 72) * v125);
      uint64_t v87 = *v12;

      *uint64_t v12 = v87;
      outlined destroy of VoiceMemo(v118, (void (*)(void))type metadata accessor for MobileSMSDocument);
      outlined destroy of VoiceMemo((uint64_t)v19, (void (*)(void))type metadata accessor for MobileSMSDocument);
      uint64_t v24 = v127;
      outlined destroy of VoiceMemo((uint64_t)v127, (void (*)(void))type metadata accessor for SearchResult);
      uint64_t v12 = v96;
LABEL_21:
      uint64_t v35 = (uint64_t)v128;
      a1 = v129;
    }
    else
    {
      swift_bridgeObjectRelease();

      outlined destroy of VoiceMemo((uint64_t)v19, (void (*)(void))type metadata accessor for MobileSMSDocument);
      outlined destroy of VoiceMemo((uint64_t)v24, (void (*)(void))type metadata accessor for SearchResult);
      uint64_t v12 = v96;
      uint64_t v20 = v97;
      uint64_t v35 = (uint64_t)v128;
    }
  }
}

void MobileSMSDocument.withUpdatedPhotoAttachments(_:)()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v38 = v4;
  uint64_t v6 = v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
  uint64_t v8 = OUTLINED_FUNCTION_81(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_18_8();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v10 = OUTLINED_FUNCTION_81(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_97_1();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v12 = OUTLINED_FUNCTION_81(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_13_12();
  uint64_t v34 = *v0;
  uint64_t v27 = v0[1];
  uint64_t v33 = v0[2];
  uint64_t v28 = v0[3];
  uint64_t v13 = v0[5];
  uint64_t v32 = v0[4];
  uint64_t v31 = v0[6];
  uint64_t v29 = v0[7];
  uint64_t v14 = v0[9];
  uint64_t v30 = v0[8];
  uint64_t v15 = (int *)type metadata accessor for MobileSMSDocument(0);
  outlined init with copy of StructuredQueryEntity?((uint64_t)v0 + v15[10], v2, &demangling cache variable for type metadata for Date?);
  outlined init with copy of StructuredQueryEntity?((uint64_t)v0 + v15[11], v3, &demangling cache variable for type metadata for URL?);
  uint64_t v16 = (uint64_t *)((char *)v0 + v15[13]);
  uint64_t v36 = *v16;
  uint64_t v35 = v16[1];
  uint64_t v26 = *(uint64_t *)((char *)v0 + v15[16]);
  type metadata accessor for PartialExtractedAttributes(0);
  uint64_t v17 = OUTLINED_FUNCTION_197_2();
  OUTLINED_FUNCTION_92_12(v17);
  uint64_t v24 = (char *)v6 + v15[17];
  uint64_t v25 = (void *)((char *)v6 + v15[18]);
  uint64_t v37 = (uint64_t)v6 + v15[19];
  OUTLINED_FUNCTION_92_12(v37);
  uint64_t v18 = type metadata accessor for PreExtractedCard(0);
  OUTLINED_FUNCTION_18_10(v18);
  uint64_t v19 = type metadata accessor for PreExtractedContact(0);
  OUTLINED_FUNCTION_18_10(v19);
  uint64_t v20 = type metadata accessor for PreExtractedSharedLink(0);
  OUTLINED_FUNCTION_18_10(v20);
  uint64_t v21 = (uint64_t)v6 + v15[23];
  _s10OmniSearch0B7ContextVSgWOi0_(v39);
  outlined init with take of Any?((uint64_t)v39, v21, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
  *uint64_t v6 = v34;
  v6[1] = v27;
  v6[2] = v33;
  v6[3] = v28;
  v6[4] = v32;
  v6[5] = v13;
  v6[6] = v31;
  v6[7] = v29;
  v6[8] = v30;
  v6[9] = v14;
  outlined init with copy of StructuredQueryEntity?(v2, (uint64_t)v6 + v15[10], &demangling cache variable for type metadata for Date?);
  outlined init with copy of StructuredQueryEntity?(v3, (uint64_t)v6 + v15[11], &demangling cache variable for type metadata for URL?);
  *(void *)((char *)v6 + v15[12]) = v38;
  uint64_t v22 = (void *)((char *)v6 + v15[14]);
  *uint64_t v22 = 0;
  v22[1] = 0;
  *(void *)((char *)v6 + v15[15]) = MEMORY[0x263F8EE78];
  *(void *)((char *)v6 + v15[16]) = v26;
  uint64_t v23 = (void *)((char *)v6 + v15[13]);
  *uint64_t v23 = v36;
  v23[1] = v35;
  *(_OWORD *)uint64_t v24 = 0u;
  *((_OWORD *)v24 + 1) = 0u;
  *((void *)v24 + 4) = 0;
  *uint64_t v25 = 0;
  v25[1] = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined assign with copy of PartialExtractedAttributes?(v1, v37);
  outlined destroy of EagerResolutionService?(v1, &demangling cache variable for type metadata for PartialExtractedAttributes?);
  outlined destroy of EagerResolutionService?(v3, &demangling cache variable for type metadata for URL?);
  outlined destroy of EagerResolutionService?(v2, &demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_119_0();
}

id @nonobjc LSBundleRecord.__allocating_init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  v9[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v4 = (void *)MEMORY[0x25A2C7AB0]();
  swift_bridgeObjectRelease();
  v9[0] = 0;
  id v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_bundleRecordWithBundleIdentifier_allowPlaceholder_error_, v4, a3 & 1, v9);

  if (v5)
  {
    id v6 = v9[0];
  }
  else
  {
    id v7 = v9[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

uint64_t LocalIndexClient.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  return v0;
}

uint64_t LocalIndexClient.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  uint64_t v1 = OUTLINED_FUNCTION_154_3();
  return MEMORY[0x270FA0228](v1, v2, v3);
}

Swift::String_optional __swiftcall ItemFetcher.queryStringForSourceEmails(mailMessageIds:)(Swift::OpaquePointer mailMessageIds)
{
  uint64_t v1 = *((void *)mailMessageIds._rawValue + 2);
  if (v1)
  {
    uint64_t v2 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    uint64_t v3 = MEMORY[0x263F8EE78];
    do
    {
      uint64_t v5 = *(v2 - 1);
      uint64_t v4 = *v2;
      uint64_t v6 = HIBYTE(*v2) & 0xF;
      if ((*v2 & 0x2000000000000000) == 0) {
        uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
      }
      if (v6)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        unint64_t v7 = *(void *)(v3 + 16);
        if (v7 >= *(void *)(v3 + 24) >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        *(void *)(v3 + 16) = v7 + 1;
        uint64_t v8 = v3 + 16 * v7;
        *(void *)(v8 + 32) = v5;
        *(void *)(v8 + 40) = v4;
      }
      v2 += 2;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
  }
  uint64_t v54 = *(void *)(v3 + 16);
  if (v54)
  {
    char v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = MEMORY[0x263F8EE78];
    uint64_t v53 = (void **)(v3 + 40);
    do
    {
      char v55 = v9;
      uint64_t v12 = (char *)&outlined read-only object #0 of ItemFetcher.queryStringForSourceEmails(mailMessageIds:) + 16 * v10;
      uint64_t v13 = *((void *)v12 + 4);
      uint64_t v14 = *((void *)v12 + 5);
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v15 = v53;
      uint64_t v16 = v54;
      uint64_t v17 = MEMORY[0x263F8EE78];
      do
      {
        uint64_t v19 = (uint64_t)*(v15 - 1);
        uint64_t v18 = *v15;
        uint64_t v20 = ((unint64_t)*v15 >> 56) & 0xF;
        if (((unint64_t)*v15 & 0x2000000000000000) == 0) {
          uint64_t v20 = v19 & 0xFFFFFFFFFFFFLL;
        }
        if (v20)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v21._uint64_t countAndFlagsBits = 572538144;
          v21._object = (void *)0xE400000000000000;
          String.append(_:)(v21);
          v22._uint64_t countAndFlagsBits = v19;
          v22._object = v18;
          String.append(_:)(v22);
          v23._uint64_t countAndFlagsBits = 34;
          v23._object = (void *)0xE100000000000000;
          String.append(_:)(v23);
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v17 = v26;
          }
          unint64_t v24 = *(void *)(v17 + 16);
          if (v24 >= *(void *)(v17 + 24) >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v17 = v27;
          }
          *(void *)(v17 + 16) = v24 + 1;
          uint64_t v25 = v17 + 16 * v24;
          *(void *)(v25 + 32) = v13;
          *(void *)(v25 + 40) = v14;
        }
        v15 += 2;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v28 = *(void *)(v17 + 16);
      uint64_t v29 = *(void *)(v11 + 16);
      unint64_t v30 = v29 + v28;
      if (__OFADD__(v29, v28))
      {
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      if (!swift_isUniquelyReferenced_nonNull_native()
        || (int64_t)v30 > *(void *)(v11 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v11 = v31;
      }
      if (*(void *)(v17 + 16))
      {
        uint64_t v32 = *(void *)(v11 + 16);
        if ((*(void *)(v11 + 24) >> 1) - v32 < v28) {
          goto LABEL_50;
        }
        unint64_t v33 = v11 + 16 * v32 + 32;
        if (v17 + 32 < v33 + 16 * v28 && v33 < v17 + 32 + 16 * v28)
        {
          uint64_t v50 = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          goto LABEL_53;
        }
        swift_arrayInitWithCopy();
        if (v28)
        {
          uint64_t v35 = *(void *)(v11 + 16);
          BOOL v36 = __OFADD__(v35, v28);
          uint64_t v37 = v35 + v28;
          if (v36) {
            goto LABEL_51;
          }
          *(void *)(v11 + 16) = v37;
        }
      }
      else if (v28)
      {
        goto LABEL_49;
      }
      swift_bridgeObjectRelease();
      char v9 = 1;
      uint64_t v10 = 1;
    }
    while ((v55 & 1) == 0);
    swift_release();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v39 = v38;
    unint64_t v30 = *(void *)(v38 + 16);
    uint64_t v28 = v30 + 1;
    if (v30 < *(void *)(v38 + 24) >> 1) {
      goto LABEL_43;
    }
LABEL_52:
    OUTLINED_FUNCTION_150_3();
    uint64_t v39 = v48;
LABEL_43:
    *(void *)(v39 + 16) = v28;
    uint64_t v40 = v39 + 16 * v30;
    *(void *)(v40 + 32) = 0xD000000000000029;
    *(void *)(v40 + 40) = 0x8000000258683A30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v41 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v43 = v42;
    swift_bridgeObjectRelease();
    v44._uint64_t countAndFlagsBits = v41;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v45._uint64_t countAndFlagsBits = 41;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    unint64_t v46 = *(void *)(v39 + 16);
    if (v46 >= *(void *)(v39 + 24) >> 1)
    {
      OUTLINED_FUNCTION_150_3();
      uint64_t v39 = v49;
    }
    *(void *)(v39 + 16) = v46 + 1;
    uint64_t v47 = v39 + 16 * v46;
    *(void *)(v47 + 32) = 40;
    *(void *)(v47 + 40) = 0xE100000000000000;
    BidirectionalCollection<>.joined(separator:)();
    OUTLINED_FUNCTION_3_26();
  }
  else
  {
    swift_release();
  }
  uint64_t v50 = OUTLINED_FUNCTION_148();
LABEL_53:
  result.value._object = v51;
  result.value._uint64_t countAndFlagsBits = v50;
  return result;
}

uint64_t ItemFetcher.fetchSourceEmailItems(for:)(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = v1;
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t ItemFetcher.fetchSourceEmailItems(for:)()
{
  uint64_t v29 = v0;
  uint64_t v1 = v0[8];
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = (*(uint64_t (**)(void *))(*(void *)v1 + 80))(v3);
  unint64_t v6 = v5;
  swift_release();
  if (!v6)
  {
    type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for CSSearchableItem);
    Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_149();
    OUTLINED_FUNCTION_36_1();
    __asm { BRAA            X2, X16 }
  }
  uint64_t v27 = v4;
  if (one-time initialization token for search != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  v0[9] = __swift_project_value_buffer(v7, (uint64_t)static Logging.search);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v11 = Set.description.getter();
    unint64_t v13 = v12;
    swift_bridgeObjectRelease();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v14 = v27;
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v6, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_257DC6000, v8, v9, "Fetching InstantAnswer source emails for %s, query: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_34();
    OUTLINED_FUNCTION_34();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_148_2();

    uint64_t v14 = v27;
  }
  id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F02AD0]), sel_init);
  v0[10] = v17;
  if (one-time initialization token for fetchAttributes != -1) {
    swift_once();
  }
  uint64_t v18 = v0[7];
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v17, sel_setFetchAttributes_, isa);

  objc_msgSend(v17, sel_setMaxCount_, *(void *)(v18 + 16));
  objc_msgSend(v17, sel_setMaxRankedResultCount_, objc_msgSend(v17, sel_maxCount));
  Class v20 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v17, sel_setFetchAttributes_, v20);

  outlined bridged method (mbnn) of @objc CSSearchQueryContext.bundleIDs.setter((uint64_t)&outlined read-only object #0 of ItemFetcher.fetchSourceEmailItems(for:), v17);
  objc_allocWithZone(MEMORY[0x263F02AC8]);
  id v21 = v17;
  id v22 = @nonobjc CSSearchQuery.init(queryString:queryContext:)(v14, v6, v17);
  v0[11] = v22;
  uint64_t v23 = swift_task_alloc();
  v0[12] = v23;
  *(void *)(v23 + 16) = v22;
  unint64_t v24 = (void *)swift_task_alloc();
  v0[13] = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : CSSearchableItem]);
  *unint64_t v24 = v0;
  v24[1] = ItemFetcher.fetchSourceEmailItems(for:);
  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_36_1();
  return MEMORY[0x270FA2318]();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_2();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  uint64_t *v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

void ItemFetcher.fetchSourceEmailItems(for:)()
{
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void **)(v0 + 88);
    uint64_t v16 = *(void **)(v0 + 80);
    os_log_type_t type = v2;
    uint64_t v3 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315394;
    uint64_t v4 = swift_bridgeObjectRetain();
    specialized Set.init<A>(_:)(v4);
    uint64_t v5 = Set.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v3 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v8 = Set.description.getter();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_257DC6000, v1, type, "Finished fetching InstantAnswer source emails with %s for %s", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_34();
    OUTLINED_FUNCTION_34();
  }
  else
  {
    uint64_t v11 = *(void **)(v0 + 88);

    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_148_2();
  }
  OUTLINED_FUNCTION_36_1();
  __asm { BRAA            X2, X16 }
}

uint64_t closure #1 in ItemFetcher.fetchSourceEmailItems(for:)(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[String : CSSearchableItem], Never>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = MEMORY[0x263F8EE80];
  uint64_t v17 = partial apply for closure #1 in closure #1 in ItemFetcher.fetchSourceEmailItems(for:);
  uint64_t v18 = v7;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v14 = 1107296256;
  uint64_t v15 = thunk for @escaping @callee_guaranteed (@guaranteed [CSSearchableItem]) -> ();
  uint64_t v16 = &block_descriptor_10;
  uint64_t v8 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(a2, sel_setFoundItemsHandler_, v8);
  _Block_release(v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)&aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  *(void *)(v10 + ((v6 + v9 + 7) & 0xFFFFFFFFFFFFFFF8)) = v7;
  uint64_t v17 = partial apply for closure #2 in closure #1 in ItemFetcher.fetchSourceEmailItems(for:);
  uint64_t v18 = v10;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v14 = 1107296256;
  uint64_t v15 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  uint64_t v16 = &block_descriptor_1111;
  uint64_t v11 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(a2, sel_setCompletionHandler_, v11);
  _Block_release(v11);
  objc_msgSend(a2, sel_start);
  return swift_release();
}

uint64_t closure #1 in closure #1 in ItemFetcher.fetchSourceEmailItems(for:)(unint64_t a1, void *a2)
{
  uint64_t isUniquelyReferenced_nonNull_native = a1;
  if (a1 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      uint64_t v5 = a2 + 2;
      uint64_t v32 = isUniquelyReferenced_nonNull_native;
      unint64_t v33 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
      uint64_t v6 = 4;
      uint64_t v31 = v4;
      while (1)
      {
        if (v33) {
          id v7 = (id)MEMORY[0x25A2C8550](v6 - 4, isUniquelyReferenced_nonNull_native);
        }
        else {
          id v7 = *(id *)(isUniquelyReferenced_nonNull_native + 8 * v6);
        }
        uint64_t v8 = v7;
        a2 = (void *)(v6 - 3);
        if (__OFADD__(v6 - 4, 1))
        {
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
        uint64_t v9 = outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.filename.getter(objc_msgSend(v7, sel_attributeSet), (SEL *)&selRef_mailMessageID);
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = v9;
          swift_beginAccess();
          uint64_t v34 = v8;
          id v13 = v8;
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          a2 = (void *)*v5;
          uint64_t v35 = (void *)*v5;
          uint64_t v14 = v5;
          *uint64_t v5 = 0x8000000000000000;
          uint64_t v15 = v12;
          unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v11);
          uint64_t v18 = a2[2];
          BOOL v19 = (v17 & 1) == 0;
          Swift::Int v20 = v18 + v19;
          if (__OFADD__(v18, v19)) {
            goto LABEL_21;
          }
          unint64_t v21 = v16;
          char v22 = v17;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, CSSearchableItem>);
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v20))
          {
            unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v11);
            if ((v22 & 1) != (v24 & 1))
            {
              uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return result;
            }
            unint64_t v21 = v23;
          }
          a2 = v35;
          if (v22)
          {
            uint64_t v25 = v35[7];

            *(void *)(v25 + 8 * v21) = v13;
          }
          else
          {
            v35[(v21 >> 6) + 8] |= 1 << v21;
            uint64_t v26 = (uint64_t *)(v35[6] + 16 * v21);
            *uint64_t v26 = v15;
            v26[1] = v11;
            *(void *)(v35[7] + 8 * v21) = v13;
            uint64_t v27 = v35[2];
            BOOL v28 = __OFADD__(v27, 1);
            uint64_t v29 = v27 + 1;
            if (v28) {
              goto LABEL_22;
            }
            v35[2] = v29;
            swift_bridgeObjectRetain();
          }
          uint64_t v5 = v14;
          *uint64_t v14 = v35;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_endAccess();
          uint64_t v4 = v31;
          uint64_t isUniquelyReferenced_nonNull_native = v32;
          a2 = (void *)(v6 - 3);
          uint64_t v8 = v34;
        }

        ++v6;
        if (a2 == (void *)v4) {
          return swift_bridgeObjectRelease();
        }
      }
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in closure #1 in ItemFetcher.fetchSourceEmailItems(for:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t ItemFetcher.deinit()
{
  return v0;
}

uint64_t ItemFetcher.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t ItemFetcher.init()()
{
  return v0;
}

uint64_t protocol witness for ItemFetcherProtocol.fetchSourceEmailItems(for:) in conformance ItemFetcher(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 88) + **(int **)(**(void **)v1 + 88));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = dispatch thunk of ItemFetcherProtocol.fetchSourceEmailItems(for:);
  return v6(a1);
}

void EmailDocument.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v71 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_184_0();
  uint64_t v70 = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v8 = OUTLINED_FUNCTION_81(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_97_1();
  uint64_t v9 = type metadata accessor for Date();
  OUTLINED_FUNCTION_0_10();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_95_1();
  uint64_t v15 = v13 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v77 = (uint64_t)&v59 - v17;
  id v18 = objc_msgSend(a1, sel_uniqueIdentifier);
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v68 = v20;
  uint64_t v69 = v19;

  id v21 = OUTLINED_FUNCTION_69_12();
  id v22 = objc_msgSend(v21, sel_attributeForKey_, *MEMORY[0x263F029A8]);

  if (v22)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_116_7();
  }
  outlined init with take of Any?((uint64_t)v76, (uint64_t)v74, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v59 = v11;
  if (v75)
  {
    if (OUTLINED_FUNCTION_164_2())
    {
      uint64_t v67 = v72;
      unint64_t v23 = v73;
      goto LABEL_9;
    }
  }
  else
  {
    outlined destroy of EagerResolutionService?((uint64_t)v74, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v67 = 0;
  unint64_t v23 = 0xE000000000000000;
LABEL_9:
  unint64_t v66 = v23;
  id v24 = OUTLINED_FUNCTION_69_12();
  uint64_t v65 = outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.subject.getter(v24);
  uint64_t v64 = v25;
  id v26 = OUTLINED_FUNCTION_69_12();
  uint64_t v63 = outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.filename.getter(v26, (SEL *)&selRef_contentSnippet);
  uint64_t v62 = v27;
  id v28 = OUTLINED_FUNCTION_69_12();
  uint64_t v61 = outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.authorNames.getter(v28);
  id v29 = OUTLINED_FUNCTION_69_12();
  uint64_t v30 = outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentPaths.getter(v29, (SEL *)&selRef_authorEmailAddresses);
  id v31 = OUTLINED_FUNCTION_69_12();
  id v32 = objc_msgSend(v31, sel_attributeForKey_, *MEMORY[0x263F02710]);

  if (v32)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_116_7();
  }
  outlined init with take of Any?((uint64_t)v76, (uint64_t)v74, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v75)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (OUTLINED_FUNCTION_164_2())
    {
      uint64_t v33 = v72;
      goto LABEL_17;
    }
  }
  else
  {
    outlined destroy of EagerResolutionService?((uint64_t)v74, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v33 = MEMORY[0x263F8EE78];
LABEL_17:
  uint64_t v60 = v33;
  id v34 = OUTLINED_FUNCTION_69_12();
  uint64_t v35 = outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentPaths.getter(v34, (SEL *)&selRef_recipientEmailAddresses);
  id v36 = OUTLINED_FUNCTION_69_12();
  id v37 = objc_msgSend(v36, sel_mailDateReceived);

  if (v37)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 32);
    v38(v2, v15, v9);
    __swift_storeEnumTagSinglePayload(v2, 0, 1, v9);
    if (__swift_getEnumTagSinglePayload(v2, 1, v9) != 1)
    {
      v38(v77, v2, v9);
      goto LABEL_22;
    }
  }
  else
  {
    __swift_storeEnumTagSinglePayload(v2, 1, 1, v9);
  }
  static Date.now.getter();
  outlined destroy of EagerResolutionService?(v2, &demangling cache variable for type metadata for Date?);
LABEL_22:
  id v39 = OUTLINED_FUNCTION_69_12();
  uint64_t v40 = outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentPaths.getter(v39, (SEL *)&selRef_attachmentNames);
  id v41 = OUTLINED_FUNCTION_69_12();
  uint64_t v42 = outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentPaths.getter(v41, (SEL *)&selRef_attachmentTypes);
  id v43 = OUTLINED_FUNCTION_69_12();
  uint64_t v44 = outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentPaths.getter(v43, (SEL *)&selRef_attachmentPaths);
  id v45 = OUTLINED_FUNCTION_69_12();
  id v46 = objc_msgSend(v45, sel_mailRead);

  if (v46)
  {
    unsigned int v47 = objc_msgSend(v46, sel_BOOLValue);

    int v48 = v47 ^ 1;
  }
  else
  {
    int v48 = 1;
  }
  LODWORD(v59) = v48;
  uint64_t v49 = outlined bridged method (pb) of @objc CSSearchableItem.bundleID.getter(a1);
  if (v50)
  {
    if (v49 == 0xD000000000000014 && v50 == 0x800000025867C750) {
      char v51 = 1;
    }
    else {
      char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v51 = 0;
  }
  if (v44) {
    uint64_t v52 = v44;
  }
  else {
    uint64_t v52 = MEMORY[0x263F8EE78];
  }
  if (!v42) {
    uint64_t v42 = MEMORY[0x263F8EE78];
  }
  if (!v40) {
    uint64_t v40 = MEMORY[0x263F8EE78];
  }
  if (!v35) {
    uint64_t v35 = MEMORY[0x263F8EE78];
  }
  if (!v30) {
    uint64_t v30 = MEMORY[0x263F8EE78];
  }
  if (v61) {
    uint64_t v53 = v61;
  }
  else {
    uint64_t v53 = MEMORY[0x263F8EE78];
  }
  type metadata accessor for PartialExtractedAttributes(0);
  OUTLINED_FUNCTION_166_3();
  uint64_t v54 = v70;
  __swift_storeEnumTagSinglePayload(v70, 1, 1, v55);
  type metadata accessor for FeatureFlagService();
  uint64_t v56 = swift_allocObject();
  BYTE1(v57) = v51 & 1;
  LOBYTE(v57) = v59;
  EmailDocument.init(id:mailMessageId:subject:body:authorNames:from:to:cc:date:attachmentNames:attachmentTypes:attachmentPaths:unread:hydratable:dataDetectorResults:extractedEventsLLMConsumableDescription:partialExtractedAttributes:csItem:featureFlagService:)(v69, (uint64_t)v68, v67, v66, v65, (uint64_t)v64, v63, v62, v53, v30, v60, v35, v77, v40, v42, v52, v57, (uint64_t)v74, 0,
    0,
    v54,
    (uint64_t)a1,
    v56,
    v58,
    v59,
    v60,
    v61,
    v62,
    v63,
    SBYTE1(v63),
    v64,
    v65,
    v66,
    v67,
    v68);
}

uint64_t CSSearchableItem.isContentType(_:)()
{
  uint64_t v2 = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_15();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for UTType();
  OUTLINED_FUNCTION_0_10();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_59_0();
  outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.contentType.getter(objc_msgSend(v2, sel_attributeSet));
  if (v12)
  {
    UTType.init(_:)();
    if (OUTLINED_FUNCTION_15_29(v7) != 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v1, v7, v8);
      char v13 = UTType.conforms(to:)();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v1, v8);
      return v13 & 1;
    }
    outlined destroy of EagerResolutionService?(v7, &demangling cache variable for type metadata for UTType?);
  }
  char v13 = 0;
  return v13 & 1;
}

uint64_t CSSearchableItem.isSharedLink.getter()
{
  id v1 = objc_msgSend(v0, sel_attributeSet);
  uint64_t v2 = (void *)CSSearchableItemAttributeSet.spotlightSearchResult.getter();

  if (v2)
  {
    uint64_t v3 = outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.filename.getter(v2, (SEL *)&selRef_sectionBundleIdentifier);
    uint64_t v2 = v4;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v2)
  {
    if (v3 == v5 && v2 == v6) {
      char v8 = 1;
    }
    else {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v8 = 0;
  }
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t CSSearchableItemAttributeSet.spotlightSearchResult.getter()
{
  type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for CSCustomAttributeKey);
  id v1 = (void *)static CSCustomAttributeKey.spotlightSFSearchResultKey.getter();
  id v2 = objc_msgSend(v0, sel_valueForCustomKey_, v1);

  if (v2)
  {
    self;
    OUTLINED_FUNCTION_175_2();
    uint64_t result = swift_dynamicCastObjCClass();
    if (result) {
      return result;
    }
    swift_unknownObjectRelease();
  }
  return 0;
}

uint64_t static CSCustomAttributeKey.spotlightSFSearchResultKey.getter()
{
  type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for CSCustomAttributeKey);
  v0._object = (void *)0x8000000258683A80;
  v0._uint64_t countAndFlagsBits = 0xD000000000000018;
  uint64_t result = (unint64_t)CSCustomAttributeKey.__allocating_init(keyName:)(v0);
  if (!result)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

CSCustomAttributeKey_optional __swiftcall CSCustomAttributeKey.__allocating_init(keyName:)(Swift::String keyName)
{
  object = keyName._object;
  uint64_t countAndFlagsBits = keyName._countAndFlagsBits;
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v4 = (void *)MEMORY[0x25A2C7AB0](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  uint64_t v5 = (objc_class *)objc_msgSend(v3, sel_initWithKeyName_, v4);

  uint64_t v7 = v5;
  result.value.super.Class isa = v7;
  result.is_nil = v6;
  return result;
}

void key path setter for CSSearchableItemAttributeSet.spotlightSearchResult : CSSearchableItemAttributeSet(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  CSSearchableItemAttributeSet.spotlightSearchResult.setter(v1);
}

void (*CSSearchableItemAttributeSet.spotlightSearchResult.modify(uint64_t *a1))(void **a1, char a2)
{
  a1[1] = v1;
  *a1 = CSSearchableItemAttributeSet.spotlightSearchResult.getter();
  return CSSearchableItemAttributeSet.spotlightSearchResult.modify;
}

void CSSearchableItemAttributeSet.spotlightSearchResult.modify(void **a1, char a2)
{
  id v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    CSSearchableItemAttributeSet.spotlightSearchResult.setter(v2);
  }
  else
  {
    CSSearchableItemAttributeSet.spotlightSearchResult.setter(*a1);
  }
}

void CSSearchableItemAttributeSet.timeIsUnknownBool.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  OUTLINED_FUNCTION_145();
  a17 = v19;
  a18 = v20;
  uint64_t v21 = type metadata accessor for Date();
  OUTLINED_FUNCTION_0_10();
  uint64_t v23 = v22;
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_59_0();
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v26 = OUTLINED_FUNCTION_81(v25);
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_95_1();
  uint64_t v29 = v27 - v28;
  MEMORY[0x270FA5388](v30);
  id v32 = (char *)&a9 - v31;
  id v33 = objc_msgSend(v18, sel_startDate);
  if (!v33)
  {
    OUTLINED_FUNCTION_121_7((uint64_t)v32, 1);
    goto LABEL_8;
  }
  id v34 = v33;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v35 = *(void (**)(void))(v23 + 32);
  OUTLINED_FUNCTION_184_3();
  v35();
  OUTLINED_FUNCTION_121_7((uint64_t)v32, 0);
  OUTLINED_FUNCTION_53_2((uint64_t)v32, 1, v21);
  if (v36)
  {
LABEL_8:
    uint64_t v41 = (uint64_t)v32;
LABEL_11:
    outlined destroy of EagerResolutionService?(v41, &demangling cache variable for type metadata for Date?);
    goto LABEL_12;
  }
  outlined destroy of EagerResolutionService?((uint64_t)v32, &demangling cache variable for type metadata for Date?);
  id v37 = objc_msgSend(v18, sel_endDate);
  if (!v37)
  {
    OUTLINED_FUNCTION_121_7(v29, 1);
    goto LABEL_10;
  }
  uint64_t v38 = v37;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_184_3();
  v35();
  OUTLINED_FUNCTION_121_7(v29, 0);
  OUTLINED_FUNCTION_53_2(v29, 1, v21);
  if (v36)
  {
LABEL_10:
    uint64_t v41 = v29;
    goto LABEL_11;
  }
  outlined destroy of EagerResolutionService?(v29, &demangling cache variable for type metadata for Date?);
  id v39 = objc_msgSend(v18, sel_timeIsUnknown);
  if (v39)
  {
    uint64_t v40 = v39;
    objc_msgSend(v39, sel_BOOLValue);
  }
LABEL_12:
  OUTLINED_FUNCTION_141_0();
}

uint64_t CSSearchableItemAttributeSet.keyStrings.getter()
{
  return CSSearchableItemAttributeSet.keyStrings.getter((uint64_t (*)(uint64_t, uint64_t *))_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys11AnyHashableVypG_SSs5NeverOTg505_ss11de31VypSSIgnno_AB3key_yp5valuetSSs5F111OIegnrzr_TR073_sSo28CSSearchableItemAttributeSetC10OmniSearchE10keyStringsSaySSGvgSSs11aB10V_yptXEfU_Tf3nnnpf_nTf1cn_n);
}

uint64_t CSSearchableItemAttributeSet.kvStrings.getter()
{
  return CSSearchableItemAttributeSet.keyStrings.getter((uint64_t (*)(uint64_t, uint64_t *))_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys11AnyHashableVypG_SS_SSts5NeverOTg505_ss11de37VypS2SIgnnoo_AB3key_yp5valuetSS_SSts5f75OIegnrzr_TR070_sSo28CSSearchableItemAttributeSetC10OmniSearchE9kvStringsSayM40_SStGvgr7_SSts11aB10V_yptXEfU_Tf3nnnpf_nTf1cn_n);
}

uint64_t CSSearchableItemAttributeSet.keyStrings.getter(uint64_t (*a1)(uint64_t, uint64_t *))
{
  id v3 = objc_msgSend(v1, sel_attributeDictionary);
  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v5 = a1(v4, &v7);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v2);
  Set.description.getter();
  OUTLINED_FUNCTION_3_26();
  return OUTLINED_FUNCTION_148();
}

uint64_t specialized closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  type metadata accessor for NSUserDefaults(0, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
  static NSUserDefaults.spotlightQueryBundleIDs.getter();
  uint64_t v5 = MEMORY[0x25A2C7E60]();
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v3;
  uint64_t v9 = *v3;
  *id v3 = 0x8000000000000000;
  Swift::Int v10 = *(void *)(v9 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [String]>);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(*(void *)(v13 + 56) + 8 * v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  _NativeDictionary._delete(at:)();
  *id v3 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v13;

  id v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v3;
  uint64_t v9 = *v3;
  *id v3 = 0x8000000000000000;
  Swift::Int v10 = *(void *)(v9 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, CSSearchableItem>);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(*(void *)(v13 + 56) + 8 * v6);
  type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for CSSearchableItem);
  _NativeDictionary._delete(at:)();
  *id v3 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v4;
  *uint64_t v4 = 0x8000000000000000;
  a4(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  *uint64_t v4 = v11;
  return swift_bridgeObjectRelease();
}

uint64_t outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(void *a1)
{
  return outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(a1, (SEL *)&selRef_authorNames);
}

uint64_t outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.displayName.getter(void *a1)
{
  return outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(a1, (SEL *)&selRef_displayName);
}

uint64_t outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentPaths.getter(void *a1)
{
  return outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentPaths.getter(a1, (SEL *)&selRef_attachmentPaths);
}

uint64_t outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentTypes.getter(void *a1)
{
  return outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentPaths.getter(a1, (SEL *)&selRef_attachmentTypes);
}

uint64_t outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentNames.getter(void *a1)
{
  return outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentPaths.getter(a1, (SEL *)&selRef_attachmentNames);
}

uint64_t type metadata accessor for ItemFetcher()
{
  return self;
}

uint64_t outlined bridged method (pb) of @objc SFResultSection.results.getter(void *a1, SEL *a2, unint64_t *a3)
{
  id v4 = [a1 *a2];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  type metadata accessor for NSUserDefaults(0, a3);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

uint64_t outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  id v3 = v2;
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.attachmentPaths.getter(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];

  if (!v3) {
    return 0;
  }
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t outlined bridged method (ob) of @objc SFSearchResult.sectionBundleIdentifier.getter(void *a1)
{
  return outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.filename.getter(a1, (SEL *)&selRef_sectionBundleIdentifier);
}

uint64_t specialized LocalIndexClient.__allocating_init(searchAgent:itemFetcher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v26 = a7;
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v12);
  uint64_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v25 - v20;
  (*(void (**)(char *))(v16 + 32))((char *)&v25 - v20);
  uint64_t v22 = swift_allocObject();
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a2, a5);
  uint64_t v23 = specialized LocalIndexClient.init(searchAgent:itemFetcher:)((uint64_t)v19, (uint64_t)v14, v22, a4, a5, a6, v26);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a2, a5);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v21, a4);
  return v23;
}

uint64_t specialized LocalIndexClient.init(searchAgent:itemFetcher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v20 = a4;
  uint64_t v21 = a6;
  boxed_opaque_existential_1Tm = __swift_allocate_boxed_opaque_existential_1Tm((uint64_t *)&v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1Tm, a1, a4);
  uint64_t v17 = a5;
  uint64_t v18 = a7;
  uint64_t v14 = __swift_allocate_boxed_opaque_existential_1Tm((uint64_t *)&v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(v14, a2, a5);
  outlined init with take of SageSearchClient(&v19, a3 + 16);
  outlined init with take of SageSearchClient(&v16, a3 + 56);
  return a3;
}

uint64_t sub_25846D128()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for implicit closure #4 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return implicit closure #4 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(*(void **)(v0 + 16));
}

unsigned char **partial apply for closure #1 in OSLogArguments.append(_:)(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t partial apply for closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_25846D19C()
{
  return OUTLINED_FUNCTION_1_29(v0, 24);
}

uint64_t partial apply for implicit closure #6 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return *(void *)(v0 + 16);
}

uint64_t partial apply for implicit closure #9 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return implicit closure #9 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(*(void **)(v0 + 16));
}

uint64_t partial apply for implicit closure #11 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return implicit closure #11 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(*(void **)(v0 + 16));
}

uint64_t partial apply for implicit closure #12 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return implicit closure #11 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(*(void **)(v0 + 16));
}

uint64_t partial apply for implicit closure #13 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return implicit closure #13 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(*(void **)(v0 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t partial apply for specialized closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return specialized closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, *(void (**)(uint64_t *__return_ptr))(v3 + 16));
}

uint64_t sub_25846D250()
{
  swift_bridgeObjectRelease();
  uint64_t v0 = OUTLINED_FUNCTION_10_20();
  return MEMORY[0x270FA0238](v0, v1, v2);
}

uint64_t partial apply for implicit closure #15 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return implicit closure #15 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(*(void *)(v0 + 16));
}

uint64_t partial apply for implicit closure #16 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return implicit closure #16 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(v0 + 16);
}

uint64_t objectdestroy_154Tm()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  }
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25846D30C()
{
  OUTLINED_FUNCTION_145();
  type metadata accessor for VoiceMemo(0);
  OUTLINED_FUNCTION_4_31();
  OUTLINED_FUNCTION_68_15();
  swift_bridgeObjectRelease();
  uint64_t v1 = type metadata accessor for Date();
  if (!OUTLINED_FUNCTION_61_12(v1))
  {
    OUTLINED_FUNCTION_1_0();
    uint64_t v2 = OUTLINED_FUNCTION_74_14();
    v3(v2);
  }
  OUTLINED_FUNCTION_122_6();
  if (!OUTLINED_FUNCTION_15_29(v0))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v4();
  }
  OUTLINED_FUNCTION_40_17();
  OUTLINED_FUNCTION_141_0();
  return MEMORY[0x270FA0238](v5, v6, v7);
}

void partial apply for implicit closure #79 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  uint64_t v0 = type metadata accessor for VoiceMemo(0);
  OUTLINED_FUNCTION_53_0(v0);
  OUTLINED_FUNCTION_27_22(*(unsigned __int8 *)(v1 + 80));
  implicit closure #18 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)();
}

uint64_t sub_25846D478()
{
  OUTLINED_FUNCTION_145();
  type metadata accessor for Safari(0);
  OUTLINED_FUNCTION_4_31();
  OUTLINED_FUNCTION_68_15();
  swift_bridgeObjectRelease();
  uint64_t v2 = v1 + *(int *)(v0 + 24);
  type metadata accessor for URL();
  if (!OUTLINED_FUNCTION_15_29(v2))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v3();
  }
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_2_0();
  if (!OUTLINED_FUNCTION_15_29(v1 + *(int *)(v0 + 36)))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v4();
  }
  OUTLINED_FUNCTION_40_17();
  OUTLINED_FUNCTION_141_0();
  return MEMORY[0x270FA0238](v5, v6, v7);
}

void partial apply for implicit closure #78 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  uint64_t v0 = type metadata accessor for Safari(0);
  OUTLINED_FUNCTION_53_0(v0);
  OUTLINED_FUNCTION_27_22(*(unsigned __int8 *)(v1 + 80));
  implicit closure #18 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)();
}

uint64_t sub_25846D5F8()
{
  uint64_t v1 = (int *)(type metadata accessor for JournalEntry(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + v1[9];
  type metadata accessor for URL();
  if (!OUTLINED_FUNCTION_15_29(v5))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v6();
  }
  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

void partial apply for implicit closure #77 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  uint64_t v0 = type metadata accessor for JournalEntry(0);
  OUTLINED_FUNCTION_53_0(v0);
  OUTLINED_FUNCTION_27_22(*(unsigned __int8 *)(v1 + 80));
  implicit closure #18 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)();
}

uint64_t sub_25846D770()
{
  OUTLINED_FUNCTION_145();
  type metadata accessor for PhoneHistory(0);
  OUTLINED_FUNCTION_4_31();
  OUTLINED_FUNCTION_68_15();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = type metadata accessor for Date();
  if (!OUTLINED_FUNCTION_61_12(v1))
  {
    OUTLINED_FUNCTION_1_0();
    uint64_t v2 = OUTLINED_FUNCTION_74_14();
    v3(v2);
  }
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_122_6();
  if (!OUTLINED_FUNCTION_15_29(v0))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v4();
  }
  OUTLINED_FUNCTION_40_17();
  OUTLINED_FUNCTION_141_0();
  return MEMORY[0x270FA0238](v5, v6, v7);
}

void partial apply for implicit closure #76 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  uint64_t v0 = type metadata accessor for PhoneHistory(0);
  OUTLINED_FUNCTION_53_0(v0);
  OUTLINED_FUNCTION_27_22(*(unsigned __int8 *)(v1 + 80));
  implicit closure #18 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)();
}

uint64_t sub_25846D90C()
{
  OUTLINED_FUNCTION_145();
  type metadata accessor for VoicemailTranscript(0);
  OUTLINED_FUNCTION_4_31();
  OUTLINED_FUNCTION_68_15();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = type metadata accessor for Date();
  if (!OUTLINED_FUNCTION_61_12(v1))
  {
    OUTLINED_FUNCTION_1_0();
    uint64_t v2 = OUTLINED_FUNCTION_74_14();
    v3(v2);
  }
  OUTLINED_FUNCTION_122_6();
  if (!OUTLINED_FUNCTION_15_29(v0))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v4();
  }
  OUTLINED_FUNCTION_40_17();
  OUTLINED_FUNCTION_141_0();
  return MEMORY[0x270FA0238](v5, v6, v7);
}

void partial apply for implicit closure #75 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  uint64_t v0 = type metadata accessor for VoicemailTranscript(0);
  OUTLINED_FUNCTION_53_0(v0);
  OUTLINED_FUNCTION_27_22(*(unsigned __int8 *)(v1 + 80));
  implicit closure #18 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)();
}

uint64_t sub_25846DA80()
{
  OUTLINED_FUNCTION_145();
  type metadata accessor for Reminder(0);
  OUTLINED_FUNCTION_4_31();
  OUTLINED_FUNCTION_68_15();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_87_11();
  if (!OUTLINED_FUNCTION_15_29(v1))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v3();
  }
  if (!OUTLINED_FUNCTION_15_29(v2 + *(int *)(v0 + 32)))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v4();
  }
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_122_6();
  if (!OUTLINED_FUNCTION_15_29(v0))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v5();
  }
  OUTLINED_FUNCTION_40_17();
  OUTLINED_FUNCTION_141_0();
  return MEMORY[0x270FA0238](v6, v7, v8);
}

void partial apply for implicit closure #74 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  uint64_t v0 = type metadata accessor for Reminder(0);
  OUTLINED_FUNCTION_53_0(v0);
  OUTLINED_FUNCTION_27_22(*(unsigned __int8 *)(v1 + 80));
  implicit closure #18 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)();
}

uint64_t sub_25846DC3C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v0 = OUTLINED_FUNCTION_154_3();
  return MEMORY[0x270FA0238](v0, v1, v2);
}

uint64_t partial apply for implicit closure #68 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return implicit closure #68 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)((const void *)(v0 + 16));
}

uint64_t outlined retain of Contact(uint64_t a1)
{
  return a1;
}

uint64_t sub_25846DD30()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for implicit closure #64 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return implicit closure #64 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)();
}

uint64_t sub_25846DD84()
{
  OUTLINED_FUNCTION_145();
  type metadata accessor for NoteDocument(0);
  OUTLINED_FUNCTION_4_31();
  OUTLINED_FUNCTION_68_15();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_87_11();
  if (!OUTLINED_FUNCTION_15_29(v1))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v3();
  }
  if (!OUTLINED_FUNCTION_15_29(v2 + *(int *)(v0 + 36)))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v4();
  }
  OUTLINED_FUNCTION_40_17();
  OUTLINED_FUNCTION_141_0();
  return MEMORY[0x270FA0238](v5, v6, v7);
}

void partial apply for implicit closure #63 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  uint64_t v0 = type metadata accessor for NoteDocument(0);
  OUTLINED_FUNCTION_53_0(v0);
  OUTLINED_FUNCTION_27_22(*(unsigned __int8 *)(v1 + 80));
  implicit closure #18 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)();
}

uint64_t sub_25846DEFC()
{
  OUTLINED_FUNCTION_145();
  type metadata accessor for CalendarEvent(0);
  OUTLINED_FUNCTION_4_31();
  OUTLINED_FUNCTION_68_15();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_87_11();
  if (!OUTLINED_FUNCTION_15_29(v1))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v3();
  }
  if (!OUTLINED_FUNCTION_15_29(v2 + *(int *)(v0 + 32)))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v4();
  }
  OUTLINED_FUNCTION_2_0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_0();
  if (*(void *)(v2 + *(int *)(v0 + 52)))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_40_17();
  OUTLINED_FUNCTION_141_0();
  return MEMORY[0x270FA0238](v5, v6, v7);
}

void partial apply for implicit closure #62 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  uint64_t v0 = type metadata accessor for CalendarEvent(0);
  OUTLINED_FUNCTION_53_0(v0);
  OUTLINED_FUNCTION_27_22(*(unsigned __int8 *)(v1 + 80));
  implicit closure #18 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)();
}

uint64_t partial apply for implicit closure #52 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return implicit closure #53 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(*(void **)(v0 + 16), (SEL *)&selRef_contentSnippet);
}

uint64_t partial apply for implicit closure #53 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return implicit closure #53 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(*(void **)(v0 + 16), (SEL *)&selRef_subject);
}

uint64_t partial apply for implicit closure #54 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return implicit closure #54 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(*(void *)(v0 + 16), *(void **)(v0 + 24), (SEL *)&selRef_authorNames);
}

uint64_t objectdestroy_442Tm()
{
  swift_release();

  uint64_t v1 = OUTLINED_FUNCTION_10_20();
  return MEMORY[0x270FA0238](v1, v2, v3);
}

uint64_t partial apply for implicit closure #55 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return implicit closure #54 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(*(void *)(v0 + 16), *(void **)(v0 + 24), (SEL *)&selRef_recipientNames);
}

uint64_t partial apply for implicit closure #22 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return implicit closure #22 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(*(void **)(v0 + 16), (SEL *)&selRef_mailMessageID);
}

uint64_t partial apply for implicit closure #24 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return implicit closure #22 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(*(void **)(v0 + 16), (SEL *)&selRef_eventMessageIdentifier);
}

uint64_t partial apply for implicit closure #26 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return implicit closure #22 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(*(void **)(v0 + 16), (SEL *)&selRef_eventSourceBundleIdentifier);
}

void *partial apply for implicit closure #28 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)@<X0>(void *a1@<X8>)
{
  return implicit closure #28 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(a1);
}

uint64_t partial apply for specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)()
{
  return specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t partial apply for implicit closure #29 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return implicit closure #29 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(*(void *)(v0 + 16), (void (*)(void))outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.eventMessageIdentifier.getter);
}

uint64_t partial apply for implicit closure #30 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return implicit closure #29 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(*(void *)(v0 + 16), (void (*)(void))outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.mailMessageID.getter);
}

uint64_t partial apply for implicit closure #31 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return implicit closure #29 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(*(void *)(v0 + 16), (void (*)(void))outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.eventSourceBundleIdentifier.getter);
}

uint64_t partial apply for implicit closure #32 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return implicit closure #32 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(*(void **)(v0 + 16));
}

void partial apply for implicit closure #49 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  uint64_t v0 = type metadata accessor for Trip(0);
  OUTLINED_FUNCTION_53_0(v0);
  OUTLINED_FUNCTION_27_22(*(unsigned __int8 *)(v1 + 80));
  implicit closure #18 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)();
}

uint64_t objectdestroy_705Tm()
{
  OUTLINED_FUNCTION_145();
  type metadata accessor for Trip(0);
  OUTLINED_FUNCTION_4_31();
  OUTLINED_FUNCTION_68_15();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_87_11();
  if (!OUTLINED_FUNCTION_15_29(v1))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v3();
  }
  if (!OUTLINED_FUNCTION_15_29(v2 + *(int *)(v0 + 92)))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v4();
  }
  OUTLINED_FUNCTION_122_6();
  if (!OUTLINED_FUNCTION_15_29(v0))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v5();
  }
  OUTLINED_FUNCTION_40_17();
  OUTLINED_FUNCTION_141_0();
  return MEMORY[0x270FA0238](v6, v7, v8);
}

uint64_t partial apply for implicit closure #50 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return partial apply for implicit closure #50 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)((void (*)(void))type metadata accessor for Trip, (uint64_t (*)(void))Trip.llmConsumableDescription.getter);
}

void partial apply for implicit closure #47 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  uint64_t v0 = type metadata accessor for Party(0);
  OUTLINED_FUNCTION_53_0(v0);
  OUTLINED_FUNCTION_27_22(*(unsigned __int8 *)(v1 + 80));
  implicit closure #18 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)();
}

uint64_t objectdestroy_743Tm()
{
  OUTLINED_FUNCTION_145();
  type metadata accessor for Party(0);
  OUTLINED_FUNCTION_4_31();
  OUTLINED_FUNCTION_68_15();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_87_11();
  if (!OUTLINED_FUNCTION_15_29(v1))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v3();
  }
  if (!OUTLINED_FUNCTION_15_29(v2 + *(int *)(v0 + 100)))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v4();
  }
  OUTLINED_FUNCTION_122_6();
  if (!OUTLINED_FUNCTION_15_29(v0))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v5();
  }
  OUTLINED_FUNCTION_40_17();
  OUTLINED_FUNCTION_141_0();
  return MEMORY[0x270FA0238](v6, v7, v8);
}

uint64_t partial apply for implicit closure #48 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return partial apply for implicit closure #50 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)((void (*)(void))type metadata accessor for Party, (uint64_t (*)(void))Party.llmConsumableDescription.getter);
}

void partial apply for implicit closure #45 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  uint64_t v0 = type metadata accessor for Appointment(0);
  OUTLINED_FUNCTION_53_0(v0);
  OUTLINED_FUNCTION_27_22(*(unsigned __int8 *)(v1 + 80));
  implicit closure #18 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)();
}

uint64_t objectdestroy_781Tm()
{
  OUTLINED_FUNCTION_145();
  type metadata accessor for Appointment(0);
  OUTLINED_FUNCTION_4_31();
  OUTLINED_FUNCTION_68_15();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_87_11();
  if (!OUTLINED_FUNCTION_15_29(v1))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v3();
  }
  if (!OUTLINED_FUNCTION_15_29(v2 + *(int *)(v0 + 112)))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v4();
  }
  OUTLINED_FUNCTION_40_17();
  OUTLINED_FUNCTION_141_0();
  return MEMORY[0x270FA0238](v5, v6, v7);
}

uint64_t partial apply for implicit closure #46 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return partial apply for implicit closure #50 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)((void (*)(void))type metadata accessor for Appointment, (uint64_t (*)(void))Appointment.llmConsumableDescription.getter);
}

void partial apply for implicit closure #43 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  uint64_t v0 = type metadata accessor for TicketedShow(0);
  OUTLINED_FUNCTION_53_0(v0);
  OUTLINED_FUNCTION_27_22(*(unsigned __int8 *)(v1 + 80));
  implicit closure #18 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)();
}

uint64_t objectdestroy_819Tm()
{
  OUTLINED_FUNCTION_145();
  type metadata accessor for TicketedShow(0);
  OUTLINED_FUNCTION_4_31();
  OUTLINED_FUNCTION_68_15();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = type metadata accessor for URL();
  if (!OUTLINED_FUNCTION_61_12(v3))
  {
    OUTLINED_FUNCTION_1_0();
    uint64_t v4 = OUTLINED_FUNCTION_74_14();
    v5(v4);
  }
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_87_11();
  if (!OUTLINED_FUNCTION_15_29(v1))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v6();
  }
  if (!OUTLINED_FUNCTION_15_29(v2 + *(int *)(v0 + 128)))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v7();
  }
  OUTLINED_FUNCTION_40_17();
  OUTLINED_FUNCTION_141_0();
  return MEMORY[0x270FA0238](v8, v9, v10);
}

uint64_t partial apply for implicit closure #44 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return partial apply for implicit closure #50 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)((void (*)(void))type metadata accessor for TicketedShow, (uint64_t (*)(void))TicketedShow.llmConsumableDescription.getter);
}

void partial apply for implicit closure #41 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  uint64_t v0 = type metadata accessor for TicketedTransportation(0);
  OUTLINED_FUNCTION_53_0(v0);
  OUTLINED_FUNCTION_27_22(*(unsigned __int8 *)(v1 + 80));
  implicit closure #18 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)();
}

uint64_t objectdestroy_857Tm()
{
  OUTLINED_FUNCTION_145();
  type metadata accessor for TicketedTransportation(0);
  OUTLINED_FUNCTION_4_31();
  OUTLINED_FUNCTION_68_15();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_87_11();
  if (!OUTLINED_FUNCTION_15_29(v1))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v3();
  }
  if (!OUTLINED_FUNCTION_15_29(v2 + *(int *)(v0 + 116)))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v4();
  }
  OUTLINED_FUNCTION_40_17();
  OUTLINED_FUNCTION_141_0();
  return MEMORY[0x270FA0238](v5, v6, v7);
}

uint64_t partial apply for implicit closure #42 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return partial apply for implicit closure #50 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)((void (*)(void))type metadata accessor for TicketedTransportation, (uint64_t (*)(void))TicketedTransportation.llmConsumableDescription.getter);
}

void partial apply for implicit closure #39 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  uint64_t v0 = type metadata accessor for RentalCarReservation(0);
  OUTLINED_FUNCTION_53_0(v0);
  OUTLINED_FUNCTION_27_22(*(unsigned __int8 *)(v1 + 80));
  implicit closure #18 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)();
}

uint64_t objectdestroy_895Tm()
{
  OUTLINED_FUNCTION_145();
  type metadata accessor for RentalCarReservation(0);
  OUTLINED_FUNCTION_4_31();
  OUTLINED_FUNCTION_68_15();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_87_11();
  if (!OUTLINED_FUNCTION_15_29(v1))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v3();
  }
  if (!OUTLINED_FUNCTION_15_29(v2 + *(int *)(v0 + 144)))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v4();
  }
  OUTLINED_FUNCTION_40_17();
  OUTLINED_FUNCTION_141_0();
  return MEMORY[0x270FA0238](v5, v6, v7);
}

uint64_t partial apply for implicit closure #40 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return partial apply for implicit closure #50 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)((void (*)(void))type metadata accessor for RentalCarReservation, (uint64_t (*)(void))RentalCarReservation.llmConsumableDescription.getter);
}

void partial apply for implicit closure #37 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  uint64_t v0 = type metadata accessor for RestaurantReservation(0);
  OUTLINED_FUNCTION_53_0(v0);
  OUTLINED_FUNCTION_27_22(*(unsigned __int8 *)(v1 + 80));
  implicit closure #18 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)();
}

uint64_t objectdestroy_933Tm()
{
  OUTLINED_FUNCTION_145();
  type metadata accessor for RestaurantReservation(0);
  OUTLINED_FUNCTION_4_31();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v0 = type metadata accessor for DateComponents();
  if (!OUTLINED_FUNCTION_61_12(v0))
  {
    OUTLINED_FUNCTION_1_0();
    uint64_t v1 = OUTLINED_FUNCTION_74_14();
    v2(v1);
  }
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_156_3();
  OUTLINED_FUNCTION_141_0();
  return MEMORY[0x270FA0238](v3, v4, v5);
}

uint64_t partial apply for implicit closure #38 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return partial apply for implicit closure #50 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)((void (*)(void))type metadata accessor for RestaurantReservation, (uint64_t (*)(void))RestaurantReservation.llmConsumableDescription.getter);
}

void partial apply for implicit closure #35 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  uint64_t v0 = type metadata accessor for HotelReservation(0);
  OUTLINED_FUNCTION_53_0(v0);
  OUTLINED_FUNCTION_27_22(*(unsigned __int8 *)(v1 + 80));
  implicit closure #18 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)();
}

uint64_t objectdestroy_971Tm()
{
  OUTLINED_FUNCTION_145();
  type metadata accessor for HotelReservation(0);
  OUTLINED_FUNCTION_4_31();
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = v1 + v3 + *(int *)(v0 + 56);
  type metadata accessor for DateComponents();
  if (!OUTLINED_FUNCTION_15_29(v4))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v5();
  }
  if (!OUTLINED_FUNCTION_15_29(v1 + v3 + *(int *)(v0 + 60)))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v6();
  }
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_156_3();
  OUTLINED_FUNCTION_141_0();
  return MEMORY[0x270FA0238](v7, v8, v9);
}

uint64_t partial apply for implicit closure #36 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return partial apply for implicit closure #50 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)((void (*)(void))type metadata accessor for HotelReservation, (uint64_t (*)(void))HotelReservation.llmConsumableDescription.getter);
}

uint64_t sub_25846F564()
{
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_10_20();
  return MEMORY[0x270FA0238](v0, v1, v2);
}

void partial apply for implicit closure #33 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  uint64_t v0 = type metadata accessor for FlightReservation(0);
  OUTLINED_FUNCTION_53_0(v0);
  OUTLINED_FUNCTION_27_22(*(unsigned __int8 *)(v1 + 80));
  implicit closure #18 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)();
}

uint64_t objectdestroy_1009Tm()
{
  OUTLINED_FUNCTION_104_0();
  type metadata accessor for FlightReservation(0);
  OUTLINED_FUNCTION_4_31();
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = v3 + v0[13];
  type metadata accessor for URL();
  if (!OUTLINED_FUNCTION_15_29(v4))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v5();
  }
  if (!OUTLINED_FUNCTION_15_29(v3 + v0[14]))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v6();
  }
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  uint64_t v7 = v3 + v0[18];
  uint64_t v8 = type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_1_0();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v10(v3 + v0[19], v8);
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  uint64_t v11 = type metadata accessor for Date();
  if (!OUTLINED_FUNCTION_61_12(v11))
  {
    OUTLINED_FUNCTION_1_0();
    uint64_t v12 = OUTLINED_FUNCTION_74_14();
    v13(v12);
  }
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_156_3();
  OUTLINED_FUNCTION_119_0();
  return MEMORY[0x270FA0238](v14, v15, v16);
}

uint64_t partial apply for implicit closure #34 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return partial apply for implicit closure #50 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)((void (*)(void))type metadata accessor for FlightReservation, (uint64_t (*)(void))FlightReservation.llmConsumableDescription.getter);
}

uint64_t partial apply for implicit closure #50 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)(void (*a1)(void), uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_25846F968()
{
  uint64_t v5 = v1;
  type metadata accessor for Photo(0);
  OUTLINED_FUNCTION_4_31();
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (int *)((v7 + 16) & ~v7);
  uint64_t v90 = *(void *)(v9 + 64);
  uint64_t v10 = (char *)v8 + v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_140_3();
  type metadata accessor for Date();
  if (!OUTLINED_FUNCTION_15_29(v2))
  {
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_14_25();
    v11();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = OUTLINED_FUNCTION_140_3();
  uint64_t v13 = type metadata accessor for PartialExtractedAttributes(v12);
  if (!OUTLINED_FUNCTION_67_13(v13))
  {
    uint64_t v89 = (v7 + 16) & ~v7;
    swift_bridgeObjectRelease();
    uint64_t v14 = OUTLINED_FUNCTION_77_13();
    uint64_t v15 = type metadata accessor for RentalCarReservation(v14);
    if (!OUTLINED_FUNCTION_29_23(v15))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!OUTLINED_FUNCTION_15_29(v4 + *(int *)(((v7 + 16) & ~v7) + 0x8C)))
      {
        OUTLINED_FUNCTION_9_22();
        OUTLINED_FUNCTION_14_25();
        v16();
      }
      v4 += *(int *)(((v7 + 16) & ~v7) + 0x90);
      if (!OUTLINED_FUNCTION_15_29(v4))
      {
        OUTLINED_FUNCTION_9_22();
        OUTLINED_FUNCTION_14_25();
        v17();
      }
    }
    uint64_t v18 = OUTLINED_FUNCTION_77_13();
    uint64_t v19 = type metadata accessor for TicketedTransportation(v18);
    if (!OUTLINED_FUNCTION_29_23(v19))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!OUTLINED_FUNCTION_15_29(v4 + *(int *)(((v7 + 16) & ~v7) + 0x70)))
      {
        OUTLINED_FUNCTION_9_22();
        OUTLINED_FUNCTION_14_25();
        v20();
      }
      v4 += *(int *)(((v7 + 16) & ~v7) + 0x74);
      if (!OUTLINED_FUNCTION_15_29(v4))
      {
        OUTLINED_FUNCTION_9_22();
        OUTLINED_FUNCTION_14_25();
        v21();
      }
    }
    uint64_t v22 = OUTLINED_FUNCTION_77_13();
    uint64_t v23 = type metadata accessor for TicketedShow(v22);
    uint64_t v88 = v3;
    if (!OUTLINED_FUNCTION_29_23(v23))
    {
      uint64_t v24 = v7;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v25 = v4 + *(int *)(((v7 + 16) & ~v7) + 0x74);
      uint64_t v26 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v25, 1, v26))
      {
        OUTLINED_FUNCTION_1_0();
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
      }
      OUTLINED_FUNCTION_7_1();
      if (!OUTLINED_FUNCTION_15_29(v4 + v8[31]))
      {
        OUTLINED_FUNCTION_9_22();
        OUTLINED_FUNCTION_14_25();
        v28();
      }
      v4 += v8[32];
      uint64_t v7 = v24;
      uint64_t v3 = v88;
      if (!OUTLINED_FUNCTION_15_29(v4))
      {
        OUTLINED_FUNCTION_9_22();
        OUTLINED_FUNCTION_14_25();
        v29();
      }
    }
    uint64_t v30 = OUTLINED_FUNCTION_77_13();
    uint64_t v31 = type metadata accessor for Appointment(v30);
    if (!OUTLINED_FUNCTION_29_23(v31))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!OUTLINED_FUNCTION_15_29(v4 + v8[27]))
      {
        OUTLINED_FUNCTION_9_22();
        OUTLINED_FUNCTION_14_25();
        v32();
      }
      v4 += v8[28];
      if (!OUTLINED_FUNCTION_15_29(v4))
      {
        OUTLINED_FUNCTION_9_22();
        OUTLINED_FUNCTION_14_25();
        v33();
      }
    }
    uint64_t v34 = OUTLINED_FUNCTION_77_13();
    uint64_t v35 = type metadata accessor for Party(v34);
    if (!OUTLINED_FUNCTION_29_23(v35))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!OUTLINED_FUNCTION_15_29(v4 + v8[24]))
      {
        OUTLINED_FUNCTION_9_22();
        OUTLINED_FUNCTION_14_25();
        v36();
      }
      if (!OUTLINED_FUNCTION_15_29(v4 + v8[25]))
      {
        OUTLINED_FUNCTION_9_22();
        OUTLINED_FUNCTION_14_25();
        v37();
      }
      v4 += v8[26];
      uint64_t v38 = type metadata accessor for URL();
      if (!OUTLINED_FUNCTION_29_23(v38))
      {
        OUTLINED_FUNCTION_1_0();
        uint64_t v39 = OUTLINED_FUNCTION_107_9();
        v40(v39);
      }
    }
    uint64_t v41 = OUTLINED_FUNCTION_77_13();
    uint64_t v42 = type metadata accessor for Trip(v41);
    if (!OUTLINED_FUNCTION_29_23(v42))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!OUTLINED_FUNCTION_15_29(v4 + v8[22]))
      {
        OUTLINED_FUNCTION_9_22();
        OUTLINED_FUNCTION_14_25();
        v43();
      }
      if (!OUTLINED_FUNCTION_15_29(v4 + v8[23]))
      {
        OUTLINED_FUNCTION_9_22();
        OUTLINED_FUNCTION_14_25();
        v44();
      }
      v4 += v8[25];
      uint64_t v45 = type metadata accessor for URL();
      if (!OUTLINED_FUNCTION_29_23(v45))
      {
        OUTLINED_FUNCTION_1_0();
        uint64_t v46 = OUTLINED_FUNCTION_107_9();
        v47(v46);
      }
    }
    uint64_t v48 = OUTLINED_FUNCTION_77_13();
    uint64_t v49 = type metadata accessor for FlightReservation(v48);
    if (!OUTLINED_FUNCTION_29_23(v49))
    {
      uint64_t v86 = v7;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for URL();
      if (!OUTLINED_FUNCTION_108_6())
      {
        OUTLINED_FUNCTION_1_0();
        uint64_t v50 = OUTLINED_FUNCTION_109_8();
        v51(v50);
      }
      uint64_t v87 = v5;
      if (!OUTLINED_FUNCTION_108_6())
      {
        OUTLINED_FUNCTION_1_0();
        uint64_t v52 = OUTLINED_FUNCTION_109_8();
        v53(v52);
      }
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      uint64_t v54 = v4 + v8[18];
      uint64_t v55 = type metadata accessor for DateComponents();
      OUTLINED_FUNCTION_1_0();
      uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
      v57(v54, v55);
      v57(v4 + v8[19], v55);
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      if (!OUTLINED_FUNCTION_15_29(v4 + v8[38]))
      {
        OUTLINED_FUNCTION_9_22();
        OUTLINED_FUNCTION_14_25();
        v58();
      }
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      uint64_t v7 = v86;
      uint64_t v5 = v87;
      uint64_t v3 = v88;
    }
    uint64_t v59 = OUTLINED_FUNCTION_77_13();
    uint64_t v60 = type metadata accessor for HotelReservation(v59);
    if (!OUTLINED_FUNCTION_29_23(v60))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for DateComponents();
      if (!OUTLINED_FUNCTION_108_6())
      {
        OUTLINED_FUNCTION_1_0();
        uint64_t v61 = OUTLINED_FUNCTION_109_8();
        v62(v61);
      }
      if (!OUTLINED_FUNCTION_108_6())
      {
        OUTLINED_FUNCTION_1_0();
        uint64_t v63 = OUTLINED_FUNCTION_109_8();
        v64(v63);
      }
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_7_1();
      uint64_t v3 = v88;
    }
    v2 += v3[13];
    uint64_t v65 = type metadata accessor for RestaurantReservation(0);
    uint64_t v8 = (int *)v89;
    if (!OUTLINED_FUNCTION_67_13(v65))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_77_13();
      uint64_t v66 = type metadata accessor for DateComponents();
      if (!OUTLINED_FUNCTION_29_23(v66))
      {
        OUTLINED_FUNCTION_1_0();
        uint64_t v67 = OUTLINED_FUNCTION_107_9();
        v68(v67);
      }
      OUTLINED_FUNCTION_34_24();
      OUTLINED_FUNCTION_34_24();
      OUTLINED_FUNCTION_34_24();
      OUTLINED_FUNCTION_34_24();
      OUTLINED_FUNCTION_34_24();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_34_24();
      OUTLINED_FUNCTION_34_24();
      OUTLINED_FUNCTION_34_24();
      uint64_t v8 = (int *)v89;
    }
  }
  uint64_t v69 = OUTLINED_FUNCTION_140_3();
  uint64_t v70 = type metadata accessor for PreExtractedCard(v69);
  if (!OUTLINED_FUNCTION_67_13(v70))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!OUTLINED_FUNCTION_15_29(v2 + v3[10]))
    {
      OUTLINED_FUNCTION_9_22();
      OUTLINED_FUNCTION_14_25();
      v71();
    }
    if (!OUTLINED_FUNCTION_15_29(v2 + v3[11]))
    {
      OUTLINED_FUNCTION_9_22();
      OUTLINED_FUNCTION_14_25();
      v72();
    }
    OUTLINED_FUNCTION_34_24();
    OUTLINED_FUNCTION_34_24();
    OUTLINED_FUNCTION_34_24();
    if (!OUTLINED_FUNCTION_15_29(v2 + v3[15]))
    {
      OUTLINED_FUNCTION_9_22();
      OUTLINED_FUNCTION_14_25();
      v73();
    }
    OUTLINED_FUNCTION_34_24();
    OUTLINED_FUNCTION_34_24();
    OUTLINED_FUNCTION_34_24();
    OUTLINED_FUNCTION_34_24();
    OUTLINED_FUNCTION_34_24();
    OUTLINED_FUNCTION_34_24();
    OUTLINED_FUNCTION_34_24();
    OUTLINED_FUNCTION_34_24();
  }
  uint64_t v74 = OUTLINED_FUNCTION_140_3();
  uint64_t v75 = type metadata accessor for PreExtractedContact(v74);
  if (!OUTLINED_FUNCTION_67_13(v75))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!OUTLINED_FUNCTION_15_29(v2 + v3[11]))
    {
      OUTLINED_FUNCTION_9_22();
      OUTLINED_FUNCTION_14_25();
      v76();
    }
    OUTLINED_FUNCTION_34_24();
    swift_bridgeObjectRelease();
    if (!OUTLINED_FUNCTION_15_29(v2 + v3[14]))
    {
      OUTLINED_FUNCTION_9_22();
      OUTLINED_FUNCTION_14_25();
      v77();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_34_24();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v78 = OUTLINED_FUNCTION_140_3();
  uint64_t v79 = type metadata accessor for PreExtractedSharedLink(v78);
  if (!OUTLINED_FUNCTION_67_13(v79))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_77_13();
    uint64_t v80 = type metadata accessor for URL();
    if (!OUTLINED_FUNCTION_29_23(v80))
    {
      OUTLINED_FUNCTION_1_0();
      uint64_t v81 = OUTLINED_FUNCTION_107_9();
      v82(v81);
    }
    OUTLINED_FUNCTION_34_24();
    OUTLINED_FUNCTION_34_24();
    OUTLINED_FUNCTION_34_24();
    if (!OUTLINED_FUNCTION_15_29(v2 + v3[12]))
    {
      OUTLINED_FUNCTION_9_22();
      OUTLINED_FUNCTION_14_25();
      v83();
    }
    if (!OUTLINED_FUNCTION_15_29(v2 + v3[13]))
    {
      OUTLINED_FUNCTION_9_22();
      OUTLINED_FUNCTION_14_25();
      v84();
    }
    OUTLINED_FUNCTION_34_24();
    OUTLINED_FUNCTION_34_24();
    OUTLINED_FUNCTION_34_24();
    OUTLINED_FUNCTION_34_24();
    OUTLINED_FUNCTION_34_24();
  }
  if (*(void *)&v10[*(int *)(v0 + 84) + 8])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return MEMORY[0x270FA0238](v5, (char *)v8 + v90, v7 | 7);
}

void partial apply for implicit closure #18 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  uint64_t v0 = type metadata accessor for Photo(0);
  OUTLINED_FUNCTION_53_0(v0);
  OUTLINED_FUNCTION_27_22(*(unsigned __int8 *)(v1 + 80));
  implicit closure #18 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)();
}

uint64_t sub_258470B88()
{
  return OUTLINED_FUNCTION_1_29(v0, 24);
}

double partial apply for implicit closure #3 in LocalIndexClient.findMatches(for:maxItemCount:spQUParse:)()
{
  return *(double *)(v0 + 16);
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t partial apply for closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(void (**)(void))(v3 + 16));
}

uint64_t partial apply for closure #1 in ItemFetcher.fetchSourceEmailItems(for:)(uint64_t a1)
{
  return closure #1 in ItemFetcher.fetchSourceEmailItems(for:)(a1, *(void **)(v1 + 16));
}

uint64_t sub_258470BC4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CSSearchableItemAttributeSet.spotlightSearchResult.getter();
  *a1 = result;
  return result;
}

uint64_t dispatch thunk of LocalIndexSearchAgent.activate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LocalIndexSearchAgent.deactivate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LocalIndexSearchAgent.search(with:)()
{
  OUTLINED_FUNCTION_171_3();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_44_0(v0);
  *uint64_t v1 = v2;
  v1[1] = dispatch thunk of AnswerSynthesisController.preprocessSearchEntity(for:with:answerSynthesisMetrics:);
  uint64_t v3 = OUTLINED_FUNCTION_133_3();
  return v4(v3);
}

uint64_t dispatch thunk of ItemFetcherProtocol.fetchSourceEmailItems(for:)()
{
  OUTLINED_FUNCTION_171_3();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_44_0(v0);
  *uint64_t v1 = v2;
  v1[1] = dispatch thunk of ItemFetcherProtocol.fetchSourceEmailItems(for:);
  uint64_t v3 = OUTLINED_FUNCTION_133_3();
  return v4(v3);
}

uint64_t type metadata accessor for LocalIndexClient()
{
  return self;
}

uint64_t method lookup function for LocalIndexClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for LocalIndexClient);
}

uint64_t dispatch thunk of LocalIndexClient.__allocating_init(searchAgent:itemFetcher:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t method lookup function for ItemFetcher(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ItemFetcher);
}

uint64_t dispatch thunk of ItemFetcher.queryStringForSourceEmails(mailMessageIds:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of ItemFetcher.fetchSourceEmailItems(for:)(uint64_t a1)
{
  uint64_t v7 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 88) + **(int **)(*(void *)v1 + 88));
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_44_0(v3);
  *uint64_t v4 = v5;
  v4[1] = dispatch thunk of ItemFetcher.fetchSourceEmailItems(for:);
  return v7(a1);
}

uint64_t dispatch thunk of ItemFetcher.fetchSourceEmailItems(for:)()
{
  OUTLINED_FUNCTION_27();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_2();
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_149();
  return v5(v2);
}

uint64_t dispatch thunk of ItemFetcher.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_25847104C()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in closure #1 in ItemFetcher.fetchSourceEmailItems(for:)(unint64_t a1)
{
  return closure #1 in closure #1 in ItemFetcher.fetchSourceEmailItems(for:)(a1, v1);
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t sub_2584710A4()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[String : CSSearchableItem], Never>);
  OUTLINED_FUNCTION_1_0();
  uint64_t v1 = *(unsigned __int8 *)(v0 + 80) | 7;
  OUTLINED_FUNCTION_16_1();
  v2();
  swift_release();
  uint64_t v3 = OUTLINED_FUNCTION_148();
  return MEMORY[0x270FA0238](v3, v4, v1);
}

uint64_t partial apply for closure #2 in closure #1 in ItemFetcher.fetchSourceEmailItems(for:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[String : CSSearchableItem], Never>);
  OUTLINED_FUNCTION_12_0(v0);
  return closure #2 in closure #1 in ItemFetcher.fetchSourceEmailItems(for:)();
}

unint64_t lazy protocol witness table accessor for type Contact and conformance Contact()
{
  unint64_t result = lazy protocol witness table cache variable for type Contact and conformance Contact;
  if (!lazy protocol witness table cache variable for type Contact and conformance Contact)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Contact and conformance Contact);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Contact and conformance Contact;
  if (!lazy protocol witness table cache variable for type Contact and conformance Contact)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Contact and conformance Contact);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Contact and conformance Contact;
  if (!lazy protocol witness table cache variable for type Contact and conformance Contact)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Contact and conformance Contact);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Contact and conformance Contact;
  if (!lazy protocol witness table cache variable for type Contact and conformance Contact)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Contact and conformance Contact);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Photo and conformance Photo(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_99_9();
  v4();
  return a2;
}

uint64_t outlined init with copy of VoiceMemo(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_51_2();
  v4();
  return a2;
}

uint64_t outlined destroy of VoiceMemo(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_16_1();
  v3();
  return a1;
}

uint64_t outlined init with take of VoiceMemo(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_99_9();
  v4();
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_21()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t OUTLINED_FUNCTION_1_29(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA0238](a1, a2, 7);
}

uint64_t OUTLINED_FUNCTION_2_25()
{
  return closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 - 208), v0 - 120, v0 - 112, v0 - 104);
}

uint64_t OUTLINED_FUNCTION_7_34()
{
  return closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 - 208), v0 - 120, v0 - 112, v0 - 104);
}

uint64_t OUTLINED_FUNCTION_8_17()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_13_33(uint64_t result)
{
  *(void *)(v2 - 112) = 0;
  *(void *)(v2 - 104) = result;
  *uint64_t v1 = 258;
  *(void *)(v2 - 120) = v1 + 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_15_29(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_18_30()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_21_24()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_22_25()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_23_20(uint64_t result)
{
  *(void *)(v2 - 112) = 0;
  *(void *)(v2 - 104) = result;
  *uint64_t v1 = 515;
  *(void *)(v2 - 120) = v1 + 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_27_22@<X0>(uint64_t a1@<X8>)
{
  return v1 + ((a1 + 16) & ~a1);
}

uint64_t OUTLINED_FUNCTION_28_19(uint64_t a1)
{
  return outlined init with take of VoiceMemo(v1, a1 + v3, v2);
}

uint64_t OUTLINED_FUNCTION_29_23(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_32_21()
{
  return __swift_getEnumTagSinglePayload(v0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_33_21()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_34_24()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_35_24(_WORD *a1@<X8>)
{
  *a1 = 258;
  *(void *)(v1 - 120) = a1 + 1;
}

uint64_t OUTLINED_FUNCTION_36_22()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_38_20(uint64_t result)
{
  *(unsigned char *)(result + 16) = 8;
  return result;
}

uint64_t OUTLINED_FUNCTION_39_20()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_40_17()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_41_22(uint64_t result)
{
  *(unsigned char *)(result + 16) = 8;
  return result;
}

uint64_t OUTLINED_FUNCTION_43_22(uint64_t result)
{
  *(unsigned char *)(result + 16) = 32;
  return result;
}

void OUTLINED_FUNCTION_45_14()
{
  *(unsigned char *)(v0 - 80) = 0;
}

uint64_t OUTLINED_FUNCTION_46_19()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_47_17()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_48_14()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_49_18()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_50_24()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_51_20(uint64_t result)
{
  *(unsigned char *)(result + 16) = 37;
  return result;
}

uint64_t OUTLINED_FUNCTION_53_15()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_55_19()
{
  return outlined init with copy of VoiceMemo(v1, v2, v0);
}

uint64_t OUTLINED_FUNCTION_56_13(uint64_t result)
{
  *(unsigned char *)(result + 16) = 8;
  return result;
}

uint64_t OUTLINED_FUNCTION_58_14()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_61_12(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_62_13()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

BOOL OUTLINED_FUNCTION_65_12()
{
  return os_log_type_enabled(v0, v1);
}

void OUTLINED_FUNCTION_66_15(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t OUTLINED_FUNCTION_67_13(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_68_15()
{
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_69_12()
{
  return [v0 (SEL)(v1 + 1047)];
}

unint64_t OUTLINED_FUNCTION_70_12()
{
  return STACK[0x600];
}

uint64_t OUTLINED_FUNCTION_72_11()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_73_11()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_74_14()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_76_10(uint64_t a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v8 = va_arg(va3, void);
  return closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))va3, (uint64_t)va, (uint64_t)va1, (uint64_t)va2);
}

uint64_t OUTLINED_FUNCTION_77_13()
{
  return 0;
}

void OUTLINED_FUNCTION_85_14(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

uint64_t OUTLINED_FUNCTION_86_10(uint64_t result)
{
  *(unsigned char *)(result + 16) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_87_11()
{
  return type metadata accessor for Date();
}

uint64_t OUTLINED_FUNCTION_90_11()
{
  return swift_release();
}

BOOL OUTLINED_FUNCTION_91_11()
{
  LODWORD(STACK[0x5D8]) = v0;
  uint64_t v2 = STACK[0x5E0];
  return os_log_type_enabled(v2, (os_log_type_t)v0);
}

uint64_t OUTLINED_FUNCTION_92_12(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_95_10()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_100_10()
{
  return swift_release();
}

id OUTLINED_FUNCTION_102_7()
{
  uint64_t v3 = *(const char **)(v1 + 1024);
  return [v0 v3];
}

uint64_t OUTLINED_FUNCTION_103_11()
{
  return specialized Array.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_105_12(uint64_t result)
{
  *(unsigned char *)(result + 16) = v1;
  return result;
}

BOOL OUTLINED_FUNCTION_106_10()
{
  os_log_type_t v2 = LODWORD(STACK[0x5F8]);
  return os_log_type_enabled(v0, v2);
}

uint64_t OUTLINED_FUNCTION_107_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_108_6()
{
  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_109_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_110_8()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_111_9(uint64_t a1)
{
  *(void *)(v1 - 160) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_114_9()
{
  return swift_release();
}

double OUTLINED_FUNCTION_116_7()
{
  double result = 0.0;
  *(_OWORD *)(v0 - 128) = 0u;
  *(_OWORD *)(v0 - 112) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_117_6()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_118_7()
{
  return STACK[0x5C8];
}

uint64_t OUTLINED_FUNCTION_121_7(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_122_6()
{
  return type metadata accessor for URL();
}

uint64_t OUTLINED_FUNCTION_123_7()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_124_7()
{
  uint64_t v2 = STACK[0x4C8];
  return outlined destroy of EagerResolutionService?(v2, v0);
}

uint64_t OUTLINED_FUNCTION_127_5()
{
  return swift_allocObject();
}

double OUTLINED_FUNCTION_129_5()
{
  double result = 0.0;
  *(_OWORD *)(v0 - 160) = 0u;
  *(_OWORD *)(v0 - 144) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_130_4()
{
  uint64_t v2 = STACK[0x548];
  return outlined destroy of EagerResolutionService?(v2, v0);
}

uint64_t OUTLINED_FUNCTION_131_5()
{
  uint64_t v2 = STACK[0x548];
  return outlined destroy of EagerResolutionService?(v2, v0);
}

uint64_t OUTLINED_FUNCTION_132_4(uint64_t a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v8 = va_arg(va3, void);
  return closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))va3, (uint64_t)va, (uint64_t)va1, (uint64_t)va2);
}

uint64_t OUTLINED_FUNCTION_133_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_139_3(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return outlined init with take of Any?(v3 - 160, v3 - 128, a3);
}

uint64_t OUTLINED_FUNCTION_140_3()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_141_3(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_142_3()
{
  uint64_t v3 = STACK[0x550];
  return SearchResult.init(_:csItem:)(v1, v3, v0);
}

void OUTLINED_FUNCTION_143_3()
{
  STACK[0x480] = v0;
}

_WORD *OUTLINED_FUNCTION_144_3(_WORD *result)
{
  *double result = 0;
  *(void *)(v1 - 112) = result + 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_146_3()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_148_2()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_149_1(uint64_t result)
{
  *(unsigned char *)(result + 16) = v1;
  return result;
}

void OUTLINED_FUNCTION_150_3()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_151_2()
{
  STACK[0x5E0] = v0;
  STACK[0x600] = v1;
}

uint64_t OUTLINED_FUNCTION_153_3(uint64_t a1)
{
  return outlined init with take of Any?(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_154_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_156_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_157_2@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = STACK[0x508];
  return SearchResult.init(_:csItem:)(v1, v3, a1);
}

uint64_t OUTLINED_FUNCTION_158_3()
{
  return outlined destroy of EagerResolutionService?(v0, v1);
}

unint64_t OUTLINED_FUNCTION_160_2()
{
  return STACK[0x600];
}

uint64_t OUTLINED_FUNCTION_162_3()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_163_3()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_164_2()
{
  return swift_dynamicCast();
}

double OUTLINED_FUNCTION_166_3()
{
  double result = 0.0;
  *(_OWORD *)(v0 - 176) = 0u;
  *(_OWORD *)(v0 - 160) = 0u;
  *(void *)(v0 - 144) = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_167_2(uint64_t result, uint64_t a2)
{
  *(void *)(v2 - 280) = result;
  *(void *)(v2 - 288) = a2;
  return result;
}

void OUTLINED_FUNCTION_168_2(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t OUTLINED_FUNCTION_169_1()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_170_3()
{
  uint64_t v2 = STACK[0x548];
  return outlined destroy of EagerResolutionService?(v2, v0);
}

uint64_t OUTLINED_FUNCTION_173_3()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_174_3()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_175_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_176_3()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_179_2()
{
  uint64_t v1 = 2243873;
  unint64_t v2 = 0xE300000000000000;
  DefaultStringInterpolation.appendLiteral(_:)(*(Swift::String *)&v1);
}

unint64_t OUTLINED_FUNCTION_181_3(unint64_t result)
{
  STACK[0x5F8] = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_182_3()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_186_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_190_2()
{
  return __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_191_2()
{
  return specialized static UnsafeMutablePointer.allocate(capacity:)();
}

uint64_t OUTLINED_FUNCTION_193_2(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_194_1()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_197_2()
{
  return v0;
}

uint64_t *LocalSearchManager.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static LocalSearchManager.shared;
}

void protocol witness for LocalIndexSearchAgent.activate() in conformance LocalSearchManager()
{
}

void protocol witness for LocalIndexSearchAgent.deactivate() in conformance LocalSearchManager()
{
}

uint64_t protocol witness for LocalIndexSearchAgent.search(with:) in conformance LocalSearchManager()
{
  OUTLINED_FUNCTION_27();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for EntityQuery.entities(for:) in conformance MediaEntity.Query;
  return LocalSearchManager.search(with:)();
}

uint64_t LocalSearchManager.queryTask.setter(uint64_t a1)
{
  *(void *)(v1 + 120) = a1;
  return MEMORY[0x270F9A758]();
}

uint64_t LocalSearchManager.sections.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 128) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t static LocalSearchManager.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t static LocalSearchManager.LocalSearchManagerError.== infix(_:_:)()
{
  return 1;
}

void LocalSearchManager.LocalSearchManagerError.hash(into:)()
{
}

Swift::Int LocalSearchManager.LocalSearchManagerError.hashValue.getter()
{
  return Hasher._finalize()();
}

void *LocalSearchManager.init(infinitePatience:)(char a1)
{
  uint64_t v2 = v1;
  swift_defaultActor_initialize();
  v2[15] = 0;
  uint64_t v4 = (uint64_t)v2 + OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_continuation;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SFResultSection], Never>);
  __swift_storeEnumTagSinglePayload(v4, 1, 1, v5);
  id v6 = objc_allocWithZone(MEMORY[0x263F78C98]);
  swift_retain();
  id v7 = objc_msgSend(v6, sel_init);
  uint64_t v8 = MEMORY[0x263F8EE78];
  uint64_t v9 = (void *)v2[15];
  v2[14] = v7;
  v2[15] = 0;
  v2[16] = v8;
  swift_release();

  v21.receiver = v2;
  v21.super_class = (Class)type metadata accessor for LocalSearchManager();
  uint64_t v10 = objc_msgSendSuper2(&v21, sel_init);
  uint64_t v11 = (void *)v10[14];
  uint64_t v12 = v10;
  objc_msgSend(v11, sel_setInfinitePatience_, a1 & 1);
  uint64_t v13 = self;
  id v14 = objc_msgSend(v13, sel_sharedResourcesManager);
  uint64_t v15 = (void *)MEMORY[0x25A2C7AB0](0x6867696C746F7053, 0xE900000000000074);
  objc_msgSend(v14, sel_loadAllParametersForClient_, v15);

  id v16 = objc_msgSend(v13, sel_sharedResourcesManager);
  uint64_t v17 = (void *)MEMORY[0x25A2C7AB0](0xD000000000000012, 0x8000000258683C20);
  objc_msgSend(v16, sel_loadAllParametersForClient_, v17);

  id v18 = objc_msgSend(v13, sel_sharedResourcesManager);
  uint64_t v19 = (void *)MEMORY[0x25A2C7AB0](1818845517, 0xE400000000000000);
  objc_msgSend(v18, sel_loadAllParametersForClient_, v19);

  return v12;
}

Swift::Void __swiftcall LocalSearchManager.activate()()
{
}

uint64_t closure #1 in LocalSearchManager.activate()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x270FA2498](closure #1 in LocalSearchManager.activate(), a4, 0);
}

uint64_t closure #1 in LocalSearchManager.activate()()
{
  OUTLINED_FUNCTION_27();
  LocalSearchManager.isolatedActivate()();
  OUTLINED_FUNCTION_13();
  return v0();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  if (__swift_getEnumTagSinglePayload(a1, 1, v6) == 1)
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  return swift_task_create();
}

uint64_t partial apply for closure #1 in LocalSearchManager.activate()()
{
  OUTLINED_FUNCTION_49();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_26_1(v0);
  *uint64_t v1 = v2;
  v1[1] = AnswerSynthesisModelServer.synthesizeWithTemplate_runnable(_:bindings:);
  uint64_t v3 = OUTLINED_FUNCTION_9_23();
  return closure #1 in LocalSearchManager.activate()(v3, v4, v5, v6);
}

id LocalSearchManager.isolatedActivate()()
{
  uint64_t v1 = *(void **)(v0 + 112);
  objc_msgSend(v1, sel_activate);
  return objc_msgSend(v1, sel_preheat);
}

Swift::Void __swiftcall LocalSearchManager.deactivate()()
{
}

uint64_t LocalSearchManager.activate()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v7 = OUTLINED_FUNCTION_81(v6);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TaskPriority();
  OUTLINED_FUNCTION_46_1();
  __swift_storeEnumTagSinglePayload(v11, v12, v13, v10);
  id v14 = (void *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v5;
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  swift_retain();
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for TaskPriority?);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
    if (v14[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v16 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v17 = v18;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
    }
  }
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a3;
  *(void *)(v19 + 24) = v14;
  if (v17 | v16)
  {
    v21[0] = 0;
    v21[1] = 0;
    void v21[2] = v16;
    v21[3] = v17;
  }
  swift_task_create();
  return swift_release();
}

uint64_t closure #1 in LocalSearchManager.deactivate()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x270FA2498](closure #1 in LocalSearchManager.deactivate(), a4, 0);
}

uint64_t closure #1 in LocalSearchManager.deactivate()()
{
  OUTLINED_FUNCTION_27();
  LocalSearchManager.isolatedDeactivate()();
  OUTLINED_FUNCTION_13();
  return v0();
}

void LocalSearchManager.isolatedDeactivate()()
{
  objc_msgSend(*(id *)(v0 + 112), sel_deactivate);
  uint64_t v1 = self;
  id v2 = objc_msgSend(v1, sel_sharedResourcesManager);
  uint64_t v3 = (void *)MEMORY[0x25A2C7AB0](0x6867696C746F7053, 0xE900000000000074);
  objc_msgSend(v2, sel_loadAllParametersForClient_, v3);

  id v4 = objc_msgSend(v1, sel_sharedResourcesManager);
  uint64_t v5 = (void *)MEMORY[0x25A2C7AB0](0xD000000000000012, 0x8000000258683C20);
  objc_msgSend(v4, sel_loadAllParametersForClient_, v5);

  id v6 = objc_msgSend(v1, sel_sharedResourcesManager);
  id v7 = (id)MEMORY[0x25A2C7AB0](1818845517, 0xE400000000000000);
  objc_msgSend(v6, sel_loadAllParametersForClient_, v7);
}

uint64_t LocalSearchManager.search(with:)()
{
  OUTLINED_FUNCTION_27();
  v1[10] = v2;
  v1[11] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SFResultSection], Never>?);
  OUTLINED_FUNCTION_81(v3);
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SFResultSection], Never>);
  v1[14] = v4;
  v1[15] = *(void *)(v4 - 8);
  v1[16] = swift_task_alloc();
  return MEMORY[0x270FA2498](LocalSearchManager.search(with:), v0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_2();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v3 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = *(void *)(v3 + 88);
    id v7 = LocalSearchManager.search(with:);
  }
  else
  {
    uint64_t v8 = *(void *)(v3 + 88);
    swift_release();
    id v7 = LocalSearchManager.search(with:);
    uint64_t v6 = v8;
  }
  return MEMORY[0x270FA2498](v7, v6, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_27_0();
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_257DC6000, v2, v3, "LocalSearchManager.search - Success!", v4, 2u);
    OUTLINED_FUNCTION_34();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v1);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t (*v17)(void);
  uint64_t v19;

  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[11];
  swift_release();
  objc_msgSend(*(id *)(v3 + 120), sel_cancel);
  uint64_t v4 = v3 + OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_continuation;
  swift_beginAccess();
  outlined init with copy of CheckedContinuation<[SFResultSection], Never>?(v4, v2);
  if (__swift_getEnumTagSinglePayload(v2, 1, v1) == 1)
  {
    outlined destroy of Any?(v0[13], &demangling cache variable for type metadata for CheckedContinuation<[SFResultSection], Never>?);
  }
  else
  {
    uint64_t v6 = v0[15];
    uint64_t v5 = v0[16];
    id v7 = v0[14];
    uint64_t v8 = v0[12];
    (*(void (**)(uint64_t, void, uint64_t))(v6 + 32))(v5, v0[13], v7);
    v0[9] = MEMORY[0x263F8EE78];
    CheckedContinuation.resume(returning:)();
    OUTLINED_FUNCTION_46_1();
    __swift_storeEnumTagSinglePayload(v9, v10, v11, v7);
    swift_beginAccess();
    outlined assign with take of CheckedContinuation<[SFResultSection], Never>?(v8, v4);
    swift_endAccess();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  }
  uint64_t v12 = Logger.logObject.getter();
  uint64_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_50_11(&dword_257DC6000, v14, v15, "LocalSearchManager.search - Timed out waiting on update");
    OUTLINED_FUNCTION_34();
  }
  uint64_t v16 = (void *)v0[20];

  lazy protocol witness table accessor for type LocalSearchManager.LocalSearchManagerError and conformance LocalSearchManager.LocalSearchManagerError();
  swift_allocError();
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13();
  return v17();
}

uint64_t LocalSearchManager.search(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_27_0();
  if (one-time initialization token for search != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  v14[17] = __swift_project_value_buffer(v15, (uint64_t)static Logging.search);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_50_11(&dword_257DC6000, v18, v19, "LocalSearchManager.search - Starting search");
    OUTLINED_FUNCTION_34();
  }
  objc_super v21 = (void *)v14[10];
  uint64_t v20 = v14[11];

  LocalSearchManager.sections.setter(MEMORY[0x263F8EE78]);
  uint64_t v22 = swift_allocObject();
  v14[18] = v22;
  *(void *)(v22 + 16) = v20;
  *(void *)(v22 + 24) = v21;
  swift_retain();
  id v23 = v21;
  uint64_t v24 = (void *)swift_task_alloc();
  v14[19] = v24;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SFResultSection]);
  *uint64_t v24 = v14;
  v24[1] = LocalSearchManager.search(with:);
  return MEMORY[0x270F72A38](v14 + 8, &async function pointer to partial apply for closure #1 in LocalSearchManager.search(with:), v22, v25, v26, v27, v28, v29, a9, a10, a11, a12, a13, a14);
}

uint64_t closure #1 in LocalSearchManager.search(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v5;
  *uint64_t v5 = v3;
  v5[1] = closure #1 in LocalSearchManager.search(with:);
  return LocalSearchManager.internalSearch(with:)(a3);
}

uint64_t closure #1 in LocalSearchManager.search(with:)()
{
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_2();
  *(void *)(v1 + 32) = v0;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in LocalSearchManager.search(with:), 0, 0);
}

{
  uint64_t v0;

  **(void **)(v0 + 16) = *(void *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LocalSearchManager.internalSearch(with:)(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return MEMORY[0x270FA2498](LocalSearchManager.internalSearch(with:), v1, 0);
}

uint64_t LocalSearchManager.internalSearch(with:)()
{
  OUTLINED_FUNCTION_27_0();
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  unint64_t v3 = lazy protocol witness table accessor for type LocalSearchManager and conformance LocalSearchManager();
  uint64_t v4 = swift_task_alloc();
  v0[5] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[6] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SFResultSection]);
  *uint64_t v5 = v0;
  v5[1] = LocalSearchManager.internalSearch(with:);
  return MEMORY[0x270FA2318](v0 + 2, v1, v3, 0xD000000000000015, 0x8000000258683C00, partial apply for closure #1 in LocalSearchManager.internalSearch(with:), v4, v6);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_2();
  uint64_t v2 = *(void *)(v1 + 32);
  unint64_t v3 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](IMSPIMessageQueryHelper.queryFullBody(messageGuids:), v2, 0);
}

void closure #1 in LocalSearchManager.internalSearch(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SFResultSection], Never>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SFResultSection], Never>);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v8, a1, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v9);
  uint64_t v10 = a2 + OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_continuation;
  swift_beginAccess();
  outlined assign with take of CheckedContinuation<[SFResultSection], Never>?((uint64_t)v8, v10);
  swift_endAccess();
  id v11 = objc_msgSend(*(id *)(a2 + 112), sel_queryTaskWithContext_, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    objc_msgSend(v11, sel_setDelegate_, a2);
    objc_msgSend(v12, sel_setForceStableResults_, 0);
    objc_msgSend(v12, sel_setMaxTopHitAppResults_, 10);
    objc_msgSend(v12, sel_start);
    id v13 = v12;
    LocalSearchManager.queryTask.setter((uint64_t)v12);
  }
}

void LocalSearchManager.invalidateQuery(task:)(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 120);
  if (v2)
  {
    type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for SPQueryTask);
    id v4 = a1;
    id v5 = v2;
    LOBYTE(a1) = static NSObject.== infix(_:_:)();

    if (a1)
    {
      uint64_t v6 = MEMORY[0x263F8EE78];
      LocalSearchManager.sections.setter(v6);
    }
  }
}

void LocalSearchManager.__allocating_init()()
{
}

void LocalSearchManager.init()()
{
}

uint64_t LocalSearchManager.deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of Any?(v0 + OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_continuation, &demangling cache variable for type metadata for CheckedContinuation<[SFResultSection], Never>?);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t LocalSearchManager.__deallocating_deinit()
{
  LocalSearchManager.deinit();
  return MEMORY[0x270FA2418](v0);
}

uint64_t LocalSearchManager.unownedExecutor.getter()
{
  return v0;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance LocalSearchManager()
{
  return LocalSearchManager.unownedExecutor.getter();
}

uint64_t LocalSearchManager.resultsDidBecomeInvalid(_:)(void *a1)
{
  return LocalSearchManager.resultsDidBecomeInvalid(_:)(a1, (uint64_t)&unk_2706B1CA8, (uint64_t)&async function pointer to partial apply for closure #1 in LocalSearchManager.resultsDidBecomeInvalid(_:));
}

uint64_t closure #1 in LocalSearchManager.resultsDidBecomeInvalid(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return MEMORY[0x270FA2498](closure #1 in LocalSearchManager.resultsDidBecomeInvalid(_:), a4, 0);
}

uint64_t closure #1 in LocalSearchManager.resultsDidBecomeInvalid(_:)()
{
  OUTLINED_FUNCTION_27();
  LocalSearchManager.invalidateQuery(task:)(*(void **)(v0 + 24));
  OUTLINED_FUNCTION_13();
  return v1();
}

uint64_t LocalSearchManager.didReceive(_:)(void *a1)
{
  return LocalSearchManager.resultsDidBecomeInvalid(_:)(a1, (uint64_t)&unk_2706B1CD0, (uint64_t)&async function pointer to partial apply for closure #1 in LocalSearchManager.didReceive(_:));
}

uint64_t LocalSearchManager.resultsDidBecomeInvalid(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v9 = OUTLINED_FUNCTION_81(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_18_8();
  type metadata accessor for TaskPriority();
  OUTLINED_FUNCTION_46_1();
  __swift_storeEnumTagSinglePayload(v10, v11, v12, v13);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v6;
  v14[5] = a1;
  swift_retain();
  id v15 = a1;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v4, a3, (uint64_t)v14);
  return swift_release();
}

uint64_t closure #1 in LocalSearchManager.didReceive(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return MEMORY[0x270FA2498](closure #1 in LocalSearchManager.didReceive(_:), a4, 0);
}

uint64_t closure #1 in LocalSearchManager.didReceive(_:)()
{
  OUTLINED_FUNCTION_27();
  LocalSearchManager.update(with:)(*(void **)(v0 + 24));
  OUTLINED_FUNCTION_13();
  return v1();
}

void LocalSearchManager.update(with:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SFResultSection], Never>);
  id v6 = *(id *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_18_8();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SFResultSection], Never>?);
  uint64_t v8 = OUTLINED_FUNCTION_81(v7);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v32 - v12;
  id v14 = objc_msgSend(a1, sel_task);
  id v15 = *(void **)(v1 + 120);
  if (!v14)
  {
    if (v15) {
      return;
    }
LABEL_6:
    id v19 = objc_msgSend(a1, sel_state);
    if ((unint64_t)objc_msgSend(a1, sel_kind) > 1)
    {
      id v36 = v6;
      if (one-time initialization token for search != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      __swift_project_value_buffer(v21, (uint64_t)static Logging.search);
      id v22 = a1;
      id v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v34 = swift_slowAlloc();
        v38[0] = v34;
        id v35 = v19;
        *(_DWORD *)uint64_t v25 = 136315138;
        id v33 = v25;
        id v37 = objc_msgSend(v22, sel_kind, v25 + 4);
        type metadata accessor for SPResponseKind(0);
        uint64_t v26 = String.init<A>(describing:)();
        id v37 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v38);
        id v19 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_257DC6000, v23, v24, "LocalSearchManager received response of unknown kind: %s", v33, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_34();
        OUTLINED_FUNCTION_34();
      }
      else
      {
      }
      id v6 = v36;
    }
    else
    {
      id v20 = objc_msgSend(a1, sel_resultSections);
      type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for SFResultSection);
      static Array._unconditionallyBridgeFromObjectiveC(_:)();

      swift_beginAccess();
      specialized Array.append<A>(contentsOf:)();
      swift_endAccess();
    }
    if (v19 == (id)4)
    {
      uint64_t v28 = v3 + OBJC_IVAR____TtC10OmniSearch18LocalSearchManager_continuation;
      swift_beginAccess();
      outlined init with copy of CheckedContinuation<[SFResultSection], Never>?(v28, (uint64_t)v13);
      if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v5))
      {
        outlined destroy of Any?((uint64_t)v13, &demangling cache variable for type metadata for CheckedContinuation<[SFResultSection], Never>?);
      }
      else
      {
        (*((void (**)(uint64_t, char *, uint64_t))v6 + 2))(v2, v13, v5);
        outlined destroy of Any?((uint64_t)v13, &demangling cache variable for type metadata for CheckedContinuation<[SFResultSection], Never>?);
        swift_beginAccess();
        id v37 = *(id *)(v3 + 128);
        swift_bridgeObjectRetain();
        CheckedContinuation.resume(returning:)();
        (*((void (**)(uint64_t, uint64_t))v6 + 1))(v2, v5);
      }
      OUTLINED_FUNCTION_46_1();
      __swift_storeEnumTagSinglePayload(v29, v30, v31, v5);
      swift_beginAccess();
      outlined assign with take of CheckedContinuation<[SFResultSection], Never>?((uint64_t)v11, v28);
      swift_endAccess();
    }
    return;
  }
  if (v15)
  {
    id v36 = v14;
    type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for SPQueryTask);
    id v16 = v15;
    id v17 = v36;
    char v18 = static NSObject.== infix(_:_:)();

    if ((v18 & 1) == 0) {
      return;
    }
    goto LABEL_6;
  }
}

uint64_t @objc LocalSearchManager.resultsDidBecomeInvalid(_:)(uint64_t a1, uint64_t a2, void *a3, void (*a4)(id))
{
  id v5 = a3;
  swift_retain();
  a4(v5);

  return swift_release();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  id v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_2();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  void *v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA()
{
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_134();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_26_1(v0);
  *uint64_t v1 = v2;
  v1[1] = AnswerSynthesisModelServer.synthesizeWithTemplate_runnable(_:bindings:);
  uint64_t v3 = OUTLINED_FUNCTION_43_0();
  return v4(v3);
}

uint64_t objectdestroyTm_1()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in LocalSearchManager.deactivate()()
{
  OUTLINED_FUNCTION_49();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_26_1(v0);
  *uint64_t v1 = v2;
  v1[1] = AnswerSynthesisModelServer.synthesizeWithOverride_runnable(_:bindings:);
  uint64_t v3 = OUTLINED_FUNCTION_9_23();
  return closure #1 in LocalSearchManager.deactivate()(v3, v4, v5, v6);
}

uint64_t sub_2584746FC()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_258474734()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in LocalSearchManager.search(with:)()
{
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_134();
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_26_1(v3);
  *uint64_t v4 = v5;
  v4[1] = AnswerSynthesisModelServer.synthesizeWithOverride_runnable(_:bindings:);
  return closure #1 in LocalSearchManager.search(with:)(v0, v2, v1);
}

uint64_t outlined init with copy of CheckedContinuation<[SFResultSection], Never>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SFResultSection], Never>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type LocalSearchManager.LocalSearchManagerError and conformance LocalSearchManager.LocalSearchManagerError()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalSearchManager.LocalSearchManagerError and conformance LocalSearchManager.LocalSearchManagerError;
  if (!lazy protocol witness table cache variable for type LocalSearchManager.LocalSearchManagerError and conformance LocalSearchManager.LocalSearchManagerError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalSearchManager.LocalSearchManagerError and conformance LocalSearchManager.LocalSearchManagerError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocalSearchManager.LocalSearchManagerError and conformance LocalSearchManager.LocalSearchManagerError;
  if (!lazy protocol witness table cache variable for type LocalSearchManager.LocalSearchManagerError and conformance LocalSearchManager.LocalSearchManagerError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalSearchManager.LocalSearchManagerError and conformance LocalSearchManager.LocalSearchManagerError);
  }
  return result;
}

uint64_t outlined assign with take of CheckedContinuation<[SFResultSection], Never>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SFResultSection], Never>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in LocalSearchManager.resultsDidBecomeInvalid(_:)()
{
  OUTLINED_FUNCTION_27_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_26_1(v0);
  *uint64_t v1 = v2;
  v1[1] = AnswerSynthesisModelServer.synthesizeWithTemplate_runnable(_:bindings:);
  uint64_t v3 = OUTLINED_FUNCTION_7_35();
  return closure #1 in LocalSearchManager.resultsDidBecomeInvalid(_:)(v3, v4, v5, v6, v7);
}

uint64_t objectdestroy_22Tm()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in LocalSearchManager.didReceive(_:)()
{
  OUTLINED_FUNCTION_27_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_26_1(v0);
  *uint64_t v1 = v2;
  v1[1] = AnswerSynthesisModelServer.synthesizeWithTemplate_runnable(_:bindings:);
  uint64_t v3 = OUTLINED_FUNCTION_7_35();
  return closure #1 in LocalSearchManager.didReceive(_:)(v3, v4, v5, v6, v7);
}

uint64_t ObjC metadata update function for LocalSearchManager()
{
  return type metadata accessor for LocalSearchManager();
}

uint64_t type metadata accessor for LocalSearchManager()
{
  uint64_t result = type metadata singleton initialization cache for LocalSearchManager;
  if (!type metadata singleton initialization cache for LocalSearchManager) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for LocalSearchManager()
{
  type metadata accessor for CheckedContinuation<[SFResultSection], Never>?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for LocalSearchManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for LocalSearchManager);
}

uint64_t dispatch thunk of LocalSearchManager.activate()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of LocalSearchManager.deactivate()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of LocalSearchManager.search(with:)()
{
  OUTLINED_FUNCTION_49();
  uint64_t v3 = v2;
  uint64_t v4 = *(int **)((*MEMORY[0x263F8EED0] & *v0) + 0xE8);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = dispatch thunk of AnswerSynthesisController.preprocessSearchEntity(for:with:answerSynthesisMetrics:);
  return v7(v3);
}

uint64_t dispatch thunk of LocalSearchManager.invalidateQuery(task:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

void type metadata accessor for CheckedContinuation<[SFResultSection], Never>?()
{
  if (!lazy cache variable for type metadata for CheckedContinuation<[SFResultSection], Never>?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CheckedContinuation<[SFResultSection], Never>);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CheckedContinuation<[SFResultSection], Never>?);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for LocalSearchManager.LocalSearchManagerError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x258474ED8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalSearchManager.LocalSearchManagerError()
{
  return &type metadata for LocalSearchManager.LocalSearchManagerError;
}

unint64_t lazy protocol witness table accessor for type LocalSearchManager and conformance LocalSearchManager()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalSearchManager and conformance LocalSearchManager;
  if (!lazy protocol witness table cache variable for type LocalSearchManager and conformance LocalSearchManager)
  {
    type metadata accessor for LocalSearchManager();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalSearchManager and conformance LocalSearchManager);
  }
  return result;
}

void partial apply for closure #1 in LocalSearchManager.internalSearch(with:)(uint64_t a1)
{
  closure #1 in LocalSearchManager.internalSearch(with:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t OUTLINED_FUNCTION_7_35()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_9_23()
{
  return v0;
}

uint64_t *LocalSearchService.dateFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for dateFormatter != -1) {
    swift_once();
  }
  return &static LocalSearchService.dateFormatter;
}

void LocalSearchService.supportedSearchSources.getter(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t LocalSearchService.type.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

void one-time initialization function for dateFormatter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08790]), sel_init);
  outlined bridged method (mbnn) of @objc NSDateFormatter.dateFormat.setter(0x2D4D4D2D79797979, 0xEA00000000006464, v0);
  static LocalSearchService.dateFormatter = (uint64_t)v0;
}

id static LocalSearchService.dateFormatter.getter()
{
  if (one-time initialization token for dateFormatter != -1) {
    swift_once();
  }
  id v0 = (void *)static LocalSearchService.dateFormatter;
  return v0;
}

uint64_t LocalSearchService.indexClient.getter()
{
  return swift_retain();
}

uint64_t LocalSearchService.maxItemCount.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t LocalSearchService.init(maxItemCount:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  type metadata accessor for LocalIndexClient();
  uint64_t result = LocalIndexClient.__allocating_init()();
  *(void *)a3 = 1;
  *(unsigned char *)(a3 + 8) = 1;
  *(void *)(a3 + 16) = result;
  *(void *)(a3 + 24) = a1;
  *(unsigned char *)(a3 + 32) = a2 & 1;
  return result;
}

Swift::Void __swiftcall LocalSearchService.prewarm()()
{
}

uint64_t LocalSearchService.search(text:)()
{
  OUTLINED_FUNCTION_27();
  *(void *)(v1 + 120) = v2;
  *(void *)(v1 + 128) = v3;
  uint64_t v4 = type metadata accessor for OSSignpostError();
  *(void *)(v1 + 136) = v4;
  OUTLINED_FUNCTION_12_0(v4);
  *(void *)(v1 + 144) = v5;
  *(void *)(v1 + 152) = OUTLINED_FUNCTION_9_13();
  *(void *)(v1 + 160) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OSSignpostID();
  *(void *)(v1 + 168) = v6;
  OUTLINED_FUNCTION_12_0(v6);
  *(void *)(v1 + 176) = v7;
  *(void *)(v1 + 184) = OUTLINED_FUNCTION_9_13();
  *(void *)(v1 + 192) = swift_task_alloc();
  *(void *)(v1 + 200) = swift_task_alloc();
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = *v0;
  *(void *)(v1 + 208) = v8;
  *(void *)(v1 + 216) = v9;
  *(unsigned char *)(v1 + 89) = *((unsigned char *)v0 + 8);
  uint64_t v10 = v0[3];
  *(void *)(v1 + 224) = v0[2];
  *(void *)(v1 + 232) = v10;
  *(unsigned char *)(v1 + 90) = *((unsigned char *)v0 + 32);
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_signpost_type_t v3;
  uint8_t *v4;
  os_signpost_id_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  void *v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  if (one-time initialization token for searchSignposter != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for OSSignposter();
  *(void *)(v0 + 240) = __swift_project_value_buffer(v1, (uint64_t)static Logging.searchSignposter);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  uint64_t v2 = OSSignposter.logHandle.getter();
  uint64_t v3 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v4 = (uint8_t *)OUTLINED_FUNCTION_55();
    *(_WORD *)uint64_t v4 = 0;
    uint64_t v5 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_257DC6000, v2, v3, v5, "LocalSearchService.search", "", v4, 2u);
    OUTLINED_FUNCTION_34();
  }
  uint64_t v6 = *(unsigned char *)(v0 + 90);
  char v18 = *(unsigned char *)(v0 + 89);
  uint64_t v7 = *(void *)(v0 + 232);
  id v19 = *(void *)(v0 + 224);
  uint64_t v8 = *(void *)(v0 + 208);
  id v17 = *(void *)(v0 + 216);
  uint64_t v9 = *(void *)(v0 + 200);
  uint64_t v10 = *(void *)(v0 + 168);
  uint64_t v11 = *(void *)(v0 + 176);
  uint64_t v13 = *(void *)(v0 + 120);
  uint64_t v12 = *(void *)(v0 + 128);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, v8, v10);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  *(void *)(v0 + 248) = OUTLINED_FUNCTION_160();
  id v14 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  *(void *)(v0 + 256) = v14;
  *(void *)(v0 + 264) = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v14(v8, v10);
  type metadata accessor for LatencyProfiler();
  swift_allocObject();
  *(void *)(v0 + 272) = LatencyProfiler.init(_:)(0xD000000000000010, 0x8000000258683C60);
  *(void *)(v0 + 16) = v13;
  *(void *)(v0 + 24) = v12;
  *(void *)(v0 + 32) = v7;
  *(unsigned char *)(v0 + 40) = v6;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = v17;
  *(unsigned char *)(v0 + 64) = v18;
  *(void *)(v0 + 72) = v19;
  *(void *)(v0 + 80) = v7;
  *(unsigned char *)(v0 + 88) = v6;
  swift_bridgeObjectRetain();
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v15;
  void *v15 = v0;
  v15[1] = LocalSearchService.search(text:);
  return LocalSearchService.search(spotlightRequest:)(v0 + 16);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_2();
  v3[12] = v1;
  v3[13] = v2;
  v3[14] = v0;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 288) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void);
  _WORD *v7;
  os_signpost_type_t v8;
  os_signpost_id_t v9;
  void (*v10)(uint64_t, uint64_t);
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v16;
  uint64_t v17;

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_209();
  (*(void (**)(void))(v1 + 152))();
  swift_release();
  uint64_t v2 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v3 = v0[20];
    uint64_t v5 = v0[17];
    uint64_t v4 = v0[18];
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v4 + 88))(v3, v5) != *MEMORY[0x263F90238])
    {
      OUTLINED_FUNCTION_77();
      v6();
    }
    uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_55();
    OUTLINED_FUNCTION_41_1(v7);
    OUTLINED_FUNCTION_186();
    OUTLINED_FUNCTION_129(&dword_257DC6000, v2, v8, v9, "LocalSearchService.search");
    OUTLINED_FUNCTION_34();
  }
  uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[32];
  uint64_t v11 = v2;
  uint64_t v12 = v0[24];
  uint64_t v13 = v0[21];
  id v16 = v0[13];

  v10(v12, v13);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_149();
  return v14(v16);
}

{
  void *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t);
  void (*v5)(void);
  _WORD *v6;
  os_signpost_type_t v7;
  os_signpost_id_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  uint64_t v1 = v0[30];
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_209();
  (*(void (**)(void))(v2 + 152))();
  swift_release();
  OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_18_9();
  static os_signpost_type_t.end.getter();
  if (OUTLINED_FUNCTION_60_0())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v3 = OUTLINED_FUNCTION_20_1();
    if (v4(v3) != *MEMORY[0x263F90238])
    {
      OUTLINED_FUNCTION_77();
      v5();
    }
    uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_55();
    OUTLINED_FUNCTION_41_1(v6);
    OUTLINED_FUNCTION_186();
    OUTLINED_FUNCTION_129(&dword_257DC6000, v1, v7, v8, "LocalSearchService.search");
    OUTLINED_FUNCTION_34();
  }
  uint64_t v9 = (void (*)(uint64_t, uint64_t))v0[32];
  uint64_t v10 = v0[23];
  uint64_t v11 = v0[21];

  v9(v10, v11);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t LocalSearchService.search(spotlightRequest:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = v3;
  return MEMORY[0x270FA2498](LocalSearchService.search(spotlightRequest:), 0, 0);
}

uint64_t LocalSearchService.search(spotlightRequest:)()
{
  uint64_t v12 = v0;
  if (one-time initialization token for search != -1) {
    swift_once();
  }
  uint64_t v1 = *(_OWORD **)(v0 + 48);
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logging.search);
  *(_OWORD *)(v0 + 16) = *v1;
  outlined init with take of LLMQUModelResponse?((uint64_t)(v1 + 2), v0 + 32, &demangling cache variable for type metadata for SPQUParse?);
  outlined retain of String(v0 + 16);
  outlined retain of SPQUParse?((id *)(v0 + 32));
  outlined retain of String(v0 + 16);
  outlined retain of SPQUParse?((id *)(v0 + 32));
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    outlined retain of String(v0 + 16);
    outlined retain of SPQUParse?((id *)(v0 + 32));
    uint64_t v6 = SpotlightIndexRequest.description.getter();
    unint64_t v8 = v7;
    outlined release of String(v0 + 16);
    outlined release of SPQUParse?((id *)(v0 + 32));
    *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of String(v0 + 16);
    outlined release of SPQUParse?((id *)(v0 + 32));
    outlined release of String(v0 + 16);
    outlined release of SPQUParse?((id *)(v0 + 32));
    _os_log_impl(&dword_257DC6000, v3, v4, "Start Spotlight search with request: %s", v5, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_34();
    OUTLINED_FUNCTION_34();
  }
  else
  {
    outlined release of String(v0 + 16);
    outlined release of SPQUParse?((id *)(v0 + 32));
    outlined release of String(v0 + 16);
    outlined release of SPQUParse?((id *)(v0 + 32));
  }

  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v9;
  *uint64_t v9 = v0;
  v9[1] = LocalSearchService.search(spotlightRequest:);
  return LocalIndexClient.search(spotlightRequest:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  OUTLINED_FUNCTION_27();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  os_log_type_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  OUTLINED_FUNCTION_149();
  if (!v0) {
    uint64_t v6 = v3;
  }
  return v7(v6);
}

uint64_t LocalSearchService.search(query:sources:allowedTypes:searchOptions:)()
{
  OUTLINED_FUNCTION_27();
  *(void *)(v1 + 424) = v2;
  *(void *)(v1 + 432) = v3;
  uint64_t v4 = type metadata accessor for OSSignpostError();
  *(void *)(v1 + 440) = v4;
  OUTLINED_FUNCTION_12_0(v4);
  *(void *)(v1 + 448) = v5;
  *(void *)(v1 + 456) = OUTLINED_FUNCTION_9_13();
  *(void *)(v1 + 464) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StructuredQueryEntity?);
  *(void *)(v1 + 472) = swift_task_alloc();
  *(void *)(v1 + 480) = type metadata accessor for StructuredQueryEntity(0);
  *(void *)(v1 + 488) = OUTLINED_FUNCTION_9_13();
  *(void *)(v1 + 496) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OSSignpostID();
  *(void *)(v1 + 504) = v6;
  OUTLINED_FUNCTION_12_0(v6);
  *(void *)(v1 + 512) = v7;
  *(void *)(v1 + 520) = OUTLINED_FUNCTION_9_13();
  *(void *)(v1 + 528) = swift_task_alloc();
  *(void *)(v1 + 536) = swift_task_alloc();
  *(void *)(v1 + 544) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OSSignposter();
  *(void *)(v1 + 552) = v8;
  OUTLINED_FUNCTION_12_0(v8);
  *(void *)(v1 + 560) = v9;
  *(void *)(v1 + 568) = swift_task_alloc();
  *(void *)(v1 + 576) = *(void *)v0;
  *(unsigned char *)(v1 + 393) = *(unsigned char *)(v0 + 8);
  uint64_t v10 = *(void *)(v0 + 24);
  *(void *)(v1 + 584) = *(void *)(v0 + 16);
  *(void *)(v1 + 592) = v10;
  *(unsigned char *)(v1 + 394) = *(unsigned char *)(v0 + 32);
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint8_t *v6;
  os_signpost_type_t v7;
  os_signpost_id_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  unsigned char __dst[152];
  uint64_t v48;
  uint64_t v49;

  uint64_t v48 = v0;
  if (one-time initialization token for searchComponentSignposter != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 568);
  uint64_t v2 = *(void *)(v0 + 560);
  uint64_t v3 = *(void *)(v0 + 552);
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static Logging.searchComponentSignposter);
  *(void *)(v0 + 600) = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  if (one-time initialization token for searchSignposter != -1) {
    swift_once();
  }
  __swift_project_value_buffer(*(void *)(v0 + 552), (uint64_t)static Logging.searchSignposter);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  uint64_t v5 = OSSignposter.logHandle.getter();
  static os_signpost_type_t.begin.getter();
  if (OUTLINED_FUNCTION_60_0())
  {
    uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_55();
    *(_WORD *)uint64_t v6 = 0;
    OSSignpostID.rawValue.getter();
    OUTLINED_FUNCTION_186();
    _os_signpost_emit_with_name_impl(&dword_257DC6000, v5, v7, v8, "SearchTool.SpotlightSearch", "", v6, 2u);
    OUTLINED_FUNCTION_34();
  }
  uint64_t v9 = *(void *)(v0 + 568);
  uint64_t v10 = *(void *)(v0 + 560);
  uint64_t v11 = *(void *)(v0 + 552);
  uint64_t v12 = *(void *)(v0 + 544);
  uint64_t v13 = *(void *)(v0 + 536);
  id v14 = *(void *)(v0 + 504);
  uint64_t v15 = *(void *)(v0 + 512);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, v12, v14);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  *(void *)(v0 + 608) = OUTLINED_FUNCTION_160();
  id v16 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  *(void *)(v0 + 616) = v16;
  *(void *)(v0 + 624) = (v15 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v16(v12, v14);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  char v18 = *(void *)(v0 + 472);
  id v17 = *(void *)(v0 + 480);
  id v19 = *(void *)(v0 + 424);
  id v20 = type metadata accessor for OmniSearchOptions();
  *(_DWORD *)(v0 + 396) = *(_DWORD *)(v20 + 28);
  *(_DWORD *)(v0 + 672) = *(_DWORD *)(v20 + 32);
  OUTLINED_FUNCTION_209();
  (*(void (**)(uint64_t))(v21 + 160))(v22);
  type metadata accessor for LatencyProfiler();
  swift_allocObject();
  *(void *)(v0 + 632) = LatencyProfiler.init(_:)(0xD00000000000001DLL, 0x8000000258683CA0);
  id v23 = type metadata accessor for UserQuery();
  outlined init with copy of StructuredQueryEntity?(v19 + *(int *)(v23 + 24), v18);
  if (__swift_getEnumTagSinglePayload(v18, 1, v17) == 1)
  {
    os_log_type_t v24 = *(void *)(v0 + 424);
    outlined destroy of StructuredQueryEntity?(*(void *)(v0 + 472));
    outlined init with take of LLMQUModelResponse?(v24 + *(int *)(v23 + 28), v0 + 168, &demangling cache variable for type metadata for LLMQUModelResponse?);
    uint64_t v25 = OUTLINED_FUNCTION_79_0();
    outlined init with take of LLMQUModelResponse?(v25, v26, &demangling cache variable for type metadata for LLMQUModelResponse?);
    if (getEnumTag for ResultsDialog.RenderOption(v0 + 16) == 1)
    {
      unint64_t v27 = 0;
    }
    else
    {
      id v35 = *(void *)(v0 + 424);
      memcpy(__dst, (const void *)(v0 + 16), sizeof(__dst));
      unint64_t v27 = static LLMQUParseConverter.spQUParse(for:query:)((uint64_t)__dst, *(void *)(v35 + 16), *(uint8_t **)(v35 + 24));
    }
  }
  else
  {
    uint64_t v29 = *(void *)(v0 + 488);
    uint64_t v28 = *(void *)(v0 + 496);
    uint64_t v30 = *(void *)(v0 + 424);
    outlined init with take of StructuredQueryEntity(*(void *)(v0 + 472), v28);
    type metadata accessor for SPQUParse();
    uint64_t v31 = OUTLINED_FUNCTION_79_0();
    outlined init with copy of StructuredQueryEntity(v31, v32);
    id v33 = *(void *)(v30 + 16);
    uint64_t v34 = *(void *)(v30 + 24);
    swift_bridgeObjectRetain();
    unint64_t v27 = SPQUParse.init(from:query:)(v29, v33, v34);
    outlined destroy of StructuredQueryEntity(v28);
  }
  *(void *)(v0 + 640) = v27;
  id v36 = *(unsigned char *)(v0 + 394);
  id v37 = *(void *)(v0 + 592);
  uint64_t v38 = *(void *)(v0 + 584);
  uint64_t v39 = *(unsigned char *)(v0 + 393);
  uint64_t v40 = *(void *)(v0 + 576);
  uint64_t v41 = *(void *)(v0 + 424);
  id v43 = *(void *)(v41 + 16);
  uint64_t v42 = *(void *)(v41 + 24);
  *(void *)(v0 + 648) = v42;
  *(void *)(v0 + 320) = v43;
  *(void *)(v0 + 328) = v42;
  *(void *)(v0 + 336) = v37;
  *(unsigned char *)(v0 + 344) = v36;
  *(void *)(v0 + 352) = v27;
  *(void *)(v0 + 360) = v40;
  *(unsigned char *)(v0 + 368) = v39;
  *(void *)(v0 + 376) = v38;
  *(void *)(v0 + 384) = v37;
  *(unsigned char *)(v0 + 392) = v36;
  swift_bridgeObjectRetain();
  uint64_t v44 = v27;
  uint64_t v45 = (void *)swift_task_alloc();
  *(void *)(v0 + 656) = v45;
  *uint64_t v45 = v0;
  v45[1] = LocalSearchService.search(query:sources:allowedTypes:searchOptions:);
  return LocalSearchService.search(spotlightRequest:)(v0 + 320);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_2();
  v3[50] = v1;
  v3[51] = v2;
  v3[52] = v0;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 664) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  NSObject *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int (*v5)(uint64_t);
  void (*v6)(void);
  _WORD *v7;
  os_signpost_type_t v8;
  os_signpost_id_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_11_31();
  swift_bridgeObjectRelease();

  OUTLINED_FUNCTION_209();
  (*(void (**)(void))(v3 + 152))();
  swift_release();
  OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_18_9();
  static os_signpost_type_t.end.getter();
  if (OUTLINED_FUNCTION_60_0())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v4 = OUTLINED_FUNCTION_20_1();
    if (v5(v4) != *MEMORY[0x263F90238])
    {
      OUTLINED_FUNCTION_77();
      v6();
    }
    uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_55();
    OUTLINED_FUNCTION_41_1(v7);
    OUTLINED_FUNCTION_186();
    OUTLINED_FUNCTION_129(&dword_257DC6000, v0, v8, v9, "SearchTool.SpotlightSearch");
    OUTLINED_FUNCTION_34();
  }
  id v16 = v1[51];
  uint64_t v10 = (void (*)(uint64_t, uint64_t))v1[77];
  uint64_t v11 = v1[66];
  uint64_t v12 = v1[63];

  v10(v11, v12);
  OUTLINED_FUNCTION_209();
  (*(void (**)(void))(v13 + 168))();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_149();
  return v14(v16);
}

{
  NSObject *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int (*v5)(uint64_t);
  void (*v6)(void);
  _WORD *v7;
  os_signpost_type_t v8;
  os_signpost_id_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;

  OUTLINED_FUNCTION_11_31();
  swift_bridgeObjectRelease();

  OUTLINED_FUNCTION_209();
  (*(void (**)(void))(v3 + 152))();
  swift_release();
  OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_18_9();
  static os_signpost_type_t.end.getter();
  if (OUTLINED_FUNCTION_60_0())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v4 = OUTLINED_FUNCTION_20_1();
    if (v5(v4) != *MEMORY[0x263F90238])
    {
      OUTLINED_FUNCTION_77();
      v6();
    }
    uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_55();
    OUTLINED_FUNCTION_41_1(v7);
    OUTLINED_FUNCTION_186();
    OUTLINED_FUNCTION_129(&dword_257DC6000, v0, v8, v9, "SearchTool.SpotlightSearch");
    OUTLINED_FUNCTION_34();
  }
  uint64_t v10 = (void (*)(uint64_t, uint64_t))v1[77];
  uint64_t v11 = v1[65];
  uint64_t v12 = v1[63];

  v10(v11, v12);
  OUTLINED_FUNCTION_209();
  (*(void (**)(void))(v13 + 168))();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v14 = (uint64_t (*)(void))v1[1];
  return v14();
}

Swift::String __swiftcall LocalSearchService.toString(documents:)(Swift::OpaquePointer documents)
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v1 - 8);
  if (one-time initialization token for iso8601PrettyPrinted != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SearchResult]);
  lazy protocol witness table accessor for type [SearchResult] and conformance <A> [A]();
  uint64_t v2 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v4 = v3;
  static String.Encoding.utf8.getter();
  String.init(data:encoding:)();
  outlined consume of Data._Representation(v2, v4);
  uint64_t v5 = OUTLINED_FUNCTION_79_0();
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t protocol witness for SearchService.search(query:sources:allowedTypes:searchOptions:) in conformance LocalSearchService()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for AnswerResolvable.extractInfo(query:results:assistantLocale:) in conformance AnswerResolver;
  return LocalSearchService.search(query:sources:allowedTypes:searchOptions:)();
}

BOOL static LocalSearchService.ParseError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void LocalSearchService.ParseError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int LocalSearchService.ParseError.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LocalSearchService.ParseError(char *a1, char *a2)
{
  return static LocalSearchService.ParseError.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocalSearchService.ParseError()
{
  return LocalSearchService.ParseError.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance LocalSearchService.ParseError(uint64_t a1)
{
  LocalSearchService.ParseError.hash(into:)(a1, *v1);
}

unint64_t lazy protocol witness table accessor for type LocalSearchService.ParseError and conformance LocalSearchService.ParseError()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalSearchService.ParseError and conformance LocalSearchService.ParseError;
  if (!lazy protocol witness table cache variable for type LocalSearchService.ParseError and conformance LocalSearchService.ParseError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalSearchService.ParseError and conformance LocalSearchService.ParseError);
  }
  return result;
}

uint64_t initializeWithCopy for LocalSearchService(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LocalSearchService(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for LocalSearchService(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocalSearchService(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 33))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocalSearchService(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalSearchService()
{
  return &type metadata for LocalSearchService;
}

unsigned char *storeEnumTagSinglePayload for LocalSearchService.ParseError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x258476E54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalSearchService.ParseError()
{
  return &type metadata for LocalSearchService.ParseError;
}

uint64_t outlined init with take of LLMQUModelResponse?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v4 = OUTLINED_FUNCTION_79_0();
  v5(v4);
  return a2;
}

uint64_t outlined retain of String(uint64_t a1)
{
  return a1;
}

id *outlined retain of SPQUParse?(id *a1)
{
  id v2 = *a1;
  return a1;
}

id *outlined release of SPQUParse?(id *a1)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_11_31()
{
  return *(void *)(v0 + 648);
}

uint64_t PreExtractedCard.Keys.llmPrompt.getter(uint64_t a1)
{
  return PreExtractedCard.Keys.llmPrompt.getter(a1, (uint64_t (*)(uint64_t))PreExtractedCard.Keys.rawValue.getter);
}

uint64_t PreExtractedContact.Keys.llmPrompt.getter(uint64_t a1)
{
  return PreExtractedCard.Keys.llmPrompt.getter(a1, (uint64_t (*)(uint64_t))PreExtractedContact.Keys.rawValue.getter);
}

uint64_t PreExtractedSharedLink.Keys.llmPrompt.getter(uint64_t a1)
{
  return PreExtractedCard.Keys.llmPrompt.getter(a1, (uint64_t (*)(uint64_t))PreExtractedSharedLink.Keys.rawValue.getter);
}

uint64_t PreExtractedBreadcrumb.Keys.llmPrompt.getter(uint64_t a1)
{
  return PreExtractedCard.Keys.llmPrompt.getter(a1, (uint64_t (*)(uint64_t))PreExtractedBreadcrumb.Keys.rawValue.getter);
}

uint64_t PreExtractedCard.Keys.llmPrompt.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  type metadata accessor for NSUserDefaults();
  uint64_t v4 = static NSUserDefaults.llmPromptLineBreak.getter();
  uint64_t v5 = static NSUserDefaults.llmPromptLineBreak.getter();
  uint64_t v7 = v6;
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = a2(a1);
  uint64_t v11 = v10;
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = 58;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  return v4;
}

void PartialExtractedAttributes.init(item:bundleID:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  Swift::String v8 = (int *)type metadata accessor for PartialExtractedAttributes(0);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_39();
  uint64_t v10 = OUTLINED_FUNCTION_98_8();
  uint64_t v11 = type metadata accessor for RentalCarReservation(v10);
  OUTLINED_FUNCTION_32(v4, v12, v13, v11);
  uint64_t v14 = OUTLINED_FUNCTION_98_8();
  uint64_t v15 = type metadata accessor for TicketedTransportation(v14);
  OUTLINED_FUNCTION_32(v4, v16, v17, v15);
  uint64_t v18 = OUTLINED_FUNCTION_98_8();
  uint64_t v19 = type metadata accessor for TicketedShow(v18);
  OUTLINED_FUNCTION_32(v4, v20, v21, v19);
  uint64_t v22 = OUTLINED_FUNCTION_98_8();
  uint64_t v23 = type metadata accessor for Appointment(v22);
  OUTLINED_FUNCTION_32(v4, v24, v25, v23);
  uint64_t v26 = (uint64_t)v5 + v8[9];
  uint64_t v27 = type metadata accessor for Party(0);
  OUTLINED_FUNCTION_32(v26, v28, v29, v27);
  uint64_t v30 = OUTLINED_FUNCTION_98_8();
  uint64_t v31 = type metadata accessor for Trip(v30);
  OUTLINED_FUNCTION_32(v4, v32, v33, v31);
  uint64_t v34 = (uint64_t)v5 + v8[11];
  uint64_t v35 = type metadata accessor for FlightReservation(0);
  OUTLINED_FUNCTION_32(v34, v36, v37, v35);
  uint64_t v38 = (uint64_t)v5 + v8[12];
  uint64_t v39 = type metadata accessor for HotelReservation(0);
  OUTLINED_FUNCTION_32(v38, v40, v41, v39);
  uint64_t v42 = (uint64_t)v5 + v8[13];
  uint64_t v43 = type metadata accessor for RestaurantReservation(0);
  OUTLINED_FUNCTION_32(v42, v44, v45, v43);
  uint64_t v46 = outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.detectedEventTypes.getter(objc_msgSend(a1, sel_attributeSet));
  if (v46)
  {
    uint64_t v47 = v46;
    if (*(void *)(v46 + 16))
    {
      outlined bridged method (mbnn) of @objc CSSearchableItem.bundleID.setter(a2, a3, a1);
      id v48 = objc_msgSend(a1, sel_uniqueIdentifier);
      uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v51 = v50;

      *uint64_t v5 = v49;
      v5[1] = v51;
      if (one-time initialization token for search != -1) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      __swift_project_value_buffer(v52, (uint64_t)static Logging.search);
      swift_bridgeObjectRetain_n();
      uint64_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = (uint8_t *)swift_slowAlloc();
        v70[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v55 = 136315138;
        uint64_t v56 = swift_bridgeObjectRetain();
        uint64_t v57 = MEMORY[0x25A2C7E60](v56, MEMORY[0x263F8D310]);
        unint64_t v59 = v58;
        swift_bridgeObjectRelease();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v59, v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_257DC6000, v53, v54, "PartialExtractedAttributes: processing detectedEventTypes: %s", v55, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_34();
        OUTLINED_FUNCTION_34();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v65 = *(void *)(v47 + 16);
      if (v65)
      {
        swift_bridgeObjectRetain();
        uint64_t v66 = (uint64_t *)(v47 + 40);
        do
        {
          uint64_t v67 = *v66;
          v70[0] = *(v66 - 1);
          v70[1] = v67;
          swift_bridgeObjectRetain();
          closure #1 in PartialExtractedAttributes.init(item:bundleID:)(v70, (uint64_t)v5, a1);
          swift_bridgeObjectRelease();
          v66 += 2;
          --v65;
        }
        while (v65);

        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      outlined init with copy of PartialExtractedAttributes((uint64_t)v5, a4, (void (*)(void))type metadata accessor for PartialExtractedAttributes);
      OUTLINED_FUNCTION_76_11();
      outlined destroy of PartialExtractedAttributes((uint64_t)v5, (void (*)(void))type metadata accessor for PartialExtractedAttributes);
      goto LABEL_20;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for search != -1) {
    swift_once();
  }
  uint64_t v60 = type metadata accessor for Logger();
  uint64_t v61 = (void *)OUTLINED_FUNCTION_43_1(v60, (uint64_t)static Logging.search);
  os_log_type_t v62 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_54_9(v62))
  {
    *(_WORD *)OUTLINED_FUNCTION_55() = 0;
    OUTLINED_FUNCTION_116_8(&dword_257DC6000, v63, v64, "PartialExtractedAttributes: No detectedEventTypes, skip creating PartialExtractedAttributes.");
    OUTLINED_FUNCTION_34();
  }

  outlined destroy of SearchResult?(v4, &demangling cache variable for type metadata for RentalCarReservation?);
  outlined destroy of SearchResult?(v4, (uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
  outlined destroy of SearchResult?(v4, &demangling cache variable for type metadata for TicketedShow?);
  outlined destroy of SearchResult?(v4, (uint64_t *)&demangling cache variable for type metadata for Appointment?);
  outlined destroy of SearchResult?(v26, &demangling cache variable for type metadata for Party?);
  outlined destroy of SearchResult?(v4, (uint64_t *)&demangling cache variable for type metadata for Trip?);
  outlined destroy of SearchResult?(v34, (uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
  outlined destroy of SearchResult?(v38, &demangling cache variable for type metadata for HotelReservation?);
  outlined destroy of SearchResult?(v42, (uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
  OUTLINED_FUNCTION_64_11(a4);
LABEL_20:
  OUTLINED_FUNCTION_119_0();
}

uint64_t PreExtractedCard.init(item:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PreExtractedCard.init(item:)(a1, &demangling cache variable for type metadata for PreExtractedCard?, (void (*)(uint64_t, uint64_t))PreExtractedCard.init(item:featureFlagService:), type metadata accessor for PreExtractedCard, (void (*)(void))type metadata accessor for PreExtractedCard, a2);
}

Swift::String *KV_SEPARATOR.unsafeMutableAddressor()
{
  return &KV_SEPARATOR;
}

uint64_t PartialExtractedAttributes.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PartialExtractedAttributes.id.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t PartialExtractedAttributes.rentalCarReservation.getter()
{
  uint64_t v2 = OUTLINED_FUNCTION_109_9();
  return outlined init with copy of SearchResultItem?(v1 + *(int *)(v2 + 20), v0, &demangling cache variable for type metadata for RentalCarReservation?);
}

uint64_t PartialExtractedAttributes.rentalCarReservation.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PartialExtractedAttributes(0);
  return outlined assign with take of SearchResultItem?(a1, v1 + *(int *)(v3 + 20), &demangling cache variable for type metadata for RentalCarReservation?);
}

uint64_t (*PartialExtractedAttributes.rentalCarReservation.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t PartialExtractedAttributes.ticketedTransportation.getter()
{
  uint64_t v2 = OUTLINED_FUNCTION_109_9();
  return outlined init with copy of SearchResultItem?(v1 + *(int *)(v2 + 24), v0, (uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
}

uint64_t PartialExtractedAttributes.ticketedTransportation.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PartialExtractedAttributes(0);
  return outlined assign with take of SearchResultItem?(a1, v1 + *(int *)(v3 + 24), (uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
}

uint64_t (*PartialExtractedAttributes.ticketedTransportation.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t PartialExtractedAttributes.ticketedShow.getter()
{
  uint64_t v2 = OUTLINED_FUNCTION_109_9();
  return outlined init with copy of SearchResultItem?(v1 + *(int *)(v2 + 28), v0, &demangling cache variable for type metadata for TicketedShow?);
}

uint64_t PartialExtractedAttributes.ticketedShow.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PartialExtractedAttributes(0);
  return outlined assign with take of SearchResultItem?(a1, v1 + *(int *)(v3 + 28), &demangling cache variable for type metadata for TicketedShow?);
}

uint64_t (*PartialExtractedAttributes.ticketedShow.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t PartialExtractedAttributes.appointment.getter()
{
  return PartialExtractedAttributes.appointment.getter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_66_16();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_62_14(*(int *)(v2 + 32));
}

uint64_t PartialExtractedAttributes.appointment.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PartialExtractedAttributes(0);
  return outlined assign with take of SearchResultItem?(a1, v1 + *(int *)(v3 + 32), (uint64_t *)&demangling cache variable for type metadata for Appointment?);
}

uint64_t (*PartialExtractedAttributes.appointment.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t PartialExtractedAttributes.party.getter()
{
  uint64_t v2 = OUTLINED_FUNCTION_109_9();
  return outlined init with copy of SearchResultItem?(v1 + *(int *)(v2 + 36), v0, &demangling cache variable for type metadata for Party?);
}

uint64_t PartialExtractedAttributes.party.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PartialExtractedAttributes(0);
  return outlined assign with take of SearchResultItem?(a1, v1 + *(int *)(v3 + 36), &demangling cache variable for type metadata for Party?);
}

uint64_t (*PartialExtractedAttributes.party.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t PartialExtractedAttributes.trip.getter()
{
  return PartialExtractedAttributes.trip.getter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_127_6();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_62_14(*(int *)(v2 + 40));
}

uint64_t PartialExtractedAttributes.trip.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PartialExtractedAttributes(0);
  return outlined assign with take of SearchResultItem?(a1, v1 + *(int *)(v3 + 40), (uint64_t *)&demangling cache variable for type metadata for Trip?);
}

uint64_t (*PartialExtractedAttributes.trip.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t PartialExtractedAttributes.flightReservation.getter()
{
  return PartialExtractedAttributes.flightReservation.getter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_127_6();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_62_14(*(int *)(v2 + 44));
}

uint64_t PartialExtractedAttributes.flightReservation.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PartialExtractedAttributes(0);
  return outlined assign with take of SearchResultItem?(a1, v1 + *(int *)(v3 + 44), (uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
}

uint64_t (*PartialExtractedAttributes.flightReservation.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t PartialExtractedAttributes.hotelReservation.getter()
{
  return PartialExtractedAttributes.hotelReservation.getter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_66_16();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_62_14(*(int *)(v2 + 48));
}

uint64_t PartialExtractedAttributes.hotelReservation.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PartialExtractedAttributes(0);
  return outlined assign with take of SearchResultItem?(a1, v1 + *(int *)(v3 + 48), &demangling cache variable for type metadata for HotelReservation?);
}

uint64_t (*PartialExtractedAttributes.hotelReservation.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t PartialExtractedAttributes.restaurantReservation.getter()
{
  return PartialExtractedAttributes.restaurantReservation.getter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_66_16();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_62_14(*(int *)(v2 + 52));
}

uint64_t PartialExtractedAttributes.restaurantReservation.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PartialExtractedAttributes(0);
  return outlined assign with take of SearchResultItem?(a1, v1 + *(int *)(v3 + 52), (uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
}

uint64_t (*PartialExtractedAttributes.restaurantReservation.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

void closure #1 in PartialExtractedAttributes.init(item:bundleID:)(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v102 = a2;
  id v101 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
  MEMORY[0x270FA5388](v4 - 8);
  unsigned int v6 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v98 = (uint64_t)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v99 = (uint64_t)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v100 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v24 = (char *)&v97 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v27 = (char *)&v97 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *a1;
  unint64_t v28 = a1[1];
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v29 && v30 == v28)
  {
    swift_bridgeObjectRelease();
    goto LABEL_51;
  }
  uint64_t v97 = v6;
  char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v32)
  {
LABEL_51:
    id v63 = v101;
    RentalCarReservation.init(item:checkEventType:)();
    uint64_t v64 = type metadata accessor for PartialExtractedAttributes(0);
    outlined assign with take of SearchResultItem?((uint64_t)v27, v102 + *(int *)(v64 + 20), &demangling cache variable for type metadata for RentalCarReservation?);
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v65 = type metadata accessor for Logger();
    __swift_project_value_buffer(v65, (uint64_t)static Logging.search);
    unint64_t v58 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v58, v66)) {
      goto LABEL_97;
    }
    uint64_t v67 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v67 = 0;
    uint64_t v68 = "PartialExtractedAttributes: created RentalCarReservation";
LABEL_95:
    _os_log_impl(&dword_257DC6000, v58, v66, v68, v67, 2u);
    os_log_type_t v62 = v67;
    goto LABEL_96;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v29 && v33 == v28)
  {
    swift_bridgeObjectRelease();
    goto LABEL_56;
  }
  char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v35)
  {
LABEL_56:
    id v69 = v101;
    TicketedTransportation.init(item:checkEventType:)();
    uint64_t v70 = type metadata accessor for PartialExtractedAttributes(0);
    outlined assign with take of SearchResultItem?((uint64_t)v24, v102 + *(int *)(v70 + 24), (uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v71 = type metadata accessor for Logger();
    __swift_project_value_buffer(v71, (uint64_t)static Logging.search);
    unint64_t v58 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v58, v66)) {
      goto LABEL_97;
    }
    uint64_t v67 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v67 = 0;
    uint64_t v68 = "PartialExtractedAttributes: created TicketedTransportation";
    goto LABEL_95;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v29 && v36 == v28)
  {
    swift_bridgeObjectRelease();
    goto LABEL_61;
  }
  char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v38)
  {
LABEL_61:
    id v72 = v101;
    TicketedShow.init(item:checkEventType:)();
    uint64_t v73 = type metadata accessor for PartialExtractedAttributes(0);
    outlined assign with take of SearchResultItem?((uint64_t)v21, v102 + *(int *)(v73 + 28), &demangling cache variable for type metadata for TicketedShow?);
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v74 = type metadata accessor for Logger();
    __swift_project_value_buffer(v74, (uint64_t)static Logging.search);
    unint64_t v58 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v58, v66)) {
      goto LABEL_97;
    }
    uint64_t v67 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v67 = 0;
    uint64_t v68 = "PartialExtractedAttributes: created TicketedShow";
    goto LABEL_95;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v29 && v39 == v28)
  {
    swift_bridgeObjectRelease();
    goto LABEL_66;
  }
  char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v41)
  {
LABEL_66:
    id v75 = v101;
    Appointment.init(item:checkEventType:)();
    uint64_t v76 = type metadata accessor for PartialExtractedAttributes(0);
    outlined assign with take of SearchResultItem?((uint64_t)v18, v102 + *(int *)(v76 + 32), (uint64_t *)&demangling cache variable for type metadata for Appointment?);
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v77 = type metadata accessor for Logger();
    __swift_project_value_buffer(v77, (uint64_t)static Logging.search);
    unint64_t v58 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v58, v66)) {
      goto LABEL_97;
    }
    uint64_t v67 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v67 = 0;
    uint64_t v68 = "PartialExtractedAttributes: created Appointment";
    goto LABEL_95;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v29 && v42 == v28)
  {
    swift_bridgeObjectRelease();
    goto LABEL_71;
  }
  char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v44)
  {
LABEL_71:
    id v78 = v101;
    Party.init(item:checkEventType:)();
    uint64_t v79 = type metadata accessor for PartialExtractedAttributes(0);
    outlined assign with take of SearchResultItem?((uint64_t)v15, v102 + *(int *)(v79 + 36), &demangling cache variable for type metadata for Party?);
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v80 = type metadata accessor for Logger();
    __swift_project_value_buffer(v80, (uint64_t)static Logging.search);
    unint64_t v58 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v58, v66)) {
      goto LABEL_97;
    }
    uint64_t v67 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v67 = 0;
    uint64_t v68 = "PartialExtractedAttributes: created Party";
    goto LABEL_95;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v29 && v45 == v28)
  {
    swift_bridgeObjectRelease();
    goto LABEL_76;
  }
  char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v47)
  {
LABEL_76:
    id v81 = v101;
    uint64_t v82 = (uint64_t)v100;
    Trip.init(item:checkEventType:)();
    uint64_t v83 = type metadata accessor for PartialExtractedAttributes(0);
    outlined assign with take of SearchResultItem?(v82, v102 + *(int *)(v83 + 40), (uint64_t *)&demangling cache variable for type metadata for Trip?);
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v84 = type metadata accessor for Logger();
    __swift_project_value_buffer(v84, (uint64_t)static Logging.search);
    unint64_t v58 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v58, v66)) {
      goto LABEL_97;
    }
    uint64_t v67 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v67 = 0;
    uint64_t v68 = "PartialExtractedAttributes: created Trip";
    goto LABEL_95;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v29 && v48 == v28)
  {
    swift_bridgeObjectRelease();
    goto LABEL_81;
  }
  char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v50)
  {
LABEL_81:
    id v85 = v101;
    uint64_t v86 = v99;
    FlightReservation.init(item:)(v85, v99);
    uint64_t v87 = type metadata accessor for PartialExtractedAttributes(0);
    outlined assign with take of SearchResultItem?(v86, v102 + *(int *)(v87 + 44), (uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v88 = type metadata accessor for Logger();
    __swift_project_value_buffer(v88, (uint64_t)static Logging.search);
    unint64_t v58 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v58, v66)) {
      goto LABEL_97;
    }
    uint64_t v67 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v67 = 0;
    uint64_t v68 = "PartialExtractedAttributes: created FlightReservation";
    goto LABEL_95;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v29 && v51 == v28)
  {
    swift_bridgeObjectRelease();
    goto LABEL_86;
  }
  char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v53)
  {
LABEL_86:
    id v89 = v101;
    uint64_t v90 = v98;
    HotelReservation.init(item:answerAttributes:requireDates:)(v89, MEMORY[0x263F8EE78], 0, v98);
    uint64_t v91 = type metadata accessor for PartialExtractedAttributes(0);
    outlined assign with take of SearchResultItem?(v90, v102 + *(int *)(v91 + 48), &demangling cache variable for type metadata for HotelReservation?);
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v92 = type metadata accessor for Logger();
    __swift_project_value_buffer(v92, (uint64_t)static Logging.search);
    unint64_t v58 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v58, v66)) {
      goto LABEL_97;
    }
    uint64_t v67 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v67 = 0;
    uint64_t v68 = "PartialExtractedAttributes: created HotelReservation";
    goto LABEL_95;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v29 && v54 == v28)
  {
    swift_bridgeObjectRelease();
    goto LABEL_91;
  }
  char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v56)
  {
LABEL_91:
    id v93 = v101;
    uint64_t v94 = (uint64_t)v97;
    RestaurantReservation.init(item:answerAttributes:requireDates:)();
    uint64_t v95 = type metadata accessor for PartialExtractedAttributes(0);
    outlined assign with take of SearchResultItem?(v94, v102 + *(int *)(v95 + 52), (uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v96 = type metadata accessor for Logger();
    __swift_project_value_buffer(v96, (uint64_t)static Logging.search);
    unint64_t v58 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v58, v66)) {
      goto LABEL_97;
    }
    uint64_t v67 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v67 = 0;
    uint64_t v68 = "PartialExtractedAttributes: created RestaurantReservation";
    goto LABEL_95;
  }
  if (one-time initialization token for search != -1) {
    swift_once();
  }
  uint64_t v57 = type metadata accessor for Logger();
  __swift_project_value_buffer(v57, (uint64_t)static Logging.search);
  swift_bridgeObjectRetain_n();
  unint64_t v58 = Logger.logObject.getter();
  os_log_type_t v59 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v58, v59))
  {
    uint64_t v60 = (uint8_t *)swift_slowAlloc();
    uint64_t v61 = swift_slowAlloc();
    uint64_t v104 = v61;
    *(_DWORD *)uint64_t v60 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v103 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v28, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_257DC6000, v58, v59, "PartialExtractedAttributes: unimplemented eventType: %s", v60, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2C94B0](v61, -1, -1);
    os_log_type_t v62 = v60;
LABEL_96:
    MEMORY[0x25A2C94B0](v62, -1, -1);
LABEL_97:

    return;
  }

  swift_bridgeObjectRelease_n();
}

uint64_t PartialExtractedAttributes.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000025867D1C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000025867C350 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    BOOL v6 = a1 == 0x646574656B636974 && a2 == 0xEC000000776F6853;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else
    {
      BOOL v7 = a1 == 0x6D746E696F707061 && a2 == 0xEB00000000746E65;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 4;
      }
      else
      {
        BOOL v8 = a1 == 0x7974726170 && a2 == 0xE500000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 5;
        }
        else
        {
          BOOL v9 = a1 == 1885958772 && a2 == 0xE400000000000000;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 6;
          }
          else if (a1 == 0xD000000000000011 && a2 == 0x800000025867C2D0 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 7;
          }
          else if (a1 == 0xD000000000000010 && a2 == 0x800000025867C310 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 8;
          }
          else if (a1 == 0xD000000000000015 && a2 == 0x800000025867C2F0)
          {
            swift_bridgeObjectRelease();
            return 9;
          }
          else
          {
            char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v10) {
              return 9;
            }
            else {
              return 10;
            }
          }
        }
      }
    }
  }
}

uint64_t PartialExtractedAttributes.CodingKeys.init(intValue:)()
{
  return 10;
}

unint64_t PartialExtractedAttributes.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000014;
      break;
    case 2:
      unint64_t result = 0xD000000000000016;
      break;
    case 3:
      unint64_t result = 0x646574656B636974;
      break;
    case 4:
      unint64_t result = 0x6D746E696F707061;
      break;
    case 5:
      unint64_t result = 0x7974726170;
      break;
    case 6:
      unint64_t result = 1885958772;
      break;
    case 7:
      unint64_t result = 0xD000000000000011;
      break;
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 9:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PartialExtractedAttributes.CodingKeys()
{
  return PartialExtractedAttributes.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PartialExtractedAttributes.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PartialExtractedAttributes.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance PartialExtractedAttributes.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = PartialExtractedAttributes.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PartialExtractedAttributes.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PartialExtractedAttributes.CodingKeys and conformance PartialExtractedAttributes.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PartialExtractedAttributes.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PartialExtractedAttributes.CodingKeys and conformance PartialExtractedAttributes.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t PartialExtractedAttributes.encode(to:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PartialExtractedAttributes.CodingKeys>);
  OUTLINED_FUNCTION_1();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_59_0();
  OUTLINED_FUNCTION_61_13();
  lazy protocol witness table accessor for type PartialExtractedAttributes.CodingKeys and conformance PartialExtractedAttributes.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v0)
  {
    type metadata accessor for PartialExtractedAttributes(0);
    type metadata accessor for RentalCarReservation(0);
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type RentalCarReservation and conformance RentalCarReservation, (void (*)(uint64_t))type metadata accessor for RentalCarReservation);
    OUTLINED_FUNCTION_16_27();
    type metadata accessor for TicketedTransportation(0);
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type TicketedTransportation and conformance TicketedTransportation, (void (*)(uint64_t))type metadata accessor for TicketedTransportation);
    OUTLINED_FUNCTION_16_27();
    type metadata accessor for TicketedShow(0);
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type TicketedShow and conformance TicketedShow, (void (*)(uint64_t))type metadata accessor for TicketedShow);
    OUTLINED_FUNCTION_16_27();
    type metadata accessor for Appointment(0);
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type Appointment and conformance Appointment, (void (*)(uint64_t))type metadata accessor for Appointment);
    OUTLINED_FUNCTION_16_27();
    type metadata accessor for Party(0);
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type Party and conformance Party, (void (*)(uint64_t))type metadata accessor for Party);
    OUTLINED_FUNCTION_16_27();
    type metadata accessor for Trip(0);
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type Trip and conformance Trip, (void (*)(uint64_t))type metadata accessor for Trip);
    OUTLINED_FUNCTION_16_27();
    type metadata accessor for FlightReservation(0);
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type FlightReservation and conformance FlightReservation, (void (*)(uint64_t))type metadata accessor for FlightReservation);
    OUTLINED_FUNCTION_16_27();
    type metadata accessor for HotelReservation(0);
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type HotelReservation and conformance HotelReservation, (void (*)(uint64_t))type metadata accessor for HotelReservation);
    OUTLINED_FUNCTION_16_27();
    type metadata accessor for RestaurantReservation(0);
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type RestaurantReservation and conformance RestaurantReservation, (void (*)(uint64_t))type metadata accessor for RestaurantReservation);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
}

void PartialExtractedAttributes.init(from:)()
{
  OUTLINED_FUNCTION_105_0();
  uint64_t v120 = v0;
  uint64_t v4 = v3;
  uint64_t v101 = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
  uint64_t v7 = OUTLINED_FUNCTION_81(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_184_0();
  OUTLINED_FUNCTION_194_0(v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
  uint64_t v10 = OUTLINED_FUNCTION_81(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_184_0();
  OUTLINED_FUNCTION_194_0(v11);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
  uint64_t v13 = OUTLINED_FUNCTION_81(v12);
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_184_0();
  OUTLINED_FUNCTION_194_0(v14);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
  uint64_t v16 = OUTLINED_FUNCTION_81(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_184_0();
  OUTLINED_FUNCTION_194_0(v17);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
  uint64_t v19 = OUTLINED_FUNCTION_81(v18);
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_184_0();
  OUTLINED_FUNCTION_194_0(v20);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
  uint64_t v22 = OUTLINED_FUNCTION_81(v21);
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_184_0();
  OUTLINED_FUNCTION_194_0(v23);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
  uint64_t v25 = OUTLINED_FUNCTION_81(v24);
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_184_0();
  uint64_t v110 = v26;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
  uint64_t v28 = OUTLINED_FUNCTION_81(v27);
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_184_0();
  uint64_t v109 = v29;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
  uint64_t v31 = OUTLINED_FUNCTION_81(v30);
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_184_0();
  uint64_t v108 = v32;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PartialExtractedAttributes.CodingKeys>);
  OUTLINED_FUNCTION_1();
  uint64_t v111 = v34;
  uint64_t v112 = v33;
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_13_12();
  uint64_t v35 = type metadata accessor for PartialExtractedAttributes(0);
  uint64_t v36 = v35 - 8;
  MEMORY[0x270FA5388](v35);
  char v38 = (void *)((char *)v100 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v39 = OUTLINED_FUNCTION_67_14();
  type metadata accessor for RentalCarReservation(v39);
  uint64_t v118 = v1;
  uint64_t v40 = OUTLINED_FUNCTION_41_23();
  uint64_t v107 = v41;
  __swift_storeEnumTagSinglePayload(v40, v42, v43, v41);
  uint64_t v44 = OUTLINED_FUNCTION_67_14();
  type metadata accessor for TicketedTransportation(v44);
  uint64_t v117 = v1;
  uint64_t v45 = OUTLINED_FUNCTION_41_23();
  uint64_t v106 = v46;
  __swift_storeEnumTagSinglePayload(v45, v47, v48, v46);
  uint64_t v49 = OUTLINED_FUNCTION_67_14();
  type metadata accessor for TicketedShow(v49);
  uint64_t v116 = v1;
  uint64_t v50 = OUTLINED_FUNCTION_41_23();
  uint64_t v105 = v51;
  __swift_storeEnumTagSinglePayload(v50, v52, v53, v51);
  uint64_t v54 = OUTLINED_FUNCTION_67_14();
  type metadata accessor for Appointment(v54);
  uint64_t v125 = v1;
  uint64_t v55 = OUTLINED_FUNCTION_41_23();
  uint64_t v104 = v56;
  __swift_storeEnumTagSinglePayload(v55, v57, v58, v56);
  uint64_t v59 = OUTLINED_FUNCTION_67_14();
  uint64_t v60 = type metadata accessor for Party(v59);
  uint64_t v124 = v1;
  uint64_t v61 = OUTLINED_FUNCTION_41_23();
  __swift_storeEnumTagSinglePayload(v61, v62, v63, v60);
  uint64_t v64 = OUTLINED_FUNCTION_67_14();
  uint64_t v65 = type metadata accessor for Trip(v64);
  uint64_t v123 = v1;
  uint64_t v66 = OUTLINED_FUNCTION_41_23();
  __swift_storeEnumTagSinglePayload(v66, v67, v68, v65);
  uint64_t v69 = OUTLINED_FUNCTION_67_14();
  uint64_t v70 = type metadata accessor for FlightReservation(v69);
  uint64_t v122 = v1;
  uint64_t v71 = OUTLINED_FUNCTION_41_23();
  __swift_storeEnumTagSinglePayload(v71, v72, v73, v70);
  uint64_t v74 = OUTLINED_FUNCTION_67_14();
  uint64_t v75 = type metadata accessor for HotelReservation(v74);
  uint64_t v121 = v1;
  uint64_t v76 = OUTLINED_FUNCTION_41_23();
  __swift_storeEnumTagSinglePayload(v76, v77, v78, v75);
  uint64_t v79 = *(int *)(v36 + 60);
  uint64_t v113 = v38;
  uint64_t v80 = (uint64_t)v38 + v79;
  uint64_t v81 = type metadata accessor for RestaurantReservation(0);
  uint64_t v119 = v80;
  __swift_storeEnumTagSinglePayload(v80, 1, 1, v81);
  uint64_t v82 = v4;
  uint64_t v83 = v4[3];
  unint64_t v115 = v82;
  __swift_project_boxed_opaque_existential_1(v82, v83);
  lazy protocol witness table accessor for type PartialExtractedAttributes.CodingKeys and conformance PartialExtractedAttributes.CodingKeys();
  uint64_t v114 = v2;
  uint64_t v84 = v120;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v84)
  {
    uint64_t v90 = v118;
    uint64_t v91 = v117;
    uint64_t v92 = v116;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v115);
    uint64_t v93 = v119;
    outlined destroy of SearchResult?(v90, &demangling cache variable for type metadata for RentalCarReservation?);
    outlined destroy of SearchResult?(v91, (uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
    outlined destroy of SearchResult?(v92, &demangling cache variable for type metadata for TicketedShow?);
    outlined destroy of SearchResult?(v125, (uint64_t *)&demangling cache variable for type metadata for Appointment?);
    outlined destroy of SearchResult?(v124, &demangling cache variable for type metadata for Party?);
    outlined destroy of SearchResult?(v123, (uint64_t *)&demangling cache variable for type metadata for Trip?);
    outlined destroy of SearchResult?(v122, (uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
    outlined destroy of SearchResult?(v121, &demangling cache variable for type metadata for HotelReservation?);
    outlined destroy of SearchResult?(v93, (uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
  }
  else
  {
    uint64_t v85 = v107;
    uint64_t v86 = v108;
    uint64_t v120 = v60;
    uint64_t v87 = v109;
    v100[4] = v65;
    v100[3] = v70;
    v100[2] = v75;
    uint64_t v88 = v110;
    v100[1] = v81;
    uint64_t v89 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v94 = v113;
    *uint64_t v113 = v89;
    v94[1] = v95;
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type RentalCarReservation and conformance RentalCarReservation, (void (*)(uint64_t))type metadata accessor for RentalCarReservation);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of SearchResultItem?(v86, v118, &demangling cache variable for type metadata for RentalCarReservation?);
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type TicketedTransportation and conformance TicketedTransportation, (void (*)(uint64_t))type metadata accessor for TicketedTransportation);
    OUTLINED_FUNCTION_39_21();
    outlined assign with take of SearchResultItem?(v87, v117, (uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type TicketedShow and conformance TicketedShow, (void (*)(uint64_t))type metadata accessor for TicketedShow);
    OUTLINED_FUNCTION_39_21();
    outlined assign with take of SearchResultItem?(v88, v116, &demangling cache variable for type metadata for TicketedShow?);
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type Appointment and conformance Appointment, (void (*)(uint64_t))type metadata accessor for Appointment);
    OUTLINED_FUNCTION_106_11();
    OUTLINED_FUNCTION_39_21();
    outlined assign with take of SearchResultItem?(v85, v125, (uint64_t *)&demangling cache variable for type metadata for Appointment?);
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type Party and conformance Party, (void (*)(uint64_t))type metadata accessor for Party);
    OUTLINED_FUNCTION_106_11();
    OUTLINED_FUNCTION_39_21();
    uint64_t v96 = (uint64_t)v115;
    outlined assign with take of SearchResultItem?(v85, v124, &demangling cache variable for type metadata for Party?);
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type Trip and conformance Trip, (void (*)(uint64_t))type metadata accessor for Trip);
    OUTLINED_FUNCTION_106_11();
    OUTLINED_FUNCTION_39_21();
    outlined assign with take of SearchResultItem?(v85, v123, (uint64_t *)&demangling cache variable for type metadata for Trip?);
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type FlightReservation and conformance FlightReservation, (void (*)(uint64_t))type metadata accessor for FlightReservation);
    OUTLINED_FUNCTION_106_11();
    OUTLINED_FUNCTION_39_21();
    outlined assign with take of SearchResultItem?(v85, v122, (uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
    char v127 = 8;
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type HotelReservation and conformance HotelReservation, (void (*)(uint64_t))type metadata accessor for HotelReservation);
    uint64_t v97 = v103;
    OUTLINED_FUNCTION_39_21();
    outlined assign with take of SearchResultItem?(v97, v121, &demangling cache variable for type metadata for HotelReservation?);
    char v126 = 9;
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type RestaurantReservation and conformance RestaurantReservation, (void (*)(uint64_t))type metadata accessor for RestaurantReservation);
    OUTLINED_FUNCTION_39_21();
    OUTLINED_FUNCTION_65();
    v98();
    outlined assign with take of SearchResultItem?(v102, v119, (uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
    uint64_t v99 = v113;
    outlined init with copy of PartialExtractedAttributes((uint64_t)v113, v101, (void (*)(void))type metadata accessor for PartialExtractedAttributes);
    __swift_destroy_boxed_opaque_existential_1Tm(v96);
    outlined destroy of PartialExtractedAttributes((uint64_t)v99, (void (*)(void))type metadata accessor for PartialExtractedAttributes);
  }
  OUTLINED_FUNCTION_120_0();
}

void protocol witness for Decodable.init(from:) in conformance PartialExtractedAttributes()
{
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PartialExtractedAttributes()
{
  return PartialExtractedAttributes.encode(to:)();
}

uint64_t PreExtractedCard.id.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t PreExtractedCard.cardType.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t PreExtractedCard.cardSubType.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t PreExtractedCard.cardProvider.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t PreExtractedCard.cardUnderName.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t PreExtractedCard.cardNumber.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t PreExtractedCard.cardIssueDate.getter()
{
  return PartialExtractedAttributes.trip.getter();
}

uint64_t PreExtractedCard.cardExpirationDate.getter()
{
  return PartialExtractedAttributes.flightReservation.getter();
}

uint64_t PreExtractedCard.cardIssuedBy.getter()
{
  return PreExtractedCard.cardIssuedBy.getter((void (*)(void))type metadata accessor for PreExtractedCard);
}

uint64_t PreExtractedCard.cardRegion.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t PreExtractedCard.cardCountry.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t PreExtractedCard.birthday.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PreExtractedCard(0);
  return outlined init with copy of SearchResultItem?(v1 + *(int *)(v3 + 60), a1, &demangling cache variable for type metadata for Date?);
}

uint64_t PreExtractedCard.cardPlaceOfBirth.getter()
{
  return PreExtractedCard.cardPlaceOfBirth.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_102_8();
  v1(v0);
  OUTLINED_FUNCTION_75_2();
  return OUTLINED_FUNCTION_79_0();
}

uint64_t PreExtractedCard.cardAddress.getter()
{
  return PreExtractedCard.cardAddress.getter((void (*)(void))type metadata accessor for PreExtractedCard);
}

uint64_t PreExtractedCard.cardSex.getter()
{
  return PreExtractedCard.cardSex.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_102_8();
  v1(v0);
  OUTLINED_FUNCTION_75_2();
  return OUTLINED_FUNCTION_79_0();
}

uint64_t PreExtractedCard.cardHeight.getter()
{
  return PreExtractedCard.cardHeight.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_102_8();
  v1(v0);
  OUTLINED_FUNCTION_75_2();
  return OUTLINED_FUNCTION_79_0();
}

uint64_t PreExtractedCard.cardEyeColor.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t PreExtractedCard.cardWeight.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t PreExtractedCard.cardCategory.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t PreExtractedCard.cardRestrictions.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

void PreExtractedCard.init(item:featureFlagService:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v9 = OUTLINED_FUNCTION_81(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_95_1();
  uint64_t v181 = v10 - v11;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_100_11(v13, v14, v15, v16, v17, v18, v19, v20, v177);
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_43_8();
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v177 - v24;
  uint64_t v26 = MEMORY[0x270FA5388](v23);
  uint64_t v28 = (char *)&v177 - v27;
  MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)&v177 - v29;
  uint64_t v31 = (int *)type metadata accessor for PreExtractedCard(0);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_13_12();
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 80))(12))
  {
    uint64_t v180 = a2;
    id v33 = objc_msgSend(a1, sel_attributeSet);
    outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v33, (SEL *)&selRef_cardType);
    uint64_t v35 = v34;
    swift_bridgeObjectRelease();
    if (v35)
    {
      uint64_t v178 = a1;
      uint64_t v179 = a3;
      id v36 = objc_msgSend(a1, sel_uniqueIdentifier);
      uint64_t v37 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v39 = v38;

      *uint64_t v4 = v37;
      v4[1] = v39;
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v40);
      uint64_t v41 = OUTLINED_FUNCTION_72_11();
      id v42 = OUTLINED_FUNCTION_48_15(v41, sel_attributeForKey_);

      if (v42)
      {
        OUTLINED_FUNCTION_36_20();
        uint64_t v43 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v43, v44, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v186)
      {
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v60 = v183;
          uint64_t v61 = v184;
          goto LABEL_24;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v185, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      OUTLINED_FUNCTION_47_15();
LABEL_24:
      v4[2] = v60;
      v4[3] = v61;
      uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v62);
      uint64_t v63 = OUTLINED_FUNCTION_72_11();
      id v64 = OUTLINED_FUNCTION_48_15(v63, sel_attributeForKey_);

      if (v64)
      {
        OUTLINED_FUNCTION_36_20();
        uint64_t v65 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v65, v66, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v186)
      {
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v67 = v183;
          uint64_t v68 = v184;
          goto LABEL_32;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v185, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      OUTLINED_FUNCTION_47_15();
LABEL_32:
      v4[4] = v67;
      v4[5] = v68;
      uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v69);
      uint64_t v70 = OUTLINED_FUNCTION_72_11();
      id v71 = OUTLINED_FUNCTION_48_15(v70, sel_attributeForKey_);

      if (v71)
      {
        OUTLINED_FUNCTION_36_20();
        uint64_t v72 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v72, v73, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v186)
      {
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v74 = v183;
          uint64_t v75 = v184;
          goto LABEL_40;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v185, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      OUTLINED_FUNCTION_47_15();
LABEL_40:
      v4[6] = v74;
      v4[7] = v75;
      uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v76);
      uint64_t v77 = OUTLINED_FUNCTION_72_11();
      id v78 = OUTLINED_FUNCTION_48_15(v77, sel_attributeForKey_);

      if (v78)
      {
        OUTLINED_FUNCTION_36_20();
        uint64_t v79 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v79, v80, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v186)
      {
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v81 = v183;
          uint64_t v82 = v184;
          goto LABEL_48;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v185, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      OUTLINED_FUNCTION_47_15();
LABEL_48:
      v4[8] = v81;
      v4[9] = v82;
      uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v83);
      uint64_t v84 = OUTLINED_FUNCTION_72_11();
      id v85 = OUTLINED_FUNCTION_48_15(v84, sel_attributeForKey_);

      if (v85)
      {
        OUTLINED_FUNCTION_36_20();
        uint64_t v86 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v86, v87, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v186)
      {
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v88 = v183;
          uint64_t v89 = v184;
          goto LABEL_56;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v185, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      OUTLINED_FUNCTION_47_15();
LABEL_56:
      v4[10] = v88;
      v4[11] = v89;
      uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v90);
      uint64_t v91 = OUTLINED_FUNCTION_72_11();
      id v92 = OUTLINED_FUNCTION_48_15(v91, sel_attributeForKey_);

      if (v92)
      {
        OUTLINED_FUNCTION_36_20();
        uint64_t v93 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      uint64_t v95 = v179;
      OUTLINED_FUNCTION_10_31(v93, v94, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v186)
      {
        uint64_t v96 = type metadata accessor for Date();
        int v97 = swift_dynamicCast();
        OUTLINED_FUNCTION_6_6((uint64_t)v28, v97 ^ 1u);
        if (__swift_getEnumTagSinglePayload((uint64_t)v28, 1, v96) != 1)
        {
          OUTLINED_FUNCTION_1_0();
          OUTLINED_FUNCTION_99_9();
          v98();
          OUTLINED_FUNCTION_6_6((uint64_t)v30, 0);
          goto LABEL_64;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v185, (uint64_t *)&demangling cache variable for type metadata for Any?);
        type metadata accessor for Date();
        OUTLINED_FUNCTION_92_12((uint64_t)v28);
      }
      type metadata accessor for Date();
      OUTLINED_FUNCTION_92_12((uint64_t)v30);
      outlined destroy of SearchResult?((uint64_t)v28, &demangling cache variable for type metadata for Date?);
LABEL_64:
      _sypSgWObTm_0((uint64_t)v30, (uint64_t)v4 + v31[10], &demangling cache variable for type metadata for Date?);
      uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v100 = (void *)MEMORY[0x25A2C7AB0](v99);
      swift_bridgeObjectRelease();
      id v101 = objc_msgSend(v33, sel_attributeForKey_, v100);

      if (v101)
      {
        OUTLINED_FUNCTION_36_20();
        uint64_t v102 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v102, v103, (uint64_t *)&demangling cache variable for type metadata for Any?);
      uint64_t v104 = v181;
      if (v186)
      {
        uint64_t v105 = (void *)type metadata accessor for Date();
        int v106 = OUTLINED_FUNCTION_117_7();
        OUTLINED_FUNCTION_77_14(v106);
        if (!v107)
        {
          OUTLINED_FUNCTION_1_0();
          OUTLINED_FUNCTION_99_9();
          v108();
          OUTLINED_FUNCTION_6_6((uint64_t)v25, 0);
          goto LABEL_72;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v185, (uint64_t *)&demangling cache variable for type metadata for Any?);
        uint64_t v105 = (void *)type metadata accessor for Date();
        OUTLINED_FUNCTION_92_12(v3);
      }
      type metadata accessor for Date();
      OUTLINED_FUNCTION_92_12((uint64_t)v25);
      outlined destroy of SearchResult?(v3, &demangling cache variable for type metadata for Date?);
LABEL_72:
      _sypSgWObTm_0((uint64_t)v25, (uint64_t)v4 + v31[11], &demangling cache variable for type metadata for Date?);
      uint64_t v109 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v109);
      OUTLINED_FUNCTION_38_18();
      id v110 = OUTLINED_FUNCTION_21_25();

      if (v110)
      {
        OUTLINED_FUNCTION_27_23();
        uint64_t v111 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v111, v112, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v186)
      {
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v113 = v183;
          goto LABEL_80;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v185, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      OUTLINED_FUNCTION_47_15();
LABEL_80:
      OUTLINED_FUNCTION_45_15(v113);
      uint64_t v114 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v114);
      OUTLINED_FUNCTION_38_18();
      id v115 = OUTLINED_FUNCTION_21_25();

      if (v115)
      {
        OUTLINED_FUNCTION_27_23();
        uint64_t v116 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v116, v117, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v186)
      {
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v118 = v183;
          goto LABEL_88;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v185, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      OUTLINED_FUNCTION_47_15();
LABEL_88:
      OUTLINED_FUNCTION_45_15(v118);
      uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v119);
      OUTLINED_FUNCTION_38_18();
      id v120 = OUTLINED_FUNCTION_21_25();

      if (v120)
      {
        OUTLINED_FUNCTION_27_23();
        uint64_t v121 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v121, v122, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v186)
      {
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v123 = v183;
          goto LABEL_96;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v185, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      OUTLINED_FUNCTION_47_15();
LABEL_96:
      OUTLINED_FUNCTION_45_15(v123);
      uint64_t v124 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v124);
      OUTLINED_FUNCTION_38_18();
      id v125 = OUTLINED_FUNCTION_21_25();

      if (v125)
      {
        OUTLINED_FUNCTION_27_23();
        uint64_t v126 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      uint64_t v128 = v182;
      OUTLINED_FUNCTION_10_31(v126, v127, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v186)
      {
        type metadata accessor for Date();
        int v129 = OUTLINED_FUNCTION_118_8();
        OUTLINED_FUNCTION_78_12(v129);
        if (!v107)
        {
          OUTLINED_FUNCTION_1_0();
          OUTLINED_FUNCTION_99_9();
          v130();
          OUTLINED_FUNCTION_76_11();
          goto LABEL_104;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v185, (uint64_t *)&demangling cache variable for type metadata for Any?);
        type metadata accessor for Date();
        OUTLINED_FUNCTION_64_11(v104);
      }
      type metadata accessor for Date();
      OUTLINED_FUNCTION_64_11((uint64_t)v128);
      outlined destroy of SearchResult?(v104, &demangling cache variable for type metadata for Date?);
LABEL_104:
      _sypSgWObTm_0((uint64_t)v128, (uint64_t)v4 + v31[15], &demangling cache variable for type metadata for Date?);
      uint64_t v131 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v131);
      OUTLINED_FUNCTION_38_18();
      id v132 = OUTLINED_FUNCTION_21_25();

      if (v132)
      {
        OUTLINED_FUNCTION_27_23();
        uint64_t v133 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v133, v134, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v186)
      {
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v135 = v183;
          goto LABEL_112;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v185, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      OUTLINED_FUNCTION_47_15();
LABEL_112:
      OUTLINED_FUNCTION_45_15(v135);
      uint64_t v136 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v136);
      OUTLINED_FUNCTION_38_18();
      id v137 = OUTLINED_FUNCTION_21_25();

      if (v137)
      {
        OUTLINED_FUNCTION_27_23();
        uint64_t v138 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v138, v139, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v186)
      {
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v140 = v183;
          goto LABEL_120;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v185, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      OUTLINED_FUNCTION_47_15();
LABEL_120:
      OUTLINED_FUNCTION_45_15(v140);
      uint64_t v141 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v141);
      OUTLINED_FUNCTION_38_18();
      id v142 = OUTLINED_FUNCTION_21_25();

      if (v142)
      {
        OUTLINED_FUNCTION_27_23();
        uint64_t v143 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v143, v144, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v186)
      {
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v145 = v183;
          goto LABEL_128;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v185, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      OUTLINED_FUNCTION_47_15();
LABEL_128:
      OUTLINED_FUNCTION_45_15(v145);
      uint64_t v146 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v146);
      OUTLINED_FUNCTION_38_18();
      id v147 = OUTLINED_FUNCTION_21_25();

      if (v147)
      {
        OUTLINED_FUNCTION_27_23();
        uint64_t v148 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v148, v149, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v186)
      {
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v150 = v183;
          goto LABEL_136;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v185, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      OUTLINED_FUNCTION_47_15();
LABEL_136:
      OUTLINED_FUNCTION_45_15(v150);
      uint64_t v151 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v151);
      OUTLINED_FUNCTION_38_18();
      id v152 = OUTLINED_FUNCTION_21_25();

      if (v152)
      {
        OUTLINED_FUNCTION_27_23();
        uint64_t v153 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v153, v154, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v186)
      {
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v155 = v183;
          goto LABEL_144;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v185, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      OUTLINED_FUNCTION_47_15();
LABEL_144:
      OUTLINED_FUNCTION_45_15(v155);
      uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v156);
      OUTLINED_FUNCTION_38_18();
      id v157 = OUTLINED_FUNCTION_21_25();

      if (v157)
      {
        OUTLINED_FUNCTION_27_23();
        uint64_t v158 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v158, v159, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v186)
      {
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v160 = v183;
          goto LABEL_152;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v185, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      OUTLINED_FUNCTION_47_15();
LABEL_152:
      OUTLINED_FUNCTION_45_15(v160);
      uint64_t v161 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v161);
      OUTLINED_FUNCTION_38_18();
      id v162 = OUTLINED_FUNCTION_21_25();

      if (v162)
      {
        OUTLINED_FUNCTION_27_23();
        uint64_t v163 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v163, v164, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v186)
      {
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v165 = v183;
          goto LABEL_160;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v185, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      OUTLINED_FUNCTION_47_15();
LABEL_160:
      OUTLINED_FUNCTION_45_15(v165);
      uint64_t v166 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v166);
      OUTLINED_FUNCTION_38_18();
      id v167 = OUTLINED_FUNCTION_21_25();

      if (v167)
      {
        OUTLINED_FUNCTION_27_23();
        uint64_t v168 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      uint64_t v170 = v178;
      OUTLINED_FUNCTION_10_31(v168, v169, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v186)
      {
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v171 = v183;
LABEL_168:
          OUTLINED_FUNCTION_45_15(v171);
          if (one-time initialization token for search != -1) {
            swift_once();
          }
          uint64_t v172 = type metadata accessor for Logger();
          uint64_t v173 = (void *)OUTLINED_FUNCTION_43_1(v172, (uint64_t)static Logging.search);
          os_log_type_t v174 = static os_log_type_t.info.getter();
          if (OUTLINED_FUNCTION_24_13(v174))
          {
            *(_WORD *)OUTLINED_FUNCTION_55() = 0;
            OUTLINED_FUNCTION_99_3(&dword_257DC6000, v175, v176, "PreExtractedCard: Created for the source document.");
            OUTLINED_FUNCTION_34();
          }
          swift_release();

          outlined init with take of PreExtractedCard((uint64_t)v4, v95, (void (*)(void))type metadata accessor for PreExtractedCard);
          __swift_storeEnumTagSinglePayload(v95, 0, 1, (uint64_t)v31);
          OUTLINED_FUNCTION_119_0();
          return;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v185, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      OUTLINED_FUNCTION_47_15();
      goto LABEL_168;
    }
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    uint64_t v51 = (void *)OUTLINED_FUNCTION_43_1(v50, (uint64_t)static Logging.search);
    os_log_type_t v52 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_13(v52))
    {
      *(_WORD *)OUTLINED_FUNCTION_55() = 0;
      OUTLINED_FUNCTION_99_3(&dword_257DC6000, v53, v54, "PreExtractedCard: No cardType, skip creating PreExtractedCard.");
      OUTLINED_FUNCTION_34();
    }

    swift_release();
  }
  else
  {
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    uint64_t v46 = (void *)OUTLINED_FUNCTION_43_1(v45, (uint64_t)static Logging.search);
    os_log_type_t v47 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_13(v47))
    {
      *(_WORD *)OUTLINED_FUNCTION_55() = 0;
      OUTLINED_FUNCTION_99_3(&dword_257DC6000, v48, v49, "PreExtractedCard: FF OmniSearch/preExtractedBreadcrumbs disabled, skip creating PreExtractedCard.");
      OUTLINED_FUNCTION_34();
    }

    swift_release();
  }
  OUTLINED_FUNCTION_119_0();
  __swift_storeEnumTagSinglePayload(v55, v56, v57, v58);
}

uint64_t PreExtractedCard.Keys.spotlight.getter()
{
  return OUTLINED_FUNCTION_51_21();
}

uint64_t PreExtractedCard.Keys.rawValue.getter(char a1)
{
  uint64_t result = 1701869940;
  switch(a1)
  {
    case 1:
      uint64_t result = OUTLINED_FUNCTION_74_15();
      break;
    case 2:
      uint64_t result = 0x72656469766F7270;
      break;
    case 3:
      uint64_t result = 0x616E207265646E75;
      break;
    case 4:
      uint64_t result = 0x7265626D756ELL;
      break;
    case 5:
      uint64_t result = 0x6164206575737369;
      break;
    case 6:
      uint64_t result = 0x6974617269707865;
      break;
    case 7:
      uint64_t result = OUTLINED_FUNCTION_112_8(0x75737369u);
      break;
    case 8:
      uint64_t result = 0x6E6F69676572;
      break;
    case 9:
      uint64_t result = 0x7972746E756F63;
      break;
    case 10:
      uint64_t result = OUTLINED_FUNCTION_75_10();
      break;
    case 11:
      uint64_t result = 0x666F206563616C70;
      break;
    case 12:
      uint64_t result = 0x73736572646461;
      break;
    case 13:
      uint64_t result = 7890291;
      break;
    case 14:
      uint64_t result = 0x746867696568;
      break;
    case 15:
      uint64_t result = 0x6F6C6F6320657965;
      break;
    case 16:
      uint64_t result = 0x746867696577;
      break;
    case 17:
      uint64_t result = 0x79726F6765746163;
      break;
    case 18:
      uint64_t result = 0x7463697274736572;
      break;
    default:
      return result;
  }
  return result;
}

OmniSearch::PreExtractedCard::Keys_optional __swiftcall PreExtractedCard.Keys.init(rawValue:)(Swift::String rawValue)
{
  _findStringSwitchCaseWithCache(cases:string:cache:)();
  OUTLINED_FUNCTION_38_18();
  if (v1 >= 0x13) {
    return (OmniSearch::PreExtractedCard::Keys_optional)19;
  }
  else {
    return (OmniSearch::PreExtractedCard::Keys_optional)v1;
  }
}

uint64_t PreExtractedCard.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6570795464726163 && a2 == 0xE800000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x5462755364726163 && a2 == 0xEB00000000657079;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x766F725064726163 && a2 == 0xEC00000072656469;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x65646E5564726163 && a2 == 0xED0000656D614E72;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v10 = a1 == 0x626D754E64726163 && a2 == 0xEA00000000007265;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              BOOL v11 = a1 == 0x7573734964726163 && a2 == 0xED00006574614465;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else if (a1 == 0xD000000000000012 && a2 == 0x8000000258683CC0 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 7;
              }
              else
              {
                BOOL v12 = a1 == 0x7573734964726163 && a2 == 0xEC00000079426465;
                if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 8;
                }
                else
                {
                  BOOL v13 = a1 == 0x6967655264726163 && a2 == 0xEA00000000006E6FLL;
                  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 9;
                  }
                  else
                  {
                    BOOL v14 = a1 == 0x6E756F4364726163 && a2 == 0xEB00000000797274;
                    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 10;
                    }
                    else
                    {
                      BOOL v15 = a1 == 0x7961646874726962 && a2 == 0xE800000000000000;
                      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        return 11;
                      }
                      else if (a1 == 0xD000000000000010 && a2 == 0x8000000258683CE0 {
                             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      }
                      {
                        swift_bridgeObjectRelease();
                        return 12;
                      }
                      else
                      {
                        BOOL v16 = a1 == 0x7264644164726163 && a2 == 0xEB00000000737365;
                        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          return 13;
                        }
                        else
                        {
                          BOOL v17 = a1 == 0x78655364726163 && a2 == 0xE700000000000000;
                          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                          {
                            swift_bridgeObjectRelease();
                            return 14;
                          }
                          else
                          {
                            BOOL v18 = a1 == 0x6769654864726163 && a2 == 0xEA00000000007468;
                            if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                            {
                              swift_bridgeObjectRelease();
                              return 15;
                            }
                            else
                            {
                              BOOL v19 = a1 == 0x4365794564726163 && a2 == 0xEC000000726F6C6FLL;
                              if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                              {
                                swift_bridgeObjectRelease();
                                return 16;
                              }
                              else
                              {
                                BOOL v20 = a1 == 0x6769655764726163 && a2 == 0xEA00000000007468;
                                if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                {
                                  swift_bridgeObjectRelease();
                                  return 17;
                                }
                                else
                                {
                                  BOOL v21 = a1 == 0x6574614364726163 && a2 == 0xEC00000079726F67;
                                  if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                  {
                                    swift_bridgeObjectRelease();
                                    return 18;
                                  }
                                  else if (a1 == 0xD000000000000010 && a2 == 0x8000000258683D00)
                                  {
                                    swift_bridgeObjectRelease();
                                    return 19;
                                  }
                                  else
                                  {
                                    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    swift_bridgeObjectRelease();
                                    if (v22) {
                                      return 19;
                                    }
                                    else {
                                      return 20;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t PreExtractedCard.CodingKeys.init(intValue:)()
{
  return 20;
}

uint64_t PreExtractedCard.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 25705;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6570795464726163;
      break;
    case 2:
      uint64_t result = 0x5462755364726163;
      break;
    case 3:
      uint64_t result = 0x766F725064726163;
      break;
    case 4:
      uint64_t result = 0x65646E5564726163;
      break;
    case 5:
      uint64_t result = 0x626D754E64726163;
      break;
    case 6:
    case 8:
      uint64_t result = 0x7573734964726163;
      break;
    case 7:
      uint64_t result = 0xD000000000000012;
      break;
    case 9:
      uint64_t result = 0x6967655264726163;
      break;
    case 10:
      uint64_t result = 0x6E756F4364726163;
      break;
    case 11:
      uint64_t result = 0x7961646874726962;
      break;
    case 12:
    case 19:
      uint64_t result = 0xD000000000000010;
      break;
    case 13:
      uint64_t result = 0x7264644164726163;
      break;
    case 14:
      uint64_t result = 0x78655364726163;
      break;
    case 15:
      uint64_t v3 = 0x654864726163;
      goto LABEL_17;
    case 16:
      uint64_t result = 0x4365794564726163;
      break;
    case 17:
      uint64_t v3 = 0x655764726163;
LABEL_17:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x6769000000000000;
      break;
    case 18:
      uint64_t result = 0x6574614364726163;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PreExtractedCard.Keys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PreExtractedCard.Keys()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PreExtractedCard.Keys(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PreExtractedCard.Keys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

OmniSearch::PreExtractedCard::Keys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PreExtractedCard.Keys@<W0>(Swift::String *a1@<X0>, OmniSearch::PreExtractedCard::Keys_optional *a2@<X8>)
{
  result.value = PreExtractedCard.Keys.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PreExtractedCard.Keys()
{
  char v1 = OUTLINED_FUNCTION_110_9();
  uint64_t result = PreExtractedCard.Keys.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PreExtractedCard.CodingKeys()
{
  return PreExtractedCard.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PreExtractedCard.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PreExtractedCard.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance PreExtractedCard.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = PreExtractedCard.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PreExtractedCard.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PreExtractedCard.CodingKeys and conformance PreExtractedCard.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PreExtractedCard.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PreExtractedCard.CodingKeys and conformance PreExtractedCard.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void PreExtractedCard.encode(to:)()
{
  OUTLINED_FUNCTION_105_0();
  OUTLINED_FUNCTION_104_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PreExtractedCard.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_61_13();
  lazy protocol witness table accessor for type PreExtractedCard.CodingKeys and conformance PreExtractedCard.CodingKeys();
  OUTLINED_FUNCTION_69_13();
  OUTLINED_FUNCTION_90_12();
  if (!v0)
  {
    OUTLINED_FUNCTION_1_30(1);
    OUTLINED_FUNCTION_1_30(2);
    OUTLINED_FUNCTION_1_30(3);
    OUTLINED_FUNCTION_1_30(4);
    OUTLINED_FUNCTION_1_30(5);
    unint64_t v2 = (int *)type metadata accessor for PreExtractedCard(0);
    type metadata accessor for Date();
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    OUTLINED_FUNCTION_26_25();
    OUTLINED_FUNCTION_26_25();
    OUTLINED_FUNCTION_1_30(8);
    OUTLINED_FUNCTION_10_29(v2[13]);
    OUTLINED_FUNCTION_1_30(9);
    OUTLINED_FUNCTION_10_29(v2[14]);
    OUTLINED_FUNCTION_1_30(10);
    OUTLINED_FUNCTION_26_25();
    OUTLINED_FUNCTION_1_30(12);
    OUTLINED_FUNCTION_1_30(13);
    OUTLINED_FUNCTION_1_30(14);
    OUTLINED_FUNCTION_1_30(15);
    OUTLINED_FUNCTION_10_29(v2[20]);
    OUTLINED_FUNCTION_1_30(16);
    OUTLINED_FUNCTION_10_29(v2[21]);
    OUTLINED_FUNCTION_1_30(17);
    OUTLINED_FUNCTION_10_29(v2[22]);
    OUTLINED_FUNCTION_1_30(18);
    OUTLINED_FUNCTION_10_29(v2[23]);
    OUTLINED_FUNCTION_1_30(19);
  }
  OUTLINED_FUNCTION_26_2();
  v3();
  OUTLINED_FUNCTION_82_11();
  OUTLINED_FUNCTION_120_0();
}

void PreExtractedCard.init(from:)()
{
  OUTLINED_FUNCTION_105_0();
  uint64_t v4 = v3;
  uint64_t v82 = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v7 = OUTLINED_FUNCTION_81(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_36_21();
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  BOOL v11 = (char *)&v76 - v10;
  MEMORY[0x270FA5388](v9);
  BOOL v13 = (char *)&v76 - v12;
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PreExtractedCard.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v14);
  uint64_t v15 = OUTLINED_FUNCTION_14_8();
  uint64_t v87 = (int *)type metadata accessor for PreExtractedCard(v15);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_89_8(v17, v76);
  uint64_t v18 = v4[3];
  uint64_t v81 = (uint64_t)v4;
  __swift_project_boxed_opaque_existential_1(v4, v18);
  lazy protocol witness table accessor for type PreExtractedCard.CodingKeys and conformance PreExtractedCard.CodingKeys();
  uint64_t v84 = v0;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    uint64_t v88 = v1;
    LODWORD(v84) = 0;
    unsigned int v21 = 0;
LABEL_4:
    uint64_t v22 = v81;
    uint64_t v29 = v86;
    goto LABEL_5;
  }
  uint64_t v19 = v82;
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v29 = v86;
  *uint64_t v86 = v20;
  v29[1] = v30;
  v29[2] = OUTLINED_FUNCTION_56_14(1);
  v29[3] = v31;
  v29[4] = OUTLINED_FUNCTION_56_14(2);
  v29[5] = v32;
  v29[6] = OUTLINED_FUNCTION_56_14(3);
  v29[7] = v33;
  v29[8] = OUTLINED_FUNCTION_56_14(4);
  v29[9] = v34;
  uint64_t v35 = OUTLINED_FUNCTION_56_14(5);
  uint64_t v88 = 0;
  v29[10] = v35;
  v29[11] = v36;
  uint64_t v37 = type metadata accessor for Date();
  lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  OUTLINED_FUNCTION_125_8();
  uint64_t v85 = v37;
  uint64_t v80 = v38;
  uint64_t v39 = v88;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  if (!v39)
  {
    uint64_t v41 = v87;
    _sypSgWObTm_0((uint64_t)v13, (uint64_t)v29 + v87[10], &demangling cache variable for type metadata for Date?);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    _sypSgWObTm_0((uint64_t)v11, (uint64_t)v29 + v41[11], &demangling cache variable for type metadata for Date?);
    uint64_t v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_94_13(v42, v43);
    uint64_t v45 = OUTLINED_FUNCTION_56_14(v44);
    uint64_t v88 = 0;
    OUTLINED_FUNCTION_73_12(v45, v46, v87[13]);
    uint64_t v47 = OUTLINED_FUNCTION_20_25(10);
    uint64_t v88 = 0;
    OUTLINED_FUNCTION_73_12(v47, v48, v87[14]);
    uint64_t v49 = v88;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v88 = v49;
    if (!v49)
    {
      _sypSgWObTm_0(v2, (uint64_t)v86 + v87[15], &demangling cache variable for type metadata for Date?);
      uint64_t v51 = OUTLINED_FUNCTION_20_25(12);
      uint64_t v88 = 0;
      os_log_type_t v52 = (uint64_t *)((char *)v86 + v87[16]);
      *os_log_type_t v52 = v51;
      v52[1] = v53;
      uint64_t v54 = OUTLINED_FUNCTION_20_25(13);
      uint64_t v88 = 0;
      OUTLINED_FUNCTION_93_10(v54, v55);
      uint64_t v57 = OUTLINED_FUNCTION_20_25(v56);
      uint64_t v88 = 0;
      uint64_t v58 = (uint64_t *)((char *)v86 + v87[18]);
      *uint64_t v58 = v57;
      v58[1] = v59;
      uint64_t v60 = OUTLINED_FUNCTION_20_25(15);
      uint64_t v88 = 0;
      OUTLINED_FUNCTION_73_12(v60, v61, v87[19]);
      OUTLINED_FUNCTION_20_25(16);
      OUTLINED_FUNCTION_111_10();
      LODWORD(v85) = v62;
      uint64_t v88 = 0;
      OUTLINED_FUNCTION_73_12(v63, v64, v87[20]);
      uint64_t v65 = OUTLINED_FUNCTION_20_25(17);
      uint64_t v88 = 0;
      OUTLINED_FUNCTION_73_12(v65, v66, v87[21]);
      uint64_t v67 = OUTLINED_FUNCTION_20_25(18);
      uint64_t v88 = 0;
      OUTLINED_FUNCTION_73_12(v67, v68, v87[22]);
      uint64_t v69 = OUTLINED_FUNCTION_20_25(19);
      uint64_t v88 = 0;
      uint64_t v70 = v69;
      uint64_t v72 = v71;
      OUTLINED_FUNCTION_65();
      v73();
      uint64_t v74 = (uint64_t)v86;
      uint64_t v75 = (uint64_t *)((char *)v86 + v87[23]);
      uint64_t *v75 = v70;
      v75[1] = v72;
      outlined init with copy of PartialExtractedAttributes(v74, v19, (void (*)(void))type metadata accessor for PreExtractedCard);
      __swift_destroy_boxed_opaque_existential_1Tm(v81);
      outlined destroy of PartialExtractedAttributes(v74, (void (*)(void))type metadata accessor for PreExtractedCard);
      goto LABEL_44;
    }
    OUTLINED_FUNCTION_65();
    v50();
    LODWORD(v84) = 0;
    unsigned int v21 = 2047;
    goto LABEL_4;
  }
  uint64_t v88 = v39;
  OUTLINED_FUNCTION_26_2();
  v40();
  LODWORD(v84) = 0;
  unsigned int v21 = 63;
  uint64_t v22 = v81;
LABEL_5:
  __swift_destroy_boxed_opaque_existential_1Tm(v22);
  int v23 = (v21 >> 4) & 1;
  int v24 = (v21 >> 5) & 1;
  int v25 = (v21 >> 6) & 1;
  int v26 = (v21 >> 7) & 1;
  int v27 = (v21 >> 8) & 1;
  int v77 = (v21 >> 9) & 1;
  int v78 = (v21 >> 10) & 1;
  v89[0] = (v21 >> 12) & 1;
  int v79 = (v21 >> 11) & 1;
  LODWORD(v80) = (v21 >> 13) & 1;
  if (v21)
  {
    LODWORD(v81) = 0;
    LODWORD(v85) = 0;
    LODWORD(v82) = 0;
    LODWORD(v83) = 0;
    swift_bridgeObjectRelease();
    if (((v21 >> 1) & 1) == 0)
    {
LABEL_7:
      if ((v21 >> 2)) {
        goto LABEL_8;
      }
      goto LABEL_27;
    }
  }
  else
  {
    LODWORD(v83) = 0;
    LODWORD(v82) = 0;
    LODWORD(v85) = 0;
    LODWORD(v81) = 0;
    if ((v21 & 2) == 0) {
      goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  if ((v21 >> 2))
  {
LABEL_8:
    swift_bridgeObjectRelease();
    if (((v21 >> 3) & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_27:
  if (((v21 >> 3) & 1) == 0)
  {
LABEL_9:
    uint64_t v28 = v87;
    if (v23) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  swift_bridgeObjectRelease();
  uint64_t v28 = v87;
  if (v23)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    if ((v24 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  if (!v24)
  {
LABEL_11:
    if (v25) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  swift_bridgeObjectRelease();
  if (v25)
  {
LABEL_12:
    outlined destroy of SearchResult?((uint64_t)v29 + v28[10], &demangling cache variable for type metadata for Date?);
    if ((v26 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  if (!v26)
  {
LABEL_13:
    if (v27) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_32:
  outlined destroy of SearchResult?((uint64_t)v29 + v28[11], &demangling cache variable for type metadata for Date?);
  if (v27)
  {
LABEL_14:
    OUTLINED_FUNCTION_37_0();
    if ((v77 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
LABEL_33:
  if (!v77)
  {
LABEL_15:
    if (v78) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_34:
  OUTLINED_FUNCTION_37_0();
  if (v78)
  {
LABEL_16:
    OUTLINED_FUNCTION_37_0();
    if ((v79 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }
LABEL_35:
  if (!v79)
  {
LABEL_17:
    if (v89[0]) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }
LABEL_36:
  outlined destroy of SearchResult?((uint64_t)v29 + v28[15], &demangling cache variable for type metadata for Date?);
  if (v89[0])
  {
LABEL_18:
    OUTLINED_FUNCTION_37_0();
    if ((v80 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_38;
  }
LABEL_37:
  if (!v80)
  {
LABEL_19:
    if (v84) {
      goto LABEL_20;
    }
    goto LABEL_39;
  }
LABEL_38:
  OUTLINED_FUNCTION_37_0();
  if (v84)
  {
LABEL_20:
    OUTLINED_FUNCTION_37_0();
    if ((v81 & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_40;
  }
LABEL_39:
  if (!v81)
  {
LABEL_21:
    if (v85) {
      goto LABEL_22;
    }
    goto LABEL_41;
  }
LABEL_40:
  OUTLINED_FUNCTION_37_0();
  if (v85)
  {
LABEL_22:
    OUTLINED_FUNCTION_37_0();
    if ((v82 & 1) == 0) {
      goto LABEL_23;
    }
    goto LABEL_42;
  }
LABEL_41:
  if (!v82)
  {
LABEL_23:
    if (!v83) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
LABEL_42:
  OUTLINED_FUNCTION_37_0();
  if (v83) {
LABEL_43:
  }
    OUTLINED_FUNCTION_37_0();
LABEL_44:
  OUTLINED_FUNCTION_82_11();
  OUTLINED_FUNCTION_120_0();
}

void protocol witness for Decodable.init(from:) in conformance PreExtractedCard()
{
}

void protocol witness for Encodable.encode(to:) in conformance PreExtractedCard()
{
}

uint64_t PreExtractedContact.contactSharedDateTime.getter()
{
  return PartialExtractedAttributes.flightReservation.getter();
}

uint64_t PreExtractedContact.contactSharedAppName.getter()
{
  return PreExtractedCard.cardIssuedBy.getter((void (*)(void))type metadata accessor for PreExtractedContact);
}

uint64_t PreExtractedCard.cardIssuedBy.getter(void (*a1)(void))
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t PreExtractedContact.links.getter()
{
  type metadata accessor for PreExtractedContact(0);
  return swift_bridgeObjectRetain();
}

uint64_t PreExtractedContact.birthday.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PreExtractedContact(0);
  return outlined init with copy of SearchResultItem?(v1 + *(int *)(v3 + 56), a1, &demangling cache variable for type metadata for Date?);
}

uint64_t PreExtractedContact.homeAddresses.getter()
{
  type metadata accessor for PreExtractedContact(0);
  return swift_bridgeObjectRetain();
}

uint64_t PreExtractedContact.workAddresses.getter()
{
  type metadata accessor for PreExtractedContact(0);
  return swift_bridgeObjectRetain();
}

uint64_t PreExtractedContact.relationship.getter()
{
  return PreExtractedCard.cardAddress.getter((void (*)(void))type metadata accessor for PreExtractedContact);
}

uint64_t PreExtractedCard.cardAddress.getter(void (*a1)(void))
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t PreExtractedContact.addresses.getter()
{
  type metadata accessor for PreExtractedContact(0);
  return swift_bridgeObjectRetain();
}

uint64_t PreExtractedContact.businessHours.getter()
{
  type metadata accessor for PreExtractedContact(0);
  return swift_bridgeObjectRetain();
}

uint64_t PreExtractedContact.init(item:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PreExtractedCard.init(item:)(a1, &demangling cache variable for type metadata for PreExtractedContact?, (void (*)(uint64_t, uint64_t))PreExtractedContact.init(item:featureFlagService:), type metadata accessor for PreExtractedContact, (void (*)(void))type metadata accessor for PreExtractedContact, a2);
}

uint64_t PreExtractedCard.init(item:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t, uint64_t)@<X2>, uint64_t (*a4)(void)@<X3>, void (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v14 = OUTLINED_FUNCTION_81(v13);
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_59_0();
  type metadata accessor for FeatureFlagService();
  uint64_t v15 = swift_allocObject();
  a3(a1, v15);
  uint64_t v16 = a4(0);
  if (__swift_getEnumTagSinglePayload(v6, 1, v16))
  {
    outlined destroy of SearchResult?(v6, a2);
    uint64_t v17 = 1;
  }
  else
  {
    outlined init with take of PreExtractedCard(v6, a6, a5);
    uint64_t v17 = 0;
  }
  return __swift_storeEnumTagSinglePayload(a6, v17, 1, v16);
}

void PreExtractedContact.init(item:featureFlagService:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v10 = OUTLINED_FUNCTION_81(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_36_21();
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_100_11(v12, v13, v14, v15, v16, v17, v18, v19, v154);
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_43_8();
  MEMORY[0x270FA5388](v21);
  int v23 = (char *)&v154 - v22;
  int v24 = (int *)type metadata accessor for PreExtractedContact(0);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_13_12();
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 80))(12))
  {
    id v26 = objc_msgSend(a1, sel_attributeSet);
    outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v26, (SEL *)&selRef_contactType);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease();
    if (v28)
    {
      uint64_t v155 = a3;
      uint64_t v156 = a1;
      id v29 = objc_msgSend(a1, sel_uniqueIdentifier);
      uint64_t v30 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v32 = v31;

      *uint64_t v4 = v30;
      v4[1] = v32;
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v33);
      uint64_t v34 = OUTLINED_FUNCTION_72_11();
      id v35 = OUTLINED_FUNCTION_48_15(v34, sel_attributeForKey_);

      if (v35)
      {
        OUTLINED_FUNCTION_36_20();
        uint64_t v36 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v36, v37, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v161)
      {
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v48 = v158;
          uint64_t v49 = v159;
          goto LABEL_20;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v160, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      OUTLINED_FUNCTION_47_15();
LABEL_20:
      v4[2] = v48;
      v4[3] = v49;
      uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v50);
      uint64_t v51 = OUTLINED_FUNCTION_72_11();
      id v52 = OUTLINED_FUNCTION_48_15(v51, sel_attributeForKey_);

      if (v52)
      {
        OUTLINED_FUNCTION_36_20();
        uint64_t v53 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v53, v54, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v161)
      {
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v55 = v158;
          uint64_t v56 = v159;
          goto LABEL_28;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v160, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      OUTLINED_FUNCTION_47_15();
LABEL_28:
      v4[4] = v55;
      v4[5] = v56;
      uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v57);
      uint64_t v58 = OUTLINED_FUNCTION_72_11();
      id v59 = OUTLINED_FUNCTION_48_15(v58, sel_attributeForKey_);

      if (v59)
      {
        OUTLINED_FUNCTION_36_20();
        uint64_t v60 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v60, v61, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v161)
      {
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v62 = v158;
          uint64_t v63 = v159;
          goto LABEL_36;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v160, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      OUTLINED_FUNCTION_47_15();
LABEL_36:
      v4[6] = v62;
      v4[7] = v63;
      uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v64);
      uint64_t v65 = OUTLINED_FUNCTION_72_11();
      id v66 = OUTLINED_FUNCTION_48_15(v65, sel_attributeForKey_);

      if (v66)
      {
        OUTLINED_FUNCTION_36_20();
        uint64_t v67 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v67, v68, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v161)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v69 = v158;
          goto LABEL_44;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v160, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      uint64_t v69 = MEMORY[0x263F8EE78];
LABEL_44:
      v4[8] = v69;
      uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v70);
      uint64_t v71 = OUTLINED_FUNCTION_72_11();
      id v72 = OUTLINED_FUNCTION_48_15(v71, sel_attributeForKey_);

      if (v72)
      {
        OUTLINED_FUNCTION_36_20();
        uint64_t v73 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v73, v74, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v161)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v75 = v158;
          goto LABEL_52;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v160, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      uint64_t v75 = MEMORY[0x263F8EE78];
LABEL_52:
      v4[9] = v75;
      uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v76);
      uint64_t v77 = OUTLINED_FUNCTION_72_11();
      id v78 = OUTLINED_FUNCTION_48_15(v77, sel_attributeForKey_);

      if (v78)
      {
        OUTLINED_FUNCTION_36_20();
        uint64_t v79 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v79, v80, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v161)
      {
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v81 = v158;
          uint64_t v82 = v159;
          goto LABEL_60;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v160, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      OUTLINED_FUNCTION_47_15();
LABEL_60:
      v4[10] = v81;
      v4[11] = v82;
      uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v83);
      uint64_t v84 = OUTLINED_FUNCTION_72_11();
      id v85 = OUTLINED_FUNCTION_48_15(v84, sel_attributeForKey_);

      if (v85)
      {
        OUTLINED_FUNCTION_36_20();
        uint64_t v86 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      uint64_t v88 = v156;
      OUTLINED_FUNCTION_10_31(v86, v87, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v161)
      {
        uint64_t v89 = (void *)type metadata accessor for Date();
        int v90 = OUTLINED_FUNCTION_117_7();
        OUTLINED_FUNCTION_77_14(v90);
        if (!v91)
        {
          OUTLINED_FUNCTION_1_0();
          OUTLINED_FUNCTION_99_9();
          v92();
          OUTLINED_FUNCTION_6_6((uint64_t)v23, 0);
          goto LABEL_68;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v160, (uint64_t *)&demangling cache variable for type metadata for Any?);
        uint64_t v89 = (void *)type metadata accessor for Date();
        OUTLINED_FUNCTION_92_12(v3);
      }
      type metadata accessor for Date();
      OUTLINED_FUNCTION_92_12((uint64_t)v23);
      outlined destroy of SearchResult?(v3, &demangling cache variable for type metadata for Date?);
LABEL_68:
      _sypSgWObTm_0((uint64_t)v23, (uint64_t)v4 + v24[11], &demangling cache variable for type metadata for Date?);
      uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v93);
      uint64_t v94 = OUTLINED_FUNCTION_38_18();
      id v95 = OUTLINED_FUNCTION_28_20(v94, sel_attributeForKey_);

      if (v95)
      {
        OUTLINED_FUNCTION_27_23();
        uint64_t v96 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v96, v97, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v161)
      {
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v98 = v158;
          goto LABEL_76;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v160, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      OUTLINED_FUNCTION_47_15();
LABEL_76:
      OUTLINED_FUNCTION_45_15(v98);
      uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v99);
      uint64_t v100 = OUTLINED_FUNCTION_38_18();
      id v101 = OUTLINED_FUNCTION_28_20(v100, sel_attributeForKey_);

      if (v101)
      {
        OUTLINED_FUNCTION_27_23();
        uint64_t v102 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v102, v103, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v161)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v104 = v158;
          goto LABEL_84;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v160, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      uint64_t v104 = MEMORY[0x263F8EE78];
LABEL_84:
      *(void *)((char *)v4 + v24[13]) = v104;
      uint64_t v105 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v105);
      uint64_t v106 = OUTLINED_FUNCTION_38_18();
      id v107 = OUTLINED_FUNCTION_28_20(v106, sel_attributeForKey_);

      if (v107)
      {
        OUTLINED_FUNCTION_27_23();
        uint64_t v108 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      id v110 = v157;
      OUTLINED_FUNCTION_10_31(v108, v109, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v161)
      {
        type metadata accessor for Date();
        int v111 = OUTLINED_FUNCTION_118_8();
        OUTLINED_FUNCTION_78_12(v111);
        if (!v91)
        {
          OUTLINED_FUNCTION_1_0();
          OUTLINED_FUNCTION_99_9();
          v112();
          OUTLINED_FUNCTION_76_11();
          goto LABEL_92;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v160, (uint64_t *)&demangling cache variable for type metadata for Any?);
        type metadata accessor for Date();
        OUTLINED_FUNCTION_64_11(v5);
      }
      type metadata accessor for Date();
      OUTLINED_FUNCTION_64_11((uint64_t)v110);
      outlined destroy of SearchResult?(v5, &demangling cache variable for type metadata for Date?);
LABEL_92:
      _sypSgWObTm_0((uint64_t)v110, (uint64_t)v4 + v24[14], &demangling cache variable for type metadata for Date?);
      uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v113);
      uint64_t v114 = OUTLINED_FUNCTION_38_18();
      id v115 = OUTLINED_FUNCTION_28_20(v114, sel_attributeForKey_);

      if (v115)
      {
        OUTLINED_FUNCTION_27_23();
        uint64_t v116 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v116, v117, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v161)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v118 = v158;
          goto LABEL_100;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v160, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      uint64_t v118 = MEMORY[0x263F8EE78];
LABEL_100:
      *(void *)((char *)v4 + v24[15]) = v118;
      uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v119);
      uint64_t v120 = OUTLINED_FUNCTION_38_18();
      id v121 = OUTLINED_FUNCTION_28_20(v120, sel_attributeForKey_);

      if (v121)
      {
        OUTLINED_FUNCTION_27_23();
        uint64_t v122 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v122, v123, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v161)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v124 = v158;
          goto LABEL_108;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v160, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      uint64_t v124 = MEMORY[0x263F8EE78];
LABEL_108:
      *(void *)((char *)v4 + v24[16]) = v124;
      uint64_t v125 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v125);
      uint64_t v126 = OUTLINED_FUNCTION_38_18();
      id v127 = OUTLINED_FUNCTION_28_20(v126, sel_attributeForKey_);

      if (v127)
      {
        OUTLINED_FUNCTION_27_23();
        uint64_t v128 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v128, v129, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v161)
      {
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v130 = v158;
          goto LABEL_116;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v160, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      OUTLINED_FUNCTION_47_15();
LABEL_116:
      OUTLINED_FUNCTION_45_15(v130);
      uint64_t v131 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v131);
      uint64_t v132 = OUTLINED_FUNCTION_38_18();
      id v133 = OUTLINED_FUNCTION_28_20(v132, sel_attributeForKey_);

      if (v133)
      {
        OUTLINED_FUNCTION_27_23();
        uint64_t v134 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      OUTLINED_FUNCTION_10_31(v134, v135, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v161)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v136 = v158;
          goto LABEL_124;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v160, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      uint64_t v136 = MEMORY[0x263F8EE78];
LABEL_124:
      *(void *)((char *)v4 + v24[18]) = v136;
      uint64_t v137 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      MEMORY[0x25A2C7AB0](v137);
      uint64_t v138 = OUTLINED_FUNCTION_38_18();
      id v139 = OUTLINED_FUNCTION_28_20(v138, sel_attributeForKey_);

      if (v139)
      {
        OUTLINED_FUNCTION_27_23();
        uint64_t v140 = swift_unknownObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_23_19();
      }
      uint64_t v142 = v155;
      OUTLINED_FUNCTION_10_31(v140, v141, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v161)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        if (OUTLINED_FUNCTION_12_30())
        {
          uint64_t v143 = v158;
LABEL_132:
          *(void *)((char *)v4 + v24[19]) = v143;
          if (one-time initialization token for search != -1) {
            swift_once();
          }
          uint64_t v144 = type metadata accessor for Logger();
          uint64_t v145 = (void *)OUTLINED_FUNCTION_43_1(v144, (uint64_t)static Logging.search);
          os_log_type_t v146 = static os_log_type_t.info.getter();
          if (OUTLINED_FUNCTION_24_13(v146))
          {
            *(_WORD *)OUTLINED_FUNCTION_55() = 0;
            OUTLINED_FUNCTION_11_14(&dword_257DC6000, v147, v148, "PreExtractedContact: Created for the source document.");
            uint64_t v88 = v156;
            OUTLINED_FUNCTION_34();
          }
          swift_release();

          outlined init with take of PreExtractedCard((uint64_t)v4, v142, (void (*)(void))type metadata accessor for PreExtractedContact);
          __swift_storeEnumTagSinglePayload(v142, 0, 1, (uint64_t)v24);
          OUTLINED_FUNCTION_119_0();
          return;
        }
      }
      else
      {
        outlined destroy of SearchResult?((uint64_t)v160, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      uint64_t v143 = MEMORY[0x263F8EE78];
      goto LABEL_132;
    }
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    char v44 = (void *)OUTLINED_FUNCTION_43_1(v43, (uint64_t)static Logging.search);
    os_log_type_t v45 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_13(v45))
    {
      *(_WORD *)OUTLINED_FUNCTION_55() = 0;
      OUTLINED_FUNCTION_11_14(&dword_257DC6000, v46, v47, "PreExtractedContact: No contactType, skip creating PreExtractedContact.");
      OUTLINED_FUNCTION_34();
    }

    swift_release();
  }
  else
  {
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    uint64_t v39 = (void *)OUTLINED_FUNCTION_43_1(v38, (uint64_t)static Logging.search);
    os_log_type_t v40 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_13(v40))
    {
      *(_WORD *)OUTLINED_FUNCTION_55() = 0;
      OUTLINED_FUNCTION_11_14(&dword_257DC6000, v41, v42, "PreExtractedContact: FF OmniSearch/preExtractedBreadcrumbs disabled, skip creating PreExtractedContact.");
      OUTLINED_FUNCTION_34();
    }

    swift_release();
  }
  OUTLINED_FUNCTION_119_0();
  __swift_storeEnumTagSinglePayload(v149, v150, v151, v152);
}

uint64_t PreExtractedContact.Keys.spotlight.getter()
{
  return OUTLINED_FUNCTION_51_21();
}

uint64_t PreExtractedContact.Keys.rawValue.getter(char a1)
{
  uint64_t result = 1701869940;
  switch(a1)
  {
    case 1:
      uint64_t result = OUTLINED_FUNCTION_122_7();
      break;
    case 2:
      uint64_t result = 0x656D616E6B63696ELL;
      break;
    case 3:
      uint64_t result = 0x6461206C69616D65;
      break;
    case 4:
      uint64_t result = 0x737265626D756ELL;
      break;
    case 5:
      uint64_t result = OUTLINED_FUNCTION_112_8(0x72616873u);
      break;
    case 6:
      uint64_t result = OUTLINED_FUNCTION_91_1(16);
      break;
    case 7:
      uint64_t result = 0x6120646572616873;
      break;
    case 8:
      uint64_t result = 0x736B6E696CLL;
      break;
    case 9:
      uint64_t result = OUTLINED_FUNCTION_75_10();
      break;
    case 10:
      unsigned int v3 = 1701670760;
      goto LABEL_13;
    case 11:
      unsigned int v3 = 1802661751;
LABEL_13:
      uint64_t result = v3 | 0x6464612000000000;
      break;
    case 12:
      uint64_t result = 0x6E6F6974616C6572;
      break;
    case 13:
      uint64_t result = 0x6573736572646461;
      break;
    case 14:
      uint64_t result = 0x7373656E69737562;
      break;
    default:
      return result;
  }
  return result;
}

OmniSearch::PreExtractedContact::Keys_optional __swiftcall PreExtractedContact.Keys.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of PreExtractedContact.Keys.init(rawValue:);
  return (OmniSearch::PreExtractedContact::Keys_optional)PreExtractedContact.Keys.init(rawValue:)(rawValue, v1);
}

uint64_t PreExtractedContact.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x54746361746E6F63 && a2 == 0xEB00000000657079;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x4E746361746E6F63 && a2 == 0xEB00000000656D61;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x4E746361746E6F63 && a2 == 0xEF656D616E6B6369;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x6464416C69616D65 && a2 == 0xEE00736573736572;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v10 = a1 == 0x6D754E656E6F6870 && a2 == 0xEC00000073726562;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              BOOL v11 = a1 == 0x53746361746E6F63 && a2 == 0xEF79426465726168;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else if (a1 == 0xD000000000000015 && a2 == 0x8000000258683D20 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 7;
              }
              else if (a1 == 0xD000000000000014 && a2 == 0x8000000258683D40 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 8;
              }
              else
              {
                BOOL v12 = a1 == 0x736B6E696CLL && a2 == 0xE500000000000000;
                if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 9;
                }
                else
                {
                  BOOL v13 = a1 == 0x7961646874726962 && a2 == 0xE800000000000000;
                  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 10;
                  }
                  else
                  {
                    BOOL v14 = a1 == 0x72646441656D6F68 && a2 == 0xED00007365737365;
                    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 11;
                    }
                    else
                    {
                      BOOL v15 = a1 == 0x726464416B726F77 && a2 == 0xED00007365737365;
                      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        return 12;
                      }
                      else
                      {
                        BOOL v16 = a1 == 0x6E6F6974616C6572 && a2 == 0xEC00000070696873;
                        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          return 13;
                        }
                        else
                        {
                          BOOL v17 = a1 == 0x6573736572646461 && a2 == 0xE900000000000073;
                          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                          {
                            swift_bridgeObjectRelease();
                            return 14;
                          }
                          else if (a1 == 0x7373656E69737562 && a2 == 0xED00007372756F48)
                          {
                            swift_bridgeObjectRelease();
                            return 15;
                          }
                          else
                          {
                            char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
                            swift_bridgeObjectRelease();
                            if (v19) {
                              return 15;
                            }
                            else {
                              return 16;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t PreExtractedContact.CodingKeys.init(intValue:)()
{
  return 16;
}

uint64_t PreExtractedContact.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 25705;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x54746361746E6F63;
      break;
    case 2:
      uint64_t result = 0x4E746361746E6F63;
      break;
    case 3:
      uint64_t result = 0x4E746361746E6F63;
      break;
    case 4:
      uint64_t result = 0x6464416C69616D65;
      break;
    case 5:
      uint64_t result = 0x6D754E656E6F6870;
      break;
    case 6:
      uint64_t result = 0x53746361746E6F63;
      break;
    case 7:
      uint64_t result = 0xD000000000000015;
      break;
    case 8:
      uint64_t result = 0xD000000000000014;
      break;
    case 9:
      uint64_t result = 0x736B6E696CLL;
      break;
    case 10:
      uint64_t result = 0x7961646874726962;
      break;
    case 11:
      unsigned int v3 = 1701670760;
      goto LABEL_14;
    case 12:
      unsigned int v3 = 1802661751;
LABEL_14:
      uint64_t result = v3 | 0x7264644100000000;
      break;
    case 13:
      uint64_t result = 0x6E6F6974616C6572;
      break;
    case 14:
      uint64_t result = 0x6573736572646461;
      break;
    case 15:
      uint64_t result = 0x7373656E69737562;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PreExtractedContact.Keys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PreExtractedContact.Keys()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PreExtractedContact.Keys(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PreExtractedContact.Keys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

OmniSearch::PreExtractedContact::Keys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PreExtractedContact.Keys@<W0>(Swift::String *a1@<X0>, OmniSearch::PreExtractedContact::Keys_optional *a2@<X8>)
{
  result.value = PreExtractedContact.Keys.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PreExtractedContact.Keys()
{
  char v1 = OUTLINED_FUNCTION_110_9();
  uint64_t result = PreExtractedContact.Keys.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PreExtractedContact.CodingKeys()
{
  return PreExtractedContact.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PreExtractedContact.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PreExtractedContact.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance PreExtractedContact.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = PreExtractedContact.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PreExtractedContact.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PreExtractedContact.CodingKeys and conformance PreExtractedContact.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PreExtractedContact.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PreExtractedContact.CodingKeys and conformance PreExtractedContact.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void PreExtractedContact.encode(to:)()
{
  OUTLINED_FUNCTION_105_0();
  OUTLINED_FUNCTION_104_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PreExtractedContact.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_61_13();
  lazy protocol witness table accessor for type PreExtractedContact.CodingKeys and conformance PreExtractedContact.CodingKeys();
  OUTLINED_FUNCTION_69_13();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v0)
  {
    OUTLINED_FUNCTION_3_42();
    OUTLINED_FUNCTION_3_42();
    OUTLINED_FUNCTION_3_42();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_8_18();
    OUTLINED_FUNCTION_8_18();
    OUTLINED_FUNCTION_3_42();
    uint64_t v3 = (int *)type metadata accessor for PreExtractedContact(0);
    type metadata accessor for Date();
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    OUTLINED_FUNCTION_26_25();
    OUTLINED_FUNCTION_3_42();
    OUTLINED_FUNCTION_96_10(v3[13]);
    OUTLINED_FUNCTION_8_18();
    OUTLINED_FUNCTION_26_25();
    OUTLINED_FUNCTION_96_10(v3[15]);
    OUTLINED_FUNCTION_8_18();
    OUTLINED_FUNCTION_96_10(v3[16]);
    OUTLINED_FUNCTION_8_18();
    OUTLINED_FUNCTION_3_42();
    OUTLINED_FUNCTION_96_10(v3[18]);
    OUTLINED_FUNCTION_8_18();
    OUTLINED_FUNCTION_96_10(v3[19]);
    OUTLINED_FUNCTION_8_18();
  }
  OUTLINED_FUNCTION_26_2();
  v2();
  OUTLINED_FUNCTION_82_11();
  OUTLINED_FUNCTION_120_0();
}

void PreExtractedContact.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_105_0();
  BOOL v14 = v13;
  uint64_t v16 = v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v18 = OUTLINED_FUNCTION_81(v17);
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_36_21();
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)v74 - v20;
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PreExtractedContact.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v22);
  uint64_t v23 = OUTLINED_FUNCTION_14_8();
  uint64_t v83 = (int *)type metadata accessor for PreExtractedContact(v23);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_89_8(v25, v74[0]);
  uint64_t v26 = v14[3];
  uint64_t v76 = (uint64_t)v14;
  __swift_project_boxed_opaque_existential_1(v14, v26);
  lazy protocol witness table accessor for type PreExtractedContact.CodingKeys and conformance PreExtractedContact.CodingKeys();
  uint64_t v78 = v10;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11)
  {
    uint64_t v81 = v11;
    LODWORD(v78) = 0;
    unsigned int v29 = 0;
  }
  else
  {
    uint64_t v27 = (uint64_t)v21;
    uint64_t v77 = v16;
    LOBYTE(a10) = 0;
    uint64_t v28 = KeyedDecodingContainer.decode(_:forKey:)();
    os_log_type_t v40 = v82;
    uint64_t *v82 = v28;
    v40[1] = v41;
    v40[2] = OUTLINED_FUNCTION_79_11(1);
    v40[3] = v42;
    v40[4] = OUTLINED_FUNCTION_79_11(2);
    v40[5] = v43;
    v40[6] = OUTLINED_FUNCTION_79_11(3);
    v40[7] = v44;
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    HIBYTE(v84) = 4;
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_97_6();
    uint64_t v75 = v46;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v40[8] = a10;
    HIBYTE(v84) = 5;
    OUTLINED_FUNCTION_97_6();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v74[1] = v45;
    v40[9] = a10;
    v40[10] = OUTLINED_FUNCTION_79_11(6);
    v40[11] = v47;
    type metadata accessor for Date();
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    OUTLINED_FUNCTION_97_6();
    uint64_t v80 = v48;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    _sypSgWObTm_0(v27, (uint64_t)v40 + v83[11], &demangling cache variable for type metadata for Date?);
    uint64_t v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_94_13(v49, v50);
    HIBYTE(v84) = v51;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v81 = 0;
    OUTLINED_FUNCTION_114_10();
    *(void *)(v54 + *(int *)(v52 + 52)) = v53;
    uint64_t v55 = v81;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v81 = v55;
    if (!v55)
    {
      _sypSgWObTm_0(v12, (uint64_t)v82 + v83[14], &demangling cache variable for type metadata for Date?);
      OUTLINED_FUNCTION_30_28(11);
      uint64_t v81 = 0;
      OUTLINED_FUNCTION_114_10();
      *(void *)(v59 + *(int *)(v57 + 60)) = v58;
      OUTLINED_FUNCTION_30_28(12);
      OUTLINED_FUNCTION_111_10();
      LODWORD(v80) = v60;
      uint64_t v81 = 0;
      OUTLINED_FUNCTION_114_10();
      *(void *)(v63 + *(int *)(v61 + 64)) = v62;
      LOBYTE(a10) = 13;
      uint64_t v64 = v81;
      uint64_t v65 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v81 = v64;
      if (!v64)
      {
        OUTLINED_FUNCTION_93_10(v65, v66);
        OUTLINED_FUNCTION_30_28(v68);
        uint64_t v81 = 0;
        OUTLINED_FUNCTION_114_10();
        *(void *)(v71 + *(int *)(v69 + 72)) = v70;
        OUTLINED_FUNCTION_30_28(15);
        uint64_t v81 = 0;
        OUTLINED_FUNCTION_65();
        v72();
        uint64_t v73 = (uint64_t)v82;
        *(uint64_t *)((char *)v82 + v83[19]) = a10;
        outlined init with copy of PartialExtractedAttributes(v73, v77, (void (*)(void))type metadata accessor for PreExtractedContact);
        __swift_destroy_boxed_opaque_existential_1Tm(v76);
        outlined destroy of PartialExtractedAttributes(v73, (void (*)(void))type metadata accessor for PreExtractedContact);
        goto LABEL_36;
      }
      OUTLINED_FUNCTION_65();
      v67();
      LODWORD(v77) = 0;
      LODWORD(v79) = 0;
      __swift_destroy_boxed_opaque_existential_1Tm(v76);
      LOBYTE(v39) = 1;
      int v31 = 1;
      int v32 = 1;
      int v33 = 1;
      int v34 = 1;
      int v35 = 1;
      int v36 = 1;
      int v37 = 1;
      LODWORD(v75) = 1;
      LODWORD(v78) = 1;
      LODWORD(v76) = 1;
      uint64_t v30 = v82;
      goto LABEL_21;
    }
    OUTLINED_FUNCTION_65();
    v56();
    LODWORD(v78) = 0;
    unsigned int v29 = 1023;
  }
  uint64_t v30 = v82;
  __swift_destroy_boxed_opaque_existential_1Tm(v76);
  int v31 = (v29 >> 2) & 1;
  int v32 = (v29 >> 3) & 1;
  int v33 = (v29 >> 4) & 1;
  int v34 = (v29 >> 5) & 1;
  int v35 = (v29 >> 6) & 1;
  int v36 = (v29 >> 7) & 1;
  int v37 = (v29 >> 8) & 1;
  LODWORD(v75) = (v29 >> 9) & 1;
  if ((v29 & 1) == 0)
  {
    LODWORD(v79) = 0;
    LODWORD(v77) = 0;
    LODWORD(v80) = 0;
    LODWORD(v76) = 0;
    if ((v29 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
  LODWORD(v76) = 0;
  LODWORD(v80) = 0;
  LODWORD(v77) = 0;
  LODWORD(v79) = 0;
  int v39 = (v29 >> 1) & 1;
LABEL_21:
  swift_bridgeObjectRelease();
  if ((v39 & 1) == 0)
  {
LABEL_6:
    if (v31) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  swift_bridgeObjectRelease();
  if (v31)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    if ((v32 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  if (!v32)
  {
LABEL_8:
    if (v33) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  swift_bridgeObjectRelease();
  if (v33)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    if ((v34 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  if (!v34)
  {
LABEL_10:
    if (v35) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  swift_bridgeObjectRelease();
  if (v35)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    if ((v36 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  if (!v36)
  {
LABEL_12:
    uint64_t v38 = v83;
    if (v37) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v38 = v83;
  outlined destroy of SearchResult?((uint64_t)v30 + v83[11], &demangling cache variable for type metadata for Date?);
  if (v37)
  {
LABEL_13:
    OUTLINED_FUNCTION_37_0();
    if ((v75 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  if (!v75)
  {
LABEL_14:
    if (v78) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  swift_bridgeObjectRelease();
  if (v78)
  {
LABEL_15:
    outlined destroy of SearchResult?((uint64_t)v30 + v38[14], &demangling cache variable for type metadata for Date?);
    if ((v76 & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }
LABEL_31:
  if (!v76)
  {
LABEL_16:
    if (v80) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
LABEL_32:
  swift_bridgeObjectRelease();
  if (v80)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    if ((v77 & 1) == 0) {
      goto LABEL_18;
    }
    goto LABEL_34;
  }
LABEL_33:
  if (!v77)
  {
LABEL_18:
    if (!v79) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
LABEL_34:
  OUTLINED_FUNCTION_37_0();
  if (v79) {
LABEL_35:
  }
    swift_bridgeObjectRelease();
LABEL_36:
  OUTLINED_FUNCTION_82_11();
  OUTLINED_FUNCTION_120_0();
}

void protocol witness for Decodable.init(from:) in conformance PreExtractedContact(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PreExtractedContact.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void protocol witness for Encodable.encode(to:) in conformance PreExtractedContact()
{
}

uint64_t PreExtractedBreadcrumb.id.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t PreExtractedBreadcrumb.extractedDates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PreExtractedBreadcrumb.extractedLocations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PreExtractedBreadcrumb.extractedPhoneNumbers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PreExtractedBreadcrumb.extractedPhoneNumbersLabels.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PreExtractedBreadcrumb.extractedPhoneNumbersCountryCodes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PreExtractedBreadcrumb.extractedAddresses.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PreExtractedBreadcrumb.extractedFlightsLabels.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PreExtractedBreadcrumb.extractedLinks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PreExtractedBreadcrumb.extractedLinksLabels.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PreExtractedBreadcrumb.extractedTrackingNumbers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PreExtractedBreadcrumb.extractedTrackingNumbersLabels.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PreExtractedBreadcrumb.extractedCurrencies.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PreExtractedBreadcrumb.extractedEmails.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PreExtractedBreadcrumb.extractedEmailsLabels.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PreExtractedBreadcrumb.init(item:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for FeatureFlagService();
  uint64_t v4 = swift_allocObject();
  PreExtractedBreadcrumb.init(item:featureFlagService:)(a1, v4, (uint64_t)v6);
  _sypSgWObTm_0((uint64_t)v6, (uint64_t)v7, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
  return _sypSgWObTm_0((uint64_t)v7, a2, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
}

uint64_t PreExtractedBreadcrumb.init(item:featureFlagService:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a2 + 80))(12) & 1) == 0)
  {
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    uint64_t v20 = OUTLINED_FUNCTION_43_1(v19, (uint64_t)static Logging.search);
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)OUTLINED_FUNCTION_55();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_257DC6000, v20, v21, "PreExtractedBreadcrumb: FF OmniSearch/preExtractedBreadcrumbs disabled, skip creating PreExtractedBreadcrumb.", v22, 2u);
      OUTLINED_FUNCTION_34();
    }

    swift_release();
    goto LABEL_15;
  }
  id v6 = objc_msgSend(a1, sel_attributeSet);
  if ((static PreExtractedBreadcrumb.isValid(attr:)(v6) & 1) == 0)
  {
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    uint64_t v24 = (void *)OUTLINED_FUNCTION_43_1(v23, (uint64_t)static Logging.search);
    os_log_type_t v25 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_54_9(v25))
    {
      *(_WORD *)OUTLINED_FUNCTION_55() = 0;
      OUTLINED_FUNCTION_116_8(&dword_257DC6000, v26, v27, "PreExtractedBreadcrumb: no relevant attribute exist, skip creating PreExtractedBreadcrumb.");
      OUTLINED_FUNCTION_34();
    }

    swift_release();
LABEL_15:
    _s10OmniSearch0B7ContextVSgWOi0_(v536);
    return _sypSgWObTm_0((uint64_t)v536, a3, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
  }
  id v7 = objc_msgSend(a1, sel_uniqueIdentifier);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v422 = v9;

  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  MEMORY[0x25A2C7AB0](v10);
  OUTLINED_FUNCTION_35_25();
  id v11 = OUTLINED_FUNCTION_14_26();

  if (v11)
  {
    OUTLINED_FUNCTION_37_23();
    uint64_t v12 = swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_34_25();
  }
  OUTLINED_FUNCTION_36_23(v12, v13, (uint64_t *)&demangling cache variable for type metadata for Any?, v14, v15, v16, v17, v18, v184, v201, v218, v235, v252, v269, v286, v303, v320, v337, v354,
    v371,
    v388,
    v405,
    v422,
    v439,
    v456,
    v472,
    v488,
    v504,
    v520,
    v536[0]);
  if (v537)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Date]);
    if (OUTLINED_FUNCTION_5_29())
    {
      uint64_t v28 = v440;
      goto LABEL_22;
    }
  }
  else
  {
    outlined destroy of SearchResult?((uint64_t)v536, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v28 = MEMORY[0x263F8EE78];
LABEL_22:
  uint64_t v406 = v28;
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  MEMORY[0x25A2C7AB0](v29);
  OUTLINED_FUNCTION_35_25();
  id v30 = OUTLINED_FUNCTION_14_26();

  if (v30)
  {
    OUTLINED_FUNCTION_37_23();
    uint64_t v31 = swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_34_25();
  }
  OUTLINED_FUNCTION_36_23(v31, v32, (uint64_t *)&demangling cache variable for type metadata for Any?, v33, v34, v35, v36, v37, v185, v202, v219, v236, v253, v270, v287, v304, v321, v338, v355,
    v372,
    v389,
    v406,
    v423,
    v440,
    v457,
    v473,
    v489,
    v505,
    v521,
    v536[0]);
  if (v537)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (OUTLINED_FUNCTION_5_29())
    {
      uint64_t v38 = v441;
      goto LABEL_30;
    }
  }
  else
  {
    outlined destroy of SearchResult?((uint64_t)v536, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v38 = MEMORY[0x263F8EE78];
LABEL_30:
  uint64_t v390 = v38;
  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  MEMORY[0x25A2C7AB0](v39);
  OUTLINED_FUNCTION_35_25();
  id v40 = OUTLINED_FUNCTION_14_26();

  if (v40)
  {
    OUTLINED_FUNCTION_37_23();
    uint64_t v41 = swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_34_25();
  }
  OUTLINED_FUNCTION_36_23(v41, v42, (uint64_t *)&demangling cache variable for type metadata for Any?, v43, v44, v45, v46, v47, v186, v203, v220, v237, v254, v271, v288, v305, v322, v339, v356,
    v373,
    v390,
    v407,
    v424,
    v441,
    v458,
    v474,
    v490,
    v506,
    v522,
    v536[0]);
  if (v537)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (OUTLINED_FUNCTION_5_29())
    {
      uint64_t v48 = v442;
      goto LABEL_38;
    }
  }
  else
  {
    outlined destroy of SearchResult?((uint64_t)v536, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v48 = MEMORY[0x263F8EE78];
LABEL_38:
  uint64_t v374 = v48;
  uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  MEMORY[0x25A2C7AB0](v49);
  OUTLINED_FUNCTION_35_25();
  id v50 = OUTLINED_FUNCTION_14_26();

  if (v50)
  {
    OUTLINED_FUNCTION_37_23();
    uint64_t v51 = swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_34_25();
  }
  OUTLINED_FUNCTION_36_23(v51, v52, (uint64_t *)&demangling cache variable for type metadata for Any?, v53, v54, v55, v56, v57, v187, v204, v221, v238, v255, v272, v289, v306, v323, v340, v357,
    v374,
    v391,
    v408,
    v425,
    v442,
    v459,
    v475,
    v491,
    v507,
    v523,
    v536[0]);
  if (v537)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (OUTLINED_FUNCTION_5_29())
    {
      uint64_t v58 = v443;
      goto LABEL_46;
    }
  }
  else
  {
    outlined destroy of SearchResult?((uint64_t)v536, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v58 = MEMORY[0x263F8EE78];
LABEL_46:
  uint64_t v358 = v58;
  uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  MEMORY[0x25A2C7AB0](v59);
  OUTLINED_FUNCTION_35_25();
  id v60 = OUTLINED_FUNCTION_14_26();

  if (v60)
  {
    OUTLINED_FUNCTION_37_23();
    uint64_t v61 = swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_34_25();
  }
  OUTLINED_FUNCTION_36_23(v61, v62, (uint64_t *)&demangling cache variable for type metadata for Any?, v63, v64, v65, v66, v67, v188, v205, v222, v239, v256, v273, v290, v307, v324, v341, v358,
    v375,
    v392,
    v409,
    v426,
    v443,
    v460,
    v476,
    v492,
    v508,
    v524,
    v536[0]);
  if (v537)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (OUTLINED_FUNCTION_5_29())
    {
      uint64_t v68 = v444;
      goto LABEL_54;
    }
  }
  else
  {
    outlined destroy of SearchResult?((uint64_t)v536, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v68 = MEMORY[0x263F8EE78];
LABEL_54:
  uint64_t v342 = v68;
  uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  MEMORY[0x25A2C7AB0](v69);
  OUTLINED_FUNCTION_35_25();
  id v70 = OUTLINED_FUNCTION_14_26();

  if (v70)
  {
    OUTLINED_FUNCTION_37_23();
    uint64_t v71 = swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_34_25();
  }
  OUTLINED_FUNCTION_36_23(v71, v72, (uint64_t *)&demangling cache variable for type metadata for Any?, v73, v74, v75, v76, v77, v189, v206, v223, v240, v257, v274, v291, v308, v325, v342, v359,
    v376,
    v393,
    v410,
    v427,
    v444,
    v461,
    v477,
    v493,
    v509,
    v525,
    v536[0]);
  if (v537)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (OUTLINED_FUNCTION_5_29())
    {
      uint64_t v78 = v445;
      goto LABEL_62;
    }
  }
  else
  {
    outlined destroy of SearchResult?((uint64_t)v536, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v78 = MEMORY[0x263F8EE78];
LABEL_62:
  uint64_t v326 = v78;
  uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  MEMORY[0x25A2C7AB0](v79);
  OUTLINED_FUNCTION_35_25();
  id v80 = OUTLINED_FUNCTION_14_26();

  if (v80)
  {
    OUTLINED_FUNCTION_37_23();
    uint64_t v81 = swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_34_25();
  }
  OUTLINED_FUNCTION_36_23(v81, v82, (uint64_t *)&demangling cache variable for type metadata for Any?, v83, v84, v85, v86, v87, v190, v207, v224, v241, v258, v275, v292, v309, v326, v343, v360,
    v377,
    v394,
    v411,
    v428,
    v445,
    v462,
    v478,
    v494,
    v510,
    v526,
    v536[0]);
  if (v537)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (OUTLINED_FUNCTION_5_29())
    {
      uint64_t v88 = v446;
      goto LABEL_70;
    }
  }
  else
  {
    outlined destroy of SearchResult?((uint64_t)v536, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v88 = MEMORY[0x263F8EE78];
LABEL_70:
  uint64_t v310 = v88;
  uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  MEMORY[0x25A2C7AB0](v89);
  OUTLINED_FUNCTION_35_25();
  id v90 = OUTLINED_FUNCTION_14_26();

  if (v90)
  {
    OUTLINED_FUNCTION_37_23();
    uint64_t v91 = swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_34_25();
  }
  OUTLINED_FUNCTION_36_23(v91, v92, (uint64_t *)&demangling cache variable for type metadata for Any?, v93, v94, v95, v96, v97, v191, v208, v225, v242, v259, v276, v293, v310, v327, v344, v361,
    v378,
    v395,
    v412,
    v429,
    v446,
    v463,
    v479,
    v495,
    v511,
    v527,
    v536[0]);
  if (v537)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (OUTLINED_FUNCTION_5_29())
    {
      uint64_t v98 = v447;
      goto LABEL_78;
    }
  }
  else
  {
    outlined destroy of SearchResult?((uint64_t)v536, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v98 = MEMORY[0x263F8EE78];
LABEL_78:
  uint64_t v294 = v98;
  uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  MEMORY[0x25A2C7AB0](v99);
  OUTLINED_FUNCTION_35_25();
  id v100 = OUTLINED_FUNCTION_14_26();

  if (v100)
  {
    OUTLINED_FUNCTION_37_23();
    uint64_t v101 = swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_34_25();
  }
  OUTLINED_FUNCTION_36_23(v101, v102, (uint64_t *)&demangling cache variable for type metadata for Any?, v103, v104, v105, v106, v107, v192, v209, v226, v243, v260, v277, v294, v311, v328, v345, v362,
    v379,
    v396,
    v413,
    v430,
    v447,
    v464,
    v480,
    v496,
    v512,
    v528,
    v536[0]);
  if (v537)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (OUTLINED_FUNCTION_5_29())
    {
      uint64_t v108 = v448;
      goto LABEL_86;
    }
  }
  else
  {
    outlined destroy of SearchResult?((uint64_t)v536, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v108 = MEMORY[0x263F8EE78];
LABEL_86:
  uint64_t v278 = v108;
  uint64_t v109 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  MEMORY[0x25A2C7AB0](v109);
  OUTLINED_FUNCTION_35_25();
  id v110 = OUTLINED_FUNCTION_14_26();

  if (v110)
  {
    OUTLINED_FUNCTION_37_23();
    uint64_t v111 = swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_34_25();
  }
  OUTLINED_FUNCTION_36_23(v111, v112, (uint64_t *)&demangling cache variable for type metadata for Any?, v113, v114, v115, v116, v117, v193, v210, v227, v244, v261, v278, v295, v312, v329, v346, v363,
    v380,
    v397,
    v414,
    v431,
    v448,
    v465,
    v481,
    v497,
    v513,
    v529,
    v536[0]);
  if (v537)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (OUTLINED_FUNCTION_5_29())
    {
      uint64_t v118 = v449;
      goto LABEL_94;
    }
  }
  else
  {
    outlined destroy of SearchResult?((uint64_t)v536, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v118 = MEMORY[0x263F8EE78];
LABEL_94:
  uint64_t v262 = v118;
  uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  MEMORY[0x25A2C7AB0](v119);
  OUTLINED_FUNCTION_35_25();
  id v120 = OUTLINED_FUNCTION_14_26();

  if (v120)
  {
    OUTLINED_FUNCTION_37_23();
    uint64_t v121 = swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_34_25();
  }
  OUTLINED_FUNCTION_36_23(v121, v122, (uint64_t *)&demangling cache variable for type metadata for Any?, v123, v124, v125, v126, v127, v194, v211, v228, v245, v262, v279, v296, v313, v330, v347, v364,
    v381,
    v398,
    v415,
    v432,
    v449,
    v466,
    v482,
    v498,
    v514,
    v530,
    v536[0]);
  if (v537)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (OUTLINED_FUNCTION_5_29())
    {
      uint64_t v128 = v450;
      goto LABEL_102;
    }
  }
  else
  {
    outlined destroy of SearchResult?((uint64_t)v536, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v128 = MEMORY[0x263F8EE78];
LABEL_102:
  uint64_t v246 = v128;
  uint64_t v129 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  MEMORY[0x25A2C7AB0](v129);
  OUTLINED_FUNCTION_35_25();
  id v130 = OUTLINED_FUNCTION_14_26();

  if (v130)
  {
    OUTLINED_FUNCTION_37_23();
    uint64_t v131 = swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_34_25();
  }
  OUTLINED_FUNCTION_36_23(v131, v132, (uint64_t *)&demangling cache variable for type metadata for Any?, v133, v134, v135, v136, v137, v195, v212, v229, v246, v263, v280, v297, v314, v331, v348, v365,
    v382,
    v399,
    v416,
    v433,
    v450,
    v467,
    v483,
    v499,
    v515,
    v531,
    v536[0]);
  if (v537)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (OUTLINED_FUNCTION_5_29())
    {
      uint64_t v138 = v451;
      goto LABEL_110;
    }
  }
  else
  {
    outlined destroy of SearchResult?((uint64_t)v536, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v138 = MEMORY[0x263F8EE78];
LABEL_110:
  uint64_t v230 = v138;
  uint64_t v139 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  MEMORY[0x25A2C7AB0](v139);
  OUTLINED_FUNCTION_35_25();
  id v140 = OUTLINED_FUNCTION_14_26();

  if (v140)
  {
    OUTLINED_FUNCTION_37_23();
    uint64_t v141 = swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_34_25();
  }
  OUTLINED_FUNCTION_36_23(v141, v142, (uint64_t *)&demangling cache variable for type metadata for Any?, v143, v144, v145, v146, v147, v196, v213, v230, v247, v264, v281, v298, v315, v332, v349, v366,
    v383,
    v400,
    v417,
    v434,
    v451,
    v468,
    v484,
    v500,
    v516,
    v532,
    v536[0]);
  if (v537)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (OUTLINED_FUNCTION_5_29())
    {
      uint64_t v148 = v452;
      goto LABEL_118;
    }
  }
  else
  {
    outlined destroy of SearchResult?((uint64_t)v536, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v148 = MEMORY[0x263F8EE78];
LABEL_118:
  uint64_t v214 = v148;
  uint64_t v149 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  MEMORY[0x25A2C7AB0](v149);
  OUTLINED_FUNCTION_35_25();
  id v150 = OUTLINED_FUNCTION_14_26();

  if (v150)
  {
    OUTLINED_FUNCTION_37_23();
    uint64_t v151 = swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_34_25();
  }
  OUTLINED_FUNCTION_36_23(v151, v152, (uint64_t *)&demangling cache variable for type metadata for Any?, v153, v154, v155, v156, v157, v197, v214, v231, v248, v265, v282, v299, v316, v333, v350, v367,
    v384,
    v401,
    v418,
    v435,
    v452,
    v469,
    v485,
    v501,
    v517,
    v533,
    v536[0]);
  if (v537)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (OUTLINED_FUNCTION_5_29())
    {
      uint64_t v158 = v453;
      goto LABEL_126;
    }
  }
  else
  {
    outlined destroy of SearchResult?((uint64_t)v536, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v158 = MEMORY[0x263F8EE78];
LABEL_126:
  uint64_t v198 = v158;
  uint64_t v159 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  MEMORY[0x25A2C7AB0](v159);
  OUTLINED_FUNCTION_35_25();
  id v160 = OUTLINED_FUNCTION_14_26();

  if (v160)
  {
    OUTLINED_FUNCTION_37_23();
    uint64_t v161 = swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_34_25();
  }
  OUTLINED_FUNCTION_36_23(v161, v162, (uint64_t *)&demangling cache variable for type metadata for Any?, v163, v164, v165, v166, v167, v198, v215, v232, v249, v266, v283, v300, v317, v334, v351, v368,
    v385,
    v402,
    v419,
    v436,
    v453,
    v470,
    v486,
    v502,
    v518,
    v534,
    v536[0]);
  if (v537)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (OUTLINED_FUNCTION_5_29())
    {
      uint64_t v168 = v454;
      goto LABEL_134;
    }
  }
  else
  {
    outlined destroy of SearchResult?((uint64_t)v536, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v168 = MEMORY[0x263F8EE78];
LABEL_134:
  uint64_t v169 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  MEMORY[0x25A2C7AB0](v169);
  OUTLINED_FUNCTION_35_25();
  id v170 = OUTLINED_FUNCTION_14_26();

  if (v170)
  {
    OUTLINED_FUNCTION_37_23();
    uint64_t v171 = swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_34_25();
  }
  OUTLINED_FUNCTION_36_23(v171, v172, (uint64_t *)&demangling cache variable for type metadata for Any?, v173, v174, v175, v176, v177, v199, v216, v233, v250, v267, v284, v301, v318, v335, v352, v369,
    v386,
    v403,
    v420,
    v437,
    v454,
    v471,
    v487,
    v503,
    v519,
    v535,
    v536[0]);
  if (!v537)
  {
    outlined destroy of SearchResult?((uint64_t)v536, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_141;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if (!OUTLINED_FUNCTION_5_29())
  {
LABEL_141:
    uint64_t v178 = MEMORY[0x263F8EE78];
    goto LABEL_142;
  }
  uint64_t v178 = v455;
LABEL_142:
  if (one-time initialization token for search != -1) {
    swift_once();
  }
  uint64_t v179 = type metadata accessor for Logger();
  uint64_t v180 = OUTLINED_FUNCTION_43_1(v179, (uint64_t)static Logging.search);
  os_log_type_t v181 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v180, v181))
  {
    uint64_t v182 = (uint8_t *)OUTLINED_FUNCTION_55();
    *(_WORD *)uint64_t v182 = 0;
    _os_log_impl(&dword_257DC6000, v180, v181, "PreExtractedBreadcrumb: Created for the source document.", v182, 2u);
    OUTLINED_FUNCTION_34();
  }
  swift_release();

  v536[0] = v8;
  v536[1] = v438;
  v536[2] = v421;
  uint64_t v537 = v404;
  uint64_t v538 = v387;
  uint64_t v539 = v370;
  uint64_t v540 = v353;
  uint64_t v541 = v336;
  uint64_t v542 = v319;
  uint64_t v543 = v302;
  uint64_t v544 = v285;
  uint64_t v545 = v268;
  uint64_t v546 = v251;
  uint64_t v547 = v234;
  uint64_t v548 = v217;
  uint64_t v549 = v200;
  uint64_t v550 = v168;
  uint64_t v551 = v178;
  destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType(v536);
  return _sypSgWObTm_0((uint64_t)v536, a3, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
}

uint64_t static PreExtractedBreadcrumb.isValid(attr:)(void *a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = (void *)MEMORY[0x25A2C7AB0](v2);
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(a1, sel_attributeForKey_, v3);

  if (v4) {
    goto LABEL_16;
  }
  long long v52 = 0u;
  long long v53 = 0u;
  outlined destroy of SearchResult?((uint64_t)&v52, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = (void *)MEMORY[0x25A2C7AB0](v5);
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(a1, sel_attributeForKey_, v6);

  if (v7) {
    goto LABEL_16;
  }
  long long v52 = 0u;
  long long v53 = 0u;
  outlined destroy of SearchResult?((uint64_t)&v52, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = (void *)MEMORY[0x25A2C7AB0](v8);
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(a1, sel_attributeForKey_, v9);

  if (v10) {
    goto LABEL_16;
  }
  long long v52 = 0u;
  long long v53 = 0u;
  outlined destroy of SearchResult?((uint64_t)&v52, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = (void *)MEMORY[0x25A2C7AB0](v11);
  swift_bridgeObjectRelease();
  id v13 = objc_msgSend(a1, sel_attributeForKey_, v12);

  if (v13) {
    goto LABEL_16;
  }
  long long v52 = 0u;
  long long v53 = 0u;
  outlined destroy of SearchResult?((uint64_t)&v52, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = (void *)MEMORY[0x25A2C7AB0](v14);
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(a1, sel_attributeForKey_, v15);

  if (v16) {
    goto LABEL_16;
  }
  long long v52 = 0u;
  long long v53 = 0u;
  outlined destroy of SearchResult?((uint64_t)&v52, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = (void *)MEMORY[0x25A2C7AB0](v17);
  swift_bridgeObjectRelease();
  id v19 = objc_msgSend(a1, sel_attributeForKey_, v18);

  if (v19) {
    goto LABEL_16;
  }
  long long v52 = 0u;
  long long v53 = 0u;
  outlined destroy of SearchResult?((uint64_t)&v52, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  os_log_type_t v21 = (void *)MEMORY[0x25A2C7AB0](v20);
  swift_bridgeObjectRelease();
  id v22 = objc_msgSend(a1, sel_attributeForKey_, v21);

  if (v22) {
    goto LABEL_16;
  }
  long long v52 = 0u;
  long long v53 = 0u;
  outlined destroy of SearchResult?((uint64_t)&v52, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = (void *)MEMORY[0x25A2C7AB0](v23);
  swift_bridgeObjectRelease();
  id v25 = objc_msgSend(a1, sel_attributeForKey_, v24);

  if (v25) {
    goto LABEL_16;
  }
  long long v52 = 0u;
  long long v53 = 0u;
  outlined destroy of SearchResult?((uint64_t)&v52, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = (void *)MEMORY[0x25A2C7AB0](v26);
  swift_bridgeObjectRelease();
  id v28 = objc_msgSend(a1, sel_attributeForKey_, v27);

  if (v28) {
    goto LABEL_16;
  }
  long long v52 = 0u;
  long long v53 = 0u;
  outlined destroy of SearchResult?((uint64_t)&v52, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v30 = (void *)MEMORY[0x25A2C7AB0](v29);
  swift_bridgeObjectRelease();
  id v31 = objc_msgSend(a1, sel_attributeForKey_, v30);

  if (v31) {
    goto LABEL_16;
  }
  long long v52 = 0u;
  long long v53 = 0u;
  outlined destroy of SearchResult?((uint64_t)&v52, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = (void *)MEMORY[0x25A2C7AB0](v32);
  swift_bridgeObjectRelease();
  id v34 = objc_msgSend(a1, sel_attributeForKey_, v33);

  if (v34) {
    goto LABEL_16;
  }
  long long v52 = 0u;
  long long v53 = 0u;
  outlined destroy of SearchResult?((uint64_t)&v52, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = (void *)MEMORY[0x25A2C7AB0](v35);
  swift_bridgeObjectRelease();
  id v37 = objc_msgSend(a1, sel_attributeForKey_, v36);

  if (v37) {
    goto LABEL_16;
  }
  long long v52 = 0u;
  long long v53 = 0u;
  outlined destroy of SearchResult?((uint64_t)&v52, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v39 = (void *)MEMORY[0x25A2C7AB0](v38);
  swift_bridgeObjectRelease();
  id v40 = objc_msgSend(a1, sel_attributeForKey_, v39);

  if (v40) {
    goto LABEL_16;
  }
  long long v52 = 0u;
  long long v53 = 0u;
  outlined destroy of SearchResult?((uint64_t)&v52, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v42 = (void *)MEMORY[0x25A2C7AB0](v41);
  swift_bridgeObjectRelease();
  id v43 = objc_msgSend(a1, sel_attributeForKey_, v42);

  if (v43) {
    goto LABEL_16;
  }
  long long v52 = 0u;
  long long v53 = 0u;
  outlined destroy of SearchResult?((uint64_t)&v52, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v45 = (void *)MEMORY[0x25A2C7AB0](v44);
  swift_bridgeObjectRelease();
  id v46 = objc_msgSend(a1, sel_attributeForKey_, v45);

  if (v46)
  {
LABEL_16:
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined destroy of SearchResult?((uint64_t)&v52, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 1;
  }
  else
  {
    long long v52 = 0u;
    long long v53 = 0u;
    outlined destroy of SearchResult?((uint64_t)&v52, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v50 = (void *)MEMORY[0x25A2C7AB0](v49);
    swift_bridgeObjectRelease();
    id v51 = objc_msgSend(a1, sel_attributeForKey_, v50);

    BOOL v47 = v51 != 0;
    if (v51)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v52 = 0u;
      long long v53 = 0u;
    }
    outlined destroy of SearchResult?((uint64_t)&v52, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  return v47;
}

uint64_t PreExtractedBreadcrumb.Keys.spotlight.getter()
{
  return OUTLINED_FUNCTION_51_21();
}

unint64_t PreExtractedBreadcrumb.Keys.rawValue.getter(char a1)
{
  unint64_t result = 0x6574636172747865;
  switch(a1)
  {
    case 1:
    case 5:
      unint64_t result = OUTLINED_FUNCTION_91_1(19);
      break;
    case 2:
      unint64_t result = 0xD000000000000017;
      break;
    case 3:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 4:
      unint64_t result = 0xD000000000000025;
      break;
    case 6:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 7:
      unint64_t result = 0xD000000000000011;
      break;
    case 8:
      unint64_t result = 0xD000000000000018;
      break;
    case 10:
      unint64_t result = 0xD000000000000016;
      break;
    case 11:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 12:
      unint64_t result = 0xD000000000000021;
      break;
    case 13:
      unint64_t result = 0xD000000000000014;
      break;
    case 14:
      unint64_t result = 0xD000000000000010;
      break;
    case 15:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

OmniSearch::PreExtractedBreadcrumb::Keys_optional __swiftcall PreExtractedBreadcrumb.Keys.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PreExtractedBreadcrumb.Keys.init(rawValue:), v3);
  OUTLINED_FUNCTION_38_18();
  if (v1 >= 0x10) {
    return (OmniSearch::PreExtractedBreadcrumb::Keys_optional)16;
  }
  else {
    return (OmniSearch::PreExtractedBreadcrumb::Keys_optional)v1;
  }
}

uint64_t PreExtractedBreadcrumb.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6574636172747865 && a2 == 0xEE00736574614464;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000012 && a2 == 0x8000000258683D60 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (a1 == 0xD000000000000015 && a2 == 0x8000000258683D80 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000258683DA0 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 4;
    }
    else if (a1 == 0xD000000000000021 && a2 == 0x8000000258683DC0 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 5;
    }
    else if (a1 == 0xD000000000000012 && a2 == 0x8000000258683DF0 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 6;
    }
    else if (a1 == 0xD000000000000018 && a2 == 0x8000000258683E10 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 7;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x8000000258683E30 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 8;
    }
    else if (a1 == 0xD000000000000016 && a2 == 0x8000000258683E50 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 9;
    }
    else
    {
      BOOL v7 = a1 == 0x6574636172747865 && a2 == 0xEE00736B6E694C64;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 10;
      }
      else if (a1 == 0xD000000000000014 && a2 == 0x8000000258683E70 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        return 11;
      }
      else if (a1 == 0xD000000000000018 && a2 == 0x8000000258683E90 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        return 12;
      }
      else if (a1 == 0xD00000000000001ELL && a2 == 0x8000000258683EB0 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        return 13;
      }
      else if (a1 == 0xD000000000000013 && a2 == 0x8000000258683ED0 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        return 14;
      }
      else
      {
        BOOL v8 = a1 == 0x6574636172747865 && a2 == 0xEF736C69616D4564;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 15;
        }
        else if (a1 == 0xD000000000000015 && a2 == 0x8000000258683EF0)
        {
          swift_bridgeObjectRelease();
          return 16;
        }
        else
        {
          char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v9) {
            return 16;
          }
          else {
            return 17;
          }
        }
      }
    }
  }
}

uint64_t PreExtractedBreadcrumb.CodingKeys.init(intValue:)()
{
  return 17;
}

unint64_t PreExtractedBreadcrumb.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
    case 10:
    case 15:
      unint64_t result = 0x6574636172747865;
      break;
    case 2:
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000021;
      break;
    case 7:
      unint64_t result = 0xD000000000000018;
      break;
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 9:
      unint64_t result = 0xD000000000000016;
      break;
    case 11:
      unint64_t result = 0xD000000000000014;
      break;
    case 12:
      unint64_t result = 0xD000000000000018;
      break;
    case 13:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 14:
      unint64_t result = 0xD000000000000013;
      break;
    case 16:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PreExtractedBreadcrumb.Keys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PreExtractedBreadcrumb.Keys()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PreExtractedBreadcrumb.Keys(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PreExtractedBreadcrumb.Keys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

OmniSearch::PreExtractedBreadcrumb::Keys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PreExtractedBreadcrumb.Keys@<W0>(Swift::String *a1@<X0>, OmniSearch::PreExtractedBreadcrumb::Keys_optional *a2@<X8>)
{
  result.value = PreExtractedBreadcrumb.Keys.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PreExtractedBreadcrumb.Keys()
{
  char v1 = OUTLINED_FUNCTION_110_9();
  unint64_t result = PreExtractedBreadcrumb.Keys.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PreExtractedBreadcrumb.CodingKeys()
{
  return PreExtractedBreadcrumb.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PreExtractedBreadcrumb.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PreExtractedBreadcrumb.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance PreExtractedBreadcrumb.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = PreExtractedBreadcrumb.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PreExtractedBreadcrumb.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PreExtractedBreadcrumb.CodingKeys and conformance PreExtractedBreadcrumb.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PreExtractedBreadcrumb.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PreExtractedBreadcrumb.CodingKeys and conformance PreExtractedBreadcrumb.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void PreExtractedBreadcrumb.encode(to:)()
{
  OUTLINED_FUNCTION_105_0();
  unint64_t v3 = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PreExtractedBreadcrumb.CodingKeys>);
  OUTLINED_FUNCTION_1();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_59_0();
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  lazy protocol witness table accessor for type PreExtractedBreadcrumb.CodingKeys and conformance PreExtractedBreadcrumb.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v0)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Date]);
    lazy protocol witness table accessor for type [Date] and conformance <A> [A](&lazy protocol witness table cache variable for type [Date] and conformance <A> [A], &lazy protocol witness table cache variable for type Date and conformance Date);
    OUTLINED_FUNCTION_124_8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_124_8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_9_24(3);
    OUTLINED_FUNCTION_9_24(4);
    OUTLINED_FUNCTION_9_24(5);
    OUTLINED_FUNCTION_9_24(6);
    OUTLINED_FUNCTION_9_24(7);
    OUTLINED_FUNCTION_9_24(8);
    OUTLINED_FUNCTION_9_24(9);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_13_34(11);
    OUTLINED_FUNCTION_13_34(12);
    OUTLINED_FUNCTION_13_34(13);
    OUTLINED_FUNCTION_13_34(14);
    OUTLINED_FUNCTION_13_34(15);
    OUTLINED_FUNCTION_13_34(16);
    (*(void (**)(void, uint64_t))(v6 + 8))(0, v4);
  }
  OUTLINED_FUNCTION_82_11();
  OUTLINED_FUNCTION_120_0();
}

void PreExtractedBreadcrumb.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_105_0();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PreExtractedBreadcrumb.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_13_12();
  __swift_project_boxed_opaque_existential_1(v12, v12[3]);
  lazy protocol witness table accessor for type PreExtractedBreadcrumb.CodingKeys and conformance PreExtractedBreadcrumb.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v10)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  }
  else
  {
    uint64_t v36 = v14;
    LOBYTE(v38[0]) = 0;
    uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Date]);
    lazy protocol witness table accessor for type [Date] and conformance <A> [A](&lazy protocol witness table cache variable for type [Date] and conformance <A> [A], &lazy protocol witness table cache variable for type Date and conformance Date);
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_92_13();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v31 = v38[0];
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v30 = v38[0];
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v29 = v38[0];
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_92_13();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v28 = v38[0];
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_33_22();
    uint64_t v27 = v38[0];
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_33_22();
    uint64_t v26 = v38[0];
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_33_22();
    uint64_t v25 = v38[0];
    uint64_t v35 = v38[0];
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_33_22();
    uint64_t v34 = v38[0];
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_12_33();
    uint64_t v33 = v38[0];
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_12_33();
    uint64_t v32 = v38[0];
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_12_33();
    uint64_t v24 = v38[0];
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_12_33();
    OUTLINED_FUNCTION_111_10();
    uint64_t v23 = v38[0];
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_12_33();
    LOBYTE(v37[0]) = 15;
    uint64_t v22 = v38[0];
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_12_33();
    char v39 = 16;
    uint64_t v21 = v38[0];
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v19 = OUTLINED_FUNCTION_4_32();
    v20(v19);
    v37[0] = v16;
    v37[1] = v18;
    v37[2] = v31;
    v37[3] = v30;
    v37[4] = v29;
    v37[5] = v28;
    v37[6] = v27;
    v37[7] = v26;
    v37[8] = v25;
    v37[9] = v35;
    v37[10] = v34;
    v37[11] = v33;
    v37[12] = v32;
    v37[13] = v24;
    v37[14] = v23;
    v37[15] = v22;
    v37[16] = v21;
    v37[17] = a10;
    outlined retain of PreExtractedBreadcrumb((uint64_t)v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    memcpy(v36, v37, 0x90uLL);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
    v38[0] = v16;
    v38[1] = v18;
    v38[2] = v31;
    uint64_t v38[3] = v30;
    v38[4] = v29;
    v38[5] = v28;
    v38[6] = v27;
    v38[7] = v26;
    v38[8] = v25;
    v38[9] = v35;
    v38[10] = v34;
    v38[11] = v33;
    v38[12] = v32;
    v38[13] = v24;
    v38[14] = v23;
    v38[15] = v22;
    v38[16] = v21;
    v38[17] = a10;
    outlined release of PreExtractedBreadcrumb((uint64_t)v38);
  }
  OUTLINED_FUNCTION_82_11();
  OUTLINED_FUNCTION_120_0();
}

void protocol witness for Decodable.init(from:) in conformance PreExtractedBreadcrumb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PreExtractedBreadcrumb.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void protocol witness for Encodable.encode(to:) in conformance PreExtractedBreadcrumb()
{
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PreExtractedBreadcrumb(void *__src, const void *a2)
{
  memcpy(v4, __src, sizeof(v4));
  memcpy(__dst, a2, sizeof(__dst));
  return specialized static SearchItem.== infix(_:_:)((uint64_t)v4) & 1;
}

uint64_t PreExtractedSharedLink.url.getter()
{
  return PartialExtractedAttributes.appointment.getter();
}

uint64_t PreExtractedSharedLink.urlDescription.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t PreExtractedSharedLink.artist.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t PreExtractedSharedLink.album.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t PreExtractedSharedLink.publishedDate.getter()
{
  return PartialExtractedAttributes.hotelReservation.getter();
}

uint64_t PreExtractedSharedLink.releaseDate.getter()
{
  return PartialExtractedAttributes.restaurantReservation.getter();
}

uint64_t PreExtractedSharedLink.lengthInSeconds.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for PreExtractedSharedLink(0) + 56));
}

uint64_t PreExtractedSharedLink.musicalGenre.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t PreExtractedSharedLink.curator.getter()
{
  return PreExtractedCard.cardPlaceOfBirth.getter();
}

uint64_t PreExtractedSharedLink.episode.getter()
{
  return PreExtractedCard.cardAddress.getter((void (*)(void))type metadata accessor for PreExtractedSharedLink);
}

uint64_t PreExtractedSharedLink.podcastName.getter()
{
  return PreExtractedCard.cardSex.getter();
}

uint64_t PreExtractedSharedLink.summary.getter()
{
  return PreExtractedCard.cardHeight.getter();
}

uint64_t PreExtractedSharedLink.init(item:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_95_1();
  uint64_t v9 = v7 - v8;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v73 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v14 = OUTLINED_FUNCTION_81(v13);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (int *)type metadata accessor for PreExtractedSharedLink(0);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_39();
  id v19 = objc_msgSend(a1, sel_attributeSet);
  uint64_t v20 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v19, (SEL *)&selRef_linkType);
  if (v21)
  {
    uint64_t v22 = v20;
    uint64_t v23 = v21;
    uint64_t v74 = v9;
    id v75 = a1;
    uint64_t v76 = a2;
    id v24 = objc_msgSend(a1, sel_uniqueIdentifier);
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;

    uint64_t *v2 = v25;
    v2[1] = v27;
    v2[2] = v22;
    v2[3] = v23;
    v2[4] = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v19, (SEL *)&selRef_linkSubType);
    v2[5] = v28;
    v2[6] = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v19, (SEL *)&selRef_linkName);
    v2[7] = v29;
    id v30 = objc_msgSend(v19, sel_URL);
    if (v30)
    {
      uint64_t v31 = v30;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v32 = type metadata accessor for URL();
      uint64_t v33 = 0;
    }
    else
    {
      uint64_t v32 = type metadata accessor for URL();
      uint64_t v33 = 1;
    }
    uint64_t v39 = 1;
    __swift_storeEnumTagSinglePayload((uint64_t)v16, v33, 1, v32);
    _sypSgWObTm_0((uint64_t)v16, (uint64_t)v2 + v17[8], &demangling cache variable for type metadata for URL?);
    uint64_t v40 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v19, (SEL *)&selRef_urlDescription);
    OUTLINED_FUNCTION_68_16(v40, v41, v17[9]);
    uint64_t v42 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v19, (SEL *)&selRef_artist);
    OUTLINED_FUNCTION_68_16(v42, v43, v17[10]);
    uint64_t v44 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v19, (SEL *)&selRef_album);
    OUTLINED_FUNCTION_68_16(v44, v45, v17[11]);
    id v46 = objc_msgSend(v19, sel_recordingDate);
    uint64_t v47 = v76;
    uint64_t v48 = v74;
    if (v46)
    {
      uint64_t v49 = v46;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v39 = 0;
    }
    uint64_t v50 = type metadata accessor for Date();
    uint64_t v51 = 1;
    __swift_storeEnumTagSinglePayload((uint64_t)v12, v39, 1, v50);
    _sypSgWObTm_0((uint64_t)v12, (uint64_t)v2 + v17[12], &demangling cache variable for type metadata for Date?);
    id v52 = objc_msgSend(v19, sel_recordingDate);
    if (v52)
    {
      long long v53 = v52;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v51 = 0;
    }
    __swift_storeEnumTagSinglePayload(v48, v51, 1, v50);
    _sypSgWObTm_0(v48, (uint64_t)v2 + v17[13], &demangling cache variable for type metadata for Date?);
    id v54 = objc_msgSend(v19, sel_duration);
    uint64_t v55 = v54;
    if (v54)
    {
      objc_msgSend(v54, sel_doubleValue);
      uint64_t v57 = v56;
    }
    else
    {
      uint64_t v57 = 0;
    }
    uint64_t v58 = (char *)v2 + v17[14];
    *(void *)uint64_t v58 = v57;
    v58[8] = v55 == 0;
    uint64_t v59 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v19, (SEL *)&selRef_musicalGenre);
    OUTLINED_FUNCTION_68_16(v59, v60, v17[15]);
    uint64_t v61 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v19, (SEL *)&selRef_curator);
    OUTLINED_FUNCTION_68_16(v61, v62, v17[16]);
    uint64_t v63 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v19, (SEL *)&selRef_episode);
    OUTLINED_FUNCTION_68_16(v63, v64, v17[17]);
    uint64_t v65 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v19, (SEL *)&selRef_podcastName);
    OUTLINED_FUNCTION_68_16(v65, v66, v17[18]);
    uint64_t v67 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v19, (SEL *)&selRef_textContent);
    OUTLINED_FUNCTION_68_16(v67, v68, v17[19]);
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v69 = type metadata accessor for Logger();
    id v70 = OUTLINED_FUNCTION_43_1(v69, (uint64_t)static Logging.search);
    os_log_type_t v71 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = (uint8_t *)OUTLINED_FUNCTION_55();
      *(_WORD *)uint64_t v72 = 0;
      _os_log_impl(&dword_257DC6000, v70, v71, "PreExtractedSharedLink: Created for the source document.", v72, 2u);
      OUTLINED_FUNCTION_34();
    }

    outlined init with take of PreExtractedCard((uint64_t)v2, v47, (void (*)(void))type metadata accessor for PreExtractedSharedLink);
    return __swift_storeEnumTagSinglePayload(v47, 0, 1, (uint64_t)v17);
  }
  else
  {
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    uint64_t v35 = OUTLINED_FUNCTION_43_1(v34, (uint64_t)static Logging.search);
    os_log_type_t v36 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_54_9(v36))
    {
      id v37 = (uint8_t *)OUTLINED_FUNCTION_55();
      *(_WORD *)id v37 = 0;
      _os_log_impl(&dword_257DC6000, v35, (os_log_type_t)v2, "PreExtractedSharedLink: No linkType, skip creating PreExtractedSharedLink.", v37, 2u);
      OUTLINED_FUNCTION_34();
    }

    return __swift_storeEnumTagSinglePayload(a2, 1, 1, (uint64_t)v17);
  }
}

unint64_t PreExtractedSharedLink.Keys.rawValue.getter(char a1)
{
  unint64_t result = 1701869940;
  switch(a1)
  {
    case 1:
      unint64_t result = OUTLINED_FUNCTION_74_15();
      break;
    case 2:
      unint64_t result = OUTLINED_FUNCTION_122_7();
      break;
    case 3:
      unint64_t result = 7107189;
      break;
    case 4:
      unint64_t result = 0x63736564206C7275;
      break;
    case 5:
      unint64_t result = 0x747369747261;
      break;
    case 6:
      unint64_t result = 0x6D75626C61;
      break;
    case 7:
      unint64_t result = 0x656873696C627570;
      break;
    case 8:
      unint64_t result = 0x20657361656C6572;
      break;
    case 9:
      unint64_t result = OUTLINED_FUNCTION_91_1(17);
      break;
    case 10:
      unint64_t result = 0x206C61636973756DLL;
      break;
    case 11:
      unint64_t result = 0x726F7461727563;
      break;
    case 12:
      unint64_t result = 0x65646F73697065;
      break;
    case 13:
      unint64_t result = 0x2074736163646F70;
      break;
    case 14:
      unint64_t result = 0x7972616D6D7573;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t type metadata accessor for PartialExtractedAttributes(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for PartialExtractedAttributes);
}

OmniSearch::PreExtractedSharedLink::Keys_optional __swiftcall PreExtractedSharedLink.Keys.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of PreExtractedSharedLink.Keys.init(rawValue:);
  return (OmniSearch::PreExtractedSharedLink::Keys_optional)PreExtractedContact.Keys.init(rawValue:)(rawValue, v1);
}

unint64_t PreExtractedContact.Keys.init(rawValue:)(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v4._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  _findStringSwitchCase(cases:string:)(cases, v4);
  OUTLINED_FUNCTION_38_18();
  if (v2 >= 0xF) {
    return 15;
  }
  else {
    return v2;
  }
}

uint64_t PreExtractedSharedLink.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 1701869940 && a2 == 0xE400000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x65707954627573 && a2 == 0xE700000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 1701667182 && a2 == 0xE400000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 7107189 && a2 == 0xE300000000000000;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v10 = a1 == 0x72637365446C7275 && a2 == 0xEE006E6F69747069;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              BOOL v11 = a1 == 0x747369747261 && a2 == 0xE600000000000000;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else
              {
                BOOL v12 = a1 == 0x6D75626C61 && a2 == 0xE500000000000000;
                if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 7;
                }
                else
                {
                  BOOL v13 = a1 == 0x656873696C627570 && a2 == 0xED00006574614464;
                  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 8;
                  }
                  else
                  {
                    BOOL v14 = a1 == 0x44657361656C6572 && a2 == 0xEB00000000657461;
                    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 9;
                    }
                    else
                    {
                      BOOL v15 = a1 == 0x6E496874676E656CLL && a2 == 0xEF73646E6F636553;
                      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        return 10;
                      }
                      else
                      {
                        BOOL v16 = a1 == 0x476C61636973756DLL && a2 == 0xEC00000065726E65;
                        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          return 11;
                        }
                        else
                        {
                          BOOL v17 = a1 == 0x726F7461727563 && a2 == 0xE700000000000000;
                          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                          {
                            swift_bridgeObjectRelease();
                            return 12;
                          }
                          else
                          {
                            BOOL v18 = a1 == 0x65646F73697065 && a2 == 0xE700000000000000;
                            if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                            {
                              swift_bridgeObjectRelease();
                              return 13;
                            }
                            else
                            {
                              BOOL v19 = a1 == 0x4E74736163646F70 && a2 == 0xEB00000000656D61;
                              if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                              {
                                swift_bridgeObjectRelease();
                                return 14;
                              }
                              else if (a1 == 0x7972616D6D7573 && a2 == 0xE700000000000000)
                              {
                                swift_bridgeObjectRelease();
                                return 15;
                              }
                              else
                              {
                                char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                swift_bridgeObjectRelease();
                                if (v21) {
                                  return 15;
                                }
                                else {
                                  return 16;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t PreExtractedSharedLink.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 25705;
  switch(a1)
  {
    case 1:
      uint64_t result = 1701869940;
      break;
    case 2:
      uint64_t v3 = 0x707954627573;
      goto LABEL_15;
    case 3:
      uint64_t result = 1701667182;
      break;
    case 4:
      uint64_t result = 7107189;
      break;
    case 5:
      uint64_t result = 0x72637365446C7275;
      break;
    case 6:
      uint64_t result = 0x747369747261;
      break;
    case 7:
      uint64_t result = 0x6D75626C61;
      break;
    case 8:
      uint64_t result = 0x656873696C627570;
      break;
    case 9:
      uint64_t result = 0x44657361656C6572;
      break;
    case 10:
      uint64_t result = 0x6E496874676E656CLL;
      break;
    case 11:
      uint64_t result = 0x476C61636973756DLL;
      break;
    case 12:
      uint64_t result = 0x726F7461727563;
      break;
    case 13:
      uint64_t v3 = 0x646F73697065;
LABEL_15:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x65000000000000;
      break;
    case 14:
      uint64_t result = 0x4E74736163646F70;
      break;
    case 15:
      uint64_t result = 0x7972616D6D7573;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PreExtractedSharedLink.Keys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PreExtractedSharedLink.Keys()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PreExtractedSharedLink.Keys(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PreExtractedSharedLink.Keys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

OmniSearch::PreExtractedSharedLink::Keys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PreExtractedSharedLink.Keys@<W0>(Swift::String *a1@<X0>, OmniSearch::PreExtractedSharedLink::Keys_optional *a2@<X8>)
{
  result.value = PreExtractedSharedLink.Keys.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PreExtractedSharedLink.Keys()
{
  char v1 = OUTLINED_FUNCTION_110_9();
  unint64_t result = PreExtractedSharedLink.Keys.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PreExtractedSharedLink.CodingKeys()
{
  return PreExtractedSharedLink.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PreExtractedSharedLink.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PreExtractedSharedLink.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PreExtractedSharedLink.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PreExtractedSharedLink.CodingKeys and conformance PreExtractedSharedLink.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PreExtractedSharedLink.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PreExtractedSharedLink.CodingKeys and conformance PreExtractedSharedLink.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void PreExtractedSharedLink.encode(to:)()
{
  OUTLINED_FUNCTION_105_0();
  OUTLINED_FUNCTION_104_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PreExtractedSharedLink.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_61_13();
  lazy protocol witness table accessor for type PreExtractedSharedLink.CodingKeys and conformance PreExtractedSharedLink.CodingKeys();
  OUTLINED_FUNCTION_69_13();
  OUTLINED_FUNCTION_90_12();
  if (!v0)
  {
    OUTLINED_FUNCTION_1_30(1);
    OUTLINED_FUNCTION_1_30(2);
    OUTLINED_FUNCTION_1_30(3);
    unint64_t v2 = (int *)type metadata accessor for PreExtractedSharedLink(0);
    type metadata accessor for URL();
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    OUTLINED_FUNCTION_125_8();
    OUTLINED_FUNCTION_26_25();
    OUTLINED_FUNCTION_10_29(v2[9]);
    OUTLINED_FUNCTION_1_30(5);
    OUTLINED_FUNCTION_10_29(v2[10]);
    OUTLINED_FUNCTION_1_30(6);
    OUTLINED_FUNCTION_10_29(v2[11]);
    OUTLINED_FUNCTION_1_30(7);
    type metadata accessor for Date();
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    OUTLINED_FUNCTION_26_25();
    OUTLINED_FUNCTION_26_25();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_10_29(v2[15]);
    OUTLINED_FUNCTION_1_30(11);
    OUTLINED_FUNCTION_1_30(12);
    OUTLINED_FUNCTION_1_30(13);
    OUTLINED_FUNCTION_1_30(14);
    OUTLINED_FUNCTION_1_30(15);
  }
  OUTLINED_FUNCTION_26_2();
  v3();
  OUTLINED_FUNCTION_82_11();
  OUTLINED_FUNCTION_120_0();
}

void PreExtractedSharedLink.init(from:)()
{
  OUTLINED_FUNCTION_105_0();
  unint64_t v3 = v2;
  uint64_t v70 = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_95_1();
  uint64_t v9 = v7 - v8;
  MEMORY[0x270FA5388](v10);
  BOOL v12 = (char *)&v68 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v14 = OUTLINED_FUNCTION_81(v13);
  MEMORY[0x270FA5388](v14);
  BOOL v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PreExtractedSharedLink.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v17);
  uint64_t v18 = OUTLINED_FUNCTION_14_8();
  uint64_t v74 = (int *)type metadata accessor for PreExtractedSharedLink(v18);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_184_0();
  id v75 = v20;
  uint64_t v21 = v3[3];
  uint64_t v69 = (uint64_t)v3;
  __swift_project_boxed_opaque_existential_1(v3, v21);
  lazy protocol witness table accessor for type PreExtractedSharedLink.CodingKeys and conformance PreExtractedSharedLink.CodingKeys();
  uint64_t v72 = v0;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    uint64_t v73 = v1;
    LODWORD(v71) = 0;
    unsigned int v24 = 0;
  }
  else
  {
    uint64_t v22 = v70;
    uint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v27 = v75;
    uint64_t *v75 = v23;
    v27[1] = v28;
    v27[2] = OUTLINED_FUNCTION_103_12(1);
    v27[3] = v29;
    v27[4] = OUTLINED_FUNCTION_103_12(2);
    v27[5] = v30;
    v27[6] = OUTLINED_FUNCTION_103_12(3);
    v27[7] = v31;
    type metadata accessor for URL();
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    OUTLINED_FUNCTION_125_8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v32 = (uint64_t)v16;
    uint64_t v34 = v74;
    uint64_t v33 = v75;
    _sypSgWObTm_0(v32, (uint64_t)v75 + v74[8], &demangling cache variable for type metadata for URL?);
    uint64_t v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    os_log_type_t v36 = (uint64_t *)((char *)v33 + v34[9]);
    uint64_t *v36 = v35;
    v36[1] = v37;
    uint64_t v38 = OUTLINED_FUNCTION_126_5(6);
    uint64_t v39 = (uint64_t *)((char *)v33 + v34[10]);
    *uint64_t v39 = v38;
    v39[1] = v40;
    uint64_t v41 = OUTLINED_FUNCTION_126_5(7);
    uint64_t v42 = (uint64_t *)((char *)v33 + v34[11]);
    uint64_t *v42 = v41;
    v42[1] = v43;
    type metadata accessor for Date();
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    OUTLINED_FUNCTION_125_8();
    uint64_t v73 = v44;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    _sypSgWObTm_0((uint64_t)v12, (uint64_t)v33 + v74[12], &demangling cache variable for type metadata for Date?);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v73 = 0;
    _sypSgWObTm_0(v9, (uint64_t)v75 + v74[13], &demangling cache variable for type metadata for Date?);
    uint64_t v45 = v73;
    uint64_t v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v73 = v45;
    if (!v45)
    {
      uint64_t v48 = (char *)v75 + v74[14];
      *(void *)uint64_t v48 = v46;
      v48[8] = v47 & 1;
      uint64_t v49 = OUTLINED_FUNCTION_47_18(11);
      uint64_t v73 = 0;
      OUTLINED_FUNCTION_73_12(v49, v51, v74[15]);
      OUTLINED_FUNCTION_47_18(12);
      OUTLINED_FUNCTION_111_10();
      uint64_t v73 = 0;
      id v52 = (uint64_t *)((char *)v75 + v74[16]);
      *id v52 = v53;
      v52[1] = v54;
      uint64_t v55 = OUTLINED_FUNCTION_47_18(13);
      uint64_t v73 = 0;
      uint64_t v56 = (uint64_t *)((char *)v75 + v74[17]);
      *uint64_t v56 = v55;
      v56[1] = v57;
      uint64_t v58 = OUTLINED_FUNCTION_47_18(14);
      uint64_t v73 = 0;
      uint64_t v59 = (uint64_t *)((char *)v75 + v74[18]);
      *uint64_t v59 = v58;
      v59[1] = v60;
      uint64_t v61 = OUTLINED_FUNCTION_47_18(15);
      uint64_t v73 = 0;
      uint64_t v62 = v61;
      uint64_t v64 = v63;
      OUTLINED_FUNCTION_26_2();
      v65();
      uint64_t v66 = (uint64_t)v75;
      uint64_t v67 = (uint64_t *)((char *)v75 + v74[19]);
      *uint64_t v67 = v62;
      v67[1] = v64;
      outlined init with copy of PartialExtractedAttributes(v66, v22, (void (*)(void))type metadata accessor for PreExtractedSharedLink);
      __swift_destroy_boxed_opaque_existential_1Tm(v69);
      outlined destroy of PartialExtractedAttributes(v66, (void (*)(void))type metadata accessor for PreExtractedSharedLink);
      goto LABEL_32;
    }
    OUTLINED_FUNCTION_26_2();
    v50();
    unsigned int v24 = 1023;
    LODWORD(v71) = 1;
  }
  uint64_t v25 = v75;
  __swift_destroy_boxed_opaque_existential_1Tm(v69);
  if (v24)
  {
    LODWORD(v69) = 0;
    LODWORD(v70) = 0;
    LODWORD(v72) = 0;
    swift_bridgeObjectRelease();
    if (((v24 >> 1) & 1) == 0)
    {
LABEL_6:
      if ((v24 >> 2)) {
        goto LABEL_7;
      }
      goto LABEL_21;
    }
  }
  else
  {
    LODWORD(v72) = 0;
    LODWORD(v70) = 0;
    LODWORD(v69) = 0;
    if ((v24 & 2) == 0) {
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
  if ((v24 >> 2))
  {
LABEL_7:
    swift_bridgeObjectRelease();
    if (((v24 >> 3) & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  if (((v24 >> 3) & 1) == 0)
  {
LABEL_8:
    uint64_t v26 = v74;
    if ((v24 >> 4)) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  swift_bridgeObjectRelease();
  uint64_t v26 = v74;
  if ((v24 >> 4))
  {
LABEL_9:
    outlined destroy of SearchResult?((uint64_t)v25 + v26[8], &demangling cache variable for type metadata for URL?);
    if (((v24 >> 5) & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  if (((v24 >> 5) & 1) == 0)
  {
LABEL_10:
    if ((v24 >> 6)) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  OUTLINED_FUNCTION_37_0();
  if ((v24 >> 6))
  {
LABEL_11:
    OUTLINED_FUNCTION_37_0();
    if (((v24 >> 7) & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  if (((v24 >> 7) & 1) == 0)
  {
LABEL_12:
    if ((v24 >> 8)) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  OUTLINED_FUNCTION_37_0();
  if ((v24 >> 8))
  {
LABEL_13:
    outlined destroy of SearchResult?((uint64_t)v25 + v26[12], &demangling cache variable for type metadata for Date?);
    if ((v71 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    outlined destroy of SearchResult?((uint64_t)v25 + v26[13], &demangling cache variable for type metadata for Date?);
    if (v69) {
      goto LABEL_15;
    }
    goto LABEL_16;
  }
LABEL_27:
  if (v71) {
    goto LABEL_28;
  }
LABEL_14:
  if (v69) {
LABEL_15:
  }
    OUTLINED_FUNCTION_37_0();
LABEL_16:
  if (v70)
  {
    OUTLINED_FUNCTION_37_0();
    if ((v72 & 1) == 0) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v72) {
LABEL_31:
  }
    OUTLINED_FUNCTION_37_0();
LABEL_32:
  OUTLINED_FUNCTION_120_0();
}

void protocol witness for Decodable.init(from:) in conformance PreExtractedSharedLink()
{
}

void protocol witness for Encodable.encode(to:) in conformance PreExtractedSharedLink()
{
}

void outlined bridged method (mbnn) of @objc CSSearchableItem.bundleID.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x25A2C7AB0]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setBundleID_, v4);
}

uint64_t type metadata accessor for PreExtractedCard(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for PreExtractedCard);
}

unint64_t lazy protocol witness table accessor for type PartialExtractedAttributes.CodingKeys and conformance PartialExtractedAttributes.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PartialExtractedAttributes.CodingKeys and conformance PartialExtractedAttributes.CodingKeys;
  if (!lazy protocol witness table cache variable for type PartialExtractedAttributes.CodingKeys and conformance PartialExtractedAttributes.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialExtractedAttributes.CodingKeys and conformance PartialExtractedAttributes.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PartialExtractedAttributes.CodingKeys and conformance PartialExtractedAttributes.CodingKeys;
  if (!lazy protocol witness table cache variable for type PartialExtractedAttributes.CodingKeys and conformance PartialExtractedAttributes.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialExtractedAttributes.CodingKeys and conformance PartialExtractedAttributes.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PartialExtractedAttributes.CodingKeys and conformance PartialExtractedAttributes.CodingKeys;
  if (!lazy protocol witness table cache variable for type PartialExtractedAttributes.CodingKeys and conformance PartialExtractedAttributes.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialExtractedAttributes.CodingKeys and conformance PartialExtractedAttributes.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PartialExtractedAttributes.CodingKeys and conformance PartialExtractedAttributes.CodingKeys;
  if (!lazy protocol witness table cache variable for type PartialExtractedAttributes.CodingKeys and conformance PartialExtractedAttributes.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialExtractedAttributes.CodingKeys and conformance PartialExtractedAttributes.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PreExtractedCard.CodingKeys and conformance PreExtractedCard.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PreExtractedCard.CodingKeys and conformance PreExtractedCard.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreExtractedCard.CodingKeys and conformance PreExtractedCard.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedCard.CodingKeys and conformance PreExtractedCard.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreExtractedCard.CodingKeys and conformance PreExtractedCard.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreExtractedCard.CodingKeys and conformance PreExtractedCard.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedCard.CodingKeys and conformance PreExtractedCard.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreExtractedCard.CodingKeys and conformance PreExtractedCard.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreExtractedCard.CodingKeys and conformance PreExtractedCard.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedCard.CodingKeys and conformance PreExtractedCard.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreExtractedCard.CodingKeys and conformance PreExtractedCard.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreExtractedCard.CodingKeys and conformance PreExtractedCard.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedCard.CodingKeys and conformance PreExtractedCard.CodingKeys);
  }
  return result;
}

uint64_t outlined init with copy of PartialExtractedAttributes(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_7_2();
  uint64_t v4 = OUTLINED_FUNCTION_210();
  v5(v4);
  return a2;
}

uint64_t outlined destroy of PartialExtractedAttributes(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_7_2();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t type metadata accessor for PreExtractedContact(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for PreExtractedContact);
}

uint64_t outlined init with take of PreExtractedCard(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_99_9();
  v4();
  return a2;
}

unint64_t lazy protocol witness table accessor for type PreExtractedContact.CodingKeys and conformance PreExtractedContact.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PreExtractedContact.CodingKeys and conformance PreExtractedContact.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreExtractedContact.CodingKeys and conformance PreExtractedContact.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedContact.CodingKeys and conformance PreExtractedContact.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreExtractedContact.CodingKeys and conformance PreExtractedContact.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreExtractedContact.CodingKeys and conformance PreExtractedContact.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedContact.CodingKeys and conformance PreExtractedContact.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreExtractedContact.CodingKeys and conformance PreExtractedContact.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreExtractedContact.CodingKeys and conformance PreExtractedContact.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedContact.CodingKeys and conformance PreExtractedContact.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreExtractedContact.CodingKeys and conformance PreExtractedContact.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreExtractedContact.CodingKeys and conformance PreExtractedContact.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedContact.CodingKeys and conformance PreExtractedContact.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PreExtractedBreadcrumb.CodingKeys and conformance PreExtractedBreadcrumb.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PreExtractedBreadcrumb.CodingKeys and conformance PreExtractedBreadcrumb.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreExtractedBreadcrumb.CodingKeys and conformance PreExtractedBreadcrumb.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedBreadcrumb.CodingKeys and conformance PreExtractedBreadcrumb.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreExtractedBreadcrumb.CodingKeys and conformance PreExtractedBreadcrumb.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreExtractedBreadcrumb.CodingKeys and conformance PreExtractedBreadcrumb.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedBreadcrumb.CodingKeys and conformance PreExtractedBreadcrumb.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreExtractedBreadcrumb.CodingKeys and conformance PreExtractedBreadcrumb.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreExtractedBreadcrumb.CodingKeys and conformance PreExtractedBreadcrumb.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedBreadcrumb.CodingKeys and conformance PreExtractedBreadcrumb.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreExtractedBreadcrumb.CodingKeys and conformance PreExtractedBreadcrumb.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreExtractedBreadcrumb.CodingKeys and conformance PreExtractedBreadcrumb.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedBreadcrumb.CodingKeys and conformance PreExtractedBreadcrumb.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [Date] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Date]);
    lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(a2, MEMORY[0x263F07490]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined retain of PreExtractedBreadcrumb(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of PreExtractedBreadcrumb(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for PreExtractedSharedLink(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for PreExtractedSharedLink);
}

uint64_t _sypSgWObTm_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  OUTLINED_FUNCTION_22_9(a1, a2, a3);
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_99_9();
  v4();
  return v3;
}

unint64_t lazy protocol witness table accessor for type PreExtractedSharedLink.CodingKeys and conformance PreExtractedSharedLink.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PreExtractedSharedLink.CodingKeys and conformance PreExtractedSharedLink.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreExtractedSharedLink.CodingKeys and conformance PreExtractedSharedLink.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedSharedLink.CodingKeys and conformance PreExtractedSharedLink.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreExtractedSharedLink.CodingKeys and conformance PreExtractedSharedLink.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreExtractedSharedLink.CodingKeys and conformance PreExtractedSharedLink.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedSharedLink.CodingKeys and conformance PreExtractedSharedLink.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreExtractedSharedLink.CodingKeys and conformance PreExtractedSharedLink.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreExtractedSharedLink.CodingKeys and conformance PreExtractedSharedLink.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedSharedLink.CodingKeys and conformance PreExtractedSharedLink.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreExtractedSharedLink.CodingKeys and conformance PreExtractedSharedLink.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreExtractedSharedLink.CodingKeys and conformance PreExtractedSharedLink.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedSharedLink.CodingKeys and conformance PreExtractedSharedLink.CodingKeys);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for PartialExtractedAttributes(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type PartialExtractedAttributes and conformance PartialExtractedAttributes, (void (*)(uint64_t))type metadata accessor for PartialExtractedAttributes);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PartialExtractedAttributes(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type PartialExtractedAttributes and conformance PartialExtractedAttributes, (void (*)(uint64_t))type metadata accessor for PartialExtractedAttributes);
  a1[2] = lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type PartialExtractedAttributes and conformance PartialExtractedAttributes, (void (*)(uint64_t))type metadata accessor for PartialExtractedAttributes);
  uint64_t result = lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type PartialExtractedAttributes and conformance PartialExtractedAttributes, (void (*)(uint64_t))type metadata accessor for PartialExtractedAttributes);
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PreExtractedCard.Keys and conformance PreExtractedCard.Keys()
{
  unint64_t result = lazy protocol witness table cache variable for type PreExtractedCard.Keys and conformance PreExtractedCard.Keys;
  if (!lazy protocol witness table cache variable for type PreExtractedCard.Keys and conformance PreExtractedCard.Keys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedCard.Keys and conformance PreExtractedCard.Keys);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for PreExtractedCard(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type PreExtractedCard and conformance PreExtractedCard, (void (*)(uint64_t))type metadata accessor for PreExtractedCard);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PreExtractedCard(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type PreExtractedCard and conformance PreExtractedCard, (void (*)(uint64_t))type metadata accessor for PreExtractedCard);
  a1[2] = lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type PreExtractedCard and conformance PreExtractedCard, (void (*)(uint64_t))type metadata accessor for PreExtractedCard);
  uint64_t result = lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type PreExtractedCard and conformance PreExtractedCard, (void (*)(uint64_t))type metadata accessor for PreExtractedCard);
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PreExtractedContact.Keys and conformance PreExtractedContact.Keys()
{
  unint64_t result = lazy protocol witness table cache variable for type PreExtractedContact.Keys and conformance PreExtractedContact.Keys;
  if (!lazy protocol witness table cache variable for type PreExtractedContact.Keys and conformance PreExtractedContact.Keys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedContact.Keys and conformance PreExtractedContact.Keys);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for PreExtractedContact(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type PreExtractedContact and conformance PreExtractedContact, (void (*)(uint64_t))type metadata accessor for PreExtractedContact);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PreExtractedContact(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type PreExtractedContact and conformance PreExtractedContact, (void (*)(uint64_t))type metadata accessor for PreExtractedContact);
  a1[2] = lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type PreExtractedContact and conformance PreExtractedContact, (void (*)(uint64_t))type metadata accessor for PreExtractedContact);
  uint64_t result = lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type PreExtractedContact and conformance PreExtractedContact, (void (*)(uint64_t))type metadata accessor for PreExtractedContact);
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PreExtractedBreadcrumb.Keys and conformance PreExtractedBreadcrumb.Keys()
{
  unint64_t result = lazy protocol witness table cache variable for type PreExtractedBreadcrumb.Keys and conformance PreExtractedBreadcrumb.Keys;
  if (!lazy protocol witness table cache variable for type PreExtractedBreadcrumb.Keys and conformance PreExtractedBreadcrumb.Keys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedBreadcrumb.Keys and conformance PreExtractedBreadcrumb.Keys);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PreExtractedBreadcrumb(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PreExtractedBreadcrumb and conformance PreExtractedBreadcrumb();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PreExtractedBreadcrumb and conformance PreExtractedBreadcrumb()
{
  unint64_t result = lazy protocol witness table cache variable for type PreExtractedBreadcrumb and conformance PreExtractedBreadcrumb;
  if (!lazy protocol witness table cache variable for type PreExtractedBreadcrumb and conformance PreExtractedBreadcrumb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedBreadcrumb and conformance PreExtractedBreadcrumb);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreExtractedBreadcrumb and conformance PreExtractedBreadcrumb;
  if (!lazy protocol witness table cache variable for type PreExtractedBreadcrumb and conformance PreExtractedBreadcrumb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedBreadcrumb and conformance PreExtractedBreadcrumb);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreExtractedBreadcrumb and conformance PreExtractedBreadcrumb;
  if (!lazy protocol witness table cache variable for type PreExtractedBreadcrumb and conformance PreExtractedBreadcrumb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedBreadcrumb and conformance PreExtractedBreadcrumb);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreExtractedBreadcrumb and conformance PreExtractedBreadcrumb;
  if (!lazy protocol witness table cache variable for type PreExtractedBreadcrumb and conformance PreExtractedBreadcrumb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedBreadcrumb and conformance PreExtractedBreadcrumb);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PreExtractedBreadcrumb(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type PreExtractedBreadcrumb and conformance PreExtractedBreadcrumb();
  a1[2] = lazy protocol witness table accessor for type PreExtractedBreadcrumb and conformance PreExtractedBreadcrumb();
  unint64_t result = lazy protocol witness table accessor for type PreExtractedBreadcrumb and conformance PreExtractedBreadcrumb();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PreExtractedSharedLink.Keys and conformance PreExtractedSharedLink.Keys()
{
  unint64_t result = lazy protocol witness table cache variable for type PreExtractedSharedLink.Keys and conformance PreExtractedSharedLink.Keys;
  if (!lazy protocol witness table cache variable for type PreExtractedSharedLink.Keys and conformance PreExtractedSharedLink.Keys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExtractedSharedLink.Keys and conformance PreExtractedSharedLink.Keys);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for PreExtractedSharedLink(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type PreExtractedSharedLink and conformance PreExtractedSharedLink, (void (*)(uint64_t))type metadata accessor for PreExtractedSharedLink);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PreExtractedSharedLink(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type PreExtractedSharedLink and conformance PreExtractedSharedLink, (void (*)(uint64_t))type metadata accessor for PreExtractedSharedLink);
  a1[2] = lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type PreExtractedSharedLink and conformance PreExtractedSharedLink, (void (*)(uint64_t))type metadata accessor for PreExtractedSharedLink);
  uint64_t result = lazy protocol witness table accessor for type RentalCarReservation and conformance RentalCarReservation(&lazy protocol witness table cache variable for type PreExtractedSharedLink and conformance PreExtractedSharedLink, (void (*)(uint64_t))type metadata accessor for PreExtractedSharedLink);
  a1[3] = result;
  return result;
}

uint64_t dispatch thunk of PreExtractedSourceDocument.extractedEventsLLMConsumableDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PreExtractedSourceDocument.extractedEventsLLMConsumableDescription.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of PreExtractedSourceDocument.extractedEventsLLMConsumableDescription.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PreExtractedSourceDocument.partialExtractedAttributes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PreExtractedSourceDocument.partialExtractedAttributes.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of PreExtractedSourceDocument.partialExtractedAttributes.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PreExtractedSourceDocument.preExtractedCard.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of PreExtractedSourceDocument.preExtractedContact.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of PreExtractedSourceDocument.preExtractedSharedLink.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of PreExtractedSourceDocument.preExtractedBreadcrumb.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of PreExtractedSearchItem.init(item:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of PartialExtractedAttributesSearchItem.init(item:bundleID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of PartialExtractedAttributesSearchItem.rentalCarReservation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of PartialExtractedAttributesSearchItem.ticketedTransportation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PartialExtractedAttributesSearchItem.ticketedShow.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PartialExtractedAttributesSearchItem.appointment.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of PartialExtractedAttributesSearchItem.party.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of PartialExtractedAttributesSearchItem.trip.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of PartialExtractedAttributesSearchItem.flightReservation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of PartialExtractedAttributesSearchItem.hotelReservation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of PartialExtractedAttributesSearchItem.restaurantReservation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of PreExtractedEventSearchItem.eventMessageIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PreExtractedEventSearchItem.eventGroupIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of PreExtractedEventSearchItem.eventFallbackGroupIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PreExtractedEventSearchItem.eventMegadomeIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PreExtractedEventSearchItem.eventType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of PreExtractedEventSearchItem.eventSubType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of PreExtractedEventSearchItem.eventSourceBundleIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of PreExtractedEventSearchItem.eventIsAllDay.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of PreExtractedEventSearchItem.timeIsUnknown.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of PreExtractedEventSearchItem.eventSourceIsForwarded.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of PreExtractedEventSearchItem.authors.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of PreExtractedEventSearchItem.mailMessageId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of PreExtractedEventSearchItem.mailMessageHeader.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of PreExtractedEventSearchItem.accountIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of PreExtractedEventSearchItem.mailboxes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of PreExtractedEventSearchItem.detectedEventTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

void *initializeBufferWithCopyOfBuffer for PartialExtractedAttributes(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (void *)((char *)a1 + v8);
    uint64_t v10 = (void *)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for RentalCarReservation(0);
    swift_bridgeObjectRetain();
    uint64_t v486 = v3;
    uint64_t v488 = v4;
    uint64_t v484 = v6;
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      uint64_t v14 = v10[1];
      *uint64_t v9 = *v10;
      v9[1] = v14;
      uint64_t v15 = v10[3];
      id v9[2] = v10[2];
      v9[3] = v15;
      uint64_t v16 = v10[5];
      v9[4] = v10[4];
      v9[5] = v16;
      uint64_t v17 = v10[7];
      v9[6] = v10[6];
      v9[7] = v17;
      uint64_t v18 = v10[9];
      v9[8] = v10[8];
      v9[9] = v18;
      uint64_t v19 = v10[11];
      v9[10] = v10[10];
      v9[11] = v19;
      uint64_t v20 = v10[13];
      v9[12] = v10[12];
      v9[13] = v20;
      uint64_t v21 = v10[15];
      v9[14] = v10[14];
      v9[15] = v21;
      *((unsigned char *)v9 + 128) = *((unsigned char *)v10 + 128);
      *(_WORD *)((char *)v9 + 129) = *(_WORD *)((char *)v10 + 129);
      uint64_t v22 = v10[18];
      v9[17] = v10[17];
      v9[18] = v22;
      uint64_t v23 = v10[20];
      v9[19] = v10[19];
      v9[20] = v23;
      uint64_t v24 = v10[22];
      v9[21] = v10[21];
      v9[22] = v24;
      uint64_t v25 = v10[24];
      v9[23] = v10[23];
      v9[24] = v25;
      uint64_t v26 = v10[26];
      v9[25] = v10[25];
      v9[26] = v26;
      uint64_t v27 = v10[28];
      v9[27] = v10[27];
      v9[28] = v27;
      uint64_t v28 = v10[30];
      v9[29] = v10[29];
      v9[30] = v28;
      uint64_t v476 = v10[32];
      v9[31] = v10[31];
      v9[32] = v476;
      uint64_t v468 = v10[34];
      v9[33] = v10[33];
      v9[34] = v468;
      uint64_t v461 = v10[36];
      v9[35] = v10[35];
      v9[36] = v461;
      uint64_t v454 = v10[38];
      v9[37] = v10[37];
      v9[38] = v454;
      uint64_t v29 = v10[40];
      v9[39] = v10[39];
      v9[40] = v29;
      uint64_t v30 = v10[42];
      v9[41] = v10[41];
      v9[42] = v30;
      uint64_t v31 = v10[44];
      v9[43] = v10[43];
      v9[44] = v31;
      uint64_t v32 = v10[46];
      v9[45] = v10[45];
      v9[46] = v32;
      uint64_t v33 = v10[47];
      *((unsigned char *)v9 + 384) = *((unsigned char *)v10 + 384);
      v9[47] = v33;
      uint64_t v34 = v10[50];
      v9[49] = v10[49];
      v9[50] = v34;
      uint64_t v35 = v10[52];
      v9[51] = v10[51];
      v9[52] = v35;
      uint64_t v36 = *(int *)(v11 + 140);
      __dst = (char *)v9 + v36;
      uint64_t v37 = (char *)v10 + v36;
      uint64_t v38 = type metadata accessor for Date();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v37, 1, v38))
      {
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(__dst, v37, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(__dst, v37, v38);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v38);
      }
      uint64_t v40 = *(int *)(v11 + 144);
      uint64_t v41 = (char *)v9 + v40;
      uint64_t v42 = (char *)v10 + v40;
      if (__swift_getEnumTagSinglePayload((uint64_t)v10 + v40, 1, v38))
      {
        uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(v41, v42, v38);
        __swift_storeEnumTagSinglePayload((uint64_t)v41, 0, 1, v38);
      }
      uint64_t v4 = v488;
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
      uint64_t v3 = v486;
    }
    uint64_t v44 = v6[6];
    uint64_t v45 = (void *)((char *)v4 + v44);
    uint64_t v46 = (void *)((char *)v3 + v44);
    uint64_t v47 = type metadata accessor for TicketedTransportation(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v46, 1, v47))
    {
      uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
      memcpy(v45, v46, *(void *)(*(void *)(v48 - 8) + 64));
    }
    else
    {
      uint64_t v49 = v46[1];
      *uint64_t v45 = *v46;
      v45[1] = v49;
      uint64_t v50 = v46[3];
      v45[2] = v46[2];
      v45[3] = v50;
      uint64_t v51 = v46[5];
      v45[4] = v46[4];
      v45[5] = v51;
      uint64_t v52 = v46[7];
      v45[6] = v46[6];
      v45[7] = v52;
      uint64_t v53 = v46[9];
      v45[8] = v46[8];
      v45[9] = v53;
      uint64_t v54 = v46[11];
      v45[10] = v46[10];
      v45[11] = v54;
      uint64_t v55 = v46[13];
      v45[12] = v46[12];
      v45[13] = v55;
      uint64_t v56 = v46[15];
      v45[14] = v46[14];
      v45[15] = v56;
      *((unsigned char *)v45 + 128) = *((unsigned char *)v46 + 128);
      *(_WORD *)((char *)v45 + 129) = *(_WORD *)((char *)v46 + 129);
      uint64_t v57 = v46[18];
      v45[17] = v46[17];
      v45[18] = v57;
      uint64_t v58 = v46[20];
      v45[19] = v46[19];
      v45[20] = v58;
      uint64_t v59 = v46[22];
      v45[21] = v46[21];
      v45[22] = v59;
      uint64_t v60 = v46[24];
      v45[23] = v46[23];
      v45[24] = v60;
      uint64_t v469 = v46[26];
      v45[25] = v46[25];
      v45[26] = v469;
      uint64_t v462 = v46[28];
      v45[27] = v46[27];
      v45[28] = v462;
      uint64_t v455 = v46[30];
      v45[29] = v46[29];
      v45[30] = v455;
      uint64_t v61 = v46[32];
      v45[31] = v46[31];
      v45[32] = v61;
      uint64_t v62 = v46[34];
      v45[33] = v46[33];
      v45[34] = v62;
      uint64_t v63 = v46[36];
      uint64_t v64 = v46[35];
      *((unsigned char *)v45 + 296) = *((unsigned char *)v46 + 296);
      v45[35] = v64;
      v45[36] = v63;
      uint64_t v65 = *(int *)(v47 + 112);
      uint64_t v436 = (char *)v45 + v65;
      uint64_t v66 = (char *)v46 + v65;
      uint64_t v67 = type metadata accessor for Date();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v66, 1, v67))
      {
        uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v436, v66, *(void *)(*(void *)(v68 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16))(v436, v66, v67);
        __swift_storeEnumTagSinglePayload((uint64_t)v436, 0, 1, v67);
      }
      uint64_t v69 = *(int *)(v47 + 116);
      uint64_t v70 = (char *)v45 + v69;
      uint64_t v71 = (char *)v46 + v69;
      if (__swift_getEnumTagSinglePayload((uint64_t)v46 + v69, 1, v67))
      {
        uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v70, v71, *(void *)(*(void *)(v72 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16))(v70, v71, v67);
        __swift_storeEnumTagSinglePayload((uint64_t)v70, 0, 1, v67);
      }
      uint64_t v4 = v488;
      __swift_storeEnumTagSinglePayload((uint64_t)v45, 0, 1, v47);
      uint64_t v3 = v486;
    }
    uint64_t v73 = v6[7];
    uint64_t v74 = (void *)((char *)v4 + v73);
    id v75 = (void *)((char *)v3 + v73);
    uint64_t v76 = (int *)type metadata accessor for TicketedShow(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v75, 1, (uint64_t)v76))
    {
      uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
      memcpy(v74, v75, *(void *)(*(void *)(v77 - 8) + 64));
    }
    else
    {
      uint64_t v78 = v75[1];
      *uint64_t v74 = *v75;
      v74[1] = v78;
      uint64_t v79 = v75[3];
      uint64_t v74[2] = v75[2];
      v74[3] = v79;
      uint64_t v80 = v75[5];
      v74[4] = v75[4];
      v74[5] = v80;
      uint64_t v81 = v75[7];
      v74[6] = v75[6];
      v74[7] = v81;
      uint64_t v82 = v75[9];
      v74[8] = v75[8];
      v74[9] = v82;
      uint64_t v83 = v75[11];
      v74[10] = v75[10];
      v74[11] = v83;
      uint64_t v84 = v75[13];
      v74[12] = v75[12];
      v74[13] = v84;
      uint64_t v85 = v75[15];
      v74[14] = v75[14];
      v74[15] = v85;
      *((unsigned char *)v74 + 128) = *((unsigned char *)v75 + 128);
      *(_WORD *)((char *)v74 + 129) = *(_WORD *)((char *)v75 + 129);
      uint64_t v86 = v75[18];
      v74[17] = v75[17];
      v74[18] = v86;
      uint64_t v87 = v75[20];
      v74[19] = v75[19];
      v74[20] = v87;
      uint64_t v88 = v75[22];
      v74[21] = v75[21];
      v74[22] = v88;
      uint64_t v89 = v75[24];
      v74[23] = v75[23];
      unsigned char v74[24] = v89;
      uint64_t v90 = v75[26];
      v74[25] = v75[25];
      v74[26] = v90;
      uint64_t v91 = v75[28];
      v74[27] = v75[27];
      v74[28] = v91;
      uint64_t v477 = v75[30];
      v74[29] = v75[29];
      v74[30] = v477;
      uint64_t v470 = v75[32];
      v74[31] = v75[31];
      v74[32] = v470;
      uint64_t v92 = v75[34];
      v74[33] = v75[33];
      v74[34] = v92;
      uint64_t v93 = v75[36];
      uint64_t v456 = v75[35];
      *((unsigned char *)v74 + 296) = *((unsigned char *)v75 + 296);
      v74[35] = v456;
      v74[36] = v93;
      uint64_t v94 = v75[39];
      v74[38] = v75[38];
      v74[39] = v94;
      uint64_t v95 = v76[29];
      uint64_t v435 = (char *)v74 + v95;
      uint64_t v96 = (char *)v75 + v95;
      uint64_t v97 = type metadata accessor for URL();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v96, 1, v97))
      {
        uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v435, v96, *(void *)(*(void *)(v98 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v97 - 8) + 16))(v435, v96, v97);
        __swift_storeEnumTagSinglePayload((uint64_t)v435, 0, 1, v97);
      }
      uint64_t v99 = v76[30];
      id v100 = (void *)((char *)v74 + v99);
      uint64_t v101 = (void *)((char *)v75 + v99);
      uint64_t v102 = v101[1];
      *id v100 = *v101;
      v100[1] = v102;
      uint64_t v103 = v76[31];
      uint64_t v104 = (char *)v74 + v103;
      uint64_t v105 = (char *)v75 + v103;
      uint64_t v106 = type metadata accessor for Date();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v105, 1, v106))
      {
        uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v104, v105, *(void *)(*(void *)(v107 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v106 - 8) + 16))(v104, v105, v106);
        __swift_storeEnumTagSinglePayload((uint64_t)v104, 0, 1, v106);
      }
      uint64_t v4 = v488;
      uint64_t v108 = v76[32];
      uint64_t v109 = (char *)v74 + v108;
      id v110 = (char *)v75 + v108;
      if (__swift_getEnumTagSinglePayload((uint64_t)v75 + v108, 1, v106))
      {
        uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v109, v110, *(void *)(*(void *)(v111 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v106 - 8) + 16))(v109, v110, v106);
        __swift_storeEnumTagSinglePayload((uint64_t)v109, 0, 1, v106);
      }
      __swift_storeEnumTagSinglePayload((uint64_t)v74, 0, 1, (uint64_t)v76);
      uint64_t v6 = v484;
      uint64_t v3 = v486;
    }
    uint64_t v112 = v6[8];
    uint64_t v113 = (void *)((char *)v4 + v112);
    uint64_t v114 = (void *)((char *)v3 + v112);
    uint64_t v115 = type metadata accessor for Appointment(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v114, 1, v115))
    {
      uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
      memcpy(v113, v114, *(void *)(*(void *)(v116 - 8) + 64));
    }
    else
    {
      uint64_t v117 = v114[1];
      *uint64_t v113 = *v114;
      v113[1] = v117;
      uint64_t v118 = v114[3];
      v113[2] = v114[2];
      v113[3] = v118;
      uint64_t v119 = v114[5];
      v113[4] = v114[4];
      v113[5] = v119;
      uint64_t v120 = v114[7];
      v113[6] = v114[6];
      v113[7] = v120;
      uint64_t v121 = v114[9];
      v113[8] = v114[8];
      v113[9] = v121;
      uint64_t v122 = v114[11];
      v113[10] = v114[10];
      v113[11] = v122;
      uint64_t v123 = v114[13];
      v113[12] = v114[12];
      v113[13] = v123;
      uint64_t v124 = v114[15];
      v113[14] = v114[14];
      v113[15] = v124;
      *((unsigned char *)v113 + 128) = *((unsigned char *)v114 + 128);
      *(_WORD *)((char *)v113 + 129) = *(_WORD *)((char *)v114 + 129);
      uint64_t v125 = v114[18];
      v113[17] = v114[17];
      v113[18] = v125;
      uint64_t v126 = v114[20];
      v113[19] = v114[19];
      v113[20] = v126;
      uint64_t v127 = v114[22];
      v113[21] = v114[21];
      v113[22] = v127;
      uint64_t v128 = v114[24];
      v113[23] = v114[23];
      v113[24] = v128;
      uint64_t v129 = v114[26];
      v113[25] = v114[25];
      v113[26] = v129;
      uint64_t v130 = v114[28];
      v113[27] = v114[27];
      v113[28] = v130;
      uint64_t v131 = v114[30];
      v113[29] = v114[29];
      v113[30] = v131;
      uint64_t v132 = v114[32];
      v113[31] = v114[31];
      v113[32] = v132;
      uint64_t v134 = v114[33];
      uint64_t v133 = v114[34];
      *((unsigned char *)v113 + 280) = *((unsigned char *)v114 + 280);
      v113[33] = v134;
      v113[34] = v133;
      uint64_t v135 = v114[37];
      v113[36] = v114[36];
      v113[37] = v135;
      uint64_t v136 = *(int *)(v115 + 108);
      uint64_t v437 = (char *)v113 + v136;
      uint64_t v137 = (char *)v114 + v136;
      uint64_t v138 = type metadata accessor for Date();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v137, 1, v138))
      {
        uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v437, v137, *(void *)(*(void *)(v139 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v138 - 8) + 16))(v437, v137, v138);
        __swift_storeEnumTagSinglePayload((uint64_t)v437, 0, 1, v138);
      }
      uint64_t v140 = *(int *)(v115 + 112);
      uint64_t v141 = (char *)v113 + v140;
      uint64_t v142 = (char *)v114 + v140;
      uint64_t v6 = v484;
      if (__swift_getEnumTagSinglePayload((uint64_t)v114 + v140, 1, v138))
      {
        uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v141, v142, *(void *)(*(void *)(v143 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v138 - 8) + 16))(v141, v142, v138);
        __swift_storeEnumTagSinglePayload((uint64_t)v141, 0, 1, v138);
      }
      uint64_t v4 = v488;
      __swift_storeEnumTagSinglePayload((uint64_t)v113, 0, 1, v115);
      uint64_t v3 = v486;
    }
    uint64_t v144 = v6[9];
    uint64_t v145 = (void *)((char *)v4 + v144);
    uint64_t v146 = (void *)((char *)v3 + v144);
    uint64_t v147 = (int *)type metadata accessor for Party(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v146, 1, (uint64_t)v147))
    {
      uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
      memcpy(v145, v146, *(void *)(*(void *)(v148 - 8) + 64));
    }
    else
    {
      uint64_t v149 = v146[1];
      void *v145 = *v146;
      v145[1] = v149;
      uint64_t v150 = v146[3];
      v145[2] = v146[2];
      v145[3] = v150;
      uint64_t v151 = v146[5];
      v145[4] = v146[4];
      v145[5] = v151;
      uint64_t v152 = v146[7];
      v145[6] = v146[6];
      v145[7] = v152;
      uint64_t v153 = v146[9];
      v145[8] = v146[8];
      v145[9] = v153;
      uint64_t v154 = v146[11];
      v145[10] = v146[10];
      v145[11] = v154;
      uint64_t v155 = v146[13];
      v145[12] = v146[12];
      v145[13] = v155;
      uint64_t v156 = v146[15];
      v145[14] = v146[14];
      v145[15] = v156;
      *((unsigned char *)v145 + 128) = *((unsigned char *)v146 + 128);
      *(_WORD *)((char *)v145 + 129) = *(_WORD *)((char *)v146 + 129);
      uint64_t v157 = v146[18];
      v145[17] = v146[17];
      v145[18] = v157;
      uint64_t v158 = v146[20];
      v145[19] = v146[19];
      v145[20] = v158;
      uint64_t v159 = v146[22];
      v145[21] = v146[21];
      v145[22] = v159;
      uint64_t v160 = v146[24];
      v145[23] = v146[23];
      v145[24] = v160;
      uint64_t v161 = v146[26];
      v145[25] = v146[25];
      v145[26] = v161;
      uint64_t v162 = v146[28];
      v145[27] = v146[27];
      v145[28] = v162;
      uint64_t v163 = v146[30];
      v145[29] = v146[29];
      v145[30] = v163;
      v145[31] = v146[31];
      uint64_t v164 = v147[24];
      uint64_t v439 = (char *)v145 + v164;
      uint64_t v441 = (char *)v146 + v164;
      uint64_t v165 = type metadata accessor for Date();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v441, 1, v165))
      {
        uint64_t v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v439, v441, *(void *)(*(void *)(v166 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v165 - 8) + 16))(v439, v441, v165);
        __swift_storeEnumTagSinglePayload((uint64_t)v439, 0, 1, v165);
      }
      uint64_t v167 = v147[25];
      uint64_t v168 = (char *)v145 + v167;
      uint64_t v169 = (char *)v146 + v167;
      if (__swift_getEnumTagSinglePayload((uint64_t)v146 + v167, 1, v165))
      {
        uint64_t v170 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v168, v169, *(void *)(*(void *)(v170 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v165 - 8) + 16))(v168, v169, v165);
        __swift_storeEnumTagSinglePayload((uint64_t)v168, 0, 1, v165);
      }
      uint64_t v4 = v488;
      uint64_t v171 = v147[26];
      uint64_t v172 = (char *)v145 + v171;
      uint64_t v173 = (char *)v146 + v171;
      uint64_t v174 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v173, 1, v174))
      {
        uint64_t v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v172, v173, *(void *)(*(void *)(v175 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v174 - 8) + 16))(v172, v173, v174);
        __swift_storeEnumTagSinglePayload((uint64_t)v172, 0, 1, v174);
      }
      uint64_t v6 = v484;
      __swift_storeEnumTagSinglePayload((uint64_t)v145, 0, 1, (uint64_t)v147);
      uint64_t v3 = v486;
    }
    uint64_t v176 = v6[10];
    uint64_t v177 = (void *)((char *)v4 + v176);
    uint64_t v178 = (void *)((char *)v3 + v176);
    uint64_t v179 = (int *)type metadata accessor for Trip(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v178, 1, (uint64_t)v179))
    {
      uint64_t v180 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
      memcpy(v177, v178, *(void *)(*(void *)(v180 - 8) + 64));
    }
    else
    {
      uint64_t v181 = v178[1];
      *uint64_t v177 = *v178;
      v177[1] = v181;
      uint64_t v182 = v178[3];
      v177[2] = v178[2];
      v177[3] = v182;
      uint64_t v457 = v178[5];
      v177[4] = v178[4];
      v177[5] = v457;
      uint64_t v183 = v178[7];
      v177[6] = v178[6];
      v177[7] = v183;
      uint64_t v184 = v178[9];
      v177[8] = v178[8];
      v177[9] = v184;
      uint64_t v185 = v178[11];
      v177[10] = v178[10];
      v177[11] = v185;
      uint64_t v186 = v178[13];
      v177[12] = v178[12];
      v177[13] = v186;
      uint64_t v187 = v178[15];
      v177[14] = v178[14];
      v177[15] = v187;
      *((unsigned char *)v177 + 128) = *((unsigned char *)v178 + 128);
      *(_WORD *)((char *)v177 + 129) = *(_WORD *)((char *)v178 + 129);
      uint64_t v188 = v178[18];
      v177[17] = v178[17];
      v177[18] = v188;
      uint64_t v189 = v178[20];
      v177[19] = v178[19];
      v177[20] = v189;
      uint64_t v190 = v178[22];
      v177[21] = v178[21];
      v177[22] = v190;
      uint64_t v191 = v178[24];
      v177[23] = v178[23];
      v177[24] = v191;
      uint64_t v192 = v178[26];
      v177[25] = v178[25];
      v177[26] = v192;
      v177[27] = v178[27];
      uint64_t v193 = v179[22];
      uint64_t v443 = (char *)v177 + v193;
      uint64_t v447 = (char *)v178 + v193;
      uint64_t v445 = type metadata accessor for Date();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v447, 1, v445))
      {
        uint64_t v194 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v443, v447, *(void *)(*(void *)(v194 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v445 - 8) + 16))(v443, v447, v445);
        __swift_storeEnumTagSinglePayload((uint64_t)v443, 0, 1, v445);
      }
      uint64_t v195 = v179[23];
      uint64_t v196 = (char *)v177 + v195;
      uint64_t v197 = (char *)v178 + v195;
      uint64_t v4 = v488;
      if (__swift_getEnumTagSinglePayload((uint64_t)v178 + v195, 1, v445))
      {
        uint64_t v198 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v196, v197, *(void *)(*(void *)(v198 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v445 - 8) + 16))(v196, v197, v445);
        __swift_storeEnumTagSinglePayload((uint64_t)v196, 0, 1, v445);
      }
      uint64_t v199 = v179[24];
      uint64_t v200 = (char *)v177 + v199;
      uint64_t v201 = (char *)v178 + v199;
      *(void *)uint64_t v200 = *(void *)v201;
      v200[8] = v201[8];
      uint64_t v202 = v179[25];
      uint64_t v203 = (char *)v177 + v202;
      uint64_t v204 = (char *)v178 + v202;
      uint64_t v205 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v204, 1, v205))
      {
        uint64_t v206 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v203, v204, *(void *)(*(void *)(v206 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v205 - 8) + 16))(v203, v204, v205);
        __swift_storeEnumTagSinglePayload((uint64_t)v203, 0, 1, v205);
      }
      uint64_t v6 = v484;
      __swift_storeEnumTagSinglePayload((uint64_t)v177, 0, 1, (uint64_t)v179);
      uint64_t v3 = v486;
    }
    uint64_t v207 = v6[11];
    uint64_t v208 = (void *)((char *)v4 + v207);
    uint64_t v209 = (void *)((char *)v3 + v207);
    uint64_t v210 = (int *)type metadata accessor for FlightReservation(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v209, 1, (uint64_t)v210))
    {
      uint64_t v211 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
      memcpy(v208, v209, *(void *)(*(void *)(v211 - 8) + 64));
    }
    else
    {
      uint64_t v212 = v209[1];
      *uint64_t v208 = *v209;
      v208[1] = v212;
      uint64_t v213 = v209[3];
      v208[2] = v209[2];
      v208[3] = v213;
      uint64_t v214 = v209[5];
      v208[4] = v209[4];
      v208[5] = v214;
      uint64_t v215 = v209[7];
      v208[6] = v209[6];
      v208[7] = v215;
      uint64_t v216 = v209[9];
      v208[8] = v209[8];
      v208[9] = v216;
      uint64_t v478 = v209[11];
      v208[10] = v209[10];
      v208[11] = v478;
      *((unsigned char *)v208 + 96) = *((unsigned char *)v209 + 96);
      uint64_t v217 = v209[14];
      v208[13] = v209[13];
      v208[14] = v217;
      uint64_t v218 = v210[13];
      char v458 = (char *)v208 + v218;
      char v463 = (char *)v209 + v218;
      uint64_t v471 = type metadata accessor for URL();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v463, 1, v471))
      {
        uint64_t v219 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v458, v463, *(void *)(*(void *)(v219 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v471 - 8) + 16))(v458, v463, v471);
        __swift_storeEnumTagSinglePayload((uint64_t)v458, 0, 1, v471);
      }
      uint64_t v220 = v210[14];
      uint64_t v221 = (char *)v208 + v220;
      uint64_t v222 = (char *)v209 + v220;
      if (__swift_getEnumTagSinglePayload((uint64_t)v209 + v220, 1, v471))
      {
        uint64_t v223 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v221, v222, *(void *)(*(void *)(v223 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v471 - 8) + 16))(v221, v222, v471);
        __swift_storeEnumTagSinglePayload((uint64_t)v221, 0, 1, v471);
      }
      uint64_t v224 = v210[15];
      uint64_t v225 = (void *)((char *)v208 + v224);
      uint64_t v226 = (void *)((char *)v209 + v224);
      uint64_t v227 = v226[1];
      *uint64_t v225 = *v226;
      v225[1] = v227;
      uint64_t v228 = v210[16];
      uint64_t v229 = (void *)((char *)v208 + v228);
      uint64_t v230 = (void *)((char *)v209 + v228);
      uint64_t v231 = v230[1];
      *uint64_t v229 = *v230;
      v229[1] = v231;
      uint64_t v232 = v210[17];
      uint64_t v233 = (void *)((char *)v208 + v232);
      uint64_t v234 = (void *)((char *)v209 + v232);
      uint64_t v235 = v234[1];
      *uint64_t v233 = *v234;
      v233[1] = v235;
      uint64_t v236 = v210[18];
      uint64_t v479 = (char *)v208 + v236;
      uint64_t v237 = (char *)v209 + v236;
      uint64_t v238 = type metadata accessor for DateComponents();
      uint64_t v239 = *(void (**)(char *, char *, uint64_t))(*(void *)(v238 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v239(v479, v237, v238);
      v239((char *)v208 + v210[19], (char *)v209 + v210[19], v238);
      uint64_t v240 = v210[20];
      uint64_t v241 = (void *)((char *)v208 + v240);
      uint64_t v242 = (void *)((char *)v209 + v240);
      uint64_t v480 = v242[1];
      *uint64_t v241 = *v242;
      v241[1] = v480;
      uint64_t v243 = v210[21];
      uint64_t v244 = (void *)((char *)v208 + v243);
      uint64_t v245 = (void *)((char *)v209 + v243);
      uint64_t v472 = v245[1];
      *uint64_t v244 = *v245;
      v244[1] = v472;
      uint64_t v246 = v210[22];
      uint64_t v247 = (void *)((char *)v208 + v246);
      uint64_t v248 = (void *)((char *)v209 + v246);
      uint64_t v464 = v248[1];
      *uint64_t v247 = *v248;
      v247[1] = v464;
      uint64_t v249 = v210[23];
      uint64_t v250 = (void *)((char *)v208 + v249);
      uint64_t v251 = (void *)((char *)v209 + v249);
      uint64_t v459 = v251[1];
      *uint64_t v250 = *v251;
      v250[1] = v459;
      uint64_t v252 = v210[24];
      uint64_t v253 = (void *)((char *)v208 + v252);
      uint64_t v254 = (void *)((char *)v209 + v252);
      uint64_t v452 = (void *)v254[1];
      *uint64_t v253 = *v254;
      v253[1] = v452;
      uint64_t v255 = v210[25];
      uint64_t v256 = (void *)((char *)v208 + v255);
      uint64_t v257 = (void *)((char *)v209 + v255);
      uint64_t v451 = v257[1];
      *uint64_t v256 = *v257;
      v256[1] = v451;
      uint64_t v258 = v210[26];
      uint64_t v259 = (void *)((char *)v208 + v258);
      uint64_t v260 = (void *)((char *)v209 + v258);
      uint64_t v450 = v260[1];
      *uint64_t v259 = *v260;
      v259[1] = v450;
      uint64_t v261 = v210[27];
      uint64_t v262 = (void *)((char *)v208 + v261);
      uint64_t v263 = (void *)((char *)v209 + v261);
      uint64_t v449 = v263[1];
      *uint64_t v262 = *v263;
      v262[1] = v449;
      uint64_t v264 = v210[28];
      uint64_t v265 = (void *)((char *)v208 + v264);
      uint64_t v266 = (void *)((char *)v209 + v264);
      uint64_t v448 = v266[1];
      *uint64_t v265 = *v266;
      v265[1] = v448;
      uint64_t v267 = v210[29];
      uint64_t v268 = (void *)((char *)v208 + v267);
      uint64_t v269 = (void *)((char *)v209 + v267);
      uint64_t v446 = v269[1];
      *uint64_t v268 = *v269;
      v268[1] = v446;
      uint64_t v270 = v210[30];
      uint64_t v271 = (void *)((char *)v208 + v270);
      uint64_t v272 = (void *)((char *)v209 + v270);
      uint64_t v444 = (void *)v272[1];
      *uint64_t v271 = *v272;
      v271[1] = v444;
      uint64_t v273 = v210[31];
      uint64_t v274 = (void *)((char *)v208 + v273);
      uint64_t v275 = (void *)((char *)v209 + v273);
      uint64_t v276 = v275[1];
      *uint64_t v274 = *v275;
      v274[1] = v276;
      uint64_t v277 = v210[32];
      uint64_t v278 = (void *)((char *)v208 + v277);
      uint64_t v279 = (void *)((char *)v209 + v277);
      uint64_t v280 = v279[1];
      *uint64_t v278 = *v279;
      v278[1] = v280;
      *(void *)((char *)v208 + v210[33]) = *(void *)((char *)v209 + v210[33]);
      *(void *)((char *)v208 + v210[34]) = *(void *)((char *)v209 + v210[34]);
      uint64_t v281 = v210[35];
      uint64_t v282 = (void *)((char *)v208 + v281);
      uint64_t v283 = (void *)((char *)v209 + v281);
      uint64_t v284 = v283[1];
      *uint64_t v282 = *v283;
      v282[1] = v284;
      uint64_t v285 = v210[36];
      uint64_t v286 = (void *)((char *)v208 + v285);
      uint64_t v287 = (void *)((char *)v209 + v285);
      uint64_t v288 = v287[1];
      *uint64_t v286 = *v287;
      v286[1] = v288;
      uint64_t v289 = v210[37];
      uint64_t v290 = (void *)((char *)v208 + v289);
      uint64_t v291 = (void *)((char *)v209 + v289);
      uint64_t v292 = v291[1];
      *uint64_t v290 = *v291;
      v290[1] = v292;
      uint64_t v293 = v210[38];
      uint64_t v438 = (char *)v208 + v293;
      uint64_t v440 = (char *)v209 + v293;
      uint64_t v442 = type metadata accessor for Date();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v440, 1, v442))
      {
        uint64_t v294 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v438, v440, *(void *)(*(void *)(v294 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v442 - 8) + 16))(v438, v440, v442);
        __swift_storeEnumTagSinglePayload((uint64_t)v438, 0, 1, v442);
      }
      uint64_t v295 = v210[39];
      uint64_t v296 = (void *)((char *)v208 + v295);
      uint64_t v297 = (void *)((char *)v209 + v295);
      uint64_t v298 = v297[1];
      *uint64_t v296 = *v297;
      v296[1] = v298;
      uint64_t v299 = v210[40];
      uint64_t v300 = (void *)((char *)v208 + v299);
      uint64_t v301 = (void *)((char *)v209 + v299);
      uint64_t v302 = v301[1];
      *uint64_t v300 = *v301;
      v300[1] = v302;
      uint64_t v303 = v210[41];
      uint64_t v304 = (char *)v208 + v303;
      uint64_t v305 = (char *)v209 + v303;
      v304[8] = v305[8];
      *(void *)uint64_t v304 = *(void *)v305;
      uint64_t v306 = v210[42];
      uint64_t v307 = (void *)((char *)v208 + v306);
      uint64_t v308 = (void *)((char *)v209 + v306);
      uint64_t v309 = v308[1];
      *uint64_t v307 = *v308;
      v307[1] = v309;
      uint64_t v310 = v210[43];
      uint64_t v311 = (char *)v208 + v310;
      uint64_t v312 = (char *)v209 + v310;
      *(_OWORD *)uint64_t v311 = *(_OWORD *)v312;
      *(void *)(v311 + 13) = *(void *)(v312 + 13);
      uint64_t v313 = v210[44];
      uint64_t v314 = (void *)((char *)v208 + v313);
      uint64_t v315 = (void *)((char *)v209 + v313);
      uint64_t v316 = v315[1];
      *uint64_t v314 = *v315;
      v314[1] = v316;
      uint64_t v317 = v210[45];
      uint64_t v318 = (void *)((char *)v208 + v317);
      uint64_t v319 = (void *)((char *)v209 + v317);
      uint64_t v320 = v319[1];
      *uint64_t v318 = *v319;
      v318[1] = v320;
      uint64_t v321 = v210[46];
      uint64_t v322 = (void *)((char *)v208 + v321);
      uint64_t v323 = (void *)((char *)v209 + v321);
      uint64_t v324 = v323[1];
      *uint64_t v322 = *v323;
      v322[1] = v324;
      uint64_t v325 = v210[47];
      uint64_t v326 = (void *)((char *)v208 + v325);
      uint64_t v327 = (void *)((char *)v209 + v325);
      uint64_t v328 = v327[1];
      *uint64_t v326 = *v327;
      v326[1] = v328;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __swift_storeEnumTagSinglePayload((uint64_t)v208, 0, 1, (uint64_t)v210);
      uint64_t v3 = v486;
      uint64_t v4 = v488;
      uint64_t v6 = v484;
    }
    uint64_t v329 = v6[12];
    uint64_t v330 = (void *)((char *)v4 + v329);
    uint64_t v331 = (void *)((char *)v3 + v329);
    uint64_t v332 = (int *)type metadata accessor for HotelReservation(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v331, 1, (uint64_t)v332))
    {
      uint64_t v333 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
      memcpy(v330, v331, *(void *)(*(void *)(v333 - 8) + 64));
    }
    else
    {
      uint64_t v334 = v331[1];
      *uint64_t v330 = *v331;
      v330[1] = v334;
      uint64_t v335 = v331[3];
      v330[2] = v331[2];
      v330[3] = v335;
      uint64_t v336 = v331[5];
      v330[4] = v331[4];
      v330[5] = v336;
      uint64_t v481 = v331[7];
      v330[6] = v331[6];
      v330[7] = v481;
      uint64_t v337 = v331[9];
      v330[8] = v331[8];
      v330[9] = v337;
      uint64_t v473 = v331[11];
      v330[10] = v331[10];
      v330[11] = v473;
      *((unsigned char *)v330 + 96) = *((unsigned char *)v331 + 96);
      uint64_t v338 = v331[14];
      v330[13] = v331[13];
      v330[14] = v338;
      uint64_t v339 = v331[16];
      v330[15] = v331[15];
      v330[16] = v339;
      uint64_t v340 = v332[14];
      uint64_t v453 = (char *)v330 + v340;
      char v460 = (char *)v331 + v340;
      uint64_t v465 = type metadata accessor for DateComponents();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v460, 1, v465))
      {
        uint64_t v341 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
        memcpy(v453, v460, *(void *)(*(void *)(v341 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v465 - 8) + 16))(v453, v460, v465);
        __swift_storeEnumTagSinglePayload((uint64_t)v453, 0, 1, v465);
      }
      uint64_t v342 = v332[15];
      uint64_t v343 = (char *)v330 + v342;
      uint64_t v344 = (char *)v331 + v342;
      if (__swift_getEnumTagSinglePayload((uint64_t)v331 + v342, 1, v465))
      {
        uint64_t v345 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
        memcpy(v343, v344, *(void *)(*(void *)(v345 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v465 - 8) + 16))(v343, v344, v465);
        __swift_storeEnumTagSinglePayload((uint64_t)v343, 0, 1, v465);
      }
      uint64_t v346 = v332[16];
      uint64_t v347 = (void *)((char *)v330 + v346);
      uint64_t v348 = (void *)((char *)v331 + v346);
      uint64_t v349 = v348[1];
      *uint64_t v347 = *v348;
      v347[1] = v349;
      uint64_t v350 = v332[17];
      uint64_t v351 = (void *)((char *)v330 + v350);
      uint64_t v352 = (void *)((char *)v331 + v350);
      uint64_t v482 = v352[1];
      *uint64_t v351 = *v352;
      v351[1] = v482;
      uint64_t v353 = v332[18];
      uint64_t v354 = (void *)((char *)v330 + v353);
      uint64_t v355 = (void *)((char *)v331 + v353);
      uint64_t v474 = v355[1];
      *uint64_t v354 = *v355;
      v354[1] = v474;
      uint64_t v356 = v332[19];
      uint64_t v357 = (void *)((char *)v330 + v356);
      uint64_t v358 = (void *)((char *)v331 + v356);
      uint64_t v466 = v358[1];
      *uint64_t v357 = *v358;
      v357[1] = v466;
      uint64_t v359 = v332[20];
      uint64_t v360 = (void *)((char *)v330 + v359);
      uint64_t v361 = (void *)((char *)v331 + v359);
      uint64_t v362 = v361[1];
      *uint64_t v360 = *v361;
      v360[1] = v362;
      *(void *)((char *)v330 + v332[21]) = *(void *)((char *)v331 + v332[21]);
      *(void *)((char *)v330 + v332[22]) = *(void *)((char *)v331 + v332[22]);
      uint64_t v363 = v332[23];
      uint64_t v364 = (char *)v330 + v363;
      uint64_t v365 = (char *)v331 + v363;
      *(void *)uint64_t v364 = *(void *)v365;
      v364[8] = v365[8];
      uint64_t v366 = v332[24];
      uint64_t v367 = (char *)v330 + v366;
      uint64_t v368 = (char *)v331 + v366;
      *(void *)uint64_t v367 = *(void *)v368;
      v367[8] = v368[8];
      uint64_t v369 = v332[25];
      uint64_t v370 = (void *)((char *)v330 + v369);
      uint64_t v371 = (void *)((char *)v331 + v369);
      uint64_t v372 = v371[1];
      *uint64_t v370 = *v371;
      v370[1] = v372;
      uint64_t v373 = v332[26];
      uint64_t v374 = (void *)((char *)v330 + v373);
      uint64_t v375 = (void *)((char *)v331 + v373);
      uint64_t v376 = v375[1];
      *uint64_t v374 = *v375;
      v374[1] = v376;
      uint64_t v377 = v332[27];
      uint64_t v378 = (void *)((char *)v330 + v377);
      uint64_t v379 = (void *)((char *)v331 + v377);
      uint64_t v380 = v379[1];
      *uint64_t v378 = *v379;
      v378[1] = v380;
      uint64_t v381 = v332[28];
      uint64_t v382 = (void *)((char *)v330 + v381);
      uint64_t v383 = (void *)((char *)v331 + v381);
      uint64_t v384 = v383[1];
      *uint64_t v382 = *v383;
      v382[1] = v384;
      uint64_t v385 = v332[29];
      uint64_t v386 = (char *)v330 + v385;
      uint64_t v387 = (char *)v331 + v385;
      *(void *)uint64_t v386 = *(void *)v387;
      v386[8] = v387[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __swift_storeEnumTagSinglePayload((uint64_t)v330, 0, 1, (uint64_t)v332);
      uint64_t v3 = v486;
      uint64_t v4 = v488;
      uint64_t v6 = v484;
    }
    uint64_t v388 = v6[13];
    uint64_t v389 = (void *)((char *)v4 + v388);
    uint64_t v390 = (void *)((char *)v3 + v388);
    uint64_t v391 = (int *)type metadata accessor for RestaurantReservation(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v390, 1, (uint64_t)v391))
    {
      uint64_t v392 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
      memcpy(v389, v390, *(void *)(*(void *)(v392 - 8) + 64));
    }
    else
    {
      uint64_t v393 = v390[1];
      *uint64_t v389 = *v390;
      v389[1] = v393;
      uint64_t v394 = v390[3];
      v389[2] = v390[2];
      v389[3] = v394;
      uint64_t v395 = v390[5];
      v389[4] = v390[4];
      v389[5] = v395;
      uint64_t v487 = v390[7];
      v389[6] = v390[6];
      v389[7] = v487;
      uint64_t v485 = v390[9];
      v389[8] = v390[8];
      v389[9] = v485;
      uint64_t v396 = v390[11];
      v389[10] = v390[10];
      v389[11] = v396;
      *((unsigned char *)v389 + 96) = *((unsigned char *)v390 + 96);
      uint64_t v397 = v390[14];
      v389[13] = v390[13];
      v389[14] = v397;
      uint64_t v398 = v390[16];
      v389[15] = v390[15];
      v389[16] = v398;
      uint64_t v399 = v391[14];
      char v467 = (char *)v389 + v399;
      uint64_t v483 = (char *)v390 + v399;
      uint64_t v475 = type metadata accessor for DateComponents();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v483, 1, v475))
      {
        uint64_t v400 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
        memcpy(v467, v483, *(void *)(*(void *)(v400 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v475 - 8) + 16))(v467, v483, v475);
        __swift_storeEnumTagSinglePayload((uint64_t)v467, 0, 1, v475);
      }
      uint64_t v401 = v391[15];
      uint64_t v402 = (void *)((char *)v389 + v401);
      uint64_t v403 = (void *)((char *)v390 + v401);
      uint64_t v404 = v403[1];
      *uint64_t v402 = *v403;
      v402[1] = v404;
      uint64_t v405 = v391[16];
      uint64_t v406 = (void *)((char *)v389 + v405);
      uint64_t v407 = (void *)((char *)v390 + v405);
      uint64_t v408 = v407[1];
      *uint64_t v406 = *v407;
      v406[1] = v408;
      uint64_t v409 = v391[17];
      uint64_t v410 = (void *)((char *)v389 + v409);
      uint64_t v411 = (void *)((char *)v390 + v409);
      uint64_t v412 = v411[1];
      *uint64_t v410 = *v411;
      v410[1] = v412;
      uint64_t v413 = v391[18];
      uint64_t v414 = (void *)((char *)v389 + v413);
      uint64_t v415 = (void *)((char *)v390 + v413);
      uint64_t v416 = v415[1];
      *uint64_t v414 = *v415;
      v414[1] = v416;
      uint64_t v417 = v391[19];
      uint64_t v418 = (void *)((char *)v389 + v417);
      uint64_t v419 = (void *)((char *)v390 + v417);
      uint64_t v420 = v419[1];
      *uint64_t v418 = *v419;
      v418[1] = v420;
      *(void *)((char *)v389 + v391[20]) = *(void *)((char *)v390 + v391[20]);
      uint64_t v421 = v391[21];
      uint64_t v422 = (void *)((char *)v389 + v421);
      uint64_t v423 = (void *)((char *)v390 + v421);
      uint64_t v424 = v423[1];
      *uint64_t v422 = *v423;
      v422[1] = v424;
      uint64_t v425 = v391[22];
      uint64_t v426 = (void *)((char *)v389 + v425);
      uint64_t v427 = (void *)((char *)v390 + v425);
      uint64_t v428 = v427[1];
      *uint64_t v426 = *v427;
      v426[1] = v428;
      uint64_t v429 = v391[23];
      uint64_t v430 = (void *)((char *)v389 + v429);
      uint64_t v431 = (void *)((char *)v390 + v429);
      uint64_t v432 = v431[1];
      *uint64_t v430 = *v431;
      v430[1] = v432;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __swift_storeEnumTagSinglePayload((uint64_t)v389, 0, 1, (uint64_t)v391);
      return v488;
    }
  }
  return v4;
}

uint64_t destroy for PartialExtractedAttributes(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for RentalCarReservation(0);
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = v4 + *(int *)(v5 + 140);
    uint64_t v7 = type metadata accessor for Date();
    if (!__swift_getEnumTagSinglePayload(v6, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    }
    uint64_t v8 = v4 + *(int *)(v5 + 144);
    if (!__swift_getEnumTagSinglePayload(v8, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v8, v7);
    }
  }
  uint64_t v9 = a1 + a2[6];
  uint64_t v10 = type metadata accessor for TicketedTransportation(0);
  if (!__swift_getEnumTagSinglePayload(v9, 1, v10))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = v9 + *(int *)(v10 + 112);
    uint64_t v12 = type metadata accessor for Date();
    if (!__swift_getEnumTagSinglePayload(v11, 1, v12)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
    }
    uint64_t v13 = v9 + *(int *)(v10 + 116);
    if (!__swift_getEnumTagSinglePayload(v13, 1, v12)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v13, v12);
    }
  }
  uint64_t v14 = a1 + a2[7];
  uint64_t v15 = (int *)type metadata accessor for TicketedShow(0);
  if (!__swift_getEnumTagSinglePayload(v14, 1, (uint64_t)v15))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v16 = v14 + v15[29];
    uint64_t v17 = type metadata accessor for URL();
    if (!__swift_getEnumTagSinglePayload(v16, 1, v17)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
    }
    swift_bridgeObjectRelease();
    uint64_t v18 = v14 + v15[31];
    uint64_t v19 = type metadata accessor for Date();
    if (!__swift_getEnumTagSinglePayload(v18, 1, v19)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
    }
    uint64_t v20 = v14 + v15[32];
    if (!__swift_getEnumTagSinglePayload(v20, 1, v19)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v20, v19);
    }
  }
  uint64_t v21 = a1 + a2[8];
  uint64_t v22 = type metadata accessor for Appointment(0);
  if (!__swift_getEnumTagSinglePayload(v21, 1, v22))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v23 = v21 + *(int *)(v22 + 108);
    uint64_t v24 = type metadata accessor for Date();
    if (!__swift_getEnumTagSinglePayload(v23, 1, v24)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
    }
    uint64_t v25 = v21 + *(int *)(v22 + 112);
    if (!__swift_getEnumTagSinglePayload(v25, 1, v24)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v25, v24);
    }
  }
  uint64_t v26 = a1 + a2[9];
  uint64_t v27 = (int *)type metadata accessor for Party(0);
  if (!__swift_getEnumTagSinglePayload(v26, 1, (uint64_t)v27))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v28 = v26 + v27[24];
    uint64_t v29 = type metadata accessor for Date();
    if (!__swift_getEnumTagSinglePayload(v28, 1, v29)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v28, v29);
    }
    uint64_t v30 = v26 + v27[25];
    if (!__swift_getEnumTagSinglePayload(v30, 1, v29)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v30, v29);
    }
    uint64_t v31 = v26 + v27[26];
    uint64_t v32 = type metadata accessor for URL();
    if (!__swift_getEnumTagSinglePayload(v31, 1, v32)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v31, v32);
    }
  }
  uint64_t v33 = a1 + a2[10];
  uint64_t v34 = (int *)type metadata accessor for Trip(0);
  if (!__swift_getEnumTagSinglePayload(v33, 1, (uint64_t)v34))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v35 = v33 + v34[22];
    uint64_t v36 = type metadata accessor for Date();
    if (!__swift_getEnumTagSinglePayload(v35, 1, v36)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8))(v35, v36);
    }
    uint64_t v37 = v33 + v34[23];
    if (!__swift_getEnumTagSinglePayload(v37, 1, v36)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8))(v37, v36);
    }
    uint64_t v38 = v33 + v34[25];
    uint64_t v39 = type metadata accessor for URL();
    if (!__swift_getEnumTagSinglePayload(v38, 1, v39)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(v38, v39);
    }
  }
  uint64_t v40 = a1 + a2[11];
  uint64_t v41 = (int *)type metadata accessor for FlightReservation(0);
  if (!__swift_getEnumTagSinglePayload(v40, 1, (uint64_t)v41))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v42 = v40 + v41[13];
    uint64_t v43 = type metadata accessor for URL();
    if (!__swift_getEnumTagSinglePayload(v42, 1, v43)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8))(v42, v43);
    }
    uint64_t v44 = v40 + v41[14];
    if (!__swift_getEnumTagSinglePayload(v44, 1, v43)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8))(v44, v43);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v45 = v40 + v41[18];
    uint64_t v46 = type metadata accessor for DateComponents();
    uint64_t v47 = *(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8);
    v47(v45, v46);
    v47(v40 + v41[19], v46);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v48 = v40 + v41[38];
    uint64_t v49 = type metadata accessor for Date();
    if (!__swift_getEnumTagSinglePayload(v48, 1, v49)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v48, v49);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v50 = a1 + a2[12];
  uint64_t v51 = type metadata accessor for HotelReservation(0);
  if (!__swift_getEnumTagSinglePayload(v50, 1, v51))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v52 = v50 + *(int *)(v51 + 56);
    uint64_t v53 = type metadata accessor for DateComponents();
    if (!__swift_getEnumTagSinglePayload(v52, 1, v53)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v53 - 8) + 8))(v52, v53);
    }
    uint64_t v54 = v50 + *(int *)(v51 + 60);
    if (!__swift_getEnumTagSinglePayload(v54, 1, v53)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v53 - 8) + 8))(v54, v53);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v55 = a1 + a2[13];
  uint64_t v56 = type metadata accessor for RestaurantReservation(0);
  uint64_t result = __swift_getEnumTagSinglePayload(v55, 1, v56);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v58 = v55 + *(int *)(v56 + 56);
    uint64_t v59 = type metadata accessor for DateComponents();
    if (!__swift_getEnumTagSinglePayload(v58, 1, v59)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(v58, v59);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for PartialExtractedAttributes(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for RentalCarReservation(0);
  swift_bridgeObjectRetain();
  uint64_t v484 = v4;
  uint64_t v486 = v5;
  uint64_t v482 = v3;
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = v9[1];
    *uint64_t v8 = *v9;
    v8[1] = v12;
    uint64_t v13 = v9[3];
    v8[2] = v9[2];
    v8[3] = v13;
    uint64_t v14 = v9[5];
    v8[4] = v9[4];
    v8[5] = v14;
    uint64_t v15 = v9[7];
    v8[6] = v9[6];
    v8[7] = v15;
    uint64_t v16 = v9[9];
    v8[8] = v9[8];
    v8[9] = v16;
    uint64_t v17 = v9[11];
    v8[10] = v9[10];
    v8[11] = v17;
    uint64_t v18 = v9[13];
    v8[12] = v9[12];
    v8[13] = v18;
    uint64_t v19 = v9[15];
    v8[14] = v9[14];
    v8[15] = v19;
    *((unsigned char *)v8 + 128) = *((unsigned char *)v9 + 128);
    *(_WORD *)((char *)v8 + 129) = *(_WORD *)((char *)v9 + 129);
    uint64_t v20 = v9[18];
    v8[17] = v9[17];
    v8[18] = v20;
    uint64_t v21 = v9[20];
    v8[19] = v9[19];
    v8[20] = v21;
    uint64_t v22 = v9[22];
    v8[21] = v9[21];
    v8[22] = v22;
    uint64_t v23 = v9[24];
    v8[23] = v9[23];
    v8[24] = v23;
    uint64_t v24 = v9[26];
    v8[25] = v9[25];
    v8[26] = v24;
    uint64_t v25 = v9[28];
    v8[27] = v9[27];
    v8[28] = v25;
    uint64_t v26 = v9[30];
    v8[29] = v9[29];
    v8[30] = v26;
    uint64_t v463 = v9[32];
    v8[31] = v9[31];
    v8[32] = v463;
    uint64_t v455 = v9[34];
    v8[33] = v9[33];
    v8[34] = v455;
    uint64_t v449 = v9[36];
    v8[35] = v9[35];
    v8[36] = v449;
    uint64_t v27 = v9[38];
    v8[37] = v9[37];
    v8[38] = v27;
    uint64_t v28 = v9[40];
    v8[39] = v9[39];
    v8[40] = v28;
    uint64_t v29 = v9[42];
    v8[41] = v9[41];
    v8[42] = v29;
    uint64_t v30 = v9[44];
    v8[43] = v9[43];
    v8[44] = v30;
    uint64_t v31 = v9[46];
    v8[45] = v9[45];
    v8[46] = v31;
    uint64_t v32 = v9[47];
    *((unsigned char *)v8 + 384) = *((unsigned char *)v9 + 384);
    v8[47] = v32;
    uint64_t v33 = v9[50];
    v8[49] = v9[49];
    v8[50] = v33;
    uint64_t v34 = v9[52];
    v8[51] = v9[51];
    v8[52] = v34;
    uint64_t v35 = *(int *)(v10 + 140);
    uint64_t v473 = (char *)v8 + v35;
    uint64_t v36 = (char *)v9 + v35;
    uint64_t v37 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v36, 1, v37))
    {
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v473, v36, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v473, v36, v37);
      __swift_storeEnumTagSinglePayload((uint64_t)v473, 0, 1, v37);
    }
    uint64_t v39 = *(int *)(v10 + 144);
    uint64_t v40 = (char *)v8 + v39;
    uint64_t v41 = (char *)v9 + v39;
    if (__swift_getEnumTagSinglePayload((uint64_t)v9 + v39, 1, v37))
    {
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v40, v41, v37);
      __swift_storeEnumTagSinglePayload((uint64_t)v40, 0, 1, v37);
    }
    uint64_t v5 = v486;
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
    uint64_t v4 = v484;
  }
  uint64_t v43 = v3[6];
  uint64_t v44 = (void *)((char *)v5 + v43);
  uint64_t v45 = (void *)((char *)v4 + v43);
  uint64_t v46 = type metadata accessor for TicketedTransportation(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v45, 1, v46))
  {
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
    memcpy(v44, v45, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    uint64_t v48 = v45[1];
    *uint64_t v44 = *v45;
    v44[1] = v48;
    uint64_t v49 = v45[3];
    v44[2] = v45[2];
    v44[3] = v49;
    uint64_t v50 = v45[5];
    v44[4] = v45[4];
    v44[5] = v50;
    uint64_t v51 = v45[7];
    v44[6] = v45[6];
    v44[7] = v51;
    uint64_t v52 = v45[9];
    v44[8] = v45[8];
    v44[9] = v52;
    uint64_t v53 = v45[11];
    v44[10] = v45[10];
    v44[11] = v53;
    uint64_t v54 = v45[13];
    v44[12] = v45[12];
    v44[13] = v54;
    uint64_t v55 = v45[15];
    v44[14] = v45[14];
    v44[15] = v55;
    *((unsigned char *)v44 + 128) = *((unsigned char *)v45 + 128);
    *(_WORD *)((char *)v44 + 129) = *(_WORD *)((char *)v45 + 129);
    uint64_t v56 = v45[18];
    v44[17] = v45[17];
    v44[18] = v56;
    uint64_t v57 = v45[20];
    v44[19] = v45[19];
    v44[20] = v57;
    uint64_t v58 = v45[22];
    v44[21] = v45[21];
    v44[22] = v58;
    uint64_t v59 = v45[24];
    v44[23] = v45[23];
    v44[24] = v59;
    uint64_t v456 = v45[26];
    v44[25] = v45[25];
    v44[26] = v456;
    uint64_t v450 = v45[28];
    v44[27] = v45[27];
    v44[28] = v450;
    uint64_t v60 = v45[30];
    v44[29] = v45[29];
    v44[30] = v60;
    uint64_t v61 = v45[32];
    v44[31] = v45[31];
    v44[32] = v61;
    uint64_t v62 = v45[34];
    v44[33] = v45[33];
    v44[34] = v62;
    uint64_t v63 = v45[36];
    uint64_t v64 = v45[35];
    *((unsigned char *)v44 + 296) = *((unsigned char *)v45 + 296);
    v44[35] = v64;
    v44[36] = v63;
    uint64_t v65 = *(int *)(v46 + 112);
    uint64_t v464 = (char *)v44 + v65;
    uint64_t v66 = (char *)v45 + v65;
    uint64_t v67 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v66, 1, v67))
    {
      uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v464, v66, *(void *)(*(void *)(v68 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16))(v464, v66, v67);
      __swift_storeEnumTagSinglePayload((uint64_t)v464, 0, 1, v67);
    }
    uint64_t v69 = *(int *)(v46 + 116);
    uint64_t v70 = (char *)v44 + v69;
    uint64_t v71 = (char *)v45 + v69;
    if (__swift_getEnumTagSinglePayload((uint64_t)v45 + v69, 1, v67))
    {
      uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v70, v71, *(void *)(*(void *)(v72 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16))(v70, v71, v67);
      __swift_storeEnumTagSinglePayload((uint64_t)v70, 0, 1, v67);
    }
    uint64_t v5 = v486;
    __swift_storeEnumTagSinglePayload((uint64_t)v44, 0, 1, v46);
    uint64_t v4 = v484;
  }
  uint64_t v73 = v3[7];
  uint64_t v74 = (void *)((char *)v5 + v73);
  id v75 = (void *)((char *)v4 + v73);
  uint64_t v76 = (int *)type metadata accessor for TicketedShow(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v75, 1, (uint64_t)v76))
  {
    uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
    memcpy(v74, v75, *(void *)(*(void *)(v77 - 8) + 64));
  }
  else
  {
    uint64_t v78 = v75[1];
    *uint64_t v74 = *v75;
    v74[1] = v78;
    uint64_t v79 = v75[3];
    uint64_t v74[2] = v75[2];
    v74[3] = v79;
    uint64_t v80 = v75[5];
    v74[4] = v75[4];
    v74[5] = v80;
    uint64_t v81 = v75[7];
    v74[6] = v75[6];
    v74[7] = v81;
    uint64_t v82 = v75[9];
    v74[8] = v75[8];
    v74[9] = v82;
    uint64_t v83 = v75[11];
    v74[10] = v75[10];
    v74[11] = v83;
    uint64_t v84 = v75[13];
    v74[12] = v75[12];
    v74[13] = v84;
    uint64_t v85 = v75[15];
    v74[14] = v75[14];
    v74[15] = v85;
    *((unsigned char *)v74 + 128) = *((unsigned char *)v75 + 128);
    *(_WORD *)((char *)v74 + 129) = *(_WORD *)((char *)v75 + 129);
    uint64_t v86 = v75[18];
    v74[17] = v75[17];
    v74[18] = v86;
    uint64_t v87 = v75[20];
    v74[19] = v75[19];
    v74[20] = v87;
    uint64_t v88 = v75[22];
    v74[21] = v75[21];
    v74[22] = v88;
    uint64_t v89 = v75[24];
    v74[23] = v75[23];
    unsigned char v74[24] = v89;
    uint64_t v90 = v75[26];
    v74[25] = v75[25];
    v74[26] = v90;
    uint64_t v91 = v75[28];
    v74[27] = v75[27];
    v74[28] = v91;
    uint64_t v465 = v75[30];
    v74[29] = v75[29];
    v74[30] = v465;
    uint64_t v457 = v75[32];
    v74[31] = v75[31];
    v74[32] = v457;
    uint64_t v451 = v75[34];
    v74[33] = v75[33];
    v74[34] = v451;
    uint64_t v93 = v75[35];
    uint64_t v92 = v75[36];
    *((unsigned char *)v74 + 296) = *((unsigned char *)v75 + 296);
    v74[35] = v93;
    v74[36] = v92;
    uint64_t v94 = v75[39];
    v74[38] = v75[38];
    v74[39] = v94;
    uint64_t v95 = v76[29];
    uint64_t v474 = (char *)v74 + v95;
    uint64_t v96 = (char *)v75 + v95;
    uint64_t v97 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v96, 1, v97))
    {
      uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v474, v96, *(void *)(*(void *)(v98 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v97 - 8) + 16))(v474, v96, v97);
      __swift_storeEnumTagSinglePayload((uint64_t)v474, 0, 1, v97);
    }
    uint64_t v99 = v76[30];
    id v100 = (void *)((char *)v74 + v99);
    uint64_t v101 = (void *)((char *)v75 + v99);
    uint64_t v102 = v101[1];
    *id v100 = *v101;
    v100[1] = v102;
    uint64_t v103 = v76[31];
    uint64_t v104 = (char *)v74 + v103;
    uint64_t v105 = (char *)v75 + v103;
    uint64_t v106 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v105, 1, v106))
    {
      uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v104, v105, *(void *)(*(void *)(v107 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v106 - 8) + 16))(v104, v105, v106);
      __swift_storeEnumTagSinglePayload((uint64_t)v104, 0, 1, v106);
    }
    uint64_t v5 = v486;
    uint64_t v108 = v76[32];
    uint64_t v109 = (char *)v74 + v108;
    id v110 = (char *)v75 + v108;
    if (__swift_getEnumTagSinglePayload((uint64_t)v75 + v108, 1, v106))
    {
      uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v109, v110, *(void *)(*(void *)(v111 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v106 - 8) + 16))(v109, v110, v106);
      __swift_storeEnumTagSinglePayload((uint64_t)v109, 0, 1, v106);
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v74, 0, 1, (uint64_t)v76);
    uint64_t v3 = v482;
    uint64_t v4 = v484;
  }
  uint64_t v112 = v3[8];
  uint64_t v113 = (void *)((char *)v5 + v112);
  uint64_t v114 = (void *)((char *)v4 + v112);
  uint64_t v115 = type metadata accessor for Appointment(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v114, 1, v115))
  {
    uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
    memcpy(v113, v114, *(void *)(*(void *)(v116 - 8) + 64));
  }
  else
  {
    uint64_t v117 = v114[1];
    *uint64_t v113 = *v114;
    v113[1] = v117;
    uint64_t v118 = v114[3];
    v113[2] = v114[2];
    v113[3] = v118;
    uint64_t v119 = v114[5];
    v113[4] = v114[4];
    v113[5] = v119;
    uint64_t v120 = v114[7];
    v113[6] = v114[6];
    v113[7] = v120;
    uint64_t v121 = v114[9];
    v113[8] = v114[8];
    v113[9] = v121;
    uint64_t v122 = v114[11];
    v113[10] = v114[10];
    v113[11] = v122;
    uint64_t v123 = v114[13];
    v113[12] = v114[12];
    v113[13] = v123;
    uint64_t v124 = v114[15];
    v113[14] = v114[14];
    v113[15] = v124;
    *((unsigned char *)v113 + 128) = *((unsigned char *)v114 + 128);
    *(_WORD *)((char *)v113 + 129) = *(_WORD *)((char *)v114 + 129);
    uint64_t v125 = v114[18];
    v113[17] = v114[17];
    v113[18] = v125;
    uint64_t v126 = v114[20];
    v113[19] = v114[19];
    v113[20] = v126;
    uint64_t v127 = v114[22];
    v113[21] = v114[21];
    v113[22] = v127;
    uint64_t v128 = v114[24];
    v113[23] = v114[23];
    v113[24] = v128;
    uint64_t v129 = v114[26];
    v113[25] = v114[25];
    v113[26] = v129;
    uint64_t v130 = v114[28];
    v113[27] = v114[27];
    v113[28] = v130;
    uint64_t v131 = v114[30];
    v113[29] = v114[29];
    v113[30] = v131;
    uint64_t v132 = v114[32];
    v113[31] = v114[31];
    v113[32] = v132;
    uint64_t v133 = v114[34];
    uint64_t v134 = v114[33];
    *((unsigned char *)v113 + 280) = *((unsigned char *)v114 + 280);
    v113[33] = v134;
    v113[34] = v133;
    uint64_t v135 = v114[37];
    v113[36] = v114[36];
    v113[37] = v135;
    uint64_t v136 = *(int *)(v115 + 108);
    uint64_t v475 = (char *)v113 + v136;
    uint64_t v137 = (char *)v114 + v136;
    uint64_t v138 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v137, 1, v138))
    {
      uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v475, v137, *(void *)(*(void *)(v139 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v138 - 8) + 16))(v475, v137, v138);
      __swift_storeEnumTagSinglePayload((uint64_t)v475, 0, 1, v138);
    }
    uint64_t v140 = *(int *)(v115 + 112);
    uint64_t v141 = (char *)v113 + v140;
    uint64_t v142 = (char *)v114 + v140;
    uint64_t v3 = v482;
    if (__swift_getEnumTagSinglePayload((uint64_t)v114 + v140, 1, v138))
    {
      uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v141, v142, *(void *)(*(void *)(v143 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v138 - 8) + 16))(v141, v142, v138);
      __swift_storeEnumTagSinglePayload((uint64_t)v141, 0, 1, v138);
    }
    uint64_t v5 = v486;
    __swift_storeEnumTagSinglePayload((uint64_t)v113, 0, 1, v115);
    uint64_t v4 = v484;
  }
  uint64_t v144 = v3[9];
  uint64_t v145 = (void *)((char *)v5 + v144);
  uint64_t v146 = (void *)((char *)v4 + v144);
  uint64_t v147 = (int *)type metadata accessor for Party(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v146, 1, (uint64_t)v147))
  {
    uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
    memcpy(v145, v146, *(void *)(*(void *)(v148 - 8) + 64));
  }
  else
  {
    uint64_t v149 = v146[1];
    void *v145 = *v146;
    v145[1] = v149;
    uint64_t v150 = v146[3];
    v145[2] = v146[2];
    v145[3] = v150;
    uint64_t v151 = v146[5];
    v145[4] = v146[4];
    v145[5] = v151;
    uint64_t v152 = v146[7];
    v145[6] = v146[6];
    v145[7] = v152;
    uint64_t v153 = v146[9];
    v145[8] = v146[8];
    v145[9] = v153;
    uint64_t v154 = v146[11];
    v145[10] = v146[10];
    v145[11] = v154;
    uint64_t v155 = v146[13];
    v145[12] = v146[12];
    v145[13] = v155;
    uint64_t v156 = v146[15];
    v145[14] = v146[14];
    v145[15] = v156;
    *((unsigned char *)v145 + 128) = *((unsigned char *)v146 + 128);
    *(_WORD *)((char *)v145 + 129) = *(_WORD *)((char *)v146 + 129);
    uint64_t v157 = v146[18];
    v145[17] = v146[17];
    v145[18] = v157;
    uint64_t v158 = v146[20];
    v145[19] = v146[19];
    v145[20] = v158;
    uint64_t v159 = v146[22];
    v145[21] = v146[21];
    v145[22] = v159;
    uint64_t v160 = v146[24];
    v145[23] = v146[23];
    v145[24] = v160;
    uint64_t v161 = v146[26];
    v145[25] = v146[25];
    v145[26] = v161;
    uint64_t v162 = v146[28];
    v145[27] = v146[27];
    v145[28] = v162;
    uint64_t v163 = v146[30];
    v145[29] = v146[29];
    v145[30] = v163;
    v145[31] = v146[31];
    uint64_t v164 = v147[24];
    uint64_t v466 = (char *)v145 + v164;
    uint64_t v436 = (char *)v146 + v164;
    uint64_t v165 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v436, 1, v165))
    {
      uint64_t v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v466, v436, *(void *)(*(void *)(v166 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v165 - 8) + 16))(v466, v436, v165);
      __swift_storeEnumTagSinglePayload((uint64_t)v466, 0, 1, v165);
    }
    uint64_t v167 = v147[25];
    uint64_t v168 = (char *)v145 + v167;
    uint64_t v169 = (char *)v146 + v167;
    if (__swift_getEnumTagSinglePayload((uint64_t)v146 + v167, 1, v165))
    {
      uint64_t v170 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v168, v169, *(void *)(*(void *)(v170 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v165 - 8) + 16))(v168, v169, v165);
      __swift_storeEnumTagSinglePayload((uint64_t)v168, 0, 1, v165);
    }
    uint64_t v5 = v486;
    uint64_t v171 = v147[26];
    uint64_t v172 = (char *)v145 + v171;
    uint64_t v173 = (char *)v146 + v171;
    uint64_t v174 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v173, 1, v174))
    {
      uint64_t v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v172, v173, *(void *)(*(void *)(v175 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v174 - 8) + 16))(v172, v173, v174);
      __swift_storeEnumTagSinglePayload((uint64_t)v172, 0, 1, v174);
    }
    uint64_t v3 = v482;
    __swift_storeEnumTagSinglePayload((uint64_t)v145, 0, 1, (uint64_t)v147);
    uint64_t v4 = v484;
  }
  uint64_t v176 = v3[10];
  uint64_t v177 = (void *)((char *)v5 + v176);
  uint64_t v178 = (void *)((char *)v4 + v176);
  uint64_t v179 = (int *)type metadata accessor for Trip(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v178, 1, (uint64_t)v179))
  {
    uint64_t v180 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
    memcpy(v177, v178, *(void *)(*(void *)(v180 - 8) + 64));
  }
  else
  {
    uint64_t v181 = v178[1];
    *uint64_t v177 = *v178;
    v177[1] = v181;
    uint64_t v182 = v178[3];
    v177[2] = v178[2];
    v177[3] = v182;
    uint64_t v183 = v178[5];
    v177[4] = v178[4];
    v177[5] = v183;
    uint64_t v184 = v178[7];
    v177[6] = v178[6];
    v177[7] = v184;
    uint64_t v185 = v178[9];
    v177[8] = v178[8];
    v177[9] = v185;
    uint64_t v186 = v178[11];
    v177[10] = v178[10];
    v177[11] = v186;
    uint64_t v187 = v178[13];
    v177[12] = v178[12];
    v177[13] = v187;
    uint64_t v188 = v178[15];
    v177[14] = v178[14];
    v177[15] = v188;
    *((unsigned char *)v177 + 128) = *((unsigned char *)v178 + 128);
    *(_WORD *)((char *)v177 + 129) = *(_WORD *)((char *)v178 + 129);
    uint64_t v189 = v178[18];
    v177[17] = v178[17];
    v177[18] = v189;
    uint64_t v190 = v178[20];
    v177[19] = v178[19];
    v177[20] = v190;
    uint64_t v191 = v178[22];
    v177[21] = v178[21];
    v177[22] = v191;
    uint64_t v192 = v178[24];
    v177[23] = v178[23];
    v177[24] = v192;
    uint64_t v193 = v178[26];
    v177[25] = v178[25];
    v177[26] = v193;
    v177[27] = v178[27];
    uint64_t v194 = v179[22];
    char v467 = (char *)v177 + v194;
    uint64_t v441 = (char *)v178 + v194;
    uint64_t v439 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v441, 1, v439))
    {
      uint64_t v195 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v467, v441, *(void *)(*(void *)(v195 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v439 - 8) + 16))(v467, v441, v439);
      __swift_storeEnumTagSinglePayload((uint64_t)v467, 0, 1, v439);
    }
    uint64_t v196 = v179[23];
    uint64_t v197 = (char *)v177 + v196;
    uint64_t v198 = (char *)v178 + v196;
    uint64_t v5 = v486;
    if (__swift_getEnumTagSinglePayload((uint64_t)v178 + v196, 1, v439))
    {
      uint64_t v199 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v197, v198, *(void *)(*(void *)(v199 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v439 - 8) + 16))(v197, v198, v439);
      __swift_storeEnumTagSinglePayload((uint64_t)v197, 0, 1, v439);
    }
    uint64_t v200 = v179[24];
    uint64_t v201 = (char *)v177 + v200;
    uint64_t v202 = (char *)v178 + v200;
    *(void *)uint64_t v201 = *(void *)v202;
    v201[8] = v202[8];
    uint64_t v203 = v179[25];
    uint64_t v204 = (char *)v177 + v203;
    uint64_t v205 = (char *)v178 + v203;
    uint64_t v206 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v205, 1, v206))
    {
      uint64_t v207 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v204, v205, *(void *)(*(void *)(v207 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v206 - 8) + 16))(v204, v205, v206);
      __swift_storeEnumTagSinglePayload((uint64_t)v204, 0, 1, v206);
    }
    uint64_t v3 = v482;
    __swift_storeEnumTagSinglePayload((uint64_t)v177, 0, 1, (uint64_t)v179);
    uint64_t v4 = v484;
  }
  uint64_t v208 = v3[11];
  uint64_t v209 = (void *)((char *)v5 + v208);
  uint64_t v210 = (void *)((char *)v4 + v208);
  uint64_t v211 = (int *)type metadata accessor for FlightReservation(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v210, 1, (uint64_t)v211))
  {
    uint64_t v212 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
    memcpy(v209, v210, *(void *)(*(void *)(v212 - 8) + 64));
  }
  else
  {
    uint64_t v213 = v210[1];
    *uint64_t v209 = *v210;
    v209[1] = v213;
    uint64_t v214 = v210[3];
    v209[2] = v210[2];
    v209[3] = v214;
    uint64_t v215 = v210[5];
    v209[4] = v210[4];
    v209[5] = v215;
    uint64_t v216 = v210[7];
    v209[6] = v210[6];
    v209[7] = v216;
    uint64_t v217 = v210[9];
    v209[8] = v210[8];
    v209[9] = v217;
    uint64_t v468 = v210[11];
    v209[10] = v210[10];
    v209[11] = v468;
    *((unsigned char *)v209 + 96) = *((unsigned char *)v210 + 96);
    uint64_t v218 = v210[14];
    v209[13] = v210[13];
    v209[14] = v218;
    uint64_t v219 = v211[13];
    uint64_t v476 = (char *)v209 + v219;
    uint64_t v452 = (char *)v210 + v219;
    uint64_t v458 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v452, 1, v458))
    {
      uint64_t v220 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v476, v452, *(void *)(*(void *)(v220 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v458 - 8) + 16))(v476, v452, v458);
      __swift_storeEnumTagSinglePayload((uint64_t)v476, 0, 1, v458);
    }
    uint64_t v221 = v211[14];
    uint64_t v222 = (char *)v209 + v221;
    uint64_t v223 = (char *)v210 + v221;
    if (__swift_getEnumTagSinglePayload((uint64_t)v210 + v221, 1, v458))
    {
      uint64_t v224 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v222, v223, *(void *)(*(void *)(v224 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v458 - 8) + 16))(v222, v223, v458);
      __swift_storeEnumTagSinglePayload((uint64_t)v222, 0, 1, v458);
    }
    uint64_t v225 = v211[15];
    uint64_t v226 = (void *)((char *)v209 + v225);
    uint64_t v227 = (void *)((char *)v210 + v225);
    uint64_t v228 = v227[1];
    *uint64_t v226 = *v227;
    v226[1] = v228;
    uint64_t v229 = v211[16];
    uint64_t v230 = (void *)((char *)v209 + v229);
    uint64_t v231 = (void *)((char *)v210 + v229);
    uint64_t v232 = v231[1];
    *uint64_t v230 = *v231;
    v230[1] = v232;
    uint64_t v233 = v211[17];
    uint64_t v234 = (void *)((char *)v209 + v233);
    uint64_t v235 = (void *)((char *)v210 + v233);
    uint64_t v236 = v235[1];
    *uint64_t v234 = *v235;
    v234[1] = v236;
    uint64_t v237 = v211[18];
    uint64_t v477 = (char *)v209 + v237;
    uint64_t v238 = (char *)v210 + v237;
    uint64_t v239 = type metadata accessor for DateComponents();
    uint64_t v240 = *(void (**)(char *, char *, uint64_t))(*(void *)(v239 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v240(v477, v238, v239);
    v240((char *)v209 + v211[19], (char *)v210 + v211[19], v239);
    uint64_t v241 = v211[20];
    uint64_t v242 = (void *)((char *)v209 + v241);
    uint64_t v243 = (void *)((char *)v210 + v241);
    uint64_t v478 = v243[1];
    *uint64_t v242 = *v243;
    v242[1] = v478;
    uint64_t v244 = v211[21];
    uint64_t v245 = (void *)((char *)v209 + v244);
    uint64_t v246 = (void *)((char *)v210 + v244);
    uint64_t v469 = v246[1];
    *uint64_t v245 = *v246;
    v245[1] = v469;
    uint64_t v247 = v211[22];
    uint64_t v248 = (void *)((char *)v209 + v247);
    uint64_t v249 = (void *)((char *)v210 + v247);
    uint64_t v453 = v249[1];
    *uint64_t v248 = *v249;
    v248[1] = v453;
    uint64_t v250 = v211[23];
    uint64_t v251 = (void *)((char *)v209 + v250);
    uint64_t v252 = (void *)((char *)v210 + v250);
    uint64_t v447 = v252[1];
    *uint64_t v251 = *v252;
    v251[1] = v447;
    uint64_t v253 = v211[24];
    uint64_t v254 = (void *)((char *)v209 + v253);
    uint64_t v255 = (void *)((char *)v210 + v253);
    uint64_t v446 = v255[1];
    *uint64_t v254 = *v255;
    v254[1] = v446;
    uint64_t v256 = v211[25];
    uint64_t v257 = (void *)((char *)v209 + v256);
    uint64_t v258 = (void *)((char *)v210 + v256);
    uint64_t v445 = v258[1];
    *uint64_t v257 = *v258;
    v257[1] = v445;
    uint64_t v259 = v211[26];
    uint64_t v260 = (void *)((char *)v209 + v259);
    uint64_t v261 = (void *)((char *)v210 + v259);
    uint64_t v444 = v261[1];
    *uint64_t v260 = *v261;
    v260[1] = v444;
    uint64_t v262 = v211[27];
    uint64_t v263 = (void *)((char *)v209 + v262);
    uint64_t v264 = (void *)((char *)v210 + v262);
    uint64_t v443 = v264[1];
    *uint64_t v263 = *v264;
    v263[1] = v443;
    uint64_t v265 = v211[28];
    uint64_t v266 = (void *)((char *)v209 + v265);
    uint64_t v267 = (void *)((char *)v210 + v265);
    uint64_t v442 = v267[1];
    *uint64_t v266 = *v267;
    v266[1] = v442;
    uint64_t v268 = v211[29];
    uint64_t v269 = (void *)((char *)v209 + v268);
    uint64_t v270 = (void *)((char *)v210 + v268);
    uint64_t v440 = v270[1];
    *uint64_t v269 = *v270;
    v269[1] = v440;
    uint64_t v271 = v211[30];
    uint64_t v272 = (void *)((char *)v209 + v271);
    uint64_t v273 = (void *)((char *)v210 + v271);
    uint64_t v438 = v273[1];
    *uint64_t v272 = *v273;
    v272[1] = v438;
    uint64_t v274 = v211[31];
    uint64_t v275 = (void *)((char *)v209 + v274);
    uint64_t v276 = (void *)((char *)v210 + v274);
    uint64_t v277 = v276[1];
    *uint64_t v275 = *v276;
    v275[1] = v277;
    uint64_t v278 = v211[32];
    uint64_t v279 = (void *)((char *)v209 + v278);
    uint64_t v280 = (void *)((char *)v210 + v278);
    uint64_t v281 = v280[1];
    *uint64_t v279 = *v280;
    v279[1] = v281;
    *(void *)((char *)v209 + v211[33]) = *(void *)((char *)v210 + v211[33]);
    *(void *)((char *)v209 + v211[34]) = *(void *)((char *)v210 + v211[34]);
    uint64_t v282 = v211[35];
    uint64_t v283 = (void *)((char *)v209 + v282);
    uint64_t v284 = (void *)((char *)v210 + v282);
    uint64_t v285 = v284[1];
    *uint64_t v283 = *v284;
    v283[1] = v285;
    uint64_t v286 = v211[36];
    uint64_t v287 = (void *)((char *)v209 + v286);
    uint64_t v288 = (void *)((char *)v210 + v286);
    uint64_t v289 = v288[1];
    *uint64_t v287 = *v288;
    v287[1] = v289;
    uint64_t v290 = v211[37];
    uint64_t v291 = (void *)((char *)v209 + v290);
    uint64_t v292 = (void *)((char *)v210 + v290);
    uint64_t v293 = v292[1];
    *uint64_t v291 = *v292;
    v291[1] = v293;
    uint64_t v294 = v211[38];
    uint64_t v459 = (char *)v209 + v294;
    uint64_t v435 = (char *)v210 + v294;
    uint64_t v437 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v435, 1, v437))
    {
      uint64_t v295 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v459, v435, *(void *)(*(void *)(v295 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v437 - 8) + 16))(v459, v435, v437);
      __swift_storeEnumTagSinglePayload((uint64_t)v459, 0, 1, v437);
    }
    uint64_t v296 = v211[39];
    uint64_t v297 = (void *)((char *)v209 + v296);
    uint64_t v298 = (void *)((char *)v210 + v296);
    uint64_t v299 = v298[1];
    *uint64_t v297 = *v298;
    v297[1] = v299;
    uint64_t v300 = v211[40];
    uint64_t v301 = (void *)((char *)v209 + v300);
    uint64_t v302 = (void *)((char *)v210 + v300);
    uint64_t v303 = v302[1];
    *uint64_t v301 = *v302;
    v301[1] = v303;
    uint64_t v304 = v211[41];
    uint64_t v305 = (char *)v209 + v304;
    uint64_t v306 = (char *)v210 + v304;
    v305[8] = v306[8];
    *(void *)uint64_t v305 = *(void *)v306;
    uint64_t v307 = v211[42];
    uint64_t v308 = (void *)((char *)v209 + v307);
    uint64_t v309 = (void *)((char *)v210 + v307);
    uint64_t v310 = v309[1];
    *uint64_t v308 = *v309;
    v308[1] = v310;
    uint64_t v311 = v211[43];
    uint64_t v312 = (char *)v209 + v311;
    uint64_t v313 = (char *)v210 + v311;
    *(_OWORD *)uint64_t v312 = *(_OWORD *)v313;
    *(void *)(v312 + 13) = *(void *)(v313 + 13);
    uint64_t v314 = v211[44];
    uint64_t v315 = (void *)((char *)v209 + v314);
    uint64_t v316 = (void *)((char *)v210 + v314);
    uint64_t v317 = v316[1];
    *uint64_t v315 = *v316;
    v315[1] = v317;
    uint64_t v318 = v211[45];
    uint64_t v319 = (void *)((char *)v209 + v318);
    uint64_t v320 = (void *)((char *)v210 + v318);
    uint64_t v321 = v320[1];
    *uint64_t v319 = *v320;
    v319[1] = v321;
    uint64_t v322 = v211[46];
    uint64_t v323 = (void *)((char *)v209 + v322);
    uint64_t v324 = (void *)((char *)v210 + v322);
    uint64_t v325 = v324[1];
    *uint64_t v323 = *v324;
    v323[1] = v325;
    uint64_t v326 = v211[47];
    uint64_t v327 = (void *)((char *)v209 + v326);
    uint64_t v328 = (void *)((char *)v210 + v326);
    uint64_t v329 = v328[1];
    *uint64_t v327 = *v328;
    v327[1] = v329;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __swift_storeEnumTagSinglePayload((uint64_t)v209, 0, 1, (uint64_t)v211);
    uint64_t v4 = v484;
    uint64_t v5 = v486;
    uint64_t v3 = v482;
  }
  uint64_t v330 = v3[12];
  uint64_t v331 = (void *)((char *)v5 + v330);
  uint64_t v332 = (void *)((char *)v4 + v330);
  uint64_t v333 = (int *)type metadata accessor for HotelReservation(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v332, 1, (uint64_t)v333))
  {
    uint64_t v334 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
    memcpy(v331, v332, *(void *)(*(void *)(v334 - 8) + 64));
  }
  else
  {
    uint64_t v335 = v332[1];
    *uint64_t v331 = *v332;
    v331[1] = v335;
    uint64_t v336 = v332[3];
    v331[2] = v332[2];
    v331[3] = v336;
    uint64_t v337 = v332[5];
    v331[4] = v332[4];
    v331[5] = v337;
    uint64_t v470 = v332[7];
    v331[6] = v332[6];
    v331[7] = v470;
    uint64_t v338 = v332[9];
    v331[8] = v332[8];
    v331[9] = v338;
    uint64_t v460 = v332[11];
    v331[10] = v332[10];
    v331[11] = v460;
    *((unsigned char *)v331 + 96) = *((unsigned char *)v332 + 96);
    uint64_t v339 = v332[14];
    v331[13] = v332[13];
    v331[14] = v339;
    uint64_t v340 = v332[16];
    v331[15] = v332[15];
    v331[16] = v340;
    uint64_t v341 = v333[14];
    uint64_t v479 = (char *)v331 + v341;
    uint64_t v448 = (char *)v332 + v341;
    uint64_t v454 = type metadata accessor for DateComponents();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v448, 1, v454))
    {
      uint64_t v342 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
      memcpy(v479, v448, *(void *)(*(void *)(v342 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v454 - 8) + 16))(v479, v448, v454);
      __swift_storeEnumTagSinglePayload((uint64_t)v479, 0, 1, v454);
    }
    uint64_t v343 = v333[15];
    uint64_t v344 = (char *)v331 + v343;
    uint64_t v345 = (char *)v332 + v343;
    if (__swift_getEnumTagSinglePayload((uint64_t)v332 + v343, 1, v454))
    {
      uint64_t v346 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
      memcpy(v344, v345, *(void *)(*(void *)(v346 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v454 - 8) + 16))(v344, v345, v454);
      __swift_storeEnumTagSinglePayload((uint64_t)v344, 0, 1, v454);
    }
    uint64_t v347 = v333[16];
    uint64_t v348 = (void *)((char *)v331 + v347);
    uint64_t v349 = (void *)((char *)v332 + v347);
    uint64_t v350 = v349[1];
    *uint64_t v348 = *v349;
    v348[1] = v350;
    uint64_t v351 = v333[17];
    uint64_t v352 = (void *)((char *)v331 + v351);
    uint64_t v353 = (void *)((char *)v332 + v351);
    uint64_t v480 = v353[1];
    *uint64_t v352 = *v353;
    v352[1] = v480;
    uint64_t v354 = v333[18];
    uint64_t v355 = (void *)((char *)v331 + v354);
    uint64_t v356 = (void *)((char *)v332 + v354);
    uint64_t v471 = v356[1];
    *uint64_t v355 = *v356;
    v355[1] = v471;
    uint64_t v357 = v333[19];
    uint64_t v358 = (void *)((char *)v331 + v357);
    uint64_t v359 = (void *)((char *)v332 + v357);
    uint64_t v461 = v359[1];
    *uint64_t v358 = *v359;
    v358[1] = v461;
    uint64_t v360 = v333[20];
    uint64_t v361 = (void *)((char *)v331 + v360);
    uint64_t v362 = (void *)((char *)v332 + v360);
    uint64_t v363 = v362[1];
    *uint64_t v361 = *v362;
    v361[1] = v363;
    *(void *)((char *)v331 + v333[21]) = *(void *)((char *)v332 + v333[21]);
    *(void *)((char *)v331 + v333[22]) = *(void *)((char *)v332 + v333[22]);
    uint64_t v364 = v333[23];
    uint64_t v365 = (char *)v331 + v364;
    uint64_t v366 = (char *)v332 + v364;
    *(void *)uint64_t v365 = *(void *)v366;
    v365[8] = v366[8];
    uint64_t v367 = v333[24];
    uint64_t v368 = (char *)v331 + v367;
    uint64_t v369 = (char *)v332 + v367;
    *(void *)uint64_t v368 = *(void *)v369;
    v368[8] = v369[8];
    uint64_t v370 = v333[25];
    uint64_t v371 = (void *)((char *)v331 + v370);
    uint64_t v372 = (void *)((char *)v332 + v370);
    uint64_t v373 = v372[1];
    *uint64_t v371 = *v372;
    v371[1] = v373;
    uint64_t v374 = v333[26];
    uint64_t v375 = (void *)((char *)v331 + v374);
    uint64_t v376 = (void *)((char *)v332 + v374);
    uint64_t v377 = v376[1];
    *uint64_t v375 = *v376;
    v375[1] = v377;
    uint64_t v378 = v333[27];
    uint64_t v379 = (void *)((char *)v331 + v378);
    uint64_t v380 = (void *)((char *)v332 + v378);
    uint64_t v381 = v380[1];
    *uint64_t v379 = *v380;
    v379[1] = v381;
    uint64_t v382 = v333[28];
    uint64_t v383 = (void *)((char *)v331 + v382);
    uint64_t v384 = (void *)((char *)v332 + v382);
    uint64_t v385 = v384[1];
    *uint64_t v383 = *v384;
    v383[1] = v385;
    uint64_t v386 = v333[29];
    uint64_t v387 = (char *)v331 + v386;
    uint64_t v388 = (char *)v332 + v386;
    *(void *)uint64_t v387 = *(void *)v388;
    v387[8] = v388[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __swift_storeEnumTagSinglePayload((uint64_t)v331, 0, 1, (uint64_t)v333);
    uint64_t v4 = v484;
    uint64_t v5 = v486;
    uint64_t v3 = v482;
  }
  uint64_t v389 = v3[13];
  uint64_t v390 = (void *)((char *)v5 + v389);
  uint64_t v391 = (void *)((char *)v4 + v389);
  uint64_t v392 = (int *)type metadata accessor for RestaurantReservation(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v391, 1, (uint64_t)v392))
  {
    uint64_t v393 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
    memcpy(v390, v391, *(void *)(*(void *)(v393 - 8) + 64));
  }
  else
  {
    uint64_t v394 = v391[1];
    *uint64_t v390 = *v391;
    v390[1] = v394;
    uint64_t v395 = v391[3];
    v390[2] = v391[2];
    v390[3] = v395;
    uint64_t v396 = v391[5];
    v390[4] = v391[4];
    v390[5] = v396;
    uint64_t v483 = v391[7];
    v390[6] = v391[6];
    v390[7] = v483;
    uint64_t v481 = v391[9];
    v390[8] = v391[8];
    v390[9] = v481;
    uint64_t v397 = v391[11];
    v390[10] = v391[10];
    v390[11] = v397;
    *((unsigned char *)v390 + 96) = *((unsigned char *)v391 + 96);
    uint64_t v398 = v391[14];
    v390[13] = v391[13];
    v390[14] = v398;
    uint64_t v399 = v391[16];
    v390[15] = v391[15];
    v390[16] = v399;
    uint64_t v400 = v392[14];
    uint64_t v485 = (char *)v390 + v400;
    uint64_t v472 = (char *)v391 + v400;
    uint64_t v462 = type metadata accessor for DateComponents();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v472, 1, v462))
    {
      uint64_t v401 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
      memcpy(v485, v472, *(void *)(*(void *)(v401 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v462 - 8) + 16))(v485, v472, v462);
      __swift_storeEnumTagSinglePayload((uint64_t)v485, 0, 1, v462);
    }
    uint64_t v402 = v392[15];
    uint64_t v403 = (void *)((char *)v390 + v402);
    uint64_t v404 = (void *)((char *)v391 + v402);
    uint64_t v405 = v404[1];
    *uint64_t v403 = *v404;
    v403[1] = v405;
    uint64_t v406 = v392[16];
    uint64_t v407 = (void *)((char *)v390 + v406);
    uint64_t v408 = (void *)((char *)v391 + v406);
    uint64_t v409 = v408[1];
    *uint64_t v407 = *v408;
    v407[1] = v409;
    uint64_t v410 = v392[17];
    uint64_t v411 = (void *)((char *)v390 + v410);
    uint64_t v412 = (void *)((char *)v391 + v410);
    uint64_t v413 = v412[1];
    *uint64_t v411 = *v412;
    v411[1] = v413;
    uint64_t v414 = v392[18];
    uint64_t v415 = (void *)((char *)v390 + v414);
    uint64_t v416 = (void *)((char *)v391 + v414);
    uint64_t v417 = v416[1];
    *uint64_t v415 = *v416;
    v415[1] = v417;
    uint64_t v418 = v392[19];
    uint64_t v419 = (void *)((char *)v390 + v418);
    uint64_t v420 = (void *)((char *)v391 + v418);
    uint64_t v421 = v420[1];
    *uint64_t v419 = *v420;
    v419[1] = v421;
    *(void *)((char *)v390 + v392[20]) = *(void *)((char *)v391 + v392[20]);
    uint64_t v422 = v392[21];
    uint64_t v423 = (void *)((char *)v390 + v422);
    uint64_t v424 = (void *)((char *)v391 + v422);
    uint64_t v425 = v424[1];
    *uint64_t v423 = *v424;
    v423[1] = v425;
    uint64_t v426 = v392[22];
    uint64_t v427 = (void *)((char *)v390 + v426);
    uint64_t v428 = (void *)((char *)v391 + v426);
    uint64_t v429 = v428[1];
    *uint64_t v427 = *v428;
    v427[1] = v429;
    uint64_t v430 = v392[23];
    uint64_t v431 = (void *)((char *)v390 + v430);
    uint64_t v432 = (void *)((char *)v391 + v430);
    uint64_t v433 = v432[1];
    *uint64_t v431 = *v432;
    v431[1] = v433;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __swift_storeEnumTagSinglePayload((uint64_t)v390, 0, 1, (uint64_t)v392);
    return v486;
  }
  return v5;
}

void *assignWithCopy for PartialExtractedAttributes(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (uint64_t)v5 + v6;
  uint64_t v8 = (uint64_t)v4 + v6;
  uint64_t v9 = type metadata accessor for RentalCarReservation(0);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload(v8, 1, v9);
  v672 = a3;
  v674 = v5;
  v671 = v4;
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      *(void *)uint64_t v7 = *(void *)v8;
      *(void *)(v7 + 8) = *(void *)(v8 + 8);
      *(void *)(v7 + 16) = *(void *)(v8 + 16);
      *(void *)(v7 + 24) = *(void *)(v8 + 24);
      *(void *)(v7 + 32) = *(void *)(v8 + 32);
      *(void *)(v7 + 40) = *(void *)(v8 + 40);
      *(void *)(v7 + 48) = *(void *)(v8 + 48);
      *(void *)(v7 + 56) = *(void *)(v8 + 56);
      *(void *)(v7 + 64) = *(void *)(v8 + 64);
      *(void *)(v7 + 72) = *(void *)(v8 + 72);
      *(void *)(v7 + 80) = *(void *)(v8 + 80);
      *(void *)(v7 + 88) = *(void *)(v8 + 88);
      *(void *)(v7 + 96) = *(void *)(v8 + 96);
      *(void *)(v7 + 104) = *(void *)(v8 + 104);
      *(void *)(v7 + 112) = *(void *)(v8 + 112);
      *(void *)(v7 + 120) = *(void *)(v8 + 120);
      *(unsigned char *)(v7 + 128) = *(unsigned char *)(v8 + 128);
      *(unsigned char *)(v7 + 129) = *(unsigned char *)(v8 + 129);
      *(unsigned char *)(v7 + 130) = *(unsigned char *)(v8 + 130);
      *(void *)(v7 + 136) = *(void *)(v8 + 136);
      *(void *)(v7 + 144) = *(void *)(v8 + 144);
      *(void *)(v7 + 152) = *(void *)(v8 + 152);
      *(void *)(v7 + 160) = *(void *)(v8 + 160);
      *(void *)(v7 + 168) = *(void *)(v8 + 168);
      *(void *)(v7 + 176) = *(void *)(v8 + 176);
      *(void *)(v7 + 184) = *(void *)(v8 + 184);
      *(void *)(v7 + 192) = *(void *)(v8 + 192);
      *(void *)(v7 + 200) = *(void *)(v8 + 200);
      *(void *)(v7 + 208) = *(void *)(v8 + 208);
      *(void *)(v7 + 216) = *(void *)(v8 + 216);
      *(void *)(v7 + 224) = *(void *)(v8 + 224);
      *(void *)(v7 + 232) = *(void *)(v8 + 232);
      *(void *)(v7 + 240) = *(void *)(v8 + 240);
      *(void *)(v7 + 248) = *(void *)(v8 + 248);
      *(void *)(v7 + 256) = *(void *)(v8 + 256);
      *(void *)(v7 + 264) = *(void *)(v8 + 264);
      *(void *)(v7 + 272) = *(void *)(v8 + 272);
      *(void *)(v7 + 280) = *(void *)(v8 + 280);
      *(void *)(v7 + 288) = *(void *)(v8 + 288);
      *(void *)(v7 + 296) = *(void *)(v8 + 296);
      *(void *)(v7 + 304) = *(void *)(v8 + 304);
      *(void *)(v7 + 312) = *(void *)(v8 + 312);
      *(void *)(v7 + 320) = *(void *)(v8 + 320);
      *(void *)(v7 + 328) = *(void *)(v8 + 328);
      *(void *)(v7 + 336) = *(void *)(v8 + 336);
      *(void *)(v7 + 344) = *(void *)(v8 + 344);
      *(void *)(v7 + 352) = *(void *)(v8 + 352);
      *(void *)(v7 + 360) = *(void *)(v8 + 360);
      *(void *)(v7 + 368) = *(void *)(v8 + 368);
      uint64_t v12 = *(void *)(v8 + 376);
      *(unsigned char *)(v7 + 384) = *(unsigned char *)(v8 + 384);
      *(void *)(v7 + 376) = v12;
      *(void *)(v7 + 392) = *(void *)(v8 + 392);
      *(void *)(v7 + 400) = *(void *)(v8 + 400);
      *(void *)(v7 + 408) = *(void *)(v8 + 408);
      *(void *)(v7 + 416) = *(void *)(v8 + 416);
      uint64_t v13 = *(int *)(v9 + 140);
      v661 = (void *)(v7 + v13);
      v650 = (const void *)(v8 + v13);
      uint64_t v14 = type metadata accessor for Date();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v650, 1, v14))
      {
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v661, v650, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16))(v661, v650, v14);
        __swift_storeEnumTagSinglePayload((uint64_t)v661, 0, 1, v14);
      }
      uint64_t v26 = *(int *)(v9 + 144);
      uint64_t v27 = (void *)(v7 + v26);
      uint64_t v28 = (const void *)(v8 + v26);
      if (__swift_getEnumTagSinglePayload(v8 + v26, 1, v14))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16))(v27, v28, v14);
        __swift_storeEnumTagSinglePayload((uint64_t)v27, 0, 1, v14);
      }
      uint64_t v30 = v7;
      uint64_t v31 = v9;
      goto LABEL_17;
    }
    goto LABEL_7;
  }
  if (v11)
  {
    outlined destroy of PartialExtractedAttributes(v7, (void (*)(void))type metadata accessor for RentalCarReservation);
LABEL_7:
    size_t v16 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?)
                                - 8)
                    + 64);
    uint64_t v17 = (void *)v7;
    uint64_t v18 = (const void *)v8;
LABEL_8:
    memcpy(v17, v18, v16);
    goto LABEL_18;
  }
  *(void *)uint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  *(void *)(v7 + 40) = *(void *)(v8 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 48) = *(void *)(v8 + 48);
  *(void *)(v7 + 56) = *(void *)(v8 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 64) = *(void *)(v8 + 64);
  *(void *)(v7 + 72) = *(void *)(v8 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 80) = *(void *)(v8 + 80);
  *(void *)(v7 + 88) = *(void *)(v8 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 96) = *(void *)(v8 + 96);
  *(void *)(v7 + 104) = *(void *)(v8 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 112) = *(void *)(v8 + 112);
  *(void *)(v7 + 120) = *(void *)(v8 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v7 + 128) = *(unsigned char *)(v8 + 128);
  *(unsigned char *)(v7 + 129) = *(unsigned char *)(v8 + 129);
  *(unsigned char *)(v7 + 130) = *(unsigned char *)(v8 + 130);
  *(void *)(v7 + 136) = *(void *)(v8 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 144) = *(void *)(v8 + 144);
  *(void *)(v7 + 152) = *(void *)(v8 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 160) = *(void *)(v8 + 160);
  *(void *)(v7 + 168) = *(void *)(v8 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 176) = *(void *)(v8 + 176);
  *(void *)(v7 + 184) = *(void *)(v8 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 192) = *(void *)(v8 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 200) = *(void *)(v8 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 208) = *(void *)(v8 + 208);
  *(void *)(v7 + 216) = *(void *)(v8 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 224) = *(void *)(v8 + 224);
  *(void *)(v7 + 232) = *(void *)(v8 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 240) = *(void *)(v8 + 240);
  *(void *)(v7 + 248) = *(void *)(v8 + 248);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 256) = *(void *)(v8 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 264) = *(void *)(v8 + 264);
  *(void *)(v7 + 272) = *(void *)(v8 + 272);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 280) = *(void *)(v8 + 280);
  *(void *)(v7 + 288) = *(void *)(v8 + 288);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 296) = *(void *)(v8 + 296);
  *(void *)(v7 + 304) = *(void *)(v8 + 304);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 312) = *(void *)(v8 + 312);
  *(void *)(v7 + 320) = *(void *)(v8 + 320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 328) = *(void *)(v8 + 328);
  *(void *)(v7 + 336) = *(void *)(v8 + 336);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 344) = *(void *)(v8 + 344);
  *(void *)(v7 + 352) = *(void *)(v8 + 352);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 360) = *(void *)(v8 + 360);
  *(void *)(v7 + 368) = *(void *)(v8 + 368);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v8 + 376);
  *(unsigned char *)(v7 + 384) = *(unsigned char *)(v8 + 384);
  *(void *)(v7 + 376) = v19;
  *(void *)(v7 + 392) = *(void *)(v8 + 392);
  *(void *)(v7 + 400) = *(void *)(v8 + 400);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 408) = *(void *)(v8 + 408);
  *(void *)(v7 + 416) = *(void *)(v8 + 416);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = *(int *)(v9 + 140);
  uint64_t v21 = (void *)(v7 + v20);
  uint64_t v22 = (const void *)(v8 + v20);
  uint64_t v23 = type metadata accessor for Date();
  int v24 = __swift_getEnumTagSinglePayload((uint64_t)v21, 1, v23);
  int v25 = __swift_getEnumTagSinglePayload((uint64_t)v22, 1, v23);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
      __swift_storeEnumTagSinglePayload((uint64_t)v21, 0, 1, v23);
      goto LABEL_133;
    }
    goto LABEL_132;
  }
  uint64_t v293 = *(void *)(v23 - 8);
  if (v25)
  {
    (*(void (**)(void *, uint64_t))(v293 + 8))(v21, v23);
LABEL_132:
    uint64_t v294 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v21, v22, *(void *)(*(void *)(v294 - 8) + 64));
    goto LABEL_133;
  }
  (*(void (**)(void *, const void *, uint64_t))(v293 + 24))(v21, v22, v23);
LABEL_133:
  uint64_t v295 = *(int *)(v9 + 144);
  uint64_t v296 = (void *)(v7 + v295);
  uint64_t v297 = v8 + v295;
  int v298 = __swift_getEnumTagSinglePayload(v7 + v295, 1, v23);
  int v299 = __swift_getEnumTagSinglePayload(v297, 1, v23);
  if (v298)
  {
    if (!v299)
    {
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v296, v297, v23);
      uint64_t v30 = (uint64_t)v296;
      uint64_t v31 = v23;
LABEL_17:
      __swift_storeEnumTagSinglePayload(v30, 0, 1, v31);
      goto LABEL_18;
    }
    goto LABEL_174;
  }
  uint64_t v346 = *(void *)(v23 - 8);
  if (v299)
  {
    (*(void (**)(void *, uint64_t))(v346 + 8))(v296, v23);
LABEL_174:
    size_t v16 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                                - 8)
                    + 64);
    uint64_t v17 = v296;
    uint64_t v18 = (const void *)v297;
    goto LABEL_8;
  }
  (*(void (**)(void *, uint64_t, uint64_t))(v346 + 24))(v296, v297, v23);
LABEL_18:
  uint64_t v32 = a3[6];
  uint64_t v33 = (uint64_t)v5 + v32;
  uint64_t v34 = (uint64_t)v4 + v32;
  uint64_t v35 = type metadata accessor for TicketedTransportation(0);
  int v36 = __swift_getEnumTagSinglePayload(v33, 1, v35);
  int v37 = __swift_getEnumTagSinglePayload(v34, 1, v35);
  if (v36)
  {
    if (!v37)
    {
      *(void *)uint64_t v33 = *(void *)v34;
      *(void *)(v33 + 8) = *(void *)(v34 + 8);
      *(void *)(v33 + 16) = *(void *)(v34 + 16);
      *(void *)(v33 + 24) = *(void *)(v34 + 24);
      *(void *)(v33 + 32) = *(void *)(v34 + 32);
      *(void *)(v33 + 40) = *(void *)(v34 + 40);
      *(void *)(v33 + 48) = *(void *)(v34 + 48);
      *(void *)(v33 + 56) = *(void *)(v34 + 56);
      *(void *)(v33 + 64) = *(void *)(v34 + 64);
      *(void *)(v33 + 72) = *(void *)(v34 + 72);
      *(void *)(v33 + 80) = *(void *)(v34 + 80);
      *(void *)(v33 + 88) = *(void *)(v34 + 88);
      *(void *)(v33 + 96) = *(void *)(v34 + 96);
      *(void *)(v33 + 104) = *(void *)(v34 + 104);
      *(void *)(v33 + 112) = *(void *)(v34 + 112);
      *(void *)(v33 + 120) = *(void *)(v34 + 120);
      *(unsigned char *)(v33 + 128) = *(unsigned char *)(v34 + 128);
      *(unsigned char *)(v33 + 129) = *(unsigned char *)(v34 + 129);
      *(unsigned char *)(v33 + 130) = *(unsigned char *)(v34 + 130);
      *(void *)(v33 + 136) = *(void *)(v34 + 136);
      *(void *)(v33 + 144) = *(void *)(v34 + 144);
      *(void *)(v33 + 152) = *(void *)(v34 + 152);
      *(void *)(v33 + 160) = *(void *)(v34 + 160);
      *(void *)(v33 + 168) = *(void *)(v34 + 168);
      *(void *)(v33 + 176) = *(void *)(v34 + 176);
      *(void *)(v33 + 184) = *(void *)(v34 + 184);
      *(void *)(v33 + 192) = *(void *)(v34 + 192);
      *(void *)(v33 + 200) = *(void *)(v34 + 200);
      *(void *)(v33 + 208) = *(void *)(v34 + 208);
      *(void *)(v33 + 216) = *(void *)(v34 + 216);
      *(void *)(v33 + 224) = *(void *)(v34 + 224);
      *(void *)(v33 + 232) = *(void *)(v34 + 232);
      *(void *)(v33 + 240) = *(void *)(v34 + 240);
      *(void *)(v33 + 248) = *(void *)(v34 + 248);
      *(void *)(v33 + 256) = *(void *)(v34 + 256);
      *(void *)(v33 + 264) = *(void *)(v34 + 264);
      *(void *)(v33 + 272) = *(void *)(v34 + 272);
      *(void *)(v33 + 280) = *(void *)(v34 + 280);
      uint64_t v38 = *(void *)(v34 + 288);
      *(unsigned char *)(v33 + 296) = *(unsigned char *)(v34 + 296);
      *(void *)(v33 + 288) = v38;
      uint64_t v39 = *(int *)(v35 + 112);
      v662 = (void *)(v33 + v39);
      uint64_t v40 = (const void *)(v34 + v39);
      uint64_t v41 = type metadata accessor for Date();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v40, 1, v41))
      {
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v662, v40, *(void *)(*(void *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v41 - 8) + 16))(v662, v40, v41);
        __swift_storeEnumTagSinglePayload((uint64_t)v662, 0, 1, v41);
      }
      uint64_t v53 = *(int *)(v35 + 116);
      uint64_t v54 = (void *)(v33 + v53);
      uint64_t v55 = (const void *)(v34 + v53);
      if (__swift_getEnumTagSinglePayload(v34 + v53, 1, v41))
      {
        uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v41 - 8) + 16))(v54, v55, v41);
        __swift_storeEnumTagSinglePayload((uint64_t)v54, 0, 1, v41);
      }
      uint64_t v57 = v33;
      uint64_t v58 = v35;
      goto LABEL_34;
    }
    goto LABEL_24;
  }
  if (v37)
  {
    outlined destroy of PartialExtractedAttributes(v33, (void (*)(void))type metadata accessor for TicketedTransportation);
LABEL_24:
    size_t v43 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?)
                                - 8)
                    + 64);
    uint64_t v44 = (void *)v33;
    uint64_t v45 = (const void *)v34;
LABEL_25:
    memcpy(v44, v45, v43);
    goto LABEL_35;
  }
  *(void *)uint64_t v33 = *(void *)v34;
  *(void *)(v33 + 8) = *(void *)(v34 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v33 + 16) = *(void *)(v34 + 16);
  *(void *)(v33 + 24) = *(void *)(v34 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v33 + 32) = *(void *)(v34 + 32);
  *(void *)(v33 + 40) = *(void *)(v34 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v33 + 48) = *(void *)(v34 + 48);
  *(void *)(v33 + 56) = *(void *)(v34 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v33 + 64) = *(void *)(v34 + 64);
  *(void *)(v33 + 72) = *(void *)(v34 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v33 + 80) = *(void *)(v34 + 80);
  *(void *)(v33 + 88) = *(void *)(v34 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v33 + 96) = *(void *)(v34 + 96);
  *(void *)(v33 + 104) = *(void *)(v34 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v33 + 112) = *(void *)(v34 + 112);
  *(void *)(v33 + 120) = *(void *)(v34 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v33 + 128) = *(unsigned char *)(v34 + 128);
  *(unsigned char *)(v33 + 129) = *(unsigned char *)(v34 + 129);
  *(unsigned char *)(v33 + 130) = *(unsigned char *)(v34 + 130);
  *(void *)(v33 + 136) = *(void *)(v34 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v33 + 144) = *(void *)(v34 + 144);
  *(void *)(v33 + 152) = *(void *)(v34 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v33 + 160) = *(void *)(v34 + 160);
  *(void *)(v33 + 168) = *(void *)(v34 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v33 + 176) = *(void *)(v34 + 176);
  *(void *)(v33 + 184) = *(void *)(v34 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v33 + 192) = *(void *)(v34 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v33 + 200) = *(void *)(v34 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v33 + 208) = *(void *)(v34 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v33 + 216) = *(void *)(v34 + 216);
  *(void *)(v33 + 224) = *(void *)(v34 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v33 + 232) = *(void *)(v34 + 232);
  *(void *)(v33 + 240) = *(void *)(v34 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v33 + 248) = *(void *)(v34 + 248);
  *(void *)(v33 + 256) = *(void *)(v34 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v33 + 264) = *(void *)(v34 + 264);
  *(void *)(v33 + 272) = *(void *)(v34 + 272);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v33 + 280) = *(void *)(v34 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v46 = *(void *)(v34 + 288);
  *(unsigned char *)(v33 + 296) = *(unsigned char *)(v34 + 296);
  *(void *)(v33 + 288) = v46;
  uint64_t v47 = *(int *)(v35 + 112);
  uint64_t v48 = (void *)(v33 + v47);
  uint64_t v49 = (const void *)(v34 + v47);
  uint64_t v50 = type metadata accessor for Date();
  int v51 = __swift_getEnumTagSinglePayload((uint64_t)v48, 1, v50);
  int v52 = __swift_getEnumTagSinglePayload((uint64_t)v49, 1, v50);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v50 - 8) + 16))(v48, v49, v50);
      __swift_storeEnumTagSinglePayload((uint64_t)v48, 0, 1, v50);
      goto LABEL_139;
    }
    goto LABEL_138;
  }
  uint64_t v300 = *(void *)(v50 - 8);
  if (v52)
  {
    (*(void (**)(void *, uint64_t))(v300 + 8))(v48, v50);
LABEL_138:
    uint64_t v301 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v48, v49, *(void *)(*(void *)(v301 - 8) + 64));
    goto LABEL_139;
  }
  (*(void (**)(void *, const void *, uint64_t))(v300 + 24))(v48, v49, v50);
LABEL_139:
  uint64_t v302 = *(int *)(v35 + 116);
  uint64_t v303 = (void *)(v33 + v302);
  uint64_t v304 = v34 + v302;
  int v305 = __swift_getEnumTagSinglePayload(v33 + v302, 1, v50);
  int v306 = __swift_getEnumTagSinglePayload(v304, 1, v50);
  if (v305)
  {
    if (!v306)
    {
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v50 - 8) + 16))(v303, v304, v50);
      uint64_t v57 = (uint64_t)v303;
      uint64_t v58 = v50;
LABEL_34:
      __swift_storeEnumTagSinglePayload(v57, 0, 1, v58);
      goto LABEL_35;
    }
    goto LABEL_177;
  }
  uint64_t v347 = *(void *)(v50 - 8);
  if (v306)
  {
    (*(void (**)(void *, uint64_t))(v347 + 8))(v303, v50);
LABEL_177:
    size_t v43 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                                - 8)
                    + 64);
    uint64_t v44 = v303;
    uint64_t v45 = (const void *)v304;
    goto LABEL_25;
  }
  (*(void (**)(void *, uint64_t, uint64_t))(v347 + 24))(v303, v304, v50);
LABEL_35:
  uint64_t v59 = a3[7];
  uint64_t v60 = (uint64_t)v5 + v59;
  uint64_t v61 = (uint64_t)v4 + v59;
  uint64_t v62 = (int *)type metadata accessor for TicketedShow(0);
  int v63 = __swift_getEnumTagSinglePayload(v60, 1, (uint64_t)v62);
  int v64 = __swift_getEnumTagSinglePayload(v61, 1, (uint64_t)v62);
  if (v63)
  {
    if (!v64)
    {
      *(void *)uint64_t v60 = *(void *)v61;
      *(void *)(v60 + 8) = *(void *)(v61 + 8);
      *(void *)(v60 + 16) = *(void *)(v61 + 16);
      *(void *)(v60 + 24) = *(void *)(v61 + 24);
      *(void *)(v60 + 32) = *(void *)(v61 + 32);
      *(void *)(v60 + 40) = *(void *)(v61 + 40);
      *(void *)(v60 + 48) = *(void *)(v61 + 48);
      *(void *)(v60 + 56) = *(void *)(v61 + 56);
      *(void *)(v60 + 64) = *(void *)(v61 + 64);
      *(void *)(v60 + 72) = *(void *)(v61 + 72);
      *(void *)(v60 + 80) = *(void *)(v61 + 80);
      *(void *)(v60 + 88) = *(void *)(v61 + 88);
      *(void *)(v60 + 96) = *(void *)(v61 + 96);
      *(void *)(v60 + 104) = *(void *)(v61 + 104);
      *(void *)(v60 + 112) = *(void *)(v61 + 112);
      *(void *)(v60 + 120) = *(void *)(v61 + 120);
      *(unsigned char *)(v60 + 128) = *(unsigned char *)(v61 + 128);
      *(unsigned char *)(v60 + 129) = *(unsigned char *)(v61 + 129);
      *(unsigned char *)(v60 + 130) = *(unsigned char *)(v61 + 130);
      *(void *)(v60 + 136) = *(void *)(v61 + 136);
      *(void *)(v60 + 144) = *(void *)(v61 + 144);
      *(void *)(v60 + 152) = *(void *)(v61 + 152);
      *(void *)(v60 + 160) = *(void *)(v61 + 160);
      *(void *)(v60 + 168) = *(void *)(v61 + 168);
      *(void *)(v60 + 176) = *(void *)(v61 + 176);
      *(void *)(v60 + 184) = *(void *)(v61 + 184);
      *(void *)(v60 + 192) = *(void *)(v61 + 192);
      *(void *)(v60 + 200) = *(void *)(v61 + 200);
      *(void *)(v60 + 208) = *(void *)(v61 + 208);
      *(void *)(v60 + 216) = *(void *)(v61 + 216);
      *(void *)(v60 + 224) = *(void *)(v61 + 224);
      *(void *)(v60 + 232) = *(void *)(v61 + 232);
      *(void *)(v60 + 240) = *(void *)(v61 + 240);
      *(void *)(v60 + 248) = *(void *)(v61 + 248);
      *(void *)(v60 + 256) = *(void *)(v61 + 256);
      *(void *)(v60 + 264) = *(void *)(v61 + 264);
      *(void *)(v60 + 272) = *(void *)(v61 + 272);
      *(void *)(v60 + 280) = *(void *)(v61 + 280);
      uint64_t v65 = *(void *)(v61 + 288);
      *(unsigned char *)(v60 + 296) = *(unsigned char *)(v61 + 296);
      *(void *)(v60 + 288) = v65;
      *(void *)(v60 + 304) = *(void *)(v61 + 304);
      *(void *)(v60 + 312) = *(void *)(v61 + 312);
      uint64_t v66 = v62[29];
      v663 = (void *)(v60 + v66);
      uint64_t v67 = (const void *)(v61 + v66);
      uint64_t v68 = type metadata accessor for URL();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v67, 1, v68))
      {
        uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v663, v67, *(void *)(*(void *)(v69 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v68 - 8) + 16))(v663, v67, v68);
        __swift_storeEnumTagSinglePayload((uint64_t)v663, 0, 1, v68);
      }
      uint64_t v80 = v62[30];
      uint64_t v81 = (void *)(v60 + v80);
      uint64_t v82 = (void *)(v61 + v80);
      void *v81 = *v82;
      v81[1] = v82[1];
      uint64_t v83 = v62[31];
      uint64_t v84 = (void *)(v60 + v83);
      uint64_t v85 = (const void *)(v61 + v83);
      uint64_t v86 = type metadata accessor for Date();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v85, 1, v86))
      {
        uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v84, v85, *(void *)(*(void *)(v87 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v86 - 8) + 16))(v84, v85, v86);
        __swift_storeEnumTagSinglePayload((uint64_t)v84, 0, 1, v86);
      }
      uint64_t v88 = v62[32];
      uint64_t v89 = (void *)(v60 + v88);
      uint64_t v90 = (const void *)(v61 + v88);
      if (__swift_getEnumTagSinglePayload(v61 + v88, 1, v86))
      {
        uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v89, v90, *(void *)(*(void *)(v91 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v86 - 8) + 16))(v89, v90, v86);
        __swift_storeEnumTagSinglePayload((uint64_t)v89, 0, 1, v86);
      }
      uint64_t v92 = v60;
      goto LABEL_54;
    }
    goto LABEL_41;
  }
  if (v64)
  {
    outlined destroy of PartialExtractedAttributes(v60, (void (*)(void))type metadata accessor for TicketedShow);
LABEL_41:
    size_t v70 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?)
                                - 8)
                    + 64);
    uint64_t v71 = (void *)v60;
    uint64_t v72 = (const void *)v61;
LABEL_42:
    memcpy(v71, v72, v70);
    goto LABEL_55;
  }
  *(void *)uint64_t v60 = *(void *)v61;
  *(void *)(v60 + 8) = *(void *)(v61 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v60 + 16) = *(void *)(v61 + 16);
  *(void *)(v60 + 24) = *(void *)(v61 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v60 + 32) = *(void *)(v61 + 32);
  *(void *)(v60 + 40) = *(void *)(v61 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v60 + 48) = *(void *)(v61 + 48);
  *(void *)(v60 + 56) = *(void *)(v61 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v60 + 64) = *(void *)(v61 + 64);
  *(void *)(v60 + 72) = *(void *)(v61 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v60 + 80) = *(void *)(v61 + 80);
  *(void *)(v60 + 88) = *(void *)(v61 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v60 + 96) = *(void *)(v61 + 96);
  *(void *)(v60 + 104) = *(void *)(v61 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v60 + 112) = *(void *)(v61 + 112);
  *(void *)(v60 + 120) = *(void *)(v61 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v60 + 128) = *(unsigned char *)(v61 + 128);
  *(unsigned char *)(v60 + 129) = *(unsigned char *)(v61 + 129);
  *(unsigned char *)(v60 + 130) = *(unsigned char *)(v61 + 130);
  *(void *)(v60 + 136) = *(void *)(v61 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v60 + 144) = *(void *)(v61 + 144);
  *(void *)(v60 + 152) = *(void *)(v61 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v60 + 160) = *(void *)(v61 + 160);
  *(void *)(v60 + 168) = *(void *)(v61 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v60 + 176) = *(void *)(v61 + 176);
  *(void *)(v60 + 184) = *(void *)(v61 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v60 + 192) = *(void *)(v61 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v60 + 200) = *(void *)(v61 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v60 + 208) = *(void *)(v61 + 208);
  *(void *)(v60 + 216) = *(void *)(v61 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v60 + 224) = *(void *)(v61 + 224);
  *(void *)(v60 + 232) = *(void *)(v61 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v60 + 240) = *(void *)(v61 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v60 + 248) = *(void *)(v61 + 248);
  *(void *)(v60 + 256) = *(void *)(v61 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v60 + 264) = *(void *)(v61 + 264);
  *(void *)(v60 + 272) = *(void *)(v61 + 272);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v60 + 280) = *(void *)(v61 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v73 = *(void *)(v61 + 288);
  *(unsigned char *)(v60 + 296) = *(unsigned char *)(v61 + 296);
  *(void *)(v60 + 288) = v73;
  *(void *)(v60 + 304) = *(void *)(v61 + 304);
  *(void *)(v60 + 312) = *(void *)(v61 + 312);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v74 = v62[29];
  id v75 = (void *)(v60 + v74);
  uint64_t v76 = (const void *)(v61 + v74);
  uint64_t v77 = type metadata accessor for URL();
  int v78 = __swift_getEnumTagSinglePayload((uint64_t)v75, 1, v77);
  int v79 = __swift_getEnumTagSinglePayload((uint64_t)v76, 1, v77);
  if (v78)
  {
    if (!v79)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v77 - 8) + 16))(v75, v76, v77);
      __swift_storeEnumTagSinglePayload((uint64_t)v75, 0, 1, v77);
      goto LABEL_145;
    }
    goto LABEL_144;
  }
  uint64_t v307 = *(void *)(v77 - 8);
  if (v79)
  {
    (*(void (**)(void *, uint64_t))(v307 + 8))(v75, v77);
LABEL_144:
    uint64_t v308 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v75, v76, *(void *)(*(void *)(v308 - 8) + 64));
    goto LABEL_145;
  }
  (*(void (**)(void *, const void *, uint64_t))(v307 + 24))(v75, v76, v77);
LABEL_145:
  uint64_t v309 = v62[30];
  uint64_t v310 = (void *)(v60 + v309);
  uint64_t v311 = (void *)(v61 + v309);
  *uint64_t v310 = *v311;
  v310[1] = v311[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v312 = v62;
  uint64_t v313 = v62[31];
  uint64_t v314 = (void *)(v60 + v313);
  uint64_t v315 = (const void *)(v61 + v313);
  uint64_t v62 = (int *)type metadata accessor for Date();
  int v316 = __swift_getEnumTagSinglePayload((uint64_t)v314, 1, (uint64_t)v62);
  int v317 = __swift_getEnumTagSinglePayload((uint64_t)v315, 1, (uint64_t)v62);
  if (v316)
  {
    if (!v317)
    {
      (*(void (**)(void *, const void *, int *))(*((void *)v62 - 1) + 16))(v314, v315, v62);
      __swift_storeEnumTagSinglePayload((uint64_t)v314, 0, 1, (uint64_t)v62);
      goto LABEL_181;
    }
    goto LABEL_180;
  }
  uint64_t v348 = *((void *)v62 - 1);
  if (v317)
  {
    (*(void (**)(void *, int *))(v348 + 8))(v314, v62);
LABEL_180:
    uint64_t v349 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v314, v315, *(void *)(*(void *)(v349 - 8) + 64));
    goto LABEL_181;
  }
  (*(void (**)(void *, const void *, int *))(v348 + 24))(v314, v315, v62);
LABEL_181:
  uint64_t v350 = v312[32];
  uint64_t v351 = (void *)(v60 + v350);
  uint64_t v352 = v61 + v350;
  int v353 = __swift_getEnumTagSinglePayload(v60 + v350, 1, (uint64_t)v62);
  int v354 = __swift_getEnumTagSinglePayload(v352, 1, (uint64_t)v62);
  if (v353)
  {
    if (!v354)
    {
      (*(void (**)(void *, uint64_t, int *))(*((void *)v62 - 1) + 16))(v351, v352, v62);
      uint64_t v92 = (uint64_t)v351;
LABEL_54:
      __swift_storeEnumTagSinglePayload(v92, 0, 1, (uint64_t)v62);
      goto LABEL_55;
    }
    goto LABEL_207;
  }
  uint64_t v445 = *((void *)v62 - 1);
  if (v354)
  {
    (*(void (**)(void *, int *))(v445 + 8))(v351, v62);
LABEL_207:
    size_t v70 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                                - 8)
                    + 64);
    uint64_t v71 = v351;
    uint64_t v72 = (const void *)v352;
    goto LABEL_42;
  }
  (*(void (**)(void *, uint64_t, int *))(v445 + 24))(v351, v352, v62);
LABEL_55:
  uint64_t v93 = a3[8];
  uint64_t v94 = (uint64_t)v5 + v93;
  uint64_t v95 = (uint64_t)v4 + v93;
  uint64_t v96 = type metadata accessor for Appointment(0);
  int v97 = __swift_getEnumTagSinglePayload(v94, 1, v96);
  int v98 = __swift_getEnumTagSinglePayload(v95, 1, v96);
  if (v97)
  {
    if (!v98)
    {
      *(void *)uint64_t v94 = *(void *)v95;
      *(void *)(v94 + 8) = *(void *)(v95 + 8);
      *(void *)(v94 + 16) = *(void *)(v95 + 16);
      *(void *)(v94 + 24) = *(void *)(v95 + 24);
      *(void *)(v94 + 32) = *(void *)(v95 + 32);
      *(void *)(v94 + 40) = *(void *)(v95 + 40);
      *(void *)(v94 + 48) = *(void *)(v95 + 48);
      *(void *)(v94 + 56) = *(void *)(v95 + 56);
      *(void *)(v94 + 64) = *(void *)(v95 + 64);
      *(void *)(v94 + 72) = *(void *)(v95 + 72);
      *(void *)(v94 + 80) = *(void *)(v95 + 80);
      *(void *)(v94 + 88) = *(void *)(v95 + 88);
      *(void *)(v94 + 96) = *(void *)(v95 + 96);
      *(void *)(v94 + 104) = *(void *)(v95 + 104);
      *(void *)(v94 + 112) = *(void *)(v95 + 112);
      *(void *)(v94 + 120) = *(void *)(v95 + 120);
      *(unsigned char *)(v94 + 128) = *(unsigned char *)(v95 + 128);
      *(unsigned char *)(v94 + 129) = *(unsigned char *)(v95 + 129);
      *(unsigned char *)(v94 + 130) = *(unsigned char *)(v95 + 130);
      *(void *)(v94 + 136) = *(void *)(v95 + 136);
      *(void *)(v94 + 144) = *(void *)(v95 + 144);
      *(void *)(v94 + 152) = *(void *)(v95 + 152);
      *(void *)(v94 + 160) = *(void *)(v95 + 160);
      *(void *)(v94 + 168) = *(void *)(v95 + 168);
      *(void *)(v94 + 176) = *(void *)(v95 + 176);
      *(void *)(v94 + 184) = *(void *)(v95 + 184);
      *(void *)(v94 + 192) = *(void *)(v95 + 192);
      *(void *)(v94 + 200) = *(void *)(v95 + 200);
      *(void *)(v94 + 208) = *(void *)(v95 + 208);
      *(void *)(v94 + 216) = *(void *)(v95 + 216);
      *(void *)(v94 + 224) = *(void *)(v95 + 224);
      *(void *)(v94 + 232) = *(void *)(v95 + 232);
      *(void *)(v94 + 240) = *(void *)(v95 + 240);
      *(void *)(v94 + 248) = *(void *)(v95 + 248);
      *(void *)(v94 + 256) = *(void *)(v95 + 256);
      *(void *)(v94 + 264) = *(void *)(v95 + 264);
      uint64_t v99 = *(void *)(v95 + 272);
      *(unsigned char *)(v94 + 280) = *(unsigned char *)(v95 + 280);
      *(void *)(v94 + 272) = v99;
      *(void *)(v94 + 288) = *(void *)(v95 + 288);
      *(void *)(v94 + 296) = *(void *)(v95 + 296);
      uint64_t v100 = *(int *)(v96 + 108);
      v664 = (void *)(v94 + v100);
      uint64_t v101 = (const void *)(v95 + v100);
      uint64_t v102 = type metadata accessor for Date();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v101, 1, v102))
      {
        uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v664, v101, *(void *)(*(void *)(v103 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v102 - 8) + 16))(v664, v101, v102);
        __swift_storeEnumTagSinglePayload((uint64_t)v664, 0, 1, v102);
      }
      uint64_t v114 = *(int *)(v96 + 112);
      uint64_t v115 = (void *)(v94 + v114);
      uint64_t v116 = (const void *)(v95 + v114);
      if (__swift_getEnumTagSinglePayload(v95 + v114, 1, v102))
      {
        uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v115, v116, *(void *)(*(void *)(v117 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v102 - 8) + 16))(v115, v116, v102);
        __swift_storeEnumTagSinglePayload((uint64_t)v115, 0, 1, v102);
      }
      uint64_t v118 = v94;
      uint64_t v119 = v96;
      goto LABEL_71;
    }
    goto LABEL_61;
  }
  if (v98)
  {
    outlined destroy of PartialExtractedAttributes(v94, (void (*)(void))type metadata accessor for Appointment);
LABEL_61:
    size_t v104 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?)
                                 - 8)
                     + 64);
    uint64_t v105 = (void *)v94;
    uint64_t v106 = (const void *)v95;
LABEL_62:
    memcpy(v105, v106, v104);
    goto LABEL_72;
  }
  *(void *)uint64_t v94 = *(void *)v95;
  *(void *)(v94 + 8) = *(void *)(v95 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v94 + 16) = *(void *)(v95 + 16);
  *(void *)(v94 + 24) = *(void *)(v95 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v94 + 32) = *(void *)(v95 + 32);
  *(void *)(v94 + 40) = *(void *)(v95 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v94 + 48) = *(void *)(v95 + 48);
  *(void *)(v94 + 56) = *(void *)(v95 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v94 + 64) = *(void *)(v95 + 64);
  *(void *)(v94 + 72) = *(void *)(v95 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v94 + 80) = *(void *)(v95 + 80);
  *(void *)(v94 + 88) = *(void *)(v95 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v94 + 96) = *(void *)(v95 + 96);
  *(void *)(v94 + 104) = *(void *)(v95 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v94 + 112) = *(void *)(v95 + 112);
  *(void *)(v94 + 120) = *(void *)(v95 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v94 + 128) = *(unsigned char *)(v95 + 128);
  *(unsigned char *)(v94 + 129) = *(unsigned char *)(v95 + 129);
  *(unsigned char *)(v94 + 130) = *(unsigned char *)(v95 + 130);
  *(void *)(v94 + 136) = *(void *)(v95 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v94 + 144) = *(void *)(v95 + 144);
  *(void *)(v94 + 152) = *(void *)(v95 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v94 + 160) = *(void *)(v95 + 160);
  *(void *)(v94 + 168) = *(void *)(v95 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v94 + 176) = *(void *)(v95 + 176);
  *(void *)(v94 + 184) = *(void *)(v95 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v94 + 192) = *(void *)(v95 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v94 + 200) = *(void *)(v95 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v94 + 208) = *(void *)(v95 + 208);
  *(void *)(v94 + 216) = *(void *)(v95 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v94 + 224) = *(void *)(v95 + 224);
  *(void *)(v94 + 232) = *(void *)(v95 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v94 + 240) = *(void *)(v95 + 240);
  *(void *)(v94 + 248) = *(void *)(v95 + 248);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v94 + 256) = *(void *)(v95 + 256);
  *(void *)(v94 + 264) = *(void *)(v95 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v107 = *(void *)(v95 + 272);
  *(unsigned char *)(v94 + 280) = *(unsigned char *)(v95 + 280);
  *(void *)(v94 + 272) = v107;
  *(void *)(v94 + 288) = *(void *)(v95 + 288);
  *(void *)(v94 + 296) = *(void *)(v95 + 296);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v108 = *(int *)(v96 + 108);
  uint64_t v109 = (void *)(v94 + v108);
  id v110 = (const void *)(v95 + v108);
  uint64_t v111 = type metadata accessor for Date();
  int v112 = __swift_getEnumTagSinglePayload((uint64_t)v109, 1, v111);
  int v113 = __swift_getEnumTagSinglePayload((uint64_t)v110, 1, v111);
  if (v112)
  {
    if (!v113)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v111 - 8) + 16))(v109, v110, v111);
      __swift_storeEnumTagSinglePayload((uint64_t)v109, 0, 1, v111);
      goto LABEL_151;
    }
    goto LABEL_150;
  }
  uint64_t v318 = *(void *)(v111 - 8);
  if (v113)
  {
    (*(void (**)(void *, uint64_t))(v318 + 8))(v109, v111);
LABEL_150:
    uint64_t v319 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v109, v110, *(void *)(*(void *)(v319 - 8) + 64));
    goto LABEL_151;
  }
  (*(void (**)(void *, const void *, uint64_t))(v318 + 24))(v109, v110, v111);
LABEL_151:
  uint64_t v320 = *(int *)(v96 + 112);
  uint64_t v321 = (void *)(v94 + v320);
  uint64_t v322 = v95 + v320;
  int v323 = __swift_getEnumTagSinglePayload(v94 + v320, 1, v111);
  int v324 = __swift_getEnumTagSinglePayload(v322, 1, v111);
  if (v323)
  {
    if (!v324)
    {
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v111 - 8) + 16))(v321, v322, v111);
      uint64_t v118 = (uint64_t)v321;
      uint64_t v119 = v111;
LABEL_71:
      __swift_storeEnumTagSinglePayload(v118, 0, 1, v119);
      goto LABEL_72;
    }
    goto LABEL_186;
  }
  uint64_t v355 = *(void *)(v111 - 8);
  if (v324)
  {
    (*(void (**)(void *, uint64_t))(v355 + 8))(v321, v111);
LABEL_186:
    size_t v104 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                                 - 8)
                     + 64);
    uint64_t v105 = v321;
    uint64_t v106 = (const void *)v322;
    goto LABEL_62;
  }
  (*(void (**)(void *, uint64_t, uint64_t))(v355 + 24))(v321, v322, v111);
LABEL_72:
  uint64_t v120 = a3[9];
  uint64_t v121 = (uint64_t)v5 + v120;
  uint64_t v122 = (uint64_t)v4 + v120;
  uint64_t v123 = (int *)type metadata accessor for Party(0);
  int v124 = __swift_getEnumTagSinglePayload(v121, 1, (uint64_t)v123);
  int v125 = __swift_getEnumTagSinglePayload(v122, 1, (uint64_t)v123);
  if (v124)
  {
    if (!v125)
    {
      *(void *)uint64_t v121 = *(void *)v122;
      *(void *)(v121 + 8) = *(void *)(v122 + 8);
      *(void *)(v121 + 16) = *(void *)(v122 + 16);
      *(void *)(v121 + 24) = *(void *)(v122 + 24);
      *(void *)(v121 + 32) = *(void *)(v122 + 32);
      *(void *)(v121 + 40) = *(void *)(v122 + 40);
      *(void *)(v121 + 48) = *(void *)(v122 + 48);
      *(void *)(v121 + 56) = *(void *)(v122 + 56);
      *(void *)(v121 + 64) = *(void *)(v122 + 64);
      *(void *)(v121 + 72) = *(void *)(v122 + 72);
      *(void *)(v121 + 80) = *(void *)(v122 + 80);
      *(void *)(v121 + 88) = *(void *)(v122 + 88);
      *(void *)(v121 + 96) = *(void *)(v122 + 96);
      *(void *)(v121 + 104) = *(void *)(v122 + 104);
      *(void *)(v121 + 112) = *(void *)(v122 + 112);
      *(void *)(v121 + 120) = *(void *)(v122 + 120);
      *(unsigned char *)(v121 + 128) = *(unsigned char *)(v122 + 128);
      *(unsigned char *)(v121 + 129) = *(unsigned char *)(v122 + 129);
      *(unsigned char *)(v121 + 130) = *(unsigned char *)(v122 + 130);
      *(void *)(v121 + 136) = *(void *)(v122 + 136);
      *(void *)(v121 + 144) = *(void *)(v122 + 144);
      *(void *)(v121 + 152) = *(void *)(v122 + 152);
      *(void *)(v121 + 160) = *(void *)(v122 + 160);
      *(void *)(v121 + 168) = *(void *)(v122 + 168);
      *(void *)(v121 + 176) = *(void *)(v122 + 176);
      *(void *)(v121 + 184) = *(void *)(v122 + 184);
      *(void *)(v121 + 192) = *(void *)(v122 + 192);
      *(void *)(v121 + 200) = *(void *)(v122 + 200);
      *(void *)(v121 + 208) = *(void *)(v122 + 208);
      *(void *)(v121 + 216) = *(void *)(v122 + 216);
      *(void *)(v121 + 224) = *(void *)(v122 + 224);
      *(void *)(v121 + 232) = *(void *)(v122 + 232);
      *(void *)(v121 + 240) = *(void *)(v122 + 240);
      *(void *)(v121 + 248) = *(void *)(v122 + 248);
      uint64_t v126 = v123[24];
      v665 = (void *)(v121 + v126);
      uint64_t v127 = (const void *)(v122 + v126);
      uint64_t v128 = type metadata accessor for Date();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v127, 1, v128))
      {
        uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v665, v127, *(void *)(*(void *)(v129 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v128 - 8) + 16))(v665, v127, v128);
        __swift_storeEnumTagSinglePayload((uint64_t)v665, 0, 1, v128);
      }
      uint64_t v139 = v123[25];
      uint64_t v140 = (void *)(v121 + v139);
      uint64_t v141 = (const void *)(v122 + v139);
      uint64_t v5 = v674;
      if (__swift_getEnumTagSinglePayload(v122 + v139, 1, v128))
      {
        uint64_t v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v140, v141, *(void *)(*(void *)(v142 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v128 - 8) + 16))(v140, v141, v128);
        __swift_storeEnumTagSinglePayload((uint64_t)v140, 0, 1, v128);
      }
      uint64_t v143 = v123[26];
      uint64_t v144 = (void *)(v121 + v143);
      uint64_t v145 = (const void *)(v122 + v143);
      uint64_t v146 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v145, 1, v146))
      {
        uint64_t v147 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v144, v145, *(void *)(*(void *)(v147 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v146 - 8) + 16))(v144, v145, v146);
        __swift_storeEnumTagSinglePayload((uint64_t)v144, 0, 1, v146);
      }
      uint64_t v148 = v121;
      uint64_t v149 = (uint64_t)v123;
      goto LABEL_91;
    }
    goto LABEL_78;
  }
  if (v125)
  {
    outlined destroy of PartialExtractedAttributes(v121, (void (*)(void))type metadata accessor for Party);
LABEL_78:
    size_t v130 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?)
                                 - 8)
                     + 64);
    uint64_t v131 = (void *)v121;
    uint64_t v132 = (const void *)v122;
LABEL_79:
    memcpy(v131, v132, v130);
    goto LABEL_92;
  }
  *(void *)uint64_t v121 = *(void *)v122;
  *(void *)(v121 + 8) = *(void *)(v122 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v121 + 16) = *(void *)(v122 + 16);
  *(void *)(v121 + 24) = *(void *)(v122 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v121 + 32) = *(void *)(v122 + 32);
  *(void *)(v121 + 40) = *(void *)(v122 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v121 + 48) = *(void *)(v122 + 48);
  *(void *)(v121 + 56) = *(void *)(v122 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v121 + 64) = *(void *)(v122 + 64);
  *(void *)(v121 + 72) = *(void *)(v122 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v121 + 80) = *(void *)(v122 + 80);
  *(void *)(v121 + 88) = *(void *)(v122 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v121 + 96) = *(void *)(v122 + 96);
  *(void *)(v121 + 104) = *(void *)(v122 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v121 + 112) = *(void *)(v122 + 112);
  *(void *)(v121 + 120) = *(void *)(v122 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v121 + 128) = *(unsigned char *)(v122 + 128);
  *(unsigned char *)(v121 + 129) = *(unsigned char *)(v122 + 129);
  *(unsigned char *)(v121 + 130) = *(unsigned char *)(v122 + 130);
  *(void *)(v121 + 136) = *(void *)(v122 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v121 + 144) = *(void *)(v122 + 144);
  *(void *)(v121 + 152) = *(void *)(v122 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v121 + 160) = *(void *)(v122 + 160);
  *(void *)(v121 + 168) = *(void *)(v122 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v121 + 176) = *(void *)(v122 + 176);
  *(void *)(v121 + 184) = *(void *)(v122 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v121 + 192) = *(void *)(v122 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v121 + 200) = *(void *)(v122 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v121 + 208) = *(void *)(v122 + 208);
  *(void *)(v121 + 216) = *(void *)(v122 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v121 + 224) = *(void *)(v122 + 224);
  *(void *)(v121 + 232) = *(void *)(v122 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v121 + 240) = *(void *)(v122 + 240);
  *(void *)(v121 + 248) = *(void *)(v122 + 248);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v133 = v123[24];
  uint64_t v134 = (void *)(v121 + v133);
  uint64_t v135 = (const void *)(v122 + v133);
  uint64_t v136 = type metadata accessor for Date();
  int v137 = __swift_getEnumTagSinglePayload((uint64_t)v134, 1, v136);
  int v138 = __swift_getEnumTagSinglePayload((uint64_t)v135, 1, v136);
  if (v137)
  {
    if (!v138)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v136 - 8) + 16))(v134, v135, v136);
      __swift_storeEnumTagSinglePayload((uint64_t)v134, 0, 1, v136);
      goto LABEL_157;
    }
    goto LABEL_156;
  }
  uint64_t v325 = *(void *)(v136 - 8);
  if (v138)
  {
    (*(void (**)(void *, uint64_t))(v325 + 8))(v134, v136);
LABEL_156:
    uint64_t v326 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v134, v135, *(void *)(*(void *)(v326 - 8) + 64));
    goto LABEL_157;
  }
  (*(void (**)(void *, const void *, uint64_t))(v325 + 24))(v134, v135, v136);
LABEL_157:
  uint64_t v327 = v123[25];
  uint64_t v328 = (void *)(v121 + v327);
  uint64_t v329 = (const void *)(v122 + v327);
  int v330 = __swift_getEnumTagSinglePayload(v121 + v327, 1, v136);
  int v331 = __swift_getEnumTagSinglePayload((uint64_t)v329, 1, v136);
  if (v330)
  {
    if (!v331)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v136 - 8) + 16))(v328, v329, v136);
      __swift_storeEnumTagSinglePayload((uint64_t)v328, 0, 1, v136);
      goto LABEL_190;
    }
    goto LABEL_189;
  }
  uint64_t v356 = *(void *)(v136 - 8);
  if (v331)
  {
    (*(void (**)(void *, uint64_t))(v356 + 8))(v328, v136);
LABEL_189:
    uint64_t v357 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v328, v329, *(void *)(*(void *)(v357 - 8) + 64));
    goto LABEL_190;
  }
  (*(void (**)(void *, const void *, uint64_t))(v356 + 24))(v328, v329, v136);
LABEL_190:
  uint64_t v358 = v123[26];
  uint64_t v359 = v121 + v358;
  uint64_t v360 = v122 + v358;
  uint64_t v361 = type metadata accessor for URL();
  int v362 = __swift_getEnumTagSinglePayload(v359, 1, v361);
  int v363 = __swift_getEnumTagSinglePayload(v360, 1, v361);
  if (v362)
  {
    if (!v363)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v361 - 8) + 16))(v359, v360, v361);
      uint64_t v148 = v359;
      uint64_t v149 = v361;
LABEL_91:
      __swift_storeEnumTagSinglePayload(v148, 0, 1, v149);
      goto LABEL_92;
    }
    goto LABEL_210;
  }
  uint64_t v446 = *(void *)(v361 - 8);
  if (v363)
  {
    (*(void (**)(uint64_t, uint64_t))(v446 + 8))(v359, v361);
LABEL_210:
    size_t v130 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                 - 8)
                     + 64);
    uint64_t v131 = (void *)v359;
    uint64_t v132 = (const void *)v360;
    goto LABEL_79;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v446 + 24))(v359, v360, v361);
LABEL_92:
  uint64_t v150 = a3[10];
  uint64_t v151 = (uint64_t)v5 + v150;
  uint64_t v152 = (uint64_t)v4 + v150;
  uint64_t v153 = (int *)type metadata accessor for Trip(0);
  int v154 = __swift_getEnumTagSinglePayload(v151, 1, (uint64_t)v153);
  int v155 = __swift_getEnumTagSinglePayload(v152, 1, (uint64_t)v153);
  if (v154)
  {
    if (!v155)
    {
      *(void *)uint64_t v151 = *(void *)v152;
      *(void *)(v151 + 8) = *(void *)(v152 + 8);
      *(void *)(v151 + 16) = *(void *)(v152 + 16);
      *(void *)(v151 + 24) = *(void *)(v152 + 24);
      *(void *)(v151 + 32) = *(void *)(v152 + 32);
      *(void *)(v151 + 40) = *(void *)(v152 + 40);
      *(void *)(v151 + 48) = *(void *)(v152 + 48);
      *(void *)(v151 + 56) = *(void *)(v152 + 56);
      *(void *)(v151 + 64) = *(void *)(v152 + 64);
      *(void *)(v151 + 72) = *(void *)(v152 + 72);
      *(void *)(v151 + 80) = *(void *)(v152 + 80);
      *(void *)(v151 + 88) = *(void *)(v152 + 88);
      *(void *)(v151 + 96) = *(void *)(v152 + 96);
      *(void *)(v151 + 104) = *(void *)(v152 + 104);
      *(void *)(v151 + 112) = *(void *)(v152 + 112);
      *(void *)(v151 + 120) = *(void *)(v152 + 120);
      *(unsigned char *)(v151 + 128) = *(unsigned char *)(v152 + 128);
      *(unsigned char *)(v151 + 129) = *(unsigned char *)(v152 + 129);
      *(unsigned char *)(v151 + 130) = *(unsigned char *)(v152 + 130);
      *(void *)(v151 + 136) = *(void *)(v152 + 136);
      *(void *)(v151 + 144) = *(void *)(v152 + 144);
      *(void *)(v151 + 152) = *(void *)(v152 + 152);
      *(void *)(v151 + 160) = *(void *)(v152 + 160);
      *(void *)(v151 + 168) = *(void *)(v152 + 168);
      *(void *)(v151 + 176) = *(void *)(v152 + 176);
      *(void *)(v151 + 184) = *(void *)(v152 + 184);
      *(void *)(v151 + 192) = *(void *)(v152 + 192);
      *(void *)(v151 + 200) = *(void *)(v152 + 200);
      *(void *)(v151 + 208) = *(void *)(v152 + 208);
      *(void *)(v151 + 216) = *(void *)(v152 + 216);
      uint64_t v156 = v153[22];
      v666 = (void *)(v151 + v156);
      v654 = (const void *)(v152 + v156);
      uint64_t v653 = type metadata accessor for Date();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v654, 1, v653))
      {
        uint64_t v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v666, v654, *(void *)(*(void *)(v157 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v653 - 8) + 16))(v666, v654, v653);
        __swift_storeEnumTagSinglePayload((uint64_t)v666, 0, 1, v653);
      }
      uint64_t v167 = v153[23];
      uint64_t v168 = (void *)(v151 + v167);
      uint64_t v169 = (const void *)(v152 + v167);
      uint64_t v5 = v674;
      if (__swift_getEnumTagSinglePayload(v152 + v167, 1, v653))
      {
        uint64_t v170 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v168, v169, *(void *)(*(void *)(v170 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v653 - 8) + 16))(v168, v169, v653);
        __swift_storeEnumTagSinglePayload((uint64_t)v168, 0, 1, v653);
      }
      uint64_t v171 = v153[24];
      uint64_t v172 = v151 + v171;
      uint64_t v173 = (uint64_t *)(v152 + v171);
      uint64_t v174 = *v173;
      *(unsigned char *)(v172 + 8) = *((unsigned char *)v173 + 8);
      *(void *)uint64_t v172 = v174;
      uint64_t v175 = v153[25];
      uint64_t v176 = (void *)(v151 + v175);
      uint64_t v177 = (const void *)(v152 + v175);
      uint64_t v178 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v177, 1, v178))
      {
        uint64_t v179 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v176, v177, *(void *)(*(void *)(v179 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v178 - 8) + 16))(v176, v177, v178);
        __swift_storeEnumTagSinglePayload((uint64_t)v176, 0, 1, v178);
      }
      uint64_t v180 = v151;
      uint64_t v181 = (uint64_t)v153;
      goto LABEL_111;
    }
    goto LABEL_98;
  }
  if (v155)
  {
    outlined destroy of PartialExtractedAttributes(v151, (void (*)(void))type metadata accessor for Trip);
LABEL_98:
    size_t v158 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?)
                                 - 8)
                     + 64);
    uint64_t v159 = (void *)v151;
    uint64_t v160 = (const void *)v152;
LABEL_99:
    memcpy(v159, v160, v158);
    goto LABEL_112;
  }
  *(void *)uint64_t v151 = *(void *)v152;
  *(void *)(v151 + 8) = *(void *)(v152 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v151 + 16) = *(void *)(v152 + 16);
  *(void *)(v151 + 24) = *(void *)(v152 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v151 + 32) = *(void *)(v152 + 32);
  *(void *)(v151 + 40) = *(void *)(v152 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v151 + 48) = *(void *)(v152 + 48);
  *(void *)(v151 + 56) = *(void *)(v152 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v151 + 64) = *(void *)(v152 + 64);
  *(void *)(v151 + 72) = *(void *)(v152 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v151 + 80) = *(void *)(v152 + 80);
  *(void *)(v151 + 88) = *(void *)(v152 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v151 + 96) = *(void *)(v152 + 96);
  *(void *)(v151 + 104) = *(void *)(v152 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v151 + 112) = *(void *)(v152 + 112);
  *(void *)(v151 + 120) = *(void *)(v152 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v151 + 128) = *(unsigned char *)(v152 + 128);
  *(unsigned char *)(v151 + 129) = *(unsigned char *)(v152 + 129);
  *(unsigned char *)(v151 + 130) = *(unsigned char *)(v152 + 130);
  *(void *)(v151 + 136) = *(void *)(v152 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v151 + 144) = *(void *)(v152 + 144);
  *(void *)(v151 + 152) = *(void *)(v152 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v151 + 160) = *(void *)(v152 + 160);
  *(void *)(v151 + 168) = *(void *)(v152 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v151 + 176) = *(void *)(v152 + 176);
  *(void *)(v151 + 184) = *(void *)(v152 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v151 + 192) = *(void *)(v152 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v151 + 200) = *(void *)(v152 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v151 + 208) = *(void *)(v152 + 208);
  *(void *)(v151 + 216) = *(void *)(v152 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v161 = v153[22];
  uint64_t v162 = (void *)(v151 + v161);
  uint64_t v163 = (const void *)(v152 + v161);
  uint64_t v164 = type metadata accessor for Date();
  int v165 = __swift_getEnumTagSinglePayload((uint64_t)v162, 1, v164);
  int v166 = __swift_getEnumTagSinglePayload((uint64_t)v163, 1, v164);
  if (v165)
  {
    if (!v166)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v164 - 8) + 16))(v162, v163, v164);
      __swift_storeEnumTagSinglePayload((uint64_t)v162, 0, 1, v164);
      goto LABEL_163;
    }
    goto LABEL_162;
  }
  uint64_t v332 = *(void *)(v164 - 8);
  if (v166)
  {
    (*(void (**)(void *, uint64_t))(v332 + 8))(v162, v164);
LABEL_162:
    uint64_t v333 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v162, v163, *(void *)(*(void *)(v333 - 8) + 64));
    goto LABEL_163;
  }
  (*(void (**)(void *, const void *, uint64_t))(v332 + 24))(v162, v163, v164);
LABEL_163:
  uint64_t v334 = v153[23];
  uint64_t v335 = (void *)(v151 + v334);
  uint64_t v336 = (const void *)(v152 + v334);
  int v337 = __swift_getEnumTagSinglePayload(v151 + v334, 1, v164);
  int v338 = __swift_getEnumTagSinglePayload((uint64_t)v336, 1, v164);
  if (v337)
  {
    if (!v338)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v164 - 8) + 16))(v335, v336, v164);
      __swift_storeEnumTagSinglePayload((uint64_t)v335, 0, 1, v164);
      goto LABEL_196;
    }
    goto LABEL_195;
  }
  uint64_t v364 = *(void *)(v164 - 8);
  if (v338)
  {
    (*(void (**)(void *, uint64_t))(v364 + 8))(v335, v164);
LABEL_195:
    uint64_t v365 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v335, v336, *(void *)(*(void *)(v365 - 8) + 64));
    goto LABEL_196;
  }
  (*(void (**)(void *, const void *, uint64_t))(v364 + 24))(v335, v336, v164);
LABEL_196:
  uint64_t v366 = v153[24];
  uint64_t v367 = v151 + v366;
  uint64_t v368 = (uint64_t *)(v152 + v366);
  uint64_t v369 = *v368;
  *(unsigned char *)(v367 + 8) = *((unsigned char *)v368 + 8);
  *(void *)uint64_t v367 = v369;
  uint64_t v370 = v153[25];
  uint64_t v371 = v151 + v370;
  uint64_t v372 = v152 + v370;
  uint64_t v373 = type metadata accessor for URL();
  int v374 = __swift_getEnumTagSinglePayload(v371, 1, v373);
  int v375 = __swift_getEnumTagSinglePayload(v372, 1, v373);
  if (v374)
  {
    if (!v375)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v373 - 8) + 16))(v371, v372, v373);
      uint64_t v180 = v371;
      uint64_t v181 = v373;
LABEL_111:
      __swift_storeEnumTagSinglePayload(v180, 0, 1, v181);
      goto LABEL_112;
    }
    goto LABEL_213;
  }
  uint64_t v447 = *(void *)(v373 - 8);
  if (v375)
  {
    (*(void (**)(uint64_t, uint64_t))(v447 + 8))(v371, v373);
LABEL_213:
    size_t v158 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                 - 8)
                     + 64);
    uint64_t v159 = (void *)v371;
    uint64_t v160 = (const void *)v372;
    goto LABEL_99;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v447 + 24))(v371, v372, v373);
LABEL_112:
  uint64_t v182 = a3[11];
  uint64_t v183 = (uint64_t)v5 + v182;
  uint64_t v184 = (uint64_t)v4 + v182;
  uint64_t v185 = (int *)type metadata accessor for FlightReservation(0);
  int v186 = __swift_getEnumTagSinglePayload(v183, 1, (uint64_t)v185);
  int v187 = __swift_getEnumTagSinglePayload(v184, 1, (uint64_t)v185);
  if (!v186)
  {
    if (v187)
    {
      outlined destroy of PartialExtractedAttributes(v183, (void (*)(void))type metadata accessor for FlightReservation);
      goto LABEL_118;
    }
    *(void *)uint64_t v183 = *(void *)v184;
    *(void *)(v183 + 8) = *(void *)(v184 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v183 + 16) = *(void *)(v184 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v183 + 24) = *(void *)(v184 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v183 + 32) = *(void *)(v184 + 32);
    *(void *)(v183 + 40) = *(void *)(v184 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v183 + 48) = *(void *)(v184 + 48);
    *(void *)(v183 + 56) = *(void *)(v184 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v183 + 64) = *(void *)(v184 + 64);
    *(void *)(v183 + 72) = *(void *)(v184 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v183 + 80) = *(void *)(v184 + 80);
    *(void *)(v183 + 88) = *(void *)(v184 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v183 + 96) = *(unsigned char *)(v184 + 96);
    *(void *)(v183 + 104) = *(void *)(v184 + 104);
    *(void *)(v183 + 112) = *(void *)(v184 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v191 = v185[13];
    uint64_t v192 = (void *)(v183 + v191);
    uint64_t v193 = (const void *)(v184 + v191);
    uint64_t v194 = type metadata accessor for URL();
    int v195 = __swift_getEnumTagSinglePayload((uint64_t)v192, 1, v194);
    int v196 = __swift_getEnumTagSinglePayload((uint64_t)v193, 1, v194);
    if (v195)
    {
      if (!v196)
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v194 - 8) + 16))(v192, v193, v194);
        __swift_storeEnumTagSinglePayload((uint64_t)v192, 0, 1, v194);
        goto LABEL_169;
      }
    }
    else
    {
      uint64_t v339 = *(void *)(v194 - 8);
      if (!v196)
      {
        (*(void (**)(void *, const void *, uint64_t))(v339 + 24))(v192, v193, v194);
LABEL_169:
        uint64_t v341 = v185[14];
        uint64_t v342 = (void *)(v183 + v341);
        uint64_t v343 = (const void *)(v184 + v341);
        int v344 = __swift_getEnumTagSinglePayload(v183 + v341, 1, v194);
        int v345 = __swift_getEnumTagSinglePayload((uint64_t)v343, 1, v194);
        if (v344)
        {
          if (!v345)
          {
            (*(void (**)(void *, const void *, uint64_t))(*(void *)(v194 - 8) + 16))(v342, v343, v194);
            __swift_storeEnumTagSinglePayload((uint64_t)v342, 0, 1, v194);
            goto LABEL_202;
          }
        }
        else
        {
          uint64_t v376 = *(void *)(v194 - 8);
          if (!v345)
          {
            (*(void (**)(void *, const void *, uint64_t))(v376 + 24))(v342, v343, v194);
LABEL_202:
            uint64_t v378 = v185[15];
            uint64_t v379 = (void *)(v183 + v378);
            uint64_t v380 = (void *)(v184 + v378);
            *uint64_t v379 = *v380;
            v379[1] = v380[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v381 = v185[16];
            uint64_t v382 = (void *)(v183 + v381);
            uint64_t v383 = (void *)(v184 + v381);
            *uint64_t v382 = *v383;
            v382[1] = v383[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v384 = v185[17];
            uint64_t v385 = (void *)(v183 + v384);
            uint64_t v386 = (void *)(v184 + v384);
            *uint64_t v385 = *v386;
            v385[1] = v386[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v387 = v185[18];
            uint64_t v388 = v183 + v387;
            uint64_t v389 = v184 + v387;
            uint64_t v390 = type metadata accessor for DateComponents();
            uint64_t v391 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v390 - 8) + 24);
            v391(v388, v389, v390);
            v391(v183 + v185[19], v184 + v185[19], v390);
            uint64_t v392 = v185[20];
            uint64_t v393 = (void *)(v183 + v392);
            uint64_t v394 = (void *)(v184 + v392);
            *uint64_t v393 = *v394;
            v393[1] = v394[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v395 = v185[21];
            uint64_t v396 = (void *)(v183 + v395);
            uint64_t v397 = (void *)(v184 + v395);
            *uint64_t v396 = *v397;
            v396[1] = v397[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v398 = v185[22];
            uint64_t v399 = (void *)(v183 + v398);
            uint64_t v400 = (void *)(v184 + v398);
            *uint64_t v399 = *v400;
            v399[1] = v400[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v401 = v185[23];
            uint64_t v402 = (void *)(v183 + v401);
            uint64_t v403 = (void *)(v184 + v401);
            *uint64_t v402 = *v403;
            v402[1] = v403[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v404 = v185[24];
            uint64_t v405 = (void *)(v183 + v404);
            uint64_t v406 = (void *)(v184 + v404);
            *uint64_t v405 = *v406;
            v405[1] = v406[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v407 = v185[25];
            uint64_t v408 = (void *)(v183 + v407);
            uint64_t v409 = (void *)(v184 + v407);
            *uint64_t v408 = *v409;
            v408[1] = v409[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v410 = v185[26];
            uint64_t v411 = (void *)(v183 + v410);
            uint64_t v412 = (void *)(v184 + v410);
            *uint64_t v411 = *v412;
            v411[1] = v412[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v413 = v185[27];
            uint64_t v414 = (void *)(v183 + v413);
            uint64_t v415 = (void *)(v184 + v413);
            *uint64_t v414 = *v415;
            v414[1] = v415[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v416 = v185[28];
            uint64_t v417 = (void *)(v183 + v416);
            uint64_t v418 = (void *)(v184 + v416);
            *uint64_t v417 = *v418;
            v417[1] = v418[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v419 = v185[29];
            uint64_t v420 = (void *)(v183 + v419);
            uint64_t v421 = (void *)(v184 + v419);
            *uint64_t v420 = *v421;
            v420[1] = v421[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v422 = v185[30];
            uint64_t v423 = (void *)(v183 + v422);
            uint64_t v424 = (void *)(v184 + v422);
            *uint64_t v423 = *v424;
            v423[1] = v424[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v425 = v185[31];
            uint64_t v426 = (void *)(v183 + v425);
            uint64_t v427 = (void *)(v184 + v425);
            *uint64_t v426 = *v427;
            v426[1] = v427[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v428 = v185[32];
            uint64_t v429 = (void *)(v183 + v428);
            uint64_t v430 = (void *)(v184 + v428);
            *uint64_t v429 = *v430;
            v429[1] = v430[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(void *)(v183 + v185[33]) = *(void *)(v184 + v185[33]);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(void *)(v183 + v185[34]) = *(void *)(v184 + v185[34]);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v431 = v185[35];
            uint64_t v432 = (void *)(v183 + v431);
            uint64_t v433 = (void *)(v184 + v431);
            *uint64_t v432 = *v433;
            v432[1] = v433[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v434 = v185[36];
            uint64_t v435 = (void *)(v183 + v434);
            uint64_t v436 = (void *)(v184 + v434);
            *uint64_t v435 = *v436;
            v435[1] = v436[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v437 = v185[37];
            uint64_t v438 = (void *)(v183 + v437);
            uint64_t v439 = (void *)(v184 + v437);
            *uint64_t v438 = *v439;
            v438[1] = v439[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v440 = v185[38];
            uint64_t v441 = (void *)(v183 + v440);
            uint64_t v442 = (const void *)(v184 + v440);
            uint64_t v443 = type metadata accessor for Date();
            LODWORD(v391) = __swift_getEnumTagSinglePayload((uint64_t)v441, 1, v443);
            int v444 = __swift_getEnumTagSinglePayload((uint64_t)v442, 1, v443);
            if (v391)
            {
              if (!v444)
              {
                (*(void (**)(void *, const void *, uint64_t))(*(void *)(v443 - 8) + 16))(v441, v442, v443);
                __swift_storeEnumTagSinglePayload((uint64_t)v441, 0, 1, v443);
LABEL_217:
                uint64_t v450 = v185[39];
                uint64_t v451 = (void *)(v183 + v450);
                uint64_t v452 = (void *)(v184 + v450);
                *uint64_t v451 = *v452;
                v451[1] = v452[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                uint64_t v453 = v185[40];
                uint64_t v454 = (void *)(v183 + v453);
                uint64_t v455 = (void *)(v184 + v453);
                *uint64_t v454 = *v455;
                v454[1] = v455[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                uint64_t v456 = v185[41];
                uint64_t v457 = v183 + v456;
                uint64_t v458 = (uint64_t *)(v184 + v456);
                uint64_t v459 = *v458;
                *(unsigned char *)(v457 + 8) = *((unsigned char *)v458 + 8);
                *(void *)uint64_t v457 = v459;
                uint64_t v460 = v185[42];
                uint64_t v461 = (void *)(v183 + v460);
                uint64_t v462 = (void *)(v184 + v460);
                *uint64_t v461 = *v462;
                v461[1] = v462[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                uint64_t v463 = v185[43];
                uint64_t v464 = v183 + v463;
                uint64_t v465 = (long long *)(v184 + v463);
                long long v466 = *v465;
                *(void *)(v464 + 13) = *(void *)((char *)v465 + 13);
                *(_OWORD *)uint64_t v464 = v466;
                uint64_t v467 = v185[44];
                uint64_t v468 = (void *)(v183 + v467);
                uint64_t v469 = (void *)(v184 + v467);
                *uint64_t v468 = *v469;
                v468[1] = v469[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                uint64_t v470 = v185[45];
                uint64_t v471 = (void *)(v183 + v470);
                uint64_t v472 = (void *)(v184 + v470);
                *uint64_t v471 = *v472;
                v471[1] = v472[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                uint64_t v473 = v185[46];
                uint64_t v474 = (void *)(v183 + v473);
                uint64_t v475 = (void *)(v184 + v473);
                *uint64_t v474 = *v475;
                v474[1] = v475[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                uint64_t v476 = v185[47];
                uint64_t v477 = (void *)(v183 + v476);
                uint64_t v478 = (void *)(v184 + v476);
                *uint64_t v477 = *v478;
                v477[1] = v478[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                goto LABEL_218;
              }
            }
            else
            {
              uint64_t v448 = *(void *)(v443 - 8);
              if (!v444)
              {
                (*(void (**)(void *, const void *, uint64_t))(v448 + 24))(v441, v442, v443);
                goto LABEL_217;
              }
              (*(void (**)(void *, uint64_t))(v448 + 8))(v441, v443);
            }
            uint64_t v449 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v441, v442, *(void *)(*(void *)(v449 - 8) + 64));
            goto LABEL_217;
          }
          (*(void (**)(void *, uint64_t))(v376 + 8))(v342, v194);
        }
        uint64_t v377 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v342, v343, *(void *)(*(void *)(v377 - 8) + 64));
        goto LABEL_202;
      }
      (*(void (**)(void *, uint64_t))(v339 + 8))(v192, v194);
    }
    uint64_t v340 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v192, v193, *(void *)(*(void *)(v340 - 8) + 64));
    goto LABEL_169;
  }
  if (v187)
  {
LABEL_118:
    uint64_t v190 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
    memcpy((void *)v183, (const void *)v184, *(void *)(*(void *)(v190 - 8) + 64));
    goto LABEL_218;
  }
  *(void *)uint64_t v183 = *(void *)v184;
  *(void *)(v183 + 8) = *(void *)(v184 + 8);
  *(void *)(v183 + 16) = *(void *)(v184 + 16);
  *(void *)(v183 + 24) = *(void *)(v184 + 24);
  *(void *)(v183 + 32) = *(void *)(v184 + 32);
  *(void *)(v183 + 40) = *(void *)(v184 + 40);
  *(void *)(v183 + 48) = *(void *)(v184 + 48);
  *(void *)(v183 + 56) = *(void *)(v184 + 56);
  *(void *)(v183 + 64) = *(void *)(v184 + 64);
  *(void *)(v183 + 72) = *(void *)(v184 + 72);
  *(void *)(v183 + 80) = *(void *)(v184 + 80);
  *(void *)(v183 + 88) = *(void *)(v184 + 88);
  *(unsigned char *)(v183 + 96) = *(unsigned char *)(v184 + 96);
  *(void *)(v183 + 104) = *(void *)(v184 + 104);
  *(void *)(v183 + 112) = *(void *)(v184 + 112);
  uint64_t v188 = v185[13];
  v668 = (void *)(v183 + v188);
  v656 = (const void *)(v184 + v188);
  uint64_t v658 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v656, 1, v658))
  {
    uint64_t v189 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v668, v656, *(void *)(*(void *)(v189 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v658 - 8) + 16))(v668, v656, v658);
    __swift_storeEnumTagSinglePayload((uint64_t)v668, 0, 1, v658);
  }
  uint64_t v197 = v185[14];
  uint64_t v198 = (void *)(v183 + v197);
  uint64_t v199 = (const void *)(v184 + v197);
  if (__swift_getEnumTagSinglePayload(v184 + v197, 1, v658))
  {
    uint64_t v200 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v198, v199, *(void *)(*(void *)(v200 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v658 - 8) + 16))(v198, v199, v658);
    __swift_storeEnumTagSinglePayload((uint64_t)v198, 0, 1, v658);
  }
  uint64_t v201 = v185[15];
  uint64_t v202 = (void *)(v183 + v201);
  uint64_t v203 = (void *)(v184 + v201);
  void *v202 = *v203;
  v202[1] = v203[1];
  uint64_t v204 = v185[16];
  uint64_t v205 = (void *)(v183 + v204);
  uint64_t v206 = (void *)(v184 + v204);
  *uint64_t v205 = *v206;
  v205[1] = v206[1];
  uint64_t v207 = v185[17];
  uint64_t v208 = (void *)(v183 + v207);
  uint64_t v209 = (void *)(v184 + v207);
  *uint64_t v208 = *v209;
  v208[1] = v209[1];
  uint64_t v210 = v185[18];
  uint64_t v669 = v183 + v210;
  uint64_t v211 = v184 + v210;
  uint64_t v212 = type metadata accessor for DateComponents();
  uint64_t v213 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v212 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v213(v669, v211, v212);
  v213(v183 + v185[19], v184 + v185[19], v212);
  uint64_t v214 = v185[20];
  uint64_t v215 = (void *)(v183 + v214);
  uint64_t v216 = (void *)(v184 + v214);
  *uint64_t v215 = *v216;
  v215[1] = v216[1];
  uint64_t v217 = v185[21];
  uint64_t v218 = (void *)(v183 + v217);
  uint64_t v219 = (void *)(v184 + v217);
  *uint64_t v218 = *v219;
  v218[1] = v219[1];
  uint64_t v220 = v185[22];
  uint64_t v221 = (void *)(v183 + v220);
  uint64_t v222 = (void *)(v184 + v220);
  *uint64_t v221 = *v222;
  v221[1] = v222[1];
  uint64_t v223 = v185[23];
  uint64_t v224 = (void *)(v183 + v223);
  uint64_t v225 = (void *)(v184 + v223);
  *uint64_t v224 = *v225;
  v224[1] = v225[1];
  uint64_t v226 = v185[24];
  uint64_t v227 = (void *)(v183 + v226);
  uint64_t v228 = (void *)(v184 + v226);
  *uint64_t v227 = *v228;
  v227[1] = v228[1];
  uint64_t v229 = v185[25];
  uint64_t v230 = (void *)(v183 + v229);
  uint64_t v231 = (void *)(v184 + v229);
  *uint64_t v230 = *v231;
  v230[1] = v231[1];
  uint64_t v232 = v185[26];
  uint64_t v233 = (void *)(v183 + v232);
  uint64_t v234 = (void *)(v184 + v232);
  *uint64_t v233 = *v234;
  v233[1] = v234[1];
  uint64_t v235 = v185[27];
  uint64_t v236 = (void *)(v183 + v235);
  uint64_t v237 = (void *)(v184 + v235);
  *uint64_t v236 = *v237;
  v236[1] = v237[1];
  uint64_t v238 = v185[28];
  uint64_t v239 = (void *)(v183 + v238);
  uint64_t v240 = (void *)(v184 + v238);
  *uint64_t v239 = *v240;
  v239[1] = v240[1];
  uint64_t v241 = v185[29];
  uint64_t v242 = (void *)(v183 + v241);
  uint64_t v243 = (void *)(v184 + v241);
  *uint64_t v242 = *v243;
  v242[1] = v243[1];
  uint64_t v244 = v185[30];
  uint64_t v245 = (void *)(v183 + v244);
  uint64_t v246 = (void *)(v184 + v244);
  *uint64_t v245 = *v246;
  v245[1] = v246[1];
  uint64_t v247 = v185[31];
  uint64_t v248 = (void *)(v183 + v247);
  uint64_t v249 = (void *)(v184 + v247);
  *uint64_t v248 = *v249;
  v248[1] = v249[1];
  uint64_t v250 = v185[32];
  uint64_t v251 = (void *)(v183 + v250);
  uint64_t v252 = (void *)(v184 + v250);
  *uint64_t v251 = *v252;
  v251[1] = v252[1];
  *(void *)(v183 + v185[33]) = *(void *)(v184 + v185[33]);
  *(void *)(v183 + v185[34]) = *(void *)(v184 + v185[34]);
  uint64_t v253 = v185[35];
  uint64_t v254 = (void *)(v183 + v253);
  uint64_t v255 = (void *)(v184 + v253);
  *uint64_t v254 = *v255;
  v254[1] = v255[1];
  uint64_t v256 = v185[36];
  uint64_t v257 = (void *)(v183 + v256);
  uint64_t v258 = (void *)(v184 + v256);
  *uint64_t v257 = *v258;
  v257[1] = v258[1];
  uint64_t v259 = v185[37];
  uint64_t v260 = (void *)(v183 + v259);
  uint64_t v261 = (void *)(v184 + v259);
  *uint64_t v260 = *v261;
  v260[1] = v261[1];
  uint64_t v262 = v185[38];
  v659 = (void *)(v183 + v262);
  v651 = (const void *)(v184 + v262);
  uint64_t v652 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v651, 1, v652))
  {
    uint64_t v263 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v659, v651, *(void *)(*(void *)(v263 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v652 - 8) + 16))(v659, v651, v652);
    __swift_storeEnumTagSinglePayload((uint64_t)v659, 0, 1, v652);
  }
  uint64_t v5 = v674;
  uint64_t v4 = v671;
  uint64_t v264 = v185[39];
  uint64_t v265 = (void *)(v183 + v264);
  uint64_t v266 = (void *)(v184 + v264);
  *uint64_t v265 = *v266;
  v265[1] = v266[1];
  uint64_t v267 = v185[40];
  uint64_t v268 = (void *)(v183 + v267);
  uint64_t v269 = (void *)(v184 + v267);
  *uint64_t v268 = *v269;
  v268[1] = v269[1];
  uint64_t v270 = v185[41];
  uint64_t v271 = v183 + v270;
  uint64_t v272 = (uint64_t *)(v184 + v270);
  uint64_t v273 = *v272;
  *(unsigned char *)(v271 + 8) = *((unsigned char *)v272 + 8);
  *(void *)uint64_t v271 = v273;
  uint64_t v274 = v185[42];
  uint64_t v275 = (void *)(v183 + v274);
  uint64_t v276 = (void *)(v184 + v274);
  *uint64_t v275 = *v276;
  v275[1] = v276[1];
  uint64_t v277 = v185[43];
  uint64_t v278 = v183 + v277;
  uint64_t v279 = (long long *)(v184 + v277);
  long long v280 = *v279;
  *(void *)(v278 + 13) = *(void *)((char *)v279 + 13);
  *(_OWORD *)uint64_t v278 = v280;
  uint64_t v281 = v185[44];
  uint64_t v282 = (void *)(v183 + v281);
  uint64_t v283 = (void *)(v184 + v281);
  *uint64_t v282 = *v283;
  v282[1] = v283[1];
  uint64_t v284 = v185[45];
  uint64_t v285 = (void *)(v183 + v284);
  uint64_t v286 = (void *)(v184 + v284);
  *uint64_t v285 = *v286;
  v285[1] = v286[1];
  uint64_t v287 = v185[46];
  uint64_t v288 = (void *)(v183 + v287);
  uint64_t v289 = (void *)(v184 + v287);
  *uint64_t v288 = *v289;
  v288[1] = v289[1];
  uint64_t v290 = v185[47];
  uint64_t v291 = (void *)(v183 + v290);
  uint64_t v292 = (void *)(v184 + v290);
  *uint64_t v291 = *v292;
  v291[1] = v292[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_storeEnumTagSinglePayload(v183, 0, 1, (uint64_t)v185);
  a3 = v672;
LABEL_218:
  uint64_t v479 = a3[12];
  uint64_t v480 = (uint64_t)v5 + v479;
  uint64_t v481 = (uint64_t)v4 + v479;
  uint64_t v482 = (int *)type metadata accessor for HotelReservation(0);
  int v483 = __swift_getEnumTagSinglePayload(v480, 1, (uint64_t)v482);
  int v484 = __swift_getEnumTagSinglePayload(v481, 1, (uint64_t)v482);
  if (!v483)
  {
    if (v484)
    {
      outlined destroy of PartialExtractedAttributes(v480, (void (*)(void))type metadata accessor for HotelReservation);
      goto LABEL_224;
    }
    *(void *)uint64_t v480 = *(void *)v481;
    *(void *)(v480 + 8) = *(void *)(v481 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v480 + 16) = *(void *)(v481 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v480 + 24) = *(void *)(v481 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v480 + 32) = *(void *)(v481 + 32);
    *(void *)(v480 + 40) = *(void *)(v481 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v480 + 48) = *(void *)(v481 + 48);
    *(void *)(v480 + 56) = *(void *)(v481 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v480 + 64) = *(void *)(v481 + 64);
    *(void *)(v480 + 72) = *(void *)(v481 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v480 + 80) = *(void *)(v481 + 80);
    *(void *)(v480 + 88) = *(void *)(v481 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v480 + 96) = *(unsigned char *)(v481 + 96);
    *(void *)(v480 + 104) = *(void *)(v481 + 104);
    *(void *)(v480 + 112) = *(void *)(v481 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v480 + 120) = *(void *)(v481 + 120);
    *(void *)(v480 + 128) = *(void *)(v481 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v488 = v482[14];
    uint64_t v489 = (void *)(v480 + v488);
    uint64_t v490 = (const void *)(v481 + v488);
    uint64_t v491 = type metadata accessor for DateComponents();
    int v492 = __swift_getEnumTagSinglePayload((uint64_t)v489, 1, v491);
    int v493 = __swift_getEnumTagSinglePayload((uint64_t)v490, 1, v491);
    if (v492)
    {
      if (!v493)
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v491 - 8) + 16))(v489, v490, v491);
        __swift_storeEnumTagSinglePayload((uint64_t)v489, 0, 1, v491);
        goto LABEL_236;
      }
    }
    else
    {
      uint64_t v537 = *(void *)(v491 - 8);
      if (!v493)
      {
        (*(void (**)(void *, const void *, uint64_t))(v537 + 24))(v489, v490, v491);
LABEL_236:
        uint64_t v539 = v482[15];
        uint64_t v540 = (void *)(v480 + v539);
        uint64_t v541 = (const void *)(v481 + v539);
        int v542 = __swift_getEnumTagSinglePayload(v480 + v539, 1, v491);
        int v543 = __swift_getEnumTagSinglePayload((uint64_t)v541, 1, v491);
        if (v542)
        {
          if (!v543)
          {
            (*(void (**)(void *, const void *, uint64_t))(*(void *)(v491 - 8) + 16))(v540, v541, v491);
            __swift_storeEnumTagSinglePayload((uint64_t)v540, 0, 1, v491);
LABEL_242:
            uint64_t v546 = v482[16];
            uint64_t v547 = (void *)(v480 + v546);
            uint64_t v548 = (void *)(v481 + v546);
            *uint64_t v547 = *v548;
            v547[1] = v548[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v549 = v482[17];
            uint64_t v550 = (void *)(v480 + v549);
            uint64_t v551 = (void *)(v481 + v549);
            *uint64_t v550 = *v551;
            v550[1] = v551[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v552 = v482[18];
            v553 = (void *)(v480 + v552);
            v554 = (void *)(v481 + v552);
            void *v553 = *v554;
            v553[1] = v554[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v555 = v482[19];
            v556 = (void *)(v480 + v555);
            v557 = (void *)(v481 + v555);
            void *v556 = *v557;
            v556[1] = v557[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v558 = v482[20];
            v559 = (void *)(v480 + v558);
            v560 = (void *)(v481 + v558);
            void *v559 = *v560;
            v559[1] = v560[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(void *)(v480 + v482[21]) = *(void *)(v481 + v482[21]);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(void *)(v480 + v482[22]) = *(void *)(v481 + v482[22]);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v561 = v482[23];
            uint64_t v562 = v480 + v561;
            v563 = (uint64_t *)(v481 + v561);
            uint64_t v564 = *v563;
            *(unsigned char *)(v562 + 8) = *((unsigned char *)v563 + 8);
            *(void *)uint64_t v562 = v564;
            uint64_t v565 = v482[24];
            uint64_t v566 = v480 + v565;
            uint64_t v567 = v481 + v565;
            LOBYTE(v564) = *(unsigned char *)(v567 + 8);
            *(void *)uint64_t v566 = *(void *)v567;
            *(unsigned char *)(v566 + 8) = v564;
            uint64_t v568 = v482[25];
            v569 = (void *)(v480 + v568);
            v570 = (void *)(v481 + v568);
            void *v569 = *v570;
            v569[1] = v570[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v571 = v482[26];
            v572 = (void *)(v480 + v571);
            v573 = (void *)(v481 + v571);
            void *v572 = *v573;
            v572[1] = v573[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v574 = v482[27];
            v575 = (void *)(v480 + v574);
            v576 = (void *)(v481 + v574);
            void *v575 = *v576;
            v575[1] = v576[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v577 = v482[28];
            v578 = (void *)(v480 + v577);
            v579 = (void *)(v481 + v577);
            void *v578 = *v579;
            v578[1] = v579[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v580 = v482[29];
            uint64_t v581 = v480 + v580;
            v582 = (uint64_t *)(v481 + v580);
            uint64_t v583 = *v582;
            *(unsigned char *)(v581 + 8) = *((unsigned char *)v582 + 8);
            *(void *)uint64_t v581 = v583;
            goto LABEL_243;
          }
        }
        else
        {
          uint64_t v544 = *(void *)(v491 - 8);
          if (!v543)
          {
            (*(void (**)(void *, const void *, uint64_t))(v544 + 24))(v540, v541, v491);
            goto LABEL_242;
          }
          (*(void (**)(void *, uint64_t))(v544 + 8))(v540, v491);
        }
        uint64_t v545 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
        memcpy(v540, v541, *(void *)(*(void *)(v545 - 8) + 64));
        goto LABEL_242;
      }
      (*(void (**)(void *, uint64_t))(v537 + 8))(v489, v491);
    }
    uint64_t v538 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v489, v490, *(void *)(*(void *)(v538 - 8) + 64));
    goto LABEL_236;
  }
  if (v484)
  {
LABEL_224:
    uint64_t v487 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
    memcpy((void *)v480, (const void *)v481, *(void *)(*(void *)(v487 - 8) + 64));
    goto LABEL_243;
  }
  *(void *)uint64_t v480 = *(void *)v481;
  *(void *)(v480 + 8) = *(void *)(v481 + 8);
  *(void *)(v480 + 16) = *(void *)(v481 + 16);
  *(void *)(v480 + 24) = *(void *)(v481 + 24);
  *(void *)(v480 + 32) = *(void *)(v481 + 32);
  *(void *)(v480 + 40) = *(void *)(v481 + 40);
  *(void *)(v480 + 48) = *(void *)(v481 + 48);
  *(void *)(v480 + 56) = *(void *)(v481 + 56);
  *(void *)(v480 + 64) = *(void *)(v481 + 64);
  *(void *)(v480 + 72) = *(void *)(v481 + 72);
  *(void *)(v480 + 80) = *(void *)(v481 + 80);
  *(void *)(v480 + 88) = *(void *)(v481 + 88);
  *(unsigned char *)(v480 + 96) = *(unsigned char *)(v481 + 96);
  *(void *)(v480 + 104) = *(void *)(v481 + 104);
  *(void *)(v480 + 112) = *(void *)(v481 + 112);
  *(void *)(v480 + 120) = *(void *)(v481 + 120);
  *(void *)(v480 + 128) = *(void *)(v481 + 128);
  uint64_t v485 = v482[14];
  v670 = (void *)(v480 + v485);
  v655 = (const void *)(v481 + v485);
  uint64_t v657 = type metadata accessor for DateComponents();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v655, 1, v657))
  {
    uint64_t v486 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v670, v655, *(void *)(*(void *)(v486 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v657 - 8) + 16))(v670, v655, v657);
    __swift_storeEnumTagSinglePayload((uint64_t)v670, 0, 1, v657);
  }
  uint64_t v494 = v482[15];
  uint64_t v495 = (void *)(v480 + v494);
  uint64_t v496 = (const void *)(v481 + v494);
  if (__swift_getEnumTagSinglePayload(v481 + v494, 1, v657))
  {
    uint64_t v497 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v495, v496, *(void *)(*(void *)(v497 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v657 - 8) + 16))(v495, v496, v657);
    __swift_storeEnumTagSinglePayload((uint64_t)v495, 0, 1, v657);
  }
  uint64_t v498 = v482[16];
  uint64_t v499 = (void *)(v480 + v498);
  uint64_t v500 = (void *)(v481 + v498);
  *uint64_t v499 = *v500;
  v499[1] = v500[1];
  uint64_t v501 = v482[17];
  uint64_t v502 = (void *)(v480 + v501);
  uint64_t v503 = (void *)(v481 + v501);
  *uint64_t v502 = *v503;
  v502[1] = v503[1];
  uint64_t v504 = v482[18];
  uint64_t v505 = (void *)(v480 + v504);
  uint64_t v506 = (void *)(v481 + v504);
  *uint64_t v505 = *v506;
  v505[1] = v506[1];
  uint64_t v507 = v482[19];
  uint64_t v508 = (void *)(v480 + v507);
  uint64_t v509 = (void *)(v481 + v507);
  *uint64_t v508 = *v509;
  v508[1] = v509[1];
  uint64_t v510 = v482[20];
  uint64_t v511 = (void *)(v480 + v510);
  uint64_t v512 = (void *)(v481 + v510);
  *uint64_t v511 = *v512;
  v511[1] = v512[1];
  *(void *)(v480 + v482[21]) = *(void *)(v481 + v482[21]);
  *(void *)(v480 + v482[22]) = *(void *)(v481 + v482[22]);
  uint64_t v513 = v482[23];
  uint64_t v514 = v480 + v513;
  uint64_t v515 = (uint64_t *)(v481 + v513);
  uint64_t v516 = *v515;
  *(unsigned char *)(v514 + 8) = *((unsigned char *)v515 + 8);
  *(void *)uint64_t v514 = v516;
  uint64_t v517 = v482[24];
  uint64_t v518 = v480 + v517;
  uint64_t v519 = (uint64_t *)(v481 + v517);
  uint64_t v520 = *v519;
  *(unsigned char *)(v518 + 8) = *((unsigned char *)v519 + 8);
  *(void *)uint64_t v518 = v520;
  uint64_t v521 = v482[25];
  uint64_t v522 = (void *)(v480 + v521);
  uint64_t v523 = (void *)(v481 + v521);
  *uint64_t v522 = *v523;
  v522[1] = v523[1];
  uint64_t v524 = v482[26];
  uint64_t v525 = (void *)(v480 + v524);
  uint64_t v526 = (void *)(v481 + v524);
  *uint64_t v525 = *v526;
  v525[1] = v526[1];
  uint64_t v527 = v482[27];
  uint64_t v528 = (void *)(v480 + v527);
  uint64_t v529 = (void *)(v481 + v527);
  *uint64_t v528 = *v529;
  v528[1] = v529[1];
  uint64_t v530 = v482[28];
  uint64_t v531 = (void *)(v480 + v530);
  uint64_t v532 = (void *)(v481 + v530);
  *uint64_t v531 = *v532;
  v531[1] = v532[1];
  uint64_t v533 = v482[29];
  uint64_t v534 = v480 + v533;
  uint64_t v535 = (uint64_t *)(v481 + v533);
  uint64_t v536 = *v535;
  *(unsigned char *)(v534 + 8) = *((unsigned char *)v535 + 8);
  *(void *)uint64_t v534 = v536;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_storeEnumTagSinglePayload(v480, 0, 1, (uint64_t)v482);
  a3 = v672;
  uint64_t v5 = v674;
  uint64_t v4 = v671;
LABEL_243:
  uint64_t v584 = a3[13];
  uint64_t v585 = (uint64_t)v5 + v584;
  uint64_t v586 = (uint64_t)v4 + v584;
  v587 = (int *)type metadata accessor for RestaurantReservation(0);
  int v588 = __swift_getEnumTagSinglePayload(v585, 1, (uint64_t)v587);
  int v589 = __swift_getEnumTagSinglePayload(v586, 1, (uint64_t)v587);
  if (!v588)
  {
    if (v589)
    {
      outlined destroy of PartialExtractedAttributes(v585, (void (*)(void))type metadata accessor for RestaurantReservation);
      goto LABEL_249;
    }
    *(void *)uint64_t v585 = *(void *)v586;
    *(void *)(v585 + 8) = *(void *)(v586 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v585 + 16) = *(void *)(v586 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v585 + 24) = *(void *)(v586 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v585 + 32) = *(void *)(v586 + 32);
    *(void *)(v585 + 40) = *(void *)(v586 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v585 + 48) = *(void *)(v586 + 48);
    *(void *)(v585 + 56) = *(void *)(v586 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v585 + 64) = *(void *)(v586 + 64);
    *(void *)(v585 + 72) = *(void *)(v586 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v585 + 80) = *(void *)(v586 + 80);
    *(void *)(v585 + 88) = *(void *)(v586 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v585 + 96) = *(unsigned char *)(v586 + 96);
    *(void *)(v585 + 104) = *(void *)(v586 + 104);
    *(void *)(v585 + 112) = *(void *)(v586 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v585 + 120) = *(void *)(v586 + 120);
    *(void *)(v585 + 128) = *(void *)(v586 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v593 = v587[14];
    v594 = (void *)(v585 + v593);
    v595 = (const void *)(v586 + v593);
    uint64_t v596 = type metadata accessor for DateComponents();
    int v597 = __swift_getEnumTagSinglePayload((uint64_t)v594, 1, v596);
    int v598 = __swift_getEnumTagSinglePayload((uint64_t)v595, 1, v596);
    if (v597)
    {
      if (!v598)
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v596 - 8) + 16))(v594, v595, v596);
        __swift_storeEnumTagSinglePayload((uint64_t)v594, 0, 1, v596);
LABEL_258:
        uint64_t v625 = v587[15];
        v626 = (void *)(v585 + v625);
        v627 = (void *)(v586 + v625);
        void *v626 = *v627;
        v626[1] = v627[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v628 = v587[16];
        v629 = (void *)(v585 + v628);
        v630 = (void *)(v586 + v628);
        void *v629 = *v630;
        v629[1] = v630[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v631 = v587[17];
        v632 = (void *)(v585 + v631);
        v633 = (void *)(v586 + v631);
        void *v632 = *v633;
        v632[1] = v633[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v634 = v587[18];
        v635 = (void *)(v585 + v634);
        v636 = (void *)(v586 + v634);
        void *v635 = *v636;
        v635[1] = v636[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v637 = v587[19];
        v638 = (void *)(v585 + v637);
        v639 = (void *)(v586 + v637);
        void *v638 = *v639;
        v638[1] = v639[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(v585 + v587[20]) = *(void *)(v586 + v587[20]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v640 = v587[21];
        v641 = (void *)(v585 + v640);
        v642 = (void *)(v586 + v640);
        void *v641 = *v642;
        v641[1] = v642[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v643 = v587[22];
        v644 = (void *)(v585 + v643);
        v645 = (void *)(v586 + v643);
        void *v644 = *v645;
        v644[1] = v645[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v646 = v587[23];
        v647 = (void *)(v585 + v646);
        v648 = (void *)(v586 + v646);
        void *v647 = *v648;
        v647[1] = v648[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return v5;
      }
    }
    else
    {
      uint64_t v623 = *(void *)(v596 - 8);
      if (!v598)
      {
        (*(void (**)(void *, const void *, uint64_t))(v623 + 24))(v594, v595, v596);
        goto LABEL_258;
      }
      (*(void (**)(void *, uint64_t))(v623 + 8))(v594, v596);
    }
    uint64_t v624 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v594, v595, *(void *)(*(void *)(v624 - 8) + 64));
    goto LABEL_258;
  }
  if (v589)
  {
LABEL_249:
    uint64_t v592 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
    memcpy((void *)v585, (const void *)v586, *(void *)(*(void *)(v592 - 8) + 64));
    return v5;
  }
  *(void *)uint64_t v585 = *(void *)v586;
  *(void *)(v585 + 8) = *(void *)(v586 + 8);
  *(void *)(v585 + 16) = *(void *)(v586 + 16);
  *(void *)(v585 + 24) = *(void *)(v586 + 24);
  *(void *)(v585 + 32) = *(void *)(v586 + 32);
  *(void *)(v585 + 40) = *(void *)(v586 + 40);
  *(void *)(v585 + 48) = *(void *)(v586 + 48);
  *(void *)(v585 + 56) = *(void *)(v586 + 56);
  *(void *)(v585 + 64) = *(void *)(v586 + 64);
  *(void *)(v585 + 72) = *(void *)(v586 + 72);
  *(void *)(v585 + 80) = *(void *)(v586 + 80);
  *(void *)(v585 + 88) = *(void *)(v586 + 88);
  *(unsigned char *)(v585 + 96) = *(unsigned char *)(v586 + 96);
  *(void *)(v585 + 104) = *(void *)(v586 + 104);
  *(void *)(v585 + 112) = *(void *)(v586 + 112);
  *(void *)(v585 + 120) = *(void *)(v586 + 120);
  *(void *)(v585 + 128) = *(void *)(v586 + 128);
  uint64_t v590 = v587[14];
  v673 = (void *)(v585 + v590);
  v667 = (const void *)(v586 + v590);
  uint64_t v660 = type metadata accessor for DateComponents();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v667, 1, v660))
  {
    uint64_t v591 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v673, v667, *(void *)(*(void *)(v591 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v660 - 8) + 16))(v673, v667, v660);
    __swift_storeEnumTagSinglePayload((uint64_t)v673, 0, 1, v660);
  }
  uint64_t v599 = v587[15];
  v600 = (void *)(v585 + v599);
  v601 = (void *)(v586 + v599);
  void *v600 = *v601;
  v600[1] = v601[1];
  uint64_t v602 = v587[16];
  v603 = (void *)(v585 + v602);
  v604 = (void *)(v586 + v602);
  void *v603 = *v604;
  v603[1] = v604[1];
  uint64_t v605 = v587[17];
  v606 = (void *)(v585 + v605);
  v607 = (void *)(v586 + v605);
  void *v606 = *v607;
  v606[1] = v607[1];
  uint64_t v608 = v587[18];
  v609 = (void *)(v585 + v608);
  v610 = (void *)(v586 + v608);
  void *v609 = *v610;
  v609[1] = v610[1];
  uint64_t v611 = v587[19];
  v612 = (void *)(v585 + v611);
  v613 = (void *)(v586 + v611);
  void *v612 = *v613;
  v612[1] = v613[1];
  *(void *)(v585 + v587[20]) = *(void *)(v586 + v587[20]);
  uint64_t v614 = v587[21];
  v615 = (void *)(v585 + v614);
  v616 = (void *)(v586 + v614);
  void *v615 = *v616;
  v615[1] = v616[1];
  uint64_t v617 = v587[22];
  v618 = (void *)(v585 + v617);
  v619 = (void *)(v586 + v617);
  void *v618 = *v619;
  v618[1] = v619[1];
  uint64_t v620 = v587[23];
  v621 = (void *)(v585 + v620);
  v622 = (void *)(v586 + v620);
  void *v621 = *v622;
  v621[1] = v622[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_storeEnumTagSinglePayload(v585, 0, 1, (uint64_t)v587);
  return v674;
}

_OWORD *initializeWithTake for PartialExtractedAttributes(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (_OWORD *)((char *)a1 + v6);
  uint64_t v8 = (_OWORD *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for RentalCarReservation(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    long long v11 = v8[1];
    *uint64_t v7 = *v8;
    v7[1] = v11;
    long long v12 = v8[3];
    v7[2] = v8[2];
    v7[3] = v12;
    long long v13 = v8[5];
    v7[4] = v8[4];
    v7[5] = v13;
    long long v14 = v8[7];
    v7[6] = v8[6];
    v7[7] = v14;
    *((unsigned char *)v7 + 128) = *((unsigned char *)v8 + 128);
    *(_WORD *)((char *)v7 + 129) = *(_WORD *)((char *)v8 + 129);
    *((void *)v7 + 17) = *((void *)v8 + 17);
    long long v15 = v8[10];
    v7[9] = v8[9];
    v7[10] = v15;
    long long v16 = v8[12];
    v7[11] = v8[11];
    v7[12] = v16;
    long long v17 = v8[14];
    v7[13] = v8[13];
    v7[14] = v17;
    v7[15] = v8[15];
    *((void *)v7 + 32) = *((void *)v8 + 32);
    *(_OWORD *)((char *)v7 + 264) = *(_OWORD *)((char *)v8 + 264);
    *(_OWORD *)((char *)v7 + 280) = *(_OWORD *)((char *)v8 + 280);
    *(_OWORD *)((char *)v7 + 296) = *(_OWORD *)((char *)v8 + 296);
    *(_OWORD *)((char *)v7 + 312) = *(_OWORD *)((char *)v8 + 312);
    *(_OWORD *)((char *)v7 + 328) = *(_OWORD *)((char *)v8 + 328);
    *(_OWORD *)((char *)v7 + 344) = *(_OWORD *)((char *)v8 + 344);
    *(_OWORD *)((char *)v7 + 360) = *(_OWORD *)((char *)v8 + 360);
    *((unsigned char *)v7 + 384) = *((unsigned char *)v8 + 384);
    *((void *)v7 + 47) = *((void *)v8 + 47);
    *(_OWORD *)((char *)v7 + 392) = *(_OWORD *)((char *)v8 + 392);
    *(_OWORD *)((char *)v7 + 408) = *(_OWORD *)((char *)v8 + 408);
    uint64_t v18 = *(int *)(v9 + 140);
    uint64_t v19 = (char *)v7 + v18;
    uint64_t v20 = (char *)v8 + v18;
    uint64_t v21 = type metadata accessor for Date();
    if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
      __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v21);
    }
    uint64_t v23 = *(int *)(v9 + 144);
    int v24 = (char *)v7 + v23;
    int v25 = (char *)v8 + v23;
    if (__swift_getEnumTagSinglePayload((uint64_t)v25, 1, v21))
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v24, v25, v21);
      __swift_storeEnumTagSinglePayload((uint64_t)v24, 0, 1, v21);
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v27 = a3[6];
  uint64_t v28 = (_OWORD *)((char *)a1 + v27);
  uint64_t v29 = (_OWORD *)((char *)a2 + v27);
  uint64_t v30 = type metadata accessor for TicketedTransportation(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v30))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
    memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    long long v32 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v32;
    long long v33 = v29[3];
    v28[2] = v29[2];
    v28[3] = v33;
    long long v34 = v29[5];
    v28[4] = v29[4];
    v28[5] = v34;
    long long v35 = v29[7];
    v28[6] = v29[6];
    v28[7] = v35;
    *((unsigned char *)v28 + 128) = *((unsigned char *)v29 + 128);
    *(_WORD *)((char *)v28 + 129) = *(_WORD *)((char *)v29 + 129);
    *((void *)v28 + 17) = *((void *)v29 + 17);
    long long v36 = v29[10];
    v28[9] = v29[9];
    v28[10] = v36;
    long long v37 = v29[12];
    v28[11] = v29[11];
    v28[12] = v37;
    *((void *)v28 + 26) = *((void *)v29 + 26);
    *(_OWORD *)((char *)v28 + 216) = *(_OWORD *)((char *)v29 + 216);
    *(_OWORD *)((char *)v28 + 232) = *(_OWORD *)((char *)v29 + 232);
    *(_OWORD *)((char *)v28 + 248) = *(_OWORD *)((char *)v29 + 248);
    *(_OWORD *)((char *)v28 + 264) = *(_OWORD *)((char *)v29 + 264);
    *((unsigned char *)v28 + 296) = *((unsigned char *)v29 + 296);
    uint64_t v38 = *((void *)v29 + 36);
    *((void *)v28 + 35) = *((void *)v29 + 35);
    *((void *)v28 + 36) = v38;
    uint64_t v39 = *(int *)(v30 + 112);
    uint64_t v40 = (char *)v28 + v39;
    uint64_t v41 = (char *)v29 + v39;
    uint64_t v42 = type metadata accessor for Date();
    if (__swift_getEnumTagSinglePayload((uint64_t)v41, 1, v42))
    {
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v40, v41, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 32))(v40, v41, v42);
      __swift_storeEnumTagSinglePayload((uint64_t)v40, 0, 1, v42);
    }
    uint64_t v44 = *(int *)(v30 + 116);
    uint64_t v45 = (char *)v28 + v44;
    uint64_t v46 = (char *)v29 + v44;
    if (__swift_getEnumTagSinglePayload((uint64_t)v46, 1, v42))
    {
      uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 32))(v45, v46, v42);
      __swift_storeEnumTagSinglePayload((uint64_t)v45, 0, 1, v42);
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v30);
  }
  uint64_t v48 = a3[7];
  uint64_t v49 = (_OWORD *)((char *)a1 + v48);
  uint64_t v50 = (_OWORD *)((char *)a2 + v48);
  int v51 = (int *)type metadata accessor for TicketedShow(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v50, 1, (uint64_t)v51))
  {
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
    memcpy(v49, v50, *(void *)(*(void *)(v52 - 8) + 64));
  }
  else
  {
    long long v53 = v50[1];
    _OWORD *v49 = *v50;
    v49[1] = v53;
    long long v54 = v50[3];
    v49[2] = v50[2];
    v49[3] = v54;
    long long v55 = v50[5];
    v49[4] = v50[4];
    v49[5] = v55;
    long long v56 = v50[7];
    v49[6] = v50[6];
    v49[7] = v56;
    *((unsigned char *)v49 + 128) = *((unsigned char *)v50 + 128);
    *(_WORD *)((char *)v49 + 129) = *(_WORD *)((char *)v50 + 129);
    *((void *)v49 + 17) = *((void *)v50 + 17);
    long long v57 = v50[10];
    v49[9] = v50[9];
    v49[10] = v57;
    long long v58 = v50[12];
    v49[11] = v50[11];
    v49[12] = v58;
    long long v59 = v50[14];
    v49[13] = v50[13];
    v49[14] = v59;
    *((void *)v49 + 30) = *((void *)v50 + 30);
    *(_OWORD *)((char *)v49 + 248) = *(_OWORD *)((char *)v50 + 248);
    *(_OWORD *)((char *)v49 + 264) = *(_OWORD *)((char *)v50 + 264);
    *((unsigned char *)v49 + 296) = *((unsigned char *)v50 + 296);
    uint64_t v60 = *((void *)v50 + 36);
    *((void *)v49 + 35) = *((void *)v50 + 35);
    *((void *)v49 + 36) = v60;
    v49[19] = v50[19];
    uint64_t v61 = v51[29];
    uint64_t v62 = (char *)v49 + v61;
    int v63 = (char *)v50 + v61;
    uint64_t v64 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v63, 1, v64))
    {
      uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v62, v63, *(void *)(*(void *)(v65 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 32))(v62, v63, v64);
      __swift_storeEnumTagSinglePayload((uint64_t)v62, 0, 1, v64);
    }
    *(_OWORD *)((char *)v49 + v51[30]) = *(_OWORD *)((char *)v50 + v51[30]);
    uint64_t v66 = v51[31];
    uint64_t v67 = (char *)v49 + v66;
    uint64_t v68 = (char *)v50 + v66;
    uint64_t v69 = type metadata accessor for Date();
    if (__swift_getEnumTagSinglePayload((uint64_t)v68, 1, v69))
    {
      uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v67, v68, *(void *)(*(void *)(v70 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 32))(v67, v68, v69);
      __swift_storeEnumTagSinglePayload((uint64_t)v67, 0, 1, v69);
    }
    uint64_t v71 = v51[32];
    uint64_t v72 = (char *)v49 + v71;
    uint64_t v73 = (char *)v50 + v71;
    if (__swift_getEnumTagSinglePayload((uint64_t)v73, 1, v69))
    {
      uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v72, v73, *(void *)(*(void *)(v74 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 32))(v72, v73, v69);
      __swift_storeEnumTagSinglePayload((uint64_t)v72, 0, 1, v69);
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v49, 0, 1, (uint64_t)v51);
  }
  uint64_t v75 = a3[8];
  uint64_t v76 = (_OWORD *)((char *)a1 + v75);
  uint64_t v77 = (_OWORD *)((char *)a2 + v75);
  uint64_t v78 = type metadata accessor for Appointment(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v77, 1, v78))
  {
    uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
    memcpy(v76, v77, *(void *)(*(void *)(v79 - 8) + 64));
  }
  else
  {
    long long v80 = v77[1];
    *uint64_t v76 = *v77;
    v76[1] = v80;
    long long v81 = v77[3];
    v76[2] = v77[2];
    v76[3] = v81;
    long long v82 = v77[5];
    v76[4] = v77[4];
    v76[5] = v82;
    long long v83 = v77[7];
    v76[6] = v77[6];
    v76[7] = v83;
    *((unsigned char *)v76 + 128) = *((unsigned char *)v77 + 128);
    *(_WORD *)((char *)v76 + 129) = *(_WORD *)((char *)v77 + 129);
    *((void *)v76 + 17) = *((void *)v77 + 17);
    long long v84 = v77[10];
    v76[9] = v77[9];
    v76[10] = v84;
    long long v85 = v77[12];
    v76[11] = v77[11];
    v76[12] = v85;
    long long v86 = v77[14];
    v76[13] = v77[13];
    v76[14] = v86;
    long long v87 = v77[16];
    v76[15] = v77[15];
    v76[16] = v87;
    *((unsigned char *)v76 + 280) = *((unsigned char *)v77 + 280);
    *((void *)v76 + 34) = *((void *)v77 + 34);
    v76[18] = v77[18];
    uint64_t v88 = *(int *)(v78 + 108);
    uint64_t v89 = (char *)v76 + v88;
    uint64_t v90 = (char *)v77 + v88;
    uint64_t v91 = type metadata accessor for Date();
    if (__swift_getEnumTagSinglePayload((uint64_t)v90, 1, v91))
    {
      uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v89, v90, *(void *)(*(void *)(v92 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v91 - 8) + 32))(v89, v90, v91);
      __swift_storeEnumTagSinglePayload((uint64_t)v89, 0, 1, v91);
    }
    uint64_t v93 = *(int *)(v78 + 112);
    uint64_t v94 = (char *)v76 + v93;
    uint64_t v95 = (char *)v77 + v93;
    if (__swift_getEnumTagSinglePayload((uint64_t)v95, 1, v91))
    {
      uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v94, v95, *(void *)(*(void *)(v96 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v91 - 8) + 32))(v94, v95, v91);
      __swift_storeEnumTagSinglePayload((uint64_t)v94, 0, 1, v91);
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v76, 0, 1, v78);
  }
  uint64_t v97 = a3[9];
  int v98 = (_OWORD *)((char *)a1 + v97);
  uint64_t v99 = (_OWORD *)((char *)a2 + v97);
  uint64_t v100 = (int *)type metadata accessor for Party(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v99, 1, (uint64_t)v100))
  {
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
    memcpy(v98, v99, *(void *)(*(void *)(v101 - 8) + 64));
  }
  else
  {
    long long v102 = v99[1];
    *int v98 = *v99;
    v98[1] = v102;
    long long v103 = v99[3];
    v98[2] = v99[2];
    v98[3] = v103;
    long long v104 = v99[5];
    v98[4] = v99[4];
    v98[5] = v104;
    long long v105 = v99[7];
    v98[6] = v99[6];
    v98[7] = v105;
    *((unsigned char *)v98 + 128) = *((unsigned char *)v99 + 128);
    *(_WORD *)((char *)v98 + 129) = *(_WORD *)((char *)v99 + 129);
    *((void *)v98 + 17) = *((void *)v99 + 17);
    long long v106 = v99[10];
    v98[9] = v99[9];
    v98[10] = v106;
    long long v107 = v99[12];
    v98[11] = v99[11];
    v98[12] = v107;
    long long v108 = v99[14];
    v98[13] = v99[13];
    v98[14] = v108;
    v98[15] = v99[15];
    uint64_t v109 = v100[24];
    id v110 = (char *)v98 + v109;
    uint64_t v111 = (char *)v99 + v109;
    uint64_t v112 = type metadata accessor for Date();
    if (__swift_getEnumTagSinglePayload((uint64_t)v111, 1, v112))
    {
      uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v110, v111, *(void *)(*(void *)(v113 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v112 - 8) + 32))(v110, v111, v112);
      __swift_storeEnumTagSinglePayload((uint64_t)v110, 0, 1, v112);
    }
    uint64_t v114 = v100[25];
    uint64_t v115 = (char *)v98 + v114;
    uint64_t v116 = (char *)v99 + v114;
    if (__swift_getEnumTagSinglePayload((uint64_t)v99 + v114, 1, v112))
    {
      uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v115, v116, *(void *)(*(void *)(v117 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v112 - 8) + 32))(v115, v116, v112);
      __swift_storeEnumTagSinglePayload((uint64_t)v115, 0, 1, v112);
    }
    uint64_t v118 = v100[26];
    uint64_t v119 = (char *)v98 + v118;
    uint64_t v120 = (char *)v99 + v118;
    uint64_t v121 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v120, 1, v121))
    {
      uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v119, v120, *(void *)(*(void *)(v122 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v121 - 8) + 32))(v119, v120, v121);
      __swift_storeEnumTagSinglePayload((uint64_t)v119, 0, 1, v121);
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v98, 0, 1, (uint64_t)v100);
  }
  uint64_t v123 = a3[10];
  int v124 = (_OWORD *)((char *)a1 + v123);
  int v125 = (_OWORD *)((char *)a2 + v123);
  uint64_t v126 = (int *)type metadata accessor for Trip(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v125, 1, (uint64_t)v126))
  {
    uint64_t v127 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
    memcpy(v124, v125, *(void *)(*(void *)(v127 - 8) + 64));
  }
  else
  {
    long long v128 = v125[1];
    *int v124 = *v125;
    v124[1] = v128;
    long long v129 = v125[3];
    v124[2] = v125[2];
    v124[3] = v129;
    long long v130 = v125[5];
    v124[4] = v125[4];
    v124[5] = v130;
    long long v131 = v125[7];
    v124[6] = v125[6];
    v124[7] = v131;
    *((unsigned char *)v124 + 128) = *((unsigned char *)v125 + 128);
    *(_WORD *)((char *)v124 + 129) = *(_WORD *)((char *)v125 + 129);
    *((void *)v124 + 17) = *((void *)v125 + 17);
    long long v132 = v125[10];
    v124[9] = v125[9];
    v124[10] = v132;
    long long v133 = v125[12];
    v124[11] = v125[11];
    v124[12] = v133;
    v124[13] = v125[13];
    uint64_t v134 = v126[22];
    uint64_t v135 = (char *)v124 + v134;
    uint64_t v136 = (char *)v125 + v134;
    uint64_t v137 = type metadata accessor for Date();
    if (__swift_getEnumTagSinglePayload((uint64_t)v136, 1, v137))
    {
      uint64_t v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v135, v136, *(void *)(*(void *)(v138 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v137 - 8) + 32))(v135, v136, v137);
      __swift_storeEnumTagSinglePayload((uint64_t)v135, 0, 1, v137);
    }
    uint64_t v139 = v126[23];
    uint64_t v140 = (char *)v124 + v139;
    uint64_t v141 = (char *)v125 + v139;
    if (__swift_getEnumTagSinglePayload((uint64_t)v125 + v139, 1, v137))
    {
      uint64_t v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v140, v141, *(void *)(*(void *)(v142 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v137 - 8) + 32))(v140, v141, v137);
      __swift_storeEnumTagSinglePayload((uint64_t)v140, 0, 1, v137);
    }
    uint64_t v143 = v126[24];
    uint64_t v144 = (char *)v124 + v143;
    uint64_t v145 = (char *)v125 + v143;
    *(void *)uint64_t v144 = *(void *)v145;
    v144[8] = v145[8];
    uint64_t v146 = v126[25];
    uint64_t v147 = (char *)v124 + v146;
    uint64_t v148 = (char *)v125 + v146;
    uint64_t v149 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v148, 1, v149))
    {
      uint64_t v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v147, v148, *(void *)(*(void *)(v150 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v149 - 8) + 32))(v147, v148, v149);
      __swift_storeEnumTagSinglePayload((uint64_t)v147, 0, 1, v149);
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v124, 0, 1, (uint64_t)v126);
  }
  uint64_t v151 = a3[11];
  uint64_t v152 = (_OWORD *)((char *)a1 + v151);
  uint64_t v153 = (_OWORD *)((char *)a2 + v151);
  int v154 = (int *)type metadata accessor for FlightReservation(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v153, 1, (uint64_t)v154))
  {
    uint64_t v155 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
    memcpy(v152, v153, *(void *)(*(void *)(v155 - 8) + 64));
  }
  else
  {
    long long v156 = v153[1];
    *uint64_t v152 = *v153;
    v152[1] = v156;
    long long v157 = v153[3];
    v152[2] = v153[2];
    v152[3] = v157;
    long long v158 = v153[5];
    v152[4] = v153[4];
    v152[5] = v158;
    *((unsigned char *)v152 + 96) = *((unsigned char *)v153 + 96);
    *(_OWORD *)((char *)v152 + 104) = *(_OWORD *)((char *)v153 + 104);
    uint64_t v159 = v154[13];
    uint64_t v160 = (char *)v152 + v159;
    uint64_t v161 = (char *)v153 + v159;
    uint64_t v162 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v161, 1, v162))
    {
      uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v160, v161, *(void *)(*(void *)(v163 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v162 - 8) + 32))(v160, v161, v162);
      __swift_storeEnumTagSinglePayload((uint64_t)v160, 0, 1, v162);
    }
    uint64_t v164 = v154[14];
    int v165 = (char *)v152 + v164;
    int v166 = (char *)v153 + v164;
    if (__swift_getEnumTagSinglePayload((uint64_t)v153 + v164, 1, v162))
    {
      uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v165, v166, *(void *)(*(void *)(v167 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v162 - 8) + 32))(v165, v166, v162);
      __swift_storeEnumTagSinglePayload((uint64_t)v165, 0, 1, v162);
    }
    *(_OWORD *)((char *)v152 + v154[15]) = *(_OWORD *)((char *)v153 + v154[15]);
    *(_OWORD *)((char *)v152 + v154[16]) = *(_OWORD *)((char *)v153 + v154[16]);
    *(_OWORD *)((char *)v152 + v154[17]) = *(_OWORD *)((char *)v153 + v154[17]);
    uint64_t v168 = v154[18];
    uint64_t v169 = (char *)v152 + v168;
    uint64_t v170 = (char *)v153 + v168;
    uint64_t v171 = type metadata accessor for DateComponents();
    uint64_t v172 = *(void (**)(char *, char *, uint64_t))(*(void *)(v171 - 8) + 32);
    v172(v169, v170, v171);
    v172((char *)v152 + v154[19], (char *)v153 + v154[19], v171);
    *(_OWORD *)((char *)v152 + v154[20]) = *(_OWORD *)((char *)v153 + v154[20]);
    *(_OWORD *)((char *)v152 + v154[21]) = *(_OWORD *)((char *)v153 + v154[21]);
    *(_OWORD *)((char *)v152 + v154[22]) = *(_OWORD *)((char *)v153 + v154[22]);
    *(_OWORD *)((char *)v152 + v154[23]) = *(_OWORD *)((char *)v153 + v154[23]);
    *(_OWORD *)((char *)v152 + v154[24]) = *(_OWORD *)((char *)v153 + v154[24]);
    *(_OWORD *)((char *)v152 + v154[25]) = *(_OWORD *)((char *)v153 + v154[25]);
    *(_OWORD *)((char *)v152 + v154[26]) = *(_OWORD *)((char *)v153 + v154[26]);
    *(_OWORD *)((char *)v152 + v154[27]) = *(_OWORD *)((char *)v153 + v154[27]);
    *(_OWORD *)((char *)v152 + v154[28]) = *(_OWORD *)((char *)v153 + v154[28]);
    *(_OWORD *)((char *)v152 + v154[29]) = *(_OWORD *)((char *)v153 + v154[29]);
    *(_OWORD *)((char *)v152 + v154[30]) = *(_OWORD *)((char *)v153 + v154[30]);
    *(_OWORD *)((char *)v152 + v154[31]) = *(_OWORD *)((char *)v153 + v154[31]);
    *(_OWORD *)((char *)v152 + v154[32]) = *(_OWORD *)((char *)v153 + v154[32]);
    *(void *)((char *)v152 + v154[33]) = *(void *)((char *)v153 + v154[33]);
    *(void *)((char *)v152 + v154[34]) = *(void *)((char *)v153 + v154[34]);
    *(_OWORD *)((char *)v152 + v154[35]) = *(_OWORD *)((char *)v153 + v154[35]);
    *(_OWORD *)((char *)v152 + v154[36]) = *(_OWORD *)((char *)v153 + v154[36]);
    *(_OWORD *)((char *)v152 + v154[37]) = *(_OWORD *)((char *)v153 + v154[37]);
    uint64_t v173 = v154[38];
    uint64_t v174 = (char *)v152 + v173;
    uint64_t v175 = (char *)v153 + v173;
    uint64_t v176 = type metadata accessor for Date();
    if (__swift_getEnumTagSinglePayload((uint64_t)v175, 1, v176))
    {
      uint64_t v177 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v174, v175, *(void *)(*(void *)(v177 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v176 - 8) + 32))(v174, v175, v176);
      __swift_storeEnumTagSinglePayload((uint64_t)v174, 0, 1, v176);
    }
    *(_OWORD *)((char *)v152 + v154[39]) = *(_OWORD *)((char *)v153 + v154[39]);
    *(_OWORD *)((char *)v152 + v154[40]) = *(_OWORD *)((char *)v153 + v154[40]);
    uint64_t v178 = v154[41];
    uint64_t v179 = (char *)v152 + v178;
    uint64_t v180 = (char *)v153 + v178;
    *(void *)uint64_t v179 = *(void *)v180;
    v179[8] = v180[8];
    *(_OWORD *)((char *)v152 + v154[42]) = *(_OWORD *)((char *)v153 + v154[42]);
    uint64_t v181 = v154[43];
    uint64_t v182 = (char *)v152 + v181;
    uint64_t v183 = (char *)v153 + v181;
    *(_OWORD *)uint64_t v182 = *(_OWORD *)v183;
    *(void *)(v182 + 13) = *(void *)(v183 + 13);
    *(_OWORD *)((char *)v152 + v154[44]) = *(_OWORD *)((char *)v153 + v154[44]);
    *(_OWORD *)((char *)v152 + v154[45]) = *(_OWORD *)((char *)v153 + v154[45]);
    *(_OWORD *)((char *)v152 + v154[46]) = *(_OWORD *)((char *)v153 + v154[46]);
    *(_OWORD *)((char *)v152 + v154[47]) = *(_OWORD *)((char *)v153 + v154[47]);
    __swift_storeEnumTagSinglePayload((uint64_t)v152, 0, 1, (uint64_t)v154);
  }
  uint64_t v184 = a3[12];
  uint64_t v185 = (_OWORD *)((char *)a1 + v184);
  int v186 = (_OWORD *)((char *)a2 + v184);
  int v187 = (int *)type metadata accessor for HotelReservation(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v186, 1, (uint64_t)v187))
  {
    uint64_t v188 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
    memcpy(v185, v186, *(void *)(*(void *)(v188 - 8) + 64));
  }
  else
  {
    long long v189 = v186[1];
    *uint64_t v185 = *v186;
    v185[1] = v189;
    long long v190 = v186[3];
    v185[2] = v186[2];
    v185[3] = v190;
    long long v191 = v186[5];
    v185[4] = v186[4];
    v185[5] = v191;
    *((unsigned char *)v185 + 96) = *((unsigned char *)v186 + 96);
    *(_OWORD *)((char *)v185 + 104) = *(_OWORD *)((char *)v186 + 104);
    *(_OWORD *)((char *)v185 + 120) = *(_OWORD *)((char *)v186 + 120);
    uint64_t v192 = v187[14];
    uint64_t v193 = (char *)v185 + v192;
    uint64_t v194 = (char *)v186 + v192;
    uint64_t v195 = type metadata accessor for DateComponents();
    if (__swift_getEnumTagSinglePayload((uint64_t)v194, 1, v195))
    {
      uint64_t v196 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
      memcpy(v193, v194, *(void *)(*(void *)(v196 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v195 - 8) + 32))(v193, v194, v195);
      __swift_storeEnumTagSinglePayload((uint64_t)v193, 0, 1, v195);
    }
    uint64_t v197 = v187[15];
    uint64_t v198 = (char *)v185 + v197;
    uint64_t v199 = (char *)v186 + v197;
    if (__swift_getEnumTagSinglePayload((uint64_t)v186 + v197, 1, v195))
    {
      uint64_t v200 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
      memcpy(v198, v199, *(void *)(*(void *)(v200 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v195 - 8) + 32))(v198, v199, v195);
      __swift_storeEnumTagSinglePayload((uint64_t)v198, 0, 1, v195);
    }
    *(_OWORD *)((char *)v185 + v187[16]) = *(_OWORD *)((char *)v186 + v187[16]);
    *(_OWORD *)((char *)v185 + v187[17]) = *(_OWORD *)((char *)v186 + v187[17]);
    *(_OWORD *)((char *)v185 + v187[18]) = *(_OWORD *)((char *)v186 + v187[18]);
    *(_OWORD *)((char *)v185 + v187[19]) = *(_OWORD *)((char *)v186 + v187[19]);
    *(_OWORD *)((char *)v185 + v187[20]) = *(_OWORD *)((char *)v186 + v187[20]);
    *(void *)((char *)v185 + v187[21]) = *(void *)((char *)v186 + v187[21]);
    *(void *)((char *)v185 + v187[22]) = *(void *)((char *)v186 + v187[22]);
    uint64_t v201 = v187[23];
    uint64_t v202 = (char *)v185 + v201;
    uint64_t v203 = (char *)v186 + v201;
    v202[8] = v203[8];
    *(void *)uint64_t v202 = *(void *)v203;
    uint64_t v204 = v187[24];
    uint64_t v205 = (char *)v185 + v204;
    uint64_t v206 = (char *)v186 + v204;
    v205[8] = v206[8];
    *(void *)uint64_t v205 = *(void *)v206;
    *(_OWORD *)((char *)v185 + v187[25]) = *(_OWORD *)((char *)v186 + v187[25]);
    *(_OWORD *)((char *)v185 + v187[26]) = *(_OWORD *)((char *)v186 + v187[26]);
    *(_OWORD *)((char *)v185 + v187[27]) = *(_OWORD *)((char *)v186 + v187[27]);
    *(_OWORD *)((char *)v185 + v187[28]) = *(_OWORD *)((char *)v186 + v187[28]);
    uint64_t v207 = v187[29];
    uint64_t v208 = (char *)v185 + v207;
    uint64_t v209 = (char *)v186 + v207;
    *(void *)uint64_t v208 = *(void *)v209;
    v208[8] = v209[8];
    __swift_storeEnumTagSinglePayload((uint64_t)v185, 0, 1, (uint64_t)v187);
  }
  uint64_t v210 = a3[13];
  uint64_t v211 = (_OWORD *)((char *)a1 + v210);
  uint64_t v212 = (_OWORD *)((char *)a2 + v210);
  uint64_t v213 = (int *)type metadata accessor for RestaurantReservation(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v212, 1, (uint64_t)v213))
  {
    uint64_t v214 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
    memcpy(v211, v212, *(void *)(*(void *)(v214 - 8) + 64));
  }
  else
  {
    long long v215 = v212[1];
    *uint64_t v211 = *v212;
    v211[1] = v215;
    long long v216 = v212[3];
    v211[2] = v212[2];
    v211[3] = v216;
    long long v217 = v212[5];
    v211[4] = v212[4];
    v211[5] = v217;
    *((unsigned char *)v211 + 96) = *((unsigned char *)v212 + 96);
    *(_OWORD *)((char *)v211 + 104) = *(_OWORD *)((char *)v212 + 104);
    *(_OWORD *)((char *)v211 + 120) = *(_OWORD *)((char *)v212 + 120);
    uint64_t v218 = v213[14];
    uint64_t v219 = (char *)v211 + v218;
    uint64_t v220 = (char *)v212 + v218;
    uint64_t v221 = type metadata accessor for DateComponents();
    if (__swift_getEnumTagSinglePayload((uint64_t)v220, 1, v221))
    {
      uint64_t v222 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
      memcpy(v219, v220, *(void *)(*(void *)(v222 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v221 - 8) + 32))(v219, v220, v221);
      __swift_storeEnumTagSinglePayload((uint64_t)v219, 0, 1, v221);
    }
    *(_OWORD *)((char *)v211 + v213[15]) = *(_OWORD *)((char *)v212 + v213[15]);
    *(_OWORD *)((char *)v211 + v213[16]) = *(_OWORD *)((char *)v212 + v213[16]);
    *(_OWORD *)((char *)v211 + v213[17]) = *(_OWORD *)((char *)v212 + v213[17]);
    *(_OWORD *)((char *)v211 + v213[18]) = *(_OWORD *)((char *)v212 + v213[18]);
    *(_OWORD *)((char *)v211 + v213[19]) = *(_OWORD *)((char *)v212 + v213[19]);
    *(void *)((char *)v211 + v213[20]) = *(void *)((char *)v212 + v213[20]);
    *(_OWORD *)((char *)v211 + v213[21]) = *(_OWORD *)((char *)v212 + v213[21]);
    *(_OWORD *)((char *)v211 + v213[22]) = *(_OWORD *)((char *)v212 + v213[22]);
    *(_OWORD *)((char *)v211 + v213[23]) = *(_OWORD *)((char *)v212 + v213[23]);
    __swift_storeEnumTagSinglePayload((uint64_t)v211, 0, 1, (uint64_t)v213);
  }
  return a1;
}

void *assignWithTake for PartialExtractedAttributes(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t)a1 + v7;
  uint64_t v9 = (uint64_t)v4 + v7;
  uint64_t v10 = type metadata accessor for RentalCarReservation(0);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v8, 1, v10);
  int v12 = __swift_getEnumTagSinglePayload(v9, 1, v10);
  if (EnumTagSinglePayload)
  {
    if (!v12)
    {
      long long v13 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(_OWORD *)(v8 + 16) = v13;
      long long v14 = *(_OWORD *)(v9 + 48);
      *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
      *(_OWORD *)(v8 + 48) = v14;
      long long v15 = *(_OWORD *)(v9 + 80);
      *(_OWORD *)(v8 + 64) = *(_OWORD *)(v9 + 64);
      *(_OWORD *)(v8 + 80) = v15;
      long long v16 = *(_OWORD *)(v9 + 112);
      *(_OWORD *)(v8 + 96) = *(_OWORD *)(v9 + 96);
      *(_OWORD *)(v8 + 112) = v16;
      *(unsigned char *)(v8 + 128) = *(unsigned char *)(v9 + 128);
      *(_WORD *)(v8 + 129) = *(_WORD *)(v9 + 129);
      *(void *)(v8 + 136) = *(void *)(v9 + 136);
      long long v17 = *(_OWORD *)(v9 + 160);
      *(_OWORD *)(v8 + 144) = *(_OWORD *)(v9 + 144);
      *(_OWORD *)(v8 + 160) = v17;
      long long v18 = *(_OWORD *)(v9 + 192);
      *(_OWORD *)(v8 + 176) = *(_OWORD *)(v9 + 176);
      *(_OWORD *)(v8 + 192) = v18;
      long long v19 = *(_OWORD *)(v9 + 224);
      *(_OWORD *)(v8 + 208) = *(_OWORD *)(v9 + 208);
      *(_OWORD *)(v8 + 224) = v19;
      *(_OWORD *)(v8 + 240) = *(_OWORD *)(v9 + 240);
      *(void *)(v8 + 256) = *(void *)(v9 + 256);
      *(_OWORD *)(v8 + 264) = *(_OWORD *)(v9 + 264);
      *(_OWORD *)(v8 + 280) = *(_OWORD *)(v9 + 280);
      *(_OWORD *)(v8 + 296) = *(_OWORD *)(v9 + 296);
      *(_OWORD *)(v8 + 312) = *(_OWORD *)(v9 + 312);
      *(_OWORD *)(v8 + 328) = *(_OWORD *)(v9 + 328);
      *(_OWORD *)(v8 + 344) = *(_OWORD *)(v9 + 344);
      *(_OWORD *)(v8 + 360) = *(_OWORD *)(v9 + 360);
      *(unsigned char *)(v8 + 384) = *(unsigned char *)(v9 + 384);
      *(void *)(v8 + 376) = *(void *)(v9 + 376);
      *(_OWORD *)(v8 + 392) = *(_OWORD *)(v9 + 392);
      *(_OWORD *)(v8 + 408) = *(_OWORD *)(v9 + 408);
      uint64_t v20 = *(int *)(v10 + 140);
      uint64_t v21 = (void *)(v8 + v20);
      uint64_t v22 = (const void *)(v9 + v20);
      uint64_t v23 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v22, 1, v23))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
        __swift_storeEnumTagSinglePayload((uint64_t)v21, 0, 1, v23);
      }
      uint64_t v57 = *(int *)(v10 + 144);
      long long v58 = (void *)(v8 + v57);
      long long v59 = (const void *)(v9 + v57);
      if (__swift_getEnumTagSinglePayload((uint64_t)v59, 1, v23))
      {
        uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v23 - 8) + 32))(v58, v59, v23);
        __swift_storeEnumTagSinglePayload((uint64_t)v58, 0, 1, v23);
      }
      uint64_t v61 = v8;
      uint64_t v62 = v10;
      goto LABEL_17;
    }
    goto LABEL_7;
  }
  if (v12)
  {
    outlined destroy of PartialExtractedAttributes(v8, (void (*)(void))type metadata accessor for RentalCarReservation);
LABEL_7:
    size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?)
                                - 8)
                    + 64);
    uint64_t v26 = (void *)v8;
    uint64_t v27 = (const void *)v9;
LABEL_8:
    memcpy(v26, v27, v25);
    goto LABEL_18;
  }
  uint64_t v28 = *(void *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = v28;
  swift_bridgeObjectRelease();
  uint64_t v29 = *(void *)(v9 + 24);
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(void *)(v8 + 24) = v29;
  swift_bridgeObjectRelease();
  uint64_t v30 = *(void *)(v9 + 40);
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  *(void *)(v8 + 40) = v30;
  swift_bridgeObjectRelease();
  uint64_t v31 = *(void *)(v9 + 56);
  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  *(void *)(v8 + 56) = v31;
  swift_bridgeObjectRelease();
  uint64_t v32 = *(void *)(v9 + 72);
  *(void *)(v8 + 64) = *(void *)(v9 + 64);
  *(void *)(v8 + 72) = v32;
  swift_bridgeObjectRelease();
  uint64_t v33 = *(void *)(v9 + 88);
  *(void *)(v8 + 80) = *(void *)(v9 + 80);
  *(void *)(v8 + 88) = v33;
  swift_bridgeObjectRelease();
  uint64_t v34 = *(void *)(v9 + 104);
  *(void *)(v8 + 96) = *(void *)(v9 + 96);
  *(void *)(v8 + 104) = v34;
  swift_bridgeObjectRelease();
  uint64_t v35 = *(void *)(v9 + 120);
  *(void *)(v8 + 112) = *(void *)(v9 + 112);
  *(void *)(v8 + 120) = v35;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v8 + 128) = *(unsigned char *)(v9 + 128);
  *(unsigned char *)(v8 + 129) = *(unsigned char *)(v9 + 129);
  *(unsigned char *)(v8 + 130) = *(unsigned char *)(v9 + 130);
  *(void *)(v8 + 136) = *(void *)(v9 + 136);
  swift_bridgeObjectRelease();
  uint64_t v36 = *(void *)(v9 + 152);
  *(void *)(v8 + 144) = *(void *)(v9 + 144);
  *(void *)(v8 + 152) = v36;
  swift_bridgeObjectRelease();
  uint64_t v37 = *(void *)(v9 + 168);
  *(void *)(v8 + 160) = *(void *)(v9 + 160);
  *(void *)(v8 + 168) = v37;
  swift_bridgeObjectRelease();
  uint64_t v38 = *(void *)(v9 + 184);
  *(void *)(v8 + 176) = *(void *)(v9 + 176);
  *(void *)(v8 + 184) = v38;
  swift_bridgeObjectRelease();
  *(void *)(v8 + 192) = *(void *)(v9 + 192);
  swift_bridgeObjectRelease();
  *(void *)(v8 + 200) = *(void *)(v9 + 200);
  swift_bridgeObjectRelease();
  uint64_t v39 = *(void *)(v9 + 216);
  *(void *)(v8 + 208) = *(void *)(v9 + 208);
  *(void *)(v8 + 216) = v39;
  swift_bridgeObjectRelease();
  uint64_t v40 = *(void *)(v9 + 232);
  *(void *)(v8 + 224) = *(void *)(v9 + 224);
  *(void *)(v8 + 232) = v40;
  swift_bridgeObjectRelease();
  uint64_t v41 = *(void *)(v9 + 248);
  *(void *)(v8 + 240) = *(void *)(v9 + 240);
  *(void *)(v8 + 248) = v41;
  swift_bridgeObjectRelease();
  *(void *)(v8 + 256) = *(void *)(v9 + 256);
  swift_bridgeObjectRelease();
  uint64_t v42 = *(void *)(v9 + 272);
  *(void *)(v8 + 264) = *(void *)(v9 + 264);
  *(void *)(v8 + 272) = v42;
  swift_bridgeObjectRelease();
  uint64_t v43 = *(void *)(v9 + 288);
  *(void *)(v8 + 280) = *(void *)(v9 + 280);
  *(void *)(v8 + 288) = v43;
  swift_bridgeObjectRelease();
  uint64_t v44 = *(void *)(v9 + 304);
  *(void *)(v8 + 296) = *(void *)(v9 + 296);
  *(void *)(v8 + 304) = v44;
  swift_bridgeObjectRelease();
  uint64_t v45 = *(void *)(v9 + 320);
  *(void *)(v8 + 312) = *(void *)(v9 + 312);
  *(void *)(v8 + 320) = v45;
  swift_bridgeObjectRelease();
  uint64_t v46 = *(void *)(v9 + 336);
  *(void *)(v8 + 328) = *(void *)(v9 + 328);
  *(void *)(v8 + 336) = v46;
  swift_bridgeObjectRelease();
  uint64_t v47 = *(void *)(v9 + 352);
  *(void *)(v8 + 344) = *(void *)(v9 + 344);
  *(void *)(v8 + 352) = v47;
  swift_bridgeObjectRelease();
  uint64_t v48 = *(void *)(v9 + 368);
  *(void *)(v8 + 360) = *(void *)(v9 + 360);
  *(void *)(v8 + 368) = v48;
  swift_bridgeObjectRelease();
  *(void *)(v8 + 376) = *(void *)(v9 + 376);
  *(unsigned char *)(v8 + 384) = *(unsigned char *)(v9 + 384);
  uint64_t v49 = *(void *)(v9 + 400);
  *(void *)(v8 + 392) = *(void *)(v9 + 392);
  *(void *)(v8 + 400) = v49;
  swift_bridgeObjectRelease();
  uint64_t v50 = *(void *)(v9 + 416);
  *(void *)(v8 + 408) = *(void *)(v9 + 408);
  *(void *)(v8 + 416) = v50;
  swift_bridgeObjectRelease();
  uint64_t v51 = *(int *)(v10 + 140);
  uint64_t v52 = (void *)(v8 + v51);
  long long v53 = (const void *)(v9 + v51);
  uint64_t v54 = type metadata accessor for Date();
  int v55 = __swift_getEnumTagSinglePayload((uint64_t)v52, 1, v54);
  int v56 = __swift_getEnumTagSinglePayload((uint64_t)v53, 1, v54);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v54 - 8) + 32))(v52, v53, v54);
      __swift_storeEnumTagSinglePayload((uint64_t)v52, 0, 1, v54);
      goto LABEL_133;
    }
    goto LABEL_132;
  }
  uint64_t v368 = *(void *)(v54 - 8);
  if (v56)
  {
    (*(void (**)(void *, uint64_t))(v368 + 8))(v52, v54);
LABEL_132:
    uint64_t v369 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v52, v53, *(void *)(*(void *)(v369 - 8) + 64));
    goto LABEL_133;
  }
  (*(void (**)(void *, const void *, uint64_t))(v368 + 40))(v52, v53, v54);
LABEL_133:
  uint64_t v370 = *(int *)(v10 + 144);
  uint64_t v371 = v8 + v370;
  uint64_t v372 = v9 + v370;
  int v373 = __swift_getEnumTagSinglePayload(v371, 1, v54);
  int v374 = __swift_getEnumTagSinglePayload(v372, 1, v54);
  if (v373)
  {
    if (!v374)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 32))(v371, v372, v54);
      uint64_t v61 = v371;
      uint64_t v62 = v54;
LABEL_17:
      __swift_storeEnumTagSinglePayload(v61, 0, 1, v62);
      goto LABEL_18;
    }
    goto LABEL_174;
  }
  uint64_t v423 = *(void *)(v54 - 8);
  if (v374)
  {
    (*(void (**)(uint64_t, uint64_t))(v423 + 8))(v371, v54);
LABEL_174:
    size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                                - 8)
                    + 64);
    uint64_t v26 = (void *)v371;
    uint64_t v27 = (const void *)v372;
    goto LABEL_8;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v423 + 40))(v371, v372, v54);
LABEL_18:
  uint64_t v63 = a3[6];
  uint64_t v64 = (uint64_t)a1 + v63;
  uint64_t v65 = (uint64_t)v4 + v63;
  uint64_t v66 = type metadata accessor for TicketedTransportation(0);
  int v67 = __swift_getEnumTagSinglePayload(v64, 1, v66);
  int v68 = __swift_getEnumTagSinglePayload(v65, 1, v66);
  if (v67)
  {
    if (!v68)
    {
      long long v69 = *(_OWORD *)(v65 + 16);
      *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
      *(_OWORD *)(v64 + 16) = v69;
      long long v70 = *(_OWORD *)(v65 + 48);
      *(_OWORD *)(v64 + 32) = *(_OWORD *)(v65 + 32);
      *(_OWORD *)(v64 + 48) = v70;
      long long v71 = *(_OWORD *)(v65 + 80);
      *(_OWORD *)(v64 + 64) = *(_OWORD *)(v65 + 64);
      *(_OWORD *)(v64 + 80) = v71;
      long long v72 = *(_OWORD *)(v65 + 112);
      *(_OWORD *)(v64 + 96) = *(_OWORD *)(v65 + 96);
      *(_OWORD *)(v64 + 112) = v72;
      *(unsigned char *)(v64 + 128) = *(unsigned char *)(v65 + 128);
      *(_WORD *)(v64 + 129) = *(_WORD *)(v65 + 129);
      *(void *)(v64 + 136) = *(void *)(v65 + 136);
      long long v73 = *(_OWORD *)(v65 + 160);
      *(_OWORD *)(v64 + 144) = *(_OWORD *)(v65 + 144);
      *(_OWORD *)(v64 + 160) = v73;
      long long v74 = *(_OWORD *)(v65 + 192);
      *(_OWORD *)(v64 + 176) = *(_OWORD *)(v65 + 176);
      *(_OWORD *)(v64 + 192) = v74;
      *(void *)(v64 + 208) = *(void *)(v65 + 208);
      *(_OWORD *)(v64 + 216) = *(_OWORD *)(v65 + 216);
      *(_OWORD *)(v64 + 232) = *(_OWORD *)(v65 + 232);
      *(_OWORD *)(v64 + 248) = *(_OWORD *)(v65 + 248);
      *(_OWORD *)(v64 + 264) = *(_OWORD *)(v65 + 264);
      *(unsigned char *)(v64 + 296) = *(unsigned char *)(v65 + 296);
      uint64_t v75 = *(void *)(v65 + 288);
      *(void *)(v64 + 280) = *(void *)(v65 + 280);
      *(void *)(v64 + 288) = v75;
      uint64_t v76 = *(int *)(v66 + 112);
      uint64_t v77 = (void *)(v64 + v76);
      uint64_t v78 = (const void *)(v65 + v76);
      uint64_t v79 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v78, 1, v79))
      {
        uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v77, v78, *(void *)(*(void *)(v80 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v79 - 8) + 32))(v77, v78, v79);
        __swift_storeEnumTagSinglePayload((uint64_t)v77, 0, 1, v79);
      }
      uint64_t v105 = *(int *)(v66 + 116);
      long long v106 = (void *)(v64 + v105);
      long long v107 = (const void *)(v65 + v105);
      if (__swift_getEnumTagSinglePayload((uint64_t)v107, 1, v79))
      {
        uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v106, v107, *(void *)(*(void *)(v108 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v79 - 8) + 32))(v106, v107, v79);
        __swift_storeEnumTagSinglePayload((uint64_t)v106, 0, 1, v79);
      }
      uint64_t v109 = v64;
      uint64_t v110 = v66;
      goto LABEL_34;
    }
    goto LABEL_24;
  }
  if (v68)
  {
    outlined destroy of PartialExtractedAttributes(v64, (void (*)(void))type metadata accessor for TicketedTransportation);
LABEL_24:
    size_t v81 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?)
                                - 8)
                    + 64);
    long long v82 = (void *)v64;
    long long v83 = (const void *)v65;
LABEL_25:
    memcpy(v82, v83, v81);
    goto LABEL_35;
  }
  uint64_t v84 = *(void *)(v65 + 8);
  *(void *)uint64_t v64 = *(void *)v65;
  *(void *)(v64 + 8) = v84;
  swift_bridgeObjectRelease();
  uint64_t v85 = *(void *)(v65 + 24);
  *(void *)(v64 + 16) = *(void *)(v65 + 16);
  *(void *)(v64 + 24) = v85;
  swift_bridgeObjectRelease();
  uint64_t v86 = *(void *)(v65 + 40);
  *(void *)(v64 + 32) = *(void *)(v65 + 32);
  *(void *)(v64 + 40) = v86;
  swift_bridgeObjectRelease();
  uint64_t v87 = *(void *)(v65 + 56);
  *(void *)(v64 + 48) = *(void *)(v65 + 48);
  *(void *)(v64 + 56) = v87;
  swift_bridgeObjectRelease();
  uint64_t v88 = *(void *)(v65 + 72);
  *(void *)(v64 + 64) = *(void *)(v65 + 64);
  *(void *)(v64 + 72) = v88;
  swift_bridgeObjectRelease();
  uint64_t v89 = *(void *)(v65 + 88);
  *(void *)(v64 + 80) = *(void *)(v65 + 80);
  *(void *)(v64 + 88) = v89;
  swift_bridgeObjectRelease();
  uint64_t v90 = *(void *)(v65 + 104);
  *(void *)(v64 + 96) = *(void *)(v65 + 96);
  *(void *)(v64 + 104) = v90;
  swift_bridgeObjectRelease();
  uint64_t v91 = *(void *)(v65 + 120);
  *(void *)(v64 + 112) = *(void *)(v65 + 112);
  *(void *)(v64 + 120) = v91;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v64 + 128) = *(unsigned char *)(v65 + 128);
  *(unsigned char *)(v64 + 129) = *(unsigned char *)(v65 + 129);
  *(unsigned char *)(v64 + 130) = *(unsigned char *)(v65 + 130);
  *(void *)(v64 + 136) = *(void *)(v65 + 136);
  swift_bridgeObjectRelease();
  uint64_t v92 = *(void *)(v65 + 152);
  *(void *)(v64 + 144) = *(void *)(v65 + 144);
  *(void *)(v64 + 152) = v92;
  swift_bridgeObjectRelease();
  uint64_t v93 = *(void *)(v65 + 168);
  *(void *)(v64 + 160) = *(void *)(v65 + 160);
  *(void *)(v64 + 168) = v93;
  swift_bridgeObjectRelease();
  uint64_t v94 = *(void *)(v65 + 184);
  *(void *)(v64 + 176) = *(void *)(v65 + 176);
  *(void *)(v64 + 184) = v94;
  swift_bridgeObjectRelease();
  *(void *)(v64 + 192) = *(void *)(v65 + 192);
  swift_bridgeObjectRelease();
  *(void *)(v64 + 200) = *(void *)(v65 + 200);
  swift_bridgeObjectRelease();
  *(void *)(v64 + 208) = *(void *)(v65 + 208);
  swift_bridgeObjectRelease();
  uint64_t v95 = *(void *)(v65 + 224);
  *(void *)(v64 + 216) = *(void *)(v65 + 216);
  *(void *)(v64 + 224) = v95;
  swift_bridgeObjectRelease();
  uint64_t v96 = *(void *)(v65 + 240);
  *(void *)(v64 + 232) = *(void *)(v65 + 232);
  *(void *)(v64 + 240) = v96;
  swift_bridgeObjectRelease();
  uint64_t v97 = *(void *)(v65 + 256);
  *(void *)(v64 + 248) = *(void *)(v65 + 248);
  *(void *)(v64 + 256) = v97;
  swift_bridgeObjectRelease();
  uint64_t v98 = *(void *)(v65 + 272);
  *(void *)(v64 + 264) = *(void *)(v65 + 264);
  *(void *)(v64 + 272) = v98;
  swift_bridgeObjectRelease();
  *(void *)(v64 + 280) = *(void *)(v65 + 280);
  swift_bridgeObjectRelease();
  *(void *)(v64 + 288) = *(void *)(v65 + 288);
  *(unsigned char *)(v64 + 296) = *(unsigned char *)(v65 + 296);
  uint64_t v99 = *(int *)(v66 + 112);
  uint64_t v100 = (void *)(v64 + v99);
  uint64_t v101 = (const void *)(v65 + v99);
  uint64_t v102 = type metadata accessor for Date();
  int v103 = __swift_getEnumTagSinglePayload((uint64_t)v100, 1, v102);
  int v104 = __swift_getEnumTagSinglePayload((uint64_t)v101, 1, v102);
  if (v103)
  {
    if (!v104)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v102 - 8) + 32))(v100, v101, v102);
      __swift_storeEnumTagSinglePayload((uint64_t)v100, 0, 1, v102);
      goto LABEL_139;
    }
    goto LABEL_138;
  }
  uint64_t v375 = *(void *)(v102 - 8);
  if (v104)
  {
    (*(void (**)(void *, uint64_t))(v375 + 8))(v100, v102);
LABEL_138:
    uint64_t v376 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v100, v101, *(void *)(*(void *)(v376 - 8) + 64));
    goto LABEL_139;
  }
  (*(void (**)(void *, const void *, uint64_t))(v375 + 40))(v100, v101, v102);
LABEL_139:
  uint64_t v377 = *(int *)(v66 + 116);
  uint64_t v378 = v64 + v377;
  uint64_t v379 = v65 + v377;
  int v380 = __swift_getEnumTagSinglePayload(v378, 1, v102);
  int v381 = __swift_getEnumTagSinglePayload(v379, 1, v102);
  if (v380)
  {
    if (!v381)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v102 - 8) + 32))(v378, v379, v102);
      uint64_t v109 = v378;
      uint64_t v110 = v102;
LABEL_34:
      __swift_storeEnumTagSinglePayload(v109, 0, 1, v110);
      goto LABEL_35;
    }
    goto LABEL_177;
  }
  uint64_t v424 = *(void *)(v102 - 8);
  if (v381)
  {
    (*(void (**)(uint64_t, uint64_t))(v424 + 8))(v378, v102);
LABEL_177:
    size_t v81 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                                - 8)
                    + 64);
    long long v82 = (void *)v378;
    long long v83 = (const void *)v379;
    goto LABEL_25;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v424 + 40))(v378, v379, v102);
LABEL_35:
  uint64_t v111 = a3[7];
  uint64_t v112 = (uint64_t)a1 + v111;
  uint64_t v113 = (uint64_t)v4 + v111;
  uint64_t v114 = (int *)type metadata accessor for TicketedShow(0);
  int v115 = __swift_getEnumTagSinglePayload(v112, 1, (uint64_t)v114);
  int v116 = __swift_getEnumTagSinglePayload(v113, 1, (uint64_t)v114);
  if (v115)
  {
    if (!v116)
    {
      long long v117 = *(_OWORD *)(v113 + 16);
      *(_OWORD *)uint64_t v112 = *(_OWORD *)v113;
      *(_OWORD *)(v112 + 16) = v117;
      long long v118 = *(_OWORD *)(v113 + 48);
      *(_OWORD *)(v112 + 32) = *(_OWORD *)(v113 + 32);
      *(_OWORD *)(v112 + 48) = v118;
      long long v119 = *(_OWORD *)(v113 + 80);
      *(_OWORD *)(v112 + 64) = *(_OWORD *)(v113 + 64);
      *(_OWORD *)(v112 + 80) = v119;
      long long v120 = *(_OWORD *)(v113 + 112);
      *(_OWORD *)(v112 + 96) = *(_OWORD *)(v113 + 96);
      *(_OWORD *)(v112 + 112) = v120;
      *(unsigned char *)(v112 + 128) = *(unsigned char *)(v113 + 128);
      *(_WORD *)(v112 + 129) = *(_WORD *)(v113 + 129);
      *(void *)(v112 + 136) = *(void *)(v113 + 136);
      long long v121 = *(_OWORD *)(v113 + 160);
      *(_OWORD *)(v112 + 144) = *(_OWORD *)(v113 + 144);
      *(_OWORD *)(v112 + 160) = v121;
      long long v122 = *(_OWORD *)(v113 + 192);
      *(_OWORD *)(v112 + 176) = *(_OWORD *)(v113 + 176);
      *(_OWORD *)(v112 + 192) = v122;
      long long v123 = *(_OWORD *)(v113 + 224);
      *(_OWORD *)(v112 + 208) = *(_OWORD *)(v113 + 208);
      *(_OWORD *)(v112 + 224) = v123;
      *(void *)(v112 + 240) = *(void *)(v113 + 240);
      *(_OWORD *)(v112 + 248) = *(_OWORD *)(v113 + 248);
      *(_OWORD *)(v112 + 264) = *(_OWORD *)(v113 + 264);
      *(unsigned char *)(v112 + 296) = *(unsigned char *)(v113 + 296);
      uint64_t v124 = *(void *)(v113 + 288);
      *(void *)(v112 + 280) = *(void *)(v113 + 280);
      *(void *)(v112 + 288) = v124;
      *(_OWORD *)(v112 + 304) = *(_OWORD *)(v113 + 304);
      uint64_t v125 = v114[29];
      uint64_t v126 = (void *)(v112 + v125);
      uint64_t v127 = (const void *)(v113 + v125);
      uint64_t v128 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v127, 1, v128))
      {
        uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v126, v127, *(void *)(*(void *)(v129 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v128 - 8) + 32))(v126, v127, v128);
        __swift_storeEnumTagSinglePayload((uint64_t)v126, 0, 1, v128);
      }
      *(_OWORD *)(v112 + v114[30]) = *(_OWORD *)(v113 + v114[30]);
      uint64_t v155 = v114[31];
      long long v156 = (void *)(v112 + v155);
      long long v157 = (const void *)(v113 + v155);
      uint64_t v158 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v157, 1, v158))
      {
        uint64_t v159 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v156, v157, *(void *)(*(void *)(v159 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v158 - 8) + 32))(v156, v157, v158);
        __swift_storeEnumTagSinglePayload((uint64_t)v156, 0, 1, v158);
      }
      uint64_t v160 = v114[32];
      uint64_t v161 = (void *)(v112 + v160);
      uint64_t v162 = (const void *)(v113 + v160);
      if (__swift_getEnumTagSinglePayload((uint64_t)v162, 1, v158))
      {
        uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v161, v162, *(void *)(*(void *)(v163 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v158 - 8) + 32))(v161, v162, v158);
        __swift_storeEnumTagSinglePayload((uint64_t)v161, 0, 1, v158);
      }
      uint64_t v164 = v112;
      uint64_t v165 = (uint64_t)v114;
      goto LABEL_54;
    }
    goto LABEL_41;
  }
  if (v116)
  {
    outlined destroy of PartialExtractedAttributes(v112, (void (*)(void))type metadata accessor for TicketedShow);
LABEL_41:
    size_t v130 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?)
                                 - 8)
                     + 64);
    long long v131 = (void *)v112;
    long long v132 = (const void *)v113;
LABEL_42:
    memcpy(v131, v132, v130);
    goto LABEL_55;
  }
  uint64_t v133 = *(void *)(v113 + 8);
  *(void *)uint64_t v112 = *(void *)v113;
  *(void *)(v112 + 8) = v133;
  swift_bridgeObjectRelease();
  uint64_t v134 = *(void *)(v113 + 24);
  *(void *)(v112 + 16) = *(void *)(v113 + 16);
  *(void *)(v112 + 24) = v134;
  swift_bridgeObjectRelease();
  uint64_t v135 = *(void *)(v113 + 40);
  *(void *)(v112 + 32) = *(void *)(v113 + 32);
  *(void *)(v112 + 40) = v135;
  swift_bridgeObjectRelease();
  uint64_t v136 = *(void *)(v113 + 56);
  *(void *)(v112 + 48) = *(void *)(v113 + 48);
  *(void *)(v112 + 56) = v136;
  swift_bridgeObjectRelease();
  uint64_t v137 = *(void *)(v113 + 72);
  *(void *)(v112 + 64) = *(void *)(v113 + 64);
  *(void *)(v112 + 72) = v137;
  swift_bridgeObjectRelease();
  uint64_t v138 = *(void *)(v113 + 88);
  *(void *)(v112 + 80) = *(void *)(v113 + 80);
  *(void *)(v112 + 88) = v138;
  swift_bridgeObjectRelease();
  uint64_t v139 = *(void *)(v113 + 104);
  *(void *)(v112 + 96) = *(void *)(v113 + 96);
  *(void *)(v112 + 104) = v139;
  swift_bridgeObjectRelease();
  uint64_t v140 = *(void *)(v113 + 120);
  *(void *)(v112 + 112) = *(void *)(v113 + 112);
  *(void *)(v112 + 120) = v140;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v112 + 128) = *(unsigned char *)(v113 + 128);
  *(unsigned char *)(v112 + 129) = *(unsigned char *)(v113 + 129);
  *(unsigned char *)(v112 + 130) = *(unsigned char *)(v113 + 130);
  *(void *)(v112 + 136) = *(void *)(v113 + 136);
  swift_bridgeObjectRelease();
  uint64_t v141 = *(void *)(v113 + 152);
  *(void *)(v112 + 144) = *(void *)(v113 + 144);
  *(void *)(v112 + 152) = v141;
  swift_bridgeObjectRelease();
  uint64_t v142 = *(void *)(v113 + 168);
  *(void *)(v112 + 160) = *(void *)(v113 + 160);
  *(void *)(v112 + 168) = v142;
  swift_bridgeObjectRelease();
  uint64_t v143 = *(void *)(v113 + 184);
  *(void *)(v112 + 176) = *(void *)(v113 + 176);
  *(void *)(v112 + 184) = v143;
  swift_bridgeObjectRelease();
  *(void *)(v112 + 192) = *(void *)(v113 + 192);
  swift_bridgeObjectRelease();
  *(void *)(v112 + 200) = *(void *)(v113 + 200);
  swift_bridgeObjectRelease();
  uint64_t v144 = *(void *)(v113 + 216);
  *(void *)(v112 + 208) = *(void *)(v113 + 208);
  *(void *)(v112 + 216) = v144;
  swift_bridgeObjectRelease();
  uint64_t v145 = *(void *)(v113 + 232);
  *(void *)(v112 + 224) = *(void *)(v113 + 224);
  *(void *)(v112 + 232) = v145;
  swift_bridgeObjectRelease();
  *(void *)(v112 + 240) = *(void *)(v113 + 240);
  swift_bridgeObjectRelease();
  uint64_t v146 = *(void *)(v113 + 256);
  *(void *)(v112 + 248) = *(void *)(v113 + 248);
  *(void *)(v112 + 256) = v146;
  swift_bridgeObjectRelease();
  uint64_t v147 = *(void *)(v113 + 272);
  *(void *)(v112 + 264) = *(void *)(v113 + 264);
  *(void *)(v112 + 272) = v147;
  swift_bridgeObjectRelease();
  *(void *)(v112 + 280) = *(void *)(v113 + 280);
  swift_bridgeObjectRelease();
  *(void *)(v112 + 288) = *(void *)(v113 + 288);
  *(unsigned char *)(v112 + 296) = *(unsigned char *)(v113 + 296);
  uint64_t v148 = *(void *)(v113 + 312);
  *(void *)(v112 + 304) = *(void *)(v113 + 304);
  *(void *)(v112 + 312) = v148;
  swift_bridgeObjectRelease();
  uint64_t v149 = v114[29];
  uint64_t v150 = (void *)(v112 + v149);
  uint64_t v151 = (const void *)(v113 + v149);
  uint64_t v152 = type metadata accessor for URL();
  int v153 = __swift_getEnumTagSinglePayload((uint64_t)v150, 1, v152);
  int v154 = __swift_getEnumTagSinglePayload((uint64_t)v151, 1, v152);
  if (v153)
  {
    if (!v154)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v152 - 8) + 32))(v150, v151, v152);
      __swift_storeEnumTagSinglePayload((uint64_t)v150, 0, 1, v152);
      goto LABEL_145;
    }
    goto LABEL_144;
  }
  uint64_t v382 = *(void *)(v152 - 8);
  if (v154)
  {
    (*(void (**)(void *, uint64_t))(v382 + 8))(v150, v152);
LABEL_144:
    uint64_t v383 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v150, v151, *(void *)(*(void *)(v383 - 8) + 64));
    goto LABEL_145;
  }
  (*(void (**)(void *, const void *, uint64_t))(v382 + 40))(v150, v151, v152);
LABEL_145:
  uint64_t v384 = v114[30];
  uint64_t v385 = (void *)(v112 + v384);
  uint64_t v386 = (uint64_t *)(v113 + v384);
  uint64_t v388 = *v386;
  uint64_t v387 = v386[1];
  *uint64_t v385 = v388;
  v385[1] = v387;
  swift_bridgeObjectRelease();
  uint64_t v389 = v114[31];
  uint64_t v390 = (void *)(v112 + v389);
  uint64_t v391 = (const void *)(v113 + v389);
  uint64_t v392 = type metadata accessor for Date();
  int v393 = __swift_getEnumTagSinglePayload((uint64_t)v390, 1, v392);
  int v394 = __swift_getEnumTagSinglePayload((uint64_t)v391, 1, v392);
  if (v393)
  {
    if (!v394)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v392 - 8) + 32))(v390, v391, v392);
      __swift_storeEnumTagSinglePayload((uint64_t)v390, 0, 1, v392);
      goto LABEL_181;
    }
    goto LABEL_180;
  }
  uint64_t v425 = *(void *)(v392 - 8);
  if (v394)
  {
    (*(void (**)(void *, uint64_t))(v425 + 8))(v390, v392);
LABEL_180:
    uint64_t v426 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v390, v391, *(void *)(*(void *)(v426 - 8) + 64));
    goto LABEL_181;
  }
  (*(void (**)(void *, const void *, uint64_t))(v425 + 40))(v390, v391, v392);
LABEL_181:
  uint64_t v427 = v114[32];
  uint64_t v428 = v112 + v427;
  uint64_t v429 = v113 + v427;
  int v430 = __swift_getEnumTagSinglePayload(v428, 1, v392);
  int v431 = __swift_getEnumTagSinglePayload(v429, 1, v392);
  if (v430)
  {
    if (!v431)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v392 - 8) + 32))(v428, v429, v392);
      uint64_t v164 = v428;
      uint64_t v165 = v392;
LABEL_54:
      __swift_storeEnumTagSinglePayload(v164, 0, 1, v165);
      goto LABEL_55;
    }
    goto LABEL_207;
  }
  uint64_t v559 = *(void *)(v392 - 8);
  if (v431)
  {
    (*(void (**)(uint64_t, uint64_t))(v559 + 8))(v428, v392);
LABEL_207:
    size_t v130 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                                 - 8)
                     + 64);
    long long v131 = (void *)v428;
    long long v132 = (const void *)v429;
    goto LABEL_42;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v559 + 40))(v428, v429, v392);
LABEL_55:
  uint64_t v166 = a3[8];
  uint64_t v167 = (uint64_t)a1 + v166;
  uint64_t v168 = (uint64_t)v4 + v166;
  uint64_t v169 = type metadata accessor for Appointment(0);
  int v170 = __swift_getEnumTagSinglePayload(v167, 1, v169);
  int v171 = __swift_getEnumTagSinglePayload(v168, 1, v169);
  if (v170)
  {
    if (!v171)
    {
      long long v172 = *(_OWORD *)(v168 + 16);
      *(_OWORD *)uint64_t v167 = *(_OWORD *)v168;
      *(_OWORD *)(v167 + 16) = v172;
      long long v173 = *(_OWORD *)(v168 + 48);
      *(_OWORD *)(v167 + 32) = *(_OWORD *)(v168 + 32);
      *(_OWORD *)(v167 + 48) = v173;
      long long v174 = *(_OWORD *)(v168 + 80);
      *(_OWORD *)(v167 + 64) = *(_OWORD *)(v168 + 64);
      *(_OWORD *)(v167 + 80) = v174;
      long long v175 = *(_OWORD *)(v168 + 112);
      *(_OWORD *)(v167 + 96) = *(_OWORD *)(v168 + 96);
      *(_OWORD *)(v167 + 112) = v175;
      *(unsigned char *)(v167 + 128) = *(unsigned char *)(v168 + 128);
      *(_WORD *)(v167 + 129) = *(_WORD *)(v168 + 129);
      *(void *)(v167 + 136) = *(void *)(v168 + 136);
      long long v176 = *(_OWORD *)(v168 + 160);
      *(_OWORD *)(v167 + 144) = *(_OWORD *)(v168 + 144);
      *(_OWORD *)(v167 + 160) = v176;
      long long v177 = *(_OWORD *)(v168 + 192);
      *(_OWORD *)(v167 + 176) = *(_OWORD *)(v168 + 176);
      *(_OWORD *)(v167 + 192) = v177;
      long long v178 = *(_OWORD *)(v168 + 224);
      *(_OWORD *)(v167 + 208) = *(_OWORD *)(v168 + 208);
      *(_OWORD *)(v167 + 224) = v178;
      long long v179 = *(_OWORD *)(v168 + 256);
      *(_OWORD *)(v167 + 240) = *(_OWORD *)(v168 + 240);
      *(_OWORD *)(v167 + 256) = v179;
      *(unsigned char *)(v167 + 280) = *(unsigned char *)(v168 + 280);
      *(void *)(v167 + 272) = *(void *)(v168 + 272);
      *(_OWORD *)(v167 + 288) = *(_OWORD *)(v168 + 288);
      uint64_t v180 = *(int *)(v169 + 108);
      uint64_t v181 = (void *)(v167 + v180);
      uint64_t v182 = (const void *)(v168 + v180);
      uint64_t v183 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v182, 1, v183))
      {
        uint64_t v184 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v181, v182, *(void *)(*(void *)(v184 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v183 - 8) + 32))(v181, v182, v183);
        __swift_storeEnumTagSinglePayload((uint64_t)v181, 0, 1, v183);
      }
      uint64_t v210 = *(int *)(v169 + 112);
      uint64_t v211 = (void *)(v167 + v210);
      uint64_t v212 = (const void *)(v168 + v210);
      if (__swift_getEnumTagSinglePayload((uint64_t)v212, 1, v183))
      {
        uint64_t v213 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v211, v212, *(void *)(*(void *)(v213 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v183 - 8) + 32))(v211, v212, v183);
        __swift_storeEnumTagSinglePayload((uint64_t)v211, 0, 1, v183);
      }
      uint64_t v214 = v167;
      uint64_t v215 = v169;
      goto LABEL_71;
    }
    goto LABEL_61;
  }
  if (v171)
  {
    outlined destroy of PartialExtractedAttributes(v167, (void (*)(void))type metadata accessor for Appointment);
LABEL_61:
    size_t v185 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?)
                                 - 8)
                     + 64);
    int v186 = (void *)v167;
    int v187 = (const void *)v168;
LABEL_62:
    memcpy(v186, v187, v185);
    goto LABEL_72;
  }
  uint64_t v188 = *(void *)(v168 + 8);
  *(void *)uint64_t v167 = *(void *)v168;
  *(void *)(v167 + 8) = v188;
  swift_bridgeObjectRelease();
  uint64_t v189 = *(void *)(v168 + 24);
  *(void *)(v167 + 16) = *(void *)(v168 + 16);
  *(void *)(v167 + 24) = v189;
  swift_bridgeObjectRelease();
  uint64_t v190 = *(void *)(v168 + 40);
  *(void *)(v167 + 32) = *(void *)(v168 + 32);
  *(void *)(v167 + 40) = v190;
  swift_bridgeObjectRelease();
  uint64_t v191 = *(void *)(v168 + 56);
  *(void *)(v167 + 48) = *(void *)(v168 + 48);
  *(void *)(v167 + 56) = v191;
  swift_bridgeObjectRelease();
  uint64_t v192 = *(void *)(v168 + 72);
  *(void *)(v167 + 64) = *(void *)(v168 + 64);
  *(void *)(v167 + 72) = v192;
  swift_bridgeObjectRelease();
  uint64_t v193 = *(void *)(v168 + 88);
  *(void *)(v167 + 80) = *(void *)(v168 + 80);
  *(void *)(v167 + 88) = v193;
  swift_bridgeObjectRelease();
  uint64_t v194 = *(void *)(v168 + 104);
  *(void *)(v167 + 96) = *(void *)(v168 + 96);
  *(void *)(v167 + 104) = v194;
  swift_bridgeObjectRelease();
  uint64_t v195 = *(void *)(v168 + 120);
  *(void *)(v167 + 112) = *(void *)(v168 + 112);
  *(void *)(v167 + 120) = v195;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v167 + 128) = *(unsigned char *)(v168 + 128);
  *(unsigned char *)(v167 + 129) = *(unsigned char *)(v168 + 129);
  *(unsigned char *)(v167 + 130) = *(unsigned char *)(v168 + 130);
  *(void *)(v167 + 136) = *(void *)(v168 + 136);
  swift_bridgeObjectRelease();
  uint64_t v196 = *(void *)(v168 + 152);
  *(void *)(v167 + 144) = *(void *)(v168 + 144);
  *(void *)(v167 + 152) = v196;
  swift_bridgeObjectRelease();
  uint64_t v197 = *(void *)(v168 + 168);
  *(void *)(v167 + 160) = *(void *)(v168 + 160);
  *(void *)(v167 + 168) = v197;
  swift_bridgeObjectRelease();
  uint64_t v198 = *(void *)(v168 + 184);
  *(void *)(v167 + 176) = *(void *)(v168 + 176);
  *(void *)(v167 + 184) = v198;
  swift_bridgeObjectRelease();
  *(void *)(v167 + 192) = *(void *)(v168 + 192);
  swift_bridgeObjectRelease();
  *(void *)(v167 + 200) = *(void *)(v168 + 200);
  swift_bridgeObjectRelease();
  uint64_t v199 = *(void *)(v168 + 216);
  *(void *)(v167 + 208) = *(void *)(v168 + 208);
  *(void *)(v167 + 216) = v199;
  swift_bridgeObjectRelease();
  uint64_t v200 = *(void *)(v168 + 232);
  *(void *)(v167 + 224) = *(void *)(v168 + 224);
  *(void *)(v167 + 232) = v200;
  swift_bridgeObjectRelease();
  uint64_t v201 = *(void *)(v168 + 248);
  *(void *)(v167 + 240) = *(void *)(v168 + 240);
  *(void *)(v167 + 248) = v201;
  swift_bridgeObjectRelease();
  uint64_t v202 = *(void *)(v168 + 264);
  *(void *)(v167 + 256) = *(void *)(v168 + 256);
  *(void *)(v167 + 264) = v202;
  swift_bridgeObjectRelease();
  *(void *)(v167 + 272) = *(void *)(v168 + 272);
  *(unsigned char *)(v167 + 280) = *(unsigned char *)(v168 + 280);
  uint64_t v203 = *(void *)(v168 + 296);
  *(void *)(v167 + 288) = *(void *)(v168 + 288);
  *(void *)(v167 + 296) = v203;
  swift_bridgeObjectRelease();
  uint64_t v204 = *(int *)(v169 + 108);
  uint64_t v205 = (void *)(v167 + v204);
  uint64_t v206 = (const void *)(v168 + v204);
  uint64_t v207 = type metadata accessor for Date();
  int v208 = __swift_getEnumTagSinglePayload((uint64_t)v205, 1, v207);
  int v209 = __swift_getEnumTagSinglePayload((uint64_t)v206, 1, v207);
  if (v208)
  {
    if (!v209)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v207 - 8) + 32))(v205, v206, v207);
      __swift_storeEnumTagSinglePayload((uint64_t)v205, 0, 1, v207);
      goto LABEL_151;
    }
    goto LABEL_150;
  }
  uint64_t v395 = *(void *)(v207 - 8);
  if (v209)
  {
    (*(void (**)(void *, uint64_t))(v395 + 8))(v205, v207);
LABEL_150:
    uint64_t v396 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v205, v206, *(void *)(*(void *)(v396 - 8) + 64));
    goto LABEL_151;
  }
  (*(void (**)(void *, const void *, uint64_t))(v395 + 40))(v205, v206, v207);
LABEL_151:
  uint64_t v397 = *(int *)(v169 + 112);
  uint64_t v398 = v167 + v397;
  uint64_t v399 = v168 + v397;
  int v400 = __swift_getEnumTagSinglePayload(v398, 1, v207);
  int v401 = __swift_getEnumTagSinglePayload(v399, 1, v207);
  if (v400)
  {
    if (!v401)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v207 - 8) + 32))(v398, v399, v207);
      uint64_t v214 = v398;
      uint64_t v215 = v207;
LABEL_71:
      __swift_storeEnumTagSinglePayload(v214, 0, 1, v215);
      goto LABEL_72;
    }
    goto LABEL_186;
  }
  uint64_t v432 = *(void *)(v207 - 8);
  if (v401)
  {
    (*(void (**)(uint64_t, uint64_t))(v432 + 8))(v398, v207);
LABEL_186:
    size_t v185 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                                 - 8)
                     + 64);
    int v186 = (void *)v398;
    int v187 = (const void *)v399;
    goto LABEL_62;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v432 + 40))(v398, v399, v207);
LABEL_72:
  uint64_t v216 = a3[9];
  uint64_t v217 = (uint64_t)a1 + v216;
  uint64_t v218 = (uint64_t)v4 + v216;
  uint64_t v219 = (int *)type metadata accessor for Party(0);
  int v220 = __swift_getEnumTagSinglePayload(v217, 1, (uint64_t)v219);
  int v221 = __swift_getEnumTagSinglePayload(v218, 1, (uint64_t)v219);
  if (v220)
  {
    if (!v221)
    {
      long long v222 = *(_OWORD *)(v218 + 16);
      *(_OWORD *)uint64_t v217 = *(_OWORD *)v218;
      *(_OWORD *)(v217 + 16) = v222;
      long long v223 = *(_OWORD *)(v218 + 48);
      *(_OWORD *)(v217 + 32) = *(_OWORD *)(v218 + 32);
      *(_OWORD *)(v217 + 48) = v223;
      long long v224 = *(_OWORD *)(v218 + 80);
      *(_OWORD *)(v217 + 64) = *(_OWORD *)(v218 + 64);
      *(_OWORD *)(v217 + 80) = v224;
      long long v225 = *(_OWORD *)(v218 + 112);
      *(_OWORD *)(v217 + 96) = *(_OWORD *)(v218 + 96);
      *(_OWORD *)(v217 + 112) = v225;
      *(unsigned char *)(v217 + 128) = *(unsigned char *)(v218 + 128);
      *(_WORD *)(v217 + 129) = *(_WORD *)(v218 + 129);
      *(void *)(v217 + 136) = *(void *)(v218 + 136);
      long long v226 = *(_OWORD *)(v218 + 160);
      *(_OWORD *)(v217 + 144) = *(_OWORD *)(v218 + 144);
      *(_OWORD *)(v217 + 160) = v226;
      long long v227 = *(_OWORD *)(v218 + 192);
      *(_OWORD *)(v217 + 176) = *(_OWORD *)(v218 + 176);
      *(_OWORD *)(v217 + 192) = v227;
      long long v228 = *(_OWORD *)(v218 + 224);
      *(_OWORD *)(v217 + 208) = *(_OWORD *)(v218 + 208);
      *(_OWORD *)(v217 + 224) = v228;
      *(_OWORD *)(v217 + 240) = *(_OWORD *)(v218 + 240);
      uint64_t v229 = v219[24];
      uint64_t v230 = (void *)(v217 + v229);
      uint64_t v231 = (const void *)(v218 + v229);
      uint64_t v232 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v231, 1, v232))
      {
        uint64_t v233 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v230, v231, *(void *)(*(void *)(v233 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v232 - 8) + 32))(v230, v231, v232);
        __swift_storeEnumTagSinglePayload((uint64_t)v230, 0, 1, v232);
      }
      uint64_t v257 = v219[25];
      uint64_t v258 = (void *)(v217 + v257);
      uint64_t v259 = (const void *)(v218 + v257);
      if (__swift_getEnumTagSinglePayload(v218 + v257, 1, v232))
      {
        uint64_t v260 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v258, v259, *(void *)(*(void *)(v260 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v232 - 8) + 32))(v258, v259, v232);
        __swift_storeEnumTagSinglePayload((uint64_t)v258, 0, 1, v232);
      }
      uint64_t v261 = v219[26];
      uint64_t v262 = (void *)(v217 + v261);
      uint64_t v263 = (const void *)(v218 + v261);
      uint64_t v264 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v263, 1, v264))
      {
        uint64_t v265 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v262, v263, *(void *)(*(void *)(v265 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v264 - 8) + 32))(v262, v263, v264);
        __swift_storeEnumTagSinglePayload((uint64_t)v262, 0, 1, v264);
      }
      uint64_t v266 = v217;
      uint64_t v267 = (uint64_t)v219;
      goto LABEL_91;
    }
    goto LABEL_78;
  }
  if (v221)
  {
    outlined destroy of PartialExtractedAttributes(v217, (void (*)(void))type metadata accessor for Party);
LABEL_78:
    size_t v234 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?)
                                 - 8)
                     + 64);
    uint64_t v235 = (void *)v217;
    uint64_t v236 = (const void *)v218;
LABEL_79:
    memcpy(v235, v236, v234);
    goto LABEL_92;
  }
  uint64_t v237 = *(void *)(v218 + 8);
  *(void *)uint64_t v217 = *(void *)v218;
  *(void *)(v217 + 8) = v237;
  swift_bridgeObjectRelease();
  uint64_t v238 = *(void *)(v218 + 24);
  *(void *)(v217 + 16) = *(void *)(v218 + 16);
  *(void *)(v217 + 24) = v238;
  swift_bridgeObjectRelease();
  uint64_t v239 = *(void *)(v218 + 40);
  *(void *)(v217 + 32) = *(void *)(v218 + 32);
  *(void *)(v217 + 40) = v239;
  swift_bridgeObjectRelease();
  uint64_t v240 = *(void *)(v218 + 56);
  *(void *)(v217 + 48) = *(void *)(v218 + 48);
  *(void *)(v217 + 56) = v240;
  swift_bridgeObjectRelease();
  uint64_t v241 = *(void *)(v218 + 72);
  *(void *)(v217 + 64) = *(void *)(v218 + 64);
  *(void *)(v217 + 72) = v241;
  swift_bridgeObjectRelease();
  uint64_t v242 = *(void *)(v218 + 88);
  *(void *)(v217 + 80) = *(void *)(v218 + 80);
  *(void *)(v217 + 88) = v242;
  swift_bridgeObjectRelease();
  uint64_t v243 = *(void *)(v218 + 104);
  *(void *)(v217 + 96) = *(void *)(v218 + 96);
  *(void *)(v217 + 104) = v243;
  swift_bridgeObjectRelease();
  uint64_t v244 = *(void *)(v218 + 120);
  *(void *)(v217 + 112) = *(void *)(v218 + 112);
  *(void *)(v217 + 120) = v244;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v217 + 128) = *(unsigned char *)(v218 + 128);
  *(unsigned char *)(v217 + 129) = *(unsigned char *)(v218 + 129);
  *(unsigned char *)(v217 + 130) = *(unsigned char *)(v218 + 130);
  *(void *)(v217 + 136) = *(void *)(v218 + 136);
  swift_bridgeObjectRelease();
  uint64_t v245 = *(void *)(v218 + 152);
  *(void *)(v217 + 144) = *(void *)(v218 + 144);
  *(void *)(v217 + 152) = v245;
  swift_bridgeObjectRelease();
  uint64_t v246 = *(void *)(v218 + 168);
  *(void *)(v217 + 160) = *(void *)(v218 + 160);
  *(void *)(v217 + 168) = v246;
  swift_bridgeObjectRelease();
  uint64_t v247 = *(void *)(v218 + 184);
  *(void *)(v217 + 176) = *(void *)(v218 + 176);
  *(void *)(v217 + 184) = v247;
  swift_bridgeObjectRelease();
  *(void *)(v217 + 192) = *(void *)(v218 + 192);
  swift_bridgeObjectRelease();
  *(void *)(v217 + 200) = *(void *)(v218 + 200);
  swift_bridgeObjectRelease();
  uint64_t v248 = *(void *)(v218 + 216);
  *(void *)(v217 + 208) = *(void *)(v218 + 208);
  *(void *)(v217 + 216) = v248;
  swift_bridgeObjectRelease();
  uint64_t v249 = *(void *)(v218 + 232);
  *(void *)(v217 + 224) = *(void *)(v218 + 224);
  *(void *)(v217 + 232) = v249;
  swift_bridgeObjectRelease();
  uint64_t v250 = *(void *)(v218 + 248);
  *(void *)(v217 + 240) = *(void *)(v218 + 240);
  *(void *)(v217 + 248) = v250;
  swift_bridgeObjectRelease();
  uint64_t v251 = v219[24];
  uint64_t v252 = (void *)(v217 + v251);
  uint64_t v253 = (const void *)(v218 + v251);
  uint64_t v254 = type metadata accessor for Date();
  int v255 = __swift_getEnumTagSinglePayload((uint64_t)v252, 1, v254);
  int v256 = __swift_getEnumTagSinglePayload((uint64_t)v253, 1, v254);
  if (v255)
  {
    if (!v256)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v254 - 8) + 32))(v252, v253, v254);
      __swift_storeEnumTagSinglePayload((uint64_t)v252, 0, 1, v254);
      goto LABEL_157;
    }
    goto LABEL_156;
  }
  uint64_t v402 = *(void *)(v254 - 8);
  if (v256)
  {
    (*(void (**)(void *, uint64_t))(v402 + 8))(v252, v254);
LABEL_156:
    uint64_t v403 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v252, v253, *(void *)(*(void *)(v403 - 8) + 64));
    goto LABEL_157;
  }
  (*(void (**)(void *, const void *, uint64_t))(v402 + 40))(v252, v253, v254);
LABEL_157:
  uint64_t v404 = v219[25];
  uint64_t v405 = (void *)(v217 + v404);
  uint64_t v406 = (const void *)(v218 + v404);
  int v407 = __swift_getEnumTagSinglePayload(v217 + v404, 1, v254);
  int v408 = __swift_getEnumTagSinglePayload((uint64_t)v406, 1, v254);
  if (v407)
  {
    if (!v408)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v254 - 8) + 32))(v405, v406, v254);
      __swift_storeEnumTagSinglePayload((uint64_t)v405, 0, 1, v254);
      goto LABEL_190;
    }
    goto LABEL_189;
  }
  uint64_t v433 = *(void *)(v254 - 8);
  if (v408)
  {
    (*(void (**)(void *, uint64_t))(v433 + 8))(v405, v254);
LABEL_189:
    uint64_t v434 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v405, v406, *(void *)(*(void *)(v434 - 8) + 64));
    goto LABEL_190;
  }
  (*(void (**)(void *, const void *, uint64_t))(v433 + 40))(v405, v406, v254);
LABEL_190:
  uint64_t v435 = v219[26];
  uint64_t v436 = v217 + v435;
  uint64_t v437 = v218 + v435;
  uint64_t v438 = type metadata accessor for URL();
  int v439 = __swift_getEnumTagSinglePayload(v436, 1, v438);
  int v440 = __swift_getEnumTagSinglePayload(v437, 1, v438);
  if (v439)
  {
    if (!v440)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v438 - 8) + 32))(v436, v437, v438);
      uint64_t v266 = v436;
      uint64_t v267 = v438;
LABEL_91:
      __swift_storeEnumTagSinglePayload(v266, 0, 1, v267);
      goto LABEL_92;
    }
    goto LABEL_210;
  }
  uint64_t v560 = *(void *)(v438 - 8);
  if (v440)
  {
    (*(void (**)(uint64_t, uint64_t))(v560 + 8))(v436, v438);
LABEL_210:
    size_t v234 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                 - 8)
                     + 64);
    uint64_t v235 = (void *)v436;
    uint64_t v236 = (const void *)v437;
    goto LABEL_79;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v560 + 40))(v436, v437, v438);
LABEL_92:
  uint64_t v268 = a3[10];
  uint64_t v269 = (uint64_t)a1 + v268;
  uint64_t v270 = (uint64_t)v4 + v268;
  uint64_t v271 = (int *)type metadata accessor for Trip(0);
  int v272 = __swift_getEnumTagSinglePayload(v269, 1, (uint64_t)v271);
  int v273 = __swift_getEnumTagSinglePayload(v270, 1, (uint64_t)v271);
  if (v272)
  {
    if (!v273)
    {
      long long v274 = *(_OWORD *)(v270 + 16);
      *(_OWORD *)uint64_t v269 = *(_OWORD *)v270;
      *(_OWORD *)(v269 + 16) = v274;
      long long v275 = *(_OWORD *)(v270 + 48);
      *(_OWORD *)(v269 + 32) = *(_OWORD *)(v270 + 32);
      *(_OWORD *)(v269 + 48) = v275;
      long long v276 = *(_OWORD *)(v270 + 80);
      *(_OWORD *)(v269 + 64) = *(_OWORD *)(v270 + 64);
      *(_OWORD *)(v269 + 80) = v276;
      long long v277 = *(_OWORD *)(v270 + 112);
      *(_OWORD *)(v269 + 96) = *(_OWORD *)(v270 + 96);
      *(_OWORD *)(v269 + 112) = v277;
      *(unsigned char *)(v269 + 128) = *(unsigned char *)(v270 + 128);
      *(_WORD *)(v269 + 129) = *(_WORD *)(v270 + 129);
      *(void *)(v269 + 136) = *(void *)(v270 + 136);
      long long v278 = *(_OWORD *)(v270 + 160);
      *(_OWORD *)(v269 + 144) = *(_OWORD *)(v270 + 144);
      *(_OWORD *)(v269 + 160) = v278;
      long long v279 = *(_OWORD *)(v270 + 192);
      *(_OWORD *)(v269 + 176) = *(_OWORD *)(v270 + 176);
      *(_OWORD *)(v269 + 192) = v279;
      *(_OWORD *)(v269 + 208) = *(_OWORD *)(v270 + 208);
      uint64_t v280 = v271[22];
      uint64_t v281 = (void *)(v269 + v280);
      uint64_t v282 = (const void *)(v270 + v280);
      uint64_t v283 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v282, 1, v283))
      {
        uint64_t v284 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v281, v282, *(void *)(*(void *)(v284 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v283 - 8) + 32))(v281, v282, v283);
        __swift_storeEnumTagSinglePayload((uint64_t)v281, 0, 1, v283);
      }
      uint64_t v306 = v271[23];
      uint64_t v307 = (void *)(v269 + v306);
      uint64_t v308 = (const void *)(v270 + v306);
      if (__swift_getEnumTagSinglePayload(v270 + v306, 1, v283))
      {
        uint64_t v309 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v307, v308, *(void *)(*(void *)(v309 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v283 - 8) + 32))(v307, v308, v283);
        __swift_storeEnumTagSinglePayload((uint64_t)v307, 0, 1, v283);
      }
      uint64_t v310 = v271[24];
      uint64_t v311 = v269 + v310;
      uint64_t v312 = v270 + v310;
      *(void *)uint64_t v311 = *(void *)v312;
      *(unsigned char *)(v311 + 8) = *(unsigned char *)(v312 + 8);
      uint64_t v313 = v271[25];
      uint64_t v314 = (void *)(v269 + v313);
      uint64_t v315 = (const void *)(v270 + v313);
      uint64_t v316 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v315, 1, v316))
      {
        uint64_t v317 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v314, v315, *(void *)(*(void *)(v317 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v316 - 8) + 32))(v314, v315, v316);
        __swift_storeEnumTagSinglePayload((uint64_t)v314, 0, 1, v316);
      }
      uint64_t v318 = v269;
      uint64_t v319 = (uint64_t)v271;
      goto LABEL_111;
    }
    goto LABEL_98;
  }
  if (v273)
  {
    outlined destroy of PartialExtractedAttributes(v269, (void (*)(void))type metadata accessor for Trip);
LABEL_98:
    size_t v285 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?)
                                 - 8)
                     + 64);
    uint64_t v286 = (void *)v269;
    uint64_t v287 = (const void *)v270;
LABEL_99:
    memcpy(v286, v287, v285);
    goto LABEL_112;
  }
  uint64_t v288 = *(void *)(v270 + 8);
  *(void *)uint64_t v269 = *(void *)v270;
  *(void *)(v269 + 8) = v288;
  swift_bridgeObjectRelease();
  uint64_t v289 = *(void *)(v270 + 24);
  *(void *)(v269 + 16) = *(void *)(v270 + 16);
  *(void *)(v269 + 24) = v289;
  swift_bridgeObjectRelease();
  uint64_t v290 = *(void *)(v270 + 40);
  *(void *)(v269 + 32) = *(void *)(v270 + 32);
  *(void *)(v269 + 40) = v290;
  swift_bridgeObjectRelease();
  uint64_t v291 = *(void *)(v270 + 56);
  *(void *)(v269 + 48) = *(void *)(v270 + 48);
  *(void *)(v269 + 56) = v291;
  swift_bridgeObjectRelease();
  uint64_t v292 = *(void *)(v270 + 72);
  *(void *)(v269 + 64) = *(void *)(v270 + 64);
  *(void *)(v269 + 72) = v292;
  swift_bridgeObjectRelease();
  uint64_t v293 = *(void *)(v270 + 88);
  *(void *)(v269 + 80) = *(void *)(v270 + 80);
  *(void *)(v269 + 88) = v293;
  swift_bridgeObjectRelease();
  uint64_t v294 = *(void *)(v270 + 104);
  *(void *)(v269 + 96) = *(void *)(v270 + 96);
  *(void *)(v269 + 104) = v294;
  swift_bridgeObjectRelease();
  uint64_t v295 = *(void *)(v270 + 120);
  *(void *)(v269 + 112) = *(void *)(v270 + 112);
  *(void *)(v269 + 120) = v295;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v269 + 128) = *(unsigned char *)(v270 + 128);
  *(unsigned char *)(v269 + 129) = *(unsigned char *)(v270 + 129);
  *(unsigned char *)(v269 + 130) = *(unsigned char *)(v270 + 130);
  *(void *)(v269 + 136) = *(void *)(v270 + 136);
  swift_bridgeObjectRelease();
  uint64_t v296 = *(void *)(v270 + 152);
  *(void *)(v269 + 144) = *(void *)(v270 + 144);
  *(void *)(v269 + 152) = v296;
  swift_bridgeObjectRelease();
  uint64_t v297 = *(void *)(v270 + 168);
  *(void *)(v269 + 160) = *(void *)(v270 + 160);
  *(void *)(v269 + 168) = v297;
  swift_bridgeObjectRelease();
  uint64_t v298 = *(void *)(v270 + 184);
  *(void *)(v269 + 176) = *(void *)(v270 + 176);
  *(void *)(v269 + 184) = v298;
  swift_bridgeObjectRelease();
  *(void *)(v269 + 192) = *(void *)(v270 + 192);
  swift_bridgeObjectRelease();
  *(void *)(v269 + 200) = *(void *)(v270 + 200);
  swift_bridgeObjectRelease();
  uint64_t v299 = *(void *)(v270 + 216);
  *(void *)(v269 + 208) = *(void *)(v270 + 208);
  *(void *)(v269 + 216) = v299;
  swift_bridgeObjectRelease();
  uint64_t v300 = v271[22];
  uint64_t v301 = (void *)(v269 + v300);
  uint64_t v302 = (const void *)(v270 + v300);
  uint64_t v303 = type metadata accessor for Date();
  int v304 = __swift_getEnumTagSinglePayload((uint64_t)v301, 1, v303);
  int v305 = __swift_getEnumTagSinglePayload((uint64_t)v302, 1, v303);
  if (v304)
  {
    if (!v305)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v303 - 8) + 32))(v301, v302, v303);
      __swift_storeEnumTagSinglePayload((uint64_t)v301, 0, 1, v303);
      goto LABEL_163;
    }
    goto LABEL_162;
  }
  uint64_t v409 = *(void *)(v303 - 8);
  if (v305)
  {
    (*(void (**)(void *, uint64_t))(v409 + 8))(v301, v303);
LABEL_162:
    uint64_t v410 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v301, v302, *(void *)(*(void *)(v410 - 8) + 64));
    goto LABEL_163;
  }
  (*(void (**)(void *, const void *, uint64_t))(v409 + 40))(v301, v302, v303);
LABEL_163:
  uint64_t v411 = v271[23];
  uint64_t v412 = (void *)(v269 + v411);
  uint64_t v413 = (const void *)(v270 + v411);
  int v414 = __swift_getEnumTagSinglePayload(v269 + v411, 1, v303);
  int v415 = __swift_getEnumTagSinglePayload((uint64_t)v413, 1, v303);
  if (v414)
  {
    if (!v415)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v303 - 8) + 32))(v412, v413, v303);
      __swift_storeEnumTagSinglePayload((uint64_t)v412, 0, 1, v303);
      goto LABEL_196;
    }
    goto LABEL_195;
  }
  uint64_t v441 = *(void *)(v303 - 8);
  if (v415)
  {
    (*(void (**)(void *, uint64_t))(v441 + 8))(v412, v303);
LABEL_195:
    uint64_t v442 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v412, v413, *(void *)(*(void *)(v442 - 8) + 64));
    goto LABEL_196;
  }
  (*(void (**)(void *, const void *, uint64_t))(v441 + 40))(v412, v413, v303);
LABEL_196:
  uint64_t v443 = v271[24];
  uint64_t v444 = v269 + v443;
  uint64_t v445 = v270 + v443;
  *(void *)uint64_t v444 = *(void *)v445;
  *(unsigned char *)(v444 + 8) = *(unsigned char *)(v445 + 8);
  uint64_t v446 = v271[25];
  uint64_t v447 = v269 + v446;
  uint64_t v448 = v270 + v446;
  uint64_t v449 = type metadata accessor for URL();
  int v450 = __swift_getEnumTagSinglePayload(v447, 1, v449);
  int v451 = __swift_getEnumTagSinglePayload(v448, 1, v449);
  if (v450)
  {
    if (!v451)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v449 - 8) + 32))(v447, v448, v449);
      uint64_t v318 = v447;
      uint64_t v319 = v449;
LABEL_111:
      __swift_storeEnumTagSinglePayload(v318, 0, 1, v319);
      goto LABEL_112;
    }
    goto LABEL_213;
  }
  uint64_t v561 = *(void *)(v449 - 8);
  if (v451)
  {
    (*(void (**)(uint64_t, uint64_t))(v561 + 8))(v447, v449);
LABEL_213:
    size_t v285 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                 - 8)
                     + 64);
    uint64_t v286 = (void *)v447;
    uint64_t v287 = (const void *)v448;
    goto LABEL_99;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v561 + 40))(v447, v448, v449);
LABEL_112:
  uint64_t v320 = a3[11];
  uint64_t v321 = (uint64_t)a1 + v320;
  uint64_t v322 = (uint64_t)v4 + v320;
  int v323 = (int *)type metadata accessor for FlightReservation(0);
  int v324 = __swift_getEnumTagSinglePayload(v321, 1, (uint64_t)v323);
  int v325 = __swift_getEnumTagSinglePayload(v322, 1, (uint64_t)v323);
  if (!v324)
  {
    if (v325)
    {
      outlined destroy of PartialExtractedAttributes(v321, (void (*)(void))type metadata accessor for FlightReservation);
      goto LABEL_118;
    }
    uint64_t v335 = *(void *)(v322 + 8);
    *(void *)uint64_t v321 = *(void *)v322;
    *(void *)(v321 + 8) = v335;
    swift_bridgeObjectRelease();
    *(void *)(v321 + 16) = *(void *)(v322 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v321 + 24) = *(void *)(v322 + 24);
    swift_bridgeObjectRelease();
    uint64_t v336 = *(void *)(v322 + 40);
    *(void *)(v321 + 32) = *(void *)(v322 + 32);
    *(void *)(v321 + 40) = v336;
    swift_bridgeObjectRelease();
    uint64_t v337 = *(void *)(v322 + 56);
    *(void *)(v321 + 48) = *(void *)(v322 + 48);
    *(void *)(v321 + 56) = v337;
    swift_bridgeObjectRelease();
    uint64_t v338 = *(void *)(v322 + 72);
    *(void *)(v321 + 64) = *(void *)(v322 + 64);
    *(void *)(v321 + 72) = v338;
    swift_bridgeObjectRelease();
    uint64_t v339 = *(void *)(v322 + 88);
    *(void *)(v321 + 80) = *(void *)(v322 + 80);
    *(void *)(v321 + 88) = v339;
    swift_bridgeObjectRelease();
    *(unsigned char *)(v321 + 96) = *(unsigned char *)(v322 + 96);
    uint64_t v340 = *(void *)(v322 + 112);
    *(void *)(v321 + 104) = *(void *)(v322 + 104);
    *(void *)(v321 + 112) = v340;
    swift_bridgeObjectRelease();
    uint64_t v341 = v323[13];
    uint64_t v342 = (void *)(v321 + v341);
    uint64_t v343 = (const void *)(v322 + v341);
    uint64_t v344 = type metadata accessor for URL();
    int v345 = __swift_getEnumTagSinglePayload((uint64_t)v342, 1, v344);
    int v346 = __swift_getEnumTagSinglePayload((uint64_t)v343, 1, v344);
    if (v345)
    {
      if (!v346)
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v344 - 8) + 32))(v342, v343, v344);
        __swift_storeEnumTagSinglePayload((uint64_t)v342, 0, 1, v344);
        goto LABEL_169;
      }
    }
    else
    {
      uint64_t v416 = *(void *)(v344 - 8);
      if (!v346)
      {
        (*(void (**)(void *, const void *, uint64_t))(v416 + 40))(v342, v343, v344);
LABEL_169:
        uint64_t v418 = v323[14];
        uint64_t v419 = (void *)(v321 + v418);
        uint64_t v420 = (const void *)(v322 + v418);
        int v421 = __swift_getEnumTagSinglePayload(v321 + v418, 1, v344);
        int v422 = __swift_getEnumTagSinglePayload((uint64_t)v420, 1, v344);
        if (v421)
        {
          if (!v422)
          {
            (*(void (**)(void *, const void *, uint64_t))(*(void *)(v344 - 8) + 32))(v419, v420, v344);
            __swift_storeEnumTagSinglePayload((uint64_t)v419, 0, 1, v344);
            goto LABEL_202;
          }
        }
        else
        {
          uint64_t v452 = *(void *)(v344 - 8);
          if (!v422)
          {
            (*(void (**)(void *, const void *, uint64_t))(v452 + 40))(v419, v420, v344);
LABEL_202:
            uint64_t v454 = v323[15];
            uint64_t v455 = (void *)(v321 + v454);
            uint64_t v456 = (uint64_t *)(v322 + v454);
            uint64_t v458 = *v456;
            uint64_t v457 = v456[1];
            *uint64_t v455 = v458;
            v455[1] = v457;
            swift_bridgeObjectRelease();
            uint64_t v459 = v323[16];
            uint64_t v460 = (void *)(v321 + v459);
            uint64_t v461 = (uint64_t *)(v322 + v459);
            uint64_t v463 = *v461;
            uint64_t v462 = v461[1];
            *uint64_t v460 = v463;
            v460[1] = v462;
            swift_bridgeObjectRelease();
            uint64_t v464 = v323[17];
            uint64_t v465 = (void *)(v321 + v464);
            long long v466 = (uint64_t *)(v322 + v464);
            uint64_t v468 = *v466;
            uint64_t v467 = v466[1];
            *uint64_t v465 = v468;
            v465[1] = v467;
            swift_bridgeObjectRelease();
            uint64_t v469 = v323[18];
            uint64_t v470 = v321 + v469;
            uint64_t v471 = v322 + v469;
            uint64_t v472 = type metadata accessor for DateComponents();
            uint64_t v473 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v472 - 8) + 40);
            v473(v470, v471, v472);
            v473(v321 + v323[19], v322 + v323[19], v472);
            uint64_t v474 = v323[20];
            uint64_t v475 = (void *)(v321 + v474);
            uint64_t v476 = (uint64_t *)(v322 + v474);
            uint64_t v478 = *v476;
            uint64_t v477 = v476[1];
            *uint64_t v475 = v478;
            v475[1] = v477;
            swift_bridgeObjectRelease();
            uint64_t v479 = v323[21];
            uint64_t v480 = (void *)(v321 + v479);
            uint64_t v481 = (uint64_t *)(v322 + v479);
            uint64_t v483 = *v481;
            uint64_t v482 = v481[1];
            *uint64_t v480 = v483;
            v480[1] = v482;
            swift_bridgeObjectRelease();
            uint64_t v484 = v323[22];
            uint64_t v485 = (void *)(v321 + v484);
            uint64_t v486 = (uint64_t *)(v322 + v484);
            uint64_t v488 = *v486;
            uint64_t v487 = v486[1];
            *uint64_t v485 = v488;
            v485[1] = v487;
            swift_bridgeObjectRelease();
            uint64_t v489 = v323[23];
            uint64_t v490 = (void *)(v321 + v489);
            uint64_t v491 = (uint64_t *)(v322 + v489);
            uint64_t v493 = *v491;
            uint64_t v492 = v491[1];
            *uint64_t v490 = v493;
            v490[1] = v492;
            swift_bridgeObjectRelease();
            uint64_t v494 = v323[24];
            uint64_t v495 = (void *)(v321 + v494);
            uint64_t v496 = (uint64_t *)(v322 + v494);
            uint64_t v498 = *v496;
            uint64_t v497 = v496[1];
            *uint64_t v495 = v498;
            v495[1] = v497;
            swift_bridgeObjectRelease();
            uint64_t v499 = v323[25];
            uint64_t v500 = (void *)(v321 + v499);
            uint64_t v501 = (uint64_t *)(v322 + v499);
            uint64_t v503 = *v501;
            uint64_t v502 = v501[1];
            *uint64_t v500 = v503;
            v500[1] = v502;
            swift_bridgeObjectRelease();
            uint64_t v504 = v323[26];
            uint64_t v505 = (void *)(v321 + v504);
            uint64_t v506 = (uint64_t *)(v322 + v504);
            uint64_t v508 = *v506;
            uint64_t v507 = v506[1];
            *uint64_t v505 = v508;
            v505[1] = v507;
            swift_bridgeObjectRelease();
            uint64_t v509 = v323[27];
            uint64_t v510 = (void *)(v321 + v509);
            uint64_t v511 = (uint64_t *)(v322 + v509);
            uint64_t v513 = *v511;
            uint64_t v512 = v511[1];
            *uint64_t v510 = v513;
            v510[1] = v512;
            swift_bridgeObjectRelease();
            uint64_t v514 = v323[28];
            uint64_t v515 = (void *)(v321 + v514);
            uint64_t v516 = (uint64_t *)(v322 + v514);
            uint64_t v518 = *v516;
            uint64_t v517 = v516[1];
            *uint64_t v515 = v518;
            v515[1] = v517;
            swift_bridgeObjectRelease();
            uint64_t v519 = v323[29];
            uint64_t v520 = (void *)(v321 + v519);
            uint64_t v521 = (uint64_t *)(v322 + v519);
            uint64_t v523 = *v521;
            uint64_t v522 = v521[1];
            *uint64_t v520 = v523;
            v520[1] = v522;
            swift_bridgeObjectRelease();
            uint64_t v524 = v323[30];
            uint64_t v525 = (void *)(v321 + v524);
            uint64_t v526 = (uint64_t *)(v322 + v524);
            uint64_t v528 = *v526;
            uint64_t v527 = v526[1];
            *uint64_t v525 = v528;
            v525[1] = v527;
            swift_bridgeObjectRelease();
            uint64_t v529 = v323[31];
            uint64_t v530 = (void *)(v321 + v529);
            uint64_t v531 = (uint64_t *)(v322 + v529);
            uint64_t v533 = *v531;
            uint64_t v532 = v531[1];
            *uint64_t v530 = v533;
            v530[1] = v532;
            swift_bridgeObjectRelease();
            uint64_t v534 = v323[32];
            uint64_t v535 = (void *)(v321 + v534);
            uint64_t v536 = (uint64_t *)(v322 + v534);
            uint64_t v538 = *v536;
            uint64_t v537 = v536[1];
            *uint64_t v535 = v538;
            v535[1] = v537;
            swift_bridgeObjectRelease();
            *(void *)(v321 + v323[33]) = *(void *)(v322 + v323[33]);
            swift_bridgeObjectRelease();
            *(void *)(v321 + v323[34]) = *(void *)(v322 + v323[34]);
            swift_bridgeObjectRelease();
            uint64_t v539 = v323[35];
            uint64_t v540 = (void *)(v321 + v539);
            uint64_t v541 = (uint64_t *)(v322 + v539);
            uint64_t v543 = *v541;
            uint64_t v542 = v541[1];
            *uint64_t v540 = v543;
            v540[1] = v542;
            swift_bridgeObjectRelease();
            uint64_t v544 = v323[36];
            uint64_t v545 = (void *)(v321 + v544);
            uint64_t v546 = (uint64_t *)(v322 + v544);
            uint64_t v548 = *v546;
            uint64_t v547 = v546[1];
            *uint64_t v545 = v548;
            v545[1] = v547;
            swift_bridgeObjectRelease();
            uint64_t v549 = v323[37];
            uint64_t v550 = (void *)(v321 + v549);
            uint64_t v551 = (uint64_t *)(v322 + v549);
            uint64_t v553 = *v551;
            uint64_t v552 = v551[1];
            *uint64_t v550 = v553;
            v550[1] = v552;
            swift_bridgeObjectRelease();
            uint64_t v554 = v323[38];
            uint64_t v555 = (void *)(v321 + v554);
            v556 = (const void *)(v322 + v554);
            uint64_t v557 = type metadata accessor for Date();
            LODWORD(v473) = __swift_getEnumTagSinglePayload((uint64_t)v555, 1, v557);
            int v558 = __swift_getEnumTagSinglePayload((uint64_t)v556, 1, v557);
            if (v473)
            {
              if (!v558)
              {
                (*(void (**)(void *, const void *, uint64_t))(*(void *)(v557 - 8) + 32))(v555, v556, v557);
                __swift_storeEnumTagSinglePayload((uint64_t)v555, 0, 1, v557);
LABEL_217:
                uint64_t v564 = v323[39];
                uint64_t v565 = (void *)(v321 + v564);
                uint64_t v566 = (uint64_t *)(v322 + v564);
                uint64_t v568 = *v566;
                uint64_t v567 = v566[1];
                *uint64_t v565 = v568;
                v565[1] = v567;
                swift_bridgeObjectRelease();
                uint64_t v569 = v323[40];
                v570 = (void *)(v321 + v569);
                uint64_t v571 = (uint64_t *)(v322 + v569);
                uint64_t v573 = *v571;
                uint64_t v572 = v571[1];
                void *v570 = v573;
                v570[1] = v572;
                swift_bridgeObjectRelease();
                uint64_t v574 = v323[41];
                uint64_t v575 = v321 + v574;
                uint64_t v576 = v322 + v574;
                *(void *)uint64_t v575 = *(void *)v576;
                *(unsigned char *)(v575 + 8) = *(unsigned char *)(v576 + 8);
                uint64_t v577 = v323[42];
                v578 = (void *)(v321 + v577);
                v579 = (uint64_t *)(v322 + v577);
                uint64_t v581 = *v579;
                uint64_t v580 = v579[1];
                void *v578 = v581;
                v578[1] = v580;
                swift_bridgeObjectRelease();
                uint64_t v582 = v323[43];
                uint64_t v583 = v321 + v582;
                uint64_t v584 = v322 + v582;
                *(_OWORD *)uint64_t v583 = *(_OWORD *)v584;
                *(void *)(v583 + 13) = *(void *)(v584 + 13);
                uint64_t v585 = v323[44];
                uint64_t v586 = (void *)(v321 + v585);
                v587 = (uint64_t *)(v322 + v585);
                uint64_t v589 = *v587;
                uint64_t v588 = v587[1];
                *uint64_t v586 = v589;
                v586[1] = v588;
                swift_bridgeObjectRelease();
                uint64_t v590 = v323[45];
                uint64_t v591 = (void *)(v321 + v590);
                uint64_t v592 = (uint64_t *)(v322 + v590);
                uint64_t v594 = *v592;
                uint64_t v593 = v592[1];
                *uint64_t v591 = v594;
                v591[1] = v593;
                swift_bridgeObjectRelease();
                uint64_t v595 = v323[46];
                uint64_t v596 = (void *)(v321 + v595);
                int v597 = (uint64_t *)(v322 + v595);
                uint64_t v599 = *v597;
                uint64_t v598 = v597[1];
                *uint64_t v596 = v599;
                v596[1] = v598;
                swift_bridgeObjectRelease();
                uint64_t v600 = v323[47];
                v601 = (void *)(v321 + v600);
                uint64_t v602 = (uint64_t *)(v322 + v600);
                uint64_t v604 = *v602;
                uint64_t v603 = v602[1];
                void *v601 = v604;
                v601[1] = v603;
                swift_bridgeObjectRelease();
                goto LABEL_218;
              }
            }
            else
            {
              uint64_t v562 = *(void *)(v557 - 8);
              if (!v558)
              {
                (*(void (**)(void *, const void *, uint64_t))(v562 + 40))(v555, v556, v557);
                goto LABEL_217;
              }
              (*(void (**)(void *, uint64_t))(v562 + 8))(v555, v557);
            }
            uint64_t v563 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v555, v556, *(void *)(*(void *)(v563 - 8) + 64));
            goto LABEL_217;
          }
          (*(void (**)(void *, uint64_t))(v452 + 8))(v419, v344);
        }
        uint64_t v453 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v419, v420, *(void *)(*(void *)(v453 - 8) + 64));
        goto LABEL_202;
      }
      (*(void (**)(void *, uint64_t))(v416 + 8))(v342, v344);
    }
    uint64_t v417 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v342, v343, *(void *)(*(void *)(v417 - 8) + 64));
    goto LABEL_169;
  }
  if (v325)
  {
LABEL_118:
    uint64_t v334 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
    memcpy((void *)v321, (const void *)v322, *(void *)(*(void *)(v334 - 8) + 64));
    goto LABEL_218;
  }
  long long v326 = *(_OWORD *)(v322 + 16);
  *(_OWORD *)uint64_t v321 = *(_OWORD *)v322;
  *(_OWORD *)(v321 + 16) = v326;
  long long v327 = *(_OWORD *)(v322 + 48);
  *(_OWORD *)(v321 + 32) = *(_OWORD *)(v322 + 32);
  *(_OWORD *)(v321 + 48) = v327;
  long long v328 = *(_OWORD *)(v322 + 80);
  *(_OWORD *)(v321 + 64) = *(_OWORD *)(v322 + 64);
  *(_OWORD *)(v321 + 80) = v328;
  *(unsigned char *)(v321 + 96) = *(unsigned char *)(v322 + 96);
  *(_OWORD *)(v321 + 104) = *(_OWORD *)(v322 + 104);
  uint64_t v329 = v323[13];
  int v330 = (void *)(v321 + v329);
  int v331 = (const void *)(v322 + v329);
  uint64_t v332 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v331, 1, v332))
  {
    uint64_t v333 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v330, v331, *(void *)(*(void *)(v333 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v332 - 8) + 32))(v330, v331, v332);
    __swift_storeEnumTagSinglePayload((uint64_t)v330, 0, 1, v332);
  }
  v780 = v4;
  uint64_t v347 = v323[14];
  uint64_t v348 = (void *)(v321 + v347);
  uint64_t v349 = (const void *)(v322 + v347);
  uint64_t v350 = a3;
  if (__swift_getEnumTagSinglePayload(v322 + v347, 1, v332))
  {
    uint64_t v351 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v348, v349, *(void *)(*(void *)(v351 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v332 - 8) + 32))(v348, v349, v332);
    __swift_storeEnumTagSinglePayload((uint64_t)v348, 0, 1, v332);
  }
  *(_OWORD *)(v321 + v323[15]) = *(_OWORD *)(v322 + v323[15]);
  *(_OWORD *)(v321 + v323[16]) = *(_OWORD *)(v322 + v323[16]);
  *(_OWORD *)(v321 + v323[17]) = *(_OWORD *)(v322 + v323[17]);
  uint64_t v352 = v323[18];
  uint64_t v353 = v321 + v352;
  uint64_t v354 = v322 + v352;
  uint64_t v355 = type metadata accessor for DateComponents();
  uint64_t v356 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v355 - 8) + 32);
  v356(v353, v354, v355);
  v356(v321 + v323[19], v322 + v323[19], v355);
  *(_OWORD *)(v321 + v323[20]) = *(_OWORD *)(v322 + v323[20]);
  *(_OWORD *)(v321 + v323[21]) = *(_OWORD *)(v322 + v323[21]);
  *(_OWORD *)(v321 + v323[22]) = *(_OWORD *)(v322 + v323[22]);
  *(_OWORD *)(v321 + v323[23]) = *(_OWORD *)(v322 + v323[23]);
  *(_OWORD *)(v321 + v323[24]) = *(_OWORD *)(v322 + v323[24]);
  *(_OWORD *)(v321 + v323[25]) = *(_OWORD *)(v322 + v323[25]);
  *(_OWORD *)(v321 + v323[26]) = *(_OWORD *)(v322 + v323[26]);
  *(_OWORD *)(v321 + v323[27]) = *(_OWORD *)(v322 + v323[27]);
  *(_OWORD *)(v321 + v323[28]) = *(_OWORD *)(v322 + v323[28]);
  *(_OWORD *)(v321 + v323[29]) = *(_OWORD *)(v322 + v323[29]);
  *(_OWORD *)(v321 + v323[30]) = *(_OWORD *)(v322 + v323[30]);
  *(_OWORD *)(v321 + v323[31]) = *(_OWORD *)(v322 + v323[31]);
  *(_OWORD *)(v321 + v323[32]) = *(_OWORD *)(v322 + v323[32]);
  *(void *)(v321 + v323[33]) = *(void *)(v322 + v323[33]);
  *(void *)(v321 + v323[34]) = *(void *)(v322 + v323[34]);
  *(_OWORD *)(v321 + v323[35]) = *(_OWORD *)(v322 + v323[35]);
  *(_OWORD *)(v321 + v323[36]) = *(_OWORD *)(v322 + v323[36]);
  *(_OWORD *)(v321 + v323[37]) = *(_OWORD *)(v322 + v323[37]);
  uint64_t v357 = v323[38];
  uint64_t v358 = (void *)(v321 + v357);
  uint64_t v359 = (const void *)(v322 + v357);
  uint64_t v360 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v359, 1, v360))
  {
    uint64_t v361 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v358, v359, *(void *)(*(void *)(v361 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v360 - 8) + 32))(v358, v359, v360);
    __swift_storeEnumTagSinglePayload((uint64_t)v358, 0, 1, v360);
  }
  a3 = v350;
  *(_OWORD *)(v321 + v323[39]) = *(_OWORD *)(v322 + v323[39]);
  *(_OWORD *)(v321 + v323[40]) = *(_OWORD *)(v322 + v323[40]);
  uint64_t v362 = v323[41];
  uint64_t v363 = v321 + v362;
  uint64_t v364 = v322 + v362;
  *(void *)uint64_t v363 = *(void *)v364;
  *(unsigned char *)(v363 + 8) = *(unsigned char *)(v364 + 8);
  *(_OWORD *)(v321 + v323[42]) = *(_OWORD *)(v322 + v323[42]);
  uint64_t v365 = v323[43];
  uint64_t v366 = v321 + v365;
  uint64_t v367 = v322 + v365;
  *(_OWORD *)uint64_t v366 = *(_OWORD *)v367;
  *(void *)(v366 + 13) = *(void *)(v367 + 13);
  *(_OWORD *)(v321 + v323[44]) = *(_OWORD *)(v322 + v323[44]);
  *(_OWORD *)(v321 + v323[45]) = *(_OWORD *)(v322 + v323[45]);
  *(_OWORD *)(v321 + v323[46]) = *(_OWORD *)(v322 + v323[46]);
  *(_OWORD *)(v321 + v323[47]) = *(_OWORD *)(v322 + v323[47]);
  __swift_storeEnumTagSinglePayload(v321, 0, 1, (uint64_t)v323);
  uint64_t v4 = v780;
LABEL_218:
  uint64_t v605 = a3[12];
  uint64_t v606 = (uint64_t)a1 + v605;
  uint64_t v607 = (uint64_t)v4 + v605;
  uint64_t v608 = (int *)type metadata accessor for HotelReservation(0);
  int v609 = __swift_getEnumTagSinglePayload(v606, 1, (uint64_t)v608);
  int v610 = __swift_getEnumTagSinglePayload(v607, 1, (uint64_t)v608);
  if (!v609)
  {
    if (v610)
    {
      outlined destroy of PartialExtractedAttributes(v606, (void (*)(void))type metadata accessor for HotelReservation);
      goto LABEL_224;
    }
    uint64_t v620 = *(void *)(v607 + 8);
    *(void *)uint64_t v606 = *(void *)v607;
    *(void *)(v606 + 8) = v620;
    swift_bridgeObjectRelease();
    *(void *)(v606 + 16) = *(void *)(v607 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v606 + 24) = *(void *)(v607 + 24);
    swift_bridgeObjectRelease();
    uint64_t v621 = *(void *)(v607 + 40);
    *(void *)(v606 + 32) = *(void *)(v607 + 32);
    *(void *)(v606 + 40) = v621;
    swift_bridgeObjectRelease();
    uint64_t v622 = *(void *)(v607 + 56);
    *(void *)(v606 + 48) = *(void *)(v607 + 48);
    *(void *)(v606 + 56) = v622;
    swift_bridgeObjectRelease();
    uint64_t v623 = *(void *)(v607 + 72);
    *(void *)(v606 + 64) = *(void *)(v607 + 64);
    *(void *)(v606 + 72) = v623;
    swift_bridgeObjectRelease();
    uint64_t v624 = *(void *)(v607 + 88);
    *(void *)(v606 + 80) = *(void *)(v607 + 80);
    *(void *)(v606 + 88) = v624;
    swift_bridgeObjectRelease();
    *(unsigned char *)(v606 + 96) = *(unsigned char *)(v607 + 96);
    uint64_t v625 = *(void *)(v607 + 112);
    *(void *)(v606 + 104) = *(void *)(v607 + 104);
    *(void *)(v606 + 112) = v625;
    swift_bridgeObjectRelease();
    uint64_t v626 = *(void *)(v607 + 128);
    *(void *)(v606 + 120) = *(void *)(v607 + 120);
    *(void *)(v606 + 128) = v626;
    swift_bridgeObjectRelease();
    uint64_t v627 = v608[14];
    uint64_t v628 = (void *)(v606 + v627);
    v629 = (const void *)(v607 + v627);
    uint64_t v630 = type metadata accessor for DateComponents();
    int v631 = __swift_getEnumTagSinglePayload((uint64_t)v628, 1, v630);
    int v632 = __swift_getEnumTagSinglePayload((uint64_t)v629, 1, v630);
    if (v631)
    {
      if (!v632)
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v630 - 8) + 32))(v628, v629, v630);
        __swift_storeEnumTagSinglePayload((uint64_t)v628, 0, 1, v630);
        goto LABEL_236;
      }
    }
    else
    {
      uint64_t v646 = *(void *)(v630 - 8);
      if (!v632)
      {
        (*(void (**)(void *, const void *, uint64_t))(v646 + 40))(v628, v629, v630);
LABEL_236:
        uint64_t v648 = v608[15];
        v649 = (void *)(v606 + v648);
        v650 = (const void *)(v607 + v648);
        int v651 = __swift_getEnumTagSinglePayload(v606 + v648, 1, v630);
        int v652 = __swift_getEnumTagSinglePayload((uint64_t)v650, 1, v630);
        if (v651)
        {
          if (!v652)
          {
            (*(void (**)(void *, const void *, uint64_t))(*(void *)(v630 - 8) + 32))(v649, v650, v630);
            __swift_storeEnumTagSinglePayload((uint64_t)v649, 0, 1, v630);
LABEL_242:
            uint64_t v655 = v608[16];
            v656 = (void *)(v606 + v655);
            uint64_t v657 = (uint64_t *)(v607 + v655);
            uint64_t v659 = *v657;
            uint64_t v658 = v657[1];
            void *v656 = v659;
            v656[1] = v658;
            swift_bridgeObjectRelease();
            uint64_t v660 = v608[17];
            v661 = (void *)(v606 + v660);
            v662 = (uint64_t *)(v607 + v660);
            uint64_t v664 = *v662;
            uint64_t v663 = v662[1];
            void *v661 = v664;
            v661[1] = v663;
            swift_bridgeObjectRelease();
            uint64_t v665 = v608[18];
            v666 = (void *)(v606 + v665);
            v667 = (uint64_t *)(v607 + v665);
            uint64_t v669 = *v667;
            uint64_t v668 = v667[1];
            void *v666 = v669;
            v666[1] = v668;
            swift_bridgeObjectRelease();
            uint64_t v670 = v608[19];
            v671 = (void *)(v606 + v670);
            v672 = (uint64_t *)(v607 + v670);
            uint64_t v674 = *v672;
            uint64_t v673 = v672[1];
            void *v671 = v674;
            v671[1] = v673;
            swift_bridgeObjectRelease();
            uint64_t v675 = v608[20];
            v676 = (void *)(v606 + v675);
            v677 = (uint64_t *)(v607 + v675);
            uint64_t v679 = *v677;
            uint64_t v678 = v677[1];
            void *v676 = v679;
            v676[1] = v678;
            swift_bridgeObjectRelease();
            *(void *)(v606 + v608[21]) = *(void *)(v607 + v608[21]);
            swift_bridgeObjectRelease();
            *(void *)(v606 + v608[22]) = *(void *)(v607 + v608[22]);
            swift_bridgeObjectRelease();
            uint64_t v680 = v608[23];
            uint64_t v681 = v606 + v680;
            uint64_t v682 = v607 + v680;
            *(void *)uint64_t v681 = *(void *)v682;
            *(unsigned char *)(v681 + 8) = *(unsigned char *)(v682 + 8);
            uint64_t v683 = v608[24];
            uint64_t v684 = v606 + v683;
            uint64_t v685 = v607 + v683;
            *(unsigned char *)(v684 + 8) = *(unsigned char *)(v685 + 8);
            *(void *)uint64_t v684 = *(void *)v685;
            uint64_t v686 = v608[25];
            v687 = (void *)(v606 + v686);
            v688 = (uint64_t *)(v607 + v686);
            uint64_t v690 = *v688;
            uint64_t v689 = v688[1];
            void *v687 = v690;
            v687[1] = v689;
            swift_bridgeObjectRelease();
            uint64_t v691 = v608[26];
            v692 = (void *)(v606 + v691);
            v693 = (uint64_t *)(v607 + v691);
            uint64_t v695 = *v693;
            uint64_t v694 = v693[1];
            void *v692 = v695;
            v692[1] = v694;
            swift_bridgeObjectRelease();
            uint64_t v696 = v608[27];
            v697 = (void *)(v606 + v696);
            v698 = (uint64_t *)(v607 + v696);
            uint64_t v700 = *v698;
            uint64_t v699 = v698[1];
            void *v697 = v700;
            v697[1] = v699;
            swift_bridgeObjectRelease();
            uint64_t v701 = v608[28];
            v702 = (void *)(v606 + v701);
            v703 = (uint64_t *)(v607 + v701);
            uint64_t v705 = *v703;
            uint64_t v704 = v703[1];
            void *v702 = v705;
            v702[1] = v704;
            swift_bridgeObjectRelease();
            uint64_t v706 = v608[29];
            uint64_t v707 = v606 + v706;
            uint64_t v708 = v607 + v706;
            *(void *)uint64_t v707 = *(void *)v708;
            *(unsigned char *)(v707 + 8) = *(unsigned char *)(v708 + 8);
            goto LABEL_243;
          }
        }
        else
        {
          uint64_t v653 = *(void *)(v630 - 8);
          if (!v652)
          {
            (*(void (**)(void *, const void *, uint64_t))(v653 + 40))(v649, v650, v630);
            goto LABEL_242;
          }
          (*(void (**)(void *, uint64_t))(v653 + 8))(v649, v630);
        }
        uint64_t v654 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
        memcpy(v649, v650, *(void *)(*(void *)(v654 - 8) + 64));
        goto LABEL_242;
      }
      (*(void (**)(void *, uint64_t))(v646 + 8))(v628, v630);
    }
    uint64_t v647 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v628, v629, *(void *)(*(void *)(v647 - 8) + 64));
    goto LABEL_236;
  }
  if (v610)
  {
LABEL_224:
    uint64_t v619 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
    memcpy((void *)v606, (const void *)v607, *(void *)(*(void *)(v619 - 8) + 64));
    goto LABEL_243;
  }
  long long v611 = *(_OWORD *)(v607 + 16);
  *(_OWORD *)uint64_t v606 = *(_OWORD *)v607;
  *(_OWORD *)(v606 + 16) = v611;
  long long v612 = *(_OWORD *)(v607 + 48);
  *(_OWORD *)(v606 + 32) = *(_OWORD *)(v607 + 32);
  *(_OWORD *)(v606 + 48) = v612;
  long long v613 = *(_OWORD *)(v607 + 80);
  *(_OWORD *)(v606 + 64) = *(_OWORD *)(v607 + 64);
  *(_OWORD *)(v606 + 80) = v613;
  *(unsigned char *)(v606 + 96) = *(unsigned char *)(v607 + 96);
  *(_OWORD *)(v606 + 104) = *(_OWORD *)(v607 + 104);
  *(_OWORD *)(v606 + 120) = *(_OWORD *)(v607 + 120);
  uint64_t v614 = v608[14];
  v615 = (void *)(v606 + v614);
  v616 = (const void *)(v607 + v614);
  uint64_t v617 = type metadata accessor for DateComponents();
  if (__swift_getEnumTagSinglePayload((uint64_t)v616, 1, v617))
  {
    uint64_t v618 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v615, v616, *(void *)(*(void *)(v618 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v617 - 8) + 32))(v615, v616, v617);
    __swift_storeEnumTagSinglePayload((uint64_t)v615, 0, 1, v617);
  }
  uint64_t v633 = v608[15];
  uint64_t v634 = (void *)(v606 + v633);
  v635 = (const void *)(v607 + v633);
  if (__swift_getEnumTagSinglePayload(v607 + v633, 1, v617))
  {
    uint64_t v636 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v634, v635, *(void *)(*(void *)(v636 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v617 - 8) + 32))(v634, v635, v617);
    __swift_storeEnumTagSinglePayload((uint64_t)v634, 0, 1, v617);
  }
  *(_OWORD *)(v606 + v608[16]) = *(_OWORD *)(v607 + v608[16]);
  *(_OWORD *)(v606 + v608[17]) = *(_OWORD *)(v607 + v608[17]);
  *(_OWORD *)(v606 + v608[18]) = *(_OWORD *)(v607 + v608[18]);
  *(_OWORD *)(v606 + v608[19]) = *(_OWORD *)(v607 + v608[19]);
  *(_OWORD *)(v606 + v608[20]) = *(_OWORD *)(v607 + v608[20]);
  *(void *)(v606 + v608[21]) = *(void *)(v607 + v608[21]);
  *(void *)(v606 + v608[22]) = *(void *)(v607 + v608[22]);
  uint64_t v637 = v608[23];
  uint64_t v638 = v606 + v637;
  uint64_t v639 = v607 + v637;
  *(unsigned char *)(v638 + 8) = *(unsigned char *)(v639 + 8);
  *(void *)uint64_t v638 = *(void *)v639;
  uint64_t v640 = v608[24];
  uint64_t v641 = v606 + v640;
  uint64_t v642 = v607 + v640;
  *(unsigned char *)(v641 + 8) = *(unsigned char *)(v642 + 8);
  *(void *)uint64_t v641 = *(void *)v642;
  *(_OWORD *)(v606 + v608[25]) = *(_OWORD *)(v607 + v608[25]);
  *(_OWORD *)(v606 + v608[26]) = *(_OWORD *)(v607 + v608[26]);
  *(_OWORD *)(v606 + v608[27]) = *(_OWORD *)(v607 + v608[27]);
  *(_OWORD *)(v606 + v608[28]) = *(_OWORD *)(v607 + v608[28]);
  uint64_t v643 = v608[29];
  uint64_t v644 = v606 + v643;
  uint64_t v645 = v607 + v643;
  *(void *)uint64_t v644 = *(void *)v645;
  *(unsigned char *)(v644 + 8) = *(unsigned char *)(v645 + 8);
  __swift_storeEnumTagSinglePayload(v606, 0, 1, (uint64_t)v608);
LABEL_243:
  uint64_t v709 = a3[13];
  uint64_t v710 = (uint64_t)a1 + v709;
  uint64_t v711 = (uint64_t)v4 + v709;
  v712 = (int *)type metadata accessor for RestaurantReservation(0);
  int v713 = __swift_getEnumTagSinglePayload(v710, 1, (uint64_t)v712);
  int v714 = __swift_getEnumTagSinglePayload(v711, 1, (uint64_t)v712);
  if (!v713)
  {
    if (v714)
    {
      outlined destroy of PartialExtractedAttributes(v710, (void (*)(void))type metadata accessor for RestaurantReservation);
      goto LABEL_249;
    }
    uint64_t v724 = *(void *)(v711 + 8);
    *(void *)uint64_t v710 = *(void *)v711;
    *(void *)(v710 + 8) = v724;
    swift_bridgeObjectRelease();
    *(void *)(v710 + 16) = *(void *)(v711 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v710 + 24) = *(void *)(v711 + 24);
    swift_bridgeObjectRelease();
    uint64_t v725 = *(void *)(v711 + 40);
    *(void *)(v710 + 32) = *(void *)(v711 + 32);
    *(void *)(v710 + 40) = v725;
    swift_bridgeObjectRelease();
    uint64_t v726 = *(void *)(v711 + 56);
    *(void *)(v710 + 48) = *(void *)(v711 + 48);
    *(void *)(v710 + 56) = v726;
    swift_bridgeObjectRelease();
    uint64_t v727 = *(void *)(v711 + 72);
    *(void *)(v710 + 64) = *(void *)(v711 + 64);
    *(void *)(v710 + 72) = v727;
    swift_bridgeObjectRelease();
    uint64_t v728 = *(void *)(v711 + 88);
    *(void *)(v710 + 80) = *(void *)(v711 + 80);
    *(void *)(v710 + 88) = v728;
    swift_bridgeObjectRelease();
    *(unsigned char *)(v710 + 96) = *(unsigned char *)(v711 + 96);
    uint64_t v729 = *(void *)(v711 + 112);
    *(void *)(v710 + 104) = *(void *)(v711 + 104);
    *(void *)(v710 + 112) = v729;
    swift_bridgeObjectRelease();
    uint64_t v730 = *(void *)(v711 + 128);
    *(void *)(v710 + 120) = *(void *)(v711 + 120);
    *(void *)(v710 + 128) = v730;
    swift_bridgeObjectRelease();
    uint64_t v731 = v712[14];
    v732 = (void *)(v710 + v731);
    v733 = (const void *)(v711 + v731);
    uint64_t v734 = type metadata accessor for DateComponents();
    int v735 = __swift_getEnumTagSinglePayload((uint64_t)v732, 1, v734);
    int v736 = __swift_getEnumTagSinglePayload((uint64_t)v733, 1, v734);
    if (v735)
    {
      if (!v736)
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v734 - 8) + 32))(v732, v733, v734);
        __swift_storeEnumTagSinglePayload((uint64_t)v732, 0, 1, v734);
LABEL_258:
        uint64_t v739 = v712[15];
        v740 = (void *)(v710 + v739);
        v741 = (uint64_t *)(v711 + v739);
        uint64_t v743 = *v741;
        uint64_t v742 = v741[1];
        void *v740 = v743;
        v740[1] = v742;
        swift_bridgeObjectRelease();
        uint64_t v744 = v712[16];
        v745 = (void *)(v710 + v744);
        v746 = (uint64_t *)(v711 + v744);
        uint64_t v748 = *v746;
        uint64_t v747 = v746[1];
        void *v745 = v748;
        v745[1] = v747;
        swift_bridgeObjectRelease();
        uint64_t v749 = v712[17];
        v750 = (void *)(v710 + v749);
        v751 = (uint64_t *)(v711 + v749);
        uint64_t v753 = *v751;
        uint64_t v752 = v751[1];
        void *v750 = v753;
        v750[1] = v752;
        swift_bridgeObjectRelease();
        uint64_t v754 = v712[18];
        v755 = (void *)(v710 + v754);
        v756 = (uint64_t *)(v711 + v754);
        uint64_t v758 = *v756;
        uint64_t v757 = v756[1];
        void *v755 = v758;
        v755[1] = v757;
        swift_bridgeObjectRelease();
        uint64_t v759 = v712[19];
        v760 = (void *)(v710 + v759);
        v761 = (uint64_t *)(v711 + v759);
        uint64_t v763 = *v761;
        uint64_t v762 = v761[1];
        void *v760 = v763;
        v760[1] = v762;
        swift_bridgeObjectRelease();
        *(void *)(v710 + v712[20]) = *(void *)(v711 + v712[20]);
        swift_bridgeObjectRelease();
        uint64_t v764 = v712[21];
        v765 = (void *)(v710 + v764);
        v766 = (uint64_t *)(v711 + v764);
        uint64_t v768 = *v766;
        uint64_t v767 = v766[1];
        void *v765 = v768;
        v765[1] = v767;
        swift_bridgeObjectRelease();
        uint64_t v769 = v712[22];
        v770 = (void *)(v710 + v769);
        v771 = (uint64_t *)(v711 + v769);
        uint64_t v773 = *v771;
        uint64_t v772 = v771[1];
        void *v770 = v773;
        v770[1] = v772;
        swift_bridgeObjectRelease();
        uint64_t v774 = v712[23];
        v775 = (void *)(v710 + v774);
        v776 = (uint64_t *)(v711 + v774);
        uint64_t v778 = *v776;
        uint64_t v777 = v776[1];
        void *v775 = v778;
        v775[1] = v777;
        swift_bridgeObjectRelease();
        return a1;
      }
    }
    else
    {
      uint64_t v737 = *(void *)(v734 - 8);
      if (!v736)
      {
        (*(void (**)(void *, const void *, uint64_t))(v737 + 40))(v732, v733, v734);
        goto LABEL_258;
      }
      (*(void (**)(void *, uint64_t))(v737 + 8))(v732, v734);
    }
    uint64_t v738 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v732, v733, *(void *)(*(void *)(v738 - 8) + 64));
    goto LABEL_258;
  }
  if (v714)
  {
LABEL_249:
    uint64_t v723 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
    memcpy((void *)v710, (const void *)v711, *(void *)(*(void *)(v723 - 8) + 64));
    return a1;
  }
  long long v715 = *(_OWORD *)(v711 + 16);
  *(_OWORD *)uint64_t v710 = *(_OWORD *)v711;
  *(_OWORD *)(v710 + 16) = v715;
  long long v716 = *(_OWORD *)(v711 + 48);
  *(_OWORD *)(v710 + 32) = *(_OWORD *)(v711 + 32);
  *(_OWORD *)(v710 + 48) = v716;
  long long v717 = *(_OWORD *)(v711 + 80);
  *(_OWORD *)(v710 + 64) = *(_OWORD *)(v711 + 64);
  *(_OWORD *)(v710 + 80) = v717;
  *(unsigned char *)(v710 + 96) = *(unsigned char *)(v711 + 96);
  *(_OWORD *)(v710 + 104) = *(_OWORD *)(v711 + 104);
  *(_OWORD *)(v710 + 120) = *(_OWORD *)(v711 + 120);
  uint64_t v718 = v712[14];
  v719 = (void *)(v710 + v718);
  v720 = (const void *)(v711 + v718);
  uint64_t v721 = type metadata accessor for DateComponents();
  if (__swift_getEnumTagSinglePayload((uint64_t)v720, 1, v721))
  {
    uint64_t v722 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v719, v720, *(void *)(*(void *)(v722 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v721 - 8) + 32))(v719, v720, v721);
    __swift_storeEnumTagSinglePayload((uint64_t)v719, 0, 1, v721);
  }
  *(_OWORD *)(v710 + v712[15]) = *(_OWORD *)(v711 + v712[15]);
  *(_OWORD *)(v710 + v712[16]) = *(_OWORD *)(v711 + v712[16]);
  *(_OWORD *)(v710 + v712[17]) = *(_OWORD *)(v711 + v712[17]);
  *(_OWORD *)(v710 + v712[18]) = *(_OWORD *)(v711 + v712[18]);
  *(_OWORD *)(v710 + v712[19]) = *(_OWORD *)(v711 + v712[19]);
  *(void *)(v710 + v712[20]) = *(void *)(v711 + v712[20]);
  *(_OWORD *)(v710 + v712[21]) = *(_OWORD *)(v711 + v712[21]);
  *(_OWORD *)(v710 + v712[22]) = *(_OWORD *)(v711 + v712[22]);
  *(_OWORD *)(v710 + v712[23]) = *(_OWORD *)(v711 + v712[23]);
  __swift_storeEnumTagSinglePayload(v710, 0, 1, (uint64_t)v712);
  return a1;
}

uint64_t getEnumTagSinglePayload for PartialExtractedAttributes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_258496E98);
}

uint64_t sub_258496E98()
{
  OUTLINED_FUNCTION_87_1();
  if (v2) {
    return OUTLINED_FUNCTION_44_21();
  }
  OUTLINED_FUNCTION_119_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
  OUTLINED_FUNCTION_29_3();
  if (*(_DWORD *)(v4 + 84) == v0)
  {
    uint64_t v5 = v1[5];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
    OUTLINED_FUNCTION_29_3();
    if (*(_DWORD *)(v6 + 84) == v0)
    {
      uint64_t v5 = v1[6];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
      OUTLINED_FUNCTION_29_3();
      if (*(_DWORD *)(v7 + 84) == v0)
      {
        uint64_t v5 = v1[7];
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
        OUTLINED_FUNCTION_29_3();
        if (*(_DWORD *)(v8 + 84) == v0)
        {
          uint64_t v5 = v1[8];
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
          OUTLINED_FUNCTION_29_3();
          if (*(_DWORD *)(v9 + 84) == v0)
          {
            uint64_t v5 = v1[9];
          }
          else
          {
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
            OUTLINED_FUNCTION_29_3();
            if (*(_DWORD *)(v10 + 84) == v0)
            {
              uint64_t v5 = v1[10];
            }
            else
            {
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
              OUTLINED_FUNCTION_29_3();
              if (*(_DWORD *)(v11 + 84) == v0)
              {
                uint64_t v5 = v1[11];
              }
              else
              {
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
                OUTLINED_FUNCTION_29_3();
                if (*(_DWORD *)(v12 + 84) == v0)
                {
                  uint64_t v5 = v1[12];
                }
                else
                {
                  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
                  uint64_t v5 = v1[13];
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v13 = OUTLINED_FUNCTION_108_7(v5);
  return __swift_getEnumTagSinglePayload(v13, v14, v15);
}

uint64_t storeEnumTagSinglePayload for PartialExtractedAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_258497058);
}

void sub_258497058()
{
  OUTLINED_FUNCTION_71_1();
  if (v2)
  {
    OUTLINED_FUNCTION_113_11();
  }
  else
  {
    uint64_t v3 = v1;
    int v4 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
    OUTLINED_FUNCTION_29_3();
    if (*(_DWORD *)(v5 + 84) == v4)
    {
      uint64_t v6 = v3[5];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
      OUTLINED_FUNCTION_29_3();
      if (*(_DWORD *)(v7 + 84) == v4)
      {
        uint64_t v6 = v3[6];
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
        OUTLINED_FUNCTION_29_3();
        if (*(_DWORD *)(v8 + 84) == v4)
        {
          uint64_t v6 = v3[7];
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
          OUTLINED_FUNCTION_29_3();
          if (*(_DWORD *)(v9 + 84) == v4)
          {
            uint64_t v6 = v3[8];
          }
          else
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
            OUTLINED_FUNCTION_29_3();
            if (*(_DWORD *)(v10 + 84) == v4)
            {
              uint64_t v6 = v3[9];
            }
            else
            {
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
              OUTLINED_FUNCTION_29_3();
              if (*(_DWORD *)(v11 + 84) == v4)
              {
                uint64_t v6 = v3[10];
              }
              else
              {
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
                OUTLINED_FUNCTION_29_3();
                if (*(_DWORD *)(v12 + 84) == v4)
                {
                  uint64_t v6 = v3[11];
                }
                else
                {
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
                  OUTLINED_FUNCTION_29_3();
                  if (*(_DWORD *)(v13 + 84) == v4)
                  {
                    uint64_t v6 = v3[12];
                  }
                  else
                  {
                    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
                    uint64_t v6 = v3[13];
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v14 = OUTLINED_FUNCTION_95_0(v6);
    __swift_storeEnumTagSinglePayload(v14, v15, v16, v17);
  }
}

void type metadata completion function for PartialExtractedAttributes()
{
  type metadata accessor for RentalCarReservation?(319, &lazy cache variable for type metadata for RentalCarReservation?, (void (*)(uint64_t))type metadata accessor for RentalCarReservation);
  if (v0 <= 0x3F)
  {
    type metadata accessor for RentalCarReservation?(319, &lazy cache variable for type metadata for TicketedTransportation?, (void (*)(uint64_t))type metadata accessor for TicketedTransportation);
    if (v1 <= 0x3F)
    {
      type metadata accessor for RentalCarReservation?(319, &lazy cache variable for type metadata for TicketedShow?, (void (*)(uint64_t))type metadata accessor for TicketedShow);
      if (v2 <= 0x3F)
      {
        type metadata accessor for RentalCarReservation?(319, &lazy cache variable for type metadata for Appointment?, (void (*)(uint64_t))type metadata accessor for Appointment);
        if (v3 <= 0x3F)
        {
          type metadata accessor for RentalCarReservation?(319, &lazy cache variable for type metadata for Party?, (void (*)(uint64_t))type metadata accessor for Party);
          if (v4 <= 0x3F)
          {
            type metadata accessor for RentalCarReservation?(319, &lazy cache variable for type metadata for Trip?, (void (*)(uint64_t))type metadata accessor for Trip);
            if (v5 <= 0x3F)
            {
              type metadata accessor for RentalCarReservation?(319, &lazy cache variable for type metadata for FlightReservation?, (void (*)(uint64_t))type metadata accessor for FlightReservation);
              if (v6 <= 0x3F)
              {
                type metadata accessor for RentalCarReservation?(319, &lazy cache variable for type metadata for HotelReservation?, (void (*)(uint64_t))type metadata accessor for HotelReservation);
                if (v7 <= 0x3F)
                {
                  type metadata accessor for RentalCarReservation?(319, &lazy cache variable for type metadata for RestaurantReservation?, (void (*)(uint64_t))type metadata accessor for RestaurantReservation);
                  if (v8 <= 0x3F) {
                    swift_initStructMetadata();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for PreExtractedCard(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    uint64_t v11 = a2[9];
    a1[8] = a2[8];
    a1[9] = v11;
    uint64_t v12 = a2[11];
    uint64_t v13 = a3[10];
    long long v70 = (char *)a2 + v13;
    __dst = (char *)a1 + v13;
    a1[10] = a2[10];
    a1[11] = v12;
    uint64_t v14 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v70, 1, v14))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(__dst, v70, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(__dst, v70, v14);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v14);
    }
    uint64_t v17 = a3[11];
    long long v18 = (char *)v4 + v17;
    long long v19 = (char *)a2 + v17;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v17, 1, v14))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v18, v19, v14);
      __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v14);
    }
    uint64_t v21 = a3[12];
    uint64_t v22 = a3[13];
    uint64_t v23 = (uint64_t *)((char *)v4 + v21);
    uint64_t v24 = (uint64_t *)((char *)a2 + v21);
    uint64_t v25 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v25;
    uint64_t v26 = (uint64_t *)((char *)v4 + v22);
    uint64_t v27 = (uint64_t *)((char *)a2 + v22);
    uint64_t v28 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v28;
    uint64_t v29 = a3[14];
    uint64_t v30 = a3[15];
    uint64_t v31 = (uint64_t *)((char *)v4 + v29);
    uint64_t v32 = (uint64_t *)((char *)a2 + v29);
    uint64_t v33 = v32[1];
    *uint64_t v31 = *v32;
    v31[1] = v33;
    uint64_t v34 = (char *)v4 + v30;
    uint64_t v35 = (char *)a2 + v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v35, 1, v14))
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v34, v35, v14);
      __swift_storeEnumTagSinglePayload((uint64_t)v34, 0, 1, v14);
    }
    uint64_t v37 = a3[16];
    uint64_t v38 = a3[17];
    uint64_t v39 = (uint64_t *)((char *)v4 + v37);
    uint64_t v40 = (uint64_t *)((char *)a2 + v37);
    uint64_t v41 = v40[1];
    *uint64_t v39 = *v40;
    v39[1] = v41;
    uint64_t v42 = (uint64_t *)((char *)v4 + v38);
    uint64_t v43 = (uint64_t *)((char *)a2 + v38);
    uint64_t v44 = v43[1];
    void *v42 = *v43;
    v42[1] = v44;
    uint64_t v45 = a3[18];
    uint64_t v46 = a3[19];
    uint64_t v47 = (uint64_t *)((char *)v4 + v45);
    uint64_t v48 = (uint64_t *)((char *)a2 + v45);
    uint64_t v49 = v48[1];
    *uint64_t v47 = *v48;
    v47[1] = v49;
    uint64_t v50 = (uint64_t *)((char *)v4 + v46);
    uint64_t v51 = (uint64_t *)((char *)a2 + v46);
    uint64_t v52 = v51[1];
    *uint64_t v50 = *v51;
    v50[1] = v52;
    uint64_t v53 = a3[20];
    uint64_t v54 = a3[21];
    int v55 = (uint64_t *)((char *)v4 + v53);
    int v56 = (uint64_t *)((char *)a2 + v53);
    uint64_t v57 = v56[1];
    *int v55 = *v56;
    v55[1] = v57;
    long long v58 = (uint64_t *)((char *)v4 + v54);
    long long v59 = (uint64_t *)((char *)a2 + v54);
    uint64_t v60 = v59[1];
    *long long v58 = *v59;
    v58[1] = v60;
    uint64_t v61 = a3[22];
    uint64_t v62 = a3[23];
    uint64_t v63 = (uint64_t *)((char *)v4 + v61);
    uint64_t v64 = (uint64_t *)((char *)a2 + v61);
    uint64_t v65 = v64[1];
    *uint64_t v63 = *v64;
    v63[1] = v65;
    uint64_t v66 = (uint64_t *)((char *)v4 + v62);
    int v67 = (uint64_t *)((char *)a2 + v62);
    uint64_t v68 = v67[1];
    void *v66 = *v67;
    v66[1] = v68;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for PreExtractedCard(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[10];
  uint64_t v5 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  uint64_t v6 = a1 + a2[11];
  if (!__swift_getEnumTagSinglePayload(v6, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v6, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + a2[15];
  if (!__swift_getEnumTagSinglePayload(v7, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v7, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PreExtractedCard(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  uint64_t v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  uint64_t v11 = a2[11];
  uint64_t v12 = a3[10];
  uint64_t v68 = (char *)a2 + v12;
  __dst = (char *)a1 + v12;
  a1[10] = a2[10];
  a1[11] = v11;
  uint64_t v13 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v68, 1, v13))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(__dst, v68, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(__dst, v68, v13);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v13);
  }
  uint64_t v15 = a3[11];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v15, 1, v13))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v16, v17, v13);
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v13);
  }
  uint64_t v19 = a3[12];
  uint64_t v20 = a3[13];
  uint64_t v21 = (void *)((char *)a1 + v19);
  uint64_t v22 = (void *)((char *)a2 + v19);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  uint64_t v24 = (void *)((char *)a1 + v20);
  uint64_t v25 = (void *)((char *)a2 + v20);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  uint64_t v27 = a3[14];
  uint64_t v28 = a3[15];
  uint64_t v29 = (void *)((char *)a1 + v27);
  uint64_t v30 = (void *)((char *)a2 + v27);
  uint64_t v31 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v31;
  uint64_t v32 = (char *)a1 + v28;
  uint64_t v33 = (char *)a2 + v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v33, 1, v13))
  {
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v32, v33, v13);
    __swift_storeEnumTagSinglePayload((uint64_t)v32, 0, 1, v13);
  }
  uint64_t v35 = a3[16];
  uint64_t v36 = a3[17];
  uint64_t v37 = (void *)((char *)a1 + v35);
  uint64_t v38 = (void *)((char *)a2 + v35);
  uint64_t v39 = v38[1];
  *uint64_t v37 = *v38;
  v37[1] = v39;
  uint64_t v40 = (void *)((char *)a1 + v36);
  uint64_t v41 = (void *)((char *)a2 + v36);
  uint64_t v42 = v41[1];
  *uint64_t v40 = *v41;
  v40[1] = v42;
  uint64_t v43 = a3[18];
  uint64_t v44 = a3[19];
  uint64_t v45 = (void *)((char *)a1 + v43);
  uint64_t v46 = (void *)((char *)a2 + v43);
  uint64_t v47 = v46[1];
  *uint64_t v45 = *v46;
  v45[1] = v47;
  uint64_t v48 = (void *)((char *)a1 + v44);
  uint64_t v49 = (void *)((char *)a2 + v44);
  uint64_t v50 = v49[1];
  *uint64_t v48 = *v49;
  v48[1] = v50;
  uint64_t v51 = a3[20];
  uint64_t v52 = a3[21];
  uint64_t v53 = (void *)((char *)a1 + v51);
  uint64_t v54 = (void *)((char *)a2 + v51);
  uint64_t v55 = v54[1];
  *uint64_t v53 = *v54;
  v53[1] = v55;
  int v56 = (void *)((char *)a1 + v52);
  uint64_t v57 = (void *)((char *)a2 + v52);
  uint64_t v58 = v57[1];
  *int v56 = *v57;
  v56[1] = v58;
  uint64_t v59 = a3[22];
  uint64_t v60 = a3[23];
  uint64_t v61 = (void *)((char *)a1 + v59);
  uint64_t v62 = (void *)((char *)a2 + v59);
  uint64_t v63 = v62[1];
  *uint64_t v61 = *v62;
  v61[1] = v63;
  uint64_t v64 = (void *)((char *)a1 + v60);
  uint64_t v65 = (void *)((char *)a2 + v60);
  uint64_t v66 = v65[1];
  void *v64 = *v65;
  v64[1] = v66;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PreExtractedCard(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[10];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = a3[11];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v14, 1, v9);
  int v18 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v9);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v15, v16, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v19 = *(void *)(v9 - 8);
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v9);
LABEL_12:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v15, v16, v9);
LABEL_13:
  uint64_t v21 = a3[12];
  uint64_t v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = (void *)((char *)a2 + v21);
  *uint64_t v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[13];
  uint64_t v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (void *)((char *)a2 + v24);
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[14];
  uint64_t v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  *uint64_t v28 = *v29;
  v28[1] = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[15];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  int v33 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v30, 1, v9);
  int v34 = __swift_getEnumTagSinglePayload((uint64_t)v32, 1, v9);
  if (!v33)
  {
    uint64_t v35 = *(void *)(v9 - 8);
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 24))(v31, v32, v9);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v31, v9);
    goto LABEL_18;
  }
  if (v34)
  {
LABEL_18:
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v31, v32, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v31, v32, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v31, 0, 1, v9);
LABEL_19:
  uint64_t v37 = a3[16];
  uint64_t v38 = (void *)((char *)a1 + v37);
  uint64_t v39 = (void *)((char *)a2 + v37);
  void *v38 = *v39;
  v38[1] = v39[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v40 = a3[17];
  uint64_t v41 = (void *)((char *)a1 + v40);
  uint64_t v42 = (void *)((char *)a2 + v40);
  *uint64_t v41 = *v42;
  v41[1] = v42[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[18];
  uint64_t v44 = (void *)((char *)a1 + v43);
  uint64_t v45 = (void *)((char *)a2 + v43);
  *uint64_t v44 = *v45;
  v44[1] = v45[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[19];
  uint64_t v47 = (void *)((char *)a1 + v46);
  uint64_t v48 = (void *)((char *)a2 + v46);
  *uint64_t v47 = *v48;
  v47[1] = v48[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v49 = a3[20];
  uint64_t v50 = (void *)((char *)a1 + v49);
  uint64_t v51 = (void *)((char *)a2 + v49);
  *uint64_t v50 = *v51;
  v50[1] = v51[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v52 = a3[21];
  uint64_t v53 = (void *)((char *)a1 + v52);
  uint64_t v54 = (void *)((char *)a2 + v52);
  *uint64_t v53 = *v54;
  v53[1] = v54[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v55 = a3[22];
  int v56 = (void *)((char *)a1 + v55);
  uint64_t v57 = (void *)((char *)a2 + v55);
  *int v56 = *v57;
  v56[1] = v57[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v58 = a3[23];
  uint64_t v59 = (void *)((char *)a1 + v58);
  uint64_t v60 = (void *)((char *)a2 + v58);
  *uint64_t v59 = *v60;
  v59[1] = v60[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for PreExtractedCard(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  long long v8 = a2[5];
  uint64_t v9 = a3[10];
  uint64_t v10 = (char *)a1 + v9;
  int v11 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v12 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  }
  uint64_t v14 = a3[11];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v14, 1, v12))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v15, v16, v12);
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v12);
  }
  uint64_t v18 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  *(_OWORD *)((char *)a1 + v18) = *(_OWORD *)((char *)a2 + v18);
  uint64_t v19 = a3[15];
  *(_OWORD *)((char *)a1 + a3[14]) = *(_OWORD *)((char *)a2 + a3[14]);
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v19, 1, v12))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v20, v21, v12);
    __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v12);
  }
  uint64_t v23 = a3[17];
  *(_OWORD *)((char *)a1 + a3[16]) = *(_OWORD *)((char *)a2 + a3[16]);
  *(_OWORD *)((char *)a1 + v23) = *(_OWORD *)((char *)a2 + v23);
  uint64_t v24 = a3[19];
  *(_OWORD *)((char *)a1 + a3[18]) = *(_OWORD *)((char *)a2 + a3[18]);
  *(_OWORD *)((char *)a1 + v24) = *(_OWORD *)((char *)a2 + v24);
  uint64_t v25 = a3[21];
  *(_OWORD *)((char *)a1 + a3[20]) = *(_OWORD *)((char *)a2 + a3[20]);
  *(_OWORD *)((char *)a1 + v25) = *(_OWORD *)((char *)a2 + v25);
  uint64_t v26 = a3[23];
  *(_OWORD *)((char *)a1 + a3[22]) = *(_OWORD *)((char *)a2 + a3[22]);
  *(_OWORD *)((char *)a1 + v26) = *(_OWORD *)((char *)a2 + v26);
  return a1;
}

void *assignWithTake for PreExtractedCard(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = a2[11];
  a1[10] = a2[10];
  a1[11] = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[10];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v15);
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15);
  if (EnumTagSinglePayload)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v18 = *(void *)(v15 - 8);
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v13, v15);
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v13, v14, v15);
LABEL_7:
  uint64_t v20 = a3[11];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  int v23 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v20, 1, v15);
  int v24 = __swift_getEnumTagSinglePayload((uint64_t)v22, 1, v15);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v21, v22, v15);
      __swift_storeEnumTagSinglePayload((uint64_t)v21, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v25 = *(void *)(v15 - 8);
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v21, v15);
LABEL_12:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v21, v22, v15);
LABEL_13:
  uint64_t v27 = a3[12];
  uint64_t v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  *uint64_t v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[13];
  int v33 = (void *)((char *)a1 + v32);
  int v34 = (void *)((char *)a2 + v32);
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  *int v33 = v36;
  v33[1] = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = a3[14];
  uint64_t v38 = (void *)((char *)a1 + v37);
  uint64_t v39 = (void *)((char *)a2 + v37);
  uint64_t v41 = *v39;
  uint64_t v40 = v39[1];
  void *v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease();
  uint64_t v42 = a3[15];
  uint64_t v43 = (char *)a1 + v42;
  uint64_t v44 = (char *)a2 + v42;
  int v45 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v42, 1, v15);
  int v46 = __swift_getEnumTagSinglePayload((uint64_t)v44, 1, v15);
  if (!v45)
  {
    uint64_t v47 = *(void *)(v15 - 8);
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 40))(v43, v44, v15);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v47 + 8))(v43, v15);
    goto LABEL_18;
  }
  if (v46)
  {
LABEL_18:
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v43, v44, *(void *)(*(void *)(v48 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v43, v44, v15);
  __swift_storeEnumTagSinglePayload((uint64_t)v43, 0, 1, v15);
LABEL_19:
  uint64_t v49 = a3[16];
  uint64_t v50 = (void *)((char *)a1 + v49);
  uint64_t v51 = (void *)((char *)a2 + v49);
  uint64_t v53 = *v51;
  uint64_t v52 = v51[1];
  *uint64_t v50 = v53;
  v50[1] = v52;
  swift_bridgeObjectRelease();
  uint64_t v54 = a3[17];
  uint64_t v55 = (void *)((char *)a1 + v54);
  int v56 = (void *)((char *)a2 + v54);
  uint64_t v58 = *v56;
  uint64_t v57 = v56[1];
  *uint64_t v55 = v58;
  v55[1] = v57;
  swift_bridgeObjectRelease();
  uint64_t v59 = a3[18];
  uint64_t v60 = (void *)((char *)a1 + v59);
  uint64_t v61 = (void *)((char *)a2 + v59);
  uint64_t v63 = *v61;
  uint64_t v62 = v61[1];
  *uint64_t v60 = v63;
  v60[1] = v62;
  swift_bridgeObjectRelease();
  uint64_t v64 = a3[19];
  uint64_t v65 = (void *)((char *)a1 + v64);
  uint64_t v66 = (void *)((char *)a2 + v64);
  uint64_t v68 = *v66;
  uint64_t v67 = v66[1];
  void *v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease();
  uint64_t v69 = a3[20];
  long long v70 = (void *)((char *)a1 + v69);
  long long v71 = (void *)((char *)a2 + v69);
  uint64_t v73 = *v71;
  uint64_t v72 = v71[1];
  void *v70 = v73;
  v70[1] = v72;
  swift_bridgeObjectRelease();
  uint64_t v74 = a3[21];
  uint64_t v75 = (void *)((char *)a1 + v74);
  uint64_t v76 = (void *)((char *)a2 + v74);
  uint64_t v78 = *v76;
  uint64_t v77 = v76[1];
  void *v75 = v78;
  v75[1] = v77;
  swift_bridgeObjectRelease();
  uint64_t v79 = a3[22];
  uint64_t v80 = (void *)((char *)a1 + v79);
  size_t v81 = (void *)((char *)a2 + v79);
  uint64_t v83 = *v81;
  uint64_t v82 = v81[1];
  void *v80 = v83;
  v80[1] = v82;
  swift_bridgeObjectRelease();
  uint64_t v84 = a3[23];
  uint64_t v85 = (void *)((char *)a1 + v84);
  uint64_t v86 = (void *)((char *)a2 + v84);
  uint64_t v88 = *v86;
  uint64_t v87 = v86[1];
  *uint64_t v85 = v88;
  v85[1] = v87;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PreExtractedCard(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_258498D34);
}

uint64_t sub_258498D34()
{
  OUTLINED_FUNCTION_87_1();
  if (v1) {
    return OUTLINED_FUNCTION_44_21();
  }
  OUTLINED_FUNCTION_119_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v3 = OUTLINED_FUNCTION_108_7(*(int *)(v0 + 40));
  return __swift_getEnumTagSinglePayload(v3, v4, v5);
}

uint64_t storeEnumTagSinglePayload for PreExtractedCard(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_258498DB4);
}

void sub_258498DB4()
{
  OUTLINED_FUNCTION_71_1();
  if (v1)
  {
    OUTLINED_FUNCTION_113_11();
  }
  else
  {
    uint64_t v2 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    uint64_t v3 = OUTLINED_FUNCTION_95_0(*(int *)(v2 + 40));
    __swift_storeEnumTagSinglePayload(v3, v4, v5, v6);
  }
}

void type metadata completion function for PreExtractedCard()
{
  type metadata accessor for RentalCarReservation?(319, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for PreExtractedCard.Keys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xEE)
  {
    if (a2 + 18 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 18) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 19;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x13;
  int v5 = v6 - 19;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for PreExtractedCard.Keys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xED)
  {
    unsigned int v6 = ((a2 - 238) >> 8) + 1;
    *uint64_t result = a2 + 18;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x258499050);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 18;
        break;
    }
  }
  return result;
}

void type metadata accessor for PreExtractedCard.Keys()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for PreExtractedContact(uint64_t *a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    uint64_t v11 = a2[9];
    a1[8] = a2[8];
    a1[9] = v11;
    uint64_t v12 = a2[11];
    uint64_t v13 = a3[11];
    int v34 = (char *)a2 + v13;
    __dst = (char *)a1 + v13;
    a1[10] = a2[10];
    a1[11] = v12;
    uint64_t v14 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v34, 1, v14))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(__dst, v34, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(__dst, v34, v14);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v14);
    }
    uint64_t v17 = a3[12];
    uint64_t v18 = a3[13];
    uint64_t v19 = (uint64_t *)((char *)v4 + v17);
    uint64_t v20 = (uint64_t *)((char *)a2 + v17);
    uint64_t v21 = v20[1];
    uint64_t v22 = *(uint64_t *)((char *)a2 + v18);
    void *v19 = *v20;
    v19[1] = v21;
    *(uint64_t *)((char *)v4 + v18) = v22;
    uint64_t v23 = a3[14];
    int v24 = (char *)v4 + v23;
    uint64_t v25 = (char *)a2 + v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v25, 1, v14))
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v24, v25, v14);
      __swift_storeEnumTagSinglePayload((uint64_t)v24, 0, 1, v14);
    }
    uint64_t v27 = a3[16];
    *(uint64_t *)((char *)v4 + a3[15]) = *(uint64_t *)((char *)a2 + a3[15]);
    *(uint64_t *)((char *)v4 + v27) = *(uint64_t *)((char *)a2 + v27);
    uint64_t v28 = a3[17];
    uint64_t v29 = a3[18];
    uint64_t v30 = (uint64_t *)((char *)v4 + v28);
    uint64_t v31 = (uint64_t *)((char *)a2 + v28);
    uint64_t v32 = v31[1];
    void *v30 = *v31;
    v30[1] = v32;
    *(uint64_t *)((char *)v4 + v29) = *(uint64_t *)((char *)a2 + v29);
    *(uint64_t *)((char *)v4 + a3[19]) = *(uint64_t *)((char *)a2 + a3[19]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for PreExtractedContact(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + *(int *)(a2 + 56);
  if (!__swift_getEnumTagSinglePayload(v6, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v6, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PreExtractedContact(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  uint64_t v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  uint64_t v11 = a2[11];
  uint64_t v12 = a3[11];
  uint64_t v32 = (char *)a2 + v12;
  __dst = (char *)a1 + v12;
  a1[10] = a2[10];
  a1[11] = v11;
  uint64_t v13 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v32, 1, v13))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(__dst, v32, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(__dst, v32, v13);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v13);
  }
  uint64_t v15 = a3[12];
  uint64_t v16 = a3[13];
  uint64_t v17 = (void *)((char *)a1 + v15);
  uint64_t v18 = (void *)((char *)a2 + v15);
  uint64_t v19 = v18[1];
  uint64_t v20 = *(void *)((char *)a2 + v16);
  *uint64_t v17 = *v18;
  v17[1] = v19;
  *(void *)((char *)a1 + v16) = v20;
  uint64_t v21 = a3[14];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v23, 1, v13))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v22, v23, v13);
    __swift_storeEnumTagSinglePayload((uint64_t)v22, 0, 1, v13);
  }
  uint64_t v25 = a3[16];
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  *(void *)((char *)a1 + v25) = *(void *)((char *)a2 + v25);
  uint64_t v26 = a3[17];
  uint64_t v27 = a3[18];
  uint64_t v28 = (void *)((char *)a1 + v26);
  uint64_t v29 = (void *)((char *)a2 + v26);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  *(void *)((char *)a1 + v27) = *(void *)((char *)a2 + v27);
  *(void *)((char *)a1 + a3[19]) = *(void *)((char *)a2 + a3[19]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PreExtractedContact(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[11];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = a3[12];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  void *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[14];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  int v20 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v17, 1, v9);
  int v21 = __swift_getEnumTagSinglePayload((uint64_t)v19, 1, v9);
  if (!v20)
  {
    uint64_t v22 = *(void *)(v9 - 8);
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 24))(v18, v19, v9);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v18, v9);
    goto LABEL_12;
  }
  if (v21)
  {
LABEL_12:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v18, v19, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v9);
LABEL_13:
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[16]) = *(void *)((char *)a2 + a3[16]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[17];
  uint64_t v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (void *)((char *)a2 + v24);
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[18]) = *(void *)((char *)a2 + a3[18]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[19]) = *(void *)((char *)a2 + a3[19]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for PreExtractedContact(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  long long v8 = a2[5];
  uint64_t v9 = a3[11];
  uint64_t v10 = (char *)a1 + v9;
  int v11 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v12 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  }
  uint64_t v14 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
  uint64_t v15 = a3[14];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v15, 1, v12))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v16, v17, v12);
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v12);
  }
  uint64_t v19 = a3[16];
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  *(void *)((char *)a1 + v19) = *(void *)((char *)a2 + v19);
  uint64_t v20 = a3[18];
  *(_OWORD *)((char *)a1 + a3[17]) = *(_OWORD *)((char *)a2 + a3[17]);
  *(void *)((char *)a1 + v20) = *(void *)((char *)a2 + v20);
  *(void *)((char *)a1 + a3[19]) = *(void *)((char *)a2 + a3[19]);
  return a1;
}

void *assignWithTake for PreExtractedContact(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRelease();
  uint64_t v10 = a2[11];
  a1[10] = a2[10];
  a1[11] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[11];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v14);
  int v16 = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14);
  if (EnumTagSinglePayload)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
      __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v17 = *(void *)(v14 - 8);
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v14);
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 40))(v12, v13, v14);
LABEL_7:
  uint64_t v19 = a3[12];
  uint64_t v20 = (void *)((char *)a1 + v19);
  int v21 = (void *)((char *)a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[14];
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  int v27 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v24, 1, v14);
  int v28 = __swift_getEnumTagSinglePayload((uint64_t)v26, 1, v14);
  if (!v27)
  {
    uint64_t v29 = *(void *)(v14 - 8);
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 40))(v25, v26, v14);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v25, v14);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v25, v26, v14);
  __swift_storeEnumTagSinglePayload((uint64_t)v25, 0, 1, v14);
LABEL_13:
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[16]) = *(void *)((char *)a2 + a3[16]);
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[17];
  uint64_t v32 = (void *)((char *)a1 + v31);
  int v33 = (void *)((char *)a2 + v31);
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  void *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[18]) = *(void *)((char *)a2 + a3[18]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[19]) = *(void *)((char *)a2 + a3[19]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PreExtractedContact(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25849A110);
}

uint64_t sub_25849A110()
{
  OUTLINED_FUNCTION_87_1();
  if (v1) {
    return OUTLINED_FUNCTION_44_21();
  }
  OUTLINED_FUNCTION_119_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v3 = OUTLINED_FUNCTION_108_7(*(int *)(v0 + 44));
  return __swift_getEnumTagSinglePayload(v3, v4, v5);
}

uint64_t storeEnumTagSinglePayload for PreExtractedContact(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25849A190);
}

void sub_25849A190()
{
  OUTLINED_FUNCTION_71_1();
  if (v1)
  {
    OUTLINED_FUNCTION_113_11();
  }
  else
  {
    uint64_t v2 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    uint64_t v3 = OUTLINED_FUNCTION_95_0(*(int *)(v2 + 44));
    __swift_storeEnumTagSinglePayload(v3, v4, v5, v6);
  }
}

void type metadata completion function for PreExtractedContact()
{
  type metadata accessor for RentalCarReservation?(319, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for PreExtractedContact.Keys()
{
}

uint64_t destroy for PreExtractedBreadcrumb()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PreExtractedBreadcrumb(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  uint64_t v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  uint64_t v10 = a2[15];
  a1[14] = a2[14];
  a1[15] = v10;
  uint64_t v11 = a2[17];
  a1[16] = a2[16];
  a1[17] = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PreExtractedBreadcrumb(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[17] = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PreExtractedBreadcrumb(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PreExtractedBreadcrumb(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 144))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PreExtractedBreadcrumb(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 144) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for PreExtractedBreadcrumb()
{
}

void type metadata accessor for PreExtractedBreadcrumb.Keys()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for PreExtractedSharedLink(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v10 = a2[7];
    uint64_t v11 = a3[8];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    a1[6] = a2[6];
    a1[7] = v10;
    uint64_t v14 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
    }
    uint64_t v17 = a3[9];
    uint64_t v18 = a3[10];
    uint64_t v19 = (uint64_t *)((char *)v4 + v17);
    uint64_t v20 = (uint64_t *)((char *)a2 + v17);
    uint64_t v21 = v20[1];
    void *v19 = *v20;
    v19[1] = v21;
    uint64_t v22 = (uint64_t *)((char *)v4 + v18);
    uint64_t v23 = (uint64_t *)((char *)a2 + v18);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    uint64_t v25 = a3[11];
    uint64_t v26 = a3[12];
    int v27 = (uint64_t *)((char *)v4 + v25);
    int v28 = (uint64_t *)((char *)a2 + v25);
    uint64_t v29 = v28[1];
    void *v27 = *v28;
    v27[1] = v29;
    uint64_t v30 = (char *)v4 + v26;
    uint64_t v31 = (char *)a2 + v26;
    uint64_t v32 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v31, 1, v32))
    {
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v30, v31, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
      __swift_storeEnumTagSinglePayload((uint64_t)v30, 0, 1, v32);
    }
    uint64_t v34 = a3[13];
    uint64_t v35 = (char *)v4 + v34;
    uint64_t v36 = (char *)a2 + v34;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v34, 1, v32))
    {
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v35, v36, v32);
      __swift_storeEnumTagSinglePayload((uint64_t)v35, 0, 1, v32);
    }
    uint64_t v38 = a3[14];
    uint64_t v39 = a3[15];
    uint64_t v40 = (char *)v4 + v38;
    uint64_t v41 = (char *)a2 + v38;
    *(void *)uint64_t v40 = *(void *)v41;
    v40[8] = v41[8];
    uint64_t v42 = (uint64_t *)((char *)v4 + v39);
    uint64_t v43 = (uint64_t *)((char *)a2 + v39);
    uint64_t v44 = v43[1];
    void *v42 = *v43;
    v42[1] = v44;
    uint64_t v45 = a3[16];
    uint64_t v46 = a3[17];
    uint64_t v47 = (uint64_t *)((char *)v4 + v45);
    uint64_t v48 = (uint64_t *)((char *)a2 + v45);
    uint64_t v49 = v48[1];
    *uint64_t v47 = *v48;
    v47[1] = v49;
    uint64_t v50 = (uint64_t *)((char *)v4 + v46);
    uint64_t v51 = (uint64_t *)((char *)a2 + v46);
    uint64_t v52 = v51[1];
    *uint64_t v50 = *v51;
    v50[1] = v52;
    uint64_t v53 = a3[18];
    uint64_t v54 = a3[19];
    uint64_t v55 = (uint64_t *)((char *)v4 + v53);
    int v56 = (uint64_t *)((char *)a2 + v53);
    uint64_t v57 = v56[1];
    *uint64_t v55 = *v56;
    v55[1] = v57;
    uint64_t v58 = (uint64_t *)((char *)v4 + v54);
    uint64_t v59 = (uint64_t *)((char *)a2 + v54);
    uint64_t v60 = v59[1];
    *uint64_t v58 = *v59;
    v58[1] = v60;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for PreExtractedSharedLink(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[8];
  uint64_t v5 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + a2[12];
  uint64_t v7 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  uint64_t v8 = a1 + a2[13];
  if (!__swift_getEnumTagSinglePayload(v8, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v8, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PreExtractedSharedLink(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v9 = a2[7];
  uint64_t v10 = a3[8];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  a1[6] = a2[6];
  a1[7] = v9;
  uint64_t v13 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
  }
  uint64_t v15 = a3[9];
  uint64_t v16 = a3[10];
  uint64_t v17 = (void *)((char *)a1 + v15);
  uint64_t v18 = (void *)((char *)a2 + v15);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = (void *)((char *)a1 + v16);
  uint64_t v21 = (void *)((char *)a2 + v16);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  uint64_t v23 = a3[11];
  uint64_t v24 = a3[12];
  uint64_t v25 = (void *)((char *)a1 + v23);
  uint64_t v26 = (void *)((char *)a2 + v23);
  uint64_t v27 = v26[1];
  *uint64_t v25 = *v26;
  v25[1] = v27;
  int v28 = (char *)a1 + v24;
  uint64_t v29 = (char *)a2 + v24;
  uint64_t v30 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v30))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
    __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v30);
  }
  uint64_t v32 = a3[13];
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v32, 1, v30))
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v33, v34, v30);
    __swift_storeEnumTagSinglePayload((uint64_t)v33, 0, 1, v30);
  }
  uint64_t v36 = a3[14];
  uint64_t v37 = a3[15];
  uint64_t v38 = (char *)a1 + v36;
  uint64_t v39 = (char *)a2 + v36;
  *(void *)uint64_t v38 = *(void *)v39;
  v38[8] = v39[8];
  uint64_t v40 = (void *)((char *)a1 + v37);
  uint64_t v41 = (void *)((char *)a2 + v37);
  uint64_t v42 = v41[1];
  *uint64_t v40 = *v41;
  v40[1] = v42;
  uint64_t v43 = a3[16];
  uint64_t v44 = a3[17];
  uint64_t v45 = (void *)((char *)a1 + v43);
  uint64_t v46 = (void *)((char *)a2 + v43);
  uint64_t v47 = v46[1];
  *uint64_t v45 = *v46;
  v45[1] = v47;
  uint64_t v48 = (void *)((char *)a1 + v44);
  uint64_t v49 = (void *)((char *)a2 + v44);
  uint64_t v50 = v49[1];
  *uint64_t v48 = *v49;
  v48[1] = v50;
  uint64_t v51 = a3[18];
  uint64_t v52 = a3[19];
  uint64_t v53 = (void *)((char *)a1 + v51);
  uint64_t v54 = (void *)((char *)a2 + v51);
  uint64_t v55 = v54[1];
  *uint64_t v53 = *v54;
  v53[1] = v55;
  int v56 = (void *)((char *)a1 + v52);
  uint64_t v57 = (void *)((char *)a2 + v52);
  uint64_t v58 = v57[1];
  *int v56 = *v57;
  v56[1] = v58;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PreExtractedSharedLink(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[8];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = a3[9];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  void *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[10];
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[11];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[12];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = type metadata accessor for Date();
  int v27 = __swift_getEnumTagSinglePayload((uint64_t)v24, 1, v26);
  int v28 = __swift_getEnumTagSinglePayload((uint64_t)v25, 1, v26);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
      __swift_storeEnumTagSinglePayload((uint64_t)v24, 0, 1, v26);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v29 = *(void *)(v26 - 8);
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v24, v26);
LABEL_12:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v24, v25, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v24, v25, v26);
LABEL_13:
  uint64_t v31 = a3[13];
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  int v34 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v31, 1, v26);
  int v35 = __swift_getEnumTagSinglePayload((uint64_t)v33, 1, v26);
  if (!v34)
  {
    uint64_t v36 = *(void *)(v26 - 8);
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v32, v33, v26);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v32, v26);
    goto LABEL_18;
  }
  if (v35)
  {
LABEL_18:
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v32, v33, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v32, v33, v26);
  __swift_storeEnumTagSinglePayload((uint64_t)v32, 0, 1, v26);
LABEL_19:
  uint64_t v38 = a3[14];
  uint64_t v39 = (char *)a1 + v38;
  uint64_t v40 = (char *)a2 + v38;
  uint64_t v41 = *(void *)v40;
  v39[8] = v40[8];
  *(void *)uint64_t v39 = v41;
  uint64_t v42 = a3[15];
  uint64_t v43 = (void *)((char *)a1 + v42);
  uint64_t v44 = (void *)((char *)a2 + v42);
  *uint64_t v43 = *v44;
  v43[1] = v44[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v45 = a3[16];
  uint64_t v46 = (void *)((char *)a1 + v45);
  uint64_t v47 = (void *)((char *)a2 + v45);
  *uint64_t v46 = *v47;
  v46[1] = v47[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v48 = a3[17];
  uint64_t v49 = (void *)((char *)a1 + v48);
  uint64_t v50 = (void *)((char *)a2 + v48);
  void *v49 = *v50;
  v49[1] = v50[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[18];
  uint64_t v52 = (void *)((char *)a1 + v51);
  uint64_t v53 = (void *)((char *)a2 + v51);
  *uint64_t v52 = *v53;
  v52[1] = v53[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = a3[19];
  uint64_t v55 = (void *)((char *)a1 + v54);
  int v56 = (void *)((char *)a2 + v54);
  *uint64_t v55 = *v56;
  v55[1] = v56[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for PreExtractedSharedLink(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[8];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  uint64_t v13 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  uint64_t v14 = a3[12];
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)((char *)a2 + a3[11]);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
  }
  uint64_t v19 = a3[13];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v19, 1, v17))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v20, v21, v17);
    __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v17);
  }
  uint64_t v23 = a3[14];
  uint64_t v24 = a3[15];
  uint64_t v25 = (char *)a1 + v23;
  uint64_t v26 = (char *)a2 + v23;
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v26[8];
  *(_OWORD *)((char *)a1 + v24) = *(_OWORD *)((char *)a2 + v24);
  uint64_t v27 = a3[17];
  *(_OWORD *)((char *)a1 + a3[16]) = *(_OWORD *)((char *)a2 + a3[16]);
  *(_OWORD *)((char *)a1 + v27) = *(_OWORD *)((char *)a2 + v27);
  uint64_t v28 = a3[19];
  *(_OWORD *)((char *)a1 + a3[18]) = *(_OWORD *)((char *)a2 + a3[18]);
  *(_OWORD *)((char *)a1 + v28) = *(_OWORD *)((char *)a2 + v28);
  return a1;
}

void *assignWithTake for PreExtractedSharedLink(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[8];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v13);
  int v15 = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13);
  if (EnumTagSinglePayload)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v16 = *(void *)(v13 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v13);
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v11, v12, v13);
LABEL_7:
  uint64_t v18 = a3[9];
  uint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = (void *)((char *)a2 + v18);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  void *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[10];
  uint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (void *)((char *)a2 + v23);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  *uint64_t v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  uint64_t v28 = a3[11];
  uint64_t v29 = (void *)((char *)a1 + v28);
  uint64_t v30 = (void *)((char *)a2 + v28);
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  *uint64_t v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[12];
  int v34 = (char *)a1 + v33;
  int v35 = (char *)a2 + v33;
  uint64_t v36 = type metadata accessor for Date();
  int v37 = __swift_getEnumTagSinglePayload((uint64_t)v34, 1, v36);
  int v38 = __swift_getEnumTagSinglePayload((uint64_t)v35, 1, v36);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v34, v35, v36);
      __swift_storeEnumTagSinglePayload((uint64_t)v34, 0, 1, v36);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v39 = *(void *)(v36 - 8);
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v34, v36);
LABEL_12:
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v34, v35, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v39 + 40))(v34, v35, v36);
LABEL_13:
  uint64_t v41 = a3[13];
  uint64_t v42 = (char *)a1 + v41;
  uint64_t v43 = (char *)a2 + v41;
  int v44 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v41, 1, v36);
  int v45 = __swift_getEnumTagSinglePayload((uint64_t)v43, 1, v36);
  if (!v44)
  {
    uint64_t v46 = *(void *)(v36 - 8);
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 40))(v42, v43, v36);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v46 + 8))(v42, v36);
    goto LABEL_18;
  }
  if (v45)
  {
LABEL_18:
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v42, v43, *(void *)(*(void *)(v47 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v42, v43, v36);
  __swift_storeEnumTagSinglePayload((uint64_t)v42, 0, 1, v36);
LABEL_19:
  uint64_t v48 = a3[14];
  uint64_t v49 = a3[15];
  uint64_t v50 = (char *)a1 + v48;
  uint64_t v51 = (char *)a2 + v48;
  *(void *)uint64_t v50 = *(void *)v51;
  v50[8] = v51[8];
  uint64_t v52 = (void *)((char *)a1 + v49);
  uint64_t v53 = (void *)((char *)a2 + v49);
  uint64_t v55 = *v53;
  uint64_t v54 = v53[1];
  *uint64_t v52 = v55;
  v52[1] = v54;
  swift_bridgeObjectRelease();
  uint64_t v56 = a3[16];
  uint64_t v57 = (void *)((char *)a1 + v56);
  uint64_t v58 = (void *)((char *)a2 + v56);
  uint64_t v60 = *v58;
  uint64_t v59 = v58[1];
  *uint64_t v57 = v60;
  v57[1] = v59;
  swift_bridgeObjectRelease();
  uint64_t v61 = a3[17];
  uint64_t v62 = (void *)((char *)a1 + v61);
  uint64_t v63 = (void *)((char *)a2 + v61);
  uint64_t v65 = *v63;
  uint64_t v64 = v63[1];
  void *v62 = v65;
  v62[1] = v64;
  swift_bridgeObjectRelease();
  uint64_t v66 = a3[18];
  uint64_t v67 = (void *)((char *)a1 + v66);
  uint64_t v68 = (void *)((char *)a2 + v66);
  uint64_t v70 = *v68;
  uint64_t v69 = v68[1];
  *uint64_t v67 = v70;
  v67[1] = v69;
  swift_bridgeObjectRelease();
  uint64_t v71 = a3[19];
  uint64_t v72 = (void *)((char *)a1 + v71);
  uint64_t v73 = (void *)((char *)a2 + v71);
  uint64_t v75 = *v73;
  uint64_t v74 = v73[1];
  *uint64_t v72 = v75;
  v72[1] = v74;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PreExtractedSharedLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25849BE5C);
}

uint64_t sub_25849BE5C()
{
  OUTLINED_FUNCTION_87_1();
  if (v2) {
    return OUTLINED_FUNCTION_44_21();
  }
  OUTLINED_FUNCTION_119_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_29_3();
  if (*(_DWORD *)(v4 + 84) == v0)
  {
    uint64_t v5 = *(int *)(v1 + 32);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    uint64_t v5 = *(int *)(v1 + 48);
  }
  uint64_t v6 = OUTLINED_FUNCTION_108_7(v5);
  return __swift_getEnumTagSinglePayload(v6, v7, v8);
}

uint64_t storeEnumTagSinglePayload for PreExtractedSharedLink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25849BF04);
}

void sub_25849BF04()
{
  OUTLINED_FUNCTION_71_1();
  if (v2)
  {
    OUTLINED_FUNCTION_113_11();
  }
  else
  {
    uint64_t v3 = v1;
    int v4 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_29_3();
    if (*(_DWORD *)(v5 + 84) == v4)
    {
      uint64_t v6 = *(int *)(v3 + 32);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      uint64_t v6 = *(int *)(v3 + 48);
    }
    uint64_t v7 = OUTLINED_FUNCTION_95_0(v6);
    __swift_storeEnumTagSinglePayload(v7, v8, v9, v10);
  }
}

void type metadata completion function for PreExtractedSharedLink()
{
  type metadata accessor for RentalCarReservation?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for RentalCarReservation?(319, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for RentalCarReservation?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for PreExtractedContact.Keys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF2)
  {
    if (a2 + 14 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 14) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 15;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v5 = v6 - 15;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for PreExtractedContact.Keys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *uint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25849C274);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

void type metadata accessor for PreExtractedSharedLink.Keys()
{
}

void *type metadata accessor for PreExtractedSharedLink.CodingKeys()
{
  return &unk_2706B2440;
}

uint64_t getEnumTagSinglePayload for PreExtractedBreadcrumb.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF0)
  {
    if (a2 + 16 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 16) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 17;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x11;
  int v5 = v6 - 17;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for PreExtractedBreadcrumb.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEF)
  {
    unsigned int v6 = ((a2 - 240) >> 8) + 1;
    *uint64_t result = a2 + 16;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25849C40CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 16;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PreExtractedBreadcrumb.CodingKeys()
{
  return &unk_2706B24D0;
}

uint64_t getEnumTagSinglePayload for PreExtractedBreadcrumb.Keys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF1)
  {
    if (a2 + 15 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 15) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 16;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v5 = v6 - 16;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for PreExtractedBreadcrumb.Keys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *uint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25849C598);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PreExtractedContact.CodingKeys()
{
  return &unk_2706B2560;
}

uint64_t getEnumTagSinglePayload for PreExtractedCard.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xED)
  {
    if (a2 + 19 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 19) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 20;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x14;
  int v5 = v6 - 20;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for PreExtractedCard.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 19 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 19) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xED) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEC)
  {
    unsigned int v6 = ((a2 - 237) >> 8) + 1;
    *uint64_t result = a2 + 19;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25849C724);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 19;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PreExtractedCard.CodingKeys()
{
  return &unk_2706B25F0;
}

unsigned char *storeEnumTagSinglePayload for PartialExtractedAttributes.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25849C828);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PartialExtractedAttributes.CodingKeys()
{
  return &unk_2706B2680;
}

uint64_t OUTLINED_FUNCTION_1_30@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 65) = a1;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_3_42()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_4_32()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_29()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_8_18()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_9_24@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 81) = a1;
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_10_31(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return _sypSgWObTm_0(v3 - 144, v3 - 112, a3);
}

uint64_t OUTLINED_FUNCTION_12_33()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_13_34@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 81) = a1;
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

id OUTLINED_FUNCTION_14_26()
{
  return objc_msgSend(v0, (SEL)(v1 + 3985), v2);
}

uint64_t OUTLINED_FUNCTION_15_30()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_16_27()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_20_25@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 65) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

id OUTLINED_FUNCTION_21_25()
{
  return objc_msgSend(v1, (SEL)(v2 + 3985), v0);
}

uint64_t OUTLINED_FUNCTION_26_25()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_27_23()
{
  return _bridgeAnyObjectToAny(_:)();
}

id OUTLINED_FUNCTION_28_20(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_30_28@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 81) = a1;
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_33_22()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

double OUTLINED_FUNCTION_34_25()
{
  return 0.0;
}

uint64_t OUTLINED_FUNCTION_35_25()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_36_23(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return _sypSgWObTm_0((uint64_t)&a25, (uint64_t)&a30, a3);
}

uint64_t OUTLINED_FUNCTION_37_23()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t OUTLINED_FUNCTION_39_21()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_41_23()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_44_21()
{
  unint64_t v1 = *(void *)(v0 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void OUTLINED_FUNCTION_45_15(uint64_t a1@<X8>)
{
  uint64_t v4 = (void *)(v3 + v2);
  *uint64_t v4 = a1;
  v4[1] = v1;
}

uint64_t OUTLINED_FUNCTION_47_18@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 65) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

id OUTLINED_FUNCTION_48_15(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_51_21()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_56_14@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 65) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

void *OUTLINED_FUNCTION_61_13()
{
  return __swift_project_boxed_opaque_existential_1(v0, v0[3]);
}

uint64_t OUTLINED_FUNCTION_62_14@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SearchResultItem?(v2 + a1, v3, v1);
}

uint64_t OUTLINED_FUNCTION_64_11(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_66_16()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_67_14()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_68_16@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (void *)(v3 + a3);
  *uint64_t v4 = result;
  v4[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_69_13()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t OUTLINED_FUNCTION_73_12@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (void *)(v3 + a3);
  *uint64_t v4 = result;
  v4[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_74_15()
{
  return 0x6570797420627573;
}

uint64_t OUTLINED_FUNCTION_75_10()
{
  return 0x7961646874726962;
}

uint64_t OUTLINED_FUNCTION_76_11()
{
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
}

uint64_t OUTLINED_FUNCTION_77_14(int a1)
{
  __swift_storeEnumTagSinglePayload(v1, a1 ^ 1u, 1, v2);
  return __swift_getEnumTagSinglePayload(v1, 1, v2);
}

uint64_t OUTLINED_FUNCTION_78_12(int a1)
{
  __swift_storeEnumTagSinglePayload(v2, a1 ^ 1u, 1, v1);
  return __swift_getEnumTagSinglePayload(v2, 1, v1);
}

uint64_t OUTLINED_FUNCTION_79_11@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_87_12()
{
  *(void *)(v1 - 104) = v0;
  return *(void *)(v1 - 112);
}

void OUTLINED_FUNCTION_89_8(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 104) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_90_12()
{
  *(unsigned char *)(v0 - 65) = 0;
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_91_12()
{
  return *(void *)(v0 - 192);
}

uint64_t OUTLINED_FUNCTION_92_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_93_10(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)(*(void *)(v2 - 104) + *(int *)(*(void *)(v2 - 96) + 68));
  *uint64_t v3 = result;
  v3[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_94_13(uint64_t result, uint64_t a2)
{
  uint64_t v4 = (void *)(v2 + *(int *)(*(void *)(v3 - 96) + 48));
  *uint64_t v4 = result;
  v4[1] = a2;
  return result;
}

void OUTLINED_FUNCTION_96_10(uint64_t a1@<X8>)
{
  *(void *)(v2 - 72) = *(void *)(v1 + a1);
}

uint64_t OUTLINED_FUNCTION_97_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_98_8()
{
  return 0;
}

void OUTLINED_FUNCTION_100_11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 168) = (char *)&a9 - v9;
}

uint64_t OUTLINED_FUNCTION_102_8()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_103_12@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 65) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_107_10()
{
  return *(void *)(v0 - 192);
}

uint64_t OUTLINED_FUNCTION_108_7@<X0>(uint64_t a1@<X8>)
{
  return v1 + a1;
}

uint64_t OUTLINED_FUNCTION_109_9()
{
  return type metadata accessor for PartialExtractedAttributes(0);
}

uint64_t OUTLINED_FUNCTION_110_9()
{
  return *v0;
}

uint64_t OUTLINED_FUNCTION_112_8(unsigned int a1)
{
  return a1 | 0x6220646500000000;
}

void OUTLINED_FUNCTION_113_11()
{
  *(void *)(v1 + 8) = (v0 - 1);
}

void OUTLINED_FUNCTION_116_8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_117_7()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_118_8()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_122_7()
{
  return 1701667182;
}

uint64_t OUTLINED_FUNCTION_124_8()
{
  return v0 - 72;
}

uint64_t OUTLINED_FUNCTION_126_5@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 65) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_127_6()
{
  return 0;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9, unint64_t a10, unint64_t a11, unint64_t a12, unint64_t a13, unint64_t a14, unint64_t a15, uint64_t a16, unint64_t a17, unint64_t a18, unint64_t a19, unint64_t a20)
{
  uint64_t v21 = *(void *)(a1 + 16);
  if (v21)
  {
    uint64_t v22 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    uint64_t v46 = MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v23 = *v22;
      v45[0] = *(v22 - 1);
      v45[1] = v23;
      swift_bridgeObjectRetain();
      closure #1 in FlightReservation.init(id:timeIsUnknown:flightNumber:flightCheckInUrl:flightBookingInfoUrl:flightCarrier:flightCarrierCode:flightDesignator:flightDepartureDateComponents:flightArrivalDateComponents:flightArrivalAirportAddress:flightDepartureAirportAddress:flightArrivalAirportCode:flightDepartureAirportCode:flightArrivalAirportCountry:flightDepartureAirportCountry:flightArrivalAirportLocality:flightDepartureAirportLocality:flightArrivalAirportName:flightDepartureAirportName:flightArrivalAirportRegion:flightDepartureAirportRegion:flightConfirmationNumber:flightPassengerNames:flightPassengerSeatNumbers:flightArrivalTerminal:flightDepartureTerminal:flightBookingProvider:flightBoardingTimeDate:flightDepartureGate:flightArrivalGate:flightDuration:flightCostCurrency:flightCostAmount:flightStatus:answerAttributes:bundleId:mailMessageId:eventSourceBundleIdentifier:eventSourceLLMConsumableDescription:)(v45, a2, a3, a4, a5, a6, a7, a8, &v41, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18,
        a19,
        a20);
      if (v20) {
        break;
      }
      swift_bridgeObjectRelease();
      uint64_t v24 = v42;
      if (v42)
      {
        unint64_t v25 = v41;
        uint64_t v26 = v43;
        uint64_t v27 = v44;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v46 = v31;
        }
        unint64_t v28 = *(void *)(v46 + 16);
        if (v28 >= *(void *)(v46 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v46 = v32;
        }
        uint64_t v29 = v46;
        *(void *)(v46 + 16) = v28 + 1;
        uint64_t v30 = (void *)(v29 + 32 * v28);
        v30[4] = v25;
        v30[5] = v24;
        v30[6] = v26;
        v30[7] = v27;
      }
      v22 += 2;
      if (!--v21)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v46 = MEMORY[0x263F8EE78];
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v46;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    uint64_t v13 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    uint64_t v14 = MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v15 = *v13;
      v35[0] = *(v13 - 1);
      v35[1] = v15;
      swift_bridgeObjectRetain();
      closure #1 in HotelReservation.init(id:timeIsUnknown:hotelReservationId:hotelUnderName:hotelCheckinDateComponents:hotelCheckoutDateComponents:hotelReservationForName:hotelModifyReservationUrl:hotelReservationForTelephone:hotelReservationForAddress:hotelBookingProvider:hotelCustomerNames:hotelRoomNumbers:hotelNumberOfRooms:hotelDuration:hotelCost:hotelStatus:answerAttributes:bundleId:mailMessageId:eventSourceBundleIdentifier:eventSourceLLMConsumableDescription:)(v35, a2, a3, a4, a5, a6, a7, a8, &v31, a9, a10, a11);
      if (v11) {
        break;
      }
      swift_bridgeObjectRelease();
      uint64_t v16 = v32;
      if (v32)
      {
        uint64_t v17 = v31;
        uint64_t v18 = v34;
        uint64_t v36 = v33;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v14 = v21;
        }
        unint64_t v19 = *(void *)(v14 + 16);
        if (v19 >= *(void *)(v14 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v14 = v22;
        }
        *(void *)(v14 + 16) = v19 + 1;
        uint64_t v20 = (void *)(v14 + 32 * v19);
        v20[4] = v17;
        v20[5] = v16;
        v20[6] = v36;
        v20[7] = v18;
      }
      v13 += 2;
      if (!--v12)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v14;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    uint64_t v12 = MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v13 = *v11;
      v34[0] = *(v11 - 1);
      v34[1] = v13;
      swift_bridgeObjectRetain();
      closure #1 in RestaurantReservation.init(id:timeIsUnknown:restaurantReservationId:restaurantUnderName:restaurantStartDateComponents:restaurantPartySize:restaurantReservationForName:restaurantReservationForTelephone:restaurantReservationForAddress:restaurantBookingProvider:restaurantCustomerNames:restaurantMealType:restaurantStatus:answerAttributes:bundleId:mailMessageId:eventSourceBundleIdentifier:eventSourceLLMConsumableDescription:)(v34, a2, a3, a4, a5, a6, a7, a8, &v30, a9);
      if (v9) {
        break;
      }
      swift_bridgeObjectRelease();
      uint64_t v14 = v31;
      if (v31)
      {
        uint64_t v15 = v30;
        uint64_t v16 = v32;
        uint64_t v35 = v33;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v12 = v20;
        }
        unint64_t v17 = *(void *)(v12 + 16);
        if (v17 >= *(void *)(v12 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v12 = v21;
        }
        *(void *)(v12 + 16) = v17 + 1;
        uint64_t v18 = (void *)(v12 + 32 * v17);
        v18[4] = v15;
        v18[5] = v14;
        uint64_t v19 = v35;
        v18[6] = v16;
        v18[7] = v19;
      }
      v11 += 2;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = MEMORY[0x263F8EE78];
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v12;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> FlightReservation.setResolvedFlight(_:)(Swift::String a1)
{
  OUTLINED_FUNCTION_105_0();
  os_log_type_t v5 = v2;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_1();
  uint64_t v38 = v11;
  uint64_t v40 = v10;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_14_10();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Leg?);
  uint64_t v13 = OUTLINED_FUNCTION_81(v12);
  MEMORY[0x270FA5388](v13);
  uint64_t v14 = OUTLINED_FUNCTION_14_8();
  uint64_t v15 = type metadata accessor for FlightSnippet.Leg(v14);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v16);
  unint64_t v17 = (int *)OUTLINED_FUNCTION_200_1();
  uint64_t v18 = &v5[v17[47]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)uint64_t v18 = v9;
  *((void *)v18 + 1) = v7;
  FlightReservation.leg.getter();
  uint64_t v19 = OUTLINED_FUNCTION_31_16();
  if (__swift_getEnumTagSinglePayload(v19, v20, v15) == 1)
  {
    outlined destroy of PQAVerificationModelProtocol?(v1, &demangling cache variable for type metadata for FlightSnippet.Leg?);
  }
  else
  {
    outlined init with take of FlightSnippet.Leg(v1, v3);
    uint64_t v21 = &v5[v17[18]];
    FlightSnippet.Leg.matchesDepartureDate(_:)();
    if (v22)
    {
      FlightSnippet.Leg.arrivalDateComponents.getter();
      uint64_t v39 = *(void (**)(uint8_t *, uint64_t, uint64_t))(v38 + 40);
      v39(&v5[v17[19]], v4, v40);
      FlightSnippet.Leg.departureDateComponents.getter();
      v39(v21, v4, v40);
      uint64_t v23 = *(void *)(v3 + *(int *)(v15 + 20));
      uint64_t v24 = (uint64_t *)(v23
                      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalTerminal);
      swift_beginAccess();
      uint64_t v26 = *v24;
      uint64_t v25 = v24[1];
      uint64_t v27 = &v5[v17[35]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)uint64_t v27 = v26;
      *((void *)v27 + 1) = v25;
      swift_beginAccess();
      uint64_t v29 = *(void *)(v23 + 64);
      uint64_t v28 = *(void *)(v23 + 72);
      swift_bridgeObjectRetain();
      _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
      uint64_t v30 = &v5[v17[36]];
      swift_bridgeObjectRelease();
      *(void *)uint64_t v30 = v29;
      *((void *)v30 + 1) = v28;
      uint64_t v31 = &v5[v17[46]];
      swift_bridgeObjectRelease();
      *(void *)uint64_t v31 = 0;
      *((void *)v31 + 1) = 0;
      uint64_t v32 = &v5[v17[45]];
      swift_bridgeObjectRelease();
      *(void *)uint64_t v32 = 0;
      *((void *)v32 + 1) = 0;
      goto LABEL_11;
    }
    _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
  }
  swift_bridgeObjectRelease();
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  if (one-time initialization token for search != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  __swift_project_value_buffer(v33, (uint64_t)static Logging.search);
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (_WORD *)swift_slowAlloc();
    OUTLINED_FUNCTION_67_0(v36);
    _os_log_impl(&dword_257DC6000, v34, v35, "Rejecting resolved flight data - does not match pre-extracted info.", v5, 2u);
    MEMORY[0x25A2C94B0](v5, -1, -1);
  }

  lazy protocol witness table accessor for type EagerResolutionError and conformance EagerResolutionError();
  swift_allocError();
  *int v37 = 0;
  swift_willThrow();
LABEL_11:
  OUTLINED_FUNCTION_189_2();
  OUTLINED_FUNCTION_120_0();
}

uint64_t type metadata accessor for FlightReservation(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for FlightReservation);
}

uint64_t FlightReservation.resolvedFlight.getter()
{
  OUTLINED_FUNCTION_27_7();
  uint64_t v2 = type metadata accessor for JSONDecodingOptions();
  uint64_t v3 = OUTLINED_FUNCTION_81(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_16();
  if (*(void *)(v1 + *(int *)(type metadata accessor for FlightReservation(0) + 188) + 8))
  {
    type metadata accessor for FlightSnippet.Flight(0);
    swift_bridgeObjectRetain();
    JSONDecodingOptions.init()();
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight((unint64_t *)&lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Flight);
    Message.init(jsonString:options:)();
    return OUTLINED_FUNCTION_6_6(v0, 0);
  }
  else
  {
    type metadata accessor for FlightSnippet.Flight(0);
    uint64_t v4 = OUTLINED_FUNCTION_133_4();
    return __swift_storeEnumTagSinglePayload(v4, v5, v6, v7);
  }
}

void FlightReservation.init(flightNumber:flightCarrierCode:bundleId:flightDepartureDateComponents:)()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v60 = v2;
  uint64_t v64 = v4;
  uint64_t v65 = v3;
  uint64_t v67 = v6;
  uint64_t v68 = v5;
  uint64_t v57 = v7;
  uint64_t v69 = v8;
  uint64_t v66 = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v11 = OUTLINED_FUNCTION_81(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_184_0();
  uint64_t v63 = v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  uint64_t v14 = OUTLINED_FUNCTION_81(v13);
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_59_0();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Calendar?);
  uint64_t v16 = OUTLINED_FUNCTION_81(v15);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DateComponents();
  uint64_t v56 = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v55 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v53 - v23;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v26 = OUTLINED_FUNCTION_81(v25);
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_95_1();
  uint64_t v29 = v27 - v28;
  uint64_t v58 = v27 - v28;
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_219_1();
  uint64_t v59 = v1;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v31);
  UUID.init()();
  uint64_t v32 = UUID.uuidString.getter();
  uint64_t v61 = v33;
  uint64_t v62 = v32;
  OUTLINED_FUNCTION_65();
  v34();
  type metadata accessor for URL();
  OUTLINED_FUNCTION_6_6(v1, 1);
  OUTLINED_FUNCTION_6_6(v29, 1);
  uint64_t v70 = v68;
  uint64_t v71 = v67;
  swift_bridgeObjectRetain();
  v35._uint64_t countAndFlagsBits = v69;
  uint64_t v36 = (uint64_t)v57;
  v35._object = v57;
  String.append(_:)(v35);
  uint64_t v53 = v71;
  uint64_t v54 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v24, v60, v19);
  uint64_t v37 = type metadata accessor for Calendar();
  OUTLINED_FUNCTION_32((uint64_t)v18, v38, v39, v37);
  uint64_t v40 = type metadata accessor for TimeZone();
  OUTLINED_FUNCTION_32(v0, v41, v42, v40);
  uint64_t v43 = (uint64_t)v55;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  type metadata accessor for Date();
  uint64_t v44 = v63;
  uint64_t v45 = OUTLINED_FUNCTION_133_4();
  __swift_storeEnumTagSinglePayload(v45, v46, v47, v48);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_258661700;
  *(void *)(v49 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v49 + 40) = v50;
  LOBYTE(v70) = 1;
  LOBYTE(v52) = 1;
  FlightReservation.init(id:timeIsUnknown:flightNumber:flightCheckInUrl:flightBookingInfoUrl:flightCarrier:flightCarrierCode:flightDesignator:flightDepartureDateComponents:flightArrivalDateComponents:flightArrivalAirportAddress:flightDepartureAirportAddress:flightArrivalAirportCode:flightDepartureAirportCode:flightArrivalAirportCountry:flightDepartureAirportCountry:flightArrivalAirportLocality:flightDepartureAirportLocality:flightArrivalAirportName:flightDepartureAirportName:flightArrivalAirportRegion:flightDepartureAirportRegion:flightConfirmationNumber:flightPassengerNames:flightPassengerSeatNumbers:flightArrivalTerminal:flightDepartureTerminal:flightBookingProvider:flightBoardingTimeDate:flightDepartureGate:flightArrivalGate:flightDuration:flightCostCurrency:flightCostAmount:flightStatus:answerAttributes:bundleId:mailMessageId:eventSourceBundleIdentifier:eventSourceLLMConsumableDescription:)(v62, v61, 0, v69, v36, v59, v58, 0, 0, v68, v67, v54, v53, (uint64_t)v24, v43, 0, 0, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    MEMORY[0x263F8EE78],
    MEMORY[0x263F8EE78],
    0,
    0,
    0,
    0,
    0,
    0,
    v44,
    0,
    0,
    0,
    0,
    0,
    v52,
    0,
    0,
    0,
    0,
    0x100000000,
    0,
    0);
  OUTLINED_FUNCTION_26_2();
  v51();
  OUTLINED_FUNCTION_119_0();
}

uint64_t FlightReservation.status.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Leg?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_17_1();
  FlightReservation.leg.getter();
  uint64_t v3 = type metadata accessor for FlightSnippet.Leg(0);
  uint64_t v4 = OUTLINED_FUNCTION_31_16();
  OUTLINED_FUNCTION_53_2(v4, v5, v3);
  if (v6)
  {
    outlined destroy of PQAVerificationModelProtocol?(v0, &demangling cache variable for type metadata for FlightSnippet.Leg?);
  }
  else
  {
    swift_beginAccess();
    _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
  }
  return String.init<A>(describing:)();
}

uint64_t FlightReservation.flightCost.getter()
{
  uint64_t v2 = OUTLINED_FUNCTION_230_0();
  if ((*(unsigned char *)(v1 + *(int *)(v2 + 172) + 20) & 1) != 0 || !*(void *)(v1 + *(int *)(v2 + 168) + 8))
  {
    uint64_t v3 = 1;
  }
  else
  {
    swift_bridgeObjectRetain();
    IntentCurrencyAmount.init(amount:currencyCode:)();
    uint64_t v3 = 0;
  }
  uint64_t v4 = type metadata accessor for IntentCurrencyAmount();
  return __swift_storeEnumTagSinglePayload(v0, v3, 1, v4);
}

uint64_t RentalCarReservation.init(item:)(uint64_t a1)
{
  return RentalCarReservation.init(item:)(a1, &demangling cache variable for type metadata for RentalCarReservation?);
}

uint64_t TicketedTransportation.init(item:)(uint64_t a1)
{
  return RentalCarReservation.init(item:)(a1, (uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
}

uint64_t TicketedShow.init(item:)(uint64_t a1)
{
  return RentalCarReservation.init(item:)(a1, &demangling cache variable for type metadata for TicketedShow?);
}

uint64_t Appointment.init(item:)(uint64_t a1)
{
  return RentalCarReservation.init(item:)(a1, (uint64_t *)&demangling cache variable for type metadata for Appointment?);
}

uint64_t Party.init(item:)(uint64_t a1)
{
  return RentalCarReservation.init(item:)(a1, &demangling cache variable for type metadata for Party?);
}

uint64_t Trip.init(item:)(uint64_t a1)
{
  return RentalCarReservation.init(item:)(a1, (uint64_t *)&demangling cache variable for type metadata for Trip?);
}

uint64_t RentalCarReservation.init(item:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = OUTLINED_FUNCTION_157_3(a1, a2);
  uint64_t v9 = OUTLINED_FUNCTION_81(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_18_8();
  v6(v7, 1);
  uint64_t v10 = v4(0);
  if (OUTLINED_FUNCTION_287(v10))
  {
    outlined destroy of PQAVerificationModelProtocol?(v5, v3);
    uint64_t v11 = 1;
  }
  else
  {
    outlined init with take of FlightSnippet.Leg(v5, v2);
    uint64_t v11 = 0;
  }
  return __swift_storeEnumTagSinglePayload(v2, v11, 1, (uint64_t)v4);
}

uint64_t FlightReservation.init(item:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_16();
  FlightReservation.init(item:answerAttributes:)(a1, MEMORY[0x263F8EE78], v2);
  uint64_t v7 = type metadata accessor for FlightReservation(0);
  if (__swift_getEnumTagSinglePayload(v2, 1, v7))
  {
    outlined destroy of PQAVerificationModelProtocol?(v2, (uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
    uint64_t v8 = 1;
  }
  else
  {
    outlined init with take of FlightSnippet.Leg(v2, a2);
    uint64_t v8 = 0;
  }
  return OUTLINED_FUNCTION_6_6(a2, v8);
}

uint64_t HotelReservation.init(item:)(uint64_t a1)
{
  return HotelReservation.init(item:)(a1, &demangling cache variable for type metadata for HotelReservation?);
}

uint64_t RestaurantReservation.init(item:)(uint64_t a1)
{
  return HotelReservation.init(item:)(a1, (uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
}

uint64_t HotelReservation.init(item:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = OUTLINED_FUNCTION_157_3(a1, a2);
  uint64_t v9 = OUTLINED_FUNCTION_81(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_18_8();
  v6(v7, MEMORY[0x263F8EE78], 1);
  uint64_t v10 = v4(0);
  if (OUTLINED_FUNCTION_287(v10))
  {
    outlined destroy of PQAVerificationModelProtocol?(v5, v3);
    uint64_t v11 = 1;
  }
  else
  {
    outlined init with take of FlightSnippet.Leg(v5, v2);
    uint64_t v11 = 0;
  }
  return __swift_storeEnumTagSinglePayload(v2, v11, 1, (uint64_t)v4);
}

uint64_t specialized Dictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1)
{
  return specialized Dictionary.init<A>(uniqueKeysWithValues:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, String>, (void (*)(uint64_t, uint64_t, uint64_t *))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
}

{
  return specialized Dictionary.init<A>(uniqueKeysWithValues:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [String]>, (void (*)(uint64_t, uint64_t, uint64_t *))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
}

uint64_t specialized Dictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, uint64_t *))
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t v4 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F8EE80];
  }
  uint64_t v7 = v4;
  uint64_t v5 = swift_bridgeObjectRetain();
  a3(v5, 1, &v7);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t FlightReservation.init(item:answerAttributes:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v303 = a2;
  uint64_t v319 = a1;
  uint64_t v315 = a3;
  unint64_t v278 = type metadata accessor for CharacterSet();
  OUTLINED_FUNCTION_1();
  uint64_t v277 = v5;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_27_10();
  OUTLINED_FUNCTION_194_0(v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v10 = OUTLINED_FUNCTION_81(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_43_4();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_43_4();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_27_10();
  OUTLINED_FUNCTION_22_13(v14);
  unint64_t v291 = type metadata accessor for Calendar();
  OUTLINED_FUNCTION_1();
  uint64_t v299 = v15;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_184_0();
  OUTLINED_FUNCTION_22_13(v17);
  uint64_t v294 = type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_1();
  uint64_t v293 = v18;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_43_4();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_43_4();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_27_10();
  OUTLINED_FUNCTION_194_0(v23);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  uint64_t v25 = OUTLINED_FUNCTION_81(v24);
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_27_10();
  OUTLINED_FUNCTION_22_13(v27);
  uint64_t v300 = type metadata accessor for TimeZone();
  OUTLINED_FUNCTION_1();
  uint64_t v296 = v28;
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_27_10();
  OUTLINED_FUNCTION_194_0(v31);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v33 = OUTLINED_FUNCTION_81(v32);
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_43_4();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_43_4();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v36);
  OUTLINED_FUNCTION_73();
  uint64_t v38 = MEMORY[0x270FA5388](v37);
  uint64_t v40 = (char *)&v231 - v39;
  uint64_t v41 = MEMORY[0x270FA5388](v38);
  uint64_t v43 = (char *)&v231 - v42;
  MEMORY[0x270FA5388](v41);
  OUTLINED_FUNCTION_219_1();
  uint64_t v44 = type metadata accessor for Date();
  OUTLINED_FUNCTION_1();
  uint64_t v46 = v45;
  MEMORY[0x270FA5388](v47);
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v48);
  OUTLINED_FUNCTION_173_4();
  MEMORY[0x270FA5388](v49);
  OUTLINED_FUNCTION_27_10();
  uint64_t v317 = v50;
  uint64_t v51 = (int *)type metadata accessor for FlightReservation(0);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v52);
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v53);
  OUTLINED_FUNCTION_43_4();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v54);
  OUTLINED_FUNCTION_43_4();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v55);
  OUTLINED_FUNCTION_31_9();
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  OUTLINED_FUNCTION_115_7(*(int *)(v56 + 140));
  uint64_t v304 = v57;
  OUTLINED_FUNCTION_115_7(*(int *)(v58 + 144));
  uint64_t v305 = v59;
  OUTLINED_FUNCTION_115_7(*(int *)(v60 + 148));
  uint64_t v306 = v61;
  uint64_t v308 = v3 + *(int *)(v62 + 152);
  OUTLINED_FUNCTION_75_11(v308, 1);
  OUTLINED_FUNCTION_115_7(v51[39]);
  uint64_t v307 = v63;
  OUTLINED_FUNCTION_115_7(v51[40]);
  uint64_t v309 = v64;
  uint64_t v65 = v3 + v51[41];
  *(void *)uint64_t v65 = 0;
  *(unsigned char *)(v65 + 8) = 1;
  OUTLINED_FUNCTION_115_7(v51[42]);
  uint64_t v311 = v66;
  OUTLINED_FUNCTION_115_7(v51[43]);
  *(_DWORD *)(v67 + 16) = 0;
  *(unsigned char *)(v67 + 20) = 1;
  OUTLINED_FUNCTION_115_7(v51[44]);
  uint64_t v310 = v68;
  OUTLINED_FUNCTION_115_7(v51[45]);
  uint64_t v312 = v69;
  OUTLINED_FUNCTION_115_7(v51[46]);
  uint64_t v313 = v70;
  uint64_t v71 = v51;
  uint64_t v72 = v51[47];
  uint64_t v316 = v3;
  OUTLINED_FUNCTION_115_7(v72);
  uint64_t v314 = v73;
  id v318 = objc_msgSend(v319, sel_attributeSet);
  id v74 = objc_msgSend(v318, sel_startDate);
  if (v74)
  {
    uint64_t v75 = v74;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v76 = v46;
    uint64_t v77 = *(void (**)(void))(v46 + 32);
    OUTLINED_FUNCTION_269();
    v77();
    OUTLINED_FUNCTION_75_11((uint64_t)v43, 0);
    OUTLINED_FUNCTION_53_2((uint64_t)v43, 1, v44);
    if (!v104)
    {
      OUTLINED_FUNCTION_269();
      v77();
      OUTLINED_FUNCTION_75_11(v4, 0);
      uint64_t v78 = v46;
      uint64_t v79 = (uint64_t)v71;
      uint64_t v80 = v318;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v76 = v46;
    OUTLINED_FUNCTION_75_11((uint64_t)v43, 1);
  }
  uint64_t v80 = v318;
  id v81 = objc_msgSend(v318, sel_flightDepartureDateTime);
  if (v81)
  {
    uint64_t v82 = v81;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v83 = 0;
  }
  else
  {
    uint64_t v83 = 1;
  }
  uint64_t v78 = v76;
  OUTLINED_FUNCTION_75_11((uint64_t)v40, v83);
  uint64_t v84 = OUTLINED_FUNCTION_285();
  outlined init with take of PQAVerificationModelProtocol?(v84, v85, &demangling cache variable for type metadata for Date?);
  outlined destroy of PQAVerificationModelProtocol?((uint64_t)v43, &demangling cache variable for type metadata for Date?);
  uint64_t v79 = (uint64_t)v71;
LABEL_9:
  OUTLINED_FUNCTION_53_2(v4, 1, v44);
  uint64_t v86 = v301;
  if (v104)
  {
    uint64_t v87 = v4;
LABEL_23:
    OUTLINED_FUNCTION_288();
    outlined destroy of PQAVerificationModelProtocol?(v87, &demangling cache variable for type metadata for Date?);
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v96 = type metadata accessor for Logger();
    uint64_t v97 = (void *)OUTLINED_FUNCTION_43_1(v96, (uint64_t)static Logging.search);
    os_log_type_t v98 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_24_13(v98))
    {
      uint64_t v99 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_67_0(v99);
      OUTLINED_FUNCTION_11_14(&dword_257DC6000, v100, v101, "PreExtractedEvents.FlightReservation: rejecting flight reservation missing date[s]");
      OUTLINED_FUNCTION_34();
    }

    goto LABEL_28;
  }
  uint64_t v88 = *(void (**)(void))(v78 + 32);
  OUTLINED_FUNCTION_147_3();
  v88();
  id v89 = objc_msgSend(v80, sel_endDate);
  if (v89)
  {
    uint64_t v90 = v89;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v91 = v302;
    OUTLINED_FUNCTION_147_3();
    v88();
    OUTLINED_FUNCTION_75_11(v91, 0);
    OUTLINED_FUNCTION_53_2(v91, 1, v44);
    uint64_t v92 = v299;
    if (!v104)
    {
      uint64_t v87 = v298;
      OUTLINED_FUNCTION_147_3();
      v88();
      OUTLINED_FUNCTION_75_11(v87, 0);
      goto LABEL_20;
    }
  }
  else
  {
    OUTLINED_FUNCTION_75_11(v302, 1);
    uint64_t v92 = v299;
  }
  id v93 = objc_msgSend(v80, sel_flightArrivalDateTime);
  uint64_t v87 = v298;
  if (v93)
  {
    uint64_t v94 = v93;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v95 = 0;
  }
  else
  {
    uint64_t v95 = 1;
  }
  OUTLINED_FUNCTION_75_11(v86, v95);
  outlined init with take of PQAVerificationModelProtocol?(v86, v87, &demangling cache variable for type metadata for Date?);
  outlined destroy of PQAVerificationModelProtocol?(v302, &demangling cache variable for type metadata for Date?);
LABEL_20:
  OUTLINED_FUNCTION_53_2(v87, 1, v44);
  if (v104)
  {
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v317, v44);
    goto LABEL_23;
  }
  uint64_t v302 = v78;
  OUTLINED_FUNCTION_147_3();
  v88();
  outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v80, (SEL *)&selRef_flightDepartureTimeZone);
  uint64_t v103 = v295;
  TimeZone.init(identifier:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_53_2(v103, 1, v300);
  if (v104)
  {
    OUTLINED_FUNCTION_288();
    outlined destroy of PQAVerificationModelProtocol?(v103, &demangling cache variable for type metadata for TimeZone?);
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v105 = type metadata accessor for Logger();
    long long v106 = (void *)OUTLINED_FUNCTION_43_1(v105, (uint64_t)static Logging.search);
    os_log_type_t v107 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_24_13(v107))
    {
      uint64_t v108 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_67_0(v108);
      OUTLINED_FUNCTION_11_14(&dword_257DC6000, v109, v110, "PreExtractedEvents.FlightReservation: could not initialize valid depature timezone");
      OUTLINED_FUNCTION_34();
    }

    OUTLINED_FUNCTION_234_0();
    OUTLINED_FUNCTION_165_1();
    ((void (*)(void))v106)();
    OUTLINED_FUNCTION_165_1();
    ((void (*)(void))v106)();
    goto LABEL_28;
  }
  uint64_t v299 = v79;
  uint64_t v301 = v44;
  uint64_t v111 = *(void (**)(void))(v296 + 32);
  OUTLINED_FUNCTION_147_3();
  v111();
  static Calendar.current.getter();
  OUTLINED_FUNCTION_224_0();
  Calendar.dateComponents(in:from:)();
  uint64_t v112 = *(void (**)(void))(v92 + 8);
  OUTLINED_FUNCTION_111_0();
  v112();
  outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v80, (SEL *)&selRef_flightArrivalTimeZone);
  uint64_t v113 = v289;
  TimeZone.init(identifier:)();
  uint64_t v114 = v300;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_53_2(v113, 1, v114);
  if (v115)
  {
    OUTLINED_FUNCTION_288();
    outlined destroy of PQAVerificationModelProtocol?(v113, &demangling cache variable for type metadata for TimeZone?);
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v116 = type metadata accessor for Logger();
    long long v117 = (void *)OUTLINED_FUNCTION_43_1(v116, (uint64_t)static Logging.search);
    os_log_type_t v118 = static os_log_type_t.debug.getter();
    BOOL v119 = OUTLINED_FUNCTION_24_13(v118);
    uint64_t v79 = v299;
    if (v119)
    {
      long long v120 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_67_0(v120);
      OUTLINED_FUNCTION_11_14(&dword_257DC6000, v121, v122, "PreExtractedEvents.FlightReservation: could not initialize valid arrival timezone");
      OUTLINED_FUNCTION_34();
    }

    OUTLINED_FUNCTION_277();
    OUTLINED_FUNCTION_84_11();
    v123();
    OUTLINED_FUNCTION_277();
    OUTLINED_FUNCTION_84_11();
    v124();
    OUTLINED_FUNCTION_234_0();
    OUTLINED_FUNCTION_165_1();
    ((void (*)(void))v117)();
    OUTLINED_FUNCTION_165_1();
    ((void (*)(void))v117)();
    goto LABEL_28;
  }
  OUTLINED_FUNCTION_147_3();
  v111();
  static Calendar.current.getter();
  Calendar.dateComponents(in:from:)();
  OUTLINED_FUNCTION_12_34();
  v112();
  outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v80, (SEL *)&selRef_flightCheckInUrl);
  if (v125)
  {
    uint64_t v126 = v288;
    URL.init(string:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v127 = type metadata accessor for URL();
    uint64_t v126 = v288;
    OUTLINED_FUNCTION_32(v288, v128, v129, v127);
  }
  uint64_t v130 = v287;
  outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v318, (SEL *)&selRef_flightBookingInfoUrl);
  uint64_t v79 = v299;
  if (v131)
  {
    URL.init(string:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v132 = type metadata accessor for URL();
    OUTLINED_FUNCTION_32(v130, v133, v134, v132);
  }
  uint64_t v135 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v318, (SEL *)&selRef_eventTotalCost);
  uint64_t v137 = v136;
  if (v136)
  {
    v320[0] = v135;
    v320[1] = v136;
    static CharacterSet.decimalDigits.getter();
    CharacterSet.inverted.getter();
    uint64_t v138 = *(void (**)(void))(v277 + 8);
    OUTLINED_FUNCTION_82_0();
    v138();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v139 = StringProtocol.components(separatedBy:)();
    OUTLINED_FUNCTION_82_0();
    v138();
    swift_bridgeObjectRelease();
    v320[0] = v139;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    uint64_t v140 = OUTLINED_FUNCTION_79_0();
    uint64_t v142 = specialized Double.init<A>(_:)(v140, v141);
    if ((v143 & 1) == 0)
    {
      uint64_t v137 = MEMORY[0x25A2C8300](*(double *)&v142);
      uint64_t v145 = v144;
      LODWORD(v295) = 0;
      uint64_t v147 = v146;
      uint64_t v148 = (void (*)(void))0xE300000000000000;
      OUTLINED_FUNCTION_218_1(4477781);
      goto LABEL_54;
    }
    uint64_t v137 = 0;
  }
  uint64_t v145 = 0;
  uint64_t v147 = 0;
  uint64_t v298 = 0;
  uint64_t v148 = 0;
  LODWORD(v295) = 1;
LABEL_54:
  uint64_t v149 = v318;
  uint64_t v150 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v318, (SEL *)&selRef_uniqueIdentifier);
  if (!v151)
  {
    OUTLINED_FUNCTION_288();
    swift_bridgeObjectRelease();
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v193 = type metadata accessor for Logger();
    uint64_t v194 = (void *)OUTLINED_FUNCTION_43_1(v193, (uint64_t)static Logging.search);
    os_log_type_t v195 = static os_log_type_t.debug.getter();
    BOOL v196 = OUTLINED_FUNCTION_24_13(v195);
    uint64_t v197 = v318;
    if (v196)
    {
      uint64_t v198 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_67_0(v198);
      OUTLINED_FUNCTION_11_14(&dword_257DC6000, v199, v200, "PreExtractedEvents.FlightReservation: rejecting flight reservation missing identifier");
      OUTLINED_FUNCTION_34();
    }

    outlined destroy of PQAVerificationModelProtocol?(v130, &demangling cache variable for type metadata for URL?);
    outlined destroy of PQAVerificationModelProtocol?(v126, &demangling cache variable for type metadata for URL?);
    uint64_t v201 = *(void (**)(void))(v293 + 8);
    OUTLINED_FUNCTION_221();
    OUTLINED_FUNCTION_65();
    v201();
    OUTLINED_FUNCTION_186_3();
    OUTLINED_FUNCTION_30();
    v148();
    OUTLINED_FUNCTION_65();
    v201();
    OUTLINED_FUNCTION_30();
    v148();
    uint64_t v202 = OUTLINED_FUNCTION_123_8();
    ((void (*)(uint64_t))v201)(v202);
    OUTLINED_FUNCTION_165_1();
    v201();
LABEL_28:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of PQAVerificationModelProtocol?(v308, &demangling cache variable for type metadata for Date?);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return __swift_storeEnumTagSinglePayload(v315, 1, 1, v79);
  }
  uint64_t v158 = v150;
  uint64_t v159 = v151;
  uint64_t v277 = v145;
  unint64_t v291 = (unint64_t)v148;
  unint64_t v278 = v137;
  CSSearchableItemAttributeSet.timeIsUnknownBool.getter(v150, v151, v152, v153, v154, v155, v156, v157, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240);
  int v276 = v160;
  uint64_t v275 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v149, (SEL *)&selRef_flightNumber);
  uint64_t v274 = v161;
  outlined init with copy of PQAVerificationModelProtocol?(v126, v285, &demangling cache variable for type metadata for URL?);
  outlined init with copy of PQAVerificationModelProtocol?(v130, v286, &demangling cache variable for type metadata for URL?);
  uint64_t v162 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v149, (SEL *)&selRef_flightCarrier);
  uint64_t v272 = v163;
  uint64_t v271 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v149, (SEL *)&selRef_flightCarrierCode);
  uint64_t v270 = v164;
  uint64_t v269 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v149, (SEL *)&selRef_flightDesignator);
  uint64_t v268 = v165;
  uint64_t v166 = *(void (**)(uint64_t, uint64_t, uint64_t))(v293 + 16);
  uint64_t v167 = v294;
  v166(v284, v297, v294);
  v166(v283, v292, v167);
  uint64_t v168 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v149, (SEL *)&selRef_flightArrivalAirportAddress);
  uint64_t v170 = v169;
  uint64_t v265 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v149, (SEL *)&selRef_flightDepartureAirportAddress);
  uint64_t v264 = v171;
  uint64_t v172 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v149, (SEL *)&selRef_flightArrivalAirportCode);
  uint64_t v262 = v173;
  uint64_t v261 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v149, (SEL *)&selRef_flightDepartureAirportCode);
  uint64_t v260 = v174;
  uint64_t v259 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v149, (SEL *)&selRef_flightArrivalAirportCountry);
  uint64_t v258 = v175;
  uint64_t v257 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v149, (SEL *)&selRef_flightDepartureAirportCountry);
  uint64_t v256 = v176;
  uint64_t v255 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v149, (SEL *)&selRef_flightArrivalAirportLocality);
  uint64_t v254 = v177;
  uint64_t v253 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v149, (SEL *)&selRef_flightDepartureAirportLocality);
  uint64_t v252 = v178;
  uint64_t v251 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v149, (SEL *)&selRef_flightArrivalAirportName);
  uint64_t v250 = v179;
  uint64_t v249 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v149, (SEL *)&selRef_flightDepartureAirportName);
  uint64_t v248 = v180;
  uint64_t v247 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v149, (SEL *)&selRef_flightArrivalAirportRegion);
  uint64_t v246 = v181;
  uint64_t v245 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v149, (SEL *)&selRef_flightDepartureAirportRegion);
  uint64_t v244 = v182;
  uint64_t v243 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v149, (SEL *)&selRef_flightConfirmationNumber);
  uint64_t v242 = v183;
  outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v149, (SEL *)&selRef_eventCustomerNames);
  OUTLINED_FUNCTION_263();
  uint64_t v241 = v184;
  outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v149, (SEL *)&selRef_flightPassengerSeatNumbers);
  OUTLINED_FUNCTION_263();
  uint64_t v240 = v185;
  uint64_t v239 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v149, (SEL *)&selRef_flightArrivalTerminal);
  unint64_t v238 = v186;
  uint64_t v237 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v149, (SEL *)&selRef_flightDepartureTerminal);
  unint64_t v236 = v187;
  uint64_t v235 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v149, (SEL *)&selRef_eventProvider);
  uint64_t v234 = v188;
  id v189 = objc_msgSend(v149, sel_flightBoardingDateTime);
  uint64_t v290 = v158;
  uint64_t v289 = v159;
  uint64_t v273 = v162;
  uint64_t v267 = v168;
  uint64_t v266 = v170;
  uint64_t v263 = v172;
  if (v189)
  {
    uint64_t v190 = v189;
    uint64_t v191 = v279;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v192 = 0;
  }
  else
  {
    uint64_t v192 = 1;
    uint64_t v191 = v279;
  }
  uint64_t v279 = v147;
  __swift_storeEnumTagSinglePayload(v191, v192, 1, v301);
  uint64_t v203 = v318;
  uint64_t v233 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v318, (SEL *)&selRef_flightDepartureGate);
  unint64_t v232 = v204;
  uint64_t v231 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v203, (SEL *)&selRef_flightArrivalGate);
  uint64_t v206 = v205;
  objc_msgSend(v203, sel_eventDuration);
  uint64_t v208 = v207;
  uint64_t v209 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v203, (SEL *)&selRef_eventStatus);
  uint64_t v211 = v210;
  outlined bridged method (pb) of @objc CSSearchableItem.bundleID.getter(v319);
  if (v212)
  {
    outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v203, (SEL *)&selRef_mailMessageID);
    outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v203, (SEL *)&selRef_eventSourceBundleIdentifier);
    LOBYTE(v320[0]) = v295;
    LOBYTE(v230) = 0;
    uint64_t v213 = v282;
    FlightReservation.init(id:timeIsUnknown:flightNumber:flightCheckInUrl:flightBookingInfoUrl:flightCarrier:flightCarrierCode:flightDesignator:flightDepartureDateComponents:flightArrivalDateComponents:flightArrivalAirportAddress:flightDepartureAirportAddress:flightArrivalAirportCode:flightDepartureAirportCode:flightArrivalAirportCountry:flightDepartureAirportCountry:flightArrivalAirportLocality:flightDepartureAirportLocality:flightArrivalAirportName:flightDepartureAirportName:flightArrivalAirportRegion:flightDepartureAirportRegion:flightConfirmationNumber:flightPassengerNames:flightPassengerSeatNumbers:flightArrivalTerminal:flightDepartureTerminal:flightBookingProvider:flightBoardingTimeDate:flightDepartureGate:flightArrivalGate:flightDuration:flightCostCurrency:flightCostAmount:flightStatus:answerAttributes:bundleId:mailMessageId:eventSourceBundleIdentifier:eventSourceLLMConsumableDescription:)(v290, v289, v276 & 1, v275, v274, v285, v286, v273, v272, v271, v270, v269, v268, v284, v283, v267, v266, v265, v264,
      v263,
      v262,
      v261,
      v260,
      v259,
      v258,
      v257,
      v256,
      v255,
      v254,
      v253,
      v252,
      v251,
      v250,
      v249,
      v248,
      v247,
      v246,
      v245,
      v244,
      v243,
      v242,
      v241,
      v240,
      v239,
      v238,
      v237,
      v236,
      v235,
      v234,
      v191,
      v233,
      v232,
      v231,
      v206,
      v208,
      v230,
      v298,
      v291,
      v278,
      v277,
      v279 | ((unint64_t)v295 << 32),
      v209,
      v211);
    uint64_t v214 = v280;
    outlined init with copy of FlightReservation(v213, v280);
    uint64_t v215 = v316;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of PQAVerificationModelProtocol?(v308, &demangling cache variable for type metadata for Date?);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of FlightSnippet.Leg(v214, v215);
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v216 = type metadata accessor for Logger();
    uint64_t v217 = (uint8_t *)__swift_project_value_buffer(v216, (uint64_t)static Logging.search);
    uint64_t v218 = v281;
    outlined init with copy of FlightReservation(v213, v281);
    uint64_t v219 = Logger.logObject.getter();
    os_log_type_t v220 = static os_log_type_t.debug.getter();
    uint64_t v221 = v220;
    if (os_log_type_enabled(v219, v220))
    {
      uint64_t v217 = (uint8_t *)OUTLINED_FUNCTION_14_1();
      v320[0] = OUTLINED_FUNCTION_13_1();
      *(_DWORD *)uint64_t v217 = 136642819;
      outlined init with copy of FlightReservation(v218, v214);
      uint64_t v222 = String.init<A>(describing:)();
      v320[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v222, v223, v320);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
      _os_log_impl(&dword_257DC6000, v219, (os_log_type_t)v221, "PreExtractedEvents.FlightReservation: created: %{sensitive}s", v217, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_34();
    }
    else
    {

      _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
    }
    _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
    outlined destroy of PQAVerificationModelProtocol?(v287, &demangling cache variable for type metadata for URL?);
    outlined destroy of PQAVerificationModelProtocol?(v288, &demangling cache variable for type metadata for URL?);
    long long v224 = *(void (**)(uint64_t))(v293 + 8);
    uint64_t v225 = OUTLINED_FUNCTION_221();
    v224(v225);
    OUTLINED_FUNCTION_186_3();
    OUTLINED_FUNCTION_30();
    ((void (*)(void))v217)();
    ((void (*)(uint64_t, uint64_t))v224)(v297, v221);
    OUTLINED_FUNCTION_30();
    ((void (*)(void))v217)();
    uint64_t v226 = OUTLINED_FUNCTION_123_8();
    v224(v226);
    OUTLINED_FUNCTION_165_1();
    ((void (*)(void))v224)();
    uint64_t v227 = v315;
    uint64_t v228 = OUTLINED_FUNCTION_19_0();
    outlined init with copy of FlightReservation(v228, v229);
    __swift_storeEnumTagSinglePayload(v227, 0, 1, v79);
    return _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

uint64_t HotelReservation.init(item:answerAttributes:requireDates:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  LODWORD(v277) = a3;
  uint64_t v284 = a4;
  uint64_t v285 = a2;
  uint64_t v270 = type metadata accessor for Calendar();
  OUTLINED_FUNCTION_1();
  uint64_t v269 = v8;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_184_0();
  OUTLINED_FUNCTION_194_0(v10);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v12 = OUTLINED_FUNCTION_81(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v13);
  uint64_t v278 = (uint64_t)&v251 - v14;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_43_4();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_43_4();
  OUTLINED_FUNCTION_73();
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v251 - v19;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_173_4();
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_43_4();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v251 - v23;
  uint64_t v25 = type metadata accessor for Date();
  OUTLINED_FUNCTION_1();
  uint64_t v279 = v26;
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_43_4();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_43_4();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v30);
  uint64_t v280 = (uint64_t)&v251 - v31;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_27_10();
  OUTLINED_FUNCTION_194_0(v33);
  uint64_t v261 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v34);
  uint64_t v275 = (uint64_t)&v251 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v36);
  uint64_t v274 = (uint64_t)&v251 - v37;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v38);
  OUTLINED_FUNCTION_43_4();
  uint64_t v272 = v39;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v40);
  OUTLINED_FUNCTION_43_4();
  uint64_t v271 = v41;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v42);
  OUTLINED_FUNCTION_43_4();
  uint64_t v276 = v43;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v44);
  OUTLINED_FUNCTION_43_4();
  uint64_t v281 = v45;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v46);
  OUTLINED_FUNCTION_27_10();
  uint64_t v282 = v47;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  uint64_t v49 = OUTLINED_FUNCTION_81(v48);
  MEMORY[0x270FA5388](v49);
  OUTLINED_FUNCTION_18_8();
  uint64_t v50 = type metadata accessor for TimeZone();
  OUTLINED_FUNCTION_1();
  uint64_t v52 = v51;
  MEMORY[0x270FA5388](v53);
  OUTLINED_FUNCTION_13_12();
  type metadata accessor for HotelReservation(0);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v54);
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v55);
  OUTLINED_FUNCTION_43_4();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v56);
  OUTLINED_FUNCTION_73();
  uint64_t v58 = MEMORY[0x270FA5388](v57);
  uint64_t v60 = (char *)&v251 - v59;
  *((_OWORD *)v60 + 4) = 0u;
  *((_OWORD *)v60 + 5) = 0u;
  uint64_t v283 = v58;
  uint64_t v61 = *(int *)(v58 + 116);
  uint64_t v286 = (char *)&v251 - v59;
  uint64_t v287 = a1;
  uint64_t v62 = (char *)&v251 + v61 - v59;
  *(void *)uint64_t v62 = 0;
  v62[8] = 1;
  id v63 = objc_msgSend(a1, sel_attributeSet);
  outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v63, (SEL *)&selRef_hotelTimeZone);
  TimeZone.init(identifier:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_53_2(v5, 1, v50);
  if (v64)
  {
    uint64_t v65 = v63;
    swift_bridgeObjectRelease();
    outlined destroy of PQAVerificationModelProtocol?(v5, &demangling cache variable for type metadata for TimeZone?);
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v66 = type metadata accessor for Logger();
    uint64_t v67 = (void *)OUTLINED_FUNCTION_43_1(v66, (uint64_t)static Logging.search);
    os_log_type_t v68 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_24_13(v68))
    {
      uint64_t v69 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_130_0(v69);
      OUTLINED_FUNCTION_99_3(&dword_257DC6000, v70, v71, "PreExtractedEvents.HotelReservation: could not initialize valid timezone");
      OUTLINED_FUNCTION_34();
    }

    goto LABEL_69;
  }
  uint64_t v254 = v52;
  uint64_t v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32);
  uint64_t v253 = v50;
  v72(v6, v5, v50);
  id v273 = v63;
  id v73 = objc_msgSend(v63, sel_startDate);
  id v74 = v73;
  uint64_t v262 = v6;
  if (v277)
  {
    uint64_t v75 = v279;
    if (v73)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v76 = *(void (**)(void))(v75 + 32);
      OUTLINED_FUNCTION_156_4();
      v76();
      OUTLINED_FUNCTION_109_10((uint64_t)v24);
      OUTLINED_FUNCTION_53_2((uint64_t)v24, 1, v25);
      id v77 = v273;
      if (!v64)
      {
        OUTLINED_FUNCTION_156_4();
        v76();
        id v78 = objc_msgSend(v77, sel_endDate);
        if (v78)
        {
          uint64_t v79 = v78;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v80 = v256;
          OUTLINED_FUNCTION_156_4();
          v76();
          OUTLINED_FUNCTION_109_10(v80);
          uint64_t v81 = OUTLINED_FUNCTION_31_16();
          OUTLINED_FUNCTION_53_2(v81, v82, v25);
          uint64_t v83 = v254;
          if (!v64)
          {
            OUTLINED_FUNCTION_156_4();
            v76();
            OUTLINED_FUNCTION_226();
            uint64_t v84 = v276;
            Calendar.dateComponents(in:from:)();
            uint64_t v85 = *(void (**)(uint64_t, uint64_t))(v269 + 8);
            v85(v75 + 32, v270);
            uint64_t v280 = type metadata accessor for DateComponents();
            uint64_t v86 = OUTLINED_FUNCTION_159_3();
            __swift_storeEnumTagSinglePayload(v86, v87, v88, v89);
            outlined init with take of PQAVerificationModelProtocol?(v84, v282, &demangling cache variable for type metadata for DateComponents?);
            static Calendar.current.getter();
            Calendar.dateComponents(in:from:)();
            uint64_t v90 = OUTLINED_FUNCTION_19_0();
            ((void (*)(uint64_t))v85)(v90);
            uint64_t v91 = *(void (**)(void))(v75 + 8);
            OUTLINED_FUNCTION_26_2();
            v91();
            OUTLINED_FUNCTION_26_2();
            v91();
            uint64_t v92 = OUTLINED_FUNCTION_159_3();
            __swift_storeEnumTagSinglePayload(v92, v93, v94, v280);
            uint64_t v95 = v281;
            outlined init with take of PQAVerificationModelProtocol?(v84, v281, &demangling cache variable for type metadata for DateComponents?);
            uint64_t v97 = v271;
            uint64_t v96 = v272;
            goto LABEL_38;
          }
        }
        else
        {
          uint64_t v80 = v256;
          OUTLINED_FUNCTION_122_8(v256, 1);
          uint64_t v83 = v254;
        }
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_26_2();
        v226();
        uint64_t v24 = (char *)v80;
        uint64_t v101 = v253;
LABEL_64:
        outlined destroy of PQAVerificationModelProtocol?((uint64_t)v24, &demangling cache variable for type metadata for Date?);
        if (one-time initialization token for search != -1) {
          swift_once();
        }
        uint64_t v227 = type metadata accessor for Logger();
        uint64_t v228 = (void *)OUTLINED_FUNCTION_43_1(v227, (uint64_t)static Logging.search);
        os_log_type_t v229 = static os_log_type_t.error.getter();
        if (OUTLINED_FUNCTION_24_13(v229))
        {
          unint64_t v230 = (_WORD *)OUTLINED_FUNCTION_55();
          OUTLINED_FUNCTION_130_0(v230);
          OUTLINED_FUNCTION_99_3(&dword_257DC6000, v231, v232, "PreExtractedEvents.HotelReservation: rejecting hotel reservation missing date[s]");
          OUTLINED_FUNCTION_34();
        }

        (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v262, v101);
        goto LABEL_69;
      }
    }
    else
    {
      __swift_storeEnumTagSinglePayload((uint64_t)v24, 1, 1, v25);
      id v77 = v273;
    }
    swift_bridgeObjectRelease();
    uint64_t v101 = v253;
    uint64_t v83 = v254;
    goto LABEL_64;
  }
  uint64_t v98 = v279;
  if (v73)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v99 = *(void (**)(void))(v98 + 32);
    OUTLINED_FUNCTION_306();
    v99();
    OUTLINED_FUNCTION_109_10((uint64_t)v20);
    OUTLINED_FUNCTION_53_2((uint64_t)v20, 1, v25);
    id v77 = v273;
    uint64_t v100 = v266;
    if (!v64)
    {
      OUTLINED_FUNCTION_306();
      v99();
      OUTLINED_FUNCTION_109_10(v4);
      goto LABEL_24;
    }
  }
  else
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v20, 1, 1, v25);
    id v77 = v273;
    uint64_t v100 = v266;
  }
  id v102 = objc_msgSend(v77, sel_hotelCheckinDate);
  if (v102)
  {
    uint64_t v103 = v102;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v104 = 0;
  }
  else
  {
    uint64_t v104 = 1;
  }
  OUTLINED_FUNCTION_122_8(v100, v104);
  uint64_t v105 = OUTLINED_FUNCTION_79_0();
  outlined init with take of PQAVerificationModelProtocol?(v105, v106, &demangling cache variable for type metadata for Date?);
  outlined destroy of PQAVerificationModelProtocol?((uint64_t)v20, &demangling cache variable for type metadata for Date?);
LABEL_24:
  OUTLINED_FUNCTION_53_2(v4, 1, v25);
  uint64_t v95 = v281;
  uint64_t v107 = v267;
  if (v64)
  {
    outlined destroy of PQAVerificationModelProtocol?(v4, &demangling cache variable for type metadata for Date?);
    uint64_t v108 = type metadata accessor for DateComponents();
    OUTLINED_FUNCTION_32(v282, v109, v110, v108);
  }
  else
  {
    OUTLINED_FUNCTION_268();
    OUTLINED_FUNCTION_58_1();
    v111();
    OUTLINED_FUNCTION_226();
    uint64_t v112 = v276;
    Calendar.dateComponents(in:from:)();
    OUTLINED_FUNCTION_294();
    (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v4, v270);
    OUTLINED_FUNCTION_163_4();
    v114();
    uint64_t v115 = type metadata accessor for DateComponents();
    OUTLINED_FUNCTION_223_0(v112, v116, v117, v115);
    outlined init with take of PQAVerificationModelProtocol?(v112, v282, &demangling cache variable for type metadata for DateComponents?);
  }
  id v118 = objc_msgSend(v77, sel_endDate);
  if (!v118)
  {
    OUTLINED_FUNCTION_122_8(v278, 1);
    uint64_t v97 = v271;
    uint64_t v96 = v272;
    goto LABEL_31;
  }
  BOOL v119 = v118;
  uint64_t v120 = v280;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v121 = *(void (**)(uint64_t, uint64_t, uint64_t))(v98 + 32);
  uint64_t v122 = v278;
  v121(v278, v120, v25);
  OUTLINED_FUNCTION_109_10(v122);
  OUTLINED_FUNCTION_53_2(v122, 1, v25);
  uint64_t v97 = v271;
  uint64_t v96 = v272;
  if (v64)
  {
LABEL_31:
    id v123 = objc_msgSend(v77, sel_hotelCheckoutDate);
    if (v123)
    {
      uint64_t v124 = v123;
      uint64_t v125 = v265;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v126 = 0;
    }
    else
    {
      uint64_t v126 = 1;
      uint64_t v125 = v265;
    }
    OUTLINED_FUNCTION_122_8(v125, v126);
    outlined init with take of PQAVerificationModelProtocol?(v125, v107, &demangling cache variable for type metadata for Date?);
    outlined destroy of PQAVerificationModelProtocol?(v278, &demangling cache variable for type metadata for Date?);
    goto LABEL_35;
  }
  v121(v107, v278, v25);
  OUTLINED_FUNCTION_109_10(v107);
LABEL_35:
  OUTLINED_FUNCTION_53_2(v107, 1, v25);
  if (v64)
  {
    outlined destroy of PQAVerificationModelProtocol?(v107, &demangling cache variable for type metadata for Date?);
    uint64_t v127 = type metadata accessor for DateComponents();
    OUTLINED_FUNCTION_32(v95, v128, v129, v127);
  }
  else
  {
    OUTLINED_FUNCTION_58_1();
    v130();
    OUTLINED_FUNCTION_226();
    uint64_t v131 = v276;
    Calendar.dateComponents(in:from:)();
    OUTLINED_FUNCTION_277();
    OUTLINED_FUNCTION_84_11();
    v132();
    OUTLINED_FUNCTION_26_2();
    v133();
    uint64_t v134 = type metadata accessor for DateComponents();
    OUTLINED_FUNCTION_223_0(v131, v135, v136, v134);
    outlined init with take of PQAVerificationModelProtocol?(v131, v95, &demangling cache variable for type metadata for DateComponents?);
  }
LABEL_38:
  if (one-time initialization token for search != -1) {
    swift_once();
  }
  uint64_t v137 = type metadata accessor for Logger();
  uint64_t v138 = __swift_project_value_buffer(v137, (uint64_t)static Logging.search);
  outlined init with copy of PQAVerificationModelProtocol?(v282, v97, &demangling cache variable for type metadata for DateComponents?);
  outlined init with copy of PQAVerificationModelProtocol?(v95, v96, &demangling cache variable for type metadata for DateComponents?);
  uint64_t v280 = v138;
  uint64_t v139 = Logger.logObject.getter();
  os_log_type_t v140 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v139, v140))
  {
    uint64_t v141 = swift_slowAlloc();
    uint64_t v279 = swift_slowAlloc();
    uint64_t v289 = v279;
    *(_DWORD *)uint64_t v141 = 136315394;
    uint64_t v142 = v276;
    outlined init with copy of PQAVerificationModelProtocol?(v97, v276, &demangling cache variable for type metadata for DateComponents?);
    uint64_t v143 = String.init<A>(describing:)();
    uint64_t v288 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v143, v144, &v289);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of PQAVerificationModelProtocol?(v97, &demangling cache variable for type metadata for DateComponents?);
    *(_WORD *)(v141 + 12) = 2080;
    outlined init with copy of PQAVerificationModelProtocol?(v96, v142, &demangling cache variable for type metadata for DateComponents?);
    uint64_t v145 = String.init<A>(describing:)();
    uint64_t v288 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v145, v146, &v289);
    uint64_t v95 = v281;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v77 = v273;
    swift_bridgeObjectRelease();
    uint64_t v147 = OUTLINED_FUNCTION_285();
    outlined destroy of PQAVerificationModelProtocol?(v147, v148);
    _os_log_impl(&dword_257DC6000, v139, v140, "PreExtractedEvents.HotelReservation: created check-in: %s, check-out: %s", (uint8_t *)v141, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_34();
    OUTLINED_FUNCTION_34();
  }
  else
  {
    outlined destroy of PQAVerificationModelProtocol?(v97, &demangling cache variable for type metadata for DateComponents?);
    outlined destroy of PQAVerificationModelProtocol?(v96, &demangling cache variable for type metadata for DateComponents?);
  }

  uint64_t v149 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v77, (SEL *)&selRef_hotelReservationForName);
  if (v150)
  {
    uint64_t v151 = v149;
    uint64_t v152 = v150;
  }
  else
  {
    uint64_t v151 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v77, (SEL *)&selRef_eventProvider);
    uint64_t v152 = v153;
    if (v153)
    {
      uint64_t v154 = (void *)Logger.logObject.getter();
      os_log_type_t v155 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_24_13(v155))
      {
        uint64_t v156 = (_WORD *)OUTLINED_FUNCTION_55();
        OUTLINED_FUNCTION_67_0(v156);
        OUTLINED_FUNCTION_11_14(&dword_257DC6000, v157, v158, "PreExtractedEvents.HotelReservation: hotelReservationForName is nil, using hotelProvider to populate hotelReservationForName");
        OUTLINED_FUNCTION_34();
      }
    }
  }
  uint64_t v159 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v77, (SEL *)&selRef_uniqueIdentifier);
  if (!v160)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v218 = (void *)Logger.logObject.getter();
    os_log_type_t v219 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_24_13(v219))
    {
      os_log_type_t v220 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_130_0(v220);
      OUTLINED_FUNCTION_99_3(&dword_257DC6000, v221, v222, "PreExtractedEvents.HotelReservation: rejecting hotel reservation missing identifier");
      OUTLINED_FUNCTION_34();
    }

    outlined destroy of PQAVerificationModelProtocol?(v95, &demangling cache variable for type metadata for DateComponents?);
    outlined destroy of PQAVerificationModelProtocol?(v282, &demangling cache variable for type metadata for DateComponents?);
    uint64_t v223 = OUTLINED_FUNCTION_70_13();
    v224(v223);
LABEL_69:
    uint64_t v233 = v283;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v234 = OUTLINED_FUNCTION_133_4();
    return __swift_storeEnumTagSinglePayload(v234, v235, v236, v233);
  }
  uint64_t v167 = v159;
  uint64_t v168 = v160;
  CSSearchableItemAttributeSet.timeIsUnknownBool.getter(v159, v160, v161, v162, v163, v164, v165, v166, v251, (uint64_t)v252, v253, v254, v255, v256, v257, v258, v259, v260);
  int v170 = v169;
  uint64_t v171 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v77, (SEL *)&selRef_hotelReservationId);
  uint64_t v271 = v172;
  uint64_t v272 = v171;
  uint64_t v270 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v77, (SEL *)&selRef_hotelUnderName);
  uint64_t v269 = v173;
  outlined init with copy of PQAVerificationModelProtocol?(v282, v274, &demangling cache variable for type metadata for DateComponents?);
  outlined init with copy of PQAVerificationModelProtocol?(v95, v275, &demangling cache variable for type metadata for DateComponents?);
  uint64_t v174 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v77, (SEL *)&selRef_hotelModifyReservationUrl);
  uint64_t v267 = v175;
  uint64_t v266 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v77, (SEL *)&selRef_hotelReservationForTelephone);
  uint64_t v265 = v176;
  uint64_t v177 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v77, (SEL *)&selRef_hotelReservationForAddress);
  OUTLINED_FUNCTION_281(v177, v178);
  uint64_t v179 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v77, (SEL *)&selRef_eventProvider);
  OUTLINED_FUNCTION_307(v179, v180);
  outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v77, (SEL *)&selRef_eventCustomerNames);
  OUTLINED_FUNCTION_263();
  uint64_t v256 = v181;
  outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v77, (SEL *)&selRef_eventRoomNumbers);
  OUTLINED_FUNCTION_263();
  uint64_t v255 = v182;
  id v183 = objc_msgSend(v77, sel_eventNumberOfRooms);

  uint64_t v278 = v167;
  uint64_t v279 = v151;
  uint64_t v277 = v168;
  LODWORD(v276) = v170;
  uint64_t v268 = v174;
  if (v183 && (id v184 = objc_msgSend(v77, sel_eventNumberOfRooms)) != 0)
  {
    uint64_t v185 = v184;
    id v252 = objc_msgSend(v184, sel_integerValue);

    HIDWORD(v251) = 0;
  }
  else
  {
    id v252 = 0;
    HIDWORD(v251) = 1;
  }
  objc_msgSend(v77, sel_eventDuration);
  uint64_t v187 = v186;
  uint64_t v188 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v77, (SEL *)&selRef_eventTotalCost);
  uint64_t v190 = v189;
  uint64_t v191 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v77, (SEL *)&selRef_eventStatus);
  uint64_t v193 = v192;
  uint64_t v194 = outlined bridged method (pb) of @objc CSSearchableItem.bundleID.getter(v287);
  if (v195)
  {
    uint64_t v196 = v194;
    uint64_t v197 = v77;
    uint64_t v198 = v195;
    uint64_t v199 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v197, (SEL *)&selRef_mailMessageID);
    uint64_t v201 = v200;
    unsigned __int8 v249 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v197, (SEL *)&selRef_eventSourceBundleIdentifier);
    uint64_t v250 = v202;
    uint64_t v248 = v285;
    uint64_t v247 = v190;
    LOBYTE(v246) = 0;
    LOBYTE(v245) = BYTE4(v251);
    uint64_t v244 = (uint64_t)v252;
    uint64_t v243 = v255;
    uint64_t v242 = v256;
    OUTLINED_FUNCTION_278();
    uint64_t v241 = v203;
    uint64_t v240 = v259;
    uint64_t v239 = v260;
    OUTLINED_FUNCTION_280();
    uint64_t v238 = v204;
    OUTLINED_FUNCTION_293();
    uint64_t v237 = v205;
    OUTLINED_FUNCTION_305();
    uint64_t v206 = v264;
    HotelReservation.init(id:timeIsUnknown:hotelReservationId:hotelUnderName:hotelCheckinDateComponents:hotelCheckoutDateComponents:hotelReservationForName:hotelModifyReservationUrl:hotelReservationForTelephone:hotelReservationForAddress:hotelBookingProvider:hotelCustomerNames:hotelRoomNumbers:hotelNumberOfRooms:hotelDuration:hotelCost:hotelStatus:answerAttributes:bundleId:mailMessageId:eventSourceBundleIdentifier:eventSourceLLMConsumableDescription:)(v278, v277, v207, v272, v271, v270, v269, v274, v275, v279, v152, v268, v267, v208, v237, v238, v239, v240, v241,
      v242,
      v243,
      v244,
      v245,
      v187,
      v246,
      v188,
      v247,
      v191,
      v193,
      v248,
      v196,
      v198,
      v199,
      v201,
      v249,
      v250,
      0,
      0,
      v251,
      (uint64_t)v252,
      v253,
      v254,
      v255,
      v256,
      v257,
      v258,
      v259,
      v260,
      v261,
      v262);
    uint64_t v209 = (uint64_t)v286;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with copy of FlightReservation(v206, v209);
    uint64_t v210 = v263;
    outlined init with copy of FlightReservation(v206, v263);
    uint64_t v211 = Logger.logObject.getter();
    os_log_type_t v212 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v211, v212))
    {
      uint64_t v213 = (uint8_t *)OUTLINED_FUNCTION_14_1();
      uint64_t v289 = OUTLINED_FUNCTION_13_1();
      *(_DWORD *)uint64_t v213 = 136642819;
      outlined init with copy of FlightReservation(v210, v257);
      uint64_t v214 = String.init<A>(describing:)();
      uint64_t v288 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v214, v215, &v289);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
      _os_log_impl(&dword_257DC6000, v211, v212, "PreExtractedEvents.HotelReservation: created: %{sensitive}s", v213, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_34();
    }
    else
    {

      _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
    }
    _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
    outlined destroy of PQAVerificationModelProtocol?(v281, &demangling cache variable for type metadata for DateComponents?);
    outlined destroy of PQAVerificationModelProtocol?(v282, &demangling cache variable for type metadata for DateComponents?);
    uint64_t v216 = OUTLINED_FUNCTION_70_13();
    v217(v216);
    OUTLINED_FUNCTION_292();
    OUTLINED_FUNCTION_75_11((uint64_t)&demangling cache variable for type metadata for DateComponents?, 0);
    return _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

void RestaurantReservation.init(item:answerAttributes:requireDates:)()
{
  OUTLINED_FUNCTION_104_0();
  LODWORD(v218) = v3;
  uint64_t v221 = v5;
  uint64_t v222 = v4;
  uint64_t v7 = v6;
  type metadata accessor for Calendar();
  OUTLINED_FUNCTION_1();
  uint64_t v209 = v9;
  uint64_t v210 = v8;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_184_0();
  uint64_t v208 = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v12 = OUTLINED_FUNCTION_81(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_43_4();
  uint64_t v214 = v14;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v15);
  uint64_t v215 = (uint64_t)&v189 - v16;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_31_9();
  uint64_t v18 = type metadata accessor for Date();
  OUTLINED_FUNCTION_1();
  uint64_t v219 = v19;
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_173_4();
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_194_0((uint64_t)&v189 - v23);
  uint64_t v206 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_185_0();
  uint64_t v213 = v25;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_43_4();
  uint64_t v216 = v27;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v28);
  uint64_t v217 = (uint64_t)&v189 - v29;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_27_10();
  uint64_t v220 = v31;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  uint64_t v33 = OUTLINED_FUNCTION_81(v32);
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_66_4();
  uint64_t v34 = type metadata accessor for TimeZone();
  OUTLINED_FUNCTION_1();
  uint64_t v36 = v35;
  MEMORY[0x270FA5388](v37);
  uint64_t v38 = OUTLINED_FUNCTION_6_7();
  uint64_t v225 = type metadata accessor for RestaurantReservation(v38);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v39);
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v40);
  uint64_t v211 = (uint64_t)&v189 - v41;
  OUTLINED_FUNCTION_113_1();
  uint64_t v43 = MEMORY[0x270FA5388](v42);
  uint64_t v45 = (char *)&v189 - v44;
  MEMORY[0x270FA5388](v43);
  OUTLINED_FUNCTION_27_10();
  *(_OWORD *)(v46 + 64) = 0u;
  *(_OWORD *)(v46 + 80) = 0u;
  uint64_t v223 = v46;
  long long v224 = v7;
  id v47 = objc_msgSend(v7, sel_attributeSet);
  outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v47, (SEL *)&selRef_restaurantTimeZone);
  TimeZone.init(identifier:)();
  uint64_t v48 = v34;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_53_2(v2, 1, v34);
  if (v49)
  {
    swift_bridgeObjectRelease();
    outlined destroy of PQAVerificationModelProtocol?(v2, &demangling cache variable for type metadata for TimeZone?);
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    uint64_t v51 = (void *)OUTLINED_FUNCTION_43_1(v50, (uint64_t)static Logging.search);
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_24_13(v52))
    {
      uint64_t v53 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_130_0(v53);
      OUTLINED_FUNCTION_99_3(&dword_257DC6000, v54, v55, "PreExtractedEvents.RestaurantReservation: could not initialize valid timezone");
      OUTLINED_FUNCTION_34();
    }

    goto LABEL_43;
  }
  uint64_t v212 = v36;
  uint64_t v56 = OUTLINED_FUNCTION_285();
  v57(v56);
  id v58 = objc_msgSend(v47, sel_startDate);
  uint64_t v59 = v58;
  id v202 = v47;
  if (v218)
  {
    uint64_t v60 = v0;
    uint64_t v61 = v219;
    if (v58)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v62 = *(void (**)(void))(v61 + 32);
      OUTLINED_FUNCTION_306();
      v62();
      OUTLINED_FUNCTION_162_4(v1, 0);
      OUTLINED_FUNCTION_53_2(v1, 1, v18);
      if (!v49)
      {
        OUTLINED_FUNCTION_306();
        v62();
        static Calendar.current.getter();
        uint64_t v63 = v217;
        uint64_t v0 = v60;
        Calendar.dateComponents(in:from:)();
        OUTLINED_FUNCTION_16_1();
        v64();
        OUTLINED_FUNCTION_26_2();
        v65();
        uint64_t v66 = type metadata accessor for DateComponents();
        OUTLINED_FUNCTION_223_0(v63, v67, v68, v66);
        uint64_t v69 = v220;
        outlined init with take of PQAVerificationModelProtocol?(v63, v220, &demangling cache variable for type metadata for DateComponents?);
        id v47 = v202;
        goto LABEL_29;
      }
    }
    else
    {
      OUTLINED_FUNCTION_162_4(v1, 1);
    }
    swift_bridgeObjectRelease();
    outlined destroy of PQAVerificationModelProtocol?(v1, &demangling cache variable for type metadata for Date?);
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v78 = type metadata accessor for Logger();
    uint64_t v79 = (void *)OUTLINED_FUNCTION_43_1(v78, (uint64_t)static Logging.search);
    os_log_type_t v80 = static os_log_type_t.error.getter();
    BOOL v81 = OUTLINED_FUNCTION_24_13(v80);
    uint64_t v82 = v212;
    if (v81)
    {
      uint64_t v83 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_130_0(v83);
      OUTLINED_FUNCTION_99_3(&dword_257DC6000, v84, v85, "PreExtractedEvents.RestaurantReservation: rejecting restaurant reservation missing date");
      OUTLINED_FUNCTION_34();
    }

    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v60, v34);
    goto LABEL_43;
  }
  uint64_t v70 = v219;
  if (!v58)
  {
    uint64_t v72 = v214;
    OUTLINED_FUNCTION_162_4(v214, 1);
    goto LABEL_22;
  }
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v71 = *(void (**)(void))(v70 + 32);
  uint64_t v72 = v214;
  OUTLINED_FUNCTION_268();
  OUTLINED_FUNCTION_269();
  v71();
  uint64_t v73 = OUTLINED_FUNCTION_159_3();
  __swift_storeEnumTagSinglePayload(v73, v74, v75, v18);
  OUTLINED_FUNCTION_53_2(v72, 1, v18);
  if (v49)
  {
LABEL_22:
    id v86 = objc_msgSend(v47, sel_restaurantStartDate);
    if (v86)
    {
      uint64_t v87 = v86;
      uint64_t v88 = v207;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v89 = v88;
      uint64_t v90 = 0;
      uint64_t v48 = v34;
      uint64_t v69 = v220;
    }
    else
    {
      uint64_t v48 = v34;
      uint64_t v69 = v220;
      OUTLINED_FUNCTION_233_0();
    }
    uint64_t v91 = v89;
    OUTLINED_FUNCTION_162_4(v89, v90);
    uint64_t v92 = v91;
    uint64_t v77 = v215;
    outlined init with take of PQAVerificationModelProtocol?(v92, v215, &demangling cache variable for type metadata for Date?);
    outlined destroy of PQAVerificationModelProtocol?(v72, &demangling cache variable for type metadata for Date?);
    goto LABEL_26;
  }
  uint64_t v76 = v215;
  OUTLINED_FUNCTION_269();
  v71();
  OUTLINED_FUNCTION_162_4(v76, 0);
  uint64_t v48 = v34;
  uint64_t v77 = v76;
  uint64_t v69 = v220;
LABEL_26:
  OUTLINED_FUNCTION_53_2(v77, 1, v18);
  if (v49)
  {
    outlined destroy of PQAVerificationModelProtocol?(v77, &demangling cache variable for type metadata for Date?);
    uint64_t v93 = type metadata accessor for DateComponents();
    OUTLINED_FUNCTION_32(v69, v94, v95, v93);
  }
  else
  {
    OUTLINED_FUNCTION_58_1();
    v96();
    static Calendar.current.getter();
    uint64_t v97 = v217;
    OUTLINED_FUNCTION_285();
    Calendar.dateComponents(in:from:)();
    OUTLINED_FUNCTION_16_1();
    v98();
    OUTLINED_FUNCTION_26_2();
    v99();
    uint64_t v100 = type metadata accessor for DateComponents();
    OUTLINED_FUNCTION_223_0(v97, v101, v102, v100);
    outlined init with take of PQAVerificationModelProtocol?(v97, v69, &demangling cache variable for type metadata for DateComponents?);
  }
LABEL_29:
  uint64_t v103 = v216;
  uint64_t v200 = v0;
  if (one-time initialization token for search != -1) {
    swift_once();
  }
  uint64_t v104 = type metadata accessor for Logger();
  uint64_t v105 = __swift_project_value_buffer(v104, (uint64_t)static Logging.search);
  outlined init with copy of PQAVerificationModelProtocol?(v69, v103, &demangling cache variable for type metadata for DateComponents?);
  uint64_t v219 = v105;
  uint64_t v106 = Logger.logObject.getter();
  os_log_type_t v107 = static os_log_type_t.debug.getter();
  BOOL v108 = os_log_type_enabled(v106, v107);
  uint64_t v201 = v48;
  if (v108)
  {
    uint64_t v109 = (_DWORD *)OUTLINED_FUNCTION_14_1();
    v226[0] = OUTLINED_FUNCTION_13_1();
    *uint64_t v109 = 136315138;
    outlined init with copy of PQAVerificationModelProtocol?(v103, v217, &demangling cache variable for type metadata for DateComponents?);
    uint64_t v110 = String.init<A>(describing:)();
    uint64_t v112 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v111, v226);
    OUTLINED_FUNCTION_222_0(v112);
    uint64_t v69 = v220;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of PQAVerificationModelProtocol?(v103, &demangling cache variable for type metadata for DateComponents?);
    OUTLINED_FUNCTION_296(&dword_257DC6000, v113, v114, "PreExtractedEvents.RestaurantReservation: created start date: %s");
    swift_arrayDestroy();
    uint64_t v48 = v201;
    OUTLINED_FUNCTION_34();
    OUTLINED_FUNCTION_34();
  }
  else
  {
    outlined destroy of PQAVerificationModelProtocol?(v103, &demangling cache variable for type metadata for DateComponents?);
  }

  uint64_t v115 = v212;
  uint64_t v116 = v222;
  uint64_t v117 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v47, (SEL *)&selRef_uniqueIdentifier);
  if (!v118)
  {
    swift_bridgeObjectRelease();
    uint64_t v182 = (void *)Logger.logObject.getter();
    os_log_type_t v183 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_24_13(v183))
    {
      id v184 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_130_0(v184);
      OUTLINED_FUNCTION_99_3(&dword_257DC6000, v185, v186, "PreExtractedEvents.RestaurantReservation: rejecting restaurant reservation missing messageID");
      OUTLINED_FUNCTION_34();
    }

    outlined destroy of PQAVerificationModelProtocol?(v69, &demangling cache variable for type metadata for DateComponents?);
    (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v200, v48);
LABEL_43:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_162_4(v221, 1);
LABEL_46:
    OUTLINED_FUNCTION_119_0();
    return;
  }
  uint64_t v218 = v118;
  uint64_t v222 = v117;
  CSSearchableItemAttributeSet.timeIsUnknownBool.getter(v117, v118, v119, v120, v121, v122, v123, v124, v189, v190, v191, v192, v193, v194, v195, v196, v197, v198);
  LODWORD(v217) = v125;
  uint64_t v216 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v47, (SEL *)&selRef_restaurantReservationId);
  uint64_t v127 = v126;
  uint64_t v128 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v47, (SEL *)&selRef_restaurantUnderName);
  uint64_t v214 = v129;
  uint64_t v215 = v128;
  uint64_t v130 = v213;
  outlined init with copy of PQAVerificationModelProtocol?(v69, v213, &demangling cache variable for type metadata for DateComponents?);
  uint64_t v131 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v47, (SEL *)&selRef_restaurantPartySize);
  uint64_t v209 = v132;
  uint64_t v210 = v131;
  uint64_t v205 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v47, (SEL *)&selRef_eventStartLocationName);
  uint64_t v134 = v133;
  uint64_t v208 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v47, (SEL *)&selRef_eventStartLocationTelephone);
  uint64_t v207 = v135;
  uint64_t v136 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v47, (SEL *)&selRef_eventStartLocationAddress);
  uint64_t v206 = v137;
  uint64_t v203 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v47, (SEL *)&selRef_eventProvider);
  uint64_t v199 = v138;
  uint64_t v139 = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v47, (SEL *)&selRef_eventCustomerNames);
  uint64_t v140 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v47, (SEL *)&selRef_restaurantMealType);
  OUTLINED_FUNCTION_281(v140, v141);
  uint64_t v142 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v47, (SEL *)&selRef_eventStatus);
  OUTLINED_FUNCTION_307(v142, v143);
  uint64_t v197 = outlined bridged method (pb) of @objc CSSearchableItem.bundleID.getter(v224);
  uint64_t v196 = v144;
  if (v144)
  {
    uint64_t v145 = MEMORY[0x263F8EE78];
    if (v139) {
      uint64_t v145 = v139;
    }
    uint64_t v195 = v145;
    uint64_t v193 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v47, (SEL *)&selRef_mailMessageID);
    uint64_t v192 = v146;
    uint64_t v191 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v47, (SEL *)&selRef_eventSourceBundleIdentifier);
    uint64_t v148 = v147;
    uint64_t v149 = dateString(fromDateComponents:)(v130);
    uint64_t v194 = v149;
    uint64_t v151 = v150;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v152 = v206;
    swift_bridgeObjectRetain();
    uint64_t v188 = v127;
    uint64_t v153 = v149;
    uint64_t v154 = v134;
    uint64_t v155 = v127;
    uint64_t v156 = v216;
    uint64_t v190 = v136;
    uint64_t v189 = v134;
    uint64_t v157 = v205;
    uint64_t v158 = specialized Sequence.compactMap<A>(_:)(v116, v153, v151, v205, v154, v136, v152, v216, v188);
    uint64_t v159 = specialized Dictionary.init<A>(uniqueKeysWithValues:)(v158, &demangling cache variable for type metadata for _DictionaryStorage<String, String>, (void (*)(uint64_t, uint64_t, uint64_t *))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
    uint64_t v160 = v218;
    *(void *)uint64_t v45 = v222;
    *((void *)v45 + 1) = v160;
    *((void *)v45 + 2) = v159;
    *((void *)v45 + 3) = v116;
    uint64_t v161 = v192;
    *((void *)v45 + 6) = v193;
    *((void *)v45 + 7) = v161;
    *((void *)v45 + 8) = v191;
    *((void *)v45 + 9) = v148;
    LOBYTE(v161) = v217 & 1;
    *((void *)v45 + 10) = 0;
    *((void *)v45 + 11) = 0;
    v45[96] = v161;
    *((void *)v45 + 13) = v156;
    *((void *)v45 + 14) = v155;
    uint64_t v162 = v214;
    *((void *)v45 + 15) = v215;
    *((void *)v45 + 16) = v162;
    uint64_t v163 = (int *)v225;
    uint64_t v164 = (uint64_t)&v45[*(int *)(v225 + 56)];
    uint64_t v165 = v196;
    *((void *)v45 + 4) = v197;
    *((void *)v45 + 5) = v165;
    outlined init with take of PQAVerificationModelProtocol?(v130, v164, &demangling cache variable for type metadata for DateComponents?);
    uint64_t v166 = &v45[v163[15]];
    uint64_t v167 = v209;
    *(void *)uint64_t v166 = v210;
    *((void *)v166 + 1) = v167;
    uint64_t v168 = (uint64_t *)&v45[v163[16]];
    uint64_t v169 = v189;
    *uint64_t v168 = v157;
    v168[1] = v169;
    OUTLINED_FUNCTION_261(&v45[v163[17]]);
    int v170 = &v45[v163[18]];
    *(void *)int v170 = v190;
    *((void *)v170 + 1) = v152;
    OUTLINED_FUNCTION_261(&v45[v163[19]]);
    *(void *)&v45[v163[20]] = v195;
    OUTLINED_FUNCTION_261(&v45[v163[21]]);
    OUTLINED_FUNCTION_261(&v45[v163[22]]);
    uint64_t v171 = &v45[v163[23]];
    *(void *)uint64_t v171 = v194;
    *((void *)v171 + 1) = v151;
    uint64_t v172 = v223;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with copy of FlightReservation((uint64_t)v45, v172);
    uint64_t v173 = v211;
    outlined init with copy of FlightReservation((uint64_t)v45, v211);
    uint64_t v174 = Logger.logObject.getter();
    os_log_type_t v175 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v174, v175))
    {
      uint64_t v176 = (_DWORD *)OUTLINED_FUNCTION_14_1();
      v226[0] = OUTLINED_FUNCTION_13_1();
      *uint64_t v176 = 136642819;
      outlined init with copy of FlightReservation(v173, v204);
      uint64_t v177 = String.init<A>(describing:)();
      uint64_t v179 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v177, v178, v226);
      OUTLINED_FUNCTION_222_0(v179);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
      OUTLINED_FUNCTION_296(&dword_257DC6000, v180, v181, "PreExtractedEvents.RestaurantReservation: created: %{sensitive}s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_34();
    }
    else
    {

      _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
      OUTLINED_FUNCTION_79_0();
    }
    _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
    outlined destroy of PQAVerificationModelProtocol?(v220, &demangling cache variable for type metadata for DateComponents?);
    OUTLINED_FUNCTION_84_11();
    v187();
    OUTLINED_FUNCTION_292();
    __swift_storeEnumTagSinglePayload((uint64_t)v45, 0, 1, (uint64_t)v163);
    _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
    goto LABEL_46;
  }
  __break(1u);
}

void RentalCarReservation.init(item:checkEventType:)()
{
  OUTLINED_FUNCTION_104_0();
  OUTLINED_FUNCTION_215_1();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v8 = OUTLINED_FUNCTION_81(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_3_18();
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = OUTLINED_FUNCTION_88_5();
  uint64_t v11 = type metadata accessor for RentalCarReservation(v10);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_39();
  id v13 = objc_msgSend(v0, sel_attributeSet);
  if ((v4 & 1) != 0
    && (id v14 = OUTLINED_FUNCTION_183_3(),
        id v5 = objc_msgSend(v14, sel_containsString_, *MEMORY[0x263F01C28]),
        v14,
        (v5 & 1) == 0))
  {

    OUTLINED_FUNCTION_131_6();
    OUTLINED_FUNCTION_119_0();
    __swift_storeEnumTagSinglePayload(v61, v62, v63, v64);
  }
  else
  {
    id v15 = objc_msgSend(v0, sel_uniqueIdentifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_136_3();
    *(void *)uint64_t v2 = v5;
    *(void *)(v2 + 8) = v6;
    *(void *)(v2 + 16) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventMessageIdentifier);
    *(void *)(v2 + 24) = v16;
    *(void *)(v2 + 32) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventGroupIdentifier);
    *(void *)(v2 + 40) = v17;
    *(void *)(v2 + 48) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventFallbackGroupIdentifier);
    *(void *)(v2 + 56) = v18;
    *(void *)(v2 + 64) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventMegadomeIdentifier);
    *(void *)(v2 + 72) = v19;
    id v20 = OUTLINED_FUNCTION_183_3();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_136_3();
    *(void *)(v2 + 80) = v5;
    *(void *)(v2 + 88) = v6;
    id v21 = objc_msgSend(v13, sel_eventSubType);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_136_3();
    *(void *)(v2 + 96) = v5;
    *(void *)(v2 + 104) = v6;
    *(void *)(v2 + 112) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventSourceBundleIdentifier);
    *(void *)(v2 + 120) = v22;
    id v23 = objc_msgSend(v13, sel_eventIsAllDay);
    if (v23)
    {
      unsigned __int8 v24 = OUTLINED_FUNCTION_197_3(v23);
    }
    else
    {
      unsigned __int8 v24 = 2;
    }
    *(unsigned char *)(v2 + 128) = v24;
    id v25 = objc_msgSend(v13, sel_eventSourceIsForwarded);
    if (v25)
    {
      OUTLINED_FUNCTION_197_3(v25);
    }
    *(void *)(v2 + 136) = OUTLINED_FUNCTION_212_1();
    *(void *)(v2 + 144) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_mailMessageID);
    *(void *)(v2 + 152) = v26;
    OUTLINED_FUNCTION_74_16();
    uint64_t v28 = (void *)v27;
    id v29 = OUTLINED_FUNCTION_238(v27, sel_attributeForKey_);

    if (v29)
    {
      _bridgeAnyObjectToAny(_:)();
      uint64_t v30 = swift_unknownObjectRelease();
    }
    else
    {
      OUTLINED_FUNCTION_23_19();
    }
    OUTLINED_FUNCTION_22_23(v30, v31, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v74[3])
    {
      OUTLINED_FUNCTION_72_12();
      OUTLINED_FUNCTION_105_13();
      if (v34) {
        uint64_t v33 = 0;
      }
    }
    else
    {
      outlined destroy of PQAVerificationModelProtocol?((uint64_t)v74, (uint64_t *)&demangling cache variable for type metadata for Any?);
      OUTLINED_FUNCTION_181_4();
    }
    *(void *)(v2 + 160) = v32;
    *(void *)(v2 + 168) = v33;
    *(void *)(v2 + 176) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_accountIdentifier);
    *(void *)(v2 + 184) = v35;
    *(void *)(v2 + 192) = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v13, (SEL *)&selRef_mailboxIdentifiers);
    *(void *)(v2 + 200) = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v13, (SEL *)&selRef_detectedEventTypes);
    *(void *)(v2 + 208) = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.displayName.getter(v13);
    *(void *)(v2 + 216) = v36;
    *(void *)(v2 + 224) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventReservationID);
    *(void *)(v2 + 232) = v37;
    *(void *)(v2 + 240) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventProvider);
    *(void *)(v2 + 248) = v38;
    *(void *)(v2 + 256) = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v13, (SEL *)&selRef_eventCustomerNames);
    *(void *)(v2 + 264) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventReservationForName);
    *(void *)(v2 + 272) = v39;
    *(void *)(v2 + 280) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventStartLocationName);
    *(void *)(v2 + 288) = v40;
    *(void *)(v2 + 296) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventStartLocationAddress);
    *(void *)(v2 + 304) = v41;
    *(void *)(v2 + 312) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventStartLocationTelephone);
    *(void *)(v2 + 320) = v42;
    *(void *)(v2 + 328) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventEndLocationName);
    *(void *)(v2 + 336) = v43;
    *(void *)(v2 + 344) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventEndLocationAddress);
    *(void *)(v2 + 352) = v44;
    *(void *)(v2 + 360) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventEndLocationTelephone);
    *(void *)(v2 + 368) = v45;
    objc_msgSend(v13, sel_eventDuration);
    *(void *)(v2 + 376) = v46;
    *(unsigned char *)(v2 + 384) = 0;
    *(void *)(v2 + 392) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventTotalCost);
    *(void *)(v2 + 400) = v47;
    uint64_t v48 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventStatus);
    *(void *)(v2 + 408) = v48;
    *(void *)(v2 + 416) = v49;
    CSSearchableItemAttributeSet.timeIsUnknownBool.getter(v48, v49, v50, v51, v52, v53, v54, v55, v66, v6, v68, v69, v70, v71, v72, v73, v74[0], v74[1]);
    OUTLINED_FUNCTION_179_3(v56);
    if (objc_msgSend(v13, sel_startDate))
    {
      OUTLINED_FUNCTION_303();

      uint64_t v57 = 0;
    }
    else
    {
      uint64_t v57 = 1;
    }
    type metadata accessor for Date();
    uint64_t v58 = 1;
    OUTLINED_FUNCTION_75_11(v3, v57);
    outlined init with take of PQAVerificationModelProtocol?(v3, v2 + *(int *)(v11 + 140), &demangling cache variable for type metadata for Date?);
    id v59 = objc_msgSend(v13, sel_endDate);
    if (v59)
    {
      uint64_t v60 = v59;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v58 = 0;
    }

    OUTLINED_FUNCTION_75_11(v1, v58);
    outlined init with take of PQAVerificationModelProtocol?(v1, v2 + *(int *)(v11 + 144), &demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_194_2();
    __swift_storeEnumTagSinglePayload(v67, 0, 1, v11);
    OUTLINED_FUNCTION_119_0();
  }
}

void TicketedTransportation.init(item:checkEventType:)()
{
  OUTLINED_FUNCTION_104_0();
  OUTLINED_FUNCTION_215_1();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v8 = OUTLINED_FUNCTION_81(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_3_18();
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = OUTLINED_FUNCTION_88_5();
  uint64_t v11 = type metadata accessor for TicketedTransportation(v10);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_39();
  id v13 = objc_msgSend(v0, sel_attributeSet);
  if ((v4 & 1) != 0
    && (id v14 = OUTLINED_FUNCTION_183_3(),
        id v5 = objc_msgSend(v14, sel_containsString_, *MEMORY[0x263F01C58]),
        v14,
        (v5 & 1) == 0))
  {

    OUTLINED_FUNCTION_131_6();
    OUTLINED_FUNCTION_119_0();
    __swift_storeEnumTagSinglePayload(v55, v56, v57, v58);
  }
  else
  {
    id v15 = objc_msgSend(v0, sel_uniqueIdentifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_136_3();
    *(void *)uint64_t v2 = v5;
    *(void *)(v2 + 8) = v6;
    *(void *)(v2 + 16) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventMessageIdentifier);
    *(void *)(v2 + 24) = v16;
    *(void *)(v2 + 32) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventGroupIdentifier);
    *(void *)(v2 + 40) = v17;
    *(void *)(v2 + 48) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventFallbackGroupIdentifier);
    *(void *)(v2 + 56) = v18;
    *(void *)(v2 + 64) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventMegadomeIdentifier);
    *(void *)(v2 + 72) = v19;
    id v20 = OUTLINED_FUNCTION_183_3();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_136_3();
    *(void *)(v2 + 80) = v5;
    *(void *)(v2 + 88) = v6;
    id v21 = objc_msgSend(v13, sel_eventSubType);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_136_3();
    *(void *)(v2 + 96) = v5;
    *(void *)(v2 + 104) = v6;
    *(void *)(v2 + 112) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventSourceBundleIdentifier);
    *(void *)(v2 + 120) = v22;
    id v23 = objc_msgSend(v13, sel_eventIsAllDay);
    if (v23)
    {
      unsigned __int8 v24 = OUTLINED_FUNCTION_197_3(v23);
    }
    else
    {
      unsigned __int8 v24 = 2;
    }
    *(unsigned char *)(v2 + 128) = v24;
    id v25 = objc_msgSend(v13, sel_eventSourceIsForwarded);
    if (v25)
    {
      OUTLINED_FUNCTION_197_3(v25);
    }
    *(void *)(v2 + 136) = OUTLINED_FUNCTION_212_1();
    *(void *)(v2 + 144) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_mailMessageID);
    *(void *)(v2 + 152) = v26;
    OUTLINED_FUNCTION_74_16();
    uint64_t v28 = (void *)v27;
    id v29 = OUTLINED_FUNCTION_238(v27, sel_attributeForKey_);

    if (v29)
    {
      _bridgeAnyObjectToAny(_:)();
      uint64_t v30 = swift_unknownObjectRelease();
    }
    else
    {
      OUTLINED_FUNCTION_23_19();
    }
    OUTLINED_FUNCTION_22_23(v30, v31, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v68[3])
    {
      OUTLINED_FUNCTION_72_12();
      OUTLINED_FUNCTION_105_13();
      if (v34) {
        uint64_t v33 = 0;
      }
    }
    else
    {
      outlined destroy of PQAVerificationModelProtocol?((uint64_t)v68, (uint64_t *)&demangling cache variable for type metadata for Any?);
      OUTLINED_FUNCTION_181_4();
    }
    *(void *)(v2 + 160) = v32;
    *(void *)(v2 + 168) = v33;
    *(void *)(v2 + 176) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_accountIdentifier);
    *(void *)(v2 + 184) = v35;
    *(void *)(v2 + 192) = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v13, (SEL *)&selRef_mailboxIdentifiers);
    *(void *)(v2 + 200) = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v13, (SEL *)&selRef_detectedEventTypes);
    *(void *)(v2 + 208) = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v13, (SEL *)&selRef_eventCustomerNames);
    *(void *)(v2 + 216) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventStartLocationName);
    *(void *)(v2 + 224) = v36;
    *(void *)(v2 + 232) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventStartLocationAddress);
    *(void *)(v2 + 240) = v37;
    *(void *)(v2 + 248) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventEndLocationName);
    *(void *)(v2 + 256) = v38;
    *(void *)(v2 + 264) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventEndLocationAddress);
    *(void *)(v2 + 272) = v39;
    *(void *)(v2 + 280) = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v13, (SEL *)&selRef_eventSeatNumbers);
    id v40 = objc_msgSend(v13, sel_eventDuration);
    *(void *)(v2 + 288) = v41;
    *(unsigned char *)(v2 + 296) = 0;
    CSSearchableItemAttributeSet.timeIsUnknownBool.getter((uint64_t)v40, v42, v43, v44, v45, v46, v47, v48, v60, v6, v62, v63, v64, v65, v66, v67, v68[0], v68[1]);
    OUTLINED_FUNCTION_179_3(v49);
    if (objc_msgSend(v13, sel_startDate))
    {
      OUTLINED_FUNCTION_303();

      uint64_t v50 = 0;
    }
    else
    {
      uint64_t v50 = 1;
    }
    uint64_t v51 = type metadata accessor for Date();
    uint64_t v52 = 1;
    __swift_storeEnumTagSinglePayload(v3, v50, 1, v51);
    outlined init with take of PQAVerificationModelProtocol?(v3, v2 + *(int *)(v11 + 112), &demangling cache variable for type metadata for Date?);
    id v53 = objc_msgSend(v13, sel_endDate);
    if (v53)
    {
      uint64_t v54 = v53;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v52 = 0;
    }

    OUTLINED_FUNCTION_75_11(v1, v52);
    outlined init with take of PQAVerificationModelProtocol?(v1, v2 + *(int *)(v11 + 116), &demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_194_2();
    __swift_storeEnumTagSinglePayload(v61, 0, 1, v11);
    OUTLINED_FUNCTION_119_0();
  }
}

void TicketedShow.init(item:checkEventType:)()
{
  OUTLINED_FUNCTION_104_0();
  char v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v10 = OUTLINED_FUNCTION_81(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_11_0();
  MEMORY[0x270FA5388](v11);
  id v13 = (char *)&v78 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v15 = OUTLINED_FUNCTION_81(v14);
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_14_10();
  uint64_t v16 = (int *)type metadata accessor for TicketedShow(0);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_39();
  id v79 = v6;
  id v18 = objc_msgSend(v6, sel_attributeSet);
  if ((v4 & 1) != 0
    && (id v19 = OUTLINED_FUNCTION_178_1(),
        unsigned __int8 v20 = objc_msgSend(v19, sel_containsString_, *MEMORY[0x263F01C50]),
        v19,
        (v20 & 1) == 0))
  {

    OUTLINED_FUNCTION_133_4();
    OUTLINED_FUNCTION_119_0();
    __swift_storeEnumTagSinglePayload(v73, v74, v75, v76);
  }
  else
  {
    id v21 = objc_msgSend(v79, sel_uniqueIdentifier, v8);
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;

    *(void *)uint64_t v1 = v22;
    *(void *)(v1 + 8) = v24;
    *(void *)(v1 + 16) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventMessageIdentifier);
    *(void *)(v1 + 24) = v25;
    *(void *)(v1 + 32) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventGroupIdentifier);
    *(void *)(v1 + 40) = v26;
    *(void *)(v1 + 48) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventFallbackGroupIdentifier);
    *(void *)(v1 + 56) = v27;
    *(void *)(v1 + 64) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventMegadomeIdentifier);
    *(void *)(v1 + 72) = v28;
    id v29 = OUTLINED_FUNCTION_178_1();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_151_3();
    *(void *)(v1 + 80) = v21;
    *(void *)(v1 + 88) = v22;
    id v30 = objc_msgSend(v18, sel_eventSubType);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_151_3();
    *(void *)(v1 + 96) = v21;
    *(void *)(v1 + 104) = v22;
    *(void *)(v1 + 112) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventSourceBundleIdentifier);
    *(void *)(v1 + 120) = v31;
    id v32 = objc_msgSend(v18, sel_eventIsAllDay);
    if (v32)
    {
      uint64_t v33 = v32;
      unsigned __int8 v34 = objc_msgSend(v32, sel_BOOLValue);
    }
    else
    {
      unsigned __int8 v34 = 2;
    }
    *(unsigned char *)(v1 + 128) = v34;
    id v35 = objc_msgSend(v18, sel_eventSourceIsForwarded);
    if (v35)
    {
      uint64_t v36 = v35;
      unsigned __int8 v37 = objc_msgSend(v35, sel_BOOLValue);
    }
    else
    {
      unsigned __int8 v37 = 2;
    }
    *(unsigned char *)(v1 + 130) = v37;
    *(void *)(v1 + 136) = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v18);
    *(void *)(v1 + 144) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_mailMessageID);
    *(void *)(v1 + 152) = v38;
    OUTLINED_FUNCTION_74_16();
    id v40 = v39;
    id v41 = objc_msgSend(v18, sel_attributeForKey_, v39);

    if (v41)
    {
      _bridgeAnyObjectToAny(_:)();
      uint64_t v42 = swift_unknownObjectRelease();
    }
    else
    {
      OUTLINED_FUNCTION_23_19();
    }
    uint64_t v44 = v78;
    OUTLINED_FUNCTION_22_23(v42, v43, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v86[3])
    {
      OUTLINED_FUNCTION_72_12();
      OUTLINED_FUNCTION_105_13();
      if (v47) {
        uint64_t v46 = 0;
      }
    }
    else
    {
      outlined destroy of PQAVerificationModelProtocol?((uint64_t)v86, (uint64_t *)&demangling cache variable for type metadata for Any?);
      OUTLINED_FUNCTION_181_4();
    }
    *(void *)(v1 + 160) = v45;
    *(void *)(v1 + 168) = v46;
    *(void *)(v1 + 176) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_accountIdentifier);
    *(void *)(v1 + 184) = v48;
    *(void *)(v1 + 192) = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v18, (SEL *)&selRef_mailboxIdentifiers);
    *(void *)(v1 + 200) = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v18, (SEL *)&selRef_detectedEventTypes);
    *(void *)(v1 + 208) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventReservationID);
    *(void *)(v1 + 216) = v49;
    *(void *)(v1 + 224) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventProvider);
    *(void *)(v1 + 232) = v50;
    *(void *)(v1 + 240) = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v18, (SEL *)&selRef_eventCustomerNames);
    *(void *)(v1 + 248) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventStartLocationName);
    *(void *)(v1 + 256) = v51;
    *(void *)(v1 + 264) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventStartLocationAddress);
    *(void *)(v1 + 272) = v52;
    *(void *)(v1 + 280) = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v18, (SEL *)&selRef_eventSeatNumbers);
    objc_msgSend(v18, sel_eventDuration);
    *(void *)(v1 + 288) = v53;
    *(unsigned char *)(v1 + 296) = 0;
    *(void *)(v1 + 304) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventTicketType);
    *(void *)(v1 + 312) = v54;
    id v55 = objc_msgSend(v18, sel_eventURL);
    if (v55)
    {
      uint64_t v56 = v55;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v57 = 0;
    }
    else
    {
      uint64_t v57 = 1;
    }
    uint64_t v58 = type metadata accessor for URL();
    uint64_t v59 = 1;
    __swift_storeEnumTagSinglePayload((uint64_t)v2, v57, 1, v58);
    outlined init with take of PQAVerificationModelProtocol?((uint64_t)v2, v1 + v16[29], &demangling cache variable for type metadata for URL?);
    uint64_t v60 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventTotalCost);
    uint64_t v61 = (uint64_t *)(v1 + v16[30]);
    *uint64_t v61 = v60;
    v61[1] = v62;
    CSSearchableItemAttributeSet.timeIsUnknownBool.getter(v60, v62, v63, v64, v65, v66, v67, v68, v78, (uint64_t)v79, v80, v81, v82, v83, v84, v85, v86[0], v86[1]);
    OUTLINED_FUNCTION_179_3(v69);
    if (objc_msgSend(v18, sel_startDate))
    {
      OUTLINED_FUNCTION_303();

      uint64_t v59 = 0;
    }
    type metadata accessor for Date();
    uint64_t v70 = 1;
    OUTLINED_FUNCTION_75_11((uint64_t)v13, v59);
    outlined init with take of PQAVerificationModelProtocol?((uint64_t)v13, v1 + v16[31], &demangling cache variable for type metadata for Date?);
    id v71 = objc_msgSend(v18, sel_endDate);
    if (v71)
    {
      uint64_t v72 = v71;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v70 = 0;
    }

    OUTLINED_FUNCTION_75_11(v0, v70);
    outlined init with take of PQAVerificationModelProtocol?(v0, v1 + v16[32], &demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_194_2();
    __swift_storeEnumTagSinglePayload(v44, 0, 1, (uint64_t)v16);
    OUTLINED_FUNCTION_119_0();
  }
}

void Appointment.init(item:checkEventType:)()
{
  OUTLINED_FUNCTION_104_0();
  OUTLINED_FUNCTION_215_1();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v8 = OUTLINED_FUNCTION_81(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_3_18();
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = OUTLINED_FUNCTION_88_5();
  uint64_t v11 = type metadata accessor for Appointment(v10);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_39();
  id v13 = objc_msgSend(v0, sel_attributeSet);
  if ((v4 & 1) != 0
    && (id v14 = OUTLINED_FUNCTION_183_3(),
        id v5 = objc_msgSend(v14, sel_containsString_, *MEMORY[0x263F01C20]),
        v14,
        (v5 & 1) == 0))
  {

    OUTLINED_FUNCTION_131_6();
    OUTLINED_FUNCTION_119_0();
    __swift_storeEnumTagSinglePayload(v55, v56, v57, v58);
  }
  else
  {
    id v15 = objc_msgSend(v0, sel_uniqueIdentifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_136_3();
    *(void *)uint64_t v2 = v5;
    *(void *)(v2 + 8) = v6;
    *(void *)(v2 + 16) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventMessageIdentifier);
    *(void *)(v2 + 24) = v16;
    *(void *)(v2 + 32) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventGroupIdentifier);
    *(void *)(v2 + 40) = v17;
    *(void *)(v2 + 48) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventFallbackGroupIdentifier);
    *(void *)(v2 + 56) = v18;
    *(void *)(v2 + 64) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventMegadomeIdentifier);
    *(void *)(v2 + 72) = v19;
    id v20 = OUTLINED_FUNCTION_183_3();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_136_3();
    *(void *)(v2 + 80) = v5;
    *(void *)(v2 + 88) = v6;
    id v21 = objc_msgSend(v13, sel_eventSubType);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_136_3();
    *(void *)(v2 + 96) = v5;
    *(void *)(v2 + 104) = v6;
    *(void *)(v2 + 112) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventSourceBundleIdentifier);
    *(void *)(v2 + 120) = v22;
    id v23 = objc_msgSend(v13, sel_eventIsAllDay);
    if (v23)
    {
      unsigned __int8 v24 = OUTLINED_FUNCTION_197_3(v23);
    }
    else
    {
      unsigned __int8 v24 = 2;
    }
    *(unsigned char *)(v2 + 128) = v24;
    id v25 = objc_msgSend(v13, sel_eventSourceIsForwarded);
    if (v25)
    {
      OUTLINED_FUNCTION_197_3(v25);
    }
    *(void *)(v2 + 136) = OUTLINED_FUNCTION_212_1();
    *(void *)(v2 + 144) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_mailMessageID);
    *(void *)(v2 + 152) = v26;
    OUTLINED_FUNCTION_74_16();
    uint64_t v28 = (void *)v27;
    id v29 = OUTLINED_FUNCTION_238(v27, sel_attributeForKey_);

    if (v29)
    {
      _bridgeAnyObjectToAny(_:)();
      uint64_t v30 = swift_unknownObjectRelease();
    }
    else
    {
      OUTLINED_FUNCTION_23_19();
    }
    OUTLINED_FUNCTION_22_23(v30, v31, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v68[3])
    {
      OUTLINED_FUNCTION_72_12();
      OUTLINED_FUNCTION_105_13();
      if (v34) {
        uint64_t v33 = 0;
      }
    }
    else
    {
      outlined destroy of PQAVerificationModelProtocol?((uint64_t)v68, (uint64_t *)&demangling cache variable for type metadata for Any?);
      OUTLINED_FUNCTION_181_4();
    }
    *(void *)(v2 + 160) = v32;
    *(void *)(v2 + 168) = v33;
    *(void *)(v2 + 176) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_accountIdentifier);
    *(void *)(v2 + 184) = v35;
    *(void *)(v2 + 192) = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v13, (SEL *)&selRef_mailboxIdentifiers);
    *(void *)(v2 + 200) = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v13, (SEL *)&selRef_detectedEventTypes);
    *(void *)(v2 + 208) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventName);
    *(void *)(v2 + 216) = v36;
    *(void *)(v2 + 224) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventStartLocationName);
    *(void *)(v2 + 232) = v37;
    *(void *)(v2 + 240) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventStartLocationAddress);
    *(void *)(v2 + 248) = v38;
    *(void *)(v2 + 256) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventStartLocationTelephone);
    *(void *)(v2 + 264) = v39;
    objc_msgSend(v13, sel_eventDuration);
    *(void *)(v2 + 272) = v40;
    *(unsigned char *)(v2 + 280) = 0;
    uint64_t v41 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v13, (SEL *)&selRef_eventTotalCost);
    *(void *)(v2 + 288) = v41;
    *(void *)(v2 + 296) = v42;
    CSSearchableItemAttributeSet.timeIsUnknownBool.getter(v41, v42, v43, v44, v45, v46, v47, v48, v60, v6, v62, v63, v64, v65, v66, v67, v68[0], v68[1]);
    OUTLINED_FUNCTION_179_3(v49);
    if (objc_msgSend(v13, sel_startDate))
    {
      OUTLINED_FUNCTION_303();

      uint64_t v50 = 0;
    }
    else
    {
      uint64_t v50 = 1;
    }
    uint64_t v51 = type metadata accessor for Date();
    uint64_t v52 = 1;
    OUTLINED_FUNCTION_75_11(v3, v50);
    outlined init with take of PQAVerificationModelProtocol?(v3, v2 + *(int *)(v11 + 108), &demangling cache variable for type metadata for Date?);
    id v53 = objc_msgSend(v13, sel_endDate);
    if (v53)
    {
      uint64_t v54 = v53;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v52 = 0;
    }

    __swift_storeEnumTagSinglePayload(v1, v52, 1, v51);
    outlined init with take of PQAVerificationModelProtocol?(v1, v2 + *(int *)(v11 + 112), &demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_194_2();
    __swift_storeEnumTagSinglePayload(v61, 0, 1, v11);
    OUTLINED_FUNCTION_119_0();
  }
}

void Party.init(item:checkEventType:)()
{
  OUTLINED_FUNCTION_104_0();
  id v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v11 = OUTLINED_FUNCTION_81(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_59_0();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v13 = OUTLINED_FUNCTION_81(v12);
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_3_17();
  MEMORY[0x270FA5388](v14);
  uint64_t v15 = OUTLINED_FUNCTION_273();
  uint64_t v16 = (int *)type metadata accessor for Party(v15);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_39();
  id v18 = objc_msgSend(v7, sel_attributeSet);
  if ((v5 & 1) != 0
    && (id v19 = OUTLINED_FUNCTION_178_1(),
        OUTLINED_FUNCTION_304(),
        id v5 = objc_msgSend(v20, sel_containsString_, *MEMORY[0x263F01C40]),
        v7,
        uint64_t v7 = (void *)v0,
        uint64_t v0 = v2,
        uint64_t v2 = v3,
        (v5 & 1) == 0))
  {

    OUTLINED_FUNCTION_168_3();
    OUTLINED_FUNCTION_119_0();
    __swift_storeEnumTagSinglePayload(v61, v62, v63, v64);
  }
  else
  {
    id v21 = objc_msgSend(v7, sel_uniqueIdentifier, v7);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_151_3();
    *(void *)uint64_t v1 = v5;
    *(void *)(v1 + 8) = v9;
    *(void *)(v1 + 16) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventMessageIdentifier);
    *(void *)(v1 + 24) = v22;
    *(void *)(v1 + 32) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventGroupIdentifier);
    *(void *)(v1 + 40) = v23;
    *(void *)(v1 + 48) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventFallbackGroupIdentifier);
    *(void *)(v1 + 56) = v24;
    *(void *)(v1 + 64) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventMegadomeIdentifier);
    *(void *)(v1 + 72) = v25;
    id v26 = OUTLINED_FUNCTION_178_1();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_151_3();
    *(void *)(v1 + 80) = v5;
    *(void *)(v1 + 88) = v9;
    id v27 = objc_msgSend(v18, sel_eventSubType);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_151_3();
    *(void *)(v1 + 96) = v5;
    *(void *)(v1 + 104) = v9;
    *(void *)(v1 + 112) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventSourceBundleIdentifier);
    *(void *)(v1 + 120) = v28;
    id v29 = objc_msgSend(v18, sel_eventIsAllDay);
    if (v29)
    {
      unsigned __int8 v30 = OUTLINED_FUNCTION_289(v29);
    }
    else
    {
      unsigned __int8 v30 = 2;
    }
    *(unsigned char *)(v1 + 128) = v30;
    id v31 = objc_msgSend(v18, sel_eventSourceIsForwarded);
    if (v31)
    {
      OUTLINED_FUNCTION_289(v31);
    }
    *(void *)(v1 + 136) = OUTLINED_FUNCTION_212_1();
    *(void *)(v1 + 144) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_mailMessageID);
    *(void *)(v1 + 152) = v32;
    OUTLINED_FUNCTION_74_16();
    char v34 = (void *)v33;
    id v35 = OUTLINED_FUNCTION_238(v33, sel_attributeForKey_);

    if (v35)
    {
      _bridgeAnyObjectToAny(_:)();
      uint64_t v36 = swift_unknownObjectRelease();
    }
    else
    {
      OUTLINED_FUNCTION_23_19();
    }
    OUTLINED_FUNCTION_22_23(v36, v37, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v75[3])
    {
      OUTLINED_FUNCTION_72_12();
      OUTLINED_FUNCTION_105_13();
      if (v40) {
        uint64_t v39 = 0;
      }
    }
    else
    {
      outlined destroy of PQAVerificationModelProtocol?((uint64_t)v75, (uint64_t *)&demangling cache variable for type metadata for Any?);
      OUTLINED_FUNCTION_181_4();
    }
    *(void *)(v1 + 160) = v38;
    *(void *)(v1 + 168) = v39;
    *(void *)(v1 + 176) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_accountIdentifier);
    *(void *)(v1 + 184) = v41;
    *(void *)(v1 + 192) = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v18, (SEL *)&selRef_mailboxIdentifiers);
    *(void *)(v1 + 200) = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v18, (SEL *)&selRef_detectedEventTypes);
    *(void *)(v1 + 208) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventName);
    *(void *)(v1 + 216) = v42;
    *(void *)(v1 + 240) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventStartLocationAddress);
    *(void *)(v1 + 248) = v43;
    uint64_t v44 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventStartLocationName);
    *(void *)(v1 + 224) = v44;
    *(void *)(v1 + 232) = v45;
    CSSearchableItemAttributeSet.timeIsUnknownBool.getter(v44, v45, v46, v47, v48, v49, v50, v51, v66, v9, v69, v70, v71, v72, v73, v74, v75[0], v75[1]);
    OUTLINED_FUNCTION_179_3(v52);
    id v53 = objc_msgSend(v18, sel_startDate);
    if (v53)
    {
      uint64_t v54 = v53;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v55 = type metadata accessor for Date();
    OUTLINED_FUNCTION_196_2(v55);
    outlined init with take of PQAVerificationModelProtocol?(v3, v1 + v16[24], &demangling cache variable for type metadata for Date?);
    id v56 = objc_msgSend(v18, sel_endDate);
    if (v56)
    {
      uint64_t v57 = v56;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();
    }
    OUTLINED_FUNCTION_209_2();
    outlined init with take of PQAVerificationModelProtocol?(v2, v1 + v16[25], &demangling cache variable for type metadata for Date?);
    id v58 = objc_msgSend(v18, sel_eventURL);
    if (v58)
    {
      uint64_t v59 = v58;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v60 = type metadata accessor for URL();
    OUTLINED_FUNCTION_279(v60);
    outlined init with take of PQAVerificationModelProtocol?(v0, v1 + v16[26], &demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_194_2();
    __swift_storeEnumTagSinglePayload(v68, 0, 1, (uint64_t)v16);
    OUTLINED_FUNCTION_119_0();
  }
}

void Trip.init(item:checkEventType:)()
{
  OUTLINED_FUNCTION_104_0();
  id v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v11 = OUTLINED_FUNCTION_81(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_59_0();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v13 = OUTLINED_FUNCTION_81(v12);
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_3_17();
  MEMORY[0x270FA5388](v14);
  uint64_t v15 = OUTLINED_FUNCTION_273();
  uint64_t v16 = (int *)type metadata accessor for Trip(v15);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_39();
  id v18 = objc_msgSend(v7, sel_attributeSet);
  if ((v5 & 1) != 0
    && (id v19 = OUTLINED_FUNCTION_178_1(),
        OUTLINED_FUNCTION_304(),
        id v5 = objc_msgSend(v20, sel_containsString_, *MEMORY[0x263F01C60]),
        v7,
        uint64_t v7 = (void *)v0,
        uint64_t v0 = v2,
        uint64_t v2 = v3,
        (v5 & 1) == 0))
  {

    OUTLINED_FUNCTION_168_3();
    OUTLINED_FUNCTION_119_0();
    __swift_storeEnumTagSinglePayload(v61, v62, v63, v64);
  }
  else
  {
    id v21 = objc_msgSend(v7, sel_uniqueIdentifier, v7);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_151_3();
    *(void *)uint64_t v1 = v5;
    *(void *)(v1 + 8) = v9;
    *(void *)(v1 + 16) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventMessageIdentifier);
    *(void *)(v1 + 24) = v22;
    *(void *)(v1 + 32) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventGroupIdentifier);
    *(void *)(v1 + 40) = v23;
    *(void *)(v1 + 48) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventFallbackGroupIdentifier);
    *(void *)(v1 + 56) = v24;
    *(void *)(v1 + 64) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventMegadomeIdentifier);
    *(void *)(v1 + 72) = v25;
    id v26 = OUTLINED_FUNCTION_178_1();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_151_3();
    *(void *)(v1 + 80) = v5;
    *(void *)(v1 + 88) = v9;
    id v27 = objc_msgSend(v18, sel_eventSubType);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_151_3();
    *(void *)(v1 + 96) = v5;
    *(void *)(v1 + 104) = v9;
    *(void *)(v1 + 112) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventSourceBundleIdentifier);
    *(void *)(v1 + 120) = v28;
    id v29 = objc_msgSend(v18, sel_eventIsAllDay);
    if (v29)
    {
      unsigned __int8 v30 = OUTLINED_FUNCTION_289(v29);
    }
    else
    {
      unsigned __int8 v30 = 2;
    }
    *(unsigned char *)(v1 + 128) = v30;
    id v31 = objc_msgSend(v18, sel_eventSourceIsForwarded);
    if (v31)
    {
      OUTLINED_FUNCTION_289(v31);
    }
    *(void *)(v1 + 136) = OUTLINED_FUNCTION_212_1();
    *(void *)(v1 + 144) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_mailMessageID);
    *(void *)(v1 + 152) = v32;
    OUTLINED_FUNCTION_74_16();
    char v34 = (void *)v33;
    id v35 = OUTLINED_FUNCTION_238(v33, sel_attributeForKey_);

    if (v35)
    {
      _bridgeAnyObjectToAny(_:)();
      uint64_t v36 = swift_unknownObjectRelease();
    }
    else
    {
      OUTLINED_FUNCTION_23_19();
    }
    OUTLINED_FUNCTION_22_23(v36, v37, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v75[3])
    {
      OUTLINED_FUNCTION_72_12();
      OUTLINED_FUNCTION_105_13();
      if (v40) {
        uint64_t v39 = 0;
      }
    }
    else
    {
      outlined destroy of PQAVerificationModelProtocol?((uint64_t)v75, (uint64_t *)&demangling cache variable for type metadata for Any?);
      OUTLINED_FUNCTION_181_4();
    }
    *(void *)(v1 + 160) = v38;
    *(void *)(v1 + 168) = v39;
    *(void *)(v1 + 176) = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_accountIdentifier);
    *(void *)(v1 + 184) = v41;
    *(void *)(v1 + 192) = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v18, (SEL *)&selRef_mailboxIdentifiers);
    *(void *)(v1 + 200) = outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v18, (SEL *)&selRef_detectedEventTypes);
    uint64_t v42 = outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(v18, (SEL *)&selRef_eventName);
    *(void *)(v1 + 208) = v42;
    *(void *)(v1 + 216) = v43;
    CSSearchableItemAttributeSet.timeIsUnknownBool.getter(v42, v43, v44, v45, v46, v47, v48, v49, v66, v9, v69, v70, v71, v72, v73, v74, v75[0], v75[1]);
    OUTLINED_FUNCTION_179_3(v50);
    id v51 = objc_msgSend(v18, sel_startDate);
    if (v51)
    {
      uint64_t v52 = v51;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v53 = type metadata accessor for Date();
    OUTLINED_FUNCTION_196_2(v53);
    outlined init with take of PQAVerificationModelProtocol?(v3, v1 + v16[22], &demangling cache variable for type metadata for Date?);
    id v54 = objc_msgSend(v18, sel_endDate);
    if (v54)
    {
      uint64_t v55 = v54;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();
    }
    OUTLINED_FUNCTION_209_2();
    outlined init with take of PQAVerificationModelProtocol?(v2, v1 + v16[23], &demangling cache variable for type metadata for Date?);
    objc_msgSend(v18, sel_eventDuration);
    uint64_t v56 = v1 + v16[24];
    *(void *)uint64_t v56 = v57;
    *(unsigned char *)(v56 + 8) = 0;
    id v58 = objc_msgSend(v18, sel_eventURL);
    if (v58)
    {
      uint64_t v59 = v58;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v60 = type metadata accessor for URL();
    OUTLINED_FUNCTION_279(v60);
    outlined init with take of PQAVerificationModelProtocol?(v0, v1 + v16[25], &demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_194_2();
    __swift_storeEnumTagSinglePayload(v68, 0, 1, (uint64_t)v16);
    OUTLINED_FUNCTION_119_0();
  }
}

uint64_t RentalCarReservation.customerNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RentalCarReservation.startLocationName.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t RentalCarReservation.startLocationAddress.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t RentalCarReservation.startLocationTelephone.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t RentalCarReservation.endLocationName.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t RentalCarReservation.endLocationAddress.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t RentalCarReservation.endLocationTelephone.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

void RentalCarReservation.durationInSeconds.getter()
{
}

uint64_t RentalCarReservation.totalCost.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t RentalCarReservation.status.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t RentalCarReservation.startDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for RentalCarReservation(0);
  return outlined init with copy of PQAVerificationModelProtocol?(v1 + *(int *)(v3 + 140), a1, &demangling cache variable for type metadata for Date?);
}

uint64_t RentalCarReservation.endDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for RentalCarReservation(0);
  return outlined init with copy of PQAVerificationModelProtocol?(v1 + *(int *)(v3 + 144), a1, &demangling cache variable for type metadata for Date?);
}

uint64_t RentalCarReservation.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000258684380 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000002586843A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000002586843C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000002586843E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    BOOL v6 = a1 == 0x707954746E657665 && a2 == 0xE900000000000065;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 5;
    }
    else
    {
      BOOL v7 = a1 == 0x627553746E657665 && a2 == 0xEC00000065707954;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 6;
      }
      else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000258684400 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        return 7;
      }
      else
      {
        BOOL v8 = a1 == 0x417349746E657665 && a2 == 0xED00007961446C6CLL;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 8;
        }
        else
        {
          BOOL v9 = a1 == 0x6E557349656D6974 && a2 == 0xED00006E776F6E6BLL;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 9;
          }
          else if (a1 == 0xD000000000000016 && a2 == 0x8000000258684420 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 10;
          }
          else
          {
            BOOL v10 = a1 == 0x73726F68747561 && a2 == 0xE700000000000000;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 11;
            }
            else
            {
              BOOL v11 = a1 == 0x7373654D6C69616DLL && a2 == 0xED00006449656761;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 12;
              }
              else if (a1 == 0xD000000000000011 && a2 == 0x8000000258684440 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 13;
              }
              else if (a1 == 0xD000000000000011 && a2 == 0x8000000258684460 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 14;
              }
              else
              {
                BOOL v12 = a1 == 0x65786F626C69616DLL && a2 == 0xE900000000000073;
                if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 15;
                }
                else if (a1 == 0xD000000000000012 && a2 == 0x8000000258684480 {
                       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                }
                {
                  swift_bridgeObjectRelease();
                  return 16;
                }
                else
                {
                  BOOL v13 = a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61;
                  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 17;
                  }
                  else
                  {
                    BOOL v14 = a1 == 0x7461767265736572 && a2 == 0xED000064496E6F69;
                    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 18;
                    }
                    else
                    {
                      BOOL v15 = a1 == 0x72656469766F7270 && a2 == 0xE800000000000000;
                      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        return 19;
                      }
                      else
                      {
                        BOOL v16 = a1 == 0x72656D6F74737563 && a2 == 0xED000073656D614ELL;
                        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          return 20;
                        }
                        else if (a1 == 0xD000000000000012 && a2 == 0x80000002586844A0 {
                               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        }
                        {
                          swift_bridgeObjectRelease();
                          return 21;
                        }
                        else if (a1 == 0xD000000000000011 && a2 == 0x80000002586844C0 {
                               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        }
                        {
                          swift_bridgeObjectRelease();
                          return 22;
                        }
                        else if (a1 == 0xD000000000000014 && a2 == 0x80000002586844E0 {
                               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        }
                        {
                          swift_bridgeObjectRelease();
                          return 23;
                        }
                        else if (a1 == 0xD000000000000016 && a2 == 0x8000000258684500 {
                               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        }
                        {
                          swift_bridgeObjectRelease();
                          return 24;
                        }
                        else
                        {
                          BOOL v17 = a1 == 0x7461636F4C646E65 && a2 == 0xEF656D614E6E6F69;
                          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                          {
                            swift_bridgeObjectRelease();
                            return 25;
                          }
                          else if (a1 == 0xD000000000000012 && a2 == 0x8000000258684520 {
                                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                          }
                          {
                            swift_bridgeObjectRelease();
                            return 26;
                          }
                          else if (a1 == 0xD000000000000014 && a2 == 0x8000000258684540 {
                                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                          }
                          {
                            swift_bridgeObjectRelease();
                            return 27;
                          }
                          else if (a1 == 0xD000000000000011 && a2 == 0x8000000258684560 {
                                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                          }
                          {
                            swift_bridgeObjectRelease();
                            return 28;
                          }
                          else
                          {
                            BOOL v18 = a1 == 0x736F436C61746F74 && a2 == 0xE900000000000074;
                            if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                            {
                              swift_bridgeObjectRelease();
                              return 29;
                            }
                            else
                            {
                              BOOL v19 = a1 == 0x737574617473 && a2 == 0xE600000000000000;
                              if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                              {
                                swift_bridgeObjectRelease();
                                return 30;
                              }
                              else
                              {
                                BOOL v20 = a1 == 0x7461447472617473 && a2 == 0xE900000000000065;
                                if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                {
                                  swift_bridgeObjectRelease();
                                  return 31;
                                }
                                else if (a1 == 0x65746144646E65 && a2 == 0xE700000000000000)
                                {
                                  swift_bridgeObjectRelease();
                                  return 32;
                                }
                                else
                                {
                                  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  swift_bridgeObjectRelease();
                                  if (v22) {
                                    return 32;
                                  }
                                  else {
                                    return 33;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t RentalCarReservation.CodingKeys.init(intValue:)()
{
  return 33;
}

uint64_t RentalCarReservation.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 25705;
  switch(a1)
  {
    case 1:
      return 0xD000000000000016;
    case 2:
      return 0xD000000000000014;
    case 3:
      return 0xD00000000000001CLL;
    case 4:
      return 0xD000000000000017;
    case 5:
      return 0x707954746E657665;
    case 6:
      return 0x627553746E657665;
    case 7:
      return 0xD00000000000001BLL;
    case 8:
      return 0x417349746E657665;
    case 9:
      return 0x6E557349656D6974;
    case 10:
      return 0xD000000000000016;
    case 11:
      return 0x73726F68747561;
    case 12:
      return 0x7373654D6C69616DLL;
    case 13:
    case 14:
    case 22:
    case 28:
      return 0xD000000000000011;
    case 15:
      return 0x65786F626C69616DLL;
    case 16:
      return 0xD000000000000012;
    case 17:
      return 0x4E79616C70736964;
    case 18:
      uint64_t v3 = 0x767265736572;
      goto LABEL_25;
    case 19:
      uint64_t v4 = 0x6469766F7270;
      goto LABEL_20;
    case 20:
      uint64_t v4 = 0x6D6F74737563;
LABEL_20:
      uint64_t result = v4 & 0xFFFFFFFFFFFFLL | 0x7265000000000000;
      break;
    case 21:
      uint64_t result = 0xD000000000000012;
      break;
    case 23:
      uint64_t result = 0xD000000000000014;
      break;
    case 24:
      uint64_t result = 0xD000000000000016;
      break;
    case 25:
      uint64_t v3 = 0x636F4C646E65;
LABEL_25:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x7461000000000000;
      break;
    case 26:
      uint64_t result = 0xD000000000000012;
      break;
    case 27:
      uint64_t result = 0xD000000000000014;
      break;
    case 29:
      uint64_t result = 0x736F436C61746F74;
      break;
    case 30:
      uint64_t result = 0x737574617473;
      break;
    case 31:
      uint64_t result = 0x7461447472617473;
      break;
    case 32:
      uint64_t result = 0x65746144646E65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RentalCarReservation.CodingKeys()
{
  return RentalCarReservation.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RentalCarReservation.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = RentalCarReservation.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance RentalCarReservation.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = RentalCarReservation.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RentalCarReservation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RentalCarReservation.CodingKeys and conformance RentalCarReservation.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RentalCarReservation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RentalCarReservation.CodingKeys and conformance RentalCarReservation.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void RentalCarReservation.encode(to:)()
{
  OUTLINED_FUNCTION_105_0();
  OUTLINED_FUNCTION_113_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RentalCarReservation.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_61_13();
  lazy protocol witness table accessor for type RentalCarReservation.CodingKeys and conformance RentalCarReservation.CodingKeys();
  OUTLINED_FUNCTION_69_13();
  OUTLINED_FUNCTION_51_22();
  if (!v0)
  {
    OUTLINED_FUNCTION_1_31(1);
    OUTLINED_FUNCTION_1_31(2);
    OUTLINED_FUNCTION_1_31(3);
    OUTLINED_FUNCTION_1_31(4);
    OUTLINED_FUNCTION_1_31(5);
    OUTLINED_FUNCTION_1_31(6);
    OUTLINED_FUNCTION_1_31(7);
    OUTLINED_FUNCTION_40_18(8);
    OUTLINED_FUNCTION_60_12();
    OUTLINED_FUNCTION_40_18(10);
    OUTLINED_FUNCTION_71_14();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_8_19();
    OUTLINED_FUNCTION_1_31(12);
    OUTLINED_FUNCTION_1_31(13);
    OUTLINED_FUNCTION_1_31(14);
    OUTLINED_FUNCTION_8_19();
    OUTLINED_FUNCTION_8_19();
    OUTLINED_FUNCTION_1_31(17);
    OUTLINED_FUNCTION_1_31(18);
    OUTLINED_FUNCTION_1_31(19);
    OUTLINED_FUNCTION_8_19();
    OUTLINED_FUNCTION_1_31(21);
    OUTLINED_FUNCTION_1_31(22);
    OUTLINED_FUNCTION_1_31(23);
    OUTLINED_FUNCTION_1_31(24);
    OUTLINED_FUNCTION_1_31(25);
    OUTLINED_FUNCTION_1_31(26);
    OUTLINED_FUNCTION_1_31(27);
    OUTLINED_FUNCTION_64_12(28);
    OUTLINED_FUNCTION_1_31(29);
    OUTLINED_FUNCTION_1_31(30);
    type metadata accessor for RentalCarReservation(0);
    OUTLINED_FUNCTION_176_4(31);
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    OUTLINED_FUNCTION_36_24();
    OUTLINED_FUNCTION_36_24();
  }
  OUTLINED_FUNCTION_12_34();
  v2();
  OUTLINED_FUNCTION_189_2();
  OUTLINED_FUNCTION_120_0();
}

void RentalCarReservation.init(from:)()
{
  OUTLINED_FUNCTION_105_0();
  OUTLINED_FUNCTION_232_0();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_27_15();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_107_11();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RentalCarReservation.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v7);
  uint64_t v8 = OUTLINED_FUNCTION_14_8();
  uint64_t v49 = type metadata accessor for RentalCarReservation(v8);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_184_0();
  uint64_t v50 = v10;
  OUTLINED_FUNCTION_171_4();
  lazy protocol witness table accessor for type RentalCarReservation.CodingKeys and conformance RentalCarReservation.CodingKeys();
  OUTLINED_FUNCTION_134_3();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v0);
    OUTLINED_FUNCTION_233_0();
    if (v11) {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    OUTLINED_FUNCTION_252();
    *(void *)uint64_t v50 = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v50 + 8) = v12;
    *(void *)(v50 + 16) = OUTLINED_FUNCTION_19_27(1);
    *(void *)(v50 + 24) = v13;
    *(void *)(v50 + 32) = OUTLINED_FUNCTION_19_27(2);
    *(void *)(v50 + 40) = v14;
    *(void *)(v50 + 48) = OUTLINED_FUNCTION_19_27(3);
    *(void *)(v50 + 56) = v15;
    *(void *)(v50 + 64) = OUTLINED_FUNCTION_19_27(4);
    *(void *)(v50 + 72) = v16;
    *(void *)(v50 + 80) = OUTLINED_FUNCTION_19_27(5);
    *(void *)(v50 + 88) = v17;
    *(void *)(v50 + 96) = OUTLINED_FUNCTION_19_27(6);
    *(void *)(v50 + 104) = v18;
    uint64_t v19 = OUTLINED_FUNCTION_19_27(7);
    char v21 = OUTLINED_FUNCTION_96_11(v19, v20);
    *(unsigned char *)(v50 + 129) = OUTLINED_FUNCTION_95_11(v21) & 1;
    *(unsigned char *)(v50 + 130) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_63_13();
    OUTLINED_FUNCTION_283();
    *(void *)(v23 + 136) = v22;
    *(void *)(v50 + 144) = OUTLINED_FUNCTION_13_35(12);
    *(void *)(v50 + 152) = v24;
    *(void *)(v50 + 160) = OUTLINED_FUNCTION_13_35(13);
    *(void *)(v50 + 168) = v25;
    *(void *)(v50 + 176) = OUTLINED_FUNCTION_13_35(14);
    *(void *)(v50 + 184) = v26;
    OUTLINED_FUNCTION_46_20();
    OUTLINED_FUNCTION_283();
    *(void *)(v28 + 192) = v27;
    OUTLINED_FUNCTION_46_20();
    OUTLINED_FUNCTION_283();
    *(void *)(v30 + 200) = v29;
    *(void *)(v50 + 208) = OUTLINED_FUNCTION_13_35(17);
    *(void *)(v50 + 216) = v31;
    *(void *)(v50 + 224) = OUTLINED_FUNCTION_13_35(18);
    *(void *)(v50 + 232) = v32;
    *(void *)(v50 + 240) = OUTLINED_FUNCTION_13_35(19);
    *(void *)(v50 + 248) = v33;
    OUTLINED_FUNCTION_46_20();
    OUTLINED_FUNCTION_283();
    *(void *)(v35 + 256) = v34;
    *(void *)(v50 + 264) = OUTLINED_FUNCTION_13_35(21);
    *(void *)(v50 + 272) = v36;
    *(void *)(v50 + 280) = OUTLINED_FUNCTION_13_35(22);
    *(void *)(v50 + 288) = v37;
    *(void *)(v50 + 296) = OUTLINED_FUNCTION_13_35(23);
    *(void *)(v50 + 304) = v38;
    *(void *)(v50 + 312) = OUTLINED_FUNCTION_13_35(24);
    *(void *)(v50 + 320) = v39;
    *(void *)(v50 + 328) = OUTLINED_FUNCTION_13_35(25);
    *(void *)(v50 + 336) = v40;
    *(void *)(v50 + 344) = OUTLINED_FUNCTION_13_35(26);
    *(void *)(v50 + 352) = v41;
    *(void *)(v50 + 360) = OUTLINED_FUNCTION_13_35(27);
    *(void *)(v50 + 368) = v42;
    *(void *)(v50 + 376) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *(unsigned char *)(v50 + 384) = v43 & 1;
    *(void *)(v50 + 392) = OUTLINED_FUNCTION_13_35(29);
    *(void *)(v50 + 400) = v44;
    *(void *)(v50 + 408) = OUTLINED_FUNCTION_13_35(30);
    *(void *)(v50 + 416) = v45;
    type metadata accessor for Date();
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    OUTLINED_FUNCTION_126_6();
    OUTLINED_FUNCTION_63_13();
    outlined init with take of PQAVerificationModelProtocol?(v3, v50 + *(int *)(v49 + 140), &demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_154_4(32);
    OUTLINED_FUNCTION_63_13();
    uint64_t v46 = OUTLINED_FUNCTION_3_43();
    v47(v46);
    OUTLINED_FUNCTION_294();
    outlined init with take of PQAVerificationModelProtocol?(v2, v50 + *(int *)(v48 + 144), &demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_301();
    __swift_destroy_boxed_opaque_existential_1Tm(v0);
    _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
  }
  OUTLINED_FUNCTION_120_6();
  OUTLINED_FUNCTION_120_0();
}

void protocol witness for Decodable.init(from:) in conformance RentalCarReservation()
{
}

void protocol witness for Encodable.encode(to:) in conformance RentalCarReservation()
{
}

uint64_t TicketedTransportation.customerNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TicketedTransportation.startLocationName.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t TicketedTransportation.startLocationAddress.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t TicketedTransportation.startDate.getter()
{
  return TicketedTransportation.startDate.getter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  uint64_t v2 = OUTLINED_FUNCTION_27_7();
  uint64_t v4 = v3(v2);
  return outlined init with copy of PQAVerificationModelProtocol?(v1 + *(int *)(v4 + 112), v0, &demangling cache variable for type metadata for Date?);
}

uint64_t TicketedTransportation.endDate.getter()
{
  return TicketedTransportation.endDate.getter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_127_6();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_208_2(*(int *)(v2 + 116));
}

uint64_t TicketedTransportation.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000258684380 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000002586843A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000002586843C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000002586843E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    BOOL v6 = a1 == 0x707954746E657665 && a2 == 0xE900000000000065;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 5;
    }
    else
    {
      BOOL v7 = a1 == 0x627553746E657665 && a2 == 0xEC00000065707954;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 6;
      }
      else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000258684400 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        return 7;
      }
      else
      {
        BOOL v8 = a1 == 0x417349746E657665 && a2 == 0xED00007961446C6CLL;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 8;
        }
        else
        {
          BOOL v9 = a1 == 0x6E557349656D6974 && a2 == 0xED00006E776F6E6BLL;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 9;
          }
          else if (a1 == 0xD000000000000016 && a2 == 0x8000000258684420 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 10;
          }
          else
          {
            BOOL v10 = a1 == 0x73726F68747561 && a2 == 0xE700000000000000;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 11;
            }
            else
            {
              BOOL v11 = a1 == 0x7373654D6C69616DLL && a2 == 0xED00006449656761;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 12;
              }
              else if (a1 == 0xD000000000000011 && a2 == 0x8000000258684440 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 13;
              }
              else if (a1 == 0xD000000000000011 && a2 == 0x8000000258684460 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 14;
              }
              else
              {
                BOOL v12 = a1 == 0x65786F626C69616DLL && a2 == 0xE900000000000073;
                if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 15;
                }
                else if (a1 == 0xD000000000000012 && a2 == 0x8000000258684480 {
                       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                }
                {
                  swift_bridgeObjectRelease();
                  return 16;
                }
                else
                {
                  BOOL v13 = a1 == 0x72656D6F74737563 && a2 == 0xED000073656D614ELL;
                  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 17;
                  }
                  else if (a1 == 0xD000000000000011 && a2 == 0x80000002586844C0 {
                         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  }
                  {
                    swift_bridgeObjectRelease();
                    return 18;
                  }
                  else if (a1 == 0xD000000000000014 && a2 == 0x80000002586844E0 {
                         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  }
                  {
                    swift_bridgeObjectRelease();
                    return 19;
                  }
                  else
                  {
                    BOOL v14 = a1 == 0x7461636F4C646E65 && a2 == 0xEF656D614E6E6F69;
                    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 20;
                    }
                    else if (a1 == 0xD000000000000012 && a2 == 0x8000000258684520 {
                           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    }
                    {
                      swift_bridgeObjectRelease();
                      return 21;
                    }
                    else
                    {
                      BOOL v15 = a1 == 0x626D754E74616573 && a2 == 0xEB00000000737265;
                      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        return 22;
                      }
                      else if (a1 == 0xD000000000000011 && a2 == 0x8000000258684560 {
                             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      }
                      {
                        swift_bridgeObjectRelease();
                        return 23;
                      }
                      else
                      {
                        BOOL v16 = a1 == 0x7461447472617473 && a2 == 0xE900000000000065;
                        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          return 24;
                        }
                        else if (a1 == 0x65746144646E65 && a2 == 0xE700000000000000)
                        {
                          swift_bridgeObjectRelease();
                          return 25;
                        }
                        else
                        {
                          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          swift_bridgeObjectRelease();
                          if (v18) {
                            return 25;
                          }
                          else {
                            return 26;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

unint64_t TicketedTransportation.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000016;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000017;
      break;
    case 5:
      unint64_t result = 0x707954746E657665;
      break;
    case 6:
      unint64_t result = 0x627553746E657665;
      break;
    case 7:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 8:
      unint64_t result = 0x417349746E657665;
      break;
    case 9:
      unint64_t result = 0x6E557349656D6974;
      break;
    case 10:
      unint64_t result = 0xD000000000000016;
      break;
    case 11:
      unint64_t result = 0x73726F68747561;
      break;
    case 12:
      unint64_t result = 0x7373654D6C69616DLL;
      break;
    case 13:
    case 14:
    case 18:
    case 23:
      unint64_t result = 0xD000000000000011;
      break;
    case 15:
      unint64_t result = 0x65786F626C69616DLL;
      break;
    case 16:
      unint64_t result = 0xD000000000000012;
      break;
    case 17:
      unint64_t result = 0x72656D6F74737563;
      break;
    case 19:
      unint64_t result = 0xD000000000000014;
      break;
    case 20:
      unint64_t result = 0x7461636F4C646E65;
      break;
    case 21:
      unint64_t result = 0xD000000000000012;
      break;
    case 22:
      unint64_t result = 0x626D754E74616573;
      break;
    case 24:
      unint64_t result = 0x7461447472617473;
      break;
    case 25:
      unint64_t result = 0x65746144646E65;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance TicketedTransportation.CodingKeys()
{
  return TicketedTransportation.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TicketedTransportation.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = TicketedTransportation.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TicketedTransportation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TicketedTransportation.CodingKeys and conformance TicketedTransportation.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TicketedTransportation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TicketedTransportation.CodingKeys and conformance TicketedTransportation.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void TicketedTransportation.encode(to:)()
{
  OUTLINED_FUNCTION_105_0();
  OUTLINED_FUNCTION_113_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TicketedTransportation.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_61_13();
  lazy protocol witness table accessor for type TicketedTransportation.CodingKeys and conformance TicketedTransportation.CodingKeys();
  OUTLINED_FUNCTION_69_13();
  OUTLINED_FUNCTION_51_22();
  if (!v0)
  {
    OUTLINED_FUNCTION_1_31(1);
    OUTLINED_FUNCTION_1_31(2);
    OUTLINED_FUNCTION_1_31(3);
    OUTLINED_FUNCTION_1_31(4);
    OUTLINED_FUNCTION_1_31(5);
    OUTLINED_FUNCTION_1_31(6);
    OUTLINED_FUNCTION_1_31(7);
    OUTLINED_FUNCTION_40_18(8);
    OUTLINED_FUNCTION_60_12();
    OUTLINED_FUNCTION_40_18(10);
    OUTLINED_FUNCTION_71_14();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_8_19();
    OUTLINED_FUNCTION_1_31(12);
    OUTLINED_FUNCTION_1_31(13);
    OUTLINED_FUNCTION_1_31(14);
    OUTLINED_FUNCTION_8_19();
    OUTLINED_FUNCTION_8_19();
    OUTLINED_FUNCTION_8_19();
    OUTLINED_FUNCTION_1_31(18);
    OUTLINED_FUNCTION_1_31(19);
    OUTLINED_FUNCTION_1_31(20);
    OUTLINED_FUNCTION_1_31(21);
    OUTLINED_FUNCTION_8_19();
    OUTLINED_FUNCTION_64_12(23);
    type metadata accessor for TicketedTransportation(0);
    OUTLINED_FUNCTION_176_4(24);
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    OUTLINED_FUNCTION_36_24();
    OUTLINED_FUNCTION_36_24();
  }
  OUTLINED_FUNCTION_12_34();
  v2();
  OUTLINED_FUNCTION_189_2();
  OUTLINED_FUNCTION_120_0();
}

void TicketedTransportation.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_105_0();
  OUTLINED_FUNCTION_232_0();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v16 = OUTLINED_FUNCTION_81(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_27_15();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_107_11();
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TicketedTransportation.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v18);
  uint64_t v19 = OUTLINED_FUNCTION_14_8();
  uint64_t v63 = type metadata accessor for TicketedTransportation(v19);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v20);
  uint64_t v77 = (uint64_t *)((char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v72 = v11;
  OUTLINED_FUNCTION_171_4();
  lazy protocol witness table accessor for type TicketedTransportation.CodingKeys and conformance TicketedTransportation.CodingKeys();
  uint64_t v73 = v10;
  OUTLINED_FUNCTION_134_3();
  if (!v12)
  {
    OUTLINED_FUNCTION_177_4();
    uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v24 = v77;
    *uint64_t v77 = v22;
    v24[1] = v25;
    v24[2] = OUTLINED_FUNCTION_19_27(1);
    v24[3] = v26;
    v24[4] = OUTLINED_FUNCTION_19_27(2);
    v24[5] = v27;
    v24[6] = OUTLINED_FUNCTION_19_27(3);
    v24[7] = v28;
    v24[8] = OUTLINED_FUNCTION_19_27(4);
    v24[9] = v29;
    v24[10] = OUTLINED_FUNCTION_19_27(5);
    v24[11] = v30;
    v24[12] = OUTLINED_FUNCTION_19_27(6);
    v24[13] = v31;
    uint64_t v32 = OUTLINED_FUNCTION_19_27(7);
    char v34 = OUTLINED_FUNCTION_96_11(v32, v33);
    char v35 = OUTLINED_FUNCTION_95_11(v34);
    uint64_t v76 = 0;
    OUTLINED_FUNCTION_53_16(v35);
    uint64_t v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v76 = 0;
    OUTLINED_FUNCTION_216_1(v36);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    OUTLINED_FUNCTION_102_9();
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_166_4();
    OUTLINED_FUNCTION_110_10();
    uint64_t v76 = 0;
    OUTLINED_FUNCTION_54_17();
    uint64_t v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v76 = 0;
    OUTLINED_FUNCTION_67_15(v37, v38);
    uint64_t v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v76 = 0;
    OUTLINED_FUNCTION_66_17(v39, v40);
    uint64_t v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v76 = 0;
    OUTLINED_FUNCTION_44_22(v41, v42);
    OUTLINED_FUNCTION_188_2();
    uint64_t v76 = 0;
    OUTLINED_FUNCTION_41_24();
    OUTLINED_FUNCTION_188_2();
    uint64_t v76 = 0;
    v77[25] = a10;
    OUTLINED_FUNCTION_59_15(17);
    uint64_t v76 = 0;
    v77[26] = a10;
    uint64_t v43 = OUTLINED_FUNCTION_91_13(18);
    uint64_t v76 = 0;
    uint64_t v44 = v77;
    v77[27] = v43;
    v44[28] = v45;
    uint64_t v46 = OUTLINED_FUNCTION_91_13(19);
    uint64_t v76 = 0;
    uint64_t v47 = v77;
    v77[29] = v46;
    v47[30] = v48;
    uint64_t v49 = OUTLINED_FUNCTION_91_13(20);
    uint64_t v76 = 0;
    uint64_t v50 = v77;
    v77[31] = v49;
    v50[32] = v51;
    uint64_t v52 = OUTLINED_FUNCTION_91_13(21);
    uint64_t v76 = 0;
    uint64_t v53 = v77;
    v77[33] = v52;
    v53[34] = v54;
    OUTLINED_FUNCTION_59_15(22);
    OUTLINED_FUNCTION_111_10();
    int v75 = v55;
    uint64_t v76 = 0;
    OUTLINED_FUNCTION_187_2();
    uint64_t v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v76 = 0;
    uint64_t v57 = v77;
    v77[36] = v56;
    *((unsigned char *)v57 + 296) = v58 & 1;
    type metadata accessor for Date();
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    OUTLINED_FUNCTION_126_6();
    OUTLINED_FUNCTION_110_10();
    uint64_t v76 = 0;
    OUTLINED_FUNCTION_104_13();
    outlined init with take of PQAVerificationModelProtocol?(v14, v59, &demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_154_4(25);
    OUTLINED_FUNCTION_110_10();
    uint64_t v76 = 0;
    OUTLINED_FUNCTION_65();
    v61(v60);
    OUTLINED_FUNCTION_213_2();
    outlined init with take of PQAVerificationModelProtocol?(v13, v62, &demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_301();
    __swift_destroy_boxed_opaque_existential_1Tm(v72);
    _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
    goto LABEL_13;
  }
  uint64_t v76 = v12;
  LODWORD(v74) = 0;
  uint64_t v23 = v77;
  __swift_destroy_boxed_opaque_existential_1Tm(v72);
  int v64 = 0;
  int v65 = 0;
  int v66 = 0;
  int v67 = 0;
  int v68 = 0;
  int v69 = 0;
  int v70 = 0;
  int v71 = 0;
  LODWORD(v73) = 0;
  int v75 = 0;
  LODWORD(v72) = 0;
  if (v74)
  {
    swift_bridgeObjectRelease();
    if (v72)
    {
      swift_bridgeObjectRelease();
      if (v75) {
        goto LABEL_11;
      }
LABEL_6:
      if (!v73) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
  if (!v75) {
    goto LABEL_6;
  }
LABEL_11:
  swift_bridgeObjectRelease();
  if (v73) {
LABEL_12:
  }
    outlined destroy of PQAVerificationModelProtocol?((uint64_t)v23 + *(int *)(v63 + 112), &demangling cache variable for type metadata for Date?);
LABEL_13:
  OUTLINED_FUNCTION_120_6();
  OUTLINED_FUNCTION_120_0();
}

void protocol witness for Decodable.init(from:) in conformance TicketedTransportation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  TicketedTransportation.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void protocol witness for Encodable.encode(to:) in conformance TicketedTransportation()
{
}

uint64_t TicketedShow.customerNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TicketedShow.startLocationName.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t TicketedShow.startLocationAddress.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t TicketedShow.seatNumbers.getter()
{
  return swift_bridgeObjectRetain();
}

void TicketedShow.durationInSeconds.getter()
{
}

uint64_t TicketedShow.ticketType.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t TicketedShow.ticketUrl.getter()
{
  return TicketedTransportation.endDate.getter();
}

uint64_t TicketedShow.totalCost.getter()
{
  return TicketedShow.totalCost.getter((void (*)(void))type metadata accessor for TicketedShow);
}

uint64_t TicketedShow.startDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TicketedShow(0);
  return outlined init with copy of PQAVerificationModelProtocol?(v1 + *(int *)(v3 + 124), a1, &demangling cache variable for type metadata for Date?);
}

uint64_t TicketedShow.endDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TicketedShow(0);
  return outlined init with copy of PQAVerificationModelProtocol?(v1 + *(int *)(v3 + 128), a1, &demangling cache variable for type metadata for Date?);
}

uint64_t TicketedShow.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000258684380 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000002586843A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000002586843C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000002586843E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    BOOL v6 = a1 == 0x707954746E657665 && a2 == 0xE900000000000065;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 5;
    }
    else
    {
      BOOL v7 = a1 == 0x627553746E657665 && a2 == 0xEC00000065707954;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 6;
      }
      else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000258684400 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        return 7;
      }
      else
      {
        BOOL v8 = a1 == 0x417349746E657665 && a2 == 0xED00007961446C6CLL;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 8;
        }
        else
        {
          BOOL v9 = a1 == 0x6E557349656D6974 && a2 == 0xED00006E776F6E6BLL;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 9;
          }
          else if (a1 == 0xD000000000000016 && a2 == 0x8000000258684420 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 10;
          }
          else
          {
            BOOL v10 = a1 == 0x73726F68747561 && a2 == 0xE700000000000000;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 11;
            }
            else
            {
              BOOL v11 = a1 == 0x7373654D6C69616DLL && a2 == 0xED00006449656761;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 12;
              }
              else if (a1 == 0xD000000000000011 && a2 == 0x8000000258684440 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 13;
              }
              else if (a1 == 0xD000000000000011 && a2 == 0x8000000258684460 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 14;
              }
              else
              {
                BOOL v12 = a1 == 0x65786F626C69616DLL && a2 == 0xE900000000000073;
                if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 15;
                }
                else if (a1 == 0xD000000000000012 && a2 == 0x8000000258684480 {
                       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                }
                {
                  swift_bridgeObjectRelease();
                  return 16;
                }
                else
                {
                  BOOL v13 = a1 == 0x7461767265736572 && a2 == 0xED000064496E6F69;
                  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 17;
                  }
                  else
                  {
                    BOOL v14 = a1 == 0x72656469766F7270 && a2 == 0xE800000000000000;
                    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 18;
                    }
                    else
                    {
                      BOOL v15 = a1 == 0x72656D6F74737563 && a2 == 0xED000073656D614ELL;
                      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        return 19;
                      }
                      else if (a1 == 0xD000000000000011 && a2 == 0x80000002586844C0 {
                             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      }
                      {
                        swift_bridgeObjectRelease();
                        return 20;
                      }
                      else if (a1 == 0xD000000000000014 && a2 == 0x80000002586844E0 {
                             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      }
                      {
                        swift_bridgeObjectRelease();
                        return 21;
                      }
                      else
                      {
                        BOOL v16 = a1 == 0x626D754E74616573 && a2 == 0xEB00000000737265;
                        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          return 22;
                        }
                        else if (a1 == 0xD000000000000011 && a2 == 0x8000000258684560 {
                               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        }
                        {
                          swift_bridgeObjectRelease();
                          return 23;
                        }
                        else
                        {
                          BOOL v17 = a1 == 0x795474656B636974 && a2 == 0xEA00000000006570;
                          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                          {
                            swift_bridgeObjectRelease();
                            return 24;
                          }
                          else
                          {
                            BOOL v18 = a1 == 0x725574656B636974 && a2 == 0xE90000000000006CLL;
                            if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                            {
                              swift_bridgeObjectRelease();
                              return 25;
                            }
                            else
                            {
                              BOOL v19 = a1 == 0x736F436C61746F74 && a2 == 0xE900000000000074;
                              if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                              {
                                swift_bridgeObjectRelease();
                                return 26;
                              }
                              else
                              {
                                BOOL v20 = a1 == 0x7461447472617473 && a2 == 0xE900000000000065;
                                if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                {
                                  swift_bridgeObjectRelease();
                                  return 27;
                                }
                                else if (a1 == 0x65746144646E65 && a2 == 0xE700000000000000)
                                {
                                  swift_bridgeObjectRelease();
                                  return 28;
                                }
                                else
                                {
                                  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  swift_bridgeObjectRelease();
                                  if (v22) {
                                    return 28;
                                  }
                                  else {
                                    return 29;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t TicketedShow.CodingKeys.init(intValue:)()
{
  return 29;
}

uint64_t TicketedShow.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 25705;
  switch(a1)
  {
    case 1:
      uint64_t result = 0xD000000000000016;
      break;
    case 2:
      uint64_t result = 0xD000000000000014;
      break;
    case 3:
      uint64_t result = 0xD00000000000001CLL;
      break;
    case 4:
      uint64_t result = 0xD000000000000017;
      break;
    case 5:
      uint64_t result = 0x707954746E657665;
      break;
    case 6:
      uint64_t result = 0x627553746E657665;
      break;
    case 7:
      uint64_t result = 0xD00000000000001BLL;
      break;
    case 8:
      uint64_t result = 0x417349746E657665;
      break;
    case 9:
      uint64_t result = 0x6E557349656D6974;
      break;
    case 10:
      uint64_t result = 0xD000000000000016;
      break;
    case 11:
      uint64_t result = 0x73726F68747561;
      break;
    case 12:
      uint64_t result = 0x7373654D6C69616DLL;
      break;
    case 13:
    case 14:
    case 20:
    case 23:
      uint64_t result = 0xD000000000000011;
      break;
    case 15:
      uint64_t result = 0x65786F626C69616DLL;
      break;
    case 16:
      uint64_t result = 0xD000000000000012;
      break;
    case 17:
      uint64_t result = 0x7461767265736572;
      break;
    case 18:
      uint64_t v3 = 0x6469766F7270;
      goto LABEL_19;
    case 19:
      uint64_t v3 = 0x6D6F74737563;
LABEL_19:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x7265000000000000;
      break;
    case 21:
      uint64_t result = 0xD000000000000014;
      break;
    case 22:
      uint64_t result = 0x626D754E74616573;
      break;
    case 24:
      uint64_t result = 0x795474656B636974;
      break;
    case 25:
      uint64_t result = 0x725574656B636974;
      break;
    case 26:
      uint64_t result = 0x736F436C61746F74;
      break;
    case 27:
      uint64_t result = 0x7461447472617473;
      break;
    case 28:
      uint64_t result = 0x65746144646E65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TicketedShow.CodingKeys()
{
  return TicketedShow.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TicketedShow.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = TicketedShow.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance TicketedShow.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = TicketedShow.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TicketedShow.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TicketedShow.CodingKeys and conformance TicketedShow.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TicketedShow.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TicketedShow.CodingKeys and conformance TicketedShow.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void TicketedShow.encode(to:)()
{
  OUTLINED_FUNCTION_105_0();
  OUTLINED_FUNCTION_113_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TicketedShow.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_61_13();
  lazy protocol witness table accessor for type TicketedShow.CodingKeys and conformance TicketedShow.CodingKeys();
  OUTLINED_FUNCTION_69_13();
  OUTLINED_FUNCTION_51_22();
  if (!v0)
  {
    OUTLINED_FUNCTION_1_31(1);
    OUTLINED_FUNCTION_1_31(2);
    OUTLINED_FUNCTION_1_31(3);
    OUTLINED_FUNCTION_1_31(4);
    OUTLINED_FUNCTION_1_31(5);
    OUTLINED_FUNCTION_1_31(6);
    OUTLINED_FUNCTION_1_31(7);
    OUTLINED_FUNCTION_40_18(8);
    OUTLINED_FUNCTION_60_12();
    OUTLINED_FUNCTION_40_18(10);
    OUTLINED_FUNCTION_71_14();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_8_19();
    OUTLINED_FUNCTION_1_31(12);
    OUTLINED_FUNCTION_1_31(13);
    OUTLINED_FUNCTION_1_31(14);
    OUTLINED_FUNCTION_8_19();
    OUTLINED_FUNCTION_8_19();
    OUTLINED_FUNCTION_1_31(17);
    OUTLINED_FUNCTION_1_31(18);
    OUTLINED_FUNCTION_8_19();
    OUTLINED_FUNCTION_1_31(20);
    OUTLINED_FUNCTION_1_31(21);
    OUTLINED_FUNCTION_8_19();
    OUTLINED_FUNCTION_64_12(23);
    OUTLINED_FUNCTION_1_31(24);
    type metadata accessor for TicketedShow(0);
    type metadata accessor for URL();
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    OUTLINED_FUNCTION_36_24();
    OUTLINED_FUNCTION_260();
    OUTLINED_FUNCTION_1_31(v2);
    OUTLINED_FUNCTION_176_4(27);
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    OUTLINED_FUNCTION_36_24();
    OUTLINED_FUNCTION_36_24();
  }
  OUTLINED_FUNCTION_12_34();
  v3();
  OUTLINED_FUNCTION_189_2();
  OUTLINED_FUNCTION_120_0();
}

void TicketedShow.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_105_0();
  uint64_t v15 = v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v17 = OUTLINED_FUNCTION_81(v16);
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_27_15();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_107_11();
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v20 = OUTLINED_FUNCTION_81(v19);
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_13_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TicketedShow.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v21);
  uint64_t v22 = OUTLINED_FUNCTION_14_8();
  uint64_t v55 = type metadata accessor for TicketedShow(v22);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_100_12(v24, v54);
  OUTLINED_FUNCTION_302();
  lazy protocol witness table accessor for type TicketedShow.CodingKeys and conformance TicketedShow.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v10)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v15);
  }
  else
  {
    OUTLINED_FUNCTION_252();
    *(void *)uint64_t v56 = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v56 + 8) = v25;
    *(void *)(v56 + 16) = OUTLINED_FUNCTION_19_27(1);
    *(void *)(v56 + 24) = v26;
    *(void *)(v56 + 32) = OUTLINED_FUNCTION_19_27(2);
    *(void *)(v56 + 40) = v27;
    *(void *)(v56 + 48) = OUTLINED_FUNCTION_19_27(3);
    *(void *)(v56 + 56) = v28;
    *(void *)(v56 + 64) = OUTLINED_FUNCTION_19_27(4);
    *(void *)(v56 + 72) = v29;
    *(void *)(v56 + 80) = OUTLINED_FUNCTION_19_27(5);
    *(void *)(v56 + 88) = v30;
    *(void *)(v56 + 96) = OUTLINED_FUNCTION_19_27(6);
    *(void *)(v56 + 104) = v31;
    uint64_t v32 = OUTLINED_FUNCTION_19_27(7);
    char v34 = OUTLINED_FUNCTION_96_11(v32, v33);
    char v35 = OUTLINED_FUNCTION_95_11(v34);
    OUTLINED_FUNCTION_53_16(v35);
    uint64_t v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_216_1(v36);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    OUTLINED_FUNCTION_102_9();
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_166_4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(void *)(v56 + 136) = a10;
    *(void *)(v56 + 144) = OUTLINED_FUNCTION_13_35(12);
    *(void *)(v56 + 152) = v37;
    *(void *)(v56 + 160) = OUTLINED_FUNCTION_13_35(13);
    *(void *)(v56 + 168) = v38;
    uint64_t v39 = OUTLINED_FUNCTION_13_35(14);
    OUTLINED_FUNCTION_44_22(v39, v40);
    OUTLINED_FUNCTION_62_15();
    OUTLINED_FUNCTION_41_24();
    OUTLINED_FUNCTION_62_15();
    *(void *)(v56 + 200) = a10;
    *(void *)(v56 + 208) = OUTLINED_FUNCTION_13_35(17);
    *(void *)(v56 + 216) = v41;
    *(void *)(v56 + 224) = OUTLINED_FUNCTION_13_35(18);
    *(void *)(v56 + 232) = v42;
    OUTLINED_FUNCTION_46_20();
    *(void *)(v56 + 240) = a10;
    *(void *)(v56 + 248) = OUTLINED_FUNCTION_13_35(20);
    *(void *)(v56 + 256) = v43;
    *(void *)(v56 + 264) = OUTLINED_FUNCTION_13_35(21);
    *(void *)(v56 + 272) = v44;
    OUTLINED_FUNCTION_46_20();
    OUTLINED_FUNCTION_187_2();
    *(void *)(v56 + 288) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *(unsigned char *)(v56 + 296) = v45 & 1;
    *(void *)(v56 + 304) = OUTLINED_FUNCTION_13_35(24);
    *(void *)(v56 + 312) = v46;
    type metadata accessor for URL();
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    OUTLINED_FUNCTION_164_3();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_276();
    OUTLINED_FUNCTION_104_13();
    outlined init with take of PQAVerificationModelProtocol?(v12, v47, &demangling cache variable for type metadata for URL?);
    uint64_t v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_65_13(v48, v49, *(int *)(v55 + 120));
    type metadata accessor for Date();
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    OUTLINED_FUNCTION_191_3();
    OUTLINED_FUNCTION_104_13();
    outlined init with take of PQAVerificationModelProtocol?(v13, v50, &demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_191_3();
    uint64_t v51 = OUTLINED_FUNCTION_3_43();
    v52(v51);
    OUTLINED_FUNCTION_213_2();
    outlined init with take of PQAVerificationModelProtocol?(v11, v53, &demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_301();
    __swift_destroy_boxed_opaque_existential_1Tm(v15);
    _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
  }
  OUTLINED_FUNCTION_120_0();
}

void protocol witness for Decodable.init(from:) in conformance TicketedShow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  TicketedShow.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void protocol witness for Encodable.encode(to:) in conformance TicketedShow()
{
}

uint64_t Appointment.id.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t Appointment.eventMessageIdentifier.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t Appointment.eventGroupIdentifier.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t Appointment.eventFallbackGroupIdentifier.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t Appointment.eventMegadomeIdentifier.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t Appointment.eventType.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t Appointment.eventSubType.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t Appointment.eventSourceBundleIdentifier.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t Appointment.eventIsAllDay.getter()
{
  return *(unsigned __int8 *)(v0 + 128);
}

uint64_t Appointment.timeIsUnknown.getter()
{
  return *(unsigned __int8 *)(v0 + 129);
}

uint64_t Appointment.eventSourceIsForwarded.getter()
{
  return *(unsigned __int8 *)(v0 + 130);
}

uint64_t Appointment.authors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Appointment.mailMessageId.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t Appointment.mailMessageHeader.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t Appointment.accountIdentifier.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t Appointment.mailboxes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Appointment.detectedEventTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Appointment.eventName.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t Appointment.startLocationName.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t Appointment.startLocationAddress.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t Appointment.startLocationTelephone.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

void Appointment.durationInSeconds.getter()
{
}

uint64_t Appointment.totalCost.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t Appointment.startDate.getter()
{
  uint64_t v2 = OUTLINED_FUNCTION_27_7();
  uint64_t v3 = type metadata accessor for Appointment(v2);
  return outlined init with copy of PQAVerificationModelProtocol?(v1 + *(int *)(v3 + 108), v0, &demangling cache variable for type metadata for Date?);
}

uint64_t Appointment.endDate.getter()
{
  return TicketedTransportation.startDate.getter();
}

uint64_t Appointment.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000258684380 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000002586843A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000002586843C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000002586843E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    BOOL v6 = a1 == 0x707954746E657665 && a2 == 0xE900000000000065;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 5;
    }
    else
    {
      BOOL v7 = a1 == 0x627553746E657665 && a2 == 0xEC00000065707954;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 6;
      }
      else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000258684400 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        return 7;
      }
      else
      {
        BOOL v8 = a1 == 0x417349746E657665 && a2 == 0xED00007961446C6CLL;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 8;
        }
        else
        {
          BOOL v9 = a1 == 0x6E557349656D6974 && a2 == 0xED00006E776F6E6BLL;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 9;
          }
          else if (a1 == 0xD000000000000016 && a2 == 0x8000000258684420 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 10;
          }
          else
          {
            BOOL v10 = a1 == 0x73726F68747561 && a2 == 0xE700000000000000;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 11;
            }
            else
            {
              BOOL v11 = a1 == 0x7373654D6C69616DLL && a2 == 0xED00006449656761;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 12;
              }
              else if (a1 == 0xD000000000000011 && a2 == 0x8000000258684440 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 13;
              }
              else if (a1 == 0xD000000000000011 && a2 == 0x8000000258684460 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 14;
              }
              else
              {
                BOOL v12 = a1 == 0x65786F626C69616DLL && a2 == 0xE900000000000073;
                if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 15;
                }
                else if (a1 == 0xD000000000000012 && a2 == 0x8000000258684480 {
                       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                }
                {
                  swift_bridgeObjectRelease();
                  return 16;
                }
                else
                {
                  BOOL v13 = a1 == 0x6D614E746E657665 && a2 == 0xE900000000000065;
                  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 17;
                  }
                  else if (a1 == 0xD000000000000011 && a2 == 0x80000002586844C0 {
                         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  }
                  {
                    swift_bridgeObjectRelease();
                    return 18;
                  }
                  else if (a1 == 0xD000000000000014 && a2 == 0x80000002586844E0 {
                         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  }
                  {
                    swift_bridgeObjectRelease();
                    return 19;
                  }
                  else if (a1 == 0xD000000000000016 && a2 == 0x8000000258684500 {
                         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  }
                  {
                    swift_bridgeObjectRelease();
                    return 20;
                  }
                  else if (a1 == 0xD000000000000011 && a2 == 0x8000000258684560 {
                         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  }
                  {
                    swift_bridgeObjectRelease();
                    return 21;
                  }
                  else
                  {
                    BOOL v14 = a1 == 0x736F436C61746F74 && a2 == 0xE900000000000074;
                    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 22;
                    }
                    else
                    {
                      BOOL v15 = a1 == 0x7461447472617473 && a2 == 0xE900000000000065;
                      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        return 23;
                      }
                      else if (a1 == 0x65746144646E65 && a2 == 0xE700000000000000)
                      {
                        swift_bridgeObjectRelease();
                        return 24;
                      }
                      else
                      {
                        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRelease();
                        if (v17) {
                          return 24;
                        }
                        else {
                          return 25;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t Appointment.CodingKeys.init(intValue:)()
{
  return 25;
}

unint64_t Appointment.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000016;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000017;
      break;
    case 5:
      unint64_t result = 0x707954746E657665;
      break;
    case 6:
      unint64_t result = 0x627553746E657665;
      break;
    case 7:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 8:
      unint64_t result = 0x417349746E657665;
      break;
    case 9:
      unint64_t result = 0x6E557349656D6974;
      break;
    case 10:
      unint64_t result = 0xD000000000000016;
      break;
    case 11:
      unint64_t result = 0x73726F68747561;
      break;
    case 12:
      unint64_t result = 0x7373654D6C69616DLL;
      break;
    case 13:
    case 14:
    case 18:
    case 21:
      unint64_t result = 0xD000000000000011;
      break;
    case 15:
      unint64_t result = 0x65786F626C69616DLL;
      break;
    case 16:
      unint64_t result = 0xD000000000000012;
      break;
    case 17:
      unint64_t result = 0x6D614E746E657665;
      break;
    case 19:
      unint64_t result = 0xD000000000000014;
      break;
    case 20:
      unint64_t result = 0xD000000000000016;
      break;
    case 22:
      unint64_t result = 0x736F436C61746F74;
      break;
    case 23:
      unint64_t result = 0x7461447472617473;
      break;
    case 24:
      unint64_t result = 0x65746144646E65;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance Appointment.CodingKeys()
{
  return Appointment.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Appointment.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = Appointment.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Appointment.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = Appointment.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Appointment.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Appointment.CodingKeys and conformance Appointment.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Appointment.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Appointment.CodingKeys and conformance Appointment.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void Appointment.encode(to:)()
{
  OUTLINED_FUNCTION_105_0();
  OUTLINED_FUNCTION_113_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Appointment.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_61_13();
  lazy protocol witness table accessor for type Appointment.CodingKeys and conformance Appointment.CodingKeys();
  OUTLINED_FUNCTION_69_13();
  OUTLINED_FUNCTION_51_22();
  if (!v0)
  {
    OUTLINED_FUNCTION_1_31(1);
    OUTLINED_FUNCTION_1_31(2);
    OUTLINED_FUNCTION_1_31(3);
    OUTLINED_FUNCTION_1_31(4);
    OUTLINED_FUNCTION_1_31(5);
    OUTLINED_FUNCTION_1_31(6);
    OUTLINED_FUNCTION_1_31(7);
    OUTLINED_FUNCTION_40_18(8);
    OUTLINED_FUNCTION_60_12();
    OUTLINED_FUNCTION_40_18(10);
    OUTLINED_FUNCTION_71_14();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_8_19();
    OUTLINED_FUNCTION_1_31(12);
    OUTLINED_FUNCTION_1_31(13);
    OUTLINED_FUNCTION_1_31(14);
    OUTLINED_FUNCTION_8_19();
    OUTLINED_FUNCTION_8_19();
    OUTLINED_FUNCTION_1_31(17);
    OUTLINED_FUNCTION_1_31(18);
    OUTLINED_FUNCTION_1_31(19);
    OUTLINED_FUNCTION_1_31(20);
    OUTLINED_FUNCTION_64_12(21);
    OUTLINED_FUNCTION_1_31(22);
    type metadata accessor for Appointment(0);
    OUTLINED_FUNCTION_176_4(23);
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    OUTLINED_FUNCTION_36_24();
    OUTLINED_FUNCTION_36_24();
  }
  OUTLINED_FUNCTION_12_34();
  v2();
  OUTLINED_FUNCTION_189_2();
  OUTLINED_FUNCTION_120_0();
}

void Appointment.init(from:)()
{
  OUTLINED_FUNCTION_105_0();
  OUTLINED_FUNCTION_232_0();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_27_15();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_107_11();
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Appointment.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = OUTLINED_FUNCTION_14_8();
  uint64_t v55 = type metadata accessor for Appointment(v9);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v10);
  int v67 = (uint64_t *)((char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v63 = v1;
  OUTLINED_FUNCTION_171_4();
  lazy protocol witness table accessor for type Appointment.CodingKeys and conformance Appointment.CodingKeys();
  *(void *)&v64[4] = v0;
  OUTLINED_FUNCTION_134_3();
  if (v2)
  {
    uint64_t v66 = v2;
    LODWORD(v65) = 0;
    BOOL v13 = v67;
    __swift_destroy_boxed_opaque_existential_1Tm(v63);
    int v56 = 0;
    int v57 = 0;
    int v58 = 0;
    int v59 = 0;
    int v60 = 0;
    int v61 = 0;
    int v62 = 0;
    *(void *)int v64 = 0;
    LODWORD(v63) = 0;
    if v65 && (swift_bridgeObjectRelease(), (v63))
    {
      swift_bridgeObjectRelease();
      if (v64[0])
      {
LABEL_7:
        swift_bridgeObjectRelease();
        if ((v64[4] & 1) == 0) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else if (*(_DWORD *)v64)
    {
      goto LABEL_7;
    }
    if (*(_DWORD *)&v64[4]) {
LABEL_12:
    }
      outlined destroy of PQAVerificationModelProtocol?((uint64_t)v13 + *(int *)(v55 + 108), &demangling cache variable for type metadata for Date?);
  }
  else
  {
    OUTLINED_FUNCTION_177_4();
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    BOOL v14 = v67;
    *int v67 = v12;
    v14[1] = v15;
    v14[2] = OUTLINED_FUNCTION_19_27(1);
    v14[3] = v16;
    v14[4] = OUTLINED_FUNCTION_19_27(2);
    v14[5] = v17;
    v14[6] = OUTLINED_FUNCTION_19_27(3);
    v14[7] = v18;
    v14[8] = OUTLINED_FUNCTION_19_27(4);
    v14[9] = v19;
    v14[10] = OUTLINED_FUNCTION_19_27(5);
    v14[11] = v20;
    v14[12] = OUTLINED_FUNCTION_19_27(6);
    v14[13] = v21;
    uint64_t v22 = OUTLINED_FUNCTION_19_27(7);
    char v24 = OUTLINED_FUNCTION_96_11(v22, v23);
    char v25 = OUTLINED_FUNCTION_95_11(v24);
    uint64_t v66 = 0;
    OUTLINED_FUNCTION_53_16(v25);
    uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v66 = 0;
    OUTLINED_FUNCTION_216_1(v26);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    OUTLINED_FUNCTION_102_9();
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_166_4();
    OUTLINED_FUNCTION_110_10();
    uint64_t v66 = 0;
    OUTLINED_FUNCTION_54_17();
    uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v66 = 0;
    OUTLINED_FUNCTION_67_15(v27, v28);
    uint64_t v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v66 = 0;
    OUTLINED_FUNCTION_66_17(v29, v30);
    uint64_t v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v66 = 0;
    OUTLINED_FUNCTION_44_22(v31, v32);
    OUTLINED_FUNCTION_188_2();
    uint64_t v66 = 0;
    OUTLINED_FUNCTION_41_24();
    OUTLINED_FUNCTION_188_2();
    uint64_t v66 = 0;
    OUTLINED_FUNCTION_76_12();
    uint64_t v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v66 = 0;
    char v34 = v67;
    v67[26] = v33;
    v34[27] = v35;
    uint64_t v36 = OUTLINED_FUNCTION_81_10(18);
    uint64_t v66 = 0;
    uint64_t v37 = v67;
    v67[28] = v36;
    v37[29] = v38;
    uint64_t v39 = OUTLINED_FUNCTION_81_10(19);
    uint64_t v66 = 0;
    uint64_t v40 = v67;
    v67[30] = v39;
    v40[31] = v41;
    uint64_t v42 = OUTLINED_FUNCTION_81_10(20);
    uint64_t v66 = 0;
    uint64_t v43 = v67;
    v67[32] = v42;
    v43[33] = v44;
    uint64_t v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v66 = 0;
    uint64_t v46 = v67;
    v67[34] = v45;
    *((unsigned char *)v46 + 280) = v47 & 1;
    uint64_t v48 = OUTLINED_FUNCTION_81_10(22);
    uint64_t v66 = 0;
    uint64_t v49 = v67;
    v67[36] = v48;
    v49[37] = v50;
    type metadata accessor for Date();
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    OUTLINED_FUNCTION_126_6();
    OUTLINED_FUNCTION_110_10();
    uint64_t v66 = 0;
    OUTLINED_FUNCTION_104_13();
    outlined init with take of PQAVerificationModelProtocol?(v4, v51, &demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_154_4(24);
    OUTLINED_FUNCTION_110_10();
    uint64_t v66 = 0;
    OUTLINED_FUNCTION_65();
    v53(v52);
    OUTLINED_FUNCTION_213_2();
    outlined init with take of PQAVerificationModelProtocol?(v3, v54, &demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_301();
    __swift_destroy_boxed_opaque_existential_1Tm(v63);
    _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
  }
LABEL_13:
  OUTLINED_FUNCTION_120_6();
  OUTLINED_FUNCTION_120_0();
}

void protocol witness for Decodable.init(from:) in conformance Appointment()
{
}

void protocol witness for Encodable.encode(to:) in conformance Appointment()
{
}

uint64_t Party.startDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Party(0);
  return outlined init with copy of PQAVerificationModelProtocol?(v1 + *(int *)(v3 + 96), a1, &demangling cache variable for type metadata for Date?);
}

uint64_t Party.endDate.getter()
{
  return Party.endDate.getter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_127_6();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_208_2(*(int *)(v2 + 100));
}

uint64_t Party.eventUrl.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Party(0);
  return outlined init with copy of PQAVerificationModelProtocol?(v1 + *(int *)(v3 + 104), a1, &demangling cache variable for type metadata for URL?);
}

uint64_t Party.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000258684380 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000002586843A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000002586843C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000002586843E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    BOOL v6 = a1 == 0x707954746E657665 && a2 == 0xE900000000000065;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 5;
    }
    else
    {
      BOOL v7 = a1 == 0x627553746E657665 && a2 == 0xEC00000065707954;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 6;
      }
      else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000258684400 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        return 7;
      }
      else
      {
        BOOL v8 = a1 == 0x417349746E657665 && a2 == 0xED00007961446C6CLL;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 8;
        }
        else
        {
          BOOL v9 = a1 == 0x6E557349656D6974 && a2 == 0xED00006E776F6E6BLL;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 9;
          }
          else if (a1 == 0xD000000000000016 && a2 == 0x8000000258684420 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 10;
          }
          else
          {
            BOOL v10 = a1 == 0x73726F68747561 && a2 == 0xE700000000000000;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 11;
            }
            else
            {
              BOOL v11 = a1 == 0x7373654D6C69616DLL && a2 == 0xED00006449656761;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 12;
              }
              else if (a1 == 0xD000000000000011 && a2 == 0x8000000258684440 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 13;
              }
              else if (a1 == 0xD000000000000011 && a2 == 0x8000000258684460 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 14;
              }
              else
              {
                BOOL v12 = a1 == 0x65786F626C69616DLL && a2 == 0xE900000000000073;
                if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 15;
                }
                else if (a1 == 0xD000000000000012 && a2 == 0x8000000258684480 {
                       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                }
                {
                  swift_bridgeObjectRelease();
                  return 16;
                }
                else
                {
                  BOOL v13 = a1 == 0x6D614E746E657665 && a2 == 0xE900000000000065;
                  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 17;
                  }
                  else if (a1 == 0xD000000000000011 && a2 == 0x80000002586844C0 {
                         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  }
                  {
                    swift_bridgeObjectRelease();
                    return 18;
                  }
                  else if (a1 == 0xD000000000000014 && a2 == 0x80000002586844E0 {
                         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  }
                  {
                    swift_bridgeObjectRelease();
                    return 19;
                  }
                  else
                  {
                    BOOL v14 = a1 == 0x7461447472617473 && a2 == 0xE900000000000065;
                    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 20;
                    }
                    else
                    {
                      BOOL v15 = a1 == 0x65746144646E65 && a2 == 0xE700000000000000;
                      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        return 21;
                      }
                      else if (a1 == 0x6C7255746E657665 && a2 == 0xE800000000000000)
                      {
                        swift_bridgeObjectRelease();
                        return 22;
                      }
                      else
                      {
                        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRelease();
                        if (v17) {
                          return 22;
                        }
                        else {
                          return 23;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t Party.CodingKeys.init(intValue:)()
{
  return 23;
}

unint64_t Party.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000016;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000017;
      break;
    case 5:
      unint64_t result = 0x707954746E657665;
      break;
    case 6:
      unint64_t result = 0x627553746E657665;
      break;
    case 7:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 8:
      unint64_t result = 0x417349746E657665;
      break;
    case 9:
      unint64_t result = 0x6E557349656D6974;
      break;
    case 10:
      unint64_t result = 0xD000000000000016;
      break;
    case 11:
      unint64_t result = 0x73726F68747561;
      break;
    case 12:
      unint64_t result = 0x7373654D6C69616DLL;
      break;
    case 13:
    case 14:
    case 18:
      unint64_t result = 0xD000000000000011;
      break;
    case 15:
      unint64_t result = 0x65786F626C69616DLL;
      break;
    case 16:
      unint64_t result = 0xD000000000000012;
      break;
    case 17:
      unint64_t result = 0x6D614E746E657665;
      break;
    case 19:
      unint64_t result = 0xD000000000000014;
      break;
    case 20:
      unint64_t result = 0x7461447472617473;
      break;
    case 21:
      unint64_t result = 0x65746144646E65;
      break;
    case 22:
      unint64_t result = 0x6C7255746E657665;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance Party.CodingKeys()
{
  return Party.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Party.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = Party.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Party.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = Party.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Party.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Party.CodingKeys and conformance Party.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Party.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Party.CodingKeys and conformance Party.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void Party.encode(to:)()
{
  OUTLINED_FUNCTION_105_0();
  OUTLINED_FUNCTION_104_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Party.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_61_13();
  lazy protocol witness table accessor for type Party.CodingKeys and conformance Party.CodingKeys();
  OUTLINED_FUNCTION_69_13();
  OUTLINED_FUNCTION_103_13();
  if (!v0)
  {
    OUTLINED_FUNCTION_4_33(1);
    OUTLINED_FUNCTION_4_33(2);
    OUTLINED_FUNCTION_4_33(3);
    OUTLINED_FUNCTION_4_33(4);
    OUTLINED_FUNCTION_4_33(5);
    OUTLINED_FUNCTION_4_33(6);
    OUTLINED_FUNCTION_4_33(7);
    OUTLINED_FUNCTION_90_13(8);
    OUTLINED_FUNCTION_124_9(9);
    OUTLINED_FUNCTION_90_13(10);
    OUTLINED_FUNCTION_71_14();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_8_18();
    OUTLINED_FUNCTION_4_33(12);
    OUTLINED_FUNCTION_4_33(13);
    OUTLINED_FUNCTION_4_33(14);
    OUTLINED_FUNCTION_8_18();
    OUTLINED_FUNCTION_8_18();
    OUTLINED_FUNCTION_4_33(17);
    OUTLINED_FUNCTION_4_33(18);
    OUTLINED_FUNCTION_4_33(19);
    type metadata accessor for Party(0);
    OUTLINED_FUNCTION_176_4(20);
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    OUTLINED_FUNCTION_26_25();
    OUTLINED_FUNCTION_26_25();
    type metadata accessor for URL();
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    OUTLINED_FUNCTION_26_25();
  }
  OUTLINED_FUNCTION_111_0();
  v2();
  OUTLINED_FUNCTION_120_0();
}

void Party.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_105_0();
  uint64_t v15 = v14;
  uint64_t v53 = v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v18 = OUTLINED_FUNCTION_81(v17);
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_39();
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v20 = OUTLINED_FUNCTION_81(v19);
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_11_0();
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_107_11();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Party.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v22);
  uint64_t v23 = OUTLINED_FUNCTION_14_8();
  type metadata accessor for Party(v23);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_100_12(v25, v52);
  OUTLINED_FUNCTION_302();
  lazy protocol witness table accessor for type Party.CodingKeys and conformance Party.CodingKeys();
  OUTLINED_FUNCTION_237();
  if (v10)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v15);
  }
  else
  {
    OUTLINED_FUNCTION_177_4();
    *(void *)uint64_t v54 = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v54 + 8) = v26;
    *(void *)(v54 + 16) = OUTLINED_FUNCTION_26_26(1);
    *(void *)(v54 + 24) = v27;
    *(void *)(v54 + 32) = OUTLINED_FUNCTION_26_26(2);
    *(void *)(v54 + 40) = v28;
    *(void *)(v54 + 48) = OUTLINED_FUNCTION_26_26(3);
    *(void *)(v54 + 56) = v29;
    *(void *)(v54 + 64) = OUTLINED_FUNCTION_26_26(4);
    *(void *)(v54 + 72) = v30;
    *(void *)(v54 + 80) = OUTLINED_FUNCTION_26_26(5);
    *(void *)(v54 + 88) = v31;
    *(void *)(v54 + 96) = OUTLINED_FUNCTION_26_26(6);
    *(void *)(v54 + 104) = v32;
    uint64_t v33 = OUTLINED_FUNCTION_26_26(7);
    *(unsigned char *)(v54 + 128) = OUTLINED_FUNCTION_231_0(v33, v34);
    char v35 = OUTLINED_FUNCTION_204_2(9);
    OUTLINED_FUNCTION_53_16(v35);
    uint64_t v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_216_1(v36);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    OUTLINED_FUNCTION_102_9();
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_129_6();
    OUTLINED_FUNCTION_54_17();
    uint64_t v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_67_15(v37, v38);
    uint64_t v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_66_17(v39, v40);
    uint64_t v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_44_22(v41, v42);
    OUTLINED_FUNCTION_129_6();
    OUTLINED_FUNCTION_41_24();
    OUTLINED_FUNCTION_129_6();
    *(void *)(v54 + 200) = a10;
    *(void *)(v54 + 208) = OUTLINED_FUNCTION_73_13(17);
    *(void *)(v54 + 216) = v43;
    *(void *)(v54 + 224) = OUTLINED_FUNCTION_73_13(18);
    *(void *)(v54 + 232) = v44;
    OUTLINED_FUNCTION_73_13(19);
    OUTLINED_FUNCTION_111_10();
    *(void *)(v54 + 240) = v45;
    *(void *)(v54 + 248) = v46;
    uint64_t v47 = type metadata accessor for Date();
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    OUTLINED_FUNCTION_126_6();
    OUTLINED_FUNCTION_129_6();
    OUTLINED_FUNCTION_104_13();
    outlined init with take of PQAVerificationModelProtocol?(v13, v48, &demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_155_3(21);
    OUTLINED_FUNCTION_129_6();
    OUTLINED_FUNCTION_104_13();
    outlined init with take of PQAVerificationModelProtocol?(v11, v49, &demangling cache variable for type metadata for Date?);
    type metadata accessor for URL();
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    OUTLINED_FUNCTION_164_3();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_65();
    v50();
    OUTLINED_FUNCTION_213_2();
    outlined init with take of PQAVerificationModelProtocol?(v12, v51, &demangling cache variable for type metadata for URL?);
    outlined init with copy of FlightReservation(v47, v53);
    __swift_destroy_boxed_opaque_existential_1Tm(v15);
    _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
  }
  OUTLINED_FUNCTION_120_6();
  OUTLINED_FUNCTION_120_0();
}

void protocol witness for Decodable.init(from:) in conformance Party(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Party.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void protocol witness for Encodable.encode(to:) in conformance Party()
{
}

uint64_t Trip.startDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Trip(0);
  return outlined init with copy of PQAVerificationModelProtocol?(v1 + *(int *)(v3 + 88), a1, &demangling cache variable for type metadata for Date?);
}

uint64_t Trip.endDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Trip(0);
  return outlined init with copy of PQAVerificationModelProtocol?(v1 + *(int *)(v3 + 92), a1, &demangling cache variable for type metadata for Date?);
}

uint64_t Trip.durationInSeconds.getter()
{
  return Trip.durationInSeconds.getter(type metadata accessor for Trip);
}

uint64_t Trip.eventUrl.getter()
{
  return Party.endDate.getter();
}

uint64_t Trip.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000258684380 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000002586843A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000002586843C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000002586843E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    BOOL v6 = a1 == 0x707954746E657665 && a2 == 0xE900000000000065;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 5;
    }
    else
    {
      BOOL v7 = a1 == 0x627553746E657665 && a2 == 0xEC00000065707954;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 6;
      }
      else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000258684400 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        return 7;
      }
      else
      {
        BOOL v8 = a1 == 0x417349746E657665 && a2 == 0xED00007961446C6CLL;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 8;
        }
        else
        {
          BOOL v9 = a1 == 0x6E557349656D6974 && a2 == 0xED00006E776F6E6BLL;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 9;
          }
          else if (a1 == 0xD000000000000016 && a2 == 0x8000000258684420 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 10;
          }
          else
          {
            BOOL v10 = a1 == 0x73726F68747561 && a2 == 0xE700000000000000;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 11;
            }
            else
            {
              BOOL v11 = a1 == 0x7373654D6C69616DLL && a2 == 0xED00006449656761;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 12;
              }
              else if (a1 == 0xD000000000000011 && a2 == 0x8000000258684440 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 13;
              }
              else if (a1 == 0xD000000000000011 && a2 == 0x8000000258684460 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 14;
              }
              else
              {
                BOOL v12 = a1 == 0x65786F626C69616DLL && a2 == 0xE900000000000073;
                if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 15;
                }
                else if (a1 == 0xD000000000000012 && a2 == 0x8000000258684480 {
                       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                }
                {
                  swift_bridgeObjectRelease();
                  return 16;
                }
                else
                {
                  BOOL v13 = a1 == 0x6D614E746E657665 && a2 == 0xE900000000000065;
                  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 17;
                  }
                  else
                  {
                    BOOL v14 = a1 == 0x7461447472617473 && a2 == 0xE900000000000065;
                    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 18;
                    }
                    else
                    {
                      BOOL v15 = a1 == 0x65746144646E65 && a2 == 0xE700000000000000;
                      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        return 19;
                      }
                      else if (a1 == 0xD000000000000011 && a2 == 0x8000000258684560 {
                             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      }
                      {
                        swift_bridgeObjectRelease();
                        return 20;
                      }
                      else if (a1 == 0x6C7255746E657665 && a2 == 0xE800000000000000)
                      {
                        swift_bridgeObjectRelease();
                        return 21;
                      }
                      else
                      {
                        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRelease();
                        if (v17) {
                          return 21;
                        }
                        else {
                          return 22;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t Trip.CodingKeys.init(intValue:)()
{
  return 22;
}

unint64_t Trip.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000016;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000017;
      break;
    case 5:
      unint64_t result = 0x707954746E657665;
      break;
    case 6:
      unint64_t result = 0x627553746E657665;
      break;
    case 7:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 8:
      unint64_t result = 0x417349746E657665;
      break;
    case 9:
      unint64_t result = 0x6E557349656D6974;
      break;
    case 10:
      unint64_t result = 0xD000000000000016;
      break;
    case 11:
      unint64_t result = 0x73726F68747561;
      break;
    case 12:
      unint64_t result = 0x7373654D6C69616DLL;
      break;
    case 13:
    case 14:
    case 20:
      unint64_t result = 0xD000000000000011;
      break;
    case 15:
      unint64_t result = 0x65786F626C69616DLL;
      break;
    case 16:
      unint64_t result = 0xD000000000000012;
      break;
    case 17:
      unint64_t result = 0x6D614E746E657665;
      break;
    case 18:
      unint64_t result = 0x7461447472617473;
      break;
    case 19:
      unint64_t result = 0x65746144646E65;
      break;
    case 21:
      unint64_t result = 0x6C7255746E657665;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance Trip.CodingKeys()
{
  return Trip.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Trip.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = Trip.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Trip.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = Trip.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Trip.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Trip.CodingKeys and conformance Trip.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Trip.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Trip.CodingKeys and conformance Trip.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void Trip.encode(to:)()
{
  OUTLINED_FUNCTION_105_0();
  OUTLINED_FUNCTION_104_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Trip.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_61_13();
  lazy protocol witness table accessor for type Trip.CodingKeys and conformance Trip.CodingKeys();
  OUTLINED_FUNCTION_69_13();
  OUTLINED_FUNCTION_103_13();
  if (!v0)
  {
    OUTLINED_FUNCTION_4_33(1);
    OUTLINED_FUNCTION_4_33(2);
    OUTLINED_FUNCTION_4_33(3);
    OUTLINED_FUNCTION_4_33(4);
    OUTLINED_FUNCTION_4_33(5);
    OUTLINED_FUNCTION_4_33(6);
    OUTLINED_FUNCTION_4_33(7);
    OUTLINED_FUNCTION_90_13(8);
    OUTLINED_FUNCTION_124_9(9);
    OUTLINED_FUNCTION_90_13(10);
    OUTLINED_FUNCTION_71_14();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_8_18();
    OUTLINED_FUNCTION_4_33(12);
    OUTLINED_FUNCTION_4_33(13);
    OUTLINED_FUNCTION_4_33(14);
    OUTLINED_FUNCTION_8_18();
    OUTLINED_FUNCTION_8_18();
    OUTLINED_FUNCTION_4_33(17);
    type metadata accessor for Trip(0);
    OUTLINED_FUNCTION_176_4(18);
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    OUTLINED_FUNCTION_26_25();
    OUTLINED_FUNCTION_26_25();
    OUTLINED_FUNCTION_202_1(20);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    type metadata accessor for URL();
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    OUTLINED_FUNCTION_26_25();
  }
  OUTLINED_FUNCTION_111_0();
  v2();
  OUTLINED_FUNCTION_120_0();
}

void Trip.init(from:)()
{
  OUTLINED_FUNCTION_105_0();
  uint64_t v5 = v4;
  uint64_t v42 = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v8 = OUTLINED_FUNCTION_81(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_39();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v10 = OUTLINED_FUNCTION_81(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_11_0();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_107_11();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Trip.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v12);
  uint64_t v13 = OUTLINED_FUNCTION_14_8();
  uint64_t v43 = type metadata accessor for Trip(v13);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_100_12(v15, v41);
  OUTLINED_FUNCTION_302();
  lazy protocol witness table accessor for type Trip.CodingKeys and conformance Trip.CodingKeys();
  OUTLINED_FUNCTION_237();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v5);
  }
  else
  {
    OUTLINED_FUNCTION_177_4();
    *(void *)uint64_t v44 = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v44 + 8) = v16;
    *(void *)(v44 + 16) = OUTLINED_FUNCTION_26_26(1);
    *(void *)(v44 + 24) = v17;
    *(void *)(v44 + 32) = OUTLINED_FUNCTION_26_26(2);
    *(void *)(v44 + 40) = v18;
    *(void *)(v44 + 48) = OUTLINED_FUNCTION_26_26(3);
    *(void *)(v44 + 56) = v19;
    *(void *)(v44 + 64) = OUTLINED_FUNCTION_26_26(4);
    *(void *)(v44 + 72) = v20;
    *(void *)(v44 + 80) = OUTLINED_FUNCTION_26_26(5);
    *(void *)(v44 + 88) = v21;
    *(void *)(v44 + 96) = OUTLINED_FUNCTION_26_26(6);
    *(void *)(v44 + 104) = v22;
    uint64_t v23 = OUTLINED_FUNCTION_26_26(7);
    *(unsigned char *)(v44 + 128) = OUTLINED_FUNCTION_231_0(v23, v24);
    char v25 = OUTLINED_FUNCTION_204_2(9);
    OUTLINED_FUNCTION_53_16(v25);
    uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_216_1(v26);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    OUTLINED_FUNCTION_102_9();
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_132_5();
    OUTLINED_FUNCTION_54_17();
    uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_67_15(v27, v28);
    uint64_t v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_66_17(v29, v30);
    uint64_t v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_44_22(v31, v32);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_41_24();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_76_12();
    *(void *)(v44 + 208) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *(void *)(v44 + 216) = v33;
    uint64_t v34 = type metadata accessor for Date();
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    OUTLINED_FUNCTION_126_6();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_111_10();
    OUTLINED_FUNCTION_104_13();
    outlined init with take of PQAVerificationModelProtocol?(v3, v35, &demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_132_5();
    OUTLINED_FUNCTION_104_13();
    outlined init with take of PQAVerificationModelProtocol?(v1, v36, &demangling cache variable for type metadata for Date?);
    uint64_t v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_127_7(v37, v38, *(int *)(v43 + 96));
    type metadata accessor for URL();
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    OUTLINED_FUNCTION_164_3();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_65();
    v39();
    OUTLINED_FUNCTION_213_2();
    outlined init with take of PQAVerificationModelProtocol?(v2, v40, &demangling cache variable for type metadata for URL?);
    outlined init with copy of FlightReservation(v34, v42);
    __swift_destroy_boxed_opaque_existential_1Tm(v5);
    _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
  }
  OUTLINED_FUNCTION_120_0();
}

void protocol witness for Decodable.init(from:) in conformance Trip()
{
}

void protocol witness for Encodable.encode(to:) in conformance Trip()
{
}

uint64_t (*FlightReservation.eventSourceBundleIdentifier.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t (*FlightReservation.eventSourceLLMConsumableDescription.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightReservation.flightCheckInUrl.getter()
{
  uint64_t v2 = OUTLINED_FUNCTION_230_0();
  return outlined init with copy of PQAVerificationModelProtocol?(v1 + *(int *)(v2 + 52), v0, &demangling cache variable for type metadata for URL?);
}

uint64_t FlightReservation.flightBookingInfoUrl.getter()
{
  return FlightReservation.flightBookingInfoUrl.getter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_127_6();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_208_2(*(int *)(v2 + 56));
}

uint64_t FlightReservation.flightCarrier.getter()
{
  return FlightReservation.flightCarrier.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_172_4();
  v1(v0);
  OUTLINED_FUNCTION_75_2();
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightReservation.flightCarrierCode.getter()
{
  return FlightReservation.flightCarrierCode.getter((void (*)(void))type metadata accessor for FlightReservation);
}

uint64_t FlightReservation.flightDesignator.getter()
{
  return FlightReservation.flightDesignator.getter((void (*)(void))type metadata accessor for FlightReservation);
}

uint64_t FlightReservation.flightDepartureDateComponents.getter()
{
  OUTLINED_FUNCTION_230_0();
  OUTLINED_FUNCTION_286();
  OUTLINED_FUNCTION_7_2();
  uint64_t v0 = OUTLINED_FUNCTION_79_0();
  return v1(v0);
}

uint64_t FlightReservation.flightDepartureDateComponents.setter()
{
  type metadata accessor for FlightReservation(0);
  OUTLINED_FUNCTION_286();
  OUTLINED_FUNCTION_7_2();
  uint64_t v0 = OUTLINED_FUNCTION_19_0();
  return v1(v0);
}

uint64_t (*FlightReservation.flightDepartureDateComponents.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightReservation.flightArrivalDateComponents.getter()
{
  OUTLINED_FUNCTION_230_0();
  OUTLINED_FUNCTION_286();
  OUTLINED_FUNCTION_7_2();
  uint64_t v0 = OUTLINED_FUNCTION_79_0();
  return v1(v0);
}

uint64_t FlightReservation.flightArrivalDateComponents.setter()
{
  type metadata accessor for FlightReservation(0);
  OUTLINED_FUNCTION_286();
  OUTLINED_FUNCTION_7_2();
  uint64_t v0 = OUTLINED_FUNCTION_19_0();
  return v1(v0);
}

uint64_t (*FlightReservation.flightArrivalDateComponents.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightReservation.flightArrivalAirportAddress.getter()
{
  return FlightReservation.flightArrivalAirportAddress.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_135_4();
  v1(v0);
  OUTLINED_FUNCTION_75_2();
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightReservation.flightDepartureAirportAddress.getter()
{
  return FlightReservation.flightDepartureAirportAddress.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_172_4();
  v1(v0);
  OUTLINED_FUNCTION_75_2();
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightReservation.flightArrivalAirportCode.getter()
{
  return FlightReservation.flightArrivalAirportCode.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_172_4();
  v1(v0);
  OUTLINED_FUNCTION_75_2();
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightReservation.flightDepartureAirportCode.getter()
{
  return FlightReservation.flightDepartureAirportCode.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_172_4();
  v1(v0);
  OUTLINED_FUNCTION_75_2();
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightReservation.flightArrivalAirportCountry.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightReservation.flightDepartureAirportCountry.getter()
{
  return FlightReservation.flightDepartureAirportCountry.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_135_4();
  v1(v0);
  OUTLINED_FUNCTION_75_2();
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightReservation.flightArrivalAirportLocality.getter()
{
  return FlightReservation.flightArrivalAirportLocality.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_135_4();
  v1(v0);
  OUTLINED_FUNCTION_75_2();
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightReservation.flightDepartureAirportLocality.getter()
{
  return FlightReservation.flightDepartureAirportLocality.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_135_4();
  v1(v0);
  OUTLINED_FUNCTION_75_2();
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightReservation.flightArrivalAirportName.getter()
{
  return FlightReservation.flightArrivalAirportName.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_135_4();
  v1(v0);
  OUTLINED_FUNCTION_75_2();
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightReservation.flightDepartureAirportName.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightReservation.flightArrivalAirportRegion.getter()
{
  return TicketedShow.totalCost.getter((void (*)(void))type metadata accessor for FlightReservation);
}

uint64_t TicketedShow.totalCost.getter(void (*a1)(void))
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightReservation.flightDepartureAirportRegion.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightReservation.flightConfirmationNumber.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightReservation.flightPassengerNames.getter()
{
  type metadata accessor for FlightReservation(0);
  return swift_bridgeObjectRetain();
}

uint64_t FlightReservation.flightPassengerSeatNumbers.getter()
{
  type metadata accessor for FlightReservation(0);
  return swift_bridgeObjectRetain();
}

uint64_t FlightReservation.flightArrivalTerminal.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightReservation.flightArrivalTerminal.setter()
{
  OUTLINED_FUNCTION_69_14();
  uint64_t result = OUTLINED_FUNCTION_11_30();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*FlightReservation.flightArrivalTerminal.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightReservation.flightDepartureTerminal.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightReservation.flightDepartureTerminal.setter()
{
  OUTLINED_FUNCTION_69_14();
  uint64_t result = OUTLINED_FUNCTION_11_30();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*FlightReservation.flightDepartureTerminal.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightReservation.flightBookingProvider.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightReservation.flightBookingProvider.setter()
{
  OUTLINED_FUNCTION_69_14();
  uint64_t result = OUTLINED_FUNCTION_11_30();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*FlightReservation.flightBookingProvider.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightReservation.flightBoardingTimeDate.getter()
{
  uint64_t v2 = OUTLINED_FUNCTION_230_0();
  return outlined init with copy of PQAVerificationModelProtocol?(v1 + *(int *)(v2 + 152), v0, &demangling cache variable for type metadata for Date?);
}

uint64_t FlightReservation.flightBoardingTimeDate.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for FlightReservation(0) + 152);
  return outlined assign with take of Date?(a1, v3);
}

uint64_t (*FlightReservation.flightBoardingTimeDate.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightReservation.flightDepartureGate.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightReservation.flightDepartureGate.setter()
{
  OUTLINED_FUNCTION_69_14();
  uint64_t result = OUTLINED_FUNCTION_11_30();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*FlightReservation.flightDepartureGate.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightReservation.flightArrivalGate.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightReservation.flightArrivalGate.setter()
{
  OUTLINED_FUNCTION_69_14();
  uint64_t result = OUTLINED_FUNCTION_11_30();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*FlightReservation.flightArrivalGate.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightReservation.flightDuration.getter()
{
  uint64_t v0 = type metadata accessor for FlightReservation(0);
  return OUTLINED_FUNCTION_165_3(*(int *)(v0 + 164));
}

void FlightReservation.flightDuration.setter()
{
  uint64_t v0 = type metadata accessor for FlightReservation(0);
  OUTLINED_FUNCTION_282(*(int *)(v0 + 164));
}

uint64_t (*FlightReservation.flightDuration.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightReservation.flightCostCurrency.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightReservation.flightCostCurrency.setter()
{
  OUTLINED_FUNCTION_69_14();
  uint64_t result = OUTLINED_FUNCTION_11_30();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*FlightReservation.flightCostCurrency.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightReservation.flightCostAmount.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for FlightReservation(0) + 172));
}

uint64_t FlightReservation.flightCostAmount.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = type metadata accessor for FlightReservation(0);
  uint64_t v8 = v3 + *(int *)(result + 172);
  *(void *)uint64_t v8 = a1;
  *(void *)(v8 + 8) = a2;
  *(_DWORD *)(v8 + 16) = a3;
  *(unsigned char *)(v8 + 20) = BYTE4(a3) & 1;
  return result;
}

uint64_t (*FlightReservation.flightCostAmount.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightReservation.flightStatus.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightReservation.flightStatus.setter()
{
  OUTLINED_FUNCTION_69_14();
  uint64_t result = OUTLINED_FUNCTION_11_30();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*FlightReservation.flightStatus.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightReservation.flightDepartureDateString.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightReservation.flightDepartureDateString.setter()
{
  OUTLINED_FUNCTION_69_14();
  uint64_t result = OUTLINED_FUNCTION_11_30();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*FlightReservation.flightDepartureDateString.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightReservation.flightArrivalDateString.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightReservation.flightArrivalDateString.setter()
{
  OUTLINED_FUNCTION_69_14();
  uint64_t result = OUTLINED_FUNCTION_11_30();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*FlightReservation.flightArrivalDateString.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightReservation.setResolvedFlight(_:)()
{
  OUTLINED_FUNCTION_49_16();
  type metadata accessor for JSONEncodingOptions();
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_39();
  JSONEncodingOptions.init()();
  type metadata accessor for FlightSnippet.Flight(0);
  lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight((unint64_t *)&lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Flight);
  OUTLINED_FUNCTION_74_0();
  uint64_t v2 = Message.jsonString(options:)();
  if (v0)
  {
    OUTLINED_FUNCTION_163_4();
    return v4();
  }
  else
  {
    uint64_t v6 = v2;
    uint64_t v7 = v3;
    OUTLINED_FUNCTION_163_4();
    v8();
    v9._uint64_t countAndFlagsBits = v6;
    v9._object = v7;
    FlightReservation.setResolvedFlight(_:)(v9);
    return swift_bridgeObjectRelease();
  }
}

void FlightReservation.hash(into:)()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v3 = v1;
  OUTLINED_FUNCTION_60_11();
  uint64_t v44 = type metadata accessor for Date();
  OUTLINED_FUNCTION_1();
  uint64_t v42 = v4;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_184_0();
  uint64_t v41 = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v8 = OUTLINED_FUNCTION_81(v7);
  MEMORY[0x270FA5388](v8);
  uint64_t v43 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  OUTLINED_FUNCTION_1();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v17 = OUTLINED_FUNCTION_81(v16);
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_95_1();
  uint64_t v20 = v18 - v19;
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_31_9();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v22 = OUTLINED_FUNCTION_79_0();
  specialized Dictionary<>.hash(into:)(v22, v23);
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(v0, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v3 + 56))
  {
    OUTLINED_FUNCTION_31_24();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_170_4();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  if (*(void *)(v3 + 72))
  {
    OUTLINED_FUNCTION_31_24();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_170_4();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  if (*(void *)(v3 + 88))
  {
    OUTLINED_FUNCTION_31_24();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_170_4();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  Hasher._combine(_:)(*(unsigned char *)(v3 + 96));
  if (*(void *)(v3 + 112))
  {
    OUTLINED_FUNCTION_31_24();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_170_4();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  char v25 = (int *)type metadata accessor for FlightReservation(0);
  outlined init with copy of PQAVerificationModelProtocol?(v3 + v25[13], v2, &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_53_2(v2, 1, v10);
  if (v26)
  {
    OUTLINED_FUNCTION_32_22();
  }
  else
  {
    OUTLINED_FUNCTION_58_1();
    v27();
    OUTLINED_FUNCTION_31_24();
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    OUTLINED_FUNCTION_272();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v10);
  }
  outlined init with copy of PQAVerificationModelProtocol?(v3 + v25[14], v20, &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_53_2(v20, 1, v10);
  if (v26)
  {
    OUTLINED_FUNCTION_32_22();
  }
  else
  {
    OUTLINED_FUNCTION_58_1();
    v28();
    OUTLINED_FUNCTION_31_24();
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    OUTLINED_FUNCTION_272();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v10);
  }
  uint64_t v30 = (uint64_t)v43;
  uint64_t v29 = v44;
  OUTLINED_FUNCTION_61_14();
  if (v2)
  {
    OUTLINED_FUNCTION_25_23();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_28_21();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  OUTLINED_FUNCTION_61_14();
  if (v2)
  {
    OUTLINED_FUNCTION_25_23();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_28_21();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  OUTLINED_FUNCTION_61_14();
  if (v2)
  {
    OUTLINED_FUNCTION_25_23();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_28_21();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  uint64_t v31 = type metadata accessor for DateComponents();
  uint64_t v32 = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x263F063B0]);
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  OUTLINED_FUNCTION_61_14();
  if (v32)
  {
    OUTLINED_FUNCTION_25_23();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_28_21();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  OUTLINED_FUNCTION_61_14();
  if (v32)
  {
    OUTLINED_FUNCTION_25_23();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_28_21();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  OUTLINED_FUNCTION_61_14();
  if (v32)
  {
    OUTLINED_FUNCTION_25_23();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_28_21();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  OUTLINED_FUNCTION_61_14();
  if (v32)
  {
    OUTLINED_FUNCTION_25_23();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_28_21();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  OUTLINED_FUNCTION_61_14();
  if (v32)
  {
    OUTLINED_FUNCTION_25_23();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_28_21();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  OUTLINED_FUNCTION_61_14();
  if (v32)
  {
    OUTLINED_FUNCTION_25_23();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_28_21();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  OUTLINED_FUNCTION_61_14();
  if (v32)
  {
    OUTLINED_FUNCTION_25_23();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_28_21();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  OUTLINED_FUNCTION_61_14();
  if (v32)
  {
    OUTLINED_FUNCTION_25_23();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_28_21();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  OUTLINED_FUNCTION_61_14();
  if (v32)
  {
    OUTLINED_FUNCTION_25_23();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_28_21();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  OUTLINED_FUNCTION_61_14();
  if (v32)
  {
    OUTLINED_FUNCTION_25_23();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_28_21();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  OUTLINED_FUNCTION_61_14();
  if (v32)
  {
    OUTLINED_FUNCTION_25_23();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_28_21();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  OUTLINED_FUNCTION_61_14();
  if (v32)
  {
    OUTLINED_FUNCTION_25_23();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_28_21();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  OUTLINED_FUNCTION_61_14();
  if (v32)
  {
    OUTLINED_FUNCTION_25_23();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_28_21();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  uint64_t v33 = *(void *)(v3 + v25[33]);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(v0, v33);
  swift_bridgeObjectRelease();
  uint64_t v34 = *(void *)(v3 + v25[34]);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(v0, v34);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_61_14();
  if (v32)
  {
    OUTLINED_FUNCTION_25_23();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_28_21();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  OUTLINED_FUNCTION_61_14();
  if (v32)
  {
    OUTLINED_FUNCTION_25_23();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_28_21();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  OUTLINED_FUNCTION_61_14();
  if (v32)
  {
    OUTLINED_FUNCTION_25_23();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_28_21();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  outlined init with copy of PQAVerificationModelProtocol?(v3 + v25[38], v30, &demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_53_2(v30, 1, v29);
  if (v26)
  {
    OUTLINED_FUNCTION_32_22();
  }
  else
  {
    uint64_t v35 = v42;
    OUTLINED_FUNCTION_58_1();
    v36();
    OUTLINED_FUNCTION_31_24();
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v31 = v35 + 8;
    uint64_t v37 = OUTLINED_FUNCTION_74_0();
    v38(v37);
  }
  OUTLINED_FUNCTION_185_3();
  if (v31)
  {
    OUTLINED_FUNCTION_31_24();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_114_11();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  OUTLINED_FUNCTION_185_3();
  if (v31)
  {
    OUTLINED_FUNCTION_31_24();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_114_11();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  if (*(unsigned char *)(v3 + v25[41] + 8) == 1)
  {
    OUTLINED_FUNCTION_32_22();
  }
  else
  {
    OUTLINED_FUNCTION_25_23();
    if ((v31 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v39 = v31;
    }
    else {
      Swift::UInt64 v39 = 0;
    }
    Hasher._combine(_:)(v39);
  }
  OUTLINED_FUNCTION_185_3();
  if (v31)
  {
    OUTLINED_FUNCTION_31_24();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_114_11();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  uint64_t v40 = v3 + v25[43];
  if (*(unsigned char *)(v40 + 20) == 1)
  {
    OUTLINED_FUNCTION_32_22();
  }
  else
  {
    uint64_t v31 = *(unsigned int *)(v40 + 16);
    OUTLINED_FUNCTION_31_24();
    NSDecimal.hash(into:)();
  }
  OUTLINED_FUNCTION_185_3();
  if (v31)
  {
    OUTLINED_FUNCTION_31_24();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_114_11();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  OUTLINED_FUNCTION_185_3();
  if (v31)
  {
    OUTLINED_FUNCTION_31_24();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_114_11();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  OUTLINED_FUNCTION_185_3();
  if (v31)
  {
    OUTLINED_FUNCTION_31_24();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_114_11();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  if (*(void *)(v3 + v25[47] + 8))
  {
    OUTLINED_FUNCTION_31_24();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_32_22();
  }
  OUTLINED_FUNCTION_119_0();
}

uint64_t FlightReservation.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x73726577736E61 && a2 == 0xE700000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x8000000258684580 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      BOOL v7 = a1 == 0x6449656C646E7562 && a2 == 0xE800000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        BOOL v8 = a1 == 0x7373654D6C69616DLL && a2 == 0xED00006449656761;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000258684400 {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          return 5;
        }
        else if (a1 == 0xD000000000000023 && a2 == 0x80000002586845A0 {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          return 6;
        }
        else
        {
          BOOL v9 = a1 == 0x6E557349656D6974 && a2 == 0xED00006E776F6E6BLL;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 7;
          }
          else
          {
            BOOL v10 = a1 == 0x754E746867696C66 && a2 == 0xEC0000007265626DLL;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 8;
            }
            else if (a1 == 0xD000000000000010 && a2 == 0x8000000258683F10 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 9;
            }
            else if (a1 == 0xD000000000000014 && a2 == 0x80000002586845D0 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 10;
            }
            else
            {
              BOOL v11 = a1 == 0x6143746867696C66 && a2 == 0xED00007265697272;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 11;
              }
              else if (a1 == 0xD000000000000011 && a2 == 0x8000000258683F30 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 12;
              }
              else if (a1 == 0xD000000000000010 && a2 == 0x80000002586845F0 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 13;
              }
              else if (a1 == 0xD00000000000001DLL && a2 == 0x8000000258684610 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 14;
              }
              else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000258684630 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 15;
              }
              else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000258683FB0 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 16;
              }
              else if (a1 == 0xD00000000000001DLL && a2 == 0x8000000258683F90 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 17;
              }
              else if (a1 == 0xD000000000000018 && a2 == 0x8000000258683FF0 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 18;
              }
              else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000258683FD0 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 19;
              }
              else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000258684030 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 20;
              }
              else if (a1 == 0xD00000000000001DLL && a2 == 0x8000000258684010 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 21;
              }
              else if (a1 == 0xD00000000000001CLL && a2 == 0x8000000258684070 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 22;
              }
              else if (a1 == 0xD00000000000001ELL && a2 == 0x8000000258684050 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 23;
              }
              else if (a1 == 0xD000000000000018 && a2 == 0x8000000258684090 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 24;
              }
              else if (a1 == 0xD00000000000001ALL && a2 == 0x80000002586840B0 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 25;
              }
              else if (a1 == 0xD00000000000001ALL && a2 == 0x80000002586840F0 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 26;
              }
              else if (a1 == 0xD00000000000001CLL && a2 == 0x80000002586840D0 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 27;
              }
              else if (a1 == 0xD000000000000018 && a2 == 0x8000000258684110 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 28;
              }
              else if (a1 == 0xD000000000000014 && a2 == 0x8000000258684130 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 29;
              }
              else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000258684150 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 30;
              }
              else if (a1 == 0xD000000000000015 && a2 == 0x8000000258684170 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 31;
              }
              else if (a1 == 0xD000000000000017 && a2 == 0x8000000258684190 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 32;
              }
              else if (a1 == 0xD000000000000015 && a2 == 0x8000000258684650 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 33;
              }
              else if (a1 == 0xD000000000000016 && a2 == 0x8000000258684670 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 34;
              }
              else if (a1 == 0xD000000000000013 && a2 == 0x8000000258684690 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 35;
              }
              else if (a1 == 0xD000000000000011 && a2 == 0x80000002586846B0 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 36;
              }
              else
              {
                BOOL v12 = a1 == 0x7544746867696C66 && a2 == 0xEE006E6F69746172;
                if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 37;
                }
                else if (a1 == 0xD000000000000012 && a2 == 0x80000002586846D0 {
                       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                }
                {
                  swift_bridgeObjectRelease();
                  return 38;
                }
                else if (a1 == 0xD000000000000010 && a2 == 0x80000002586846F0 {
                       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                }
                {
                  swift_bridgeObjectRelease();
                  return 39;
                }
                else
                {
                  BOOL v13 = a1 == 0x7453746867696C66 && a2 == 0xEC00000073757461;
                  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 40;
                  }
                  else if (a1 == 0xD000000000000019 && a2 == 0x8000000258683F50 {
                         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  }
                  {
                    swift_bridgeObjectRelease();
                    return 41;
                  }
                  else if (a1 == 0xD000000000000017 && a2 == 0x8000000258683F70 {
                         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  }
                  {
                    swift_bridgeObjectRelease();
                    return 42;
                  }
                  else if (a1 == 0xD000000000000013 && a2 == 0x8000000258684710)
                  {
                    swift_bridgeObjectRelease();
                    return 43;
                  }
                  else
                  {
                    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if (v14) {
                      return 43;
                    }
                    else {
                      return 44;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t FlightReservation.CodingKeys.init(intValue:)()
{
  return 44;
}

unint64_t FlightReservation.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x73726577736E61;
      break;
    case 2:
    case 9:
    case 13:
    case 39:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x6449656C646E7562;
      break;
    case 4:
      unint64_t result = 0x7373654D6C69616DLL;
      break;
    case 5:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000023;
      break;
    case 7:
      unint64_t result = 0x6E557349656D6974;
      break;
    case 8:
      unint64_t result = 0x754E746867696C66;
      break;
    case 10:
      unint64_t result = 0xD000000000000014;
      break;
    case 11:
      unint64_t result = 0x6143746867696C66;
      break;
    case 12:
      unint64_t result = 0xD000000000000011;
      break;
    case 14:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 15:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 16:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 17:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 18:
      unint64_t result = 0xD000000000000018;
      break;
    case 19:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 20:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 21:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 22:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 23:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 24:
      unint64_t result = 0xD000000000000018;
      break;
    case 25:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 26:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 27:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 28:
      unint64_t result = 0xD000000000000018;
      break;
    case 29:
      unint64_t result = 0xD000000000000014;
      break;
    case 30:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 31:
      unint64_t result = 0xD000000000000015;
      break;
    case 32:
      unint64_t result = 0xD000000000000017;
      break;
    case 33:
      unint64_t result = 0xD000000000000015;
      break;
    case 34:
      unint64_t result = 0xD000000000000016;
      break;
    case 35:
      unint64_t result = 0xD000000000000013;
      break;
    case 36:
      unint64_t result = 0xD000000000000011;
      break;
    case 37:
      unint64_t result = 0x7544746867696C66;
      break;
    case 38:
      unint64_t result = 0xD000000000000012;
      break;
    case 40:
      unint64_t result = 0x7453746867696C66;
      break;
    case 41:
      unint64_t result = 0xD000000000000019;
      break;
    case 42:
      unint64_t result = 0xD000000000000017;
      break;
    case 43:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance FlightReservation.CodingKeys()
{
  return FlightReservation.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FlightReservation.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = FlightReservation.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FlightReservation.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = FlightReservation.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FlightReservation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FlightReservation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t FlightReservation.encode(to:)()
{
  OUTLINED_FUNCTION_113_12();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FlightReservation.CodingKeys>);
  OUTLINED_FUNCTION_1();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  BOOL v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_61_13();
  lazy protocol witness table accessor for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys();
  OUTLINED_FUNCTION_69_13();
  LOBYTE(v18) = 0;
  OUTLINED_FUNCTION_82_12();
  if (v0) {
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v2);
  }
  *(void *)&long long v18 = *(void *)(v1 + 16);
  char v21 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
  OUTLINED_FUNCTION_119_7();
  *(void *)&long long v18 = *(void *)(v1 + 24);
  char v21 = 2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  uint64_t v9 = lazy protocol witness table accessor for type [String] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  OUTLINED_FUNCTION_119_7();
  LOBYTE(v18) = 3;
  OUTLINED_FUNCTION_82_12();
  LOBYTE(v18) = 4;
  OUTLINED_FUNCTION_2_26();
  LOBYTE(v18) = 5;
  OUTLINED_FUNCTION_2_26();
  LOBYTE(v18) = 6;
  OUTLINED_FUNCTION_2_26();
  LOBYTE(v18) = 7;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v18) = 8;
  OUTLINED_FUNCTION_2_26();
  v17[2] = v9;
  v17[3] = v4;
  v17[1] = v8;
  BOOL v10 = (int *)type metadata accessor for FlightReservation(0);
  LOBYTE(v18) = 9;
  type metadata accessor for URL();
  lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
  OUTLINED_FUNCTION_36_24();
  LOBYTE(v18) = 10;
  OUTLINED_FUNCTION_36_24();
  LOBYTE(v18) = 11;
  OUTLINED_FUNCTION_2_26();
  LOBYTE(v18) = 12;
  OUTLINED_FUNCTION_2_26();
  LOBYTE(v18) = 13;
  OUTLINED_FUNCTION_2_26();
  LOBYTE(v18) = 14;
  type metadata accessor for DateComponents();
  lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x263F063B0]);
  OUTLINED_FUNCTION_119_7();
  LOBYTE(v18) = 15;
  OUTLINED_FUNCTION_119_7();
  LOBYTE(v18) = 16;
  OUTLINED_FUNCTION_2_26();
  LOBYTE(v18) = 17;
  OUTLINED_FUNCTION_2_26();
  LOBYTE(v18) = 18;
  OUTLINED_FUNCTION_2_26();
  LOBYTE(v18) = 19;
  OUTLINED_FUNCTION_2_26();
  OUTLINED_FUNCTION_10_29(v10[24]);
  LOBYTE(v18) = 20;
  OUTLINED_FUNCTION_2_26();
  LOBYTE(v18) = 21;
  OUTLINED_FUNCTION_2_26();
  LOBYTE(v18) = 22;
  OUTLINED_FUNCTION_2_26();
  LOBYTE(v18) = 23;
  OUTLINED_FUNCTION_2_26();
  LOBYTE(v18) = 24;
  OUTLINED_FUNCTION_2_26();
  OUTLINED_FUNCTION_10_29(v10[29]);
  LOBYTE(v18) = 25;
  OUTLINED_FUNCTION_2_26();
  OUTLINED_FUNCTION_260();
  LOBYTE(v18) = v11;
  OUTLINED_FUNCTION_2_26();
  OUTLINED_FUNCTION_10_29(v10[31]);
  LOBYTE(v18) = 27;
  OUTLINED_FUNCTION_2_26();
  OUTLINED_FUNCTION_10_29(v10[32]);
  LOBYTE(v18) = 28;
  OUTLINED_FUNCTION_2_26();
  *(void *)&long long v18 = *(void *)(v1 + v10[33]);
  char v21 = 29;
  OUTLINED_FUNCTION_119_7();
  *(void *)&long long v18 = *(void *)(v1 + v10[34]);
  char v21 = 30;
  OUTLINED_FUNCTION_119_7();
  OUTLINED_FUNCTION_10_29(v10[35]);
  LOBYTE(v18) = 31;
  OUTLINED_FUNCTION_2_26();
  OUTLINED_FUNCTION_10_29(v10[36]);
  LOBYTE(v18) = 32;
  OUTLINED_FUNCTION_2_26();
  OUTLINED_FUNCTION_10_29(v10[37]);
  LOBYTE(v18) = 33;
  OUTLINED_FUNCTION_2_26();
  LOBYTE(v18) = 34;
  type metadata accessor for Date();
  lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  OUTLINED_FUNCTION_36_24();
  OUTLINED_FUNCTION_10_29(v10[39]);
  LOBYTE(v18) = 35;
  OUTLINED_FUNCTION_2_26();
  OUTLINED_FUNCTION_10_29(v10[40]);
  LOBYTE(v18) = 36;
  OUTLINED_FUNCTION_2_26();
  OUTLINED_FUNCTION_240_0(v10[41]);
  LOBYTE(v18) = 37;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  OUTLINED_FUNCTION_10_29(v10[42]);
  LOBYTE(v18) = 38;
  OUTLINED_FUNCTION_2_26();
  BOOL v12 = (long long *)(v1 + v10[43]);
  int v13 = *((_DWORD *)v12 + 4);
  char v14 = *((unsigned char *)v12 + 20);
  long long v18 = *v12;
  int v19 = v13;
  char v20 = v14;
  char v21 = 39;
  type metadata accessor for NSDecimal(0);
  lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal, type metadata accessor for NSDecimal);
  OUTLINED_FUNCTION_36_24();
  OUTLINED_FUNCTION_10_29(v10[44]);
  LOBYTE(v18) = 40;
  OUTLINED_FUNCTION_2_26();
  OUTLINED_FUNCTION_10_29(v10[45]);
  LOBYTE(v18) = 41;
  OUTLINED_FUNCTION_2_26();
  OUTLINED_FUNCTION_10_29(v10[46]);
  LOBYTE(v18) = 42;
  OUTLINED_FUNCTION_2_26();
  OUTLINED_FUNCTION_10_29(v10[47]);
  LOBYTE(v18) = 43;
  OUTLINED_FUNCTION_2_26();
  OUTLINED_FUNCTION_163_4();
  return v15();
}

Swift::Int FlightReservation.hashValue.getter()
{
  return Hasher._finalize()();
}

void FlightReservation.init(from:)()
{
  OUTLINED_FUNCTION_105_0();
  uint64_t v184 = v1;
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_218_1(v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v7 = OUTLINED_FUNCTION_81(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_184_0();
  OUTLINED_FUNCTION_22_13(v8);
  uint64_t v183 = type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_1();
  uint64_t v171 = v9;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_194_0((uint64_t)&v151 - v12);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v14 = OUTLINED_FUNCTION_81(v13);
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_27_10();
  OUTLINED_FUNCTION_194_0(v16);
  uint64_t v169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FlightReservation.CodingKeys>);
  OUTLINED_FUNCTION_1();
  uint64_t v165 = v17;
  MEMORY[0x270FA5388](v18);
  int v19 = (int *)OUTLINED_FUNCTION_200_1();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_17_1();
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  OUTLINED_FUNCTION_54_15(*(int *)(v21 + 140));
  uint64_t v181 = v22;
  OUTLINED_FUNCTION_54_15(*(int *)(v23 + 144));
  uint64_t v180 = v24;
  OUTLINED_FUNCTION_54_15(*(int *)(v25 + 148));
  uint64_t v179 = v26;
  uint64_t v28 = v0 + *(int *)(v27 + 152);
  uint64_t v29 = type metadata accessor for Date();
  uint64_t v182 = v28;
  __swift_storeEnumTagSinglePayload(v28, 1, 1, v29);
  OUTLINED_FUNCTION_54_15(v19[39]);
  uint64_t v177 = v30;
  OUTLINED_FUNCTION_54_15(v19[40]);
  uint64_t v176 = v31;
  uint64_t v32 = v0 + v19[41];
  *(void *)uint64_t v32 = 0;
  *(unsigned char *)(v32 + 8) = 1;
  OUTLINED_FUNCTION_54_15(v19[42]);
  os_log_type_t v175 = v33;
  uint64_t v34 = v0 + v19[43];
  *(void *)uint64_t v34 = 0;
  *(void *)(v34 + 8) = 0;
  *(_DWORD *)(v34 + 16) = 0;
  *(unsigned char *)(v34 + 20) = 1;
  OUTLINED_FUNCTION_54_15(v19[44]);
  uint64_t v174 = v35;
  OUTLINED_FUNCTION_54_15(v19[45]);
  uint64_t v173 = v36;
  OUTLINED_FUNCTION_54_15(v19[46]);
  uint64_t v172 = v37;
  uint64_t v185 = v19;
  uint64_t v186 = v0;
  OUTLINED_FUNCTION_54_15(v19[47]);
  unint64_t v178 = v38;
  uint64_t v39 = v4[3];
  int v170 = v4;
  __swift_project_boxed_opaque_existential_1(v4, v39);
  lazy protocol witness table accessor for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys();
  uint64_t v168 = v2;
  uint64_t v40 = v184;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v184 = v40;
  if (v40)
  {
    unint64_t v44 = 0x1F5F80000060;
  }
  else
  {
    uint64_t v41 = v166;
    uint64_t v42 = v167;
    uint64_t v160 = (void *)v32;
    uint64_t v159 = (_OWORD *)v34;
    LOBYTE(v187) = 0;
    OUTLINED_FUNCTION_205_1();
    uint64_t v43 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v54 = (void *)v186;
    *(void *)uint64_t v186 = v43;
    v54[1] = v55;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    OUTLINED_FUNCTION_145_2();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v54[2] = v187;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    uint64_t v56 = lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v57 = v56;
    v54[3] = v187;
    OUTLINED_FUNCTION_206_1(3);
    v54[4] = KeyedDecodingContainer.decode(_:forKey:)();
    v54[5] = v58;
    v54[6] = OUTLINED_FUNCTION_94_14(4);
    v54[7] = v59;
    v54[8] = OUTLINED_FUNCTION_94_14(5);
    v54[9] = v60;
    v54[10] = OUTLINED_FUNCTION_94_14(6);
    v54[11] = v63;
    OUTLINED_FUNCTION_206_1(7);
    char v64 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v184 = 0;
    *(unsigned char *)(v186 + 96) = v64 & 1;
    uint64_t v65 = OUTLINED_FUNCTION_6_35(8);
    uint64_t v184 = 0;
    uint64_t v66 = v186;
    *(void *)(v186 + 104) = v65;
    *(void *)(v66 + 112) = v67;
    type metadata accessor for URL();
    LOBYTE(v187) = 9;
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    OUTLINED_FUNCTION_169_2();
    uint64_t v184 = 0;
    outlined init with take of PQAVerificationModelProtocol?(v41, v186 + v185[13], &demangling cache variable for type metadata for URL?);
    LOBYTE(v187) = 10;
    OUTLINED_FUNCTION_169_2();
    uint64_t v184 = 0;
    outlined init with take of PQAVerificationModelProtocol?(v42, v186 + v185[14], &demangling cache variable for type metadata for URL?);
    uint64_t v68 = OUTLINED_FUNCTION_6_35(11);
    uint64_t v184 = 0;
    int v69 = (uint64_t *)(v186 + v185[15]);
    uint64_t *v69 = v68;
    v69[1] = v70;
    uint64_t v71 = OUTLINED_FUNCTION_6_35(12);
    uint64_t v184 = 0;
    uint64_t v72 = (uint64_t *)(v186 + v185[16]);
    *uint64_t v72 = v71;
    v72[1] = v73;
    uint64_t v74 = OUTLINED_FUNCTION_6_35(13);
    uint64_t v184 = 0;
    uint64_t v76 = (uint64_t *)(v186 + v185[17]);
    *uint64_t v76 = v74;
    v76[1] = v75;
    LOBYTE(v187) = 14;
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x263F063B0]);
    OUTLINED_FUNCTION_305();
    uint64_t v77 = v184;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v184 = v77;
    if (v77)
    {
      uint64_t v78 = OUTLINED_FUNCTION_5_30();
      v79(v78);
      OUTLINED_FUNCTION_50_25();
      unint64_t v44 = v80 | 0x2000;
    }
    else
    {
      uint64_t v81 = *(void (**)(void))(v171 + 32);
      OUTLINED_FUNCTION_147_3();
      v81();
      LOBYTE(v187) = 15;
      OUTLINED_FUNCTION_293();
      uint64_t v82 = v184;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v184 = v82;
      if (v82)
      {
        uint64_t v83 = OUTLINED_FUNCTION_5_30();
        v84(v83);
        OUTLINED_FUNCTION_50_25();
        unint64_t v44 = v85 | 0x6000;
      }
      else
      {
        OUTLINED_FUNCTION_147_3();
        v81();
        uint64_t v86 = OUTLINED_FUNCTION_6_35(16);
        uint64_t v184 = 0;
        uint64_t v87 = (uint64_t *)(v186 + v185[20]);
        *uint64_t v87 = v86;
        v87[1] = v88;
        uint64_t v89 = OUTLINED_FUNCTION_6_35(17);
        uint64_t v184 = 0;
        uint64_t v90 = (uint64_t *)(v186 + v185[21]);
        *uint64_t v90 = v89;
        v90[1] = v91;
        uint64_t v92 = OUTLINED_FUNCTION_6_35(18);
        uint64_t v184 = 0;
        uint64_t v93 = (uint64_t *)(v186 + v185[22]);
        *uint64_t v93 = v92;
        v93[1] = v94;
        uint64_t v95 = OUTLINED_FUNCTION_6_35(19);
        uint64_t v184 = 0;
        OUTLINED_FUNCTION_73_12(v95, v96, v185[23]);
        uint64_t v97 = OUTLINED_FUNCTION_6_35(20);
        uint64_t v184 = 0;
        OUTLINED_FUNCTION_73_12(v97, v98, v185[24]);
        uint64_t v99 = OUTLINED_FUNCTION_6_35(21);
        uint64_t v184 = 0;
        uint64_t v100 = (uint64_t *)(v186 + v185[25]);
        *uint64_t v100 = v99;
        v100[1] = v101;
        uint64_t v102 = OUTLINED_FUNCTION_6_35(22);
        uint64_t v184 = 0;
        uint64_t v103 = (uint64_t *)(v186 + v185[26]);
        *uint64_t v103 = v102;
        v103[1] = v104;
        uint64_t v105 = OUTLINED_FUNCTION_6_35(23);
        uint64_t v184 = 0;
        uint64_t v106 = (uint64_t *)(v186 + v185[27]);
        *uint64_t v106 = v105;
        v106[1] = v107;
        uint64_t v108 = OUTLINED_FUNCTION_6_35(24);
        uint64_t v184 = 0;
        uint64_t v109 = (uint64_t *)(v186 + v185[28]);
        *uint64_t v109 = v108;
        v109[1] = v110;
        uint64_t v111 = OUTLINED_FUNCTION_6_35(25);
        uint64_t v184 = 0;
        OUTLINED_FUNCTION_73_12(v111, v112, v185[29]);
        uint64_t v113 = OUTLINED_FUNCTION_6_35(26);
        uint64_t v184 = 0;
        OUTLINED_FUNCTION_73_12(v113, v114, v185[30]);
        uint64_t v115 = OUTLINED_FUNCTION_6_35(27);
        uint64_t v184 = 0;
        OUTLINED_FUNCTION_73_12(v115, v116, v185[31]);
        uint64_t v117 = OUTLINED_FUNCTION_6_35(28);
        uint64_t v184 = 0;
        OUTLINED_FUNCTION_73_12(v117, v118, v185[32]);
        OUTLINED_FUNCTION_128_6(29);
        uint64_t v119 = v184;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        uint64_t v184 = v119;
        if (v119)
        {
          uint64_t v120 = OUTLINED_FUNCTION_5_30();
          v121(v120);
          unint64_t v44 = 0xF5F9FFFFF7FLL;
        }
        else
        {
          *(void *)(v186 + v185[33]) = v187;
          OUTLINED_FUNCTION_128_6(30);
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v184 = 0;
          *(void *)(v186 + v185[34]) = v187;
          uint64_t v122 = OUTLINED_FUNCTION_94_14(31);
          uint64_t v184 = 0;
          uint64_t v123 = v181;
          *uint64_t v181 = v122;
          v123[1] = v124;
          uint64_t v125 = OUTLINED_FUNCTION_6_35(32);
          uint64_t v184 = 0;
          uint64_t v126 = v180;
          *uint64_t v180 = v125;
          v126[1] = v127;
          uint64_t v128 = OUTLINED_FUNCTION_6_35(33);
          uint64_t v184 = 0;
          uint64_t v129 = v179;
          *uint64_t v179 = v128;
          v129[1] = v130;
          LOBYTE(v187) = 34;
          lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
          OUTLINED_FUNCTION_224_0();
          uint64_t v131 = v168;
          uint64_t v132 = v184;
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
          uint64_t v184 = v132;
          if (!v132)
          {
            outlined assign with take of Date?(v161, v182);
            OUTLINED_FUNCTION_6_35(35);
            uint64_t v184 = 0;
            OUTLINED_FUNCTION_167_3();
            uint64_t v133 = v177;
            swift_bridgeObjectRelease();
            *uint64_t v133 = v131;
            v133[1] = v57;
            OUTLINED_FUNCTION_6_35(36);
            uint64_t v184 = 0;
            OUTLINED_FUNCTION_167_3();
            uint64_t v134 = v176;
            swift_bridgeObjectRelease();
            *uint64_t v134 = v131;
            v134[1] = v57;
            LOBYTE(v187) = 37;
            OUTLINED_FUNCTION_205_1();
            uint64_t v135 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
            uint64_t v184 = 0;
            uint64_t v136 = v160;
            *uint64_t v160 = v135;
            *((unsigned char *)v136 + 8) = v137 & 1;
            OUTLINED_FUNCTION_6_35(38);
            uint64_t v184 = 0;
            OUTLINED_FUNCTION_167_3();
            uint64_t v138 = v175;
            swift_bridgeObjectRelease();
            *uint64_t v138 = v131;
            v138[1] = v57;
            type metadata accessor for NSDecimal(0);
            uint64_t v140 = v139;
            lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal, type metadata accessor for NSDecimal);
            OUTLINED_FUNCTION_145_2();
            uint64_t v141 = v184;
            KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
            uint64_t v184 = v141;
            if (!v141)
            {
              int v142 = v188;
              char v143 = v189;
              uint64_t v144 = v159;
              *uint64_t v159 = v187;
              *((_DWORD *)v144 + 4) = v142;
              *((unsigned char *)v144 + 20) = v143;
              OUTLINED_FUNCTION_6_35(40);
              uint64_t v184 = 0;
              OUTLINED_FUNCTION_167_3();
              uint64_t v145 = v174;
              swift_bridgeObjectRelease();
              void *v145 = v140;
              v145[1] = v57;
              OUTLINED_FUNCTION_6_35(41);
              uint64_t v184 = 0;
              OUTLINED_FUNCTION_167_3();
              uint64_t v146 = v173;
              swift_bridgeObjectRelease();
              void *v146 = v140;
              v146[1] = v57;
              OUTLINED_FUNCTION_6_35(42);
              uint64_t v184 = 0;
              OUTLINED_FUNCTION_167_3();
              uint64_t v147 = v172;
              swift_bridgeObjectRelease();
              *uint64_t v147 = v140;
              v147[1] = v57;
              OUTLINED_FUNCTION_6_35(43);
              uint64_t v184 = 0;
              OUTLINED_FUNCTION_167_3();
              uint64_t v148 = OUTLINED_FUNCTION_5_30();
              v149(v148);
              uint64_t v150 = v178;
              swift_bridgeObjectRelease();
              *uint64_t v150 = v140;
              v150[1] = v57;
              outlined init with copy of FlightReservation(v186, v162);
              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v170);
              _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
              goto LABEL_60;
            }
          }
          unint64_t v44 = 0xF5FFFFFFF7FLL;
          uint64_t v61 = OUTLINED_FUNCTION_5_30();
          v62(v61);
        }
      }
    }
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v170);
  uint64_t v45 = (v44 >> 9) & 1;
  uint64_t v46 = (v44 >> 10) & 1;
  uint64_t v152 = (v44 >> 11) & 1;
  uint64_t v153 = (v44 >> 12) & 1;
  uint64_t v154 = (v44 >> 13) & 1;
  uint64_t v155 = (v44 >> 14) & 1;
  uint64_t v156 = (v44 >> 15) & 1;
  uint64_t v157 = (v44 >> 16) & 1;
  uint64_t v158 = (v44 >> 17) & 1;
  uint64_t v159 = (_OWORD *)((v44 >> 18) & 1);
  uint64_t v160 = (void *)((v44 >> 19) & 1);
  unint64_t v161 = (v44 >> 20) & 1;
  OUTLINED_FUNCTION_218_1((v44 >> 21) & 1);
  uint64_t v163 = (v44 >> 22) & 1;
  uint64_t v164 = (v44 >> 23) & 1;
  uint64_t v165 = (v44 >> 24) & 1;
  uint64_t v166 = (v44 >> 25) & 1;
  uint64_t v167 = (v44 >> 26) & 1;
  uint64_t v168 = (v44 >> 27) & 1;
  uint64_t v169 = (v44 >> 28) & 1;
  int v170 = (void *)((v44 >> 29) & 1);
  if (v44)
  {
    swift_bridgeObjectRelease();
    if (((v44 >> 1) & 1) == 0)
    {
LABEL_6:
      if (((v44 >> 2) & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_12;
    }
  }
  else if ((v44 & 2) == 0)
  {
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  if (((v44 >> 2) & 1) == 0)
  {
LABEL_7:
    if (((v44 >> 3) & 1) == 0) {
      goto LABEL_8;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    if (((v44 >> 4) & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  if ((v44 >> 3)) {
    goto LABEL_13;
  }
LABEL_8:
  if ((v44 >> 4)) {
LABEL_14:
  }
    swift_bridgeObjectRelease();
LABEL_15:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v44 >> 8))
  {
    swift_bridgeObjectRelease();
    if (!v45) {
      goto LABEL_17;
    }
LABEL_62:
    outlined destroy of PQAVerificationModelProtocol?(v186 + v185[13], &demangling cache variable for type metadata for URL?);
    if (!v46) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v45) {
    goto LABEL_62;
  }
LABEL_17:
  if (v46) {
LABEL_18:
  }
    outlined destroy of PQAVerificationModelProtocol?(v186 + v185[14], &demangling cache variable for type metadata for URL?);
LABEL_19:
  if (v152) {
    OUTLINED_FUNCTION_79_12();
  }
  if (v153) {
    OUTLINED_FUNCTION_79_12();
  }
  if (v154) {
    OUTLINED_FUNCTION_79_12();
  }
  if (v155) {
    (*(void (**)(uint64_t, uint64_t))(v171 + 8))(v186 + v185[18], v183);
  }
  OUTLINED_FUNCTION_278();
  if (v47) {
    (*(void (**)(uint64_t, uint64_t))(v171 + 8))(v186 + v185[19], v183);
  }
  if (v157) {
    OUTLINED_FUNCTION_79_12();
  }
  if (v158) {
    OUTLINED_FUNCTION_79_12();
  }
  OUTLINED_FUNCTION_280();
  if (v48) {
    OUTLINED_FUNCTION_79_12();
  }
  if (v160) {
    OUTLINED_FUNCTION_79_12();
  }
  OUTLINED_FUNCTION_224_0();
  if (v49) {
    OUTLINED_FUNCTION_79_12();
  }
  if (v162) {
    OUTLINED_FUNCTION_79_12();
  }
  OUTLINED_FUNCTION_293();
  if (v50) {
    OUTLINED_FUNCTION_79_12();
  }
  OUTLINED_FUNCTION_305();
  if (v51) {
    OUTLINED_FUNCTION_79_12();
  }
  if (v165) {
    OUTLINED_FUNCTION_79_12();
  }
  if (v166) {
    OUTLINED_FUNCTION_79_12();
  }
  OUTLINED_FUNCTION_294();
  if (v52) {
    OUTLINED_FUNCTION_79_12();
  }
  OUTLINED_FUNCTION_233_0();
  if (v53) {
    OUTLINED_FUNCTION_79_12();
  }
  if (v169) {
    OUTLINED_FUNCTION_79_12();
  }
  if (v170) {
    swift_bridgeObjectRelease();
  }
  if ((v44 >> 30)) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of PQAVerificationModelProtocol?(v182, &demangling cache variable for type metadata for Date?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_60:
  OUTLINED_FUNCTION_120_0();
}

uint64_t FlightReservation.init(id:answers:answerAttributes:bundleId:mailMessageId:eventSourceBundleIdentifier:eventSourceLLMConsumableDescription:timeIsUnknown:flightNumber:flightCheckInUrl:flightBookingInfoUrl:flightCarrier:flightCarrierCode:flightDesignator:flightDepartureDateComponents:flightArrivalDateComponents:flightArrivalAirportAddress:flightDepartureAirportAddress:flightArrivalAirportCode:flightDepartureAirportCode:flightArrivalAirportCountry:flightDepartureAirportCountry:flightArrivalAirportLocality:flightDepartureAirportLocality:flightArrivalAirportName:flightDepartureAirportName:flightArrivalAirportRegion:flightDepartureAirportRegion:flightConfirmationNumber:flightPassengerNames:flightPassengerSeatNumbers:flightArrivalTerminal:flightDepartureTerminal:flightBookingProvider:flightBoardingTimeDate:flightDepartureGate:flightArrivalGate:flightDuration:flightCostCurrency:flightCostAmount:flightStatus:flightDepartureDateString:flightArrivalDateString:_resolvedFlightJSON:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t v112 = STACK[0x458];
  unint64_t v113 = STACK[0x460];
  unint64_t v110 = STACK[0x448];
  unint64_t v111 = STACK[0x450];
  unint64_t v108 = STACK[0x438];
  unint64_t v109 = STACK[0x440];
  unint64_t v107 = STACK[0x430];
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(void *)(a9 + 80) = a11;
  *(void *)(a9 + 88) = a12;
  *(unsigned char *)(a9 + 96) = a13;
  *(void *)(a9 + 104) = a14;
  *(void *)(a9 + 112) = a15;
  *(_OWORD *)(a9 + 64) = a10;
  uint64_t v74 = (int *)type metadata accessor for FlightReservation(0);
  outlined init with take of PQAVerificationModelProtocol?(a16, a9 + v74[13], &demangling cache variable for type metadata for URL?);
  outlined init with take of PQAVerificationModelProtocol?(a17, a9 + v74[14], &demangling cache variable for type metadata for URL?);
  uint64_t v75 = (void *)(a9 + v74[15]);
  void *v75 = a18;
  v75[1] = a19;
  uint64_t v76 = (void *)(a9 + v74[16]);
  *uint64_t v76 = a20;
  v76[1] = a21;
  uint64_t v77 = (void *)(a9 + v74[17]);
  *uint64_t v77 = a22;
  v77[1] = a23;
  uint64_t v78 = a9 + v74[18];
  uint64_t v79 = type metadata accessor for DateComponents();
  uint64_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 32);
  v80(v78, a24, v79);
  v80(a9 + v74[19], a25, v79);
  uint64_t v81 = (void *)(a9 + v74[20]);
  void *v81 = a26;
  v81[1] = a27;
  uint64_t v82 = (void *)(a9 + v74[21]);
  void *v82 = a28;
  v82[1] = a29;
  uint64_t v83 = (void *)(a9 + v74[22]);
  *uint64_t v83 = a30;
  v83[1] = a31;
  uint64_t v84 = (void *)(a9 + v74[23]);
  *uint64_t v84 = a32;
  v84[1] = a33;
  uint64_t v85 = (void *)(a9 + v74[24]);
  *uint64_t v85 = a34;
  v85[1] = a35;
  uint64_t v86 = (void *)(a9 + v74[25]);
  *uint64_t v86 = a36;
  v86[1] = a37;
  uint64_t v87 = (void *)(a9 + v74[26]);
  *uint64_t v87 = a38;
  v87[1] = a39;
  uint64_t v88 = (void *)(a9 + v74[27]);
  *uint64_t v88 = a40;
  v88[1] = a41;
  uint64_t v89 = (void *)(a9 + v74[28]);
  *uint64_t v89 = a42;
  v89[1] = a43;
  uint64_t v90 = (void *)(a9 + v74[29]);
  *uint64_t v90 = a44;
  v90[1] = a45;
  uint64_t v91 = (void *)(a9 + v74[30]);
  *uint64_t v91 = a46;
  v91[1] = a47;
  uint64_t v92 = (void *)(a9 + v74[31]);
  *uint64_t v92 = a48;
  v92[1] = a49;
  uint64_t v93 = (void *)(a9 + v74[32]);
  *uint64_t v93 = a50;
  v93[1] = a51;
  *(void *)(a9 + v74[33]) = a52;
  *(void *)(a9 + v74[34]) = a53;
  uint64_t v94 = (void *)(a9 + v74[35]);
  *uint64_t v94 = a54;
  v94[1] = a55;
  uint64_t v95 = (void *)(a9 + v74[36]);
  *uint64_t v95 = a56;
  v95[1] = a57;
  uint64_t v96 = (void *)(a9 + v74[37]);
  *uint64_t v96 = a58;
  v96[1] = a59;
  uint64_t result = outlined init with take of PQAVerificationModelProtocol?(a60, a9 + v74[38], &demangling cache variable for type metadata for Date?);
  uint64_t v98 = (void *)(a9 + v74[39]);
  *uint64_t v98 = a61;
  v98[1] = a62;
  uint64_t v99 = (void *)(a9 + v74[40]);
  *uint64_t v99 = a63;
  v99[1] = a64;
  uint64_t v100 = a9 + v74[41];
  *(void *)uint64_t v100 = a65;
  *(unsigned char *)(v100 + 8) = a66 & 1;
  uint64_t v101 = (void *)(a9 + v74[42]);
  *uint64_t v101 = a67;
  v101[1] = a68;
  uint64_t v102 = a9 + v74[43];
  *(void *)uint64_t v102 = a69;
  *(void *)(v102 + 8) = a70;
  *(_DWORD *)(v102 + 16) = a71;
  *(unsigned char *)(v102 + 20) = a72 & 1;
  uint64_t v103 = (void *)(a9 + v74[44]);
  *uint64_t v103 = a73;
  v103[1] = v107;
  uint64_t v104 = (unint64_t *)(a9 + v74[45]);
  *uint64_t v104 = v108;
  v104[1] = v109;
  uint64_t v105 = (unint64_t *)(a9 + v74[46]);
  *uint64_t v105 = v110;
  v105[1] = v111;
  uint64_t v106 = (unint64_t *)(a9 + v74[47]);
  *uint64_t v106 = v112;
  v106[1] = v113;
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FlightReservation()
{
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance FlightReservation()
{
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FlightReservation()
{
  return FlightReservation.encode(to:)();
}

uint64_t specialized Double.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    char v6 = v9;
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    if ((a2 & 0x2000000000000000) != 0)
    {
      char v6 = (v3 > 0x20u || ((0x100003E01uLL >> v3) & 1) == 0)
        && (uint64_t v7 = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0
        && *v7 == 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      char v6 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(v4, v5, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
      swift_bridgeObjectRelease();
    }
  }
  if (v6) {
    return 0;
  }
  else {
    return 0;
  }
}

void FlightReservation.init(id:timeIsUnknown:flightNumber:flightCheckInUrl:flightBookingInfoUrl:flightCarrier:flightCarrierCode:flightDesignator:flightDepartureDateComponents:flightArrivalDateComponents:flightArrivalAirportAddress:flightDepartureAirportAddress:flightArrivalAirportCode:flightDepartureAirportCode:flightArrivalAirportCountry:flightDepartureAirportCountry:flightArrivalAirportLocality:flightDepartureAirportLocality:flightArrivalAirportName:flightDepartureAirportName:flightArrivalAirportRegion:flightDepartureAirportRegion:flightConfirmationNumber:flightPassengerNames:flightPassengerSeatNumbers:flightArrivalTerminal:flightDepartureTerminal:flightBookingProvider:flightBoardingTimeDate:flightDepartureGate:flightArrivalGate:flightDuration:flightCostCurrency:flightCostAmount:flightStatus:answerAttributes:bundleId:mailMessageId:eventSourceBundleIdentifier:eventSourceLLMConsumableDescription:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,unint64_t a44,unint64_t a45,unint64_t a46,unint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,unint64_t a52,unint64_t a53,uint64_t a54,uint64_t a55,unint64_t a56,uint64_t a57,unint64_t a58,unint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v96 = v66;
  uint64_t v105 = v67;
  uint64_t v93 = v68;
  char v97 = v69;
  uint64_t v98 = v71;
  uint64_t v99 = v70;
  uint64_t v103 = STACK[0x6E0];
  uint64_t v104 = v72;
  uint64_t v101 = STACK[0x6F0];
  uint64_t v102 = STACK[0x6E8];
  uint64_t v100 = STACK[0x6F8];
  long long v95 = *(_OWORD *)&STACK[0x700];
  uint64_t v94 = STACK[0x718];
  uint64_t v106 = STACK[0x6D8];
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  uint64_t v74 = OUTLINED_FUNCTION_81(v73);
  MEMORY[0x270FA5388](v74);
  OUTLINED_FUNCTION_66_4();
  uint64_t v75 = type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_7_2();
  uint64_t v77 = *(void (**)(uint64_t))(v76 + 16);
  uint64_t v78 = OUTLINED_FUNCTION_268();
  v77(v78);
  unint64_t v92 = OUTLINED_FUNCTION_267();
  unint64_t v90 = v79;
  outlined destroy of PQAVerificationModelProtocol?(v65, &demangling cache variable for type metadata for DateComponents?);
  ((void (*)(uint64_t, uint64_t, uint64_t))v77)(v65, a27, v75);
  unint64_t v91 = OUTLINED_FUNCTION_267();
  unint64_t v81 = v80;
  outlined destroy of PQAVerificationModelProtocol?(v65, &demangling cache variable for type metadata for DateComponents?);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v82 = swift_bridgeObjectRetain();
  uint64_t v83 = specialized Sequence.compactMap<A>(_:)(v106, v92, v90, v91, v81, a22, a23, v93, v105, a52, a53, a44, a45, a46, a47, a55, a56, v82, a58,
          a59);
  specialized Dictionary.init<A>(uniqueKeysWithValues:)(v83, &demangling cache variable for type metadata for _DictionaryStorage<String, String>, (void (*)(uint64_t, uint64_t, uint64_t *))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
  OUTLINED_FUNCTION_280();
  uint64_t v89 = v84;
  OUTLINED_FUNCTION_224_0();
  uint64_t v88 = v85;
  OUTLINED_FUNCTION_278();
  FlightReservation.init(id:answers:answerAttributes:bundleId:mailMessageId:eventSourceBundleIdentifier:eventSourceLLMConsumableDescription:timeIsUnknown:flightNumber:flightCheckInUrl:flightBookingInfoUrl:flightCarrier:flightCarrierCode:flightDesignator:flightDepartureDateComponents:flightArrivalDateComponents:flightArrivalAirportAddress:flightDepartureAirportAddress:flightArrivalAirportCode:flightDepartureAirportCode:flightArrivalAirportCountry:flightDepartureAirportCountry:flightArrivalAirportLocality:flightDepartureAirportLocality:flightArrivalAirportName:flightDepartureAirportName:flightArrivalAirportRegion:flightDepartureAirportRegion:flightConfirmationNumber:flightPassengerNames:flightPassengerSeatNumbers:flightArrivalTerminal:flightDepartureTerminal:flightBookingProvider:flightBoardingTimeDate:flightDepartureGate:flightArrivalGate:flightDuration:flightCostCurrency:flightCostAmount:flightStatus:flightDepartureDateString:flightArrivalDateString:_resolvedFlightJSON:)(v99, v104, v86, v106, v103, v102, v101, v100, v98, v95, v87, v94, v97, v93, (uint64_t)v105, v88, v96, v89, a21,
    a22,
    (uint64_t)a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48,
    a49,
    a50,
    a51,
    a52,
    a53,
    a54,
    a55,
    a56,
    a57,
    a58,
    a59,
    a60,
    a61,
    a62,
    a63,
    a64,
    a65);
  OUTLINED_FUNCTION_119_0();
}

uint64_t HotelReservation.answers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HotelReservation.answerAttributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HotelReservation.bundleId.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t (*HotelReservation.eventSourceBundleIdentifier.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t (*HotelReservation.eventSourceLLMConsumableDescription.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t HotelReservation.timeIsUnknown.getter()
{
  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t HotelReservation.hotelReservationId.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t HotelReservation.hotelUnderName.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t HotelReservation.hotelCheckinDateComponents.getter()
{
  return FlightReservation.flightBookingInfoUrl.getter();
}

uint64_t HotelReservation.hotelCheckoutDateComponents.getter()
{
  uint64_t v2 = OUTLINED_FUNCTION_27_7();
  uint64_t v3 = type metadata accessor for HotelReservation(v2);
  return outlined init with copy of PQAVerificationModelProtocol?(v1 + *(int *)(v3 + 60), v0, &demangling cache variable for type metadata for DateComponents?);
}

uint64_t HotelReservation.hotelReservationForName.getter()
{
  return FlightReservation.flightCarrierCode.getter((void (*)(void))type metadata accessor for HotelReservation);
}

uint64_t FlightReservation.flightCarrierCode.getter(void (*a1)(void))
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t HotelReservation.hotelModifyReservationUrl.getter()
{
  return FlightReservation.flightDesignator.getter((void (*)(void))type metadata accessor for HotelReservation);
}

uint64_t FlightReservation.flightDesignator.getter(void (*a1)(void))
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t HotelReservation.hotelReservationForTelephone.getter()
{
  return HotelReservation.hotelReservationForTelephone.getter((void (*)(void))type metadata accessor for HotelReservation);
}

uint64_t HotelReservation.hotelReservationForAddress.getter()
{
  return HotelReservation.hotelReservationForAddress.getter((void (*)(void))type metadata accessor for HotelReservation);
}

uint64_t HotelReservation.hotelBookingProvider.getter()
{
  return FlightReservation.flightArrivalAirportAddress.getter();
}

uint64_t HotelReservation.hotelCustomerNames.getter()
{
  type metadata accessor for HotelReservation(0);
  return swift_bridgeObjectRetain();
}

uint64_t HotelReservation.hotelRoomNumbers.getter()
{
  type metadata accessor for HotelReservation(0);
  return swift_bridgeObjectRetain();
}

uint64_t HotelReservation.hotelNumberOfRooms.getter()
{
  uint64_t v0 = type metadata accessor for HotelReservation(0);
  return OUTLINED_FUNCTION_165_3(*(int *)(v0 + 92));
}

uint64_t HotelReservation.hotelDuration.getter()
{
  return Trip.durationInSeconds.getter(type metadata accessor for HotelReservation);
}

uint64_t Trip.durationInSeconds.getter(uint64_t (*a1)(void))
{
  uint64_t v1 = a1(0);
  return OUTLINED_FUNCTION_165_3(*(int *)(v1 + 96));
}

uint64_t HotelReservation.hotelCost.getter()
{
  return FlightReservation.flightDepartureAirportCountry.getter();
}

uint64_t HotelReservation.hotelStatus.getter()
{
  return FlightReservation.flightArrivalAirportLocality.getter();
}

uint64_t HotelReservation.hotelCheckinDateString.getter()
{
  return FlightReservation.flightDepartureAirportLocality.getter();
}

uint64_t HotelReservation.hotelCheckoutDateString.getter()
{
  return FlightReservation.flightArrivalAirportName.getter();
}

uint64_t HotelReservation.durationInDays.getter()
{
  uint64_t v0 = type metadata accessor for HotelReservation(0);
  return OUTLINED_FUNCTION_165_3(*(int *)(v0 + 116));
}

void HotelReservation.durationInDays.setter()
{
  uint64_t v0 = type metadata accessor for HotelReservation(0);
  OUTLINED_FUNCTION_282(*(int *)(v0 + 116));
}

uint64_t (*HotelReservation.durationInDays.modify())(void)
{
  uint64_t v0 = OUTLINED_FUNCTION_60_11();
  type metadata accessor for HotelReservation(v0);
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t HotelReservation.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x73726577736E61 && a2 == 0xE700000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x8000000258684580 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      BOOL v7 = a1 == 0x6449656C646E7562 && a2 == 0xE800000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        BOOL v8 = a1 == 0x7373654D6C69616DLL && a2 == 0xED00006449656761;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000258684400 {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          return 5;
        }
        else if (a1 == 0xD000000000000023 && a2 == 0x80000002586845A0 {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          return 6;
        }
        else
        {
          BOOL v9 = a1 == 0x6E557349656D6974 && a2 == 0xED00006E776F6E6BLL;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 7;
          }
          else if (a1 == 0xD000000000000012 && a2 == 0x80000002586841B0 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 8;
          }
          else
          {
            BOOL v10 = a1 == 0x646E556C65746F68 && a2 == 0xEE00656D614E7265;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 9;
            }
            else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000258684730 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 10;
            }
            else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000258684750 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 11;
            }
            else if (a1 == 0xD000000000000017 && a2 == 0x8000000258684210 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 12;
            }
            else if (a1 == 0xD000000000000019 && a2 == 0x8000000258684230 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 13;
            }
            else if (a1 == 0xD00000000000001CLL && a2 == 0x8000000258684250 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 14;
            }
            else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000258684270 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 15;
            }
            else if (a1 == 0xD000000000000014 && a2 == 0x8000000258684770 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 16;
            }
            else if (a1 == 0xD000000000000012 && a2 == 0x8000000258684790 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 17;
            }
            else if (a1 == 0xD000000000000010 && a2 == 0x80000002586847B0 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 18;
            }
            else if (a1 == 0xD000000000000012 && a2 == 0x80000002586847D0 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 19;
            }
            else
            {
              BOOL v11 = a1 == 0x7275446C65746F68 && a2 == 0xED00006E6F697461;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 20;
              }
              else
              {
                BOOL v12 = a1 == 0x736F436C65746F68 && a2 == 0xE900000000000074;
                if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 21;
                }
                else
                {
                  BOOL v13 = a1 == 0x6174536C65746F68 && a2 == 0xEB00000000737574;
                  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 22;
                  }
                  else if (a1 == 0xD000000000000016 && a2 == 0x80000002586841D0 {
                         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  }
                  {
                    swift_bridgeObjectRelease();
                    return 23;
                  }
                  else if (a1 == 0xD000000000000017 && a2 == 0x80000002586841F0 {
                         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  }
                  {
                    swift_bridgeObjectRelease();
                    return 24;
                  }
                  else if (a1 == 0x6E6F697461727564 && a2 == 0xEE00737961446E49)
                  {
                    swift_bridgeObjectRelease();
                    return 25;
                  }
                  else
                  {
                    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if (v15) {
                      return 25;
                    }
                    else {
                      return 26;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t HotelReservation.CodingKeys.init(intValue:)()
{
  return 26;
}

unint64_t HotelReservation.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x73726577736E61;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x6449656C646E7562;
      break;
    case 4:
      unint64_t result = 0x7373654D6C69616DLL;
      break;
    case 5:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000023;
      break;
    case 7:
      unint64_t result = 0x6E557349656D6974;
      break;
    case 8:
    case 17:
    case 19:
      unint64_t result = 0xD000000000000012;
      break;
    case 9:
      unint64_t result = 0x646E556C65746F68;
      break;
    case 10:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 11:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 12:
      unint64_t result = 0xD000000000000017;
      break;
    case 13:
      unint64_t result = 0xD000000000000019;
      break;
    case 14:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 15:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 16:
      unint64_t result = 0xD000000000000014;
      break;
    case 18:
      unint64_t result = 0xD000000000000010;
      break;
    case 20:
      unint64_t result = 0x7275446C65746F68;
      break;
    case 21:
      unint64_t result = 0x736F436C65746F68;
      break;
    case 22:
      unint64_t result = 0x6174536C65746F68;
      break;
    case 23:
      unint64_t result = 0xD000000000000016;
      break;
    case 24:
      unint64_t result = 0xD000000000000017;
      break;
    case 25:
      unint64_t result = 0x6E6F697461727564;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance HotelReservation.CodingKeys()
{
  return HotelReservation.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance HotelReservation.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = HotelReservation.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance HotelReservation.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = HotelReservation.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance HotelReservation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HotelReservation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void HotelReservation.encode(to:)()
{
  OUTLINED_FUNCTION_105_0();
  OUTLINED_FUNCTION_113_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<HotelReservation.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_61_13();
  lazy protocol witness table accessor for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys();
  OUTLINED_FUNCTION_69_13();
  OUTLINED_FUNCTION_51_22();
  if (!v0)
  {
    OUTLINED_FUNCTION_264();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    OUTLINED_FUNCTION_119_7();
    OUTLINED_FUNCTION_247_0();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_89_9();
    OUTLINED_FUNCTION_82_12();
    OUTLINED_FUNCTION_1_31(4);
    OUTLINED_FUNCTION_1_31(5);
    OUTLINED_FUNCTION_1_31(6);
    KeyedEncodingContainer.encode(_:forKey:)();
    OUTLINED_FUNCTION_1_31(8);
    OUTLINED_FUNCTION_1_31(9);
    uint64_t v3 = type metadata accessor for HotelReservation(0);
    type metadata accessor for DateComponents();
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x263F063B0]);
    OUTLINED_FUNCTION_36_24();
    OUTLINED_FUNCTION_36_24();
    OUTLINED_FUNCTION_1_31(12);
    OUTLINED_FUNCTION_1_31(13);
    OUTLINED_FUNCTION_1_31(14);
    OUTLINED_FUNCTION_1_31(15);
    OUTLINED_FUNCTION_1_31(16);
    OUTLINED_FUNCTION_89_9();
    OUTLINED_FUNCTION_89_9();
    OUTLINED_FUNCTION_240_0(*(int *)(v3 + 92));
    OUTLINED_FUNCTION_203_2(19);
    OUTLINED_FUNCTION_64_12(20);
    OUTLINED_FUNCTION_1_31(21);
    OUTLINED_FUNCTION_1_31(22);
    OUTLINED_FUNCTION_1_31(23);
    OUTLINED_FUNCTION_1_31(24);
    OUTLINED_FUNCTION_240_0(*(int *)(v3 + 116));
    OUTLINED_FUNCTION_203_2(25);
  }
  OUTLINED_FUNCTION_26_2();
  v2();
  OUTLINED_FUNCTION_189_2();
  OUTLINED_FUNCTION_120_0();
}

void HotelReservation.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_105_0();
  uint64_t v14 = v13;
  uint64_t v97 = v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  uint64_t v17 = OUTLINED_FUNCTION_81(v16);
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_95_1();
  uint64_t v20 = v18 - v19;
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_219_1();
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<HotelReservation.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v22);
  uint64_t v23 = OUTLINED_FUNCTION_6_7();
  type metadata accessor for HotelReservation(v23);
  OUTLINED_FUNCTION_7_2();
  uint64_t v25 = MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)v90 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_OWORD *)v27 + 4) = 0u;
  *((_OWORD *)v27 + 5) = 0u;
  uint64_t v101 = v14;
  uint64_t v102 = (int *)v25;
  uint64_t v28 = *(int *)(v25 + 116);
  uint64_t v104 = (uint64_t *)v27;
  uint64_t v29 = &v27[v28];
  *(void *)uint64_t v29 = 0;
  v29[8] = 1;
  __swift_project_boxed_opaque_existential_1(v14, v14[3]);
  lazy protocol witness table accessor for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys();
  uint64_t v98 = v11;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v10)
  {
    uint64_t v103 = v10;
    LODWORD(v100) = 0;
    unsigned int v32 = 96;
  }
  else
  {
    uint64_t v30 = v20;
    uint64_t v96 = v29;
    OUTLINED_FUNCTION_177_4();
    uint64_t v31 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v39 = v104;
    *uint64_t v104 = v31;
    v39[1] = v40;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    char v105 = 1;
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    void v39[2] = a10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    OUTLINED_FUNCTION_247_0();
    uint64_t v41 = lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v99 = v41;
    OUTLINED_FUNCTION_229_0();
    v39[4] = KeyedDecodingContainer.decode(_:forKey:)();
    v39[5] = v42;
    v39[6] = OUTLINED_FUNCTION_26_26(4);
    v39[7] = v43;
    v39[8] = OUTLINED_FUNCTION_26_26(5);
    v39[9] = v44;
    v39[10] = OUTLINED_FUNCTION_26_26(6);
    v39[11] = v45;
    *((unsigned char *)v39 + 96) = OUTLINED_FUNCTION_204_2(7) & 1;
    v39[13] = OUTLINED_FUNCTION_26_26(8);
    v39[14] = v46;
    uint64_t v47 = OUTLINED_FUNCTION_26_26(9);
    uint64_t v103 = 0;
    int v48 = v104;
    v104[15] = v47;
    v48[16] = v49;
    type metadata accessor for DateComponents();
    LOBYTE(a10) = 10;
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x263F063B0]);
    OUTLINED_FUNCTION_217_1();
    uint64_t v103 = 0;
    OUTLINED_FUNCTION_104_13();
    outlined init with take of PQAVerificationModelProtocol?(v12, v50, &demangling cache variable for type metadata for DateComponents?);
    OUTLINED_FUNCTION_155_3(11);
    OUTLINED_FUNCTION_217_1();
    uint64_t v103 = 0;
    OUTLINED_FUNCTION_104_13();
    outlined init with take of PQAVerificationModelProtocol?(v30, v51, &demangling cache variable for type metadata for DateComponents?);
    OUTLINED_FUNCTION_249(12);
    uint64_t v52 = v103;
    uint64_t v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v103 = v52;
    if (!v52)
    {
      uint64_t v57 = (uint64_t *)((char *)v104 + v102[16]);
      *uint64_t v57 = v53;
      v57[1] = v54;
      uint64_t v58 = OUTLINED_FUNCTION_48_16(13);
      uint64_t v103 = 0;
      uint64_t v59 = (uint64_t *)((char *)v104 + v102[17]);
      *uint64_t v59 = v58;
      v59[1] = v60;
      uint64_t v61 = OUTLINED_FUNCTION_48_16(14);
      uint64_t v103 = 0;
      int v62 = (uint64_t *)((char *)v104 + v102[18]);
      uint64_t *v62 = v61;
      v62[1] = v63;
      uint64_t v64 = OUTLINED_FUNCTION_48_16(15);
      uint64_t v103 = 0;
      OUTLINED_FUNCTION_184_4(v64, v65);
      uint64_t v67 = OUTLINED_FUNCTION_48_16(v66);
      uint64_t v103 = 0;
      OUTLINED_FUNCTION_65_13(v67, v68, v102[20]);
      OUTLINED_FUNCTION_153_4(17);
      uint64_t v103 = 0;
      *(uint64_t *)((char *)v104 + v102[21]) = a10;
      OUTLINED_FUNCTION_153_4(18);
      uint64_t v103 = 0;
      *(uint64_t *)((char *)v104 + v102[22]) = a10;
      uint64_t v69 = OUTLINED_FUNCTION_250(19);
      uint64_t v103 = 0;
      OUTLINED_FUNCTION_127_7(v69, v70, v102[23]);
      OUTLINED_FUNCTION_249(20);
      uint64_t v71 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v103 = 0;
      OUTLINED_FUNCTION_127_7(v71, v72, v102[24]);
      uint64_t v73 = OUTLINED_FUNCTION_48_16(21);
      uint64_t v103 = 0;
      OUTLINED_FUNCTION_65_13(v73, v74, v102[25]);
      OUTLINED_FUNCTION_48_16(22);
      OUTLINED_FUNCTION_111_10();
      LODWORD(v99) = v75;
      uint64_t v103 = 0;
      OUTLINED_FUNCTION_65_13(v76, v77, v102[26]);
      uint64_t v78 = OUTLINED_FUNCTION_48_16(23);
      uint64_t v103 = 0;
      OUTLINED_FUNCTION_65_13(v78, v79, v102[27]);
      uint64_t v80 = OUTLINED_FUNCTION_48_16(24);
      uint64_t v103 = 0;
      OUTLINED_FUNCTION_65_13(v80, v81, v102[28]);
      uint64_t v82 = OUTLINED_FUNCTION_250(25);
      uint64_t v103 = 0;
      uint64_t v83 = v82;
      char v85 = v84;
      uint64_t v86 = OUTLINED_FUNCTION_17_25();
      v87(v86);
      uint64_t v89 = v96;
      uint64_t v88 = v97;
      *uint64_t v96 = v83;
      *((unsigned char *)v89 + 8) = v85 & 1;
      outlined init with copy of FlightReservation((uint64_t)v104, v88);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v101);
      _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
      goto LABEL_32;
    }
    uint64_t v55 = OUTLINED_FUNCTION_17_25();
    v56(v55);
    LODWORD(v100) = 0;
    unsigned int v32 = 3967;
  }
  uint64_t v33 = v104;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v101);
  int v34 = (v32 >> 2) & 1;
  int v35 = (v32 >> 3) & 1;
  v90[2] = (v32 >> 4) & 1;
  int v91 = (v32 >> 8) & 1;
  int v92 = (v32 >> 9) & 1;
  int v93 = (v32 >> 10) & 1;
  int v94 = (v32 >> 11) & 1;
  int v95 = (v32 >> 12) & 1;
  LODWORD(v96) = (v32 >> 13) & 1;
  LODWORD(v97) = (v32 >> 14) & 1;
  LODWORD(v98) = (v32 >> 15) & 1;
  LODWORD(v101) = HIWORD(v32) & 1;
  if (v32)
  {
    LODWORD(v99) = 0;
    swift_bridgeObjectRelease();
    if (((v32 >> 1) & 1) == 0)
    {
LABEL_6:
      if (v34) {
        goto LABEL_7;
      }
      goto LABEL_35;
    }
  }
  else
  {
    LODWORD(v99) = 0;
    if ((v32 & 2) == 0) {
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
  if ((v32 >> 2))
  {
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t v36 = v102;
    if (((v32 >> 3) & 1) == 0) {
      goto LABEL_8;
    }
LABEL_36:
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_271();
    if ((v38 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_35:
  uint64_t v36 = v102;
  if (v35) {
    goto LABEL_36;
  }
LABEL_8:
  OUTLINED_FUNCTION_271();
  if (v37) {
LABEL_9:
  }
    swift_bridgeObjectRelease();
LABEL_10:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v91) {
    swift_bridgeObjectRelease();
  }
  if (v92) {
    swift_bridgeObjectRelease();
  }
  if (v93) {
    outlined destroy of PQAVerificationModelProtocol?((uint64_t)v33 + v36[14], &demangling cache variable for type metadata for DateComponents?);
  }
  if (v94) {
    outlined destroy of PQAVerificationModelProtocol?((uint64_t)v33 + v36[15], &demangling cache variable for type metadata for DateComponents?);
  }
  if (v95) {
    OUTLINED_FUNCTION_37_0();
  }
  if (v96) {
    OUTLINED_FUNCTION_37_0();
  }
  if (v97) {
    OUTLINED_FUNCTION_37_0();
  }
  if (v98) {
    OUTLINED_FUNCTION_37_0();
  }
  if (v101) {
    OUTLINED_FUNCTION_37_0();
  }
  if (v35) {
    swift_bridgeObjectRelease();
  }
  if (v34) {
    OUTLINED_FUNCTION_37_0();
  }
LABEL_32:
  OUTLINED_FUNCTION_120_0();
}

uint64_t HotelReservation.init(id:answers:answerAttributes:bundleId:mailMessageId:eventSourceBundleIdentifier:eventSourceLLMConsumableDescription:timeIsUnknown:hotelReservationId:hotelUnderName:hotelCheckinDateComponents:hotelCheckoutDateComponents:hotelReservationForName:hotelModifyReservationUrl:hotelReservationForTelephone:hotelReservationForAddress:hotelBookingProvider:hotelCustomerNames:hotelRoomNumbers:hotelNumberOfRooms:hotelDuration:hotelCost:hotelStatus:hotelCheckinDateString:hotelCheckoutDateString:durationInDays:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v41 = OUTLINED_FUNCTION_86_11(a1, a2);
  a3[2] = v42;
  a3[3] = v43;
  a3[4] = v44;
  a3[5] = v45;
  OUTLINED_FUNCTION_142_4(v41, v46, v42, v43, v44, v45, v47, v48);
  uint64_t v49 = OUTLINED_FUNCTION_211_2();
  uint64_t v50 = (int *)type metadata accessor for HotelReservation(v49);
  outlined init with take of PQAVerificationModelProtocol?(a13, (uint64_t)a3 + v50[14], &demangling cache variable for type metadata for DateComponents?);
  uint64_t result = outlined init with take of PQAVerificationModelProtocol?(a14, (uint64_t)a3 + v50[15], &demangling cache variable for type metadata for DateComponents?);
  uint64_t v52 = (void *)((char *)a3 + v50[16]);
  *uint64_t v52 = a15;
  v52[1] = a16;
  uint64_t v53 = (void *)((char *)a3 + v50[17]);
  *uint64_t v53 = a17;
  v53[1] = a18;
  uint64_t v54 = (void *)((char *)a3 + v50[18]);
  *uint64_t v54 = a19;
  v54[1] = a20;
  uint64_t v55 = (void *)((char *)a3 + v50[19]);
  *uint64_t v55 = v64;
  v55[1] = v65;
  uint64_t v56 = (void *)((char *)a3 + v50[20]);
  *uint64_t v56 = v66;
  v56[1] = v67;
  *(void *)((char *)a3 + v50[21]) = v68;
  *(void *)((char *)a3 + v50[22]) = v69;
  uint64_t v57 = (char *)a3 + v50[23];
  *(void *)uint64_t v57 = v70;
  v57[8] = a28 & 1;
  uint64_t v58 = (char *)a3 + v50[24];
  *(void *)uint64_t v58 = a29;
  v58[8] = a30 & 1;
  uint64_t v59 = (void *)((char *)a3 + v50[25]);
  *uint64_t v59 = a31;
  v59[1] = a32;
  uint64_t v60 = (void *)((char *)a3 + v50[26]);
  *uint64_t v60 = a33;
  v60[1] = a34;
  uint64_t v61 = (void *)((char *)a3 + v50[27]);
  *uint64_t v61 = a35;
  v61[1] = a36;
  int v62 = (void *)((char *)a3 + v50[28]);
  void *v62 = a37;
  v62[1] = a38;
  uint64_t v63 = (char *)a3 + v50[29];
  *(void *)uint64_t v63 = a39;
  v63[8] = a40 & 1;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance HotelReservation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  HotelReservation.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void protocol witness for Encodable.encode(to:) in conformance HotelReservation()
{
}

void HotelReservation.init(id:timeIsUnknown:hotelReservationId:hotelUnderName:hotelCheckinDateComponents:hotelCheckoutDateComponents:hotelReservationForName:hotelModifyReservationUrl:hotelReservationForTelephone:hotelReservationForAddress:hotelBookingProvider:hotelCustomerNames:hotelRoomNumbers:hotelNumberOfRooms:hotelDuration:hotelCost:hotelStatus:answerAttributes:bundleId:mailMessageId:eventSourceBundleIdentifier:eventSourceLLMConsumableDescription:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,unsigned __int8 a35,uint64_t a36,unsigned __int8 a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v52 = v51;
  uint64_t v170 = v54;
  uint64_t v171 = v53;
  uint64_t v172 = v55;
  uint64_t v180 = v56;
  int v173 = v57;
  os_log_type_t v175 = v59;
  uint64_t v176 = v58;
  uint64_t v166 = a49;
  uint64_t v167 = a50;
  uint64_t v164 = a47;
  uint64_t v165 = a48;
  uint64_t v177 = a46;
  uint64_t v178 = v60;
  uint64_t v174 = a45;
  uint64_t v168 = a44;
  uint64_t v163 = a43;
  uint64_t v179 = a42;
  uint64_t v161 = a41;
  uint64_t v160 = a40;
  uint64_t v159 = a39;
  uint64_t v158 = a38;
  int v145 = a37;
  uint64_t v157 = a36;
  int v144 = a35;
  uint64_t v156 = a34;
  uint64_t v155 = a33;
  OUTLINED_FUNCTION_218_1(a32);
  uint64_t v153 = a31;
  uint64_t v152 = a30;
  uint64_t v143 = a29;
  uint64_t v147 = a28;
  uint64_t v151 = a27;
  uint64_t v150 = a26;
  uint64_t v149 = a25;
  uint64_t v148 = a24;
  uint64_t v142 = a23;
  uint64_t v146 = a22;
  uint64_t v138 = type metadata accessor for Calendar();
  OUTLINED_FUNCTION_1();
  uint64_t v137 = v61;
  MEMORY[0x270FA5388](v62);
  OUTLINED_FUNCTION_184_0();
  OUTLINED_FUNCTION_194_0(v63);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  uint64_t v65 = OUTLINED_FUNCTION_81(v64);
  MEMORY[0x270FA5388](v65);
  OUTLINED_FUNCTION_3_17();
  MEMORY[0x270FA5388](v66);
  uint64_t v68 = &v135[-v67];
  uint64_t v69 = type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_1();
  uint64_t v71 = v70;
  MEMORY[0x270FA5388](v72);
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v73);
  OUTLINED_FUNCTION_43_4();
  int v75 = v74;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v76);
  uint64_t v78 = &v135[-v77];
  uint64_t v140 = dateString(fromDateComponents:)(v52);
  uint64_t v139 = v79;
  uint64_t v141 = dateString(fromDateComponents:)(a21);
  uint64_t v81 = v80;
  uint64_t v169 = v52;
  uint64_t v82 = OUTLINED_FUNCTION_19_0();
  outlined init with copy of PQAVerificationModelProtocol?(v82, v83, &demangling cache variable for type metadata for DateComponents?);
  uint64_t v84 = OUTLINED_FUNCTION_31_16();
  OUTLINED_FUNCTION_53_2(v84, v85, v69);
  uint64_t v162 = a21;
  if (v91)
  {
    uint64_t v86 = (uint64_t)v68;
LABEL_7:
    outlined destroy of PQAVerificationModelProtocol?(v86, &demangling cache variable for type metadata for DateComponents?);
    uint64_t v138 = 0;
    LODWORD(v137) = 1;
    goto LABEL_8;
  }
  uint64_t v87 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v71 + 32);
  v87(v78, v68, v69);
  uint64_t v88 = OUTLINED_FUNCTION_74_0();
  outlined init with copy of PQAVerificationModelProtocol?(v88, v89, v90);
  OUTLINED_FUNCTION_53_2(v50, 1, v69);
  if (v91)
  {
    OUTLINED_FUNCTION_29_14();
    v92();
    uint64_t v86 = v50;
    goto LABEL_7;
  }
  v87(v75, (unsigned char *)v50, v69);
  static Calendar.current.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  OUTLINED_FUNCTION_60_11();
  uint64_t v93 = type metadata accessor for Calendar.Component();
  OUTLINED_FUNCTION_1();
  uint64_t v95 = v94;
  unint64_t v96 = (*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
  uint64_t v97 = swift_allocObject();
  *(_OWORD *)(v97 + 16) = xmmword_258661700;
  (*(void (**)(unint64_t, void, uint64_t))(v95 + 104))(v97 + v96, *MEMORY[0x263F07870], v93);
  specialized Set.init(_nonEmptyArrayLiteral:)(v97);
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_277();
  OUTLINED_FUNCTION_84_11();
  v98();
  uint64_t v138 = DateComponents.day.getter();
  LODWORD(v137) = v99 & 1;
  uint64_t v100 = *(void (**)(void))(v71 + 8);
  OUTLINED_FUNCTION_29_14();
  v100();
  OUTLINED_FUNCTION_29_14();
  v100();
  OUTLINED_FUNCTION_29_14();
  v100();
LABEL_8:
  int v136 = v145 & 1;
  int v145 = v144 & 1;
  uint64_t v101 = v172;
  swift_bridgeObjectRetain();
  uint64_t v102 = v139;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v103 = v142;
  swift_bridgeObjectRetain();
  uint64_t v104 = v143;
  swift_bridgeObjectRetain();
  uint64_t v105 = v140;
  uint64_t v106 = v141;
  uint64_t v107 = v146;
  uint64_t v108 = v147;
  uint64_t v109 = specialized Sequence.compactMap<A>(_:)(v179, v140, v102, v141, v81, v146, v103, v147, v104, v180, v101);
  specialized Dictionary.init<A>(uniqueKeysWithValues:)(v109, &demangling cache variable for type metadata for _DictionaryStorage<String, String>, (void (*)(uint64_t, uint64_t, uint64_t *))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
  char v134 = v137;
  uint64_t v133 = v138;
  uint64_t v132 = v161;
  OUTLINED_FUNCTION_233_0();
  uint64_t v131 = v110;
  OUTLINED_FUNCTION_294();
  uint64_t v130 = v111;
  uint64_t v129 = v158;
  char v128 = v136;
  uint64_t v127 = v157;
  char v126 = v145;
  OUTLINED_FUNCTION_305();
  uint64_t v125 = v112;
  OUTLINED_FUNCTION_293();
  uint64_t v124 = v113;
  uint64_t v123 = v154;
  OUTLINED_FUNCTION_224_0();
  uint64_t v122 = v114;
  uint64_t v121 = v152;
  OUTLINED_FUNCTION_280();
  uint64_t v120 = v115;
  uint64_t v119 = v150;
  uint64_t v118 = v149;
  OUTLINED_FUNCTION_278();
  LOBYTE(v117) = v173 & 1;
  HotelReservation.init(id:answers:answerAttributes:bundleId:mailMessageId:eventSourceBundleIdentifier:eventSourceLLMConsumableDescription:timeIsUnknown:hotelReservationId:hotelUnderName:hotelCheckinDateComponents:hotelCheckoutDateComponents:hotelReservationForName:hotelModifyReservationUrl:hotelReservationForTelephone:hotelReservationForAddress:hotelBookingProvider:hotelCustomerNames:hotelRoomNumbers:hotelNumberOfRooms:hotelDuration:hotelCost:hotelStatus:hotelCheckinDateString:hotelCheckoutDateString:durationInDays:)(v176, v178, v175, v164, v165, v166, v167, v117, v180, v101, v171, v170, v169, v162, v107, v103, v116, v118, v119,
    v120,
    v108,
    v104,
    v121,
    v122,
    v123,
    v124,
    v125,
    v126,
    v127,
    v128,
    v129,
    v130,
    v131,
    v132,
    v105,
    v102,
    v106,
    v81,
    v133,
    v134);
  OUTLINED_FUNCTION_119_0();
}

uint64_t FlightReservation.eventSourceBundleIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return result;
}

uint64_t (*RestaurantReservation.eventSourceBundleIdentifier.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightReservation.eventSourceLLMConsumableDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  return result;
}

uint64_t (*RestaurantReservation.eventSourceLLMConsumableDescription.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t RestaurantReservation.restaurantStartDateComponents.getter()
{
  return FlightReservation.flightBookingInfoUrl.getter();
}

uint64_t RestaurantReservation.restaurantPartySize.getter()
{
  return FlightReservation.flightCarrier.getter();
}

uint64_t RestaurantReservation.restaurantReservationForName.getter()
{
  return FlightReservation.flightCarrierCode.getter((void (*)(void))type metadata accessor for RestaurantReservation);
}

uint64_t RestaurantReservation.restaurantReservationForTelephone.getter()
{
  return FlightReservation.flightDesignator.getter((void (*)(void))type metadata accessor for RestaurantReservation);
}

uint64_t RestaurantReservation.restaurantReservationForAddress.getter()
{
  return HotelReservation.hotelReservationForTelephone.getter((void (*)(void))type metadata accessor for RestaurantReservation);
}

uint64_t HotelReservation.hotelReservationForTelephone.getter(void (*a1)(void))
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t RestaurantReservation.restaurantBookingProvider.getter()
{
  return HotelReservation.hotelReservationForAddress.getter((void (*)(void))type metadata accessor for RestaurantReservation);
}

uint64_t HotelReservation.hotelReservationForAddress.getter(void (*a1)(void))
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t RestaurantReservation.restaurantCustomerNames.getter()
{
  type metadata accessor for RestaurantReservation(0);
  return swift_bridgeObjectRetain();
}

uint64_t RestaurantReservation.restaurantMealType.getter()
{
  return FlightReservation.flightDepartureAirportAddress.getter();
}

uint64_t RestaurantReservation.restaurantStatus.getter()
{
  return FlightReservation.flightArrivalAirportCode.getter();
}

uint64_t RestaurantReservation.restaurantStartDateString.getter()
{
  return FlightReservation.flightDepartureAirportCode.getter();
}

uint64_t RestaurantReservation.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x73726577736E61 && a2 == 0xE700000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x8000000258684580 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      BOOL v7 = a1 == 0x6449656C646E7562 && a2 == 0xE800000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        BOOL v8 = a1 == 0x7373654D6C69616DLL && a2 == 0xED00006449656761;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000258684400 {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          return 5;
        }
        else if (a1 == 0xD000000000000023 && a2 == 0x80000002586845A0 {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          return 6;
        }
        else
        {
          BOOL v9 = a1 == 0x6E557349656D6974 && a2 == 0xED00006E776F6E6BLL;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 7;
          }
          else if (a1 == 0xD000000000000017 && a2 == 0x8000000258684290 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 8;
          }
          else if (a1 == 0xD000000000000013 && a2 == 0x80000002586842B0 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 9;
          }
          else if (a1 == 0xD00000000000001DLL && a2 == 0x80000002586847F0 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 10;
          }
          else if (a1 == 0xD000000000000013 && a2 == 0x80000002586842F0 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 11;
          }
          else if (a1 == 0xD00000000000001CLL && a2 == 0x8000000258684310 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 12;
          }
          else if (a1 == 0xD000000000000021 && a2 == 0x8000000258684330 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 13;
          }
          else if (a1 == 0xD00000000000001FLL && a2 == 0x8000000258684360 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 14;
          }
          else if (a1 == 0xD000000000000019 && a2 == 0x8000000258684810 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 15;
          }
          else if (a1 == 0xD000000000000017 && a2 == 0x8000000258684830 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 16;
          }
          else if (a1 == 0xD000000000000012 && a2 == 0x8000000258684850 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 17;
          }
          else if (a1 == 0xD000000000000010 && a2 == 0x8000000258684870 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 18;
          }
          else if (a1 == 0xD000000000000019 && a2 == 0x80000002586842D0)
          {
            swift_bridgeObjectRelease();
            return 19;
          }
          else
          {
            char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v10) {
              return 19;
            }
            else {
              return 20;
            }
          }
        }
      }
    }
  }
}

unint64_t RestaurantReservation.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x73726577736E61;
      break;
    case 2:
    case 18:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x6449656C646E7562;
      break;
    case 4:
      unint64_t result = 0x7373654D6C69616DLL;
      break;
    case 5:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000023;
      break;
    case 7:
      unint64_t result = 0x6E557349656D6974;
      break;
    case 8:
      unint64_t result = 0xD000000000000017;
      break;
    case 9:
      unint64_t result = 0xD000000000000013;
      break;
    case 10:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 11:
      unint64_t result = 0xD000000000000013;
      break;
    case 12:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 13:
      unint64_t result = 0xD000000000000021;
      break;
    case 14:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 15:
      unint64_t result = 0xD000000000000019;
      break;
    case 16:
      unint64_t result = 0xD000000000000017;
      break;
    case 17:
      unint64_t result = 0xD000000000000012;
      break;
    case 19:
      unint64_t result = 0xD000000000000019;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance RestaurantReservation.CodingKeys()
{
  return RestaurantReservation.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RestaurantReservation.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = RestaurantReservation.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RestaurantReservation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RestaurantReservation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void RestaurantReservation.encode(to:)()
{
  OUTLINED_FUNCTION_105_0();
  OUTLINED_FUNCTION_104_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RestaurantReservation.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_61_13();
  lazy protocol witness table accessor for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys();
  OUTLINED_FUNCTION_69_13();
  OUTLINED_FUNCTION_103_13();
  if (!v0)
  {
    OUTLINED_FUNCTION_264();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    OUTLINED_FUNCTION_247_0();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_152_4();
    OUTLINED_FUNCTION_202_1(3);
    KeyedEncodingContainer.encode(_:forKey:)();
    OUTLINED_FUNCTION_4_33(4);
    OUTLINED_FUNCTION_4_33(5);
    OUTLINED_FUNCTION_4_33(6);
    OUTLINED_FUNCTION_124_9(7);
    OUTLINED_FUNCTION_4_33(8);
    OUTLINED_FUNCTION_4_33(9);
    type metadata accessor for RestaurantReservation(0);
    type metadata accessor for DateComponents();
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x263F063B0]);
    OUTLINED_FUNCTION_26_25();
    OUTLINED_FUNCTION_4_33(11);
    OUTLINED_FUNCTION_4_33(12);
    OUTLINED_FUNCTION_4_33(13);
    OUTLINED_FUNCTION_4_33(14);
    OUTLINED_FUNCTION_4_33(15);
    OUTLINED_FUNCTION_152_4();
    OUTLINED_FUNCTION_4_33(17);
    OUTLINED_FUNCTION_4_33(18);
    OUTLINED_FUNCTION_4_33(19);
  }
  OUTLINED_FUNCTION_111_0();
  v2();
  OUTLINED_FUNCTION_120_0();
}

void RestaurantReservation.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_105_0();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  uint64_t v17 = OUTLINED_FUNCTION_81(v16);
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_14_10();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RestaurantReservation.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v18);
  uint64_t v19 = OUTLINED_FUNCTION_14_8();
  uint64_t v20 = type metadata accessor for RestaurantReservation(v19);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_184_0();
  *(_OWORD *)(v22 + 64) = 0u;
  *(_OWORD *)(v22 + 80) = 0u;
  uint64_t v56 = v22;
  uint64_t v54 = v13;
  OUTLINED_FUNCTION_171_4();
  lazy protocol witness table accessor for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v55 = v20;
  if (v10)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_177_4();
    *(void *)uint64_t v56 = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v56 + 8) = v23;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)(v56 + 16) = a10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    OUTLINED_FUNCTION_247_0();
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    OUTLINED_FUNCTION_229_0();
    *(void *)(v56 + 32) = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v56 + 40) = v24;
    *(void *)(v56 + 48) = OUTLINED_FUNCTION_125_9(4);
    *(void *)(v56 + 56) = v25;
    *(void *)(v56 + 64) = OUTLINED_FUNCTION_125_9(5);
    *(void *)(v56 + 72) = v26;
    *(void *)(v56 + 80) = OUTLINED_FUNCTION_125_9(6);
    *(void *)(v56 + 88) = v27;
    *(unsigned char *)(v56 + 96) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    *(void *)(v56 + 104) = OUTLINED_FUNCTION_125_9(8);
    *(void *)(v56 + 112) = v28;
    *(void *)(v56 + 120) = OUTLINED_FUNCTION_125_9(9);
    *(void *)(v56 + 128) = v29;
    type metadata accessor for DateComponents();
    lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x263F063B0]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_104_13();
    outlined init with take of PQAVerificationModelProtocol?(v11, v30, &demangling cache variable for type metadata for DateComponents?);
    LOBYTE(a10) = 11;
    uint64_t v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_65_13(v31, v32, MEMORY[0x3C]);
    uint64_t v33 = OUTLINED_FUNCTION_92_14(12);
    int v34 = (uint64_t *)(v56 + MEMORY[0x40]);
    *int v34 = v33;
    v34[1] = v35;
    uint64_t v36 = OUTLINED_FUNCTION_92_14(13);
    int v37 = (uint64_t *)(v56 + MEMORY[0x44]);
    *int v37 = v36;
    v37[1] = v38;
    uint64_t v39 = OUTLINED_FUNCTION_92_14(14);
    uint64_t v40 = (uint64_t *)(v56 + MEMORY[0x48]);
    *uint64_t v40 = v39;
    v40[1] = v41;
    uint64_t v42 = OUTLINED_FUNCTION_92_14(15);
    OUTLINED_FUNCTION_184_4(v42, v43);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    OUTLINED_FUNCTION_276();
    *(void *)(v56 + MEMORY[0x50]) = a10;
    uint64_t v44 = OUTLINED_FUNCTION_92_14(17);
    OUTLINED_FUNCTION_65_13(v44, v45, MEMORY[0x54]);
    uint64_t v46 = OUTLINED_FUNCTION_92_14(18);
    OUTLINED_FUNCTION_65_13(v46, v47, MEMORY[0x58]);
    uint64_t v48 = OUTLINED_FUNCTION_92_14(19);
    uint64_t v50 = v49;
    uint64_t v51 = OUTLINED_FUNCTION_38_21();
    v52(v51);
    uint64_t v53 = (uint64_t *)(v56 + *(int *)(v55 + 92));
    *uint64_t v53 = v48;
    v53[1] = v50;
    outlined init with copy of FlightReservation(v56, v15);
    __swift_destroy_boxed_opaque_existential_1Tm(v54);
    _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
  }
  OUTLINED_FUNCTION_120_6();
  OUTLINED_FUNCTION_120_0();
}

uint64_t RestaurantReservation.init(id:answers:answerAttributes:bundleId:mailMessageId:eventSourceBundleIdentifier:eventSourceLLMConsumableDescription:timeIsUnknown:restaurantReservationId:restaurantUnderName:restaurantStartDateComponents:restaurantPartySize:restaurantReservationForName:restaurantReservationForTelephone:restaurantReservationForAddress:restaurantBookingProvider:restaurantCustomerNames:restaurantMealType:restaurantStatus:restaurantStartDateString:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31 = OUTLINED_FUNCTION_86_11(a1, a2);
  a3[2] = v32;
  a3[3] = v33;
  a3[4] = v34;
  a3[5] = v35;
  OUTLINED_FUNCTION_142_4(v31, v36, v32, v33, v34, v35, v37, v38);
  uint64_t v39 = OUTLINED_FUNCTION_211_2();
  uint64_t v40 = (int *)type metadata accessor for RestaurantReservation(v39);
  uint64_t result = outlined init with take of PQAVerificationModelProtocol?(a13, (uint64_t)a3 + v40[14], &demangling cache variable for type metadata for DateComponents?);
  uint64_t v42 = (void *)((char *)a3 + v40[15]);
  void *v42 = a14;
  v42[1] = a15;
  uint64_t v43 = (void *)((char *)a3 + v40[16]);
  *uint64_t v43 = a16;
  v43[1] = a17;
  uint64_t v44 = (void *)((char *)a3 + v40[17]);
  *uint64_t v44 = a18;
  v44[1] = a19;
  uint64_t v45 = (void *)((char *)a3 + v40[18]);
  *uint64_t v45 = a20;
  v45[1] = v50;
  uint64_t v46 = (void *)((char *)a3 + v40[19]);
  *uint64_t v46 = v51;
  v46[1] = v52;
  *(void *)((char *)a3 + v40[20]) = v53;
  uint64_t v47 = (void *)((char *)a3 + v40[21]);
  *uint64_t v47 = v54;
  v47[1] = v55;
  uint64_t v48 = (void *)((char *)a3 + v40[22]);
  *uint64_t v48 = v56;
  v48[1] = a28;
  uint64_t v49 = (void *)((char *)a3 + v40[23]);
  void *v49 = a29;
  v49[1] = a30;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance RestaurantReservation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  RestaurantReservation.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void protocol witness for Encodable.encode(to:) in conformance RestaurantReservation()
{
}

void RestaurantReservation.init(id:timeIsUnknown:restaurantReservationId:restaurantUnderName:restaurantStartDateComponents:restaurantPartySize:restaurantReservationForName:restaurantReservationForTelephone:restaurantReservationForAddress:restaurantBookingProvider:restaurantCustomerNames:restaurantMealType:restaurantStatus:answerAttributes:bundleId:mailMessageId:eventSourceBundleIdentifier:eventSourceLLMConsumableDescription:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v60 = v44;
  uint64_t v61 = v46;
  uint64_t v62 = v45;
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  char v63 = v51;
  uint64_t v64 = v53;
  uint64_t v65 = v52;
  uint64_t v66 = v54;
  uint64_t v55 = dateString(fromDateComponents:)(v44);
  uint64_t v57 = v56;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v58 = specialized Sequence.compactMap<A>(_:)(a36, v55, v57, a23, a24, a27, a28, v50, v48);
  specialized Dictionary.init<A>(uniqueKeysWithValues:)(v58, &demangling cache variable for type metadata for _DictionaryStorage<String, String>, (void (*)(uint64_t, uint64_t, uint64_t *))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
  LOBYTE(v59) = v63;
  RestaurantReservation.init(id:answers:answerAttributes:bundleId:mailMessageId:eventSourceBundleIdentifier:eventSourceLLMConsumableDescription:timeIsUnknown:restaurantReservationId:restaurantUnderName:restaurantStartDateComponents:restaurantPartySize:restaurantReservationForName:restaurantReservationForTelephone:restaurantReservationForAddress:restaurantBookingProvider:restaurantCustomerNames:restaurantMealType:restaurantStatus:restaurantStartDateString:)(v65, v66, v64, a41, a42, a43, a44, v59, v50, v48, v62, v61, v60, a21, a22, a23, a24, a25, a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    v55,
    v57);
  OUTLINED_FUNCTION_119_0();
}

uint64_t dateString(fromDateComponents:)(uint64_t a1)
{
  uint64_t v35 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v33 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Calendar();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  BOOL v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v7 - 8);
  BOOL v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v34 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v32 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DateComponents();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PQAVerificationModelProtocol?(v35, (uint64_t)v14, &demangling cache variable for type metadata for DateComponents?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15) == 1)
  {
    uint64_t v19 = &demangling cache variable for type metadata for DateComponents?;
    uint64_t v20 = (uint64_t)v14;
LABEL_5:
    outlined destroy of PQAVerificationModelProtocol?(v20, v19);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
  static Calendar.current.getter();
  Calendar.date(from:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10) == 1)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    uint64_t v19 = &demangling cache variable for type metadata for Date?;
    uint64_t v20 = (uint64_t)v9;
    goto LABEL_5;
  }
  uint64_t v22 = v16;
  uint64_t v23 = v34;
  uint64_t v24 = v32;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v32, v9, v10);
  id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F088C0]), sel_init);
  uint64_t v26 = (uint64_t)v33;
  DateComponents.timeZone.getter();
  uint64_t v27 = type metadata accessor for TimeZone();
  Class isa = 0;
  if (__swift_getEnumTagSinglePayload(v26, 1, v27) != 1)
  {
    Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v26, v27);
  }
  objc_msgSend(v25, sel_setTimeZone_, isa);

  Class v29 = Date._bridgeToObjectiveC()().super.isa;
  id v30 = objc_msgSend(v25, sel_stringFromDate_, v29);

  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v10);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v18, v15);
  return v21;
}

const char *FlightReservation.kAnswerFlightNumber.unsafeMutableAddressor()
{
  return "flightNumber";
}

uint64_t static FlightReservation.kAnswerFlightNumber.getter()
{
  return 0x754E746867696C66;
}

void *FlightReservation.kAnswerFlightCheckInUrl.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightCheckInUrl;
}

unint64_t static FlightReservation.kAnswerFlightCheckInUrl.getter()
{
  return OUTLINED_FUNCTION_91_1(16);
}

const char *FlightReservation.kAnswerFlightBookingInfoUrl.unsafeMutableAddressor()
{
  return "bookingInfoUrl";
}

uint64_t static FlightReservation.kAnswerFlightBookingInfoUrl.getter()
{
  return 0x49676E696B6F6F62;
}

const char *FlightReservation.kAnswerFlightCarrier.unsafeMutableAddressor()
{
  return "flightCarrier";
}

uint64_t static FlightReservation.kAnswerFlightCarrier.getter()
{
  return 0x6143746867696C66;
}

void *FlightReservation.kAnswerFlightCarrierCode.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightCarrierCode;
}

unint64_t static FlightReservation.kAnswerFlightCarrierCode.getter()
{
  return OUTLINED_FUNCTION_91_1(17);
}

void *FlightReservation.kAnswerFlightDepartureDateString.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightDepartureDateString;
}

unint64_t static FlightReservation.kAnswerFlightDepartureDateString.getter()
{
  return OUTLINED_FUNCTION_91_1(25);
}

void *FlightReservation.kAnswerFlightArrivalDateString.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightArrivalDateString;
}

unint64_t static FlightReservation.kAnswerFlightArrivalDateString.getter()
{
  return OUTLINED_FUNCTION_91_1(23);
}

void *FlightReservation.kAnswerFlightDepartureAirportAddress.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightDepartureAirportAddress;
}

unint64_t static FlightReservation.kAnswerFlightDepartureAirportAddress.getter()
{
  return OUTLINED_FUNCTION_91_1(29);
}

void *FlightReservation.kAnswerFlightArrivalAirportAddress.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightArrivalAirportAddress;
}

unint64_t static FlightReservation.kAnswerFlightArrivalAirportAddress.getter()
{
  return OUTLINED_FUNCTION_91_1(27);
}

void *FlightReservation.kAnswerFlightDepartureAirportCode.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightDepartureAirportCode;
}

unint64_t static FlightReservation.kAnswerFlightDepartureAirportCode.getter()
{
  return OUTLINED_FUNCTION_91_1(26);
}

void *FlightReservation.kAnswerFlightArrivalAirportCode.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightArrivalAirportCode;
}

unint64_t static FlightReservation.kAnswerFlightArrivalAirportCode.getter()
{
  return OUTLINED_FUNCTION_91_1(24);
}

void *FlightReservation.kAnswerFlightDepartureAirportCountry.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightDepartureAirportCountry;
}

unint64_t static FlightReservation.kAnswerFlightDepartureAirportCountry.getter()
{
  return OUTLINED_FUNCTION_91_1(29);
}

void *FlightReservation.kAnswerFlightArrivalAirportCountry.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightArrivalAirportCountry;
}

unint64_t static FlightReservation.kAnswerFlightArrivalAirportCountry.getter()
{
  return OUTLINED_FUNCTION_91_1(27);
}

void *FlightReservation.kAnswerFlightDepartureAirportLocality.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightDepartureAirportLocality;
}

unint64_t static FlightReservation.kAnswerFlightDepartureAirportLocality.getter()
{
  return OUTLINED_FUNCTION_91_1(30);
}

void *FlightReservation.kAnswerFlightArrivalAirportLocality.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightArrivalAirportLocality;
}

unint64_t static FlightReservation.kAnswerFlightArrivalAirportLocality.getter()
{
  return OUTLINED_FUNCTION_91_1(28);
}

void *FlightReservation.kAnswerFlightArrivalAirportName.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightArrivalAirportName;
}

unint64_t static FlightReservation.kAnswerFlightArrivalAirportName.getter()
{
  return OUTLINED_FUNCTION_91_1(24);
}

void *FlightReservation.kAnswerFlightDepartureAirportName.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightDepartureAirportName;
}

unint64_t static FlightReservation.kAnswerFlightDepartureAirportName.getter()
{
  return OUTLINED_FUNCTION_91_1(26);
}

void *FlightReservation.kAnswerFlightDepartureAirportRegion.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightDepartureAirportRegion;
}

unint64_t static FlightReservation.kAnswerFlightDepartureAirportRegion.getter()
{
  return OUTLINED_FUNCTION_91_1(28);
}

void *FlightReservation.kAnswerFlightArrivalAirportRegion.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightArrivalAirportRegion;
}

unint64_t static FlightReservation.kAnswerFlightArrivalAirportRegion.getter()
{
  return OUTLINED_FUNCTION_91_1(26);
}

void *FlightReservation.kAnswerFlightConfirmationNumber.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightConfirmationNumber;
}

unint64_t static FlightReservation.kAnswerFlightConfirmationNumber.getter()
{
  return OUTLINED_FUNCTION_91_1(24);
}

void *FlightReservation.kAnswerFlightPassengerNames.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightPassengerNames;
}

unint64_t static FlightReservation.kAnswerFlightPassengerNames.getter()
{
  return OUTLINED_FUNCTION_91_1(20);
}

void *FlightReservation.kAnswerFlightPassengerSeatNumbers.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightPassengerSeatNumbers;
}

unint64_t static FlightReservation.kAnswerFlightPassengerSeatNumbers.getter()
{
  return OUTLINED_FUNCTION_91_1(26);
}

void *FlightReservation.kAnswerFlightArrivalTerminal.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightArrivalTerminal;
}

unint64_t static FlightReservation.kAnswerFlightArrivalTerminal.getter()
{
  return OUTLINED_FUNCTION_91_1(21);
}

void *FlightReservation.kAnswerFlightDepartureTerminal.unsafeMutableAddressor()
{
  return &static FlightReservation.kAnswerFlightDepartureTerminal;
}

unint64_t static FlightReservation.kAnswerFlightDepartureTerminal.getter()
{
  return OUTLINED_FUNCTION_91_1(23);
}

uint64_t FlightReservation.answer.getter()
{
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for FlightReservation(0);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_17_1();
  uint64_t v5 = specialized Collection.first.getter(*(void *)(v1 + 16));
  uint64_t v7 = v6;
  outlined init with copy of FlightReservation(v2, v0);
  if (!v7)
  {
    if (*(void *)(v0 + 112))
    {
      uint64_t v5 = *(void *)(v0 + 104);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  _s10OmniSearch13FlightSnippetV3LegVWOhTm_0();
  return v5;
}

void FlightReservation.metadata.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v2 = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_27_15();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v116 - v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String?)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25866DFF0;
  strcpy((char *)(inited + 32), "flightNumber");
  *(unsigned char *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  uint64_t v9 = *(void *)(v2 + 112);
  *(void *)(inited + 48) = *(void *)(v2 + 104);
  *(void *)(inited + 56) = v9;
  OUTLINED_FUNCTION_227_0();
  *(void *)(v10 + 64) = v11;
  *(void *)(v10 + 72) = v12;
  uint64_t v13 = (int *)type metadata accessor for FlightReservation(0);
  outlined init with copy of PQAVerificationModelProtocol?(v2 + v13[13], (uint64_t)v7, &demangling cache variable for type metadata for URL?);
  uint64_t v14 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v14);
  swift_bridgeObjectRetain();
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of PQAVerificationModelProtocol?((uint64_t)v7, &demangling cache variable for type metadata for URL?);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v16 = URL.absoluteString.getter();
    uint64_t v17 = v18;
    (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8))(v7, v14);
  }
  *(void *)(inited + 80) = v16;
  *(void *)(inited + 88) = v17;
  strcpy((char *)(inited + 96), "bookingInfoUrl");
  *(unsigned char *)(inited + 111) = -18;
  outlined init with copy of PQAVerificationModelProtocol?(v2 + v13[14], v1, &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_53_2(v1, 1, v14);
  if (v19)
  {
    outlined destroy of PQAVerificationModelProtocol?(v1, &demangling cache variable for type metadata for URL?);
    uint64_t v20 = 0;
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v20 = URL.absoluteString.getter();
    uint64_t v22 = v21;
    uint64_t v23 = OUTLINED_FUNCTION_74_0();
    v24(v23);
  }
  *(void *)(inited + 112) = v20;
  *(void *)(inited + 120) = v22;
  strcpy((char *)(inited + 128), "flightCarrier");
  *(_WORD *)(inited + 142) = -4864;
  OUTLINED_FUNCTION_274();
  v116[10] = v25;
  *(void *)(inited + 144) = v26;
  *(void *)(inited + 152) = v25;
  OUTLINED_FUNCTION_227_0();
  *(void *)(inited + 160) = v27;
  *(void *)(inited + 168) = v28;
  OUTLINED_FUNCTION_274();
  v116[9] = v29;
  *(void *)(inited + 176) = v30;
  *(void *)(inited + 184) = v29;
  OUTLINED_FUNCTION_227_0();
  *(void *)(inited + 192) = v31;
  *(void *)(inited + 200) = v32;
  OUTLINED_FUNCTION_274();
  v116[8] = v33;
  *(void *)(inited + 208) = v34;
  *(void *)(inited + 216) = v33;
  unint64_t v117 = 0xD000000000000017;
  OUTLINED_FUNCTION_115_5();
  *(void *)(inited + 224) = v36;
  *(void *)(inited + 232) = v35;
  OUTLINED_FUNCTION_274();
  v116[7] = v37;
  *(void *)(inited + 240) = v38;
  *(void *)(inited + 248) = v37;
  OUTLINED_FUNCTION_115_5();
  *(void *)(inited + 256) = v40;
  *(void *)(inited + 264) = v39;
  uint64_t v41 = (uint64_t *)(v2 + v13[20]);
  uint64_t v43 = *v41;
  uint64_t v42 = v41[1];
  v116[6] = v42;
  *(void *)(inited + 272) = v43;
  *(void *)(inited + 280) = v42;
  OUTLINED_FUNCTION_115_5();
  *(void *)(inited + 288) = v45;
  *(void *)(inited + 296) = v44;
  uint64_t v46 = (uint64_t *)(v2 + v13[21]);
  uint64_t v48 = *v46;
  uint64_t v47 = v46[1];
  v116[5] = v47;
  *(void *)(inited + 304) = v48;
  *(void *)(inited + 312) = v47;
  OUTLINED_FUNCTION_270();
  *(void *)(inited + 320) = v49;
  *(void *)(inited + 328) = v50;
  char v51 = (uint64_t *)(v2 + v13[22]);
  uint64_t v53 = *v51;
  uint64_t v52 = v51[1];
  v116[4] = v52;
  *(void *)(inited + 336) = v53;
  *(void *)(inited + 344) = v52;
  OUTLINED_FUNCTION_270();
  *(void *)(inited + 352) = 0xD00000000000001ALL;
  *(void *)(inited + 360) = v54;
  uint64_t v55 = (uint64_t *)(v2 + v13[23]);
  uint64_t v57 = *v55;
  uint64_t v56 = v55[1];
  v116[3] = v56;
  *(void *)(inited + 368) = v57;
  *(void *)(inited + 376) = v56;
  OUTLINED_FUNCTION_270();
  *(void *)(inited + 384) = v58;
  *(void *)(inited + 392) = v59;
  uint64_t v60 = (uint64_t *)(v2 + v13[24]);
  uint64_t v62 = *v60;
  uint64_t v61 = v60[1];
  v116[2] = v61;
  *(void *)(inited + 400) = v62;
  *(void *)(inited + 408) = v61;
  OUTLINED_FUNCTION_227_0();
  *(void *)(inited + 416) = v64;
  *(void *)(inited + 424) = v63;
  uint64_t v65 = (uint64_t *)(v2 + v13[25]);
  uint64_t v67 = *v65;
  uint64_t v66 = v65[1];
  v116[1] = v66;
  *(void *)(inited + 432) = v67;
  *(void *)(inited + 440) = v66;
  OUTLINED_FUNCTION_265();
  *(void *)(inited + 448) = v68;
  *(void *)(inited + 456) = v69;
  uint64_t v70 = (uint64_t *)(v2 + v13[26]);
  uint64_t v72 = *v70;
  uint64_t v71 = v70[1];
  v116[0] = v71;
  *(void *)(inited + 464) = v72;
  *(void *)(inited + 472) = v71;
  OUTLINED_FUNCTION_270();
  *(void *)(inited + 480) = v73;
  *(void *)(inited + 488) = v74;
  int v75 = (void *)(v2 + v13[27]);
  uint64_t v76 = v75[1];
  *(void *)(inited + 496) = *v75;
  *(void *)(inited + 504) = v76;
  *(void *)(inited + 512) = v77;
  OUTLINED_FUNCTION_265();
  *(void *)(inited + 520) = v78;
  uint64_t v79 = (void *)(v2 + v13[28]);
  uint64_t v80 = v79[1];
  *(void *)(inited + 528) = *v79;
  *(void *)(inited + 536) = v80;
  *(void *)(inited + 544) = v81;
  OUTLINED_FUNCTION_265();
  *(void *)(inited + 552) = v82;
  uint64_t v83 = (void *)(v2 + v13[29]);
  uint64_t v84 = v83[1];
  *(void *)(inited + 560) = *v83;
  *(void *)(inited + 568) = v84;
  *(void *)(inited + 576) = v85;
  OUTLINED_FUNCTION_265();
  *(void *)(inited + 584) = v86;
  uint64_t v87 = (void *)(v2 + v13[30]);
  uint64_t v88 = v87[1];
  *(void *)(inited + 592) = *v87;
  *(void *)(inited + 600) = v88;
  *(void *)(inited + 608) = v89;
  OUTLINED_FUNCTION_227_0();
  *(void *)(inited + 616) = v90;
  char v91 = (void *)(v2 + v13[31]);
  uint64_t v92 = v91[1];
  *(void *)(inited + 624) = *v91;
  *(void *)(inited + 632) = v92;
  *(void *)(inited + 640) = v93;
  OUTLINED_FUNCTION_115_5();
  *(void *)(inited + 648) = v94;
  uint64_t v95 = (void *)(v2 + v13[32]);
  uint64_t v96 = v95[1];
  *(void *)(inited + 656) = *v95;
  *(void *)(inited + 664) = v96;
  *(void *)(inited + 672) = v97 - 6;
  OUTLINED_FUNCTION_115_5();
  *(void *)(inited + 680) = v98;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v99 = MEMORY[0x263F8D310];
  uint64_t v100 = OUTLINED_FUNCTION_268();
  uint64_t v101 = MEMORY[0x25A2C7E60](v100);
  uint64_t v103 = v102;
  swift_bridgeObjectRelease();
  *(void *)(inited + 688) = v101;
  *(void *)(inited + 696) = v103;
  *(void *)(inited + 704) = 0xD00000000000001ALL;
  OUTLINED_FUNCTION_115_5();
  *(void *)(inited + 712) = v104;
  uint64_t v105 = swift_bridgeObjectRetain();
  uint64_t v106 = MEMORY[0x25A2C7E60](v105, v99);
  uint64_t v108 = v107;
  swift_bridgeObjectRelease();
  *(void *)(inited + 720) = v106;
  *(void *)(inited + 728) = v108;
  *(void *)(inited + 736) = 0xD000000000000015;
  OUTLINED_FUNCTION_115_5();
  *(void *)(inited + 744) = v109;
  uint64_t v110 = (void *)(v2 + v13[35]);
  uint64_t v111 = v110[1];
  *(void *)(inited + 752) = *v110;
  *(void *)(inited + 760) = v111;
  *(void *)(inited + 768) = v117;
  OUTLINED_FUNCTION_115_5();
  *(void *)(inited + 776) = v112;
  uint64_t v113 = (void *)(v2 + v13[36]);
  uint64_t v114 = v113[1];
  *(void *)(inited + 784) = *v113;
  *(void *)(inited + 792) = v114;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  uint64_t v115 = Dictionary.init(dictionaryLiteral:)();
  specialized Dictionary.compactMapValues<A>(_:)(v115);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_119_0();
}

uint64_t specialized Dictionary.compactMapValues<A>(_:)(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x263F8EE80];
  uint64_t v34 = MEMORY[0x263F8EE80];
  specialized _NativeDictionary.makeIterator()(v33, a1);
  uint64_t v2 = v33[0];
  uint64_t v3 = v33[1];
  int64_t v4 = v33[3];
  unint64_t v5 = v33[4];
  int64_t v6 = (unint64_t)(v33[2] + 64) >> 6;
  for (uint64_t result = swift_bridgeObjectRetain(); ; uint64_t result = swift_bridgeObjectRelease())
  {
    do
    {
      if (v5)
      {
        unint64_t v8 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
        unint64_t v9 = v8 | (v4 << 6);
      }
      else
      {
        int64_t v10 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          goto LABEL_36;
        }
        if (v10 >= v6) {
          goto LABEL_34;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v10);
        int64_t v12 = v4 + 1;
        if (!v11)
        {
          int64_t v12 = v4 + 2;
          if (v4 + 2 >= v6) {
            goto LABEL_34;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v4 + 3;
            if (v4 + 3 >= v6) {
              goto LABEL_34;
            }
            unint64_t v11 = *(void *)(v3 + 8 * v12);
            if (!v11)
            {
              int64_t v12 = v4 + 4;
              if (v4 + 4 >= v6) {
                goto LABEL_34;
              }
              unint64_t v11 = *(void *)(v3 + 8 * v12);
              if (!v11)
              {
                int64_t v12 = v4 + 5;
                if (v4 + 5 >= v6) {
                  goto LABEL_34;
                }
                unint64_t v11 = *(void *)(v3 + 8 * v12);
                if (!v11)
                {
                  int64_t v13 = v4 + 6;
                  while (v13 < v6)
                  {
                    unint64_t v11 = *(void *)(v3 + 8 * v13++);
                    if (v11)
                    {
                      int64_t v12 = v13 - 1;
                      goto LABEL_19;
                    }
                  }
LABEL_34:
                  outlined consume of [String : String].Iterator._Variant();
                  return v1;
                }
              }
            }
          }
        }
LABEL_19:
        unint64_t v5 = (v11 - 1) & v11;
        unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
        int64_t v4 = v12;
      }
      uint64_t v14 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v9);
      uint64_t v15 = v14[1];
    }
    while (!v15);
    uint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v9);
    uint64_t v17 = v16[1];
    uint64_t v31 = *v14;
    uint64_t v32 = *v16;
    unint64_t v18 = *(void *)(v1 + 16);
    if (*(void *)(v1 + 24) <= v18)
    {
      uint64_t v19 = v18 + 1;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, 1);
      uint64_t v1 = v34;
    }
    else
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = v1 + 64;
    uint64_t v21 = -1 << *(unsigned char *)(v1 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v1 + 64 + 8 * (v22 >> 6))) == 0) {
      break;
    }
    unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v1 + 64 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(void *)(v20 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    uint64_t v29 = (void *)(*(void *)(v1 + 48) + 16 * v24);
    *uint64_t v29 = v32;
    v29[1] = v17;
    uint64_t v30 = (void *)(*(void *)(v1 + 56) + 16 * v24);
    void *v30 = v31;
    v30[1] = v15;
    ++*(void *)(v1 + 16);
  }
  char v25 = 0;
  unint64_t v26 = (unint64_t)(63 - v21) >> 6;
  while (++v23 != v26 || (v25 & 1) == 0)
  {
    BOOL v27 = v23 == v26;
    if (v23 == v26) {
      unint64_t v23 = 0;
    }
    v25 |= v27;
    uint64_t v28 = *(void *)(v20 + 8 * v23);
    if (v28 != -1)
    {
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
      goto LABEL_33;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

double closure #1 in FlightReservation.init(id:timeIsUnknown:flightNumber:flightCheckInUrl:flightBookingInfoUrl:flightCarrier:flightCarrierCode:flightDesignator:flightDepartureDateComponents:flightArrivalDateComponents:flightArrivalAirportAddress:flightDepartureAirportAddress:flightArrivalAirportCode:flightDepartureAirportCode:flightArrivalAirportCountry:flightDepartureAirportCountry:flightArrivalAirportLocality:flightDepartureAirportLocality:flightArrivalAirportName:flightDepartureAirportName:flightArrivalAirportRegion:flightDepartureAirportRegion:flightConfirmationNumber:flightPassengerNames:flightPassengerSeatNumbers:flightArrivalTerminal:flightDepartureTerminal:flightBookingProvider:flightBoardingTimeDate:flightDepartureGate:flightArrivalGate:flightDuration:flightCostCurrency:flightCostAmount:flightStatus:answerAttributes:bundleId:mailMessageId:eventSourceBundleIdentifier:eventSourceLLMConsumableDescription:)@<D0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t a8@<X7>, unint64_t *a9@<X8>, void *a10, unint64_t a11, unint64_t a12, unint64_t a13, unint64_t a14, unint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, unint64_t a19, unint64_t a20,unint64_t a21)
{
  uint64_t v28 = *a1;
  uint64_t v27 = a1[1];
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v28 && v29 == v27)
  {
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  uint64_t v69 = a8;
  char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v31)
  {
LABEL_48:
    if (!a3) {
      goto LABEL_86;
    }
    *a9 = 0xD000000000000019;
    a9[1] = 0x8000000258683F50;
    a9[2] = a2;
    a9[3] = a3;
LABEL_50:
    swift_bridgeObjectRetain();
    return result;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v28 && v32 == v27)
  {
    swift_bridgeObjectRelease();
    goto LABEL_52;
  }
  char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v34)
  {
LABEL_52:
    if (!a5) {
      goto LABEL_86;
    }
    *a9 = 0xD000000000000017;
    a9[1] = 0x8000000258683F70;
    a9[2] = a4;
    a9[3] = a5;
    goto LABEL_50;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v28 && v35 == v27)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v37 & 1) == 0)
    {
      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v28 && v38 == v27)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v40 & 1) == 0)
        {
          if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v28 && v41 == v27)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v43 & 1) == 0)
            {
              if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v28 && v44 == v27)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if ((v46 & 1) == 0)
                {
                  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v28 && v47 == v27)
                  {
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if ((v49 & 1) == 0)
                    {
                      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v28 && v50 == v27)
                      {
                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRelease();
                        if ((v52 & 1) == 0)
                        {
                          if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v28 && v53 == v27)
                          {
                            swift_bridgeObjectRelease();
                          }
                          else
                          {
                            char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
                            swift_bridgeObjectRelease();
                            if ((v55 & 1) == 0) {
                              goto LABEL_86;
                            }
                          }
                          unint64_t v63 = a21;
                          if (a21)
                          {
                            a11 = a20;
                            unint64_t v65 = 0xD000000000000017;
                            uint64_t v66 = "flightDepartureTerminal";
                            goto LABEL_71;
                          }
LABEL_86:
                          double result = 0.0;
                          *(_OWORD *)a9 = 0u;
                          *((_OWORD *)a9 + 1) = 0u;
                          return result;
                        }
                      }
                      unint64_t v63 = a19;
                      if (!a19) {
                        goto LABEL_86;
                      }
                      a11 = a18;
                      unint64_t v65 = 0xD000000000000015;
                      uint64_t v66 = "flightArrivalTerminal";
LABEL_71:
                      *a9 = v65;
                      a9[1] = (unint64_t)(v66 - 32) | 0x8000000000000000;
                      a9[2] = a11;
                      a9[3] = v63;
                      goto LABEL_50;
                    }
                  }
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
                  lazy protocol witness table accessor for type [String] and conformance [A]();
                  uint64_t v67 = BidirectionalCollection<>.joined(separator:)();
                  *a9 = 0xD00000000000001ALL;
                  a9[1] = 0x8000000258684150;
                  a9[2] = v67;
                  a9[3] = v68;
                  return result;
                }
              }
              unint64_t v63 = a16;
              if (!a16) {
                goto LABEL_86;
              }
              a11 = a15;
              unint64_t v65 = 0xD00000000000001ALL;
              uint64_t v66 = "flightDepartureAirportName";
              goto LABEL_71;
            }
          }
          unint64_t v63 = a14;
          if (!a14) {
            goto LABEL_86;
          }
          a11 = a13;
          unint64_t v65 = 0xD000000000000018;
          uint64_t v66 = "flightArrivalAirportName";
          goto LABEL_71;
        }
      }
      unint64_t v63 = a12;
      if (!a12) {
        goto LABEL_86;
      }
      unint64_t v65 = 0xD000000000000018;
      uint64_t v66 = "flightConfirmationNumber";
      goto LABEL_71;
    }
  }
  if (a7) {
    uint64_t v57 = a6;
  }
  else {
    uint64_t v57 = 0;
  }
  if (a7) {
    uint64_t v58 = a7;
  }
  else {
    uint64_t v58 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v59._uint64_t countAndFlagsBits = v57;
  v59._object = v58;
  String.append(_:)(v59);
  swift_bridgeObjectRelease();
  if (a10) {
    uint64_t v60 = v69;
  }
  else {
    uint64_t v60 = 0;
  }
  if (a10) {
    uint64_t v61 = a10;
  }
  else {
    uint64_t v61 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v62._uint64_t countAndFlagsBits = v60;
  v62._object = v61;
  String.append(_:)(v62);
  swift_bridgeObjectRelease();
  double result = 1.14319654e257;
  *(_OWORD *)a9 = xmmword_2586732C0;
  a9[2] = 0;
  a9[3] = 0xE000000000000000;
  return result;
}

void *HotelReservation.kAnswerHotelReservationId.unsafeMutableAddressor()
{
  return &static HotelReservation.kAnswerHotelReservationId;
}

unint64_t static HotelReservation.kAnswerHotelReservationId.getter()
{
  return OUTLINED_FUNCTION_91_1(18);
}

const char *HotelReservation.kAnswerHotelUnderName.unsafeMutableAddressor()
{
  return "hotelUnderName";
}

uint64_t static HotelReservation.kAnswerHotelUnderName.getter()
{
  return 0x646E556C65746F68;
}

void *HotelReservation.kAnswerHotelCheckinDateString.unsafeMutableAddressor()
{
  return &static HotelReservation.kAnswerHotelCheckinDateString;
}

unint64_t static HotelReservation.kAnswerHotelCheckinDateString.getter()
{
  return OUTLINED_FUNCTION_91_1(22);
}

void *HotelReservation.kAnswerHotelCheckoutDateString.unsafeMutableAddressor()
{
  return &static HotelReservation.kAnswerHotelCheckoutDateString;
}

unint64_t static HotelReservation.kAnswerHotelCheckoutDateString.getter()
{
  return OUTLINED_FUNCTION_91_1(23);
}

void *HotelReservation.kAnswerHotelReservationForName.unsafeMutableAddressor()
{
  return &static HotelReservation.kAnswerHotelReservationForName;
}

unint64_t static HotelReservation.kAnswerHotelReservationForName.getter()
{
  return OUTLINED_FUNCTION_91_1(23);
}

void *HotelReservation.kAnswerHotelModifyReservationUrl.unsafeMutableAddressor()
{
  return &static HotelReservation.kAnswerHotelModifyReservationUrl;
}

unint64_t static HotelReservation.kAnswerHotelModifyReservationUrl.getter()
{
  return OUTLINED_FUNCTION_91_1(25);
}

void *HotelReservation.kAnswerHotelReservationForTelephone.unsafeMutableAddressor()
{
  return &static HotelReservation.kAnswerHotelReservationForTelephone;
}

unint64_t static HotelReservation.kAnswerHotelReservationForTelephone.getter()
{
  return OUTLINED_FUNCTION_91_1(28);
}

void *HotelReservation.kAnswerHotelReservationForAddress.unsafeMutableAddressor()
{
  return &static HotelReservation.kAnswerHotelReservationForAddress;
}

unint64_t static HotelReservation.kAnswerHotelReservationForAddress.getter()
{
  return OUTLINED_FUNCTION_91_1(26);
}

double closure #1 in HotelReservation.init(id:timeIsUnknown:hotelReservationId:hotelUnderName:hotelCheckinDateComponents:hotelCheckoutDateComponents:hotelReservationForName:hotelModifyReservationUrl:hotelReservationForTelephone:hotelReservationForAddress:hotelBookingProvider:hotelCustomerNames:hotelRoomNumbers:hotelNumberOfRooms:hotelDuration:hotelCost:hotelStatus:answerAttributes:bundleId:mailMessageId:eventSourceBundleIdentifier:eventSourceLLMConsumableDescription:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v20 = *a1;
  uint64_t v19 = a1[1];
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v20 && v21 == v19)
  {
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  uint64_t v39 = a8;
  char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v23)
  {
LABEL_28:
    if (!a3) {
      goto LABEL_44;
    }
    *a9 = 0xD000000000000016;
    a9[1] = 0x80000002586841D0;
    a9[2] = a2;
    a9[3] = a3;
LABEL_30:
    swift_bridgeObjectRetain();
    return result;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v20 && v24 == v19)
  {
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v26)
  {
LABEL_32:
    if (!a5) {
      goto LABEL_44;
    }
    *a9 = 0xD000000000000017;
    a9[1] = 0x80000002586841F0;
    a9[2] = a4;
    a9[3] = a5;
    goto LABEL_30;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v20 && v27 == v19)
  {
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v29)
  {
LABEL_35:
    uint64_t v37 = a7;
    if (!a7) {
      goto LABEL_44;
    }
    uint64_t v38 = a9;
    *a9 = 0xD000000000000017;
    a9[1] = 0x8000000258684210;
    a9[2] = a6;
    goto LABEL_37;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v20 && v30 == v19)
  {
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v32)
  {
LABEL_39:
    uint64_t v37 = a10;
    if (!a10) {
      goto LABEL_44;
    }
    uint64_t v38 = a9;
    *a9 = 0xD00000000000001ALL;
    a9[1] = 0x8000000258684270;
    a9[2] = v39;
LABEL_37:
    uint64_t v38[3] = v37;
    goto LABEL_30;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v20 && v33 == v19)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v35 & 1) == 0) {
      goto LABEL_44;
    }
  }
  if (a12)
  {
    *a9 = 0xD000000000000012;
    a9[1] = 0x80000002586841B0;
    a9[2] = a11;
    a9[3] = a12;
    goto LABEL_30;
  }
LABEL_44:
  double result = 0.0;
  *(_OWORD *)a9 = 0u;
  *((_OWORD *)a9 + 1) = 0u;
  return result;
}

void *RestaurantReservation.kAnswerRestaurantReservationId.unsafeMutableAddressor()
{
  return &static RestaurantReservation.kAnswerRestaurantReservationId;
}

unint64_t static RestaurantReservation.kAnswerRestaurantReservationId.getter()
{
  return OUTLINED_FUNCTION_91_1(23);
}

void *RestaurantReservation.kAnswerRestaurantUnderName.unsafeMutableAddressor()
{
  return &static RestaurantReservation.kAnswerRestaurantUnderName;
}

unint64_t static RestaurantReservation.kAnswerRestaurantUnderName.getter()
{
  return OUTLINED_FUNCTION_91_1(19);
}

void *RestaurantReservation.kAnswerRestaurantStartDateString.unsafeMutableAddressor()
{
  return &static RestaurantReservation.kAnswerRestaurantStartDateString;
}

unint64_t static RestaurantReservation.kAnswerRestaurantStartDateString.getter()
{
  return OUTLINED_FUNCTION_91_1(25);
}

void *RestaurantReservation.kAnswerRestaurantPartySize.unsafeMutableAddressor()
{
  return &static RestaurantReservation.kAnswerRestaurantPartySize;
}

unint64_t static RestaurantReservation.kAnswerRestaurantPartySize.getter()
{
  return OUTLINED_FUNCTION_91_1(19);
}

void *RestaurantReservation.kAnswerRestaurantReservationForName.unsafeMutableAddressor()
{
  return &static RestaurantReservation.kAnswerRestaurantReservationForName;
}

unint64_t static RestaurantReservation.kAnswerRestaurantReservationForName.getter()
{
  return OUTLINED_FUNCTION_91_1(28);
}

void *RestaurantReservation.kAnswerRestaurantReservationForTelephone.unsafeMutableAddressor()
{
  return &static RestaurantReservation.kAnswerRestaurantReservationForTelephone;
}

unint64_t static RestaurantReservation.kAnswerRestaurantReservationForTelephone.getter()
{
  return OUTLINED_FUNCTION_91_1(33);
}

void *RestaurantReservation.kAnswerRestaurantReservationForAddress.unsafeMutableAddressor()
{
  return &static RestaurantReservation.kAnswerRestaurantReservationForAddress;
}

unint64_t static RestaurantReservation.kAnswerRestaurantReservationForAddress.getter()
{
  return OUTLINED_FUNCTION_91_1(31);
}

double closure #1 in RestaurantReservation.init(id:timeIsUnknown:restaurantReservationId:restaurantUnderName:restaurantStartDateComponents:restaurantPartySize:restaurantReservationForName:restaurantReservationForTelephone:restaurantReservationForAddress:restaurantBookingProvider:restaurantCustomerNames:restaurantMealType:restaurantStatus:answerAttributes:bundleId:mailMessageId:eventSourceBundleIdentifier:eventSourceLLMConsumableDescription:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v17 = *a1;
  uint64_t v16 = a1[1];
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v17 && v18 == v16)
  {
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  uint64_t v31 = a8;
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v20)
  {
LABEL_23:
    if (!a3) {
      goto LABEL_35;
    }
    *a9 = 0xD000000000000019;
    a9[1] = 0x80000002586842D0;
    a9[2] = a2;
    a9[3] = a3;
LABEL_25:
    swift_bridgeObjectRetain();
    return result;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v17 && v21 == v16)
  {
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v23)
  {
LABEL_27:
    if (!a5) {
      goto LABEL_35;
    }
    *a9 = 0xD00000000000001CLL;
    a9[1] = 0x8000000258684310;
    a9[2] = a4;
    a9[3] = a5;
    goto LABEL_25;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v17 && v24 == v16)
  {
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v26)
  {
LABEL_30:
    if (!a7) {
      goto LABEL_35;
    }
    *a9 = 0xD00000000000001FLL;
    a9[1] = 0x8000000258684360;
    a9[2] = a6;
    a9[3] = a7;
    goto LABEL_25;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v17 && v27 == v16)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v29 & 1) == 0) {
      goto LABEL_35;
    }
  }
  if (a10)
  {
    *a9 = 0xD000000000000017;
    a9[1] = 0x8000000258684290;
    a9[2] = v31;
    a9[3] = a10;
    goto LABEL_25;
  }
LABEL_35:
  double result = 0.0;
  *(_OWORD *)a9 = 0u;
  *((_OWORD *)a9 + 1) = 0u;
  return result;
}

uint64_t type metadata accessor for RentalCarReservation(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for RentalCarReservation);
}

uint64_t outlined init with take of FlightSnippet.Leg(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OUTLINED_FUNCTION_49_16();
  v4(v3);
  OUTLINED_FUNCTION_7_2();
  uint64_t v5 = OUTLINED_FUNCTION_211();
  v6(v5);
  return a2;
}

uint64_t type metadata accessor for TicketedTransportation(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for TicketedTransportation);
}

uint64_t type metadata accessor for TicketedShow(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for TicketedShow);
}

uint64_t type metadata accessor for Appointment(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for Appointment);
}

uint64_t type metadata accessor for Party(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for Party);
}

uint64_t type metadata accessor for Trip(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for Trip);
}

uint64_t type metadata accessor for HotelReservation(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for HotelReservation);
}

uint64_t type metadata accessor for RestaurantReservation(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for RestaurantReservation);
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = (void *)*v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  char v44 = a2;
  int64_t v6 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (!v5[2]) {
    goto LABEL_36;
  }
  OUTLINED_FUNCTION_210_2();
  char v43 = v7;
  OUTLINED_FUNCTION_257();
  unint64_t v10 = v9 & v8;
  uint64_t v41 = v2;
  int64_t v42 = (unint64_t)(v11 + 63) >> 6;
  int64_t v12 = v6 + 8;
  swift_retain();
  int64_t v13 = 0;
  if (!v10) {
    goto LABEL_4;
  }
LABEL_3:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    char v20 = (uint64_t *)(v5[6] + 16 * i);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    char v23 = (uint64_t *)(v5[7] + 16 * i);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    if ((v44 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    Hasher._finalize()();
    OUTLINED_FUNCTION_207_2();
    if (((v28 << v27) & ~v12[v26]) == 0)
    {
      OUTLINED_FUNCTION_248_0();
      while (++v30 != v31 || (v29 & 1) == 0)
      {
        BOOL v32 = v30 == v31;
        if (v30 == v31) {
          uint64_t v30 = 0;
        }
        v29 |= v32;
        if (v12[v30] != -1)
        {
          OUTLINED_FUNCTION_246_0();
          goto LABEL_27;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      return;
    }
    OUTLINED_FUNCTION_251();
LABEL_27:
    OUTLINED_FUNCTION_245_0();
    *(void *)((char *)v12 + v33) |= v34;
    uint64_t v36 = (void *)(v6[6] + 16 * v35);
    void *v36 = v22;
    v36[1] = v21;
    uint64_t v37 = (void *)(v6[7] + 16 * v35);
    *uint64_t v37 = v24;
    v37[1] = v25;
    ++v6[2];
    if (v10) {
      goto LABEL_3;
    }
LABEL_4:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_38;
    }
    if (v16 >= v42)
    {
      swift_release();
      uint64_t v3 = v41;
      uint64_t v17 = v43;
      goto LABEL_31;
    }
    uint64_t v17 = v43;
    unint64_t v18 = v43[v16];
    ++v13;
    if (!v18)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v42) {
        goto LABEL_29;
      }
      unint64_t v18 = v43[v13];
      if (!v18) {
        break;
      }
    }
LABEL_15:
    unint64_t v10 = (v18 - 1) & v18;
  }
  int64_t v19 = v16 + 2;
  if (v19 < v42)
  {
    unint64_t v18 = v43[v19];
    if (!v18)
    {
      while (1)
      {
        int64_t v13 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_39;
        }
        if (v13 >= v42) {
          goto LABEL_29;
        }
        unint64_t v18 = v43[v13];
        ++v19;
        if (v18) {
          goto LABEL_15;
        }
      }
    }
    int64_t v13 = v19;
    goto LABEL_15;
  }
LABEL_29:
  swift_release();
  uint64_t v3 = v41;
LABEL_31:
  if (v44)
  {
    OUTLINED_FUNCTION_259();
    if (v39 != v40) {
      *uint64_t v17 = -1 << v38;
    }
    else {
      OUTLINED_FUNCTION_256(v38);
    }
    v5[2] = 0;
  }
LABEL_36:
  swift_release();
  *uint64_t v3 = v6;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v2 = v0;
  char v4 = v3;
  uint64_t v5 = OUTLINED_FUNCTION_49_16();
  uint64_t v6 = type metadata accessor for SearchResult(v5);
  uint64_t v44 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6 - 8);
  OUTLINED_FUNCTION_14_10();
  uint64_t v7 = (void *)*v0;
  char v45 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SearchResult>);
  uint64_t v8 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (!v7[2]) {
    goto LABEL_37;
  }
  OUTLINED_FUNCTION_210_2();
  char v43 = v9;
  OUTLINED_FUNCTION_257();
  unint64_t v12 = v11 & v10;
  uint64_t v41 = v0;
  int64_t v42 = (unint64_t)(v13 + 63) >> 6;
  unint64_t v14 = v8 + 8;
  swift_retain();
  int64_t v15 = 0;
  if (!v12) {
    goto LABEL_4;
  }
LABEL_3:
  unint64_t v16 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v16 | (v15 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v15 << 6))
  {
    uint64_t v22 = (uint64_t *)(v7[6] + 16 * i);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    uint64_t v25 = *(void *)(v44 + 72);
    uint64_t v26 = v7[7] + v25 * i;
    if (v45)
    {
      outlined init with take of FlightSnippet.Leg(v26, v1);
    }
    else
    {
      outlined init with copy of FlightReservation(v26, v1);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    Hasher._finalize()();
    OUTLINED_FUNCTION_207_2();
    if (((v29 << v28) & ~v14[v27]) == 0)
    {
      OUTLINED_FUNCTION_248_0();
      while (++v31 != v32 || (v30 & 1) == 0)
      {
        BOOL v33 = v31 == v32;
        if (v31 == v32) {
          uint64_t v31 = 0;
        }
        v30 |= v33;
        if (v14[v31] != -1)
        {
          OUTLINED_FUNCTION_246_0();
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      return;
    }
    OUTLINED_FUNCTION_251();
LABEL_28:
    OUTLINED_FUNCTION_245_0();
    *(void *)((char *)v14 + v34) |= v35;
    uint64_t v37 = (void *)(v8[6] + 16 * v36);
    *uint64_t v37 = v24;
    v37[1] = v23;
    outlined init with take of FlightSnippet.Leg(v1, v8[7] + v25 * v36);
    ++v8[2];
    if (v12) {
      goto LABEL_3;
    }
LABEL_4:
    int64_t v18 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      goto LABEL_39;
    }
    if (v18 >= v42)
    {
      swift_release();
      uint64_t v2 = v41;
      int64_t v19 = v43;
      goto LABEL_32;
    }
    int64_t v19 = v43;
    unint64_t v20 = v43[v18];
    ++v15;
    if (!v20)
    {
      int64_t v15 = v18 + 1;
      if (v18 + 1 >= v42) {
        goto LABEL_30;
      }
      unint64_t v20 = v43[v15];
      if (!v20) {
        break;
      }
    }
LABEL_15:
    unint64_t v12 = (v20 - 1) & v20;
  }
  int64_t v21 = v18 + 2;
  if (v21 < v42)
  {
    unint64_t v20 = v43[v21];
    if (!v20)
    {
      while (1)
      {
        int64_t v15 = v21 + 1;
        if (__OFADD__(v21, 1)) {
          goto LABEL_40;
        }
        if (v15 >= v42) {
          goto LABEL_30;
        }
        unint64_t v20 = v43[v15];
        ++v21;
        if (v20) {
          goto LABEL_15;
        }
      }
    }
    int64_t v15 = v21;
    goto LABEL_15;
  }
LABEL_30:
  swift_release();
  uint64_t v2 = v41;
LABEL_32:
  if (v45)
  {
    OUTLINED_FUNCTION_259();
    if (v39 != v40) {
      void *v19 = -1 << v38;
    }
    else {
      OUTLINED_FUNCTION_256(v38);
    }
    v7[2] = 0;
  }
LABEL_37:
  swift_release();
  void *v2 = v8;
  OUTLINED_FUNCTION_119_0();
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  char v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    unint64_t v20 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v23 = *(void *)(*(void *)(v5 + 56) + 8 * i);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) == 0)
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v24) >> 6;
      while (++v26 != v29 || (v28 & 1) == 0)
      {
        BOOL v30 = v26 == v29;
        if (v26 == v29) {
          unint64_t v26 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v26);
        if (v31 != -1)
        {
          unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    unint64_t v27 = __clz(__rbit64((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v11 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    uint64_t v32 = (void *)(*(void *)(v7 + 48) + 16 * v27);
    void *v32 = v22;
    v32[1] = v21;
    *(void *)(*(void *)(v7 + 56) + 8 * v27) = v23;
    ++*(void *)(v7 + 16);
    if (v10) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_41;
    }
    if (v16 >= v34)
    {
      swift_release();
      uint64_t v17 = (void *)(v5 + 64);
      goto LABEL_34;
    }
    uint64_t v17 = (void *)(v5 + 64);
    unint64_t v18 = *(void *)(v35 + 8 * v16);
    ++v13;
    if (!v18)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v34) {
        goto LABEL_32;
      }
      unint64_t v18 = *(void *)(v35 + 8 * v13);
      if (!v18) {
        break;
      }
    }
LABEL_18:
    unint64_t v10 = (v18 - 1) & v18;
  }
  int64_t v19 = v16 + 2;
  if (v19 < v34)
  {
    unint64_t v18 = *(void *)(v35 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        int64_t v13 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_42;
        }
        if (v13 >= v34) {
          goto LABEL_32;
        }
        unint64_t v18 = *(void *)(v35 + 8 * v13);
        ++v19;
        if (v18) {
          goto LABEL_18;
        }
      }
    }
    int64_t v13 = v19;
    goto LABEL_18;
  }
LABEL_32:
  swift_release();
LABEL_34:
  if (v36)
  {
    uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
    if (v33 >= 64) {
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v33 + 63) >> 6, v17);
    }
    else {
      *uint64_t v17 = -1 << v33;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  *char v3 = v7;
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v5 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
  while (1)
  {
    uint64_t v7 = *(v5 - 3);
    uint64_t v6 = *(v5 - 2);
    uint64_t v9 = *(v5 - 1);
    uint64_t v8 = *v5;
    unint64_t v10 = (void *)*a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
    uint64_t v13 = v10[2];
    BOOL v14 = (v11 & 1) == 0;
    uint64_t v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    char v16 = v11;
    if (v10[3] < v15) {
      break;
    }
    if (a2)
    {
      if (v11) {
        goto LABEL_14;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
      _NativeDictionary.copy()();
      if (v16) {
        goto LABEL_14;
      }
    }
LABEL_10:
    int64_t v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    unint64_t v20 = (uint64_t *)(v19[6] + 16 * v12);
    *unint64_t v20 = v7;
    v20[1] = v6;
    uint64_t v21 = (void *)(v19[7] + 16 * v12);
    *uint64_t v21 = v9;
    v21[1] = v8;
    uint64_t v22 = v19[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_18;
    }
    v5 += 4;
    v19[2] = v24;
    a2 = 1;
    if (!--v3)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v16 & 1) != (v18 & 1)) {
    goto LABEL_19;
  }
  unint64_t v12 = v17;
  if ((v16 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  unint64_t v25 = (void *)swift_allocError();
  swift_willThrow();
  id v26 = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();

    return;
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v27._object = (void *)0x80000002586848D0;
  v27._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v27);
  _print_unlocked<A, B>(_:_:)();
  v28._uint64_t countAndFlagsBits = 39;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v3;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void *v23;
  id v24;
  Swift::String v25;
  Swift::String v26;

  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  for (unint64_t i = (uint64_t *)(swift_bridgeObjectRetain() + 48); ; i += 3)
  {
    uint64_t v7 = *(i - 2);
    uint64_t v6 = *(i - 1);
    uint64_t v8 = *i;
    uint64_t v9 = (void *)*a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
    unint64_t v12 = v9[2];
    uint64_t v13 = (v10 & 1) == 0;
    BOOL v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    uint64_t v15 = v10;
    if (v9[3] < v14) {
      break;
    }
    if (a2)
    {
      if (v10) {
        goto LABEL_14;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [String]>);
      _NativeDictionary.copy()();
      if (v15) {
        goto LABEL_14;
      }
    }
LABEL_10:
    char v18 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    int64_t v19 = (uint64_t *)(v18[6] + 16 * v11);
    void *v19 = v7;
    v19[1] = v6;
    *(void *)(v18[7] + 8 * v11) = v8;
    unint64_t v20 = v18[2];
    uint64_t v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_18;
    }
    v18[2] = v22;
    a2 = 1;
    if (!--v3)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
  char v16 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v15 & 1) != (v17 & 1)) {
    goto LABEL_19;
  }
  char v11 = v16;
  if ((v15 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  BOOL v23 = (void *)swift_allocError();
  swift_willThrow();
  uint64_t v24 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();

    return;
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v25._object = (void *)0x80000002586848D0;
  v25._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v25);
  _print_unlocked<A, B>(_:_:)();
  v26._uint64_t countAndFlagsBits = 39;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unsigned char *closure #1 in closure #1 in Double.init<A>(_:)@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.mailMessageID.getter(void *a1)
{
  return outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(a1, (SEL *)&selRef_mailMessageID);
}

uint64_t outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.eventSourceBundleIdentifier.getter(void *a1)
{
  return outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(a1, (SEL *)&selRef_eventSourceBundleIdentifier);
}

uint64_t _s10OmniSearch13FlightSnippetV3LegVWOhTm_0()
{
  uint64_t v1 = OUTLINED_FUNCTION_60_11();
  v2(v1);
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_16_1();
  v3();
  return v0;
}

uint64_t outlined init with copy of FlightReservation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OUTLINED_FUNCTION_49_16();
  v4(v3);
  OUTLINED_FUNCTION_7_2();
  uint64_t v5 = OUTLINED_FUNCTION_210();
  v6(v5);
  return a2;
}

uint64_t outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.eventMessageIdentifier.getter(void *a1)
{
  return outlined bridged method (pb) of @objc IMSPIMessage.guid.getter(a1, (SEL *)&selRef_eventMessageIdentifier);
}

uint64_t outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.detectedEventTypes.getter(void *a1)
{
  return outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(a1, (SEL *)&selRef_detectedEventTypes);
}

unint64_t lazy protocol witness table accessor for type RentalCarReservation.CodingKeys and conformance RentalCarReservation.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RentalCarReservation.CodingKeys and conformance RentalCarReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type RentalCarReservation.CodingKeys and conformance RentalCarReservation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RentalCarReservation.CodingKeys and conformance RentalCarReservation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RentalCarReservation.CodingKeys and conformance RentalCarReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type RentalCarReservation.CodingKeys and conformance RentalCarReservation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RentalCarReservation.CodingKeys and conformance RentalCarReservation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RentalCarReservation.CodingKeys and conformance RentalCarReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type RentalCarReservation.CodingKeys and conformance RentalCarReservation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RentalCarReservation.CodingKeys and conformance RentalCarReservation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RentalCarReservation.CodingKeys and conformance RentalCarReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type RentalCarReservation.CodingKeys and conformance RentalCarReservation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RentalCarReservation.CodingKeys and conformance RentalCarReservation.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TicketedTransportation.CodingKeys and conformance TicketedTransportation.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TicketedTransportation.CodingKeys and conformance TicketedTransportation.CodingKeys;
  if (!lazy protocol witness table cache variable for type TicketedTransportation.CodingKeys and conformance TicketedTransportation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedTransportation.CodingKeys and conformance TicketedTransportation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedTransportation.CodingKeys and conformance TicketedTransportation.CodingKeys;
  if (!lazy protocol witness table cache variable for type TicketedTransportation.CodingKeys and conformance TicketedTransportation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedTransportation.CodingKeys and conformance TicketedTransportation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedTransportation.CodingKeys and conformance TicketedTransportation.CodingKeys;
  if (!lazy protocol witness table cache variable for type TicketedTransportation.CodingKeys and conformance TicketedTransportation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedTransportation.CodingKeys and conformance TicketedTransportation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedTransportation.CodingKeys and conformance TicketedTransportation.CodingKeys;
  if (!lazy protocol witness table cache variable for type TicketedTransportation.CodingKeys and conformance TicketedTransportation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedTransportation.CodingKeys and conformance TicketedTransportation.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TicketedShow.CodingKeys and conformance TicketedShow.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TicketedShow.CodingKeys and conformance TicketedShow.CodingKeys;
  if (!lazy protocol witness table cache variable for type TicketedShow.CodingKeys and conformance TicketedShow.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedShow.CodingKeys and conformance TicketedShow.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedShow.CodingKeys and conformance TicketedShow.CodingKeys;
  if (!lazy protocol witness table cache variable for type TicketedShow.CodingKeys and conformance TicketedShow.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedShow.CodingKeys and conformance TicketedShow.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedShow.CodingKeys and conformance TicketedShow.CodingKeys;
  if (!lazy protocol witness table cache variable for type TicketedShow.CodingKeys and conformance TicketedShow.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedShow.CodingKeys and conformance TicketedShow.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedShow.CodingKeys and conformance TicketedShow.CodingKeys;
  if (!lazy protocol witness table cache variable for type TicketedShow.CodingKeys and conformance TicketedShow.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedShow.CodingKeys and conformance TicketedShow.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Appointment.CodingKeys and conformance Appointment.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Appointment.CodingKeys and conformance Appointment.CodingKeys;
  if (!lazy protocol witness table cache variable for type Appointment.CodingKeys and conformance Appointment.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Appointment.CodingKeys and conformance Appointment.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Appointment.CodingKeys and conformance Appointment.CodingKeys;
  if (!lazy protocol witness table cache variable for type Appointment.CodingKeys and conformance Appointment.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Appointment.CodingKeys and conformance Appointment.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Appointment.CodingKeys and conformance Appointment.CodingKeys;
  if (!lazy protocol witness table cache variable for type Appointment.CodingKeys and conformance Appointment.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Appointment.CodingKeys and conformance Appointment.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Appointment.CodingKeys and conformance Appointment.CodingKeys;
  if (!lazy protocol witness table cache variable for type Appointment.CodingKeys and conformance Appointment.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Appointment.CodingKeys and conformance Appointment.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Party.CodingKeys and conformance Party.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Party.CodingKeys and conformance Party.CodingKeys;
  if (!lazy protocol witness table cache variable for type Party.CodingKeys and conformance Party.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Party.CodingKeys and conformance Party.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Party.CodingKeys and conformance Party.CodingKeys;
  if (!lazy protocol witness table cache variable for type Party.CodingKeys and conformance Party.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Party.CodingKeys and conformance Party.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Party.CodingKeys and conformance Party.CodingKeys;
  if (!lazy protocol witness table cache variable for type Party.CodingKeys and conformance Party.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Party.CodingKeys and conformance Party.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Party.CodingKeys and conformance Party.CodingKeys;
  if (!lazy protocol witness table cache variable for type Party.CodingKeys and conformance Party.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Party.CodingKeys and conformance Party.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Trip.CodingKeys and conformance Trip.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Trip.CodingKeys and conformance Trip.CodingKeys;
  if (!lazy protocol witness table cache variable for type Trip.CodingKeys and conformance Trip.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Trip.CodingKeys and conformance Trip.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Trip.CodingKeys and conformance Trip.CodingKeys;
  if (!lazy protocol witness table cache variable for type Trip.CodingKeys and conformance Trip.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Trip.CodingKeys and conformance Trip.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Trip.CodingKeys and conformance Trip.CodingKeys;
  if (!lazy protocol witness table cache variable for type Trip.CodingKeys and conformance Trip.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Trip.CodingKeys and conformance Trip.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Trip.CodingKeys and conformance Trip.CodingKeys;
  if (!lazy protocol witness table cache variable for type Trip.CodingKeys and conformance Trip.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Trip.CodingKeys and conformance Trip.CodingKeys);
  }
  return result;
}

uint64_t outlined assign with take of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = a2 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v4 += 16;
      --v3;
    }
    while (v3);
  }
}

void specialized Dictionary<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = a2 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  uint64_t v4 = v3 & *(void *)(a2 + 64);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v6 = 0;
  int64_t v7 = 0;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  for (v4 &= v4 - 1; ; uint64_t v4 = (v9 - 1) & v9)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v6 ^= Hasher._finalize()();
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v8 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v8 >= v5) {
      goto LABEL_19;
    }
    uint64_t v9 = *(void *)(v11 + 8 * v8);
    ++v7;
    if (!v9)
    {
      int64_t v7 = v8 + 1;
      if (v8 + 1 >= v5) {
        goto LABEL_19;
      }
      uint64_t v9 = *(void *)(v11 + 8 * v7);
      if (!v9) {
        break;
      }
    }
LABEL_16:
    ;
  }
  int64_t v10 = v8 + 2;
  if (v10 >= v5)
  {
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v6);
    return;
  }
  uint64_t v9 = *(void *)(v11 + 8 * v10);
  if (v9)
  {
    int64_t v7 = v10;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v7 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v7 >= v5) {
      goto LABEL_19;
    }
    uint64_t v9 = *(void *)(v11 + 8 * v7);
    ++v10;
    if (v9) {
      goto LABEL_16;
    }
  }
LABEL_21:
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlightReservation.CodingKeys and conformance FlightReservation.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HotelReservation.CodingKeys and conformance HotelReservation.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys;
  if (!lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RestaurantReservation.CodingKeys and conformance RestaurantReservation.CodingKeys);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for RentalCarReservation(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type RentalCarReservation and conformance RentalCarReservation, (void (*)(uint64_t))type metadata accessor for RentalCarReservation);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type RentalCarReservation and conformance RentalCarReservation, (void (*)(uint64_t))type metadata accessor for RentalCarReservation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for RentalCarReservation(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type RentalCarReservation and conformance RentalCarReservation, (void (*)(uint64_t))type metadata accessor for RentalCarReservation);
  a1[2] = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type RentalCarReservation and conformance RentalCarReservation, (void (*)(uint64_t))type metadata accessor for RentalCarReservation);
  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type RentalCarReservation and conformance RentalCarReservation, (void (*)(uint64_t))type metadata accessor for RentalCarReservation);
  a1[3] = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for TicketedTransportation(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type TicketedTransportation and conformance TicketedTransportation, (void (*)(uint64_t))type metadata accessor for TicketedTransportation);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type TicketedTransportation and conformance TicketedTransportation, (void (*)(uint64_t))type metadata accessor for TicketedTransportation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for TicketedTransportation(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type TicketedTransportation and conformance TicketedTransportation, (void (*)(uint64_t))type metadata accessor for TicketedTransportation);
  a1[2] = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type TicketedTransportation and conformance TicketedTransportation, (void (*)(uint64_t))type metadata accessor for TicketedTransportation);
  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type TicketedTransportation and conformance TicketedTransportation, (void (*)(uint64_t))type metadata accessor for TicketedTransportation);
  a1[3] = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for TicketedShow(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type TicketedShow and conformance TicketedShow, (void (*)(uint64_t))type metadata accessor for TicketedShow);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type TicketedShow and conformance TicketedShow, (void (*)(uint64_t))type metadata accessor for TicketedShow);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for TicketedShow(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type TicketedShow and conformance TicketedShow, (void (*)(uint64_t))type metadata accessor for TicketedShow);
  a1[2] = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type TicketedShow and conformance TicketedShow, (void (*)(uint64_t))type metadata accessor for TicketedShow);
  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type TicketedShow and conformance TicketedShow, (void (*)(uint64_t))type metadata accessor for TicketedShow);
  a1[3] = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for Appointment(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Appointment and conformance Appointment, (void (*)(uint64_t))type metadata accessor for Appointment);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Appointment and conformance Appointment, (void (*)(uint64_t))type metadata accessor for Appointment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for Appointment(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Appointment and conformance Appointment, (void (*)(uint64_t))type metadata accessor for Appointment);
  a1[2] = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Appointment and conformance Appointment, (void (*)(uint64_t))type metadata accessor for Appointment);
  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Appointment and conformance Appointment, (void (*)(uint64_t))type metadata accessor for Appointment);
  a1[3] = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for Party(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Party and conformance Party, (void (*)(uint64_t))type metadata accessor for Party);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Party and conformance Party, (void (*)(uint64_t))type metadata accessor for Party);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for Party(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Party and conformance Party, (void (*)(uint64_t))type metadata accessor for Party);
  a1[2] = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Party and conformance Party, (void (*)(uint64_t))type metadata accessor for Party);
  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Party and conformance Party, (void (*)(uint64_t))type metadata accessor for Party);
  a1[3] = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for Trip(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Trip and conformance Trip, (void (*)(uint64_t))type metadata accessor for Trip);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Trip and conformance Trip, (void (*)(uint64_t))type metadata accessor for Trip);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for Trip(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Trip and conformance Trip, (void (*)(uint64_t))type metadata accessor for Trip);
  a1[2] = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Trip and conformance Trip, (void (*)(uint64_t))type metadata accessor for Trip);
  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type Trip and conformance Trip, (void (*)(uint64_t))type metadata accessor for Trip);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in FlightReservation()
{
  return lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type FlightReservation and conformance FlightReservation, (void (*)(uint64_t))type metadata accessor for FlightReservation);
}

uint64_t instantiation function for generic protocol witness table for FlightReservation(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type FlightReservation and conformance FlightReservation, (void (*)(uint64_t))type metadata accessor for FlightReservation);
  a1[2] = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type FlightReservation and conformance FlightReservation, (void (*)(uint64_t))type metadata accessor for FlightReservation);
  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type FlightReservation and conformance FlightReservation, (void (*)(uint64_t))type metadata accessor for FlightReservation);
  a1[3] = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for FlightReservation(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type FlightReservation and conformance FlightReservation, (void (*)(uint64_t))type metadata accessor for FlightReservation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for HotelReservation(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type HotelReservation and conformance HotelReservation, (void (*)(uint64_t))type metadata accessor for HotelReservation);
  a1[2] = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type HotelReservation and conformance HotelReservation, (void (*)(uint64_t))type metadata accessor for HotelReservation);
  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type HotelReservation and conformance HotelReservation, (void (*)(uint64_t))type metadata accessor for HotelReservation);
  a1[3] = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for HotelReservation(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type HotelReservation and conformance HotelReservation, (void (*)(uint64_t))type metadata accessor for HotelReservation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for RestaurantReservation(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type RestaurantReservation and conformance RestaurantReservation, (void (*)(uint64_t))type metadata accessor for RestaurantReservation);
  a1[2] = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type RestaurantReservation and conformance RestaurantReservation, (void (*)(uint64_t))type metadata accessor for RestaurantReservation);
  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type RestaurantReservation and conformance RestaurantReservation, (void (*)(uint64_t))type metadata accessor for RestaurantReservation);
  a1[3] = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for RestaurantReservation(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight(&lazy protocol witness table cache variable for type RestaurantReservation and conformance RestaurantReservation, (void (*)(uint64_t))type metadata accessor for RestaurantReservation);
  *(void *)(a1 + 8) = result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for RentalCarReservation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v33 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v33 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v8;
    uint64_t v9 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v9;
    uint64_t v10 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v10;
    uint64_t v11 = a2[11];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v11;
    uint64_t v12 = a2[13];
    *(void *)(a1 + 96) = a2[12];
    *(void *)(a1 + 104) = v12;
    uint64_t v13 = a2[15];
    *(void *)(a1 + 112) = a2[14];
    *(void *)(a1 + 120) = v13;
    *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
    *(_WORD *)(a1 + 129) = *(_WORD *)((char *)a2 + 129);
    uint64_t v14 = a2[18];
    *(void *)(a1 + 136) = a2[17];
    *(void *)(a1 + 144) = v14;
    uint64_t v15 = a2[20];
    *(void *)(a1 + 152) = a2[19];
    *(void *)(a1 + 160) = v15;
    uint64_t v16 = a2[22];
    *(void *)(a1 + 168) = a2[21];
    *(void *)(a1 + 176) = v16;
    uint64_t v17 = a2[24];
    *(void *)(a1 + 184) = a2[23];
    *(void *)(a1 + 192) = v17;
    uint64_t v18 = a2[26];
    *(void *)(a1 + 200) = a2[25];
    *(void *)(a1 + 208) = v18;
    uint64_t v19 = a2[28];
    *(void *)(a1 + 216) = a2[27];
    *(void *)(a1 + 224) = v19;
    uint64_t v20 = a2[30];
    *(void *)(a1 + 232) = a2[29];
    *(void *)(a1 + 240) = v20;
    uint64_t v41 = a2[32];
    *(void *)(a1 + 248) = a2[31];
    *(void *)(a1 + 256) = v41;
    uint64_t v40 = a2[34];
    *(void *)(a1 + 264) = a2[33];
    *(void *)(a1 + 272) = v40;
    uint64_t v39 = a2[36];
    *(void *)(a1 + 280) = a2[35];
    *(void *)(a1 + 288) = v39;
    uint64_t v21 = a2[38];
    *(void *)(a1 + 296) = a2[37];
    *(void *)(a1 + 304) = v21;
    uint64_t v22 = a2[40];
    *(void *)(a1 + 312) = a2[39];
    *(void *)(a1 + 320) = v22;
    uint64_t v23 = a2[42];
    *(void *)(a1 + 328) = a2[41];
    *(void *)(a1 + 336) = v23;
    uint64_t v24 = a2[44];
    *(void *)(a1 + 344) = a2[43];
    *(void *)(a1 + 352) = v24;
    uint64_t v25 = a2[46];
    *(void *)(a1 + 360) = a2[45];
    *(void *)(a1 + 368) = v25;
    uint64_t v26 = a2[47];
    *(unsigned char *)(a1 + 384) = *((unsigned char *)a2 + 384);
    *(void *)(a1 + 376) = v26;
    uint64_t v27 = a2[50];
    *(void *)(a1 + 392) = a2[49];
    *(void *)(a1 + 400) = v27;
    uint64_t v28 = a2[52];
    uint64_t v29 = *(int *)(a3 + 140);
    *(void *)(a1 + 408) = a2[51];
    *(void *)(a1 + 416) = v28;
    int64_t v42 = (void *)(a1 + v29);
    BOOL v30 = (char *)a2 + v29;
    uint64_t v31 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v30, 1, v31))
    {
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v42, v30, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v42, v30, v31);
      __swift_storeEnumTagSinglePayload((uint64_t)v42, 0, 1, v31);
    }
    uint64_t v34 = *(int *)(a3 + 144);
    uint64_t v35 = (char *)v4 + v34;
    char v36 = (char *)a2 + v34;
    if (__swift_getEnumTagSinglePayload((uint64_t)v36, 1, v31))
    {
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v35, v36, v31);
      __swift_storeEnumTagSinglePayload((uint64_t)v35, 0, 1, v31);
    }
  }
  return v4;
}

uint64_t destroy for RentalCarReservation(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 140);
  uint64_t v5 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 144);
  uint64_t result = __swift_getEnumTagSinglePayload(v6, 1, v5);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v8(v6, v5);
  }
  return result;
}

uint64_t initializeWithCopy for RentalCarReservation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  uint64_t v11 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v11;
  uint64_t v12 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v12;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
  uint64_t v13 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v13;
  uint64_t v14 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v14;
  uint64_t v15 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v15;
  uint64_t v16 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v16;
  uint64_t v17 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v17;
  uint64_t v18 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v18;
  uint64_t v19 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v19;
  uint64_t v39 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v39;
  uint64_t v20 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v20;
  uint64_t v21 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v21;
  uint64_t v22 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v22;
  uint64_t v23 = *(void *)(a2 + 320);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 320) = v23;
  uint64_t v24 = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = v24;
  uint64_t v25 = *(void *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = v25;
  uint64_t v26 = *(void *)(a2 + 368);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = v26;
  uint64_t v27 = *(void *)(a2 + 376);
  *(unsigned char *)(a1 + 384) = *(unsigned char *)(a2 + 384);
  *(void *)(a1 + 376) = v27;
  uint64_t v28 = *(void *)(a2 + 400);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a1 + 400) = v28;
  uint64_t v29 = *(void *)(a2 + 416);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = v29;
  uint64_t v30 = *(int *)(a3 + 140);
  uint64_t v40 = (void *)(a1 + v30);
  uint64_t v31 = (const void *)(a2 + v30);
  uint64_t v32 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v31, 1, v32))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v40, v31, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v32 - 8) + 16))(v40, v31, v32);
    __swift_storeEnumTagSinglePayload((uint64_t)v40, 0, 1, v32);
  }
  uint64_t v34 = *(int *)(a3 + 144);
  uint64_t v35 = (void *)(a1 + v34);
  char v36 = (const void *)(a2 + v34);
  if (__swift_getEnumTagSinglePayload((uint64_t)v36, 1, v32))
  {
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v32 - 8) + 16))(v35, v36, v32);
    __swift_storeEnumTagSinglePayload((uint64_t)v35, 0, 1, v32);
  }
  return a1;
}

uint64_t assignWithCopy for RentalCarReservation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 376);
  *(unsigned char *)(a1 + 384) = *(unsigned char *)(a2 + 384);
  *(void *)(a1 + 376) = v6;
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 140);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  int v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (EnumTagSinglePayload)
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v13 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 144);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  int v18 = __swift_getEnumTagSinglePayload(a1 + v15, 1, v10);
  int v19 = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, v10);
  if (!v18)
  {
    uint64_t v20 = *(void *)(v10 - 8);
    if (!v19)
    {
      (*(void (**)(void *, const void *, uint64_t))(v20 + 24))(v16, v17, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v16, v10);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16))(v16, v17, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v10);
  return a1;
}

uint64_t initializeWithTake for RentalCarReservation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  long long v10 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v10;
  long long v11 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v11;
  long long v12 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v12;
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  long long v13 = *(_OWORD *)(a2 + 240);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 384) = *(unsigned char *)(a2 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  uint64_t v14 = *(int *)(a3 + 140);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  *(_OWORD *)(a1 + 240) = v13;
  uint64_t v17 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
  }
  uint64_t v19 = *(int *)(a3 + 144);
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (const void *)(a2 + v19);
  if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v17))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v17 - 8) + 32))(v20, v21, v17);
    __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v17);
  }
  return a1;
}

uint64_t assignWithTake for RentalCarReservation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v13;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v16;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v18;
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v19;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v21;
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v22;
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(a2 + 320);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 320) = v23;
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = v24;
  swift_bridgeObjectRelease();
  uint64_t v25 = *(void *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = v25;
  swift_bridgeObjectRelease();
  uint64_t v26 = *(void *)(a2 + 368);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = v26;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(unsigned char *)(a1 + 384) = *(unsigned char *)(a2 + 384);
  uint64_t v27 = *(void *)(a2 + 400);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a1 + 400) = v27;
  swift_bridgeObjectRelease();
  uint64_t v28 = *(void *)(a2 + 416);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = v28;
  swift_bridgeObjectRelease();
  uint64_t v29 = *(int *)(a3 + 140);
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (const void *)(a2 + v29);
  uint64_t v32 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v30, 1, v32);
  int v34 = __swift_getEnumTagSinglePayload((uint64_t)v31, 1, v32);
  if (EnumTagSinglePayload)
  {
    if (!v34)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v32 - 8) + 32))(v30, v31, v32);
      __swift_storeEnumTagSinglePayload((uint64_t)v30, 0, 1, v32);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v35 = *(void *)(v32 - 8);
  if (v34)
  {
    (*(void (**)(void *, uint64_t))(v35 + 8))(v30, v32);
LABEL_6:
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v30, v31, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v35 + 40))(v30, v31, v32);
LABEL_7:
  uint64_t v37 = *(int *)(a3 + 144);
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (const void *)(a2 + v37);
  int v40 = __swift_getEnumTagSinglePayload(a1 + v37, 1, v32);
  int v41 = __swift_getEnumTagSinglePayload((uint64_t)v39, 1, v32);
  if (!v40)
  {
    uint64_t v42 = *(void *)(v32 - 8);
    if (!v41)
    {
      (*(void (**)(void *, const void *, uint64_t))(v42 + 40))(v38, v39, v32);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v42 + 8))(v38, v32);
    goto LABEL_12;
  }
  if (v41)
  {
LABEL_12:
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v38, v39, *(void *)(*(void *)(v43 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v32 - 8) + 32))(v38, v39, v32);
  __swift_storeEnumTagSinglePayload((uint64_t)v38, 0, 1, v32);
  return a1;
}

uint64_t getEnumTagSinglePayload for RentalCarReservation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2584BF7C0);
}

uint64_t sub_2584BF7C0()
{
  OUTLINED_FUNCTION_87_1();
  if (v1) {
    return OUTLINED_FUNCTION_44_21();
  }
  OUTLINED_FUNCTION_119_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v3 = OUTLINED_FUNCTION_108_7(*(int *)(v0 + 140));
  return __swift_getEnumTagSinglePayload(v3, v4, v5);
}

uint64_t storeEnumTagSinglePayload for RentalCarReservation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2584BF840);
}

void sub_2584BF840()
{
  OUTLINED_FUNCTION_71_1();
  if (v1)
  {
    OUTLINED_FUNCTION_113_11();
  }
  else
  {
    uint64_t v2 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    uint64_t v3 = OUTLINED_FUNCTION_95_0(*(int *)(v2 + 140));
    __swift_storeEnumTagSinglePayload(v3, v4, v5, v6);
  }
}

void type metadata completion function for RentalCarReservation()
{
  type metadata accessor for Date?(319, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *initializeBufferWithCopyOfBuffer for TicketedTransportation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v29 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v8;
    uint64_t v9 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v9;
    uint64_t v10 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v10;
    uint64_t v11 = a2[11];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v11;
    uint64_t v12 = a2[13];
    *(void *)(a1 + 96) = a2[12];
    *(void *)(a1 + 104) = v12;
    uint64_t v13 = a2[15];
    *(void *)(a1 + 112) = a2[14];
    *(void *)(a1 + 120) = v13;
    *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
    *(_WORD *)(a1 + 129) = *(_WORD *)((char *)a2 + 129);
    uint64_t v14 = a2[18];
    *(void *)(a1 + 136) = a2[17];
    *(void *)(a1 + 144) = v14;
    uint64_t v15 = a2[20];
    *(void *)(a1 + 152) = a2[19];
    *(void *)(a1 + 160) = v15;
    uint64_t v16 = a2[22];
    *(void *)(a1 + 168) = a2[21];
    *(void *)(a1 + 176) = v16;
    uint64_t v17 = a2[24];
    *(void *)(a1 + 184) = a2[23];
    *(void *)(a1 + 192) = v17;
    uint64_t v35 = a2[26];
    *(void *)(a1 + 200) = a2[25];
    *(void *)(a1 + 208) = v35;
    uint64_t v18 = a2[28];
    *(void *)(a1 + 216) = a2[27];
    *(void *)(a1 + 224) = v18;
    uint64_t v19 = a2[30];
    *(void *)(a1 + 232) = a2[29];
    *(void *)(a1 + 240) = v19;
    uint64_t v20 = a2[32];
    *(void *)(a1 + 248) = a2[31];
    *(void *)(a1 + 256) = v20;
    uint64_t v21 = a2[33];
    uint64_t v22 = a2[34];
    uint64_t v23 = a2[35];
    uint64_t v24 = a2[36];
    *(unsigned char *)(a1 + 296) = *((unsigned char *)a2 + 296);
    *(void *)(a1 + 280) = v23;
    *(void *)(a1 + 288) = v24;
    uint64_t v25 = *(int *)(a3 + 112);
    uint64_t v36 = (void *)(a1 + v25);
    uint64_t v26 = (char *)a2 + v25;
    *(void *)(a1 + 264) = v21;
    *(void *)(a1 + 272) = v22;
    uint64_t v27 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, v27))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v36, v26, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v36, v26, v27);
      __swift_storeEnumTagSinglePayload((uint64_t)v36, 0, 1, v27);
    }
    uint64_t v30 = *(int *)(a3 + 116);
    uint64_t v31 = (char *)v4 + v30;
    uint64_t v32 = (char *)a2 + v30;
    if (__swift_getEnumTagSinglePayload((uint64_t)v32, 1, v27))
    {
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v31, v32, v27);
      __swift_storeEnumTagSinglePayload((uint64_t)v31, 0, 1, v27);
    }
  }
  return v4;
}

uint64_t destroy for TicketedTransportation(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 112);
  uint64_t v5 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 116);
  uint64_t result = __swift_getEnumTagSinglePayload(v6, 1, v5);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v8(v6, v5);
  }
  return result;
}

uint64_t initializeWithCopy for TicketedTransportation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  uint64_t v11 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v11;
  uint64_t v12 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v12;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
  uint64_t v13 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v13;
  uint64_t v14 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v14;
  uint64_t v15 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v15;
  uint64_t v16 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v16;
  uint64_t v33 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v33;
  uint64_t v17 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v17;
  uint64_t v18 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v18;
  uint64_t v19 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v19;
  uint64_t v20 = *(void *)(a2 + 264);
  uint64_t v21 = *(void *)(a2 + 272);
  uint64_t v22 = *(void *)(a2 + 280);
  uint64_t v23 = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 280) = v22;
  *(void *)(a1 + 288) = v23;
  uint64_t v24 = *(int *)(a3 + 112);
  int v34 = (void *)(a1 + v24);
  uint64_t v25 = (const void *)(a2 + v24);
  *(void *)(a1 + 264) = v20;
  *(void *)(a1 + 272) = v21;
  uint64_t v26 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v25, 1, v26))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v34, v25, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v26 - 8) + 16))(v34, v25, v26);
    __swift_storeEnumTagSinglePayload((uint64_t)v34, 0, 1, v26);
  }
  uint64_t v28 = *(int *)(a3 + 116);
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (const void *)(a2 + v28);
  if (__swift_getEnumTagSinglePayload((uint64_t)v30, 1, v26))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v26 - 8) + 16))(v29, v30, v26);
    __swift_storeEnumTagSinglePayload((uint64_t)v29, 0, 1, v26);
  }
  return a1;
}

uint64_t assignWithCopy for TicketedTransportation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 288) = v6;
  uint64_t v7 = *(int *)(a3 + 112);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  int v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (EnumTagSinglePayload)
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v13 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 116);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  int v18 = __swift_getEnumTagSinglePayload(a1 + v15, 1, v10);
  int v19 = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, v10);
  if (!v18)
  {
    uint64_t v20 = *(void *)(v10 - 8);
    if (!v19)
    {
      (*(void (**)(void *, const void *, uint64_t))(v20 + 24))(v16, v17, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v16, v10);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16))(v16, v17, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v10);
  return a1;
}

uint64_t initializeWithTake for TicketedTransportation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  long long v10 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v10;
  long long v11 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v11;
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  long long v12 = *(_OWORD *)(a2 + 248);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  uint64_t v13 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v13;
  uint64_t v14 = *(int *)(a3 + 112);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  *(_OWORD *)(a1 + 248) = v12;
  uint64_t v17 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
  }
  uint64_t v19 = *(int *)(a3 + 116);
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (const void *)(a2 + v19);
  if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v17))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v17 - 8) + 32))(v20, v21, v17);
    __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v17);
  }
  return a1;
}

uint64_t assignWithTake for TicketedTransportation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v13;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v16;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v18;
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v19;
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v20;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  uint64_t v21 = *(int *)(a3 + 112);
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (const void *)(a2 + v21);
  uint64_t v24 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v22, 1, v24);
  int v26 = __swift_getEnumTagSinglePayload((uint64_t)v23, 1, v24);
  if (EnumTagSinglePayload)
  {
    if (!v26)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v24 - 8) + 32))(v22, v23, v24);
      __swift_storeEnumTagSinglePayload((uint64_t)v22, 0, 1, v24);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v27 = *(void *)(v24 - 8);
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v27 + 8))(v22, v24);
LABEL_6:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v22, v23, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v27 + 40))(v22, v23, v24);
LABEL_7:
  uint64_t v29 = *(int *)(a3 + 116);
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (const void *)(a2 + v29);
  int v32 = __swift_getEnumTagSinglePayload(a1 + v29, 1, v24);
  int v33 = __swift_getEnumTagSinglePayload((uint64_t)v31, 1, v24);
  if (!v32)
  {
    uint64_t v34 = *(void *)(v24 - 8);
    if (!v33)
    {
      (*(void (**)(void *, const void *, uint64_t))(v34 + 40))(v30, v31, v24);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v34 + 8))(v30, v24);
    goto LABEL_12;
  }
  if (v33)
  {
LABEL_12:
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v30, v31, *(void *)(*(void *)(v35 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v24 - 8) + 32))(v30, v31, v24);
  __swift_storeEnumTagSinglePayload((uint64_t)v30, 0, 1, v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for TicketedTransportation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2584C0CCC);
}

uint64_t sub_2584C0CCC()
{
  OUTLINED_FUNCTION_87_1();
  if (v1) {
    return OUTLINED_FUNCTION_44_21();
  }
  OUTLINED_FUNCTION_119_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v3 = OUTLINED_FUNCTION_108_7(*(int *)(v0 + 112));
  return __swift_getEnumTagSinglePayload(v3, v4, v5);
}

uint64_t storeEnumTagSinglePayload for TicketedTransportation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2584C0D4C);
}

void sub_2584C0D4C()
{
  OUTLINED_FUNCTION_71_1();
  if (v1)
  {
    OUTLINED_FUNCTION_113_11();
  }
  else
  {
    uint64_t v2 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    uint64_t v3 = OUTLINED_FUNCTION_95_0(*(int *)(v2 + 112));
    __swift_storeEnumTagSinglePayload(v3, v4, v5, v6);
  }
}

void type metadata completion function for TicketedTransportation()
{
  type metadata accessor for Date?(319, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *initializeBufferWithCopyOfBuffer for TicketedShow(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v29 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v8;
    uint64_t v9 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v9;
    uint64_t v10 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v10;
    uint64_t v11 = a2[11];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v11;
    uint64_t v12 = a2[13];
    *(void *)(a1 + 96) = a2[12];
    *(void *)(a1 + 104) = v12;
    uint64_t v13 = a2[15];
    *(void *)(a1 + 112) = a2[14];
    *(void *)(a1 + 120) = v13;
    *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
    *(_WORD *)(a1 + 129) = *(_WORD *)((char *)a2 + 129);
    uint64_t v14 = a2[18];
    *(void *)(a1 + 136) = a2[17];
    *(void *)(a1 + 144) = v14;
    uint64_t v15 = a2[20];
    *(void *)(a1 + 152) = a2[19];
    *(void *)(a1 + 160) = v15;
    uint64_t v16 = a2[22];
    *(void *)(a1 + 168) = a2[21];
    *(void *)(a1 + 176) = v16;
    uint64_t v17 = a2[24];
    *(void *)(a1 + 184) = a2[23];
    *(void *)(a1 + 192) = v17;
    uint64_t v18 = a2[26];
    *(void *)(a1 + 200) = a2[25];
    *(void *)(a1 + 208) = v18;
    uint64_t v19 = a2[28];
    *(void *)(a1 + 216) = a2[27];
    *(void *)(a1 + 224) = v19;
    uint64_t v44 = a2[30];
    *(void *)(a1 + 232) = a2[29];
    *(void *)(a1 + 240) = v44;
    uint64_t v20 = a2[32];
    *(void *)(a1 + 248) = a2[31];
    *(void *)(a1 + 256) = v20;
    uint64_t v21 = a2[34];
    *(void *)(a1 + 264) = a2[33];
    *(void *)(a1 + 272) = v21;
    uint64_t v22 = a2[36];
    uint64_t v23 = a2[35];
    *(unsigned char *)(a1 + 296) = *((unsigned char *)a2 + 296);
    *(void *)(a1 + 280) = v23;
    *(void *)(a1 + 288) = v22;
    uint64_t v24 = a2[39];
    uint64_t v25 = a3[29];
    char v45 = (void *)(a1 + v25);
    int v26 = (char *)a2 + v25;
    *(void *)(a1 + 304) = a2[38];
    *(void *)(a1 + 312) = v24;
    uint64_t v27 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, v27))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v45, v26, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v45, v26, v27);
      __swift_storeEnumTagSinglePayload((uint64_t)v45, 0, 1, v27);
    }
    uint64_t v30 = a3[30];
    uint64_t v31 = a3[31];
    int v32 = (void *)((char *)v4 + v30);
    int v33 = (uint64_t *)((char *)a2 + v30);
    uint64_t v34 = v33[1];
    void *v32 = *v33;
    v32[1] = v34;
    uint64_t v35 = (char *)v4 + v31;
    uint64_t v36 = (char *)a2 + v31;
    uint64_t v37 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v36, 1, v37))
    {
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v35, v36, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v35, v36, v37);
      __swift_storeEnumTagSinglePayload((uint64_t)v35, 0, 1, v37);
    }
    uint64_t v39 = a3[32];
    int v40 = (char *)v4 + v39;
    int v41 = (char *)a2 + v39;
    if (__swift_getEnumTagSinglePayload((uint64_t)v41, 1, v37))
    {
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v40, v41, v37);
      __swift_storeEnumTagSinglePayload((uint64_t)v40, 0, 1, v37);
    }
  }
  return v4;
}

uint64_t destroy for TicketedShow(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[29];
  uint64_t v5 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + a2[31];
  uint64_t v7 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  uint64_t v8 = a1 + a2[32];
  uint64_t result = __swift_getEnumTagSinglePayload(v8, 1, v7);
  if (!result)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    return v10(v8, v7);
  }
  return result;
}

uint64_t initializeWithCopy for TicketedShow(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  uint64_t v11 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v11;
  uint64_t v12 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v12;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
  uint64_t v13 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v13;
  uint64_t v14 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v14;
  uint64_t v15 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v15;
  uint64_t v16 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v16;
  uint64_t v17 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v17;
  uint64_t v18 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v18;
  uint64_t v42 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v42;
  uint64_t v19 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v19;
  uint64_t v20 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v20;
  uint64_t v21 = *(void *)(a2 + 288);
  uint64_t v22 = *(void *)(a2 + 280);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 280) = v22;
  *(void *)(a1 + 288) = v21;
  uint64_t v23 = *(void *)(a2 + 312);
  uint64_t v24 = a3[29];
  uint64_t v43 = (void *)(a1 + v24);
  uint64_t v25 = (const void *)(a2 + v24);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = v23;
  uint64_t v26 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v25, 1, v26))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v43, v25, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v26 - 8) + 16))(v43, v25, v26);
    __swift_storeEnumTagSinglePayload((uint64_t)v43, 0, 1, v26);
  }
  uint64_t v28 = a3[30];
  uint64_t v29 = a3[31];
  uint64_t v30 = (void *)(a1 + v28);
  uint64_t v31 = (void *)(a2 + v28);
  uint64_t v32 = v31[1];
  void *v30 = *v31;
  v30[1] = v32;
  int v33 = (void *)(a1 + v29);
  uint64_t v34 = (const void *)(a2 + v29);
  uint64_t v35 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v34, 1, v35))
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v33, v34, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v35 - 8) + 16))(v33, v34, v35);
    __swift_storeEnumTagSinglePayload((uint64_t)v33, 0, 1, v35);
  }
  uint64_t v37 = a3[32];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (const void *)(a2 + v37);
  if (__swift_getEnumTagSinglePayload((uint64_t)v39, 1, v35))
  {
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v35 - 8) + 16))(v38, v39, v35);
    __swift_storeEnumTagSinglePayload((uint64_t)v38, 0, 1, v35);
  }
  return a1;
}

uint64_t assignWithCopy for TicketedShow(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 288) = v6;
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[29];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  int v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (EnumTagSinglePayload)
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v13 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v15 = a3[30];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[31];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  uint64_t v21 = type metadata accessor for Date();
  int v22 = __swift_getEnumTagSinglePayload((uint64_t)v19, 1, v21);
  int v23 = __swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
      __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v24 = *(void *)(v21 - 8);
  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v24 + 8))(v19, v21);
LABEL_12:
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v19, v20, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(v24 + 24))(v19, v20, v21);
LABEL_13:
  uint64_t v26 = a3[32];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (const void *)(a2 + v26);
  int v29 = __swift_getEnumTagSinglePayload(a1 + v26, 1, v21);
  int v30 = __swift_getEnumTagSinglePayload((uint64_t)v28, 1, v21);
  if (!v29)
  {
    uint64_t v31 = *(void *)(v21 - 8);
    if (!v30)
    {
      (*(void (**)(void *, const void *, uint64_t))(v31 + 24))(v27, v28, v21);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v31 + 8))(v27, v21);
    goto LABEL_18;
  }
  if (v30)
  {
LABEL_18:
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v27, v28, *(void *)(*(void *)(v32 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v21 - 8) + 16))(v27, v28, v21);
  __swift_storeEnumTagSinglePayload((uint64_t)v27, 0, 1, v21);
  return a1;
}

uint64_t initializeWithTake for TicketedShow(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  long long v10 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v10;
  long long v11 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v11;
  long long v12 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v12;
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  uint64_t v13 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v13;
  uint64_t v14 = a3[29];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  uint64_t v17 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
  }
  uint64_t v19 = a3[31];
  *(_OWORD *)(a1 + a3[30]) = *(_OWORD *)(a2 + a3[30]);
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (const void *)(a2 + v19);
  uint64_t v22 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v22))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
    __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v22);
  }
  uint64_t v24 = a3[32];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (const void *)(a2 + v24);
  if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, v22))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v22 - 8) + 32))(v25, v26, v22);
    __swift_storeEnumTagSinglePayload((uint64_t)v25, 0, 1, v22);
  }
  return a1;
}

uint64_t assignWithTake for TicketedShow(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v13;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v16;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v18;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v19;
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v20;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  uint64_t v21 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = v21;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[29];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (const void *)(a2 + v22);
  uint64_t v25 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v23, 1, v25);
  int v27 = __swift_getEnumTagSinglePayload((uint64_t)v24, 1, v25);
  if (EnumTagSinglePayload)
  {
    if (!v27)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
      __swift_storeEnumTagSinglePayload((uint64_t)v23, 0, 1, v25);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v28 = *(void *)(v25 - 8);
  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v28 + 8))(v23, v25);
LABEL_6:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v23, v24, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v28 + 40))(v23, v24, v25);
LABEL_7:
  uint64_t v30 = a3[30];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (uint64_t *)(a2 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[31];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (const void *)(a2 + v35);
  uint64_t v38 = type metadata accessor for Date();
  int v39 = __swift_getEnumTagSinglePayload((uint64_t)v36, 1, v38);
  int v40 = __swift_getEnumTagSinglePayload((uint64_t)v37, 1, v38);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v38 - 8) + 32))(v36, v37, v38);
      __swift_storeEnumTagSinglePayload((uint64_t)v36, 0, 1, v38);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v41 = *(void *)(v38 - 8);
  if (v40)
  {
    (*(void (**)(void *, uint64_t))(v41 + 8))(v36, v38);
LABEL_12:
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v36, v37, *(void *)(*(void *)(v42 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(v41 + 40))(v36, v37, v38);
LABEL_13:
  uint64_t v43 = a3[32];
  uint64_t v44 = (void *)(a1 + v43);
  char v45 = (const void *)(a2 + v43);
  int v46 = __swift_getEnumTagSinglePayload(a1 + v43, 1, v38);
  int v47 = __swift_getEnumTagSinglePayload((uint64_t)v45, 1, v38);
  if (!v46)
  {
    uint64_t v48 = *(void *)(v38 - 8);
    if (!v47)
    {
      (*(void (**)(void *, const void *, uint64_t))(v48 + 40))(v44, v45, v38);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v48 + 8))(v44, v38);
    goto LABEL_18;
  }
  if (v47)
  {
LABEL_18:
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v44, v45, *(void *)(*(void *)(v49 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v38 - 8) + 32))(v44, v45, v38);
  __swift_storeEnumTagSinglePayload((uint64_t)v44, 0, 1, v38);
  return a1;
}

uint64_t getEnumTagSinglePayload for TicketedShow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2584C2740);
}

uint64_t sub_2584C2740()
{
  OUTLINED_FUNCTION_87_1();
  if (v2) {
    return OUTLINED_FUNCTION_44_21();
  }
  OUTLINED_FUNCTION_119_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_29_3();
  if (*(_DWORD *)(v4 + 84) == v0)
  {
    uint64_t v5 = *(int *)(v1 + 116);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    uint64_t v5 = *(int *)(v1 + 124);
  }
  uint64_t v6 = OUTLINED_FUNCTION_108_7(v5);
  return __swift_getEnumTagSinglePayload(v6, v7, v8);
}

uint64_t storeEnumTagSinglePayload for TicketedShow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2584C27E8);
}

void sub_2584C27E8()
{
  OUTLINED_FUNCTION_71_1();
  if (v2)
  {
    OUTLINED_FUNCTION_113_11();
  }
  else
  {
    OUTLINED_FUNCTION_297();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_29_3();
    if (*(_DWORD *)(v3 + 84) == v1)
    {
      uint64_t v4 = *(int *)(v0 + 116);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      uint64_t v4 = *(int *)(v0 + 124);
    }
    uint64_t v5 = OUTLINED_FUNCTION_95_0(v4);
    __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
  }
}

void type metadata completion function for TicketedShow()
{
  type metadata accessor for Date?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *initializeBufferWithCopyOfBuffer for Appointment(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v29 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v8;
    uint64_t v9 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v9;
    uint64_t v10 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v10;
    uint64_t v11 = a2[11];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v11;
    uint64_t v12 = a2[13];
    *(void *)(a1 + 96) = a2[12];
    *(void *)(a1 + 104) = v12;
    uint64_t v13 = a2[15];
    *(void *)(a1 + 112) = a2[14];
    *(void *)(a1 + 120) = v13;
    *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
    *(_WORD *)(a1 + 129) = *(_WORD *)((char *)a2 + 129);
    uint64_t v14 = a2[18];
    *(void *)(a1 + 136) = a2[17];
    *(void *)(a1 + 144) = v14;
    uint64_t v15 = a2[20];
    *(void *)(a1 + 152) = a2[19];
    *(void *)(a1 + 160) = v15;
    uint64_t v16 = a2[22];
    *(void *)(a1 + 168) = a2[21];
    *(void *)(a1 + 176) = v16;
    uint64_t v17 = a2[24];
    *(void *)(a1 + 184) = a2[23];
    *(void *)(a1 + 192) = v17;
    uint64_t v18 = a2[26];
    *(void *)(a1 + 200) = a2[25];
    *(void *)(a1 + 208) = v18;
    uint64_t v19 = a2[28];
    *(void *)(a1 + 216) = a2[27];
    *(void *)(a1 + 224) = v19;
    uint64_t v20 = a2[30];
    *(void *)(a1 + 232) = a2[29];
    *(void *)(a1 + 240) = v20;
    uint64_t v21 = a2[32];
    *(void *)(a1 + 248) = a2[31];
    *(void *)(a1 + 256) = v21;
    uint64_t v22 = a2[34];
    uint64_t v23 = a2[33];
    *(unsigned char *)(a1 + 280) = *((unsigned char *)a2 + 280);
    *(void *)(a1 + 264) = v23;
    *(void *)(a1 + 272) = v22;
    uint64_t v24 = a2[37];
    uint64_t v25 = *(int *)(a3 + 108);
    uint64_t v35 = (void *)(a1 + v25);
    uint64_t v26 = (char *)a2 + v25;
    *(void *)(a1 + 288) = a2[36];
    *(void *)(a1 + 296) = v24;
    uint64_t v27 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, v27))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v35, v26, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v35, v26, v27);
      __swift_storeEnumTagSinglePayload((uint64_t)v35, 0, 1, v27);
    }
    uint64_t v30 = *(int *)(a3 + 112);
    uint64_t v31 = (char *)v4 + v30;
    uint64_t v32 = (char *)a2 + v30;
    if (__swift_getEnumTagSinglePayload((uint64_t)v32, 1, v27))
    {
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v31, v32, v27);
      __swift_storeEnumTagSinglePayload((uint64_t)v31, 0, 1, v27);
    }
  }
  return v4;
}

uint64_t destroy for Appointment(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 108);
  uint64_t v5 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 112);
  uint64_t result = __swift_getEnumTagSinglePayload(v6, 1, v5);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v8(v6, v5);
  }
  return result;
}

uint64_t initializeWithCopy for Appointment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  uint64_t v11 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v11;
  uint64_t v12 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v12;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
  uint64_t v13 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v13;
  uint64_t v14 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v14;
  uint64_t v15 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v15;
  uint64_t v16 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v16;
  uint64_t v17 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v17;
  uint64_t v18 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v18;
  uint64_t v19 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v19;
  uint64_t v20 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v20;
  uint64_t v21 = *(void *)(a2 + 272);
  uint64_t v22 = *(void *)(a2 + 264);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 264) = v22;
  *(void *)(a1 + 272) = v21;
  uint64_t v23 = *(void *)(a2 + 296);
  uint64_t v24 = *(int *)(a3 + 108);
  uint64_t v33 = (void *)(a1 + v24);
  uint64_t v25 = (const void *)(a2 + v24);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v23;
  uint64_t v26 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v25, 1, v26))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v33, v25, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v26 - 8) + 16))(v33, v25, v26);
    __swift_storeEnumTagSinglePayload((uint64_t)v33, 0, 1, v26);
  }
  uint64_t v28 = *(int *)(a3 + 112);
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (const void *)(a2 + v28);
  if (__swift_getEnumTagSinglePayload((uint64_t)v30, 1, v26))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v26 - 8) + 16))(v29, v30, v26);
    __swift_storeEnumTagSinglePayload((uint64_t)v29, 0, 1, v26);
  }
  return a1;
}

uint64_t assignWithCopy for Appointment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 272);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 272) = v6;
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 108);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  int v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (EnumTagSinglePayload)
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v13 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 112);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  int v18 = __swift_getEnumTagSinglePayload(a1 + v15, 1, v10);
  int v19 = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, v10);
  if (!v18)
  {
    uint64_t v20 = *(void *)(v10 - 8);
    if (!v19)
    {
      (*(void (**)(void *, const void *, uint64_t))(v20 + 24))(v16, v17, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v16, v10);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16))(v16, v17, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v10);
  return a1;
}

uint64_t initializeWithTake for Appointment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  long long v10 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v10;
  long long v11 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v11;
  long long v12 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v12;
  long long v13 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v13;
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  uint64_t v14 = *(int *)(a3 + 108);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  uint64_t v17 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
  }
  uint64_t v19 = *(int *)(a3 + 112);
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (const void *)(a2 + v19);
  if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v17))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v17 - 8) + 32))(v20, v21, v17);
    __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v17);
  }
  return a1;
}

uint64_t assignWithTake for Appointment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v13;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v16;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v18;
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v19;
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v20;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  uint64_t v21 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v21;
  swift_bridgeObjectRelease();
  uint64_t v22 = *(int *)(a3 + 108);
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (const void *)(a2 + v22);
  uint64_t v25 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v23, 1, v25);
  int v27 = __swift_getEnumTagSinglePayload((uint64_t)v24, 1, v25);
  if (EnumTagSinglePayload)
  {
    if (!v27)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
      __swift_storeEnumTagSinglePayload((uint64_t)v23, 0, 1, v25);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v28 = *(void *)(v25 - 8);
  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v28 + 8))(v23, v25);
LABEL_6:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v23, v24, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v28 + 40))(v23, v24, v25);
LABEL_7:
  uint64_t v30 = *(int *)(a3 + 112);
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (const void *)(a2 + v30);
  int v33 = __swift_getEnumTagSinglePayload(a1 + v30, 1, v25);
  int v34 = __swift_getEnumTagSinglePayload((uint64_t)v32, 1, v25);
  if (!v33)
  {
    uint64_t v35 = *(void *)(v25 - 8);
    if (!v34)
    {
      (*(void (**)(void *, const void *, uint64_t))(v35 + 40))(v31, v32, v25);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v35 + 8))(v31, v25);
    goto LABEL_12;
  }
  if (v34)
  {
LABEL_12:
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v31, v32, *(void *)(*(void *)(v36 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v25 - 8) + 32))(v31, v32, v25);
  __swift_storeEnumTagSinglePayload((uint64_t)v31, 0, 1, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for Appointment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2584C3C98);
}

uint64_t sub_2584C3C98()
{
  OUTLINED_FUNCTION_87_1();
  if (v1) {
    return OUTLINED_FUNCTION_44_21();
  }
  OUTLINED_FUNCTION_119_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v3 = OUTLINED_FUNCTION_108_7(*(int *)(v0 + 108));
  return __swift_getEnumTagSinglePayload(v3, v4, v5);
}

uint64_t storeEnumTagSinglePayload for Appointment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2584C3D18);
}

void sub_2584C3D18()
{
  OUTLINED_FUNCTION_71_1();
  if (v1)
  {
    OUTLINED_FUNCTION_113_11();
  }
  else
  {
    uint64_t v2 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    uint64_t v3 = OUTLINED_FUNCTION_95_0(*(int *)(v2 + 108));
    __swift_storeEnumTagSinglePayload(v3, v4, v5, v6);
  }
}

void type metadata completion function for Appointment()
{
  type metadata accessor for Date?(319, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *initializeBufferWithCopyOfBuffer for Party(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v8;
    uint64_t v9 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v9;
    uint64_t v10 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v10;
    uint64_t v11 = a2[11];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v11;
    uint64_t v12 = a2[13];
    *(void *)(a1 + 96) = a2[12];
    *(void *)(a1 + 104) = v12;
    uint64_t v13 = a2[15];
    *(void *)(a1 + 112) = a2[14];
    *(void *)(a1 + 120) = v13;
    *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
    *(_WORD *)(a1 + 129) = *(_WORD *)((char *)a2 + 129);
    uint64_t v14 = a2[18];
    *(void *)(a1 + 136) = a2[17];
    *(void *)(a1 + 144) = v14;
    uint64_t v15 = a2[20];
    *(void *)(a1 + 152) = a2[19];
    *(void *)(a1 + 160) = v15;
    uint64_t v16 = a2[22];
    *(void *)(a1 + 168) = a2[21];
    *(void *)(a1 + 176) = v16;
    uint64_t v17 = a2[24];
    *(void *)(a1 + 184) = a2[23];
    *(void *)(a1 + 192) = v17;
    uint64_t v18 = a2[26];
    *(void *)(a1 + 200) = a2[25];
    *(void *)(a1 + 208) = v18;
    uint64_t v19 = a2[28];
    *(void *)(a1 + 216) = a2[27];
    *(void *)(a1 + 224) = v19;
    uint64_t v20 = a2[30];
    *(void *)(a1 + 232) = a2[29];
    *(void *)(a1 + 240) = v20;
    uint64_t v21 = a3[24];
    __dst = (void *)(a1 + v21);
    uint64_t v35 = (char *)a2 + v21;
    *(void *)(a1 + 248) = a2[31];
    uint64_t v22 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v35, 1, v22))
    {
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(__dst, v35, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(__dst, v35, v22);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v22);
    }
    uint64_t v25 = a3[25];
    uint64_t v26 = (char *)v4 + v25;
    int v27 = (char *)a2 + v25;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v25, 1, v22))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v26, v27, v22);
      __swift_storeEnumTagSinglePayload((uint64_t)v26, 0, 1, v22);
    }
    uint64_t v29 = a3[26];
    uint64_t v30 = (char *)v4 + v29;
    uint64_t v31 = (char *)a2 + v29;
    uint64_t v32 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v31, 1, v32))
    {
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v30, v31, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
      __swift_storeEnumTagSinglePayload((uint64_t)v30, 0, 1, v32);
    }
  }
  return v4;
}

uint64_t destroy for Party(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[24];
  uint64_t v5 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  uint64_t v6 = a1 + a2[25];
  if (!__swift_getEnumTagSinglePayload(v6, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v6, v5);
  }
  uint64_t v7 = a1 + a2[26];
  uint64_t v8 = type metadata accessor for URL();
  uint64_t result = __swift_getEnumTagSinglePayload(v7, 1, v8);
  if (!result)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    return v10(v7, v8);
  }
  return result;
}

uint64_t initializeWithCopy for Party(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  uint64_t v11 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v11;
  uint64_t v12 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v12;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
  uint64_t v13 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v13;
  uint64_t v14 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v14;
  uint64_t v15 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v15;
  uint64_t v16 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v16;
  uint64_t v17 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v17;
  uint64_t v18 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v18;
  uint64_t v19 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v19;
  uint64_t v20 = a3[24];
  __dst = (void *)(a1 + v20);
  uint64_t v33 = (const void *)(a2 + v20);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  uint64_t v21 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v33, 1, v21))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(__dst, v33, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v21 - 8) + 16))(__dst, v33, v21);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v21);
  }
  uint64_t v23 = a3[25];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (const void *)(a2 + v23);
  if (__swift_getEnumTagSinglePayload(a2 + v23, 1, v21))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v21 - 8) + 16))(v24, v25, v21);
    __swift_storeEnumTagSinglePayload((uint64_t)v24, 0, 1, v21);
  }
  uint64_t v27 = a3[26];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (const void *)(a2 + v27);
  uint64_t v30 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v30))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
    __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v30);
  }
  return a1;
}

uint64_t assignWithCopy for Party(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[24];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = a3[25];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  int v17 = __swift_getEnumTagSinglePayload(a1 + v14, 1, v9);
  int v18 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v9);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(v15, v16, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v19 = *(void *)(v9 - 8);
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v15, v9);
LABEL_12:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(v19 + 24))(v15, v16, v9);
LABEL_13:
  uint64_t v21 = a3[26];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (const void *)(a2 + v21);
  uint64_t v24 = type metadata accessor for URL();
  int v25 = __swift_getEnumTagSinglePayload((uint64_t)v22, 1, v24);
  int v26 = __swift_getEnumTagSinglePayload((uint64_t)v23, 1, v24);
  if (!v25)
  {
    uint64_t v27 = *(void *)(v24 - 8);
    if (!v26)
    {
      (*(void (**)(void *, const void *, uint64_t))(v27 + 24))(v22, v23, v24);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v27 + 8))(v22, v24);
    goto LABEL_18;
  }
  if (v26)
  {
LABEL_18:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v22, v23, *(void *)(*(void *)(v28 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
  __swift_storeEnumTagSinglePayload((uint64_t)v22, 0, 1, v24);
  return a1;
}

uint64_t initializeWithTake for Party(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  long long v10 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v10;
  long long v11 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v11;
  long long v12 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v12;
  uint64_t v13 = a3[24];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  uint64_t v16 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
  }
  uint64_t v18 = a3[25];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  if (__swift_getEnumTagSinglePayload(a2 + v18, 1, v16))
  {
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v16 - 8) + 32))(v19, v20, v16);
    __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v16);
  }
  uint64_t v22 = a3[26];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (const void *)(a2 + v22);
  uint64_t v25 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v24, 1, v25))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
    __swift_storeEnumTagSinglePayload((uint64_t)v23, 0, 1, v25);
  }
  return a1;
}

uint64_t assignWithTake for Party(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v13;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v16;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v18;
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v19;
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[24];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (const void *)(a2 + v20);
  uint64_t v23 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v21, 1, v23);
  int v25 = __swift_getEnumTagSinglePayload((uint64_t)v22, 1, v23);
  if (EnumTagSinglePayload)
  {
    if (!v25)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
      __swift_storeEnumTagSinglePayload((uint64_t)v21, 0, 1, v23);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v26 = *(void *)(v23 - 8);
  if (v25)
  {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v21, v23);
LABEL_6:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v21, v22, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v26 + 40))(v21, v22, v23);
LABEL_7:
  uint64_t v28 = a3[25];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (const void *)(a2 + v28);
  int v31 = __swift_getEnumTagSinglePayload(a1 + v28, 1, v23);
  int v32 = __swift_getEnumTagSinglePayload((uint64_t)v30, 1, v23);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v23 - 8) + 32))(v29, v30, v23);
      __swift_storeEnumTagSinglePayload((uint64_t)v29, 0, 1, v23);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v33 = *(void *)(v23 - 8);
  if (v32)
  {
    (*(void (**)(void *, uint64_t))(v33 + 8))(v29, v23);
LABEL_12:
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v29, v30, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(v33 + 40))(v29, v30, v23);
LABEL_13:
  uint64_t v35 = a3[26];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (const void *)(a2 + v35);
  uint64_t v38 = type metadata accessor for URL();
  int v39 = __swift_getEnumTagSinglePayload((uint64_t)v36, 1, v38);
  int v40 = __swift_getEnumTagSinglePayload((uint64_t)v37, 1, v38);
  if (!v39)
  {
    uint64_t v41 = *(void *)(v38 - 8);
    if (!v40)
    {
      (*(void (**)(void *, const void *, uint64_t))(v41 + 40))(v36, v37, v38);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v41 + 8))(v36, v38);
    goto LABEL_18;
  }
  if (v40)
  {
LABEL_18:
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v36, v37, *(void *)(*(void *)(v42 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v38 - 8) + 32))(v36, v37, v38);
  __swift_storeEnumTagSinglePayload((uint64_t)v36, 0, 1, v38);
  return a1;
}

uint64_t getEnumTagSinglePayload for Party(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2584C54D4);
}

uint64_t sub_2584C54D4()
{
  OUTLINED_FUNCTION_87_1();
  if (v2) {
    return OUTLINED_FUNCTION_44_21();
  }
  OUTLINED_FUNCTION_119_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_29_3();
  if (*(_DWORD *)(v4 + 84) == v0)
  {
    uint64_t v5 = *(int *)(v1 + 96);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v5 = *(int *)(v1 + 104);
  }
  uint64_t v6 = OUTLINED_FUNCTION_108_7(v5);
  return __swift_getEnumTagSinglePayload(v6, v7, v8);
}

uint64_t storeEnumTagSinglePayload for Party(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2584C557C);
}

void sub_2584C557C()
{
  OUTLINED_FUNCTION_71_1();
  if (v2)
  {
    OUTLINED_FUNCTION_113_11();
  }
  else
  {
    OUTLINED_FUNCTION_297();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_29_3();
    if (*(_DWORD *)(v3 + 84) == v1)
    {
      uint64_t v4 = *(int *)(v0 + 96);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      uint64_t v4 = *(int *)(v0 + 104);
    }
    uint64_t v5 = OUTLINED_FUNCTION_95_0(v4);
    __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
  }
}

void type metadata completion function for Party()
{
  type metadata accessor for Date?(319, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *initializeBufferWithCopyOfBuffer for Trip(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v8;
    uint64_t v9 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v9;
    uint64_t v10 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v10;
    uint64_t v11 = a2[11];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v11;
    uint64_t v12 = a2[13];
    *(void *)(a1 + 96) = a2[12];
    *(void *)(a1 + 104) = v12;
    uint64_t v13 = a2[15];
    *(void *)(a1 + 112) = a2[14];
    *(void *)(a1 + 120) = v13;
    *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
    *(_WORD *)(a1 + 129) = *(_WORD *)((char *)a2 + 129);
    uint64_t v14 = a2[18];
    *(void *)(a1 + 136) = a2[17];
    *(void *)(a1 + 144) = v14;
    uint64_t v15 = a2[20];
    *(void *)(a1 + 152) = a2[19];
    *(void *)(a1 + 160) = v15;
    uint64_t v16 = a2[22];
    *(void *)(a1 + 168) = a2[21];
    *(void *)(a1 + 176) = v16;
    uint64_t v17 = a2[24];
    *(void *)(a1 + 184) = a2[23];
    *(void *)(a1 + 192) = v17;
    uint64_t v18 = a2[26];
    *(void *)(a1 + 200) = a2[25];
    *(void *)(a1 + 208) = v18;
    uint64_t v19 = a3[22];
    __dst = (void *)(a1 + v19);
    uint64_t v36 = (char *)a2 + v19;
    *(void *)(a1 + 216) = a2[27];
    uint64_t v35 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v36, 1, v35))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(__dst, v36, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v35 - 8) + 16))(__dst, v36, v35);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v35);
    }
    uint64_t v22 = a3[23];
    uint64_t v23 = (char *)v4 + v22;
    uint64_t v24 = (char *)a2 + v22;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v22, 1, v35))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16))(v23, v24, v35);
      __swift_storeEnumTagSinglePayload((uint64_t)v23, 0, 1, v35);
    }
    uint64_t v26 = a3[24];
    uint64_t v27 = a3[25];
    uint64_t v28 = (char *)v4 + v26;
    uint64_t v29 = (uint64_t)a2 + v26;
    *(void *)uint64_t v28 = *(void *)v29;
    v28[8] = *(unsigned char *)(v29 + 8);
    uint64_t v30 = (char *)v4 + v27;
    int v31 = (char *)a2 + v27;
    uint64_t v32 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v31, 1, v32))
    {
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v30, v31, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
      __swift_storeEnumTagSinglePayload((uint64_t)v30, 0, 1, v32);
    }
  }
  return v4;
}

uint64_t destroy for Trip(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[22];
  uint64_t v5 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  uint64_t v6 = a1 + a2[23];
  if (!__swift_getEnumTagSinglePayload(v6, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v6, v5);
  }
  uint64_t v7 = a1 + a2[25];
  uint64_t v8 = type metadata accessor for URL();
  uint64_t result = __swift_getEnumTagSinglePayload(v7, 1, v8);
  if (!result)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    return v10(v7, v8);
  }
  return result;
}

uint64_t initializeWithCopy for Trip(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  uint64_t v11 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v11;
  uint64_t v12 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v12;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
  uint64_t v13 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v13;
  uint64_t v14 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v14;
  uint64_t v15 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v15;
  uint64_t v16 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v16;
  uint64_t v17 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v17;
  uint64_t v18 = a3[22];
  __dst = (void *)(a1 + v18);
  uint64_t v33 = (const void *)(a2 + v18);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  uint64_t v34 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v33, 1, v34))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(__dst, v33, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v34 - 8) + 16))(__dst, v33, v34);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v34);
  }
  uint64_t v20 = a3[23];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (const void *)(a2 + v20);
  if (__swift_getEnumTagSinglePayload(a2 + v20, 1, v34))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v34 - 8) + 16))(v21, v22, v34);
    __swift_storeEnumTagSinglePayload((uint64_t)v21, 0, 1, v34);
  }
  uint64_t v24 = a3[24];
  uint64_t v25 = a3[25];
  uint64_t v26 = a1 + v24;
  uint64_t v27 = a2 + v24;
  *(void *)uint64_t v26 = *(void *)v27;
  *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
  uint64_t v28 = (void *)(a1 + v25);
  uint64_t v29 = (const void *)(a2 + v25);
  uint64_t v30 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v30))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
    __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v30);
  }
  return a1;
}

uint64_t assignWithCopy for Trip(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[22];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = a3[23];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  int v17 = __swift_getEnumTagSinglePayload(a1 + v14, 1, v9);
  int v18 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v9);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(v15, v16, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v19 = *(void *)(v9 - 8);
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v15, v9);
LABEL_12:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(v19 + 24))(v15, v16, v9);
LABEL_13:
  uint64_t v21 = a3[24];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v24 = *v23;
  *(unsigned char *)(v22 + 8) = *((unsigned char *)v23 + 8);
  *(void *)uint64_t v22 = v24;
  uint64_t v25 = a3[25];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (const void *)(a2 + v25);
  uint64_t v28 = type metadata accessor for URL();
  int v29 = __swift_getEnumTagSinglePayload((uint64_t)v26, 1, v28);
  int v30 = __swift_getEnumTagSinglePayload((uint64_t)v27, 1, v28);
  if (!v29)
  {
    uint64_t v31 = *(void *)(v28 - 8);
    if (!v30)
    {
      (*(void (**)(void *, const void *, uint64_t))(v31 + 24))(v26, v27, v28);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v31 + 8))(v26, v28);
    goto LABEL_18;
  }
  if (v30)
  {
LABEL_18:
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v26, v27, *(void *)(*(void *)(v32 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
  __swift_storeEnumTagSinglePayload((uint64_t)v26, 0, 1, v28);
  return a1;
}

uint64_t initializeWithTake for Trip(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  long long v10 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v10;
  long long v11 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v11;
  uint64_t v12 = a3[22];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  uint64_t v15 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
  }
  uint64_t v17 = a3[23];
  int v18 = (void *)(a1 + v17);
  uint64_t v19 = (const void *)(a2 + v17);
  if (__swift_getEnumTagSinglePayload(a2 + v17, 1, v15))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v18, v19, v15);
    __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v15);
  }
  uint64_t v21 = a3[24];
  uint64_t v22 = a3[25];
  uint64_t v23 = a1 + v21;
  uint64_t v24 = a2 + v21;
  *(void *)uint64_t v23 = *(void *)v24;
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  uint64_t v25 = (void *)(a1 + v22);
  uint64_t v26 = (const void *)(a2 + v22);
  uint64_t v27 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, v27))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
    __swift_storeEnumTagSinglePayload((uint64_t)v25, 0, 1, v27);
  }
  return a1;
}

uint64_t assignWithTake for Trip(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v13;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v16;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[22];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  uint64_t v21 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v19, 1, v21);
  int v23 = __swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21);
  if (EnumTagSinglePayload)
  {
    if (!v23)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
      __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v24 = *(void *)(v21 - 8);
  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v24 + 8))(v19, v21);
LABEL_6:
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v19, v20, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v24 + 40))(v19, v20, v21);
LABEL_7:
  uint64_t v26 = a3[23];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (const void *)(a2 + v26);
  int v29 = __swift_getEnumTagSinglePayload(a1 + v26, 1, v21);
  int v30 = __swift_getEnumTagSinglePayload((uint64_t)v28, 1, v21);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v21 - 8) + 32))(v27, v28, v21);
      __swift_storeEnumTagSinglePayload((uint64_t)v27, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v31 = *(void *)(v21 - 8);
  if (v30)
  {
    (*(void (**)(void *, uint64_t))(v31 + 8))(v27, v21);
LABEL_12:
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v27, v28, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(v31 + 40))(v27, v28, v21);
LABEL_13:
  uint64_t v33 = a3[24];
  uint64_t v34 = a3[25];
  uint64_t v35 = a1 + v33;
  uint64_t v36 = a2 + v33;
  *(void *)uint64_t v35 = *(void *)v36;
  *(unsigned char *)(v35 + 8) = *(unsigned char *)(v36 + 8);
  uint64_t v37 = (void *)(a1 + v34);
  uint64_t v38 = (const void *)(a2 + v34);
  uint64_t v39 = type metadata accessor for URL();
  int v40 = __swift_getEnumTagSinglePayload((uint64_t)v37, 1, v39);
  int v41 = __swift_getEnumTagSinglePayload((uint64_t)v38, 1, v39);
  if (!v40)
  {
    uint64_t v42 = *(void *)(v39 - 8);
    if (!v41)
    {
      (*(void (**)(void *, const void *, uint64_t))(v42 + 40))(v37, v38, v39);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v42 + 8))(v37, v39);
    goto LABEL_18;
  }
  if (v41)
  {
LABEL_18:
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v37, v38, *(void *)(*(void *)(v43 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v39 - 8) + 32))(v37, v38, v39);
  __swift_storeEnumTagSinglePayload((uint64_t)v37, 0, 1, v39);
  return a1;
}

uint64_t getEnumTagSinglePayload for Trip(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2584C6D50);
}

uint64_t sub_2584C6D50()
{
  OUTLINED_FUNCTION_87_1();
  if (v2) {
    return OUTLINED_FUNCTION_44_21();
  }
  OUTLINED_FUNCTION_119_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_29_3();
  if (*(_DWORD *)(v4 + 84) == v0)
  {
    uint64_t v5 = *(int *)(v1 + 88);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v5 = *(int *)(v1 + 100);
  }
  uint64_t v6 = OUTLINED_FUNCTION_108_7(v5);
  return __swift_getEnumTagSinglePayload(v6, v7, v8);
}

uint64_t storeEnumTagSinglePayload for Trip(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2584C6DF8);
}

void sub_2584C6DF8()
{
  OUTLINED_FUNCTION_71_1();
  if (v2)
  {
    OUTLINED_FUNCTION_113_11();
  }
  else
  {
    OUTLINED_FUNCTION_297();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_29_3();
    if (*(_DWORD *)(v3 + 84) == v1)
    {
      uint64_t v4 = *(int *)(v0 + 88);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      uint64_t v4 = *(int *)(v0 + 100);
    }
    uint64_t v5 = OUTLINED_FUNCTION_95_0(v4);
    __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
  }
}

void type metadata completion function for Trip()
{
  type metadata accessor for Date?(319, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t dispatch thunk of InstantAnswerDocument.answers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of InstantAnswerDocument.answerAttributes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of InstantAnswerDocument.bundleId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of InstantAnswerDocument.mailMessageId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of InstantAnswerDocument.eventSourceBundleIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of InstantAnswerDocument.eventSourceBundleIdentifier.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of InstantAnswerDocument.eventSourceBundleIdentifier.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of InstantAnswerDocument.eventSourceLLMConsumableDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of InstantAnswerDocument.eventSourceLLMConsumableDescription.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of InstantAnswerDocument.eventSourceLLMConsumableDescription.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

char *initializeBufferWithCopyOfBuffer for FlightReservation(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (char *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (char *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v9;
    uint64_t v10 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v10;
    uint64_t v11 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v11;
    uint64_t v12 = a2[11];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v12;
    *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
    uint64_t v13 = a2[14];
    uint64_t v14 = a3[13];
    uint64_t v143 = (void *)(a1 + v14);
    uint64_t v138 = (char *)a2 + v14;
    *(void *)(a1 + 104) = a2[13];
    *(void *)(a1 + 112) = v13;
    __dst = (void *)type metadata accessor for URL();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v138, 1, (uint64_t)__dst))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v143, v138, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, void *))(*(__dst - 1) + 16))(v143, v138, __dst);
      __swift_storeEnumTagSinglePayload((uint64_t)v143, 0, 1, (uint64_t)__dst);
    }
    uint64_t v17 = a3[14];
    uint64_t v18 = &v4[v17];
    uint64_t v19 = (char *)a2 + v17;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v17, 1, (uint64_t)__dst))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, void *))(*(__dst - 1) + 16))(v18, v19, __dst);
      __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, (uint64_t)__dst);
    }
    uint64_t v21 = a3[15];
    uint64_t v22 = a3[16];
    int v23 = &v4[v21];
    uint64_t v24 = (uint64_t *)((char *)a2 + v21);
    uint64_t v25 = v24[1];
    *(void *)int v23 = *v24;
    *((void *)v23 + 1) = v25;
    uint64_t v26 = &v4[v22];
    uint64_t v27 = (uint64_t *)((char *)a2 + v22);
    uint64_t v28 = v27[1];
    *(void *)uint64_t v26 = *v27;
    *((void *)v26 + 1) = v28;
    uint64_t v29 = a3[17];
    uint64_t v30 = a3[18];
    uint64_t v31 = &v4[v29];
    uint64_t v32 = (uint64_t *)((char *)a2 + v29);
    uint64_t v33 = v32[1];
    *(void *)uint64_t v31 = *v32;
    *((void *)v31 + 1) = v33;
    uint64_t v34 = &v4[v30];
    uint64_t v144 = (uint64_t)a2 + v30;
    uint64_t v35 = type metadata accessor for DateComponents();
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36(v34, v144, v35);
    v36(&v4[a3[19]], (uint64_t)a2 + a3[19], v35);
    uint64_t v37 = a3[20];
    uint64_t v38 = a3[21];
    uint64_t v39 = &v4[v37];
    int v40 = (uint64_t *)((char *)a2 + v37);
    uint64_t v142 = v40[1];
    *(void *)uint64_t v39 = *v40;
    *((void *)v39 + 1) = v142;
    int v41 = &v4[v38];
    uint64_t v42 = (uint64_t *)((char *)a2 + v38);
    uint64_t v145 = v42[1];
    *(void *)int v41 = *v42;
    *((void *)v41 + 1) = v145;
    uint64_t v43 = a3[22];
    uint64_t v44 = a3[23];
    char v45 = &v4[v43];
    int v46 = (uint64_t *)((char *)a2 + v43);
    uint64_t v137 = v46[1];
    *(void *)char v45 = *v46;
    *((void *)v45 + 1) = v137;
    int v47 = &v4[v44];
    uint64_t v48 = (uint64_t *)((char *)a2 + v44);
    uint64_t v139 = v48[1];
    *(void *)int v47 = *v48;
    *((void *)v47 + 1) = v139;
    uint64_t v49 = a3[24];
    uint64_t v50 = a3[25];
    char v51 = &v4[v49];
    char v52 = (uint64_t *)((char *)a2 + v49);
    uint64_t v135 = v52[1];
    *(void *)char v51 = *v52;
    *((void *)v51 + 1) = v135;
    uint64_t v53 = &v4[v50];
    uint64_t v54 = (uint64_t *)((char *)a2 + v50);
    uint64_t v136 = v54[1];
    *(void *)uint64_t v53 = *v54;
    *((void *)v53 + 1) = v136;
    uint64_t v55 = a3[26];
    uint64_t v56 = a3[27];
    uint64_t v57 = &v4[v55];
    uint64_t v58 = (uint64_t *)((char *)a2 + v55);
    uint64_t v133 = v58[1];
    *(void *)uint64_t v57 = *v58;
    *((void *)v57 + 1) = v133;
    Swift::String v59 = &v4[v56];
    uint64_t v60 = (uint64_t *)((char *)a2 + v56);
    uint64_t v134 = v60[1];
    *(void *)Swift::String v59 = *v60;
    *((void *)v59 + 1) = v134;
    uint64_t v61 = a3[28];
    uint64_t v62 = a3[29];
    unint64_t v63 = &v4[v61];
    uint64_t v64 = (uint64_t *)((char *)a2 + v61);
    uint64_t v131 = v64[1];
    *(void *)unint64_t v63 = *v64;
    *((void *)v63 + 1) = v131;
    unint64_t v65 = &v4[v62];
    uint64_t v66 = (uint64_t *)((char *)a2 + v62);
    uint64_t v132 = v66[1];
    *(void *)unint64_t v65 = *v66;
    *((void *)v65 + 1) = v132;
    uint64_t v67 = a3[30];
    uint64_t v68 = a3[31];
    uint64_t v69 = &v4[v67];
    uint64_t v70 = (uint64_t *)((char *)a2 + v67);
    uint64_t v129 = v70[1];
    *(void *)uint64_t v69 = *v70;
    *((void *)v69 + 1) = v129;
    uint64_t v71 = &v4[v68];
    uint64_t v72 = (uint64_t *)((char *)a2 + v68);
    uint64_t v130 = v72[1];
    *(void *)uint64_t v71 = *v72;
    *((void *)v71 + 1) = v130;
    uint64_t v73 = a3[32];
    uint64_t v74 = a3[33];
    int v75 = &v4[v73];
    uint64_t v76 = (uint64_t *)((char *)a2 + v73);
    uint64_t v77 = v76[1];
    *(void *)int v75 = *v76;
    *((void *)v75 + 1) = v77;
    *(void *)&v4[v74] = *(uint64_t *)((char *)a2 + v74);
    uint64_t v78 = a3[35];
    *(void *)&v4[a3[34]] = *(uint64_t *)((char *)a2 + a3[34]);
    uint64_t v79 = &v4[v78];
    uint64_t v80 = (uint64_t *)((char *)a2 + v78);
    uint64_t v81 = v80[1];
    *(void *)uint64_t v79 = *v80;
    *((void *)v79 + 1) = v81;
    uint64_t v82 = a3[36];
    uint64_t v83 = a3[37];
    uint64_t v84 = &v4[v82];
    uint64_t v85 = (uint64_t *)((char *)a2 + v82);
    uint64_t v86 = v85[1];
    *(void *)uint64_t v84 = *v85;
    *((void *)v84 + 1) = v86;
    uint64_t v87 = &v4[v83];
    uint64_t v88 = (uint64_t *)((char *)a2 + v83);
    uint64_t v89 = v88[1];
    *(void *)uint64_t v87 = *v88;
    *((void *)v87 + 1) = v89;
    uint64_t v90 = a3[38];
    __dsta = &v4[v90];
    char v128 = (char *)a2 + v90;
    uint64_t v91 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v128, 1, v91))
    {
      uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(__dsta, v128, *(void *)(*(void *)(v92 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v91 - 8) + 16))(__dsta, v128, v91);
      __swift_storeEnumTagSinglePayload((uint64_t)__dsta, 0, 1, v91);
    }
    uint64_t v93 = a3[39];
    uint64_t v94 = a3[40];
    uint64_t v95 = &v4[v93];
    uint64_t v96 = (uint64_t *)((char *)a2 + v93);
    uint64_t v97 = v96[1];
    *(void *)uint64_t v95 = *v96;
    *((void *)v95 + 1) = v97;
    uint64_t v98 = &v4[v94];
    uint64_t v99 = (uint64_t *)((char *)a2 + v94);
    uint64_t v100 = v99[1];
    *(void *)uint64_t v98 = *v99;
    *((void *)v98 + 1) = v100;
    uint64_t v101 = a3[41];
    uint64_t v102 = a3[42];
    uint64_t v103 = &v4[v101];
    uint64_t v104 = (uint64_t)a2 + v101;
    *(void *)uint64_t v103 = *(void *)v104;
    v103[8] = *(unsigned char *)(v104 + 8);
    uint64_t v105 = &v4[v102];
    uint64_t v106 = (uint64_t *)((char *)a2 + v102);
    uint64_t v107 = v106[1];
    *(void *)uint64_t v105 = *v106;
    *((void *)v105 + 1) = v107;
    uint64_t v108 = a3[43];
    uint64_t v109 = a3[44];
    uint64_t v110 = &v4[v108];
    uint64_t v111 = (uint64_t)a2 + v108;
    *(_OWORD *)uint64_t v110 = *(_OWORD *)v111;
    *(void *)(v110 + 13) = *(void *)(v111 + 13);
    uint64_t v112 = &v4[v109];
    uint64_t v113 = (uint64_t *)((char *)a2 + v109);
    uint64_t v114 = v113[1];
    *(void *)uint64_t v112 = *v113;
    *((void *)v112 + 1) = v114;
    uint64_t v115 = a3[45];
    uint64_t v116 = a3[46];
    unint64_t v117 = &v4[v115];
    uint64_t v118 = (uint64_t *)((char *)a2 + v115);
    uint64_t v119 = v118[1];
    *(void *)unint64_t v117 = *v118;
    *((void *)v117 + 1) = v119;
    uint64_t v120 = &v4[v116];
    uint64_t v121 = (uint64_t *)((char *)a2 + v116);
    uint64_t v122 = v121[1];
    *(void *)uint64_t v120 = *v121;
    *((void *)v120 + 1) = v122;
    uint64_t v123 = a3[47];
    uint64_t v124 = &v4[v123];
    uint64_t v125 = (uint64_t *)((char *)a2 + v123);
    uint64_t v126 = v125[1];
    *(void *)uint64_t v124 = *v125;
    *((void *)v124 + 1) = v126;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for FlightReservation(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[13];
  uint64_t v5 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  uint64_t v6 = a1 + a2[14];
  if (!__swift_getEnumTagSinglePayload(v6, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v6, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + a2[18];
  uint64_t v8 = type metadata accessor for DateComponents();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(a1 + a2[19], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = a1 + a2[38];
  uint64_t v11 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v10, 1, v11)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FlightReservation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v12 = *(void *)(a2 + 112);
  uint64_t v13 = a3[13];
  uint64_t v141 = (void *)(a1 + v13);
  uint64_t v136 = (const void *)(a2 + v13);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v12;
  __dst = (void *)type metadata accessor for URL();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v136, 1, (uint64_t)__dst))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v141, v136, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, void *))(*(__dst - 1) + 16))(v141, v136, __dst);
    __swift_storeEnumTagSinglePayload((uint64_t)v141, 0, 1, (uint64_t)__dst);
  }
  uint64_t v15 = a3[14];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  if (__swift_getEnumTagSinglePayload(a2 + v15, 1, (uint64_t)__dst))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, void *))(*(__dst - 1) + 16))(v16, v17, __dst);
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, (uint64_t)__dst);
  }
  uint64_t v19 = a3[15];
  uint64_t v20 = a3[16];
  uint64_t v21 = (void *)(a1 + v19);
  uint64_t v22 = (void *)(a2 + v19);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  uint64_t v24 = (void *)(a1 + v20);
  uint64_t v25 = (void *)(a2 + v20);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  uint64_t v27 = a3[17];
  uint64_t v28 = a3[18];
  uint64_t v29 = (void *)(a1 + v27);
  uint64_t v30 = (void *)(a2 + v27);
  uint64_t v31 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v31;
  uint64_t v32 = a1 + v28;
  uint64_t v142 = a2 + v28;
  uint64_t v33 = type metadata accessor for DateComponents();
  uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34(v32, v142, v33);
  v34(a1 + a3[19], a2 + a3[19], v33);
  uint64_t v35 = a3[20];
  uint64_t v36 = a3[21];
  uint64_t v37 = (void *)(a1 + v35);
  uint64_t v38 = (void *)(a2 + v35);
  uint64_t v140 = v38[1];
  *uint64_t v37 = *v38;
  v37[1] = v140;
  uint64_t v39 = (void *)(a1 + v36);
  int v40 = (void *)(a2 + v36);
  uint64_t v143 = v40[1];
  *uint64_t v39 = *v40;
  v39[1] = v143;
  uint64_t v41 = a3[22];
  uint64_t v42 = a3[23];
  uint64_t v43 = (void *)(a1 + v41);
  uint64_t v44 = (void *)(a2 + v41);
  uint64_t v135 = v44[1];
  *uint64_t v43 = *v44;
  v43[1] = v135;
  char v45 = (void *)(a1 + v42);
  int v46 = (void *)(a2 + v42);
  uint64_t v137 = v46[1];
  *char v45 = *v46;
  v45[1] = v137;
  uint64_t v47 = a3[24];
  uint64_t v48 = a3[25];
  uint64_t v49 = (void *)(a1 + v47);
  uint64_t v50 = (void *)(a2 + v47);
  uint64_t v133 = v50[1];
  void *v49 = *v50;
  v49[1] = v133;
  char v51 = (void *)(a1 + v48);
  char v52 = (void *)(a2 + v48);
  uint64_t v134 = v52[1];
  *char v51 = *v52;
  v51[1] = v134;
  uint64_t v53 = a3[26];
  uint64_t v54 = a3[27];
  uint64_t v55 = (void *)(a1 + v53);
  uint64_t v56 = (void *)(a2 + v53);
  uint64_t v131 = v56[1];
  *uint64_t v55 = *v56;
  v55[1] = v131;
  uint64_t v57 = (void *)(a1 + v54);
  uint64_t v58 = (void *)(a2 + v54);
  uint64_t v132 = v58[1];
  *uint64_t v57 = *v58;
  v57[1] = v132;
  uint64_t v59 = a3[28];
  uint64_t v60 = a3[29];
  uint64_t v61 = (void *)(a1 + v59);
  uint64_t v62 = (void *)(a2 + v59);
  uint64_t v129 = v62[1];
  *uint64_t v61 = *v62;
  v61[1] = v129;
  unint64_t v63 = (void *)(a1 + v60);
  uint64_t v64 = (void *)(a2 + v60);
  uint64_t v130 = v64[1];
  *unint64_t v63 = *v64;
  v63[1] = v130;
  uint64_t v65 = a3[30];
  uint64_t v66 = a3[31];
  uint64_t v67 = (void *)(a1 + v65);
  uint64_t v68 = (void *)(a2 + v65);
  uint64_t v127 = v68[1];
  *uint64_t v67 = *v68;
  v67[1] = v127;
  uint64_t v69 = (void *)(a1 + v66);
  uint64_t v70 = (void *)(a2 + v66);
  uint64_t v128 = v70[1];
  void *v69 = *v70;
  v69[1] = v128;
  uint64_t v71 = a3[32];
  uint64_t v72 = a3[33];
  uint64_t v73 = (void *)(a1 + v71);
  uint64_t v74 = (void *)(a2 + v71);
  uint64_t v75 = v74[1];
  *uint64_t v73 = *v74;
  v73[1] = v75;
  *(void *)(a1 + v72) = *(void *)(a2 + v72);
  uint64_t v76 = a3[35];
  *(void *)(a1 + a3[34]) = *(void *)(a2 + a3[34]);
  uint64_t v77 = (void *)(a1 + v76);
  uint64_t v78 = (void *)(a2 + v76);
  uint64_t v79 = v78[1];
  *uint64_t v77 = *v78;
  v77[1] = v79;
  uint64_t v80 = a3[36];
  uint64_t v81 = a3[37];
  uint64_t v82 = (void *)(a1 + v80);
  uint64_t v83 = (void *)(a2 + v80);
  uint64_t v84 = v83[1];
  void *v82 = *v83;
  v82[1] = v84;
  uint64_t v85 = (void *)(a1 + v81);
  uint64_t v86 = (void *)(a2 + v81);
  uint64_t v87 = v86[1];
  *uint64_t v85 = *v86;
  v85[1] = v87;
  uint64_t v88 = a3[38];
  __dsta = (void *)(a1 + v88);
  uint64_t v126 = (const void *)(a2 + v88);
  uint64_t v89 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v126, 1, v89))
  {
    uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(__dsta, v126, *(void *)(*(void *)(v90 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v89 - 8) + 16))(__dsta, v126, v89);
    __swift_storeEnumTagSinglePayload((uint64_t)__dsta, 0, 1, v89);
  }
  uint64_t v91 = a3[39];
  uint64_t v92 = a3[40];
  uint64_t v93 = (void *)(a1 + v91);
  uint64_t v94 = (void *)(a2 + v91);
  uint64_t v95 = v94[1];
  *uint64_t v93 = *v94;
  v93[1] = v95;
  uint64_t v96 = (void *)(a1 + v92);
  uint64_t v97 = (void *)(a2 + v92);
  uint64_t v98 = v97[1];
  *uint64_t v96 = *v97;
  v96[1] = v98;
  uint64_t v99 = a3[41];
  uint64_t v100 = a3[42];
  uint64_t v101 = a1 + v99;
  uint64_t v102 = a2 + v99;
  *(void *)uint64_t v101 = *(void *)v102;
  *(unsigned char *)(v101 + 8) = *(unsigned char *)(v102 + 8);
  uint64_t v103 = (void *)(a1 + v100);
  uint64_t v104 = (void *)(a2 + v100);
  uint64_t v105 = v104[1];
  *uint64_t v103 = *v104;
  v103[1] = v105;
  uint64_t v106 = a3[43];
  uint64_t v107 = a3[44];
  uint64_t v108 = a1 + v106;
  uint64_t v109 = a2 + v106;
  *(_OWORD *)uint64_t v108 = *(_OWORD *)v109;
  *(void *)(v108 + 13) = *(void *)(v109 + 13);
  uint64_t v110 = (void *)(a1 + v107);
  uint64_t v111 = (void *)(a2 + v107);
  uint64_t v112 = v111[1];
  *uint64_t v110 = *v111;
  v110[1] = v112;
  uint64_t v113 = a3[45];
  uint64_t v114 = a3[46];
  uint64_t v115 = (void *)(a1 + v113);
  uint64_t v116 = (void *)(a2 + v113);
  uint64_t v117 = v116[1];
  *uint64_t v115 = *v116;
  v115[1] = v117;
  uint64_t v118 = (void *)(a1 + v114);
  uint64_t v119 = (void *)(a2 + v114);
  uint64_t v120 = v119[1];
  *uint64_t v118 = *v119;
  v118[1] = v120;
  uint64_t v121 = a3[47];
  uint64_t v122 = (void *)(a1 + v121);
  uint64_t v123 = (void *)(a2 + v121);
  uint64_t v124 = v123[1];
  *uint64_t v122 = *v123;
  v122[1] = v124;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FlightReservation(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[13];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = a3[14];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  int v17 = __swift_getEnumTagSinglePayload(a1 + v14, 1, v9);
  int v18 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v9);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(v15, v16, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v19 = *(void *)(v9 - 8);
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v15, v9);
LABEL_12:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(v19 + 24))(v15, v16, v9);
LABEL_13:
  uint64_t v21 = a3[15];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  *uint64_t v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[16];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (void *)(a2 + v24);
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[17];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  *uint64_t v28 = *v29;
  v28[1] = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[18];
  uint64_t v31 = a1 + v30;
  uint64_t v32 = a2 + v30;
  uint64_t v33 = type metadata accessor for DateComponents();
  uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 24);
  v34(v31, v32, v33);
  v34(a1 + a3[19], a2 + a3[19], v33);
  uint64_t v35 = a3[20];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (void *)(a2 + v35);
  void *v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[21];
  uint64_t v39 = (void *)(a1 + v38);
  int v40 = (void *)(a2 + v38);
  *uint64_t v39 = *v40;
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[22];
  uint64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (void *)(a2 + v41);
  void *v42 = *v43;
  v42[1] = v43[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = a3[23];
  char v45 = (void *)(a1 + v44);
  int v46 = (void *)(a2 + v44);
  *char v45 = *v46;
  v45[1] = v46[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[24];
  uint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = (void *)(a2 + v47);
  *uint64_t v48 = *v49;
  v48[1] = v49[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v50 = a3[25];
  char v51 = (void *)(a1 + v50);
  char v52 = (void *)(a2 + v50);
  *char v51 = *v52;
  v51[1] = v52[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = a3[26];
  uint64_t v54 = (void *)(a1 + v53);
  uint64_t v55 = (void *)(a2 + v53);
  *uint64_t v54 = *v55;
  v54[1] = v55[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v56 = a3[27];
  uint64_t v57 = (void *)(a1 + v56);
  uint64_t v58 = (void *)(a2 + v56);
  *uint64_t v57 = *v58;
  v57[1] = v58[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v59 = a3[28];
  uint64_t v60 = (void *)(a1 + v59);
  uint64_t v61 = (void *)(a2 + v59);
  *uint64_t v60 = *v61;
  v60[1] = v61[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v62 = a3[29];
  unint64_t v63 = (void *)(a1 + v62);
  uint64_t v64 = (void *)(a2 + v62);
  *unint64_t v63 = *v64;
  v63[1] = v64[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v65 = a3[30];
  uint64_t v66 = (void *)(a1 + v65);
  uint64_t v67 = (void *)(a2 + v65);
  void *v66 = *v67;
  v66[1] = v67[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v68 = a3[31];
  uint64_t v69 = (void *)(a1 + v68);
  uint64_t v70 = (void *)(a2 + v68);
  void *v69 = *v70;
  v69[1] = v70[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v71 = a3[32];
  uint64_t v72 = (void *)(a1 + v71);
  uint64_t v73 = (void *)(a2 + v71);
  *uint64_t v72 = *v73;
  v72[1] = v73[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[33]) = *(void *)(a2 + a3[33]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[34]) = *(void *)(a2 + a3[34]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v74 = a3[35];
  uint64_t v75 = (void *)(a1 + v74);
  uint64_t v76 = (void *)(a2 + v74);
  void *v75 = *v76;
  v75[1] = v76[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v77 = a3[36];
  uint64_t v78 = (void *)(a1 + v77);
  uint64_t v79 = (void *)(a2 + v77);
  *uint64_t v78 = *v79;
  v78[1] = v79[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v80 = a3[37];
  uint64_t v81 = (void *)(a1 + v80);
  uint64_t v82 = (void *)(a2 + v80);
  void *v81 = *v82;
  v81[1] = v82[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v83 = a3[38];
  uint64_t v84 = (void *)(a1 + v83);
  uint64_t v85 = (const void *)(a2 + v83);
  uint64_t v86 = type metadata accessor for Date();
  LODWORD(v34) = __swift_getEnumTagSinglePayload((uint64_t)v84, 1, v86);
  int v87 = __swift_getEnumTagSinglePayload((uint64_t)v85, 1, v86);
  if (!v34)
  {
    uint64_t v88 = *(void *)(v86 - 8);
    if (!v87)
    {
      (*(void (**)(void *, const void *, uint64_t))(v88 + 24))(v84, v85, v86);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v88 + 8))(v84, v86);
    goto LABEL_18;
  }
  if (v87)
  {
LABEL_18:
    uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v84, v85, *(void *)(*(void *)(v89 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v86 - 8) + 16))(v84, v85, v86);
  __swift_storeEnumTagSinglePayload((uint64_t)v84, 0, 1, v86);
LABEL_19:
  uint64_t v90 = a3[39];
  uint64_t v91 = (void *)(a1 + v90);
  uint64_t v92 = (void *)(a2 + v90);
  *uint64_t v91 = *v92;
  v91[1] = v92[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v93 = a3[40];
  uint64_t v94 = (void *)(a1 + v93);
  uint64_t v95 = (void *)(a2 + v93);
  *uint64_t v94 = *v95;
  v94[1] = v95[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v96 = a3[41];
  uint64_t v97 = a1 + v96;
  uint64_t v98 = (uint64_t *)(a2 + v96);
  uint64_t v99 = *v98;
  *(unsigned char *)(v97 + 8) = *((unsigned char *)v98 + 8);
  *(void *)uint64_t v97 = v99;
  uint64_t v100 = a3[42];
  uint64_t v101 = (void *)(a1 + v100);
  uint64_t v102 = (void *)(a2 + v100);
  *uint64_t v101 = *v102;
  v101[1] = v102[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v103 = a3[43];
  uint64_t v104 = a1 + v103;
  uint64_t v105 = (long long *)(a2 + v103);
  long long v106 = *v105;
  *(void *)(v104 + 13) = *(void *)((char *)v105 + 13);
  *(_OWORD *)uint64_t v104 = v106;
  uint64_t v107 = a3[44];
  uint64_t v108 = (void *)(a1 + v107);
  uint64_t v109 = (void *)(a2 + v107);
  *uint64_t v108 = *v109;
  v108[1] = v109[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v110 = a3[45];
  uint64_t v111 = (void *)(a1 + v110);
  uint64_t v112 = (void *)(a2 + v110);
  *uint64_t v111 = *v112;
  v111[1] = v112[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v113 = a3[46];
  uint64_t v114 = (void *)(a1 + v113);
  uint64_t v115 = (void *)(a2 + v113);
  *uint64_t v114 = *v115;
  v114[1] = v115[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v116 = a3[47];
  uint64_t v117 = (void *)(a1 + v116);
  uint64_t v118 = (void *)(a2 + v116);
  *uint64_t v117 = *v118;
  v117[1] = v118[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for FlightReservation(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v9 = a3[13];
  uint64_t v10 = (void *)(a1 + v9);
  int v11 = (const void *)(a2 + v9);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v12 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  }
  uint64_t v14 = a3[14];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  if (__swift_getEnumTagSinglePayload(a2 + v14, 1, v12))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v15, v16, v12);
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v12);
  }
  uint64_t v18 = a3[16];
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  uint64_t v19 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = type metadata accessor for DateComponents();
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32);
  v23(v20, v21, v22);
  v23(a1 + a3[19], a2 + a3[19], v22);
  uint64_t v24 = a3[21];
  *(_OWORD *)(a1 + a3[20]) = *(_OWORD *)(a2 + a3[20]);
  *(_OWORD *)(a1 + v24) = *(_OWORD *)(a2 + v24);
  uint64_t v25 = a3[23];
  *(_OWORD *)(a1 + a3[22]) = *(_OWORD *)(a2 + a3[22]);
  *(_OWORD *)(a1 + v25) = *(_OWORD *)(a2 + v25);
  uint64_t v26 = a3[25];
  *(_OWORD *)(a1 + a3[24]) = *(_OWORD *)(a2 + a3[24]);
  *(_OWORD *)(a1 + v26) = *(_OWORD *)(a2 + v26);
  uint64_t v27 = a3[27];
  *(_OWORD *)(a1 + a3[26]) = *(_OWORD *)(a2 + a3[26]);
  *(_OWORD *)(a1 + v27) = *(_OWORD *)(a2 + v27);
  uint64_t v28 = a3[29];
  *(_OWORD *)(a1 + a3[28]) = *(_OWORD *)(a2 + a3[28]);
  *(_OWORD *)(a1 + v28) = *(_OWORD *)(a2 + v28);
  uint64_t v29 = a3[31];
  *(_OWORD *)(a1 + a3[30]) = *(_OWORD *)(a2 + a3[30]);
  *(_OWORD *)(a1 + v29) = *(_OWORD *)(a2 + v29);
  uint64_t v30 = a3[33];
  *(_OWORD *)(a1 + a3[32]) = *(_OWORD *)(a2 + a3[32]);
  *(void *)(a1 + v30) = *(void *)(a2 + v30);
  uint64_t v31 = a3[35];
  *(void *)(a1 + a3[34]) = *(void *)(a2 + a3[34]);
  *(_OWORD *)(a1 + v31) = *(_OWORD *)(a2 + v31);
  uint64_t v32 = a3[37];
  *(_OWORD *)(a1 + a3[36]) = *(_OWORD *)(a2 + a3[36]);
  *(_OWORD *)(a1 + v32) = *(_OWORD *)(a2 + v32);
  uint64_t v33 = a3[38];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (const void *)(a2 + v33);
  uint64_t v36 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v35, 1, v36))
  {
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v34, v35, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v36 - 8) + 32))(v34, v35, v36);
    __swift_storeEnumTagSinglePayload((uint64_t)v34, 0, 1, v36);
  }
  uint64_t v38 = a3[40];
  *(_OWORD *)(a1 + a3[39]) = *(_OWORD *)(a2 + a3[39]);
  *(_OWORD *)(a1 + v38) = *(_OWORD *)(a2 + v38);
  uint64_t v39 = a3[41];
  uint64_t v40 = a3[42];
  uint64_t v41 = a1 + v39;
  uint64_t v42 = a2 + v39;
  *(void *)uint64_t v41 = *(void *)v42;
  *(unsigned char *)(v41 + 8) = *(unsigned char *)(v42 + 8);
  *(_OWORD *)(a1 + v40) = *(_OWORD *)(a2 + v40);
  uint64_t v43 = a3[43];
  uint64_t v44 = a3[44];
  uint64_t v45 = a1 + v43;
  uint64_t v46 = a2 + v43;
  *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
  *(void *)(v45 + 13) = *(void *)(v46 + 13);
  *(_OWORD *)(a1 + v44) = *(_OWORD *)(a2 + v44);
  uint64_t v47 = a3[46];
  *(_OWORD *)(a1 + a3[45]) = *(_OWORD *)(a2 + a3[45]);
  *(_OWORD *)(a1 + v47) = *(_OWORD *)(a2 + v47);
  *(_OWORD *)(a1 + a3[47]) = *(_OWORD *)(a2 + a3[47]);
  return a1;
}

uint64_t assignWithTake for FlightReservation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v11 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[13];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v15);
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15);
  if (EnumTagSinglePayload)
  {
    if (!v17)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v18 = *(void *)(v15 - 8);
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v13, v15);
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v18 + 40))(v13, v14, v15);
LABEL_7:
  uint64_t v20 = a3[14];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (const void *)(a2 + v20);
  int v23 = __swift_getEnumTagSinglePayload(a1 + v20, 1, v15);
  int v24 = __swift_getEnumTagSinglePayload((uint64_t)v22, 1, v15);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v21, v22, v15);
      __swift_storeEnumTagSinglePayload((uint64_t)v21, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v25 = *(void *)(v15 - 8);
  if (v24)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v21, v15);
LABEL_12:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(v25 + 40))(v21, v22, v15);
LABEL_13:
  uint64_t v27 = a3[15];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (uint64_t *)(a2 + v27);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  *uint64_t v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[16];
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (uint64_t *)(a2 + v32);
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  *uint64_t v33 = v36;
  v33[1] = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = a3[17];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (uint64_t *)(a2 + v37);
  uint64_t v41 = *v39;
  uint64_t v40 = v39[1];
  void *v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease();
  uint64_t v42 = a3[18];
  uint64_t v43 = a1 + v42;
  uint64_t v44 = a2 + v42;
  uint64_t v45 = type metadata accessor for DateComponents();
  uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 40);
  v46(v43, v44, v45);
  v46(a1 + a3[19], a2 + a3[19], v45);
  uint64_t v47 = a3[20];
  uint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = (uint64_t *)(a2 + v47);
  uint64_t v51 = *v49;
  uint64_t v50 = v49[1];
  *uint64_t v48 = v51;
  v48[1] = v50;
  swift_bridgeObjectRelease();
  uint64_t v52 = a3[21];
  uint64_t v53 = (void *)(a1 + v52);
  uint64_t v54 = (uint64_t *)(a2 + v52);
  uint64_t v56 = *v54;
  uint64_t v55 = v54[1];
  *uint64_t v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease();
  uint64_t v57 = a3[22];
  uint64_t v58 = (void *)(a1 + v57);
  uint64_t v59 = (uint64_t *)(a2 + v57);
  uint64_t v61 = *v59;
  uint64_t v60 = v59[1];
  *uint64_t v58 = v61;
  v58[1] = v60;
  swift_bridgeObjectRelease();
  uint64_t v62 = a3[23];
  unint64_t v63 = (void *)(a1 + v62);
  uint64_t v64 = (uint64_t *)(a2 + v62);
  uint64_t v66 = *v64;
  uint64_t v65 = v64[1];
  *unint64_t v63 = v66;
  v63[1] = v65;
  swift_bridgeObjectRelease();
  uint64_t v67 = a3[24];
  uint64_t v68 = (void *)(a1 + v67);
  uint64_t v69 = (uint64_t *)(a2 + v67);
  uint64_t v71 = *v69;
  uint64_t v70 = v69[1];
  *uint64_t v68 = v71;
  v68[1] = v70;
  swift_bridgeObjectRelease();
  uint64_t v72 = a3[25];
  uint64_t v73 = (void *)(a1 + v72);
  uint64_t v74 = (uint64_t *)(a2 + v72);
  uint64_t v76 = *v74;
  uint64_t v75 = v74[1];
  *uint64_t v73 = v76;
  v73[1] = v75;
  swift_bridgeObjectRelease();
  uint64_t v77 = a3[26];
  uint64_t v78 = (void *)(a1 + v77);
  uint64_t v79 = (uint64_t *)(a2 + v77);
  uint64_t v81 = *v79;
  uint64_t v80 = v79[1];
  *uint64_t v78 = v81;
  v78[1] = v80;
  swift_bridgeObjectRelease();
  uint64_t v82 = a3[27];
  uint64_t v83 = (void *)(a1 + v82);
  uint64_t v84 = (uint64_t *)(a2 + v82);
  uint64_t v86 = *v84;
  uint64_t v85 = v84[1];
  *uint64_t v83 = v86;
  v83[1] = v85;
  swift_bridgeObjectRelease();
  uint64_t v87 = a3[28];
  uint64_t v88 = (void *)(a1 + v87);
  uint64_t v89 = (uint64_t *)(a2 + v87);
  uint64_t v91 = *v89;
  uint64_t v90 = v89[1];
  *uint64_t v88 = v91;
  v88[1] = v90;
  swift_bridgeObjectRelease();
  uint64_t v92 = a3[29];
  uint64_t v93 = (void *)(a1 + v92);
  uint64_t v94 = (uint64_t *)(a2 + v92);
  uint64_t v96 = *v94;
  uint64_t v95 = v94[1];
  *uint64_t v93 = v96;
  v93[1] = v95;
  swift_bridgeObjectRelease();
  uint64_t v97 = a3[30];
  uint64_t v98 = (void *)(a1 + v97);
  uint64_t v99 = (uint64_t *)(a2 + v97);
  uint64_t v101 = *v99;
  uint64_t v100 = v99[1];
  *uint64_t v98 = v101;
  v98[1] = v100;
  swift_bridgeObjectRelease();
  uint64_t v102 = a3[31];
  uint64_t v103 = (void *)(a1 + v102);
  uint64_t v104 = (uint64_t *)(a2 + v102);
  uint64_t v106 = *v104;
  uint64_t v105 = v104[1];
  *uint64_t v103 = v106;
  v103[1] = v105;
  swift_bridgeObjectRelease();
  uint64_t v107 = a3[32];
  uint64_t v108 = (void *)(a1 + v107);
  uint64_t v109 = (uint64_t *)(a2 + v107);
  uint64_t v111 = *v109;
  uint64_t v110 = v109[1];
  *uint64_t v108 = v111;
  v108[1] = v110;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[33]) = *(void *)(a2 + a3[33]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[34]) = *(void *)(a2 + a3[34]);
  swift_bridgeObjectRelease();
  uint64_t v112 = a3[35];
  uint64_t v113 = (void *)(a1 + v112);
  uint64_t v114 = (uint64_t *)(a2 + v112);
  uint64_t v116 = *v114;
  uint64_t v115 = v114[1];
  *uint64_t v113 = v116;
  v113[1] = v115;
  swift_bridgeObjectRelease();
  uint64_t v117 = a3[36];
  uint64_t v118 = (void *)(a1 + v117);
  uint64_t v119 = (uint64_t *)(a2 + v117);
  uint64_t v121 = *v119;
  uint64_t v120 = v119[1];
  *uint64_t v118 = v121;
  v118[1] = v120;
  swift_bridgeObjectRelease();
  uint64_t v122 = a3[37];
  uint64_t v123 = (void *)(a1 + v122);
  uint64_t v124 = (uint64_t *)(a2 + v122);
  uint64_t v126 = *v124;
  uint64_t v125 = v124[1];
  *uint64_t v123 = v126;
  v123[1] = v125;
  swift_bridgeObjectRelease();
  uint64_t v127 = a3[38];
  uint64_t v128 = (void *)(a1 + v127);
  uint64_t v129 = (const void *)(a2 + v127);
  uint64_t v130 = type metadata accessor for Date();
  LODWORD(v46) = __swift_getEnumTagSinglePayload((uint64_t)v128, 1, v130);
  int v131 = __swift_getEnumTagSinglePayload((uint64_t)v129, 1, v130);
  if (!v46)
  {
    uint64_t v132 = *(void *)(v130 - 8);
    if (!v131)
    {
      (*(void (**)(void *, const void *, uint64_t))(v132 + 40))(v128, v129, v130);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v132 + 8))(v128, v130);
    goto LABEL_18;
  }
  if (v131)
  {
LABEL_18:
    uint64_t v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v128, v129, *(void *)(*(void *)(v133 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v130 - 8) + 32))(v128, v129, v130);
  __swift_storeEnumTagSinglePayload((uint64_t)v128, 0, 1, v130);
LABEL_19:
  uint64_t v134 = a3[39];
  uint64_t v135 = (void *)(a1 + v134);
  uint64_t v136 = (uint64_t *)(a2 + v134);
  uint64_t v138 = *v136;
  uint64_t v137 = v136[1];
  *uint64_t v135 = v138;
  v135[1] = v137;
  swift_bridgeObjectRelease();
  uint64_t v139 = a3[40];
  uint64_t v140 = (void *)(a1 + v139);
  uint64_t v141 = (uint64_t *)(a2 + v139);
  uint64_t v143 = *v141;
  uint64_t v142 = v141[1];
  *uint64_t v140 = v143;
  v140[1] = v142;
  swift_bridgeObjectRelease();
  uint64_t v144 = a3[41];
  uint64_t v145 = a3[42];
  uint64_t v146 = a1 + v144;
  uint64_t v147 = a2 + v144;
  *(void *)uint64_t v146 = *(void *)v147;
  *(unsigned char *)(v146 + 8) = *(unsigned char *)(v147 + 8);
  uint64_t v148 = (void *)(a1 + v145);
  uint64_t v149 = (uint64_t *)(a2 + v145);
  uint64_t v151 = *v149;
  uint64_t v150 = v149[1];
  void *v148 = v151;
  v148[1] = v150;
  swift_bridgeObjectRelease();
  uint64_t v152 = a3[43];
  uint64_t v153 = a3[44];
  uint64_t v154 = a1 + v152;
  uint64_t v155 = a2 + v152;
  *(_OWORD *)uint64_t v154 = *(_OWORD *)v155;
  *(void *)(v154 + 13) = *(void *)(v155 + 13);
  uint64_t v156 = (void *)(a1 + v153);
  uint64_t v157 = (uint64_t *)(a2 + v153);
  uint64_t v159 = *v157;
  uint64_t v158 = v157[1];
  *uint64_t v156 = v159;
  v156[1] = v158;
  swift_bridgeObjectRelease();
  uint64_t v160 = a3[45];
  uint64_t v161 = (void *)(a1 + v160);
  uint64_t v162 = (uint64_t *)(a2 + v160);
  uint64_t v164 = *v162;
  uint64_t v163 = v162[1];
  *uint64_t v161 = v164;
  v161[1] = v163;
  swift_bridgeObjectRelease();
  uint64_t v165 = a3[46];
  uint64_t v166 = (void *)(a1 + v165);
  uint64_t v167 = (uint64_t *)(a2 + v165);
  uint64_t v169 = *v167;
  uint64_t v168 = v167[1];
  *uint64_t v166 = v169;
  v166[1] = v168;
  swift_bridgeObjectRelease();
  uint64_t v170 = a3[47];
  uint64_t v171 = (void *)(a1 + v170);
  uint64_t v172 = (uint64_t *)(a2 + v170);
  uint64_t v174 = *v172;
  uint64_t v173 = v172[1];
  *uint64_t v171 = v174;
  v171[1] = v173;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FlightReservation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2584C9730);
}

uint64_t sub_2584C9730()
{
  OUTLINED_FUNCTION_87_1();
  if (v2) {
    return OUTLINED_FUNCTION_44_21();
  }
  OUTLINED_FUNCTION_119_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_29_3();
  if (*(_DWORD *)(v4 + 84) == v0)
  {
    uint64_t v5 = v1[13];
  }
  else
  {
    type metadata accessor for DateComponents();
    OUTLINED_FUNCTION_29_3();
    if (*(_DWORD *)(v6 + 84) == v0)
    {
      uint64_t v5 = v1[18];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      uint64_t v5 = v1[38];
    }
  }
  uint64_t v7 = OUTLINED_FUNCTION_108_7(v5);
  return __swift_getEnumTagSinglePayload(v7, v8, v9);
}

uint64_t storeEnumTagSinglePayload for FlightReservation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2584C97FC);
}

void sub_2584C97FC()
{
  OUTLINED_FUNCTION_71_1();
  if (v2)
  {
    OUTLINED_FUNCTION_113_11();
  }
  else
  {
    OUTLINED_FUNCTION_297();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_29_3();
    if (*(_DWORD *)(v3 + 84) == v1)
    {
      uint64_t v4 = v0[13];
    }
    else
    {
      type metadata accessor for DateComponents();
      OUTLINED_FUNCTION_29_3();
      if (*(_DWORD *)(v5 + 84) == v1)
      {
        uint64_t v4 = v0[18];
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        uint64_t v4 = v0[38];
      }
    }
    uint64_t v6 = OUTLINED_FUNCTION_95_0(v4);
    __swift_storeEnumTagSinglePayload(v6, v7, v8, v9);
  }
}

void type metadata completion function for FlightReservation()
{
  type metadata accessor for Date?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for DateComponents();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date?(319, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void *initializeBufferWithCopyOfBuffer for HotelReservation(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v9;
    uint64_t v10 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v10;
    uint64_t v11 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v11;
    uint64_t v12 = a2[11];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v12;
    *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
    uint64_t v13 = a2[14];
    *(void *)(a1 + 104) = a2[13];
    *(void *)(a1 + 112) = v13;
    uint64_t v14 = a2[16];
    uint64_t v15 = a3[14];
    __dst = (void *)(a1 + v15);
    uint64_t v67 = (char *)a2 + v15;
    *(void *)(a1 + 120) = a2[15];
    *(void *)(a1 + 128) = v14;
    uint64_t v68 = type metadata accessor for DateComponents();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v67, 1, v68))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
      memcpy(__dst, v67, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v68 - 8) + 16))(__dst, v67, v68);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v68);
    }
    uint64_t v18 = a3[15];
    uint64_t v19 = (char *)v4 + v18;
    uint64_t v20 = (char *)a2 + v18;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v18, 1, v68))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 16))(v19, v20, v68);
      __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v68);
    }
    uint64_t v22 = a3[16];
    uint64_t v23 = a3[17];
    int v24 = (void *)((char *)v4 + v22);
    uint64_t v25 = (uint64_t *)((char *)a2 + v22);
    uint64_t v26 = v25[1];
    *int v24 = *v25;
    v24[1] = v26;
    uint64_t v27 = (void *)((char *)v4 + v23);
    uint64_t v28 = (uint64_t *)((char *)a2 + v23);
    __dsta = (void *)v28[1];
    void *v27 = *v28;
    v27[1] = __dsta;
    uint64_t v29 = a3[18];
    uint64_t v30 = a3[19];
    uint64_t v31 = (void *)((char *)v4 + v29);
    uint64_t v32 = (uint64_t *)((char *)a2 + v29);
    uint64_t v33 = v32[1];
    *uint64_t v31 = *v32;
    v31[1] = v33;
    uint64_t v34 = (void *)((char *)v4 + v30);
    uint64_t v35 = (uint64_t *)((char *)a2 + v30);
    uint64_t v69 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v69;
    uint64_t v36 = a3[20];
    uint64_t v37 = a3[21];
    uint64_t v38 = (void *)((char *)v4 + v36);
    uint64_t v39 = (uint64_t *)((char *)a2 + v36);
    uint64_t v40 = v39[1];
    void *v38 = *v39;
    v38[1] = v40;
    *(void *)((char *)v4 + v37) = *(uint64_t *)((char *)a2 + v37);
    uint64_t v41 = a3[23];
    *(void *)((char *)v4 + a3[22]) = *(uint64_t *)((char *)a2 + a3[22]);
    uint64_t v42 = (char *)v4 + v41;
    uint64_t v43 = (uint64_t)a2 + v41;
    *(void *)uint64_t v42 = *(void *)v43;
    v42[8] = *(unsigned char *)(v43 + 8);
    uint64_t v44 = a3[24];
    uint64_t v45 = a3[25];
    uint64_t v46 = (char *)v4 + v44;
    uint64_t v47 = (uint64_t)a2 + v44;
    *(void *)uint64_t v46 = *(void *)v47;
    v46[8] = *(unsigned char *)(v47 + 8);
    uint64_t v48 = (void *)((char *)v4 + v45);
    uint64_t v49 = (uint64_t *)((char *)a2 + v45);
    uint64_t v50 = v49[1];
    *uint64_t v48 = *v49;
    v48[1] = v50;
    uint64_t v51 = a3[26];
    uint64_t v52 = a3[27];
    uint64_t v53 = (void *)((char *)v4 + v51);
    uint64_t v54 = (uint64_t *)((char *)a2 + v51);
    uint64_t v55 = v54[1];
    *uint64_t v53 = *v54;
    v53[1] = v55;
    uint64_t v56 = (void *)((char *)v4 + v52);
    uint64_t v57 = (uint64_t *)((char *)a2 + v52);
    uint64_t v58 = v57[1];
    *uint64_t v56 = *v57;
    v56[1] = v58;
    uint64_t v59 = a3[28];
    uint64_t v60 = a3[29];
    uint64_t v61 = (void *)((char *)v4 + v59);
    uint64_t v62 = (uint64_t *)((char *)a2 + v59);
    uint64_t v63 = v62[1];
    *uint64_t v61 = *v62;
    v61[1] = v63;
    uint64_t v64 = (char *)v4 + v60;
    uint64_t v65 = (uint64_t)a2 + v60;
    *(void *)uint64_t v64 = *(void *)v65;
    v64[8] = *(unsigned char *)(v65 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for HotelReservation(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 56);
  uint64_t v5 = type metadata accessor for DateComponents();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 60);
  if (!__swift_getEnumTagSinglePayload(v6, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v6, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HotelReservation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v12 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v12;
  uint64_t v13 = *(void *)(a2 + 128);
  uint64_t v14 = a3[14];
  __dst = (void *)(a1 + v14);
  uint64_t v65 = (const void *)(a2 + v14);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v13;
  uint64_t v66 = type metadata accessor for DateComponents();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v65, 1, v66))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(__dst, v65, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v66 - 8) + 16))(__dst, v65, v66);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v66);
  }
  uint64_t v16 = a3[15];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  if (__swift_getEnumTagSinglePayload(a2 + v16, 1, v66))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v66 - 8) + 16))(v17, v18, v66);
    __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v66);
  }
  uint64_t v20 = a3[16];
  uint64_t v21 = a3[17];
  uint64_t v22 = (void *)(a1 + v20);
  uint64_t v23 = (void *)(a2 + v20);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = (void *)(a1 + v21);
  uint64_t v26 = (void *)(a2 + v21);
  __dsta = (void *)v26[1];
  *uint64_t v25 = *v26;
  v25[1] = __dsta;
  uint64_t v27 = a3[18];
  uint64_t v28 = a3[19];
  uint64_t v29 = (void *)(a1 + v27);
  uint64_t v30 = (void *)(a2 + v27);
  uint64_t v31 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v31;
  uint64_t v32 = (void *)(a1 + v28);
  uint64_t v33 = (void *)(a2 + v28);
  uint64_t v67 = v33[1];
  void *v32 = *v33;
  v32[1] = v67;
  uint64_t v34 = a3[20];
  uint64_t v35 = a3[21];
  uint64_t v36 = (void *)(a1 + v34);
  uint64_t v37 = (void *)(a2 + v34);
  uint64_t v38 = v37[1];
  void *v36 = *v37;
  v36[1] = v38;
  *(void *)(a1 + v35) = *(void *)(a2 + v35);
  uint64_t v39 = a3[23];
  *(void *)(a1 + a3[22]) = *(void *)(a2 + a3[22]);
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  *(void *)uint64_t v40 = *(void *)v41;
  *(unsigned char *)(v40 + 8) = *(unsigned char *)(v41 + 8);
  uint64_t v42 = a3[24];
  uint64_t v43 = a3[25];
  uint64_t v44 = a1 + v42;
  uint64_t v45 = a2 + v42;
  *(void *)uint64_t v44 = *(void *)v45;
  *(unsigned char *)(v44 + 8) = *(unsigned char *)(v45 + 8);
  uint64_t v46 = (void *)(a1 + v43);
  uint64_t v47 = (void *)(a2 + v43);
  uint64_t v48 = v47[1];
  *uint64_t v46 = *v47;
  v46[1] = v48;
  uint64_t v49 = a3[26];
  uint64_t v50 = a3[27];
  uint64_t v51 = (void *)(a1 + v49);
  uint64_t v52 = (void *)(a2 + v49);
  uint64_t v53 = v52[1];
  *uint64_t v51 = *v52;
  v51[1] = v53;
  uint64_t v54 = (void *)(a1 + v50);
  uint64_t v55 = (void *)(a2 + v50);
  uint64_t v56 = v55[1];
  *uint64_t v54 = *v55;
  v54[1] = v56;
  uint64_t v57 = a3[28];
  uint64_t v58 = a3[29];
  uint64_t v59 = (void *)(a1 + v57);
  uint64_t v60 = (void *)(a2 + v57);
  uint64_t v61 = v60[1];
  *uint64_t v59 = *v60;
  v59[1] = v61;
  uint64_t v62 = a1 + v58;
  uint64_t v63 = a2 + v58;
  *(void *)uint64_t v62 = *(void *)v63;
  *(unsigned char *)(v62 + 8) = *(unsigned char *)(v63 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HotelReservation(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[14];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for DateComponents();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = a3[15];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  int v17 = __swift_getEnumTagSinglePayload(a1 + v14, 1, v9);
  int v18 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v9);
  if (!v17)
  {
    uint64_t v19 = *(void *)(v9 - 8);
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(v19 + 24))(v15, v16, v9);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v15, v9);
    goto LABEL_12;
  }
  if (v18)
  {
LABEL_12:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(v15, v16, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v9);
LABEL_13:
  uint64_t v21 = a3[16];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  *uint64_t v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[17];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (void *)(a2 + v24);
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[18];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  *uint64_t v28 = *v29;
  v28[1] = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[19];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (void *)(a2 + v30);
  *uint64_t v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[20];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  *uint64_t v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[21]) = *(void *)(a2 + a3[21]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[22]) = *(void *)(a2 + a3[22]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[23];
  uint64_t v37 = a1 + v36;
  uint64_t v38 = (uint64_t *)(a2 + v36);
  uint64_t v39 = *v38;
  *(unsigned char *)(v37 + 8) = *((unsigned char *)v38 + 8);
  *(void *)uint64_t v37 = v39;
  uint64_t v40 = a3[24];
  uint64_t v41 = a1 + v40;
  uint64_t v42 = a2 + v40;
  LOBYTE(v39) = *(unsigned char *)(v42 + 8);
  *(void *)uint64_t v41 = *(void *)v42;
  *(unsigned char *)(v41 + 8) = v39;
  uint64_t v43 = a3[25];
  uint64_t v44 = (void *)(a1 + v43);
  uint64_t v45 = (void *)(a2 + v43);
  *uint64_t v44 = *v45;
  v44[1] = v45[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[26];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (void *)(a2 + v46);
  *uint64_t v47 = *v48;
  v47[1] = v48[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v49 = a3[27];
  uint64_t v50 = (void *)(a1 + v49);
  uint64_t v51 = (void *)(a2 + v49);
  *uint64_t v50 = *v51;
  v50[1] = v51[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v52 = a3[28];
  uint64_t v53 = (void *)(a1 + v52);
  uint64_t v54 = (void *)(a2 + v52);
  *uint64_t v53 = *v54;
  v53[1] = v54[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v55 = a3[29];
  uint64_t v56 = a1 + v55;
  uint64_t v57 = (uint64_t *)(a2 + v55);
  uint64_t v58 = *v57;
  *(unsigned char *)(v56 + 8) = *((unsigned char *)v57 + 8);
  *(void *)uint64_t v56 = v58;
  return a1;
}

uint64_t initializeWithTake for HotelReservation(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v9 = a3[14];
  uint64_t v10 = (void *)(a1 + v9);
  int v11 = (const void *)(a2 + v9);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  uint64_t v12 = type metadata accessor for DateComponents();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  }
  uint64_t v14 = a3[15];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  if (__swift_getEnumTagSinglePayload(a2 + v14, 1, v12))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v15, v16, v12);
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v12);
  }
  uint64_t v18 = a3[17];
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  uint64_t v19 = a3[19];
  *(_OWORD *)(a1 + a3[18]) = *(_OWORD *)(a2 + a3[18]);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  uint64_t v20 = a3[21];
  *(_OWORD *)(a1 + a3[20]) = *(_OWORD *)(a2 + a3[20]);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  uint64_t v21 = a3[23];
  *(void *)(a1 + a3[22]) = *(void *)(a2 + a3[22]);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  uint64_t v24 = a3[24];
  uint64_t v25 = a3[25];
  uint64_t v26 = a1 + v24;
  uint64_t v27 = a2 + v24;
  *(void *)uint64_t v26 = *(void *)v27;
  *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
  *(_OWORD *)(a1 + v25) = *(_OWORD *)(a2 + v25);
  uint64_t v28 = a3[27];
  *(_OWORD *)(a1 + a3[26]) = *(_OWORD *)(a2 + a3[26]);
  *(_OWORD *)(a1 + v28) = *(_OWORD *)(a2 + v28);
  uint64_t v29 = a3[29];
  *(_OWORD *)(a1 + a3[28]) = *(_OWORD *)(a2 + a3[28]);
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  *(unsigned char *)(v30 + 8) = *(unsigned char *)(v31 + 8);
  *(void *)uint64_t v30 = *(void *)v31;
  return a1;
}

uint64_t assignWithTake for HotelReservation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v11 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[14];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for DateComponents();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v16);
  int v18 = __swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16);
  if (EnumTagSinglePayload)
  {
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v19 = *(void *)(v16 - 8);
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v14, v16);
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v14, v15, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v19 + 40))(v14, v15, v16);
LABEL_7:
  uint64_t v21 = a3[15];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (const void *)(a2 + v21);
  int v24 = __swift_getEnumTagSinglePayload(a1 + v21, 1, v16);
  int v25 = __swift_getEnumTagSinglePayload((uint64_t)v23, 1, v16);
  if (!v24)
  {
    uint64_t v26 = *(void *)(v16 - 8);
    if (!v25)
    {
      (*(void (**)(void *, const void *, uint64_t))(v26 + 40))(v22, v23, v16);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v26 + 8))(v22, v16);
    goto LABEL_12;
  }
  if (v25)
  {
LABEL_12:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v22, v23, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v16 - 8) + 32))(v22, v23, v16);
  __swift_storeEnumTagSinglePayload((uint64_t)v22, 0, 1, v16);
LABEL_13:
  uint64_t v28 = a3[16];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (uint64_t *)(a2 + v28);
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  *uint64_t v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[17];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (uint64_t *)(a2 + v33);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *uint64_t v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[18];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = (uint64_t *)(a2 + v38);
  uint64_t v42 = *v40;
  uint64_t v41 = v40[1];
  *uint64_t v39 = v42;
  v39[1] = v41;
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[19];
  uint64_t v44 = (void *)(a1 + v43);
  uint64_t v45 = (uint64_t *)(a2 + v43);
  uint64_t v47 = *v45;
  uint64_t v46 = v45[1];
  *uint64_t v44 = v47;
  v44[1] = v46;
  swift_bridgeObjectRelease();
  uint64_t v48 = a3[20];
  uint64_t v49 = (void *)(a1 + v48);
  uint64_t v50 = (uint64_t *)(a2 + v48);
  uint64_t v52 = *v50;
  uint64_t v51 = v50[1];
  void *v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[21]) = *(void *)(a2 + a3[21]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[22]) = *(void *)(a2 + a3[22]);
  swift_bridgeObjectRelease();
  uint64_t v53 = a3[23];
  uint64_t v54 = a3[24];
  uint64_t v55 = a1 + v53;
  uint64_t v56 = a2 + v53;
  *(void *)uint64_t v55 = *(void *)v56;
  *(unsigned char *)(v55 + 8) = *(unsigned char *)(v56 + 8);
  uint64_t v57 = a1 + v54;
  uint64_t v58 = a2 + v54;
  *(void *)uint64_t v57 = *(void *)v58;
  *(unsigned char *)(v57 + 8) = *(unsigned char *)(v58 + 8);
  uint64_t v59 = a3[25];
  uint64_t v60 = (void *)(a1 + v59);
  uint64_t v61 = (uint64_t *)(a2 + v59);
  uint64_t v63 = *v61;
  uint64_t v62 = v61[1];
  *uint64_t v60 = v63;
  v60[1] = v62;
  swift_bridgeObjectRelease();
  uint64_t v64 = a3[26];
  uint64_t v65 = (void *)(a1 + v64);
  uint64_t v66 = (uint64_t *)(a2 + v64);
  uint64_t v68 = *v66;
  uint64_t v67 = v66[1];
  void *v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease();
  uint64_t v69 = a3[27];
  uint64_t v70 = (void *)(a1 + v69);
  uint64_t v71 = (uint64_t *)(a2 + v69);
  uint64_t v73 = *v71;
  uint64_t v72 = v71[1];
  void *v70 = v73;
  v70[1] = v72;
  swift_bridgeObjectRelease();
  uint64_t v74 = a3[28];
  uint64_t v75 = (void *)(a1 + v74);
  uint64_t v76 = (uint64_t *)(a2 + v74);
  uint64_t v78 = *v76;
  uint64_t v77 = v76[1];
  void *v75 = v78;
  v75[1] = v77;
  swift_bridgeObjectRelease();
  uint64_t v79 = a3[29];
  uint64_t v80 = a1 + v79;
  uint64_t v81 = a2 + v79;
  *(void *)uint64_t v80 = *(void *)v81;
  *(unsigned char *)(v80 + 8) = *(unsigned char *)(v81 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for HotelReservation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_48Tm);
}

uint64_t storeEnumTagSinglePayload for HotelReservation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_49Tm);
}

void type metadata completion function for HotelReservation()
{
  type metadata accessor for Date?(319, &lazy cache variable for type metadata for DateComponents?, MEMORY[0x263F063B0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Date?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void *initializeBufferWithCopyOfBuffer for RestaurantReservation(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v9;
    uint64_t v10 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v10;
    uint64_t v11 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v11;
    uint64_t v12 = a2[11];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v12;
    *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
    uint64_t v13 = a2[14];
    *(void *)(a1 + 104) = a2[13];
    *(void *)(a1 + 112) = v13;
    uint64_t v14 = a2[16];
    uint64_t v15 = a3[14];
    __dst = (void *)(a1 + v15);
    uint64_t v54 = (char *)a2 + v15;
    *(void *)(a1 + 120) = a2[15];
    *(void *)(a1 + 128) = v14;
    uint64_t v53 = type metadata accessor for DateComponents();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v54, 1, v53))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
      memcpy(__dst, v54, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v53 - 8) + 16))(__dst, v54, v53);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v53);
    }
    uint64_t v18 = a3[15];
    uint64_t v19 = a3[16];
    uint64_t v20 = (void *)((char *)v4 + v18);
    uint64_t v21 = (uint64_t *)((char *)a2 + v18);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = (void *)((char *)v4 + v19);
    int v24 = (uint64_t *)((char *)a2 + v19);
    uint64_t v25 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v25;
    uint64_t v26 = a3[17];
    uint64_t v27 = a3[18];
    uint64_t v28 = (void *)((char *)v4 + v26);
    uint64_t v29 = (uint64_t *)((char *)a2 + v26);
    uint64_t v30 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v30;
    uint64_t v31 = (void *)((char *)v4 + v27);
    uint64_t v32 = (uint64_t *)((char *)a2 + v27);
    uint64_t v33 = v32[1];
    *uint64_t v31 = *v32;
    v31[1] = v33;
    uint64_t v34 = a3[19];
    uint64_t v35 = a3[20];
    uint64_t v36 = (void *)((char *)v4 + v34);
    uint64_t v37 = (uint64_t *)((char *)a2 + v34);
    uint64_t v38 = v37[1];
    uint64_t v39 = *(uint64_t *)((char *)a2 + v35);
    void *v36 = *v37;
    v36[1] = v38;
    *(void *)((char *)v4 + v35) = v39;
    uint64_t v40 = a3[21];
    uint64_t v41 = a3[22];
    uint64_t v42 = (void *)((char *)v4 + v40);
    uint64_t v43 = (uint64_t *)((char *)a2 + v40);
    uint64_t v44 = v43[1];
    void *v42 = *v43;
    v42[1] = v44;
    uint64_t v45 = (void *)((char *)v4 + v41);
    uint64_t v46 = (uint64_t *)((char *)a2 + v41);
    uint64_t v47 = v46[1];
    *uint64_t v45 = *v46;
    v45[1] = v47;
    uint64_t v48 = a3[23];
    uint64_t v49 = (void *)((char *)v4 + v48);
    uint64_t v50 = (uint64_t *)((char *)a2 + v48);
    uint64_t v51 = v50[1];
    void *v49 = *v50;
    v49[1] = v51;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for RestaurantReservation(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 56);
  uint64_t v5 = type metadata accessor for DateComponents();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RestaurantReservation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v12 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v12;
  uint64_t v13 = *(void *)(a2 + 128);
  uint64_t v14 = a3[14];
  __dst = (void *)(a1 + v14);
  uint64_t v52 = (const void *)(a2 + v14);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v13;
  uint64_t v51 = type metadata accessor for DateComponents();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v52, 1, v51))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(__dst, v52, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v51 - 8) + 16))(__dst, v52, v51);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v51);
  }
  uint64_t v16 = a3[15];
  uint64_t v17 = a3[16];
  uint64_t v18 = (void *)(a1 + v16);
  uint64_t v19 = (void *)(a2 + v16);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = (void *)(a1 + v17);
  uint64_t v22 = (void *)(a2 + v17);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  uint64_t v24 = a3[17];
  uint64_t v25 = a3[18];
  uint64_t v26 = (void *)(a1 + v24);
  uint64_t v27 = (void *)(a2 + v24);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  uint64_t v29 = (void *)(a1 + v25);
  uint64_t v30 = (void *)(a2 + v25);
  uint64_t v31 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v31;
  uint64_t v32 = a3[19];
  uint64_t v33 = a3[20];
  uint64_t v34 = (void *)(a1 + v32);
  uint64_t v35 = (void *)(a2 + v32);
  uint64_t v36 = v35[1];
  uint64_t v37 = *(void *)(a2 + v33);
  *uint64_t v34 = *v35;
  v34[1] = v36;
  *(void *)(a1 + v33) = v37;
  uint64_t v38 = a3[21];
  uint64_t v39 = a3[22];
  uint64_t v40 = (void *)(a1 + v38);
  uint64_t v41 = (void *)(a2 + v38);
  uint64_t v42 = v41[1];
  *uint64_t v40 = *v41;
  v40[1] = v42;
  uint64_t v43 = (void *)(a1 + v39);
  uint64_t v44 = (void *)(a2 + v39);
  uint64_t v45 = v44[1];
  *uint64_t v43 = *v44;
  v43[1] = v45;
  uint64_t v46 = a3[23];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (void *)(a2 + v46);
  uint64_t v49 = v48[1];
  *uint64_t v47 = *v48;
  v47[1] = v49;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RestaurantReservation(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[14];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for DateComponents();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
LABEL_7:
  uint64_t v14 = a3[15];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  void *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[16];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[17];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[18];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  *uint64_t v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[19];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  void *v27 = *v28;
  v27[1] = v28[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[20]) = *(void *)(a2 + a3[20]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[21];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (void *)(a2 + v29);
  void *v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[22];
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (void *)(a2 + v32);
  *uint64_t v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[23];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (void *)(a2 + v35);
  void *v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for RestaurantReservation(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v9 = a3[14];
  uint64_t v10 = (void *)(a1 + v9);
  int v11 = (const void *)(a2 + v9);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  uint64_t v12 = type metadata accessor for DateComponents();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  }
  uint64_t v14 = a3[16];
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  uint64_t v15 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  uint64_t v16 = a3[20];
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  uint64_t v17 = a3[22];
  *(_OWORD *)(a1 + a3[21]) = *(_OWORD *)(a2 + a3[21]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  *(_OWORD *)(a1 + a3[23]) = *(_OWORD *)(a2 + a3[23]);
  return a1;
}

uint64_t assignWithTake for RestaurantReservation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v11 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[14];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for DateComponents();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v16);
  int v18 = __swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16);
  if (!EnumTagSinglePayload)
  {
    uint64_t v19 = *(void *)(v16 - 8);
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(v19 + 40))(v14, v15, v16);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v14, v16);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v14, v15, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
  __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
LABEL_7:
  uint64_t v21 = a3[15];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *uint64_t v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[16];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (uint64_t *)(a2 + v26);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  void *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[17];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (uint64_t *)(a2 + v31);
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  void *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[18];
  uint64_t v37 = (void *)(a1 + v36);
  uint64_t v38 = (uint64_t *)(a2 + v36);
  uint64_t v40 = *v38;
  uint64_t v39 = v38[1];
  *uint64_t v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[19];
  uint64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (uint64_t *)(a2 + v41);
  uint64_t v45 = *v43;
  uint64_t v44 = v43[1];
  void *v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[20]) = *(void *)(a2 + a3[20]);
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[21];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (uint64_t *)(a2 + v46);
  uint64_t v50 = *v48;
  uint64_t v49 = v48[1];
  *uint64_t v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[22];
  uint64_t v52 = (void *)(a1 + v51);
  uint64_t v53 = (uint64_t *)(a2 + v51);
  uint64_t v55 = *v53;
  uint64_t v54 = v53[1];
  *uint64_t v52 = v55;
  v52[1] = v54;
  swift_bridgeObjectRelease();
  uint64_t v56 = a3[23];
  uint64_t v57 = (void *)(a1 + v56);
  uint64_t v58 = (uint64_t *)(a2 + v56);
  uint64_t v60 = *v58;
  uint64_t v59 = v58[1];
  *uint64_t v57 = v60;
  v57[1] = v59;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RestaurantReservation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2584CC130);
}

uint64_t __swift_get_extra_inhabitant_index_48Tm()
{
  OUTLINED_FUNCTION_87_1();
  if (v1) {
    return OUTLINED_FUNCTION_44_21();
  }
  OUTLINED_FUNCTION_119_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  uint64_t v3 = OUTLINED_FUNCTION_108_7(*(int *)(v0 + 56));
  return __swift_getEnumTagSinglePayload(v3, v4, v5);
}

uint64_t storeEnumTagSinglePayload for RestaurantReservation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2584CC1B4);
}

void __swift_store_extra_inhabitant_index_49Tm()
{
  OUTLINED_FUNCTION_71_1();
  if (v1)
  {
    OUTLINED_FUNCTION_113_11();
  }
  else
  {
    uint64_t v2 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    uint64_t v3 = OUTLINED_FUNCTION_95_0(*(int *)(v2 + 56));
    __swift_storeEnumTagSinglePayload(v3, v4, v5, v6);
  }
}

void type metadata completion function for RestaurantReservation()
{
  type metadata accessor for Date?(319, &lazy cache variable for type metadata for DateComponents?, MEMORY[0x263F063B0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *storeEnumTagSinglePayload for RestaurantReservation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 19 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 19) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xED) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEC)
  {
    unsigned int v6 = ((a2 - 237) >> 8) + 1;
    *uint64_t result = a2 + 19;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2584CC3E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 19;
        break;
    }
  }
  return result;
}

void *type metadata accessor for RestaurantReservation.CodingKeys()
{
  return &unk_2706B2E60;
}

void *type metadata accessor for HotelReservation.CodingKeys()
{
  return &unk_2706B2EF0;
}

uint64_t getEnumTagSinglePayload for FlightReservation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xD5)
  {
    if (a2 + 43 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 43) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 44;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x2C;
  int v5 = v6 - 44;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for FlightReservation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 43 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 43) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xD5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xD4)
  {
    unsigned int v6 = ((a2 - 213) >> 8) + 1;
    *uint64_t result = a2 + 43;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2584CC58CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 43;
        break;
    }
  }
  return result;
}

void *type metadata accessor for FlightReservation.CodingKeys()
{
  return &unk_2706B2F80;
}

unsigned char *storeEnumTagSinglePayload for Trip.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 21 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 21) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEA)
  {
    unsigned int v6 = ((a2 - 235) >> 8) + 1;
    *uint64_t result = a2 + 21;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2584CC690);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 21;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Trip.CodingKeys()
{
  return &unk_2706B3010;
}

uint64_t getEnumTagSinglePayload for Party.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xEA)
  {
    if (a2 + 22 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 22) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 23;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x17;
  int v5 = v6 - 23;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for Party.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 22 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 22) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE9)
  {
    unsigned int v6 = ((a2 - 234) >> 8) + 1;
    *uint64_t result = a2 + 22;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2584CC81CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 22;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Party.CodingKeys()
{
  return &unk_2706B30A0;
}

uint64_t getEnumTagSinglePayload for Appointment.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xE8)
  {
    if (a2 + 24 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 24) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 25;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x19;
  int v5 = v6 - 25;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for Appointment.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 24 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 24) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE7)
  {
    unsigned int v6 = ((a2 - 232) >> 8) + 1;
    *uint64_t result = a2 + 24;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2584CC9A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 24;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Appointment.CodingKeys()
{
  return &unk_2706B3130;
}

uint64_t getEnumTagSinglePayload for TicketedShow.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xE4)
  {
    if (a2 + 28 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 28) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 29;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1D;
  int v5 = v6 - 29;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for TicketedShow.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 28 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 28) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE3)
  {
    unsigned int v6 = ((a2 - 228) >> 8) + 1;
    *uint64_t result = a2 + 28;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2584CCB34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 28;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TicketedShow.CodingKeys()
{
  return &unk_2706B31C0;
}

uint64_t getEnumTagSinglePayload for HotelReservation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xE7)
  {
    if (a2 + 25 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 25) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 26;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1A;
  int v5 = v6 - 26;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for HotelReservation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 25 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 25) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE6)
  {
    unsigned int v6 = ((a2 - 231) >> 8) + 1;
    *uint64_t result = a2 + 25;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2584CCCC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 25;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TicketedTransportation.CodingKeys()
{
  return &unk_2706B3250;
}

uint64_t getEnumTagSinglePayload for RentalCarReservation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xE0)
  {
    if (a2 + 32 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 32) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 33;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x21;
  int v5 = v6 - 33;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for RentalCarReservation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 32 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 32) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDF)
  {
    unsigned int v6 = ((a2 - 224) >> 8) + 1;
    *uint64_t result = a2 + 32;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2584CCE4CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 32;
        break;
    }
  }
  return result;
}

void *type metadata accessor for RentalCarReservation.CodingKeys()
{
  return &unk_2706B32E0;
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

unsigned char *partial apply for closure #1 in closure #1 in Double.init<A>(_:)@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return closure #1 in closure #1 in Double.init<A>(_:)(a1, a2);
}

void *partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_31@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_2_26()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_3_43()
{
  return *(void *)(v0 - 136);
}

uint64_t OUTLINED_FUNCTION_4_33@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_5_30()
{
  return *(void *)(v0 - 264);
}

uint64_t OUTLINED_FUNCTION_6_35@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 112) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_7_36()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_19()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_11_32()
{
  *(void *)(v2 - 104) = v1;
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_35@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_17_25()
{
  return *(void *)(v0 - 144);
}

uint64_t OUTLINED_FUNCTION_19_27@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

void OUTLINED_FUNCTION_25_23()
{
  Hasher._combine(_:)(1u);
}

uint64_t OUTLINED_FUNCTION_26_26@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_28_21()
{
  return String.hash(into:)();
}

void OUTLINED_FUNCTION_31_24()
{
  Hasher._combine(_:)(1u);
}

void OUTLINED_FUNCTION_32_22()
{
  Hasher._combine(_:)(0);
}

uint64_t OUTLINED_FUNCTION_36_24()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_38_21()
{
  return *(void *)(v0 - 144);
}

uint64_t OUTLINED_FUNCTION_40_18@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_41_24()
{
  *(void *)(*(void *)(v1 - 96) + 192) = *(void *)(v1 - 72);
  *(unsigned char *)(v1 - 81) = 16;
  return v0;
}

uint64_t OUTLINED_FUNCTION_44_22(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v3 - 96);
  *(void *)(v4 + 176) = a1;
  *(void *)(v4 + 184) = a2;
  *(unsigned char *)(v3 - 81) = 15;
  return v2;
}

uint64_t OUTLINED_FUNCTION_46_20()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_48_16@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_51_22()
{
  *(unsigned char *)(v0 - 72) = 0;
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_53_16(char a1)
{
  *(unsigned char *)(*(void *)(v1 - 96) + 129) = a1 & 1;
  *(unsigned char *)(v1 - 72) = 10;
  return v1 - 72;
}

uint64_t OUTLINED_FUNCTION_54_17()
{
  *(void *)(*(void *)(v0 - 96) + 136) = *(void *)(v0 - 72);
  *(unsigned char *)(v0 - 72) = 12;
  return v0 - 72;
}

uint64_t OUTLINED_FUNCTION_59_15@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 81) = a1;
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_60_12()
{
  *(unsigned char *)(v0 - 72) = 9;
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_62_15()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_63_13()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_64_12@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_65_13@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (void *)(*(void *)(v3 - 96) + a3);
  *uint64_t v4 = result;
  v4[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_66_17(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 - 96);
  *(void *)(v3 + 160) = a1;
  *(void *)(v3 + 168) = a2;
  *(unsigned char *)(v2 - 72) = 14;
  return v2 - 72;
}

uint64_t OUTLINED_FUNCTION_67_15(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 - 96);
  *(void *)(v3 + 144) = a1;
  *(void *)(v3 + 152) = a2;
  *(unsigned char *)(v2 - 72) = 13;
  return v2 - 72;
}

uint64_t OUTLINED_FUNCTION_69_14()
{
  return type metadata accessor for FlightReservation(0);
}

uint64_t OUTLINED_FUNCTION_70_13()
{
  return *(void *)(v0 - 328);
}

void OUTLINED_FUNCTION_71_14()
{
  *(void *)(v1 - 72) = *(void *)(v0 + 136);
  *(unsigned char *)(v1 - 81) = 11;
}

uint64_t OUTLINED_FUNCTION_72_12()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_73_13@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

void OUTLINED_FUNCTION_74_16()
{
  JUMPOUT(0x25A2C7AB0);
}

uint64_t OUTLINED_FUNCTION_75_11(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_76_12()
{
  *(void *)(*(void *)(v0 - 96) + 200) = *(void *)(v0 - 72);
  *(unsigned char *)(v0 - 72) = 17;
  return v0 - 72;
}

void OUTLINED_FUNCTION_78_13(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

uint64_t OUTLINED_FUNCTION_79_12()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_81_10@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_82_12()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_86_11(uint64_t result, uint64_t a2)
{
  void *v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_89_9()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_90_13@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_91_13@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_92_14@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_94_14@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 112) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_95_11(char a1)
{
  *(unsigned char *)(v1 + 128) = a1;
  *(unsigned char *)(v2 - 72) = 9;
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_96_11(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 112) = a1;
  *(void *)(v2 + 120) = a2;
  *(unsigned char *)(v3 - 72) = 8;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

void OUTLINED_FUNCTION_98_9()
{
  *(_DWORD *)(v0 - 120) = 0;
}

void OUTLINED_FUNCTION_100_12(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 96) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_102_9()
{
  *(unsigned char *)(v0 - 81) = 11;
}

uint64_t OUTLINED_FUNCTION_103_13()
{
  *(unsigned char *)(v0 - 72) = 0;
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_106_12()
{
  *(void *)(v2 - 104) = v1;
  return v0;
}

uint64_t OUTLINED_FUNCTION_109_10(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_110_10()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_112_9()
{
  return type metadata accessor for FlightReservation(0);
}

uint64_t OUTLINED_FUNCTION_114_11()
{
  return String.hash(into:)();
}

void OUTLINED_FUNCTION_115_7(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)(v1 + a1);
  void *v2 = 0;
  v2[1] = 0;
}

uint64_t OUTLINED_FUNCTION_119_7()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_120_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_122_8(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_123_8()
{
  return *(void *)(v0 - 288);
}

uint64_t OUTLINED_FUNCTION_124_9@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_125_9@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_126_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_127_7@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(v3 - 96) + a3;
  *(void *)uint64_t v4 = result;
  *(unsigned char *)(v4 + 8) = a2 & 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_128_6@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v2 - 65) = a1;
  return v1;
}

uint64_t OUTLINED_FUNCTION_129_6()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_131_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_132_5()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_133_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_134_3()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t OUTLINED_FUNCTION_135_4()
{
  return 0;
}

void OUTLINED_FUNCTION_136_3()
{
}

void OUTLINED_FUNCTION_142_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 48) = a7;
  *(void *)(v8 + 56) = a8;
  uint64_t v10 = *(void *)(v9 + 40);
  *(void *)(v8 + 80) = *(void *)(v9 + 32);
  char v11 = *(unsigned char *)(v9 + 48);
  *(void *)(v8 + 88) = v10;
  *(unsigned char *)(v8 + 96) = v11;
  uint64_t v12 = *(void *)(v9 + 80);
  *(void *)(v8 + 120) = *(void *)(v9 + 72);
  *(void *)(v8 + 128) = v12;
}

uint64_t OUTLINED_FUNCTION_145_2()
{
  return v0;
}

void OUTLINED_FUNCTION_151_3()
{
}

uint64_t OUTLINED_FUNCTION_152_4()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_153_4@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 81) = a1;
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_154_4@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v2 - 72) = a1;
  return v1;
}

uint64_t OUTLINED_FUNCTION_155_3@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v2 - 72) = a1;
  return v1;
}

uint64_t OUTLINED_FUNCTION_157_3(uint64_t a1, uint64_t *a2)
{
  return __swift_instantiateConcreteTypeFromMangledName(a2);
}

uint64_t OUTLINED_FUNCTION_159_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_162_4(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_164_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_165_3@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + a1);
}

uint64_t OUTLINED_FUNCTION_166_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_169_2()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_170_4()
{
  return String.hash(into:)();
}

void *OUTLINED_FUNCTION_171_4()
{
  return __swift_project_boxed_opaque_existential_1(v0, v1);
}

uint64_t OUTLINED_FUNCTION_172_4()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_176_4@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return type metadata accessor for Date();
}

uint64_t OUTLINED_FUNCTION_177_4()
{
  *(unsigned char *)(v0 - 72) = 0;
  return v0 - 72;
}

id OUTLINED_FUNCTION_178_1()
{
  return [v0 (SEL)(v1 + 1048)];
}

uint64_t OUTLINED_FUNCTION_179_3(uint64_t result)
{
  *(unsigned char *)(v1 + 129) = result & 1;
  return result;
}

id OUTLINED_FUNCTION_183_3()
{
  return [v1 (SEL)(v0 + 1048)];
}

uint64_t OUTLINED_FUNCTION_184_4(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)(*(void *)(v2 - 96) + *(int *)(*(void *)(v2 - 112) + 76));
  *uint64_t v3 = result;
  v3[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_186_3()
{
  return *(void *)(v0 - 376);
}

uint64_t OUTLINED_FUNCTION_187_2()
{
  *(void *)(*(void *)(v0 - 96) + 280) = *(void *)(v0 - 72);
  *(unsigned char *)(v0 - 72) = 23;
  return v0 - 72;
}

uint64_t OUTLINED_FUNCTION_188_2()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_191_3()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_194_2()
{
  return outlined init with take of FlightSnippet.Leg(v1, v0);
}

uint64_t OUTLINED_FUNCTION_196_2(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v2, v1, 1, a1);
}

id OUTLINED_FUNCTION_197_3(void *a1)
{
  return [a1 (SEL)(v1 + 3864)];
}

uint64_t OUTLINED_FUNCTION_200_1()
{
  return type metadata accessor for FlightReservation(0);
}

void OUTLINED_FUNCTION_201_1(uint64_t a1@<X8>)
{
  *(void *)(v1 - 264) = a1;
  *(void *)(v1 - 256) = 1;
  *(void *)(v1 - 248) = 1;
}

void OUTLINED_FUNCTION_202_1(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
}

uint64_t OUTLINED_FUNCTION_203_2@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_204_2@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_205_1()
{
  return v0 - 112;
}

uint64_t OUTLINED_FUNCTION_206_1@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t OUTLINED_FUNCTION_208_2@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of PQAVerificationModelProtocol?(v2 + a1, v3, v1);
}

uint64_t OUTLINED_FUNCTION_209_2()
{
  return __swift_storeEnumTagSinglePayload(v0, v2, 1, v1);
}

uint64_t OUTLINED_FUNCTION_211_2()
{
  long long v2 = *(_OWORD *)(v1 + 56);
  *(_OWORD *)(v0 + 64) = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v0 + 104) = v2;
  return 0;
}

uint64_t OUTLINED_FUNCTION_212_1()
{
  *(unsigned char *)(v1 + 130) = v2;
  return outlined bridged method (pb) of @objc CSSearchableItemAttributeSet.authorNames.getter(v0);
}

uint64_t OUTLINED_FUNCTION_214_1()
{
  *(void *)(v2 - 104) = v1;
  return v0;
}

uint64_t OUTLINED_FUNCTION_216_1(uint64_t result)
{
  *(unsigned char *)(*(void *)(v1 - 96) + 130) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_217_1()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

void OUTLINED_FUNCTION_218_1(uint64_t a1@<X8>)
{
  *(void *)(v1 - 312) = a1;
}

uint64_t OUTLINED_FUNCTION_221()
{
  return *(void *)(v0 - 368);
}

uint64_t OUTLINED_FUNCTION_222_0(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t OUTLINED_FUNCTION_223_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, a4);
}

uint64_t OUTLINED_FUNCTION_226()
{
  return static Calendar.current.getter();
}

uint64_t OUTLINED_FUNCTION_229_0()
{
  *(void *)(v0 + 24) = *(void *)(v1 - 72);
  *(unsigned char *)(v1 - 72) = 3;
  return v1 - 72;
}

uint64_t OUTLINED_FUNCTION_230_0()
{
  return type metadata accessor for FlightReservation(0);
}

uint64_t OUTLINED_FUNCTION_231_0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 112) = a1;
  *(void *)(v2 + 120) = a2;
  *(unsigned char *)(v3 - 72) = 8;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_234_0()
{
  return *(void *)(v0 - 288);
}

void OUTLINED_FUNCTION_235_0()
{
  *(_DWORD *)(v0 - 120) = 0;
}

uint64_t OUTLINED_FUNCTION_237()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

id OUTLINED_FUNCTION_238(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t OUTLINED_FUNCTION_240_0@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + a1);
}

void OUTLINED_FUNCTION_247_0()
{
  *(unsigned char *)(v0 - 81) = 2;
}

uint64_t OUTLINED_FUNCTION_249@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return v1 - 72;
}

uint64_t OUTLINED_FUNCTION_250@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_252()
{
  *(unsigned char *)(v0 - 72) = 0;
  return v0 - 72;
}

uint64_t OUTLINED_FUNCTION_256@<X0>(uint64_t a1@<X8>)
{
  return specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(a1 + 63) >> 6, v1);
}

void OUTLINED_FUNCTION_258()
{
  *(_DWORD *)(v0 - 152) = 0;
  *(_DWORD *)(v0 - 144) = 0;
}

uint64_t OUTLINED_FUNCTION_260()
{
  return *(void *)(v0 + *(int *)(v1 + 120));
}

void OUTLINED_FUNCTION_261(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 - 256);
  *a1 = v2;
  a1[1] = v3;
}

void OUTLINED_FUNCTION_264()
{
  *(void *)(v1 - 72) = *(void *)(v0 + 16);
  *(unsigned char *)(v1 - 81) = 1;
}

void OUTLINED_FUNCTION_266()
{
  *(_DWORD *)(v0 - 120) = 1;
}

uint64_t OUTLINED_FUNCTION_267()
{
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
  return dateString(fromDateComponents:)(v1);
}

uint64_t OUTLINED_FUNCTION_268()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_272()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_273()
{
  return 0;
}

void OUTLINED_FUNCTION_276()
{
  *(_DWORD *)(v1 - 124) = v0 == 0;
  *(void *)(v1 - 104) = v0;
}

uint64_t OUTLINED_FUNCTION_279(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, v2, 1, a1);
}

uint64_t OUTLINED_FUNCTION_281(uint64_t result, uint64_t a2)
{
  *(void *)(v2 - 336) = result;
  *(void *)(v2 - 344) = a2;
  return result;
}

void OUTLINED_FUNCTION_282(uint64_t a1@<X8>)
{
  uint64_t v4 = v2 + a1;
  *(void *)uint64_t v4 = v3;
  *(unsigned char *)(v4 + 8) = v1 & 1;
}

uint64_t OUTLINED_FUNCTION_285()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_286()
{
  return type metadata accessor for DateComponents();
}

uint64_t OUTLINED_FUNCTION_287(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_288()
{
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_289(void *a1)
{
  return [a1 (SEL)(v1 + 3864)];
}

uint64_t OUTLINED_FUNCTION_292()
{
  uint64_t v2 = *(void *)(v0 - 136);
  uint64_t v3 = *(void *)(v0 - 152);
  return outlined init with copy of FlightReservation(v2, v3);
}

void OUTLINED_FUNCTION_296(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void OUTLINED_FUNCTION_298()
{
  *(_DWORD *)(v0 - 120) = 0;
}

uint64_t OUTLINED_FUNCTION_301()
{
  return outlined init with copy of FlightReservation(v0, v1);
}

void *OUTLINED_FUNCTION_302()
{
  return __swift_project_boxed_opaque_existential_1(v0, v1);
}

uint64_t OUTLINED_FUNCTION_303()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_307(uint64_t result, uint64_t a2)
{
  *(void *)(v2 - 352) = result;
  *(void *)(v2 - 360) = a2;
  return result;
}

uint64_t default argument 2 of Answer.init(id:answer:metadata:sourceResults:experiences:mediaURL:lowConfidenceKnowledge:dialog:)()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t default argument 4 of Answer.init(id:answer:metadata:sourceResults:experiences:mediaURL:lowConfidenceKnowledge:dialog:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 6 of Answer.init(id:answer:metadata:sourceResults:experiences:mediaURL:lowConfidenceKnowledge:dialog:)()
{
  return 0;
}

uint64_t Answer.init(id:answer:metadata:sourceResults:experiences:mediaURL:lowConfidenceKnowledge:dialog:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, char a10, uint64_t a11, uint64_t a12)
{
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  uint64_t v14 = (int *)type metadata accessor for Answer(0);
  uint64_t result = outlined init with take of URL?(a8, (uint64_t)a9 + v14[9], &demangling cache variable for type metadata for URL?);
  *((unsigned char *)a9 + v14[10]) = a10;
  uint64_t v16 = (void *)((char *)a9 + v14[11]);
  *uint64_t v16 = a11;
  v16[1] = a12;
  return result;
}

uint64_t type metadata accessor for Answer(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for Answer);
}

void EmailDocument.init(id:mailMessageId:subject:body:authorNames:from:to:cc:date:attachmentNames:attachmentTypes:attachmentPaths:unread:hydratable:dataDetectorResults:extractedEventsLLMConsumableDescription:partialExtractedAttributes:csItem:featureFlagService:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,char a30,uint64_t *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  OUTLINED_FUNCTION_104_0();
  unint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v138 = v39;
  uint64_t v131 = v40;
  uint64_t v132 = v41;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
  uint64_t v51 = OUTLINED_FUNCTION_81(v50);
  MEMORY[0x270FA5388](v51);
  OUTLINED_FUNCTION_31_25(v52, v121);
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
  uint64_t v54 = OUTLINED_FUNCTION_81(v53);
  MEMORY[0x270FA5388](v54);
  OUTLINED_FUNCTION_43_23(v55, v122);
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
  uint64_t v57 = OUTLINED_FUNCTION_81(v56);
  MEMORY[0x270FA5388](v57);
  OUTLINED_FUNCTION_59_16(v58, v123);
  uint64_t v136 = a31[1];
  uint64_t v137 = *a31;
  uint64_t v134 = a31[3];
  uint64_t v135 = a31[2];
  uint64_t v133 = a31[4];
  uint64_t v59 = (int *)type metadata accessor for EmailDocument(0);
  uint64_t v60 = (void *)((char *)v49 + v59[18]);
  *uint64_t v60 = 0;
  v60[1] = 0;
  uint64_t v61 = (uint64_t)v49 + v59[21];
  uint64_t v62 = type metadata accessor for PartialExtractedAttributes(0);
  OUTLINED_FUNCTION_32(v61, v63, v64, v62);
  uint64_t v65 = (uint64_t)v49 + v59[22];
  uint64_t v66 = type metadata accessor for PreExtractedCard(0);
  uint64_t v124 = v65;
  OUTLINED_FUNCTION_32(v65, v67, v68, v66);
  uint64_t v69 = (uint64_t)v49 + v59[23];
  uint64_t v70 = type metadata accessor for PreExtractedContact(0);
  uint64_t v125 = v69;
  OUTLINED_FUNCTION_32(v69, v71, v72, v70);
  uint64_t v73 = (uint64_t)v49 + v59[24];
  uint64_t v74 = type metadata accessor for PreExtractedSharedLink(0);
  uint64_t v126 = v73;
  OUTLINED_FUNCTION_32(v73, v75, v76, v74);
  uint64_t v77 = (uint64_t)v49 + v59[25];
  _s10OmniSearch0B7ContextVSgWOi0_(v144);
  uint64_t v128 = v77;
  outlined init with take of URL?((uint64_t)v144, v77, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
  void *v49 = v47;
  v49[1] = v45;
  v49[2] = v43;
  v49[3] = v131;
  v49[4] = v132;
  v49[5] = v138;
  if (v36)
  {
    specialized Set.init(_nonEmptyArrayLiteral:)();
    uint64_t v38 = String.oms_trimCharacters(_:)(v78, v38, v36);
    uint64_t v80 = v79;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v80 = 0;
  }
  uint64_t v81 = (void *)((char *)v49 + v59[19]);
  uint64_t v82 = (void *)((char *)v49 + v59[20]);
  v49[6] = v38;
  v49[7] = v80;
  v49[8] = a21;
  v49[9] = a22;
  v49[10] = a23;
  v49[11] = a24;
  uint64_t v83 = (char *)v49 + v59[12];
  uint64_t v84 = type metadata accessor for Date();
  OUTLINED_FUNCTION_29_3();
  unint64_t v86 = v85;
  (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v83, a25, v84);
  *(void *)((char *)v49 + v59[13]) = a26;
  *(void *)((char *)v49 + v59[14]) = a27;
  *(void *)((char *)v49 + v59[15]) = a28;
  *((unsigned char *)v49 + v59[16]) = a29;
  *((unsigned char *)v49 + v59[17]) = a30;
  void *v81 = v137;
  v81[1] = v136;
  v81[2] = v135;
  v81[3] = v134;
  v81[4] = v133;
  void *v82 = a32;
  v82[1] = a33;
  outlined assign with copy of PartialExtractedAttributes?(a34, v61);
  if (a35)
  {
    uint64_t v140 = v84;
    uint64_t v87 = one-time initialization token for search;
    id v88 = a35;
    if (v87 != -1) {
      swift_once();
    }
    uint64_t v89 = type metadata accessor for Logger();
    __swift_project_value_buffer(v89, (uint64_t)static Logging.search);
    id v90 = v88;
    uint64_t v91 = Logger.logObject.getter();
    os_log_type_t v92 = static os_log_type_t.info.getter();
    unint64_t v139 = v86;
    if (os_log_type_enabled(v91, v92))
    {
      uint64_t v93 = (uint8_t *)OUTLINED_FUNCTION_14_1();
      v143[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v93 = 136315138;
      unint64_t v86 = (unint64_t)(v93 + 12);
      id v94 = objc_msgSend(v90, sel_attributeSet);
      uint64_t v95 = CSSearchableItemAttributeSet.keyStrings.getter();

      MEMORY[0x25A2C7E60](v95, MEMORY[0x263F8D310]);
      swift_bridgeObjectRelease();
      uint64_t v96 = OUTLINED_FUNCTION_148();
      uint64_t v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v97, v98);
      OUTLINED_FUNCTION_215_2(v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_257DC6000, v91, v92, "EmailDocument: parsing attribute keys: %s", v93, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_34();
    }
    else
    {
    }
    id v101 = v90;
    uint64_t v102 = Logger.logObject.getter();
    os_log_type_t v103 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v102, v103))
    {
      OUTLINED_FUNCTION_14_1();
      v143[0] = OUTLINED_FUNCTION_83_9();
      OUTLINED_FUNCTION_167_4(4.9654e-34);
      id v104 = objc_msgSend(v101, sel_attributeSet);
      uint64_t v105 = CSSearchableItemAttributeSet.kvStrings.getter();

      uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
      MEMORY[0x25A2C7E60](v105, v106);
      OUTLINED_FUNCTION_135_5();
      uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v104, v86, v143);
      OUTLINED_FUNCTION_215_2(v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_99_10(&dword_257DC6000, v102, v108, "EmailDocument: parsing attributes: %{sensitive}s");
      OUTLINED_FUNCTION_33_4();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_34();
    }
    else
    {
    }
    id v109 = v101;
    swift_retain();
    uint64_t v110 = (void *)OUTLINED_FUNCTION_148();
    PreExtractedCard.init(item:featureFlagService:)(v110, v111, v112);
    outlined assign with take of SearchResultItem?(v127, v124, &demangling cache variable for type metadata for PreExtractedCard?);
    id v113 = v109;
    swift_retain();
    uint64_t v114 = (void *)OUTLINED_FUNCTION_148();
    PreExtractedContact.init(item:featureFlagService:)(v114, v115, v116);
    outlined assign with take of SearchResultItem?(v129, v125, &demangling cache variable for type metadata for PreExtractedContact?);
    id v117 = v113;
    PreExtractedSharedLink.init(item:)(v117, v130);
    outlined assign with take of SearchResultItem?(v130, v126, &demangling cache variable for type metadata for PreExtractedSharedLink?);
    uint64_t v118 = (void *)OUTLINED_FUNCTION_148();
    PreExtractedBreadcrumb.init(item:featureFlagService:)(v118, v119, v120);

    outlined destroy of PQAVerificationModelProtocol?(a34, &demangling cache variable for type metadata for PartialExtractedAttributes?);
    (*(void (**)(uint64_t, uint64_t))(v139 + 8))(a25, v140);
    outlined init with take of URL?((uint64_t)&v141, (uint64_t)v142, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
    outlined init with take of URL?(v128, (uint64_t)v143, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
    outlined release of PreExtractedBreadcrumb?((uint64_t)v143);
    outlined init with take of URL?((uint64_t)v142, v128, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
  }
  else
  {
    swift_release();
    outlined destroy of PQAVerificationModelProtocol?(a34, &demangling cache variable for type metadata for PartialExtractedAttributes?);
    OUTLINED_FUNCTION_111_0();
    v100();
  }
  OUTLINED_FUNCTION_119_0();
}

uint64_t type metadata accessor for EmailDocument(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for EmailDocument);
}

uint64_t FileDocument.contentUrl.getter@<X0>(uint64_t a1@<X8>)
{
  return FileDocument.contentUrl.getter((SEL *)&selRef_contentURL, MEMORY[0x263F06E90], MEMORY[0x263F06EA8], a1);
}

uint64_t FileDocument.title.getter()
{
  return FileDocument.title.getter(outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.title.getter);
}

uint64_t FileDocument.filename.getter()
{
  return FileDocument.title.getter(outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.filename.getter);
}

uint64_t FileDocument.kind.getter()
{
  return FileDocument.title.getter(outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.kind.getter);
}

uint64_t FileDocument.keywords.getter()
{
  uint64_t result = outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.keywords.getter(objc_msgSend(*(id *)(v0 + 16), sel_attributeSet));
  if (!result) {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t FileDocument.textContent.getter()
{
  return FileDocument.title.getter(outlined bridged method (ob) of @objc CSSearchableItemAttributeSet.textContent.getter);
}

void __swiftcall Contact.init(id:name:phoneNumbers:emailAddresses:physicalAddresses:dates:birthday:)(OmniSearch::Contact *__return_ptr retstr, Swift::String id, Swift::String_optional name, Swift::OpaquePointer phoneNumbers, Swift::OpaquePointer emailAddresses, Swift::OpaquePointer physicalAddresses, Swift::OpaquePointer dates, Swift::String_optional birthday)
{
  retstr->id = id;
  retstr->name = name;
  retstr->phoneNumbers = phoneNumbers;
  retstr->emailAddresses = emailAddresses;
  retstr->physicalAddresses = physicalAddresses;
  retstr->dates = dates;
  retstr->birthday = birthday;
}

uint64_t FileDocument.bundleID.getter()
{
  return FileDocument.title.getter(outlined bridged method (ob) of @objc CSSearchableItem.bundleID.getter);
}

uint64_t FileDocument.title.getter(uint64_t (*a1)(id))
{
  id v2 = objc_msgSend(*(id *)(v1 + 16), sel_attributeSet);
  return a1(v2);
}

OmniSearch::FileDocument __swiftcall FileDocument.init(id:item:)(Swift::String id, CSSearchableItem item)
{
  *(Swift::String *)uint64_t v2 = id;
  *(CSSearchableItem *)(v2 + 16) = item;
  result.id = id;
  result.item = item;
  return result;
}

uint64_t MobileSMSDocument.serviceName.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

void MobileSMSDocument.init(id:chatId:displayName:body:from:to:date:contentURL:photoAttachments:serviceName:chatName:chatParticipants:chatMessages:dataDetectorResults:extractedEventsLLMConsumableDescription:partialExtractedAttributes:csItem:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,long long *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v119 = v36;
  uint64_t v120 = v37;
  uint64_t v117 = v38;
  uint64_t v118 = v39;
  uint64_t v115 = v40;
  uint64_t v116 = v41;
  uint64_t v113 = v42;
  uint64_t v114 = v43;
  uint64_t v45 = v44;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
  uint64_t v47 = OUTLINED_FUNCTION_81(v46);
  MEMORY[0x270FA5388](v47);
  OUTLINED_FUNCTION_31_25(v48, v101);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
  uint64_t v50 = OUTLINED_FUNCTION_81(v49);
  MEMORY[0x270FA5388](v50);
  OUTLINED_FUNCTION_124_10(v51, v102);
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
  uint64_t v53 = OUTLINED_FUNCTION_81(v52);
  MEMORY[0x270FA5388](v53);
  OUTLINED_FUNCTION_59_16(v54, v103);
  long long v111 = a32[1];
  long long v112 = *a32;
  uint64_t v55 = *((void *)a32 + 4);
  uint64_t v56 = (int *)type metadata accessor for MobileSMSDocument(0);
  uint64_t v57 = (char *)v45 + v56[17];
  uint64_t v58 = (void *)((char *)v45 + v56[18]);
  uint64_t v59 = (uint64_t)v45 + v56[19];
  uint64_t v60 = type metadata accessor for PartialExtractedAttributes(0);
  __swift_storeEnumTagSinglePayload(v59, 1, 1, v60);
  uint64_t v61 = (uint64_t)v45 + v56[20];
  uint64_t v62 = type metadata accessor for PreExtractedCard(0);
  uint64_t v104 = v61;
  __swift_storeEnumTagSinglePayload(v61, 1, 1, v62);
  uint64_t v63 = (uint64_t)v45 + v56[21];
  uint64_t v64 = type metadata accessor for PreExtractedContact(0);
  uint64_t v105 = v63;
  OUTLINED_FUNCTION_32(v63, v65, v66, v64);
  uint64_t v67 = (uint64_t)v45 + v56[22];
  uint64_t v68 = type metadata accessor for PreExtractedSharedLink(0);
  uint64_t v106 = v67;
  OUTLINED_FUNCTION_32(v67, v69, v70, v68);
  uint64_t v71 = (char *)v45 + v56[23];
  _s10OmniSearch0B7ContextVSgWOi0_(v125);
  uint64_t v109 = (uint64_t)v71;
  uint64_t v72 = (uint64_t)v71;
  unint64_t v73 = a23;
  outlined init with take of URL?((uint64_t)v125, v72, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
  *uint64_t v45 = v113;
  v45[1] = v114;
  v45[2] = v115;
  uint64_t v45[3] = v116;
  v45[4] = v117;
  v45[5] = v118;
  v45[6] = v119;
  v45[7] = v120;
  v45[8] = a21;
  v45[9] = a22;
  outlined init with copy of SearchResultItem?(a23, (uint64_t)v45 + v56[10], &demangling cache variable for type metadata for Date?);
  outlined init with copy of SearchResultItem?(a24, (uint64_t)v45 + v56[11], &demangling cache variable for type metadata for URL?);
  *(void *)((char *)v45 + v56[12]) = a25;
  uint64_t v74 = (void *)((char *)v45 + v56[14]);
  *uint64_t v74 = a28;
  v74[1] = a29;
  *(void *)((char *)v45 + v56[15]) = a30;
  *(void *)((char *)v45 + v56[16]) = a31;
  uint64_t v75 = (void *)((char *)v45 + v56[13]);
  void *v75 = a26;
  v75[1] = a27;
  *(_OWORD *)uint64_t v57 = v112;
  *((_OWORD *)v57 + 1) = v111;
  *((void *)v57 + 4) = v55;
  *uint64_t v58 = a33;
  v58[1] = a34;
  outlined assign with copy of PartialExtractedAttributes?(a35, v59);
  if (a36)
  {
    uint64_t v76 = one-time initialization token for search;
    id v77 = a36;
    if (v76 != -1) {
      swift_once();
    }
    uint64_t v78 = type metadata accessor for Logger();
    __swift_project_value_buffer(v78, (uint64_t)static Logging.search);
    id v79 = v77;
    uint64_t v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v80, v81))
    {
      uint64_t v82 = (uint8_t *)OUTLINED_FUNCTION_14_1();
      v124[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v82 = 136315138;
      unint64_t v73 = (unint64_t)(v82 + 12);
      id v83 = objc_msgSend(v79, sel_attributeSet);
      uint64_t v84 = CSSearchableItemAttributeSet.keyStrings.getter();

      uint64_t v85 = MEMORY[0x25A2C7E60](v84, MEMORY[0x263F8D310]);
      unint64_t v87 = v86;
      swift_bridgeObjectRelease();
      uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v87, v124);
      OUTLINED_FUNCTION_181_5(v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_257DC6000, v80, v81, "MobileSMSDocument: parsing attribute keys: %s", v82, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_34();
    }
    else
    {
    }
    id v89 = v79;
    id v90 = Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_168_4(v91))
    {
      OUTLINED_FUNCTION_14_1();
      v124[0] = OUTLINED_FUNCTION_83_9();
      OUTLINED_FUNCTION_167_4(4.9654e-34);
      id v92 = objc_msgSend(v89, sel_attributeSet);
      uint64_t v93 = CSSearchableItemAttributeSet.kvStrings.getter();

      uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
      MEMORY[0x25A2C7E60](v93, v94);
      OUTLINED_FUNCTION_135_5();
      uint64_t v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v92, v73, v124);
      OUTLINED_FUNCTION_181_5(v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_99_10(&dword_257DC6000, v90, v96, "MobileSMSDocument: parsing attributes: %{sensitive}s");
      OUTLINED_FUNCTION_33_4();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_34();
    }
    else
    {
    }
    id v97 = v89;
    PreExtractedCard.init(item:)((uint64_t)v97, v107);
    outlined assign with take of SearchResultItem?(v107, v104, &demangling cache variable for type metadata for PreExtractedCard?);
    id v98 = v97;
    PreExtractedContact.init(item:)((uint64_t)v98, v108);
    outlined assign with take of SearchResultItem?(v108, v105, &demangling cache variable for type metadata for PreExtractedContact?);
    id v99 = v98;
    PreExtractedSharedLink.init(item:)(v99, v110);
    outlined assign with take of SearchResultItem?(v110, v106, &demangling cache variable for type metadata for PreExtractedSharedLink?);
    type metadata accessor for FeatureFlagService();
    uint64_t v100 = swift_allocObject();
    PreExtractedBreadcrumb.init(item:featureFlagService:)(v99, v100, (uint64_t)v122);
    outlined init with take of URL?((uint64_t)v122, (uint64_t)v123, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
    outlined init with take of URL?((uint64_t)v123, (uint64_t)v124, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
    getEnumTag for SearchToolError((uint64_t)v124);

    outlined destroy of PQAVerificationModelProtocol?(a35, &demangling cache variable for type metadata for PartialExtractedAttributes?);
    outlined destroy of PQAVerificationModelProtocol?(a24, &demangling cache variable for type metadata for URL?);
    outlined destroy of PQAVerificationModelProtocol?(a23, &demangling cache variable for type metadata for Date?);
    outlined init with take of URL?(v109, (uint64_t)v121, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
    outlined release of PreExtractedBreadcrumb?((uint64_t)v121);
    outlined init with take of URL?((uint64_t)v123, v109, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
  }
  else
  {
    outlined destroy of PQAVerificationModelProtocol?(a35, &demangling cache variable for type metadata for PartialExtractedAttributes?);
    outlined destroy of PQAVerificationModelProtocol?(a24, &demangling cache variable for type metadata for URL?);
    outlined destroy of PQAVerificationModelProtocol?(a23, &demangling cache variable for type metadata for Date?);
  }
  OUTLINED_FUNCTION_119_0();
}

uint64_t NoteDocument.init(id:title:contentSnippet:folderName:creationDate:lastUsedDate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = OUTLINED_FUNCTION_174_4(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  uint64_t v13 = type metadata accessor for NoteDocument(v12);
  outlined init with take of URL?(a10, (uint64_t)a9 + *(int *)(v13 + 32), &demangling cache variable for type metadata for Date?);
  return outlined init with take of URL?(a11, (uint64_t)a9 + *(int *)(v13 + 36), &demangling cache variable for type metadata for Date?);
}

void Photo.init(id:photoDescription:locationKeywords:season:sceneClassificationLabels:snippet:ocrString:date:businessNames:peopleNames:peopleContactIdentifiers:peoplePersonIdentifiers:extractedEventsLLMConsumableDescription:partialExtractedAttributes:csItem:featureFlagService:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,long long a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v113 = v31;
  uint64_t v114 = v32;
  uint64_t v112 = v33;
  uint64_t v110 = v34;
  uint64_t v111 = v35;
  uint64_t v108 = v36;
  uint64_t v109 = v37;
  uint64_t v107 = v38;
  uint64_t v40 = v39;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
  uint64_t v42 = OUTLINED_FUNCTION_81(v41);
  MEMORY[0x270FA5388](v42);
  OUTLINED_FUNCTION_31_25(v43, v98);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
  uint64_t v45 = OUTLINED_FUNCTION_81(v44);
  MEMORY[0x270FA5388](v45);
  OUTLINED_FUNCTION_43_23(v46, v99);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
  uint64_t v48 = OUTLINED_FUNCTION_81(v47);
  MEMORY[0x270FA5388](v48);
  OUTLINED_FUNCTION_59_16(v49, v100);
  uint64_t v50 = (int *)type metadata accessor for Photo(0);
  uint64_t v51 = (void *)(v40 + v50[16]);
  uint64_t v52 = v40 + v50[17];
  uint64_t v53 = type metadata accessor for PartialExtractedAttributes(0);
  OUTLINED_FUNCTION_32(v52, v54, v55, v53);
  uint64_t v56 = v40 + v50[18];
  uint64_t v57 = type metadata accessor for PreExtractedCard(0);
  uint64_t v101 = v56;
  OUTLINED_FUNCTION_32(v56, v58, v59, v57);
  uint64_t v60 = v40 + v50[19];
  uint64_t v61 = type metadata accessor for PreExtractedContact(0);
  uint64_t v102 = v60;
  __swift_storeEnumTagSinglePayload(v60, 1, 1, v61);
  uint64_t v62 = v40 + v50[20];
  uint64_t v63 = type metadata accessor for PreExtractedSharedLink(0);
  uint64_t v103 = v62;
  __swift_storeEnumTagSinglePayload(v62, 1, 1, v63);
  uint64_t v64 = (_DWORD *)(v40 + v50[21]);
  _s10OmniSearch0B7ContextVSgWOi0_(v118);
  outlined init with take of URL?((uint64_t)v118, (uint64_t)v64, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
  *(void *)uint64_t v40 = v107;
  *(void *)(v40 + 8) = v108;
  *(void *)(v40 + 16) = v109;
  *(void *)(v40 + 24) = v110;
  *(void *)(v40 + 32) = v111;
  *(void *)(v40 + 40) = v112;
  *(void *)(v40 + 48) = v113;
  *(void *)(v40 + 56) = v114;
  *(_OWORD *)(v40 + 64) = a21;
  *(void *)(v40 + 80) = a22;
  outlined init with copy of SearchResultItem?(a23, v40 + v50[11], &demangling cache variable for type metadata for Date?);
  *(void *)(v40 + v50[12]) = a24;
  *(void *)(v40 + v50[13]) = a25;
  *(void *)(v40 + v50[14]) = a26;
  *(void *)(v40 + v50[15]) = a27;
  *uint64_t v51 = a28;
  v51[1] = a29;
  outlined assign with copy of PartialExtractedAttributes?(a30, v52);
  if (a31)
  {
    uint64_t v65 = one-time initialization token for search;
    id v66 = a31;
    if (v65 != -1) {
      swift_once();
    }
    uint64_t v67 = type metadata accessor for Logger();
    __swift_project_value_buffer(v67, (uint64_t)static Logging.search);
    id v68 = v66;
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.info.getter();
    uint64_t v71 = &unk_265435000;
    if (OUTLINED_FUNCTION_168_4(v70))
    {
      OUTLINED_FUNCTION_14_1();
      v117[0] = OUTLINED_FUNCTION_83_9();
      _DWORD *v64 = 136315138;
      id v72 = objc_msgSend(v68, sel_attributeSet);
      uint64_t v71 = (void *)CSSearchableItemAttributeSet.keyStrings.getter();

      uint64_t v73 = MEMORY[0x25A2C7E60](v71, MEMORY[0x263F8D310]);
      unint64_t v75 = v74;
      swift_bridgeObjectRelease();
      uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v75, v117);
      OUTLINED_FUNCTION_212_2(v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_99_10(&dword_257DC6000, v69, v77, "Photo: parsing attribute keys: %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_34();
    }
    else
    {
    }
    id v78 = v68;
    id v79 = Logger.logObject.getter();
    os_log_type_t v80 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_168_4(v80))
    {
      OUTLINED_FUNCTION_14_1();
      v117[0] = OUTLINED_FUNCTION_83_9();
      OUTLINED_FUNCTION_167_4(4.9654e-34);
      id v81 = objc_msgSend(v78, sel_attributeSet);
      uint64_t v82 = CSSearchableItemAttributeSet.kvStrings.getter();

      uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
      MEMORY[0x25A2C7E60](v82, v83);
      OUTLINED_FUNCTION_135_5();
      uint64_t v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v81, (unint64_t)v71, v117);
      OUTLINED_FUNCTION_212_2(v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_99_10(&dword_257DC6000, v79, v85, "Photo: parsing attributes: %{sensitive}s");
      OUTLINED_FUNCTION_33_4();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_34();
    }
    else
    {
    }
    id v86 = v78;
    swift_retain();
    unint64_t v87 = (void *)OUTLINED_FUNCTION_178_2();
    PreExtractedCard.init(item:featureFlagService:)(v87, v88, v89);
    outlined assign with take of SearchResultItem?(v104, v101, &demangling cache variable for type metadata for PreExtractedCard?);
    id v90 = v86;
    swift_retain();
    os_log_type_t v91 = (void *)OUTLINED_FUNCTION_178_2();
    PreExtractedContact.init(item:featureFlagService:)(v91, v92, v93);
    outlined assign with take of SearchResultItem?(v105, v102, &demangling cache variable for type metadata for PreExtractedContact?);
    id v94 = v90;
    PreExtractedSharedLink.init(item:)(v94, v106);
    outlined assign with take of SearchResultItem?(v106, v103, &demangling cache variable for type metadata for PreExtractedSharedLink?);
    uint64_t v95 = (void *)OUTLINED_FUNCTION_178_2();
    PreExtractedBreadcrumb.init(item:featureFlagService:)(v95, v96, v97);

    outlined destroy of PQAVerificationModelProtocol?(a30, &demangling cache variable for type metadata for PartialExtractedAttributes?);
    outlined destroy of PQAVerificationModelProtocol?(a23, &demangling cache variable for type metadata for Date?);
    outlined init with take of URL?((uint64_t)&v115, (uint64_t)v116, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
    outlined init with take of URL?((uint64_t)v64, (uint64_t)v117, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
    outlined release of PreExtractedBreadcrumb?((uint64_t)v117);
    outlined init with take of URL?((uint64_t)v116, (uint64_t)v64, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
  }
  else
  {
    swift_release();
    outlined destroy of PQAVerificationModelProtocol?(a30, &demangling cache variable for type metadata for PartialExtractedAttributes?);
    outlined destroy of PQAVerificationModelProtocol?(a23, &demangling cache variable for type metadata for Date?);
  }
  OUTLINED_FUNCTION_119_0();
}

__n128 CalendarEvent.init(id:title:contentDescription:startDate:endDate:locationName:organizerNames:participantNames:notes:dataDetectorResults:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __n128 *a16)
{
  __n128 v31 = a16[1];
  __n128 v32 = *a16;
  unint64_t v30 = a16[2].n128_u64[0];
  uint64_t v24 = (int *)type metadata accessor for CalendarEvent(0);
  uint64_t v25 = (__n128 *)((char *)a9 + v24[13]);
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  outlined init with take of URL?(a7, (uint64_t)a9 + v24[7], &demangling cache variable for type metadata for Date?);
  outlined init with take of URL?(a8, (uint64_t)a9 + v24[8], &demangling cache variable for type metadata for Date?);
  uint64_t v26 = (void *)((char *)a9 + v24[9]);
  *uint64_t v26 = a10;
  v26[1] = a11;
  *(void *)((char *)a9 + v24[10]) = a12;
  *(void *)((char *)a9 + v24[11]) = a13;
  uint64_t v27 = (void *)((char *)a9 + v24[12]);
  void *v27 = a14;
  v27[1] = a15;
  __n128 result = v31;
  *uint64_t v25 = v32;
  v25[1] = v31;
  v25[2].n128_u64[0] = v30;
  return result;
}

uint64_t Reminder.init(id:title:note:creationDate:dueDate:dueDateIsAllDay:namedLocation:physicalAddress:url:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_106_13();
  uint64_t v23 = OUTLINED_FUNCTION_191_4(v17, v18, v19, v20, v21, v22);
  uint64_t v24 = (int *)type metadata accessor for Reminder(v23);
  outlined init with take of URL?(v15, v16 + v24[7], &demangling cache variable for type metadata for Date?);
  outlined init with take of URL?(v14, v16 + v24[8], &demangling cache variable for type metadata for Date?);
  *(unsigned char *)(v16 + v24[9]) = a9;
  uint64_t v25 = (void *)(v16 + v24[10]);
  *uint64_t v25 = a10;
  v25[1] = a11;
  uint64_t v26 = (void *)(v16 + v24[11]);
  *uint64_t v26 = a12;
  v26[1] = a13;
  return outlined init with take of URL?(a14, v16 + v24[12], &demangling cache variable for type metadata for URL?);
}

uint64_t VoicemailTranscript.init(id:displayTitle:phoneNumber:date:url:)()
{
  OUTLINED_FUNCTION_106_13();
  uint64_t v11 = OUTLINED_FUNCTION_214_2(v4, v5, v6, v7, v8, v9, v10);
  type metadata accessor for VoicemailTranscript(v11);
  OUTLINED_FUNCTION_101_11();
  outlined init with take of URL?(v1, v12, &demangling cache variable for type metadata for Date?);
  return outlined init with take of URL?(v0, v2 + *(int *)(v3 + 32), &demangling cache variable for type metadata for URL?);
}

uint64_t PhoneHistory.init(id:authors:recipients:participants:phoneNumbers:callStatus:callDate:callType:description:url:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16 = OUTLINED_FUNCTION_174_4(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  uint64_t v17 = (int *)type metadata accessor for PhoneHistory(v16);
  outlined init with take of URL?(a10, (uint64_t)a9 + v17[10], &demangling cache variable for type metadata for Date?);
  uint64_t v18 = (void *)((char *)a9 + v17[11]);
  *uint64_t v18 = a11;
  v18[1] = a12;
  uint64_t v19 = (void *)((char *)a9 + v17[12]);
  void *v19 = a13;
  v19[1] = a14;
  return outlined init with take of URL?(a15, (uint64_t)a9 + v17[13], &demangling cache variable for type metadata for URL?);
}

uint64_t JournalEntry.init(id:displayTitle:text:url:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v10 = OUTLINED_FUNCTION_214_2(a1, a2, a3, a4, a5, a6, a8);
  uint64_t v11 = type metadata accessor for JournalEntry(v10);
  return outlined init with take of URL?(a7, (uint64_t)a8 + *(int *)(v11 + 28), &demangling cache variable for type metadata for URL?);
}

void Safari.init(id:websiteTitle:websiteUrl:body:contentType:url:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  __n128 v31 = v30;
  void *v30 = v32;
  v30[1] = v33;
  _OWORD v30[2] = v34;
  v30[3] = v35;
  uint64_t v36 = (int *)type metadata accessor for Safari(0);
  outlined init with take of URL?(v29, (uint64_t)v31 + v36[6], &demangling cache variable for type metadata for URL?);
  uint64_t v37 = (void *)((char *)v31 + v36[7]);
  *uint64_t v37 = v27;
  v37[1] = v25;
  uint64_t v38 = (void *)((char *)v31 + v36[8]);
  void *v38 = v23;
  v38[1] = a21;
  outlined init with take of URL?(a22, (uint64_t)v31 + v36[9], &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_119_0();
}

uint64_t VoiceMemo.init(id:displayName:creationDate:durationInSeconds:url:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  uint64_t v14 = (int *)type metadata accessor for VoiceMemo(0);
  outlined init with take of URL?(a5, (uint64_t)a9 + v14[6], &demangling cache variable for type metadata for Date?);
  uint64_t v15 = (char *)a9 + v14[7];
  *(void *)uint64_t v15 = a6;
  v15[8] = a7 & 1;
  return outlined init with take of URL?(a8, (uint64_t)a9 + v14[8], &demangling cache variable for type metadata for URL?);
}

uint64_t WalletTransaction.init(id:title:description:date:city:stateOrProvince:country:amount:currencyCode:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18, uint64_t a19, uint64_t a20)
{
  uint64_t v23 = OUTLINED_FUNCTION_191_4(a1, a2, a3, a4, a5, a6);
  type metadata accessor for WalletTransaction(v23);
  OUTLINED_FUNCTION_101_11();
  uint64_t result = outlined init with take of URL?(a7, v24, &demangling cache variable for type metadata for Date?);
  uint64_t v26 = (void *)(a9 + v20[8]);
  *uint64_t v26 = a8;
  v26[1] = a10;
  uint64_t v27 = (void *)(a9 + v20[9]);
  void *v27 = a11;
  v27[1] = a12;
  uint64_t v28 = (void *)(a9 + v20[10]);
  *uint64_t v28 = a13;
  v28[1] = a14;
  uint64_t v29 = a9 + v20[11];
  *(void *)uint64_t v29 = a15;
  *(void *)(v29 + 8) = a16;
  *(_DWORD *)(v29 + 16) = a17;
  *(unsigned char *)(v29 + 20) = a18 & 1;
  unint64_t v30 = (void *)(a9 + v20[12]);
  void *v30 = a19;
  v30[1] = a20;
  return result;
}

uint64_t WalletPass.init(id:title:description:creationDate:creator:extraData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_106_13();
  *uint64_t v16 = v14;
  v16[1] = v15;
  v16[2] = v17;
  v16[3] = v18;
  v16[4] = v19;
  v16[5] = v20;
  type metadata accessor for WalletPass(0);
  OUTLINED_FUNCTION_101_11();
  uint64_t result = outlined init with take of URL?(v11, v21, &demangling cache variable for type metadata for Date?);
  uint64_t v23 = (void *)(v12 + *(int *)(v13 + 32));
  *uint64_t v23 = v10;
  v23[1] = a9;
  *(void *)(v12 + *(int *)(v13 + 36)) = a10;
  return result;
}

uint64_t EmailDocument.mailMessageId.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t EmailDocument.authorNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t EmailDocument.from.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t EmailDocument.to.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t EmailDocument.cc.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t EmailDocument.date.getter()
{
  OUTLINED_FUNCTION_129_7();
  type metadata accessor for Date();
  OUTLINED_FUNCTION_7_2();
  uint64_t v0 = OUTLINED_FUNCTION_79_0();
  return v1(v0);
}

uint64_t EmailDocument.attachmentNames.getter()
{
  return EmailDocument.attachmentNames.getter((void (*)(void))type metadata accessor for EmailDocument);
}

uint64_t EmailDocument.attachmentTypes.getter()
{
  return EmailDocument.attachmentTypes.getter((void (*)(void))type metadata accessor for EmailDocument);
}

uint64_t EmailDocument.attachmentPaths.getter()
{
  return EmailDocument.attachmentPaths.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t vars8;

  uint64_t v0 = OUTLINED_FUNCTION_78_14();
  v1(v0);
  return swift_bridgeObjectRetain();
}

uint64_t EmailDocument.unread.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for EmailDocument(0) + 64));
}

uint64_t EmailDocument.hydratable.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for EmailDocument(0) + 68));
}

uint64_t EmailDocument.instantAnswerDescription.getter()
{
  return EmailDocument.instantAnswerDescription.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_78_14();
  v1(v0);
  OUTLINED_FUNCTION_75_2();
  return OUTLINED_FUNCTION_79_0();
}

uint64_t EmailDocument.instantAnswerDescription.setter()
{
  return EmailDocument.instantAnswerDescription.setter();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t result;

  uint64_t v3 = OUTLINED_FUNCTION_20_2();
  v4(v3);
  uint64_t result = OUTLINED_FUNCTION_11_30();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*EmailDocument.instantAnswerDescription.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t EmailDocument.dataDetectorResults.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_129_7();
  uint64_t v1 = OUTLINED_FUNCTION_51_23(*(int *)(v0 + 76));
  return outlined copy of DataDetectorResults?(v1);
}

double EmailDocument.dataDetectorResults.setter()
{
  uint64_t v0 = OUTLINED_FUNCTION_77_15();
  uint64_t v1 = type metadata accessor for EmailDocument(v0);
  uint64_t v2 = OUTLINED_FUNCTION_107_12(*(int *)(v1 + 76));
  *(void *)&double result = OUTLINED_FUNCTION_103_14(v2, v3, v4, v5, v6, v7, v8, v9, v10, v12).n128_u64[0];
  return result;
}

uint64_t (*EmailDocument.dataDetectorResults.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t EmailDocument.extractedEventsLLMConsumableDescription.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t EmailDocument.extractedEventsLLMConsumableDescription.setter()
{
  uint64_t v3 = OUTLINED_FUNCTION_20_2();
  type metadata accessor for EmailDocument(v3);
  uint64_t result = OUTLINED_FUNCTION_11_30();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*EmailDocument.extractedEventsLLMConsumableDescription.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t EmailDocument.partialExtractedAttributes.getter()
{
  return EmailDocument.partialExtractedAttributes.getter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_126_7();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_62_14(*(int *)(v2 + 84));
}

uint64_t EmailDocument.partialExtractedAttributes.setter()
{
  return EmailDocument.partialExtractedAttributes.setter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_126_7();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_104_14(*(int *)(v2 + 84));
}

uint64_t (*EmailDocument.partialExtractedAttributes.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t EmailDocument.preExtractedCard.getter()
{
  return EmailDocument.preExtractedCard.getter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_126_7();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_62_14(*(int *)(v2 + 88));
}

uint64_t EmailDocument.preExtractedCard.setter()
{
  return EmailDocument.preExtractedCard.setter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_126_7();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_104_14(*(int *)(v2 + 88));
}

uint64_t (*EmailDocument.preExtractedCard.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t EmailDocument.preExtractedContact.getter()
{
  uint64_t v2 = OUTLINED_FUNCTION_129_7();
  return outlined init with copy of SearchResultItem?(v1 + *(int *)(v2 + 92), v0, &demangling cache variable for type metadata for PreExtractedContact?);
}

uint64_t EmailDocument.preExtractedContact.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for EmailDocument(0);
  return outlined assign with take of SearchResultItem?(a1, v1 + *(int *)(v3 + 92), &demangling cache variable for type metadata for PreExtractedContact?);
}

uint64_t (*EmailDocument.preExtractedContact.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t EmailDocument.preExtractedSharedLink.getter()
{
  uint64_t v2 = OUTLINED_FUNCTION_129_7();
  return outlined init with copy of SearchResultItem?(v1 + *(int *)(v2 + 96), v0, &demangling cache variable for type metadata for PreExtractedSharedLink?);
}

uint64_t EmailDocument.preExtractedSharedLink.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for EmailDocument(0);
  return outlined assign with take of SearchResultItem?(a1, v1 + *(int *)(v3 + 96), &demangling cache variable for type metadata for PreExtractedSharedLink?);
}

uint64_t (*EmailDocument.preExtractedSharedLink.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

void *EmailDocument.preExtractedBreadcrumb.getter()
{
  uint64_t v1 = OUTLINED_FUNCTION_129_7();
  uint64_t v2 = outlined init with take of URL?(v0 + *(int *)(v1 + 100), (uint64_t)v11, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
  OUTLINED_FUNCTION_166_5(v2, v3, v4, v5, v6, v7, v8, v9, v11[0]);
  return outlined release of PreExtractedBreadcrumb?((uint64_t)v11);
}

uint64_t EmailDocument.preExtractedBreadcrumb.setter(uint64_t a1)
{
  outlined init with take of URL?(a1, (uint64_t)v11, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
  uint64_t v1 = type metadata accessor for EmailDocument(0);
  OUTLINED_FUNCTION_108_8(*(int *)(v1 + 100), v11[0], v11[1], v11[2], v11[3], v11[4], v11[5], v11[6], v11[7], v11[8], v11[9], v11[10], v11[11], v11[12], v11[13], v11[14], v11[15], v11[16], v11[17],
    v12[0]);
  uint64_t v2 = outlined release of PreExtractedBreadcrumb?((uint64_t)v12);
  return OUTLINED_FUNCTION_165_4((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9, v11[0]);
}

uint64_t (*EmailDocument.preExtractedBreadcrumb.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t EmailDocument.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x7373654D6C69616DLL && a2 == 0xED00006449656761;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x7463656A627573 && a2 == 0xE700000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 2036625250 && a2 == 0xE400000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x614E726F68747561 && a2 == 0xEB0000000073656DLL;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v10 = a1 == 1836020326 && a2 == 0xE400000000000000;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              BOOL v11 = a1 == 28532 && a2 == 0xE200000000000000;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else
              {
                BOOL v12 = a1 == 25443 && a2 == 0xE200000000000000;
                if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 7;
                }
                else
                {
                  BOOL v13 = a1 == 1702125924 && a2 == 0xE400000000000000;
                  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 8;
                  }
                  else
                  {
                    BOOL v14 = a1 == 0x656D686361747461 && a2 == 0xEF73656D614E746ELL;
                    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 9;
                    }
                    else
                    {
                      BOOL v15 = a1 == 0x656D686361747461 && a2 == 0xEF7365707954746ELL;
                      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        return 10;
                      }
                      else
                      {
                        BOOL v16 = a1 == 0x656D686361747461 && a2 == 0xEF7368746150746ELL;
                        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          return 11;
                        }
                        else
                        {
                          BOOL v17 = a1 == 0x646165726E75 && a2 == 0xE600000000000000;
                          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                          {
                            swift_bridgeObjectRelease();
                            return 12;
                          }
                          else
                          {
                            BOOL v18 = a1 == 0x6261746172647968 && a2 == 0xEA0000000000656CLL;
                            if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                            {
                              swift_bridgeObjectRelease();
                              return 13;
                            }
                            else if (a1 == 0xD000000000000018 && a2 == 0x8000000258684930 {
                                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                            }
                            {
                              swift_bridgeObjectRelease();
                              return 14;
                            }
                            else if (a1 == 0xD000000000000013 && a2 == 0x8000000258684950 {
                                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                            }
                            {
                              swift_bridgeObjectRelease();
                              return 15;
                            }
                            else if (a1 == 0xD000000000000027 && a2 == 0x8000000258684970 {
                                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                            }
                            {
                              swift_bridgeObjectRelease();
                              return 16;
                            }
                            else if (a1 == 0xD00000000000001ALL && a2 == 0x80000002586849A0 {
                                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                            }
                            {
                              swift_bridgeObjectRelease();
                              return 17;
                            }
                            else if (a1 == 0xD000000000000010 && a2 == 0x80000002586849C0 {
                                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                            }
                            {
                              swift_bridgeObjectRelease();
                              return 18;
                            }
                            else if (a1 == 0xD000000000000013 && a2 == 0x80000002586849E0 {
                                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                            }
                            {
                              swift_bridgeObjectRelease();
                              return 19;
                            }
                            else if (a1 == 0xD000000000000016 && a2 == 0x8000000258684A00 {
                                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                            }
                            {
                              swift_bridgeObjectRelease();
                              return 20;
                            }
                            else if (a1 == 0xD000000000000016 && a2 == 0x8000000258684A20)
                            {
                              swift_bridgeObjectRelease();
                              return 21;
                            }
                            else
                            {
                              char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
                              swift_bridgeObjectRelease();
                              if (v19) {
                                return 21;
                              }
                              else {
                                return 22;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

unint64_t EmailDocument.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7373654D6C69616DLL;
      break;
    case 2:
      unint64_t result = 0x7463656A627573;
      break;
    case 3:
      unint64_t result = 2036625250;
      break;
    case 4:
      unint64_t result = 0x614E726F68747561;
      break;
    case 5:
      unint64_t result = 1836020326;
      break;
    case 6:
      unint64_t result = 28532;
      break;
    case 7:
      unint64_t result = 25443;
      break;
    case 8:
      unint64_t result = 1702125924;
      break;
    case 9:
    case 10:
    case 11:
      unint64_t result = 0x656D686361747461;
      break;
    case 12:
      unint64_t result = 0x646165726E75;
      break;
    case 13:
      unint64_t result = 0x6261746172647968;
      break;
    case 14:
      unint64_t result = 0xD000000000000018;
      break;
    case 15:
    case 19:
      unint64_t result = 0xD000000000000013;
      break;
    case 16:
      unint64_t result = 0xD000000000000027;
      break;
    case 17:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 18:
      unint64_t result = 0xD000000000000010;
      break;
    case 20:
      unint64_t result = 0xD000000000000016;
      break;
    case 21:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance EmailDocument.CodingKeys()
{
  return EmailDocument.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance EmailDocument.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = EmailDocument.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance EmailDocument.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type EmailDocument.CodingKeys and conformance EmailDocument.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance EmailDocument.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type EmailDocument.CodingKeys and conformance EmailDocument.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void EmailDocument.encode(to:)()
{
  OUTLINED_FUNCTION_105_0();
  OUTLINED_FUNCTION_163_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<EmailDocument.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_64_13();
  lazy protocol witness table accessor for type EmailDocument.CodingKeys and conformance EmailDocument.CodingKeys();
  OUTLINED_FUNCTION_96_12();
  OUTLINED_FUNCTION_61_15();
  if (!v0)
  {
    LOBYTE(v7[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    OUTLINED_FUNCTION_3_44(2);
    OUTLINED_FUNCTION_3_44(3);
    OUTLINED_FUNCTION_153_5(v1[8]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_15_31();
    v7[0] = v1[9];
    OUTLINED_FUNCTION_15_31();
    OUTLINED_FUNCTION_154_5(v1[10]);
    OUTLINED_FUNCTION_15_31();
    OUTLINED_FUNCTION_154_5(v1[11]);
    OUTLINED_FUNCTION_15_31();
    BOOL v6 = (int *)type metadata accessor for EmailDocument(0);
    LOBYTE(v7[0]) = 8;
    type metadata accessor for Date();
    lazy protocol witness table accessor for type Date and conformance Date((uint64_t)&lazy protocol witness table cache variable for type Date and conformance Date);
    OUTLINED_FUNCTION_37_24();
    v7[0] = *(uint64_t *)((char *)v1 + v6[13]);
    OUTLINED_FUNCTION_15_31();
    v7[0] = *(uint64_t *)((char *)v1 + v6[14]);
    OUTLINED_FUNCTION_15_31();
    v7[0] = *(uint64_t *)((char *)v1 + v6[15]);
    OUTLINED_FUNCTION_15_31();
    OUTLINED_FUNCTION_156_5(12);
    OUTLINED_FUNCTION_156_5(13);
    OUTLINED_FUNCTION_3_44(14);
    OUTLINED_FUNCTION_117_8(v6[19]);
    lazy protocol witness table accessor for type DataDetectorResults and conformance DataDetectorResults();
    OUTLINED_FUNCTION_36_25();
    OUTLINED_FUNCTION_192_3(v6[20]);
    OUTLINED_FUNCTION_3_44(16);
    uint64_t v3 = OUTLINED_FUNCTION_116_9();
    type metadata accessor for PartialExtractedAttributes(v3);
    lazy protocol witness table accessor for type Date and conformance Date((uint64_t)&lazy protocol witness table cache variable for type PartialExtractedAttributes and conformance PartialExtractedAttributes);
    OUTLINED_FUNCTION_4_34();
    OUTLINED_FUNCTION_187_3();
    LOBYTE(v7[0]) = v4;
    type metadata accessor for PreExtractedCard(0);
    lazy protocol witness table accessor for type Date and conformance Date((uint64_t)&lazy protocol witness table cache variable for type PreExtractedCard and conformance PreExtractedCard);
    OUTLINED_FUNCTION_4_34();
    LOBYTE(v7[0]) = 19;
    type metadata accessor for PreExtractedContact(0);
    lazy protocol witness table accessor for type Date and conformance Date((uint64_t)&lazy protocol witness table cache variable for type PreExtractedContact and conformance PreExtractedContact);
    OUTLINED_FUNCTION_4_34();
    char v8 = 20;
    type metadata accessor for PreExtractedSharedLink(0);
    lazy protocol witness table accessor for type Date and conformance Date((uint64_t)&lazy protocol witness table cache variable for type PreExtractedSharedLink and conformance PreExtractedSharedLink);
    OUTLINED_FUNCTION_8_20();
    outlined init with take of URL?((uint64_t)v1 + v6[25], (uint64_t)v7, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
    OUTLINED_FUNCTION_152_5();
    lazy protocol witness table accessor for type PreExtractedBreadcrumb and conformance PreExtractedBreadcrumb();
    OUTLINED_FUNCTION_36_25();
  }
  OUTLINED_FUNCTION_26_2();
  v5();
  OUTLINED_FUNCTION_53_17();
  OUTLINED_FUNCTION_120_0();
}

void EmailDocument.init(from:)()
{
  OUTLINED_FUNCTION_105_0();
  uint64_t v77 = v2;
  uint64_t v62 = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_60_13(v6, v54);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
  uint64_t v8 = OUTLINED_FUNCTION_81(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_31_25(v9, v55);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
  uint64_t v11 = OUTLINED_FUNCTION_81(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_43_23(v12, v56);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
  uint64_t v14 = OUTLINED_FUNCTION_81(v13);
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_124_10(v15, v57);
  type metadata accessor for Date();
  OUTLINED_FUNCTION_1();
  uint64_t v64 = v17;
  uint64_t v65 = v16;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_184_0();
  uint64_t v63 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<EmailDocument.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_14_10();
  uint64_t v20 = (int *)type metadata accessor for EmailDocument(0);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_97_1();
  uint64_t v23 = (uint64_t *)((char *)v1 + *(int *)(v22 + 72));
  *uint64_t v23 = 0;
  v23[1] = 0;
  id v68 = v23;
  OUTLINED_FUNCTION_140_4((uint64_t)v1 + *(int *)(v22 + 76));
  uint64_t v69 = v24;
  uint64_t v26 = (uint64_t *)((char *)v1 + *(int *)(v25 + 80));
  *uint64_t v26 = 0;
  v26[1] = 0;
  os_log_type_t v70 = v26;
  uint64_t v27 = (char *)v1 + *(int *)(v25 + 84);
  type metadata accessor for PartialExtractedAttributes(0);
  uint64_t v71 = (uint64_t)v27;
  uint64_t v28 = OUTLINED_FUNCTION_47_19();
  __swift_storeEnumTagSinglePayload(v28, v29, v30, v31);
  uint64_t v32 = (char *)v1 + v20[22];
  uint64_t v33 = type metadata accessor for PreExtractedCard(0);
  uint64_t v67 = (uint64_t)v32;
  uint64_t v34 = OUTLINED_FUNCTION_47_19();
  __swift_storeEnumTagSinglePayload(v34, v35, v36, v33);
  uint64_t v37 = (char *)v1 + v20[23];
  uint64_t v38 = type metadata accessor for PreExtractedContact(0);
  uint64_t v66 = (uint64_t)v37;
  uint64_t v39 = OUTLINED_FUNCTION_47_19();
  __swift_storeEnumTagSinglePayload(v39, v40, v41, v38);
  uint64_t v42 = (uint64_t)v1 + v20[24];
  uint64_t v43 = type metadata accessor for PreExtractedSharedLink(0);
  __swift_storeEnumTagSinglePayload(v42, 1, 1, v43);
  uint64_t v44 = (uint64_t)v1 + v20[25];
  _s10OmniSearch0B7ContextVSgWOi0_(v76);
  outlined init with take of URL?((uint64_t)v76, v44, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
  __swift_project_boxed_opaque_existential_1(v77, v77[3]);
  lazy protocol witness table accessor for type EmailDocument.CodingKeys and conformance EmailDocument.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v77);
    swift_bridgeObjectRelease();
    outlined consume of DataDetectorResults?(*(void *)v69);
    swift_bridgeObjectRelease();
    outlined destroy of PQAVerificationModelProtocol?(v71, &demangling cache variable for type metadata for PartialExtractedAttributes?);
    outlined destroy of PQAVerificationModelProtocol?(v67, &demangling cache variable for type metadata for PreExtractedCard?);
    outlined destroy of PQAVerificationModelProtocol?(v66, &demangling cache variable for type metadata for PreExtractedContact?);
    outlined destroy of PQAVerificationModelProtocol?(v42, &demangling cache variable for type metadata for PreExtractedSharedLink?);
    outlined init with take of URL?(v44, (uint64_t)v74, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
    outlined release of PreExtractedBreadcrumb?((uint64_t)v74);
  }
  else
  {
    *uint64_t v1 = KeyedDecodingContainer.decode(_:forKey:)();
    v1[1] = v45;
    v1[2] = KeyedDecodingContainer.decode(_:forKey:)();
    v1[3] = v46;
    v1[4] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v1[5] = v47;
    LOBYTE(v74[0]) = 3;
    v1[6] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v1[7] = v48;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_162_5();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v1[8] = *(void *)&v74[0];
    OUTLINED_FUNCTION_203_3();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v1[9] = *(void *)&v74[0];
    OUTLINED_FUNCTION_203_3();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v1[10] = *(void *)&v74[0];
    v73[0] = 7;
    OUTLINED_FUNCTION_162_5();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v1[11] = *(void *)&v74[0];
    LOBYTE(v74[0]) = 8;
    lazy protocol witness table accessor for type Date and conformance Date((uint64_t)&lazy protocol witness table cache variable for type Date and conformance Date);
    OUTLINED_FUNCTION_70_14();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))((char *)v1 + v20[12], v63, v65);
    v73[0] = 9;
    OUTLINED_FUNCTION_162_5();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(uint64_t *)((char *)v1 + v20[13]) = *(void *)&v74[0];
    OUTLINED_FUNCTION_80_12(10);
    *(uint64_t *)((char *)v1 + v20[14]) = *(void *)&v74[0];
    OUTLINED_FUNCTION_80_12(11);
    OUTLINED_FUNCTION_202_2();
    *((unsigned char *)v1 + v20[16]) = OUTLINED_FUNCTION_207_3(12);
    *((unsigned char *)v1 + v20[17]) = OUTLINED_FUNCTION_207_3(13);
    *id v68 = OUTLINED_FUNCTION_206_2(14);
    v68[1] = v49;
    v73[0] = 15;
    lazy protocol witness table accessor for type DataDetectorResults and conformance DataDetectorResults();
    OUTLINED_FUNCTION_203_3();
    OUTLINED_FUNCTION_75_12();
    uint64_t v50 = v75;
    long long v51 = v74[1];
    *(_OWORD *)uint64_t v69 = v74[0];
    *(_OWORD *)(v69 + 16) = v51;
    *(void *)(v69 + 32) = v50;
    uint64_t *v70 = OUTLINED_FUNCTION_206_2(16);
    v70[1] = v52;
    lazy protocol witness table accessor for type Date and conformance Date((uint64_t)&lazy protocol witness table cache variable for type PartialExtractedAttributes and conformance PartialExtractedAttributes);
    OUTLINED_FUNCTION_70_14();
    OUTLINED_FUNCTION_75_12();
    outlined assign with take of SearchResultItem?(v58, v71, &demangling cache variable for type metadata for PartialExtractedAttributes?);
    lazy protocol witness table accessor for type Date and conformance Date((uint64_t)&lazy protocol witness table cache variable for type PreExtractedCard and conformance PreExtractedCard);
    OUTLINED_FUNCTION_70_14();
    OUTLINED_FUNCTION_75_12();
    outlined assign with take of SearchResultItem?(v59, v67, &demangling cache variable for type metadata for PreExtractedCard?);
    lazy protocol witness table accessor for type Date and conformance Date((uint64_t)&lazy protocol witness table cache variable for type PreExtractedContact and conformance PreExtractedContact);
    OUTLINED_FUNCTION_70_14();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of SearchResultItem?(v60, v66, &demangling cache variable for type metadata for PreExtractedContact?);
    LOBYTE(v74[0]) = 20;
    lazy protocol witness table accessor for type Date and conformance Date((uint64_t)&lazy protocol witness table cache variable for type PreExtractedSharedLink and conformance PreExtractedSharedLink);
    OUTLINED_FUNCTION_75_12();
    outlined assign with take of SearchResultItem?(v61, v42, &demangling cache variable for type metadata for PreExtractedSharedLink?);
    v73[151] = 21;
    lazy protocol witness table accessor for type PreExtractedBreadcrumb and conformance PreExtractedBreadcrumb();
    OUTLINED_FUNCTION_75_12();
    OUTLINED_FUNCTION_112_4();
    v53();
    outlined init with take of URL?((uint64_t)v74, (uint64_t)v72, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
    outlined init with take of URL?(0, (uint64_t)v73, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
    outlined release of PreExtractedBreadcrumb?((uint64_t)v73);
    outlined init with take of URL?((uint64_t)v72, 0, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
    outlined init with copy of EmailDocument((uint64_t)v1, v62, (void (*)(void))type metadata accessor for EmailDocument);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v77);
    outlined destroy of EmailDocument((uint64_t)v1, (void (*)(void))type metadata accessor for EmailDocument);
  }
  OUTLINED_FUNCTION_100_13();
  OUTLINED_FUNCTION_120_0();
}

uint64_t (*protocol witness for PreExtractedSourceDocument.extractedEventsLLMConsumableDescription.modify in conformance EmailDocument())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t (*protocol witness for PreExtractedSourceDocument.partialExtractedAttributes.modify in conformance EmailDocument())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

void protocol witness for Decodable.init(from:) in conformance EmailDocument()
{
}

void protocol witness for Encodable.encode(to:) in conformance EmailDocument()
{
}

uint64_t MobileSMSDocument.date.getter()
{
  return MobileSMSDocument.date.getter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  uint64_t v2 = OUTLINED_FUNCTION_27_7();
  uint64_t v4 = v3(v2);
  return outlined init with copy of SearchResultItem?(v1 + *(int *)(v4 + 40), v0, &demangling cache variable for type metadata for Date?);
}

uint64_t MobileSMSDocument.contentURL.getter()
{
  return MobileSMSDocument.contentURL.getter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_76_13();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_62_14(*(int *)(v2 + 44));
}

uint64_t MobileSMSDocument.photoAttachments.getter()
{
  return MobileSMSDocument.photoAttachments.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t vars8;

  uint64_t v0 = OUTLINED_FUNCTION_78_14();
  v1(v0);
  return swift_bridgeObjectRetain();
}

uint64_t MobileSMSDocument.chatName.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t MobileSMSDocument.chatParticipants.getter()
{
  return EmailDocument.attachmentPaths.getter();
}

uint64_t MobileSMSDocument.chatMessages.getter()
{
  type metadata accessor for MobileSMSDocument(0);
  return swift_bridgeObjectRetain();
}

uint64_t MobileSMSDocument.dataDetectorResults.getter()
{
  uint64_t v0 = type metadata accessor for MobileSMSDocument(0);
  uint64_t v1 = OUTLINED_FUNCTION_51_23(*(int *)(v0 + 68));
  return outlined copy of DataDetectorResults?(v1);
}

double MobileSMSDocument.dataDetectorResults.setter()
{
  uint64_t v0 = OUTLINED_FUNCTION_77_15();
  uint64_t v1 = type metadata accessor for MobileSMSDocument(v0);
  uint64_t v2 = OUTLINED_FUNCTION_107_12(*(int *)(v1 + 68));
  *(void *)&double result = OUTLINED_FUNCTION_103_14(v2, v3, v4, v5, v6, v7, v8, v9, v10, v12).n128_u64[0];
  return result;
}

uint64_t (*MobileSMSDocument.dataDetectorResults.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t MobileSMSDocument.extractedEventsLLMConsumableDescription.getter()
{
  return EmailDocument.instantAnswerDescription.getter();
}

uint64_t MobileSMSDocument.extractedEventsLLMConsumableDescription.setter()
{
  return EmailDocument.instantAnswerDescription.setter();
}

uint64_t (*MobileSMSDocument.extractedEventsLLMConsumableDescription.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t MobileSMSDocument.partialExtractedAttributes.getter()
{
  return MobileSMSDocument.partialExtractedAttributes.getter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_76_13();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_62_14(*(int *)(v2 + 76));
}

uint64_t MobileSMSDocument.partialExtractedAttributes.setter()
{
  return MobileSMSDocument.partialExtractedAttributes.setter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_184_5();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_104_14(*(int *)(v2 + 76));
}

uint64_t (*MobileSMSDocument.partialExtractedAttributes.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t MobileSMSDocument.preExtractedCard.getter()
{
  return MobileSMSDocument.preExtractedCard.getter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_76_13();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_62_14(*(int *)(v2 + 80));
}

uint64_t MobileSMSDocument.preExtractedCard.setter()
{
  return MobileSMSDocument.preExtractedCard.setter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_184_5();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_104_14(*(int *)(v2 + 80));
}

uint64_t (*MobileSMSDocument.preExtractedCard.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t MobileSMSDocument.preExtractedContact.getter()
{
  return EmailDocument.partialExtractedAttributes.getter();
}

uint64_t MobileSMSDocument.preExtractedContact.setter()
{
  return EmailDocument.partialExtractedAttributes.setter();
}

uint64_t (*MobileSMSDocument.preExtractedContact.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t MobileSMSDocument.preExtractedSharedLink.getter()
{
  return EmailDocument.preExtractedCard.getter();
}

uint64_t MobileSMSDocument.preExtractedSharedLink.setter()
{
  return EmailDocument.preExtractedCard.setter();
}

uint64_t (*MobileSMSDocument.preExtractedSharedLink.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

void *MobileSMSDocument.preExtractedBreadcrumb.getter()
{
  uint64_t v1 = type metadata accessor for MobileSMSDocument(0);
  uint64_t v2 = outlined init with take of URL?(v0 + *(int *)(v1 + 92), (uint64_t)v11, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
  OUTLINED_FUNCTION_166_5(v2, v3, v4, v5, v6, v7, v8, v9, v11[0]);
  return outlined release of PreExtractedBreadcrumb?((uint64_t)v11);
}

uint64_t MobileSMSDocument.preExtractedBreadcrumb.setter(uint64_t a1)
{
  outlined init with take of URL?(a1, (uint64_t)v11, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
  uint64_t v1 = type metadata accessor for MobileSMSDocument(0);
  OUTLINED_FUNCTION_108_8(*(int *)(v1 + 92), v11[0], v11[1], v11[2], v11[3], v11[4], v11[5], v11[6], v11[7], v11[8], v11[9], v11[10], v11[11], v11[12], v11[13], v11[14], v11[15], v11[16], v11[17],
    v12[0]);
  uint64_t v2 = outlined release of PreExtractedBreadcrumb?((uint64_t)v12);
  return OUTLINED_FUNCTION_165_4((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9, v11[0]);
}

uint64_t (*MobileSMSDocument.preExtractedBreadcrumb.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t MobileSMSDocument.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x644974616863 && a2 == 0xE600000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 2036625250 && a2 == 0xE400000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 1836020326 && a2 == 0xE400000000000000;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v10 = a1 == 28532 && a2 == 0xE200000000000000;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              BOOL v11 = a1 == 1702125924 && a2 == 0xE400000000000000;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else
              {
                BOOL v12 = a1 == 0x55746E65746E6F63 && a2 == 0xEA00000000004C52;
                if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 7;
                }
                else if (a1 == 0xD000000000000010 && a2 == 0x8000000258684A40 {
                       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                }
                {
                  swift_bridgeObjectRelease();
                  return 8;
                }
                else
                {
                  BOOL v13 = a1 == 0x4E65636976726573 && a2 == 0xEB00000000656D61;
                  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 9;
                  }
                  else
                  {
                    BOOL v14 = a1 == 0x656D614E74616863 && a2 == 0xE800000000000000;
                    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 10;
                    }
                    else if (a1 == 0xD000000000000010 && a2 == 0x8000000258684A60 {
                           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    }
                    {
                      swift_bridgeObjectRelease();
                      return 11;
                    }
                    else
                    {
                      BOOL v15 = a1 == 0x7373654D74616863 && a2 == 0xEC00000073656761;
                      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        return 12;
                      }
                      else if (a1 == 0xD000000000000013 && a2 == 0x8000000258684950 {
                             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      }
                      {
                        swift_bridgeObjectRelease();
                        return 13;
                      }
                      else if (a1 == 0xD000000000000027 && a2 == 0x8000000258684970 {
                             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      }
                      {
                        swift_bridgeObjectRelease();
                        return 14;
                      }
                      else if (a1 == 0xD00000000000001ALL && a2 == 0x80000002586849A0 {
                             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      }
                      {
                        swift_bridgeObjectRelease();
                        return 15;
                      }
                      else if (a1 == 0xD000000000000010 && a2 == 0x80000002586849C0 {
                             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      }
                      {
                        swift_bridgeObjectRelease();
                        return 16;
                      }
                      else if (a1 == 0xD000000000000013 && a2 == 0x80000002586849E0 {
                             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      }
                      {
                        swift_bridgeObjectRelease();
                        return 17;
                      }
                      else if (a1 == 0xD000000000000016 && a2 == 0x8000000258684A00 {
                             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      }
                      {
                        swift_bridgeObjectRelease();
                        return 18;
                      }
                      else if (a1 == 0xD000000000000016 && a2 == 0x8000000258684A20)
                      {
                        swift_bridgeObjectRelease();
                        return 19;
                      }
                      else
                      {
                        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRelease();
                        if (v16) {
                          return 19;
                        }
                        else {
                          return 20;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}