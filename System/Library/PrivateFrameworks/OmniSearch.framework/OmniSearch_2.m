char *initializeWithTake for ExtractedInfo(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  long long v7;
  long long v8;
  long long v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  long long v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int *v22;
  uint64_t v23;
  long long v24;
  long long v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  long long v32;
  int *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  long long v39;
  int *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  long long v46;
  long long v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  long long v54;
  int *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  long long v61;
  long long v62;
  int *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  long long v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  long long v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  long long v81;
  int *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  long long v88;
  int *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  long long v94;
  int *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  long long v101;
  int *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  long long v108;
  long long v109;
  long long v110;
  int *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  long long v117;
  long long v118;
  long long v119;
  int *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  long long v126;
  long long v127;
  long long v128;
  int *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  long long v135;
  long long v136;
  long long v137;
  long long v138;
  long long v139;
  long long v140;
  long long v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  long long v147;
  long long v148;
  long long v149;
  long long v150;
  long long v151;
  long long v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  long long v159;
  long long v160;
  long long v161;
  long long v162;
  long long v163;
  long long v164;
  long long v165;
  uint64_t v166;
  int *v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  long long v173;
  long long v174;
  long long v175;
  long long v176;
  long long v177;
  long long v178;
  long long v179;
  long long v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  long long v186;
  long long v187;
  long long v188;
  long long v189;
  long long v190;
  long long v191;
  long long v192;
  int *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  long long v199;
  long long v200;
  long long v201;
  long long v202;
  long long v203;
  long long v204;
  int *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  long long v211;
  int *v212;
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  long long v218;
  int *v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  int *v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  char *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  char *v261;
  uint64_t v262;
  char *v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  char *v290;
  long long v291;
  uint64_t v292;
  char *v293;
  char *v294;
  int *v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  char *v299;
  long long v300;
  uint64_t v301;
  char *v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char *v308;
  char *v309;
  uint64_t v310;
  void (*v311)(char *, char *, uint64_t);
  uint64_t v312;
  char *v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  char *v318;
  char *v319;
  uint64_t v320;
  char *v321;
  char *v322;
  uint64_t v323;
  char *v324;
  char *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  char *v330;
  char *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  _OWORD *v335;
  char *v336;
  _OWORD *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  char *v342;
  uint64_t v343;
  char *v344;
  char *v345;
  uint64_t v346;
  long long v347;
  long long v348;
  long long v349;
  long long v350;
  long long v351;
  long long v352;
  long long v353;
  uint64_t v354;
  char *v355;
  char *v356;
  uint64_t v357;
  long long v358;
  long long v359;
  long long v360;
  long long v361;
  long long v362;
  long long v363;
  long long v364;
  uint64_t v365;
  char *v366;
  char *v367;
  uint64_t v368;
  long long v369;
  long long v370;
  long long v371;
  long long v372;
  long long v373;
  long long v374;
  long long v375;
  uint64_t v376;
  char *v377;
  char *v378;
  uint64_t v379;
  uint64_t v380;
  char *v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  char *v385;
  char *v386;
  uint64_t v387;
  uint64_t v388;
  char *v389;
  char *v390;
  uint64_t v391;
  uint64_t v392;
  char *v393;
  _OWORD *v394;
  uint64_t v395;
  uint64_t v396;
  long long v397;
  long long v398;
  long long v399;
  long long v400;
  long long v401;
  long long v402;
  uint64_t v403;
  uint64_t v404;
  char *v405;
  char *v406;
  uint64_t v407;
  uint64_t v408;
  char *v409;
  _OWORD *v410;
  uint64_t v411;
  uint64_t v412;
  long long v413;
  long long v414;
  long long v415;
  long long v416;
  long long v417;
  long long v418;
  uint64_t v419;
  uint64_t v420;
  char *v421;
  char *v422;
  uint64_t v423;
  uint64_t v424;
  char *v425;
  _OWORD *v426;
  uint64_t v427;
  uint64_t v428;
  long long v429;
  long long v430;
  long long v431;
  long long v432;
  long long v433;
  long long v434;
  uint64_t v435;
  uint64_t v436;
  char *v437;
  char *v438;
  uint64_t v439;
  uint64_t v440;
  char *v441;
  char *v442;
  uint64_t v443;
  uint64_t v444;
  char *v445;
  char *v446;
  uint64_t v447;
  uint64_t v448;
  char *v449;
  char *v450;
  uint64_t v451;
  uint64_t v452;
  char *v453;
  _OWORD *v454;
  int *v455;
  uint64_t v456;
  long long v457;
  long long v458;
  long long v459;
  long long v460;
  long long v461;
  long long v462;
  long long v463;
  uint64_t v464;
  uint64_t v465;
  char *v466;
  char *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  char *v471;
  _OWORD *v472;
  int *v473;
  uint64_t v474;
  long long v475;
  long long v476;
  long long v477;
  long long v478;
  long long v479;
  long long v480;
  long long v481;
  uint64_t v482;
  uint64_t v483;
  char *v484;
  char *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  char *v489;
  _OWORD *v490;
  int *v491;
  uint64_t v492;
  long long v493;
  long long v494;
  long long v495;
  long long v496;
  long long v497;
  long long v498;
  long long v499;
  uint64_t v500;
  uint64_t v501;
  char *v502;
  char *v503;
  uint64_t v504;
  uint64_t v505;
  char *v506;
  char *v507;
  uint64_t v508;
  uint64_t v509;
  char *v510;
  char *v511;
  uint64_t v512;
  uint64_t v513;
  char *v514;
  char *v515;
  uint64_t v516;
  uint64_t v517;
  char *v518;
  char *v519;
  uint64_t v520;
  uint64_t v521;
  char *v522;
  char *v523;
  uint64_t v524;
  uint64_t v525;
  char *v526;
  char *v527;
  uint64_t v528;
  uint64_t v529;
  char *v530;
  _OWORD *v531;
  uint64_t v532;
  uint64_t v533;
  long long v534;
  long long v535;
  long long v536;
  long long v537;
  long long v538;
  long long v539;
  long long v540;
  long long v541;
  uint64_t v542;
  char *v543;
  char *v544;
  uint64_t v545;
  uint64_t v546;
  char *v547;
  _OWORD *v548;
  uint64_t v549;
  uint64_t v550;
  long long v551;
  long long v552;
  long long v553;
  long long v554;
  long long v555;
  long long v556;
  long long v557;
  long long v558;
  uint64_t v559;
  char *v560;
  char *v561;
  uint64_t v562;
  uint64_t v563;
  char *v564;
  _OWORD *v565;
  uint64_t v566;
  uint64_t v567;
  long long v568;
  long long v569;
  long long v570;
  long long v571;
  long long v572;
  long long v573;
  long long v574;
  long long v575;
  uint64_t v576;
  char *v577;
  char *v578;
  uint64_t v579;
  uint64_t v580;
  char *v581;
  char *v582;
  uint64_t v583;
  uint64_t v584;
  char *v585;
  char *v586;
  uint64_t v587;
  uint64_t v588;
  char *v589;
  char *v590;
  uint64_t v591;
  uint64_t v592;
  char *v593;
  _OWORD *v594;
  int *v595;
  uint64_t v596;
  long long v597;
  long long v598;
  long long v599;
  long long v600;
  long long v601;
  long long v602;
  long long v603;
  uint64_t v604;
  char *v605;
  char *v606;
  uint64_t v607;
  uint64_t v608;
  char *v609;
  _OWORD *v610;
  int *v611;
  uint64_t v612;
  long long v613;
  long long v614;
  long long v615;
  long long v616;
  long long v617;
  long long v618;
  long long v619;
  uint64_t v620;
  char *v621;
  char *v622;
  uint64_t v623;
  uint64_t v624;
  char *v625;
  _OWORD *v626;
  int *v627;
  uint64_t v628;
  long long v629;
  long long v630;
  long long v631;
  long long v632;
  long long v633;
  long long v634;
  long long v635;
  uint64_t v636;
  char *v637;
  char *v638;
  uint64_t v639;
  uint64_t v640;
  char *v641;
  char *v642;
  uint64_t v643;
  uint64_t v644;
  char *v645;
  char *v646;
  uint64_t v647;
  uint64_t v648;
  char *v649;
  char *v650;
  uint64_t v651;
  uint64_t v652;
  char *v653;
  char *v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  char *v658;
  char *v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  char *v663;
  char *v664;
  uint64_t v665;
  uint64_t v666;
  char *v667;
  _OWORD *v668;
  int *v669;
  uint64_t v670;
  long long v671;
  long long v672;
  long long v673;
  long long v674;
  long long v675;
  long long v676;
  uint64_t v677;
  char *v678;
  char *v679;
  uint64_t v680;
  uint64_t v681;
  char *v682;
  _OWORD *v683;
  int *v684;
  uint64_t v685;
  long long v686;
  long long v687;
  long long v688;
  long long v689;
  long long v690;
  long long v691;
  uint64_t v692;
  char *v693;
  char *v694;
  uint64_t v695;
  uint64_t v696;
  char *v697;
  _OWORD *v698;
  int *v699;
  uint64_t v700;
  long long v701;
  long long v702;
  long long v703;
  long long v704;
  long long v705;
  long long v706;
  uint64_t v707;
  char *v708;
  char *v709;
  uint64_t v710;
  uint64_t v711;
  char *v712;
  char *v713;
  uint64_t v714;
  uint64_t v715;
  char *v716;
  char *v717;
  uint64_t v718;
  uint64_t v719;
  char *v720;
  char *v721;
  uint64_t v722;
  uint64_t v723;
  char *v724;
  char *v725;
  uint64_t v726;
  char *v727;
  char *v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  char *v732;
  char *v733;
  uint64_t v734;
  char *v735;
  char *v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  char *v740;
  char *v741;
  uint64_t v742;
  char *v743;
  char *v744;
  uint64_t v745;
  uint64_t v746;
  char *v747;
  _OWORD *v748;
  int *v749;
  uint64_t v750;
  long long v751;
  long long v752;
  long long v753;
  uint64_t v754;
  char *v755;
  char *v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  char *v760;
  _OWORD *v761;
  int *v762;
  uint64_t v763;
  long long v764;
  long long v765;
  long long v766;
  uint64_t v767;
  char *v768;
  char *v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  char *v773;
  _OWORD *v774;
  int *v775;
  uint64_t v776;
  long long v777;
  long long v778;
  long long v779;
  uint64_t v780;
  char *v781;
  uint64_t v782;
  uint64_t v783;
  char *v784;
  char *v785;
  uint64_t v786;
  uint64_t v787;
  char *v788;
  char *v789;
  uint64_t v790;
  uint64_t v791;
  char *v792;
  uint64_t v793;
  uint64_t v794;
  char *v795;
  char *v796;
  uint64_t v797;
  void (*v798)(char *, char *, uint64_t);
  uint64_t v799;
  char *v800;
  char *v801;
  uint64_t v802;
  uint64_t v803;
  char *v804;
  char *v805;
  uint64_t v806;
  void (*v807)(char *, char *, uint64_t);
  uint64_t v808;
  char *v809;
  char *v810;
  uint64_t v811;
  uint64_t v812;
  char *v813;
  char *v814;
  uint64_t v815;
  void (*v816)(char *, char *, uint64_t);
  uint64_t v817;
  char *v818;
  char *v819;
  uint64_t v820;
  uint64_t v821;
  char *v822;
  char *v823;
  uint64_t v824;
  char *v825;
  char *v826;
  uint64_t v827;
  char *v828;
  _OWORD *v829;
  int *v830;
  uint64_t v831;
  long long v832;
  long long v833;
  long long v834;
  uint64_t v835;
  char *v836;
  char *v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  char *v841;
  char *v842;
  uint64_t v843;
  char *v844;
  char *v845;
  uint64_t v846;
  char *v847;
  _OWORD *v848;
  int *v849;
  uint64_t v850;
  long long v851;
  long long v852;
  long long v853;
  uint64_t v854;
  char *v855;
  char *v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  char *v860;
  char *v861;
  uint64_t v862;
  char *v863;
  char *v864;
  uint64_t v865;
  char *v866;
  _OWORD *v867;
  int *v868;
  uint64_t v869;
  long long v870;
  long long v871;
  long long v872;
  uint64_t v873;
  char *v874;
  char *v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  char *v879;
  char *v880;
  uint64_t v881;
  uint64_t v882;
  char *v883;
  char *v884;
  uint64_t v885;
  uint64_t v886;
  char *v887;
  char *v888;
  uint64_t v889;
  uint64_t v890;
  char *v891;
  char *v892;
  uint64_t v893;
  char *v894;
  char *v895;
  uint64_t v896;
  char *v897;
  char *v898;
  uint64_t v899;
  char *v900;
  _OWORD *v901;
  int *v902;
  uint64_t v903;
  long long v904;
  long long v905;
  long long v906;
  uint64_t v907;
  char *v908;
  char *v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  char *v913;
  char *v914;
  uint64_t v915;
  char *v916;
  char *v917;
  uint64_t v918;
  char *v919;
  char *v920;
  uint64_t v921;
  char *v922;
  _OWORD *v923;
  int *v924;
  uint64_t v925;
  long long v926;
  long long v927;
  long long v928;
  uint64_t v929;
  char *v930;
  char *v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  char *v935;
  char *v936;
  uint64_t v937;
  char *v938;
  char *v939;
  uint64_t v940;
  char *v941;
  char *v942;
  uint64_t v943;
  char *v944;
  _OWORD *v945;
  int *v946;
  uint64_t v947;
  long long v948;
  long long v949;
  long long v950;
  uint64_t v951;
  char *v952;
  char *v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  char *v957;
  char *v958;
  int *v959;
  uint64_t v960;
  long long v961;
  long long v962;
  long long v963;
  uint64_t v964;
  char *v965;
  char *v966;
  uint64_t v967;
  uint64_t v968;
  char *v969;
  char *v970;
  uint64_t v971;
  uint64_t v972;
  char *v973;
  char *v974;
  uint64_t v975;
  uint64_t v976;
  char *v977;
  char *v978;
  int *v979;
  uint64_t v980;
  long long v981;
  long long v982;
  long long v983;
  uint64_t v984;
  char *v985;
  char *v986;
  uint64_t v987;
  uint64_t v988;
  char *v989;
  char *v990;
  uint64_t v991;
  uint64_t v992;
  char *v993;
  char *v994;
  int *v995;
  uint64_t v996;
  long long v997;
  long long v998;
  uint64_t v999;
  char *v1000;
  char *v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  char *v1005;
  char *v1006;
  uint64_t v1007;
  uint64_t v1008;
  char *v1009;
  char *v1010;
  uint64_t v1011;
  uint64_t v1012;
  char *v1013;
  char *v1014;
  uint64_t v1015;
  char *v1016;
  char *v1017;
  int *v1018;
  uint64_t v1019;
  long long v1020;
  long long v1021;
  long long v1022;
  uint64_t v1023;
  char *v1024;
  char *v1025;
  uint64_t v1026;
  uint64_t v1027;
  char *v1028;
  char *v1029;
  uint64_t v1030;
  uint64_t v1031;
  char *v1032;
  char *v1033;
  uint64_t v1034;
  uint64_t v1035;
  char *v1036;
  char *v1037;
  int *v1038;
  uint64_t v1039;
  long long v1040;
  long long v1041;
  long long v1042;
  uint64_t v1043;
  char *v1044;
  char *v1045;
  uint64_t v1046;
  uint64_t v1047;
  char *v1048;
  char *v1049;
  uint64_t v1050;
  uint64_t v1051;
  char *v1052;
  char *v1053;
  int *v1054;
  uint64_t v1055;
  long long v1056;
  long long v1057;
  uint64_t v1058;
  char *v1059;
  char *v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  char *v1064;
  char *v1065;
  uint64_t v1066;
  uint64_t v1067;
  char *v1068;
  char *v1069;
  uint64_t v1070;
  uint64_t v1071;
  char *v1072;
  char *v1073;
  uint64_t v1074;
  char *v1075;
  char *v1076;
  int *v1077;
  uint64_t v1078;
  long long v1079;
  long long v1080;
  long long v1081;
  uint64_t v1082;
  char *v1083;
  char *v1084;
  uint64_t v1085;
  uint64_t v1086;
  char *v1087;
  char *v1088;
  uint64_t v1089;
  uint64_t v1090;
  char *v1091;
  char *v1092;
  uint64_t v1093;
  uint64_t v1094;
  char *v1095;
  char *v1096;
  int *v1097;
  uint64_t v1098;
  long long v1099;
  long long v1100;
  long long v1101;
  uint64_t v1102;
  char *v1103;
  char *v1104;
  uint64_t v1105;
  uint64_t v1106;
  char *v1107;
  char *v1108;
  uint64_t v1109;
  uint64_t v1110;
  char *v1111;
  char *v1112;
  int *v1113;
  uint64_t v1114;
  long long v1115;
  long long v1116;
  uint64_t v1117;
  char *v1118;
  char *v1119;
  uint64_t v1120;
  uint64_t v1121;
  char *v1122;
  char *v1123;
  uint64_t v1124;
  uint64_t v1125;
  char *v1126;
  char *v1127;
  uint64_t v1128;
  uint64_t v1129;
  char *v1130;
  char *v1131;
  uint64_t v1132;
  uint64_t v1133;
  char *v1134;
  char *v1135;
  uint64_t v1136;
  int EnumCaseMultiPayload;
  uint64_t v1138;
  uint64_t v1139;
  long long v1140;
  long long v1141;
  long long v1142;
  int *v1143;
  uint64_t v1144;
  char *v1145;
  char *v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  char *v1150;
  char *v1151;
  uint64_t v1152;
  uint64_t v1153;
  char *v1154;
  char *v1155;
  uint64_t v1156;
  void (*v1157)(char *, char *, uint64_t);
  uint64_t v1158;
  char *v1159;
  char *v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  char *v1164;
  char *v1165;
  uint64_t v1166;
  char *v1167;
  char *v1168;
  char *__dst;
  int *__dsta;
  char *__dstb;
  int *v1173;
  char *v1174;
  int *v1175;
  int *v1176;
  uint64_t v1177;
  char *v1178;
  char *v1179;
  uint64_t v1180;
  void (*v1181)(char *, char *, uint64_t);
  uint64_t v1182;
  uint64_t v1183;
  _OWORD *v1184;
  _OWORD *v1185;
  _OWORD *v1186;
  uint64_t v1187;
  uint64_t v1188;

  v6 = type metadata accessor for SearchResultItem(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v7 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v7;
      v8 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v8;
      v9 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v9;
      v10 = (int *)type metadata accessor for EmailDocument(0);
      v11 = v10[12];
      v12 = &a1[v11];
      v13 = &a2[v11];
      v14 = type metadata accessor for Date();
      v1181 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32);
      v1181(v12, v13, v14);
      *(void *)&a1[v10[13]] = *(void *)&a2[v10[13]];
      *(void *)&a1[v10[14]] = *(void *)&a2[v10[14]];
      *(void *)&a1[v10[15]] = *(void *)&a2[v10[15]];
      a1[v10[16]] = a2[v10[16]];
      a1[v10[17]] = a2[v10[17]];
      *(_OWORD *)&a1[v10[18]] = *(_OWORD *)&a2[v10[18]];
      v15 = v10[19];
      v16 = &a1[v15];
      v17 = &a2[v15];
      v18 = *((_OWORD *)v17 + 1);
      *(_OWORD *)v16 = *(_OWORD *)v17;
      *((_OWORD *)v16 + 1) = v18;
      *((void *)v16 + 4) = *((void *)v17 + 4);
      *(_OWORD *)&a1[v10[20]] = *(_OWORD *)&a2[v10[20]];
      v19 = v10[21];
      v20 = &a1[v19];
      v21 = &a2[v19];
      v22 = (int *)type metadata accessor for PartialExtractedAttributes(0);
      v1177 = v14;
      if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, (uint64_t)v22))
      {
        v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
        memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v20 = *(_OWORD *)v21;
        v225 = v22[5];
        v226 = &v20[v225];
        v1184 = v21;
        v227 = &v21[v225];
        v228 = type metadata accessor for RentalCarReservation(0);
        v1173 = v22;
        v1174 = v20;
        if (__swift_getEnumTagSinglePayload((uint64_t)v227, 1, v228))
        {
          v229 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
          memcpy(v226, v227, *(void *)(*(void *)(v229 - 8) + 64));
        }
        else
        {
          v347 = *((_OWORD *)v227 + 1);
          *(_OWORD *)v226 = *(_OWORD *)v227;
          *((_OWORD *)v226 + 1) = v347;
          v348 = *((_OWORD *)v227 + 3);
          *((_OWORD *)v226 + 2) = *((_OWORD *)v227 + 2);
          *((_OWORD *)v226 + 3) = v348;
          v349 = *((_OWORD *)v227 + 5);
          *((_OWORD *)v226 + 4) = *((_OWORD *)v227 + 4);
          *((_OWORD *)v226 + 5) = v349;
          v350 = *((_OWORD *)v227 + 7);
          *((_OWORD *)v226 + 6) = *((_OWORD *)v227 + 6);
          *((_OWORD *)v226 + 7) = v350;
          v226[128] = v227[128];
          *(_WORD *)(v226 + 129) = *(_WORD *)(v227 + 129);
          *((void *)v226 + 17) = *((void *)v227 + 17);
          v351 = *((_OWORD *)v227 + 10);
          *((_OWORD *)v226 + 9) = *((_OWORD *)v227 + 9);
          *((_OWORD *)v226 + 10) = v351;
          v352 = *((_OWORD *)v227 + 12);
          *((_OWORD *)v226 + 11) = *((_OWORD *)v227 + 11);
          *((_OWORD *)v226 + 12) = v352;
          v353 = *((_OWORD *)v227 + 14);
          *((_OWORD *)v226 + 13) = *((_OWORD *)v227 + 13);
          *((_OWORD *)v226 + 14) = v353;
          *((_OWORD *)v226 + 15) = *((_OWORD *)v227 + 15);
          *((void *)v226 + 32) = *((void *)v227 + 32);
          *(_OWORD *)(v226 + 264) = *(_OWORD *)(v227 + 264);
          *(_OWORD *)(v226 + 280) = *(_OWORD *)(v227 + 280);
          *(_OWORD *)(v226 + 296) = *(_OWORD *)(v227 + 296);
          *(_OWORD *)(v226 + 312) = *(_OWORD *)(v227 + 312);
          *(_OWORD *)(v226 + 328) = *(_OWORD *)(v227 + 328);
          *(_OWORD *)(v226 + 344) = *(_OWORD *)(v227 + 344);
          *(_OWORD *)(v226 + 360) = *(_OWORD *)(v227 + 360);
          v226[384] = v227[384];
          *((void *)v226 + 47) = *((void *)v227 + 47);
          *(_OWORD *)(v226 + 392) = *(_OWORD *)(v227 + 392);
          *(_OWORD *)(v226 + 408) = *(_OWORD *)(v227 + 408);
          v354 = *(int *)(v228 + 140);
          v355 = &v226[v354];
          v356 = &v227[v354];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v227[v354], 1, v14))
          {
            v357 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v355, v356, *(void *)(*(void *)(v357 - 8) + 64));
          }
          else
          {
            v1181(v355, v356, v14);
            __swift_storeEnumTagSinglePayload((uint64_t)v355, 0, 1, v14);
          }
          v380 = *(int *)(v228 + 144);
          v381 = &v226[v380];
          v382 = &v227[v380];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v227[v380], 1, v14))
          {
            v383 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v381, v382, *(void *)(*(void *)(v383 - 8) + 64));
          }
          else
          {
            v1181(v381, v382, v14);
            __swift_storeEnumTagSinglePayload((uint64_t)v381, 0, 1, v14);
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v226, 0, 1, v228);
          v22 = v1173;
          v20 = v1174;
        }
        v392 = v22[6];
        v393 = &v20[v392];
        v394 = (_OWORD *)((char *)v1184 + v392);
        v395 = type metadata accessor for TicketedTransportation(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v394, 1, v395))
        {
          v396 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
          memcpy(v393, v394, *(void *)(*(void *)(v396 - 8) + 64));
        }
        else
        {
          v397 = v394[1];
          *(_OWORD *)v393 = *v394;
          *((_OWORD *)v393 + 1) = v397;
          v398 = v394[3];
          *((_OWORD *)v393 + 2) = v394[2];
          *((_OWORD *)v393 + 3) = v398;
          v399 = v394[5];
          *((_OWORD *)v393 + 4) = v394[4];
          *((_OWORD *)v393 + 5) = v399;
          v400 = v394[7];
          *((_OWORD *)v393 + 6) = v394[6];
          *((_OWORD *)v393 + 7) = v400;
          v393[128] = *((unsigned char *)v394 + 128);
          *(_WORD *)(v393 + 129) = *(_WORD *)((char *)v394 + 129);
          *((void *)v393 + 17) = *((void *)v394 + 17);
          v401 = v394[10];
          *((_OWORD *)v393 + 9) = v394[9];
          *((_OWORD *)v393 + 10) = v401;
          v402 = v394[12];
          *((_OWORD *)v393 + 11) = v394[11];
          *((_OWORD *)v393 + 12) = v402;
          *((void *)v393 + 26) = *((void *)v394 + 26);
          *(_OWORD *)(v393 + 216) = *(_OWORD *)((char *)v394 + 216);
          *(_OWORD *)(v393 + 232) = *(_OWORD *)((char *)v394 + 232);
          *(_OWORD *)(v393 + 248) = *(_OWORD *)((char *)v394 + 248);
          *(_OWORD *)(v393 + 264) = *(_OWORD *)((char *)v394 + 264);
          v393[296] = *((unsigned char *)v394 + 296);
          v403 = *((void *)v394 + 36);
          *((void *)v393 + 35) = *((void *)v394 + 35);
          *((void *)v393 + 36) = v403;
          v404 = *(int *)(v395 + 112);
          v405 = &v393[v404];
          v406 = (char *)v394 + v404;
          if (__swift_getEnumTagSinglePayload((uint64_t)v394 + v404, 1, v14))
          {
            v407 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v405, v406, *(void *)(*(void *)(v407 - 8) + 64));
          }
          else
          {
            v1181(v405, v406, v14);
            __swift_storeEnumTagSinglePayload((uint64_t)v405, 0, 1, v14);
          }
          v440 = *(int *)(v395 + 116);
          v441 = &v393[v440];
          v442 = (char *)v394 + v440;
          if (__swift_getEnumTagSinglePayload((uint64_t)v394 + v440, 1, v14))
          {
            v443 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v441, v442, *(void *)(*(void *)(v443 - 8) + 64));
          }
          else
          {
            v1181(v441, v442, v14);
            __swift_storeEnumTagSinglePayload((uint64_t)v441, 0, 1, v14);
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v393, 0, 1, v395);
          v22 = v1173;
          v20 = v1174;
        }
        v452 = v22[7];
        v453 = &v20[v452];
        v454 = (_OWORD *)((char *)v1184 + v452);
        v455 = (int *)type metadata accessor for TicketedShow(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v454, 1, (uint64_t)v455))
        {
          v456 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
          memcpy(v453, v454, *(void *)(*(void *)(v456 - 8) + 64));
        }
        else
        {
          v457 = v454[1];
          *(_OWORD *)v453 = *v454;
          *((_OWORD *)v453 + 1) = v457;
          v458 = v454[3];
          *((_OWORD *)v453 + 2) = v454[2];
          *((_OWORD *)v453 + 3) = v458;
          v459 = v454[5];
          *((_OWORD *)v453 + 4) = v454[4];
          *((_OWORD *)v453 + 5) = v459;
          v460 = v454[7];
          *((_OWORD *)v453 + 6) = v454[6];
          *((_OWORD *)v453 + 7) = v460;
          v453[128] = *((unsigned char *)v454 + 128);
          *(_WORD *)(v453 + 129) = *(_WORD *)((char *)v454 + 129);
          *((void *)v453 + 17) = *((void *)v454 + 17);
          v461 = v454[10];
          *((_OWORD *)v453 + 9) = v454[9];
          *((_OWORD *)v453 + 10) = v461;
          v462 = v454[12];
          *((_OWORD *)v453 + 11) = v454[11];
          *((_OWORD *)v453 + 12) = v462;
          v463 = v454[14];
          *((_OWORD *)v453 + 13) = v454[13];
          *((_OWORD *)v453 + 14) = v463;
          *((void *)v453 + 30) = *((void *)v454 + 30);
          *(_OWORD *)(v453 + 248) = *(_OWORD *)((char *)v454 + 248);
          *(_OWORD *)(v453 + 264) = *(_OWORD *)((char *)v454 + 264);
          v453[296] = *((unsigned char *)v454 + 296);
          v464 = *((void *)v454 + 36);
          *((void *)v453 + 35) = *((void *)v454 + 35);
          *((void *)v453 + 36) = v464;
          *((_OWORD *)v453 + 19) = v454[19];
          v465 = v455[29];
          v466 = &v453[v465];
          v467 = (char *)v454 + v465;
          v468 = type metadata accessor for URL();
          if (__swift_getEnumTagSinglePayload((uint64_t)v467, 1, v468))
          {
            v469 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v466, v467, *(void *)(*(void *)(v469 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v468 - 8) + 32))(v466, v467, v468);
            __swift_storeEnumTagSinglePayload((uint64_t)v466, 0, 1, v468);
          }
          *(_OWORD *)&v453[v455[30]] = *(_OWORD *)((char *)v454 + v455[30]);
          v505 = v455[31];
          v506 = &v453[v505];
          v507 = (char *)v454 + v505;
          v14 = v1177;
          if (__swift_getEnumTagSinglePayload((uint64_t)v454 + v505, 1, v1177))
          {
            v508 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v506, v507, *(void *)(*(void *)(v508 - 8) + 64));
          }
          else
          {
            v1181(v506, v507, v1177);
            __swift_storeEnumTagSinglePayload((uint64_t)v506, 0, 1, v1177);
          }
          v517 = v455[32];
          v518 = &v453[v517];
          v519 = (char *)v454 + v517;
          if (__swift_getEnumTagSinglePayload((uint64_t)v454 + v517, 1, v1177))
          {
            v520 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v518, v519, *(void *)(*(void *)(v520 - 8) + 64));
          }
          else
          {
            v1181(v518, v519, v1177);
            __swift_storeEnumTagSinglePayload((uint64_t)v518, 0, 1, v1177);
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v453, 0, 1, (uint64_t)v455);
          v22 = v1173;
          v20 = v1174;
        }
        v529 = v22[8];
        v530 = &v20[v529];
        v531 = (_OWORD *)((char *)v1184 + v529);
        v532 = type metadata accessor for Appointment(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v531, 1, v532))
        {
          v533 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
          memcpy(v530, v531, *(void *)(*(void *)(v533 - 8) + 64));
        }
        else
        {
          v534 = v531[1];
          *(_OWORD *)v530 = *v531;
          *((_OWORD *)v530 + 1) = v534;
          v535 = v531[3];
          *((_OWORD *)v530 + 2) = v531[2];
          *((_OWORD *)v530 + 3) = v535;
          v536 = v531[5];
          *((_OWORD *)v530 + 4) = v531[4];
          *((_OWORD *)v530 + 5) = v536;
          v537 = v531[7];
          *((_OWORD *)v530 + 6) = v531[6];
          *((_OWORD *)v530 + 7) = v537;
          v530[128] = *((unsigned char *)v531 + 128);
          *(_WORD *)(v530 + 129) = *(_WORD *)((char *)v531 + 129);
          *((void *)v530 + 17) = *((void *)v531 + 17);
          v538 = v531[10];
          *((_OWORD *)v530 + 9) = v531[9];
          *((_OWORD *)v530 + 10) = v538;
          v539 = v531[12];
          *((_OWORD *)v530 + 11) = v531[11];
          *((_OWORD *)v530 + 12) = v539;
          v540 = v531[14];
          *((_OWORD *)v530 + 13) = v531[13];
          *((_OWORD *)v530 + 14) = v540;
          v541 = v531[16];
          *((_OWORD *)v530 + 15) = v531[15];
          *((_OWORD *)v530 + 16) = v541;
          v530[280] = *((unsigned char *)v531 + 280);
          *((void *)v530 + 34) = *((void *)v531 + 34);
          *((_OWORD *)v530 + 18) = v531[18];
          v542 = *(int *)(v532 + 108);
          v543 = &v530[v542];
          v544 = (char *)v531 + v542;
          if (__swift_getEnumTagSinglePayload((uint64_t)v531 + v542, 1, v14))
          {
            v545 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v543, v544, *(void *)(*(void *)(v545 - 8) + 64));
          }
          else
          {
            v1181(v543, v544, v14);
            __swift_storeEnumTagSinglePayload((uint64_t)v543, 0, 1, v14);
          }
          v580 = *(int *)(v532 + 112);
          v581 = &v530[v580];
          v582 = (char *)v531 + v580;
          if (__swift_getEnumTagSinglePayload((uint64_t)v531 + v580, 1, v14))
          {
            v583 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v581, v582, *(void *)(*(void *)(v583 - 8) + 64));
          }
          else
          {
            v1181(v581, v582, v14);
            __swift_storeEnumTagSinglePayload((uint64_t)v581, 0, 1, v14);
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v530, 0, 1, v532);
          v22 = v1173;
          v20 = v1174;
        }
        v592 = v22[9];
        v593 = &v20[v592];
        v594 = (_OWORD *)((char *)v1184 + v592);
        v595 = (int *)type metadata accessor for Party(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v594, 1, (uint64_t)v595))
        {
          v596 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
          memcpy(v593, v594, *(void *)(*(void *)(v596 - 8) + 64));
        }
        else
        {
          v597 = v594[1];
          *(_OWORD *)v593 = *v594;
          *((_OWORD *)v593 + 1) = v597;
          v598 = v594[3];
          *((_OWORD *)v593 + 2) = v594[2];
          *((_OWORD *)v593 + 3) = v598;
          v599 = v594[5];
          *((_OWORD *)v593 + 4) = v594[4];
          *((_OWORD *)v593 + 5) = v599;
          v600 = v594[7];
          *((_OWORD *)v593 + 6) = v594[6];
          *((_OWORD *)v593 + 7) = v600;
          v593[128] = *((unsigned char *)v594 + 128);
          *(_WORD *)(v593 + 129) = *(_WORD *)((char *)v594 + 129);
          *((void *)v593 + 17) = *((void *)v594 + 17);
          v601 = v594[10];
          *((_OWORD *)v593 + 9) = v594[9];
          *((_OWORD *)v593 + 10) = v601;
          v602 = v594[12];
          *((_OWORD *)v593 + 11) = v594[11];
          *((_OWORD *)v593 + 12) = v602;
          v603 = v594[14];
          *((_OWORD *)v593 + 13) = v594[13];
          *((_OWORD *)v593 + 14) = v603;
          *((_OWORD *)v593 + 15) = v594[15];
          v604 = v595[24];
          v605 = &v593[v604];
          v606 = (char *)v594 + v604;
          if (__swift_getEnumTagSinglePayload((uint64_t)v594 + v604, 1, v14))
          {
            v607 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v605, v606, *(void *)(*(void *)(v607 - 8) + 64));
          }
          else
          {
            v1181(v605, v606, v14);
            __swift_storeEnumTagSinglePayload((uint64_t)v605, 0, 1, v14);
          }
          v640 = v595[25];
          v641 = &v593[v640];
          v642 = (char *)v594 + v640;
          if (__swift_getEnumTagSinglePayload((uint64_t)v594 + v640, 1, v14))
          {
            v643 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v641, v642, *(void *)(*(void *)(v643 - 8) + 64));
          }
          else
          {
            v1181(v641, v642, v14);
            __swift_storeEnumTagSinglePayload((uint64_t)v641, 0, 1, v14);
          }
          v652 = v595[26];
          v653 = &v593[v652];
          v654 = (char *)v594 + v652;
          v655 = type metadata accessor for URL();
          if (__swift_getEnumTagSinglePayload((uint64_t)v654, 1, v655))
          {
            v656 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v653, v654, *(void *)(*(void *)(v656 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v655 - 8) + 32))(v653, v654, v655);
            __swift_storeEnumTagSinglePayload((uint64_t)v653, 0, 1, v655);
          }
          v22 = v1173;
          __swift_storeEnumTagSinglePayload((uint64_t)v593, 0, 1, (uint64_t)v595);
          v14 = v1177;
          v20 = v1174;
        }
        v666 = v22[10];
        v667 = &v20[v666];
        v668 = (_OWORD *)((char *)v1184 + v666);
        v669 = (int *)type metadata accessor for Trip(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v668, 1, (uint64_t)v669))
        {
          v670 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
          memcpy(v667, v668, *(void *)(*(void *)(v670 - 8) + 64));
        }
        else
        {
          v671 = v668[1];
          *(_OWORD *)v667 = *v668;
          *((_OWORD *)v667 + 1) = v671;
          v672 = v668[3];
          *((_OWORD *)v667 + 2) = v668[2];
          *((_OWORD *)v667 + 3) = v672;
          v673 = v668[5];
          *((_OWORD *)v667 + 4) = v668[4];
          *((_OWORD *)v667 + 5) = v673;
          v674 = v668[7];
          *((_OWORD *)v667 + 6) = v668[6];
          *((_OWORD *)v667 + 7) = v674;
          v667[128] = *((unsigned char *)v668 + 128);
          *(_WORD *)(v667 + 129) = *(_WORD *)((char *)v668 + 129);
          *((void *)v667 + 17) = *((void *)v668 + 17);
          v675 = v668[10];
          *((_OWORD *)v667 + 9) = v668[9];
          *((_OWORD *)v667 + 10) = v675;
          v676 = v668[12];
          *((_OWORD *)v667 + 11) = v668[11];
          *((_OWORD *)v667 + 12) = v676;
          *((_OWORD *)v667 + 13) = v668[13];
          v677 = v669[22];
          v678 = &v667[v677];
          v679 = (char *)v668 + v677;
          if (__swift_getEnumTagSinglePayload((uint64_t)v668 + v677, 1, v14))
          {
            v680 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v678, v679, *(void *)(*(void *)(v680 - 8) + 64));
          }
          else
          {
            v1181(v678, v679, v14);
            __swift_storeEnumTagSinglePayload((uint64_t)v678, 0, 1, v14);
          }
          v711 = v669[23];
          v712 = &v667[v711];
          v713 = (char *)v668 + v711;
          if (__swift_getEnumTagSinglePayload((uint64_t)v668 + v711, 1, v14))
          {
            v714 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v712, v713, *(void *)(*(void *)(v714 - 8) + 64));
          }
          else
          {
            v1181(v712, v713, v14);
            __swift_storeEnumTagSinglePayload((uint64_t)v712, 0, 1, v14);
          }
          v723 = v669[24];
          v724 = &v667[v723];
          v725 = (char *)v668 + v723;
          *(void *)v724 = *(void *)v725;
          v724[8] = v725[8];
          v726 = v669[25];
          v727 = &v667[v726];
          v728 = (char *)v668 + v726;
          v729 = type metadata accessor for URL();
          if (__swift_getEnumTagSinglePayload((uint64_t)v728, 1, v729))
          {
            v730 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v727, v728, *(void *)(*(void *)(v730 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v729 - 8) + 32))(v727, v728, v729);
            __swift_storeEnumTagSinglePayload((uint64_t)v727, 0, 1, v729);
          }
          v22 = v1173;
          __swift_storeEnumTagSinglePayload((uint64_t)v667, 0, 1, (uint64_t)v669);
          v20 = v1174;
        }
        v746 = v22[11];
        v747 = &v20[v746];
        v748 = (_OWORD *)((char *)v1184 + v746);
        v749 = (int *)type metadata accessor for FlightReservation(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v748, 1, (uint64_t)v749))
        {
          v750 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
          memcpy(v747, v748, *(void *)(*(void *)(v750 - 8) + 64));
        }
        else
        {
          v751 = v748[1];
          *(_OWORD *)v747 = *v748;
          *((_OWORD *)v747 + 1) = v751;
          v752 = v748[3];
          *((_OWORD *)v747 + 2) = v748[2];
          *((_OWORD *)v747 + 3) = v752;
          v753 = v748[5];
          *((_OWORD *)v747 + 4) = v748[4];
          *((_OWORD *)v747 + 5) = v753;
          v747[96] = *((unsigned char *)v748 + 96);
          *(_OWORD *)(v747 + 104) = *(_OWORD *)((char *)v748 + 104);
          v754 = v749[13];
          v755 = &v747[v754];
          v756 = (char *)v748 + v754;
          v757 = type metadata accessor for URL();
          if (__swift_getEnumTagSinglePayload((uint64_t)v756, 1, v757))
          {
            v758 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v755, v756, *(void *)(*(void *)(v758 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v757 - 8) + 32))(v755, v756, v757);
            __swift_storeEnumTagSinglePayload((uint64_t)v755, 0, 1, v757);
          }
          v783 = v749[14];
          v784 = &v747[v783];
          v785 = (char *)v748 + v783;
          __dsta = v10;
          if (__swift_getEnumTagSinglePayload((uint64_t)v748 + v783, 1, v757))
          {
            v786 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v784, v785, *(void *)(*(void *)(v786 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v757 - 8) + 32))(v784, v785, v757);
            __swift_storeEnumTagSinglePayload((uint64_t)v784, 0, 1, v757);
          }
          *(_OWORD *)&v747[v749[15]] = *(_OWORD *)((char *)v748 + v749[15]);
          *(_OWORD *)&v747[v749[16]] = *(_OWORD *)((char *)v748 + v749[16]);
          *(_OWORD *)&v747[v749[17]] = *(_OWORD *)((char *)v748 + v749[17]);
          v794 = v749[18];
          v795 = &v747[v794];
          v796 = (char *)v748 + v794;
          v797 = type metadata accessor for DateComponents();
          v798 = *(void (**)(char *, char *, uint64_t))(*(void *)(v797 - 8) + 32);
          v798(v795, v796, v797);
          v798(&v747[v749[19]], (char *)v748 + v749[19], v797);
          *(_OWORD *)&v747[v749[20]] = *(_OWORD *)((char *)v748 + v749[20]);
          *(_OWORD *)&v747[v749[21]] = *(_OWORD *)((char *)v748 + v749[21]);
          *(_OWORD *)&v747[v749[22]] = *(_OWORD *)((char *)v748 + v749[22]);
          *(_OWORD *)&v747[v749[23]] = *(_OWORD *)((char *)v748 + v749[23]);
          *(_OWORD *)&v747[v749[24]] = *(_OWORD *)((char *)v748 + v749[24]);
          *(_OWORD *)&v747[v749[25]] = *(_OWORD *)((char *)v748 + v749[25]);
          *(_OWORD *)&v747[v749[26]] = *(_OWORD *)((char *)v748 + v749[26]);
          *(_OWORD *)&v747[v749[27]] = *(_OWORD *)((char *)v748 + v749[27]);
          *(_OWORD *)&v747[v749[28]] = *(_OWORD *)((char *)v748 + v749[28]);
          *(_OWORD *)&v747[v749[29]] = *(_OWORD *)((char *)v748 + v749[29]);
          *(_OWORD *)&v747[v749[30]] = *(_OWORD *)((char *)v748 + v749[30]);
          *(_OWORD *)&v747[v749[31]] = *(_OWORD *)((char *)v748 + v749[31]);
          *(_OWORD *)&v747[v749[32]] = *(_OWORD *)((char *)v748 + v749[32]);
          *(void *)&v747[v749[33]] = *(void *)((char *)v748 + v749[33]);
          *(void *)&v747[v749[34]] = *(void *)((char *)v748 + v749[34]);
          *(_OWORD *)&v747[v749[35]] = *(_OWORD *)((char *)v748 + v749[35]);
          *(_OWORD *)&v747[v749[36]] = *(_OWORD *)((char *)v748 + v749[36]);
          *(_OWORD *)&v747[v749[37]] = *(_OWORD *)((char *)v748 + v749[37]);
          v799 = v749[38];
          v800 = &v747[v799];
          v801 = (char *)v748 + v799;
          if (__swift_getEnumTagSinglePayload((uint64_t)v748 + v799, 1, v1177))
          {
            v802 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v800, v801, *(void *)(*(void *)(v802 - 8) + 64));
          }
          else
          {
            v1181(v800, v801, v1177);
            __swift_storeEnumTagSinglePayload((uint64_t)v800, 0, 1, v1177);
          }
          v10 = __dsta;
          *(_OWORD *)&v747[v749[39]] = *(_OWORD *)((char *)v748 + v749[39]);
          *(_OWORD *)&v747[v749[40]] = *(_OWORD *)((char *)v748 + v749[40]);
          v821 = v749[41];
          v822 = &v747[v821];
          v823 = (char *)v748 + v821;
          *(void *)v822 = *(void *)v823;
          v822[8] = v823[8];
          *(_OWORD *)&v747[v749[42]] = *(_OWORD *)((char *)v748 + v749[42]);
          v824 = v749[43];
          v825 = &v747[v824];
          v826 = (char *)v748 + v824;
          *(_OWORD *)v825 = *(_OWORD *)v826;
          *(void *)(v825 + 13) = *(void *)(v826 + 13);
          *(_OWORD *)&v747[v749[44]] = *(_OWORD *)((char *)v748 + v749[44]);
          *(_OWORD *)&v747[v749[45]] = *(_OWORD *)((char *)v748 + v749[45]);
          *(_OWORD *)&v747[v749[46]] = *(_OWORD *)((char *)v748 + v749[46]);
          *(_OWORD *)&v747[v749[47]] = *(_OWORD *)((char *)v748 + v749[47]);
          __swift_storeEnumTagSinglePayload((uint64_t)v747, 0, 1, (uint64_t)v749);
          v22 = v1173;
          v20 = v1174;
        }
        v827 = v22[12];
        v828 = &v20[v827];
        v829 = (_OWORD *)((char *)v1184 + v827);
        v830 = (int *)type metadata accessor for HotelReservation(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v829, 1, (uint64_t)v830))
        {
          v831 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
          memcpy(v828, v829, *(void *)(*(void *)(v831 - 8) + 64));
        }
        else
        {
          v832 = v829[1];
          *(_OWORD *)v828 = *v829;
          *((_OWORD *)v828 + 1) = v832;
          v833 = v829[3];
          *((_OWORD *)v828 + 2) = v829[2];
          *((_OWORD *)v828 + 3) = v833;
          v834 = v829[5];
          *((_OWORD *)v828 + 4) = v829[4];
          *((_OWORD *)v828 + 5) = v834;
          v828[96] = *((unsigned char *)v829 + 96);
          *(_OWORD *)(v828 + 104) = *(_OWORD *)((char *)v829 + 104);
          *(_OWORD *)(v828 + 120) = *(_OWORD *)((char *)v829 + 120);
          v835 = v830[14];
          v836 = &v828[v835];
          v837 = (char *)v829 + v835;
          v838 = type metadata accessor for DateComponents();
          if (__swift_getEnumTagSinglePayload((uint64_t)v837, 1, v838))
          {
            v839 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
            memcpy(v836, v837, *(void *)(*(void *)(v839 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v838 - 8) + 32))(v836, v837, v838);
            __swift_storeEnumTagSinglePayload((uint64_t)v836, 0, 1, v838);
          }
          v878 = v830[15];
          v879 = &v828[v878];
          v880 = (char *)v829 + v878;
          if (__swift_getEnumTagSinglePayload((uint64_t)v829 + v878, 1, v838))
          {
            v881 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
            memcpy(v879, v880, *(void *)(*(void *)(v881 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v838 - 8) + 32))(v879, v880, v838);
            __swift_storeEnumTagSinglePayload((uint64_t)v879, 0, 1, v838);
          }
          *(_OWORD *)&v828[v830[16]] = *(_OWORD *)((char *)v829 + v830[16]);
          *(_OWORD *)&v828[v830[17]] = *(_OWORD *)((char *)v829 + v830[17]);
          *(_OWORD *)&v828[v830[18]] = *(_OWORD *)((char *)v829 + v830[18]);
          *(_OWORD *)&v828[v830[19]] = *(_OWORD *)((char *)v829 + v830[19]);
          *(_OWORD *)&v828[v830[20]] = *(_OWORD *)((char *)v829 + v830[20]);
          *(void *)&v828[v830[21]] = *(void *)((char *)v829 + v830[21]);
          *(void *)&v828[v830[22]] = *(void *)((char *)v829 + v830[22]);
          v890 = v830[23];
          v891 = &v828[v890];
          v892 = (char *)v829 + v890;
          v891[8] = v892[8];
          *(void *)v891 = *(void *)v892;
          v893 = v830[24];
          v894 = &v828[v893];
          v895 = (char *)v829 + v893;
          v894[8] = v895[8];
          *(void *)v894 = *(void *)v895;
          *(_OWORD *)&v828[v830[25]] = *(_OWORD *)((char *)v829 + v830[25]);
          *(_OWORD *)&v828[v830[26]] = *(_OWORD *)((char *)v829 + v830[26]);
          *(_OWORD *)&v828[v830[27]] = *(_OWORD *)((char *)v829 + v830[27]);
          *(_OWORD *)&v828[v830[28]] = *(_OWORD *)((char *)v829 + v830[28]);
          v896 = v830[29];
          v897 = &v828[v896];
          v898 = (char *)v829 + v896;
          *(void *)v897 = *(void *)v898;
          v897[8] = v898[8];
          __swift_storeEnumTagSinglePayload((uint64_t)v828, 0, 1, (uint64_t)v830);
          v22 = v1173;
          v20 = v1174;
        }
        v899 = v22[13];
        v900 = &v20[v899];
        v901 = (_OWORD *)((char *)v1184 + v899);
        v902 = (int *)type metadata accessor for RestaurantReservation(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v901, 1, (uint64_t)v902))
        {
          v903 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
          memcpy(v900, v901, *(void *)(*(void *)(v903 - 8) + 64));
        }
        else
        {
          v904 = v901[1];
          *(_OWORD *)v900 = *v901;
          *((_OWORD *)v900 + 1) = v904;
          v905 = v901[3];
          *((_OWORD *)v900 + 2) = v901[2];
          *((_OWORD *)v900 + 3) = v905;
          v906 = v901[5];
          *((_OWORD *)v900 + 4) = v901[4];
          *((_OWORD *)v900 + 5) = v906;
          v900[96] = *((unsigned char *)v901 + 96);
          *(_OWORD *)(v900 + 104) = *(_OWORD *)((char *)v901 + 104);
          *(_OWORD *)(v900 + 120) = *(_OWORD *)((char *)v901 + 120);
          v907 = v902[14];
          v908 = &v900[v907];
          v909 = (char *)v901 + v907;
          v910 = type metadata accessor for DateComponents();
          if (__swift_getEnumTagSinglePayload((uint64_t)v909, 1, v910))
          {
            v911 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
            memcpy(v908, v909, *(void *)(*(void *)(v911 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v910 - 8) + 32))(v908, v909, v910);
            __swift_storeEnumTagSinglePayload((uint64_t)v908, 0, 1, v910);
          }
          *(_OWORD *)&v900[v902[15]] = *(_OWORD *)((char *)v901 + v902[15]);
          *(_OWORD *)&v900[v902[16]] = *(_OWORD *)((char *)v901 + v902[16]);
          *(_OWORD *)&v900[v902[17]] = *(_OWORD *)((char *)v901 + v902[17]);
          *(_OWORD *)&v900[v902[18]] = *(_OWORD *)((char *)v901 + v902[18]);
          *(_OWORD *)&v900[v902[19]] = *(_OWORD *)((char *)v901 + v902[19]);
          *(void *)&v900[v902[20]] = *(void *)((char *)v901 + v902[20]);
          *(_OWORD *)&v900[v902[21]] = *(_OWORD *)((char *)v901 + v902[21]);
          *(_OWORD *)&v900[v902[22]] = *(_OWORD *)((char *)v901 + v902[22]);
          *(_OWORD *)&v900[v902[23]] = *(_OWORD *)((char *)v901 + v902[23]);
          __swift_storeEnumTagSinglePayload((uint64_t)v900, 0, 1, (uint64_t)v902);
          v22 = v1173;
          v20 = v1174;
        }
        __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, (uint64_t)v22);
      }
      v956 = v10[22];
      v957 = &a1[v956];
      v958 = &a2[v956];
      v959 = (int *)type metadata accessor for PreExtractedCard(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v958, 1, (uint64_t)v959))
      {
        v960 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
        memcpy(v957, v958, *(void *)(*(void *)(v960 - 8) + 64));
      }
      else
      {
        v961 = *((_OWORD *)v958 + 1);
        *(_OWORD *)v957 = *(_OWORD *)v958;
        *((_OWORD *)v957 + 1) = v961;
        v962 = *((_OWORD *)v958 + 3);
        *((_OWORD *)v957 + 2) = *((_OWORD *)v958 + 2);
        *((_OWORD *)v957 + 3) = v962;
        v963 = *((_OWORD *)v958 + 5);
        *((_OWORD *)v957 + 4) = *((_OWORD *)v958 + 4);
        *((_OWORD *)v957 + 5) = v963;
        v964 = v959[10];
        v965 = &v957[v964];
        v966 = &v958[v964];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v958[v964], 1, v1177))
        {
          v967 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v965, v966, *(void *)(*(void *)(v967 - 8) + 64));
        }
        else
        {
          v1181(v965, v966, v1177);
          __swift_storeEnumTagSinglePayload((uint64_t)v965, 0, 1, v1177);
        }
        v968 = v959[11];
        v969 = &v957[v968];
        v970 = &v958[v968];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v958[v968], 1, v1177))
        {
          v971 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v969, v970, *(void *)(*(void *)(v971 - 8) + 64));
        }
        else
        {
          v1181(v969, v970, v1177);
          __swift_storeEnumTagSinglePayload((uint64_t)v969, 0, 1, v1177);
        }
        *(_OWORD *)&v957[v959[12]] = *(_OWORD *)&v958[v959[12]];
        *(_OWORD *)&v957[v959[13]] = *(_OWORD *)&v958[v959[13]];
        *(_OWORD *)&v957[v959[14]] = *(_OWORD *)&v958[v959[14]];
        v972 = v959[15];
        v973 = &v957[v972];
        v974 = &v958[v972];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v958[v972], 1, v1177))
        {
          v975 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v973, v974, *(void *)(*(void *)(v975 - 8) + 64));
        }
        else
        {
          v1181(v973, v974, v1177);
          __swift_storeEnumTagSinglePayload((uint64_t)v973, 0, 1, v1177);
        }
        *(_OWORD *)&v957[v959[16]] = *(_OWORD *)&v958[v959[16]];
        *(_OWORD *)&v957[v959[17]] = *(_OWORD *)&v958[v959[17]];
        *(_OWORD *)&v957[v959[18]] = *(_OWORD *)&v958[v959[18]];
        *(_OWORD *)&v957[v959[19]] = *(_OWORD *)&v958[v959[19]];
        *(_OWORD *)&v957[v959[20]] = *(_OWORD *)&v958[v959[20]];
        *(_OWORD *)&v957[v959[21]] = *(_OWORD *)&v958[v959[21]];
        *(_OWORD *)&v957[v959[22]] = *(_OWORD *)&v958[v959[22]];
        *(_OWORD *)&v957[v959[23]] = *(_OWORD *)&v958[v959[23]];
        __swift_storeEnumTagSinglePayload((uint64_t)v957, 0, 1, (uint64_t)v959);
      }
      v976 = v10[23];
      v977 = &a1[v976];
      v978 = &a2[v976];
      v979 = (int *)type metadata accessor for PreExtractedContact(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v978, 1, (uint64_t)v979))
      {
        v980 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
        memcpy(v977, v978, *(void *)(*(void *)(v980 - 8) + 64));
      }
      else
      {
        v981 = *((_OWORD *)v978 + 1);
        *(_OWORD *)v977 = *(_OWORD *)v978;
        *((_OWORD *)v977 + 1) = v981;
        v982 = *((_OWORD *)v978 + 3);
        *((_OWORD *)v977 + 2) = *((_OWORD *)v978 + 2);
        *((_OWORD *)v977 + 3) = v982;
        v983 = *((_OWORD *)v978 + 5);
        *((_OWORD *)v977 + 4) = *((_OWORD *)v978 + 4);
        *((_OWORD *)v977 + 5) = v983;
        v984 = v979[11];
        v985 = &v977[v984];
        v986 = &v978[v984];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v978[v984], 1, v1177))
        {
          v987 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v985, v986, *(void *)(*(void *)(v987 - 8) + 64));
        }
        else
        {
          v1181(v985, v986, v1177);
          __swift_storeEnumTagSinglePayload((uint64_t)v985, 0, 1, v1177);
        }
        *(_OWORD *)&v977[v979[12]] = *(_OWORD *)&v978[v979[12]];
        *(void *)&v977[v979[13]] = *(void *)&v978[v979[13]];
        v988 = v979[14];
        v989 = &v977[v988];
        v990 = &v978[v988];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v978[v988], 1, v1177))
        {
          v991 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v989, v990, *(void *)(*(void *)(v991 - 8) + 64));
        }
        else
        {
          v1181(v989, v990, v1177);
          __swift_storeEnumTagSinglePayload((uint64_t)v989, 0, 1, v1177);
        }
        *(void *)&v977[v979[15]] = *(void *)&v978[v979[15]];
        *(void *)&v977[v979[16]] = *(void *)&v978[v979[16]];
        *(_OWORD *)&v977[v979[17]] = *(_OWORD *)&v978[v979[17]];
        *(void *)&v977[v979[18]] = *(void *)&v978[v979[18]];
        *(void *)&v977[v979[19]] = *(void *)&v978[v979[19]];
        __swift_storeEnumTagSinglePayload((uint64_t)v977, 0, 1, (uint64_t)v979);
      }
      v992 = v10[24];
      v993 = &a1[v992];
      v994 = &a2[v992];
      v995 = (int *)type metadata accessor for PreExtractedSharedLink(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v994, 1, (uint64_t)v995))
      {
        v996 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
        memcpy(v993, v994, *(void *)(*(void *)(v996 - 8) + 64));
      }
      else
      {
        v997 = *((_OWORD *)v994 + 1);
        *(_OWORD *)v993 = *(_OWORD *)v994;
        *((_OWORD *)v993 + 1) = v997;
        v998 = *((_OWORD *)v994 + 3);
        *((_OWORD *)v993 + 2) = *((_OWORD *)v994 + 2);
        *((_OWORD *)v993 + 3) = v998;
        v999 = v995[8];
        v1000 = &v993[v999];
        v1001 = &v994[v999];
        v1002 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v1001, 1, v1002))
        {
          v1003 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v1000, v1001, *(void *)(*(void *)(v1003 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v1002 - 8) + 32))(v1000, v1001, v1002);
          __swift_storeEnumTagSinglePayload((uint64_t)v1000, 0, 1, v1002);
        }
        *(_OWORD *)&v993[v995[9]] = *(_OWORD *)&v994[v995[9]];
        *(_OWORD *)&v993[v995[10]] = *(_OWORD *)&v994[v995[10]];
        *(_OWORD *)&v993[v995[11]] = *(_OWORD *)&v994[v995[11]];
        v1004 = v995[12];
        v1005 = &v993[v1004];
        v1006 = &v994[v1004];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v994[v1004], 1, v1177))
        {
          v1007 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v1005, v1006, *(void *)(*(void *)(v1007 - 8) + 64));
        }
        else
        {
          v1181(v1005, v1006, v1177);
          __swift_storeEnumTagSinglePayload((uint64_t)v1005, 0, 1, v1177);
        }
        v1008 = v995[13];
        v1009 = &v993[v1008];
        v1010 = &v994[v1008];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v994[v1008], 1, v1177))
        {
          v1011 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v1009, v1010, *(void *)(*(void *)(v1011 - 8) + 64));
        }
        else
        {
          v1181(v1009, v1010, v1177);
          __swift_storeEnumTagSinglePayload((uint64_t)v1009, 0, 1, v1177);
        }
        v1012 = v995[14];
        v1013 = &v993[v1012];
        v1014 = &v994[v1012];
        *(void *)v1013 = *(void *)v1014;
        v1013[8] = v1014[8];
        *(_OWORD *)&v993[v995[15]] = *(_OWORD *)&v994[v995[15]];
        *(_OWORD *)&v993[v995[16]] = *(_OWORD *)&v994[v995[16]];
        *(_OWORD *)&v993[v995[17]] = *(_OWORD *)&v994[v995[17]];
        *(_OWORD *)&v993[v995[18]] = *(_OWORD *)&v994[v995[18]];
        *(_OWORD *)&v993[v995[19]] = *(_OWORD *)&v994[v995[19]];
        __swift_storeEnumTagSinglePayload((uint64_t)v993, 0, 1, (uint64_t)v995);
      }
      memcpy(&a1[v10[25]], &a2[v10[25]], 0x90uLL);
      goto LABEL_522;
    case 1u:
      v24 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v24;
      v25 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v25;
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      v26 = (int *)type metadata accessor for MobileSMSDocument(0);
      v27 = v26[10];
      v28 = &a1[v27];
      v29 = &a2[v27];
      v30 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v30))
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v28, v29, v30);
        __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v30);
      }
      v230 = v26[11];
      v231 = &a1[v230];
      v232 = &a2[v230];
      v233 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v232, 1, v233))
      {
        v234 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v231, v232, *(void *)(*(void *)(v234 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v233 - 8) + 32))(v231, v232, v233);
        __swift_storeEnumTagSinglePayload((uint64_t)v231, 0, 1, v233);
      }
      *(void *)&a1[v26[12]] = *(void *)&a2[v26[12]];
      *(_OWORD *)&a1[v26[13]] = *(_OWORD *)&a2[v26[13]];
      *(_OWORD *)&a1[v26[14]] = *(_OWORD *)&a2[v26[14]];
      *(void *)&a1[v26[15]] = *(void *)&a2[v26[15]];
      *(void *)&a1[v26[16]] = *(void *)&a2[v26[16]];
      v288 = v26[17];
      v289 = &a1[v288];
      v290 = &a2[v288];
      v291 = *((_OWORD *)v290 + 1);
      *(_OWORD *)v289 = *(_OWORD *)v290;
      *((_OWORD *)v289 + 1) = v291;
      *((void *)v289 + 4) = *((void *)v290 + 4);
      *(_OWORD *)&a1[v26[18]] = *(_OWORD *)&a2[v26[18]];
      v292 = v26[19];
      v293 = &a1[v292];
      v294 = &a2[v292];
      v295 = (int *)type metadata accessor for PartialExtractedAttributes(0);
      v1180 = v233;
      v1183 = v30;
      v1187 = a3;
      if (__swift_getEnumTagSinglePayload((uint64_t)v294, 1, (uint64_t)v295))
      {
        v296 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
        memcpy(v293, v294, *(void *)(*(void *)(v296 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v293 = *(_OWORD *)v294;
        v334 = v295[5];
        v335 = v294;
        v336 = &v293[v334];
        v1186 = v335;
        v337 = (_OWORD *)((char *)v335 + v334);
        v338 = type metadata accessor for RentalCarReservation(0);
        v1179 = v293;
        v1176 = v295;
        if (__swift_getEnumTagSinglePayload((uint64_t)v337, 1, v338))
        {
          v339 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
          memcpy(v336, v337, *(void *)(*(void *)(v339 - 8) + 64));
        }
        else
        {
          v369 = v337[1];
          *(_OWORD *)v336 = *v337;
          *((_OWORD *)v336 + 1) = v369;
          v370 = v337[3];
          *((_OWORD *)v336 + 2) = v337[2];
          *((_OWORD *)v336 + 3) = v370;
          v371 = v337[5];
          *((_OWORD *)v336 + 4) = v337[4];
          *((_OWORD *)v336 + 5) = v371;
          v372 = v337[7];
          *((_OWORD *)v336 + 6) = v337[6];
          *((_OWORD *)v336 + 7) = v372;
          v336[128] = *((unsigned char *)v337 + 128);
          *(_WORD *)(v336 + 129) = *(_WORD *)((char *)v337 + 129);
          *((void *)v336 + 17) = *((void *)v337 + 17);
          v373 = v337[10];
          *((_OWORD *)v336 + 9) = v337[9];
          *((_OWORD *)v336 + 10) = v373;
          v374 = v337[12];
          *((_OWORD *)v336 + 11) = v337[11];
          *((_OWORD *)v336 + 12) = v374;
          v375 = v337[14];
          *((_OWORD *)v336 + 13) = v337[13];
          *((_OWORD *)v336 + 14) = v375;
          *((_OWORD *)v336 + 15) = v337[15];
          *((void *)v336 + 32) = *((void *)v337 + 32);
          *(_OWORD *)(v336 + 264) = *(_OWORD *)((char *)v337 + 264);
          *(_OWORD *)(v336 + 280) = *(_OWORD *)((char *)v337 + 280);
          *(_OWORD *)(v336 + 296) = *(_OWORD *)((char *)v337 + 296);
          *(_OWORD *)(v336 + 312) = *(_OWORD *)((char *)v337 + 312);
          *(_OWORD *)(v336 + 328) = *(_OWORD *)((char *)v337 + 328);
          *(_OWORD *)(v336 + 344) = *(_OWORD *)((char *)v337 + 344);
          *(_OWORD *)(v336 + 360) = *(_OWORD *)((char *)v337 + 360);
          v336[384] = *((unsigned char *)v337 + 384);
          *((void *)v336 + 47) = *((void *)v337 + 47);
          *(_OWORD *)(v336 + 392) = *(_OWORD *)((char *)v337 + 392);
          *(_OWORD *)(v336 + 408) = *(_OWORD *)((char *)v337 + 408);
          v376 = *(int *)(v338 + 140);
          v377 = &v336[v376];
          v378 = (char *)v337 + v376;
          if (__swift_getEnumTagSinglePayload((uint64_t)v337 + v376, 1, v1183))
          {
            v379 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v377, v378, *(void *)(*(void *)(v379 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1183 - 8) + 32))(v377, v378, v1183);
            __swift_storeEnumTagSinglePayload((uint64_t)v377, 0, 1, v1183);
          }
          v388 = *(int *)(v338 + 144);
          v389 = &v336[v388];
          v390 = (char *)v337 + v388;
          if (__swift_getEnumTagSinglePayload((uint64_t)v337 + v388, 1, v1183))
          {
            v391 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v389, v390, *(void *)(*(void *)(v391 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1183 - 8) + 32))(v389, v390, v1183);
            __swift_storeEnumTagSinglePayload((uint64_t)v389, 0, 1, v1183);
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v336, 0, 1, v338);
          v293 = v1179;
          v295 = v1176;
        }
        v424 = v295[6];
        v425 = &v293[v424];
        v426 = (_OWORD *)((char *)v1186 + v424);
        v427 = type metadata accessor for TicketedTransportation(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v426, 1, v427))
        {
          v428 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
          memcpy(v425, v426, *(void *)(*(void *)(v428 - 8) + 64));
        }
        else
        {
          v429 = v426[1];
          *(_OWORD *)v425 = *v426;
          *((_OWORD *)v425 + 1) = v429;
          v430 = v426[3];
          *((_OWORD *)v425 + 2) = v426[2];
          *((_OWORD *)v425 + 3) = v430;
          v431 = v426[5];
          *((_OWORD *)v425 + 4) = v426[4];
          *((_OWORD *)v425 + 5) = v431;
          v432 = v426[7];
          *((_OWORD *)v425 + 6) = v426[6];
          *((_OWORD *)v425 + 7) = v432;
          v425[128] = *((unsigned char *)v426 + 128);
          *(_WORD *)(v425 + 129) = *(_WORD *)((char *)v426 + 129);
          *((void *)v425 + 17) = *((void *)v426 + 17);
          v433 = v426[10];
          *((_OWORD *)v425 + 9) = v426[9];
          *((_OWORD *)v425 + 10) = v433;
          v434 = v426[12];
          *((_OWORD *)v425 + 11) = v426[11];
          *((_OWORD *)v425 + 12) = v434;
          *((void *)v425 + 26) = *((void *)v426 + 26);
          *(_OWORD *)(v425 + 216) = *(_OWORD *)((char *)v426 + 216);
          *(_OWORD *)(v425 + 232) = *(_OWORD *)((char *)v426 + 232);
          *(_OWORD *)(v425 + 248) = *(_OWORD *)((char *)v426 + 248);
          *(_OWORD *)(v425 + 264) = *(_OWORD *)((char *)v426 + 264);
          v425[296] = *((unsigned char *)v426 + 296);
          v435 = *((void *)v426 + 36);
          *((void *)v425 + 35) = *((void *)v426 + 35);
          *((void *)v425 + 36) = v435;
          v436 = *(int *)(v427 + 112);
          v437 = &v425[v436];
          v438 = (char *)v426 + v436;
          if (__swift_getEnumTagSinglePayload((uint64_t)v426 + v436, 1, v1183))
          {
            v439 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v437, v438, *(void *)(*(void *)(v439 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1183 - 8) + 32))(v437, v438, v1183);
            __swift_storeEnumTagSinglePayload((uint64_t)v437, 0, 1, v1183);
          }
          v448 = *(int *)(v427 + 116);
          v449 = &v425[v448];
          v450 = (char *)v426 + v448;
          if (__swift_getEnumTagSinglePayload((uint64_t)v426 + v448, 1, v1183))
          {
            v451 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v449, v450, *(void *)(*(void *)(v451 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1183 - 8) + 32))(v449, v450, v1183);
            __swift_storeEnumTagSinglePayload((uint64_t)v449, 0, 1, v1183);
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v425, 0, 1, v427);
          v293 = v1179;
          v295 = v1176;
        }
        v488 = v295[7];
        v489 = &v293[v488];
        v490 = (_OWORD *)((char *)v1186 + v488);
        v491 = (int *)type metadata accessor for TicketedShow(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v490, 1, (uint64_t)v491))
        {
          v492 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
          memcpy(v489, v490, *(void *)(*(void *)(v492 - 8) + 64));
        }
        else
        {
          v493 = v490[1];
          *(_OWORD *)v489 = *v490;
          *((_OWORD *)v489 + 1) = v493;
          v494 = v490[3];
          *((_OWORD *)v489 + 2) = v490[2];
          *((_OWORD *)v489 + 3) = v494;
          v495 = v490[5];
          *((_OWORD *)v489 + 4) = v490[4];
          *((_OWORD *)v489 + 5) = v495;
          v496 = v490[7];
          *((_OWORD *)v489 + 6) = v490[6];
          *((_OWORD *)v489 + 7) = v496;
          v489[128] = *((unsigned char *)v490 + 128);
          *(_WORD *)(v489 + 129) = *(_WORD *)((char *)v490 + 129);
          *((void *)v489 + 17) = *((void *)v490 + 17);
          v497 = v490[10];
          *((_OWORD *)v489 + 9) = v490[9];
          *((_OWORD *)v489 + 10) = v497;
          v498 = v490[12];
          *((_OWORD *)v489 + 11) = v490[11];
          *((_OWORD *)v489 + 12) = v498;
          v499 = v490[14];
          *((_OWORD *)v489 + 13) = v490[13];
          *((_OWORD *)v489 + 14) = v499;
          *((void *)v489 + 30) = *((void *)v490 + 30);
          *(_OWORD *)(v489 + 248) = *(_OWORD *)((char *)v490 + 248);
          *(_OWORD *)(v489 + 264) = *(_OWORD *)((char *)v490 + 264);
          v489[296] = *((unsigned char *)v490 + 296);
          v500 = *((void *)v490 + 36);
          *((void *)v489 + 35) = *((void *)v490 + 35);
          *((void *)v489 + 36) = v500;
          *((_OWORD *)v489 + 19) = v490[19];
          v501 = v491[29];
          v502 = &v489[v501];
          v503 = (char *)v490 + v501;
          if (__swift_getEnumTagSinglePayload((uint64_t)v490 + v501, 1, v1180))
          {
            v504 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v502, v503, *(void *)(*(void *)(v504 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1180 - 8) + 32))(v502, v503, v1180);
            __swift_storeEnumTagSinglePayload((uint64_t)v502, 0, 1, v1180);
          }
          *(_OWORD *)&v489[v491[30]] = *(_OWORD *)((char *)v490 + v491[30]);
          v513 = v491[31];
          v514 = &v489[v513];
          v515 = (char *)v490 + v513;
          if (__swift_getEnumTagSinglePayload((uint64_t)v490 + v513, 1, v1183))
          {
            v516 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v514, v515, *(void *)(*(void *)(v516 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1183 - 8) + 32))(v514, v515, v1183);
            __swift_storeEnumTagSinglePayload((uint64_t)v514, 0, 1, v1183);
          }
          v525 = v491[32];
          v526 = &v489[v525];
          v527 = (char *)v490 + v525;
          if (__swift_getEnumTagSinglePayload((uint64_t)v490 + v525, 1, v1183))
          {
            v528 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v526, v527, *(void *)(*(void *)(v528 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1183 - 8) + 32))(v526, v527, v1183);
            __swift_storeEnumTagSinglePayload((uint64_t)v526, 0, 1, v1183);
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v489, 0, 1, (uint64_t)v491);
          v293 = v1179;
          v295 = v1176;
        }
        v563 = v295[8];
        v564 = &v293[v563];
        v565 = (_OWORD *)((char *)v1186 + v563);
        v566 = type metadata accessor for Appointment(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v565, 1, v566))
        {
          v567 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
          memcpy(v564, v565, *(void *)(*(void *)(v567 - 8) + 64));
        }
        else
        {
          v568 = v565[1];
          *(_OWORD *)v564 = *v565;
          *((_OWORD *)v564 + 1) = v568;
          v569 = v565[3];
          *((_OWORD *)v564 + 2) = v565[2];
          *((_OWORD *)v564 + 3) = v569;
          v570 = v565[5];
          *((_OWORD *)v564 + 4) = v565[4];
          *((_OWORD *)v564 + 5) = v570;
          v571 = v565[7];
          *((_OWORD *)v564 + 6) = v565[6];
          *((_OWORD *)v564 + 7) = v571;
          v564[128] = *((unsigned char *)v565 + 128);
          *(_WORD *)(v564 + 129) = *(_WORD *)((char *)v565 + 129);
          *((void *)v564 + 17) = *((void *)v565 + 17);
          v572 = v565[10];
          *((_OWORD *)v564 + 9) = v565[9];
          *((_OWORD *)v564 + 10) = v572;
          v573 = v565[12];
          *((_OWORD *)v564 + 11) = v565[11];
          *((_OWORD *)v564 + 12) = v573;
          v574 = v565[14];
          *((_OWORD *)v564 + 13) = v565[13];
          *((_OWORD *)v564 + 14) = v574;
          v575 = v565[16];
          *((_OWORD *)v564 + 15) = v565[15];
          *((_OWORD *)v564 + 16) = v575;
          v564[280] = *((unsigned char *)v565 + 280);
          *((void *)v564 + 34) = *((void *)v565 + 34);
          *((_OWORD *)v564 + 18) = v565[18];
          v576 = *(int *)(v566 + 108);
          v577 = &v564[v576];
          v578 = (char *)v565 + v576;
          if (__swift_getEnumTagSinglePayload((uint64_t)v565 + v576, 1, v1183))
          {
            v579 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v577, v578, *(void *)(*(void *)(v579 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1183 - 8) + 32))(v577, v578, v1183);
            __swift_storeEnumTagSinglePayload((uint64_t)v577, 0, 1, v1183);
          }
          v588 = *(int *)(v566 + 112);
          v589 = &v564[v588];
          v590 = (char *)v565 + v588;
          if (__swift_getEnumTagSinglePayload((uint64_t)v565 + v588, 1, v1183))
          {
            v591 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v589, v590, *(void *)(*(void *)(v591 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1183 - 8) + 32))(v589, v590, v1183);
            __swift_storeEnumTagSinglePayload((uint64_t)v589, 0, 1, v1183);
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v564, 0, 1, v566);
          v293 = v1179;
          v295 = v1176;
        }
        v624 = v295[9];
        v625 = &v293[v624];
        v626 = (_OWORD *)((char *)v1186 + v624);
        v627 = (int *)type metadata accessor for Party(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v626, 1, (uint64_t)v627))
        {
          v628 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
          memcpy(v625, v626, *(void *)(*(void *)(v628 - 8) + 64));
        }
        else
        {
          v629 = v626[1];
          *(_OWORD *)v625 = *v626;
          *((_OWORD *)v625 + 1) = v629;
          v630 = v626[3];
          *((_OWORD *)v625 + 2) = v626[2];
          *((_OWORD *)v625 + 3) = v630;
          v631 = v626[5];
          *((_OWORD *)v625 + 4) = v626[4];
          *((_OWORD *)v625 + 5) = v631;
          v632 = v626[7];
          *((_OWORD *)v625 + 6) = v626[6];
          *((_OWORD *)v625 + 7) = v632;
          v625[128] = *((unsigned char *)v626 + 128);
          *(_WORD *)(v625 + 129) = *(_WORD *)((char *)v626 + 129);
          *((void *)v625 + 17) = *((void *)v626 + 17);
          v633 = v626[10];
          *((_OWORD *)v625 + 9) = v626[9];
          *((_OWORD *)v625 + 10) = v633;
          v634 = v626[12];
          *((_OWORD *)v625 + 11) = v626[11];
          *((_OWORD *)v625 + 12) = v634;
          v635 = v626[14];
          *((_OWORD *)v625 + 13) = v626[13];
          *((_OWORD *)v625 + 14) = v635;
          *((_OWORD *)v625 + 15) = v626[15];
          v636 = v627[24];
          v637 = &v625[v636];
          v638 = (char *)v626 + v636;
          if (__swift_getEnumTagSinglePayload((uint64_t)v626 + v636, 1, v1183))
          {
            v639 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v637, v638, *(void *)(*(void *)(v639 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1183 - 8) + 32))(v637, v638, v1183);
            __swift_storeEnumTagSinglePayload((uint64_t)v637, 0, 1, v1183);
          }
          v648 = v627[25];
          v649 = &v625[v648];
          v650 = (char *)v626 + v648;
          if (__swift_getEnumTagSinglePayload((uint64_t)v626 + v648, 1, v1183))
          {
            v651 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v649, v650, *(void *)(*(void *)(v651 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1183 - 8) + 32))(v649, v650, v1183);
            __swift_storeEnumTagSinglePayload((uint64_t)v649, 0, 1, v1183);
          }
          v662 = v627[26];
          v663 = &v625[v662];
          v664 = (char *)v626 + v662;
          if (__swift_getEnumTagSinglePayload((uint64_t)v626 + v662, 1, v1180))
          {
            v665 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v663, v664, *(void *)(*(void *)(v665 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1180 - 8) + 32))(v663, v664, v1180);
            __swift_storeEnumTagSinglePayload((uint64_t)v663, 0, 1, v1180);
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v625, 0, 1, (uint64_t)v627);
          v293 = v1179;
          v295 = v1176;
        }
        v696 = v295[10];
        v697 = &v293[v696];
        v698 = (_OWORD *)((char *)v1186 + v696);
        v699 = (int *)type metadata accessor for Trip(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v698, 1, (uint64_t)v699))
        {
          v700 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
          memcpy(v697, v698, *(void *)(*(void *)(v700 - 8) + 64));
        }
        else
        {
          v701 = v698[1];
          *(_OWORD *)v697 = *v698;
          *((_OWORD *)v697 + 1) = v701;
          v702 = v698[3];
          *((_OWORD *)v697 + 2) = v698[2];
          *((_OWORD *)v697 + 3) = v702;
          v703 = v698[5];
          *((_OWORD *)v697 + 4) = v698[4];
          *((_OWORD *)v697 + 5) = v703;
          v704 = v698[7];
          *((_OWORD *)v697 + 6) = v698[6];
          *((_OWORD *)v697 + 7) = v704;
          v697[128] = *((unsigned char *)v698 + 128);
          *(_WORD *)(v697 + 129) = *(_WORD *)((char *)v698 + 129);
          *((void *)v697 + 17) = *((void *)v698 + 17);
          v705 = v698[10];
          *((_OWORD *)v697 + 9) = v698[9];
          *((_OWORD *)v697 + 10) = v705;
          v706 = v698[12];
          *((_OWORD *)v697 + 11) = v698[11];
          *((_OWORD *)v697 + 12) = v706;
          *((_OWORD *)v697 + 13) = v698[13];
          v707 = v699[22];
          v708 = &v697[v707];
          v709 = (char *)v698 + v707;
          if (__swift_getEnumTagSinglePayload((uint64_t)v698 + v707, 1, v1183))
          {
            v710 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v708, v709, *(void *)(*(void *)(v710 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1183 - 8) + 32))(v708, v709, v1183);
            __swift_storeEnumTagSinglePayload((uint64_t)v708, 0, 1, v1183);
          }
          v719 = v699[23];
          v720 = &v697[v719];
          v721 = (char *)v698 + v719;
          if (__swift_getEnumTagSinglePayload((uint64_t)v698 + v719, 1, v1183))
          {
            v722 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v720, v721, *(void *)(*(void *)(v722 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1183 - 8) + 32))(v720, v721, v1183);
            __swift_storeEnumTagSinglePayload((uint64_t)v720, 0, 1, v1183);
          }
          v739 = v699[24];
          v740 = &v697[v739];
          v741 = (char *)v698 + v739;
          *(void *)v740 = *(void *)v741;
          v740[8] = v741[8];
          v742 = v699[25];
          v743 = &v697[v742];
          v744 = (char *)v698 + v742;
          if (__swift_getEnumTagSinglePayload((uint64_t)v698 + v742, 1, v1180))
          {
            v745 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v743, v744, *(void *)(*(void *)(v745 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1180 - 8) + 32))(v743, v744, v1180);
            __swift_storeEnumTagSinglePayload((uint64_t)v743, 0, 1, v1180);
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v697, 0, 1, (uint64_t)v699);
          v293 = v1179;
          v295 = v1176;
        }
        v772 = v295[11];
        v773 = &v293[v772];
        v774 = (_OWORD *)((char *)v1186 + v772);
        v775 = (int *)type metadata accessor for FlightReservation(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v774, 1, (uint64_t)v775))
        {
          v776 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
          memcpy(v773, v774, *(void *)(*(void *)(v776 - 8) + 64));
        }
        else
        {
          v777 = v774[1];
          *(_OWORD *)v773 = *v774;
          *((_OWORD *)v773 + 1) = v777;
          v778 = v774[3];
          *((_OWORD *)v773 + 2) = v774[2];
          *((_OWORD *)v773 + 3) = v778;
          v779 = v774[5];
          *((_OWORD *)v773 + 4) = v774[4];
          *((_OWORD *)v773 + 5) = v779;
          v773[96] = *((unsigned char *)v774 + 96);
          *(_OWORD *)(v773 + 104) = *(_OWORD *)((char *)v774 + 104);
          v780 = v775[13];
          __dst = &v773[v780];
          v781 = (char *)v774 + v780;
          if (__swift_getEnumTagSinglePayload((uint64_t)v774 + v780, 1, v1180))
          {
            v782 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(__dst, v781, *(void *)(*(void *)(v782 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1180 - 8) + 32))(__dst, v781, v1180);
            __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v1180);
          }
          v791 = v775[14];
          __dstb = &v773[v791];
          v792 = (char *)v774 + v791;
          if (__swift_getEnumTagSinglePayload((uint64_t)v774 + v791, 1, v1180))
          {
            v793 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(__dstb, v792, *(void *)(*(void *)(v793 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1180 - 8) + 32))(__dstb, v792, v1180);
            __swift_storeEnumTagSinglePayload((uint64_t)__dstb, 0, 1, v1180);
          }
          *(_OWORD *)&v773[v775[15]] = *(_OWORD *)((char *)v774 + v775[15]);
          *(_OWORD *)&v773[v775[16]] = *(_OWORD *)((char *)v774 + v775[16]);
          *(_OWORD *)&v773[v775[17]] = *(_OWORD *)((char *)v774 + v775[17]);
          v812 = v775[18];
          v813 = &v773[v812];
          v814 = (char *)v774 + v812;
          v815 = type metadata accessor for DateComponents();
          v816 = *(void (**)(char *, char *, uint64_t))(*(void *)(v815 - 8) + 32);
          v816(v813, v814, v815);
          v816(&v773[v775[19]], (char *)v774 + v775[19], v815);
          *(_OWORD *)&v773[v775[20]] = *(_OWORD *)((char *)v774 + v775[20]);
          *(_OWORD *)&v773[v775[21]] = *(_OWORD *)((char *)v774 + v775[21]);
          *(_OWORD *)&v773[v775[22]] = *(_OWORD *)((char *)v774 + v775[22]);
          *(_OWORD *)&v773[v775[23]] = *(_OWORD *)((char *)v774 + v775[23]);
          *(_OWORD *)&v773[v775[24]] = *(_OWORD *)((char *)v774 + v775[24]);
          *(_OWORD *)&v773[v775[25]] = *(_OWORD *)((char *)v774 + v775[25]);
          *(_OWORD *)&v773[v775[26]] = *(_OWORD *)((char *)v774 + v775[26]);
          *(_OWORD *)&v773[v775[27]] = *(_OWORD *)((char *)v774 + v775[27]);
          *(_OWORD *)&v773[v775[28]] = *(_OWORD *)((char *)v774 + v775[28]);
          *(_OWORD *)&v773[v775[29]] = *(_OWORD *)((char *)v774 + v775[29]);
          *(_OWORD *)&v773[v775[30]] = *(_OWORD *)((char *)v774 + v775[30]);
          *(_OWORD *)&v773[v775[31]] = *(_OWORD *)((char *)v774 + v775[31]);
          *(_OWORD *)&v773[v775[32]] = *(_OWORD *)((char *)v774 + v775[32]);
          *(void *)&v773[v775[33]] = *(void *)((char *)v774 + v775[33]);
          *(void *)&v773[v775[34]] = *(void *)((char *)v774 + v775[34]);
          *(_OWORD *)&v773[v775[35]] = *(_OWORD *)((char *)v774 + v775[35]);
          *(_OWORD *)&v773[v775[36]] = *(_OWORD *)((char *)v774 + v775[36]);
          *(_OWORD *)&v773[v775[37]] = *(_OWORD *)((char *)v774 + v775[37]);
          v817 = v775[38];
          v818 = &v773[v817];
          v819 = (char *)v774 + v817;
          if (__swift_getEnumTagSinglePayload((uint64_t)v774 + v817, 1, v1183))
          {
            v820 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v818, v819, *(void *)(*(void *)(v820 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1183 - 8) + 32))(v818, v819, v1183);
            __swift_storeEnumTagSinglePayload((uint64_t)v818, 0, 1, v1183);
          }
          a3 = v1187;
          *(_OWORD *)&v773[v775[39]] = *(_OWORD *)((char *)v774 + v775[39]);
          *(_OWORD *)&v773[v775[40]] = *(_OWORD *)((char *)v774 + v775[40]);
          v859 = v775[41];
          v860 = &v773[v859];
          v861 = (char *)v774 + v859;
          *(void *)v860 = *(void *)v861;
          v860[8] = v861[8];
          *(_OWORD *)&v773[v775[42]] = *(_OWORD *)((char *)v774 + v775[42]);
          v862 = v775[43];
          v863 = &v773[v862];
          v864 = (char *)v774 + v862;
          *(_OWORD *)v863 = *(_OWORD *)v864;
          *(void *)(v863 + 13) = *(void *)(v864 + 13);
          *(_OWORD *)&v773[v775[44]] = *(_OWORD *)((char *)v774 + v775[44]);
          *(_OWORD *)&v773[v775[45]] = *(_OWORD *)((char *)v774 + v775[45]);
          *(_OWORD *)&v773[v775[46]] = *(_OWORD *)((char *)v774 + v775[46]);
          *(_OWORD *)&v773[v775[47]] = *(_OWORD *)((char *)v774 + v775[47]);
          __swift_storeEnumTagSinglePayload((uint64_t)v773, 0, 1, (uint64_t)v775);
          v293 = v1179;
          v295 = v1176;
        }
        v865 = v295[12];
        v866 = &v293[v865];
        v867 = (_OWORD *)((char *)v1186 + v865);
        v868 = (int *)type metadata accessor for HotelReservation(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v867, 1, (uint64_t)v868))
        {
          v869 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
          memcpy(v866, v867, *(void *)(*(void *)(v869 - 8) + 64));
        }
        else
        {
          v870 = v867[1];
          *(_OWORD *)v866 = *v867;
          *((_OWORD *)v866 + 1) = v870;
          v871 = v867[3];
          *((_OWORD *)v866 + 2) = v867[2];
          *((_OWORD *)v866 + 3) = v871;
          v872 = v867[5];
          *((_OWORD *)v866 + 4) = v867[4];
          *((_OWORD *)v866 + 5) = v872;
          v866[96] = *((unsigned char *)v867 + 96);
          *(_OWORD *)(v866 + 104) = *(_OWORD *)((char *)v867 + 104);
          *(_OWORD *)(v866 + 120) = *(_OWORD *)((char *)v867 + 120);
          v873 = v868[14];
          v874 = &v866[v873];
          v875 = (char *)v867 + v873;
          v876 = type metadata accessor for DateComponents();
          if (__swift_getEnumTagSinglePayload((uint64_t)v875, 1, v876))
          {
            v877 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
            memcpy(v874, v875, *(void *)(*(void *)(v877 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v876 - 8) + 32))(v874, v875, v876);
            __swift_storeEnumTagSinglePayload((uint64_t)v874, 0, 1, v876);
          }
          v886 = v868[15];
          v887 = &v866[v886];
          v888 = (char *)v867 + v886;
          if (__swift_getEnumTagSinglePayload((uint64_t)v867 + v886, 1, v876))
          {
            v889 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
            memcpy(v887, v888, *(void *)(*(void *)(v889 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v876 - 8) + 32))(v887, v888, v876);
            __swift_storeEnumTagSinglePayload((uint64_t)v887, 0, 1, v876);
          }
          *(_OWORD *)&v866[v868[16]] = *(_OWORD *)((char *)v867 + v868[16]);
          *(_OWORD *)&v866[v868[17]] = *(_OWORD *)((char *)v867 + v868[17]);
          *(_OWORD *)&v866[v868[18]] = *(_OWORD *)((char *)v867 + v868[18]);
          *(_OWORD *)&v866[v868[19]] = *(_OWORD *)((char *)v867 + v868[19]);
          *(_OWORD *)&v866[v868[20]] = *(_OWORD *)((char *)v867 + v868[20]);
          *(void *)&v866[v868[21]] = *(void *)((char *)v867 + v868[21]);
          *(void *)&v866[v868[22]] = *(void *)((char *)v867 + v868[22]);
          v934 = v868[23];
          v935 = &v866[v934];
          v936 = (char *)v867 + v934;
          v935[8] = v936[8];
          *(void *)v935 = *(void *)v936;
          v937 = v868[24];
          v938 = &v866[v937];
          v939 = (char *)v867 + v937;
          v938[8] = v939[8];
          *(void *)v938 = *(void *)v939;
          *(_OWORD *)&v866[v868[25]] = *(_OWORD *)((char *)v867 + v868[25]);
          *(_OWORD *)&v866[v868[26]] = *(_OWORD *)((char *)v867 + v868[26]);
          *(_OWORD *)&v866[v868[27]] = *(_OWORD *)((char *)v867 + v868[27]);
          *(_OWORD *)&v866[v868[28]] = *(_OWORD *)((char *)v867 + v868[28]);
          v940 = v868[29];
          v941 = &v866[v940];
          v942 = (char *)v867 + v940;
          *(void *)v941 = *(void *)v942;
          v941[8] = v942[8];
          __swift_storeEnumTagSinglePayload((uint64_t)v866, 0, 1, (uint64_t)v868);
          v295 = v1176;
          v293 = v1179;
        }
        v943 = v295[13];
        v944 = &v293[v943];
        v945 = (_OWORD *)((char *)v1186 + v943);
        v946 = (int *)type metadata accessor for RestaurantReservation(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v945, 1, (uint64_t)v946))
        {
          v947 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
          memcpy(v944, v945, *(void *)(*(void *)(v947 - 8) + 64));
        }
        else
        {
          v948 = v945[1];
          *(_OWORD *)v944 = *v945;
          *((_OWORD *)v944 + 1) = v948;
          v949 = v945[3];
          *((_OWORD *)v944 + 2) = v945[2];
          *((_OWORD *)v944 + 3) = v949;
          v950 = v945[5];
          *((_OWORD *)v944 + 4) = v945[4];
          *((_OWORD *)v944 + 5) = v950;
          v944[96] = *((unsigned char *)v945 + 96);
          *(_OWORD *)(v944 + 104) = *(_OWORD *)((char *)v945 + 104);
          *(_OWORD *)(v944 + 120) = *(_OWORD *)((char *)v945 + 120);
          v951 = v946[14];
          v952 = &v944[v951];
          v953 = (char *)v945 + v951;
          v954 = type metadata accessor for DateComponents();
          if (__swift_getEnumTagSinglePayload((uint64_t)v953, 1, v954))
          {
            v955 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
            memcpy(v952, v953, *(void *)(*(void *)(v955 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v954 - 8) + 32))(v952, v953, v954);
            __swift_storeEnumTagSinglePayload((uint64_t)v952, 0, 1, v954);
          }
          *(_OWORD *)&v944[v946[15]] = *(_OWORD *)((char *)v945 + v946[15]);
          *(_OWORD *)&v944[v946[16]] = *(_OWORD *)((char *)v945 + v946[16]);
          *(_OWORD *)&v944[v946[17]] = *(_OWORD *)((char *)v945 + v946[17]);
          *(_OWORD *)&v944[v946[18]] = *(_OWORD *)((char *)v945 + v946[18]);
          *(_OWORD *)&v944[v946[19]] = *(_OWORD *)((char *)v945 + v946[19]);
          *(void *)&v944[v946[20]] = *(void *)((char *)v945 + v946[20]);
          *(_OWORD *)&v944[v946[21]] = *(_OWORD *)((char *)v945 + v946[21]);
          *(_OWORD *)&v944[v946[22]] = *(_OWORD *)((char *)v945 + v946[22]);
          *(_OWORD *)&v944[v946[23]] = *(_OWORD *)((char *)v945 + v946[23]);
          __swift_storeEnumTagSinglePayload((uint64_t)v944, 0, 1, (uint64_t)v946);
          v295 = v1176;
          v293 = v1179;
        }
        __swift_storeEnumTagSinglePayload((uint64_t)v293, 0, 1, (uint64_t)v295);
      }
      v1074 = v26[20];
      v1075 = &a1[v1074];
      v1076 = &a2[v1074];
      v1077 = (int *)type metadata accessor for PreExtractedCard(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v1076, 1, (uint64_t)v1077))
      {
        v1078 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
        memcpy(v1075, v1076, *(void *)(*(void *)(v1078 - 8) + 64));
      }
      else
      {
        v1079 = *((_OWORD *)v1076 + 1);
        *(_OWORD *)v1075 = *(_OWORD *)v1076;
        *((_OWORD *)v1075 + 1) = v1079;
        v1080 = *((_OWORD *)v1076 + 3);
        *((_OWORD *)v1075 + 2) = *((_OWORD *)v1076 + 2);
        *((_OWORD *)v1075 + 3) = v1080;
        v1081 = *((_OWORD *)v1076 + 5);
        *((_OWORD *)v1075 + 4) = *((_OWORD *)v1076 + 4);
        *((_OWORD *)v1075 + 5) = v1081;
        v1082 = v1077[10];
        v1083 = &v1075[v1082];
        v1084 = &v1076[v1082];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v1076[v1082], 1, v1183))
        {
          v1085 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v1083, v1084, *(void *)(*(void *)(v1085 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v1183 - 8) + 32))(v1083, v1084, v1183);
          __swift_storeEnumTagSinglePayload((uint64_t)v1083, 0, 1, v1183);
        }
        v1086 = v1077[11];
        v1087 = &v1075[v1086];
        v1088 = &v1076[v1086];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v1076[v1086], 1, v1183))
        {
          v1089 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v1087, v1088, *(void *)(*(void *)(v1089 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v1183 - 8) + 32))(v1087, v1088, v1183);
          __swift_storeEnumTagSinglePayload((uint64_t)v1087, 0, 1, v1183);
        }
        *(_OWORD *)&v1075[v1077[12]] = *(_OWORD *)&v1076[v1077[12]];
        *(_OWORD *)&v1075[v1077[13]] = *(_OWORD *)&v1076[v1077[13]];
        *(_OWORD *)&v1075[v1077[14]] = *(_OWORD *)&v1076[v1077[14]];
        v1090 = v1077[15];
        v1091 = &v1075[v1090];
        v1092 = &v1076[v1090];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v1076[v1090], 1, v1183))
        {
          v1093 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v1091, v1092, *(void *)(*(void *)(v1093 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v1183 - 8) + 32))(v1091, v1092, v1183);
          __swift_storeEnumTagSinglePayload((uint64_t)v1091, 0, 1, v1183);
        }
        a3 = v1187;
        *(_OWORD *)&v1075[v1077[16]] = *(_OWORD *)&v1076[v1077[16]];
        *(_OWORD *)&v1075[v1077[17]] = *(_OWORD *)&v1076[v1077[17]];
        *(_OWORD *)&v1075[v1077[18]] = *(_OWORD *)&v1076[v1077[18]];
        *(_OWORD *)&v1075[v1077[19]] = *(_OWORD *)&v1076[v1077[19]];
        *(_OWORD *)&v1075[v1077[20]] = *(_OWORD *)&v1076[v1077[20]];
        *(_OWORD *)&v1075[v1077[21]] = *(_OWORD *)&v1076[v1077[21]];
        *(_OWORD *)&v1075[v1077[22]] = *(_OWORD *)&v1076[v1077[22]];
        *(_OWORD *)&v1075[v1077[23]] = *(_OWORD *)&v1076[v1077[23]];
        __swift_storeEnumTagSinglePayload((uint64_t)v1075, 0, 1, (uint64_t)v1077);
      }
      v1094 = v26[21];
      v1095 = &a1[v1094];
      v1096 = &a2[v1094];
      v1097 = (int *)type metadata accessor for PreExtractedContact(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v1096, 1, (uint64_t)v1097))
      {
        v1098 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
        memcpy(v1095, v1096, *(void *)(*(void *)(v1098 - 8) + 64));
      }
      else
      {
        v1099 = *((_OWORD *)v1096 + 1);
        *(_OWORD *)v1095 = *(_OWORD *)v1096;
        *((_OWORD *)v1095 + 1) = v1099;
        v1100 = *((_OWORD *)v1096 + 3);
        *((_OWORD *)v1095 + 2) = *((_OWORD *)v1096 + 2);
        *((_OWORD *)v1095 + 3) = v1100;
        v1101 = *((_OWORD *)v1096 + 5);
        *((_OWORD *)v1095 + 4) = *((_OWORD *)v1096 + 4);
        *((_OWORD *)v1095 + 5) = v1101;
        v1102 = v1097[11];
        v1103 = &v1095[v1102];
        v1104 = &v1096[v1102];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v1096[v1102], 1, v1183))
        {
          v1105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v1103, v1104, *(void *)(*(void *)(v1105 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v1183 - 8) + 32))(v1103, v1104, v1183);
          __swift_storeEnumTagSinglePayload((uint64_t)v1103, 0, 1, v1183);
        }
        *(_OWORD *)&v1095[v1097[12]] = *(_OWORD *)&v1096[v1097[12]];
        *(void *)&v1095[v1097[13]] = *(void *)&v1096[v1097[13]];
        v1106 = v1097[14];
        v1107 = &v1095[v1106];
        v1108 = &v1096[v1106];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v1096[v1106], 1, v1183))
        {
          v1109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v1107, v1108, *(void *)(*(void *)(v1109 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v1183 - 8) + 32))(v1107, v1108, v1183);
          __swift_storeEnumTagSinglePayload((uint64_t)v1107, 0, 1, v1183);
        }
        a3 = v1187;
        *(void *)&v1095[v1097[15]] = *(void *)&v1096[v1097[15]];
        *(void *)&v1095[v1097[16]] = *(void *)&v1096[v1097[16]];
        *(_OWORD *)&v1095[v1097[17]] = *(_OWORD *)&v1096[v1097[17]];
        *(void *)&v1095[v1097[18]] = *(void *)&v1096[v1097[18]];
        *(void *)&v1095[v1097[19]] = *(void *)&v1096[v1097[19]];
        __swift_storeEnumTagSinglePayload((uint64_t)v1095, 0, 1, (uint64_t)v1097);
      }
      v1110 = v26[22];
      v1111 = &a1[v1110];
      v1112 = &a2[v1110];
      v1113 = (int *)type metadata accessor for PreExtractedSharedLink(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v1112, 1, (uint64_t)v1113))
      {
        v1114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
        memcpy(v1111, v1112, *(void *)(*(void *)(v1114 - 8) + 64));
      }
      else
      {
        v1115 = *((_OWORD *)v1112 + 1);
        *(_OWORD *)v1111 = *(_OWORD *)v1112;
        *((_OWORD *)v1111 + 1) = v1115;
        v1116 = *((_OWORD *)v1112 + 3);
        *((_OWORD *)v1111 + 2) = *((_OWORD *)v1112 + 2);
        *((_OWORD *)v1111 + 3) = v1116;
        v1117 = v1113[8];
        v1118 = &v1111[v1117];
        v1119 = &v1112[v1117];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v1112[v1117], 1, v1180))
        {
          v1120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v1118, v1119, *(void *)(*(void *)(v1120 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v1180 - 8) + 32))(v1118, v1119, v1180);
          __swift_storeEnumTagSinglePayload((uint64_t)v1118, 0, 1, v1180);
        }
        *(_OWORD *)&v1111[v1113[9]] = *(_OWORD *)&v1112[v1113[9]];
        *(_OWORD *)&v1111[v1113[10]] = *(_OWORD *)&v1112[v1113[10]];
        *(_OWORD *)&v1111[v1113[11]] = *(_OWORD *)&v1112[v1113[11]];
        v1121 = v1113[12];
        v1122 = &v1111[v1121];
        v1123 = &v1112[v1121];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v1112[v1121], 1, v1183))
        {
          v1124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v1122, v1123, *(void *)(*(void *)(v1124 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v1183 - 8) + 32))(v1122, v1123, v1183);
          __swift_storeEnumTagSinglePayload((uint64_t)v1122, 0, 1, v1183);
        }
        v1125 = v1113[13];
        v1126 = &v1111[v1125];
        v1127 = &v1112[v1125];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v1112[v1125], 1, v1183))
        {
          v1128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v1126, v1127, *(void *)(*(void *)(v1128 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v1183 - 8) + 32))(v1126, v1127, v1183);
          __swift_storeEnumTagSinglePayload((uint64_t)v1126, 0, 1, v1183);
        }
        a3 = v1187;
        v1129 = v1113[14];
        v1130 = &v1111[v1129];
        v1131 = &v1112[v1129];
        *(void *)v1130 = *(void *)v1131;
        v1130[8] = v1131[8];
        *(_OWORD *)&v1111[v1113[15]] = *(_OWORD *)&v1112[v1113[15]];
        *(_OWORD *)&v1111[v1113[16]] = *(_OWORD *)&v1112[v1113[16]];
        *(_OWORD *)&v1111[v1113[17]] = *(_OWORD *)&v1112[v1113[17]];
        *(_OWORD *)&v1111[v1113[18]] = *(_OWORD *)&v1112[v1113[18]];
        *(_OWORD *)&v1111[v1113[19]] = *(_OWORD *)&v1112[v1113[19]];
        __swift_storeEnumTagSinglePayload((uint64_t)v1111, 0, 1, (uint64_t)v1113);
      }
      memcpy(&a1[v26[23]], &a2[v26[23]], 0x90uLL);
      goto LABEL_522;
    case 2u:
      v32 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v32;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      v33 = (int *)type metadata accessor for CalendarEvent(0);
      v34 = v33[7];
      v35 = &a1[v34];
      v36 = &a2[v34];
      v37 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v36, 1, v37))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v35, v36, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(v35, v36, v37);
        __swift_storeEnumTagSinglePayload((uint64_t)v35, 0, 1, v37);
      }
      v235 = v33[8];
      v236 = &a1[v235];
      v237 = &a2[v235];
      if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v235], 1, v37))
      {
        v238 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v236, v237, *(void *)(*(void *)(v238 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(v236, v237, v37);
        __swift_storeEnumTagSinglePayload((uint64_t)v236, 0, 1, v37);
      }
      *(_OWORD *)&a1[v33[9]] = *(_OWORD *)&a2[v33[9]];
      *(void *)&a1[v33[10]] = *(void *)&a2[v33[10]];
      *(void *)&a1[v33[11]] = *(void *)&a2[v33[11]];
      *(_OWORD *)&a1[v33[12]] = *(_OWORD *)&a2[v33[12]];
      v297 = v33[13];
      v298 = &a1[v297];
      v299 = &a2[v297];
      v300 = *((_OWORD *)v299 + 1);
      *(_OWORD *)v298 = *(_OWORD *)v299;
      *((_OWORD *)v298 + 1) = v300;
      *((void *)v298 + 4) = *((void *)v299 + 4);
      goto LABEL_522;
    case 3u:
      v39 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v39;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((void *)a1 + 6) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      v40 = (int *)type metadata accessor for Photo(0);
      v41 = v40[11];
      v42 = &a1[v41];
      v43 = &a2[v41];
      v44 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v43, 1, v44))
      {
        v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v42, v43, *(void *)(*(void *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v42, v43, v44);
        __swift_storeEnumTagSinglePayload((uint64_t)v42, 0, 1, v44);
      }
      *(void *)&a1[v40[12]] = *(void *)&a2[v40[12]];
      *(void *)&a1[v40[13]] = *(void *)&a2[v40[13]];
      *(void *)&a1[v40[14]] = *(void *)&a2[v40[14]];
      *(void *)&a1[v40[15]] = *(void *)&a2[v40[15]];
      *(_OWORD *)&a1[v40[16]] = *(_OWORD *)&a2[v40[16]];
      v239 = v40[17];
      v240 = &a1[v239];
      v241 = &a2[v239];
      v242 = (int *)type metadata accessor for PartialExtractedAttributes(0);
      v1182 = v44;
      if (__swift_getEnumTagSinglePayload((uint64_t)v241, 1, (uint64_t)v242))
      {
        v243 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
        memcpy(v240, v241, *(void *)(*(void *)(v243 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v240 = *(_OWORD *)v241;
        v301 = v242[5];
        v302 = &v240[v301];
        v1185 = v241;
        v303 = &v241[v301];
        v304 = type metadata accessor for RentalCarReservation(0);
        v1178 = v240;
        v1175 = v242;
        if (__swift_getEnumTagSinglePayload((uint64_t)v303, 1, v304))
        {
          v305 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
          memcpy(v302, v303, *(void *)(*(void *)(v305 - 8) + 64));
        }
        else
        {
          v358 = *((_OWORD *)v303 + 1);
          *(_OWORD *)v302 = *(_OWORD *)v303;
          *((_OWORD *)v302 + 1) = v358;
          v359 = *((_OWORD *)v303 + 3);
          *((_OWORD *)v302 + 2) = *((_OWORD *)v303 + 2);
          *((_OWORD *)v302 + 3) = v359;
          v360 = *((_OWORD *)v303 + 5);
          *((_OWORD *)v302 + 4) = *((_OWORD *)v303 + 4);
          *((_OWORD *)v302 + 5) = v360;
          v361 = *((_OWORD *)v303 + 7);
          *((_OWORD *)v302 + 6) = *((_OWORD *)v303 + 6);
          *((_OWORD *)v302 + 7) = v361;
          v302[128] = v303[128];
          *(_WORD *)(v302 + 129) = *(_WORD *)(v303 + 129);
          *((void *)v302 + 17) = *((void *)v303 + 17);
          v362 = *((_OWORD *)v303 + 10);
          *((_OWORD *)v302 + 9) = *((_OWORD *)v303 + 9);
          *((_OWORD *)v302 + 10) = v362;
          v363 = *((_OWORD *)v303 + 12);
          *((_OWORD *)v302 + 11) = *((_OWORD *)v303 + 11);
          *((_OWORD *)v302 + 12) = v363;
          v364 = *((_OWORD *)v303 + 14);
          *((_OWORD *)v302 + 13) = *((_OWORD *)v303 + 13);
          *((_OWORD *)v302 + 14) = v364;
          *((_OWORD *)v302 + 15) = *((_OWORD *)v303 + 15);
          *((void *)v302 + 32) = *((void *)v303 + 32);
          *(_OWORD *)(v302 + 264) = *(_OWORD *)(v303 + 264);
          *(_OWORD *)(v302 + 280) = *(_OWORD *)(v303 + 280);
          *(_OWORD *)(v302 + 296) = *(_OWORD *)(v303 + 296);
          *(_OWORD *)(v302 + 312) = *(_OWORD *)(v303 + 312);
          *(_OWORD *)(v302 + 328) = *(_OWORD *)(v303 + 328);
          *(_OWORD *)(v302 + 344) = *(_OWORD *)(v303 + 344);
          *(_OWORD *)(v302 + 360) = *(_OWORD *)(v303 + 360);
          v302[384] = v303[384];
          *((void *)v302 + 47) = *((void *)v303 + 47);
          *(_OWORD *)(v302 + 392) = *(_OWORD *)(v303 + 392);
          *(_OWORD *)(v302 + 408) = *(_OWORD *)(v303 + 408);
          v365 = *(int *)(v304 + 140);
          v366 = &v302[v365];
          v367 = &v303[v365];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v303[v365], 1, v44))
          {
            v368 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v366, v367, *(void *)(*(void *)(v368 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v366, v367, v44);
            __swift_storeEnumTagSinglePayload((uint64_t)v366, 0, 1, v44);
          }
          v384 = *(int *)(v304 + 144);
          v385 = &v302[v384];
          v386 = &v303[v384];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v303[v384], 1, v44))
          {
            v387 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v385, v386, *(void *)(*(void *)(v387 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v385, v386, v44);
            __swift_storeEnumTagSinglePayload((uint64_t)v385, 0, 1, v44);
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v302, 0, 1, v304);
          v240 = v1178;
          v242 = v1175;
        }
        v408 = v242[6];
        v409 = &v240[v408];
        v410 = (_OWORD *)((char *)v1185 + v408);
        v411 = type metadata accessor for TicketedTransportation(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v410, 1, v411))
        {
          v412 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
          memcpy(v409, v410, *(void *)(*(void *)(v412 - 8) + 64));
        }
        else
        {
          v413 = v410[1];
          *(_OWORD *)v409 = *v410;
          *((_OWORD *)v409 + 1) = v413;
          v414 = v410[3];
          *((_OWORD *)v409 + 2) = v410[2];
          *((_OWORD *)v409 + 3) = v414;
          v415 = v410[5];
          *((_OWORD *)v409 + 4) = v410[4];
          *((_OWORD *)v409 + 5) = v415;
          v416 = v410[7];
          *((_OWORD *)v409 + 6) = v410[6];
          *((_OWORD *)v409 + 7) = v416;
          v409[128] = *((unsigned char *)v410 + 128);
          *(_WORD *)(v409 + 129) = *(_WORD *)((char *)v410 + 129);
          *((void *)v409 + 17) = *((void *)v410 + 17);
          v417 = v410[10];
          *((_OWORD *)v409 + 9) = v410[9];
          *((_OWORD *)v409 + 10) = v417;
          v418 = v410[12];
          *((_OWORD *)v409 + 11) = v410[11];
          *((_OWORD *)v409 + 12) = v418;
          *((void *)v409 + 26) = *((void *)v410 + 26);
          *(_OWORD *)(v409 + 216) = *(_OWORD *)((char *)v410 + 216);
          *(_OWORD *)(v409 + 232) = *(_OWORD *)((char *)v410 + 232);
          *(_OWORD *)(v409 + 248) = *(_OWORD *)((char *)v410 + 248);
          *(_OWORD *)(v409 + 264) = *(_OWORD *)((char *)v410 + 264);
          v409[296] = *((unsigned char *)v410 + 296);
          v419 = *((void *)v410 + 36);
          *((void *)v409 + 35) = *((void *)v410 + 35);
          *((void *)v409 + 36) = v419;
          v420 = *(int *)(v411 + 112);
          v421 = &v409[v420];
          v422 = (char *)v410 + v420;
          if (__swift_getEnumTagSinglePayload((uint64_t)v410 + v420, 1, v44))
          {
            v423 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v421, v422, *(void *)(*(void *)(v423 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v421, v422, v44);
            __swift_storeEnumTagSinglePayload((uint64_t)v421, 0, 1, v44);
          }
          v444 = *(int *)(v411 + 116);
          v445 = &v409[v444];
          v446 = (char *)v410 + v444;
          if (__swift_getEnumTagSinglePayload((uint64_t)v410 + v444, 1, v44))
          {
            v447 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v445, v446, *(void *)(*(void *)(v447 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v445, v446, v44);
            __swift_storeEnumTagSinglePayload((uint64_t)v445, 0, 1, v44);
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v409, 0, 1, v411);
          v240 = v1178;
          v242 = v1175;
        }
        v470 = v242[7];
        v471 = &v240[v470];
        v472 = (_OWORD *)((char *)v1185 + v470);
        v473 = (int *)type metadata accessor for TicketedShow(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v472, 1, (uint64_t)v473))
        {
          v474 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
          memcpy(v471, v472, *(void *)(*(void *)(v474 - 8) + 64));
        }
        else
        {
          v475 = v472[1];
          *(_OWORD *)v471 = *v472;
          *((_OWORD *)v471 + 1) = v475;
          v476 = v472[3];
          *((_OWORD *)v471 + 2) = v472[2];
          *((_OWORD *)v471 + 3) = v476;
          v477 = v472[5];
          *((_OWORD *)v471 + 4) = v472[4];
          *((_OWORD *)v471 + 5) = v477;
          v478 = v472[7];
          *((_OWORD *)v471 + 6) = v472[6];
          *((_OWORD *)v471 + 7) = v478;
          v471[128] = *((unsigned char *)v472 + 128);
          *(_WORD *)(v471 + 129) = *(_WORD *)((char *)v472 + 129);
          *((void *)v471 + 17) = *((void *)v472 + 17);
          v479 = v472[10];
          *((_OWORD *)v471 + 9) = v472[9];
          *((_OWORD *)v471 + 10) = v479;
          v480 = v472[12];
          *((_OWORD *)v471 + 11) = v472[11];
          *((_OWORD *)v471 + 12) = v480;
          v481 = v472[14];
          *((_OWORD *)v471 + 13) = v472[13];
          *((_OWORD *)v471 + 14) = v481;
          *((void *)v471 + 30) = *((void *)v472 + 30);
          *(_OWORD *)(v471 + 248) = *(_OWORD *)((char *)v472 + 248);
          *(_OWORD *)(v471 + 264) = *(_OWORD *)((char *)v472 + 264);
          v471[296] = *((unsigned char *)v472 + 296);
          v482 = *((void *)v472 + 36);
          *((void *)v471 + 35) = *((void *)v472 + 35);
          *((void *)v471 + 36) = v482;
          *((_OWORD *)v471 + 19) = v472[19];
          v483 = v473[29];
          v484 = &v471[v483];
          v485 = (char *)v472 + v483;
          v486 = type metadata accessor for URL();
          if (__swift_getEnumTagSinglePayload((uint64_t)v485, 1, v486))
          {
            v487 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v484, v485, *(void *)(*(void *)(v487 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v486 - 8) + 32))(v484, v485, v486);
            __swift_storeEnumTagSinglePayload((uint64_t)v484, 0, 1, v486);
          }
          *(_OWORD *)&v471[v473[30]] = *(_OWORD *)((char *)v472 + v473[30]);
          v509 = v473[31];
          v510 = &v471[v509];
          v511 = (char *)v472 + v509;
          v44 = v1182;
          if (__swift_getEnumTagSinglePayload((uint64_t)v472 + v509, 1, v1182))
          {
            v512 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v510, v511, *(void *)(*(void *)(v512 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1182 - 8) + 32))(v510, v511, v1182);
            __swift_storeEnumTagSinglePayload((uint64_t)v510, 0, 1, v1182);
          }
          v521 = v473[32];
          v522 = &v471[v521];
          v523 = (char *)v472 + v521;
          if (__swift_getEnumTagSinglePayload((uint64_t)v472 + v521, 1, v1182))
          {
            v524 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v522, v523, *(void *)(*(void *)(v524 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1182 - 8) + 32))(v522, v523, v1182);
            __swift_storeEnumTagSinglePayload((uint64_t)v522, 0, 1, v1182);
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v471, 0, 1, (uint64_t)v473);
          v240 = v1178;
          v242 = v1175;
        }
        v546 = v242[8];
        v547 = &v240[v546];
        v548 = (_OWORD *)((char *)v1185 + v546);
        v549 = type metadata accessor for Appointment(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v548, 1, v549))
        {
          v550 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
          memcpy(v547, v548, *(void *)(*(void *)(v550 - 8) + 64));
        }
        else
        {
          v551 = v548[1];
          *(_OWORD *)v547 = *v548;
          *((_OWORD *)v547 + 1) = v551;
          v552 = v548[3];
          *((_OWORD *)v547 + 2) = v548[2];
          *((_OWORD *)v547 + 3) = v552;
          v553 = v548[5];
          *((_OWORD *)v547 + 4) = v548[4];
          *((_OWORD *)v547 + 5) = v553;
          v554 = v548[7];
          *((_OWORD *)v547 + 6) = v548[6];
          *((_OWORD *)v547 + 7) = v554;
          v547[128] = *((unsigned char *)v548 + 128);
          *(_WORD *)(v547 + 129) = *(_WORD *)((char *)v548 + 129);
          *((void *)v547 + 17) = *((void *)v548 + 17);
          v555 = v548[10];
          *((_OWORD *)v547 + 9) = v548[9];
          *((_OWORD *)v547 + 10) = v555;
          v556 = v548[12];
          *((_OWORD *)v547 + 11) = v548[11];
          *((_OWORD *)v547 + 12) = v556;
          v557 = v548[14];
          *((_OWORD *)v547 + 13) = v548[13];
          *((_OWORD *)v547 + 14) = v557;
          v558 = v548[16];
          *((_OWORD *)v547 + 15) = v548[15];
          *((_OWORD *)v547 + 16) = v558;
          v547[280] = *((unsigned char *)v548 + 280);
          *((void *)v547 + 34) = *((void *)v548 + 34);
          *((_OWORD *)v547 + 18) = v548[18];
          v559 = *(int *)(v549 + 108);
          v560 = &v547[v559];
          v561 = (char *)v548 + v559;
          if (__swift_getEnumTagSinglePayload((uint64_t)v548 + v559, 1, v44))
          {
            v562 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v560, v561, *(void *)(*(void *)(v562 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v560, v561, v44);
            __swift_storeEnumTagSinglePayload((uint64_t)v560, 0, 1, v44);
          }
          v584 = *(int *)(v549 + 112);
          v585 = &v547[v584];
          v586 = (char *)v548 + v584;
          if (__swift_getEnumTagSinglePayload((uint64_t)v548 + v584, 1, v44))
          {
            v587 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v585, v586, *(void *)(*(void *)(v587 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v585, v586, v44);
            __swift_storeEnumTagSinglePayload((uint64_t)v585, 0, 1, v44);
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v547, 0, 1, v549);
          v240 = v1178;
          v242 = v1175;
        }
        v608 = v242[9];
        v609 = &v240[v608];
        v610 = (_OWORD *)((char *)v1185 + v608);
        v611 = (int *)type metadata accessor for Party(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v610, 1, (uint64_t)v611))
        {
          v612 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
          memcpy(v609, v610, *(void *)(*(void *)(v612 - 8) + 64));
        }
        else
        {
          v613 = v610[1];
          *(_OWORD *)v609 = *v610;
          *((_OWORD *)v609 + 1) = v613;
          v614 = v610[3];
          *((_OWORD *)v609 + 2) = v610[2];
          *((_OWORD *)v609 + 3) = v614;
          v615 = v610[5];
          *((_OWORD *)v609 + 4) = v610[4];
          *((_OWORD *)v609 + 5) = v615;
          v616 = v610[7];
          *((_OWORD *)v609 + 6) = v610[6];
          *((_OWORD *)v609 + 7) = v616;
          v609[128] = *((unsigned char *)v610 + 128);
          *(_WORD *)(v609 + 129) = *(_WORD *)((char *)v610 + 129);
          *((void *)v609 + 17) = *((void *)v610 + 17);
          v617 = v610[10];
          *((_OWORD *)v609 + 9) = v610[9];
          *((_OWORD *)v609 + 10) = v617;
          v618 = v610[12];
          *((_OWORD *)v609 + 11) = v610[11];
          *((_OWORD *)v609 + 12) = v618;
          v619 = v610[14];
          *((_OWORD *)v609 + 13) = v610[13];
          *((_OWORD *)v609 + 14) = v619;
          *((_OWORD *)v609 + 15) = v610[15];
          v620 = v611[24];
          v621 = &v609[v620];
          v622 = (char *)v610 + v620;
          if (__swift_getEnumTagSinglePayload((uint64_t)v610 + v620, 1, v44))
          {
            v623 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v621, v622, *(void *)(*(void *)(v623 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v621, v622, v44);
            __swift_storeEnumTagSinglePayload((uint64_t)v621, 0, 1, v44);
          }
          v644 = v611[25];
          v645 = &v609[v644];
          v646 = (char *)v610 + v644;
          if (__swift_getEnumTagSinglePayload((uint64_t)v610 + v644, 1, v44))
          {
            v647 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v645, v646, *(void *)(*(void *)(v647 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v645, v646, v44);
            __swift_storeEnumTagSinglePayload((uint64_t)v645, 0, 1, v44);
          }
          v657 = v611[26];
          v658 = &v609[v657];
          v659 = (char *)v610 + v657;
          v660 = type metadata accessor for URL();
          if (__swift_getEnumTagSinglePayload((uint64_t)v659, 1, v660))
          {
            v661 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v658, v659, *(void *)(*(void *)(v661 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v660 - 8) + 32))(v658, v659, v660);
            __swift_storeEnumTagSinglePayload((uint64_t)v658, 0, 1, v660);
          }
          v242 = v1175;
          __swift_storeEnumTagSinglePayload((uint64_t)v609, 0, 1, (uint64_t)v611);
          v44 = v1182;
          v240 = v1178;
        }
        v681 = v242[10];
        v682 = &v240[v681];
        v683 = (_OWORD *)((char *)v1185 + v681);
        v684 = (int *)type metadata accessor for Trip(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v683, 1, (uint64_t)v684))
        {
          v685 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
          memcpy(v682, v683, *(void *)(*(void *)(v685 - 8) + 64));
        }
        else
        {
          v686 = v683[1];
          *(_OWORD *)v682 = *v683;
          *((_OWORD *)v682 + 1) = v686;
          v687 = v683[3];
          *((_OWORD *)v682 + 2) = v683[2];
          *((_OWORD *)v682 + 3) = v687;
          v688 = v683[5];
          *((_OWORD *)v682 + 4) = v683[4];
          *((_OWORD *)v682 + 5) = v688;
          v689 = v683[7];
          *((_OWORD *)v682 + 6) = v683[6];
          *((_OWORD *)v682 + 7) = v689;
          v682[128] = *((unsigned char *)v683 + 128);
          *(_WORD *)(v682 + 129) = *(_WORD *)((char *)v683 + 129);
          *((void *)v682 + 17) = *((void *)v683 + 17);
          v690 = v683[10];
          *((_OWORD *)v682 + 9) = v683[9];
          *((_OWORD *)v682 + 10) = v690;
          v691 = v683[12];
          *((_OWORD *)v682 + 11) = v683[11];
          *((_OWORD *)v682 + 12) = v691;
          *((_OWORD *)v682 + 13) = v683[13];
          v692 = v684[22];
          v693 = &v682[v692];
          v694 = (char *)v683 + v692;
          if (__swift_getEnumTagSinglePayload((uint64_t)v683 + v692, 1, v44))
          {
            v695 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v693, v694, *(void *)(*(void *)(v695 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v693, v694, v44);
            __swift_storeEnumTagSinglePayload((uint64_t)v693, 0, 1, v44);
          }
          v715 = v684[23];
          v716 = &v682[v715];
          v717 = (char *)v683 + v715;
          if (__swift_getEnumTagSinglePayload((uint64_t)v683 + v715, 1, v44))
          {
            v718 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v716, v717, *(void *)(*(void *)(v718 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v716, v717, v44);
            __swift_storeEnumTagSinglePayload((uint64_t)v716, 0, 1, v44);
          }
          v731 = v684[24];
          v732 = &v682[v731];
          v733 = (char *)v683 + v731;
          *(void *)v732 = *(void *)v733;
          v732[8] = v733[8];
          v734 = v684[25];
          v735 = &v682[v734];
          v736 = (char *)v683 + v734;
          v737 = type metadata accessor for URL();
          if (__swift_getEnumTagSinglePayload((uint64_t)v736, 1, v737))
          {
            v738 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v735, v736, *(void *)(*(void *)(v738 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v737 - 8) + 32))(v735, v736, v737);
            __swift_storeEnumTagSinglePayload((uint64_t)v735, 0, 1, v737);
          }
          v242 = v1175;
          __swift_storeEnumTagSinglePayload((uint64_t)v682, 0, 1, (uint64_t)v684);
          v240 = v1178;
        }
        v759 = v242[11];
        v760 = &v240[v759];
        v761 = (_OWORD *)((char *)v1185 + v759);
        v762 = (int *)type metadata accessor for FlightReservation(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v761, 1, (uint64_t)v762))
        {
          v763 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
          memcpy(v760, v761, *(void *)(*(void *)(v763 - 8) + 64));
        }
        else
        {
          v764 = v761[1];
          *(_OWORD *)v760 = *v761;
          *((_OWORD *)v760 + 1) = v764;
          v765 = v761[3];
          *((_OWORD *)v760 + 2) = v761[2];
          *((_OWORD *)v760 + 3) = v765;
          v766 = v761[5];
          *((_OWORD *)v760 + 4) = v761[4];
          *((_OWORD *)v760 + 5) = v766;
          v760[96] = *((unsigned char *)v761 + 96);
          *(_OWORD *)(v760 + 104) = *(_OWORD *)((char *)v761 + 104);
          v767 = v762[13];
          v768 = &v760[v767];
          v769 = (char *)v761 + v767;
          v770 = type metadata accessor for URL();
          if (__swift_getEnumTagSinglePayload((uint64_t)v769, 1, v770))
          {
            v771 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v768, v769, *(void *)(*(void *)(v771 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v770 - 8) + 32))(v768, v769, v770);
            __swift_storeEnumTagSinglePayload((uint64_t)v768, 0, 1, v770);
          }
          v787 = v762[14];
          v788 = &v760[v787];
          v789 = (char *)v761 + v787;
          v1188 = a3;
          if (__swift_getEnumTagSinglePayload((uint64_t)v761 + v787, 1, v770))
          {
            v790 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v788, v789, *(void *)(*(void *)(v790 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v770 - 8) + 32))(v788, v789, v770);
            __swift_storeEnumTagSinglePayload((uint64_t)v788, 0, 1, v770);
          }
          *(_OWORD *)&v760[v762[15]] = *(_OWORD *)((char *)v761 + v762[15]);
          *(_OWORD *)&v760[v762[16]] = *(_OWORD *)((char *)v761 + v762[16]);
          *(_OWORD *)&v760[v762[17]] = *(_OWORD *)((char *)v761 + v762[17]);
          v803 = v762[18];
          v804 = &v760[v803];
          v805 = (char *)v761 + v803;
          v806 = type metadata accessor for DateComponents();
          v807 = *(void (**)(char *, char *, uint64_t))(*(void *)(v806 - 8) + 32);
          v807(v804, v805, v806);
          v807(&v760[v762[19]], (char *)v761 + v762[19], v806);
          *(_OWORD *)&v760[v762[20]] = *(_OWORD *)((char *)v761 + v762[20]);
          *(_OWORD *)&v760[v762[21]] = *(_OWORD *)((char *)v761 + v762[21]);
          *(_OWORD *)&v760[v762[22]] = *(_OWORD *)((char *)v761 + v762[22]);
          *(_OWORD *)&v760[v762[23]] = *(_OWORD *)((char *)v761 + v762[23]);
          *(_OWORD *)&v760[v762[24]] = *(_OWORD *)((char *)v761 + v762[24]);
          *(_OWORD *)&v760[v762[25]] = *(_OWORD *)((char *)v761 + v762[25]);
          *(_OWORD *)&v760[v762[26]] = *(_OWORD *)((char *)v761 + v762[26]);
          *(_OWORD *)&v760[v762[27]] = *(_OWORD *)((char *)v761 + v762[27]);
          *(_OWORD *)&v760[v762[28]] = *(_OWORD *)((char *)v761 + v762[28]);
          *(_OWORD *)&v760[v762[29]] = *(_OWORD *)((char *)v761 + v762[29]);
          *(_OWORD *)&v760[v762[30]] = *(_OWORD *)((char *)v761 + v762[30]);
          *(_OWORD *)&v760[v762[31]] = *(_OWORD *)((char *)v761 + v762[31]);
          *(_OWORD *)&v760[v762[32]] = *(_OWORD *)((char *)v761 + v762[32]);
          *(void *)&v760[v762[33]] = *(void *)((char *)v761 + v762[33]);
          *(void *)&v760[v762[34]] = *(void *)((char *)v761 + v762[34]);
          *(_OWORD *)&v760[v762[35]] = *(_OWORD *)((char *)v761 + v762[35]);
          *(_OWORD *)&v760[v762[36]] = *(_OWORD *)((char *)v761 + v762[36]);
          *(_OWORD *)&v760[v762[37]] = *(_OWORD *)((char *)v761 + v762[37]);
          v808 = v762[38];
          v809 = &v760[v808];
          v810 = (char *)v761 + v808;
          if (__swift_getEnumTagSinglePayload((uint64_t)v761 + v808, 1, v1182))
          {
            v811 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v809, v810, *(void *)(*(void *)(v811 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1182 - 8) + 32))(v809, v810, v1182);
            __swift_storeEnumTagSinglePayload((uint64_t)v809, 0, 1, v1182);
          }
          a3 = v1188;
          *(_OWORD *)&v760[v762[39]] = *(_OWORD *)((char *)v761 + v762[39]);
          *(_OWORD *)&v760[v762[40]] = *(_OWORD *)((char *)v761 + v762[40]);
          v840 = v762[41];
          v841 = &v760[v840];
          v842 = (char *)v761 + v840;
          *(void *)v841 = *(void *)v842;
          v841[8] = v842[8];
          *(_OWORD *)&v760[v762[42]] = *(_OWORD *)((char *)v761 + v762[42]);
          v843 = v762[43];
          v844 = &v760[v843];
          v845 = (char *)v761 + v843;
          *(_OWORD *)v844 = *(_OWORD *)v845;
          *(void *)(v844 + 13) = *(void *)(v845 + 13);
          *(_OWORD *)&v760[v762[44]] = *(_OWORD *)((char *)v761 + v762[44]);
          *(_OWORD *)&v760[v762[45]] = *(_OWORD *)((char *)v761 + v762[45]);
          *(_OWORD *)&v760[v762[46]] = *(_OWORD *)((char *)v761 + v762[46]);
          *(_OWORD *)&v760[v762[47]] = *(_OWORD *)((char *)v761 + v762[47]);
          __swift_storeEnumTagSinglePayload((uint64_t)v760, 0, 1, (uint64_t)v762);
          v240 = v1178;
          v242 = v1175;
        }
        v846 = v242[12];
        v847 = &v240[v846];
        v848 = (_OWORD *)((char *)v1185 + v846);
        v849 = (int *)type metadata accessor for HotelReservation(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v848, 1, (uint64_t)v849))
        {
          v850 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
          memcpy(v847, v848, *(void *)(*(void *)(v850 - 8) + 64));
        }
        else
        {
          v851 = v848[1];
          *(_OWORD *)v847 = *v848;
          *((_OWORD *)v847 + 1) = v851;
          v852 = v848[3];
          *((_OWORD *)v847 + 2) = v848[2];
          *((_OWORD *)v847 + 3) = v852;
          v853 = v848[5];
          *((_OWORD *)v847 + 4) = v848[4];
          *((_OWORD *)v847 + 5) = v853;
          v847[96] = *((unsigned char *)v848 + 96);
          *(_OWORD *)(v847 + 104) = *(_OWORD *)((char *)v848 + 104);
          *(_OWORD *)(v847 + 120) = *(_OWORD *)((char *)v848 + 120);
          v854 = v849[14];
          v855 = &v847[v854];
          v856 = (char *)v848 + v854;
          v857 = type metadata accessor for DateComponents();
          if (__swift_getEnumTagSinglePayload((uint64_t)v856, 1, v857))
          {
            v858 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
            memcpy(v855, v856, *(void *)(*(void *)(v858 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v857 - 8) + 32))(v855, v856, v857);
            __swift_storeEnumTagSinglePayload((uint64_t)v855, 0, 1, v857);
          }
          v882 = v849[15];
          v883 = &v847[v882];
          v884 = (char *)v848 + v882;
          if (__swift_getEnumTagSinglePayload((uint64_t)v848 + v882, 1, v857))
          {
            v885 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
            memcpy(v883, v884, *(void *)(*(void *)(v885 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v857 - 8) + 32))(v883, v884, v857);
            __swift_storeEnumTagSinglePayload((uint64_t)v883, 0, 1, v857);
          }
          *(_OWORD *)&v847[v849[16]] = *(_OWORD *)((char *)v848 + v849[16]);
          *(_OWORD *)&v847[v849[17]] = *(_OWORD *)((char *)v848 + v849[17]);
          *(_OWORD *)&v847[v849[18]] = *(_OWORD *)((char *)v848 + v849[18]);
          *(_OWORD *)&v847[v849[19]] = *(_OWORD *)((char *)v848 + v849[19]);
          *(_OWORD *)&v847[v849[20]] = *(_OWORD *)((char *)v848 + v849[20]);
          *(void *)&v847[v849[21]] = *(void *)((char *)v848 + v849[21]);
          *(void *)&v847[v849[22]] = *(void *)((char *)v848 + v849[22]);
          v912 = v849[23];
          v913 = &v847[v912];
          v914 = (char *)v848 + v912;
          v913[8] = v914[8];
          *(void *)v913 = *(void *)v914;
          v915 = v849[24];
          v916 = &v847[v915];
          v917 = (char *)v848 + v915;
          v916[8] = v917[8];
          *(void *)v916 = *(void *)v917;
          *(_OWORD *)&v847[v849[25]] = *(_OWORD *)((char *)v848 + v849[25]);
          *(_OWORD *)&v847[v849[26]] = *(_OWORD *)((char *)v848 + v849[26]);
          *(_OWORD *)&v847[v849[27]] = *(_OWORD *)((char *)v848 + v849[27]);
          *(_OWORD *)&v847[v849[28]] = *(_OWORD *)((char *)v848 + v849[28]);
          v918 = v849[29];
          v919 = &v847[v918];
          v920 = (char *)v848 + v918;
          *(void *)v919 = *(void *)v920;
          v919[8] = v920[8];
          __swift_storeEnumTagSinglePayload((uint64_t)v847, 0, 1, (uint64_t)v849);
          v240 = v1178;
          v242 = v1175;
        }
        v921 = v242[13];
        v922 = &v240[v921];
        v923 = (_OWORD *)((char *)v1185 + v921);
        v924 = (int *)type metadata accessor for RestaurantReservation(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v923, 1, (uint64_t)v924))
        {
          v925 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
          memcpy(v922, v923, *(void *)(*(void *)(v925 - 8) + 64));
        }
        else
        {
          v926 = v923[1];
          *(_OWORD *)v922 = *v923;
          *((_OWORD *)v922 + 1) = v926;
          v927 = v923[3];
          *((_OWORD *)v922 + 2) = v923[2];
          *((_OWORD *)v922 + 3) = v927;
          v928 = v923[5];
          *((_OWORD *)v922 + 4) = v923[4];
          *((_OWORD *)v922 + 5) = v928;
          v922[96] = *((unsigned char *)v923 + 96);
          *(_OWORD *)(v922 + 104) = *(_OWORD *)((char *)v923 + 104);
          *(_OWORD *)(v922 + 120) = *(_OWORD *)((char *)v923 + 120);
          v929 = v924[14];
          v930 = &v922[v929];
          v931 = (char *)v923 + v929;
          v932 = type metadata accessor for DateComponents();
          if (__swift_getEnumTagSinglePayload((uint64_t)v931, 1, v932))
          {
            v933 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
            memcpy(v930, v931, *(void *)(*(void *)(v933 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v932 - 8) + 32))(v930, v931, v932);
            __swift_storeEnumTagSinglePayload((uint64_t)v930, 0, 1, v932);
          }
          *(_OWORD *)&v922[v924[15]] = *(_OWORD *)((char *)v923 + v924[15]);
          *(_OWORD *)&v922[v924[16]] = *(_OWORD *)((char *)v923 + v924[16]);
          *(_OWORD *)&v922[v924[17]] = *(_OWORD *)((char *)v923 + v924[17]);
          *(_OWORD *)&v922[v924[18]] = *(_OWORD *)((char *)v923 + v924[18]);
          *(_OWORD *)&v922[v924[19]] = *(_OWORD *)((char *)v923 + v924[19]);
          *(void *)&v922[v924[20]] = *(void *)((char *)v923 + v924[20]);
          *(_OWORD *)&v922[v924[21]] = *(_OWORD *)((char *)v923 + v924[21]);
          *(_OWORD *)&v922[v924[22]] = *(_OWORD *)((char *)v923 + v924[22]);
          *(_OWORD *)&v922[v924[23]] = *(_OWORD *)((char *)v923 + v924[23]);
          __swift_storeEnumTagSinglePayload((uint64_t)v922, 0, 1, (uint64_t)v924);
          v240 = v1178;
          v242 = v1175;
        }
        __swift_storeEnumTagSinglePayload((uint64_t)v240, 0, 1, (uint64_t)v242);
      }
      v1015 = v40[18];
      v1016 = &a1[v1015];
      v1017 = &a2[v1015];
      v1018 = (int *)type metadata accessor for PreExtractedCard(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v1017, 1, (uint64_t)v1018))
      {
        v1019 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
        memcpy(v1016, v1017, *(void *)(*(void *)(v1019 - 8) + 64));
      }
      else
      {
        v1020 = *((_OWORD *)v1017 + 1);
        *(_OWORD *)v1016 = *(_OWORD *)v1017;
        *((_OWORD *)v1016 + 1) = v1020;
        v1021 = *((_OWORD *)v1017 + 3);
        *((_OWORD *)v1016 + 2) = *((_OWORD *)v1017 + 2);
        *((_OWORD *)v1016 + 3) = v1021;
        v1022 = *((_OWORD *)v1017 + 5);
        *((_OWORD *)v1016 + 4) = *((_OWORD *)v1017 + 4);
        *((_OWORD *)v1016 + 5) = v1022;
        v1023 = v1018[10];
        v1024 = &v1016[v1023];
        v1025 = &v1017[v1023];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v1017[v1023], 1, v1182))
        {
          v1026 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v1024, v1025, *(void *)(*(void *)(v1026 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v1182 - 8) + 32))(v1024, v1025, v1182);
          __swift_storeEnumTagSinglePayload((uint64_t)v1024, 0, 1, v1182);
        }
        v1027 = v1018[11];
        v1028 = &v1016[v1027];
        v1029 = &v1017[v1027];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v1017[v1027], 1, v1182))
        {
          v1030 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v1028, v1029, *(void *)(*(void *)(v1030 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v1182 - 8) + 32))(v1028, v1029, v1182);
          __swift_storeEnumTagSinglePayload((uint64_t)v1028, 0, 1, v1182);
        }
        *(_OWORD *)&v1016[v1018[12]] = *(_OWORD *)&v1017[v1018[12]];
        *(_OWORD *)&v1016[v1018[13]] = *(_OWORD *)&v1017[v1018[13]];
        *(_OWORD *)&v1016[v1018[14]] = *(_OWORD *)&v1017[v1018[14]];
        v1031 = v1018[15];
        v1032 = &v1016[v1031];
        v1033 = &v1017[v1031];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v1017[v1031], 1, v1182))
        {
          v1034 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v1032, v1033, *(void *)(*(void *)(v1034 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v1182 - 8) + 32))(v1032, v1033, v1182);
          __swift_storeEnumTagSinglePayload((uint64_t)v1032, 0, 1, v1182);
        }
        *(_OWORD *)&v1016[v1018[16]] = *(_OWORD *)&v1017[v1018[16]];
        *(_OWORD *)&v1016[v1018[17]] = *(_OWORD *)&v1017[v1018[17]];
        *(_OWORD *)&v1016[v1018[18]] = *(_OWORD *)&v1017[v1018[18]];
        *(_OWORD *)&v1016[v1018[19]] = *(_OWORD *)&v1017[v1018[19]];
        *(_OWORD *)&v1016[v1018[20]] = *(_OWORD *)&v1017[v1018[20]];
        *(_OWORD *)&v1016[v1018[21]] = *(_OWORD *)&v1017[v1018[21]];
        *(_OWORD *)&v1016[v1018[22]] = *(_OWORD *)&v1017[v1018[22]];
        *(_OWORD *)&v1016[v1018[23]] = *(_OWORD *)&v1017[v1018[23]];
        __swift_storeEnumTagSinglePayload((uint64_t)v1016, 0, 1, (uint64_t)v1018);
      }
      v1035 = v40[19];
      v1036 = &a1[v1035];
      v1037 = &a2[v1035];
      v1038 = (int *)type metadata accessor for PreExtractedContact(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v1037, 1, (uint64_t)v1038))
      {
        v1039 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
        memcpy(v1036, v1037, *(void *)(*(void *)(v1039 - 8) + 64));
      }
      else
      {
        v1040 = *((_OWORD *)v1037 + 1);
        *(_OWORD *)v1036 = *(_OWORD *)v1037;
        *((_OWORD *)v1036 + 1) = v1040;
        v1041 = *((_OWORD *)v1037 + 3);
        *((_OWORD *)v1036 + 2) = *((_OWORD *)v1037 + 2);
        *((_OWORD *)v1036 + 3) = v1041;
        v1042 = *((_OWORD *)v1037 + 5);
        *((_OWORD *)v1036 + 4) = *((_OWORD *)v1037 + 4);
        *((_OWORD *)v1036 + 5) = v1042;
        v1043 = v1038[11];
        v1044 = &v1036[v1043];
        v1045 = &v1037[v1043];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v1037[v1043], 1, v1182))
        {
          v1046 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v1044, v1045, *(void *)(*(void *)(v1046 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v1182 - 8) + 32))(v1044, v1045, v1182);
          __swift_storeEnumTagSinglePayload((uint64_t)v1044, 0, 1, v1182);
        }
        *(_OWORD *)&v1036[v1038[12]] = *(_OWORD *)&v1037[v1038[12]];
        *(void *)&v1036[v1038[13]] = *(void *)&v1037[v1038[13]];
        v1047 = v1038[14];
        v1048 = &v1036[v1047];
        v1049 = &v1037[v1047];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v1037[v1047], 1, v1182))
        {
          v1050 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v1048, v1049, *(void *)(*(void *)(v1050 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v1182 - 8) + 32))(v1048, v1049, v1182);
          __swift_storeEnumTagSinglePayload((uint64_t)v1048, 0, 1, v1182);
        }
        *(void *)&v1036[v1038[15]] = *(void *)&v1037[v1038[15]];
        *(void *)&v1036[v1038[16]] = *(void *)&v1037[v1038[16]];
        *(_OWORD *)&v1036[v1038[17]] = *(_OWORD *)&v1037[v1038[17]];
        *(void *)&v1036[v1038[18]] = *(void *)&v1037[v1038[18]];
        *(void *)&v1036[v1038[19]] = *(void *)&v1037[v1038[19]];
        __swift_storeEnumTagSinglePayload((uint64_t)v1036, 0, 1, (uint64_t)v1038);
      }
      v1051 = v40[20];
      v1052 = &a1[v1051];
      v1053 = &a2[v1051];
      v1054 = (int *)type metadata accessor for PreExtractedSharedLink(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v1053, 1, (uint64_t)v1054))
      {
        v1055 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
        memcpy(v1052, v1053, *(void *)(*(void *)(v1055 - 8) + 64));
      }
      else
      {
        v1056 = *((_OWORD *)v1053 + 1);
        *(_OWORD *)v1052 = *(_OWORD *)v1053;
        *((_OWORD *)v1052 + 1) = v1056;
        v1057 = *((_OWORD *)v1053 + 3);
        *((_OWORD *)v1052 + 2) = *((_OWORD *)v1053 + 2);
        *((_OWORD *)v1052 + 3) = v1057;
        v1058 = v1054[8];
        v1059 = &v1052[v1058];
        v1060 = &v1053[v1058];
        v1061 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v1060, 1, v1061))
        {
          v1062 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v1059, v1060, *(void *)(*(void *)(v1062 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v1061 - 8) + 32))(v1059, v1060, v1061);
          __swift_storeEnumTagSinglePayload((uint64_t)v1059, 0, 1, v1061);
        }
        *(_OWORD *)&v1052[v1054[9]] = *(_OWORD *)&v1053[v1054[9]];
        *(_OWORD *)&v1052[v1054[10]] = *(_OWORD *)&v1053[v1054[10]];
        *(_OWORD *)&v1052[v1054[11]] = *(_OWORD *)&v1053[v1054[11]];
        v1063 = v1054[12];
        v1064 = &v1052[v1063];
        v1065 = &v1053[v1063];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v1053[v1063], 1, v1182))
        {
          v1066 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v1064, v1065, *(void *)(*(void *)(v1066 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v1182 - 8) + 32))(v1064, v1065, v1182);
          __swift_storeEnumTagSinglePayload((uint64_t)v1064, 0, 1, v1182);
        }
        v1067 = v1054[13];
        v1068 = &v1052[v1067];
        v1069 = &v1053[v1067];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v1053[v1067], 1, v1182))
        {
          v1070 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v1068, v1069, *(void *)(*(void *)(v1070 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v1182 - 8) + 32))(v1068, v1069, v1182);
          __swift_storeEnumTagSinglePayload((uint64_t)v1068, 0, 1, v1182);
        }
        v1071 = v1054[14];
        v1072 = &v1052[v1071];
        v1073 = &v1053[v1071];
        *(void *)v1072 = *(void *)v1073;
        v1072[8] = v1073[8];
        *(_OWORD *)&v1052[v1054[15]] = *(_OWORD *)&v1053[v1054[15]];
        *(_OWORD *)&v1052[v1054[16]] = *(_OWORD *)&v1053[v1054[16]];
        *(_OWORD *)&v1052[v1054[17]] = *(_OWORD *)&v1053[v1054[17]];
        *(_OWORD *)&v1052[v1054[18]] = *(_OWORD *)&v1053[v1054[18]];
        *(_OWORD *)&v1052[v1054[19]] = *(_OWORD *)&v1053[v1054[19]];
        __swift_storeEnumTagSinglePayload((uint64_t)v1052, 0, 1, (uint64_t)v1054);
      }
      memcpy(&a1[v40[21]], &a2[v40[21]], 0x90uLL);
      goto LABEL_522;
    case 4u:
      v46 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v46;
      v47 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v47;
      v48 = type metadata accessor for NoteDocument(0);
      v49 = *(int *)(v48 + 32);
      v50 = &a1[v49];
      v51 = &a2[v49];
      v52 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v51, 1, v52))
      {
        v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v50, v51, *(void *)(*(void *)(v53 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v50, v51, v52);
        __swift_storeEnumTagSinglePayload((uint64_t)v50, 0, 1, v52);
      }
      v244 = *(int *)(v48 + 36);
      v245 = &a1[v244];
      v246 = &a2[v244];
      if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v244], 1, v52)) {
        goto LABEL_104;
      }
      goto LABEL_134;
    case 5u:
      v54 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v54;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      v55 = (int *)type metadata accessor for Reminder(0);
      v56 = v55[7];
      v57 = &a1[v56];
      v58 = &a2[v56];
      v59 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v58, 1, v59))
      {
        v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v57, v58, *(void *)(*(void *)(v60 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 32))(v57, v58, v59);
        __swift_storeEnumTagSinglePayload((uint64_t)v57, 0, 1, v59);
      }
      v247 = v55[8];
      v248 = &a1[v247];
      v249 = &a2[v247];
      if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v247], 1, v59))
      {
        v250 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v248, v249, *(void *)(*(void *)(v250 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 32))(v248, v249, v59);
        __swift_storeEnumTagSinglePayload((uint64_t)v248, 0, 1, v59);
      }
      a1[v55[9]] = a2[v55[9]];
      *(_OWORD *)&a1[v55[10]] = *(_OWORD *)&a2[v55[10]];
      *(_OWORD *)&a1[v55[11]] = *(_OWORD *)&a2[v55[11]];
      v306 = v55[12];
      v78 = &a1[v306];
      v79 = &a2[v306];
      v80 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v79, 1, v80)) {
        goto LABEL_144;
      }
      goto LABEL_126;
    case 6u:
      v61 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v61;
      v62 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v62;
      v63 = (int *)type metadata accessor for PhoneHistory(0);
      v64 = v63[10];
      v65 = &a1[v64];
      v66 = &a2[v64];
      v67 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v66, 1, v67))
      {
        v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v65, v66, *(void *)(*(void *)(v68 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 32))(v65, v66, v67);
        __swift_storeEnumTagSinglePayload((uint64_t)v65, 0, 1, v67);
      }
      *(_OWORD *)&a1[v63[11]] = *(_OWORD *)&a2[v63[11]];
      *(_OWORD *)&a1[v63[12]] = *(_OWORD *)&a2[v63[12]];
      v251 = v63[13];
      v78 = &a1[v251];
      v79 = &a2[v251];
      v80 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v79, 1, v80)) {
        goto LABEL_144;
      }
      goto LABEL_126;
    case 7u:
      v69 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v69;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      v70 = type metadata accessor for VoicemailTranscript(0);
      v71 = *(int *)(v70 + 28);
      v72 = &a1[v71];
      v73 = &a2[v71];
      v74 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v73, 1, v74))
      {
        v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v72, v73, *(void *)(*(void *)(v75 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 32))(v72, v73, v74);
        __swift_storeEnumTagSinglePayload((uint64_t)v72, 0, 1, v74);
      }
      v252 = *(int *)(v70 + 32);
      v78 = &a1[v252];
      v79 = &a2[v252];
      v80 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v79, 1, v80)) {
        goto LABEL_144;
      }
      goto LABEL_126;
    case 8u:
      v76 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v76;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      v77 = *(int *)(type metadata accessor for JournalEntry(0) + 28);
      v78 = &a1[v77];
      v79 = &a2[v77];
      v80 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v79, 1, v80)) {
        goto LABEL_144;
      }
      goto LABEL_126;
    case 9u:
      v81 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v81;
      v82 = (int *)type metadata accessor for VoiceMemo(0);
      v83 = v82[6];
      v84 = &a1[v83];
      v85 = &a2[v83];
      v86 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v85, 1, v86))
      {
        v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v84, v85, *(void *)(*(void *)(v87 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 32))(v84, v85, v86);
        __swift_storeEnumTagSinglePayload((uint64_t)v84, 0, 1, v86);
      }
      v253 = v82[7];
      v254 = &a1[v253];
      v255 = &a2[v253];
      *(void *)v254 = *(void *)v255;
      v254[8] = v255[8];
      v256 = v82[8];
      v78 = &a1[v256];
      v79 = &a2[v256];
      v80 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v79, 1, v80)) {
        goto LABEL_144;
      }
      goto LABEL_126;
    case 0xAu:
      v88 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v88;
      v89 = (int *)type metadata accessor for Safari(0);
      v90 = v89[6];
      v91 = &a1[v90];
      v92 = &a2[v90];
      v52 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v92, 1, v52))
      {
        v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v91, v92, *(void *)(*(void *)(v93 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v91, v92, v52);
        __swift_storeEnumTagSinglePayload((uint64_t)v91, 0, 1, v52);
      }
      *(_OWORD *)&a1[v89[7]] = *(_OWORD *)&a2[v89[7]];
      *(_OWORD *)&a1[v89[8]] = *(_OWORD *)&a2[v89[8]];
      v257 = v89[9];
      v245 = &a1[v257];
      v246 = &a2[v257];
      if (!__swift_getEnumTagSinglePayload((uint64_t)&a2[v257], 1, v52)) {
        goto LABEL_134;
      }
      v258 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v245, v246, *(void *)(*(void *)(v258 - 8) + 64));
      goto LABEL_522;
    case 0xCu:
      v94 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v94;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      v95 = (int *)type metadata accessor for WalletTransaction(0);
      v96 = v95[7];
      v97 = &a1[v96];
      v98 = &a2[v96];
      v99 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v98, 1, v99))
      {
        v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v97, v98, *(void *)(*(void *)(v100 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v99 - 8) + 32))(v97, v98, v99);
        __swift_storeEnumTagSinglePayload((uint64_t)v97, 0, 1, v99);
      }
      *(_OWORD *)&a1[v95[8]] = *(_OWORD *)&a2[v95[8]];
      *(_OWORD *)&a1[v95[9]] = *(_OWORD *)&a2[v95[9]];
      *(_OWORD *)&a1[v95[10]] = *(_OWORD *)&a2[v95[10]];
      v259 = v95[11];
      v260 = &a1[v259];
      v261 = &a2[v259];
      *(void *)(v260 + 13) = *(void *)(v261 + 13);
      *(_OWORD *)v260 = *(_OWORD *)v261;
      *(_OWORD *)&a1[v95[12]] = *(_OWORD *)&a2[v95[12]];
      goto LABEL_522;
    case 0xDu:
      v101 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v101;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      v102 = (int *)type metadata accessor for WalletPass(0);
      v103 = v102[7];
      v104 = &a1[v103];
      v105 = &a2[v103];
      v106 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v105, 1, v106))
      {
        v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v104, v105, *(void *)(*(void *)(v107 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v106 - 8) + 32))(v104, v105, v106);
        __swift_storeEnumTagSinglePayload((uint64_t)v104, 0, 1, v106);
      }
      *(_OWORD *)&a1[v102[8]] = *(_OWORD *)&a2[v102[8]];
      *(void *)&a1[v102[9]] = *(void *)&a2[v102[9]];
      goto LABEL_522;
    case 0xFu:
      v108 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v108;
      v109 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v109;
      v110 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v110;
      a1[96] = a2[96];
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      v111 = (int *)type metadata accessor for FlightReservation(0);
      v112 = v111[13];
      v113 = &a1[v112];
      v114 = &a2[v112];
      v115 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v114, 1, v115))
      {
        v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v113, v114, *(void *)(*(void *)(v116 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v115 - 8) + 32))(v113, v114, v115);
        __swift_storeEnumTagSinglePayload((uint64_t)v113, 0, 1, v115);
      }
      v262 = v111[14];
      v263 = &a1[v262];
      v264 = &a2[v262];
      v265 = a3;
      if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v262], 1, v115))
      {
        v266 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v263, v264, *(void *)(*(void *)(v266 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v115 - 8) + 32))(v263, v264, v115);
        __swift_storeEnumTagSinglePayload((uint64_t)v263, 0, 1, v115);
      }
      *(_OWORD *)&a1[v111[15]] = *(_OWORD *)&a2[v111[15]];
      *(_OWORD *)&a1[v111[16]] = *(_OWORD *)&a2[v111[16]];
      *(_OWORD *)&a1[v111[17]] = *(_OWORD *)&a2[v111[17]];
      v307 = v111[18];
      v308 = &a1[v307];
      v309 = &a2[v307];
      v310 = type metadata accessor for DateComponents();
      v311 = *(void (**)(char *, char *, uint64_t))(*(void *)(v310 - 8) + 32);
      v311(v308, v309, v310);
      v311(&a1[v111[19]], &a2[v111[19]], v310);
      *(_OWORD *)&a1[v111[20]] = *(_OWORD *)&a2[v111[20]];
      *(_OWORD *)&a1[v111[21]] = *(_OWORD *)&a2[v111[21]];
      *(_OWORD *)&a1[v111[22]] = *(_OWORD *)&a2[v111[22]];
      *(_OWORD *)&a1[v111[23]] = *(_OWORD *)&a2[v111[23]];
      *(_OWORD *)&a1[v111[24]] = *(_OWORD *)&a2[v111[24]];
      *(_OWORD *)&a1[v111[25]] = *(_OWORD *)&a2[v111[25]];
      *(_OWORD *)&a1[v111[26]] = *(_OWORD *)&a2[v111[26]];
      *(_OWORD *)&a1[v111[27]] = *(_OWORD *)&a2[v111[27]];
      *(_OWORD *)&a1[v111[28]] = *(_OWORD *)&a2[v111[28]];
      *(_OWORD *)&a1[v111[29]] = *(_OWORD *)&a2[v111[29]];
      *(_OWORD *)&a1[v111[30]] = *(_OWORD *)&a2[v111[30]];
      *(_OWORD *)&a1[v111[31]] = *(_OWORD *)&a2[v111[31]];
      *(_OWORD *)&a1[v111[32]] = *(_OWORD *)&a2[v111[32]];
      *(void *)&a1[v111[33]] = *(void *)&a2[v111[33]];
      *(void *)&a1[v111[34]] = *(void *)&a2[v111[34]];
      *(_OWORD *)&a1[v111[35]] = *(_OWORD *)&a2[v111[35]];
      *(_OWORD *)&a1[v111[36]] = *(_OWORD *)&a2[v111[36]];
      *(_OWORD *)&a1[v111[37]] = *(_OWORD *)&a2[v111[37]];
      v312 = v111[38];
      v313 = &a1[v312];
      v314 = &a2[v312];
      v315 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v314, 1, v315))
      {
        v316 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v313, v314, *(void *)(*(void *)(v316 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v315 - 8) + 32))(v313, v314, v315);
        __swift_storeEnumTagSinglePayload((uint64_t)v313, 0, 1, v315);
      }
      a3 = v265;
      *(_OWORD *)&a1[v111[39]] = *(_OWORD *)&a2[v111[39]];
      *(_OWORD *)&a1[v111[40]] = *(_OWORD *)&a2[v111[40]];
      v340 = v111[41];
      v341 = &a1[v340];
      v342 = &a2[v340];
      *(void *)v341 = *(void *)v342;
      v341[8] = v342[8];
      *(_OWORD *)&a1[v111[42]] = *(_OWORD *)&a2[v111[42]];
      v343 = v111[43];
      v344 = &a1[v343];
      v345 = &a2[v343];
      *(_OWORD *)v344 = *(_OWORD *)v345;
      *(void *)(v344 + 13) = *(void *)(v345 + 13);
      *(_OWORD *)&a1[v111[44]] = *(_OWORD *)&a2[v111[44]];
      *(_OWORD *)&a1[v111[45]] = *(_OWORD *)&a2[v111[45]];
      *(_OWORD *)&a1[v111[46]] = *(_OWORD *)&a2[v111[46]];
      *(_OWORD *)&a1[v111[47]] = *(_OWORD *)&a2[v111[47]];
      v346 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]));
      *(void *)&a1[*(int *)(v346 + 48)] = *(void *)&a2[*(int *)(v346 + 48)];
      goto LABEL_522;
    case 0x10u:
      v117 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v117;
      v118 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v118;
      v119 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v119;
      a1[96] = a2[96];
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      v120 = (int *)type metadata accessor for HotelReservation(0);
      v121 = v120[14];
      v122 = &a1[v121];
      v123 = &a2[v121];
      v124 = type metadata accessor for DateComponents();
      if (__swift_getEnumTagSinglePayload((uint64_t)v123, 1, v124))
      {
        v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
        memcpy(v122, v123, *(void *)(*(void *)(v125 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v124 - 8) + 32))(v122, v123, v124);
        __swift_storeEnumTagSinglePayload((uint64_t)v122, 0, 1, v124);
      }
      v267 = v120[15];
      v268 = &a1[v267];
      v269 = &a2[v267];
      if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v267], 1, v124))
      {
        v270 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
        memcpy(v268, v269, *(void *)(*(void *)(v270 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v124 - 8) + 32))(v268, v269, v124);
        __swift_storeEnumTagSinglePayload((uint64_t)v268, 0, 1, v124);
      }
      *(_OWORD *)&a1[v120[16]] = *(_OWORD *)&a2[v120[16]];
      *(_OWORD *)&a1[v120[17]] = *(_OWORD *)&a2[v120[17]];
      *(_OWORD *)&a1[v120[18]] = *(_OWORD *)&a2[v120[18]];
      *(_OWORD *)&a1[v120[19]] = *(_OWORD *)&a2[v120[19]];
      *(_OWORD *)&a1[v120[20]] = *(_OWORD *)&a2[v120[20]];
      *(void *)&a1[v120[21]] = *(void *)&a2[v120[21]];
      *(void *)&a1[v120[22]] = *(void *)&a2[v120[22]];
      v317 = v120[23];
      v318 = &a1[v317];
      v319 = &a2[v317];
      v318[8] = v319[8];
      *(void *)v318 = *(void *)v319;
      v320 = v120[24];
      v321 = &a1[v320];
      v322 = &a2[v320];
      v321[8] = v322[8];
      *(void *)v321 = *(void *)v322;
      *(_OWORD *)&a1[v120[25]] = *(_OWORD *)&a2[v120[25]];
      *(_OWORD *)&a1[v120[26]] = *(_OWORD *)&a2[v120[26]];
      *(_OWORD *)&a1[v120[27]] = *(_OWORD *)&a2[v120[27]];
      *(_OWORD *)&a1[v120[28]] = *(_OWORD *)&a2[v120[28]];
      v323 = v120[29];
      v324 = &a1[v323];
      v325 = &a2[v323];
      *(void *)v324 = *(void *)v325;
      v324[8] = v325[8];
      goto LABEL_522;
    case 0x11u:
      v126 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v126;
      v127 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v127;
      v128 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v128;
      a1[96] = a2[96];
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      v129 = (int *)type metadata accessor for RestaurantReservation(0);
      v130 = v129[14];
      v131 = &a1[v130];
      v132 = &a2[v130];
      v133 = type metadata accessor for DateComponents();
      if (__swift_getEnumTagSinglePayload((uint64_t)v132, 1, v133))
      {
        v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
        memcpy(v131, v132, *(void *)(*(void *)(v134 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v133 - 8) + 32))(v131, v132, v133);
        __swift_storeEnumTagSinglePayload((uint64_t)v131, 0, 1, v133);
      }
      *(_OWORD *)&a1[v129[15]] = *(_OWORD *)&a2[v129[15]];
      *(_OWORD *)&a1[v129[16]] = *(_OWORD *)&a2[v129[16]];
      *(_OWORD *)&a1[v129[17]] = *(_OWORD *)&a2[v129[17]];
      *(_OWORD *)&a1[v129[18]] = *(_OWORD *)&a2[v129[18]];
      *(_OWORD *)&a1[v129[19]] = *(_OWORD *)&a2[v129[19]];
      *(void *)&a1[v129[20]] = *(void *)&a2[v129[20]];
      *(_OWORD *)&a1[v129[21]] = *(_OWORD *)&a2[v129[21]];
      *(_OWORD *)&a1[v129[22]] = *(_OWORD *)&a2[v129[22]];
      *(_OWORD *)&a1[v129[23]] = *(_OWORD *)&a2[v129[23]];
      goto LABEL_522;
    case 0x12u:
      v135 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v135;
      v136 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v136;
      v137 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v137;
      v138 = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = v138;
      a1[128] = a2[128];
      *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
      *((void *)a1 + 17) = *((void *)a2 + 17);
      v139 = *((_OWORD *)a2 + 10);
      *((_OWORD *)a1 + 9) = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 10) = v139;
      v140 = *((_OWORD *)a2 + 12);
      *((_OWORD *)a1 + 11) = *((_OWORD *)a2 + 11);
      *((_OWORD *)a1 + 12) = v140;
      v141 = *((_OWORD *)a2 + 14);
      *((_OWORD *)a1 + 13) = *((_OWORD *)a2 + 13);
      *((_OWORD *)a1 + 14) = v141;
      *((_OWORD *)a1 + 15) = *((_OWORD *)a2 + 15);
      *((void *)a1 + 32) = *((void *)a2 + 32);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
      *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
      *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
      *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
      *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
      a1[384] = a2[384];
      *((void *)a1 + 47) = *((void *)a2 + 47);
      *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
      *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
      v142 = type metadata accessor for RentalCarReservation(0);
      v143 = *(int *)(v142 + 140);
      v144 = &a1[v143];
      v145 = &a2[v143];
      v52 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v145, 1, v52))
      {
        v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v144, v145, *(void *)(*(void *)(v146 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v144, v145, v52);
        __swift_storeEnumTagSinglePayload((uint64_t)v144, 0, 1, v52);
      }
      v271 = *(int *)(v142 + 144);
      v245 = &a1[v271];
      v246 = &a2[v271];
      if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v271], 1, v52)) {
        goto LABEL_104;
      }
      goto LABEL_134;
    case 0x13u:
      v147 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v147;
      v148 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v148;
      v149 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v149;
      v150 = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = v150;
      a1[128] = a2[128];
      *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
      *((void *)a1 + 17) = *((void *)a2 + 17);
      v151 = *((_OWORD *)a2 + 10);
      *((_OWORD *)a1 + 9) = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 10) = v151;
      v152 = *((_OWORD *)a2 + 12);
      *((_OWORD *)a1 + 11) = *((_OWORD *)a2 + 11);
      *((_OWORD *)a1 + 12) = v152;
      *((void *)a1 + 26) = *((void *)a2 + 26);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      a1[296] = a2[296];
      v153 = *((void *)a2 + 36);
      *((void *)a1 + 35) = *((void *)a2 + 35);
      *((void *)a1 + 36) = v153;
      v154 = type metadata accessor for TicketedTransportation(0);
      v155 = *(int *)(v154 + 112);
      v156 = &a1[v155];
      v157 = &a2[v155];
      v52 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v157, 1, v52))
      {
        v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v156, v157, *(void *)(*(void *)(v158 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v156, v157, v52);
        __swift_storeEnumTagSinglePayload((uint64_t)v156, 0, 1, v52);
      }
      v272 = *(int *)(v154 + 116);
      v245 = &a1[v272];
      v246 = &a2[v272];
      if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v272], 1, v52)) {
        goto LABEL_104;
      }
      goto LABEL_134;
    case 0x14u:
      v159 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v159;
      v160 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v160;
      v161 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v161;
      v162 = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = v162;
      a1[128] = a2[128];
      *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
      *((void *)a1 + 17) = *((void *)a2 + 17);
      v163 = *((_OWORD *)a2 + 10);
      *((_OWORD *)a1 + 9) = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 10) = v163;
      v164 = *((_OWORD *)a2 + 12);
      *((_OWORD *)a1 + 11) = *((_OWORD *)a2 + 11);
      *((_OWORD *)a1 + 12) = v164;
      v165 = *((_OWORD *)a2 + 14);
      *((_OWORD *)a1 + 13) = *((_OWORD *)a2 + 13);
      *((_OWORD *)a1 + 14) = v165;
      *((void *)a1 + 30) = *((void *)a2 + 30);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      a1[296] = a2[296];
      v166 = *((void *)a2 + 36);
      *((void *)a1 + 35) = *((void *)a2 + 35);
      *((void *)a1 + 36) = v166;
      *((_OWORD *)a1 + 19) = *((_OWORD *)a2 + 19);
      v167 = (int *)type metadata accessor for TicketedShow(0);
      v168 = v167[29];
      v169 = &a1[v168];
      v170 = &a2[v168];
      v171 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v170, 1, v171))
      {
        v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v169, v170, *(void *)(*(void *)(v172 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v171 - 8) + 32))(v169, v170, v171);
        __swift_storeEnumTagSinglePayload((uint64_t)v169, 0, 1, v171);
      }
      *(_OWORD *)&a1[v167[30]] = *(_OWORD *)&a2[v167[30]];
      v273 = v167[31];
      v274 = &a1[v273];
      v275 = &a2[v273];
      v80 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v275, 1, v80))
      {
        v276 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v274, v275, *(void *)(*(void *)(v276 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 32))(v274, v275, v80);
        __swift_storeEnumTagSinglePayload((uint64_t)v274, 0, 1, v80);
      }
      v326 = v167[32];
      v78 = &a1[v326];
      v79 = &a2[v326];
      if (!__swift_getEnumTagSinglePayload((uint64_t)&a2[v326], 1, v80)) {
        goto LABEL_126;
      }
      v327 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v78, v79, *(void *)(*(void *)(v327 - 8) + 64));
      goto LABEL_522;
    case 0x15u:
      v173 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v173;
      v174 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v174;
      v175 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v175;
      v176 = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = v176;
      a1[128] = a2[128];
      *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
      *((void *)a1 + 17) = *((void *)a2 + 17);
      v177 = *((_OWORD *)a2 + 10);
      *((_OWORD *)a1 + 9) = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 10) = v177;
      v178 = *((_OWORD *)a2 + 12);
      *((_OWORD *)a1 + 11) = *((_OWORD *)a2 + 11);
      *((_OWORD *)a1 + 12) = v178;
      v179 = *((_OWORD *)a2 + 14);
      *((_OWORD *)a1 + 13) = *((_OWORD *)a2 + 13);
      *((_OWORD *)a1 + 14) = v179;
      v180 = *((_OWORD *)a2 + 16);
      *((_OWORD *)a1 + 15) = *((_OWORD *)a2 + 15);
      *((_OWORD *)a1 + 16) = v180;
      a1[280] = a2[280];
      *((void *)a1 + 34) = *((void *)a2 + 34);
      *((_OWORD *)a1 + 18) = *((_OWORD *)a2 + 18);
      v181 = type metadata accessor for Appointment(0);
      v182 = *(int *)(v181 + 108);
      v183 = &a1[v182];
      v184 = &a2[v182];
      v52 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v184, 1, v52))
      {
        v185 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v183, v184, *(void *)(*(void *)(v185 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v183, v184, v52);
        __swift_storeEnumTagSinglePayload((uint64_t)v183, 0, 1, v52);
      }
      v277 = *(int *)(v181 + 112);
      v245 = &a1[v277];
      v246 = &a2[v277];
      if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v277], 1, v52))
      {
LABEL_104:
        v278 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v245, v246, *(void *)(*(void *)(v278 - 8) + 64));
      }
      else
      {
LABEL_134:
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v245, v246, v52);
        __swift_storeEnumTagSinglePayload((uint64_t)v245, 0, 1, v52);
      }
      goto LABEL_522;
    case 0x16u:
      v186 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v186;
      v187 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v187;
      v188 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v188;
      v189 = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = v189;
      a1[128] = a2[128];
      *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
      *((void *)a1 + 17) = *((void *)a2 + 17);
      v190 = *((_OWORD *)a2 + 10);
      *((_OWORD *)a1 + 9) = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 10) = v190;
      v191 = *((_OWORD *)a2 + 12);
      *((_OWORD *)a1 + 11) = *((_OWORD *)a2 + 11);
      *((_OWORD *)a1 + 12) = v191;
      v192 = *((_OWORD *)a2 + 14);
      *((_OWORD *)a1 + 13) = *((_OWORD *)a2 + 13);
      *((_OWORD *)a1 + 14) = v192;
      *((_OWORD *)a1 + 15) = *((_OWORD *)a2 + 15);
      v193 = (int *)type metadata accessor for Party(0);
      v194 = v193[24];
      v195 = &a1[v194];
      v196 = &a2[v194];
      v197 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v196, 1, v197))
      {
        v198 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v195, v196, *(void *)(*(void *)(v198 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v197 - 8) + 32))(v195, v196, v197);
        __swift_storeEnumTagSinglePayload((uint64_t)v195, 0, 1, v197);
      }
      v279 = v193[25];
      v280 = &a1[v279];
      v281 = &a2[v279];
      if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v279], 1, v197))
      {
        v282 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v280, v281, *(void *)(*(void *)(v282 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v197 - 8) + 32))(v280, v281, v197);
        __swift_storeEnumTagSinglePayload((uint64_t)v280, 0, 1, v197);
      }
      v328 = v193[26];
      v78 = &a1[v328];
      v79 = &a2[v328];
      v80 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v79, 1, v80)) {
        goto LABEL_144;
      }
      goto LABEL_126;
    case 0x17u:
      v199 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v199;
      v200 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v200;
      v201 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v201;
      v202 = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = v202;
      a1[128] = a2[128];
      *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
      *((void *)a1 + 17) = *((void *)a2 + 17);
      v203 = *((_OWORD *)a2 + 10);
      *((_OWORD *)a1 + 9) = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 10) = v203;
      v204 = *((_OWORD *)a2 + 12);
      *((_OWORD *)a1 + 11) = *((_OWORD *)a2 + 11);
      *((_OWORD *)a1 + 12) = v204;
      *((_OWORD *)a1 + 13) = *((_OWORD *)a2 + 13);
      v205 = (int *)type metadata accessor for Trip(0);
      v206 = v205[22];
      v207 = &a1[v206];
      v208 = &a2[v206];
      v209 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v208, 1, v209))
      {
        v210 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v207, v208, *(void *)(*(void *)(v210 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v209 - 8) + 32))(v207, v208, v209);
        __swift_storeEnumTagSinglePayload((uint64_t)v207, 0, 1, v209);
      }
      v283 = v205[23];
      v284 = &a1[v283];
      v285 = &a2[v283];
      if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v283], 1, v209))
      {
        v286 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v284, v285, *(void *)(*(void *)(v286 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v209 - 8) + 32))(v284, v285, v209);
        __swift_storeEnumTagSinglePayload((uint64_t)v284, 0, 1, v209);
      }
      v329 = v205[24];
      v330 = &a1[v329];
      v331 = &a2[v329];
      *(void *)v330 = *(void *)v331;
      v330[8] = v331[8];
      v332 = v205[25];
      v78 = &a1[v332];
      v79 = &a2[v332];
      v80 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v79, 1, v80))
      {
LABEL_144:
        v333 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v78, v79, *(void *)(*(void *)(v333 - 8) + 64));
      }
      else
      {
LABEL_126:
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 32))(v78, v79, v80);
        __swift_storeEnumTagSinglePayload((uint64_t)v78, 0, 1, v80);
      }
      goto LABEL_522;
    case 0x18u:
      v211 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v211;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      v212 = (int *)type metadata accessor for GlobalItem();
      v213 = v212[7];
      v214 = &a1[v213];
      v215 = &a2[v213];
      v216 = type metadata accessor for GlobalDialog();
      if (__swift_getEnumTagSinglePayload((uint64_t)v215, 1, v216))
      {
        v217 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GlobalDialog?);
        memcpy(v214, v215, *(void *)(*(void *)(v217 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v216 - 8) + 32))(v214, v215, v216);
        __swift_storeEnumTagSinglePayload((uint64_t)v214, 0, 1, v216);
      }
      *(_OWORD *)&a1[v212[8]] = *(_OWORD *)&a2[v212[8]];
      a1[v212[9]] = a2[v212[9]];
      v287 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GlobalItem, experiences: [DialogExperience]));
      *(void *)&a1[*(int *)(v287 + 48)] = *(void *)&a2[*(int *)(v287 + 48)];
      goto LABEL_522;
    case 0x1Au:
      v218 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v218;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((void *)a1 + 6) = *((void *)a2 + 6);
      v219 = (int *)type metadata accessor for Answer(0);
      v220 = v219[9];
      v221 = &a1[v220];
      v222 = &a2[v220];
      v223 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v222, 1, v223))
      {
        v224 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v221, v222, *(void *)(*(void *)(v224 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v223 - 8) + 32))(v221, v222, v223);
        __swift_storeEnumTagSinglePayload((uint64_t)v221, 0, 1, v223);
      }
      a1[v219[10]] = a2[v219[10]];
      *(_OWORD *)&a1[v219[11]] = *(_OWORD *)&a2[v219[11]];
LABEL_522:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      break;
  }
  v1132 = type metadata accessor for SearchResult(0);
  *(void *)&a1[*(int *)(v1132 + 20)] = *(void *)&a2[*(int *)(v1132 + 20)];
  *(_OWORD *)&a1[*(int *)(v1132 + 24)] = *(_OWORD *)&a2[*(int *)(v1132 + 24)];
  v1133 = *(int *)(a3 + 20);
  v1134 = &a1[v1133];
  v1135 = &a2[v1133];
  v1136 = type metadata accessor for ExtractedType(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 4:
      v1139 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v1139 - 8) + 32))(v1134, v1135, v1139);
      goto LABEL_539;
    case 2:
      v1140 = *((_OWORD *)v1135 + 1);
      *(_OWORD *)v1134 = *(_OWORD *)v1135;
      *((_OWORD *)v1134 + 1) = v1140;
      v1141 = *((_OWORD *)v1135 + 3);
      *((_OWORD *)v1134 + 2) = *((_OWORD *)v1135 + 2);
      *((_OWORD *)v1134 + 3) = v1141;
      v1142 = *((_OWORD *)v1135 + 5);
      *((_OWORD *)v1134 + 4) = *((_OWORD *)v1135 + 4);
      *((_OWORD *)v1134 + 5) = v1142;
      v1134[96] = v1135[96];
      *(_OWORD *)(v1134 + 104) = *(_OWORD *)(v1135 + 104);
      v1143 = (int *)type metadata accessor for FlightReservation(0);
      v1144 = v1143[13];
      v1145 = &v1134[v1144];
      v1146 = &v1135[v1144];
      v1147 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v1146, 1, v1147))
      {
        v1148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v1145, v1146, *(void *)(*(void *)(v1148 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v1147 - 8) + 32))(v1145, v1146, v1147);
        __swift_storeEnumTagSinglePayload((uint64_t)v1145, 0, 1, v1147);
      }
      v1149 = v1143[14];
      v1150 = &v1134[v1149];
      v1151 = &v1135[v1149];
      if (__swift_getEnumTagSinglePayload((uint64_t)&v1135[v1149], 1, v1147))
      {
        v1152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v1150, v1151, *(void *)(*(void *)(v1152 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v1147 - 8) + 32))(v1150, v1151, v1147);
        __swift_storeEnumTagSinglePayload((uint64_t)v1150, 0, 1, v1147);
      }
      *(_OWORD *)&v1134[v1143[15]] = *(_OWORD *)&v1135[v1143[15]];
      *(_OWORD *)&v1134[v1143[16]] = *(_OWORD *)&v1135[v1143[16]];
      *(_OWORD *)&v1134[v1143[17]] = *(_OWORD *)&v1135[v1143[17]];
      v1153 = v1143[18];
      v1154 = &v1134[v1153];
      v1155 = &v1135[v1153];
      v1156 = type metadata accessor for DateComponents();
      v1157 = *(void (**)(char *, char *, uint64_t))(*(void *)(v1156 - 8) + 32);
      v1157(v1154, v1155, v1156);
      v1157(&v1134[v1143[19]], &v1135[v1143[19]], v1156);
      *(_OWORD *)&v1134[v1143[20]] = *(_OWORD *)&v1135[v1143[20]];
      *(_OWORD *)&v1134[v1143[21]] = *(_OWORD *)&v1135[v1143[21]];
      *(_OWORD *)&v1134[v1143[22]] = *(_OWORD *)&v1135[v1143[22]];
      *(_OWORD *)&v1134[v1143[23]] = *(_OWORD *)&v1135[v1143[23]];
      *(_OWORD *)&v1134[v1143[24]] = *(_OWORD *)&v1135[v1143[24]];
      *(_OWORD *)&v1134[v1143[25]] = *(_OWORD *)&v1135[v1143[25]];
      *(_OWORD *)&v1134[v1143[26]] = *(_OWORD *)&v1135[v1143[26]];
      *(_OWORD *)&v1134[v1143[27]] = *(_OWORD *)&v1135[v1143[27]];
      *(_OWORD *)&v1134[v1143[28]] = *(_OWORD *)&v1135[v1143[28]];
      *(_OWORD *)&v1134[v1143[29]] = *(_OWORD *)&v1135[v1143[29]];
      *(_OWORD *)&v1134[v1143[30]] = *(_OWORD *)&v1135[v1143[30]];
      *(_OWORD *)&v1134[v1143[31]] = *(_OWORD *)&v1135[v1143[31]];
      *(_OWORD *)&v1134[v1143[32]] = *(_OWORD *)&v1135[v1143[32]];
      *(void *)&v1134[v1143[33]] = *(void *)&v1135[v1143[33]];
      *(void *)&v1134[v1143[34]] = *(void *)&v1135[v1143[34]];
      *(_OWORD *)&v1134[v1143[35]] = *(_OWORD *)&v1135[v1143[35]];
      *(_OWORD *)&v1134[v1143[36]] = *(_OWORD *)&v1135[v1143[36]];
      *(_OWORD *)&v1134[v1143[37]] = *(_OWORD *)&v1135[v1143[37]];
      v1158 = v1143[38];
      v1159 = &v1134[v1158];
      v1160 = &v1135[v1158];
      v1161 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v1160, 1, v1161))
      {
        v1162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v1159, v1160, *(void *)(*(void *)(v1162 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v1161 - 8) + 32))(v1159, v1160, v1161);
        __swift_storeEnumTagSinglePayload((uint64_t)v1159, 0, 1, v1161);
      }
      *(_OWORD *)&v1134[v1143[39]] = *(_OWORD *)&v1135[v1143[39]];
      *(_OWORD *)&v1134[v1143[40]] = *(_OWORD *)&v1135[v1143[40]];
      v1163 = v1143[41];
      v1164 = &v1134[v1163];
      v1165 = &v1135[v1163];
      *(void *)v1164 = *(void *)v1165;
      v1164[8] = v1165[8];
      *(_OWORD *)&v1134[v1143[42]] = *(_OWORD *)&v1135[v1143[42]];
      v1166 = v1143[43];
      v1167 = &v1134[v1166];
      v1168 = &v1135[v1166];
      *(_OWORD *)v1167 = *(_OWORD *)v1168;
      *(void *)(v1167 + 13) = *(void *)(v1168 + 13);
      *(_OWORD *)&v1134[v1143[44]] = *(_OWORD *)&v1135[v1143[44]];
      *(_OWORD *)&v1134[v1143[45]] = *(_OWORD *)&v1135[v1143[45]];
      *(_OWORD *)&v1134[v1143[46]] = *(_OWORD *)&v1135[v1143[46]];
      *(_OWORD *)&v1134[v1143[47]] = *(_OWORD *)&v1135[v1143[47]];
      goto LABEL_539;
    case 1:
      v1138 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v1138 - 8) + 32))(v1134, v1135, v1138);
LABEL_539:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(v1134, v1135, *(void *)(*(void *)(v1136 - 8) + 64));
  return a1;
}

char *assignWithTake for ExtractedInfo(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of FlightReservation((uint64_t)a1, (void (*)(void))type metadata accessor for SearchResultItem);
    uint64_t v6 = type metadata accessor for SearchResultItem(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        long long v7 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v7;
        long long v8 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v8;
        long long v9 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v9;
        v10 = (int *)type metadata accessor for EmailDocument(0);
        uint64_t v11 = v10[12];
        v12 = &a1[v11];
        v13 = &a2[v11];
        uint64_t v14 = type metadata accessor for Date();
        v1193 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32);
        v1193(v12, v13, v14);
        *(void *)&a1[v10[13]] = *(void *)&a2[v10[13]];
        *(void *)&a1[v10[14]] = *(void *)&a2[v10[14]];
        *(void *)&a1[v10[15]] = *(void *)&a2[v10[15]];
        a1[v10[16]] = a2[v10[16]];
        a1[v10[17]] = a2[v10[17]];
        *(_OWORD *)&a1[v10[18]] = *(_OWORD *)&a2[v10[18]];
        uint64_t v15 = v10[19];
        v16 = &a1[v15];
        v17 = &a2[v15];
        long long v18 = *((_OWORD *)v17 + 1);
        *(_OWORD *)v16 = *(_OWORD *)v17;
        *((_OWORD *)v16 + 1) = v18;
        *((void *)v16 + 4) = *((void *)v17 + 4);
        *(_OWORD *)&a1[v10[20]] = *(_OWORD *)&a2[v10[20]];
        uint64_t v19 = v10[21];
        v20 = &a1[v19];
        v21 = &a2[v19];
        v22 = (int *)type metadata accessor for PartialExtractedAttributes(0);
        uint64_t v1187 = v14;
        uint64_t v1200 = a3;
        if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, (uint64_t)v22))
        {
          uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
          memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64));
        }
        else
        {
          v1183 = v10;
          *(_OWORD *)v20 = *(_OWORD *)v21;
          uint64_t v225 = v22[5];
          v226 = &v20[v225];
          v1196 = v21;
          v227 = &v21[v225];
          uint64_t v228 = type metadata accessor for RentalCarReservation(0);
          v1172 = v20;
          __dst = v22;
          if (__swift_getEnumTagSinglePayload((uint64_t)v227, 1, v228))
          {
            uint64_t v229 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
            memcpy(v226, v227, *(void *)(*(void *)(v229 - 8) + 64));
          }
          else
          {
            long long v349 = *((_OWORD *)v227 + 1);
            *(_OWORD *)v226 = *(_OWORD *)v227;
            *((_OWORD *)v226 + 1) = v349;
            long long v350 = *((_OWORD *)v227 + 3);
            *((_OWORD *)v226 + 2) = *((_OWORD *)v227 + 2);
            *((_OWORD *)v226 + 3) = v350;
            long long v351 = *((_OWORD *)v227 + 5);
            *((_OWORD *)v226 + 4) = *((_OWORD *)v227 + 4);
            *((_OWORD *)v226 + 5) = v351;
            long long v352 = *((_OWORD *)v227 + 7);
            *((_OWORD *)v226 + 6) = *((_OWORD *)v227 + 6);
            *((_OWORD *)v226 + 7) = v352;
            v226[128] = v227[128];
            *(_WORD *)(v226 + 129) = *(_WORD *)(v227 + 129);
            *((void *)v226 + 17) = *((void *)v227 + 17);
            long long v353 = *((_OWORD *)v227 + 10);
            *((_OWORD *)v226 + 9) = *((_OWORD *)v227 + 9);
            *((_OWORD *)v226 + 10) = v353;
            long long v354 = *((_OWORD *)v227 + 12);
            *((_OWORD *)v226 + 11) = *((_OWORD *)v227 + 11);
            *((_OWORD *)v226 + 12) = v354;
            long long v355 = *((_OWORD *)v227 + 14);
            *((_OWORD *)v226 + 13) = *((_OWORD *)v227 + 13);
            *((_OWORD *)v226 + 14) = v355;
            *((_OWORD *)v226 + 15) = *((_OWORD *)v227 + 15);
            *((void *)v226 + 32) = *((void *)v227 + 32);
            *(_OWORD *)(v226 + 264) = *(_OWORD *)(v227 + 264);
            *(_OWORD *)(v226 + 280) = *(_OWORD *)(v227 + 280);
            *(_OWORD *)(v226 + 296) = *(_OWORD *)(v227 + 296);
            *(_OWORD *)(v226 + 312) = *(_OWORD *)(v227 + 312);
            *(_OWORD *)(v226 + 328) = *(_OWORD *)(v227 + 328);
            *(_OWORD *)(v226 + 344) = *(_OWORD *)(v227 + 344);
            *(_OWORD *)(v226 + 360) = *(_OWORD *)(v227 + 360);
            v226[384] = v227[384];
            *((void *)v226 + 47) = *((void *)v227 + 47);
            *(_OWORD *)(v226 + 392) = *(_OWORD *)(v227 + 392);
            *(_OWORD *)(v226 + 408) = *(_OWORD *)(v227 + 408);
            uint64_t v356 = *(int *)(v228 + 140);
            v357 = &v226[v356];
            v358 = &v227[v356];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v227[v356], 1, v14))
            {
              uint64_t v359 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v357, v358, *(void *)(*(void *)(v359 - 8) + 64));
            }
            else
            {
              v1193(v357, v358, v14);
              __swift_storeEnumTagSinglePayload((uint64_t)v357, 0, 1, v14);
            }
            uint64_t v382 = *(int *)(v228 + 144);
            v383 = &v226[v382];
            v384 = &v227[v382];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v227[v382], 1, v14))
            {
              uint64_t v385 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v383, v384, *(void *)(*(void *)(v385 - 8) + 64));
            }
            else
            {
              v1193(v383, v384, v14);
              __swift_storeEnumTagSinglePayload((uint64_t)v383, 0, 1, v14);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v226, 0, 1, v228);
            v20 = v1172;
            v22 = __dst;
          }
          uint64_t v394 = v22[6];
          v395 = &v20[v394];
          v396 = &v1196[v394];
          uint64_t v397 = type metadata accessor for TicketedTransportation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v396, 1, v397))
          {
            uint64_t v398 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
            memcpy(v395, v396, *(void *)(*(void *)(v398 - 8) + 64));
          }
          else
          {
            long long v399 = *((_OWORD *)v396 + 1);
            *(_OWORD *)v395 = *(_OWORD *)v396;
            *((_OWORD *)v395 + 1) = v399;
            long long v400 = *((_OWORD *)v396 + 3);
            *((_OWORD *)v395 + 2) = *((_OWORD *)v396 + 2);
            *((_OWORD *)v395 + 3) = v400;
            long long v401 = *((_OWORD *)v396 + 5);
            *((_OWORD *)v395 + 4) = *((_OWORD *)v396 + 4);
            *((_OWORD *)v395 + 5) = v401;
            long long v402 = *((_OWORD *)v396 + 7);
            *((_OWORD *)v395 + 6) = *((_OWORD *)v396 + 6);
            *((_OWORD *)v395 + 7) = v402;
            v395[128] = v396[128];
            *(_WORD *)(v395 + 129) = *(_WORD *)(v396 + 129);
            *((void *)v395 + 17) = *((void *)v396 + 17);
            long long v403 = *((_OWORD *)v396 + 10);
            *((_OWORD *)v395 + 9) = *((_OWORD *)v396 + 9);
            *((_OWORD *)v395 + 10) = v403;
            long long v404 = *((_OWORD *)v396 + 12);
            *((_OWORD *)v395 + 11) = *((_OWORD *)v396 + 11);
            *((_OWORD *)v395 + 12) = v404;
            *((void *)v395 + 26) = *((void *)v396 + 26);
            *(_OWORD *)(v395 + 216) = *(_OWORD *)(v396 + 216);
            *(_OWORD *)(v395 + 232) = *(_OWORD *)(v396 + 232);
            *(_OWORD *)(v395 + 248) = *(_OWORD *)(v396 + 248);
            *(_OWORD *)(v395 + 264) = *(_OWORD *)(v396 + 264);
            v395[296] = v396[296];
            uint64_t v405 = *((void *)v396 + 36);
            *((void *)v395 + 35) = *((void *)v396 + 35);
            *((void *)v395 + 36) = v405;
            uint64_t v406 = *(int *)(v397 + 112);
            v407 = &v395[v406];
            v408 = &v396[v406];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v396[v406], 1, v14))
            {
              uint64_t v409 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v407, v408, *(void *)(*(void *)(v409 - 8) + 64));
            }
            else
            {
              v1193(v407, v408, v14);
              __swift_storeEnumTagSinglePayload((uint64_t)v407, 0, 1, v14);
            }
            uint64_t v441 = *(int *)(v397 + 116);
            v442 = &v395[v441];
            v443 = &v396[v441];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v396[v441], 1, v14))
            {
              uint64_t v444 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v442, v443, *(void *)(*(void *)(v444 - 8) + 64));
            }
            else
            {
              v1193(v442, v443, v14);
              __swift_storeEnumTagSinglePayload((uint64_t)v442, 0, 1, v14);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v395, 0, 1, v397);
            v20 = v1172;
            v22 = __dst;
          }
          uint64_t v452 = v22[7];
          v453 = &v20[v452];
          v454 = &v1196[v452];
          v455 = (int *)type metadata accessor for TicketedShow(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v454, 1, (uint64_t)v455))
          {
            uint64_t v456 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
            memcpy(v453, v454, *(void *)(*(void *)(v456 - 8) + 64));
          }
          else
          {
            long long v457 = *((_OWORD *)v454 + 1);
            *(_OWORD *)v453 = *(_OWORD *)v454;
            *((_OWORD *)v453 + 1) = v457;
            long long v458 = *((_OWORD *)v454 + 3);
            *((_OWORD *)v453 + 2) = *((_OWORD *)v454 + 2);
            *((_OWORD *)v453 + 3) = v458;
            long long v459 = *((_OWORD *)v454 + 5);
            *((_OWORD *)v453 + 4) = *((_OWORD *)v454 + 4);
            *((_OWORD *)v453 + 5) = v459;
            long long v460 = *((_OWORD *)v454 + 7);
            *((_OWORD *)v453 + 6) = *((_OWORD *)v454 + 6);
            *((_OWORD *)v453 + 7) = v460;
            v453[128] = v454[128];
            *(_WORD *)(v453 + 129) = *(_WORD *)(v454 + 129);
            *((void *)v453 + 17) = *((void *)v454 + 17);
            long long v461 = *((_OWORD *)v454 + 10);
            *((_OWORD *)v453 + 9) = *((_OWORD *)v454 + 9);
            *((_OWORD *)v453 + 10) = v461;
            long long v462 = *((_OWORD *)v454 + 12);
            *((_OWORD *)v453 + 11) = *((_OWORD *)v454 + 11);
            *((_OWORD *)v453 + 12) = v462;
            long long v463 = *((_OWORD *)v454 + 14);
            *((_OWORD *)v453 + 13) = *((_OWORD *)v454 + 13);
            *((_OWORD *)v453 + 14) = v463;
            *((void *)v453 + 30) = *((void *)v454 + 30);
            *(_OWORD *)(v453 + 248) = *(_OWORD *)(v454 + 248);
            *(_OWORD *)(v453 + 264) = *(_OWORD *)(v454 + 264);
            v453[296] = v454[296];
            uint64_t v464 = *((void *)v454 + 36);
            *((void *)v453 + 35) = *((void *)v454 + 35);
            *((void *)v453 + 36) = v464;
            *((_OWORD *)v453 + 19) = *((_OWORD *)v454 + 19);
            uint64_t v465 = v455[29];
            v466 = &v453[v465];
            v467 = &v454[v465];
            uint64_t v468 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v467, 1, v468))
            {
              uint64_t v469 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v466, v467, *(void *)(*(void *)(v469 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v468 - 8) + 32))(v466, v467, v468);
              __swift_storeEnumTagSinglePayload((uint64_t)v466, 0, 1, v468);
            }
            *(_OWORD *)&v453[v455[30]] = *(_OWORD *)&v454[v455[30]];
            uint64_t v505 = v455[31];
            v506 = &v453[v505];
            v507 = &v454[v505];
            uint64_t v14 = v1187;
            if (__swift_getEnumTagSinglePayload((uint64_t)&v454[v505], 1, v1187))
            {
              uint64_t v508 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v506, v507, *(void *)(*(void *)(v508 - 8) + 64));
            }
            else
            {
              v1193(v506, v507, v1187);
              __swift_storeEnumTagSinglePayload((uint64_t)v506, 0, 1, v1187);
            }
            uint64_t v516 = v455[32];
            v517 = &v453[v516];
            v518 = &v454[v516];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v454[v516], 1, v1187))
            {
              uint64_t v519 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v517, v518, *(void *)(*(void *)(v519 - 8) + 64));
            }
            else
            {
              v1193(v517, v518, v1187);
              __swift_storeEnumTagSinglePayload((uint64_t)v517, 0, 1, v1187);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v453, 0, 1, (uint64_t)v455);
            v20 = v1172;
            v22 = __dst;
          }
          uint64_t v527 = v22[8];
          v528 = &v20[v527];
          v529 = &v1196[v527];
          uint64_t v530 = type metadata accessor for Appointment(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v529, 1, v530))
          {
            uint64_t v531 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
            memcpy(v528, v529, *(void *)(*(void *)(v531 - 8) + 64));
          }
          else
          {
            long long v532 = *((_OWORD *)v529 + 1);
            *(_OWORD *)v528 = *(_OWORD *)v529;
            *((_OWORD *)v528 + 1) = v532;
            long long v533 = *((_OWORD *)v529 + 3);
            *((_OWORD *)v528 + 2) = *((_OWORD *)v529 + 2);
            *((_OWORD *)v528 + 3) = v533;
            long long v534 = *((_OWORD *)v529 + 5);
            *((_OWORD *)v528 + 4) = *((_OWORD *)v529 + 4);
            *((_OWORD *)v528 + 5) = v534;
            long long v535 = *((_OWORD *)v529 + 7);
            *((_OWORD *)v528 + 6) = *((_OWORD *)v529 + 6);
            *((_OWORD *)v528 + 7) = v535;
            v528[128] = v529[128];
            *(_WORD *)(v528 + 129) = *(_WORD *)(v529 + 129);
            *((void *)v528 + 17) = *((void *)v529 + 17);
            long long v536 = *((_OWORD *)v529 + 10);
            *((_OWORD *)v528 + 9) = *((_OWORD *)v529 + 9);
            *((_OWORD *)v528 + 10) = v536;
            long long v537 = *((_OWORD *)v529 + 12);
            *((_OWORD *)v528 + 11) = *((_OWORD *)v529 + 11);
            *((_OWORD *)v528 + 12) = v537;
            long long v538 = *((_OWORD *)v529 + 14);
            *((_OWORD *)v528 + 13) = *((_OWORD *)v529 + 13);
            *((_OWORD *)v528 + 14) = v538;
            long long v539 = *((_OWORD *)v529 + 16);
            *((_OWORD *)v528 + 15) = *((_OWORD *)v529 + 15);
            *((_OWORD *)v528 + 16) = v539;
            v528[280] = v529[280];
            *((void *)v528 + 34) = *((void *)v529 + 34);
            *((_OWORD *)v528 + 18) = *((_OWORD *)v529 + 18);
            uint64_t v540 = *(int *)(v530 + 108);
            v541 = &v528[v540];
            v542 = &v529[v540];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v529[v540], 1, v14))
            {
              uint64_t v543 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v541, v542, *(void *)(*(void *)(v543 - 8) + 64));
            }
            else
            {
              v1193(v541, v542, v14);
              __swift_storeEnumTagSinglePayload((uint64_t)v541, 0, 1, v14);
            }
            uint64_t v577 = *(int *)(v530 + 112);
            v578 = &v528[v577];
            v579 = &v529[v577];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v529[v577], 1, v14))
            {
              uint64_t v580 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v578, v579, *(void *)(*(void *)(v580 - 8) + 64));
            }
            else
            {
              v1193(v578, v579, v14);
              __swift_storeEnumTagSinglePayload((uint64_t)v578, 0, 1, v14);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v528, 0, 1, v530);
            v20 = v1172;
            v22 = __dst;
          }
          uint64_t v588 = v22[9];
          v589 = &v20[v588];
          v590 = &v1196[v588];
          v591 = (int *)type metadata accessor for Party(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v590, 1, (uint64_t)v591))
          {
            uint64_t v592 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
            memcpy(v589, v590, *(void *)(*(void *)(v592 - 8) + 64));
          }
          else
          {
            long long v593 = *((_OWORD *)v590 + 1);
            *(_OWORD *)v589 = *(_OWORD *)v590;
            *((_OWORD *)v589 + 1) = v593;
            long long v594 = *((_OWORD *)v590 + 3);
            *((_OWORD *)v589 + 2) = *((_OWORD *)v590 + 2);
            *((_OWORD *)v589 + 3) = v594;
            long long v595 = *((_OWORD *)v590 + 5);
            *((_OWORD *)v589 + 4) = *((_OWORD *)v590 + 4);
            *((_OWORD *)v589 + 5) = v595;
            long long v596 = *((_OWORD *)v590 + 7);
            *((_OWORD *)v589 + 6) = *((_OWORD *)v590 + 6);
            *((_OWORD *)v589 + 7) = v596;
            v589[128] = v590[128];
            *(_WORD *)(v589 + 129) = *(_WORD *)(v590 + 129);
            *((void *)v589 + 17) = *((void *)v590 + 17);
            long long v597 = *((_OWORD *)v590 + 10);
            *((_OWORD *)v589 + 9) = *((_OWORD *)v590 + 9);
            *((_OWORD *)v589 + 10) = v597;
            long long v598 = *((_OWORD *)v590 + 12);
            *((_OWORD *)v589 + 11) = *((_OWORD *)v590 + 11);
            *((_OWORD *)v589 + 12) = v598;
            long long v599 = *((_OWORD *)v590 + 14);
            *((_OWORD *)v589 + 13) = *((_OWORD *)v590 + 13);
            *((_OWORD *)v589 + 14) = v599;
            *((_OWORD *)v589 + 15) = *((_OWORD *)v590 + 15);
            uint64_t v600 = v591[24];
            v601 = &v589[v600];
            v602 = &v590[v600];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v590[v600], 1, v14))
            {
              uint64_t v603 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v601, v602, *(void *)(*(void *)(v603 - 8) + 64));
            }
            else
            {
              v1193(v601, v602, v14);
              __swift_storeEnumTagSinglePayload((uint64_t)v601, 0, 1, v14);
            }
            uint64_t v636 = v591[25];
            v637 = &v589[v636];
            v638 = &v590[v636];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v590[v636], 1, v14))
            {
              uint64_t v639 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v637, v638, *(void *)(*(void *)(v639 - 8) + 64));
            }
            else
            {
              v1193(v637, v638, v14);
              __swift_storeEnumTagSinglePayload((uint64_t)v637, 0, 1, v14);
            }
            uint64_t v648 = v591[26];
            v649 = &v589[v648];
            v650 = &v590[v648];
            uint64_t v651 = type metadata accessor for URL();
            v20 = v1172;
            if (__swift_getEnumTagSinglePayload((uint64_t)v650, 1, v651))
            {
              uint64_t v652 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v649, v650, *(void *)(*(void *)(v652 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v651 - 8) + 32))(v649, v650, v651);
              __swift_storeEnumTagSinglePayload((uint64_t)v649, 0, 1, v651);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v589, 0, 1, (uint64_t)v591);
            uint64_t v14 = v1187;
            v22 = __dst;
          }
          uint64_t v662 = v22[10];
          v663 = &v20[v662];
          v664 = &v1196[v662];
          v665 = (int *)type metadata accessor for Trip(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v664, 1, (uint64_t)v665))
          {
            uint64_t v666 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
            memcpy(v663, v664, *(void *)(*(void *)(v666 - 8) + 64));
          }
          else
          {
            long long v667 = *((_OWORD *)v664 + 1);
            *(_OWORD *)v663 = *(_OWORD *)v664;
            *((_OWORD *)v663 + 1) = v667;
            long long v668 = *((_OWORD *)v664 + 3);
            *((_OWORD *)v663 + 2) = *((_OWORD *)v664 + 2);
            *((_OWORD *)v663 + 3) = v668;
            long long v669 = *((_OWORD *)v664 + 5);
            *((_OWORD *)v663 + 4) = *((_OWORD *)v664 + 4);
            *((_OWORD *)v663 + 5) = v669;
            long long v670 = *((_OWORD *)v664 + 7);
            *((_OWORD *)v663 + 6) = *((_OWORD *)v664 + 6);
            *((_OWORD *)v663 + 7) = v670;
            v663[128] = v664[128];
            *(_WORD *)(v663 + 129) = *(_WORD *)(v664 + 129);
            *((void *)v663 + 17) = *((void *)v664 + 17);
            long long v671 = *((_OWORD *)v664 + 10);
            *((_OWORD *)v663 + 9) = *((_OWORD *)v664 + 9);
            *((_OWORD *)v663 + 10) = v671;
            long long v672 = *((_OWORD *)v664 + 12);
            *((_OWORD *)v663 + 11) = *((_OWORD *)v664 + 11);
            *((_OWORD *)v663 + 12) = v672;
            *((_OWORD *)v663 + 13) = *((_OWORD *)v664 + 13);
            uint64_t v673 = v665[22];
            v674 = &v663[v673];
            v675 = &v664[v673];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v664[v673], 1, v14))
            {
              uint64_t v676 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v674, v675, *(void *)(*(void *)(v676 - 8) + 64));
            }
            else
            {
              v1193(v674, v675, v14);
              __swift_storeEnumTagSinglePayload((uint64_t)v674, 0, 1, v14);
            }
            uint64_t v707 = v665[23];
            v708 = &v663[v707];
            v709 = &v664[v707];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v664[v707], 1, v14))
            {
              uint64_t v710 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v708, v709, *(void *)(*(void *)(v710 - 8) + 64));
            }
            else
            {
              v1193(v708, v709, v14);
              __swift_storeEnumTagSinglePayload((uint64_t)v708, 0, 1, v14);
            }
            uint64_t v719 = v665[24];
            v720 = &v663[v719];
            v721 = &v664[v719];
            *(void *)v720 = *(void *)v721;
            v720[8] = v721[8];
            uint64_t v722 = v665[25];
            v723 = &v663[v722];
            v724 = &v664[v722];
            uint64_t v725 = type metadata accessor for URL();
            v20 = v1172;
            if (__swift_getEnumTagSinglePayload((uint64_t)v724, 1, v725))
            {
              uint64_t v726 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v723, v724, *(void *)(*(void *)(v726 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v725 - 8) + 32))(v723, v724, v725);
              __swift_storeEnumTagSinglePayload((uint64_t)v723, 0, 1, v725);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v663, 0, 1, (uint64_t)v665);
            v22 = __dst;
          }
          uint64_t v742 = v22[11];
          v743 = &v20[v742];
          v744 = &v1196[v742];
          v745 = (int *)type metadata accessor for FlightReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v744, 1, (uint64_t)v745))
          {
            uint64_t v746 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
            memcpy(v743, v744, *(void *)(*(void *)(v746 - 8) + 64));
          }
          else
          {
            long long v747 = *((_OWORD *)v744 + 1);
            *(_OWORD *)v743 = *(_OWORD *)v744;
            *((_OWORD *)v743 + 1) = v747;
            long long v748 = *((_OWORD *)v744 + 3);
            *((_OWORD *)v743 + 2) = *((_OWORD *)v744 + 2);
            *((_OWORD *)v743 + 3) = v748;
            long long v749 = *((_OWORD *)v744 + 5);
            *((_OWORD *)v743 + 4) = *((_OWORD *)v744 + 4);
            *((_OWORD *)v743 + 5) = v749;
            v743[96] = v744[96];
            *(_OWORD *)(v743 + 104) = *(_OWORD *)(v744 + 104);
            uint64_t v750 = v745[13];
            v751 = &v743[v750];
            v752 = &v744[v750];
            uint64_t v753 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v752, 1, v753))
            {
              uint64_t v754 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v751, v752, *(void *)(*(void *)(v754 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v753 - 8) + 32))(v751, v752, v753);
              __swift_storeEnumTagSinglePayload((uint64_t)v751, 0, 1, v753);
            }
            uint64_t v780 = v745[14];
            v781 = &v743[v780];
            v782 = &v744[v780];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v744[v780], 1, v753))
            {
              uint64_t v783 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v781, v782, *(void *)(*(void *)(v783 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v753 - 8) + 32))(v781, v782, v753);
              __swift_storeEnumTagSinglePayload((uint64_t)v781, 0, 1, v753);
            }
            *(_OWORD *)&v743[v745[15]] = *(_OWORD *)&v744[v745[15]];
            *(_OWORD *)&v743[v745[16]] = *(_OWORD *)&v744[v745[16]];
            *(_OWORD *)&v743[v745[17]] = *(_OWORD *)&v744[v745[17]];
            uint64_t v792 = v745[18];
            v793 = &v743[v792];
            v794 = &v744[v792];
            uint64_t v795 = type metadata accessor for DateComponents();
            v796 = *(void (**)(char *, char *, uint64_t))(*(void *)(v795 - 8) + 32);
            v796(v793, v794, v795);
            v796(&v743[v745[19]], &v744[v745[19]], v795);
            *(_OWORD *)&v743[v745[20]] = *(_OWORD *)&v744[v745[20]];
            *(_OWORD *)&v743[v745[21]] = *(_OWORD *)&v744[v745[21]];
            *(_OWORD *)&v743[v745[22]] = *(_OWORD *)&v744[v745[22]];
            *(_OWORD *)&v743[v745[23]] = *(_OWORD *)&v744[v745[23]];
            *(_OWORD *)&v743[v745[24]] = *(_OWORD *)&v744[v745[24]];
            *(_OWORD *)&v743[v745[25]] = *(_OWORD *)&v744[v745[25]];
            *(_OWORD *)&v743[v745[26]] = *(_OWORD *)&v744[v745[26]];
            *(_OWORD *)&v743[v745[27]] = *(_OWORD *)&v744[v745[27]];
            *(_OWORD *)&v743[v745[28]] = *(_OWORD *)&v744[v745[28]];
            *(_OWORD *)&v743[v745[29]] = *(_OWORD *)&v744[v745[29]];
            *(_OWORD *)&v743[v745[30]] = *(_OWORD *)&v744[v745[30]];
            *(_OWORD *)&v743[v745[31]] = *(_OWORD *)&v744[v745[31]];
            *(_OWORD *)&v743[v745[32]] = *(_OWORD *)&v744[v745[32]];
            *(void *)&v743[v745[33]] = *(void *)&v744[v745[33]];
            *(void *)&v743[v745[34]] = *(void *)&v744[v745[34]];
            *(_OWORD *)&v743[v745[35]] = *(_OWORD *)&v744[v745[35]];
            *(_OWORD *)&v743[v745[36]] = *(_OWORD *)&v744[v745[36]];
            *(_OWORD *)&v743[v745[37]] = *(_OWORD *)&v744[v745[37]];
            uint64_t v797 = v745[38];
            v798 = &v743[v797];
            v799 = &v744[v797];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v744[v797], 1, v1187))
            {
              uint64_t v800 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v798, v799, *(void *)(*(void *)(v800 - 8) + 64));
            }
            else
            {
              v1193(v798, v799, v1187);
              __swift_storeEnumTagSinglePayload((uint64_t)v798, 0, 1, v1187);
            }
            a3 = v1200;
            *(_OWORD *)&v743[v745[39]] = *(_OWORD *)&v744[v745[39]];
            *(_OWORD *)&v743[v745[40]] = *(_OWORD *)&v744[v745[40]];
            uint64_t v819 = v745[41];
            v820 = &v743[v819];
            v821 = &v744[v819];
            *(void *)v820 = *(void *)v821;
            v820[8] = v821[8];
            *(_OWORD *)&v743[v745[42]] = *(_OWORD *)&v744[v745[42]];
            uint64_t v822 = v745[43];
            v823 = &v743[v822];
            v824 = &v744[v822];
            *(_OWORD *)v823 = *(_OWORD *)v824;
            *(void *)(v823 + 13) = *(void *)(v824 + 13);
            *(_OWORD *)&v743[v745[44]] = *(_OWORD *)&v744[v745[44]];
            *(_OWORD *)&v743[v745[45]] = *(_OWORD *)&v744[v745[45]];
            *(_OWORD *)&v743[v745[46]] = *(_OWORD *)&v744[v745[46]];
            *(_OWORD *)&v743[v745[47]] = *(_OWORD *)&v744[v745[47]];
            __swift_storeEnumTagSinglePayload((uint64_t)v743, 0, 1, (uint64_t)v745);
            v20 = v1172;
            v22 = __dst;
          }
          uint64_t v825 = v22[12];
          v826 = &v20[v825];
          v827 = &v1196[v825];
          v828 = (int *)type metadata accessor for HotelReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v827, 1, (uint64_t)v828))
          {
            uint64_t v829 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
            memcpy(v826, v827, *(void *)(*(void *)(v829 - 8) + 64));
          }
          else
          {
            long long v830 = *((_OWORD *)v827 + 1);
            *(_OWORD *)v826 = *(_OWORD *)v827;
            *((_OWORD *)v826 + 1) = v830;
            long long v831 = *((_OWORD *)v827 + 3);
            *((_OWORD *)v826 + 2) = *((_OWORD *)v827 + 2);
            *((_OWORD *)v826 + 3) = v831;
            long long v832 = *((_OWORD *)v827 + 5);
            *((_OWORD *)v826 + 4) = *((_OWORD *)v827 + 4);
            *((_OWORD *)v826 + 5) = v832;
            v826[96] = v827[96];
            *(_OWORD *)(v826 + 104) = *(_OWORD *)(v827 + 104);
            *(_OWORD *)(v826 + 120) = *(_OWORD *)(v827 + 120);
            uint64_t v833 = v828[14];
            v1177 = &v826[v833];
            v834 = &v827[v833];
            uint64_t v835 = type metadata accessor for DateComponents();
            if (__swift_getEnumTagSinglePayload((uint64_t)v834, 1, v835))
            {
              uint64_t v836 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1177, v834, *(void *)(*(void *)(v836 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v835 - 8) + 32))(v1177, v834, v835);
              __swift_storeEnumTagSinglePayload((uint64_t)v1177, 0, 1, v835);
            }
            uint64_t v875 = v828[15];
            v1178 = &v826[v875];
            v876 = &v827[v875];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v827[v875], 1, v835))
            {
              uint64_t v877 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1178, v876, *(void *)(*(void *)(v877 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v835 - 8) + 32))(v1178, v876, v835);
              __swift_storeEnumTagSinglePayload((uint64_t)v1178, 0, 1, v835);
            }
            *(_OWORD *)&v826[v828[16]] = *(_OWORD *)&v827[v828[16]];
            *(_OWORD *)&v826[v828[17]] = *(_OWORD *)&v827[v828[17]];
            *(_OWORD *)&v826[v828[18]] = *(_OWORD *)&v827[v828[18]];
            *(_OWORD *)&v826[v828[19]] = *(_OWORD *)&v827[v828[19]];
            *(_OWORD *)&v826[v828[20]] = *(_OWORD *)&v827[v828[20]];
            *(void *)&v826[v828[21]] = *(void *)&v827[v828[21]];
            *(void *)&v826[v828[22]] = *(void *)&v827[v828[22]];
            uint64_t v886 = v828[23];
            v887 = &v826[v886];
            v888 = &v827[v886];
            v887[8] = v888[8];
            *(void *)v887 = *(void *)v888;
            uint64_t v889 = v828[24];
            v890 = &v826[v889];
            v891 = &v827[v889];
            v890[8] = v891[8];
            *(void *)v890 = *(void *)v891;
            *(_OWORD *)&v826[v828[25]] = *(_OWORD *)&v827[v828[25]];
            *(_OWORD *)&v826[v828[26]] = *(_OWORD *)&v827[v828[26]];
            *(_OWORD *)&v826[v828[27]] = *(_OWORD *)&v827[v828[27]];
            *(_OWORD *)&v826[v828[28]] = *(_OWORD *)&v827[v828[28]];
            uint64_t v892 = v828[29];
            v893 = &v826[v892];
            v894 = &v827[v892];
            *(void *)v893 = *(void *)v894;
            v893[8] = v894[8];
            __swift_storeEnumTagSinglePayload((uint64_t)v826, 0, 1, (uint64_t)v828);
            v22 = __dst;
          }
          uint64_t v895 = v22[13];
          v896 = &v20[v895];
          v897 = &v1196[v895];
          v898 = (int *)type metadata accessor for RestaurantReservation(0);
          v10 = v1183;
          if (__swift_getEnumTagSinglePayload((uint64_t)v897, 1, (uint64_t)v898))
          {
            uint64_t v899 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
            memcpy(v896, v897, *(void *)(*(void *)(v899 - 8) + 64));
          }
          else
          {
            long long v900 = *((_OWORD *)v897 + 1);
            *(_OWORD *)v896 = *(_OWORD *)v897;
            *((_OWORD *)v896 + 1) = v900;
            long long v901 = *((_OWORD *)v897 + 3);
            *((_OWORD *)v896 + 2) = *((_OWORD *)v897 + 2);
            *((_OWORD *)v896 + 3) = v901;
            long long v902 = *((_OWORD *)v897 + 5);
            *((_OWORD *)v896 + 4) = *((_OWORD *)v897 + 4);
            *((_OWORD *)v896 + 5) = v902;
            v896[96] = v897[96];
            *(_OWORD *)(v896 + 104) = *(_OWORD *)(v897 + 104);
            *(_OWORD *)(v896 + 120) = *(_OWORD *)(v897 + 120);
            uint64_t v903 = v898[14];
            v1199 = &v896[v903];
            v904 = &v897[v903];
            uint64_t v905 = type metadata accessor for DateComponents();
            if (__swift_getEnumTagSinglePayload((uint64_t)v904, 1, v905))
            {
              uint64_t v906 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1199, v904, *(void *)(*(void *)(v906 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v905 - 8) + 32))(v1199, v904, v905);
              __swift_storeEnumTagSinglePayload((uint64_t)v1199, 0, 1, v905);
            }
            *(_OWORD *)&v896[v898[15]] = *(_OWORD *)&v897[v898[15]];
            *(_OWORD *)&v896[v898[16]] = *(_OWORD *)&v897[v898[16]];
            *(_OWORD *)&v896[v898[17]] = *(_OWORD *)&v897[v898[17]];
            *(_OWORD *)&v896[v898[18]] = *(_OWORD *)&v897[v898[18]];
            *(_OWORD *)&v896[v898[19]] = *(_OWORD *)&v897[v898[19]];
            *(void *)&v896[v898[20]] = *(void *)&v897[v898[20]];
            *(_OWORD *)&v896[v898[21]] = *(_OWORD *)&v897[v898[21]];
            *(_OWORD *)&v896[v898[22]] = *(_OWORD *)&v897[v898[22]];
            *(_OWORD *)&v896[v898[23]] = *(_OWORD *)&v897[v898[23]];
            __swift_storeEnumTagSinglePayload((uint64_t)v896, 0, 1, (uint64_t)v898);
            v22 = __dst;
            v10 = v1183;
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, (uint64_t)v22);
        }
        uint64_t v951 = v10[22];
        v952 = &a1[v951];
        v953 = &a2[v951];
        v954 = (int *)type metadata accessor for PreExtractedCard(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v953, 1, (uint64_t)v954))
        {
          uint64_t v955 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
          memcpy(v952, v953, *(void *)(*(void *)(v955 - 8) + 64));
        }
        else
        {
          long long v956 = *((_OWORD *)v953 + 1);
          *(_OWORD *)v952 = *(_OWORD *)v953;
          *((_OWORD *)v952 + 1) = v956;
          long long v957 = *((_OWORD *)v953 + 3);
          *((_OWORD *)v952 + 2) = *((_OWORD *)v953 + 2);
          *((_OWORD *)v952 + 3) = v957;
          long long v958 = *((_OWORD *)v953 + 5);
          *((_OWORD *)v952 + 4) = *((_OWORD *)v953 + 4);
          *((_OWORD *)v952 + 5) = v958;
          uint64_t v959 = v954[10];
          v960 = &v952[v959];
          v961 = &v953[v959];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v953[v959], 1, v1187))
          {
            uint64_t v962 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v960, v961, *(void *)(*(void *)(v962 - 8) + 64));
          }
          else
          {
            v1193(v960, v961, v1187);
            __swift_storeEnumTagSinglePayload((uint64_t)v960, 0, 1, v1187);
          }
          uint64_t v963 = v954[11];
          v964 = &v952[v963];
          v965 = &v953[v963];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v953[v963], 1, v1187))
          {
            uint64_t v966 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v964, v965, *(void *)(*(void *)(v966 - 8) + 64));
          }
          else
          {
            v1193(v964, v965, v1187);
            __swift_storeEnumTagSinglePayload((uint64_t)v964, 0, 1, v1187);
          }
          *(_OWORD *)&v952[v954[12]] = *(_OWORD *)&v953[v954[12]];
          *(_OWORD *)&v952[v954[13]] = *(_OWORD *)&v953[v954[13]];
          *(_OWORD *)&v952[v954[14]] = *(_OWORD *)&v953[v954[14]];
          uint64_t v967 = v954[15];
          v968 = &v952[v967];
          v969 = &v953[v967];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v953[v967], 1, v1187))
          {
            uint64_t v970 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v968, v969, *(void *)(*(void *)(v970 - 8) + 64));
          }
          else
          {
            v1193(v968, v969, v1187);
            __swift_storeEnumTagSinglePayload((uint64_t)v968, 0, 1, v1187);
          }
          a3 = v1200;
          *(_OWORD *)&v952[v954[16]] = *(_OWORD *)&v953[v954[16]];
          *(_OWORD *)&v952[v954[17]] = *(_OWORD *)&v953[v954[17]];
          *(_OWORD *)&v952[v954[18]] = *(_OWORD *)&v953[v954[18]];
          *(_OWORD *)&v952[v954[19]] = *(_OWORD *)&v953[v954[19]];
          *(_OWORD *)&v952[v954[20]] = *(_OWORD *)&v953[v954[20]];
          *(_OWORD *)&v952[v954[21]] = *(_OWORD *)&v953[v954[21]];
          *(_OWORD *)&v952[v954[22]] = *(_OWORD *)&v953[v954[22]];
          *(_OWORD *)&v952[v954[23]] = *(_OWORD *)&v953[v954[23]];
          __swift_storeEnumTagSinglePayload((uint64_t)v952, 0, 1, (uint64_t)v954);
        }
        uint64_t v971 = v10[23];
        v972 = &a1[v971];
        v973 = &a2[v971];
        v974 = (int *)type metadata accessor for PreExtractedContact(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v973, 1, (uint64_t)v974))
        {
          uint64_t v975 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
          memcpy(v972, v973, *(void *)(*(void *)(v975 - 8) + 64));
        }
        else
        {
          long long v976 = *((_OWORD *)v973 + 1);
          *(_OWORD *)v972 = *(_OWORD *)v973;
          *((_OWORD *)v972 + 1) = v976;
          long long v977 = *((_OWORD *)v973 + 3);
          *((_OWORD *)v972 + 2) = *((_OWORD *)v973 + 2);
          *((_OWORD *)v972 + 3) = v977;
          long long v978 = *((_OWORD *)v973 + 5);
          *((_OWORD *)v972 + 4) = *((_OWORD *)v973 + 4);
          *((_OWORD *)v972 + 5) = v978;
          uint64_t v979 = v974[11];
          v980 = &v972[v979];
          v981 = &v973[v979];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v973[v979], 1, v1187))
          {
            uint64_t v982 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v980, v981, *(void *)(*(void *)(v982 - 8) + 64));
          }
          else
          {
            v1193(v980, v981, v1187);
            __swift_storeEnumTagSinglePayload((uint64_t)v980, 0, 1, v1187);
          }
          *(_OWORD *)&v972[v974[12]] = *(_OWORD *)&v973[v974[12]];
          *(void *)&v972[v974[13]] = *(void *)&v973[v974[13]];
          uint64_t v983 = v974[14];
          v984 = &v972[v983];
          v985 = &v973[v983];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v973[v983], 1, v1187))
          {
            uint64_t v986 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v984, v985, *(void *)(*(void *)(v986 - 8) + 64));
          }
          else
          {
            v1193(v984, v985, v1187);
            __swift_storeEnumTagSinglePayload((uint64_t)v984, 0, 1, v1187);
          }
          a3 = v1200;
          *(void *)&v972[v974[15]] = *(void *)&v973[v974[15]];
          *(void *)&v972[v974[16]] = *(void *)&v973[v974[16]];
          *(_OWORD *)&v972[v974[17]] = *(_OWORD *)&v973[v974[17]];
          *(void *)&v972[v974[18]] = *(void *)&v973[v974[18]];
          *(void *)&v972[v974[19]] = *(void *)&v973[v974[19]];
          __swift_storeEnumTagSinglePayload((uint64_t)v972, 0, 1, (uint64_t)v974);
        }
        uint64_t v987 = v10[24];
        v988 = &a1[v987];
        v989 = &a2[v987];
        v990 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v989, 1, (uint64_t)v990))
        {
          uint64_t v991 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
          memcpy(v988, v989, *(void *)(*(void *)(v991 - 8) + 64));
        }
        else
        {
          v1186 = v10;
          long long v992 = *((_OWORD *)v989 + 1);
          *(_OWORD *)v988 = *(_OWORD *)v989;
          *((_OWORD *)v988 + 1) = v992;
          long long v993 = *((_OWORD *)v989 + 3);
          *((_OWORD *)v988 + 2) = *((_OWORD *)v989 + 2);
          *((_OWORD *)v988 + 3) = v993;
          uint64_t v994 = v990[8];
          v995 = &v988[v994];
          v996 = &v989[v994];
          uint64_t v997 = type metadata accessor for URL();
          if (__swift_getEnumTagSinglePayload((uint64_t)v996, 1, v997))
          {
            uint64_t v998 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v995, v996, *(void *)(*(void *)(v998 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v997 - 8) + 32))(v995, v996, v997);
            __swift_storeEnumTagSinglePayload((uint64_t)v995, 0, 1, v997);
          }
          *(_OWORD *)&v988[v990[9]] = *(_OWORD *)&v989[v990[9]];
          *(_OWORD *)&v988[v990[10]] = *(_OWORD *)&v989[v990[10]];
          *(_OWORD *)&v988[v990[11]] = *(_OWORD *)&v989[v990[11]];
          uint64_t v999 = v990[12];
          v1000 = &v988[v999];
          v1001 = &v989[v999];
          v10 = v1186;
          if (__swift_getEnumTagSinglePayload((uint64_t)&v989[v999], 1, v1187))
          {
            uint64_t v1002 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1000, v1001, *(void *)(*(void *)(v1002 - 8) + 64));
          }
          else
          {
            v1193(v1000, v1001, v1187);
            __swift_storeEnumTagSinglePayload((uint64_t)v1000, 0, 1, v1187);
          }
          uint64_t v1003 = v990[13];
          v1004 = &v988[v1003];
          v1005 = &v989[v1003];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v989[v1003], 1, v1187))
          {
            uint64_t v1006 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1004, v1005, *(void *)(*(void *)(v1006 - 8) + 64));
          }
          else
          {
            v1193(v1004, v1005, v1187);
            __swift_storeEnumTagSinglePayload((uint64_t)v1004, 0, 1, v1187);
          }
          a3 = v1200;
          uint64_t v1007 = v990[14];
          v1008 = &v988[v1007];
          v1009 = &v989[v1007];
          *(void *)v1008 = *(void *)v1009;
          v1008[8] = v1009[8];
          *(_OWORD *)&v988[v990[15]] = *(_OWORD *)&v989[v990[15]];
          *(_OWORD *)&v988[v990[16]] = *(_OWORD *)&v989[v990[16]];
          *(_OWORD *)&v988[v990[17]] = *(_OWORD *)&v989[v990[17]];
          *(_OWORD *)&v988[v990[18]] = *(_OWORD *)&v989[v990[18]];
          *(_OWORD *)&v988[v990[19]] = *(_OWORD *)&v989[v990[19]];
          __swift_storeEnumTagSinglePayload((uint64_t)v988, 0, 1, (uint64_t)v990);
        }
        memcpy(&a1[v10[25]], &a2[v10[25]], 0x90uLL);
        goto LABEL_523;
      case 1u:
        long long v24 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v24;
        long long v25 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v25;
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        v26 = (int *)type metadata accessor for MobileSMSDocument(0);
        uint64_t v27 = v26[10];
        v28 = &a1[v27];
        v29 = &a2[v27];
        uint64_t v30 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v30))
        {
          uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v28, v29, v30);
          __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v30);
        }
        uint64_t v230 = v26[11];
        v231 = &a1[v230];
        v232 = &a2[v230];
        uint64_t v233 = type metadata accessor for URL();
        v1197 = (void *)v30;
        if (__swift_getEnumTagSinglePayload((uint64_t)v232, 1, v233))
        {
          uint64_t v234 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v231, v232, *(void *)(*(void *)(v234 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v233 - 8) + 32))(v231, v232, v233);
          __swift_storeEnumTagSinglePayload((uint64_t)v231, 0, 1, v233);
        }
        *(void *)&a1[v26[12]] = *(void *)&a2[v26[12]];
        *(_OWORD *)&a1[v26[13]] = *(_OWORD *)&a2[v26[13]];
        *(_OWORD *)&a1[v26[14]] = *(_OWORD *)&a2[v26[14]];
        *(void *)&a1[v26[15]] = *(void *)&a2[v26[15]];
        *(void *)&a1[v26[16]] = *(void *)&a2[v26[16]];
        uint64_t v289 = v26[17];
        v290 = &a1[v289];
        v291 = &a2[v289];
        long long v292 = *((_OWORD *)v291 + 1);
        *(_OWORD *)v290 = *(_OWORD *)v291;
        *((_OWORD *)v290 + 1) = v292;
        *((void *)v290 + 4) = *((void *)v291 + 4);
        *(_OWORD *)&a1[v26[18]] = *(_OWORD *)&a2[v26[18]];
        uint64_t v293 = v26[19];
        v294 = &a1[v293];
        v295 = &a2[v293];
        v296 = (int *)type metadata accessor for PartialExtractedAttributes(0);
        uint64_t v1190 = v233;
        uint64_t v1202 = a3;
        if (__swift_getEnumTagSinglePayload((uint64_t)v295, 1, (uint64_t)v296))
        {
          uint64_t v297 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
          memcpy(v294, v295, *(void *)(*(void *)(v297 - 8) + 64));
        }
        else
        {
          *(_OWORD *)v294 = *(_OWORD *)v295;
          uint64_t v337 = v296[5];
          v338 = &v294[v337];
          v1195 = v295;
          v339 = &v295[v337];
          uint64_t v340 = type metadata accessor for RentalCarReservation(0);
          v1189 = v26;
          v1185 = v296;
          if (__swift_getEnumTagSinglePayload((uint64_t)v339, 1, v340))
          {
            uint64_t v341 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
            memcpy(v338, v339, *(void *)(*(void *)(v341 - 8) + 64));
          }
          else
          {
            long long v371 = *((_OWORD *)v339 + 1);
            *(_OWORD *)v338 = *(_OWORD *)v339;
            *((_OWORD *)v338 + 1) = v371;
            long long v372 = *((_OWORD *)v339 + 3);
            *((_OWORD *)v338 + 2) = *((_OWORD *)v339 + 2);
            *((_OWORD *)v338 + 3) = v372;
            long long v373 = *((_OWORD *)v339 + 5);
            *((_OWORD *)v338 + 4) = *((_OWORD *)v339 + 4);
            *((_OWORD *)v338 + 5) = v373;
            long long v374 = *((_OWORD *)v339 + 7);
            *((_OWORD *)v338 + 6) = *((_OWORD *)v339 + 6);
            *((_OWORD *)v338 + 7) = v374;
            v338[128] = v339[128];
            *(_WORD *)(v338 + 129) = *(_WORD *)(v339 + 129);
            *((void *)v338 + 17) = *((void *)v339 + 17);
            long long v375 = *((_OWORD *)v339 + 10);
            *((_OWORD *)v338 + 9) = *((_OWORD *)v339 + 9);
            *((_OWORD *)v338 + 10) = v375;
            long long v376 = *((_OWORD *)v339 + 12);
            *((_OWORD *)v338 + 11) = *((_OWORD *)v339 + 11);
            *((_OWORD *)v338 + 12) = v376;
            long long v377 = *((_OWORD *)v339 + 14);
            *((_OWORD *)v338 + 13) = *((_OWORD *)v339 + 13);
            *((_OWORD *)v338 + 14) = v377;
            *((_OWORD *)v338 + 15) = *((_OWORD *)v339 + 15);
            *((void *)v338 + 32) = *((void *)v339 + 32);
            *(_OWORD *)(v338 + 264) = *(_OWORD *)(v339 + 264);
            *(_OWORD *)(v338 + 280) = *(_OWORD *)(v339 + 280);
            *(_OWORD *)(v338 + 296) = *(_OWORD *)(v339 + 296);
            *(_OWORD *)(v338 + 312) = *(_OWORD *)(v339 + 312);
            *(_OWORD *)(v338 + 328) = *(_OWORD *)(v339 + 328);
            *(_OWORD *)(v338 + 344) = *(_OWORD *)(v339 + 344);
            *(_OWORD *)(v338 + 360) = *(_OWORD *)(v339 + 360);
            v338[384] = v339[384];
            *((void *)v338 + 47) = *((void *)v339 + 47);
            *(_OWORD *)(v338 + 392) = *(_OWORD *)(v339 + 392);
            *(_OWORD *)(v338 + 408) = *(_OWORD *)(v339 + 408);
            uint64_t v378 = *(int *)(v340 + 140);
            v379 = &v338[v378];
            v380 = &v339[v378];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v339[v378], 1, (uint64_t)v1197))
            {
              uint64_t v381 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v379, v380, *(void *)(*(void *)(v381 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1197 - 1) + 32))(v379, v380, v1197);
              __swift_storeEnumTagSinglePayload((uint64_t)v379, 0, 1, (uint64_t)v1197);
            }
            uint64_t v390 = *(int *)(v340 + 144);
            v391 = &v338[v390];
            v392 = &v339[v390];
            v26 = v1189;
            if (__swift_getEnumTagSinglePayload((uint64_t)v392, 1, (uint64_t)v1197))
            {
              uint64_t v393 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v391, v392, *(void *)(*(void *)(v393 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1197 - 1) + 32))(v391, v392, v1197);
              __swift_storeEnumTagSinglePayload((uint64_t)v391, 0, 1, (uint64_t)v1197);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v338, 0, 1, v340);
            v296 = v1185;
          }
          uint64_t v426 = v296[6];
          v427 = &v294[v426];
          v428 = (_OWORD *)((char *)v1195 + v426);
          uint64_t v429 = type metadata accessor for TicketedTransportation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v428, 1, v429))
          {
            uint64_t v430 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
            memcpy(v427, v428, *(void *)(*(void *)(v430 - 8) + 64));
          }
          else
          {
            long long v431 = v428[1];
            *(_OWORD *)v427 = *v428;
            *((_OWORD *)v427 + 1) = v431;
            long long v432 = v428[3];
            *((_OWORD *)v427 + 2) = v428[2];
            *((_OWORD *)v427 + 3) = v432;
            long long v433 = v428[5];
            *((_OWORD *)v427 + 4) = v428[4];
            *((_OWORD *)v427 + 5) = v433;
            long long v434 = v428[7];
            *((_OWORD *)v427 + 6) = v428[6];
            *((_OWORD *)v427 + 7) = v434;
            v427[128] = *((unsigned char *)v428 + 128);
            *(_WORD *)(v427 + 129) = *(_WORD *)((char *)v428 + 129);
            *((void *)v427 + 17) = *((void *)v428 + 17);
            long long v435 = v428[10];
            *((_OWORD *)v427 + 9) = v428[9];
            *((_OWORD *)v427 + 10) = v435;
            long long v436 = v428[12];
            *((_OWORD *)v427 + 11) = v428[11];
            *((_OWORD *)v427 + 12) = v436;
            *((void *)v427 + 26) = *((void *)v428 + 26);
            *(_OWORD *)(v427 + 216) = *(_OWORD *)((char *)v428 + 216);
            *(_OWORD *)(v427 + 232) = *(_OWORD *)((char *)v428 + 232);
            *(_OWORD *)(v427 + 248) = *(_OWORD *)((char *)v428 + 248);
            *(_OWORD *)(v427 + 264) = *(_OWORD *)((char *)v428 + 264);
            v427[296] = *((unsigned char *)v428 + 296);
            uint64_t v437 = *((void *)v428 + 36);
            *((void *)v427 + 35) = *((void *)v428 + 35);
            *((void *)v427 + 36) = v437;
            uint64_t v438 = *(int *)(v429 + 112);
            __dsta = &v427[v438];
            v439 = (char *)v428 + v438;
            if (__swift_getEnumTagSinglePayload((uint64_t)v428 + v438, 1, (uint64_t)v1197))
            {
              uint64_t v440 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__dsta, v439, *(void *)(*(void *)(v440 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1197 - 1) + 32))(__dsta, v439, v1197);
              __swift_storeEnumTagSinglePayload((uint64_t)__dsta, 0, 1, (uint64_t)v1197);
            }
            uint64_t v449 = *(int *)(v429 + 116);
            __dstb = &v427[v449];
            v450 = (char *)v428 + v449;
            v26 = v1189;
            if (__swift_getEnumTagSinglePayload((uint64_t)v450, 1, (uint64_t)v1197))
            {
              uint64_t v451 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__dstb, v450, *(void *)(*(void *)(v451 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1197 - 1) + 32))(__dstb, v450, v1197);
              __swift_storeEnumTagSinglePayload((uint64_t)__dstb, 0, 1, (uint64_t)v1197);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v427, 0, 1, v429);
            v296 = v1185;
          }
          uint64_t v488 = v296[7];
          v489 = &v294[v488];
          v490 = (_OWORD *)((char *)v1195 + v488);
          v491 = (int *)type metadata accessor for TicketedShow(0);
          __dstc = v294;
          if (__swift_getEnumTagSinglePayload((uint64_t)v490, 1, (uint64_t)v491))
          {
            uint64_t v492 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
            memcpy(v489, v490, *(void *)(*(void *)(v492 - 8) + 64));
          }
          else
          {
            long long v493 = v490[1];
            *(_OWORD *)v489 = *v490;
            *((_OWORD *)v489 + 1) = v493;
            long long v494 = v490[3];
            *((_OWORD *)v489 + 2) = v490[2];
            *((_OWORD *)v489 + 3) = v494;
            long long v495 = v490[5];
            *((_OWORD *)v489 + 4) = v490[4];
            *((_OWORD *)v489 + 5) = v495;
            long long v496 = v490[7];
            *((_OWORD *)v489 + 6) = v490[6];
            *((_OWORD *)v489 + 7) = v496;
            v489[128] = *((unsigned char *)v490 + 128);
            *(_WORD *)(v489 + 129) = *(_WORD *)((char *)v490 + 129);
            *((void *)v489 + 17) = *((void *)v490 + 17);
            long long v497 = v490[10];
            *((_OWORD *)v489 + 9) = v490[9];
            *((_OWORD *)v489 + 10) = v497;
            long long v498 = v490[12];
            *((_OWORD *)v489 + 11) = v490[11];
            *((_OWORD *)v489 + 12) = v498;
            long long v499 = v490[14];
            *((_OWORD *)v489 + 13) = v490[13];
            *((_OWORD *)v489 + 14) = v499;
            *((void *)v489 + 30) = *((void *)v490 + 30);
            *(_OWORD *)(v489 + 248) = *(_OWORD *)((char *)v490 + 248);
            *(_OWORD *)(v489 + 264) = *(_OWORD *)((char *)v490 + 264);
            v489[296] = *((unsigned char *)v490 + 296);
            uint64_t v500 = *((void *)v490 + 36);
            *((void *)v489 + 35) = *((void *)v490 + 35);
            *((void *)v489 + 36) = v500;
            *((_OWORD *)v489 + 19) = v490[19];
            uint64_t v501 = v491[29];
            v502 = &v489[v501];
            v503 = (char *)v490 + v501;
            if (__swift_getEnumTagSinglePayload((uint64_t)v490 + v501, 1, v1190))
            {
              uint64_t v504 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v502, v503, *(void *)(*(void *)(v504 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1190 - 8) + 32))(v502, v503, v1190);
              __swift_storeEnumTagSinglePayload((uint64_t)v502, 0, 1, v1190);
            }
            *(_OWORD *)&v489[v491[30]] = *(_OWORD *)((char *)v490 + v491[30]);
            uint64_t v513 = v491[31];
            v1173 = &v489[v513];
            v514 = (char *)v490 + v513;
            if (__swift_getEnumTagSinglePayload((uint64_t)v490 + v513, 1, (uint64_t)v1197))
            {
              uint64_t v515 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1173, v514, *(void *)(*(void *)(v515 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1197 - 1) + 32))(v1173, v514, v1197);
              __swift_storeEnumTagSinglePayload((uint64_t)v1173, 0, 1, (uint64_t)v1197);
            }
            uint64_t v524 = v491[32];
            v1174 = &v489[v524];
            v525 = (char *)v490 + v524;
            v26 = v1189;
            if (__swift_getEnumTagSinglePayload((uint64_t)v525, 1, (uint64_t)v1197))
            {
              uint64_t v526 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1174, v525, *(void *)(*(void *)(v526 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1197 - 1) + 32))(v1174, v525, v1197);
              __swift_storeEnumTagSinglePayload((uint64_t)v1174, 0, 1, (uint64_t)v1197);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v489, 0, 1, (uint64_t)v491);
            v296 = v1185;
          }
          uint64_t v561 = v296[8];
          v562 = &v294[v561];
          v563 = (_OWORD *)((char *)v1195 + v561);
          uint64_t v564 = type metadata accessor for Appointment(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v563, 1, v564))
          {
            uint64_t v565 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
            memcpy(v562, v563, *(void *)(*(void *)(v565 - 8) + 64));
          }
          else
          {
            long long v566 = v563[1];
            *(_OWORD *)v562 = *v563;
            *((_OWORD *)v562 + 1) = v566;
            long long v567 = v563[3];
            *((_OWORD *)v562 + 2) = v563[2];
            *((_OWORD *)v562 + 3) = v567;
            long long v568 = v563[5];
            *((_OWORD *)v562 + 4) = v563[4];
            *((_OWORD *)v562 + 5) = v568;
            long long v569 = v563[7];
            *((_OWORD *)v562 + 6) = v563[6];
            *((_OWORD *)v562 + 7) = v569;
            v562[128] = *((unsigned char *)v563 + 128);
            *(_WORD *)(v562 + 129) = *(_WORD *)((char *)v563 + 129);
            *((void *)v562 + 17) = *((void *)v563 + 17);
            long long v570 = v563[10];
            *((_OWORD *)v562 + 9) = v563[9];
            *((_OWORD *)v562 + 10) = v570;
            long long v571 = v563[12];
            *((_OWORD *)v562 + 11) = v563[11];
            *((_OWORD *)v562 + 12) = v571;
            long long v572 = v563[14];
            *((_OWORD *)v562 + 13) = v563[13];
            *((_OWORD *)v562 + 14) = v572;
            long long v573 = v563[16];
            *((_OWORD *)v562 + 15) = v563[15];
            *((_OWORD *)v562 + 16) = v573;
            v562[280] = *((unsigned char *)v563 + 280);
            *((void *)v562 + 34) = *((void *)v563 + 34);
            *((_OWORD *)v562 + 18) = v563[18];
            uint64_t v574 = *(int *)(v564 + 108);
            v1175 = &v562[v574];
            v575 = (char *)v563 + v574;
            if (__swift_getEnumTagSinglePayload((uint64_t)v563 + v574, 1, (uint64_t)v1197))
            {
              uint64_t v576 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1175, v575, *(void *)(*(void *)(v576 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1197 - 1) + 32))(v1175, v575, v1197);
              __swift_storeEnumTagSinglePayload((uint64_t)v1175, 0, 1, (uint64_t)v1197);
            }
            uint64_t v585 = *(int *)(v564 + 112);
            v1176 = &v562[v585];
            v586 = (char *)v563 + v585;
            v26 = v1189;
            if (__swift_getEnumTagSinglePayload((uint64_t)v586, 1, (uint64_t)v1197))
            {
              uint64_t v587 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1176, v586, *(void *)(*(void *)(v587 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1197 - 1) + 32))(v1176, v586, v1197);
              __swift_storeEnumTagSinglePayload((uint64_t)v1176, 0, 1, (uint64_t)v1197);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v562, 0, 1, v564);
            v296 = v1185;
          }
          uint64_t v620 = v296[9];
          v621 = &v294[v620];
          v622 = (_OWORD *)((char *)v1195 + v620);
          v623 = (int *)type metadata accessor for Party(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v622, 1, (uint64_t)v623))
          {
            uint64_t v624 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
            memcpy(v621, v622, *(void *)(*(void *)(v624 - 8) + 64));
          }
          else
          {
            long long v625 = v622[1];
            *(_OWORD *)v621 = *v622;
            *((_OWORD *)v621 + 1) = v625;
            long long v626 = v622[3];
            *((_OWORD *)v621 + 2) = v622[2];
            *((_OWORD *)v621 + 3) = v626;
            long long v627 = v622[5];
            *((_OWORD *)v621 + 4) = v622[4];
            *((_OWORD *)v621 + 5) = v627;
            long long v628 = v622[7];
            *((_OWORD *)v621 + 6) = v622[6];
            *((_OWORD *)v621 + 7) = v628;
            v621[128] = *((unsigned char *)v622 + 128);
            *(_WORD *)(v621 + 129) = *(_WORD *)((char *)v622 + 129);
            *((void *)v621 + 17) = *((void *)v622 + 17);
            long long v629 = v622[10];
            *((_OWORD *)v621 + 9) = v622[9];
            *((_OWORD *)v621 + 10) = v629;
            long long v630 = v622[12];
            *((_OWORD *)v621 + 11) = v622[11];
            *((_OWORD *)v621 + 12) = v630;
            long long v631 = v622[14];
            *((_OWORD *)v621 + 13) = v622[13];
            *((_OWORD *)v621 + 14) = v631;
            *((_OWORD *)v621 + 15) = v622[15];
            uint64_t v632 = v623[24];
            v633 = &v621[v632];
            v634 = (char *)v622 + v632;
            if (__swift_getEnumTagSinglePayload((uint64_t)v622 + v632, 1, (uint64_t)v1197))
            {
              uint64_t v635 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v633, v634, *(void *)(*(void *)(v635 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1197 - 1) + 32))(v633, v634, v1197);
              __swift_storeEnumTagSinglePayload((uint64_t)v633, 0, 1, (uint64_t)v1197);
            }
            uint64_t v644 = v623[25];
            v645 = &v621[v644];
            v646 = (char *)v622 + v644;
            if (__swift_getEnumTagSinglePayload((uint64_t)v622 + v644, 1, (uint64_t)v1197))
            {
              uint64_t v647 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v645, v646, *(void *)(*(void *)(v647 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1197 - 1) + 32))(v645, v646, v1197);
              __swift_storeEnumTagSinglePayload((uint64_t)v645, 0, 1, (uint64_t)v1197);
            }
            uint64_t v658 = v623[26];
            v659 = &v621[v658];
            v660 = (char *)v622 + v658;
            v26 = v1189;
            if (__swift_getEnumTagSinglePayload((uint64_t)v660, 1, v1190))
            {
              uint64_t v661 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v659, v660, *(void *)(*(void *)(v661 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1190 - 8) + 32))(v659, v660, v1190);
              __swift_storeEnumTagSinglePayload((uint64_t)v659, 0, 1, v1190);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v621, 0, 1, (uint64_t)v623);
            v296 = v1185;
          }
          uint64_t v692 = v296[10];
          v693 = &v294[v692];
          v694 = (_OWORD *)((char *)v1195 + v692);
          v695 = (int *)type metadata accessor for Trip(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v694, 1, (uint64_t)v695))
          {
            uint64_t v696 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
            memcpy(v693, v694, *(void *)(*(void *)(v696 - 8) + 64));
          }
          else
          {
            long long v697 = v694[1];
            *(_OWORD *)v693 = *v694;
            *((_OWORD *)v693 + 1) = v697;
            long long v698 = v694[3];
            *((_OWORD *)v693 + 2) = v694[2];
            *((_OWORD *)v693 + 3) = v698;
            long long v699 = v694[5];
            *((_OWORD *)v693 + 4) = v694[4];
            *((_OWORD *)v693 + 5) = v699;
            long long v700 = v694[7];
            *((_OWORD *)v693 + 6) = v694[6];
            *((_OWORD *)v693 + 7) = v700;
            v693[128] = *((unsigned char *)v694 + 128);
            *(_WORD *)(v693 + 129) = *(_WORD *)((char *)v694 + 129);
            *((void *)v693 + 17) = *((void *)v694 + 17);
            long long v701 = v694[10];
            *((_OWORD *)v693 + 9) = v694[9];
            *((_OWORD *)v693 + 10) = v701;
            long long v702 = v694[12];
            *((_OWORD *)v693 + 11) = v694[11];
            *((_OWORD *)v693 + 12) = v702;
            *((_OWORD *)v693 + 13) = v694[13];
            uint64_t v703 = v695[22];
            v704 = &v693[v703];
            v705 = (char *)v694 + v703;
            if (__swift_getEnumTagSinglePayload((uint64_t)v694 + v703, 1, (uint64_t)v1197))
            {
              uint64_t v706 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v704, v705, *(void *)(*(void *)(v706 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1197 - 1) + 32))(v704, v705, v1197);
              __swift_storeEnumTagSinglePayload((uint64_t)v704, 0, 1, (uint64_t)v1197);
            }
            uint64_t v715 = v695[23];
            v716 = &v693[v715];
            v717 = (char *)v694 + v715;
            if (__swift_getEnumTagSinglePayload((uint64_t)v694 + v715, 1, (uint64_t)v1197))
            {
              uint64_t v718 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v716, v717, *(void *)(*(void *)(v718 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1197 - 1) + 32))(v716, v717, v1197);
              __swift_storeEnumTagSinglePayload((uint64_t)v716, 0, 1, (uint64_t)v1197);
            }
            uint64_t v735 = v695[24];
            v736 = &v693[v735];
            v737 = (char *)v694 + v735;
            *(void *)v736 = *(void *)v737;
            v736[8] = v737[8];
            uint64_t v738 = v695[25];
            v739 = &v693[v738];
            v740 = (char *)v694 + v738;
            v26 = v1189;
            if (__swift_getEnumTagSinglePayload((uint64_t)v740, 1, v1190))
            {
              uint64_t v741 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v739, v740, *(void *)(*(void *)(v741 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1190 - 8) + 32))(v739, v740, v1190);
              __swift_storeEnumTagSinglePayload((uint64_t)v739, 0, 1, v1190);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v693, 0, 1, (uint64_t)v695);
            v296 = v1185;
          }
          uint64_t v768 = v296[11];
          v769 = &v294[v768];
          v770 = (_OWORD *)((char *)v1195 + v768);
          v771 = (int *)type metadata accessor for FlightReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v770, 1, (uint64_t)v771))
          {
            uint64_t v772 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
            memcpy(v769, v770, *(void *)(*(void *)(v772 - 8) + 64));
          }
          else
          {
            long long v773 = v770[1];
            *(_OWORD *)v769 = *v770;
            *((_OWORD *)v769 + 1) = v773;
            long long v774 = v770[3];
            *((_OWORD *)v769 + 2) = v770[2];
            *((_OWORD *)v769 + 3) = v774;
            long long v775 = v770[5];
            *((_OWORD *)v769 + 4) = v770[4];
            *((_OWORD *)v769 + 5) = v775;
            v769[96] = *((unsigned char *)v770 + 96);
            *(_OWORD *)(v769 + 104) = *(_OWORD *)((char *)v770 + 104);
            uint64_t v776 = v771[13];
            v777 = &v769[v776];
            v778 = (char *)v770 + v776;
            if (__swift_getEnumTagSinglePayload((uint64_t)v770 + v776, 1, v1190))
            {
              uint64_t v779 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v777, v778, *(void *)(*(void *)(v779 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1190 - 8) + 32))(v777, v778, v1190);
              __swift_storeEnumTagSinglePayload((uint64_t)v777, 0, 1, v1190);
            }
            uint64_t v788 = v771[14];
            v789 = &v769[v788];
            v790 = (char *)v770 + v788;
            if (__swift_getEnumTagSinglePayload((uint64_t)v770 + v788, 1, v1190))
            {
              uint64_t v791 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v789, v790, *(void *)(*(void *)(v791 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1190 - 8) + 32))(v789, v790, v1190);
              __swift_storeEnumTagSinglePayload((uint64_t)v789, 0, 1, v1190);
            }
            *(_OWORD *)&v769[v771[15]] = *(_OWORD *)((char *)v770 + v771[15]);
            *(_OWORD *)&v769[v771[16]] = *(_OWORD *)((char *)v770 + v771[16]);
            *(_OWORD *)&v769[v771[17]] = *(_OWORD *)((char *)v770 + v771[17]);
            uint64_t v810 = v771[18];
            v811 = &v769[v810];
            v812 = (char *)v770 + v810;
            uint64_t v813 = type metadata accessor for DateComponents();
            v814 = *(void (**)(char *, char *, uint64_t))(*(void *)(v813 - 8) + 32);
            v814(v811, v812, v813);
            v814(&v769[v771[19]], (char *)v770 + v771[19], v813);
            *(_OWORD *)&v769[v771[20]] = *(_OWORD *)((char *)v770 + v771[20]);
            *(_OWORD *)&v769[v771[21]] = *(_OWORD *)((char *)v770 + v771[21]);
            *(_OWORD *)&v769[v771[22]] = *(_OWORD *)((char *)v770 + v771[22]);
            *(_OWORD *)&v769[v771[23]] = *(_OWORD *)((char *)v770 + v771[23]);
            *(_OWORD *)&v769[v771[24]] = *(_OWORD *)((char *)v770 + v771[24]);
            *(_OWORD *)&v769[v771[25]] = *(_OWORD *)((char *)v770 + v771[25]);
            *(_OWORD *)&v769[v771[26]] = *(_OWORD *)((char *)v770 + v771[26]);
            *(_OWORD *)&v769[v771[27]] = *(_OWORD *)((char *)v770 + v771[27]);
            *(_OWORD *)&v769[v771[28]] = *(_OWORD *)((char *)v770 + v771[28]);
            *(_OWORD *)&v769[v771[29]] = *(_OWORD *)((char *)v770 + v771[29]);
            *(_OWORD *)&v769[v771[30]] = *(_OWORD *)((char *)v770 + v771[30]);
            *(_OWORD *)&v769[v771[31]] = *(_OWORD *)((char *)v770 + v771[31]);
            *(_OWORD *)&v769[v771[32]] = *(_OWORD *)((char *)v770 + v771[32]);
            *(void *)&v769[v771[33]] = *(void *)((char *)v770 + v771[33]);
            *(void *)&v769[v771[34]] = *(void *)((char *)v770 + v771[34]);
            *(_OWORD *)&v769[v771[35]] = *(_OWORD *)((char *)v770 + v771[35]);
            *(_OWORD *)&v769[v771[36]] = *(_OWORD *)((char *)v770 + v771[36]);
            *(_OWORD *)&v769[v771[37]] = *(_OWORD *)((char *)v770 + v771[37]);
            uint64_t v815 = v771[38];
            v816 = &v769[v815];
            v817 = (char *)v770 + v815;
            if (__swift_getEnumTagSinglePayload((uint64_t)v770 + v815, 1, (uint64_t)v1197))
            {
              uint64_t v818 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v816, v817, *(void *)(*(void *)(v818 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1197 - 1) + 32))(v816, v817, v1197);
              __swift_storeEnumTagSinglePayload((uint64_t)v816, 0, 1, (uint64_t)v1197);
            }
            a3 = v1202;
            v294 = __dstc;
            *(_OWORD *)&v769[v771[39]] = *(_OWORD *)((char *)v770 + v771[39]);
            *(_OWORD *)&v769[v771[40]] = *(_OWORD *)((char *)v770 + v771[40]);
            uint64_t v856 = v771[41];
            v857 = &v769[v856];
            v858 = (char *)v770 + v856;
            *(void *)v857 = *(void *)v858;
            v857[8] = v858[8];
            *(_OWORD *)&v769[v771[42]] = *(_OWORD *)((char *)v770 + v771[42]);
            uint64_t v859 = v771[43];
            v860 = &v769[v859];
            v861 = (char *)v770 + v859;
            *(_OWORD *)v860 = *(_OWORD *)v861;
            *(void *)(v860 + 13) = *(void *)(v861 + 13);
            *(_OWORD *)&v769[v771[44]] = *(_OWORD *)((char *)v770 + v771[44]);
            *(_OWORD *)&v769[v771[45]] = *(_OWORD *)((char *)v770 + v771[45]);
            *(_OWORD *)&v769[v771[46]] = *(_OWORD *)((char *)v770 + v771[46]);
            *(_OWORD *)&v769[v771[47]] = *(_OWORD *)((char *)v770 + v771[47]);
            __swift_storeEnumTagSinglePayload((uint64_t)v769, 0, 1, (uint64_t)v771);
            v26 = v1189;
            v296 = v1185;
          }
          uint64_t v862 = v296[12];
          v863 = &v294[v862];
          v864 = (_OWORD *)((char *)v1195 + v862);
          v865 = (int *)type metadata accessor for HotelReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v864, 1, (uint64_t)v865))
          {
            uint64_t v866 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
            memcpy(v863, v864, *(void *)(*(void *)(v866 - 8) + 64));
          }
          else
          {
            long long v867 = v864[1];
            *(_OWORD *)v863 = *v864;
            *((_OWORD *)v863 + 1) = v867;
            long long v868 = v864[3];
            *((_OWORD *)v863 + 2) = v864[2];
            *((_OWORD *)v863 + 3) = v868;
            long long v869 = v864[5];
            *((_OWORD *)v863 + 4) = v864[4];
            *((_OWORD *)v863 + 5) = v869;
            v863[96] = *((unsigned char *)v864 + 96);
            *(_OWORD *)(v863 + 104) = *(_OWORD *)((char *)v864 + 104);
            *(_OWORD *)(v863 + 120) = *(_OWORD *)((char *)v864 + 120);
            uint64_t v870 = v865[14];
            v871 = &v863[v870];
            v872 = (char *)v864 + v870;
            uint64_t v873 = type metadata accessor for DateComponents();
            if (__swift_getEnumTagSinglePayload((uint64_t)v872, 1, v873))
            {
              uint64_t v874 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v871, v872, *(void *)(*(void *)(v874 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v873 - 8) + 32))(v871, v872, v873);
              __swift_storeEnumTagSinglePayload((uint64_t)v871, 0, 1, v873);
            }
            uint64_t v882 = v865[15];
            v883 = &v863[v882];
            v884 = (char *)v864 + v882;
            if (__swift_getEnumTagSinglePayload((uint64_t)v864 + v882, 1, v873))
            {
              uint64_t v885 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v883, v884, *(void *)(*(void *)(v885 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v873 - 8) + 32))(v883, v884, v873);
              __swift_storeEnumTagSinglePayload((uint64_t)v883, 0, 1, v873);
            }
            v26 = v1189;
            *(_OWORD *)&v863[v865[16]] = *(_OWORD *)((char *)v864 + v865[16]);
            *(_OWORD *)&v863[v865[17]] = *(_OWORD *)((char *)v864 + v865[17]);
            *(_OWORD *)&v863[v865[18]] = *(_OWORD *)((char *)v864 + v865[18]);
            *(_OWORD *)&v863[v865[19]] = *(_OWORD *)((char *)v864 + v865[19]);
            *(_OWORD *)&v863[v865[20]] = *(_OWORD *)((char *)v864 + v865[20]);
            *(void *)&v863[v865[21]] = *(void *)((char *)v864 + v865[21]);
            *(void *)&v863[v865[22]] = *(void *)((char *)v864 + v865[22]);
            uint64_t v929 = v865[23];
            v930 = &v863[v929];
            v931 = (char *)v864 + v929;
            v930[8] = v931[8];
            *(void *)v930 = *(void *)v931;
            uint64_t v932 = v865[24];
            v933 = &v863[v932];
            v934 = (char *)v864 + v932;
            v933[8] = v934[8];
            *(void *)v933 = *(void *)v934;
            *(_OWORD *)&v863[v865[25]] = *(_OWORD *)((char *)v864 + v865[25]);
            *(_OWORD *)&v863[v865[26]] = *(_OWORD *)((char *)v864 + v865[26]);
            *(_OWORD *)&v863[v865[27]] = *(_OWORD *)((char *)v864 + v865[27]);
            *(_OWORD *)&v863[v865[28]] = *(_OWORD *)((char *)v864 + v865[28]);
            uint64_t v935 = v865[29];
            v936 = &v863[v935];
            v937 = (char *)v864 + v935;
            *(void *)v936 = *(void *)v937;
            v936[8] = v937[8];
            __swift_storeEnumTagSinglePayload((uint64_t)v863, 0, 1, (uint64_t)v865);
            v294 = __dstc;
            v296 = v1185;
          }
          uint64_t v938 = v296[13];
          v939 = &v294[v938];
          v940 = (_OWORD *)((char *)v1195 + v938);
          v941 = (int *)type metadata accessor for RestaurantReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v940, 1, (uint64_t)v941))
          {
            uint64_t v942 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
            memcpy(v939, v940, *(void *)(*(void *)(v942 - 8) + 64));
          }
          else
          {
            long long v943 = v940[1];
            *(_OWORD *)v939 = *v940;
            *((_OWORD *)v939 + 1) = v943;
            long long v944 = v940[3];
            *((_OWORD *)v939 + 2) = v940[2];
            *((_OWORD *)v939 + 3) = v944;
            long long v945 = v940[5];
            *((_OWORD *)v939 + 4) = v940[4];
            *((_OWORD *)v939 + 5) = v945;
            v939[96] = *((unsigned char *)v940 + 96);
            *(_OWORD *)(v939 + 104) = *(_OWORD *)((char *)v940 + 104);
            *(_OWORD *)(v939 + 120) = *(_OWORD *)((char *)v940 + 120);
            uint64_t v946 = v941[14];
            v947 = &v939[v946];
            v948 = (char *)v940 + v946;
            uint64_t v949 = type metadata accessor for DateComponents();
            if (__swift_getEnumTagSinglePayload((uint64_t)v948, 1, v949))
            {
              uint64_t v950 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v947, v948, *(void *)(*(void *)(v950 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v949 - 8) + 32))(v947, v948, v949);
              __swift_storeEnumTagSinglePayload((uint64_t)v947, 0, 1, v949);
            }
            *(_OWORD *)&v939[v941[15]] = *(_OWORD *)((char *)v940 + v941[15]);
            *(_OWORD *)&v939[v941[16]] = *(_OWORD *)((char *)v940 + v941[16]);
            *(_OWORD *)&v939[v941[17]] = *(_OWORD *)((char *)v940 + v941[17]);
            *(_OWORD *)&v939[v941[18]] = *(_OWORD *)((char *)v940 + v941[18]);
            *(_OWORD *)&v939[v941[19]] = *(_OWORD *)((char *)v940 + v941[19]);
            *(void *)&v939[v941[20]] = *(void *)((char *)v940 + v941[20]);
            *(_OWORD *)&v939[v941[21]] = *(_OWORD *)((char *)v940 + v941[21]);
            *(_OWORD *)&v939[v941[22]] = *(_OWORD *)((char *)v940 + v941[22]);
            *(_OWORD *)&v939[v941[23]] = *(_OWORD *)((char *)v940 + v941[23]);
            __swift_storeEnumTagSinglePayload((uint64_t)v939, 0, 1, (uint64_t)v941);
            v26 = v1189;
            v294 = __dstc;
            v296 = v1185;
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v294, 0, 1, (uint64_t)v296);
        }
        uint64_t v1069 = v26[20];
        v1070 = &a1[v1069];
        v1071 = &a2[v1069];
        v1072 = (int *)type metadata accessor for PreExtractedCard(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1071, 1, (uint64_t)v1072))
        {
          uint64_t v1073 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
          memcpy(v1070, v1071, *(void *)(*(void *)(v1073 - 8) + 64));
        }
        else
        {
          long long v1074 = *((_OWORD *)v1071 + 1);
          *(_OWORD *)v1070 = *(_OWORD *)v1071;
          *((_OWORD *)v1070 + 1) = v1074;
          long long v1075 = *((_OWORD *)v1071 + 3);
          *((_OWORD *)v1070 + 2) = *((_OWORD *)v1071 + 2);
          *((_OWORD *)v1070 + 3) = v1075;
          long long v1076 = *((_OWORD *)v1071 + 5);
          *((_OWORD *)v1070 + 4) = *((_OWORD *)v1071 + 4);
          *((_OWORD *)v1070 + 5) = v1076;
          uint64_t v1077 = v1072[10];
          v1078 = &v1070[v1077];
          v1079 = &v1071[v1077];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v1071[v1077], 1, (uint64_t)v1197))
          {
            uint64_t v1080 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1078, v1079, *(void *)(*(void *)(v1080 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, void *))(*(v1197 - 1) + 32))(v1078, v1079, v1197);
            __swift_storeEnumTagSinglePayload((uint64_t)v1078, 0, 1, (uint64_t)v1197);
          }
          uint64_t v1081 = v1072[11];
          v1082 = &v1070[v1081];
          v1083 = &v1071[v1081];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v1071[v1081], 1, (uint64_t)v1197))
          {
            uint64_t v1084 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1082, v1083, *(void *)(*(void *)(v1084 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, void *))(*(v1197 - 1) + 32))(v1082, v1083, v1197);
            __swift_storeEnumTagSinglePayload((uint64_t)v1082, 0, 1, (uint64_t)v1197);
          }
          *(_OWORD *)&v1070[v1072[12]] = *(_OWORD *)&v1071[v1072[12]];
          *(_OWORD *)&v1070[v1072[13]] = *(_OWORD *)&v1071[v1072[13]];
          *(_OWORD *)&v1070[v1072[14]] = *(_OWORD *)&v1071[v1072[14]];
          uint64_t v1085 = v1072[15];
          v1086 = &v1070[v1085];
          v1087 = &v1071[v1085];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v1071[v1085], 1, (uint64_t)v1197))
          {
            uint64_t v1088 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1086, v1087, *(void *)(*(void *)(v1088 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, void *))(*(v1197 - 1) + 32))(v1086, v1087, v1197);
            __swift_storeEnumTagSinglePayload((uint64_t)v1086, 0, 1, (uint64_t)v1197);
          }
          a3 = v1202;
          *(_OWORD *)&v1070[v1072[16]] = *(_OWORD *)&v1071[v1072[16]];
          *(_OWORD *)&v1070[v1072[17]] = *(_OWORD *)&v1071[v1072[17]];
          *(_OWORD *)&v1070[v1072[18]] = *(_OWORD *)&v1071[v1072[18]];
          *(_OWORD *)&v1070[v1072[19]] = *(_OWORD *)&v1071[v1072[19]];
          *(_OWORD *)&v1070[v1072[20]] = *(_OWORD *)&v1071[v1072[20]];
          *(_OWORD *)&v1070[v1072[21]] = *(_OWORD *)&v1071[v1072[21]];
          *(_OWORD *)&v1070[v1072[22]] = *(_OWORD *)&v1071[v1072[22]];
          *(_OWORD *)&v1070[v1072[23]] = *(_OWORD *)&v1071[v1072[23]];
          __swift_storeEnumTagSinglePayload((uint64_t)v1070, 0, 1, (uint64_t)v1072);
        }
        uint64_t v1089 = v26[21];
        v1090 = &a1[v1089];
        v1091 = &a2[v1089];
        v1092 = (int *)type metadata accessor for PreExtractedContact(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1091, 1, (uint64_t)v1092))
        {
          uint64_t v1093 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
          memcpy(v1090, v1091, *(void *)(*(void *)(v1093 - 8) + 64));
        }
        else
        {
          long long v1094 = *((_OWORD *)v1091 + 1);
          *(_OWORD *)v1090 = *(_OWORD *)v1091;
          *((_OWORD *)v1090 + 1) = v1094;
          long long v1095 = *((_OWORD *)v1091 + 3);
          *((_OWORD *)v1090 + 2) = *((_OWORD *)v1091 + 2);
          *((_OWORD *)v1090 + 3) = v1095;
          long long v1096 = *((_OWORD *)v1091 + 5);
          *((_OWORD *)v1090 + 4) = *((_OWORD *)v1091 + 4);
          *((_OWORD *)v1090 + 5) = v1096;
          uint64_t v1097 = v1092[11];
          v1098 = &v1090[v1097];
          v1099 = &v1091[v1097];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v1091[v1097], 1, (uint64_t)v1197))
          {
            uint64_t v1100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1098, v1099, *(void *)(*(void *)(v1100 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, void *))(*(v1197 - 1) + 32))(v1098, v1099, v1197);
            __swift_storeEnumTagSinglePayload((uint64_t)v1098, 0, 1, (uint64_t)v1197);
          }
          *(_OWORD *)&v1090[v1092[12]] = *(_OWORD *)&v1091[v1092[12]];
          *(void *)&v1090[v1092[13]] = *(void *)&v1091[v1092[13]];
          uint64_t v1101 = v1092[14];
          v1102 = &v1090[v1101];
          v1103 = &v1091[v1101];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v1091[v1101], 1, (uint64_t)v1197))
          {
            uint64_t v1104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1102, v1103, *(void *)(*(void *)(v1104 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, void *))(*(v1197 - 1) + 32))(v1102, v1103, v1197);
            __swift_storeEnumTagSinglePayload((uint64_t)v1102, 0, 1, (uint64_t)v1197);
          }
          a3 = v1202;
          *(void *)&v1090[v1092[15]] = *(void *)&v1091[v1092[15]];
          *(void *)&v1090[v1092[16]] = *(void *)&v1091[v1092[16]];
          *(_OWORD *)&v1090[v1092[17]] = *(_OWORD *)&v1091[v1092[17]];
          *(void *)&v1090[v1092[18]] = *(void *)&v1091[v1092[18]];
          *(void *)&v1090[v1092[19]] = *(void *)&v1091[v1092[19]];
          __swift_storeEnumTagSinglePayload((uint64_t)v1090, 0, 1, (uint64_t)v1092);
        }
        uint64_t v1105 = v26[22];
        v1106 = &a1[v1105];
        v1107 = &a2[v1105];
        v1108 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1107, 1, (uint64_t)v1108))
        {
          uint64_t v1109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
          memcpy(v1106, v1107, *(void *)(*(void *)(v1109 - 8) + 64));
        }
        else
        {
          long long v1110 = *((_OWORD *)v1107 + 1);
          *(_OWORD *)v1106 = *(_OWORD *)v1107;
          *((_OWORD *)v1106 + 1) = v1110;
          long long v1111 = *((_OWORD *)v1107 + 3);
          *((_OWORD *)v1106 + 2) = *((_OWORD *)v1107 + 2);
          *((_OWORD *)v1106 + 3) = v1111;
          uint64_t v1112 = v1108[8];
          v1113 = &v1106[v1112];
          v1114 = &v1107[v1112];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v1107[v1112], 1, v1190))
          {
            uint64_t v1115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v1113, v1114, *(void *)(*(void *)(v1115 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1190 - 8) + 32))(v1113, v1114, v1190);
            __swift_storeEnumTagSinglePayload((uint64_t)v1113, 0, 1, v1190);
          }
          *(_OWORD *)&v1106[v1108[9]] = *(_OWORD *)&v1107[v1108[9]];
          *(_OWORD *)&v1106[v1108[10]] = *(_OWORD *)&v1107[v1108[10]];
          *(_OWORD *)&v1106[v1108[11]] = *(_OWORD *)&v1107[v1108[11]];
          uint64_t v1116 = v1108[12];
          v1117 = &v1106[v1116];
          v1118 = &v1107[v1116];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v1107[v1116], 1, (uint64_t)v1197))
          {
            uint64_t v1119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1117, v1118, *(void *)(*(void *)(v1119 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, void *))(*(v1197 - 1) + 32))(v1117, v1118, v1197);
            __swift_storeEnumTagSinglePayload((uint64_t)v1117, 0, 1, (uint64_t)v1197);
          }
          uint64_t v1120 = v1108[13];
          v1121 = &v1106[v1120];
          v1122 = &v1107[v1120];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v1107[v1120], 1, (uint64_t)v1197))
          {
            uint64_t v1123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1121, v1122, *(void *)(*(void *)(v1123 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, void *))(*(v1197 - 1) + 32))(v1121, v1122, v1197);
            __swift_storeEnumTagSinglePayload((uint64_t)v1121, 0, 1, (uint64_t)v1197);
          }
          a3 = v1202;
          uint64_t v1124 = v1108[14];
          v1125 = &v1106[v1124];
          v1126 = &v1107[v1124];
          *(void *)v1125 = *(void *)v1126;
          v1125[8] = v1126[8];
          *(_OWORD *)&v1106[v1108[15]] = *(_OWORD *)&v1107[v1108[15]];
          *(_OWORD *)&v1106[v1108[16]] = *(_OWORD *)&v1107[v1108[16]];
          *(_OWORD *)&v1106[v1108[17]] = *(_OWORD *)&v1107[v1108[17]];
          *(_OWORD *)&v1106[v1108[18]] = *(_OWORD *)&v1107[v1108[18]];
          *(_OWORD *)&v1106[v1108[19]] = *(_OWORD *)&v1107[v1108[19]];
          __swift_storeEnumTagSinglePayload((uint64_t)v1106, 0, 1, (uint64_t)v1108);
        }
        memcpy(&a1[v26[23]], &a2[v26[23]], 0x90uLL);
        goto LABEL_523;
      case 2u:
        long long v32 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v32;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        v33 = (int *)type metadata accessor for CalendarEvent(0);
        uint64_t v34 = v33[7];
        v35 = &a1[v34];
        v36 = &a2[v34];
        uint64_t v37 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v36, 1, v37))
        {
          uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v35, v36, *(void *)(*(void *)(v38 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(v35, v36, v37);
          __swift_storeEnumTagSinglePayload((uint64_t)v35, 0, 1, v37);
        }
        uint64_t v235 = v33[8];
        v236 = &a1[v235];
        v237 = &a2[v235];
        if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v235], 1, v37))
        {
          uint64_t v238 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v236, v237, *(void *)(*(void *)(v238 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(v236, v237, v37);
          __swift_storeEnumTagSinglePayload((uint64_t)v236, 0, 1, v37);
        }
        *(_OWORD *)&a1[v33[9]] = *(_OWORD *)&a2[v33[9]];
        *(void *)&a1[v33[10]] = *(void *)&a2[v33[10]];
        *(void *)&a1[v33[11]] = *(void *)&a2[v33[11]];
        *(_OWORD *)&a1[v33[12]] = *(_OWORD *)&a2[v33[12]];
        uint64_t v298 = v33[13];
        v299 = &a1[v298];
        v300 = &a2[v298];
        long long v301 = *((_OWORD *)v300 + 1);
        *(_OWORD *)v299 = *(_OWORD *)v300;
        *((_OWORD *)v299 + 1) = v301;
        *((void *)v299 + 4) = *((void *)v300 + 4);
        goto LABEL_523;
      case 3u:
        long long v39 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v39;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((void *)a1 + 6) = *((void *)a2 + 6);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        v40 = (int *)type metadata accessor for Photo(0);
        uint64_t v41 = v40[11];
        v42 = &a1[v41];
        v43 = &a2[v41];
        uint64_t v44 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v43, 1, v44))
        {
          uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v42, v43, *(void *)(*(void *)(v45 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v42, v43, v44);
          __swift_storeEnumTagSinglePayload((uint64_t)v42, 0, 1, v44);
        }
        *(void *)&a1[v40[12]] = *(void *)&a2[v40[12]];
        *(void *)&a1[v40[13]] = *(void *)&a2[v40[13]];
        *(void *)&a1[v40[14]] = *(void *)&a2[v40[14]];
        *(void *)&a1[v40[15]] = *(void *)&a2[v40[15]];
        *(_OWORD *)&a1[v40[16]] = *(_OWORD *)&a2[v40[16]];
        uint64_t v239 = v40[17];
        v240 = &a1[v239];
        v241 = &a2[v239];
        v242 = (int *)type metadata accessor for PartialExtractedAttributes(0);
        uint64_t v1194 = v44;
        uint64_t v1201 = a3;
        if (__swift_getEnumTagSinglePayload((uint64_t)v241, 1, (uint64_t)v242))
        {
          uint64_t v243 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
          memcpy(v240, v241, *(void *)(*(void *)(v243 - 8) + 64));
        }
        else
        {
          v1191 = v40;
          *(_OWORD *)v240 = *(_OWORD *)v241;
          uint64_t v302 = v242[5];
          v303 = &v240[v302];
          v1198 = v241;
          v304 = &v241[v302];
          uint64_t v305 = type metadata accessor for RentalCarReservation(0);
          v1188 = v240;
          v1184 = v242;
          if (__swift_getEnumTagSinglePayload((uint64_t)v304, 1, v305))
          {
            uint64_t v306 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
            memcpy(v303, v304, *(void *)(*(void *)(v306 - 8) + 64));
          }
          else
          {
            long long v360 = *((_OWORD *)v304 + 1);
            *(_OWORD *)v303 = *(_OWORD *)v304;
            *((_OWORD *)v303 + 1) = v360;
            long long v361 = *((_OWORD *)v304 + 3);
            *((_OWORD *)v303 + 2) = *((_OWORD *)v304 + 2);
            *((_OWORD *)v303 + 3) = v361;
            long long v362 = *((_OWORD *)v304 + 5);
            *((_OWORD *)v303 + 4) = *((_OWORD *)v304 + 4);
            *((_OWORD *)v303 + 5) = v362;
            long long v363 = *((_OWORD *)v304 + 7);
            *((_OWORD *)v303 + 6) = *((_OWORD *)v304 + 6);
            *((_OWORD *)v303 + 7) = v363;
            v303[128] = v304[128];
            *(_WORD *)(v303 + 129) = *(_WORD *)(v304 + 129);
            *((void *)v303 + 17) = *((void *)v304 + 17);
            long long v364 = *((_OWORD *)v304 + 10);
            *((_OWORD *)v303 + 9) = *((_OWORD *)v304 + 9);
            *((_OWORD *)v303 + 10) = v364;
            long long v365 = *((_OWORD *)v304 + 12);
            *((_OWORD *)v303 + 11) = *((_OWORD *)v304 + 11);
            *((_OWORD *)v303 + 12) = v365;
            long long v366 = *((_OWORD *)v304 + 14);
            *((_OWORD *)v303 + 13) = *((_OWORD *)v304 + 13);
            *((_OWORD *)v303 + 14) = v366;
            *((_OWORD *)v303 + 15) = *((_OWORD *)v304 + 15);
            *((void *)v303 + 32) = *((void *)v304 + 32);
            *(_OWORD *)(v303 + 264) = *(_OWORD *)(v304 + 264);
            *(_OWORD *)(v303 + 280) = *(_OWORD *)(v304 + 280);
            *(_OWORD *)(v303 + 296) = *(_OWORD *)(v304 + 296);
            *(_OWORD *)(v303 + 312) = *(_OWORD *)(v304 + 312);
            *(_OWORD *)(v303 + 328) = *(_OWORD *)(v304 + 328);
            *(_OWORD *)(v303 + 344) = *(_OWORD *)(v304 + 344);
            *(_OWORD *)(v303 + 360) = *(_OWORD *)(v304 + 360);
            v303[384] = v304[384];
            *((void *)v303 + 47) = *((void *)v304 + 47);
            *(_OWORD *)(v303 + 392) = *(_OWORD *)(v304 + 392);
            *(_OWORD *)(v303 + 408) = *(_OWORD *)(v304 + 408);
            uint64_t v367 = *(int *)(v305 + 140);
            v368 = &v303[v367];
            v369 = &v304[v367];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v304[v367], 1, v44))
            {
              uint64_t v370 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v368, v369, *(void *)(*(void *)(v370 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v368, v369, v44);
              __swift_storeEnumTagSinglePayload((uint64_t)v368, 0, 1, v44);
            }
            uint64_t v386 = *(int *)(v305 + 144);
            v387 = &v303[v386];
            v388 = &v304[v386];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v304[v386], 1, v44))
            {
              uint64_t v389 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v387, v388, *(void *)(*(void *)(v389 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v387, v388, v44);
              __swift_storeEnumTagSinglePayload((uint64_t)v387, 0, 1, v44);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v303, 0, 1, v305);
            v240 = v1188;
            v242 = v1184;
          }
          uint64_t v410 = v242[6];
          v411 = &v240[v410];
          v412 = &v1198[v410];
          uint64_t v413 = type metadata accessor for TicketedTransportation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v412, 1, v413))
          {
            uint64_t v414 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
            memcpy(v411, v412, *(void *)(*(void *)(v414 - 8) + 64));
          }
          else
          {
            long long v415 = *((_OWORD *)v412 + 1);
            *(_OWORD *)v411 = *(_OWORD *)v412;
            *((_OWORD *)v411 + 1) = v415;
            long long v416 = *((_OWORD *)v412 + 3);
            *((_OWORD *)v411 + 2) = *((_OWORD *)v412 + 2);
            *((_OWORD *)v411 + 3) = v416;
            long long v417 = *((_OWORD *)v412 + 5);
            *((_OWORD *)v411 + 4) = *((_OWORD *)v412 + 4);
            *((_OWORD *)v411 + 5) = v417;
            long long v418 = *((_OWORD *)v412 + 7);
            *((_OWORD *)v411 + 6) = *((_OWORD *)v412 + 6);
            *((_OWORD *)v411 + 7) = v418;
            v411[128] = v412[128];
            *(_WORD *)(v411 + 129) = *(_WORD *)(v412 + 129);
            *((void *)v411 + 17) = *((void *)v412 + 17);
            long long v419 = *((_OWORD *)v412 + 10);
            *((_OWORD *)v411 + 9) = *((_OWORD *)v412 + 9);
            *((_OWORD *)v411 + 10) = v419;
            long long v420 = *((_OWORD *)v412 + 12);
            *((_OWORD *)v411 + 11) = *((_OWORD *)v412 + 11);
            *((_OWORD *)v411 + 12) = v420;
            *((void *)v411 + 26) = *((void *)v412 + 26);
            *(_OWORD *)(v411 + 216) = *(_OWORD *)(v412 + 216);
            *(_OWORD *)(v411 + 232) = *(_OWORD *)(v412 + 232);
            *(_OWORD *)(v411 + 248) = *(_OWORD *)(v412 + 248);
            *(_OWORD *)(v411 + 264) = *(_OWORD *)(v412 + 264);
            v411[296] = v412[296];
            uint64_t v421 = *((void *)v412 + 36);
            *((void *)v411 + 35) = *((void *)v412 + 35);
            *((void *)v411 + 36) = v421;
            uint64_t v422 = *(int *)(v413 + 112);
            v423 = &v411[v422];
            v424 = &v412[v422];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v412[v422], 1, v44))
            {
              uint64_t v425 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v423, v424, *(void *)(*(void *)(v425 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v423, v424, v44);
              __swift_storeEnumTagSinglePayload((uint64_t)v423, 0, 1, v44);
            }
            uint64_t v445 = *(int *)(v413 + 116);
            v446 = &v411[v445];
            v447 = &v412[v445];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v412[v445], 1, v44))
            {
              uint64_t v448 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v446, v447, *(void *)(*(void *)(v448 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v446, v447, v44);
              __swift_storeEnumTagSinglePayload((uint64_t)v446, 0, 1, v44);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v411, 0, 1, v413);
            v240 = v1188;
            v242 = v1184;
          }
          uint64_t v470 = v242[7];
          v471 = &v240[v470];
          v472 = &v1198[v470];
          v473 = (int *)type metadata accessor for TicketedShow(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v472, 1, (uint64_t)v473))
          {
            uint64_t v474 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
            memcpy(v471, v472, *(void *)(*(void *)(v474 - 8) + 64));
          }
          else
          {
            long long v475 = *((_OWORD *)v472 + 1);
            *(_OWORD *)v471 = *(_OWORD *)v472;
            *((_OWORD *)v471 + 1) = v475;
            long long v476 = *((_OWORD *)v472 + 3);
            *((_OWORD *)v471 + 2) = *((_OWORD *)v472 + 2);
            *((_OWORD *)v471 + 3) = v476;
            long long v477 = *((_OWORD *)v472 + 5);
            *((_OWORD *)v471 + 4) = *((_OWORD *)v472 + 4);
            *((_OWORD *)v471 + 5) = v477;
            long long v478 = *((_OWORD *)v472 + 7);
            *((_OWORD *)v471 + 6) = *((_OWORD *)v472 + 6);
            *((_OWORD *)v471 + 7) = v478;
            v471[128] = v472[128];
            *(_WORD *)(v471 + 129) = *(_WORD *)(v472 + 129);
            *((void *)v471 + 17) = *((void *)v472 + 17);
            long long v479 = *((_OWORD *)v472 + 10);
            *((_OWORD *)v471 + 9) = *((_OWORD *)v472 + 9);
            *((_OWORD *)v471 + 10) = v479;
            long long v480 = *((_OWORD *)v472 + 12);
            *((_OWORD *)v471 + 11) = *((_OWORD *)v472 + 11);
            *((_OWORD *)v471 + 12) = v480;
            long long v481 = *((_OWORD *)v472 + 14);
            *((_OWORD *)v471 + 13) = *((_OWORD *)v472 + 13);
            *((_OWORD *)v471 + 14) = v481;
            *((void *)v471 + 30) = *((void *)v472 + 30);
            *(_OWORD *)(v471 + 248) = *(_OWORD *)(v472 + 248);
            *(_OWORD *)(v471 + 264) = *(_OWORD *)(v472 + 264);
            v471[296] = v472[296];
            uint64_t v482 = *((void *)v472 + 36);
            *((void *)v471 + 35) = *((void *)v472 + 35);
            *((void *)v471 + 36) = v482;
            *((_OWORD *)v471 + 19) = *((_OWORD *)v472 + 19);
            uint64_t v483 = v473[29];
            v484 = &v471[v483];
            v485 = &v472[v483];
            uint64_t v486 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v485, 1, v486))
            {
              uint64_t v487 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v484, v485, *(void *)(*(void *)(v487 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v486 - 8) + 32))(v484, v485, v486);
              __swift_storeEnumTagSinglePayload((uint64_t)v484, 0, 1, v486);
            }
            *(_OWORD *)&v471[v473[30]] = *(_OWORD *)&v472[v473[30]];
            uint64_t v509 = v473[31];
            v510 = &v471[v509];
            v511 = &v472[v509];
            uint64_t v44 = v1194;
            if (__swift_getEnumTagSinglePayload((uint64_t)&v472[v509], 1, v1194))
            {
              uint64_t v512 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v510, v511, *(void *)(*(void *)(v512 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1194 - 8) + 32))(v510, v511, v1194);
              __swift_storeEnumTagSinglePayload((uint64_t)v510, 0, 1, v1194);
            }
            uint64_t v520 = v473[32];
            v521 = &v471[v520];
            v522 = &v472[v520];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v472[v520], 1, v1194))
            {
              uint64_t v523 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v521, v522, *(void *)(*(void *)(v523 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1194 - 8) + 32))(v521, v522, v1194);
              __swift_storeEnumTagSinglePayload((uint64_t)v521, 0, 1, v1194);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v471, 0, 1, (uint64_t)v473);
            v240 = v1188;
            v242 = v1184;
          }
          uint64_t v544 = v242[8];
          v545 = &v240[v544];
          v546 = &v1198[v544];
          uint64_t v547 = type metadata accessor for Appointment(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v546, 1, v547))
          {
            uint64_t v548 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
            memcpy(v545, v546, *(void *)(*(void *)(v548 - 8) + 64));
          }
          else
          {
            long long v549 = *((_OWORD *)v546 + 1);
            *(_OWORD *)v545 = *(_OWORD *)v546;
            *((_OWORD *)v545 + 1) = v549;
            long long v550 = *((_OWORD *)v546 + 3);
            *((_OWORD *)v545 + 2) = *((_OWORD *)v546 + 2);
            *((_OWORD *)v545 + 3) = v550;
            long long v551 = *((_OWORD *)v546 + 5);
            *((_OWORD *)v545 + 4) = *((_OWORD *)v546 + 4);
            *((_OWORD *)v545 + 5) = v551;
            long long v552 = *((_OWORD *)v546 + 7);
            *((_OWORD *)v545 + 6) = *((_OWORD *)v546 + 6);
            *((_OWORD *)v545 + 7) = v552;
            v545[128] = v546[128];
            *(_WORD *)(v545 + 129) = *(_WORD *)(v546 + 129);
            *((void *)v545 + 17) = *((void *)v546 + 17);
            long long v553 = *((_OWORD *)v546 + 10);
            *((_OWORD *)v545 + 9) = *((_OWORD *)v546 + 9);
            *((_OWORD *)v545 + 10) = v553;
            long long v554 = *((_OWORD *)v546 + 12);
            *((_OWORD *)v545 + 11) = *((_OWORD *)v546 + 11);
            *((_OWORD *)v545 + 12) = v554;
            long long v555 = *((_OWORD *)v546 + 14);
            *((_OWORD *)v545 + 13) = *((_OWORD *)v546 + 13);
            *((_OWORD *)v545 + 14) = v555;
            long long v556 = *((_OWORD *)v546 + 16);
            *((_OWORD *)v545 + 15) = *((_OWORD *)v546 + 15);
            *((_OWORD *)v545 + 16) = v556;
            v545[280] = v546[280];
            *((void *)v545 + 34) = *((void *)v546 + 34);
            *((_OWORD *)v545 + 18) = *((_OWORD *)v546 + 18);
            uint64_t v557 = *(int *)(v547 + 108);
            v558 = &v545[v557];
            v559 = &v546[v557];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v546[v557], 1, v44))
            {
              uint64_t v560 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v558, v559, *(void *)(*(void *)(v560 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v558, v559, v44);
              __swift_storeEnumTagSinglePayload((uint64_t)v558, 0, 1, v44);
            }
            uint64_t v581 = *(int *)(v547 + 112);
            v582 = &v545[v581];
            v583 = &v546[v581];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v546[v581], 1, v44))
            {
              uint64_t v584 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v582, v583, *(void *)(*(void *)(v584 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v582, v583, v44);
              __swift_storeEnumTagSinglePayload((uint64_t)v582, 0, 1, v44);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v545, 0, 1, v547);
            v240 = v1188;
            v242 = v1184;
          }
          uint64_t v604 = v242[9];
          v605 = &v240[v604];
          v606 = &v1198[v604];
          v607 = (int *)type metadata accessor for Party(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v606, 1, (uint64_t)v607))
          {
            uint64_t v608 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
            memcpy(v605, v606, *(void *)(*(void *)(v608 - 8) + 64));
          }
          else
          {
            long long v609 = *((_OWORD *)v606 + 1);
            *(_OWORD *)v605 = *(_OWORD *)v606;
            *((_OWORD *)v605 + 1) = v609;
            long long v610 = *((_OWORD *)v606 + 3);
            *((_OWORD *)v605 + 2) = *((_OWORD *)v606 + 2);
            *((_OWORD *)v605 + 3) = v610;
            long long v611 = *((_OWORD *)v606 + 5);
            *((_OWORD *)v605 + 4) = *((_OWORD *)v606 + 4);
            *((_OWORD *)v605 + 5) = v611;
            long long v612 = *((_OWORD *)v606 + 7);
            *((_OWORD *)v605 + 6) = *((_OWORD *)v606 + 6);
            *((_OWORD *)v605 + 7) = v612;
            v605[128] = v606[128];
            *(_WORD *)(v605 + 129) = *(_WORD *)(v606 + 129);
            *((void *)v605 + 17) = *((void *)v606 + 17);
            long long v613 = *((_OWORD *)v606 + 10);
            *((_OWORD *)v605 + 9) = *((_OWORD *)v606 + 9);
            *((_OWORD *)v605 + 10) = v613;
            long long v614 = *((_OWORD *)v606 + 12);
            *((_OWORD *)v605 + 11) = *((_OWORD *)v606 + 11);
            *((_OWORD *)v605 + 12) = v614;
            long long v615 = *((_OWORD *)v606 + 14);
            *((_OWORD *)v605 + 13) = *((_OWORD *)v606 + 13);
            *((_OWORD *)v605 + 14) = v615;
            *((_OWORD *)v605 + 15) = *((_OWORD *)v606 + 15);
            uint64_t v616 = v607[24];
            v617 = &v605[v616];
            v618 = &v606[v616];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v606[v616], 1, v44))
            {
              uint64_t v619 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v617, v618, *(void *)(*(void *)(v619 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v617, v618, v44);
              __swift_storeEnumTagSinglePayload((uint64_t)v617, 0, 1, v44);
            }
            uint64_t v640 = v607[25];
            v641 = &v605[v640];
            v642 = &v606[v640];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v606[v640], 1, v44))
            {
              uint64_t v643 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v641, v642, *(void *)(*(void *)(v643 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v641, v642, v44);
              __swift_storeEnumTagSinglePayload((uint64_t)v641, 0, 1, v44);
            }
            uint64_t v653 = v607[26];
            v654 = &v605[v653];
            v655 = &v606[v653];
            uint64_t v656 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v655, 1, v656))
            {
              uint64_t v657 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v654, v655, *(void *)(*(void *)(v657 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v656 - 8) + 32))(v654, v655, v656);
              __swift_storeEnumTagSinglePayload((uint64_t)v654, 0, 1, v656);
            }
            v242 = v1184;
            __swift_storeEnumTagSinglePayload((uint64_t)v605, 0, 1, (uint64_t)v607);
            uint64_t v44 = v1194;
            v240 = v1188;
          }
          uint64_t v677 = v242[10];
          v678 = &v240[v677];
          v679 = &v1198[v677];
          v680 = (int *)type metadata accessor for Trip(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v679, 1, (uint64_t)v680))
          {
            uint64_t v681 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
            memcpy(v678, v679, *(void *)(*(void *)(v681 - 8) + 64));
          }
          else
          {
            long long v682 = *((_OWORD *)v679 + 1);
            *(_OWORD *)v678 = *(_OWORD *)v679;
            *((_OWORD *)v678 + 1) = v682;
            long long v683 = *((_OWORD *)v679 + 3);
            *((_OWORD *)v678 + 2) = *((_OWORD *)v679 + 2);
            *((_OWORD *)v678 + 3) = v683;
            long long v684 = *((_OWORD *)v679 + 5);
            *((_OWORD *)v678 + 4) = *((_OWORD *)v679 + 4);
            *((_OWORD *)v678 + 5) = v684;
            long long v685 = *((_OWORD *)v679 + 7);
            *((_OWORD *)v678 + 6) = *((_OWORD *)v679 + 6);
            *((_OWORD *)v678 + 7) = v685;
            v678[128] = v679[128];
            *(_WORD *)(v678 + 129) = *(_WORD *)(v679 + 129);
            *((void *)v678 + 17) = *((void *)v679 + 17);
            long long v686 = *((_OWORD *)v679 + 10);
            *((_OWORD *)v678 + 9) = *((_OWORD *)v679 + 9);
            *((_OWORD *)v678 + 10) = v686;
            long long v687 = *((_OWORD *)v679 + 12);
            *((_OWORD *)v678 + 11) = *((_OWORD *)v679 + 11);
            *((_OWORD *)v678 + 12) = v687;
            *((_OWORD *)v678 + 13) = *((_OWORD *)v679 + 13);
            uint64_t v688 = v680[22];
            v689 = &v678[v688];
            v690 = &v679[v688];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v679[v688], 1, v44))
            {
              uint64_t v691 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v689, v690, *(void *)(*(void *)(v691 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v689, v690, v44);
              __swift_storeEnumTagSinglePayload((uint64_t)v689, 0, 1, v44);
            }
            uint64_t v711 = v680[23];
            v712 = &v678[v711];
            v713 = &v679[v711];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v679[v711], 1, v44))
            {
              uint64_t v714 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v712, v713, *(void *)(*(void *)(v714 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v712, v713, v44);
              __swift_storeEnumTagSinglePayload((uint64_t)v712, 0, 1, v44);
            }
            uint64_t v727 = v680[24];
            v728 = &v678[v727];
            v729 = &v679[v727];
            *(void *)v728 = *(void *)v729;
            v728[8] = v729[8];
            uint64_t v730 = v680[25];
            v731 = &v678[v730];
            v732 = &v679[v730];
            uint64_t v733 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v732, 1, v733))
            {
              uint64_t v734 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v731, v732, *(void *)(*(void *)(v734 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v733 - 8) + 32))(v731, v732, v733);
              __swift_storeEnumTagSinglePayload((uint64_t)v731, 0, 1, v733);
            }
            v242 = v1184;
            __swift_storeEnumTagSinglePayload((uint64_t)v678, 0, 1, (uint64_t)v680);
            v240 = v1188;
          }
          uint64_t v755 = v242[11];
          v756 = &v240[v755];
          v757 = &v1198[v755];
          v758 = (int *)type metadata accessor for FlightReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v757, 1, (uint64_t)v758))
          {
            uint64_t v759 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
            memcpy(v756, v757, *(void *)(*(void *)(v759 - 8) + 64));
          }
          else
          {
            long long v760 = *((_OWORD *)v757 + 1);
            *(_OWORD *)v756 = *(_OWORD *)v757;
            *((_OWORD *)v756 + 1) = v760;
            long long v761 = *((_OWORD *)v757 + 3);
            *((_OWORD *)v756 + 2) = *((_OWORD *)v757 + 2);
            *((_OWORD *)v756 + 3) = v761;
            long long v762 = *((_OWORD *)v757 + 5);
            *((_OWORD *)v756 + 4) = *((_OWORD *)v757 + 4);
            *((_OWORD *)v756 + 5) = v762;
            v756[96] = v757[96];
            *(_OWORD *)(v756 + 104) = *(_OWORD *)(v757 + 104);
            uint64_t v763 = v758[13];
            v764 = &v756[v763];
            v765 = &v757[v763];
            uint64_t v766 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v765, 1, v766))
            {
              uint64_t v767 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v764, v765, *(void *)(*(void *)(v767 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v766 - 8) + 32))(v764, v765, v766);
              __swift_storeEnumTagSinglePayload((uint64_t)v764, 0, 1, v766);
            }
            uint64_t v784 = v758[14];
            v785 = &v756[v784];
            v786 = &v757[v784];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v757[v784], 1, v766))
            {
              uint64_t v787 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v785, v786, *(void *)(*(void *)(v787 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v766 - 8) + 32))(v785, v786, v766);
              __swift_storeEnumTagSinglePayload((uint64_t)v785, 0, 1, v766);
            }
            *(_OWORD *)&v756[v758[15]] = *(_OWORD *)&v757[v758[15]];
            *(_OWORD *)&v756[v758[16]] = *(_OWORD *)&v757[v758[16]];
            *(_OWORD *)&v756[v758[17]] = *(_OWORD *)&v757[v758[17]];
            uint64_t v801 = v758[18];
            v802 = &v756[v801];
            v803 = &v757[v801];
            uint64_t v804 = type metadata accessor for DateComponents();
            v805 = *(void (**)(char *, char *, uint64_t))(*(void *)(v804 - 8) + 32);
            v805(v802, v803, v804);
            v805(&v756[v758[19]], &v757[v758[19]], v804);
            *(_OWORD *)&v756[v758[20]] = *(_OWORD *)&v757[v758[20]];
            *(_OWORD *)&v756[v758[21]] = *(_OWORD *)&v757[v758[21]];
            *(_OWORD *)&v756[v758[22]] = *(_OWORD *)&v757[v758[22]];
            *(_OWORD *)&v756[v758[23]] = *(_OWORD *)&v757[v758[23]];
            *(_OWORD *)&v756[v758[24]] = *(_OWORD *)&v757[v758[24]];
            *(_OWORD *)&v756[v758[25]] = *(_OWORD *)&v757[v758[25]];
            *(_OWORD *)&v756[v758[26]] = *(_OWORD *)&v757[v758[26]];
            *(_OWORD *)&v756[v758[27]] = *(_OWORD *)&v757[v758[27]];
            *(_OWORD *)&v756[v758[28]] = *(_OWORD *)&v757[v758[28]];
            *(_OWORD *)&v756[v758[29]] = *(_OWORD *)&v757[v758[29]];
            *(_OWORD *)&v756[v758[30]] = *(_OWORD *)&v757[v758[30]];
            *(_OWORD *)&v756[v758[31]] = *(_OWORD *)&v757[v758[31]];
            *(_OWORD *)&v756[v758[32]] = *(_OWORD *)&v757[v758[32]];
            *(void *)&v756[v758[33]] = *(void *)&v757[v758[33]];
            *(void *)&v756[v758[34]] = *(void *)&v757[v758[34]];
            *(_OWORD *)&v756[v758[35]] = *(_OWORD *)&v757[v758[35]];
            *(_OWORD *)&v756[v758[36]] = *(_OWORD *)&v757[v758[36]];
            *(_OWORD *)&v756[v758[37]] = *(_OWORD *)&v757[v758[37]];
            uint64_t v806 = v758[38];
            v807 = &v756[v806];
            v808 = &v757[v806];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v757[v806], 1, v1194))
            {
              uint64_t v809 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v807, v808, *(void *)(*(void *)(v809 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1194 - 8) + 32))(v807, v808, v1194);
              __swift_storeEnumTagSinglePayload((uint64_t)v807, 0, 1, v1194);
            }
            a3 = v1201;
            *(_OWORD *)&v756[v758[39]] = *(_OWORD *)&v757[v758[39]];
            *(_OWORD *)&v756[v758[40]] = *(_OWORD *)&v757[v758[40]];
            uint64_t v837 = v758[41];
            v838 = &v756[v837];
            v839 = &v757[v837];
            *(void *)v838 = *(void *)v839;
            v838[8] = v839[8];
            *(_OWORD *)&v756[v758[42]] = *(_OWORD *)&v757[v758[42]];
            uint64_t v840 = v758[43];
            v841 = &v756[v840];
            v842 = &v757[v840];
            *(_OWORD *)v841 = *(_OWORD *)v842;
            *(void *)(v841 + 13) = *(void *)(v842 + 13);
            *(_OWORD *)&v756[v758[44]] = *(_OWORD *)&v757[v758[44]];
            *(_OWORD *)&v756[v758[45]] = *(_OWORD *)&v757[v758[45]];
            *(_OWORD *)&v756[v758[46]] = *(_OWORD *)&v757[v758[46]];
            *(_OWORD *)&v756[v758[47]] = *(_OWORD *)&v757[v758[47]];
            __swift_storeEnumTagSinglePayload((uint64_t)v756, 0, 1, (uint64_t)v758);
            v240 = v1188;
            v242 = v1184;
          }
          uint64_t v843 = v242[12];
          v844 = &v240[v843];
          v845 = &v1198[v843];
          v846 = (int *)type metadata accessor for HotelReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v845, 1, (uint64_t)v846))
          {
            uint64_t v847 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
            memcpy(v844, v845, *(void *)(*(void *)(v847 - 8) + 64));
          }
          else
          {
            long long v848 = *((_OWORD *)v845 + 1);
            *(_OWORD *)v844 = *(_OWORD *)v845;
            *((_OWORD *)v844 + 1) = v848;
            long long v849 = *((_OWORD *)v845 + 3);
            *((_OWORD *)v844 + 2) = *((_OWORD *)v845 + 2);
            *((_OWORD *)v844 + 3) = v849;
            long long v850 = *((_OWORD *)v845 + 5);
            *((_OWORD *)v844 + 4) = *((_OWORD *)v845 + 4);
            *((_OWORD *)v844 + 5) = v850;
            v844[96] = v845[96];
            *(_OWORD *)(v844 + 104) = *(_OWORD *)(v845 + 104);
            *(_OWORD *)(v844 + 120) = *(_OWORD *)(v845 + 120);
            uint64_t v851 = v846[14];
            v852 = &v844[v851];
            v853 = &v845[v851];
            uint64_t v854 = type metadata accessor for DateComponents();
            if (__swift_getEnumTagSinglePayload((uint64_t)v853, 1, v854))
            {
              uint64_t v855 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v852, v853, *(void *)(*(void *)(v855 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v854 - 8) + 32))(v852, v853, v854);
              __swift_storeEnumTagSinglePayload((uint64_t)v852, 0, 1, v854);
            }
            uint64_t v878 = v846[15];
            v879 = &v844[v878];
            v880 = &v845[v878];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v845[v878], 1, v854))
            {
              uint64_t v881 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v879, v880, *(void *)(*(void *)(v881 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v854 - 8) + 32))(v879, v880, v854);
              __swift_storeEnumTagSinglePayload((uint64_t)v879, 0, 1, v854);
            }
            *(_OWORD *)&v844[v846[16]] = *(_OWORD *)&v845[v846[16]];
            *(_OWORD *)&v844[v846[17]] = *(_OWORD *)&v845[v846[17]];
            *(_OWORD *)&v844[v846[18]] = *(_OWORD *)&v845[v846[18]];
            *(_OWORD *)&v844[v846[19]] = *(_OWORD *)&v845[v846[19]];
            *(_OWORD *)&v844[v846[20]] = *(_OWORD *)&v845[v846[20]];
            *(void *)&v844[v846[21]] = *(void *)&v845[v846[21]];
            *(void *)&v844[v846[22]] = *(void *)&v845[v846[22]];
            uint64_t v907 = v846[23];
            v908 = &v844[v907];
            v909 = &v845[v907];
            v908[8] = v909[8];
            *(void *)v908 = *(void *)v909;
            uint64_t v910 = v846[24];
            v911 = &v844[v910];
            v912 = &v845[v910];
            v911[8] = v912[8];
            *(void *)v911 = *(void *)v912;
            *(_OWORD *)&v844[v846[25]] = *(_OWORD *)&v845[v846[25]];
            *(_OWORD *)&v844[v846[26]] = *(_OWORD *)&v845[v846[26]];
            *(_OWORD *)&v844[v846[27]] = *(_OWORD *)&v845[v846[27]];
            *(_OWORD *)&v844[v846[28]] = *(_OWORD *)&v845[v846[28]];
            uint64_t v913 = v846[29];
            v914 = &v844[v913];
            v915 = &v845[v913];
            *(void *)v914 = *(void *)v915;
            v914[8] = v915[8];
            __swift_storeEnumTagSinglePayload((uint64_t)v844, 0, 1, (uint64_t)v846);
            v240 = v1188;
            v242 = v1184;
          }
          uint64_t v916 = v242[13];
          v917 = &v240[v916];
          v918 = &v1198[v916];
          v919 = (int *)type metadata accessor for RestaurantReservation(0);
          v40 = v1191;
          if (__swift_getEnumTagSinglePayload((uint64_t)v918, 1, (uint64_t)v919))
          {
            uint64_t v920 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
            memcpy(v917, v918, *(void *)(*(void *)(v920 - 8) + 64));
          }
          else
          {
            long long v921 = *((_OWORD *)v918 + 1);
            *(_OWORD *)v917 = *(_OWORD *)v918;
            *((_OWORD *)v917 + 1) = v921;
            long long v922 = *((_OWORD *)v918 + 3);
            *((_OWORD *)v917 + 2) = *((_OWORD *)v918 + 2);
            *((_OWORD *)v917 + 3) = v922;
            long long v923 = *((_OWORD *)v918 + 5);
            *((_OWORD *)v917 + 4) = *((_OWORD *)v918 + 4);
            *((_OWORD *)v917 + 5) = v923;
            v917[96] = v918[96];
            *(_OWORD *)(v917 + 104) = *(_OWORD *)(v918 + 104);
            *(_OWORD *)(v917 + 120) = *(_OWORD *)(v918 + 120);
            uint64_t v924 = v919[14];
            v925 = &v917[v924];
            v926 = &v918[v924];
            uint64_t v927 = type metadata accessor for DateComponents();
            if (__swift_getEnumTagSinglePayload((uint64_t)v926, 1, v927))
            {
              uint64_t v928 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v925, v926, *(void *)(*(void *)(v928 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v927 - 8) + 32))(v925, v926, v927);
              __swift_storeEnumTagSinglePayload((uint64_t)v925, 0, 1, v927);
            }
            v40 = v1191;
            *(_OWORD *)&v917[v919[15]] = *(_OWORD *)&v918[v919[15]];
            *(_OWORD *)&v917[v919[16]] = *(_OWORD *)&v918[v919[16]];
            *(_OWORD *)&v917[v919[17]] = *(_OWORD *)&v918[v919[17]];
            *(_OWORD *)&v917[v919[18]] = *(_OWORD *)&v918[v919[18]];
            *(_OWORD *)&v917[v919[19]] = *(_OWORD *)&v918[v919[19]];
            *(void *)&v917[v919[20]] = *(void *)&v918[v919[20]];
            *(_OWORD *)&v917[v919[21]] = *(_OWORD *)&v918[v919[21]];
            *(_OWORD *)&v917[v919[22]] = *(_OWORD *)&v918[v919[22]];
            *(_OWORD *)&v917[v919[23]] = *(_OWORD *)&v918[v919[23]];
            __swift_storeEnumTagSinglePayload((uint64_t)v917, 0, 1, (uint64_t)v919);
            v240 = v1188;
            v242 = v1184;
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v240, 0, 1, (uint64_t)v242);
        }
        uint64_t v1010 = v40[18];
        v1011 = &a1[v1010];
        v1012 = &a2[v1010];
        v1013 = (int *)type metadata accessor for PreExtractedCard(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1012, 1, (uint64_t)v1013))
        {
          uint64_t v1014 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
          memcpy(v1011, v1012, *(void *)(*(void *)(v1014 - 8) + 64));
        }
        else
        {
          long long v1015 = *((_OWORD *)v1012 + 1);
          *(_OWORD *)v1011 = *(_OWORD *)v1012;
          *((_OWORD *)v1011 + 1) = v1015;
          long long v1016 = *((_OWORD *)v1012 + 3);
          *((_OWORD *)v1011 + 2) = *((_OWORD *)v1012 + 2);
          *((_OWORD *)v1011 + 3) = v1016;
          long long v1017 = *((_OWORD *)v1012 + 5);
          *((_OWORD *)v1011 + 4) = *((_OWORD *)v1012 + 4);
          *((_OWORD *)v1011 + 5) = v1017;
          uint64_t v1018 = v1013[10];
          v1019 = &v1011[v1018];
          v1020 = &v1012[v1018];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v1012[v1018], 1, v1194))
          {
            uint64_t v1021 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1019, v1020, *(void *)(*(void *)(v1021 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1194 - 8) + 32))(v1019, v1020, v1194);
            __swift_storeEnumTagSinglePayload((uint64_t)v1019, 0, 1, v1194);
          }
          uint64_t v1022 = v1013[11];
          v1023 = &v1011[v1022];
          v1024 = &v1012[v1022];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v1012[v1022], 1, v1194))
          {
            uint64_t v1025 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1023, v1024, *(void *)(*(void *)(v1025 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1194 - 8) + 32))(v1023, v1024, v1194);
            __swift_storeEnumTagSinglePayload((uint64_t)v1023, 0, 1, v1194);
          }
          *(_OWORD *)&v1011[v1013[12]] = *(_OWORD *)&v1012[v1013[12]];
          *(_OWORD *)&v1011[v1013[13]] = *(_OWORD *)&v1012[v1013[13]];
          *(_OWORD *)&v1011[v1013[14]] = *(_OWORD *)&v1012[v1013[14]];
          uint64_t v1026 = v1013[15];
          v1027 = &v1011[v1026];
          v1028 = &v1012[v1026];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v1012[v1026], 1, v1194))
          {
            uint64_t v1029 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1027, v1028, *(void *)(*(void *)(v1029 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1194 - 8) + 32))(v1027, v1028, v1194);
            __swift_storeEnumTagSinglePayload((uint64_t)v1027, 0, 1, v1194);
          }
          a3 = v1201;
          *(_OWORD *)&v1011[v1013[16]] = *(_OWORD *)&v1012[v1013[16]];
          *(_OWORD *)&v1011[v1013[17]] = *(_OWORD *)&v1012[v1013[17]];
          *(_OWORD *)&v1011[v1013[18]] = *(_OWORD *)&v1012[v1013[18]];
          *(_OWORD *)&v1011[v1013[19]] = *(_OWORD *)&v1012[v1013[19]];
          *(_OWORD *)&v1011[v1013[20]] = *(_OWORD *)&v1012[v1013[20]];
          *(_OWORD *)&v1011[v1013[21]] = *(_OWORD *)&v1012[v1013[21]];
          *(_OWORD *)&v1011[v1013[22]] = *(_OWORD *)&v1012[v1013[22]];
          *(_OWORD *)&v1011[v1013[23]] = *(_OWORD *)&v1012[v1013[23]];
          __swift_storeEnumTagSinglePayload((uint64_t)v1011, 0, 1, (uint64_t)v1013);
        }
        uint64_t v1030 = v40[19];
        v1031 = &a1[v1030];
        v1032 = &a2[v1030];
        v1033 = (int *)type metadata accessor for PreExtractedContact(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1032, 1, (uint64_t)v1033))
        {
          uint64_t v1034 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
          memcpy(v1031, v1032, *(void *)(*(void *)(v1034 - 8) + 64));
        }
        else
        {
          long long v1035 = *((_OWORD *)v1032 + 1);
          *(_OWORD *)v1031 = *(_OWORD *)v1032;
          *((_OWORD *)v1031 + 1) = v1035;
          long long v1036 = *((_OWORD *)v1032 + 3);
          *((_OWORD *)v1031 + 2) = *((_OWORD *)v1032 + 2);
          *((_OWORD *)v1031 + 3) = v1036;
          long long v1037 = *((_OWORD *)v1032 + 5);
          *((_OWORD *)v1031 + 4) = *((_OWORD *)v1032 + 4);
          *((_OWORD *)v1031 + 5) = v1037;
          uint64_t v1038 = v1033[11];
          v1039 = &v1031[v1038];
          v1040 = &v1032[v1038];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v1032[v1038], 1, v1194))
          {
            uint64_t v1041 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1039, v1040, *(void *)(*(void *)(v1041 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1194 - 8) + 32))(v1039, v1040, v1194);
            __swift_storeEnumTagSinglePayload((uint64_t)v1039, 0, 1, v1194);
          }
          *(_OWORD *)&v1031[v1033[12]] = *(_OWORD *)&v1032[v1033[12]];
          *(void *)&v1031[v1033[13]] = *(void *)&v1032[v1033[13]];
          uint64_t v1042 = v1033[14];
          v1043 = &v1031[v1042];
          v1044 = &v1032[v1042];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v1032[v1042], 1, v1194))
          {
            uint64_t v1045 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1043, v1044, *(void *)(*(void *)(v1045 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1194 - 8) + 32))(v1043, v1044, v1194);
            __swift_storeEnumTagSinglePayload((uint64_t)v1043, 0, 1, v1194);
          }
          a3 = v1201;
          *(void *)&v1031[v1033[15]] = *(void *)&v1032[v1033[15]];
          *(void *)&v1031[v1033[16]] = *(void *)&v1032[v1033[16]];
          *(_OWORD *)&v1031[v1033[17]] = *(_OWORD *)&v1032[v1033[17]];
          *(void *)&v1031[v1033[18]] = *(void *)&v1032[v1033[18]];
          *(void *)&v1031[v1033[19]] = *(void *)&v1032[v1033[19]];
          __swift_storeEnumTagSinglePayload((uint64_t)v1031, 0, 1, (uint64_t)v1033);
        }
        uint64_t v1046 = v40[20];
        v1047 = &a1[v1046];
        v1048 = &a2[v1046];
        v1049 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1048, 1, (uint64_t)v1049))
        {
          uint64_t v1050 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
          memcpy(v1047, v1048, *(void *)(*(void *)(v1050 - 8) + 64));
        }
        else
        {
          v1192 = v40;
          long long v1051 = *((_OWORD *)v1048 + 1);
          *(_OWORD *)v1047 = *(_OWORD *)v1048;
          *((_OWORD *)v1047 + 1) = v1051;
          long long v1052 = *((_OWORD *)v1048 + 3);
          *((_OWORD *)v1047 + 2) = *((_OWORD *)v1048 + 2);
          *((_OWORD *)v1047 + 3) = v1052;
          uint64_t v1053 = v1049[8];
          v1054 = &v1047[v1053];
          v1055 = &v1048[v1053];
          uint64_t v1056 = type metadata accessor for URL();
          if (__swift_getEnumTagSinglePayload((uint64_t)v1055, 1, v1056))
          {
            uint64_t v1057 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v1054, v1055, *(void *)(*(void *)(v1057 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1056 - 8) + 32))(v1054, v1055, v1056);
            __swift_storeEnumTagSinglePayload((uint64_t)v1054, 0, 1, v1056);
          }
          *(_OWORD *)&v1047[v1049[9]] = *(_OWORD *)&v1048[v1049[9]];
          *(_OWORD *)&v1047[v1049[10]] = *(_OWORD *)&v1048[v1049[10]];
          *(_OWORD *)&v1047[v1049[11]] = *(_OWORD *)&v1048[v1049[11]];
          uint64_t v1058 = v1049[12];
          v1059 = &v1047[v1058];
          v1060 = &v1048[v1058];
          v40 = v1192;
          if (__swift_getEnumTagSinglePayload((uint64_t)&v1048[v1058], 1, v1194))
          {
            uint64_t v1061 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1059, v1060, *(void *)(*(void *)(v1061 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1194 - 8) + 32))(v1059, v1060, v1194);
            __swift_storeEnumTagSinglePayload((uint64_t)v1059, 0, 1, v1194);
          }
          uint64_t v1062 = v1049[13];
          v1063 = &v1047[v1062];
          v1064 = &v1048[v1062];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v1048[v1062], 1, v1194))
          {
            uint64_t v1065 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1063, v1064, *(void *)(*(void *)(v1065 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1194 - 8) + 32))(v1063, v1064, v1194);
            __swift_storeEnumTagSinglePayload((uint64_t)v1063, 0, 1, v1194);
          }
          a3 = v1201;
          uint64_t v1066 = v1049[14];
          v1067 = &v1047[v1066];
          v1068 = &v1048[v1066];
          *(void *)v1067 = *(void *)v1068;
          v1067[8] = v1068[8];
          *(_OWORD *)&v1047[v1049[15]] = *(_OWORD *)&v1048[v1049[15]];
          *(_OWORD *)&v1047[v1049[16]] = *(_OWORD *)&v1048[v1049[16]];
          *(_OWORD *)&v1047[v1049[17]] = *(_OWORD *)&v1048[v1049[17]];
          *(_OWORD *)&v1047[v1049[18]] = *(_OWORD *)&v1048[v1049[18]];
          *(_OWORD *)&v1047[v1049[19]] = *(_OWORD *)&v1048[v1049[19]];
          __swift_storeEnumTagSinglePayload((uint64_t)v1047, 0, 1, (uint64_t)v1049);
        }
        memcpy(&a1[v40[21]], &a2[v40[21]], 0x90uLL);
        goto LABEL_523;
      case 4u:
        long long v46 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v46;
        long long v47 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v47;
        uint64_t v48 = type metadata accessor for NoteDocument(0);
        uint64_t v49 = *(int *)(v48 + 32);
        v50 = &a1[v49];
        v51 = &a2[v49];
        uint64_t v52 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v51, 1, v52))
        {
          uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v50, v51, *(void *)(*(void *)(v53 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v50, v51, v52);
          __swift_storeEnumTagSinglePayload((uint64_t)v50, 0, 1, v52);
        }
        uint64_t v244 = *(int *)(v48 + 36);
        v245 = &a1[v244];
        v246 = &a2[v244];
        if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v244], 1, v52)) {
          goto LABEL_105;
        }
        goto LABEL_135;
      case 5u:
        long long v54 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v54;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        v55 = (int *)type metadata accessor for Reminder(0);
        uint64_t v56 = v55[7];
        v57 = &a1[v56];
        v58 = &a2[v56];
        uint64_t v59 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v58, 1, v59))
        {
          uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v57, v58, *(void *)(*(void *)(v60 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 32))(v57, v58, v59);
          __swift_storeEnumTagSinglePayload((uint64_t)v57, 0, 1, v59);
        }
        uint64_t v247 = v55[8];
        v248 = &a1[v247];
        v249 = &a2[v247];
        if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v247], 1, v59))
        {
          uint64_t v250 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v248, v249, *(void *)(*(void *)(v250 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 32))(v248, v249, v59);
          __swift_storeEnumTagSinglePayload((uint64_t)v248, 0, 1, v59);
        }
        a1[v55[9]] = a2[v55[9]];
        *(_OWORD *)&a1[v55[10]] = *(_OWORD *)&a2[v55[10]];
        *(_OWORD *)&a1[v55[11]] = *(_OWORD *)&a2[v55[11]];
        uint64_t v307 = v55[12];
        v78 = &a1[v307];
        v79 = &a2[v307];
        uint64_t v80 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v79, 1, v80)) {
          goto LABEL_145;
        }
        goto LABEL_127;
      case 6u:
        long long v61 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v61;
        long long v62 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v62;
        v63 = (int *)type metadata accessor for PhoneHistory(0);
        uint64_t v64 = v63[10];
        v65 = &a1[v64];
        v66 = &a2[v64];
        uint64_t v67 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v66, 1, v67))
        {
          uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v65, v66, *(void *)(*(void *)(v68 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 32))(v65, v66, v67);
          __swift_storeEnumTagSinglePayload((uint64_t)v65, 0, 1, v67);
        }
        *(_OWORD *)&a1[v63[11]] = *(_OWORD *)&a2[v63[11]];
        *(_OWORD *)&a1[v63[12]] = *(_OWORD *)&a2[v63[12]];
        uint64_t v251 = v63[13];
        v78 = &a1[v251];
        v79 = &a2[v251];
        uint64_t v80 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v79, 1, v80)) {
          goto LABEL_145;
        }
        goto LABEL_127;
      case 7u:
        long long v69 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v69;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        uint64_t v70 = type metadata accessor for VoicemailTranscript(0);
        uint64_t v71 = *(int *)(v70 + 28);
        v72 = &a1[v71];
        v73 = &a2[v71];
        uint64_t v74 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v73, 1, v74))
        {
          uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v72, v73, *(void *)(*(void *)(v75 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 32))(v72, v73, v74);
          __swift_storeEnumTagSinglePayload((uint64_t)v72, 0, 1, v74);
        }
        uint64_t v252 = *(int *)(v70 + 32);
        v78 = &a1[v252];
        v79 = &a2[v252];
        uint64_t v80 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v79, 1, v80)) {
          goto LABEL_145;
        }
        goto LABEL_127;
      case 8u:
        long long v76 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v76;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        uint64_t v77 = *(int *)(type metadata accessor for JournalEntry(0) + 28);
        v78 = &a1[v77];
        v79 = &a2[v77];
        uint64_t v80 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v79, 1, v80)) {
          goto LABEL_145;
        }
        goto LABEL_127;
      case 9u:
        long long v81 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v81;
        v82 = (int *)type metadata accessor for VoiceMemo(0);
        uint64_t v83 = v82[6];
        v84 = &a1[v83];
        v85 = &a2[v83];
        uint64_t v86 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v85, 1, v86))
        {
          uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v84, v85, *(void *)(*(void *)(v87 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 32))(v84, v85, v86);
          __swift_storeEnumTagSinglePayload((uint64_t)v84, 0, 1, v86);
        }
        uint64_t v253 = v82[7];
        v254 = &a1[v253];
        v255 = &a2[v253];
        *(void *)v254 = *(void *)v255;
        v254[8] = v255[8];
        uint64_t v256 = v82[8];
        v78 = &a1[v256];
        v79 = &a2[v256];
        uint64_t v80 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v79, 1, v80)) {
          goto LABEL_145;
        }
        goto LABEL_127;
      case 0xAu:
        long long v88 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v88;
        v89 = (int *)type metadata accessor for Safari(0);
        uint64_t v90 = v89[6];
        v91 = &a1[v90];
        v92 = &a2[v90];
        uint64_t v52 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v92, 1, v52))
        {
          uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v91, v92, *(void *)(*(void *)(v93 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v91, v92, v52);
          __swift_storeEnumTagSinglePayload((uint64_t)v91, 0, 1, v52);
        }
        *(_OWORD *)&a1[v89[7]] = *(_OWORD *)&a2[v89[7]];
        *(_OWORD *)&a1[v89[8]] = *(_OWORD *)&a2[v89[8]];
        uint64_t v257 = v89[9];
        v245 = &a1[v257];
        v246 = &a2[v257];
        if (!__swift_getEnumTagSinglePayload((uint64_t)&a2[v257], 1, v52)) {
          goto LABEL_135;
        }
        uint64_t v258 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v245, v246, *(void *)(*(void *)(v258 - 8) + 64));
        goto LABEL_523;
      case 0xCu:
        long long v94 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v94;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        v95 = (int *)type metadata accessor for WalletTransaction(0);
        uint64_t v96 = v95[7];
        v97 = &a1[v96];
        v98 = &a2[v96];
        uint64_t v99 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v98, 1, v99))
        {
          uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v97, v98, *(void *)(*(void *)(v100 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v99 - 8) + 32))(v97, v98, v99);
          __swift_storeEnumTagSinglePayload((uint64_t)v97, 0, 1, v99);
        }
        *(_OWORD *)&a1[v95[8]] = *(_OWORD *)&a2[v95[8]];
        *(_OWORD *)&a1[v95[9]] = *(_OWORD *)&a2[v95[9]];
        *(_OWORD *)&a1[v95[10]] = *(_OWORD *)&a2[v95[10]];
        uint64_t v259 = v95[11];
        v260 = &a1[v259];
        v261 = &a2[v259];
        *(void *)(v260 + 13) = *(void *)(v261 + 13);
        *(_OWORD *)v260 = *(_OWORD *)v261;
        *(_OWORD *)&a1[v95[12]] = *(_OWORD *)&a2[v95[12]];
        goto LABEL_523;
      case 0xDu:
        long long v101 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v101;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        v102 = (int *)type metadata accessor for WalletPass(0);
        uint64_t v103 = v102[7];
        v104 = &a1[v103];
        v105 = &a2[v103];
        uint64_t v106 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v105, 1, v106))
        {
          uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v104, v105, *(void *)(*(void *)(v107 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v106 - 8) + 32))(v104, v105, v106);
          __swift_storeEnumTagSinglePayload((uint64_t)v104, 0, 1, v106);
        }
        *(_OWORD *)&a1[v102[8]] = *(_OWORD *)&a2[v102[8]];
        *(void *)&a1[v102[9]] = *(void *)&a2[v102[9]];
        goto LABEL_523;
      case 0xFu:
        long long v108 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v108;
        long long v109 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v109;
        long long v110 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v110;
        a1[96] = a2[96];
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
        v111 = (int *)type metadata accessor for FlightReservation(0);
        uint64_t v112 = v111[13];
        v113 = &a1[v112];
        v114 = &a2[v112];
        uint64_t v115 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v114, 1, v115))
        {
          uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v113, v114, *(void *)(*(void *)(v116 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v115 - 8) + 32))(v113, v114, v115);
          __swift_storeEnumTagSinglePayload((uint64_t)v113, 0, 1, v115);
        }
        uint64_t v262 = v111[14];
        v263 = &a1[v262];
        v264 = &a2[v262];
        uint64_t v265 = a3;
        if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v262], 1, v115))
        {
          uint64_t v266 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v263, v264, *(void *)(*(void *)(v266 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v115 - 8) + 32))(v263, v264, v115);
          __swift_storeEnumTagSinglePayload((uint64_t)v263, 0, 1, v115);
        }
        *(_OWORD *)&a1[v111[15]] = *(_OWORD *)&a2[v111[15]];
        *(_OWORD *)&a1[v111[16]] = *(_OWORD *)&a2[v111[16]];
        *(_OWORD *)&a1[v111[17]] = *(_OWORD *)&a2[v111[17]];
        uint64_t v308 = v111[18];
        v309 = &a1[v308];
        v310 = &a2[v308];
        uint64_t v311 = type metadata accessor for DateComponents();
        v312 = *(void (**)(char *, char *, uint64_t))(*(void *)(v311 - 8) + 32);
        v312(v309, v310, v311);
        v312(&a1[v111[19]], &a2[v111[19]], v311);
        *(_OWORD *)&a1[v111[20]] = *(_OWORD *)&a2[v111[20]];
        *(_OWORD *)&a1[v111[21]] = *(_OWORD *)&a2[v111[21]];
        *(_OWORD *)&a1[v111[22]] = *(_OWORD *)&a2[v111[22]];
        *(_OWORD *)&a1[v111[23]] = *(_OWORD *)&a2[v111[23]];
        *(_OWORD *)&a1[v111[24]] = *(_OWORD *)&a2[v111[24]];
        *(_OWORD *)&a1[v111[25]] = *(_OWORD *)&a2[v111[25]];
        *(_OWORD *)&a1[v111[26]] = *(_OWORD *)&a2[v111[26]];
        *(_OWORD *)&a1[v111[27]] = *(_OWORD *)&a2[v111[27]];
        *(_OWORD *)&a1[v111[28]] = *(_OWORD *)&a2[v111[28]];
        *(_OWORD *)&a1[v111[29]] = *(_OWORD *)&a2[v111[29]];
        *(_OWORD *)&a1[v111[30]] = *(_OWORD *)&a2[v111[30]];
        *(_OWORD *)&a1[v111[31]] = *(_OWORD *)&a2[v111[31]];
        *(_OWORD *)&a1[v111[32]] = *(_OWORD *)&a2[v111[32]];
        *(void *)&a1[v111[33]] = *(void *)&a2[v111[33]];
        *(void *)&a1[v111[34]] = *(void *)&a2[v111[34]];
        *(_OWORD *)&a1[v111[35]] = *(_OWORD *)&a2[v111[35]];
        *(_OWORD *)&a1[v111[36]] = *(_OWORD *)&a2[v111[36]];
        *(_OWORD *)&a1[v111[37]] = *(_OWORD *)&a2[v111[37]];
        uint64_t v313 = v111[38];
        v314 = &a1[v313];
        v315 = &a2[v313];
        uint64_t v316 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v315, 1, v316))
        {
          uint64_t v317 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v314, v315, *(void *)(*(void *)(v317 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v316 - 8) + 32))(v314, v315, v316);
          __swift_storeEnumTagSinglePayload((uint64_t)v314, 0, 1, v316);
        }
        a3 = v265;
        *(_OWORD *)&a1[v111[39]] = *(_OWORD *)&a2[v111[39]];
        *(_OWORD *)&a1[v111[40]] = *(_OWORD *)&a2[v111[40]];
        uint64_t v342 = v111[41];
        v343 = &a1[v342];
        v344 = &a2[v342];
        *(void *)v343 = *(void *)v344;
        v343[8] = v344[8];
        *(_OWORD *)&a1[v111[42]] = *(_OWORD *)&a2[v111[42]];
        uint64_t v345 = v111[43];
        v346 = &a1[v345];
        v347 = &a2[v345];
        *(_OWORD *)v346 = *(_OWORD *)v347;
        *(void *)(v346 + 13) = *(void *)(v347 + 13);
        *(_OWORD *)&a1[v111[44]] = *(_OWORD *)&a2[v111[44]];
        *(_OWORD *)&a1[v111[45]] = *(_OWORD *)&a2[v111[45]];
        *(_OWORD *)&a1[v111[46]] = *(_OWORD *)&a2[v111[46]];
        *(_OWORD *)&a1[v111[47]] = *(_OWORD *)&a2[v111[47]];
        uint64_t v348 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]));
        *(void *)&a1[*(int *)(v348 + 48)] = *(void *)&a2[*(int *)(v348 + 48)];
        goto LABEL_523;
      case 0x10u:
        long long v117 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v117;
        long long v118 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v118;
        long long v119 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v119;
        a1[96] = a2[96];
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
        v120 = (int *)type metadata accessor for HotelReservation(0);
        uint64_t v121 = v120[14];
        v122 = &a1[v121];
        v123 = &a2[v121];
        uint64_t v124 = type metadata accessor for DateComponents();
        if (__swift_getEnumTagSinglePayload((uint64_t)v123, 1, v124))
        {
          uint64_t v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
          memcpy(v122, v123, *(void *)(*(void *)(v125 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v124 - 8) + 32))(v122, v123, v124);
          __swift_storeEnumTagSinglePayload((uint64_t)v122, 0, 1, v124);
        }
        uint64_t v267 = v120[15];
        v268 = &a1[v267];
        v269 = &a2[v267];
        if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v267], 1, v124))
        {
          uint64_t v270 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
          memcpy(v268, v269, *(void *)(*(void *)(v270 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v124 - 8) + 32))(v268, v269, v124);
          __swift_storeEnumTagSinglePayload((uint64_t)v268, 0, 1, v124);
        }
        *(_OWORD *)&a1[v120[16]] = *(_OWORD *)&a2[v120[16]];
        *(_OWORD *)&a1[v120[17]] = *(_OWORD *)&a2[v120[17]];
        *(_OWORD *)&a1[v120[18]] = *(_OWORD *)&a2[v120[18]];
        *(_OWORD *)&a1[v120[19]] = *(_OWORD *)&a2[v120[19]];
        *(_OWORD *)&a1[v120[20]] = *(_OWORD *)&a2[v120[20]];
        *(void *)&a1[v120[21]] = *(void *)&a2[v120[21]];
        *(void *)&a1[v120[22]] = *(void *)&a2[v120[22]];
        uint64_t v318 = v120[23];
        v319 = &a1[v318];
        v320 = &a2[v318];
        v319[8] = v320[8];
        *(void *)v319 = *(void *)v320;
        uint64_t v321 = v120[24];
        v322 = &a1[v321];
        v323 = &a2[v321];
        v322[8] = v323[8];
        *(void *)v322 = *(void *)v323;
        *(_OWORD *)&a1[v120[25]] = *(_OWORD *)&a2[v120[25]];
        *(_OWORD *)&a1[v120[26]] = *(_OWORD *)&a2[v120[26]];
        *(_OWORD *)&a1[v120[27]] = *(_OWORD *)&a2[v120[27]];
        *(_OWORD *)&a1[v120[28]] = *(_OWORD *)&a2[v120[28]];
        uint64_t v324 = v120[29];
        v325 = &a1[v324];
        v326 = &a2[v324];
        *(void *)v325 = *(void *)v326;
        v325[8] = v326[8];
        goto LABEL_523;
      case 0x11u:
        long long v126 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v126;
        long long v127 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v127;
        long long v128 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v128;
        a1[96] = a2[96];
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
        v129 = (int *)type metadata accessor for RestaurantReservation(0);
        uint64_t v130 = v129[14];
        v131 = &a1[v130];
        v132 = &a2[v130];
        uint64_t v133 = type metadata accessor for DateComponents();
        if (__swift_getEnumTagSinglePayload((uint64_t)v132, 1, v133))
        {
          uint64_t v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
          memcpy(v131, v132, *(void *)(*(void *)(v134 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v133 - 8) + 32))(v131, v132, v133);
          __swift_storeEnumTagSinglePayload((uint64_t)v131, 0, 1, v133);
        }
        *(_OWORD *)&a1[v129[15]] = *(_OWORD *)&a2[v129[15]];
        *(_OWORD *)&a1[v129[16]] = *(_OWORD *)&a2[v129[16]];
        *(_OWORD *)&a1[v129[17]] = *(_OWORD *)&a2[v129[17]];
        *(_OWORD *)&a1[v129[18]] = *(_OWORD *)&a2[v129[18]];
        *(_OWORD *)&a1[v129[19]] = *(_OWORD *)&a2[v129[19]];
        *(void *)&a1[v129[20]] = *(void *)&a2[v129[20]];
        *(_OWORD *)&a1[v129[21]] = *(_OWORD *)&a2[v129[21]];
        *(_OWORD *)&a1[v129[22]] = *(_OWORD *)&a2[v129[22]];
        *(_OWORD *)&a1[v129[23]] = *(_OWORD *)&a2[v129[23]];
        goto LABEL_523;
      case 0x12u:
        long long v135 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v135;
        long long v136 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v136;
        long long v137 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v137;
        long long v138 = *((_OWORD *)a2 + 7);
        *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
        *((_OWORD *)a1 + 7) = v138;
        a1[128] = a2[128];
        *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
        *((void *)a1 + 17) = *((void *)a2 + 17);
        long long v139 = *((_OWORD *)a2 + 10);
        *((_OWORD *)a1 + 9) = *((_OWORD *)a2 + 9);
        *((_OWORD *)a1 + 10) = v139;
        long long v140 = *((_OWORD *)a2 + 12);
        *((_OWORD *)a1 + 11) = *((_OWORD *)a2 + 11);
        *((_OWORD *)a1 + 12) = v140;
        long long v141 = *((_OWORD *)a2 + 14);
        *((_OWORD *)a1 + 13) = *((_OWORD *)a2 + 13);
        *((_OWORD *)a1 + 14) = v141;
        *((_OWORD *)a1 + 15) = *((_OWORD *)a2 + 15);
        *((void *)a1 + 32) = *((void *)a2 + 32);
        *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
        *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
        *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
        *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
        *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
        *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
        *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
        a1[384] = a2[384];
        *((void *)a1 + 47) = *((void *)a2 + 47);
        *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
        *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
        uint64_t v142 = type metadata accessor for RentalCarReservation(0);
        uint64_t v143 = *(int *)(v142 + 140);
        v144 = &a1[v143];
        v145 = &a2[v143];
        uint64_t v52 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v145, 1, v52))
        {
          uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v144, v145, *(void *)(*(void *)(v146 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v144, v145, v52);
          __swift_storeEnumTagSinglePayload((uint64_t)v144, 0, 1, v52);
        }
        uint64_t v271 = *(int *)(v142 + 144);
        v245 = &a1[v271];
        v246 = &a2[v271];
        if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v271], 1, v52)) {
          goto LABEL_105;
        }
        goto LABEL_135;
      case 0x13u:
        long long v147 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v147;
        long long v148 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v148;
        long long v149 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v149;
        long long v150 = *((_OWORD *)a2 + 7);
        *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
        *((_OWORD *)a1 + 7) = v150;
        a1[128] = a2[128];
        *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
        *((void *)a1 + 17) = *((void *)a2 + 17);
        long long v151 = *((_OWORD *)a2 + 10);
        *((_OWORD *)a1 + 9) = *((_OWORD *)a2 + 9);
        *((_OWORD *)a1 + 10) = v151;
        long long v152 = *((_OWORD *)a2 + 12);
        *((_OWORD *)a1 + 11) = *((_OWORD *)a2 + 11);
        *((_OWORD *)a1 + 12) = v152;
        *((void *)a1 + 26) = *((void *)a2 + 26);
        *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
        *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
        *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
        *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
        a1[296] = a2[296];
        uint64_t v153 = *((void *)a2 + 36);
        *((void *)a1 + 35) = *((void *)a2 + 35);
        *((void *)a1 + 36) = v153;
        uint64_t v154 = type metadata accessor for TicketedTransportation(0);
        uint64_t v155 = *(int *)(v154 + 112);
        v156 = &a1[v155];
        v157 = &a2[v155];
        uint64_t v52 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v157, 1, v52))
        {
          uint64_t v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v156, v157, *(void *)(*(void *)(v158 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v156, v157, v52);
          __swift_storeEnumTagSinglePayload((uint64_t)v156, 0, 1, v52);
        }
        uint64_t v272 = *(int *)(v154 + 116);
        v245 = &a1[v272];
        v246 = &a2[v272];
        if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v272], 1, v52)) {
          goto LABEL_105;
        }
        goto LABEL_135;
      case 0x14u:
        long long v159 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v159;
        long long v160 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v160;
        long long v161 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v161;
        long long v162 = *((_OWORD *)a2 + 7);
        *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
        *((_OWORD *)a1 + 7) = v162;
        a1[128] = a2[128];
        *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
        *((void *)a1 + 17) = *((void *)a2 + 17);
        long long v163 = *((_OWORD *)a2 + 10);
        *((_OWORD *)a1 + 9) = *((_OWORD *)a2 + 9);
        *((_OWORD *)a1 + 10) = v163;
        long long v164 = *((_OWORD *)a2 + 12);
        *((_OWORD *)a1 + 11) = *((_OWORD *)a2 + 11);
        *((_OWORD *)a1 + 12) = v164;
        long long v165 = *((_OWORD *)a2 + 14);
        *((_OWORD *)a1 + 13) = *((_OWORD *)a2 + 13);
        *((_OWORD *)a1 + 14) = v165;
        *((void *)a1 + 30) = *((void *)a2 + 30);
        *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
        *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
        a1[296] = a2[296];
        uint64_t v166 = *((void *)a2 + 36);
        *((void *)a1 + 35) = *((void *)a2 + 35);
        *((void *)a1 + 36) = v166;
        *((_OWORD *)a1 + 19) = *((_OWORD *)a2 + 19);
        v167 = (int *)type metadata accessor for TicketedShow(0);
        uint64_t v168 = v167[29];
        v169 = &a1[v168];
        v170 = &a2[v168];
        uint64_t v171 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v170, 1, v171))
        {
          uint64_t v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v169, v170, *(void *)(*(void *)(v172 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v171 - 8) + 32))(v169, v170, v171);
          __swift_storeEnumTagSinglePayload((uint64_t)v169, 0, 1, v171);
        }
        *(_OWORD *)&a1[v167[30]] = *(_OWORD *)&a2[v167[30]];
        uint64_t v273 = v167[31];
        v274 = &a1[v273];
        v275 = &a2[v273];
        uint64_t v276 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v275, 1, v276))
        {
          uint64_t v277 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v274, v275, *(void *)(*(void *)(v277 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v276 - 8) + 32))(v274, v275, v276);
          __swift_storeEnumTagSinglePayload((uint64_t)v274, 0, 1, v276);
        }
        uint64_t v327 = v167[32];
        v328 = &a1[v327];
        v329 = &a2[v327];
        if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v327], 1, v276))
        {
          uint64_t v330 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v328, v329, *(void *)(*(void *)(v330 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v276 - 8) + 32))(v328, v329, v276);
          __swift_storeEnumTagSinglePayload((uint64_t)v328, 0, 1, v276);
        }
        goto LABEL_523;
      case 0x15u:
        long long v173 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v173;
        long long v174 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v174;
        long long v175 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v175;
        long long v176 = *((_OWORD *)a2 + 7);
        *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
        *((_OWORD *)a1 + 7) = v176;
        a1[128] = a2[128];
        *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
        *((void *)a1 + 17) = *((void *)a2 + 17);
        long long v177 = *((_OWORD *)a2 + 10);
        *((_OWORD *)a1 + 9) = *((_OWORD *)a2 + 9);
        *((_OWORD *)a1 + 10) = v177;
        long long v178 = *((_OWORD *)a2 + 12);
        *((_OWORD *)a1 + 11) = *((_OWORD *)a2 + 11);
        *((_OWORD *)a1 + 12) = v178;
        long long v179 = *((_OWORD *)a2 + 14);
        *((_OWORD *)a1 + 13) = *((_OWORD *)a2 + 13);
        *((_OWORD *)a1 + 14) = v179;
        long long v180 = *((_OWORD *)a2 + 16);
        *((_OWORD *)a1 + 15) = *((_OWORD *)a2 + 15);
        *((_OWORD *)a1 + 16) = v180;
        a1[280] = a2[280];
        *((void *)a1 + 34) = *((void *)a2 + 34);
        *((_OWORD *)a1 + 18) = *((_OWORD *)a2 + 18);
        uint64_t v181 = type metadata accessor for Appointment(0);
        uint64_t v182 = *(int *)(v181 + 108);
        v183 = &a1[v182];
        v184 = &a2[v182];
        uint64_t v52 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v184, 1, v52))
        {
          uint64_t v185 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v183, v184, *(void *)(*(void *)(v185 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v183, v184, v52);
          __swift_storeEnumTagSinglePayload((uint64_t)v183, 0, 1, v52);
        }
        uint64_t v278 = *(int *)(v181 + 112);
        v245 = &a1[v278];
        v246 = &a2[v278];
        if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v278], 1, v52))
        {
LABEL_105:
          uint64_t v279 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v245, v246, *(void *)(*(void *)(v279 - 8) + 64));
        }
        else
        {
LABEL_135:
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v245, v246, v52);
          __swift_storeEnumTagSinglePayload((uint64_t)v245, 0, 1, v52);
        }
        goto LABEL_523;
      case 0x16u:
        long long v186 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v186;
        long long v187 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v187;
        long long v188 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v188;
        long long v189 = *((_OWORD *)a2 + 7);
        *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
        *((_OWORD *)a1 + 7) = v189;
        a1[128] = a2[128];
        *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
        *((void *)a1 + 17) = *((void *)a2 + 17);
        long long v190 = *((_OWORD *)a2 + 10);
        *((_OWORD *)a1 + 9) = *((_OWORD *)a2 + 9);
        *((_OWORD *)a1 + 10) = v190;
        long long v191 = *((_OWORD *)a2 + 12);
        *((_OWORD *)a1 + 11) = *((_OWORD *)a2 + 11);
        *((_OWORD *)a1 + 12) = v191;
        long long v192 = *((_OWORD *)a2 + 14);
        *((_OWORD *)a1 + 13) = *((_OWORD *)a2 + 13);
        *((_OWORD *)a1 + 14) = v192;
        *((_OWORD *)a1 + 15) = *((_OWORD *)a2 + 15);
        v193 = (int *)type metadata accessor for Party(0);
        uint64_t v194 = v193[24];
        v195 = &a1[v194];
        v196 = &a2[v194];
        uint64_t v197 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v196, 1, v197))
        {
          uint64_t v198 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v195, v196, *(void *)(*(void *)(v198 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v197 - 8) + 32))(v195, v196, v197);
          __swift_storeEnumTagSinglePayload((uint64_t)v195, 0, 1, v197);
        }
        uint64_t v280 = v193[25];
        v281 = &a1[v280];
        v282 = &a2[v280];
        if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v280], 1, v197))
        {
          uint64_t v283 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v281, v282, *(void *)(*(void *)(v283 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v197 - 8) + 32))(v281, v282, v197);
          __swift_storeEnumTagSinglePayload((uint64_t)v281, 0, 1, v197);
        }
        uint64_t v331 = v193[26];
        v78 = &a1[v331];
        v79 = &a2[v331];
        uint64_t v80 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v79, 1, v80)) {
          goto LABEL_145;
        }
        goto LABEL_127;
      case 0x17u:
        long long v199 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v199;
        long long v200 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v200;
        long long v201 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v201;
        long long v202 = *((_OWORD *)a2 + 7);
        *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
        *((_OWORD *)a1 + 7) = v202;
        a1[128] = a2[128];
        *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
        *((void *)a1 + 17) = *((void *)a2 + 17);
        long long v203 = *((_OWORD *)a2 + 10);
        *((_OWORD *)a1 + 9) = *((_OWORD *)a2 + 9);
        *((_OWORD *)a1 + 10) = v203;
        long long v204 = *((_OWORD *)a2 + 12);
        *((_OWORD *)a1 + 11) = *((_OWORD *)a2 + 11);
        *((_OWORD *)a1 + 12) = v204;
        *((_OWORD *)a1 + 13) = *((_OWORD *)a2 + 13);
        v205 = (int *)type metadata accessor for Trip(0);
        uint64_t v206 = v205[22];
        v207 = &a1[v206];
        v208 = &a2[v206];
        uint64_t v209 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v208, 1, v209))
        {
          uint64_t v210 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v207, v208, *(void *)(*(void *)(v210 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v209 - 8) + 32))(v207, v208, v209);
          __swift_storeEnumTagSinglePayload((uint64_t)v207, 0, 1, v209);
        }
        uint64_t v284 = v205[23];
        v285 = &a1[v284];
        v286 = &a2[v284];
        if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v284], 1, v209))
        {
          uint64_t v287 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v285, v286, *(void *)(*(void *)(v287 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v209 - 8) + 32))(v285, v286, v209);
          __swift_storeEnumTagSinglePayload((uint64_t)v285, 0, 1, v209);
        }
        uint64_t v332 = v205[24];
        v333 = &a1[v332];
        v334 = &a2[v332];
        *(void *)v333 = *(void *)v334;
        v333[8] = v334[8];
        uint64_t v335 = v205[25];
        v78 = &a1[v335];
        v79 = &a2[v335];
        uint64_t v80 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v79, 1, v80))
        {
LABEL_145:
          uint64_t v336 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v78, v79, *(void *)(*(void *)(v336 - 8) + 64));
        }
        else
        {
LABEL_127:
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 32))(v78, v79, v80);
          __swift_storeEnumTagSinglePayload((uint64_t)v78, 0, 1, v80);
        }
        goto LABEL_523;
      case 0x18u:
        long long v211 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v211;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        v212 = (int *)type metadata accessor for GlobalItem();
        uint64_t v213 = v212[7];
        v214 = &a1[v213];
        v215 = &a2[v213];
        uint64_t v216 = type metadata accessor for GlobalDialog();
        if (__swift_getEnumTagSinglePayload((uint64_t)v215, 1, v216))
        {
          uint64_t v217 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GlobalDialog?);
          memcpy(v214, v215, *(void *)(*(void *)(v217 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v216 - 8) + 32))(v214, v215, v216);
          __swift_storeEnumTagSinglePayload((uint64_t)v214, 0, 1, v216);
        }
        *(_OWORD *)&a1[v212[8]] = *(_OWORD *)&a2[v212[8]];
        a1[v212[9]] = a2[v212[9]];
        uint64_t v288 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GlobalItem, experiences: [DialogExperience]));
        *(void *)&a1[*(int *)(v288 + 48)] = *(void *)&a2[*(int *)(v288 + 48)];
        goto LABEL_523;
      case 0x1Au:
        long long v218 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v218;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((void *)a1 + 6) = *((void *)a2 + 6);
        v219 = (int *)type metadata accessor for Answer(0);
        uint64_t v220 = v219[9];
        v221 = &a1[v220];
        v222 = &a2[v220];
        uint64_t v223 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v222, 1, v223))
        {
          uint64_t v224 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v221, v222, *(void *)(*(void *)(v224 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v223 - 8) + 32))(v221, v222, v223);
          __swift_storeEnumTagSinglePayload((uint64_t)v221, 0, 1, v223);
        }
        a1[v219[10]] = a2[v219[10]];
        *(_OWORD *)&a1[v219[11]] = *(_OWORD *)&a2[v219[11]];
LABEL_523:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        break;
    }
  }
  uint64_t v1127 = type metadata accessor for SearchResult(0);
  uint64_t v1128 = *(int *)(v1127 + 20);
  v1129 = *(void **)&a1[v1128];
  *(void *)&a1[v1128] = *(void *)&a2[v1128];

  uint64_t v1130 = *(int *)(v1127 + 24);
  v1131 = &a1[v1130];
  v1132 = &a2[v1130];
  uint64_t v1134 = *(void *)v1132;
  uint64_t v1133 = *((void *)v1132 + 1);
  *(void *)v1131 = v1134;
  *((void *)v1131 + 1) = v1133;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v1135 = *(int *)(a3 + 20);
    v1136 = &a1[v1135];
    v1137 = &a2[v1135];
    outlined destroy of FlightReservation((uint64_t)&a1[v1135], (void (*)(void))type metadata accessor for ExtractedType);
    uint64_t v1138 = type metadata accessor for ExtractedType(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 4:
        uint64_t v1141 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v1141 - 8) + 32))(v1136, v1137, v1141);
        goto LABEL_541;
      case 2:
        long long v1142 = *((_OWORD *)v1137 + 1);
        *(_OWORD *)v1136 = *(_OWORD *)v1137;
        *((_OWORD *)v1136 + 1) = v1142;
        long long v1143 = *((_OWORD *)v1137 + 3);
        *((_OWORD *)v1136 + 2) = *((_OWORD *)v1137 + 2);
        *((_OWORD *)v1136 + 3) = v1143;
        long long v1144 = *((_OWORD *)v1137 + 5);
        *((_OWORD *)v1136 + 4) = *((_OWORD *)v1137 + 4);
        *((_OWORD *)v1136 + 5) = v1144;
        v1136[96] = v1137[96];
        *(_OWORD *)(v1136 + 104) = *(_OWORD *)(v1137 + 104);
        v1145 = (int *)type metadata accessor for FlightReservation(0);
        uint64_t v1146 = v1145[13];
        v1147 = &v1136[v1146];
        v1148 = &v1137[v1146];
        uint64_t v1149 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v1148, 1, v1149))
        {
          uint64_t v1150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v1147, v1148, *(void *)(*(void *)(v1150 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v1149 - 8) + 32))(v1147, v1148, v1149);
          __swift_storeEnumTagSinglePayload((uint64_t)v1147, 0, 1, v1149);
        }
        uint64_t v1151 = v1145[14];
        v1152 = &v1136[v1151];
        v1153 = &v1137[v1151];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v1137[v1151], 1, v1149))
        {
          uint64_t v1154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v1152, v1153, *(void *)(*(void *)(v1154 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v1149 - 8) + 32))(v1152, v1153, v1149);
          __swift_storeEnumTagSinglePayload((uint64_t)v1152, 0, 1, v1149);
        }
        *(_OWORD *)&v1136[v1145[15]] = *(_OWORD *)&v1137[v1145[15]];
        *(_OWORD *)&v1136[v1145[16]] = *(_OWORD *)&v1137[v1145[16]];
        *(_OWORD *)&v1136[v1145[17]] = *(_OWORD *)&v1137[v1145[17]];
        uint64_t v1155 = v1145[18];
        v1156 = &v1136[v1155];
        v1157 = &v1137[v1155];
        uint64_t v1158 = type metadata accessor for DateComponents();
        v1159 = *(void (**)(char *, char *, uint64_t))(*(void *)(v1158 - 8) + 32);
        v1159(v1156, v1157, v1158);
        v1159(&v1136[v1145[19]], &v1137[v1145[19]], v1158);
        *(_OWORD *)&v1136[v1145[20]] = *(_OWORD *)&v1137[v1145[20]];
        *(_OWORD *)&v1136[v1145[21]] = *(_OWORD *)&v1137[v1145[21]];
        *(_OWORD *)&v1136[v1145[22]] = *(_OWORD *)&v1137[v1145[22]];
        *(_OWORD *)&v1136[v1145[23]] = *(_OWORD *)&v1137[v1145[23]];
        *(_OWORD *)&v1136[v1145[24]] = *(_OWORD *)&v1137[v1145[24]];
        *(_OWORD *)&v1136[v1145[25]] = *(_OWORD *)&v1137[v1145[25]];
        *(_OWORD *)&v1136[v1145[26]] = *(_OWORD *)&v1137[v1145[26]];
        *(_OWORD *)&v1136[v1145[27]] = *(_OWORD *)&v1137[v1145[27]];
        *(_OWORD *)&v1136[v1145[28]] = *(_OWORD *)&v1137[v1145[28]];
        *(_OWORD *)&v1136[v1145[29]] = *(_OWORD *)&v1137[v1145[29]];
        *(_OWORD *)&v1136[v1145[30]] = *(_OWORD *)&v1137[v1145[30]];
        *(_OWORD *)&v1136[v1145[31]] = *(_OWORD *)&v1137[v1145[31]];
        *(_OWORD *)&v1136[v1145[32]] = *(_OWORD *)&v1137[v1145[32]];
        *(void *)&v1136[v1145[33]] = *(void *)&v1137[v1145[33]];
        *(void *)&v1136[v1145[34]] = *(void *)&v1137[v1145[34]];
        *(_OWORD *)&v1136[v1145[35]] = *(_OWORD *)&v1137[v1145[35]];
        *(_OWORD *)&v1136[v1145[36]] = *(_OWORD *)&v1137[v1145[36]];
        *(_OWORD *)&v1136[v1145[37]] = *(_OWORD *)&v1137[v1145[37]];
        uint64_t v1160 = v1145[38];
        v1161 = &v1136[v1160];
        v1162 = &v1137[v1160];
        uint64_t v1163 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v1162, 1, v1163))
        {
          uint64_t v1164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v1161, v1162, *(void *)(*(void *)(v1164 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v1163 - 8) + 32))(v1161, v1162, v1163);
          __swift_storeEnumTagSinglePayload((uint64_t)v1161, 0, 1, v1163);
        }
        *(_OWORD *)&v1136[v1145[39]] = *(_OWORD *)&v1137[v1145[39]];
        *(_OWORD *)&v1136[v1145[40]] = *(_OWORD *)&v1137[v1145[40]];
        uint64_t v1165 = v1145[41];
        v1166 = &v1136[v1165];
        v1167 = &v1137[v1165];
        *(void *)v1166 = *(void *)v1167;
        v1166[8] = v1167[8];
        *(_OWORD *)&v1136[v1145[42]] = *(_OWORD *)&v1137[v1145[42]];
        uint64_t v1168 = v1145[43];
        v1169 = &v1136[v1168];
        v1170 = &v1137[v1168];
        *(_OWORD *)v1169 = *(_OWORD *)v1170;
        *(void *)(v1169 + 13) = *(void *)(v1170 + 13);
        *(_OWORD *)&v1136[v1145[44]] = *(_OWORD *)&v1137[v1145[44]];
        *(_OWORD *)&v1136[v1145[45]] = *(_OWORD *)&v1137[v1145[45]];
        *(_OWORD *)&v1136[v1145[46]] = *(_OWORD *)&v1137[v1145[46]];
        *(_OWORD *)&v1136[v1145[47]] = *(_OWORD *)&v1137[v1145[47]];
        goto LABEL_541;
      case 1:
        uint64_t v1140 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v1140 - 8) + 32))(v1136, v1137, v1140);
LABEL_541:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(v1136, v1137, *(void *)(*(void *)(v1138 - 8) + 64));
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtractedInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257EDEF34);
}

uint64_t sub_257EDEF34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for SearchResult(0);
  OUTLINED_FUNCTION_29_3();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v8 = type metadata accessor for ExtractedType(0);
    uint64_t v9 = a1 + *(int *)(a3 + 20);
  }
  return __swift_getEnumTagSinglePayload(v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ExtractedInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257EDEFC4);
}

uint64_t sub_257EDEFC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for SearchResult(0);
  OUTLINED_FUNCTION_29_3();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v10 = type metadata accessor for ExtractedType(0);
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }
  return __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

uint64_t type metadata completion function for ExtractedInfo()
{
  uint64_t result = type metadata accessor for SearchResult(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ExtractedType(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t dispatch thunk of ExtractionRule.featureFlag.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ExtractionRule.extractInfo(query:result:assistantLocale:)()
{
  OUTLINED_FUNCTION_35_3();
  uint64_t v0 = swift_task_alloc();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_26_1(v0);
  *unint64_t v1 = v2;
  v1[1] = AnswerSynthesisModelServer.synthesizeWithOverride_runnable(_:bindings:);
  uint64_t v3 = OUTLINED_FUNCTION_32_2();
  return v4(v3);
}

uint64_t dispatch thunk of TypedExtractionRule.extractInfo(query:typedResult:assistantLocale:)()
{
  OUTLINED_FUNCTION_35_3();
  uint64_t v0 = swift_task_alloc();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_26_1(v0);
  *unint64_t v1 = v2;
  v1[1] = AnswerSynthesisModelServer.synthesizeWithTemplate_runnable(_:bindings:);
  uint64_t v3 = OUTLINED_FUNCTION_32_2();
  return v4(v3);
}

void dispatch thunk of AnswerSourceExtractionRule.extractFromSource(query:answer:source:assistantLocale:)()
{
  uint64_t v0 = swift_task_alloc();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_26_1(v0);
  *unint64_t v1 = v2;
  v1[1] = AnswerSynthesisModelServer.synthesizeWithTemplate_runnable(_:bindings:);
  OUTLINED_FUNCTION_45_0();
  __asm { BRAA            X9, X16 }
}

uint64_t dispatch thunk of RegexExtractionRule.regex(assistantLang:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

void dispatch thunk of RegexExtractionRule.extractMatched(typedResult:)()
{
  OUTLINED_FUNCTION_78();
  uint64_t v0 = swift_task_alloc();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_26_1(v0);
  *unint64_t v1 = v2;
  v1[1] = AnswerSynthesisModelServer.synthesizeWithTemplate_runnable(_:bindings:);
  OUTLINED_FUNCTION_30_4();
  __asm { BRAA            X5, X16 }
}

unint64_t lazy protocol witness table accessor for type Regex<Substring> and conformance Regex<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Regex<Substring> and conformance Regex<A>;
  if (!lazy protocol witness table cache variable for type Regex<Substring> and conformance Regex<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Regex<Substring>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Regex<Substring> and conformance Regex<A>);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_2()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_7_6()
{
  return *(void *)(v0 + 56);
}

uint64_t OUTLINED_FUNCTION_12_4()
{
  uint64_t v1 = type metadata accessor for ExtractedType(0);
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_13_6()
{
  uint64_t v1 = type metadata accessor for ExtractedType(0);
  return __swift_getEnumTagSinglePayload(v0, 1, v1);
}

unint64_t OUTLINED_FUNCTION_14_6()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104) + 1;
  *(void *)(v0 + 104) = v2;
  return *(void *)(v0 + 80)
       + ((*(unsigned __int8 *)(v0 + 128) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 128))
       + v1 * v2;
}

uint64_t OUTLINED_FUNCTION_15_4()
{
  uint64_t v1 = type metadata accessor for ExtractedType(0);
  __swift_storeEnumTagSinglePayload(*(void *)(v0 + 16), 1, 1, v1);
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_16_5()
{
  uint64_t v2 = *(void *)(v0 + 64);
  *(_DWORD *)(v0 + 128) = *(_DWORD *)(v2 + 80);
  *(void *)(v0 + 96) = *(void *)(v2 + 72);
  *(void *)(v0 + 104) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_17_3()
{
  return *(void *)(v0 + 56);
}

uint64_t OUTLINED_FUNCTION_18_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(v4, 1, 1, a4);
}

uint64_t OUTLINED_FUNCTION_22_5()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_23_4()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_24_4()
{
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 96);
  return __swift_storeEnumTagSinglePayload(v3, 0, 1, v2);
}

uint64_t OUTLINED_FUNCTION_26_5(uint64_t a1, uint64_t a2)
{
  __swift_storeEnumTagSinglePayload(*(void *)(v3 + 16), a2, 1, v2);
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_27_4(uint64_t result)
{
  *(void *)(v1 + 112) = result;
  return result;
}

unint64_t OUTLINED_FUNCTION_28_3()
{
  return SearchResultItem.associatedValue.getter(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_32_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_33_3()
{
  uint64_t result = *(void *)(v0[4] + 40);
  v0[10] = result;
  v0[11] = *(void *)(result + 16);
  return result;
}

unint64_t OUTLINED_FUNCTION_34_2()
{
  outlined init with take of SageSearchClient(v2, (uint64_t)v0);
  __swift_project_boxed_opaque_existential_1(v0, v1[5]);
  uint64_t v4 = *(void *)(v3 + 24);
  v1[12] = *(void *)(v3 + 16);
  v1[13] = v4;
  return lazy protocol witness table accessor for type String and conformance String();
}

uint64_t OUTLINED_FUNCTION_37_2()
{
  return *(void *)(v0 + 80);
}

uint64_t OUTLINED_FUNCTION_40_2()
{
  uint64_t v2 = *(void *)(v1 + 128);
  uint64_t v3 = type metadata accessor for ExtractedType(0);
  __swift_storeEnumTagSinglePayload(v2, 1, 1, v3);
  return __swift_destroy_boxed_opaque_existential_1Tm(v0);
}

uint64_t OUTLINED_FUNCTION_41_3()
{
  return *(void *)(v0 + 56);
}

uint64_t OUTLINED_FUNCTION_42_0(uint64_t result)
{
  *(void *)(v1 + 120) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_44_3()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_45_1()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_46_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_48_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_50_3(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return _s10OmniSearch0B6ResultVWObTm_1(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_51_3(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return _s10OmniSearch0B6ResultVWObTm_1(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_53_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_55_2(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return _s10OmniSearch13ExtractedTypeOWOcTm_0(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_56_2()
{
  return __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_59_2@<X0>(uint64_t a1@<X8>)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t FlightSnippet.flight.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Flight?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for FlightSnippet(0);
  _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0(v1 + *(int *)(v7 + 40), (uint64_t)v6, &demangling cache variable for type metadata for FlightSnippet.Flight?);
  uint64_t v8 = type metadata accessor for FlightSnippet.Flight(0);
  OUTLINED_FUNCTION_53_2((uint64_t)v6, 1, v8);
  if (!v9) {
    return outlined init with take of FlightSnippet.Flight();
  }
  UnknownStorage.init()();
  uint64_t v10 = *(int *)(v8 + 20);
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  *(void *)(a1 + v10) = static FlightSnippet.Flight._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of SearchResult?((uint64_t)v6, &demangling cache variable for type metadata for FlightSnippet.Flight?);
}

uint64_t FlightSnippet.flight.setter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for FlightSnippet(0) + 40);
  outlined destroy of SearchResult?(v1, &demangling cache variable for type metadata for FlightSnippet.Flight?);
  OUTLINED_FUNCTION_79_0();
  outlined init with take of FlightSnippet.Flight();
  uint64_t v2 = type metadata accessor for FlightSnippet.Flight(0);
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v2);
}

uint64_t FlightSnippet.Flight.init()@<X0>(uint64_t a1@<X8>)
{
  return FlightSnippet.Flight.init()(type metadata accessor for FlightSnippet.Flight, &one-time initialization token for defaultInstance, &static FlightSnippet.Flight._StorageClass.defaultInstance, a1);
}

uint64_t type metadata accessor for FlightSnippet(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for FlightSnippet);
}

uint64_t type metadata accessor for FlightSnippet.Flight(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for FlightSnippet.Flight);
}

void FlightSnippet.flight.modify()
{
  OUTLINED_FUNCTION_145();
  uint64_t v2 = v1;
  uint64_t v3 = malloc(0x30uLL);
  *uint64_t v2 = v3;
  *uint64_t v3 = v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Flight?);
  OUTLINED_FUNCTION_81(v4);
  uint64_t v6 = malloc(*(void *)(v5 + 64));
  v3[1] = v6;
  uint64_t v7 = type metadata accessor for FlightSnippet.Flight(0);
  v3[2] = v7;
  OUTLINED_FUNCTION_7_2();
  size_t v9 = *(void *)(v8 + 64);
  v3[3] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[4] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for FlightSnippet(0) + 40);
  *((_DWORD *)v3 + 10) = v11;
  _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0(v0 + v11, (uint64_t)v6, &demangling cache variable for type metadata for FlightSnippet.Flight?);
  OUTLINED_FUNCTION_53_2((uint64_t)v6, 1, v7);
  if (v12)
  {
    UnknownStorage.init()();
    uint64_t v13 = *(int *)(v7 + 20);
    if (one-time initialization token for defaultInstance != -1) {
      swift_once();
    }
    *(void *)&v10[v13] = static FlightSnippet.Flight._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of SearchResult?((uint64_t)v6, &demangling cache variable for type metadata for FlightSnippet.Flight?);
  }
  else
  {
    outlined init with take of FlightSnippet.Flight();
  }
  OUTLINED_FUNCTION_141_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  char v6;
  void *v7;
  uint64_t v8;

  OUTLINED_FUNCTION_145();
  uint64_t v1 = *(int *)(*(void *)v0 + 40);
  uint64_t v2 = *(void **)(*(void *)v0 + 24);
  uint64_t v3 = *(void **)(*(void *)v0 + 32);
  uint64_t v4 = *(void **)(*(void *)v0 + 8);
  uint64_t v5 = **(void **)v0 + v1;
  if (v6)
  {
    outlined init with copy of FlightSnippet.Flight();
    outlined destroy of SearchResult?(v5, &demangling cache variable for type metadata for FlightSnippet.Flight?);
    outlined init with take of FlightSnippet.Flight();
    OUTLINED_FUNCTION_110_1();
    outlined destroy of FlightSnippet.Flight((uint64_t)v3, (void (*)(void))type metadata accessor for FlightSnippet.Flight);
  }
  else
  {
    outlined destroy of SearchResult?(**(void **)v0 + v1, &demangling cache variable for type metadata for FlightSnippet.Flight?);
    outlined init with take of FlightSnippet.Flight();
    OUTLINED_FUNCTION_110_1();
  }
  free(v3);
  free(v2);
  free(v4);
  OUTLINED_FUNCTION_141_0();
  free(v7);
}

BOOL FlightSnippet.hasFlight.getter()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Flight?);
  uint64_t v3 = OUTLINED_FUNCTION_81(v2);
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = OUTLINED_FUNCTION_44_3();
  uint64_t v5 = type metadata accessor for FlightSnippet(v4);
  _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0(v0 + *(int *)(v5 + 40), v1, &demangling cache variable for type metadata for FlightSnippet.Flight?);
  uint64_t v6 = type metadata accessor for FlightSnippet.Flight(0);
  BOOL v7 = __swift_getEnumTagSinglePayload(v1, 1, v6) != 1;
  outlined destroy of SearchResult?(v1, &demangling cache variable for type metadata for FlightSnippet.Flight?);
  return v7;
}

Swift::Void __swiftcall FlightSnippet.clearFlight()()
{
  uint64_t v1 = type metadata accessor for FlightSnippet(0);
  outlined destroy of SearchResult?(v0 + *(int *)(v1 + 40), &demangling cache variable for type metadata for FlightSnippet.Flight?);
  type metadata accessor for FlightSnippet.Flight(0);
  uint64_t v2 = OUTLINED_FUNCTION_112_1();
  __swift_storeEnumTagSinglePayload(v2, v3, v4, v5);
}

uint64_t FlightSnippet.isCardSearch.getter()
{
  return *v0;
}

uint64_t FlightSnippet.isCardSearch.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*FlightSnippet.isCardSearch.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightSnippet.isIcaoSearch.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t FlightSnippet.isIcaoSearch.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*FlightSnippet.isIcaoSearch.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightSnippet.queryIntendedFlightInfo.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightSnippet.queryIntendedFlightInfo.setter()
{
  OUTLINED_FUNCTION_53();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = v2;
  *(void *)(v1 + 16) = v0;
  return result;
}

uint64_t (*FlightSnippet.queryIntendedFlightInfo.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightSnippet.selectedLegIndex.getter()
{
  return *(unsigned int *)(v0 + 24);
}

uint64_t FlightSnippet.selectedLegIndex.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*FlightSnippet.selectedLegIndex.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightSnippet.searchTimestamp.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t FlightSnippet.searchTimestamp.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*FlightSnippet.searchTimestamp.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightSnippet.unknownFields.getter()
{
  type metadata accessor for FlightSnippet(0);
  OUTLINED_FUNCTION_81_0();
  OUTLINED_FUNCTION_7_2();
  uint64_t v0 = OUTLINED_FUNCTION_79_0();
  return v1(v0);
}

uint64_t FlightSnippet.unknownFields.setter()
{
  type metadata accessor for FlightSnippet(0);
  OUTLINED_FUNCTION_81_0();
  OUTLINED_FUNCTION_7_2();
  uint64_t v0 = OUTLINED_FUNCTION_67_1();
  return v1(v0);
}

uint64_t (*FlightSnippet.unknownFields.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightSnippet.Status.init()()
{
  return 0;
}

void protocol witness for Enum.init() in conformance FlightSnippet.Status(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

void protocol witness for Enum.init(rawValue:) in conformance FlightSnippet.Status(uint64_t a1@<X8>)
{
  FlightSnippet.Status.init(rawValue:)();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance FlightSnippet.Status()
{
  return FlightSnippet.Status.rawValue.getter(*(void *)v0, *(unsigned __int8 *)(v0 + 8));
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance FlightSnippet.Status(uint64_t a1@<X8>)
{
  FlightSnippet.Status.init(rawValue:)();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance FlightSnippet.Status@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = FlightSnippet.Status.rawValue.getter(*(void *)v1, *(unsigned __int8 *)(v1 + 8));
  *a1 = result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FlightSnippet.Status()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FlightSnippet.Status(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type FlightSnippet.Status and conformance FlightSnippet.Status();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FlightSnippet.Status()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FlightSnippet.Status(uint64_t a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *a2);
}

uint64_t FlightSnippet.Flight.id.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

void key path setter for FlightSnippet.Flight.id : FlightSnippet.Flight()
{
}

void FlightSnippet.Flight.id.setter()
{
  OUTLINED_FUNCTION_22_6();
  if ((OUTLINED_FUNCTION_7_7() & 1) == 0)
  {
    OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_5_3();
    uint64_t v4 = OUTLINED_FUNCTION_9_4();
    uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
    OUTLINED_FUNCTION_21_6(v5);
  }
  uint64_t v6 = *(void *)(v2 + v3);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v6 + 16) = v1;
  *(void *)(v6 + 24) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_4();
}

uint64_t FlightSnippet.Flight._uniqueStorage()()
{
  uint64_t v1 = *(int *)(type metadata accessor for FlightSnippet.Flight(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for FlightSnippet.Flight._StorageClass();
    swift_allocObject();
    uint64_t v2 = swift_retain();
    *(void *)(v0 + v1) = FlightSnippet.Flight._StorageClass.init(copying:)(v2);
    swift_release();
  }
  return swift_retain();
}

uint64_t FlightSnippet.Flight.id.modify()
{
  uint64_t v2 = OUTLINED_FUNCTION_45_2();
  OUTLINED_FUNCTION_3_5((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *(void *)(v0 + 24);
  *(void *)(v1 + 72) = *(void *)(v0 + 16);
  *(void *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Flight.id.modify()
{
  OUTLINED_FUNCTION_145();
  OUTLINED_FUNCTION_10_6();
  if (v3)
  {
    OUTLINED_FUNCTION_44_4();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_5_3();
      uint64_t v4 = OUTLINED_FUNCTION_9_4();
      uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
      OUTLINED_FUNCTION_6_4(v5);
    }
    uint64_t v6 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v6 + 16) = v2;
    *(void *)(v6 + 24) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_43_3() & 1) == 0)
    {
      OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_5_3();
      uint64_t v7 = OUTLINED_FUNCTION_9_4();
      uint64_t v8 = FlightSnippet.Flight._StorageClass.init(copying:)(v7);
      OUTLINED_FUNCTION_6_4(v8);
    }
    uint64_t v9 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v9 + 16) = v2;
    *(void *)(v9 + 24) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_141_0();
  free(v10);
}

uint64_t FlightSnippet.Flight.contentHash.getter()
{
  return FlightSnippet.Flight.contentHash.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_77_1();
  v1(v0);
  OUTLINED_FUNCTION_58_2();
  OUTLINED_FUNCTION_0_1();
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_79_0();
}

void key path setter for FlightSnippet.Flight.contentHash : FlightSnippet.Flight()
{
}

void FlightSnippet.Flight.contentHash.setter()
{
  OUTLINED_FUNCTION_22_6();
  if ((OUTLINED_FUNCTION_7_7() & 1) == 0)
  {
    OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_5_3();
    uint64_t v4 = OUTLINED_FUNCTION_9_4();
    uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
    OUTLINED_FUNCTION_21_6(v5);
  }
  uint64_t v6 = *(void *)(v2 + v3);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v6 + 32) = v1;
  *(void *)(v6 + 40) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_4();
}

uint64_t FlightSnippet.Flight.contentHash.modify()
{
  uint64_t v2 = OUTLINED_FUNCTION_45_2();
  OUTLINED_FUNCTION_3_5((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *(void *)(v0 + 40);
  *(void *)(v1 + 72) = *(void *)(v0 + 32);
  *(void *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Flight.contentHash.modify()
{
  OUTLINED_FUNCTION_145();
  OUTLINED_FUNCTION_10_6();
  if (v3)
  {
    OUTLINED_FUNCTION_44_4();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_5_3();
      uint64_t v4 = OUTLINED_FUNCTION_9_4();
      uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
      OUTLINED_FUNCTION_6_4(v5);
    }
    uint64_t v6 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v6 + 32) = v2;
    *(void *)(v6 + 40) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_43_3() & 1) == 0)
    {
      OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_5_3();
      uint64_t v7 = OUTLINED_FUNCTION_9_4();
      uint64_t v8 = FlightSnippet.Flight._StorageClass.init(copying:)(v7);
      OUTLINED_FUNCTION_6_4(v8);
    }
    uint64_t v9 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v9 + 32) = v2;
    *(void *)(v9 + 40) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_141_0();
  free(v10);
}

uint64_t FlightSnippet.Flight.carrierIata.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

void key path setter for FlightSnippet.Flight.carrierIata : FlightSnippet.Flight()
{
}

void FlightSnippet.Flight.carrierIata.setter()
{
  OUTLINED_FUNCTION_22_6();
  if ((OUTLINED_FUNCTION_7_7() & 1) == 0)
  {
    OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_5_3();
    uint64_t v4 = OUTLINED_FUNCTION_9_4();
    uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
    OUTLINED_FUNCTION_21_6(v5);
  }
  uint64_t v6 = *(void *)(v2 + v3);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v6 + 48) = v1;
  *(void *)(v6 + 56) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_4();
}

uint64_t FlightSnippet.Flight.carrierIata.modify()
{
  uint64_t v2 = OUTLINED_FUNCTION_45_2();
  OUTLINED_FUNCTION_3_5((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *(void *)(v0 + 56);
  *(void *)(v1 + 72) = *(void *)(v0 + 48);
  *(void *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Flight.carrierIata.modify()
{
  OUTLINED_FUNCTION_145();
  OUTLINED_FUNCTION_10_6();
  if (v3)
  {
    OUTLINED_FUNCTION_44_4();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_5_3();
      uint64_t v4 = OUTLINED_FUNCTION_9_4();
      uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
      OUTLINED_FUNCTION_6_4(v5);
    }
    uint64_t v6 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v6 + 48) = v2;
    *(void *)(v6 + 56) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_43_3() & 1) == 0)
    {
      OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_5_3();
      uint64_t v7 = OUTLINED_FUNCTION_9_4();
      uint64_t v8 = FlightSnippet.Flight._StorageClass.init(copying:)(v7);
      OUTLINED_FUNCTION_6_4(v8);
    }
    uint64_t v9 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v9 + 48) = v2;
    *(void *)(v9 + 56) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_141_0();
  free(v10);
}

uint64_t FlightSnippet.Flight.carrierIcao.getter()
{
  return FlightSnippet.Flight.carrierIcao.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_77_1();
  v1(v0);
  OUTLINED_FUNCTION_58_2();
  OUTLINED_FUNCTION_0_1();
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_79_0();
}

void key path setter for FlightSnippet.Flight.carrierIcao : FlightSnippet.Flight()
{
}

void FlightSnippet.Flight.carrierIcao.setter()
{
  OUTLINED_FUNCTION_22_6();
  if ((OUTLINED_FUNCTION_7_7() & 1) == 0)
  {
    OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_5_3();
    uint64_t v4 = OUTLINED_FUNCTION_9_4();
    uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
    OUTLINED_FUNCTION_21_6(v5);
  }
  uint64_t v6 = *(void *)(v2 + v3);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v6 + 64) = v1;
  *(void *)(v6 + 72) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_4();
}

uint64_t FlightSnippet.Flight.carrierIcao.modify()
{
  uint64_t v2 = OUTLINED_FUNCTION_45_2();
  OUTLINED_FUNCTION_3_5((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *(void *)(v0 + 72);
  *(void *)(v1 + 72) = *(void *)(v0 + 64);
  *(void *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Flight.carrierIcao.modify()
{
  OUTLINED_FUNCTION_145();
  OUTLINED_FUNCTION_10_6();
  if (v3)
  {
    OUTLINED_FUNCTION_44_4();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_5_3();
      uint64_t v4 = OUTLINED_FUNCTION_9_4();
      uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
      OUTLINED_FUNCTION_6_4(v5);
    }
    uint64_t v6 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v6 + 64) = v2;
    *(void *)(v6 + 72) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_43_3() & 1) == 0)
    {
      OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_5_3();
      uint64_t v7 = OUTLINED_FUNCTION_9_4();
      uint64_t v8 = FlightSnippet.Flight._StorageClass.init(copying:)(v7);
      OUTLINED_FUNCTION_6_4(v8);
    }
    uint64_t v9 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v9 + 64) = v2;
    *(void *)(v9 + 72) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_141_0();
  free(v10);
}

uint64_t FlightSnippet.Flight.carrierFs.getter()
{
  return FlightSnippet.Flight.carrierFs.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_77_1();
  v1(v0);
  OUTLINED_FUNCTION_58_2();
  OUTLINED_FUNCTION_0_1();
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_79_0();
}

void key path setter for FlightSnippet.Flight.carrierFs : FlightSnippet.Flight()
{
}

void FlightSnippet.Flight.carrierFs.setter()
{
  OUTLINED_FUNCTION_22_6();
  if ((OUTLINED_FUNCTION_7_7() & 1) == 0)
  {
    OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_5_3();
    uint64_t v4 = OUTLINED_FUNCTION_9_4();
    uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
    OUTLINED_FUNCTION_21_6(v5);
  }
  uint64_t v6 = *(void *)(v2 + v3);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v6 + 80) = v1;
  *(void *)(v6 + 88) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_4();
}

uint64_t FlightSnippet.Flight.carrierFs.modify()
{
  uint64_t v2 = OUTLINED_FUNCTION_45_2();
  OUTLINED_FUNCTION_3_5((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *(void *)(v0 + 88);
  *(void *)(v1 + 72) = *(void *)(v0 + 80);
  *(void *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Flight.carrierFs.modify()
{
  OUTLINED_FUNCTION_145();
  OUTLINED_FUNCTION_10_6();
  if (v3)
  {
    OUTLINED_FUNCTION_44_4();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_5_3();
      uint64_t v4 = OUTLINED_FUNCTION_9_4();
      uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
      OUTLINED_FUNCTION_6_4(v5);
    }
    uint64_t v6 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v6 + 80) = v2;
    *(void *)(v6 + 88) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_43_3() & 1) == 0)
    {
      OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_5_3();
      uint64_t v7 = OUTLINED_FUNCTION_9_4();
      uint64_t v8 = FlightSnippet.Flight._StorageClass.init(copying:)(v7);
      OUTLINED_FUNCTION_6_4(v8);
    }
    uint64_t v9 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v9 + 80) = v2;
    *(void *)(v9 + 88) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_141_0();
  free(v10);
}

uint64_t FlightSnippet.Flight.carrierName.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

void key path setter for FlightSnippet.Flight.carrierName : FlightSnippet.Flight()
{
}

void FlightSnippet.Flight.carrierName.setter()
{
  OUTLINED_FUNCTION_22_6();
  if ((OUTLINED_FUNCTION_7_7() & 1) == 0)
  {
    OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_5_3();
    uint64_t v4 = OUTLINED_FUNCTION_9_4();
    uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
    OUTLINED_FUNCTION_21_6(v5);
  }
  uint64_t v6 = *(void *)(v2 + v3);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v6 + 96) = v1;
  *(void *)(v6 + 104) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_4();
}

uint64_t FlightSnippet.Flight.carrierName.modify()
{
  uint64_t v2 = OUTLINED_FUNCTION_45_2();
  OUTLINED_FUNCTION_3_5((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *(void *)(v0 + 104);
  *(void *)(v1 + 72) = *(void *)(v0 + 96);
  *(void *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Flight.carrierName.modify()
{
  OUTLINED_FUNCTION_145();
  OUTLINED_FUNCTION_10_6();
  if (v3)
  {
    OUTLINED_FUNCTION_44_4();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_5_3();
      uint64_t v4 = OUTLINED_FUNCTION_9_4();
      uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
      OUTLINED_FUNCTION_6_4(v5);
    }
    uint64_t v6 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v6 + 96) = v2;
    *(void *)(v6 + 104) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_43_3() & 1) == 0)
    {
      OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_5_3();
      uint64_t v7 = OUTLINED_FUNCTION_9_4();
      uint64_t v8 = FlightSnippet.Flight._StorageClass.init(copying:)(v7);
      OUTLINED_FUNCTION_6_4(v8);
    }
    uint64_t v9 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v9 + 96) = v2;
    *(void *)(v9 + 104) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_141_0();
  free(v10);
}

uint64_t FlightSnippet.Flight.carrierPhoneNumber.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

void key path setter for FlightSnippet.Flight.carrierPhoneNumber : FlightSnippet.Flight()
{
}

void FlightSnippet.Flight.carrierPhoneNumber.setter()
{
  OUTLINED_FUNCTION_22_6();
  if ((OUTLINED_FUNCTION_7_7() & 1) == 0)
  {
    OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_5_3();
    uint64_t v4 = OUTLINED_FUNCTION_9_4();
    uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
    OUTLINED_FUNCTION_21_6(v5);
  }
  uint64_t v6 = *(void *)(v2 + v3);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v6 + 112) = v1;
  *(void *)(v6 + 120) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_4();
}

uint64_t FlightSnippet.Flight.carrierPhoneNumber.modify()
{
  uint64_t v2 = OUTLINED_FUNCTION_45_2();
  OUTLINED_FUNCTION_3_5((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *(void *)(v0 + 120);
  *(void *)(v1 + 72) = *(void *)(v0 + 112);
  *(void *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Flight.carrierPhoneNumber.modify()
{
  OUTLINED_FUNCTION_145();
  OUTLINED_FUNCTION_10_6();
  if (v3)
  {
    OUTLINED_FUNCTION_44_4();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_5_3();
      uint64_t v4 = OUTLINED_FUNCTION_9_4();
      uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
      OUTLINED_FUNCTION_6_4(v5);
    }
    uint64_t v6 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v6 + 112) = v2;
    *(void *)(v6 + 120) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_43_3() & 1) == 0)
    {
      OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_5_3();
      uint64_t v7 = OUTLINED_FUNCTION_9_4();
      uint64_t v8 = FlightSnippet.Flight._StorageClass.init(copying:)(v7);
      OUTLINED_FUNCTION_6_4(v8);
    }
    uint64_t v9 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v9 + 112) = v2;
    *(void *)(v9 + 120) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_141_0();
  free(v10);
}

uint64_t FlightSnippet.Flight.flightNumber.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

void key path setter for FlightSnippet.Flight.flightNumber : FlightSnippet.Flight()
{
}

void FlightSnippet.Flight.flightNumber.setter()
{
  OUTLINED_FUNCTION_22_6();
  if ((OUTLINED_FUNCTION_7_7() & 1) == 0)
  {
    OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_5_3();
    uint64_t v4 = OUTLINED_FUNCTION_9_4();
    uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
    OUTLINED_FUNCTION_21_6(v5);
  }
  uint64_t v6 = *(void *)(v2 + v3);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v6 + 128) = v1;
  *(void *)(v6 + 136) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_4();
}

uint64_t FlightSnippet.Flight.flightNumber.modify()
{
  uint64_t v2 = OUTLINED_FUNCTION_45_2();
  OUTLINED_FUNCTION_3_5((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *(void *)(v0 + 136);
  *(void *)(v1 + 72) = *(void *)(v0 + 128);
  *(void *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Flight.flightNumber.modify()
{
  OUTLINED_FUNCTION_145();
  OUTLINED_FUNCTION_10_6();
  if (v3)
  {
    OUTLINED_FUNCTION_44_4();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_5_3();
      uint64_t v4 = OUTLINED_FUNCTION_9_4();
      uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
      OUTLINED_FUNCTION_6_4(v5);
    }
    uint64_t v6 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v6 + 128) = v2;
    *(void *)(v6 + 136) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_43_3() & 1) == 0)
    {
      OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_5_3();
      uint64_t v7 = OUTLINED_FUNCTION_9_4();
      uint64_t v8 = FlightSnippet.Flight._StorageClass.init(copying:)(v7);
      OUTLINED_FUNCTION_6_4(v8);
    }
    uint64_t v9 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v9 + 128) = v2;
    *(void *)(v9 + 136) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_141_0();
  free(v10);
}

uint64_t FlightSnippet.Flight.flightDepartureScheduled.getter()
{
  OUTLINED_FUNCTION_31_3();
  OUTLINED_FUNCTION_0_1();
  return *(void *)(v0 + 144);
}

void FlightSnippet.Flight.flightDepartureScheduled.setter()
{
  OUTLINED_FUNCTION_22_6();
  if ((OUTLINED_FUNCTION_29_4() & 1) == 0)
  {
    OUTLINED_FUNCTION_62_1();
    OUTLINED_FUNCTION_5_3();
    uint64_t v3 = OUTLINED_FUNCTION_19_4();
    uint64_t v4 = FlightSnippet.Flight._StorageClass.init(copying:)(v3);
    OUTLINED_FUNCTION_18_7(v4);
  }
  uint64_t v5 = *(void *)(v1 + v2);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v5 + 144) = v0;
  OUTLINED_FUNCTION_20_4();
}

void (*FlightSnippet.Flight.flightDepartureScheduled.modify())()
{
  uint64_t v2 = OUTLINED_FUNCTION_46_3();
  OUTLINED_FUNCTION_16_6((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  *(void *)(v1 + 72) = *(void *)(v0 + 144);
  return FlightSnippet.Flight.flightDepartureScheduled.modify;
}

void FlightSnippet.Flight.flightDepartureScheduled.modify()
{
  OUTLINED_FUNCTION_145();
  char v1 = OUTLINED_FUNCTION_17_4();
  if (v0)
  {
    if (v1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((v1 & 1) == 0)
  {
LABEL_3:
    OUTLINED_FUNCTION_26_6();
    OUTLINED_FUNCTION_5_3();
    uint64_t v2 = OUTLINED_FUNCTION_19_4();
    uint64_t v3 = FlightSnippet.Flight._StorageClass.init(copying:)(v2);
    OUTLINED_FUNCTION_12_5(v3);
  }
LABEL_4:
  OUTLINED_FUNCTION_52_1();
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_73_0();
  OUTLINED_FUNCTION_141_0();
  free(v4);
}

uint64_t FlightSnippet.Flight.flightArrivalScheduled.getter()
{
  OUTLINED_FUNCTION_31_3();
  OUTLINED_FUNCTION_0_1();
  return *(void *)(v0 + 152);
}

void FlightSnippet.Flight.flightArrivalScheduled.setter()
{
  OUTLINED_FUNCTION_22_6();
  if ((OUTLINED_FUNCTION_29_4() & 1) == 0)
  {
    OUTLINED_FUNCTION_62_1();
    OUTLINED_FUNCTION_5_3();
    uint64_t v3 = OUTLINED_FUNCTION_19_4();
    uint64_t v4 = FlightSnippet.Flight._StorageClass.init(copying:)(v3);
    OUTLINED_FUNCTION_18_7(v4);
  }
  uint64_t v5 = *(void *)(v1 + v2);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v5 + 152) = v0;
  OUTLINED_FUNCTION_20_4();
}

void (*FlightSnippet.Flight.flightArrivalScheduled.modify())()
{
  uint64_t v2 = OUTLINED_FUNCTION_46_3();
  OUTLINED_FUNCTION_16_6((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  *(void *)(v1 + 72) = *(void *)(v0 + 152);
  return FlightSnippet.Flight.flightArrivalScheduled.modify;
}

void FlightSnippet.Flight.flightArrivalScheduled.modify()
{
  OUTLINED_FUNCTION_145();
  char v1 = OUTLINED_FUNCTION_17_4();
  if (v0)
  {
    if (v1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((v1 & 1) == 0)
  {
LABEL_3:
    OUTLINED_FUNCTION_26_6();
    OUTLINED_FUNCTION_5_3();
    uint64_t v2 = OUTLINED_FUNCTION_19_4();
    uint64_t v3 = FlightSnippet.Flight._StorageClass.init(copying:)(v2);
    OUTLINED_FUNCTION_12_5(v3);
  }
LABEL_4:
  OUTLINED_FUNCTION_52_1();
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_73_0();
  OUTLINED_FUNCTION_141_0();
  free(v4);
}

uint64_t FlightSnippet.Flight.legs.getter()
{
  return swift_bridgeObjectRetain();
}

void key path setter for FlightSnippet.Flight.legs : FlightSnippet.Flight()
{
}

void FlightSnippet.Flight.legs.setter()
{
  OUTLINED_FUNCTION_22_6();
  if ((OUTLINED_FUNCTION_29_4() & 1) == 0)
  {
    OUTLINED_FUNCTION_62_1();
    OUTLINED_FUNCTION_5_3();
    uint64_t v3 = OUTLINED_FUNCTION_19_4();
    uint64_t v4 = FlightSnippet.Flight._StorageClass.init(copying:)(v3);
    OUTLINED_FUNCTION_18_7(v4);
  }
  uint64_t v5 = *(void *)(v1 + v2);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v5 + 160) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_4();
}

uint64_t FlightSnippet.Flight.legs.modify()
{
  uint64_t v2 = OUTLINED_FUNCTION_46_3();
  OUTLINED_FUNCTION_16_6((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  *(void *)(v1 + 72) = *(void *)(v0 + 160);
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Flight.legs.modify()
{
  OUTLINED_FUNCTION_145();
  OUTLINED_FUNCTION_55_3();
  if (v2)
  {
    OUTLINED_FUNCTION_44_4();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_26_6();
      OUTLINED_FUNCTION_5_3();
      uint64_t v3 = OUTLINED_FUNCTION_9_4();
      uint64_t v4 = FlightSnippet.Flight._StorageClass.init(copying:)(v3);
      OUTLINED_FUNCTION_12_5(v4);
    }
    uint64_t v5 = *(void *)(*(void *)(v0 + 80) + *(int *)(v0 + 88));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v5 + 160) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_43_3() & 1) == 0)
    {
      OUTLINED_FUNCTION_26_6();
      OUTLINED_FUNCTION_5_3();
      uint64_t v6 = OUTLINED_FUNCTION_9_4();
      uint64_t v7 = FlightSnippet.Flight._StorageClass.init(copying:)(v6);
      OUTLINED_FUNCTION_12_5(v7);
    }
    uint64_t v8 = *(void *)(*(void *)(v0 + 80) + *(int *)(v0 + 88));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v8 + 160) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_141_0();
  free(v9);
}

uint64_t FlightSnippet.Flight.codeShares.getter()
{
  return swift_bridgeObjectRetain();
}

void key path setter for FlightSnippet.Flight.codeShares : FlightSnippet.Flight()
{
}

void FlightSnippet.Flight.codeShares.setter()
{
  OUTLINED_FUNCTION_22_6();
  if ((OUTLINED_FUNCTION_29_4() & 1) == 0)
  {
    OUTLINED_FUNCTION_62_1();
    OUTLINED_FUNCTION_5_3();
    uint64_t v3 = OUTLINED_FUNCTION_19_4();
    uint64_t v4 = FlightSnippet.Flight._StorageClass.init(copying:)(v3);
    OUTLINED_FUNCTION_18_7(v4);
  }
  uint64_t v5 = *(void *)(v1 + v2);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v5 + 168) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_4();
}

uint64_t FlightSnippet.Flight.codeShares.modify()
{
  uint64_t v2 = OUTLINED_FUNCTION_46_3();
  OUTLINED_FUNCTION_16_6((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  *(void *)(v1 + 72) = *(void *)(v0 + 168);
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Flight.codeShares.modify()
{
  OUTLINED_FUNCTION_145();
  OUTLINED_FUNCTION_55_3();
  if (v2)
  {
    OUTLINED_FUNCTION_44_4();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_26_6();
      OUTLINED_FUNCTION_5_3();
      uint64_t v3 = OUTLINED_FUNCTION_9_4();
      uint64_t v4 = FlightSnippet.Flight._StorageClass.init(copying:)(v3);
      OUTLINED_FUNCTION_12_5(v4);
    }
    uint64_t v5 = *(void *)(*(void *)(v0 + 80) + *(int *)(v0 + 88));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v5 + 168) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_43_3() & 1) == 0)
    {
      OUTLINED_FUNCTION_26_6();
      OUTLINED_FUNCTION_5_3();
      uint64_t v6 = OUTLINED_FUNCTION_9_4();
      uint64_t v7 = FlightSnippet.Flight._StorageClass.init(copying:)(v6);
      OUTLINED_FUNCTION_12_5(v7);
    }
    uint64_t v8 = *(void *)(*(void *)(v0 + 80) + *(int *)(v0 + 88));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v8 + 168) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_141_0();
  free(v9);
}

uint64_t FlightSnippet.Flight.legIndex.getter()
{
  OUTLINED_FUNCTION_31_3();
  OUTLINED_FUNCTION_0_1();
  return *(unsigned int *)(v0 + 176);
}

void FlightSnippet.Flight.legIndex.setter()
{
  OUTLINED_FUNCTION_22_6();
  int v3 = v2;
  if ((OUTLINED_FUNCTION_30_5() & 1) == 0)
  {
    OUTLINED_FUNCTION_62_1();
    OUTLINED_FUNCTION_5_3();
    uint64_t v4 = OUTLINED_FUNCTION_19_4();
    uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
    OUTLINED_FUNCTION_18_7(v5);
  }
  uint64_t v6 = *(void *)(v0 + v1);
  OUTLINED_FUNCTION_2_2();
  *(_DWORD *)(v6 + 176) = v3;
  OUTLINED_FUNCTION_20_4();
}

void (*FlightSnippet.Flight.legIndex.modify())()
{
  int v2 = OUTLINED_FUNCTION_69_1();
  OUTLINED_FUNCTION_39_0((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  *(_DWORD *)(v1 + 80) = *(_DWORD *)(v0 + 176);
  return FlightSnippet.Flight.legIndex.modify;
}

void FlightSnippet.Flight.legIndex.modify()
{
  OUTLINED_FUNCTION_145();
  char v1 = OUTLINED_FUNCTION_37_3();
  if (v0)
  {
    if (v1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((v1 & 1) == 0)
  {
LABEL_3:
    OUTLINED_FUNCTION_51_4();
    OUTLINED_FUNCTION_5_3();
    uint64_t v2 = OUTLINED_FUNCTION_19_4();
    uint64_t v3 = FlightSnippet.Flight._StorageClass.init(copying:)(v2);
    OUTLINED_FUNCTION_12_5(v3);
  }
LABEL_4:
  OUTLINED_FUNCTION_68_0();
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_109_1();
  OUTLINED_FUNCTION_141_0();
  free(v4);
}

uint64_t FlightSnippet.Flight.operatorCarrierCode.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

void key path setter for FlightSnippet.Flight.operatorCarrierCode : FlightSnippet.Flight()
{
}

void FlightSnippet.Flight.operatorCarrierCode.setter()
{
  OUTLINED_FUNCTION_22_6();
  if ((OUTLINED_FUNCTION_7_7() & 1) == 0)
  {
    OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_5_3();
    uint64_t v4 = OUTLINED_FUNCTION_9_4();
    uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
    OUTLINED_FUNCTION_21_6(v5);
  }
  uint64_t v6 = *(void *)(v2 + v3);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v6 + 184) = v1;
  *(void *)(v6 + 192) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_4();
}

uint64_t FlightSnippet.Flight.operatorCarrierCode.modify()
{
  uint64_t v2 = OUTLINED_FUNCTION_45_2();
  OUTLINED_FUNCTION_3_5((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *(void *)(v0 + 192);
  *(void *)(v1 + 72) = *(void *)(v0 + 184);
  *(void *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Flight.operatorCarrierCode.modify()
{
  OUTLINED_FUNCTION_145();
  OUTLINED_FUNCTION_10_6();
  if (v3)
  {
    OUTLINED_FUNCTION_44_4();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_5_3();
      uint64_t v4 = OUTLINED_FUNCTION_9_4();
      uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
      OUTLINED_FUNCTION_6_4(v5);
    }
    uint64_t v6 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v6 + 184) = v2;
    *(void *)(v6 + 192) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_43_3() & 1) == 0)
    {
      OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_5_3();
      uint64_t v7 = OUTLINED_FUNCTION_9_4();
      uint64_t v8 = FlightSnippet.Flight._StorageClass.init(copying:)(v7);
      OUTLINED_FUNCTION_6_4(v8);
    }
    uint64_t v9 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v9 + 184) = v2;
    *(void *)(v9 + 192) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_141_0();
  free(v10);
}

uint64_t FlightSnippet.Flight.operatorFlightNumber.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

void key path setter for FlightSnippet.Flight.operatorFlightNumber : FlightSnippet.Flight()
{
}

void FlightSnippet.Flight.operatorFlightNumber.setter()
{
  OUTLINED_FUNCTION_22_6();
  if ((OUTLINED_FUNCTION_7_7() & 1) == 0)
  {
    OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_5_3();
    uint64_t v4 = OUTLINED_FUNCTION_9_4();
    uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
    OUTLINED_FUNCTION_21_6(v5);
  }
  uint64_t v6 = *(void *)(v2 + v3);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v6 + 200) = v1;
  *(void *)(v6 + 208) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_4();
}

uint64_t FlightSnippet.Flight.operatorFlightNumber.modify()
{
  uint64_t v2 = OUTLINED_FUNCTION_45_2();
  OUTLINED_FUNCTION_3_5((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *(void *)(v0 + 208);
  *(void *)(v1 + 72) = *(void *)(v0 + 200);
  *(void *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Flight.operatorFlightNumber.modify()
{
  OUTLINED_FUNCTION_145();
  OUTLINED_FUNCTION_10_6();
  if (v3)
  {
    OUTLINED_FUNCTION_44_4();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_5_3();
      uint64_t v4 = OUTLINED_FUNCTION_9_4();
      uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
      OUTLINED_FUNCTION_6_4(v5);
    }
    uint64_t v6 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v6 + 200) = v2;
    *(void *)(v6 + 208) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_43_3() & 1) == 0)
    {
      OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_5_3();
      uint64_t v7 = OUTLINED_FUNCTION_9_4();
      uint64_t v8 = FlightSnippet.Flight._StorageClass.init(copying:)(v7);
      OUTLINED_FUNCTION_6_4(v8);
    }
    uint64_t v9 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v9 + 200) = v2;
    *(void *)(v9 + 208) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_141_0();
  free(v10);
}

uint64_t FlightSnippet.Flight.website.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

void key path setter for FlightSnippet.Flight.website : FlightSnippet.Flight()
{
}

void FlightSnippet.Flight.website.setter()
{
  OUTLINED_FUNCTION_22_6();
  if ((OUTLINED_FUNCTION_7_7() & 1) == 0)
  {
    OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_5_3();
    uint64_t v4 = OUTLINED_FUNCTION_9_4();
    uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
    OUTLINED_FUNCTION_21_6(v5);
  }
  uint64_t v6 = *(void *)(v2 + v3);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v6 + 216) = v1;
  *(void *)(v6 + 224) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_4();
}

uint64_t FlightSnippet.Flight.website.modify()
{
  uint64_t v2 = OUTLINED_FUNCTION_45_2();
  OUTLINED_FUNCTION_3_5((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *(void *)(v0 + 224);
  *(void *)(v1 + 72) = *(void *)(v0 + 216);
  *(void *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Flight.website.modify()
{
  OUTLINED_FUNCTION_145();
  OUTLINED_FUNCTION_10_6();
  if (v3)
  {
    OUTLINED_FUNCTION_44_4();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_5_3();
      uint64_t v4 = OUTLINED_FUNCTION_9_4();
      uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
      OUTLINED_FUNCTION_6_4(v5);
    }
    uint64_t v6 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v6 + 216) = v2;
    *(void *)(v6 + 224) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_43_3() & 1) == 0)
    {
      OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_5_3();
      uint64_t v7 = OUTLINED_FUNCTION_9_4();
      uint64_t v8 = FlightSnippet.Flight._StorageClass.init(copying:)(v7);
      OUTLINED_FUNCTION_6_4(v8);
    }
    uint64_t v9 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v9 + 216) = v2;
    *(void *)(v9 + 224) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_141_0();
  free(v10);
}

uint64_t FlightSnippet.Flight.lastUpdated.getter()
{
  OUTLINED_FUNCTION_31_3();
  OUTLINED_FUNCTION_0_1();
  return *(void *)(v0 + 232);
}

void FlightSnippet.Flight.lastUpdated.setter()
{
  OUTLINED_FUNCTION_22_6();
  if ((OUTLINED_FUNCTION_29_4() & 1) == 0)
  {
    OUTLINED_FUNCTION_62_1();
    OUTLINED_FUNCTION_5_3();
    uint64_t v3 = OUTLINED_FUNCTION_19_4();
    uint64_t v4 = FlightSnippet.Flight._StorageClass.init(copying:)(v3);
    OUTLINED_FUNCTION_18_7(v4);
  }
  uint64_t v5 = *(void *)(v1 + v2);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v5 + 232) = v0;
  OUTLINED_FUNCTION_20_4();
}

void (*FlightSnippet.Flight.lastUpdated.modify())()
{
  uint64_t v2 = OUTLINED_FUNCTION_46_3();
  OUTLINED_FUNCTION_16_6((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  *(void *)(v1 + 72) = *(void *)(v0 + 232);
  return FlightSnippet.Flight.lastUpdated.modify;
}

void FlightSnippet.Flight.lastUpdated.modify()
{
  OUTLINED_FUNCTION_145();
  char v1 = OUTLINED_FUNCTION_17_4();
  if (v0)
  {
    if (v1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((v1 & 1) == 0)
  {
LABEL_3:
    OUTLINED_FUNCTION_26_6();
    OUTLINED_FUNCTION_5_3();
    uint64_t v2 = OUTLINED_FUNCTION_19_4();
    uint64_t v3 = FlightSnippet.Flight._StorageClass.init(copying:)(v2);
    OUTLINED_FUNCTION_12_5(v3);
  }
LABEL_4:
  OUTLINED_FUNCTION_52_1();
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_73_0();
  OUTLINED_FUNCTION_141_0();
  free(v4);
}

uint64_t FlightSnippet.Flight.legsNotUpdated.getter()
{
  OUTLINED_FUNCTION_31_3();
  OUTLINED_FUNCTION_0_1();
  return *(unsigned int *)(v0 + 240);
}

void FlightSnippet.Flight.legsNotUpdated.setter()
{
  OUTLINED_FUNCTION_22_6();
  int v3 = v2;
  if ((OUTLINED_FUNCTION_30_5() & 1) == 0)
  {
    OUTLINED_FUNCTION_62_1();
    OUTLINED_FUNCTION_5_3();
    uint64_t v4 = OUTLINED_FUNCTION_19_4();
    uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
    OUTLINED_FUNCTION_18_7(v5);
  }
  uint64_t v6 = *(void *)(v0 + v1);
  OUTLINED_FUNCTION_2_2();
  *(_DWORD *)(v6 + 240) = v3;
  OUTLINED_FUNCTION_20_4();
}

void (*FlightSnippet.Flight.legsNotUpdated.modify())()
{
  int v2 = OUTLINED_FUNCTION_69_1();
  OUTLINED_FUNCTION_39_0((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  *(_DWORD *)(v1 + 80) = *(_DWORD *)(v0 + 240);
  return FlightSnippet.Flight.legsNotUpdated.modify;
}

void FlightSnippet.Flight.legsNotUpdated.modify()
{
  OUTLINED_FUNCTION_145();
  char v1 = OUTLINED_FUNCTION_37_3();
  if (v0)
  {
    if (v1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((v1 & 1) == 0)
  {
LABEL_3:
    OUTLINED_FUNCTION_51_4();
    OUTLINED_FUNCTION_5_3();
    uint64_t v2 = OUTLINED_FUNCTION_19_4();
    uint64_t v3 = FlightSnippet.Flight._StorageClass.init(copying:)(v2);
    OUTLINED_FUNCTION_12_5(v3);
  }
LABEL_4:
  OUTLINED_FUNCTION_68_0();
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_109_1();
  OUTLINED_FUNCTION_141_0();
  free(v4);
}

uint64_t FlightSnippet.Flight.departureUtcVariance.getter()
{
  OUTLINED_FUNCTION_31_3();
  OUTLINED_FUNCTION_0_1();
  return *(unsigned int *)(v0 + 244);
}

void FlightSnippet.Flight.departureUtcVariance.setter()
{
  OUTLINED_FUNCTION_22_6();
  int v3 = v2;
  if ((OUTLINED_FUNCTION_30_5() & 1) == 0)
  {
    OUTLINED_FUNCTION_62_1();
    OUTLINED_FUNCTION_5_3();
    uint64_t v4 = OUTLINED_FUNCTION_19_4();
    uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
    OUTLINED_FUNCTION_18_7(v5);
  }
  uint64_t v6 = *(void *)(v0 + v1);
  OUTLINED_FUNCTION_2_2();
  *(_DWORD *)(v6 + 244) = v3;
  OUTLINED_FUNCTION_20_4();
}

void (*FlightSnippet.Flight.departureUtcVariance.modify())()
{
  int v2 = OUTLINED_FUNCTION_69_1();
  OUTLINED_FUNCTION_39_0((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  *(_DWORD *)(v1 + 80) = *(_DWORD *)(v0 + 244);
  return FlightSnippet.Flight.departureUtcVariance.modify;
}

void FlightSnippet.Flight.departureUtcVariance.modify()
{
  OUTLINED_FUNCTION_145();
  char v1 = OUTLINED_FUNCTION_37_3();
  if (v0)
  {
    if (v1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((v1 & 1) == 0)
  {
LABEL_3:
    OUTLINED_FUNCTION_51_4();
    OUTLINED_FUNCTION_5_3();
    uint64_t v2 = OUTLINED_FUNCTION_19_4();
    uint64_t v3 = FlightSnippet.Flight._StorageClass.init(copying:)(v2);
    OUTLINED_FUNCTION_12_5(v3);
  }
LABEL_4:
  OUTLINED_FUNCTION_68_0();
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_109_1();
  OUTLINED_FUNCTION_141_0();
  free(v4);
}

uint64_t FlightSnippet.Flight.totalLegs.getter()
{
  OUTLINED_FUNCTION_31_3();
  OUTLINED_FUNCTION_0_1();
  return *(unsigned int *)(v0 + 248);
}

void FlightSnippet.Flight.totalLegs.setter()
{
  OUTLINED_FUNCTION_22_6();
  int v3 = v2;
  if ((OUTLINED_FUNCTION_30_5() & 1) == 0)
  {
    OUTLINED_FUNCTION_62_1();
    OUTLINED_FUNCTION_5_3();
    uint64_t v4 = OUTLINED_FUNCTION_19_4();
    uint64_t v5 = FlightSnippet.Flight._StorageClass.init(copying:)(v4);
    OUTLINED_FUNCTION_18_7(v5);
  }
  uint64_t v6 = *(void *)(v0 + v1);
  OUTLINED_FUNCTION_2_2();
  *(_DWORD *)(v6 + 248) = v3;
  OUTLINED_FUNCTION_20_4();
}

void (*FlightSnippet.Flight.totalLegs.modify())()
{
  int v2 = OUTLINED_FUNCTION_69_1();
  OUTLINED_FUNCTION_39_0((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  *(_DWORD *)(v1 + 80) = *(_DWORD *)(v0 + 248);
  return FlightSnippet.Flight.totalLegs.modify;
}

void FlightSnippet.Flight.totalLegs.modify()
{
  OUTLINED_FUNCTION_145();
  char v1 = OUTLINED_FUNCTION_37_3();
  if (v0)
  {
    if (v1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((v1 & 1) == 0)
  {
LABEL_3:
    OUTLINED_FUNCTION_51_4();
    OUTLINED_FUNCTION_5_3();
    uint64_t v2 = OUTLINED_FUNCTION_19_4();
    uint64_t v3 = FlightSnippet.Flight._StorageClass.init(copying:)(v2);
    OUTLINED_FUNCTION_12_5(v3);
  }
LABEL_4:
  OUTLINED_FUNCTION_68_0();
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_109_1();
  OUTLINED_FUNCTION_141_0();
  free(v4);
}

uint64_t FlightSnippet.Flight.legFlightScheduleIds.getter()
{
  return swift_bridgeObjectRetain();
}

void key path setter for FlightSnippet.Flight.legFlightScheduleIds : FlightSnippet.Flight()
{
}

void FlightSnippet.Flight.legFlightScheduleIds.setter()
{
  OUTLINED_FUNCTION_22_6();
  if ((OUTLINED_FUNCTION_29_4() & 1) == 0)
  {
    OUTLINED_FUNCTION_62_1();
    OUTLINED_FUNCTION_5_3();
    uint64_t v3 = OUTLINED_FUNCTION_19_4();
    uint64_t v4 = FlightSnippet.Flight._StorageClass.init(copying:)(v3);
    OUTLINED_FUNCTION_18_7(v4);
  }
  uint64_t v5 = *(void *)(v1 + v2);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v5 + 256) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_4();
}

uint64_t FlightSnippet.Flight.legFlightScheduleIds.modify()
{
  uint64_t v2 = OUTLINED_FUNCTION_46_3();
  OUTLINED_FUNCTION_16_6((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  *(void *)(v1 + 72) = *(void *)(v0 + 256);
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Flight.legFlightScheduleIds.modify()
{
  OUTLINED_FUNCTION_145();
  OUTLINED_FUNCTION_55_3();
  if (v2)
  {
    OUTLINED_FUNCTION_44_4();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_26_6();
      OUTLINED_FUNCTION_5_3();
      uint64_t v3 = OUTLINED_FUNCTION_9_4();
      uint64_t v4 = FlightSnippet.Flight._StorageClass.init(copying:)(v3);
      OUTLINED_FUNCTION_12_5(v4);
    }
    uint64_t v5 = *(void *)(*(void *)(v0 + 80) + *(int *)(v0 + 88));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v5 + 256) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_43_3() & 1) == 0)
    {
      OUTLINED_FUNCTION_26_6();
      OUTLINED_FUNCTION_5_3();
      uint64_t v6 = OUTLINED_FUNCTION_9_4();
      uint64_t v7 = FlightSnippet.Flight._StorageClass.init(copying:)(v6);
      OUTLINED_FUNCTION_12_5(v7);
    }
    uint64_t v8 = *(void *)(*(void *)(v0 + 80) + *(int *)(v0 + 88));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v8 + 256) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_141_0();
  free(v9);
}

uint64_t FlightSnippet.Flight.legFlightUpdateIds.getter()
{
  return swift_bridgeObjectRetain();
}

void key path setter for FlightSnippet.Flight.legFlightUpdateIds : FlightSnippet.Flight()
{
}

void FlightSnippet.Flight.legFlightUpdateIds.setter()
{
  OUTLINED_FUNCTION_22_6();
  if ((OUTLINED_FUNCTION_29_4() & 1) == 0)
  {
    OUTLINED_FUNCTION_62_1();
    OUTLINED_FUNCTION_5_3();
    uint64_t v3 = OUTLINED_FUNCTION_19_4();
    uint64_t v4 = FlightSnippet.Flight._StorageClass.init(copying:)(v3);
    OUTLINED_FUNCTION_18_7(v4);
  }
  uint64_t v5 = *(void *)(v1 + v2);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v5 + 264) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_4();
}

uint64_t FlightSnippet.Flight.legFlightUpdateIds.modify()
{
  uint64_t v2 = OUTLINED_FUNCTION_46_3();
  OUTLINED_FUNCTION_16_6((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  *(void *)(v1 + 72) = *(void *)(v0 + 264);
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Flight.legFlightUpdateIds.modify()
{
  OUTLINED_FUNCTION_145();
  OUTLINED_FUNCTION_55_3();
  if (v2)
  {
    OUTLINED_FUNCTION_44_4();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_26_6();
      OUTLINED_FUNCTION_5_3();
      uint64_t v3 = OUTLINED_FUNCTION_9_4();
      uint64_t v4 = FlightSnippet.Flight._StorageClass.init(copying:)(v3);
      OUTLINED_FUNCTION_12_5(v4);
    }
    uint64_t v5 = *(void *)(*(void *)(v0 + 80) + *(int *)(v0 + 88));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v5 + 264) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_43_3() & 1) == 0)
    {
      OUTLINED_FUNCTION_26_6();
      OUTLINED_FUNCTION_5_3();
      uint64_t v6 = OUTLINED_FUNCTION_9_4();
      uint64_t v7 = FlightSnippet.Flight._StorageClass.init(copying:)(v6);
      OUTLINED_FUNCTION_12_5(v7);
    }
    uint64_t v8 = *(void *)(*(void *)(v0 + 80) + *(int *)(v0 + 88));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v8 + 264) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_141_0();
  free(v9);
}

uint64_t (*FlightSnippet.Flight.unknownFields.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t (*FlightSnippet.Airport.code.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t (*FlightSnippet.Airport.name.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t (*FlightSnippet.Airport.city.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t (*FlightSnippet.Airport.physicalCity.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightSnippet.Airport.mapsID.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightSnippet.Airport.mapsID.setter()
{
  OUTLINED_FUNCTION_53();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 64) = v2;
  *(void *)(v1 + 72) = v0;
  return result;
}

uint64_t (*FlightSnippet.Airport.mapsID.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

double FlightSnippet.Airport.latitude.getter()
{
  return *(double *)(v0 + 80);
}

void FlightSnippet.Airport.latitude.setter(double a1)
{
  *(double *)(v1 + 80) = a1;
}

uint64_t (*FlightSnippet.Airport.latitude.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

double FlightSnippet.Airport.longitude.getter()
{
  return *(double *)(v0 + 88);
}

void FlightSnippet.Airport.longitude.setter(double a1)
{
  *(double *)(v1 + 88) = a1;
}

uint64_t (*FlightSnippet.Airport.longitude.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightSnippet.Airport.timeZoneName.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightSnippet.Airport.timeZoneName.setter()
{
  OUTLINED_FUNCTION_53();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 96) = v2;
  *(void *)(v1 + 104) = v0;
  return result;
}

uint64_t (*FlightSnippet.Airport.timeZoneName.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightSnippet.Airport.street.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightSnippet.Airport.street.setter()
{
  OUTLINED_FUNCTION_53();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 112) = v2;
  *(void *)(v1 + 120) = v0;
  return result;
}

uint64_t (*FlightSnippet.Airport.street.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightSnippet.Airport.district.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightSnippet.Airport.district.setter()
{
  OUTLINED_FUNCTION_53();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 128) = v2;
  *(void *)(v1 + 136) = v0;
  return result;
}

uint64_t (*FlightSnippet.Airport.district.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightSnippet.Airport.state.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightSnippet.Airport.state.setter()
{
  OUTLINED_FUNCTION_53();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 144) = v2;
  *(void *)(v1 + 152) = v0;
  return result;
}

uint64_t (*FlightSnippet.Airport.state.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightSnippet.Airport.postalCode.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightSnippet.Airport.postalCode.setter()
{
  OUTLINED_FUNCTION_53();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 160) = v2;
  *(void *)(v1 + 168) = v0;
  return result;
}

uint64_t (*FlightSnippet.Airport.postalCode.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightSnippet.Airport.countryCode.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightSnippet.Airport.countryCode.setter()
{
  OUTLINED_FUNCTION_53();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 176) = v2;
  *(void *)(v1 + 184) = v0;
  return result;
}

uint64_t (*FlightSnippet.Airport.countryCode.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightSnippet.Airport.country.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightSnippet.Airport.country.setter()
{
  OUTLINED_FUNCTION_53();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 192) = v2;
  *(void *)(v1 + 200) = v0;
  return result;
}

uint64_t (*FlightSnippet.Airport.country.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightSnippet.Airport.unknownFields.getter()
{
  type metadata accessor for FlightSnippet.Airport(0);
  OUTLINED_FUNCTION_81_0();
  OUTLINED_FUNCTION_7_2();
  uint64_t v0 = OUTLINED_FUNCTION_79_0();
  return v1(v0);
}

uint64_t FlightSnippet.Airport.unknownFields.setter()
{
  type metadata accessor for FlightSnippet.Airport(0);
  OUTLINED_FUNCTION_81_0();
  OUTLINED_FUNCTION_7_2();
  uint64_t v0 = OUTLINED_FUNCTION_67_1();
  return v1(v0);
}

uint64_t (*FlightSnippet.Airport.unknownFields.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightSnippet.Airport.init()@<X0>(void *a1@<X8>)
{
  OUTLINED_FUNCTION_85_1(a1);
  v1[8] = 0;
  v1[9] = v2;
  v1[10] = 0;
  v1[11] = 0;
  v1[12] = 0;
  v1[13] = v2;
  v1[14] = 0;
  v1[15] = v2;
  v1[16] = 0;
  v1[17] = v2;
  v1[18] = 0;
  v1[19] = v2;
  v1[20] = 0;
  v1[21] = v2;
  v1[22] = 0;
  v1[23] = v2;
  v1[24] = 0;
  v1[25] = v2;
  type metadata accessor for FlightSnippet.Airport(0);
  return UnknownStorage.init()();
}

uint64_t FlightSnippet.FlightInfo.carrier.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightSnippet.FlightInfo.carrier.setter()
{
  OUTLINED_FUNCTION_53();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*FlightSnippet.FlightInfo.carrier.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightSnippet.FlightInfo.carrierFs.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightSnippet.FlightInfo.carrierFs.setter()
{
  OUTLINED_FUNCTION_53();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v0;
  return result;
}

uint64_t (*FlightSnippet.FlightInfo.carrierFs.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightSnippet.FlightInfo.flightNumber.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightSnippet.FlightInfo.flightNumber.setter()
{
  OUTLINED_FUNCTION_53();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v0;
  return result;
}

uint64_t (*FlightSnippet.FlightInfo.flightNumber.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightSnippet.FlightInfo.relationship.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t FlightSnippet.FlightInfo.relationship.setter()
{
  OUTLINED_FUNCTION_53();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = v2;
  *(void *)(v1 + 56) = v0;
  return result;
}

uint64_t (*FlightSnippet.FlightInfo.relationship.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightSnippet.FlightInfo.unknownFields.getter()
{
  type metadata accessor for FlightSnippet.FlightInfo(0);
  OUTLINED_FUNCTION_81_0();
  OUTLINED_FUNCTION_7_2();
  uint64_t v0 = OUTLINED_FUNCTION_79_0();
  return v1(v0);
}

uint64_t FlightSnippet.FlightInfo.unknownFields.setter()
{
  type metadata accessor for FlightSnippet.FlightInfo(0);
  OUTLINED_FUNCTION_81_0();
  OUTLINED_FUNCTION_7_2();
  uint64_t v0 = OUTLINED_FUNCTION_67_1();
  return v1(v0);
}

uint64_t (*FlightSnippet.FlightInfo.unknownFields.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightSnippet.FlightInfo.init()@<X0>(void *a1@<X8>)
{
  return UnknownStorage.init()();
}

uint64_t FlightSnippet.Leg.status.getter()
{
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_0_1();
  return *(void *)(v0 + 16);
}

uint64_t key path getter for FlightSnippet.Leg.status : FlightSnippet.Leg@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = FlightSnippet.Leg.status.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

void key path setter for FlightSnippet.Leg.status : FlightSnippet.Leg()
{
}

void FlightSnippet.Leg.status.setter()
{
  OUTLINED_FUNCTION_22_6();
  char v3 = v2;
  uint64_t v5 = v4;
  type metadata accessor for FlightSnippet.Leg(0);
  if ((OUTLINED_FUNCTION_47_2() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_5();
    uint64_t v6 = OUTLINED_FUNCTION_9_4();
    uint64_t v7 = FlightSnippet.Leg._StorageClass.init(copying:)(v6);
    OUTLINED_FUNCTION_21_6(v7);
  }
  uint64_t v8 = *(void *)(v0 + v1);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v8 + 16) = v5;
  *(unsigned char *)(v8 + 24) = v3 & 1;
  OUTLINED_FUNCTION_20_4();
}

uint64_t FlightSnippet.Leg._uniqueStorage()()
{
  uint64_t v1 = *(int *)(type metadata accessor for FlightSnippet.Leg(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for FlightSnippet.Leg._StorageClass(0);
    swift_allocObject();
    uint64_t v2 = swift_retain();
    *(void *)(v0 + v1) = FlightSnippet.Leg._StorageClass.init(copying:)(v2);
    swift_release();
  }
  return swift_retain();
}

void (*FlightSnippet.Leg.status.modify())()
{
  uint64_t v2 = OUTLINED_FUNCTION_46_3();
  *uint64_t v0 = v2;
  v2[11] = v1;
  uint64_t v3 = *(int *)(type metadata accessor for FlightSnippet.Leg(0) + 20);
  *((_DWORD *)v2 + 21) = v3;
  uint64_t v4 = *(void *)(v1 + v3);
  OUTLINED_FUNCTION_0_1();
  char v5 = *(unsigned char *)(v4 + 24);
  v2[9] = *(void *)(v4 + 16);
  *((unsigned char *)v2 + 80) = v5;
  return FlightSnippet.Leg.status.modify;
}

void FlightSnippet.Leg.status.modify()
{
  OUTLINED_FUNCTION_145();
  char v1 = v0;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 72);
  char v5 = *(unsigned char *)(*v2 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (v1)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    OUTLINED_FUNCTION_1_5();
    uint64_t v7 = OUTLINED_FUNCTION_19_4();
    uint64_t v8 = FlightSnippet.Leg._StorageClass.init(copying:)(v7);
    OUTLINED_FUNCTION_6_4(v8);
  }
LABEL_4:
  uint64_t v9 = *(void *)(*(void *)(v3 + 88) + *(int *)(v3 + 84));
  OUTLINED_FUNCTION_2_2();
  *(void *)(v9 + 16) = v4;
  *(unsigned char *)(v9 + 24) = v5;
  OUTLINED_FUNCTION_141_0();
  free(v10);
}

uint64_t FlightSnippet.Leg.enRoute.getter()
{
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_0_1();
  return *(unsigned __int8 *)(v0 + 25);
}

void FlightSnippet.Leg.enRoute.setter()
{
  OUTLINED_FUNCTION_22_6();
  char v3 = v2;
  if ((OUTLINED_FUNCTION_36_3() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_5();
    uint64_t v4 = OUTLINED_FUNCTION_19_4();
    uint64_t v5 = FlightSnippet.Leg._StorageClass.init(copying:)(v4);
    OUTLINED_FUNCTION_18_7(v5);
  }
  uint64_t v6 = *(void *)(v0 + v1);
  OUTLINED_FUNCTION_2_2();
  *(unsigned char *)(v6 + 25) = v3 & 1;
  OUTLINED_FUNCTION_20_4();
}

void (*FlightSnippet.Leg.enRoute.modify())()
{
  char v2 = OUTLINED_FUNCTION_69_1();
  OUTLINED_FUNCTION_40_3((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  *(unsigned char *)(v1 + 84) = *(unsigned char *)(v0 + 25);
  return FlightSnippet.Leg.enRoute.modify;
}

void FlightSnippet.Leg.enRoute.modify()
{
  OUTLINED_FUNCTION_145();
  char v1 = OUTLINED_FUNCTION_50_4();
  if (v0)
  {
    if (v1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((v1 & 1) == 0)
  {
LABEL_3:
    OUTLINED_FUNCTION_1_5();
    uint64_t v2 = OUTLINED_FUNCTION_19_4();
    uint64_t v3 = FlightSnippet.Leg._StorageClass.init(copying:)(v2);
    OUTLINED_FUNCTION_12_5(v3);
  }
LABEL_4:
  OUTLINED_FUNCTION_68_0();
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_116_1();
  OUTLINED_FUNCTION_141_0();
  free(v4);
}

uint64_t FlightSnippet.Leg.departureDelayed.getter()
{
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_0_1();
  return *(unsigned __int8 *)(v0 + 26);
}

void FlightSnippet.Leg.departureDelayed.setter()
{
  OUTLINED_FUNCTION_22_6();
  char v3 = v2;
  if ((OUTLINED_FUNCTION_36_3() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_5();
    uint64_t v4 = OUTLINED_FUNCTION_19_4();
    uint64_t v5 = FlightSnippet.Leg._StorageClass.init(copying:)(v4);
    OUTLINED_FUNCTION_18_7(v5);
  }
  uint64_t v6 = *(void *)(v0 + v1);
  OUTLINED_FUNCTION_2_2();
  *(unsigned char *)(v6 + 26) = v3 & 1;
  OUTLINED_FUNCTION_20_4();
}

void (*FlightSnippet.Leg.departureDelayed.modify())()
{
  char v2 = OUTLINED_FUNCTION_69_1();
  OUTLINED_FUNCTION_40_3((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  *(unsigned char *)(v1 + 84) = *(unsigned char *)(v0 + 26);
  return FlightSnippet.Leg.departureDelayed.modify;
}

void FlightSnippet.Leg.departureDelayed.modify()
{
  OUTLINED_FUNCTION_145();
  char v1 = OUTLINED_FUNCTION_50_4();
  if (v0)
  {
    if (v1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((v1 & 1) == 0)
  {
LABEL_3:
    OUTLINED_FUNCTION_1_5();
    uint64_t v2 = OUTLINED_FUNCTION_19_4();
    uint64_t v3 = FlightSnippet.Leg._StorageClass.init(copying:)(v2);
    OUTLINED_FUNCTION_12_5(v3);
  }
LABEL_4:
  OUTLINED_FUNCTION_68_0();
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_116_1();
  OUTLINED_FUNCTION_141_0();
  free(v4);
}

uint64_t FlightSnippet.Leg.arrivalDelayed.getter()
{
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_0_1();
  return *(unsigned __int8 *)(v0 + 27);
}

void FlightSnippet.Leg.arrivalDelayed.setter()
{
  OUTLINED_FUNCTION_22_6();
  char v3 = v2;
  if ((OUTLINED_FUNCTION_36_3() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_5();
    uint64_t v4 = OUTLINED_FUNCTION_19_4();
    uint64_t v5 = FlightSnippet.Leg._StorageClass.init(copying:)(v4);
    OUTLINED_FUNCTION_18_7(v5);
  }
  uint64_t v6 = *(void *)(v0 + v1);
  OUTLINED_FUNCTION_2_2();
  *(unsigned char *)(v6 + 27) = v3 & 1;
  OUTLINED_FUNCTION_20_4();
}

void (*FlightSnippet.Leg.arrivalDelayed.modify())()
{
  char v2 = OUTLINED_FUNCTION_69_1();
  OUTLINED_FUNCTION_40_3((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  *(unsigned char *)(v1 + 84) = *(unsigned char *)(v0 + 27);
  return FlightSnippet.Leg.arrivalDelayed.modify;
}

void FlightSnippet.Leg.arrivalDelayed.modify()
{
  OUTLINED_FUNCTION_145();
  char v1 = OUTLINED_FUNCTION_50_4();
  if (v0)
  {
    if (v1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((v1 & 1) == 0)
  {
LABEL_3:
    OUTLINED_FUNCTION_1_5();
    uint64_t v2 = OUTLINED_FUNCTION_19_4();
    uint64_t v3 = FlightSnippet.Leg._StorageClass.init(copying:)(v2);
    OUTLINED_FUNCTION_12_5(v3);
  }
LABEL_4:
  OUTLINED_FUNCTION_68_0();
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_116_1();
  OUTLINED_FUNCTION_141_0();
  free(v4);
}

uint64_t FlightSnippet.Leg.title.getter()
{
  return FlightSnippet.Flight.contentHash.getter();
}

void key path setter for FlightSnippet.Leg.title : FlightSnippet.Leg()
{
}

void FlightSnippet.Leg.title.setter()
{
  OUTLINED_FUNCTION_22_6();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  type metadata accessor for FlightSnippet.Leg(0);
  if ((OUTLINED_FUNCTION_47_2() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_5();
    uint64_t v6 = OUTLINED_FUNCTION_9_4();
    uint64_t v7 = FlightSnippet.Leg._StorageClass.init(copying:)(v6);
    OUTLINED_FUNCTION_21_6(v7);
  }
  uint64_t v8 = *(void *)(v0 + v1);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v8 + 32) = v5;
  *(void *)(v8 + 40) = v3;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_4();
}

uint64_t FlightSnippet.Leg.title.modify()
{
  uint64_t v2 = OUTLINED_FUNCTION_45_2();
  OUTLINED_FUNCTION_59_3((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *(void *)(v0 + 40);
  *(void *)(v1 + 72) = *(void *)(v0 + 32);
  *(void *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Leg.title.modify()
{
  OUTLINED_FUNCTION_145();
  OUTLINED_FUNCTION_10_6();
  if (v3)
  {
    OUTLINED_FUNCTION_44_4();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_1_5();
      uint64_t v4 = OUTLINED_FUNCTION_9_4();
      uint64_t v5 = FlightSnippet.Leg._StorageClass.init(copying:)(v4);
      OUTLINED_FUNCTION_6_4(v5);
    }
    uint64_t v6 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v6 + 32) = v2;
    *(void *)(v6 + 40) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_43_3() & 1) == 0)
    {
      OUTLINED_FUNCTION_1_5();
      uint64_t v7 = OUTLINED_FUNCTION_9_4();
      uint64_t v8 = FlightSnippet.Leg._StorageClass.init(copying:)(v7);
      OUTLINED_FUNCTION_6_4(v8);
    }
    uint64_t v9 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v9 + 32) = v2;
    *(void *)(v9 + 40) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_141_0();
  free(v10);
}

uint64_t FlightSnippet.Leg.departurePublishedTime.getter()
{
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_0_1();
  return *(void *)(v0 + 48);
}

void FlightSnippet.Leg.departurePublishedTime.setter()
{
  OUTLINED_FUNCTION_22_6();
  uint64_t v3 = v2;
  if ((OUTLINED_FUNCTION_36_3() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_5();
    uint64_t v4 = OUTLINED_FUNCTION_19_4();
    uint64_t v5 = FlightSnippet.Leg._StorageClass.init(copying:)(v4);
    OUTLINED_FUNCTION_18_7(v5);
  }
  uint64_t v6 = *(void *)(v0 + v1);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v6 + 48) = v3;
  OUTLINED_FUNCTION_20_4();
}

void (*FlightSnippet.Leg.departurePublishedTime.modify())()
{
  uint64_t v2 = OUTLINED_FUNCTION_46_3();
  *uint64_t v0 = v2;
  v2[10] = v1;
  uint64_t v3 = type metadata accessor for FlightSnippet.Leg(0);
  OUTLINED_FUNCTION_35_4(v3);
  OUTLINED_FUNCTION_0_1();
  v2[9] = *(void *)(v1 + 48);
  return FlightSnippet.Leg.departurePublishedTime.modify;
}

void FlightSnippet.Leg.departurePublishedTime.modify()
{
  OUTLINED_FUNCTION_145();
  char v1 = OUTLINED_FUNCTION_17_4();
  if (v0)
  {
    if (v1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((v1 & 1) == 0)
  {
LABEL_3:
    OUTLINED_FUNCTION_1_5();
    uint64_t v2 = OUTLINED_FUNCTION_19_4();
    uint64_t v3 = FlightSnippet.Leg._StorageClass.init(copying:)(v2);
    OUTLINED_FUNCTION_12_5(v3);
  }
LABEL_4:
  OUTLINED_FUNCTION_52_1();
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_73_0();
  OUTLINED_FUNCTION_141_0();
  free(v4);
}

uint64_t FlightSnippet.Leg.departureActualTime.getter()
{
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_0_1();
  return *(void *)(v0 + 56);
}

void FlightSnippet.Leg.departureActualTime.setter()
{
  OUTLINED_FUNCTION_22_6();
  uint64_t v3 = v2;
  if ((OUTLINED_FUNCTION_36_3() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_5();
    uint64_t v4 = OUTLINED_FUNCTION_19_4();
    uint64_t v5 = FlightSnippet.Leg._StorageClass.init(copying:)(v4);
    OUTLINED_FUNCTION_18_7(v5);
  }
  uint64_t v6 = *(void *)(v0 + v1);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v6 + 56) = v3;
  OUTLINED_FUNCTION_20_4();
}

void (*FlightSnippet.Leg.departureActualTime.modify())()
{
  uint64_t v2 = OUTLINED_FUNCTION_46_3();
  *uint64_t v0 = v2;
  v2[10] = v1;
  uint64_t v3 = type metadata accessor for FlightSnippet.Leg(0);
  OUTLINED_FUNCTION_35_4(v3);
  OUTLINED_FUNCTION_0_1();
  v2[9] = *(void *)(v1 + 56);
  return FlightSnippet.Leg.departureActualTime.modify;
}

void FlightSnippet.Leg.departureActualTime.modify()
{
  OUTLINED_FUNCTION_145();
  char v1 = OUTLINED_FUNCTION_17_4();
  if (v0)
  {
    if (v1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((v1 & 1) == 0)
  {
LABEL_3:
    OUTLINED_FUNCTION_1_5();
    uint64_t v2 = OUTLINED_FUNCTION_19_4();
    uint64_t v3 = FlightSnippet.Leg._StorageClass.init(copying:)(v2);
    OUTLINED_FUNCTION_12_5(v3);
  }
LABEL_4:
  OUTLINED_FUNCTION_52_1();
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_73_0();
  OUTLINED_FUNCTION_141_0();
  free(v4);
}

uint64_t FlightSnippet.Leg.departureTerminal.getter()
{
  return FlightSnippet.Flight.carrierIcao.getter();
}

void key path setter for FlightSnippet.Leg.departureTerminal : FlightSnippet.Leg()
{
}

void FlightSnippet.Leg.departureTerminal.setter()
{
  OUTLINED_FUNCTION_22_6();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  type metadata accessor for FlightSnippet.Leg(0);
  if ((OUTLINED_FUNCTION_47_2() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_5();
    uint64_t v6 = OUTLINED_FUNCTION_9_4();
    uint64_t v7 = FlightSnippet.Leg._StorageClass.init(copying:)(v6);
    OUTLINED_FUNCTION_21_6(v7);
  }
  uint64_t v8 = *(void *)(v0 + v1);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v8 + 64) = v5;
  *(void *)(v8 + 72) = v3;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_4();
}

uint64_t FlightSnippet.Leg.departureTerminal.modify()
{
  uint64_t v2 = OUTLINED_FUNCTION_45_2();
  OUTLINED_FUNCTION_59_3((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *(void *)(v0 + 72);
  *(void *)(v1 + 72) = *(void *)(v0 + 64);
  *(void *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Leg.departureTerminal.modify()
{
  OUTLINED_FUNCTION_145();
  OUTLINED_FUNCTION_10_6();
  if (v3)
  {
    OUTLINED_FUNCTION_44_4();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_1_5();
      uint64_t v4 = OUTLINED_FUNCTION_9_4();
      uint64_t v5 = FlightSnippet.Leg._StorageClass.init(copying:)(v4);
      OUTLINED_FUNCTION_6_4(v5);
    }
    uint64_t v6 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v6 + 64) = v2;
    *(void *)(v6 + 72) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_43_3() & 1) == 0)
    {
      OUTLINED_FUNCTION_1_5();
      uint64_t v7 = OUTLINED_FUNCTION_9_4();
      uint64_t v8 = FlightSnippet.Leg._StorageClass.init(copying:)(v7);
      OUTLINED_FUNCTION_6_4(v8);
    }
    uint64_t v9 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v9 + 64) = v2;
    *(void *)(v9 + 72) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_141_0();
  free(v10);
}

uint64_t FlightSnippet.Leg.departureGate.getter()
{
  return FlightSnippet.Flight.carrierFs.getter();
}

void key path setter for FlightSnippet.Leg.departureGate : FlightSnippet.Leg()
{
}

void FlightSnippet.Leg.departureGate.setter()
{
  OUTLINED_FUNCTION_22_6();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  type metadata accessor for FlightSnippet.Leg(0);
  if ((OUTLINED_FUNCTION_47_2() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_5();
    uint64_t v6 = OUTLINED_FUNCTION_9_4();
    uint64_t v7 = FlightSnippet.Leg._StorageClass.init(copying:)(v6);
    OUTLINED_FUNCTION_21_6(v7);
  }
  uint64_t v8 = *(void *)(v0 + v1);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v8 + 80) = v5;
  *(void *)(v8 + 88) = v3;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_4();
}

uint64_t FlightSnippet.Leg.departureGate.modify()
{
  uint64_t v2 = OUTLINED_FUNCTION_45_2();
  OUTLINED_FUNCTION_59_3((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *(void *)(v0 + 88);
  *(void *)(v1 + 72) = *(void *)(v0 + 80);
  *(void *)(v1 + 80) = v3;
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Leg.departureGate.modify()
{
  OUTLINED_FUNCTION_145();
  OUTLINED_FUNCTION_10_6();
  if (v3)
  {
    OUTLINED_FUNCTION_44_4();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_1_5();
      uint64_t v4 = OUTLINED_FUNCTION_9_4();
      uint64_t v5 = FlightSnippet.Leg._StorageClass.init(copying:)(v4);
      OUTLINED_FUNCTION_6_4(v5);
    }
    uint64_t v6 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v6 + 80) = v2;
    *(void *)(v6 + 88) = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_43_3() & 1) == 0)
    {
      OUTLINED_FUNCTION_1_5();
      uint64_t v7 = OUTLINED_FUNCTION_9_4();
      uint64_t v8 = FlightSnippet.Leg._StorageClass.init(copying:)(v7);
      OUTLINED_FUNCTION_6_4(v8);
    }
    uint64_t v9 = *(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 96));
    OUTLINED_FUNCTION_2_2();
    *(void *)(v9 + 80) = v2;
    *(void *)(v9 + 88) = v1;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_141_0();
  free(v10);
}

uint64_t FlightSnippet.Leg.departureGateClosed.getter()
{
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_0_1();
  return *(void *)(v0 + 96);
}

void FlightSnippet.Leg.departureGateClosed.setter()
{
  OUTLINED_FUNCTION_22_6();
  uint64_t v3 = v2;
  if ((OUTLINED_FUNCTION_36_3() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_5();
    uint64_t v4 = OUTLINED_FUNCTION_19_4();
    uint64_t v5 = FlightSnippet.Leg._StorageClass.init(copying:)(v4);
    OUTLINED_FUNCTION_18_7(v5);
  }
  uint64_t v6 = *(void *)(v0 + v1);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v6 + 96) = v3;
  OUTLINED_FUNCTION_20_4();
}

void (*FlightSnippet.Leg.departureGateClosed.modify())()
{
  uint64_t v2 = OUTLINED_FUNCTION_46_3();
  *uint64_t v0 = v2;
  v2[10] = v1;
  uint64_t v3 = type metadata accessor for FlightSnippet.Leg(0);
  OUTLINED_FUNCTION_35_4(v3);
  OUTLINED_FUNCTION_0_1();
  v2[9] = *(void *)(v1 + 96);
  return FlightSnippet.Leg.departureGateClosed.modify;
}

void FlightSnippet.Leg.departureGateClosed.modify()
{
  OUTLINED_FUNCTION_145();
  char v1 = OUTLINED_FUNCTION_17_4();
  if (v0)
  {
    if (v1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((v1 & 1) == 0)
  {
LABEL_3:
    OUTLINED_FUNCTION_1_5();
    uint64_t v2 = OUTLINED_FUNCTION_19_4();
    uint64_t v3 = FlightSnippet.Leg._StorageClass.init(copying:)(v2);
    OUTLINED_FUNCTION_12_5(v3);
  }
LABEL_4:
  OUTLINED_FUNCTION_52_1();
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_73_0();
  OUTLINED_FUNCTION_141_0();
  free(v4);
}

uint64_t FlightSnippet.Leg.departureRunway.getter()
{
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_0_1();
  return *(void *)(v0 + 104);
}

void FlightSnippet.Leg.departureRunway.setter()
{
  OUTLINED_FUNCTION_22_6();
  uint64_t v3 = v2;
  if ((OUTLINED_FUNCTION_36_3() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_5();
    uint64_t v4 = OUTLINED_FUNCTION_19_4();
    uint64_t v5 = FlightSnippet.Leg._StorageClass.init(copying:)(v4);
    OUTLINED_FUNCTION_18_7(v5);
  }
  uint64_t v6 = *(void *)(v0 + v1);
  OUTLINED_FUNCTION_2_2();
  *(void *)(v6 + 104) = v3;
  OUTLINED_FUNCTION_20_4();
}

void (*FlightSnippet.Leg.departureRunway.modify())()
{
  uint64_t v2 = OUTLINED_FUNCTION_46_3();
  *uint64_t v0 = v2;
  v2[10] = v1;
  uint64_t v3 = type metadata accessor for FlightSnippet.Leg(0);
  OUTLINED_FUNCTION_35_4(v3);
  OUTLINED_FUNCTION_0_1();
  v2[9] = *(void *)(v1 + 104);
  return FlightSnippet.Leg.departureRunway.modify;
}

void FlightSnippet.Leg.departureRunway.modify()
{
  OUTLINED_FUNCTION_145();
  char v1 = OUTLINED_FUNCTION_17_4();
  if (v0)
  {
    if (v1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((v1 & 1) == 0)
  {
LABEL_3:
    OUTLINED_FUNCTION_1_5();
    uint64_t v2 = OUTLINED_FUNCTION_19_4();
    uint64_t v3 = FlightSnippet.Leg._StorageClass.init(copying:)(v2);
    OUTLINED_FUNCTION_12_5(v3);
  }
LABEL_4:
  OUTLINED_FUNCTION_52_1();
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_73_0();
  OUTLINED_FUNCTION_141_0();
  free(v4);
}

uint64_t FlightSnippet.Leg.isTaxiing.getter()
{
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_0_1();
  return *(unsigned __int8 *)(v0 + 112);
}

void FlightSnippet.Leg.isTaxiing.setter()
{
  OUTLINED_FUNCTION_22_6();
  char v3 = v2;
  if ((OUTLINED_FUNCTION_36_3() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_5();
    uint64_t v4 = OUTLINED_FUNCTION_19_4();
    uint64_t v5 = FlightSnippet.Leg._StorageClass.init(copying:)(v4);
    OUTLINED_FUNCTION_18_7(v5);
  }
  uint64_t v6 = *(void *)(v0 + v1);
  OUTLINED_FUNCTION_2_2();
  *(unsigned char *)(v6 + 112) = v3 & 1;
  OUTLINED_FUNCTION_20_4();
}

void (*FlightSnippet.Leg.isTaxiing.modify())()
{
  char v2 = OUTLINED_FUNCTION_69_1();
  OUTLINED_FUNCTION_40_3((uint64_t)v2);
  OUTLINED_FUNCTION_0_1();
  *(unsigned char *)(v1 + 84) = *(unsigned char *)(v0 + 112);
  return FlightSnippet.Leg.isTaxiing.modify;
}

void FlightSnippet.Leg.isTaxiing.modify()
{
  OUTLINED_FUNCTION_145();
  char v1 = OUTLINED_FUNCTION_50_4();
  if (v0)
  {
    if (v1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((v1 & 1) == 0)
  {
LABEL_3:
    OUTLINED_FUNCTION_1_5();
    uint64_t v2 = OUTLINED_FUNCTION_19_4();
    uint64_t v3 = FlightSnippet.Leg._StorageClass.init(copying:)(v2);
    OUTLINED_FUNCTION_12_5(v3);
  }
LABEL_4:
  OUTLINED_FUNCTION_68_0();
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_116_1();
  OUTLINED_FUNCTION_141_0();
  free(v4);
}

uint64_t FlightSnippet.Leg.departureAirport.getter@<X0>(void *a1@<X8>)
{
  return FlightSnippet.Leg.departureAirport.getter(a1);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FlightSnippet.Leg(0);
  OUTLINED_FUNCTION_103_1();
  OUTLINED_FUNCTION_0_1();
  _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0(v1, (uint64_t)v6, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  uint64_t v7 = type metadata accessor for FlightSnippet.Airport(0);
  OUTLINED_FUNCTION_53_2((uint64_t)v6, 1, v7);
  if (!v8) {
    return outlined init with take of FlightSnippet.Flight();
  }
  FlightSnippet.Airport.init()(a1);
  return outlined destroy of SearchResult?((uint64_t)v6, &demangling cache variable for type metadata for FlightSnippet.Airport?);
}

uint64_t key path setter for FlightSnippet.flight : FlightSnippet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6, uint64_t (*a7)(char *))
{
  uint64_t v8 = a5(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v12 - v9;
  outlined init with copy of FlightSnippet.Flight();
  return a7(v10);
}

void FlightSnippet.Leg.departureAirport.setter()
{
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  uint64_t v8;
  unsigned char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned char v15[32];

  OUTLINED_FUNCTION_145();
  uint64_t v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = &v15[-v8];
  uint64_t v10 = *(int *)(type metadata accessor for FlightSnippet.Leg(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_5();
    uint64_t v11 = swift_retain();
    *(void *)(v0 + v10) = FlightSnippet.Leg._StorageClass.init(copying:)(v11);
    swift_release();
  }
  uint64_t v12 = *(void *)(v0 + v10);
  outlined init with take of FlightSnippet.Flight();
  uint64_t v13 = type metadata accessor for FlightSnippet.Airport(0);
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v13);
  outlined init with take of FlightSnippet.Airport?((uint64_t)v9, (uint64_t)v7);
  uint64_t v14 = v12 + *v2;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of FlightSnippet.Airport?((uint64_t)v7, v14);
  swift_endAccess();
  swift_release();
  OUTLINED_FUNCTION_141_0();
}

void FlightSnippet.Leg.departureAirport.modify()
{
  OUTLINED_FUNCTION_145();
  char v1 = malloc(0x38uLL);
  OUTLINED_FUNCTION_93_1((uint64_t)v1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  OUTLINED_FUNCTION_81(v2);
  uint64_t v4 = malloc(*(void *)(v3 + 64));
  *(void *)(v0 + 32) = v4;
  uint64_t v5 = type metadata accessor for FlightSnippet.Airport(0);
  OUTLINED_FUNCTION_7_2();
  size_t v7 = *(void *)(v6 + 64);
  *(void *)(v0 + 40) = malloc(v7);
  uint64_t v8 = malloc(v7);
  OUTLINED_FUNCTION_70_1((uint64_t)v8);
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_94_1();
  OUTLINED_FUNCTION_53_2((uint64_t)v4, 1, v5);
  if (v9)
  {
    OUTLINED_FUNCTION_25_5();
    outlined destroy of SearchResult?((uint64_t)v4, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  }
  else
  {
    outlined init with take of FlightSnippet.Flight();
  }
  OUTLINED_FUNCTION_141_0();
}

{
  FlightSnippet.Leg.departureAirport.modify();
}

{
  uint64_t v0;
  void (*v1)(void *);
  void (*v2)(void *);
  void *v3;
  void *v4;
  void *v5;
  char v6;
  void *v7;
  uint64_t v8;

  OUTLINED_FUNCTION_145();
  uint64_t v2 = v1;
  uint64_t v3 = *(void **)(*(void *)v0 + 40);
  uint64_t v4 = *(void **)(*(void *)v0 + 48);
  uint64_t v5 = *(void **)(*(void *)v0 + 32);
  if (v6)
  {
    outlined init with copy of FlightSnippet.Flight();
    v2(v3);
    outlined destroy of FlightSnippet.Flight((uint64_t)v4, (void (*)(void))type metadata accessor for FlightSnippet.Airport);
  }
  else
  {
    v1(*(void **)(*(void *)v0 + 48));
  }
  free(v4);
  free(v3);
  free(v5);
  OUTLINED_FUNCTION_141_0();
  free(v7);
}

BOOL FlightSnippet.Leg.hasDepartureAirport.getter()
{
  return FlightSnippet.Leg.hasDepartureAirport.getter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v8;

  char v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FlightSnippet.Leg(0);
  OUTLINED_FUNCTION_103_1();
  OUTLINED_FUNCTION_0_1();
  _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0(v0, (uint64_t)v4, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  uint64_t v5 = type metadata accessor for FlightSnippet.Airport(0);
  uint64_t v6 = __swift_getEnumTagSinglePayload((uint64_t)v4, 1, v5) != 1;
  outlined destroy of SearchResult?((uint64_t)v4, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  return v6;
}

Swift::Void __swiftcall FlightSnippet.Leg.clearDepartureAirport()()
{
}

uint64_t FlightSnippet.Leg.arrivalPublishedTime.getter()
{
  return FlightSnippet.Leg.arrivalPublishedTime.getter(&OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalPublishedTime);
}

void FlightSnippet.Leg.arrivalPublishedTime.setter()
{
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  OUTLINED_FUNCTION_22_6();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  type metadata accessor for FlightSnippet.Leg(0);
  if ((OUTLINED_FUNCTION_47_2() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_5();
    uint64_t v6 = OUTLINED_FUNCTION_9_4();
    size_t v7 = FlightSnippet.Leg._StorageClass.init(copying:)(v6);
    OUTLINED_FUNCTION_21_6(v7);
  }
  uint64_t v8 = (void *)(*(void *)(v0 + v1) + *v3);
  OUTLINED_FUNCTION_2_2();
  *uint64_t v8 = v5;
  OUTLINED_FUNCTION_20_4();
}

void (*FlightSnippet.Leg.arrivalPublishedTime.modify())()
{
  uint64_t v0 = OUTLINED_FUNCTION_46_3();
  OUTLINED_FUNCTION_24_5((uint64_t)v0);
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_80_1();
  return FlightSnippet.Leg.arrivalPublishedTime.modify;
}

void FlightSnippet.Leg.arrivalPublishedTime.modify()
{
}

{
  void *v0;
  void *v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;

  OUTLINED_FUNCTION_145();
  char v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(*(void *)v4 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (v3)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    OUTLINED_FUNCTION_1_5();
    size_t v7 = OUTLINED_FUNCTION_9_4();
    uint64_t v8 = FlightSnippet.Leg._StorageClass.init(copying:)(v7);
    OUTLINED_FUNCTION_6_4(v8);
  }
LABEL_4:
  OUTLINED_FUNCTION_52_1();
  uint64_t v10 = (void *)(v9 + *v1);
  OUTLINED_FUNCTION_2_2();
  char *v10 = v5;
  OUTLINED_FUNCTION_141_0();
  free(v11);
}

uint64_t FlightSnippet.Leg.arrivalActualTime.getter()
{
  return FlightSnippet.Leg.arrivalPublishedTime.getter(&OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalActualTime);
}

uint64_t FlightSnippet.Leg.arrivalPublishedTime.getter(void *a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(type metadata accessor for FlightSnippet.Leg(0) + 20)) + *a1;
  OUTLINED_FUNCTION_0_1();
  return *(void *)v2;
}

void FlightSnippet.Leg.arrivalActualTime.setter()
{
}

void (*FlightSnippet.Leg.arrivalActualTime.modify())()
{
  uint64_t v0 = OUTLINED_FUNCTION_46_3();
  OUTLINED_FUNCTION_24_5((uint64_t)v0);
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_80_1();
  return FlightSnippet.Leg.arrivalActualTime.modify;
}

void FlightSnippet.Leg.arrivalActualTime.modify()
{
}

uint64_t FlightSnippet.Leg.arrivalTerminal.getter()
{
  return FlightSnippet.Leg.arrivalTerminal.getter(&OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalTerminal);
}

uint64_t key path setter for FlightSnippet.Leg.arrivalTerminal : FlightSnippet.Leg(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return FlightSnippet.Leg.arrivalTerminal.setter(v1, v2);
}

uint64_t FlightSnippet.Leg.arrivalTerminal.setter(uint64_t a1, uint64_t a2)
{
  return FlightSnippet.Leg.arrivalTerminal.setter(a1, a2, &OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalTerminal);
}

uint64_t FlightSnippet.Leg.arrivalTerminal.modify()
{
  uint64_t v0 = OUTLINED_FUNCTION_45_2();
  OUTLINED_FUNCTION_41_4((uint64_t)v0);
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_107_1();
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Leg.arrivalTerminal.modify()
{
}

{
  void *v0;
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;

  OUTLINED_FUNCTION_104_0();
  uint64_t v1 = v0;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 72);
  uint64_t v5 = *(void *)(*v2 + 80);
  if (v6)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      size_t v7 = *(int *)(v3 + 96);
      uint64_t v8 = *(void *)(v3 + 88);
      OUTLINED_FUNCTION_1_5();
      char v9 = swift_retain();
      *(void *)(v8 + v7) = FlightSnippet.Leg._StorageClass.init(copying:)(v9);
      swift_release();
    }
    uint64_t v10 = (void *)(*(void *)(*(void *)(v3 + 88) + *(int *)(v3 + 96)) + *v1);
    OUTLINED_FUNCTION_2_2();
    char *v10 = v4;
    v10[1] = v5;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v11 = *(int *)(v3 + 96);
      uint64_t v12 = *(void *)(v3 + 88);
      OUTLINED_FUNCTION_1_5();
      uint64_t v13 = swift_retain();
      *(void *)(v12 + v11) = FlightSnippet.Leg._StorageClass.init(copying:)(v13);
      swift_release();
    }
    uint64_t v14 = (void *)(*(void *)(*(void *)(v3 + 88) + *(int *)(v3 + 96)) + *v1);
    OUTLINED_FUNCTION_2_2();
    *uint64_t v14 = v4;
    v14[1] = v5;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_119_0();
  free(v15);
}

uint64_t FlightSnippet.Leg.arrivalGate.getter()
{
  return FlightSnippet.Leg.arrivalTerminal.getter(&OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalGate);
}

uint64_t FlightSnippet.Leg.arrivalTerminal.getter(void *a1)
{
  uint64_t v2 = (uint64_t *)(*(void *)(v1 + *(int *)(type metadata accessor for FlightSnippet.Leg(0) + 20)) + *a1);
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t key path setter for FlightSnippet.Leg.arrivalGate : FlightSnippet.Leg(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return FlightSnippet.Leg.arrivalGate.setter(v1, v2);
}

uint64_t FlightSnippet.Leg.arrivalGate.setter(uint64_t a1, uint64_t a2)
{
  return FlightSnippet.Leg.arrivalTerminal.setter(a1, a2, &OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalGate);
}

uint64_t FlightSnippet.Leg.arrivalTerminal.setter(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = *(int *)(type metadata accessor for FlightSnippet.Leg(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_5();
    uint64_t v8 = swift_retain();
    *(void *)(v3 + v7) = FlightSnippet.Leg._StorageClass.init(copying:)(v8);
    swift_release();
  }
  char v9 = (void *)(*(void *)(v3 + v7) + *a3);
  OUTLINED_FUNCTION_2_2();
  *char v9 = a1;
  v9[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t FlightSnippet.Leg.arrivalGate.modify()
{
  uint64_t v0 = OUTLINED_FUNCTION_45_2();
  OUTLINED_FUNCTION_41_4((uint64_t)v0);
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_107_1();
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Leg.arrivalGate.modify()
{
}

uint64_t FlightSnippet.Leg.gateArrival.getter()
{
  return FlightSnippet.Leg.arrivalPublishedTime.getter(&OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__gateArrival);
}

void FlightSnippet.Leg.gateArrival.setter()
{
}

void (*FlightSnippet.Leg.gateArrival.modify())()
{
  uint64_t v0 = OUTLINED_FUNCTION_46_3();
  OUTLINED_FUNCTION_24_5((uint64_t)v0);
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_80_1();
  return FlightSnippet.Leg.gateArrival.modify;
}

void FlightSnippet.Leg.gateArrival.modify()
{
}

uint64_t FlightSnippet.Leg.arrivalRunway.getter()
{
  return FlightSnippet.Leg.arrivalPublishedTime.getter(&OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalRunway);
}

void FlightSnippet.Leg.arrivalRunway.setter()
{
}

void (*FlightSnippet.Leg.arrivalRunway.modify())()
{
  uint64_t v0 = OUTLINED_FUNCTION_46_3();
  OUTLINED_FUNCTION_24_5((uint64_t)v0);
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_80_1();
  return FlightSnippet.Leg.arrivalRunway.modify;
}

void FlightSnippet.Leg.arrivalRunway.modify()
{
}

uint64_t FlightSnippet.Leg.arrivalAirport.getter@<X0>(void *a1@<X8>)
{
  return FlightSnippet.Leg.departureAirport.getter(a1);
}

void FlightSnippet.Leg.arrivalAirport.setter()
{
}

void FlightSnippet.Leg.arrivalAirport.modify()
{
  OUTLINED_FUNCTION_145();
  uint64_t v1 = malloc(0x38uLL);
  OUTLINED_FUNCTION_93_1((uint64_t)v1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  OUTLINED_FUNCTION_81(v2);
  uint64_t v4 = malloc(*(void *)(v3 + 64));
  *(void *)(v0 + 32) = v4;
  uint64_t v5 = type metadata accessor for FlightSnippet.Airport(0);
  OUTLINED_FUNCTION_7_2();
  size_t v7 = *(void *)(v6 + 64);
  *(void *)(v0 + 40) = malloc(v7);
  uint64_t v8 = malloc(v7);
  OUTLINED_FUNCTION_70_1((uint64_t)v8);
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_94_1();
  OUTLINED_FUNCTION_53_2((uint64_t)v4, 1, v5);
  if (v9)
  {
    OUTLINED_FUNCTION_25_5();
    outlined destroy of SearchResult?((uint64_t)v4, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  }
  else
  {
    outlined init with take of FlightSnippet.Flight();
  }
  OUTLINED_FUNCTION_141_0();
}

{
  FlightSnippet.Leg.departureAirport.modify();
}

BOOL FlightSnippet.Leg.hasArrivalAirport.getter()
{
  return FlightSnippet.Leg.hasDepartureAirport.getter();
}

Swift::Void __swiftcall FlightSnippet.Leg.clearArrivalAirport()()
{
}

uint64_t FlightSnippet.Leg.clearDepartureAirport()(void *a1)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = OUTLINED_FUNCTION_44_3();
  type metadata accessor for FlightSnippet.Leg(v7);
  if ((OUTLINED_FUNCTION_47_2() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_5();
    uint64_t v8 = OUTLINED_FUNCTION_9_4();
    uint64_t v9 = FlightSnippet.Leg._StorageClass.init(copying:)(v8);
    OUTLINED_FUNCTION_21_6(v9);
  }
  uint64_t v10 = *(void *)(v1 + v3);
  uint64_t v11 = type metadata accessor for FlightSnippet.Airport(0);
  __swift_storeEnumTagSinglePayload(v2, 1, 1, v11);
  uint64_t v12 = v10 + *a1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of FlightSnippet.Airport?(v2, v12);
  swift_endAccess();
  return swift_release();
}

uint64_t FlightSnippet.Leg.baggageClaim.getter()
{
  return FlightSnippet.Leg.arrivalTerminal.getter(&OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__baggageClaim);
}

uint64_t key path setter for FlightSnippet.Leg.baggageClaim : FlightSnippet.Leg(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return FlightSnippet.Leg.baggageClaim.setter(v1, v2);
}

uint64_t FlightSnippet.Leg.baggageClaim.setter(uint64_t a1, uint64_t a2)
{
  return FlightSnippet.Leg.arrivalTerminal.setter(a1, a2, &OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__baggageClaim);
}

uint64_t FlightSnippet.Leg.baggageClaim.modify()
{
  uint64_t v0 = OUTLINED_FUNCTION_45_2();
  OUTLINED_FUNCTION_41_4((uint64_t)v0);
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_107_1();
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Leg.baggageClaim.modify()
{
}

uint64_t FlightSnippet.Leg.updatedAt.getter()
{
  return FlightSnippet.Leg.arrivalPublishedTime.getter(&OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__updatedAt);
}

void FlightSnippet.Leg.updatedAt.setter()
{
}

void (*FlightSnippet.Leg.updatedAt.modify())()
{
  uint64_t v0 = OUTLINED_FUNCTION_46_3();
  OUTLINED_FUNCTION_24_5((uint64_t)v0);
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_80_1();
  return FlightSnippet.Leg.updatedAt.modify;
}

void FlightSnippet.Leg.updatedAt.modify()
{
}

uint64_t FlightSnippet.Leg.divertedAirport.getter@<X0>(void *a1@<X8>)
{
  return FlightSnippet.Leg.departureAirport.getter(a1);
}

void FlightSnippet.Leg.divertedAirport.setter()
{
}

void FlightSnippet.Leg.divertedAirport.modify()
{
  OUTLINED_FUNCTION_145();
  uint64_t v1 = malloc(0x38uLL);
  OUTLINED_FUNCTION_93_1((uint64_t)v1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  OUTLINED_FUNCTION_81(v2);
  uint64_t v4 = malloc(*(void *)(v3 + 64));
  *(void *)(v0 + 32) = v4;
  uint64_t v5 = type metadata accessor for FlightSnippet.Airport(0);
  OUTLINED_FUNCTION_7_2();
  size_t v7 = *(void *)(v6 + 64);
  *(void *)(v0 + 40) = malloc(v7);
  uint64_t v8 = malloc(v7);
  OUTLINED_FUNCTION_70_1((uint64_t)v8);
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_94_1();
  OUTLINED_FUNCTION_53_2((uint64_t)v4, 1, v5);
  if (v9)
  {
    OUTLINED_FUNCTION_25_5();
    outlined destroy of SearchResult?((uint64_t)v4, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  }
  else
  {
    outlined init with take of FlightSnippet.Flight();
  }
  OUTLINED_FUNCTION_141_0();
}

{
  FlightSnippet.Leg.departureAirport.modify();
}

BOOL FlightSnippet.Leg.hasDivertedAirport.getter()
{
  return FlightSnippet.Leg.hasDepartureAirport.getter();
}

Swift::Void __swiftcall FlightSnippet.Leg.clearDivertedAirport()()
{
}

uint64_t FlightSnippet.Leg.uid.getter()
{
  return FlightSnippet.Leg.arrivalTerminal.getter(&OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__uid);
}

uint64_t key path setter for FlightSnippet.Leg.uid : FlightSnippet.Leg(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return FlightSnippet.Leg.uid.setter(v1, v2);
}

uint64_t FlightSnippet.Leg.uid.setter(uint64_t a1, uint64_t a2)
{
  return FlightSnippet.Leg.arrivalTerminal.setter(a1, a2, &OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__uid);
}

uint64_t FlightSnippet.Leg.uid.modify()
{
  uint64_t v0 = OUTLINED_FUNCTION_45_2();
  OUTLINED_FUNCTION_41_4((uint64_t)v0);
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_107_1();
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_56_1();
}

void FlightSnippet.Leg.uid.modify()
{
}

uint64_t FlightSnippet.Leg.feedUpdateTime.getter()
{
  return FlightSnippet.Leg.arrivalPublishedTime.getter(&OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__feedUpdateTime);
}

void FlightSnippet.Leg.feedUpdateTime.setter()
{
}

void (*FlightSnippet.Leg.feedUpdateTime.modify())()
{
  uint64_t v0 = OUTLINED_FUNCTION_46_3();
  OUTLINED_FUNCTION_24_5((uint64_t)v0);
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_80_1();
  return FlightSnippet.Leg.feedUpdateTime.modify;
}

void FlightSnippet.Leg.feedUpdateTime.modify()
{
}

uint64_t FlightSnippet.Flight.unknownFields.getter()
{
  type metadata accessor for UnknownStorage();
  OUTLINED_FUNCTION_7_2();
  uint64_t v0 = OUTLINED_FUNCTION_79_0();
  return v1(v0);
}

uint64_t FlightSnippet.Flight.unknownFields.setter()
{
  type metadata accessor for UnknownStorage();
  OUTLINED_FUNCTION_7_2();
  uint64_t v0 = OUTLINED_FUNCTION_67_1();
  return v1(v0);
}

uint64_t (*FlightSnippet.Leg.unknownFields.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightSnippet.Leg.init()@<X0>(uint64_t a1@<X8>)
{
  return FlightSnippet.Flight.init()(type metadata accessor for FlightSnippet.Leg, &one-time initialization token for defaultInstance, &static FlightSnippet.Leg._StorageClass.defaultInstance, a1);
}

uint64_t FlightSnippet.Flight.init()@<X0>(uint64_t (*a1)(uint64_t)@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  UnknownStorage.init()();
  uint64_t v8 = OUTLINED_FUNCTION_77_1();
  uint64_t v9 = *(int *)(a1(v8) + 20);
  if (*a2 != -1) {
    swift_once();
  }
  *(void *)(a4 + v9) = *a3;
  return swift_retain();
}

uint64_t FlightSnippet.init()@<X0>(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0xE000000000000000;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  type metadata accessor for FlightSnippet(0);
  UnknownStorage.init()();
  type metadata accessor for FlightSnippet.Flight(0);
  uint64_t v1 = OUTLINED_FUNCTION_112_1();
  return __swift_storeEnumTagSinglePayload(v1, v2, v3, v4);
}

void one-time initialization function for allCases()
{
  static FlightSnippet.Status.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

uint64_t *FlightSnippet.Status.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  return &static FlightSnippet.Status.allCases;
}

uint64_t static FlightSnippet.Status.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_0_1();
  return swift_bridgeObjectRetain();
}

uint64_t static FlightSnippet.Status.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_2_2();
  static FlightSnippet.Status.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static FlightSnippet.Status.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return protocol witness for _ClientInfoProtocol.trackingConfig.modify in conformance AnswerSynthesisModelOnDevice._ClientInfo;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance FlightSnippet.Status@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  *a1 = static FlightSnippet.Status.allCases;
  return swift_bridgeObjectRetain();
}

const char *FlightSnippet.protoMessageName.unsafeMutableAddressor()
{
  return "FlightSnippet";
}

uint64_t static FlightSnippet.protoMessageName.getter()
{
  return 0x6E53746867696C46;
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static FlightSnippet._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static FlightSnippet._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_258662FD0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "flight";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "is_card_search";
  *(void *)(v10 + 8) = 14;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "is_icao_search";
  *((void *)v12 + 1) = 14;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "query_intended_flight_info";
  *((void *)v14 + 1) = 26;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)v16 = "selected_leg_index";
  *((void *)v16 + 1) = 18;
  v16[16] = 2;
  v9();
  v17 = (void *)(v5 + 5 * v2);
  long long v18 = (char *)v17 + v1[14];
  void *v17 = 6;
  *(void *)long long v18 = "search_timestamp";
  *((void *)v18 + 1) = 16;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;
  void *v21;
  char *v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static FlightSnippet.Status._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static FlightSnippet.Status._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  long long v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_258662FE0;
  uint64_t v4 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 0;
  *(void *)uint64_t v4 = "UNKNOWN";
  *(void *)(v4 + 8) = 7;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50718];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v24 + v3 + v2 + v1[14];
  *(void *)(v24 + v3 + v2) = 1;
  *(void *)uint64_t v8 = "ACTIVE";
  *(void *)(v8 + 8) = 6;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  uint64_t v9 = (void *)(v24 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *uint64_t v9 = 2;
  *(void *)unint64_t v10 = "CANCELED";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v24 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "DIVERTED";
  *((void *)v12 + 1) = 8;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v24 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "DATA_SOURCE_NEEDED";
  *((void *)v14 + 1) = 18;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v24 + v3 + 5 * v2);
  v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)v16 = "LANDED";
  *((void *)v16 + 1) = 6;
  v16[16] = 2;
  v7();
  v17 = (void *)(v24 + v3 + 6 * v2);
  long long v18 = (char *)v17 + v1[14];
  void *v17 = 6;
  *(void *)long long v18 = "NOT_OPERATIONAL";
  *((void *)v18 + 1) = 15;
  v18[16] = 2;
  v7();
  uint64_t v19 = (void *)(v24 + v3 + 7 * v2);
  v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 7;
  *(void *)v20 = "REDIRECTED";
  *((void *)v20 + 1) = 10;
  v20[16] = 2;
  v7();
  v21 = (void *)(v24 + v3 + 8 * v2);
  v22 = (char *)v21 + v1[14];
  char *v21 = 8;
  *(void *)v22 = "SCHEDULED";
  *((void *)v22 + 1) = 9;
  v22[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;
  void *v21;
  char *v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  void *v37;
  char *v38;
  void *v39;
  char *v40;
  void *v41;
  char *v42;
  void *v43;
  char *v44;
  void *v45;
  char *v46;
  void *v47;
  char *v48;
  uint64_t v50;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static FlightSnippet.Flight._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static FlightSnippet.Flight._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = xmmword_258662FF0;
  uint64_t v4 = v50 + v3 + v1[14];
  *(void *)(v50 + v3) = 1;
  *(void *)uint64_t v4 = "id";
  *(void *)(v4 + 8) = 2;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50718];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v50 + v3 + v2 + v1[14];
  *(void *)(v50 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "content_hash";
  *(void *)(v8 + 8) = 12;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  uint64_t v9 = (void *)(v50 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *uint64_t v9 = 3;
  *(void *)unint64_t v10 = "carrier_iata";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v50 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "carrier_icao";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v50 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 5;
  *(void *)uint64_t v14 = "carrier_fs";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v50 + v3 + 5 * v2);
  v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 6;
  *(void *)v16 = "carrier_name";
  *((void *)v16 + 1) = 12;
  v16[16] = 2;
  v7();
  v17 = (void *)(v50 + v3 + 6 * v2);
  long long v18 = (char *)v17 + v1[14];
  void *v17 = 7;
  *(void *)long long v18 = "carrier_phone_number";
  *((void *)v18 + 1) = 20;
  v18[16] = 2;
  v7();
  uint64_t v19 = (void *)(v50 + v3 + 7 * v2);
  v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 8;
  *(void *)v20 = "flight_number";
  *((void *)v20 + 1) = 13;
  v20[16] = 2;
  v7();
  v21 = (void *)(v50 + v3 + 8 * v2);
  v22 = (char *)v21 + v1[14];
  char *v21 = 9;
  *(void *)v22 = "flight_departure_scheduled";
  *((void *)v22 + 1) = 26;
  v22[16] = 2;
  v7();
  uint64_t v23 = (void *)(v50 + v3 + 9 * v2);
  long long v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)long long v24 = "flight_arrival_scheduled";
  *((void *)v24 + 1) = 24;
  v24[16] = 2;
  v7();
  long long v25 = (void *)(v50 + v3 + 10 * v2);
  v26 = (char *)v25 + v1[14];
  *long long v25 = 11;
  *(void *)v26 = "legs";
  *((void *)v26 + 1) = 4;
  v26[16] = 2;
  v7();
  uint64_t v27 = (void *)(v50 + v3 + 11 * v2);
  v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)v28 = "code_shares";
  *((void *)v28 + 1) = 11;
  v28[16] = 2;
  v7();
  v29 = (void *)(v50 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  char *v29 = 13;
  *(void *)uint64_t v30 = "leg_index";
  *((void *)v30 + 1) = 9;
  v30[16] = 2;
  v7();
  uint64_t v31 = (void *)(v50 + v3 + 13 * v2);
  long long v32 = (char *)v31 + v1[14];
  *uint64_t v31 = 14;
  *(void *)long long v32 = "operator_carrier_code";
  *((void *)v32 + 1) = 21;
  v32[16] = 2;
  v7();
  v33 = (void *)(v50 + v3 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  int *v33 = 15;
  *(void *)uint64_t v34 = "operator_flight_number";
  *((void *)v34 + 1) = 22;
  v34[16] = 2;
  v7();
  v35 = (void *)(v50 + v3 + 15 * v2);
  v36 = (char *)v35 + v1[14];
  char *v35 = 16;
  *(void *)v36 = "website";
  *((void *)v36 + 1) = 7;
  v36[16] = 2;
  v7();
  uint64_t v37 = (void *)(v50 + v3 + 16 * v2);
  uint64_t v38 = (char *)v37 + v1[14];
  *uint64_t v37 = 20;
  *(void *)uint64_t v38 = "last_updated";
  *((void *)v38 + 1) = 12;
  v38[16] = 2;
  v7();
  long long v39 = (void *)(v50 + v3 + 17 * v2);
  v40 = (char *)v39 + v1[14];
  *long long v39 = 21;
  *(void *)v40 = "legs_not_updated";
  *((void *)v40 + 1) = 16;
  v40[16] = 2;
  v7();
  uint64_t v41 = (void *)(v50 + v3 + 18 * v2);
  v42 = (char *)v41 + v1[14];
  *uint64_t v41 = 22;
  *(void *)v42 = "departure_UTC_variance";
  *((void *)v42 + 1) = 22;
  v42[16] = 2;
  v7();
  v43 = (void *)(v50 + v3 + 19 * v2);
  uint64_t v44 = (char *)v43 + v1[14];
  char *v43 = 23;
  *(void *)uint64_t v44 = "total_legs";
  *((void *)v44 + 1) = 10;
  v44[16] = 2;
  v7();
  uint64_t v45 = (void *)(v50 + v3 + 20 * v2);
  long long v46 = (char *)v45 + v1[14];
  *uint64_t v45 = 24;
  *(void *)long long v46 = "leg_flight_schedule_ids";
  *((void *)v46 + 1) = 23;
  v46[16] = 2;
  v7();
  long long v47 = (void *)(v50 + v3 + 21 * v2);
  uint64_t v48 = (char *)v47 + v1[14];
  *long long v47 = 25;
  *(void *)uint64_t v48 = "leg_flight_update_ids";
  *((void *)v48 + 1) = 21;
  v48[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  void *v22;
  char *v23;
  void *v24;
  char *v25;
  void *v26;
  char *v27;
  void *v28;
  char *v29;
  void *v30;
  char *v31;
  void *v32;
  char *v33;
  uint64_t v35;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static FlightSnippet.Airport._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static FlightSnippet.Airport._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_258663000;
  uint64_t v4 = v35 + v3;
  unint64_t v5 = v35 + v3 + v1[14];
  *(void *)(v35 + v3) = 1;
  *(void *)unint64_t v5 = "code";
  *(void *)(v5 + 8) = 4;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  uint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)uint64_t v9 = "name";
  *(void *)(v9 + 8) = 4;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  char *v10 = 3;
  *(void *)uint64_t v11 = "city";
  *((void *)v11 + 1) = 4;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  char *v12 = 4;
  *(void *)uint64_t v13 = "physicalCity";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)uint64_t v15 = "maps_id";
  *((void *)v15 + 1) = 7;
  v15[16] = 2;
  v8();
  v16 = (void *)(v4 + 5 * v2);
  v17 = (char *)v16 + v1[14];
  char *v16 = 6;
  *(void *)v17 = "latitude";
  *((void *)v17 + 1) = 8;
  v17[16] = 2;
  v8();
  long long v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *long long v18 = 7;
  *(void *)uint64_t v19 = "longitude";
  *((void *)v19 + 1) = 9;
  v19[16] = 2;
  v8();
  v20 = (void *)(v4 + 7 * v2);
  v21 = (char *)v20 + v1[14];
  char *v20 = 8;
  *(void *)v21 = "time_zone_name";
  *((void *)v21 + 1) = 14;
  v21[16] = 2;
  v8();
  v22 = (void *)(v4 + 8 * v2);
  uint64_t v23 = (char *)v22 + v1[14];
  int *v22 = 9;
  *(void *)uint64_t v23 = "street";
  *((void *)v23 + 1) = 6;
  v23[16] = 2;
  v8();
  long long v24 = (void *)(v4 + 9 * v2);
  long long v25 = (char *)v24 + v1[14];
  *long long v24 = 10;
  *(void *)long long v25 = "district";
  *((void *)v25 + 1) = 8;
  v25[16] = 2;
  v8();
  v26 = (void *)(v4 + 10 * v2);
  uint64_t v27 = (char *)v26 + v1[14];
  int *v26 = 11;
  *(void *)uint64_t v27 = "state";
  *((void *)v27 + 1) = 5;
  v27[16] = 2;
  v8();
  v28 = (void *)(v4 + 11 * v2);
  v29 = (char *)v28 + v1[14];
  char *v28 = 12;
  *(void *)v29 = "postal_code";
  *((void *)v29 + 1) = 11;
  v29[16] = 2;
  v8();
  uint64_t v30 = (void *)(v4 + 12 * v2);
  uint64_t v31 = (char *)v30 + v1[14];
  *uint64_t v30 = 13;
  *(void *)uint64_t v31 = "country_code";
  *((void *)v31 + 1) = 12;
  v31[16] = 2;
  v8();
  long long v32 = (void *)(v4 + 13 * v2);
  v33 = (char *)v32 + v1[14];
  *long long v32 = 14;
  *(void *)v33 = "country";
  *((void *)v33 + 1) = 7;
  v33[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static FlightSnippet.FlightInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static FlightSnippet.FlightInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_258663010;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "carrier";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "carrier_fs";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "flight_number";
  *((void *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "relationship";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;
  void *v21;
  char *v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  void *v37;
  char *v38;
  void *v39;
  char *v40;
  void *v41;
  char *v42;
  void *v43;
  char *v44;
  void *v45;
  char *v46;
  void *v47;
  char *v48;
  void *v49;
  char *v50;
  void *v51;
  char *v52;
  void *v53;
  char *v54;
  uint64_t v56;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static FlightSnippet.Leg._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static FlightSnippet.Leg._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_258663020;
  uint64_t v4 = v56 + v3 + v1[14];
  *(void *)(v56 + v3) = 1;
  *(void *)uint64_t v4 = "status";
  *(void *)(v4 + 8) = 6;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50718];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v56 + v3 + v2 + v1[14];
  *(void *)(v56 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "en_route";
  *(void *)(v8 + 8) = 8;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  uint64_t v9 = (void *)(v56 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *uint64_t v9 = 3;
  *(void *)unint64_t v10 = "departure_delayed";
  *((void *)v10 + 1) = 17;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v56 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "arrival_delayed";
  *((void *)v12 + 1) = 15;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v56 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 5;
  *(void *)uint64_t v14 = "title";
  *((void *)v14 + 1) = 5;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v56 + v3 + 5 * v2);
  v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 6;
  *(void *)v16 = "departure_published_time";
  *((void *)v16 + 1) = 24;
  v16[16] = 2;
  v7();
  v17 = (void *)(v56 + v3 + 6 * v2);
  long long v18 = (char *)v17 + v1[14];
  void *v17 = 7;
  *(void *)long long v18 = "departure_actual_time";
  *((void *)v18 + 1) = 21;
  v18[16] = 2;
  v7();
  uint64_t v19 = (void *)(v56 + v3 + 7 * v2);
  v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 8;
  *(void *)v20 = "departure_terminal";
  *((void *)v20 + 1) = 18;
  v20[16] = 2;
  v7();
  v21 = (void *)(v56 + v3 + 8 * v2);
  v22 = (char *)v21 + v1[14];
  char *v21 = 9;
  *(void *)v22 = "departure_gate";
  *((void *)v22 + 1) = 14;
  v22[16] = 2;
  v7();
  uint64_t v23 = (void *)(v56 + v3 + 9 * v2);
  long long v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)long long v24 = "departure_gate_closed";
  *((void *)v24 + 1) = 21;
  v24[16] = 2;
  v7();
  long long v25 = (void *)(v56 + v3 + 10 * v2);
  v26 = (char *)v25 + v1[14];
  *long long v25 = 11;
  *(void *)v26 = "departure_runway";
  *((void *)v26 + 1) = 16;
  v26[16] = 2;
  v7();
  uint64_t v27 = (void *)(v56 + v3 + 11 * v2);
  v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)v28 = "is_taxiing";
  *((void *)v28 + 1) = 10;
  v28[16] = 2;
  v7();
  v29 = (void *)(v56 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  char *v29 = 13;
  *(void *)uint64_t v30 = "departure_airport";
  *((void *)v30 + 1) = 17;
  v30[16] = 2;
  v7();
  uint64_t v31 = (void *)(v56 + v3 + 13 * v2);
  long long v32 = (char *)v31 + v1[14];
  *uint64_t v31 = 14;
  *(void *)long long v32 = "arrival_published_time";
  *((void *)v32 + 1) = 22;
  v32[16] = 2;
  v7();
  v33 = (void *)(v56 + v3 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  int *v33 = 15;
  *(void *)uint64_t v34 = "arrival_actual_time";
  *((void *)v34 + 1) = 19;
  v34[16] = 2;
  v7();
  v35 = (void *)(v56 + v3 + 15 * v2);
  v36 = (char *)v35 + v1[14];
  char *v35 = 16;
  *(void *)v36 = "arrival_terminal";
  *((void *)v36 + 1) = 16;
  v36[16] = 2;
  v7();
  uint64_t v37 = (void *)(v56 + v3 + 16 * v2);
  uint64_t v38 = (char *)v37 + v1[14];
  *uint64_t v37 = 17;
  *(void *)uint64_t v38 = "arrival_gate";
  *((void *)v38 + 1) = 12;
  v38[16] = 2;
  v7();
  long long v39 = (void *)(v56 + v3 + 17 * v2);
  v40 = (char *)v39 + v1[14];
  *long long v39 = 18;
  *(void *)v40 = "gate_arrival";
  *((void *)v40 + 1) = 12;
  v40[16] = 2;
  v7();
  uint64_t v41 = (void *)(v56 + v3 + 18 * v2);
  v42 = (char *)v41 + v1[14];
  *uint64_t v41 = 19;
  *(void *)v42 = "arrival_runway";
  *((void *)v42 + 1) = 14;
  v42[16] = 2;
  v7();
  v43 = (void *)(v56 + v3 + 19 * v2);
  uint64_t v44 = (char *)v43 + v1[14];
  char *v43 = 20;
  *(void *)uint64_t v44 = "arrival_airport";
  *((void *)v44 + 1) = 15;
  v44[16] = 2;
  v7();
  uint64_t v45 = (void *)(v56 + v3 + 20 * v2);
  long long v46 = (char *)v45 + v1[14];
  *uint64_t v45 = 21;
  *(void *)long long v46 = "baggage_claim";
  *((void *)v46 + 1) = 13;
  v46[16] = 2;
  v7();
  long long v47 = (void *)(v56 + v3 + 21 * v2);
  uint64_t v48 = (char *)v47 + v1[14];
  *long long v47 = 22;
  *(void *)uint64_t v48 = "updated_at";
  *((void *)v48 + 1) = 10;
  v48[16] = 2;
  v7();
  uint64_t v49 = (void *)(v56 + v3 + 22 * v2);
  v50 = (char *)v49 + v1[14];
  *uint64_t v49 = 23;
  *(void *)v50 = "diverted_airport";
  *((void *)v50 + 1) = 16;
  v50[16] = 2;
  v7();
  v51 = (void *)(v56 + v3 + 23 * v2);
  uint64_t v52 = (char *)v51 + v1[14];
  char *v51 = 24;
  *(void *)uint64_t v52 = "uid";
  *((void *)v52 + 1) = 3;
  v52[16] = 2;
  v7();
  uint64_t v53 = (void *)(v56 + v3 + 24 * v2);
  long long v54 = (char *)v53 + v1[14];
  *uint64_t v53 = 25;
  *(void *)long long v54 = "feed_update_time";
  *((void *)v54 + 1) = 16;
  v54[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t FlightSnippet._protobuf_nameMap.unsafeMutableAddressor()
{
  return FlightSnippet._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static FlightSnippet._protobuf_nameMap);
}

uint64_t static FlightSnippet._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static FlightSnippet._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, a1);
}

uint64_t FlightSnippet.decodeMessage<A>(decoder:)()
{
  uint64_t result = OUTLINED_FUNCTION_60_1();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in FlightSnippet.decodeMessage<A>(decoder:)();
          break;
        case 2:
        case 3:
          OUTLINED_FUNCTION_111_1();
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 4:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 5:
          OUTLINED_FUNCTION_111_1();
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 6:
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in FlightSnippet.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t FlightSnippet.traverse<A>(visitor:)()
{
  uint64_t result = closure #1 in FlightSnippet.traverse<A>(visitor:)(v0);
  if (!v1)
  {
    if (*(unsigned char *)v0 == 1) {
      OUTLINED_FUNCTION_102_0();
    }
    if (*(unsigned char *)(v0 + 1) == 1) {
      OUTLINED_FUNCTION_102_0();
    }
    OUTLINED_FUNCTION_11_5();
    if (v3) {
      OUTLINED_FUNCTION_32_3();
    }
    if (*(_DWORD *)(v0 + 24))
    {
      OUTLINED_FUNCTION_101_1();
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    if (*(void *)(v0 + 32))
    {
      OUTLINED_FUNCTION_101_1();
      dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
    }
    type metadata accessor for FlightSnippet(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in FlightSnippet.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Flight?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for FlightSnippet.Flight(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for FlightSnippet(0);
  _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0(a1 + *(int *)(v8 + 40), (uint64_t)v4, &demangling cache variable for type metadata for FlightSnippet.Flight?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v5) == 1) {
    return outlined destroy of SearchResult?((uint64_t)v4, &demangling cache variable for type metadata for FlightSnippet.Flight?);
  }
  outlined init with take of FlightSnippet.Flight();
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage((unint64_t *)&lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Flight);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of FlightSnippet.Flight((uint64_t)v7, (void (*)(void))type metadata accessor for FlightSnippet.Flight);
}

#error "257EE72E8: call analysis failed (funcsize=274)"

Swift::Int FlightSnippet.hashValue.getter()
{
  return FlightSnippet.hashValue.getter((void (*)(void))type metadata accessor for FlightSnippet, &lazy protocol witness table cache variable for type FlightSnippet and conformance FlightSnippet, (void (*)(uint64_t))type metadata accessor for FlightSnippet);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance FlightSnippet()
{
  return 0x6E53746867696C46;
}

uint64_t protocol witness for Message.isInitialized.getter in conformance FlightSnippet()
{
  return MEMORY[0x270F44C98]();
}

uint64_t protocol witness for Message.unknownFields.getter in conformance FlightSnippet@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance FlightSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance FlightSnippet())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance FlightSnippet()
{
  return FlightSnippet.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance FlightSnippet()
{
  return FlightSnippet.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.hash(into:) in conformance FlightSnippet()
{
  return MEMORY[0x270F44CD8]();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance FlightSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet and conformance FlightSnippet, (void (*)(uint64_t))type metadata accessor for FlightSnippet);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance FlightSnippet()
{
  return MEMORY[0x270F44AD8]();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet(&one-time initialization token for _protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FlightSnippet(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet and conformance FlightSnippet, (void (*)(uint64_t))type metadata accessor for FlightSnippet);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FlightSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet and conformance FlightSnippet, (void (*)(uint64_t))type metadata accessor for FlightSnippet);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t FlightSnippet.Status._protobuf_nameMap.unsafeMutableAddressor()
{
  return FlightSnippet._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static FlightSnippet.Status._protobuf_nameMap);
}

uint64_t static FlightSnippet.Status._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static FlightSnippet._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet.Status@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet(&one-time initialization token for _protobuf_nameMap, a1);
}

void *FlightSnippet.Flight.protoMessageName.unsafeMutableAddressor()
{
  return &static FlightSnippet.Flight.protoMessageName;
}

unint64_t static FlightSnippet.Flight.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_91_1(20);
}

uint64_t FlightSnippet.Flight._protobuf_nameMap.unsafeMutableAddressor()
{
  return FlightSnippet._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static FlightSnippet.Flight._protobuf_nameMap);
}

uint64_t static FlightSnippet.Flight._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static FlightSnippet._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, a1);
}

uint64_t one-time initialization function for defaultInstance()
{
  type metadata accessor for FlightSnippet.Flight._StorageClass();
  OUTLINED_FUNCTION_5_3();
  uint64_t result = FlightSnippet.Flight._StorageClass.init()();
  static FlightSnippet.Flight._StorageClass.defaultInstance = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for FlightSnippet.Leg._StorageClass(0);
  swift_allocObject();
  uint64_t result = FlightSnippet.Leg._StorageClass.init()();
  static FlightSnippet.Leg._StorageClass.defaultInstance = result;
  return result;
}

uint64_t type metadata accessor for FlightSnippet.Flight._StorageClass()
{
  return self;
}

uint64_t FlightSnippet.Flight._StorageClass.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0xE000000000000000;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0xE000000000000000;
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = 0xE000000000000000;
  *(void *)(v0 + 80) = 0;
  *(void *)(v0 + 88) = 0xE000000000000000;
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 104) = 0xE000000000000000;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = 0xE000000000000000;
  *(void *)(v0 + 128) = 0;
  *(void *)(v0 + 136) = 0xE000000000000000;
  *(void *)(v0 + 144) = 0;
  *(void *)(v0 + 152) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 160) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 168) = v2;
  *(_DWORD *)(v0 + 176) = 0;
  *(void *)(v0 + 184) = 0;
  *(void *)(v0 + 192) = 0xE000000000000000;
  *(void *)(v0 + 200) = 0;
  *(void *)(v0 + 208) = 0xE000000000000000;
  *(void *)(v0 + 216) = 0;
  *(void *)(v0 + 224) = 0xE000000000000000;
  *(_DWORD *)(v0 + 248) = 0;
  *(void *)(v0 + 232) = 0;
  *(void *)(v0 + 240) = 0;
  *(void *)(v0 + 256) = v2;
  *(void *)(v0 + 264) = v2;
  return result;
}

uint64_t FlightSnippet.Flight._StorageClass.init(copying:)(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0xE000000000000000;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 40) = 0xE000000000000000;
  *(void *)(v1 + 56) = 0xE000000000000000;
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 72) = 0xE000000000000000;
  *(void *)(v1 + 80) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 88) = 0xE000000000000000;
  *(void *)(v1 + 104) = 0xE000000000000000;
  *(void *)(v1 + 112) = 0;
  *(void *)(v1 + 120) = 0xE000000000000000;
  *(void *)(v1 + 128) = 0;
  *(void *)(v1 + 152) = 0;
  *(void *)(v1 + 136) = 0xE000000000000000;
  *(void *)(v1 + 144) = 0;
  uint64_t v3 = MEMORY[0x263F8EE78];
  *(void *)(v1 + 160) = MEMORY[0x263F8EE78];
  *(void *)(v1 + 168) = v3;
  *(_DWORD *)(v1 + 176) = 0;
  *(void *)(v1 + 184) = 0;
  *(void *)(v1 + 192) = 0xE000000000000000;
  *(void *)(v1 + 200) = 0;
  *(void *)(v1 + 208) = 0xE000000000000000;
  *(void *)(v1 + 216) = 0;
  *(void *)(v1 + 224) = 0xE000000000000000;
  *(_DWORD *)(v1 + 248) = 0;
  *(void *)(v1 + 240) = 0;
  *(void *)(v1 + 256) = v3;
  *(void *)(v1 + 264) = v3;
  *(void *)(v1 + 232) = 0;
  swift_beginAccess();
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  swift_beginAccess();
  *(void *)(v1 + 16) = v4;
  *(void *)(v1 + 24) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  swift_beginAccess();
  *(void *)(v1 + 32) = v6;
  *(void *)(v1 + 40) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  swift_beginAccess();
  *(void *)(v1 + 48) = v8;
  *(void *)(v1 + 56) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  swift_beginAccess();
  *(void *)(v1 + 64) = v10;
  *(void *)(v1 + 72) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v13 = *(void *)(a1 + 88);
  swift_beginAccess();
  *(void *)(v1 + 80) = v12;
  *(void *)(v1 + 88) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v14 = *(void *)(a1 + 96);
  uint64_t v15 = *(void *)(a1 + 104);
  swift_beginAccess();
  *(void *)(v1 + 96) = v14;
  *(void *)(v1 + 104) = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v17 = *(void *)(a1 + 112);
  uint64_t v16 = *(void *)(a1 + 120);
  swift_beginAccess();
  *(void *)(v1 + 112) = v17;
  *(void *)(v1 + 120) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v19 = *(void *)(a1 + 128);
  uint64_t v18 = *(void *)(a1 + 136);
  swift_beginAccess();
  *(void *)(v1 + 128) = v19;
  *(void *)(v1 + 136) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v20 = *(void *)(a1 + 144);
  swift_beginAccess();
  *(void *)(v1 + 144) = v20;
  swift_beginAccess();
  uint64_t v21 = *(void *)(a1 + 152);
  swift_beginAccess();
  *(void *)(v1 + 152) = v21;
  swift_beginAccess();
  uint64_t v22 = *(void *)(a1 + 160);
  swift_beginAccess();
  *(void *)(v1 + 160) = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v23 = *(void *)(a1 + 168);
  swift_beginAccess();
  *(void *)(v1 + 168) = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  LODWORD(v23) = *(_DWORD *)(a1 + 176);
  swift_beginAccess();
  *(_DWORD *)(v1 + 176) = v23;
  swift_beginAccess();
  uint64_t v25 = *(void *)(a1 + 184);
  uint64_t v24 = *(void *)(a1 + 192);
  swift_beginAccess();
  *(void *)(v1 + 184) = v25;
  *(void *)(v1 + 192) = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v27 = *(void *)(a1 + 200);
  uint64_t v26 = *(void *)(a1 + 208);
  swift_beginAccess();
  *(void *)(v1 + 200) = v27;
  *(void *)(v1 + 208) = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v29 = *(void *)(a1 + 216);
  uint64_t v28 = *(void *)(a1 + 224);
  swift_beginAccess();
  *(void *)(v1 + 216) = v29;
  *(void *)(v1 + 224) = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v30 = *(void *)(a1 + 232);
  swift_beginAccess();
  *(void *)(v1 + 232) = v30;
  swift_beginAccess();
  LODWORD(v30) = *(_DWORD *)(a1 + 240);
  swift_beginAccess();
  *(_DWORD *)(v1 + 240) = v30;
  swift_beginAccess();
  LODWORD(v30) = *(_DWORD *)(a1 + 244);
  swift_beginAccess();
  *(_DWORD *)(v1 + 244) = v30;
  swift_beginAccess();
  LODWORD(v30) = *(_DWORD *)(a1 + 248);
  swift_beginAccess();
  *(_DWORD *)(v1 + 248) = v30;
  swift_beginAccess();
  uint64_t v31 = *(void *)(a1 + 256);
  swift_beginAccess();
  *(void *)(v1 + 256) = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v32 = *(void *)(a1 + 264);
  swift_bridgeObjectRetain();
  swift_release();
  swift_beginAccess();
  *(void *)(v1 + 264) = v32;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t type metadata accessor for FlightSnippet.Airport(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for FlightSnippet.Airport);
}

uint64_t type metadata accessor for FlightSnippet.FlightInfo(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for FlightSnippet.FlightInfo);
}

uint64_t type metadata accessor for FlightSnippet.Leg(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for FlightSnippet.Leg);
}

uint64_t type metadata accessor for FlightSnippet.Leg._StorageClass(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for FlightSnippet.Leg._StorageClass);
}

uint64_t FlightSnippet.Flight._StorageClass.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FlightSnippet.Flight._StorageClass.__deallocating_deinit()
{
  uint64_t v0 = FlightSnippet.Flight._StorageClass.deinit();
  return MEMORY[0x270FA0228](v0, 272, 7);
}

uint64_t FlightSnippet.Flight.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FlightSnippet.Flight.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))FlightSnippet.Flight._uniqueStorage(), (void (*)(uint64_t))type metadata accessor for FlightSnippet.Flight, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        closure #1 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 4:
        closure #4 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 5:
        closure #5 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 6:
        closure #6 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 7:
        closure #7 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 8:
        closure #8 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 9:
        closure #9 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 10:
        closure #10 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 11:
        closure #11 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 12:
        closure #12 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 13:
        closure #13 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 14:
        closure #14 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 15:
        closure #15 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 16:
        closure #16 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 20:
        closure #17 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 21:
        closure #18 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 22:
        closure #19 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 23:
        closure #20 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 24:
        closure #21 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 25:
        closure #22 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t closure #1 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #3 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #6 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #7 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #8 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #9 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #10 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #11 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #12 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #13 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #14 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #15 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #16 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #17 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #18 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #19 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #20 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #21 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #22 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t FlightSnippet.Flight.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FlightSnippet.Flight.traverse<A>(visitor:)(a1, a2, a3, (uint64_t)type metadata accessor for FlightSnippet.Flight, (void (*)(void))closure #1 in FlightSnippet.Flight.traverse<A>(visitor:));
}

uint64_t closure #1 in FlightSnippet.Flight.traverse<A>(visitor:)(uint64_t a1)
{
  swift_beginAccess();
  unint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    uint64_t v4 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  unint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v6 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFLL;
  }
  if (v6)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  unint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v8 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFLL;
  }
  if (v8)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  unint64_t v9 = *(void *)(a1 + 72);
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0) {
    uint64_t v10 = *(void *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
  }
  if (v10)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  unint64_t v11 = *(void *)(a1 + 88);
  uint64_t v12 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0) {
    uint64_t v12 = *(void *)(a1 + 80) & 0xFFFFFFFFFFFFLL;
  }
  if (v12)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  unint64_t v13 = *(void *)(a1 + 104);
  uint64_t v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0) {
    uint64_t v14 = *(void *)(a1 + 96) & 0xFFFFFFFFFFFFLL;
  }
  if (v14)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  unint64_t v15 = *(void *)(a1 + 120);
  uint64_t v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0) {
    uint64_t v16 = *(void *)(a1 + 112) & 0xFFFFFFFFFFFFLL;
  }
  if (v16)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (!v1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_36:
  swift_beginAccess();
  unint64_t v17 = *(void *)(a1 + 136);
  uint64_t v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0) {
    uint64_t v18 = *(void *)(a1 + 128) & 0xFFFFFFFFFFFFLL;
  }
  if (v18)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  if (!*(void *)(a1 + 144) || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
  {
    swift_beginAccess();
    if (!*(void *)(a1 + 152)
      || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
    {
      swift_beginAccess();
      if (*(void *)(*(void *)(a1 + 160) + 16))
      {
        type metadata accessor for FlightSnippet.Leg(0);
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.Leg and conformance FlightSnippet.Leg, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Leg);
        swift_bridgeObjectRetain();
        dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
        if (v1) {
          return swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
      }
      swift_beginAccess();
      if (!*(void *)(*(void *)(a1 + 168) + 16)
        || (type metadata accessor for FlightSnippet.FlightInfo(0),
            lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.FlightInfo and conformance FlightSnippet.FlightInfo, (void (*)(uint64_t))type metadata accessor for FlightSnippet.FlightInfo), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), uint64_t result = swift_bridgeObjectRelease(), !v1))
      {
        swift_beginAccess();
        if (!*(_DWORD *)(a1 + 176)
          || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
        {
          swift_beginAccess();
          unint64_t v20 = *(void *)(a1 + 192);
          uint64_t v21 = HIBYTE(v20) & 0xF;
          if ((v20 & 0x2000000000000000) == 0) {
            uint64_t v21 = *(void *)(a1 + 184) & 0xFFFFFFFFFFFFLL;
          }
          if (!v21
            || (swift_bridgeObjectRetain(),
                dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
                uint64_t result = swift_bridgeObjectRelease(),
                !v1))
          {
            swift_beginAccess();
            unint64_t v22 = *(void *)(a1 + 208);
            uint64_t v23 = HIBYTE(v22) & 0xF;
            if ((v22 & 0x2000000000000000) == 0) {
              uint64_t v23 = *(void *)(a1 + 200) & 0xFFFFFFFFFFFFLL;
            }
            if (!v23
              || (swift_bridgeObjectRetain(),
                  dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
                  uint64_t result = swift_bridgeObjectRelease(),
                  !v1))
            {
              swift_beginAccess();
              unint64_t v24 = *(void *)(a1 + 224);
              uint64_t v25 = HIBYTE(v24) & 0xF;
              if ((v24 & 0x2000000000000000) == 0) {
                uint64_t v25 = *(void *)(a1 + 216) & 0xFFFFFFFFFFFFLL;
              }
              if (!v25
                || (swift_bridgeObjectRetain(),
                    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
                    uint64_t result = swift_bridgeObjectRelease(),
                    !v1))
              {
                swift_beginAccess();
                if (!*(void *)(a1 + 232)
                  || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
                {
                  swift_beginAccess();
                  if (!*(_DWORD *)(a1 + 240)
                    || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
                  {
                    swift_beginAccess();
                    if (!*(_DWORD *)(a1 + 244)
                      || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
                    {
                      swift_beginAccess();
                      if (!*(_DWORD *)(a1 + 248)
                        || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
                      {
                        swift_beginAccess();
                        if (!*(void *)(*(void *)(a1 + 256) + 16)
                          || (swift_bridgeObjectRetain(),
                              dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(),
                              uint64_t result = swift_bridgeObjectRelease(),
                              !v1))
                        {
                          uint64_t result = swift_beginAccess();
                          if (*(void *)(*(void *)(a1 + 264) + 16))
                          {
                            swift_bridgeObjectRetain();
                            dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)();
                            return swift_bridgeObjectRelease();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void static FlightSnippet.Flight.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  static FlightSnippet.Flight.== infix(_:_:)(a1, a2, (uint64_t)type metadata accessor for FlightSnippet.Flight, (uint64_t)closure #1 in static FlightSnippet.Flight.== infix(_:_:), a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

{
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t (*v27)(uint64_t);
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void (*v41)(char *, uint64_t, uint64_t);
  void (*v42)(uint64_t);
  uint64_t v43;

  OUTLINED_FUNCTION_104_0();
  a19 = v23;
  a20 = v24;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v29 = OUTLINED_FUNCTION_88_1();
  OUTLINED_FUNCTION_1();
  uint64_t v31 = v30;
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_63_1();
  MEMORY[0x270FA5388](v33);
  v35 = (char *)&a9 - v34;
  v36 = OUTLINED_FUNCTION_77_1();
  uint64_t v37 = *(int *)(v28(v36) + 20);
  uint64_t v38 = *(void *)(v22 + v37);
  long long v39 = *(void *)(v21 + v37);
  if (v38 == v39
    || (swift_retain(), swift_retain(), v40 = v26(v38, v39), swift_release(), swift_release(), (v40 & 1) != 0))
  {
    uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
    v41(v35, v22, v29);
    v41(v20, v21, v29);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    OUTLINED_FUNCTION_74_1();
    v42 = *(void (**)(uint64_t))(v31 + 8);
    v43 = OUTLINED_FUNCTION_79_0();
    v42(v43);
    ((void (*)(char *, uint64_t))v42)(v35, v29);
  }
  OUTLINED_FUNCTION_119_0();
}

uint64_t closure #1 in static FlightSnippet.Flight.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  swift_beginAccess();
  BOOL v6 = v4 == *(void *)(a2 + 16) && v5 == *(void *)(a2 + 24);
  if (v6 || (char v7 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    swift_beginAccess();
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    swift_beginAccess();
    BOOL v10 = v8 == *(void *)(a2 + 32) && v9 == *(void *)(a2 + 40);
    if (v10 || (char v7 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      swift_beginAccess();
      uint64_t v11 = *(void *)(a1 + 48);
      uint64_t v12 = *(void *)(a1 + 56);
      swift_beginAccess();
      BOOL v13 = v11 == *(void *)(a2 + 48) && v12 == *(void *)(a2 + 56);
      if (v13 || (char v7 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        swift_beginAccess();
        uint64_t v14 = *(void *)(a1 + 64);
        uint64_t v15 = *(void *)(a1 + 72);
        swift_beginAccess();
        BOOL v16 = v14 == *(void *)(a2 + 64) && v15 == *(void *)(a2 + 72);
        if (v16 || (char v7 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          swift_beginAccess();
          uint64_t v17 = *(void *)(a1 + 80);
          uint64_t v18 = *(void *)(a1 + 88);
          swift_beginAccess();
          BOOL v19 = v17 == *(void *)(a2 + 80) && v18 == *(void *)(a2 + 88);
          if (v19 || (char v7 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
          {
            swift_beginAccess();
            uint64_t v20 = *(void *)(a1 + 96);
            uint64_t v21 = *(void *)(a1 + 104);
            swift_beginAccess();
            BOOL v22 = v20 == *(void *)(a2 + 96) && v21 == *(void *)(a2 + 104);
            if (v22 || (char v7 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
            {
              swift_beginAccess();
              uint64_t v23 = *(void *)(a1 + 112);
              uint64_t v24 = *(void *)(a1 + 120);
              swift_beginAccess();
              BOOL v25 = v23 == *(void *)(a2 + 112) && v24 == *(void *)(a2 + 120);
              if (v25 || (char v7 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
              {
                swift_beginAccess();
                uint64_t v26 = *(void *)(a1 + 128);
                uint64_t v27 = *(void *)(a1 + 136);
                swift_beginAccess();
                BOOL v28 = v26 == *(void *)(a2 + 128) && v27 == *(void *)(a2 + 136);
                if (v28 || (char v7 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
                {
                  swift_beginAccess();
                  uint64_t v29 = *(void *)(a1 + 144);
                  swift_beginAccess();
                  if (v29 == *(void *)(a2 + 144))
                  {
                    swift_beginAccess();
                    uint64_t v30 = *(void *)(a1 + 152);
                    swift_beginAccess();
                    if (v30 == *(void *)(a2 + 152))
                    {
                      swift_beginAccess();
                      swift_beginAccess();
                      swift_retain();
                      swift_retain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      specialized static Array<A>.== infix(_:_:)();
                      char v32 = v31;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v32 & 1) == 0) {
                        goto LABEL_68;
                      }
                      swift_beginAccess();
                      swift_beginAccess();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      specialized static Array<A>.== infix(_:_:)();
                      char v34 = v33;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v34 & 1) == 0) {
                        goto LABEL_68;
                      }
                      swift_beginAccess();
                      int v35 = *(_DWORD *)(a1 + 176);
                      swift_beginAccess();
                      if (v35 != *(_DWORD *)(a2 + 176)) {
                        goto LABEL_68;
                      }
                      swift_beginAccess();
                      uint64_t v36 = *(void *)(a1 + 184);
                      uint64_t v37 = *(void *)(a1 + 192);
                      swift_beginAccess();
                      if (v36 != *(void *)(a2 + 184) || v37 != *(void *)(a2 + 192))
                      {
                        char v7 = 0;
                        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                          goto LABEL_69;
                        }
                      }
                      swift_beginAccess();
                      uint64_t v39 = *(void *)(a1 + 200);
                      uint64_t v40 = *(void *)(a1 + 208);
                      swift_beginAccess();
                      if (v39 != *(void *)(a2 + 200) || v40 != *(void *)(a2 + 208))
                      {
                        char v7 = 0;
                        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                          goto LABEL_69;
                        }
                      }
                      swift_beginAccess();
                      uint64_t v42 = *(void *)(a1 + 216);
                      uint64_t v43 = *(void *)(a1 + 224);
                      swift_beginAccess();
                      if (v42 != *(void *)(a2 + 216) || v43 != *(void *)(a2 + 224))
                      {
                        char v7 = 0;
                        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                          goto LABEL_69;
                        }
                      }
                      swift_beginAccess();
                      uint64_t v45 = *(void *)(a1 + 232);
                      swift_beginAccess();
                      if (v45 != *(void *)(a2 + 232)) {
                        goto LABEL_68;
                      }
                      swift_beginAccess();
                      int v46 = *(_DWORD *)(a1 + 240);
                      swift_beginAccess();
                      if (v46 != *(_DWORD *)(a2 + 240)) {
                        goto LABEL_68;
                      }
                      swift_beginAccess();
                      int v47 = *(_DWORD *)(a1 + 244);
                      swift_beginAccess();
                      if (v47 != *(_DWORD *)(a2 + 244)) {
                        goto LABEL_68;
                      }
                      swift_beginAccess();
                      int v48 = *(_DWORD *)(a1 + 248);
                      swift_beginAccess();
                      if (v48 == *(_DWORD *)(a2 + 248)
                        && (swift_beginAccess(),
                            uint64_t v49 = *(void *)(a1 + 256),
                            swift_beginAccess(),
                            (specialized static Array<A>.== infix(_:_:)(v49, *(void *)(a2 + 256)) & 1) != 0))
                      {
                        swift_beginAccess();
                        uint64_t v50 = *(void *)(a1 + 264);
                        swift_beginAccess();
                        char v7 = specialized static Array<A>.== infix(_:_:)(v50, *(void *)(a2 + 264));
                      }
                      else
                      {
LABEL_68:
                        char v7 = 0;
                      }
LABEL_69:
                      swift_release();
                      swift_release();
                      return v7 & 1;
                    }
                  }
                  char v7 = 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return v7 & 1;
}

Swift::Int FlightSnippet.Flight.hashValue.getter()
{
  return FlightSnippet.hashValue.getter((void (*)(void))type metadata accessor for FlightSnippet.Flight, &lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Flight);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance FlightSnippet.Flight()
{
  return 0xD000000000000014;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance FlightSnippet.Flight())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance FlightSnippet.Flight(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FlightSnippet.Flight.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance FlightSnippet.Flight(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FlightSnippet.Flight.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance FlightSnippet.Flight(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Flight);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet.Flight@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet(&one-time initialization token for _protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FlightSnippet.Flight(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage((unint64_t *)&lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Flight);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FlightSnippet.Flight(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage((unint64_t *)&lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Flight);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *FlightSnippet.Airport.protoMessageName.unsafeMutableAddressor()
{
  return &static FlightSnippet.Airport.protoMessageName;
}

unint64_t static FlightSnippet.Airport.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_91_1(21);
}

uint64_t FlightSnippet.Airport._protobuf_nameMap.unsafeMutableAddressor()
{
  return FlightSnippet._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static FlightSnippet.Airport._protobuf_nameMap);
}

uint64_t static FlightSnippet.Airport._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static FlightSnippet._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, a1);
}

uint64_t FlightSnippet.Airport.decodeMessage<A>(decoder:)()
{
  uint64_t result = OUTLINED_FUNCTION_60_1();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 6:
        case 7:
          OUTLINED_FUNCTION_111_1();
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t FlightSnippet.Airport.traverse<A>(visitor:)()
{
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_11_5();
  if (!v3 || (uint64_t result = OUTLINED_FUNCTION_32_3(), (v2 = v1) == 0))
  {
    OUTLINED_FUNCTION_11_5();
    if (!v5 || (uint64_t result = OUTLINED_FUNCTION_32_3(), (v2 = v1) == 0))
    {
      OUTLINED_FUNCTION_11_5();
      if (!v6 || (uint64_t result = OUTLINED_FUNCTION_32_3(), (v2 = v1) == 0))
      {
        OUTLINED_FUNCTION_11_5();
        if (!v7 || (uint64_t result = OUTLINED_FUNCTION_32_3(), (v2 = v1) == 0))
        {
          OUTLINED_FUNCTION_11_5();
          if (!v8 || (uint64_t result = OUTLINED_FUNCTION_32_3(), (v2 = v1) == 0))
          {
            if (*(double *)(v0 + 80) == 0.0
              || (v1 = v2, uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v2))
            {
              if (*(double *)(v0 + 88) == 0.0
                || (v1 = v2, uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v2))
              {
                OUTLINED_FUNCTION_11_5();
                if (!v9 || (uint64_t result = OUTLINED_FUNCTION_32_3(), !v1))
                {
                  OUTLINED_FUNCTION_11_5();
                  if (!v10 || (uint64_t result = OUTLINED_FUNCTION_32_3(), !v1))
                  {
                    OUTLINED_FUNCTION_11_5();
                    if (!v11 || (uint64_t result = OUTLINED_FUNCTION_32_3(), !v1))
                    {
                      OUTLINED_FUNCTION_11_5();
                      if (!v12 || (uint64_t result = OUTLINED_FUNCTION_32_3(), !v1))
                      {
                        OUTLINED_FUNCTION_11_5();
                        if (!v13 || (uint64_t result = OUTLINED_FUNCTION_32_3(), !v1))
                        {
                          OUTLINED_FUNCTION_11_5();
                          if (!v14 || (uint64_t result = OUTLINED_FUNCTION_32_3(), !v1))
                          {
                            OUTLINED_FUNCTION_11_5();
                            if (!v15 || (uint64_t result = OUTLINED_FUNCTION_32_3(), !v1))
                            {
                              type metadata accessor for FlightSnippet.Airport(0);
                              OUTLINED_FUNCTION_114_1();
                              return UnknownStorage.traverse<A>(visitor:)();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void static FlightSnippet.Airport.== infix(_:_:)()
{
  OUTLINED_FUNCTION_145();
  uint64_t v4 = OUTLINED_FUNCTION_88_1();
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_63_1();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_79_1();
  BOOL v9 = v9 && v7 == v8;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    BOOL v10 = *(void *)(v2 + 16) == *(void *)(v1 + 16) && *(void *)(v2 + 24) == *(void *)(v1 + 24);
    if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      BOOL v11 = *(void *)(v2 + 32) == *(void *)(v1 + 32) && *(void *)(v2 + 40) == *(void *)(v1 + 40);
      if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        BOOL v12 = *(void *)(v2 + 48) == *(void *)(v1 + 48) && *(void *)(v2 + 56) == *(void *)(v1 + 56);
        if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          BOOL v13 = *(void *)(v2 + 64) == *(void *)(v1 + 64) && *(void *)(v2 + 72) == *(void *)(v1 + 72);
          if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)())
            && *(double *)(v2 + 80) == *(double *)(v1 + 80)
            && *(double *)(v2 + 88) == *(double *)(v1 + 88))
          {
            BOOL v14 = *(void *)(v2 + 96) == *(void *)(v1 + 96) && *(void *)(v2 + 104) == *(void *)(v1 + 104);
            if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              BOOL v15 = *(void *)(v2 + 112) == *(void *)(v1 + 112) && *(void *)(v2 + 120) == *(void *)(v1 + 120);
              if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                BOOL v16 = *(void *)(v2 + 128) == *(void *)(v1 + 128) && *(void *)(v2 + 136) == *(void *)(v1 + 136);
                if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  BOOL v17 = *(void *)(v2 + 144) == *(void *)(v1 + 144) && *(void *)(v2 + 152) == *(void *)(v1 + 152);
                  if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    BOOL v18 = *(void *)(v2 + 160) == *(void *)(v1 + 160)
                       && *(void *)(v2 + 168) == *(void *)(v1 + 168);
                    if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      BOOL v19 = *(void *)(v2 + 176) == *(void *)(v1 + 176)
                         && *(void *)(v2 + 184) == *(void *)(v1 + 184);
                      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      {
                        BOOL v20 = *(void *)(v2 + 192) == *(void *)(v1 + 192)
                           && *(void *)(v2 + 200) == *(void *)(v1 + 200);
                        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          type metadata accessor for FlightSnippet.Airport(0);
                          uint64_t v21 = OUTLINED_FUNCTION_72_0();
                          v3(v21);
                          uint64_t v22 = OUTLINED_FUNCTION_99_1();
                          v3(v22);
                          lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
                          OUTLINED_FUNCTION_74_1();
                          uint64_t v23 = OUTLINED_FUNCTION_86_1();
                          ((void (*)(uint64_t))v1)(v23);
                          ((void (*)(uint64_t, uint64_t))v1)(v0, v4);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  OUTLINED_FUNCTION_141_0();
}

Swift::Int FlightSnippet.Airport.hashValue.getter()
{
  return FlightSnippet.hashValue.getter((void (*)(void))type metadata accessor for FlightSnippet.Airport, &lazy protocol witness table cache variable for type FlightSnippet.Airport and conformance FlightSnippet.Airport, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Airport);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance FlightSnippet.Airport()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance FlightSnippet.Airport@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 72);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance FlightSnippet.Airport(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 72);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance FlightSnippet.Airport())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance FlightSnippet.Airport()
{
  return FlightSnippet.Airport.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance FlightSnippet.Airport()
{
  return FlightSnippet.Airport.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance FlightSnippet.Airport(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.Airport and conformance FlightSnippet.Airport, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Airport);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet.Airport@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet(&one-time initialization token for _protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FlightSnippet.Airport(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.Airport and conformance FlightSnippet.Airport, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Airport);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FlightSnippet.Airport(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.Airport and conformance FlightSnippet.Airport, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Airport);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *FlightSnippet.FlightInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static FlightSnippet.FlightInfo.protoMessageName;
}

unint64_t static FlightSnippet.FlightInfo.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_91_1(24);
}

uint64_t FlightSnippet.FlightInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return FlightSnippet._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static FlightSnippet.FlightInfo._protobuf_nameMap);
}

uint64_t static FlightSnippet.FlightInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static FlightSnippet._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, a1);
}

uint64_t FlightSnippet.FlightInfo.decodeMessage<A>(decoder:)()
{
  uint64_t result = OUTLINED_FUNCTION_60_1();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t FlightSnippet.FlightInfo.traverse<A>(visitor:)()
{
  OUTLINED_FUNCTION_11_5();
  if (!v1 || (uint64_t result = OUTLINED_FUNCTION_48_2(), !v0))
  {
    OUTLINED_FUNCTION_11_5();
    if (!v3 || (uint64_t result = OUTLINED_FUNCTION_48_2(), !v0))
    {
      OUTLINED_FUNCTION_11_5();
      if (!v4 || (uint64_t result = OUTLINED_FUNCTION_48_2(), !v0))
      {
        OUTLINED_FUNCTION_11_5();
        if (!v5 || (uint64_t result = OUTLINED_FUNCTION_48_2(), !v0))
        {
          type metadata accessor for FlightSnippet.FlightInfo(0);
          OUTLINED_FUNCTION_114_1();
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

void static FlightSnippet.FlightInfo.== infix(_:_:)()
{
  OUTLINED_FUNCTION_145();
  uint64_t v4 = OUTLINED_FUNCTION_88_1();
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_63_1();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_79_1();
  BOOL v9 = v9 && v7 == v8;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    BOOL v10 = v2[2] == *(void *)(v1 + 16) && v2[3] == *(void *)(v1 + 24);
    if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      BOOL v11 = v2[4] == *(void *)(v1 + 32) && v2[5] == *(void *)(v1 + 40);
      if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        BOOL v12 = v2[6] == *(void *)(v1 + 48) && v2[7] == *(void *)(v1 + 56);
        if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          type metadata accessor for FlightSnippet.FlightInfo(0);
          uint64_t v13 = OUTLINED_FUNCTION_72_0();
          v3(v13);
          uint64_t v14 = OUTLINED_FUNCTION_99_1();
          v3(v14);
          lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
          OUTLINED_FUNCTION_74_1();
          uint64_t v15 = OUTLINED_FUNCTION_86_1();
          ((void (*)(uint64_t))v1)(v15);
          ((void (*)(uint64_t, uint64_t))v1)(v0, v4);
        }
      }
    }
  }
  OUTLINED_FUNCTION_141_0();
}

Swift::Int FlightSnippet.FlightInfo.hashValue.getter()
{
  return FlightSnippet.hashValue.getter((void (*)(void))type metadata accessor for FlightSnippet.FlightInfo, &lazy protocol witness table cache variable for type FlightSnippet.FlightInfo and conformance FlightSnippet.FlightInfo, (void (*)(uint64_t))type metadata accessor for FlightSnippet.FlightInfo);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance FlightSnippet.FlightInfo()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance FlightSnippet.FlightInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance FlightSnippet.FlightInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance FlightSnippet.FlightInfo())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance FlightSnippet.FlightInfo()
{
  return FlightSnippet.FlightInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance FlightSnippet.FlightInfo()
{
  return FlightSnippet.FlightInfo.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance FlightSnippet.FlightInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.FlightInfo and conformance FlightSnippet.FlightInfo, (void (*)(uint64_t))type metadata accessor for FlightSnippet.FlightInfo);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet.FlightInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet(&one-time initialization token for _protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FlightSnippet.FlightInfo(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.FlightInfo and conformance FlightSnippet.FlightInfo, (void (*)(uint64_t))type metadata accessor for FlightSnippet.FlightInfo);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FlightSnippet.FlightInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.FlightInfo and conformance FlightSnippet.FlightInfo, (void (*)(uint64_t))type metadata accessor for FlightSnippet.FlightInfo);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *FlightSnippet.Leg.protoMessageName.unsafeMutableAddressor()
{
  return &static FlightSnippet.Leg.protoMessageName;
}

unint64_t static FlightSnippet.Leg.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_91_1(17);
}

uint64_t FlightSnippet.Leg._protobuf_nameMap.unsafeMutableAddressor()
{
  return FlightSnippet._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static FlightSnippet.Leg._protobuf_nameMap);
}

uint64_t FlightSnippet._protobuf_nameMap.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static FlightSnippet.Leg._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static FlightSnippet._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, a1);
}

uint64_t static FlightSnippet._protobuf_nameMap.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for _NameMap();
  OUTLINED_FUNCTION_115_0(v3);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 16);
  return v5(a2);
}

uint64_t FlightSnippet.Leg._StorageClass.init()()
{
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  *(_WORD *)(v0 + 25) = 0;
  *(unsigned char *)(v0 + 27) = 0;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0xE000000000000000;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = 0xE000000000000000;
  *(void *)(v0 + 80) = 0;
  *(void *)(v0 + 88) = 0xE000000000000000;
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 104) = 0;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__departureAirport;
  *(unsigned char *)(v0 + 112) = 0;
  uint64_t v2 = type metadata accessor for FlightSnippet.Airport(0);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  *(void *)(v0
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalPublishedTime) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalActualTime) = 0;
  uint64_t v3 = (void *)(v0
                + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalTerminal);
  *uint64_t v3 = 0;
  v3[1] = 0xE000000000000000;
  uint64_t v4 = (void *)(v0
                + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalGate);
  *uint64_t v4 = 0;
  v4[1] = 0xE000000000000000;
  *(void *)(v0
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__gateArrival) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalRunway) = 0;
  __swift_storeEnumTagSinglePayload(v0+ OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalAirport, 1, 1, v2);
  uint64_t v5 = (void *)(v0
                + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__baggageClaim);
  *uint64_t v5 = 0;
  v5[1] = 0xE000000000000000;
  *(void *)(v0
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__updatedAt) = 0;
  __swift_storeEnumTagSinglePayload(v0+ OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__divertedAirport, 1, 1, v2);
  uint64_t v6 = (void *)(v0
                + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__uid);
  *uint64_t v6 = 0;
  v6[1] = 0xE000000000000000;
  *(void *)(v0
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__feedUpdateTime) = 0;
  return v0;
}

uint64_t FlightSnippet.Leg._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v84 = (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 25) = 0;
  *(unsigned char *)(v1 + 24) = 1;
  *(unsigned char *)(v1 + 27) = 0;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 64) = 0;
  uint64_t v77 = (void *)(v1 + 64);
  *(void *)(v1 + 56) = 0;
  long long v76 = (void *)(v1 + 56);
  *(void *)(v1 + 48) = 0;
  uint64_t v74 = v1 + 26;
  uint64_t v75 = (void *)(v1 + 48);
  *(void *)(v1 + 40) = 0xE000000000000000;
  *(void *)(v1 + 72) = 0xE000000000000000;
  *(void *)(v1 + 80) = 0;
  v78 = (void *)(v1 + 80);
  *(void *)(v1 + 88) = 0xE000000000000000;
  *(unsigned char *)(v1 + 112) = 0;
  long long v81 = (unsigned char *)(v1 + 112);
  *(void *)(v1 + 104) = 0;
  uint64_t v80 = (void *)(v1 + 104);
  uint64_t v5 = v1
     + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__departureAirport;
  uint64_t v82 = v1
      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__departureAirport;
  *(void *)(v1 + 96) = 0;
  v79 = (void *)(v1 + 96);
  uint64_t v6 = type metadata accessor for FlightSnippet.Airport(0);
  __swift_storeEnumTagSinglePayload(v5, 1, 1, v6);
  uint64_t v83 = (void *)(v1
                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalPublishedTime);
  *(void *)(v1
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalPublishedTime) = 0;
  v85 = (void *)(v1
                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalActualTime);
  *(void *)(v1
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalActualTime) = 0;
  uint64_t v7 = (void *)(v1
                + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalTerminal);
  uint64_t v86 = (void *)(v1
                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalTerminal);
  *uint64_t v7 = 0;
  v7[1] = 0xE000000000000000;
  uint64_t v8 = (void *)(v1
                + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalGate);
  uint64_t v87 = (void *)(v1
                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalGate);
  *uint64_t v8 = 0;
  v8[1] = 0xE000000000000000;
  long long v88 = (void *)(v1
                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__gateArrival);
  *(void *)(v1
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__gateArrival) = 0;
  v89 = (void *)(v1
                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalRunway);
  *(void *)(v1
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalRunway) = 0;
  uint64_t v90 = v1
      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalAirport;
  __swift_storeEnumTagSinglePayload(v1+ OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalAirport, 1, 1, v6);
  BOOL v9 = (void *)(v1
                + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__baggageClaim);
  v91 = (void *)(v1
                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__baggageClaim);
  *BOOL v9 = 0;
  v9[1] = 0xE000000000000000;
  v92 = (void *)(v1
                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__updatedAt);
  *(void *)(v1
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__updatedAt) = 0;
  uint64_t v93 = v1
      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__divertedAirport;
  __swift_storeEnumTagSinglePayload(v1+ OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__divertedAirport, 1, 1, v6);
  BOOL v10 = (void *)(v1
                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__uid);
  long long v94 = (void *)(v1
                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__uid);
  void *v10 = 0;
  v10[1] = 0xE000000000000000;
  v95 = (void *)(v1
                 + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__feedUpdateTime);
  *(void *)(v1
            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__feedUpdateTime) = 0;
  swift_beginAccess();
  uint64_t v11 = *(void *)(a1 + 16);
  LOBYTE(v6) = *(unsigned char *)(a1 + 24);
  swift_beginAccess();
  *(void *)(v1 + 16) = v11;
  *(unsigned char *)(v1 + 24) = v6;
  swift_beginAccess();
  char v12 = *(unsigned char *)(a1 + 25);
  swift_beginAccess();
  *(unsigned char *)(v1 + 25) = v12;
  swift_beginAccess();
  char v13 = *(unsigned char *)(a1 + 26);
  swift_beginAccess();
  *(unsigned char *)(v1 + 26) = v13;
  swift_beginAccess();
  char v14 = *(unsigned char *)(a1 + 27);
  swift_beginAccess();
  *(unsigned char *)(v1 + 27) = v14;
  swift_beginAccess();
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  swift_beginAccess();
  *(void *)(v1 + 32) = v16;
  *(void *)(v1 + 40) = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v17 = *(void *)(a1 + 48);
  BOOL v18 = v75;
  swift_beginAccess();
  *BOOL v18 = v17;
  swift_beginAccess();
  uint64_t v19 = *(void *)(a1 + 56);
  BOOL v20 = v76;
  swift_beginAccess();
  void *v20 = v19;
  swift_beginAccess();
  uint64_t v22 = *(void *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 72);
  uint64_t v23 = v77;
  swift_beginAccess();
  *uint64_t v23 = v22;
  *(void *)(v1 + 72) = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v25 = *(void *)(a1 + 80);
  uint64_t v24 = *(void *)(a1 + 88);
  uint64_t v26 = v78;
  swift_beginAccess();
  void *v26 = v25;
  *(void *)(v1 + 88) = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v27 = *(void *)(a1 + 96);
  BOOL v28 = v79;
  swift_beginAccess();
  void *v28 = v27;
  swift_beginAccess();
  uint64_t v29 = *(void *)(a1 + 104);
  uint64_t v30 = v80;
  swift_beginAccess();
  *uint64_t v30 = v29;
  swift_beginAccess();
  LOBYTE(v29) = *(unsigned char *)(a1 + 112);
  char v31 = v81;
  swift_beginAccess();
  *char v31 = v29;
  uint64_t v32 = a1
      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__departureAirport;
  swift_beginAccess();
  uint64_t v33 = v84;
  _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0(v32, v84, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  uint64_t v34 = v82;
  swift_beginAccess();
  outlined assign with take of FlightSnippet.Airport?(v33, v34);
  swift_endAccess();
  int v35 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalPublishedTime);
  swift_beginAccess();
  uint64_t v36 = *v35;
  uint64_t v37 = v83;
  swift_beginAccess();
  *uint64_t v37 = v36;
  uint64_t v38 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalActualTime);
  swift_beginAccess();
  uint64_t v39 = *v38;
  uint64_t v40 = v85;
  swift_beginAccess();
  void *v40 = v39;
  uint64_t v41 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalTerminal);
  swift_beginAccess();
  uint64_t v43 = *v41;
  uint64_t v42 = v41[1];
  uint64_t v44 = v86;
  swift_beginAccess();
  *uint64_t v44 = v43;
  v44[1] = v42;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v45 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalGate);
  swift_beginAccess();
  uint64_t v47 = *v45;
  uint64_t v46 = v45[1];
  int v48 = v87;
  swift_beginAccess();
  *int v48 = v47;
  v48[1] = v46;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v49 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__gateArrival);
  swift_beginAccess();
  uint64_t v50 = *v49;
  v51 = v88;
  swift_beginAccess();
  void *v51 = v50;
  uint64_t v52 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalRunway);
  swift_beginAccess();
  uint64_t v53 = *v52;
  long long v54 = v89;
  swift_beginAccess();
  *long long v54 = v53;
  uint64_t v55 = a1
      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalAirport;
  swift_beginAccess();
  _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0(v55, v33, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  uint64_t v56 = v90;
  swift_beginAccess();
  outlined assign with take of FlightSnippet.Airport?(v33, v56);
  swift_endAccess();
  v57 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__baggageClaim);
  swift_beginAccess();
  uint64_t v59 = *v57;
  uint64_t v58 = v57[1];
  uint64_t v60 = v91;
  swift_beginAccess();
  *uint64_t v60 = v59;
  v60[1] = v58;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v61 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__updatedAt);
  swift_beginAccess();
  uint64_t v62 = *v61;
  v63 = v92;
  swift_beginAccess();
  void *v63 = v62;
  uint64_t v64 = a1
      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__divertedAirport;
  swift_beginAccess();
  _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0(v64, v33, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  uint64_t v65 = v93;
  swift_beginAccess();
  outlined assign with take of FlightSnippet.Airport?(v33, v65);
  swift_endAccess();
  v66 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__uid);
  swift_beginAccess();
  uint64_t v68 = *v66;
  uint64_t v67 = v66[1];
  long long v69 = v94;
  swift_beginAccess();
  *long long v69 = v68;
  v69[1] = v67;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v70 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__feedUpdateTime);
  swift_beginAccess();
  uint64_t v71 = *v70;
  swift_release();
  v72 = v95;
  swift_beginAccess();
  void *v72 = v71;
  return v1;
}

uint64_t _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_75_0();
  v4();
  return a2;
}

uint64_t outlined init with take of FlightSnippet.Flight()
{
  uint64_t v2 = OUTLINED_FUNCTION_106_1();
  v3(v2);
  OUTLINED_FUNCTION_7_2();
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v0, v1);
  return v0;
}

uint64_t outlined init with take of FlightSnippet.Airport?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of FlightSnippet.Airport?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of FlightSnippet.Flight()
{
  uint64_t v1 = OUTLINED_FUNCTION_106_1();
  v2(v1);
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_75_0();
  v3();
  return v0;
}

uint64_t outlined destroy of FlightSnippet.Flight(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_7_2();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t FlightSnippet.Leg._StorageClass.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of SearchResult?(v0+ OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__departureAirport, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of SearchResult?(v0+ OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalAirport, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  swift_bridgeObjectRelease();
  outlined destroy of SearchResult?(v0+ OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__divertedAirport, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FlightSnippet.Leg._StorageClass.__deallocating_deinit()
{
  uint64_t v0 = FlightSnippet.Leg._StorageClass.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t FlightSnippet.Leg.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FlightSnippet.Flight.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))FlightSnippet.Leg._uniqueStorage(), (void (*)(uint64_t))type metadata accessor for FlightSnippet.Leg, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:));
}

uint64_t FlightSnippet.Flight.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(uint64_t), void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  a4();
  swift_release();
  uint64_t v11 = OUTLINED_FUNCTION_77_1();
  a5(v11);
  OUTLINED_FUNCTION_58_2();
  uint64_t v12 = swift_retain();
  a6(v12, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        closure #1 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
        break;
      case 4:
        closure #4 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
        break;
      case 5:
        closure #2 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 6:
        closure #6 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
        break;
      case 7:
        closure #7 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
        break;
      case 8:
        closure #4 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 9:
        closure #5 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)();
        break;
      case 10:
        closure #10 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
        break;
      case 11:
        closure #11 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
        break;
      case 12:
        closure #12 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
        break;
      case 13:
      case 20:
      case 23:
        closure #13 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
        break;
      case 14:
      case 15:
      case 18:
      case 19:
      case 22:
      case 25:
        closure #14 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
        break;
      case 16:
      case 17:
      case 21:
      case 24:
        closure #16 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t closure #1 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #2 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #3 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #4 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #2 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  return OUTLINED_FUNCTION_82_1();
}

uint64_t closure #6 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #7 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #4 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  return OUTLINED_FUNCTION_82_1();
}

uint64_t closure #5 in closure #1 in FlightSnippet.Flight.decodeMessage<A>(decoder:)()
{
  return OUTLINED_FUNCTION_82_1();
}

uint64_t closure #10 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #11 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #12 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  return swift_endAccess();
}

uint64_t closure #13 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  return OUTLINED_FUNCTION_82_1();
}

uint64_t closure #16 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  return OUTLINED_FUNCTION_82_1();
}

uint64_t closure #14 in closure #1 in FlightSnippet.Leg.decodeMessage<A>(decoder:)()
{
  return OUTLINED_FUNCTION_82_1();
}

uint64_t FlightSnippet.Leg.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FlightSnippet.Flight.traverse<A>(visitor:)(a1, a2, a3, (uint64_t)type metadata accessor for FlightSnippet.Leg, (void (*)(void))closure #1 in FlightSnippet.Leg.traverse<A>(visitor:));
}

uint64_t FlightSnippet.Flight.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v7 = OUTLINED_FUNCTION_77_1();
  v8(v7);
  swift_retain();
  OUTLINED_FUNCTION_111_1();
  a5();
  uint64_t result = swift_release();
  if (!v5) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in FlightSnippet.Leg.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  if (!FlightSnippet.Status.rawValue.getter(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24))
    || (lazy protocol witness table accessor for type FlightSnippet.Status and conformance FlightSnippet.Status(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v4))
  {
    swift_beginAccess();
    if (*(unsigned char *)(a1 + 25) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v4))
    {
      swift_beginAccess();
      if (*(unsigned char *)(a1 + 26) != 1
        || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v4))
      {
        swift_beginAccess();
        if (*(unsigned char *)(a1 + 27) != 1
          || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v4))
        {
          swift_beginAccess();
          unint64_t v10 = *(void *)(a1 + 40);
          uint64_t v11 = HIBYTE(v10) & 0xF;
          if ((v10 & 0x2000000000000000) == 0) {
            uint64_t v11 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFLL;
          }
          if (v11)
          {
            swift_bridgeObjectRetain();
            dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
            if (v4) {
              return swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
          }
          swift_beginAccess();
          if (!*(void *)(a1 + 48)
            || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v4))
          {
            swift_beginAccess();
            if (!*(void *)(a1 + 56)
              || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v4))
            {
              swift_beginAccess();
              unint64_t v12 = *(void *)(a1 + 72);
              uint64_t v13 = HIBYTE(v12) & 0xF;
              if ((v12 & 0x2000000000000000) == 0) {
                uint64_t v13 = *(void *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
              }
              if (v13)
              {
                swift_bridgeObjectRetain();
                dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
                if (v4) {
                  return swift_bridgeObjectRelease();
                }
                swift_bridgeObjectRelease();
              }
              swift_beginAccess();
              unint64_t v14 = *(void *)(a1 + 88);
              uint64_t v15 = HIBYTE(v14) & 0xF;
              if ((v14 & 0x2000000000000000) == 0) {
                uint64_t v15 = *(void *)(a1 + 80) & 0xFFFFFFFFFFFFLL;
              }
              if (v15)
              {
                swift_bridgeObjectRetain();
                dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
                if (v4) {
                  return swift_bridgeObjectRelease();
                }
                swift_bridgeObjectRelease();
              }
              swift_beginAccess();
              if (!*(void *)(a1 + 96)
                || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v4))
              {
                swift_beginAccess();
                if (!*(void *)(a1 + 104)
                  || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v4))
                {
                  swift_beginAccess();
                  if (*(unsigned char *)(a1 + 112) != 1
                    || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v4))
                  {
                    uint64_t result = closure #1 in closure #1 in FlightSnippet.Leg.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__departureAirport);
                    if (!v4)
                    {
                      uint64_t v16 = (void *)(a1
                                     + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalPublishedTime);
                      swift_beginAccess();
                      if (*v16) {
                        dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
                      }
                      uint64_t v17 = (void *)(a1
                                     + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalActualTime);
                      swift_beginAccess();
                      if (*v17) {
                        dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
                      }
                      BOOL v18 = (uint64_t *)(a1
                                      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalTerminal);
                      swift_beginAccess();
                      uint64_t v19 = *v18;
                      unint64_t v20 = v18[1];
                      uint64_t v21 = HIBYTE(v20) & 0xF;
                      if ((v20 & 0x2000000000000000) == 0) {
                        uint64_t v21 = v19 & 0xFFFFFFFFFFFFLL;
                      }
                      if (v21)
                      {
                        swift_bridgeObjectRetain();
                        dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
                        swift_bridgeObjectRelease();
                      }
                      uint64_t v22 = (uint64_t *)(a1
                                      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalGate);
                      swift_beginAccess();
                      uint64_t v23 = *v22;
                      unint64_t v24 = v22[1];
                      uint64_t v25 = HIBYTE(v24) & 0xF;
                      if ((v24 & 0x2000000000000000) == 0) {
                        uint64_t v25 = v23 & 0xFFFFFFFFFFFFLL;
                      }
                      if (v25)
                      {
                        swift_bridgeObjectRetain();
                        dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
                        swift_bridgeObjectRelease();
                      }
                      uint64_t v26 = (void *)(a1
                                     + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__gateArrival);
                      swift_beginAccess();
                      if (*v26) {
                        dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
                      }
                      uint64_t v27 = (void *)(a1
                                     + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalRunway);
                      swift_beginAccess();
                      if (*v27) {
                        dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
                      }
                      closure #1 in closure #1 in FlightSnippet.Leg.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalAirport);
                      BOOL v28 = (uint64_t *)(a1
                                      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__baggageClaim);
                      swift_beginAccess();
                      uint64_t v29 = *v28;
                      unint64_t v30 = v28[1];
                      uint64_t v31 = HIBYTE(v30) & 0xF;
                      if ((v30 & 0x2000000000000000) == 0) {
                        uint64_t v31 = v29 & 0xFFFFFFFFFFFFLL;
                      }
                      if (v31)
                      {
                        swift_bridgeObjectRetain();
                        dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
                        swift_bridgeObjectRelease();
                      }
                      uint64_t v32 = (void *)(a1
                                     + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__updatedAt);
                      swift_beginAccess();
                      if (*v32) {
                        dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
                      }
                      closure #1 in closure #1 in FlightSnippet.Leg.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__divertedAirport);
                      uint64_t v33 = (uint64_t *)(a1
                                      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__uid);
                      swift_beginAccess();
                      uint64_t v34 = *v33;
                      unint64_t v35 = v33[1];
                      uint64_t v36 = HIBYTE(v35) & 0xF;
                      if ((v35 & 0x2000000000000000) == 0) {
                        uint64_t v36 = v34 & 0xFFFFFFFFFFFFLL;
                      }
                      if (v36)
                      {
                        swift_bridgeObjectRetain();
                        dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
                        swift_bridgeObjectRelease();
                      }
                      uint64_t v37 = (uint64_t *)(a1
                                      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__feedUpdateTime);
                      swift_beginAccess();
                      uint64_t result = *v37;
                      if (*v37) {
                        return dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in FlightSnippet.Leg.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  uint64_t v9 = OUTLINED_FUNCTION_81(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_97_1();
  uint64_t v10 = type metadata accessor for FlightSnippet.Airport(0);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_15();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = a1 + *a5;
  swift_beginAccess();
  _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0(v15, v5, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  if (__swift_getEnumTagSinglePayload(v5, 1, v10) == 1) {
    return outlined destroy of SearchResult?(v5, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  }
  outlined init with take of FlightSnippet.Flight();
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.Airport and conformance FlightSnippet.Airport, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Airport);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of FlightSnippet.Flight(v14, (void (*)(void))type metadata accessor for FlightSnippet.Airport);
}

void static FlightSnippet.Leg.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  static FlightSnippet.Flight.== infix(_:_:)(a1, a2, (uint64_t)type metadata accessor for FlightSnippet.Leg, (uint64_t)closure #1 in static FlightSnippet.Leg.== infix(_:_:), a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void closure #1 in static FlightSnippet.Leg.== infix(_:_:)()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v107 = type metadata accessor for FlightSnippet.Airport(0);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_15();
  uint64_t v105 = v7 - v6;
  uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (FlightSnippet.Airport?, FlightSnippet.Airport?));
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x270FA5388](v9);
  uint64_t v104 = (uint64_t)&v99 - v10;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v99 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  uint64_t v15 = OUTLINED_FUNCTION_81(v14);
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_185_0();
  uint64_t v102 = v16;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v17);
  uint64_t v103 = (uint64_t)&v99 - v18;
  OUTLINED_FUNCTION_113_1();
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v99 - v21;
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  uint64_t v25 = (char *)&v99 - v24;
  uint64_t v26 = MEMORY[0x270FA5388](v23);
  BOOL v28 = (char *)&v99 - v27;
  MEMORY[0x270FA5388](v26);
  unint64_t v30 = (char *)&v99 - v29;
  OUTLINED_FUNCTION_0_1();
  uint64_t v31 = *(void *)(v4 + 16);
  OUTLINED_FUNCTION_0_1();
  uint64_t v32 = *(void *)(v2 + 16);
  if (*(unsigned char *)(v2 + 24) == 1)
  {
    switch(v32)
    {
      case 1:
        if (v31 == 1) {
          goto LABEL_6;
        }
        break;
      case 2:
        if (v31 == 2) {
          goto LABEL_6;
        }
        break;
      case 3:
        if (v31 == 3) {
          goto LABEL_6;
        }
        break;
      case 4:
        if (v31 == 4) {
          goto LABEL_6;
        }
        break;
      case 5:
        if (v31 == 5) {
          goto LABEL_6;
        }
        break;
      case 6:
        if (v31 == 6) {
          goto LABEL_6;
        }
        break;
      case 7:
        if (v31 == 7) {
          goto LABEL_6;
        }
        break;
      case 8:
        if (v31 == 8) {
          goto LABEL_6;
        }
        break;
      default:
        if (!v31) {
          goto LABEL_6;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v31 != v32) {
    goto LABEL_49;
  }
LABEL_6:
  OUTLINED_FUNCTION_0_1();
  int v33 = *(unsigned __int8 *)(v4 + 25);
  OUTLINED_FUNCTION_0_1();
  if (v33 == *(unsigned __int8 *)(v2 + 25))
  {
    OUTLINED_FUNCTION_0_1();
    int v34 = *(unsigned __int8 *)(v4 + 26);
    OUTLINED_FUNCTION_0_1();
    if (v34 == *(unsigned __int8 *)(v2 + 26))
    {
      OUTLINED_FUNCTION_0_1();
      int v35 = *(unsigned __int8 *)(v4 + 27);
      OUTLINED_FUNCTION_0_1();
      if (v35 == *(unsigned __int8 *)(v2 + 27))
      {
        uint64_t v101 = v0;
        OUTLINED_FUNCTION_0_1();
        uint64_t v36 = *(void *)(v4 + 32);
        uint64_t v37 = *(void *)(v4 + 40);
        OUTLINED_FUNCTION_0_1();
        BOOL v38 = v36 == *(void *)(v2 + 32) && v37 == *(void *)(v2 + 40);
        if (v38 || (OUTLINED_FUNCTION_98_1() & 1) != 0)
        {
          OUTLINED_FUNCTION_0_1();
          uint64_t v39 = *(void *)(v4 + 48);
          OUTLINED_FUNCTION_0_1();
          if (v39 == *(void *)(v2 + 48))
          {
            OUTLINED_FUNCTION_0_1();
            uint64_t v40 = *(void *)(v4 + 56);
            OUTLINED_FUNCTION_0_1();
            if (v40 == *(void *)(v2 + 56))
            {
              OUTLINED_FUNCTION_0_1();
              uint64_t v41 = *(void *)(v4 + 64);
              uint64_t v42 = *(void *)(v4 + 72);
              OUTLINED_FUNCTION_0_1();
              BOOL v43 = v41 == *(void *)(v2 + 64) && v42 == *(void *)(v2 + 72);
              if (v43 || (OUTLINED_FUNCTION_98_1() & 1) != 0)
              {
                OUTLINED_FUNCTION_0_1();
                uint64_t v44 = *(void *)(v4 + 80);
                uint64_t v45 = *(void *)(v4 + 88);
                OUTLINED_FUNCTION_0_1();
                BOOL v46 = v44 == *(void *)(v2 + 80) && v45 == *(void *)(v2 + 88);
                if (v46 || (OUTLINED_FUNCTION_98_1() & 1) != 0)
                {
                  OUTLINED_FUNCTION_0_1();
                  uint64_t v47 = *(void *)(v4 + 96);
                  OUTLINED_FUNCTION_0_1();
                  if (v47 == *(void *)(v2 + 96))
                  {
                    OUTLINED_FUNCTION_0_1();
                    uint64_t v48 = *(void *)(v4 + 104);
                    OUTLINED_FUNCTION_0_1();
                    if (v48 == *(void *)(v2 + 104))
                    {
                      OUTLINED_FUNCTION_0_1();
                      int v49 = *(unsigned __int8 *)(v4 + 112);
                      OUTLINED_FUNCTION_0_1();
                      if (v49 == *(unsigned __int8 *)(v2 + 112))
                      {
                        uint64_t v50 = v4
                            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__departureAirport;
                        OUTLINED_FUNCTION_0_1();
                        _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0(v50, (uint64_t)v30, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                        uint64_t v51 = v2
                            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__departureAirport;
                        OUTLINED_FUNCTION_0_1();
                        uint64_t v52 = (uint64_t)&v13[*(int *)(v106 + 48)];
                        _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0((uint64_t)v30, (uint64_t)v13, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                        uint64_t v100 = v52;
                        _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0(v51, v52, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                        uint64_t v53 = v107;
                        OUTLINED_FUNCTION_53_2((uint64_t)v13, 1, v107);
                        if (v38)
                        {
                          swift_retain();
                          swift_retain();
                          outlined destroy of SearchResult?((uint64_t)v30, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                          OUTLINED_FUNCTION_53_2(v100, 1, v53);
                          if (v38)
                          {
                            outlined destroy of SearchResult?((uint64_t)v13, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                            goto LABEL_56;
                          }
                        }
                        else
                        {
                          _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0((uint64_t)v13, (uint64_t)v28, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                          OUTLINED_FUNCTION_53_2(v100, 1, v53);
                          if (!v54)
                          {
                            uint64_t v56 = v105;
                            outlined init with take of FlightSnippet.Flight();
                            swift_retain();
                            swift_retain();
                            static FlightSnippet.Airport.== infix(_:_:)();
                            LODWORD(v100) = v57;
                            outlined destroy of FlightSnippet.Flight(v56, (void (*)(void))type metadata accessor for FlightSnippet.Airport);
                            outlined destroy of SearchResult?((uint64_t)v30, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                            outlined destroy of FlightSnippet.Flight((uint64_t)v28, (void (*)(void))type metadata accessor for FlightSnippet.Airport);
                            outlined destroy of SearchResult?((uint64_t)v13, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                            if ((v100 & 1) == 0) {
                              goto LABEL_106;
                            }
LABEL_56:
                            OUTLINED_FUNCTION_0_1();
                            OUTLINED_FUNCTION_0_1();
                            OUTLINED_FUNCTION_100_1();
                            if (!v38) {
                              goto LABEL_106;
                            }
                            OUTLINED_FUNCTION_0_1();
                            OUTLINED_FUNCTION_0_1();
                            OUTLINED_FUNCTION_100_1();
                            if (!v38) {
                              goto LABEL_106;
                            }
                            uint64_t v58 = (uint64_t *)(v4
                                            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalTerminal);
                            OUTLINED_FUNCTION_0_1();
                            uint64_t v59 = *v58;
                            uint64_t v60 = v58[1];
                            long long v61 = (void *)(v2
                                           + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalTerminal);
                            OUTLINED_FUNCTION_0_1();
                            BOOL v62 = v59 == *v61 && v60 == v61[1];
                            if (!v62 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                              goto LABEL_106;
                            }
                            v63 = (uint64_t *)(v4
                                            + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalGate);
                            OUTLINED_FUNCTION_0_1();
                            uint64_t v64 = *v63;
                            uint64_t v65 = v63[1];
                            v66 = (void *)(v2
                                           + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalGate);
                            OUTLINED_FUNCTION_0_1();
                            BOOL v67 = v64 == *v66 && v65 == v66[1];
                            if (!v67 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                              goto LABEL_106;
                            }
                            OUTLINED_FUNCTION_0_1();
                            OUTLINED_FUNCTION_0_1();
                            OUTLINED_FUNCTION_100_1();
                            if (!v38) {
                              goto LABEL_106;
                            }
                            OUTLINED_FUNCTION_0_1();
                            OUTLINED_FUNCTION_0_1();
                            OUTLINED_FUNCTION_100_1();
                            if (!v38) {
                              goto LABEL_106;
                            }
                            uint64_t v68 = v4
                                + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalAirport;
                            OUTLINED_FUNCTION_0_1();
                            _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0(v68, (uint64_t)v25, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                            uint64_t v69 = v2
                                + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalAirport;
                            OUTLINED_FUNCTION_0_1();
                            uint64_t v70 = v104;
                            uint64_t v71 = v104 + *(int *)(v106 + 48);
                            _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0((uint64_t)v25, v104, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                            _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0(v69, v71, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                            OUTLINED_FUNCTION_53_2(v70, 1, v107);
                            if (v38)
                            {
                              outlined destroy of SearchResult?((uint64_t)v25, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                              OUTLINED_FUNCTION_53_2(v71, 1, v107);
                              if (v38)
                              {
                                outlined destroy of SearchResult?(v104, &demangling cache variable for type metadata for FlightSnippet.Airport?);
LABEL_84:
                                long long v76 = (uint64_t *)(v4
                                                + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__baggageClaim);
                                OUTLINED_FUNCTION_0_1();
                                uint64_t v77 = *v76;
                                uint64_t v78 = v76[1];
                                v79 = (void *)(v2
                                               + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__baggageClaim);
                                OUTLINED_FUNCTION_0_1();
                                BOOL v80 = v77 == *v79 && v78 == v79[1];
                                if (!v80 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                                  goto LABEL_106;
                                }
                                long long v81 = (uint64_t *)(v4
                                                + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__updatedAt);
                                OUTLINED_FUNCTION_0_1();
                                uint64_t v82 = *v81;
                                uint64_t v83 = (void *)(v2
                                               + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__updatedAt);
                                OUTLINED_FUNCTION_0_1();
                                if (v82 != *v83) {
                                  goto LABEL_106;
                                }
                                uint64_t v84 = v4
                                    + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__divertedAirport;
                                OUTLINED_FUNCTION_0_1();
                                uint64_t v85 = v103;
                                _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0(v84, v103, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                                uint64_t v86 = v2
                                    + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__divertedAirport;
                                OUTLINED_FUNCTION_0_1();
                                uint64_t v87 = v101;
                                uint64_t v88 = v101 + *(int *)(v106 + 48);
                                _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0(v85, v101, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                                _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0(v86, v88, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                                OUTLINED_FUNCTION_53_2(v87, 1, v107);
                                if (v38)
                                {
                                  outlined destroy of SearchResult?(v103, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                                  OUTLINED_FUNCTION_53_2(v88, 1, v107);
                                  if (v38)
                                  {
                                    outlined destroy of SearchResult?(v101, &demangling cache variable for type metadata for FlightSnippet.Airport?);
LABEL_100:
                                    long long v94 = (uint64_t *)(v4
                                                    + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__uid);
                                    OUTLINED_FUNCTION_0_1();
                                    uint64_t v95 = *v94;
                                    uint64_t v96 = v94[1];
                                    v97 = (void *)(v2
                                                   + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__uid);
                                    OUTLINED_FUNCTION_0_1();
                                    BOOL v98 = v95 == *v97 && v96 == v97[1];
                                    if (v98 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                    {
                                      OUTLINED_FUNCTION_0_1();
                                      swift_release();
                                      OUTLINED_FUNCTION_0_1();
                                      swift_release();
                                      goto LABEL_49;
                                    }
LABEL_106:
                                    swift_release();
                                    swift_release();
                                    goto LABEL_49;
                                  }
                                }
                                else
                                {
                                  _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0(v101, v102, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                                  OUTLINED_FUNCTION_53_2(v88, 1, v107);
                                  if (!v89)
                                  {
                                    uint64_t v90 = v105;
                                    outlined init with take of FlightSnippet.Flight();
                                    uint64_t v91 = v102;
                                    static FlightSnippet.Airport.== infix(_:_:)();
                                    char v93 = v92;
                                    outlined destroy of FlightSnippet.Flight(v90, (void (*)(void))type metadata accessor for FlightSnippet.Airport);
                                    outlined destroy of SearchResult?(v103, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                                    outlined destroy of FlightSnippet.Flight(v91, (void (*)(void))type metadata accessor for FlightSnippet.Airport);
                                    outlined destroy of SearchResult?(v101, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                                    if ((v93 & 1) == 0) {
                                      goto LABEL_106;
                                    }
                                    goto LABEL_100;
                                  }
                                  outlined destroy of SearchResult?(v103, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                                  outlined destroy of FlightSnippet.Flight(v102, (void (*)(void))type metadata accessor for FlightSnippet.Airport);
                                }
                                uint64_t v55 = v101;
LABEL_54:
                                outlined destroy of SearchResult?(v55, &demangling cache variable for type metadata for (FlightSnippet.Airport?, FlightSnippet.Airport?));
                                goto LABEL_106;
                              }
                            }
                            else
                            {
                              _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0(v104, (uint64_t)v22, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                              OUTLINED_FUNCTION_53_2(v71, 1, v107);
                              if (!v72)
                              {
                                uint64_t v73 = v105;
                                outlined init with take of FlightSnippet.Flight();
                                static FlightSnippet.Airport.== infix(_:_:)();
                                char v75 = v74;
                                outlined destroy of FlightSnippet.Flight(v73, (void (*)(void))type metadata accessor for FlightSnippet.Airport);
                                outlined destroy of SearchResult?((uint64_t)v25, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                                outlined destroy of FlightSnippet.Flight((uint64_t)v22, (void (*)(void))type metadata accessor for FlightSnippet.Airport);
                                outlined destroy of SearchResult?(v104, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                                if ((v75 & 1) == 0) {
                                  goto LABEL_106;
                                }
                                goto LABEL_84;
                              }
                              outlined destroy of SearchResult?((uint64_t)v25, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                              outlined destroy of FlightSnippet.Flight((uint64_t)v22, (void (*)(void))type metadata accessor for FlightSnippet.Airport);
                            }
                            uint64_t v55 = v104;
                            goto LABEL_54;
                          }
                          swift_retain();
                          swift_retain();
                          outlined destroy of SearchResult?((uint64_t)v30, &demangling cache variable for type metadata for FlightSnippet.Airport?);
                          outlined destroy of FlightSnippet.Flight((uint64_t)v28, (void (*)(void))type metadata accessor for FlightSnippet.Airport);
                        }
                        uint64_t v55 = (uint64_t)v13;
                        goto LABEL_54;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_49:
  OUTLINED_FUNCTION_119_0();
}

Swift::Int FlightSnippet.Leg.hashValue.getter()
{
  return FlightSnippet.hashValue.getter((void (*)(void))type metadata accessor for FlightSnippet.Leg, &lazy protocol witness table cache variable for type FlightSnippet.Leg and conformance FlightSnippet.Leg, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Leg);
}

Swift::Int FlightSnippet.hashValue.getter(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance FlightSnippet.Leg()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance FlightSnippet.Leg(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FlightSnippet.Leg.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance FlightSnippet.Leg(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FlightSnippet.Leg.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance FlightSnippet.Leg(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.Leg and conformance FlightSnippet.Leg, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Leg);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet.Leg@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet(&one-time initialization token for _protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FlightSnippet@<X0>(void *a1@<X2>, uint64_t a2@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for _NameMap();
  OUTLINED_FUNCTION_115_0(v3);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 16);
  return v5(a2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FlightSnippet.Leg(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.Leg and conformance FlightSnippet.Leg, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Leg);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FlightSnippet.Leg(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.Leg and conformance FlightSnippet.Leg, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Leg);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FlightSnippet()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type [FlightSnippet.Status] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [FlightSnippet.Status] and conformance [A];
  if (!lazy protocol witness table cache variable for type [FlightSnippet.Status] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [FlightSnippet.Status]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [FlightSnippet.Status] and conformance [A]);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FlightSnippet()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet and conformance FlightSnippet, (void (*)(uint64_t))type metadata accessor for FlightSnippet);
}

uint64_t base witness table accessor for Message in FlightSnippet()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet and conformance FlightSnippet, (void (*)(uint64_t))type metadata accessor for FlightSnippet);
}

uint64_t base witness table accessor for Hashable in FlightSnippet()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet and conformance FlightSnippet, (void (*)(uint64_t))type metadata accessor for FlightSnippet);
}

uint64_t base witness table accessor for Equatable in FlightSnippet()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet and conformance FlightSnippet, (void (*)(uint64_t))type metadata accessor for FlightSnippet);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FlightSnippet.Flight()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Flight);
}

uint64_t base witness table accessor for Message in FlightSnippet.Flight()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage((unint64_t *)&lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Flight);
}

uint64_t base witness table accessor for Hashable in FlightSnippet.Flight()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Flight);
}

uint64_t base witness table accessor for Equatable in FlightSnippet.Flight()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Flight);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FlightSnippet.Airport()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.Airport and conformance FlightSnippet.Airport, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Airport);
}

uint64_t base witness table accessor for Message in FlightSnippet.Airport()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.Airport and conformance FlightSnippet.Airport, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Airport);
}

uint64_t base witness table accessor for Hashable in FlightSnippet.Airport()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.Airport and conformance FlightSnippet.Airport, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Airport);
}

uint64_t base witness table accessor for Equatable in FlightSnippet.Airport()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.Airport and conformance FlightSnippet.Airport, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Airport);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FlightSnippet.FlightInfo()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.FlightInfo and conformance FlightSnippet.FlightInfo, (void (*)(uint64_t))type metadata accessor for FlightSnippet.FlightInfo);
}

uint64_t base witness table accessor for Message in FlightSnippet.FlightInfo()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.FlightInfo and conformance FlightSnippet.FlightInfo, (void (*)(uint64_t))type metadata accessor for FlightSnippet.FlightInfo);
}

uint64_t base witness table accessor for Hashable in FlightSnippet.FlightInfo()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.FlightInfo and conformance FlightSnippet.FlightInfo, (void (*)(uint64_t))type metadata accessor for FlightSnippet.FlightInfo);
}

uint64_t base witness table accessor for Equatable in FlightSnippet.FlightInfo()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.FlightInfo and conformance FlightSnippet.FlightInfo, (void (*)(uint64_t))type metadata accessor for FlightSnippet.FlightInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FlightSnippet.Leg()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.Leg and conformance FlightSnippet.Leg, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Leg);
}

uint64_t base witness table accessor for Message in FlightSnippet.Leg()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.Leg and conformance FlightSnippet.Leg, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Leg);
}

uint64_t base witness table accessor for Hashable in FlightSnippet.Leg()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.Leg and conformance FlightSnippet.Leg, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Leg);
}

uint64_t base witness table accessor for Equatable in FlightSnippet.Leg()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type FlightSnippet.Leg and conformance FlightSnippet.Leg, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Leg);
}

uint64_t sub_257EF0600@<X0>(uint64_t a1@<X8>)
{
  return FlightSnippet.flight.getter(a1);
}

uint64_t sub_257EF0624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for FlightSnippet.flight : FlightSnippet(a1, a2, a3, a4, type metadata accessor for FlightSnippet.Flight, (uint64_t)type metadata accessor for FlightSnippet.Flight, (uint64_t (*)(char *))FlightSnippet.flight.setter);
}

uint64_t sub_257EF0678()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Flight.id.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_257EF06A4()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Flight.contentHash.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_257EF06D0()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Flight.carrierIata.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_257EF06FC()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Flight.carrierIcao.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_257EF0728()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Flight.carrierFs.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_257EF0754()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Flight.carrierName.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_257EF0780()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Flight.carrierPhoneNumber.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_257EF07AC()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Flight.flightNumber.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_257EF07D8()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Flight.flightDepartureScheduled.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_257EF0800(uint64_t a1)
{
}

uint64_t sub_257EF0824()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Flight.flightArrivalScheduled.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_257EF084C(uint64_t a1)
{
}

uint64_t sub_257EF0870()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Flight.legs.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_257EF089C()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Flight.codeShares.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_257EF08C8()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Flight.legIndex.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_257EF08F0(unsigned int *a1)
{
}

uint64_t sub_257EF0914()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Flight.operatorCarrierCode.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_257EF0940()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Flight.operatorFlightNumber.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_257EF096C()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Flight.website.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_257EF0998()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Flight.lastUpdated.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_257EF09C0(uint64_t a1)
{
}

uint64_t sub_257EF09E4()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Flight.legsNotUpdated.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_257EF0A0C(unsigned int *a1)
{
}

uint64_t sub_257EF0A30()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Flight.departureUtcVariance.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_257EF0A58(unsigned int *a1)
{
}

uint64_t sub_257EF0A7C()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Flight.totalLegs.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_257EF0AA4(unsigned int *a1)
{
}

uint64_t sub_257EF0AC8()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Flight.legFlightScheduleIds.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_257EF0AF4()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Flight.legFlightUpdateIds.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_257EF0B28()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t v0 = FlightSnippet.Leg.enRoute.getter();
  return OUTLINED_FUNCTION_105_1(v0);
}

void sub_257EF0B50(unsigned __int8 *a1)
{
}

uint64_t sub_257EF0B74()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t v0 = FlightSnippet.Leg.departureDelayed.getter();
  return OUTLINED_FUNCTION_105_1(v0);
}

void sub_257EF0B9C(unsigned __int8 *a1)
{
}

uint64_t sub_257EF0BC0()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t v0 = FlightSnippet.Leg.arrivalDelayed.getter();
  return OUTLINED_FUNCTION_105_1(v0);
}

void sub_257EF0BE8(unsigned __int8 *a1)
{
}

uint64_t sub_257EF0C0C()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Leg.title.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_257EF0C38()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Leg.departurePublishedTime.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_257EF0C60(uint64_t a1)
{
}

uint64_t sub_257EF0C84()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Leg.departureActualTime.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_257EF0CAC(uint64_t a1)
{
}

uint64_t sub_257EF0CD0()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Leg.departureTerminal.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_257EF0CFC()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Leg.departureGate.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_257EF0D28()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Leg.departureGateClosed.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_257EF0D50(uint64_t a1)
{
}

uint64_t sub_257EF0D74()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Leg.departureRunway.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_257EF0D9C(uint64_t a1)
{
}

uint64_t sub_257EF0DC0()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t v0 = FlightSnippet.Leg.isTaxiing.getter();
  return OUTLINED_FUNCTION_105_1(v0);
}

void sub_257EF0DE8(unsigned __int8 *a1)
{
}

uint64_t sub_257EF0E0C@<X0>(void *a1@<X8>)
{
  return FlightSnippet.Leg.departureAirport.getter(a1);
}

uint64_t sub_257EF0E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for FlightSnippet.flight : FlightSnippet(a1, a2, a3, a4, type metadata accessor for FlightSnippet.Airport, (uint64_t)type metadata accessor for FlightSnippet.Airport, (uint64_t (*)(char *))FlightSnippet.Leg.departureAirport.setter);
}

uint64_t sub_257EF0E84()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Leg.arrivalPublishedTime.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_257EF0EAC(uint64_t a1)
{
}

uint64_t sub_257EF0ED0()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Leg.arrivalActualTime.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_257EF0EF8(uint64_t a1)
{
}

uint64_t sub_257EF0F1C()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Leg.arrivalTerminal.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_257EF0F48()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Leg.arrivalGate.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_257EF0F74()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Leg.gateArrival.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_257EF0F9C(uint64_t a1)
{
}

uint64_t sub_257EF0FC0()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Leg.arrivalRunway.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_257EF0FE8(uint64_t a1)
{
}

uint64_t sub_257EF100C@<X0>(void *a1@<X8>)
{
  return FlightSnippet.Leg.arrivalAirport.getter(a1);
}

uint64_t sub_257EF1030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for FlightSnippet.flight : FlightSnippet(a1, a2, a3, a4, type metadata accessor for FlightSnippet.Airport, (uint64_t)type metadata accessor for FlightSnippet.Airport, (uint64_t (*)(char *))FlightSnippet.Leg.arrivalAirport.setter);
}

uint64_t sub_257EF1084()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Leg.baggageClaim.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_257EF10B0()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Leg.updatedAt.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_257EF10D8(uint64_t a1)
{
}

uint64_t sub_257EF10FC@<X0>(void *a1@<X8>)
{
  return FlightSnippet.Leg.divertedAirport.getter(a1);
}

uint64_t sub_257EF1120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for FlightSnippet.flight : FlightSnippet(a1, a2, a3, a4, type metadata accessor for FlightSnippet.Airport, (uint64_t)type metadata accessor for FlightSnippet.Airport, (uint64_t (*)(char *))FlightSnippet.Leg.divertedAirport.setter);
}

uint64_t sub_257EF1174()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Leg.uid.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_257EF11A0()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = FlightSnippet.Leg.feedUpdateTime.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_257EF11C8(uint64_t a1)
{
}

void *initializeBufferWithCopyOfBuffer for FlightSnippet(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    uint64_t v7 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v7;
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
    uint64_t v8 = *(int *)(a3 + 36);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    *(void *)(a1 + 32) = a2[4];
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 40);
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for FlightSnippet.Flight(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Flight?);
      memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v12((uint64_t)v14, (uint64_t)v15, v11);
      *(void *)&v14[*(int *)(v16 + 20)] = *(void *)&v15[*(int *)(v16 + 20)];
      swift_retain();
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
    }
  }
  return v4;
}

uint64_t destroy for FlightSnippet(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = a1 + *(int *)(a2 + 40);
  uint64_t v8 = type metadata accessor for FlightSnippet.Flight(0);
  uint64_t result = __swift_getEnumTagSinglePayload(v7, 1, v8);
  if (!result)
  {
    v6(v7, v5);
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for FlightSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = type metadata accessor for FlightSnippet.Flight(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Flight?);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v11((uint64_t)v13, (uint64_t)v14, v10);
    *(void *)&v13[*(int *)(v15 + 20)] = *(void *)&v14[*(int *)(v15 + 20)];
    swift_retain();
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithCopy for FlightSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = type metadata accessor for FlightSnippet.Flight(0);
  LODWORD(v8) = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v15);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15);
  if (!v8)
  {
    if (!EnumTagSinglePayload)
    {
      v11((uint64_t)v13, (uint64_t)v14, v9);
      *(void *)&v13[*(int *)(v15 + 20)] = *(void *)&v14[*(int *)(v15 + 20)];
      swift_retain();
      swift_release();
      return a1;
    }
    outlined destroy of FlightSnippet.Flight((uint64_t)v13, (void (*)(void))type metadata accessor for FlightSnippet.Flight);
    goto LABEL_6;
  }
  if (EnumTagSinglePayload)
  {
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Flight?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v14, v9);
  *(void *)&v13[*(int *)(v15 + 20)] = *(void *)&v14[*(int *)(v15 + 20)];
  swift_retain();
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
  return a1;
}

uint64_t initializeWithTake for FlightSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = type metadata accessor for FlightSnippet.Flight(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Flight?);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    v10((uint64_t)v12, (uint64_t)v13, v9);
    *(void *)&v12[*(int *)(v14 + 20)] = *(void *)&v13[*(int *)(v14 + 20)];
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for FlightSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  uint64_t v13 = *(int *)(a3 + 40);
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for FlightSnippet.Flight(0);
  LODWORD(v9) = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v16);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16);
  if (!v9)
  {
    if (!EnumTagSinglePayload)
    {
      v12((uint64_t)v14, (uint64_t)v15, v10);
      *(void *)&v14[*(int *)(v16 + 20)] = *(void *)&v15[*(int *)(v16 + 20)];
      swift_release();
      return a1;
    }
    outlined destroy of FlightSnippet.Flight((uint64_t)v14, (void (*)(void))type metadata accessor for FlightSnippet.Flight);
    goto LABEL_6;
  }
  if (EnumTagSinglePayload)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Flight?);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v15, v10);
  *(void *)&v14[*(int *)(v16 + 20)] = *(void *)&v15[*(int *)(v16 + 20)];
  __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for FlightSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257EF1B08);
}

uint64_t sub_257EF1B08()
{
  OUTLINED_FUNCTION_87_1();
  if (v3) {
    return OUTLINED_FUNCTION_65_1(*(void *)(v1 + 16));
  }
  OUTLINED_FUNCTION_92_1();
  OUTLINED_FUNCTION_30_2();
  if (*(_DWORD *)(v6 + 84) == v0)
  {
    uint64_t v7 = v5;
    uint64_t v8 = *(int *)(v2 + 36);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Flight?);
    uint64_t v8 = *(int *)(v2 + 40);
  }
  return __swift_getEnumTagSinglePayload(v1 + v8, v0, v7);
}

uint64_t storeEnumTagSinglePayload for FlightSnippet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257EF1BB0);
}

void sub_257EF1BB0()
{
  OUTLINED_FUNCTION_71_1();
  if (v4)
  {
    *(void *)(v1 + 16) = (v0 - 1);
  }
  else
  {
    uint64_t v5 = v3;
    int v6 = v2;
    type metadata accessor for UnknownStorage();
    OUTLINED_FUNCTION_30_2();
    if (*(_DWORD *)(v7 + 84) == v6)
    {
      uint64_t v8 = *(int *)(v5 + 36);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Flight?);
      uint64_t v8 = *(int *)(v5 + 40);
    }
    uint64_t v9 = OUTLINED_FUNCTION_95_0(v8);
    __swift_storeEnumTagSinglePayload(v9, v10, v11, v12);
  }
}

void type metadata completion function for FlightSnippet()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for FlightSnippet.Flight?(319, &lazy cache variable for type metadata for FlightSnippet.Flight?, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Flight);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for FlightSnippet.Status(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FlightSnippet.Status(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for FlightSnippet.Status(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for FlightSnippet.Status(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    char v2 = 1;
  }
  else
  {
    char v2 = 0;
  }
  *(unsigned char *)(result + 8) = v2;
  return result;
}

ValueMetadata *type metadata accessor for FlightSnippet.Status()
{
  return &type metadata for FlightSnippet.Status;
}

uint64_t getEnumTagSinglePayload for FlightSnippet.Flight(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_152Tm);
}

uint64_t storeEnumTagSinglePayload for FlightSnippet.Flight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_153Tm);
}

void *initializeBufferWithCopyOfBuffer for FlightSnippet.Airport(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *char v3 = *a2;
    char v3 = (void *)(v19 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    uint64_t v7 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v7;
    uint64_t v8 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v8;
    uint64_t v9 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v9;
    *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
    uint64_t v10 = a2[13];
    *(void *)(a1 + 96) = a2[12];
    *(void *)(a1 + 104) = v10;
    uint64_t v11 = a2[15];
    *(void *)(a1 + 112) = a2[14];
    *(void *)(a1 + 120) = v11;
    uint64_t v12 = a2[17];
    *(void *)(a1 + 128) = a2[16];
    *(void *)(a1 + 136) = v12;
    uint64_t v13 = a2[19];
    *(void *)(a1 + 144) = a2[18];
    *(void *)(a1 + 152) = v13;
    uint64_t v14 = a2[21];
    *(void *)(a1 + 160) = a2[20];
    *(void *)(a1 + 168) = v14;
    uint64_t v15 = a2[23];
    *(void *)(a1 + 176) = a2[22];
    *(void *)(a1 + 184) = v15;
    uint64_t v16 = a2[25];
    uint64_t v17 = *(int *)(a3 + 72);
    uint64_t v23 = (uint64_t)a2 + v17;
    uint64_t v22 = a1 + v17;
    *(void *)(a1 + 192) = a2[24];
    *(void *)(a1 + 200) = v16;
    uint64_t v18 = type metadata accessor for UnknownStorage();
    uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21(v22, v23, v18);
  }
  return v3;
}

uint64_t destroy for FlightSnippet.Airport(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 72);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for FlightSnippet.Airport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  uint64_t v11 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v11;
  uint64_t v12 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v12;
  uint64_t v13 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v13;
  uint64_t v14 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v14;
  uint64_t v15 = *(void *)(a2 + 200);
  uint64_t v16 = *(int *)(a3 + 72);
  uint64_t v21 = a2 + v16;
  uint64_t v20 = a1 + v16;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v15;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19(v20, v21, v17);
  return a1;
}

void *assignWithCopy for FlightSnippet.Airport(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  a1[17] = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[18] = a2[18];
  a1[19] = a2[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[20] = a2[20];
  a1[21] = a2[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[22] = a2[22];
  a1[23] = a2[23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[24] = a2[24];
  a1[25] = a2[25];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 72);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for FlightSnippet.Airport(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  long long v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  long long v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  long long v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  long long v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  long long v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  uint64_t v10 = *(int *)(a3 + 72);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  a1[12] = a2[12];
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t assignWithTake for FlightSnippet.Airport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  uint64_t v11 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = *(int *)(a3 + 72);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 40))(v19, v20, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for FlightSnippet.Airport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257EF2688);
}

uint64_t sub_257EF2688()
{
  OUTLINED_FUNCTION_87_1();
  if (v3) {
    return OUTLINED_FUNCTION_65_1(*(void *)(v1 + 8));
  }
  uint64_t v5 = OUTLINED_FUNCTION_92_1();
  uint64_t v6 = v1 + *(int *)(v2 + 72);
  return __swift_getEnumTagSinglePayload(v6, v0, v5);
}

uint64_t storeEnumTagSinglePayload for FlightSnippet.Airport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257EF2704);
}

void sub_257EF2704()
{
  OUTLINED_FUNCTION_71_1();
  if (v3)
  {
    *(void *)(v1 + 8) = (v0 - 1);
  }
  else
  {
    uint64_t v4 = v2;
    type metadata accessor for UnknownStorage();
    uint64_t v5 = OUTLINED_FUNCTION_95_0(*(int *)(v4 + 72));
    __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
  }
}

uint64_t type metadata completion function for FlightSnippet.Airport()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FlightSnippet.FlightInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *char v3 = *a2;
    char v3 = (uint64_t *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v8 = a2[7];
    uint64_t v9 = *(int *)(a3 + 32);
    uint64_t v10 = (char *)a2 + v9;
    uint64_t v11 = (char *)a1 + v9;
    a1[6] = a2[6];
    a1[7] = v8;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v11, v10, v12);
  }
  return v3;
}

uint64_t destroy for FlightSnippet.FlightInfo(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for FlightSnippet.FlightInfo(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v7 = a2[7];
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = (char *)a2 + v8;
  uint64_t v10 = (char *)a1 + v8;
  a1[6] = a2[6];
  a1[7] = v7;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v10, v9, v11);
  return a1;
}

void *assignWithCopy for FlightSnippet.FlightInfo(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for FlightSnippet.FlightInfo(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  long long v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

void *assignWithTake for FlightSnippet.FlightInfo(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for FlightSnippet.FlightInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257EF2CFC);
}

uint64_t sub_257EF2CFC()
{
  OUTLINED_FUNCTION_87_1();
  if (v3) {
    return OUTLINED_FUNCTION_65_1(*(void *)(v1 + 8));
  }
  uint64_t v5 = OUTLINED_FUNCTION_92_1();
  uint64_t v6 = v1 + *(int *)(v2 + 32);
  return __swift_getEnumTagSinglePayload(v6, v0, v5);
}

uint64_t storeEnumTagSinglePayload for FlightSnippet.FlightInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257EF2D78);
}

void sub_257EF2D78()
{
  OUTLINED_FUNCTION_71_1();
  if (v3)
  {
    *(void *)(v1 + 8) = (v0 - 1);
  }
  else
  {
    uint64_t v4 = v2;
    type metadata accessor for UnknownStorage();
    uint64_t v5 = OUTLINED_FUNCTION_95_0(*(int *)(v4 + 32));
    __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
  }
}

uint64_t type metadata completion function for FlightSnippet.FlightInfo()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FlightSnippet.Flight(uint64_t *a1, uint64_t *a2)
{
  OUTLINED_FUNCTION_30_2();
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
  }
  else
  {
    uint64_t v7 = v4;
    type metadata accessor for UnknownStorage();
    OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_75_0();
    v8();
    *(uint64_t *)((char *)a1 + *(int *)(v7 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v7 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for FlightSnippet.Flight(uint64_t a1)
{
  type metadata accessor for UnknownStorage();
  OUTLINED_FUNCTION_7_2();
  (*(void (**)(uint64_t))(v2 + 8))(a1);
  return swift_release();
}

uint64_t initializeWithCopy for FlightSnippet.Flight()
{
  OUTLINED_FUNCTION_64_1();
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_75_0();
  v3();
  *(void *)(v2 + *(int *)(v0 + 20)) = *(void *)(v1 + *(int *)(v0 + 20));
  swift_retain();
  return v2;
}

uint64_t assignWithCopy for FlightSnippet.Flight()
{
  OUTLINED_FUNCTION_64_1();
  OUTLINED_FUNCTION_7_2();
  uint64_t v3 = OUTLINED_FUNCTION_78_1();
  v4(v3);
  *(void *)(v2 + *(int *)(v0 + 20)) = *(void *)(v1 + *(int *)(v0 + 20));
  swift_retain();
  swift_release();
  return v2;
}

uint64_t initializeWithTake for FlightSnippet.Flight()
{
  OUTLINED_FUNCTION_64_1();
  OUTLINED_FUNCTION_7_2();
  uint64_t v3 = OUTLINED_FUNCTION_78_1();
  v4(v3);
  *(void *)(v2 + *(int *)(v0 + 20)) = *(void *)(v1 + *(int *)(v0 + 20));
  return v2;
}

uint64_t assignWithTake for FlightSnippet.Flight()
{
  OUTLINED_FUNCTION_64_1();
  OUTLINED_FUNCTION_7_2();
  uint64_t v3 = OUTLINED_FUNCTION_78_1();
  v4(v3);
  *(void *)(v2 + *(int *)(v0 + 20)) = *(void *)(v1 + *(int *)(v0 + 20));
  swift_release();
  return v2;
}

uint64_t getEnumTagSinglePayload for FlightSnippet.Leg(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257EF3128);
}

uint64_t __swift_get_extra_inhabitant_index_152Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for UnknownStorage();
  OUTLINED_FUNCTION_30_2();
  if (*(_DWORD *)(v7 + 84) != a2) {
    return OUTLINED_FUNCTION_65_1(*(void *)(a1 + *(int *)(a3 + 20)));
  }
  return __swift_getEnumTagSinglePayload(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for FlightSnippet.Leg(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257EF31C4);
}

void __swift_store_extra_inhabitant_index_153Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for UnknownStorage();
  OUTLINED_FUNCTION_30_2();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t type metadata completion function for FlightSnippet.Flight()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for FlightSnippet.Leg._StorageClass()
{
  return type metadata accessor for FlightSnippet.Leg._StorageClass(0);
}

void type metadata completion function for FlightSnippet.Leg._StorageClass()
{
  type metadata accessor for FlightSnippet.Flight?(319, &lazy cache variable for type metadata for FlightSnippet.Airport?, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Airport);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for FlightSnippet.Flight?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t OUTLINED_FUNCTION_0_1()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_1_5()
{
  type metadata accessor for FlightSnippet.Leg._StorageClass(0);
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_2_2()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_3_5(uint64_t a1)
{
  *uint64_t v1 = a1;
  *(void *)(a1 + 88) = v2;
  uint64_t result = type metadata accessor for FlightSnippet.Flight(0);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(result + 20);
  return result;
}

uint64_t OUTLINED_FUNCTION_4_4()
{
  return type metadata accessor for FlightSnippet.Flight._StorageClass();
}

uint64_t OUTLINED_FUNCTION_5_3()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_6_4(uint64_t a1)
{
  *(void *)(v2 + v1) = a1;
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_7_7()
{
  type metadata accessor for FlightSnippet.Flight(0);
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_9_4()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_12_5(uint64_t a1)
{
  *(void *)(v2 + v1) = a1;
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_16_6(uint64_t a1)
{
  *uint64_t v1 = a1;
  *(void *)(a1 + 80) = v2;
  uint64_t result = type metadata accessor for FlightSnippet.Flight(0);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(result + 20);
  return result;
}

uint64_t OUTLINED_FUNCTION_17_4()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_18_7(uint64_t a1)
{
  *(void *)(v1 + v2) = a1;
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_19_4()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_21_6(uint64_t a1)
{
  *(void *)(v1 + v2) = a1;
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_24_5(uint64_t a1)
{
  *uint64_t v1 = a1;
  *(void *)(a1 + 80) = v2;
  uint64_t result = type metadata accessor for FlightSnippet.Leg(0);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(result + 20);
  return result;
}

uint64_t OUTLINED_FUNCTION_25_5()
{
  *uint64_t v0 = 0;
  v0[1] = 0xE000000000000000;
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v0[4] = 0;
  v0[5] = 0xE000000000000000;
  v0[6] = 0;
  v0[7] = 0xE000000000000000;
  v0[8] = 0;
  v0[9] = 0xE000000000000000;
  v0[10] = 0;
  v0[11] = 0;
  v0[12] = 0;
  v0[13] = 0xE000000000000000;
  v0[14] = 0;
  v0[15] = 0xE000000000000000;
  v0[16] = 0;
  v0[17] = 0xE000000000000000;
  v0[18] = 0;
  v0[19] = 0xE000000000000000;
  v0[20] = 0;
  v0[21] = 0xE000000000000000;
  v0[22] = 0;
  v0[23] = 0xE000000000000000;
  v0[24] = 0;
  v0[25] = 0xE000000000000000;
  return UnknownStorage.init()();
}

uint64_t OUTLINED_FUNCTION_26_6()
{
  return type metadata accessor for FlightSnippet.Flight._StorageClass();
}

uint64_t OUTLINED_FUNCTION_29_4()
{
  type metadata accessor for FlightSnippet.Flight(0);
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_30_5()
{
  type metadata accessor for FlightSnippet.Flight(0);
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_31_3()
{
  return type metadata accessor for FlightSnippet.Flight(0);
}

uint64_t OUTLINED_FUNCTION_32_3()
{
  return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
}

uint64_t OUTLINED_FUNCTION_34_3()
{
  return type metadata accessor for FlightSnippet.Leg(0);
}

uint64_t OUTLINED_FUNCTION_35_4(uint64_t result)
{
  *(_DWORD *)(v1 + 88) = *(_DWORD *)(result + 20);
  return result;
}

uint64_t OUTLINED_FUNCTION_36_3()
{
  type metadata accessor for FlightSnippet.Leg(0);
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_37_3()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_38_1()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_39_0(uint64_t a1)
{
  *uint64_t v1 = a1;
  *(void *)(a1 + 72) = v2;
  uint64_t result = type metadata accessor for FlightSnippet.Flight(0);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(result + 20);
  return result;
}

uint64_t OUTLINED_FUNCTION_40_3(uint64_t a1)
{
  *uint64_t v1 = a1;
  *(void *)(a1 + 72) = v2;
  uint64_t result = type metadata accessor for FlightSnippet.Leg(0);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(result + 20);
  return result;
}

uint64_t OUTLINED_FUNCTION_41_4(uint64_t a1)
{
  *uint64_t v1 = a1;
  *(void *)(a1 + 88) = v2;
  uint64_t result = type metadata accessor for FlightSnippet.Leg(0);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(result + 20);
  return result;
}

uint64_t OUTLINED_FUNCTION_42_1()
{
  return type metadata accessor for FlightSnippet.Flight(0);
}

uint64_t OUTLINED_FUNCTION_43_3()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_44_4()
{
  return swift_bridgeObjectRetain();
}

void *OUTLINED_FUNCTION_45_2()
{
  return malloc(0x68uLL);
}

void *OUTLINED_FUNCTION_46_3()
{
  return malloc(0x60uLL);
}

uint64_t OUTLINED_FUNCTION_47_2()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_48_2()
{
  return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
}

uint64_t OUTLINED_FUNCTION_49_2()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_50_4()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_51_4()
{
  return type metadata accessor for FlightSnippet.Flight._StorageClass();
}

uint64_t OUTLINED_FUNCTION_53_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_getEnumTagSinglePayload(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_56_3(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t OUTLINED_FUNCTION_59_3(uint64_t a1)
{
  *uint64_t v1 = a1;
  *(void *)(a1 + 88) = v2;
  uint64_t result = type metadata accessor for FlightSnippet.Leg(0);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(result + 20);
  return result;
}

uint64_t OUTLINED_FUNCTION_60_1()
{
  return dispatch thunk of Decoder.nextFieldNumber()();
}

uint64_t OUTLINED_FUNCTION_61_1()
{
  return type metadata accessor for FlightSnippet.Flight._StorageClass();
}

uint64_t OUTLINED_FUNCTION_62_1()
{
  return type metadata accessor for FlightSnippet.Flight._StorageClass();
}

uint64_t OUTLINED_FUNCTION_64_1()
{
  return type metadata accessor for UnknownStorage();
}

uint64_t OUTLINED_FUNCTION_65_1@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFFFFFF) {
    LODWORD(a1) = -1;
  }
  return (a1 + 1);
}

uint64_t OUTLINED_FUNCTION_66_1()
{
  return dispatch thunk of Decoder.decodeSingularStringField(value:)();
}

uint64_t OUTLINED_FUNCTION_67_1()
{
  return v0;
}

void *OUTLINED_FUNCTION_69_1()
{
  return malloc(0x58uLL);
}

uint64_t OUTLINED_FUNCTION_70_1(uint64_t a1)
{
  *(void *)(v1 + 48) = a1;
  return type metadata accessor for FlightSnippet.Leg(0);
}

uint64_t OUTLINED_FUNCTION_72_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_73_0()
{
  *uint64_t v1 = v2;
  return v0;
}

uint64_t OUTLINED_FUNCTION_74_1()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_77_1()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_78_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_79_1()
{
  return *(void *)v0;
}

void OUTLINED_FUNCTION_80_1()
{
  *(void *)(v1 + 72) = *v0;
}

uint64_t OUTLINED_FUNCTION_81_0()
{
  return type metadata accessor for UnknownStorage();
}

uint64_t OUTLINED_FUNCTION_82_1()
{
  return swift_endAccess();
}

void OUTLINED_FUNCTION_85_1(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = 0;
  a1[7] = 0xE000000000000000;
}

uint64_t OUTLINED_FUNCTION_86_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_88_1()
{
  return type metadata accessor for UnknownStorage();
}

unint64_t OUTLINED_FUNCTION_91_1(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t OUTLINED_FUNCTION_92_1()
{
  return type metadata accessor for UnknownStorage();
}

uint64_t OUTLINED_FUNCTION_93_1(uint64_t result)
{
  *uint64_t v1 = result;
  *(void *)(result + 24) = v2;
  return result;
}

uint64_t OUTLINED_FUNCTION_94_1()
{
  return _s10OmniSearch13FlightSnippetV0C0VSgWOcTm_0(v0, v2, v1);
}

uint64_t OUTLINED_FUNCTION_95_0@<X0>(uint64_t a1@<X8>)
{
  return v1 + a1;
}

uint64_t OUTLINED_FUNCTION_98_1()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_99_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_102_0()
{
  return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
}

uint64_t OUTLINED_FUNCTION_104_1(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t OUTLINED_FUNCTION_105_1(uint64_t result)
{
  *uint64_t v1 = result & 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_106_1()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_107_1()
{
  uint64_t result = v0[1];
  *(void *)(v1 + 72) = *v0;
  *(void *)(v1 + 80) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_108_1(unsigned int *a1)
{
  return *a1;
}

uint64_t OUTLINED_FUNCTION_109_1()
{
  *uint64_t v1 = v2;
  return v0;
}

uint64_t OUTLINED_FUNCTION_110_1()
{
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
}

uint64_t OUTLINED_FUNCTION_112_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_114_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_115_0(uint64_t a1)
{
  return __swift_project_value_buffer(a1, v1);
}

uint64_t OUTLINED_FUNCTION_116_1()
{
  *uint64_t v1 = v2;
  return v0;
}

uint64_t FlightReservation.updatedStatus.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Leg?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_17_1();
  FlightReservation.leg.getter();
  uint64_t v3 = type metadata accessor for FlightSnippet.Leg(0);
  OUTLINED_FUNCTION_53_2(v0, 1, v3);
  if (v4)
  {
    outlined destroy of FlightSnippet.Leg?(v0, &demangling cache variable for type metadata for FlightSnippet.Leg?);
  }
  else
  {
    OUTLINED_FUNCTION_0_1();
    outlined destroy of FlightSnippet.Leg(v0, (void (*)(void))type metadata accessor for FlightSnippet.Leg);
  }
  return String.init<A>(describing:)();
}

void FlightReservation.leg.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v45 = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for FlightSnippet.Airport(0);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_15();
  uint64_t v12 = (uint64_t *)(v11 - v10);
  uint64_t v48 = type metadata accessor for FlightSnippet.Leg(0);
  OUTLINED_FUNCTION_1();
  uint64_t v42 = v13;
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_15_5();
  uint64_t v15 = type metadata accessor for JSONDecodingOptions();
  uint64_t v16 = OUTLINED_FUNCTION_81(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_15();
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Flight?);
  uint64_t v18 = OUTLINED_FUNCTION_81(v17);
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_17_1();
  uint64_t v19 = type metadata accessor for FlightSnippet.Flight(0);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v20);
  uint64_t v44 = (uint64_t)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for FlightReservation(0);
  uint64_t v23 = *(int *)(v22 + 188);
  uint64_t v46 = v1;
  if (!*(void *)(v1 + v23 + 8))
  {
    __swift_storeEnumTagSinglePayload(v0, 1, 1, v19);
    outlined destroy of FlightSnippet.Leg?(v0, &demangling cache variable for type metadata for FlightSnippet.Flight?);
    __swift_storeEnumTagSinglePayload(v45, 1, 1, v48);
    goto LABEL_23;
  }
  uint64_t v24 = v22;
  uint64_t v47 = v8;
  swift_bridgeObjectRetain();
  JSONDecodingOptions.init()();
  lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight();
  Message.init(jsonString:options:)();
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v19);
  uint64_t v25 = v0;
  uint64_t v26 = v44;
  _s10OmniSearch13FlightSnippetV0C0VWObTm_0(v25, v44, (void (*)(void))type metadata accessor for FlightSnippet.Flight);
  uint64_t v27 = *(void *)(v26 + *(int *)(v19 + 20));
  OUTLINED_FUNCTION_0_1();
  uint64_t v28 = *(void *)(v27 + 160);
  uint64_t v29 = *(void *)(v28 + 16);
  if (!v29)
  {
    swift_bridgeObjectRetain();
    uint64_t v40 = 1;
    uint64_t v41 = v45;
    goto LABEL_22;
  }
  uint64_t v30 = v42;
  uint64_t v31 = v28 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
  uint64_t v32 = (void *)(v46 + *(int *)(v24 + 92));
  uint64_t v42 = v28;
  BOOL v43 = v12 + 10;
  uint64_t v46 = *(void *)(v30 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of FlightSnippet.Leg(v31, v2);
    uint64_t v33 = *(void *)(v2 + *(int *)(v48 + 20))
        + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__departureAirport;
    OUTLINED_FUNCTION_3_6();
    outlined init with copy of FlightSnippet.Airport?(v33, (uint64_t)v7);
    OUTLINED_FUNCTION_53_2((uint64_t)v7, 1, v47);
    if (v38)
    {
      uint64_t *v12 = 0;
      v12[1] = 0xE000000000000000;
      v12[2] = 0;
      v12[3] = 0xE000000000000000;
      v12[4] = 0;
      v12[5] = 0xE000000000000000;
      v12[8] = 0;
      v12[9] = 0xE000000000000000;
      int v34 = v43;
      v43[1] = 0;
      v34[2] = 0;
      *int v34 = 0;
      v12[13] = 0xE000000000000000;
      v12[14] = 0;
      v12[15] = 0xE000000000000000;
      v12[16] = 0;
      v12[17] = 0xE000000000000000;
      v12[18] = 0;
      v12[19] = 0xE000000000000000;
      v12[20] = 0;
      v12[21] = 0xE000000000000000;
      v12[22] = 0;
      v12[23] = 0xE000000000000000;
      v12[24] = 0;
      v12[25] = 0xE000000000000000;
      v12[6] = 0;
      v12[7] = 0xE000000000000000;
      UnknownStorage.init()();
      outlined destroy of FlightSnippet.Leg?((uint64_t)v7, &demangling cache variable for type metadata for FlightSnippet.Airport?);
    }
    else
    {
      _s10OmniSearch13FlightSnippetV0C0VWObTm_0((uint64_t)v7, (uint64_t)v12, (void (*)(void))type metadata accessor for FlightSnippet.Airport);
    }
    uint64_t v36 = *v12;
    uint64_t v35 = v12[1];
    swift_bridgeObjectRetain();
    outlined destroy of FlightSnippet.Leg((uint64_t)v12, (void (*)(void))type metadata accessor for FlightSnippet.Airport);
    uint64_t v37 = v32[1];
    if (!v37)
    {
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    BOOL v38 = v36 == *v32 && v37 == v35;
    if (v38) {
      break;
    }
    char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v39) {
      goto LABEL_21;
    }
LABEL_17:
    outlined destroy of FlightSnippet.Leg(v2, (void (*)(void))type metadata accessor for FlightSnippet.Leg);
    v31 += v46;
    if (!--v29)
    {
      uint64_t v40 = 1;
      uint64_t v41 = v45;
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRelease();
LABEL_21:
  uint64_t v41 = v45;
  _s10OmniSearch13FlightSnippetV0C0VWObTm_0(v2, v45, (void (*)(void))type metadata accessor for FlightSnippet.Leg);
  uint64_t v40 = 0;
LABEL_22:
  __swift_storeEnumTagSinglePayload(v41, v40, 1, v48);
  swift_bridgeObjectRelease();
  outlined destroy of FlightSnippet.Leg(v44, (void (*)(void))type metadata accessor for FlightSnippet.Flight);
LABEL_23:
  OUTLINED_FUNCTION_119_0();
}

unint64_t lazy protocol witness table accessor for type FlightSnippet.Flight and conformance FlightSnippet.Flight()
{
  unint64_t result = lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight;
  if (!lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight)
  {
    type metadata accessor for FlightSnippet.Flight(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight);
  }
  return result;
}

uint64_t outlined init with copy of FlightSnippet.Leg(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FlightSnippet.Leg(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of FlightSnippet.Airport?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of FlightSnippet.Leg(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_7_2();
  uint64_t v3 = OUTLINED_FUNCTION_9_5();
  v4(v3);
  return a1;
}

uint64_t _s10OmniSearch13FlightSnippetV0C0VWObTm_0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_7_2();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

void FlightSnippet.Leg.departureDateComponents.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v61 = v5;
  type metadata accessor for FlightSnippet.Leg(0);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_10_7(v7, v53[0]);
  OUTLINED_FUNCTION_1();
  uint64_t v59 = v9;
  uint64_t v60 = v8;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_14_7(v10, v53[0]);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  uint64_t v12 = OUTLINED_FUNCTION_81(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_8_3(v13, v53[0]);
  MEMORY[0x270FA5388](v14);
  uint64_t v15 = OUTLINED_FUNCTION_25_6();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v53 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  uint64_t v21 = OUTLINED_FUNCTION_81(v20);
  MEMORY[0x270FA5388](v21);
  uint64_t v22 = OUTLINED_FUNCTION_13_8();
  OUTLINED_FUNCTION_1();
  v53[3] = v23;
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_16_7();
  OUTLINED_FUNCTION_1();
  uint64_t v57 = v26;
  uint64_t v58 = v25;
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_5_4();
  uint64_t v28 = *(void *)(v0 + v27);
  OUTLINED_FUNCTION_0_1();
  uint64_t v56 = v3;
  Date.init(timeIntervalSince1970:)();
  uint64_t v29 = v28
      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__departureAirport;
  OUTLINED_FUNCTION_3_6();
  outlined init with copy of FlightSnippet.Airport?(v29, v2);
  OUTLINED_FUNCTION_53_2(v2, 1, v15);
  uint64_t v54 = v15;
  if (v30)
  {
    OUTLINED_FUNCTION_2_3();
    UnknownStorage.init()();
    outlined destroy of FlightSnippet.Leg?(v2, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  }
  else
  {
    _s10OmniSearch13FlightSnippetV0C0VWObTm_0(v2, (uint64_t)v19, (void (*)(void))type metadata accessor for FlightSnippet.Airport);
  }
  swift_bridgeObjectRetain();
  outlined destroy of FlightSnippet.Leg((uint64_t)v19, (void (*)(void))type metadata accessor for FlightSnippet.Airport);
  TimeZone.init(identifier:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_53_2(v1, 1, v22);
  if (v30)
  {
    outlined destroy of FlightSnippet.Leg?(v1, &demangling cache variable for type metadata for TimeZone?);
    if (one-time initialization token for answerSynthesis != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logging.answerSynthesis);
    uint64_t v32 = v55;
    outlined init with copy of FlightSnippet.Leg(v53[4], v55);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    uint64_t v36 = v54;
    if (v35)
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v62 = swift_slowAlloc();
      OUTLINED_FUNCTION_29_5(4.8149e-34);
      uint64_t v39 = *(void *)(v32 + v38)
          + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__departureAirport;
      OUTLINED_FUNCTION_3_6();
      OUTLINED_FUNCTION_26_7();
      OUTLINED_FUNCTION_53_2(v39, 1, v36);
      if (v30)
      {
        *uint64_t v4 = 0;
        v4[1] = 0xE000000000000000;
        v4[2] = 0;
        v4[3] = 0xE000000000000000;
        v4[4] = 0;
        v4[5] = 0xE000000000000000;
        v4[6] = 0;
        v4[7] = 0xE000000000000000;
        v4[8] = 0;
        v4[9] = 0xE000000000000000;
        v4[10] = 0;
        v4[11] = 0;
        v4[12] = 0;
        v4[13] = 0xE000000000000000;
        v4[14] = 0;
        v4[15] = 0xE000000000000000;
        v4[16] = 0;
        v4[17] = 0xE000000000000000;
        v4[18] = 0;
        v4[19] = 0xE000000000000000;
        v4[20] = 0;
        v4[21] = 0xE000000000000000;
        v4[22] = 0;
        v4[23] = 0xE000000000000000;
        v4[24] = 0;
        v4[25] = 0xE000000000000000;
        UnknownStorage.init()();
        outlined destroy of FlightSnippet.Leg?(v39, &demangling cache variable for type metadata for FlightSnippet.Airport?);
      }
      else
      {
        _s10OmniSearch13FlightSnippetV0C0VWObTm_0(v39, (uint64_t)v4, (void (*)(void))type metadata accessor for FlightSnippet.Airport);
      }
      uint64_t v46 = String.init<A>(describing:)();
      uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v62);
      OUTLINED_FUNCTION_11_6(v48);
      swift_bridgeObjectRelease();
      outlined destroy of FlightSnippet.Leg(v32, (void (*)(void))type metadata accessor for FlightSnippet.Leg);
      _os_log_impl(&dword_257DC6000, v33, v34, "Missing TimeZone info for departure: %s", v37, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_34();
    }
    else
    {
      outlined destroy of FlightSnippet.Leg(v32, (void (*)(void))type metadata accessor for FlightSnippet.Leg);
    }

    OUTLINED_FUNCTION_30_6();
    Calendar.dateComponents(_:from:)();
    uint64_t v49 = OUTLINED_FUNCTION_28_4();
    v50(v49);
  }
  else
  {
    uint64_t v40 = OUTLINED_FUNCTION_7_8();
    v41(v40);
    OUTLINED_FUNCTION_30_6();
    OUTLINED_FUNCTION_27_5();
    uint64_t v42 = OUTLINED_FUNCTION_24_6();
    v43(v42);
    uint64_t v44 = OUTLINED_FUNCTION_22_7();
    v45(v44);
  }
  uint64_t v51 = OUTLINED_FUNCTION_9_5();
  v52(v51);
  OUTLINED_FUNCTION_119_0();
}

void FlightSnippet.Leg.arrivalDateComponents.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v61 = v4;
  type metadata accessor for FlightSnippet.Leg(0);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_10_7(v6, v53[0]);
  OUTLINED_FUNCTION_1();
  uint64_t v59 = v8;
  uint64_t v60 = v7;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_14_7(v9, v53[0]);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Airport?);
  uint64_t v11 = OUTLINED_FUNCTION_81(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_8_3(v12, v53[0]);
  MEMORY[0x270FA5388](v13);
  uint64_t v14 = OUTLINED_FUNCTION_25_6();
  OUTLINED_FUNCTION_7_2();
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v54 = (char *)v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)v53 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  uint64_t v21 = OUTLINED_FUNCTION_81(v20);
  MEMORY[0x270FA5388](v21);
  uint64_t v22 = OUTLINED_FUNCTION_13_8();
  OUTLINED_FUNCTION_1();
  v53[3] = v23;
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_16_7();
  OUTLINED_FUNCTION_1();
  uint64_t v57 = v26;
  uint64_t v58 = v25;
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_5_4();
  uint64_t v28 = *(void *)(v0 + v27);
  OUTLINED_FUNCTION_3_6();
  uint64_t v56 = v3;
  Date.init(timeIntervalSince1970:)();
  uint64_t v29 = v28
      + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalAirport;
  OUTLINED_FUNCTION_3_6();
  outlined init with copy of FlightSnippet.Airport?(v29, v2);
  OUTLINED_FUNCTION_53_2(v2, 1, v14);
  if (v30)
  {
    OUTLINED_FUNCTION_2_3();
    UnknownStorage.init()();
    outlined destroy of FlightSnippet.Leg?(v2, &demangling cache variable for type metadata for FlightSnippet.Airport?);
  }
  else
  {
    _s10OmniSearch13FlightSnippetV0C0VWObTm_0(v2, (uint64_t)v19, (void (*)(void))type metadata accessor for FlightSnippet.Airport);
  }
  swift_bridgeObjectRetain();
  outlined destroy of FlightSnippet.Leg((uint64_t)v19, (void (*)(void))type metadata accessor for FlightSnippet.Airport);
  TimeZone.init(identifier:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_53_2(v1, 1, v22);
  if (v30)
  {
    outlined destroy of FlightSnippet.Leg?(v1, &demangling cache variable for type metadata for TimeZone?);
    if (one-time initialization token for answerSynthesis != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logging.answerSynthesis);
    uint64_t v32 = v55;
    outlined init with copy of FlightSnippet.Leg(v53[4], v55);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    uint64_t v36 = v54;
    if (v35)
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v62 = swift_slowAlloc();
      OUTLINED_FUNCTION_29_5(4.8149e-34);
      uint64_t v39 = *(void *)(v32 + v38)
          + OBJC_IVAR____TtCVV10OmniSearch13FlightSnippet3LegP33_1432903E5DFDE0C5F6864C747BE81CE313_StorageClass__arrivalAirport;
      OUTLINED_FUNCTION_3_6();
      OUTLINED_FUNCTION_26_7();
      OUTLINED_FUNCTION_53_2(v39, 1, v14);
      if (v30)
      {
        void *v36 = 0;
        v36[1] = 0xE000000000000000;
        v36[2] = 0;
        v36[3] = 0xE000000000000000;
        v36[4] = 0;
        v36[5] = 0xE000000000000000;
        v36[6] = 0;
        v36[7] = 0xE000000000000000;
        v36[8] = 0;
        v36[9] = 0xE000000000000000;
        v36[10] = 0;
        v36[11] = 0;
        v36[12] = 0;
        v36[13] = 0xE000000000000000;
        v36[14] = 0;
        v36[15] = 0xE000000000000000;
        v36[16] = 0;
        v36[17] = 0xE000000000000000;
        v36[18] = 0;
        v36[19] = 0xE000000000000000;
        v36[20] = 0;
        v36[21] = 0xE000000000000000;
        v36[22] = 0;
        v36[23] = 0xE000000000000000;
        v36[24] = 0;
        v36[25] = 0xE000000000000000;
        UnknownStorage.init()();
        outlined destroy of FlightSnippet.Leg?(v39, &demangling cache variable for type metadata for FlightSnippet.Airport?);
      }
      else
      {
        _s10OmniSearch13FlightSnippetV0C0VWObTm_0(v39, (uint64_t)v36, (void (*)(void))type metadata accessor for FlightSnippet.Airport);
      }
      uint64_t v46 = String.init<A>(describing:)();
      uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v62);
      OUTLINED_FUNCTION_11_6(v48);
      swift_bridgeObjectRelease();
      outlined destroy of FlightSnippet.Leg(v32, (void (*)(void))type metadata accessor for FlightSnippet.Leg);
      _os_log_impl(&dword_257DC6000, v33, v34, "Missing TimeZone info for arrival: %s", v37, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_34();
    }
    else
    {
      outlined destroy of FlightSnippet.Leg(v32, (void (*)(void))type metadata accessor for FlightSnippet.Leg);
    }

    OUTLINED_FUNCTION_30_6();
    Calendar.dateComponents(_:from:)();
    uint64_t v49 = OUTLINED_FUNCTION_28_4();
    v50(v49);
  }
  else
  {
    uint64_t v40 = OUTLINED_FUNCTION_7_8();
    v41(v40);
    OUTLINED_FUNCTION_30_6();
    OUTLINED_FUNCTION_27_5();
    uint64_t v42 = OUTLINED_FUNCTION_24_6();
    v43(v42);
    uint64_t v44 = OUTLINED_FUNCTION_22_7();
    v45(v44);
  }
  uint64_t v51 = OUTLINED_FUNCTION_9_5();
  v52(v51);
  OUTLINED_FUNCTION_119_0();
}

void FlightSnippet.Leg.matchesDepartureDate(_:)()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v47 = v0;
  uint64_t v3 = type metadata accessor for Calendar();
  OUTLINED_FUNCTION_1();
  uint64_t v46 = v4;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_15();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_1();
  uint64_t v45 = v10;
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v48 = (char *)&v41 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v17 = OUTLINED_FUNCTION_81(v16);
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_15_5();
  uint64_t v18 = type metadata accessor for Date();
  OUTLINED_FUNCTION_1();
  uint64_t v20 = v19;
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v41 - v23;
  DateComponents.date.getter();
  OUTLINED_FUNCTION_53_2(v1, 1, v18);
  if (v25)
  {
    outlined destroy of FlightSnippet.Leg?(v1, &demangling cache variable for type metadata for Date?);
  }
  else
  {
    uint64_t v49 = v20;
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 32);
    uint64_t v44 = v24;
    v26(v24, v1, v18);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
    type metadata accessor for Calendar.Component();
    OUTLINED_FUNCTION_1();
    uint64_t v42 = v14;
    uint64_t v27 = v46;
    uint64_t v29 = v28;
    uint64_t v41 = v3;
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_258661D70;
    uint64_t v43 = v9;
    uint64_t v31 = *(void (**)(void))(v29 + 104);
    OUTLINED_FUNCTION_23_5();
    v31();
    OUTLINED_FUNCTION_23_5();
    v31();
    OUTLINED_FUNCTION_23_5();
    v31();
    specialized Set.init(_nonEmptyArrayLiteral:)(v30);
    static Calendar.current.getter();
    type metadata accessor for FlightSnippet.Leg(0);
    OUTLINED_FUNCTION_0_1();
    Date.init(timeIntervalSince1970:)();
    uint64_t v32 = v48;
    Calendar.dateComponents(_:from:)();
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
    v49 += 8;
    v33(v2, v18);
    os_log_type_t v34 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    uint64_t v35 = v41;
    v34(v8, v41);
    uint64_t v47 = v18;
    static Calendar.current.getter();
    uint64_t v36 = v42;
    uint64_t v37 = v44;
    Calendar.dateComponents(_:from:)();
    swift_bridgeObjectRelease();
    v34(v8, v35);
    MEMORY[0x25A2C4E70](v32, v36);
    uint64_t v38 = *(void (**)(char *, uint64_t))(v45 + 8);
    uint64_t v39 = v36;
    uint64_t v40 = v43;
    v38(v39, v43);
    v38(v32, v40);
    v33((uint64_t)v37, v47);
  }
  OUTLINED_FUNCTION_119_0();
}

uint64_t outlined destroy of FlightSnippet.Leg?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_7_2();
  uint64_t v3 = OUTLINED_FUNCTION_9_5();
  v4(v3);
  return a1;
}

void OUTLINED_FUNCTION_2_3()
{
  *uint64_t v0 = 0;
  v0[1] = 0xE000000000000000;
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v0[4] = 0;
  v0[5] = 0xE000000000000000;
  v0[6] = 0;
  v0[7] = 0xE000000000000000;
  v0[8] = 0;
  v0[9] = 0xE000000000000000;
  v0[10] = 0;
  v0[11] = 0;
  v0[12] = 0;
  v0[13] = 0xE000000000000000;
  v0[14] = 0;
  v0[15] = 0xE000000000000000;
  v0[16] = 0;
  v0[17] = 0xE000000000000000;
  v0[18] = 0;
  v0[19] = 0xE000000000000000;
  v0[20] = 0;
  v0[21] = 0xE000000000000000;
  v0[22] = 0;
  v0[23] = 0xE000000000000000;
  v0[24] = 0;
  v0[25] = 0xE000000000000000;
}

uint64_t OUTLINED_FUNCTION_3_6()
{
  return swift_beginAccess();
}

void OUTLINED_FUNCTION_5_4()
{
  *(void *)(v2 - 280) = v1;
  *(void *)(v2 - 256) = v0;
}

uint64_t OUTLINED_FUNCTION_7_8()
{
  return v0;
}

void OUTLINED_FUNCTION_8_3(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 272) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_9_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_10_7@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 240) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for Calendar();
}

uint64_t OUTLINED_FUNCTION_11_6(uint64_t a1)
{
  *(void *)(v1 - 176) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_13_8()
{
  return type metadata accessor for TimeZone();
}

void OUTLINED_FUNCTION_14_7(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 208) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_15_5()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_16_7()
{
  return type metadata accessor for Date();
}

uint64_t OUTLINED_FUNCTION_22_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_24_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25_6()
{
  return type metadata accessor for FlightSnippet.Airport(0);
}

uint64_t OUTLINED_FUNCTION_26_7()
{
  uint64_t v3 = *(void *)(v1 - 272);
  return outlined init with copy of FlightSnippet.Airport?(v0, v3);
}

uint64_t OUTLINED_FUNCTION_27_5()
{
  return Calendar.dateComponents(in:from:)();
}

uint64_t OUTLINED_FUNCTION_28_4()
{
  return v0;
}

void OUTLINED_FUNCTION_29_5(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t OUTLINED_FUNCTION_30_6()
{
  return static Calendar.current.getter();
}

OmniSearch::MediaAnswerRule __swiftcall MediaAnswerRule.init()()
{
  return (OmniSearch::MediaAnswerRule)4;
}

OmniSearch::FlightFromExtractedAnswer __swiftcall FlightFromExtractedAnswer.init()()
{
  return (OmniSearch::FlightFromExtractedAnswer)2;
}

uint64_t InstantAnswerExtraction.extractInfo(query:result:assistantLocale:)()
{
  OUTLINED_FUNCTION_27();
  v0[2] = v1;
  v0[3] = v2;
  uint64_t v3 = type metadata accessor for SearchResultItem(0);
  v0[4] = v3;
  OUTLINED_FUNCTION_81(v3);
  v0[5] = OUTLINED_FUNCTION_49_1();
  uint64_t v4 = type metadata accessor for FlightReservation(0);
  OUTLINED_FUNCTION_81(v4);
  v0[6] = OUTLINED_FUNCTION_49_1();
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v5, v6, v7);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_49();
  outlined init with copy of SearchResultItem(v0[3], v0[5]);
  if (swift_getEnumCaseMultiPayload() == 15)
  {
    uint64_t v1 = v0[5];
    uint64_t v2 = v0[6];
    uint64_t v3 = v0[2];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]));
    swift_bridgeObjectRelease();
    _s10OmniSearch17FlightReservationVWObTm_0(v1, v2, (void (*)(void))type metadata accessor for FlightReservation);
    _s10OmniSearch17FlightReservationVWObTm_0(v2, v3, (void (*)(void))type metadata accessor for FlightReservation);
    uint64_t v4 = type metadata accessor for ExtractedType(0);
    swift_storeEnumTagMultiPayload();
    uint64_t v5 = 0;
  }
  else
  {
    _s10OmniSearch0B10ResultItemOWOhTm_0(v0[5], (void (*)(void))type metadata accessor for SearchResultItem);
    uint64_t v4 = type metadata accessor for ExtractedType(0);
    uint64_t v5 = 1;
  }
  __swift_storeEnumTagSinglePayload(v0[2], v5, 1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_86();
  return v6();
}

uint64_t outlined init with copy of SearchResultItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchResultItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for ExtractionRule.extractInfo(query:result:assistantLocale:) in conformance InstantAnswerExtraction()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for ExtractionRule.extractInfo(query:result:assistantLocale:) in conformance InstantAnswerExtraction;
  return InstantAnswerExtraction.extractInfo(query:result:assistantLocale:)();
}

uint64_t (*CalendarLocationAnswer.featureFlag.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t CalendarLocationAnswer.extractFromSource(query:answer:source:assistantLocale:)()
{
  OUTLINED_FUNCTION_27();
  v0[12] = v1;
  v0[13] = v2;
  v0[11] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CalendarEvent?);
  OUTLINED_FUNCTION_81(v4);
  v0[14] = OUTLINED_FUNCTION_49_1();
  uint64_t v5 = type metadata accessor for CalendarEvent(0);
  v0[15] = v5;
  OUTLINED_FUNCTION_81(v5);
  v0[16] = OUTLINED_FUNCTION_49_1();
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v22;

  SearchResultItem.associatedValue.getter((uint64_t)(v0 + 2));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SearchItem);
  if (OUTLINED_FUNCTION_22_5())
  {
    uint64_t v3 = v0[15];
    uint64_t v4 = v0[16];
    uint64_t v5 = v0[14];
    OUTLINED_FUNCTION_19_5();
    _s10OmniSearch17FlightReservationVWObTm_0(v5, v4, (void (*)(void))type metadata accessor for CalendarEvent);
    uint64_t v6 = (uint64_t *)(v4 + *(int *)(v3 + 36));
    uint64_t v7 = v6[1];
    uint64_t v8 = v0[16];
    if (v7)
    {
      uint64_t v9 = *v6;
      uint64_t v10 = v0[12];
      uint64_t v12 = *(void *)(v10 + 16);
      uint64_t v11 = *(void *)(v10 + 24);
      v0[7] = v12;
      v0[8] = v11;
      v0[9] = v9;
      v0[10] = v7;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      uint64_t v13 = OUTLINED_FUNCTION_20_5();
      _s10OmniSearch0B10ResultItemOWOhTm_0(v8, (void (*)(void))type metadata accessor for CalendarEvent);
      if (v13)
      {
        uint64_t v14 = (void *)v0[11];
        *uint64_t v14 = v9;
        v14[1] = v7;
        type metadata accessor for ExtractedType(0);
        OUTLINED_FUNCTION_17_5();
        swift_storeEnumTagMultiPayload();
        uint64_t v15 = OUTLINED_FUNCTION_6_5();
        goto LABEL_9;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      _s10OmniSearch0B10ResultItemOWOhTm_0(v0[16], (void (*)(void))type metadata accessor for CalendarEvent);
    }
  }
  else
  {
    uint64_t v19 = v0[14];
    OUTLINED_FUNCTION_32(v19, v1, v2, v0[15]);
    outlined destroy of SearchResult?(v19, &demangling cache variable for type metadata for CalendarEvent?);
  }
  type metadata accessor for ExtractedType(0);
  uint64_t v15 = OUTLINED_FUNCTION_3_7();
LABEL_9:
  __swift_storeEnumTagSinglePayload(v15, v16, v17, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_86();
  return v20();
}

uint64_t protocol witness for AnswerSourceExtractionRule.extractFromSource(query:answer:source:assistantLocale:) in conformance CalendarLocationAnswer()
{
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_13_9();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_26_1(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for ExtractionRule.extractInfo(query:result:assistantLocale:) in conformance InstantAnswerExtraction;
  OUTLINED_FUNCTION_5_5();
  return CalendarLocationAnswer.extractFromSource(query:answer:source:assistantLocale:)();
}

uint64_t protocol witness for ExtractionRule.featureFlag.getter in conformance CalendarLocationAnswer()
{
  return *v0;
}

uint64_t (*WalletLocationAnswer.featureFlag.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t WalletLocationAnswer.extractFromSource(query:answer:source:assistantLocale:)()
{
  OUTLINED_FUNCTION_27();
  v0[23] = v1;
  v0[24] = v2;
  v0[22] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WalletTransaction?);
  OUTLINED_FUNCTION_81(v4);
  v0[25] = OUTLINED_FUNCTION_49_1();
  uint64_t v5 = type metadata accessor for WalletTransaction(0);
  v0[26] = v5;
  OUTLINED_FUNCTION_81(v5);
  v0[27] = OUTLINED_FUNCTION_49_1();
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(void);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  SearchResultItem.associatedValue.getter((uint64_t)(v0 + 12));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SearchItem);
  if ((OUTLINED_FUNCTION_22_5() & 1) == 0)
  {
    uint64_t v26 = v0[25];
    OUTLINED_FUNCTION_32(v26, v1, v2, v0[26]);
    outlined destroy of SearchResult?(v26, &demangling cache variable for type metadata for WalletTransaction?);
LABEL_15:
    type metadata accessor for ExtractedType(0);
    uint64_t v27 = OUTLINED_FUNCTION_3_7();
    goto LABEL_30;
  }
  uint64_t v3 = v0[26];
  uint64_t v4 = v0[27];
  uint64_t v5 = v0[25];
  uint64_t v6 = v0[23];
  OUTLINED_FUNCTION_19_5();
  _s10OmniSearch17FlightReservationVWObTm_0(v5, v4, (void (*)(void))type metadata accessor for WalletTransaction);
  uint64_t v7 = *(void *)(v6 + 24);
  v0[17] = *(void *)(v6 + 16);
  v0[18] = v7;
  uint64_t v8 = (uint64_t *)(v4 + *(int *)(v3 + 32));
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  if (v9) {
    uint64_t v11 = *v8;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v9) {
    uint64_t v12 = v9;
  }
  else {
    uint64_t v12 = 0xE000000000000000;
  }
  v0[19] = v11;
  v0[20] = v12;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = OUTLINED_FUNCTION_20_5();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = v0[27];
  if ((v13 & 1) == 0)
  {
    _s10OmniSearch0B10ResultItemOWOhTm_0(v0[27], (void (*)(void))type metadata accessor for WalletTransaction);
    goto LABEL_15;
  }
  uint64_t v15 = v0[26];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String?>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_258661D70;
  *(void *)(inited + 32) = v10;
  *(void *)(inited + 40) = v9;
  uint64_t v17 = (uint64_t *)(v14 + *(int *)(v15 + 36));
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *(void *)(inited + 48) = *v17;
  *(void *)(inited + 56) = v18;
  uint64_t v20 = (uint64_t *)(v14 + *(int *)(v15 + 40));
  uint64_t v21 = v20[1];
  uint64_t v48 = *v20;
  *(void *)(inited + 64) = *v20;
  *(void *)(inited + 72) = v21;
  swift_bridgeObjectRetain();
  if (v9)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v23 = v22;
    uint64_t v24 = *(void *)(v22 + 16);
    if (v24 >= *(void *)(v22 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v23 = v43;
    }
    *(void *)(v23 + 16) = v24 + 1;
    char v25 = v23 + 16 * v24;
    *(void *)(v25 + 32) = v10;
    *(void *)(v25 + 40) = v9;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = MEMORY[0x263F8EE78];
  }
  if (v18)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_16_8();
      uint64_t v23 = v44;
    }
    uint64_t v31 = *(void *)(v23 + 16);
    if (v31 >= *(void *)(v23 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v23 = v45;
    }
    *(void *)(v23 + 16) = v31 + 1;
    uint64_t v32 = v23 + 16 * v31;
    *(void *)(v32 + 32) = v19;
    *(void *)(v32 + 40) = v18;
  }
  if (v21)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_16_8();
      uint64_t v23 = v46;
    }
    uint64_t v33 = *(void *)(v23 + 16);
    if (v33 >= *(void *)(v23 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v23 = v47;
    }
    *(void *)(v23 + 16) = v33 + 1;
    os_log_type_t v34 = v23 + 16 * v33;
    *(void *)(v34 + 32) = v48;
    *(void *)(v34 + 40) = v21;
  }
  uint64_t v35 = v0[27];
  uint64_t v36 = (uint64_t *)v0[22];
  swift_release();
  v0[21] = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
  uint64_t v37 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v39 = v38;
  swift_bridgeObjectRelease();
  _s10OmniSearch0B10ResultItemOWOhTm_0(v35, (void (*)(void))type metadata accessor for WalletTransaction);
  char *v36 = v37;
  v36[1] = v39;
  uint64_t v40 = type metadata accessor for ExtractedType(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v27 = (uint64_t)v36;
  uint64_t v28 = 0;
  uint64_t v29 = 1;
  uint64_t v30 = v40;
LABEL_30:
  __swift_storeEnumTagSinglePayload(v27, v28, v29, v30);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_86();
  return v41();
}

uint64_t _s10OmniSearch17FlightReservationVWObTm_0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_7_2();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t _s10OmniSearch0B10ResultItemOWOhTm_0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_7_2();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t protocol witness for AnswerSourceExtractionRule.extractFromSource(query:answer:source:assistantLocale:) in conformance WalletLocationAnswer()
{
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_13_9();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_26_1(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for ExtractionRule.extractInfo(query:result:assistantLocale:) in conformance InstantAnswerExtraction;
  OUTLINED_FUNCTION_5_5();
  return WalletLocationAnswer.extractFromSource(query:answer:source:assistantLocale:)();
}

uint64_t (*FlightFromExtractedAnswer.featureFlag.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t FlightFromExtractedAnswer.extractFromSource(query:answer:source:assistantLocale:)()
{
  OUTLINED_FUNCTION_27();
  v0[22] = v1;
  v0[23] = v2;
  v0[21] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_81(v4);
  v0[24] = OUTLINED_FUNCTION_49_1();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Calendar?);
  OUTLINED_FUNCTION_81(v5);
  v0[25] = OUTLINED_FUNCTION_49_1();
  uint64_t v6 = type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_81(v6);
  v0[26] = OUTLINED_FUNCTION_49_1();
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  uint64_t v41 = v0;
  SearchResultItem.associatedValue.getter(v0 + 56);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SearchItem);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataDetectable);
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(void *)(v0 + 128) = 0;
    *(_OWORD *)(v0 + 96) = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
    outlined destroy of SearchResult?(v0 + 96, &demangling cache variable for type metadata for DataDetectable?);
    goto LABEL_11;
  }
  uint64_t v1 = v0 + 16;
  outlined init with take of SageSearchClient((long long *)(v0 + 96), v0 + 16);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 8))(&v38, v2, v3);
  uint64_t v4 = v38;
  if (!v38)
  {
LABEL_9:
    __swift_destroy_boxed_opaque_existential_1Tm(v1);
LABEL_11:
    type metadata accessor for ExtractedType(0);
    uint64_t v17 = OUTLINED_FUNCTION_3_7();
    __swift_storeEnumTagSinglePayload(v17, v18, v19, v20);
    goto LABEL_12;
  }
  uint64_t v5 = v40;
  swift_bridgeObjectRetain();
  outlined consume of DataDetectorResults?(v4);
  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6)
  {
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  uint64_t v7 = *(void *)(v0 + 176);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v37 = *(void *)(v7 + 16);
  swift_bridgeObjectRetain();
  uint64_t v9 = (uint64_t *)(v5 + 56);
  while (1)
  {
    uint64_t v11 = *(v9 - 1);
    uint64_t v10 = *v9;
    uint64_t v13 = *(v9 - 3);
    uint64_t v12 = (void *)*(v9 - 2);
    *(void *)(v0 + 136) = v37;
    *(void *)(v0 + 144) = v8;
    uint64_t v38 = v11;
    uint64_t v39 = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    v14._countAndFlagsBits = v13;
    v14._object = v12;
    String.append(_:)(v14);
    uint64_t v15 = v39;
    *(void *)(v0 + 152) = v38;
    *(void *)(v0 + 160) = v15;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    uint64_t v16 = StringProtocol.contains<A>(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v16) {
      break;
    }
    v9 += 4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!--v6)
    {
      swift_bridgeObjectRelease();
      uint64_t v1 = v0 + 16;
      goto LABEL_8;
    }
  }
  uint64_t v23 = *(void *)(v0 + 200);
  uint64_t v24 = *(void *)(v0 + 184);
  char v25 = *(void *)(v0 + 192);
  swift_bridgeObjectRelease_n();
  uint64_t v26 = *(void **)(v24 + *(int *)(type metadata accessor for SearchResult(0) + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined bridged method (ob) of @objc CSSearchableItem.bundleID.getter(v26);
  uint64_t v27 = type metadata accessor for Calendar();
  OUTLINED_FUNCTION_32(v23, v28, v29, v27);
  uint64_t v30 = type metadata accessor for TimeZone();
  OUTLINED_FUNCTION_32(v25, v31, v32, v30);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  FlightReservation.init(flightNumber:flightCarrierCode:bundleId:flightDepartureDateComponents:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for ExtractedType(0);
  OUTLINED_FUNCTION_17_5();
  swift_storeEnumTagMultiPayload();
  uint64_t v33 = OUTLINED_FUNCTION_6_5();
  __swift_storeEnumTagSinglePayload(v33, v34, v35, v36);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
LABEL_12:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_86();
  return v21();
}

uint64_t default argument 0 of FlightFromExtractedAnswer.init(featureFlag:)()
{
  return 2;
}

uint64_t protocol witness for AnswerSourceExtractionRule.extractFromSource(query:answer:source:assistantLocale:) in conformance FlightFromExtractedAnswer()
{
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_13_9();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_26_1(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for ExtractionRule.extractInfo(query:result:assistantLocale:) in conformance InstantAnswerExtraction;
  OUTLINED_FUNCTION_5_5();
  return FlightFromExtractedAnswer.extractFromSource(query:answer:source:assistantLocale:)();
}

uint64_t (*MediaAnswerRule.featureFlag.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t MediaAnswerRule.regex(assistantLang:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<Substring>?);
  uint64_t v7 = OUTLINED_FUNCTION_81(v6);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for kMediaRegexTriggersPerLang != -1) {
    swift_once();
  }
  rawValue = kMediaRegexTriggersPerLang._rawValue;
  if (!*((void *)kMediaRegexTriggersPerLang._rawValue + 2))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<Substring>);
    OUTLINED_FUNCTION_32((uint64_t)v9, v21, v22, v20);
LABEL_9:
    uint64_t result = outlined destroy of SearchResult?((uint64_t)v9, &demangling cache variable for type metadata for Regex<Substring>?);
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(void *)(a3 + 32) = 0;
    return result;
  }
  swift_bridgeObjectRetain();
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if (v12)
  {
    unint64_t v13 = v11;
    uint64_t v14 = rawValue[7];
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<Substring>);
    OUTLINED_FUNCTION_7_2();
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v9, v14 + *(void *)(v16 + 72) * v13, v15);
    uint64_t v17 = (uint64_t)v9;
    uint64_t v18 = 0;
    uint64_t v19 = v15;
  }
  else
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<Substring>);
    uint64_t v17 = (uint64_t)v9;
    uint64_t v18 = 1;
  }
  __swift_storeEnumTagSinglePayload(v17, v18, 1, v19);
  swift_bridgeObjectRelease();
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<Substring>);
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v23) == 1) {
    goto LABEL_9;
  }
  *(void *)(a3 + 24) = v23;
  *(void *)(a3 + 32) = lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Regex<Substring> and conformance Regex<A>, &demangling cache variable for type metadata for Regex<Substring>);
  boxed_opaque_existential_1Tm = __swift_allocate_boxed_opaque_existential_1Tm((uint64_t *)a3);
  return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(boxed_opaque_existential_1Tm, v9, v23);
}

uint64_t MediaAnswerRule.extractMatched(typedResult:)()
{
  OUTLINED_FUNCTION_27();
  v0[6] = v1;
  v0[7] = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring)>);
  v0[8] = v3;
  OUTLINED_FUNCTION_12_0(v3);
  v0[9] = v4;
  v0[10] = OUTLINED_FUNCTION_49_1();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_81(v5);
  v0[11] = OUTLINED_FUNCTION_49_1();
  uint64_t v6 = type metadata accessor for URL();
  v0[12] = v6;
  OUTLINED_FUNCTION_12_0(v6);
  v0[13] = v7;
  v0[14] = OUTLINED_FUNCTION_49_1();
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v8, v9, v10);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *rawValue;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  unint64_t v28;
  void (*v29)(void, void, void);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  void (*v33)(uint64_t, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;

  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[7];
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v4 = *(void *)(v3 + 24);
  URL.init(string:)();
  if (__swift_getEnumTagSinglePayload(v2, 1, v1) == 1)
  {
    outlined destroy of SearchResult?(v0[11], &demangling cache variable for type metadata for URL?);
LABEL_9:
    uint64_t v15 = (void *)v0[6];
    *uint64_t v15 = v5;
    v15[1] = v4;
    uint64_t v16 = type metadata accessor for ExtractedType(0);
    swift_storeEnumTagMultiPayload();
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v16);
    swift_bridgeObjectRetain();
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)(v0[13] + 32);
  ((void (*)(void, void, void))v6)(v0[14], v0[11], v0[12]);
  URL.host.getter();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  if (!v8)
  {
    (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
    uint64_t v5 = *(void *)(v3 + 16);
    uint64_t v4 = *(void *)(v3 + 24);
    goto LABEL_9;
  }
  if (one-time initialization token for kMediaURLTriggers != -1) {
    goto LABEL_23;
  }
  while (1)
  {
    rawValue = (char *)kMediaURLTriggers._rawValue;
    os_log_type_t v34 = *((void *)kMediaURLTriggers._rawValue + 2);
    if (!v34) {
      goto LABEL_16;
    }
    uint64_t v29 = (void (*)(void, void, void))v6;
    uint64_t v10 = v0[9];
    unint64_t v11 = v0[10];
    uint64_t v28 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v31 = v0[8];
    uint64_t v33 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
    v33(v11, (char *)kMediaURLTriggers._rawValue + v28, v31);
    v0[2] = v5;
    v0[3] = v4;
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Regex<(Substring, Substring)> and conformance Regex<A>, &demangling cache variable for type metadata for Regex<(Substring, Substring)>);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v12 = BidirectionalCollection<>.contains<A>(_:)();
    unint64_t v13 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    uint64_t v6 = v10 + 8;
    uint64_t v14 = v31;
    uint64_t v32 = v13;
    v13(v11, v14);
    if (v12) {
      break;
    }
    if (v34 == 1)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_16:
      (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
      type metadata accessor for ExtractedType(0);
      uint64_t v22 = OUTLINED_FUNCTION_3_7();
      goto LABEL_18;
    }
    uint64_t v30 = *(void *)(v0[9] + 72);
    uint64_t v17 = &rawValue[v30 + v28];
    uint64_t v18 = 1;
    while (1)
    {
      v33(v0[10], v17, v0[8]);
      uint64_t v19 = v18 + 1;
      if (__OFADD__(v18, 1)) {
        break;
      }
      uint64_t v20 = v0[10];
      uint64_t v21 = v0[8];
      v0[4] = v5;
      v0[5] = v4;
      uint64_t v6 = BidirectionalCollection<>.contains<A>(_:)();
      v32(v20, v21);
      if (v6) {
        goto LABEL_17;
      }
      ++v18;
      v17 += v30;
      if (v19 == v34) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_23:
    swift_once();
  }
LABEL_17:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29(v0[6], v0[14], v0[12]);
  type metadata accessor for ExtractedType(0);
  OUTLINED_FUNCTION_17_5();
  swift_storeEnumTagMultiPayload();
  uint64_t v22 = OUTLINED_FUNCTION_6_5();
LABEL_18:
  __swift_storeEnumTagSinglePayload(v22, v23, v24, v25);
LABEL_19:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_86();
  return v26();
}

uint64_t default argument 0 of MediaAnswerRule.init(featureFlag:)()
{
  return 4;
}

uint64_t protocol witness for RegexExtractionRule.extractMatched(typedResult:) in conformance MediaAnswerRule()
{
  OUTLINED_FUNCTION_27();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_26_1(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for RegexExtractionRule.extractMatched(typedResult:) in conformance MediaAnswerRule;
  return MediaAnswerRule.extractMatched(typedResult:)();
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_27();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t outlined consume of DataDetectorResults?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_22_8();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)()
{
  OUTLINED_FUNCTION_22_8();
  Hasher._combine(_:)(0);
  Swift::Int v0 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  Swift::Int v2;
  uint64_t vars8;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  OUTLINED_FUNCTION_22_8();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v4, a1);
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  uint64_t vars8;

  OUTLINED_FUNCTION_22_8();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  uint64_t vars8;

  Swift::Int v2 = specialized RawRepresentable<>._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  char v2;
  Swift::Int v3;
  uint64_t vars8;

  Swift::Int v2 = a1 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  uint64_t v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v2, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned int a1)
{
  uint64_t v3 = MEMORY[0x25A2C8B40](*(void *)(v1 + 40), a1, 4);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        unint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1)
{
  return a1 & ~(-1 << *(unsigned char *)(v1 + 32));
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x25A2C8470](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if (v7) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  uint64_t v3 = v2 + 64;
  unint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    BOOL v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      uint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          unint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          uint64_t v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            uint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xD000000000000011;
      unint64_t v8 = 0x800000025867C2D0;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v7 = 0xD000000000000015;
          uint64_t v9 = "flightReservation";
          goto LABEL_8;
        case 2:
          unint64_t v8 = 0x800000025867C310;
          unint64_t v7 = 0xD000000000000010;
          break;
        case 3:
          unint64_t v7 = 0xD000000000000012;
          uint64_t v9 = "hotelReservation";
          goto LABEL_8;
        case 4:
          unint64_t v7 = 0xD000000000000016;
          uint64_t v9 = "vehicleReservation";
LABEL_8:
          unint64_t v8 = (unint64_t)v9 | 0x8000000000000000;
          break;
        case 5:
          unint64_t v7 = 0x646574656B636974;
          uint64_t v10 = 2003789907;
          goto LABEL_11;
        case 6:
          unint64_t v7 = 0x45636972656E6567;
          uint64_t v10 = 1953391990;
LABEL_11:
          unint64_t v8 = v10 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
          break;
        default:
          break;
      }
      unint64_t v11 = 0xD000000000000011;
      unint64_t v12 = 0x800000025867C2D0;
      switch(v6)
      {
        case 1:
          unint64_t v11 = 0xD000000000000015;
          unint64_t v13 = "flightReservation";
          goto LABEL_17;
        case 2:
          unint64_t v12 = 0x800000025867C310;
          unint64_t v11 = 0xD000000000000010;
          break;
        case 3:
          unint64_t v11 = 0xD000000000000012;
          unint64_t v13 = "hotelReservation";
          goto LABEL_17;
        case 4:
          unint64_t v11 = 0xD000000000000016;
          unint64_t v13 = "vehicleReservation";
LABEL_17:
          unint64_t v12 = (unint64_t)v13 | 0x8000000000000000;
          break;
        case 5:
          unint64_t v11 = 0x646574656B636974;
          uint64_t v14 = 2003789907;
          goto LABEL_20;
        case 6:
          unint64_t v11 = 0x45636972656E6567;
          uint64_t v14 = 1953391990;
LABEL_20:
          unint64_t v12 = v14 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
          break;
        default:
          break;
      }
      if (v7 == v11 && v8 == v12) {
        break;
      }
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v16 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(char a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    while (1)
    {
      if (*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        if (*(unsigned char *)(*(void *)(v2 + 48) + v4) == 1)
        {
          uint64_t v7 = 0x6867696C746F7073;
          unint64_t v8 = 0xE900000000000074;
        }
        else
        {
          unint64_t v8 = 0xE600000000000000;
          uint64_t v7 = 0x6C61626F6C67;
        }
      }
      else
      {
        unint64_t v8 = 0xE600000000000000;
        uint64_t v7 = 0x797469746E65;
      }
      if (a1)
      {
        uint64_t v9 = a1 == 1 ? 0x6867696C746F7073 : 0x6C61626F6C67;
        unint64_t v10 = a1 == 1 ? 0xE900000000000074 : 0xE600000000000000;
      }
      else
      {
        unint64_t v10 = 0xE600000000000000;
        uint64_t v9 = 0x797469746E65;
      }
      if (v7 == v9 && v8 == v10) {
        break;
      }
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v6;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char v18;

  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    while (1)
    {
      uint64_t v7 = 0xE500000000000000;
      unint64_t v8 = 0x6C69616D65;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v8 = 0x4D53656C69626F6DLL;
          uint64_t v7 = 0xE900000000000053;
          break;
        case 2:
          uint64_t v7 = 0xE800000000000000;
          unint64_t v8 = 0x7261646E656C6163;
          break;
        case 3:
          unint64_t v8 = 0x6F746F6870;
          break;
        case 4:
          uint64_t v7 = 0xE600000000000000;
          unint64_t v8 = 0x726577736E61;
          break;
        case 5:
          uint64_t v7 = 0xE400000000000000;
          unint64_t v8 = 1702129518;
          break;
        case 6:
          uint64_t v7 = 0xE800000000000000;
          unint64_t v8 = 0x7265646E696D6572;
          break;
        case 7:
          unint64_t v8 = 0x736948656E6F6870;
          uint64_t v9 = 2037542772;
          goto LABEL_29;
        case 8:
          unint64_t v8 = 0xD000000000000013;
          unint64_t v10 = "";
          goto LABEL_27;
        case 9:
          unint64_t v8 = 0x456C616E72756F6ALL;
          uint64_t v7 = 0xEC0000007972746ELL;
          break;
        case 0xA:
          unint64_t v8 = 0x6D654D6563696F76;
          uint64_t v7 = 0xE90000000000006FLL;
          break;
        case 0xB:
          uint64_t v7 = 0xE600000000000000;
          unint64_t v8 = 0x697261666173;
          break;
        case 0xC:
          uint64_t v7 = 0xE400000000000000;
          unint64_t v8 = 1701603686;
          break;
        case 0xD:
          unint64_t v11 = "ipt";
          goto LABEL_20;
        case 0xE:
          unint64_t v8 = 0x615074656C6C6177;
          uint64_t v7 = 0xEA00000000007373;
          break;
        case 0xF:
          uint64_t v7 = 0xE700000000000000;
          unint64_t v8 = 0x746361746E6F63;
          break;
        case 0x10:
          unint64_t v11 = "ss";
LABEL_20:
          uint64_t v7 = (unint64_t)v11 | 0x8000000000000000;
          unint64_t v8 = 0xD000000000000011;
          break;
        case 0x11:
          unint64_t v8 = 0xD000000000000010;
          unint64_t v10 = "restaurantReservation";
          goto LABEL_27;
        case 0x12:
          unint64_t v8 = 0xD000000000000015;
          unint64_t v10 = "flightReservation";
          goto LABEL_27;
        case 0x13:
          unint64_t v8 = 0x65526C61626F6C67;
          uint64_t v9 = 1953265011;
          goto LABEL_29;
        case 0x14:
          unint64_t v8 = 0x7469746E45707061;
          uint64_t v7 = 0xE900000000000079;
          break;
        case 0x15:
          unint64_t v8 = 0xD000000000000014;
          unint64_t v10 = "n";
          goto LABEL_27;
        case 0x16:
          unint64_t v8 = 0xD000000000000016;
          unint64_t v10 = "vehicleReservation";
LABEL_27:
          uint64_t v7 = (unint64_t)v10 | 0x8000000000000000;
          break;
        case 0x17:
          unint64_t v8 = 0x646574656B636974;
          uint64_t v9 = 2003789907;
LABEL_29:
          uint64_t v7 = v9 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
          break;
        case 0x18:
          unint64_t v8 = 0x6D746E696F707061;
          uint64_t v7 = 0xEB00000000746E65;
          break;
        case 0x19:
          unint64_t v8 = 0x7974726170;
          break;
        case 0x1A:
          uint64_t v7 = 0xE400000000000000;
          unint64_t v8 = 1885958772;
          break;
        default:
          break;
      }
      char v12 = 0xE500000000000000;
      unint64_t v13 = 0x6C69616D65;
      switch(a1)
      {
        case 1:
          unint64_t v13 = 0x4D53656C69626F6DLL;
          char v12 = 0xE900000000000053;
          break;
        case 2:
          char v12 = 0xE800000000000000;
          unint64_t v13 = 0x7261646E656C6163;
          break;
        case 3:
          unint64_t v13 = 0x6F746F6870;
          break;
        case 4:
          char v12 = 0xE600000000000000;
          unint64_t v13 = 0x726577736E61;
          break;
        case 5:
          char v12 = 0xE400000000000000;
          unint64_t v13 = 1702129518;
          break;
        case 6:
          char v12 = 0xE800000000000000;
          unint64_t v13 = 0x7265646E696D6572;
          break;
        case 7:
          unint64_t v13 = 0x736948656E6F6870;
          uint64_t v14 = 2037542772;
          goto LABEL_59;
        case 8:
          unint64_t v13 = 0xD000000000000013;
          uint64_t v15 = "";
          goto LABEL_57;
        case 9:
          unint64_t v13 = 0x456C616E72756F6ALL;
          char v12 = 0xEC0000007972746ELL;
          break;
        case 10:
          unint64_t v13 = 0x6D654D6563696F76;
          char v12 = 0xE90000000000006FLL;
          break;
        case 11:
          char v12 = 0xE600000000000000;
          unint64_t v13 = 0x697261666173;
          break;
        case 12:
          char v12 = 0xE400000000000000;
          unint64_t v13 = 1701603686;
          break;
        case 13:
          char v16 = "ipt";
          goto LABEL_50;
        case 14:
          unint64_t v13 = 0x615074656C6C6177;
          char v12 = 0xEA00000000007373;
          break;
        case 15:
          char v12 = 0xE700000000000000;
          unint64_t v13 = 0x746361746E6F63;
          break;
        case 16:
          char v16 = "ss";
LABEL_50:
          char v12 = (unint64_t)v16 | 0x8000000000000000;
          unint64_t v13 = 0xD000000000000011;
          break;
        case 17:
          unint64_t v13 = 0xD000000000000010;
          uint64_t v15 = "restaurantReservation";
          goto LABEL_57;
        case 18:
          unint64_t v13 = 0xD000000000000015;
          uint64_t v15 = "flightReservation";
          goto LABEL_57;
        case 19:
          unint64_t v13 = 0x65526C61626F6C67;
          uint64_t v14 = 1953265011;
          goto LABEL_59;
        case 20:
          unint64_t v13 = 0x7469746E45707061;
          char v12 = 0xE900000000000079;
          break;
        case 21:
          unint64_t v13 = 0xD000000000000014;
          uint64_t v15 = "n";
          goto LABEL_57;
        case 22:
          unint64_t v13 = 0xD000000000000016;
          uint64_t v15 = "vehicleReservation";
LABEL_57:
          char v12 = (unint64_t)v15 | 0x8000000000000000;
          break;
        case 23:
          unint64_t v13 = 0x646574656B636974;
          uint64_t v14 = 2003789907;
LABEL_59:
          char v12 = v14 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
          break;
        case 24:
          unint64_t v13 = 0x6D746E696F707061;
          char v12 = 0xEB00000000746E65;
          break;
        case 25:
          unint64_t v13 = 0x7974726170;
          break;
        case 26:
          char v12 = 0xE400000000000000;
          unint64_t v13 = 1885958772;
          break;
        default:
          break;
      }
      if (v8 == v13 && v7 == v12) {
        break;
      }
      uint64_t v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v18 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v6;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  unint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (((((a1 & 1) == 0) ^ *(unsigned __int8 *)(v7 + result)) & 1) == 0)
    {
      unint64_t v8 = ~v5;
      for (uint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            uint64_t result = (result + 1) & v8)
      {
        if ((((a1 & 1) == 0) ^ *(unsigned char *)(v7 + result))) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t outlined bridged method (ob) of @objc CSSearchableItem.bundleID.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_bundleID);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for CalendarLocationAnswer(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type CalendarLocationAnswer and conformance CalendarLocationAnswer();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type CalendarLocationAnswer and conformance CalendarLocationAnswer()
{
  unint64_t result = lazy protocol witness table cache variable for type CalendarLocationAnswer and conformance CalendarLocationAnswer;
  if (!lazy protocol witness table cache variable for type CalendarLocationAnswer and conformance CalendarLocationAnswer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalendarLocationAnswer and conformance CalendarLocationAnswer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Answer and conformance Answer()
{
  unint64_t result = lazy protocol witness table cache variable for type Answer and conformance Answer;
  if (!lazy protocol witness table cache variable for type Answer and conformance Answer)
  {
    type metadata accessor for Answer(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Answer and conformance Answer);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for WalletLocationAnswer(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type WalletLocationAnswer and conformance WalletLocationAnswer();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type WalletLocationAnswer and conformance WalletLocationAnswer()
{
  unint64_t result = lazy protocol witness table cache variable for type WalletLocationAnswer and conformance WalletLocationAnswer;
  if (!lazy protocol witness table cache variable for type WalletLocationAnswer and conformance WalletLocationAnswer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WalletLocationAnswer and conformance WalletLocationAnswer);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for FlightFromExtractedAnswer(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type FlightFromExtractedAnswer and conformance FlightFromExtractedAnswer();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type FlightFromExtractedAnswer and conformance FlightFromExtractedAnswer()
{
  unint64_t result = lazy protocol witness table cache variable for type FlightFromExtractedAnswer and conformance FlightFromExtractedAnswer;
  if (!lazy protocol witness table cache variable for type FlightFromExtractedAnswer and conformance FlightFromExtractedAnswer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlightFromExtractedAnswer and conformance FlightFromExtractedAnswer);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for MediaAnswerRule(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type MediaAnswerRule and conformance MediaAnswerRule();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type MediaAnswerRule and conformance MediaAnswerRule();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type MediaAnswerRule and conformance MediaAnswerRule()
{
  unint64_t result = lazy protocol witness table cache variable for type MediaAnswerRule and conformance MediaAnswerRule;
  if (!lazy protocol witness table cache variable for type MediaAnswerRule and conformance MediaAnswerRule)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaAnswerRule and conformance MediaAnswerRule);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MediaAnswerRule and conformance MediaAnswerRule;
  if (!lazy protocol witness table cache variable for type MediaAnswerRule and conformance MediaAnswerRule)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaAnswerRule and conformance MediaAnswerRule);
  }
  return result;
}

void type metadata accessor for InstantAnswerExtraction()
{
}

void type metadata accessor for CalendarLocationAnswer()
{
}

void type metadata accessor for WalletLocationAnswer()
{
}

void type metadata accessor for FlightFromExtractedAnswer()
{
}

uint64_t getEnumTagSinglePayload for CalendarLocationAnswer(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF3)
  {
    if (a2 + 13 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 13) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (v4) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v3 == 2)
      {
        int v4 = *(unsigned __int16 *)(a1 + 1);
        if (!*(_WORD *)(a1 + 1)) {
          goto LABEL_17;
        }
LABEL_15:
        int v5 = (*a1 | (v4 << 8)) - 14;
        return (v5 + 1);
      }
      int v4 = a1[1];
      if (a1[1]) {
        goto LABEL_15;
      }
    }
  }
LABEL_17:
  if (*a1 <= 0xDu) {
    int v6 = 13;
  }
  else {
    int v6 = *a1;
  }
  int v7 = v6 - 14;
  if (*a1 < 0xDu) {
    int v5 = -1;
  }
  else {
    int v5 = v7;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for CalendarLocationAnswer(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *unint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x257EF8BB8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

void type metadata accessor for MediaAnswerRule()
{
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

Swift::Int specialized _SwiftNewtypeWrapper<>._rawHashValue(seed:)()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_15_6(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

void OUTLINED_FUNCTION_16_8()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_17_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_19_5()
{
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
}

uint64_t OUTLINED_FUNCTION_20_5()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_22_8()
{
  return Hasher.init(_seed:)();
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(char a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  while (1)
  {
    uint64_t v6 = a2 + v5++;
    unint64_t v7 = 0xE500000000000000;
    unint64_t v8 = 0x6C69616D65;
    switch(*(unsigned char *)(v6 + 32))
    {
      case 1:
        unint64_t v8 = 0x4D53656C69626F6DLL;
        unint64_t v7 = 0xE900000000000053;
        break;
      case 2:
        unint64_t v7 = 0xE800000000000000;
        unint64_t v8 = 0x7261646E656C6163;
        break;
      case 3:
        unint64_t v8 = 0x6F746F6870;
        break;
      case 4:
        unint64_t v7 = 0xE600000000000000;
        unint64_t v8 = 0x726577736E61;
        break;
      case 5:
        unint64_t v7 = 0xE400000000000000;
        unint64_t v8 = 1702129518;
        break;
      case 6:
        unint64_t v7 = 0xE800000000000000;
        unint64_t v8 = 0x7265646E696D6572;
        break;
      case 7:
        unint64_t v8 = 0x736948656E6F6870;
        uint64_t v9 = 2037542772;
        goto LABEL_29;
      case 8:
        unint64_t v8 = 0xD000000000000013;
        unint64_t v10 = "";
        goto LABEL_27;
      case 9:
        unint64_t v8 = 0x456C616E72756F6ALL;
        unint64_t v7 = 0xEC0000007972746ELL;
        break;
      case 0xA:
        unint64_t v8 = 0x6D654D6563696F76;
        unint64_t v7 = 0xE90000000000006FLL;
        break;
      case 0xB:
        unint64_t v7 = 0xE600000000000000;
        unint64_t v8 = 0x697261666173;
        break;
      case 0xC:
        unint64_t v7 = 0xE400000000000000;
        unint64_t v8 = 1701603686;
        break;
      case 0xD:
        uint64_t v11 = "ipt";
        goto LABEL_20;
      case 0xE:
        unint64_t v8 = 0x615074656C6C6177;
        unint64_t v7 = 0xEA00000000007373;
        break;
      case 0xF:
        unint64_t v7 = 0xE700000000000000;
        unint64_t v8 = 0x746361746E6F63;
        break;
      case 0x10:
        uint64_t v11 = "ss";
LABEL_20:
        unint64_t v7 = (unint64_t)v11 | 0x8000000000000000;
        unint64_t v8 = 0xD000000000000011;
        break;
      case 0x11:
        unint64_t v8 = 0xD000000000000010;
        unint64_t v10 = "restaurantReservation";
        goto LABEL_27;
      case 0x12:
        unint64_t v8 = 0xD000000000000015;
        unint64_t v10 = "flightReservation";
        goto LABEL_27;
      case 0x13:
        unint64_t v8 = 0x65526C61626F6C67;
        uint64_t v9 = 1953265011;
        goto LABEL_29;
      case 0x14:
        unint64_t v8 = 0x7469746E45707061;
        unint64_t v7 = 0xE900000000000079;
        break;
      case 0x15:
        unint64_t v8 = 0xD000000000000014;
        unint64_t v10 = "n";
        goto LABEL_27;
      case 0x16:
        unint64_t v8 = 0xD000000000000016;
        unint64_t v10 = "vehicleReservation";
LABEL_27:
        unint64_t v7 = (unint64_t)v10 | 0x8000000000000000;
        break;
      case 0x17:
        unint64_t v8 = 0x646574656B636974;
        uint64_t v9 = 2003789907;
LABEL_29:
        unint64_t v7 = v9 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
        break;
      case 0x18:
        unint64_t v8 = 0x6D746E696F707061;
        unint64_t v7 = 0xEB00000000746E65;
        break;
      case 0x19:
        unint64_t v8 = 0x7974726170;
        break;
      case 0x1A:
        unint64_t v7 = 0xE400000000000000;
        unint64_t v8 = 1885958772;
        break;
      default:
        break;
    }
    unint64_t v12 = 0xE500000000000000;
    unint64_t v13 = 0x6C69616D65;
    switch(a1)
    {
      case 1:
        unint64_t v13 = 0x4D53656C69626F6DLL;
        unint64_t v12 = 0xE900000000000053;
        break;
      case 2:
        unint64_t v12 = 0xE800000000000000;
        unint64_t v13 = 0x7261646E656C6163;
        break;
      case 3:
        unint64_t v13 = 0x6F746F6870;
        break;
      case 4:
        unint64_t v12 = 0xE600000000000000;
        unint64_t v13 = 0x726577736E61;
        break;
      case 5:
        unint64_t v12 = 0xE400000000000000;
        unint64_t v13 = 1702129518;
        break;
      case 6:
        unint64_t v12 = 0xE800000000000000;
        unint64_t v13 = 0x7265646E696D6572;
        break;
      case 7:
        unint64_t v13 = 0x736948656E6F6870;
        uint64_t v14 = 2037542772;
        goto LABEL_59;
      case 8:
        unint64_t v13 = 0xD000000000000013;
        uint64_t v15 = "";
        goto LABEL_57;
      case 9:
        unint64_t v13 = 0x456C616E72756F6ALL;
        unint64_t v12 = 0xEC0000007972746ELL;
        break;
      case 10:
        unint64_t v13 = 0x6D654D6563696F76;
        unint64_t v12 = 0xE90000000000006FLL;
        break;
      case 11:
        unint64_t v12 = 0xE600000000000000;
        unint64_t v13 = 0x697261666173;
        break;
      case 12:
        unint64_t v12 = 0xE400000000000000;
        unint64_t v13 = 1701603686;
        break;
      case 13:
        char v16 = "ipt";
        goto LABEL_50;
      case 14:
        unint64_t v13 = 0x615074656C6C6177;
        unint64_t v12 = 0xEA00000000007373;
        break;
      case 15:
        unint64_t v12 = 0xE700000000000000;
        unint64_t v13 = 0x746361746E6F63;
        break;
      case 16:
        char v16 = "ss";
LABEL_50:
        unint64_t v12 = (unint64_t)v16 | 0x8000000000000000;
        unint64_t v13 = 0xD000000000000011;
        break;
      case 17:
        unint64_t v13 = 0xD000000000000010;
        uint64_t v15 = "restaurantReservation";
        goto LABEL_57;
      case 18:
        unint64_t v13 = 0xD000000000000015;
        uint64_t v15 = "flightReservation";
        goto LABEL_57;
      case 19:
        unint64_t v13 = 0x65526C61626F6C67;
        uint64_t v14 = 1953265011;
        goto LABEL_59;
      case 20:
        unint64_t v13 = 0x7469746E45707061;
        unint64_t v12 = 0xE900000000000079;
        break;
      case 21:
        unint64_t v13 = 0xD000000000000014;
        uint64_t v15 = "n";
        goto LABEL_57;
      case 22:
        unint64_t v13 = 0xD000000000000016;
        uint64_t v15 = "vehicleReservation";
LABEL_57:
        unint64_t v12 = (unint64_t)v15 | 0x8000000000000000;
        break;
      case 23:
        unint64_t v13 = 0x646574656B636974;
        uint64_t v14 = 2003789907;
LABEL_59:
        unint64_t v12 = v14 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
        break;
      case 24:
        unint64_t v13 = 0x6D746E696F707061;
        unint64_t v12 = 0xEB00000000746E65;
        break;
      case 25:
        unint64_t v13 = 0x7974726170;
        break;
      case 26:
        unint64_t v12 = 0xE400000000000000;
        unint64_t v13 = 1885958772;
        break;
      default:
        break;
    }
    if (v8 == v13 && v7 == v12)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return 1;
    }
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v18) {
      break;
    }
    if (v2 == v5)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return 1;
}

void one-time initialization function for allowedList()
{
  static PostProcessingFilter.allowedList = (uint64_t)&outlined read-only object #0 of one-time initialization function for allowedList;
}

uint64_t *PostProcessingFilter.allowedList.unsafeMutableAddressor()
{
  if (one-time initialization token for allowedList != -1) {
    swift_once();
  }
  return &static PostProcessingFilter.allowedList;
}

uint64_t static PostProcessingFilter.allowedList.getter()
{
  return static AnswerSynthesisController.supportedTypes.getter(&one-time initialization token for allowedList);
}

uint64_t static PostProcessingFilter.type.== infix(_:_:)()
{
  return 1;
}

void PostProcessingFilter.type.hash(into:)()
{
}

Swift::Int PostProcessingFilter.type.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t one-time initialization function for ruleFunctionMap()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  lazy protocol witness table accessor for type PostProcessingFilter.type and conformance PostProcessingFilter.type();
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  static PostProcessingFilter.ruleFunctionMap = result;
  return result;
}

uint64_t applySubStringMatchFiltering(answer:document:supportedDomain:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for SearchResult(0);
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_0_2();
  uint64_t v9 = String.count.getter();
  outlined init with copy of SearchResult(a3, (uint64_t)v8);
  if (v9 <= 7)
  {
    outlined destroy of SearchResult((uint64_t)v8);
LABEL_8:
    char v23 = 0;
    return v23 & 1;
  }
  SearchResultItem.type.getter((char *)&v27);
  char v10 = specialized Sequence<>.contains(_:)(v27._countAndFlagsBits, a4);
  outlined destroy of SearchResult((uint64_t)v8);
  if ((v10 & 1) == 0) {
    goto LABEL_8;
  }
  if (one-time initialization token for allowedList != -1) {
    swift_once();
  }
  uint64_t v11 = OUTLINED_FUNCTION_0_2();
  if (specialized Sequence<>.contains(_:)(v11, v12, v13)) {
    goto LABEL_8;
  }
  SearchResultItem.associatedValue.getter((uint64_t)&v27);
  uint64_t v14 = v28;
  uint64_t v15 = v29;
  __swift_project_boxed_opaque_existential_1(&v27, v28);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 48))(v14, v15);
  char v18 = v17;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v27);
  v19._countAndFlagsBits = v16;
  v19._object = v18;
  Swift::String v20 = normalizeText(_:)(v19);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = OUTLINED_FUNCTION_0_2();
  Swift::String v22 = normalizeText(_:)(v21);
  Swift::String v27 = v20;
  Swift::String v26 = v22;
  lazy protocol witness table accessor for type String and conformance String();
  LOBYTE(v16) = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v23 = v16 ^ 1;
  return v23 & 1;
}

uint64_t *PostProcessingFilter.ruleFunctionMap.unsafeMutableAddressor()
{
  if (one-time initialization token for ruleFunctionMap != -1) {
    swift_once();
  }
  return &static PostProcessingFilter.ruleFunctionMap;
}

uint64_t static PostProcessingFilter.ruleFunctionMap.getter()
{
  return static AnswerSynthesisController.supportedTypes.getter(&one-time initialization token for ruleFunctionMap);
}

uint64_t one-time initialization function for ruleDomainMap()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(PostProcessingFilter.type, [SearchResultKey])>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_258661700;
  *(void *)(inited + 32) = &outlined read-only object #0 of one-time initialization function for ruleDomainMap;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SearchResultKey]);
  lazy protocol witness table accessor for type PostProcessingFilter.type and conformance PostProcessingFilter.type();
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  static PostProcessingFilter.ruleDomainMap = result;
  return result;
}

uint64_t *PostProcessingFilter.ruleDomainMap.unsafeMutableAddressor()
{
  if (one-time initialization token for ruleDomainMap != -1) {
    swift_once();
  }
  return &static PostProcessingFilter.ruleDomainMap;
}

uint64_t static PostProcessingFilter.ruleDomainMap.getter()
{
  return static AnswerSynthesisController.supportedTypes.getter(&one-time initialization token for ruleDomainMap);
}

uint64_t PostProcessingFilter.apply(text:document:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v11)(unsigned __int8 *__return_ptr, void *, uint64_t, uint64_t *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  unsigned __int8 v21;
  uint64_t v22;
  void v23[2];

  uint64_t v4 = *(void *)(a4 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = one-time initialization token for ruleFunctionMap;
  swift_bridgeObjectRetain();
  if (v5 != -1) {
LABEL_17:
  }
    swift_once();
  for (uint64_t i = 0; ; ++i)
  {
    uint64_t v7 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_17;
    }
    uint64_t v8 = static PostProcessingFilter.ruleFunctionMap;
    if (*(void *)(static PostProcessingFilter.ruleFunctionMap + 16))
    {
      uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)();
      if (v10) {
        break;
      }
    }
LABEL_12:
    if (v7 == v4)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  uint64_t v11 = *(void (**)(unsigned __int8 *__return_ptr, void *, uint64_t, uint64_t *))(*(void *)(v8 + 56)
                                                                                           + 16 * v9);
  uint64_t v12 = one-time initialization token for ruleDomainMap;
  swift_retain();
  if (v12 != -1) {
    swift_once();
  }
  unint64_t v13 = static PostProcessingFilter.ruleDomainMap;
  if (!*(void *)(static PostProcessingFilter.ruleDomainMap + 16)
    || (uint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(), (v15 & 1) == 0))
  {
    swift_release();
    goto LABEL_12;
  }
  uint64_t v17 = *(void *)(*(void *)(v13 + 56) + 8 * v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23[0] = a1;
  v23[1] = a2;
  Swift::String v22 = v17;
  v11(&v21, v23, a3, &v22);
  swift_release();
  swift_bridgeObjectRelease();
  return v21;
}

Swift::String __swiftcall normalizeText(_:)(Swift::String a1)
{
  uint64_t v1 = type metadata accessor for CharacterSet();
  MEMORY[0x270FA5388](v1);
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  String.lowercased()();
  swift_bridgeObjectRelease();
  static CharacterSet.whitespacesAndNewlines.getter();
  uint64_t v2 = StringProtocol.trimmingCharacters(in:)();
  uint64_t v4 = v3;
  uint64_t v5 = OUTLINED_FUNCTION_0_2();
  v6(v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = v2;
  uint64_t v8 = v4;
  result._object = v8;
  result._countAndFlagsBits = v7;
  return result;
}

unint64_t lazy protocol witness table accessor for type PostProcessingFilter.type and conformance PostProcessingFilter.type()
{
  unint64_t result = lazy protocol witness table cache variable for type PostProcessingFilter.type and conformance PostProcessingFilter.type;
  if (!lazy protocol witness table cache variable for type PostProcessingFilter.type and conformance PostProcessingFilter.type)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PostProcessingFilter.type and conformance PostProcessingFilter.type);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PostProcessingFilter.type and conformance PostProcessingFilter.type;
  if (!lazy protocol witness table cache variable for type PostProcessingFilter.type and conformance PostProcessingFilter.type)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PostProcessingFilter.type and conformance PostProcessingFilter.type);
  }
  return result;
}

ValueMetadata *type metadata accessor for PostProcessingFilter()
{
  return &type metadata for PostProcessingFilter;
}

unsigned char *storeEnumTagSinglePayload for PostProcessingFilter.type(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x257EF9E84);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PostProcessingFilter.type()
{
  return &type metadata for PostProcessingFilter.type;
}

uint64_t OUTLINED_FUNCTION_0_2()
{
  return v0;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PQAVerificationRequest.userPrompt()()
{
  uint64_t v2 = *(void *)v0;
  uint64_t v1 = *(void **)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  _StringGuts.grow(_:)(28);
  v4._object = (void *)0x800000025867EA60;
  v4._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v4);
  long long v19 = *(_OWORD *)(v0 + 24);
  Swift::String v5 = PQAVerificationRequest.personalDataSources()();
  if (v6)
  {
    uint64_t v7 = swift_bridgeObjectRelease();
  }
  else
  {
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 8236;
    v9._object = (void *)0xE200000000000000;
    String.append(_:)(v9);
    v10._countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v11._countAndFlagsBits = v2;
    v11._object = v1;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 2108450;
    v12._object = (void *)0xE300000000000000;
    String.append(_:)(v12);
    v13._countAndFlagsBits = 0x3A22797265757122;
    v13._object = (void *)0xE900000000000022;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v14._countAndFlagsBits = v3;
    v14._object = (void *)v19;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 34;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0x22726577736E6122;
    v16._object = (void *)0xEA0000000000223ALL;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 125;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    uint64_t v7 = 123;
    uint64_t v8 = (void *)0xE100000000000000;
  }
  result._object = v8;
  result._countAndFlagsBits = v7;
  return result;
}

void __swiftcall PQAVerificationRequest.init(query:answer:personalDataSources:)(OmniSearch::PQAVerificationRequest *__return_ptr retstr, Swift::String query, Swift::String answer, Swift::OpaquePointer personalDataSources)
{
  retstr->query = query;
  retstr->answer = answer;
  retstr->personal_data_sources = personalDataSources;
}

uint64_t PQAVerificationRequest.query.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PQAVerificationRequest.query.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PQAVerificationRequest.query.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t PQAVerificationRequest.answer.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PQAVerificationRequest.answer.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*PQAVerificationRequest.answer.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t PQAVerificationRequest.personal_data_sources.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PQAVerificationRequest.personal_data_sources.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*PQAVerificationRequest.personal_data_sources.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PQAVerificationRequest.personalDataSources()()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v2 - 8);
  OUTLINED_FUNCTION_15();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = type metadata accessor for JSONEncoder.OutputFormatting();
  MEMORY[0x270FA5388](v6 - 8);
  OUTLINED_FUNCTION_15();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  static JSONEncoder.OutputFormatting.sortedKeys.getter();
  dispatch thunk of JSONEncoder.outputFormatting.setter();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : String]]);
  lazy protocol witness table accessor for type [[String : String]] and conformance <A> [A]();
  uint64_t v7 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v0)
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = v7;
    unint64_t v10 = v8;
    swift_bridgeObjectRelease();
    static String.Encoding.utf8.getter();
    uint64_t v11 = String.init(data:encoding:)();
    if (v12)
    {
      uint64_t v5 = v11;
      unint64_t v1 = v12;
      outlined consume of Data._Representation(v9, v10);
      swift_release();
    }
    else
    {
      outlined consume of Data._Representation(v9, v10);
      swift_release();
      uint64_t v5 = 0;
      unint64_t v1 = 0xE000000000000000;
    }
  }
  uint64_t v13 = v5;
  Swift::String v14 = (void *)v1;
  result._object = v14;
  result._countAndFlagsBits = v13;
  return result;
}

uint64_t PQAVerificationRequest.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7972657571 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x726577736E61 && a2 == 0xE600000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000015 && a2 == 0x800000025867DF10)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v7) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t PQAVerificationRequest.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x7972657571;
  }
  if (a1 == 1) {
    return 0x726577736E61;
  }
  return 0xD000000000000015;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PQAVerificationRequest.CodingKeys()
{
  return PQAVerificationRequest.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PQAVerificationRequest.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PQAVerificationRequest.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PQAVerificationRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PQAVerificationRequest.CodingKeys and conformance PQAVerificationRequest.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PQAVerificationRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PQAVerificationRequest.CodingKeys and conformance PQAVerificationRequest.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t PQAVerificationRequest.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PQAVerificationRequest.CodingKeys>);
  OUTLINED_FUNCTION_1();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_15();
  uint64_t v8 = v7 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PQAVerificationRequest.CodingKeys and conformance PQAVerificationRequest.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v10)
  {
    KeyedEncodingContainer.encode(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : String]]);
    lazy protocol witness table accessor for type [[String : String]] and conformance <A> [A]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
}

uint64_t PQAVerificationRequest.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PQAVerificationRequest.CodingKeys>);
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_15();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PQAVerificationRequest.CodingKeys and conformance PQAVerificationRequest.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v8 = v7;
  uint64_t v16 = v6;
  swift_bridgeObjectRetain();
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v15 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : String]]);
  lazy protocol witness table accessor for type [[String : String]] and conformance <A> [A]();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v12 = OUTLINED_FUNCTION_1_6();
  v13(v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a2 = v16;
  a2[1] = v8;
  a2[2] = v15;
  a2[3] = v11;
  a2[4] = v17;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PQAVerificationRequest@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return PQAVerificationRequest.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PQAVerificationRequest(void *a1)
{
  return PQAVerificationRequest.encode(to:)(a1);
}

uint64_t static String._createEmpty(withInitialCapacity:)(Swift::Int a1)
{
  if (a1 < 16) {
    return 0;
  }
  _StringGuts.grow(_:)(a1);
  return 0;
}

unint64_t lazy protocol witness table accessor for type PQAVerificationRequest.CodingKeys and conformance PQAVerificationRequest.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PQAVerificationRequest.CodingKeys and conformance PQAVerificationRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type PQAVerificationRequest.CodingKeys and conformance PQAVerificationRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PQAVerificationRequest.CodingKeys and conformance PQAVerificationRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PQAVerificationRequest.CodingKeys and conformance PQAVerificationRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type PQAVerificationRequest.CodingKeys and conformance PQAVerificationRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PQAVerificationRequest.CodingKeys and conformance PQAVerificationRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PQAVerificationRequest.CodingKeys and conformance PQAVerificationRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type PQAVerificationRequest.CodingKeys and conformance PQAVerificationRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PQAVerificationRequest.CodingKeys and conformance PQAVerificationRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PQAVerificationRequest.CodingKeys and conformance PQAVerificationRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type PQAVerificationRequest.CodingKeys and conformance PQAVerificationRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PQAVerificationRequest.CodingKeys and conformance PQAVerificationRequest.CodingKeys);
  }
  return result;
}

uint64_t destroy for PQAVerificationRequest()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PQAVerificationRequest(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PQAVerificationRequest(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PQAVerificationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for PQAVerificationRequest()
{
  return &type metadata for PQAVerificationRequest;
}

unsigned char *storeEnumTagSinglePayload for PQAVerificationRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x257EFAD84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PQAVerificationRequest.CodingKeys()
{
  return &unk_2706A9710;
}

uint64_t OUTLINED_FUNCTION_1_6()
{
  return v0;
}

Swift::OpaquePointer *kMediaRegexTriggersPerLang.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaRegexTriggersPerLang != -1) {
    swift_once();
  }
  return &kMediaRegexTriggersPerLang;
}

Swift::OpaquePointer *kMediaURLTriggers.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaURLTriggers != -1) {
    swift_once();
  }
  return &kMediaURLTriggers;
}

void *one-time initialization function for kMediaRegexTriggersPerLang()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<Substring>);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  int v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Regex<Substring>)>);
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Regex<Substring>))
                 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_258661700;
  uint64_t v7 = (void *)(v6 + v5);
  *uint64_t v7 = 28261;
  v7[1] = 0xE200000000000000;
  Regex.init(_regexString:version:)();
  Regex.ignoresCase(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  unint64_t result = (void *)Dictionary.init(dictionaryLiteral:)();
  kMediaRegexTriggersPerLang._rawValue = result;
  return result;
}

uint64_t one-time initialization function for kMediaURLTriggers()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Regex<(Substring, Substring)>>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring)>);
  uint64_t v0 = (_OWORD *)swift_allocObject();
  v0[1] = xmmword_258662FD0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Substring, Substring));
  Regex.init(_regexString:version:)();
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_0_3();
  uint64_t result = OUTLINED_FUNCTION_0_3();
  kMediaURLTriggers._rawValue = v0;
  return result;
}

uint64_t OUTLINED_FUNCTION_0_3()
{
  return Regex.init(_regexString:version:)();
}

uint64_t OUTLINED_FUNCTION_1_7()
{
  return Regex.init(_regexString:version:)();
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(*(void *)(a3 + 56) + 16 * v4);
  swift_bridgeObjectRetain();
  return v6;
}

{
  char v3;

  if (*(void *)(a3 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v3 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

{
  unint64_t v4;
  char v5;

  if (*(void *)(a3 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v5 & 1) != 0)) {
    return *(unsigned __int8 *)(*(void *)(a3 + 56) + v4);
  }
  else {
    return 4;
  }
}

uint64_t specialized Dictionary.subscript.getter@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    unint64_t v7 = v5;
    uint64_t v8 = *(void *)(a2 + 56);
    uint64_t v9 = type metadata accessor for DisplayRepresentation();
    OUTLINED_FUNCTION_7_2();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 16))(a3, v8 + *(void *)(v10 + 72) * v7, v9);
    uint64_t v11 = a3;
    uint64_t v12 = 0;
    uint64_t v13 = 1;
    uint64_t v14 = v9;
  }
  else
  {
    type metadata accessor for DisplayRepresentation();
    OUTLINED_FUNCTION_46_1();
  }
  return __swift_storeEnumTagSinglePayload(v11, v12, v13, v14);
}

uint64_t specialized Dictionary.subscript.getter(char a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1), (v2 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

void *specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  char v6 = *(void **)(*(void *)(a3 + 56) + 8 * v4);
  id v7 = v6;
  return v6;
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(a2 + 56) + 32 * v5;
    outlined init with copy of Any(v7, (uint64_t)a3);
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

{
  unint64_t v5;
  char v6;
  uint64_t v7;
  double result;
  uint64_t vars8;

  if (*(void *)(a2 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(a2 + 56) + 32 * v5;
    outlined init with copy of Any(v7, (uint64_t)a3);
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

id specialized Dictionary.subscript.getter(char a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1 & 1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + 56) + 16 * v3;
  id v6 = *(id *)v5;
  outlined copy of Result<[SearchResult], Error>(*(id *)v5, *(unsigned char *)(v5 + 8));
  return v6;
}

void ExtractedInfo.buildAnswerResult()()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v64 = v5;
  type metadata accessor for Date.FormatStyle();
  OUTLINED_FUNCTION_1();
  uint64_t v60 = v7;
  uint64_t v61 = v6;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_184_0();
  uint64_t v58 = v8;
  OUTLINED_FUNCTION_26_8();
  uint64_t v59 = type metadata accessor for Date();
  OUTLINED_FUNCTION_1();
  uint64_t v57 = v9;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_184_0();
  uint64_t v56 = v11;
  OUTLINED_FUNCTION_26_8();
  uint64_t v62 = type metadata accessor for URL();
  OUTLINED_FUNCTION_1();
  uint64_t v55 = v12;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_184_0();
  uint64_t v54 = v14;
  uint64_t v15 = OUTLINED_FUNCTION_26_8();
  type metadata accessor for ExtractedType(v15);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_18_8();
  uint64_t v17 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_1();
  uint64_t v19 = v18;
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_15();
  uint64_t v23 = v22 - v21;
  uint64_t v24 = type metadata accessor for ExtractedInfo(0);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_21_7();
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Answer?);
  uint64_t v27 = OUTLINED_FUNCTION_81(v26);
  MEMORY[0x270FA5388](v27);
  uint64_t v28 = OUTLINED_FUNCTION_14_8();
  uint64_t v29 = (int *)type metadata accessor for Answer(v28);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_59_0();
  SearchResultItem.associatedValue.getter((uint64_t)&v68);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SearchItem);
  int v31 = swift_dynamicCast();
  __swift_storeEnumTagSinglePayload(v0, v31 ^ 1u, 1, (uint64_t)v29);
  uint64_t v63 = v1;
  _s10OmniSearch13ExtractedInfoVWOcTm_0(v1, v4, (void (*)(void))type metadata accessor for ExtractedInfo);
  if (__swift_getEnumTagSinglePayload(v0, 1, (uint64_t)v29) == 1)
  {
    UUID.init()();
    uint64_t v32 = UUID.uuidString.getter();
    uint64_t v53 = v33;
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v23, v17);
    uint64_t v34 = Dictionary.init(dictionaryLiteral:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SearchResult>);
    uint64_t v35 = *(void *)(type metadata accessor for SearchResult(0) - 8);
    unint64_t v36 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
    uint64_t v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = xmmword_258661700;
    _s10OmniSearch13ExtractedInfoVWOcTm_0(v4, v37 + v36, (void (*)(void))type metadata accessor for SearchResult);
    _s10OmniSearch13ExtractedInfoVWOhTm_0(v4, (void (*)(void))type metadata accessor for ExtractedInfo);
    OUTLINED_FUNCTION_46_1();
    uint64_t v38 = v62;
    __swift_storeEnumTagSinglePayload(v39, v40, v41, v62);
    *char v2 = v32;
    v2[1] = v53;
    v2[2] = 0;
    v2[3] = 0xE000000000000000;
    v2[4] = v34;
    v2[5] = v37;
    v2[6] = MEMORY[0x263F8EE78];
    *((unsigned char *)v2 + v29[10]) = 0;
    uint64_t v42 = (uint64_t *)((char *)v2 + v29[11]);
    void *v42 = 0;
    v42[1] = 0;
    outlined destroy of SearchResult?(v0, &demangling cache variable for type metadata for Answer?);
  }
  else
  {
    _s10OmniSearch13ExtractedInfoVWOhTm_0(v4, (void (*)(void))type metadata accessor for ExtractedInfo);
    outlined init with take of Answer(v0, (uint64_t)v2, (void (*)(void))type metadata accessor for Answer);
    uint64_t v38 = v62;
  }
  _s10OmniSearch13ExtractedInfoVWOcTm_0(v63 + *(int *)(v24 + 20), (uint64_t)v3, (void (*)(void))type metadata accessor for ExtractedType);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v55 + 32))(v54, v3, v38);
      uint64_t v45 = (uint64_t)v2 + v29[9];
      outlined destroy of SearchResult?(v45, &demangling cache variable for type metadata for URL?);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v45, v54, v38);
      __swift_storeEnumTagSinglePayload(v45, 0, 1, v38);
      uint64_t v43 = URL.absoluteString.getter();
      uint64_t v44 = v46;
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v38);
      goto LABEL_10;
    case 2u:
      _s10OmniSearch13ExtractedInfoVWOhTm_0((uint64_t)v3, (void (*)(void))type metadata accessor for ExtractedType);
      goto LABEL_8;
    case 4u:
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v57 + 32))(v56, v3, v59);
      static LLMFormatter.dateTimeFormatter.getter();
      lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle((unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle, MEMORY[0x263F07258]);
      Date.formatted<A>(_:)();
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v58, v61);
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v59);
      uint64_t v43 = v66;
      uint64_t v44 = v67;
      goto LABEL_10;
    case 5u:
LABEL_8:
      _s10OmniSearch13ExtractedInfoVWOcTm_0(v63, v64, (void (*)(void))type metadata accessor for SearchResult);
      break;
    default:
      uint64_t v43 = *v3;
      uint64_t v44 = v3[1];
LABEL_10:
      OUTLINED_FUNCTION_0_1();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_isUniquelyReferenced_nonNull_native();
      uint64_t v65 = v2[4];
      v2[4] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
      v2[4] = v65;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v47 = v2[3];
      uint64_t v48 = v2[2] & 0xFFFFFFFFFFFFLL;
      if ((v47 & 0x2000000000000000) != 0) {
        uint64_t v48 = HIBYTE(v47) & 0xF;
      }
      if (v48)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v2[2] = v43;
        v2[3] = v44;
      }
      _s10OmniSearch13ExtractedInfoVWOcTm_0((uint64_t)v2, v64, (void (*)(void))type metadata accessor for Answer);
      type metadata accessor for SearchResultItem(0);
      swift_storeEnumTagMultiPayload();
      uint64_t v49 = type metadata accessor for SearchResult(0);
      uint64_t v50 = *(void **)(v63 + *(int *)(v49 + 20));
      uint64_t v51 = (void *)(v64 + *(int *)(v49 + 24));
      void *v51 = 0;
      v51[1] = 0;
      *(void *)(v64 + *(int *)(v49 + 20)) = v50;
      id v52 = v50;
      break;
  }
  _s10OmniSearch13ExtractedInfoVWOhTm_0((uint64_t)v2, (void (*)(void))type metadata accessor for Answer);
  OUTLINED_FUNCTION_119_0();
}

void ExtractedInfo.updateResultWith(_:)()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v45 = v0;
  uint64_t v3 = v2;
  uint64_t v47 = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Answer?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_184_0();
  uint64_t v43 = v7;
  uint64_t v8 = OUTLINED_FUNCTION_26_8();
  uint64_t v44 = type metadata accessor for Answer(v8);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_21_7();
  uint64_t v10 = type metadata accessor for SearchResult(0);
  OUTLINED_FUNCTION_7_2();
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v46 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v41 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResultItem?);
  uint64_t v17 = OUTLINED_FUNCTION_81(v16);
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_15();
  uint64_t v20 = v19 - v18;
  uint64_t v21 = type metadata accessor for SearchResultItem(0);
  OUTLINED_FUNCTION_7_2();
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v41 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v41 - v26;
  uint64_t v28 = type metadata accessor for ResolvedInfo();
  outlined init with copy of SearchResultItem?(v3 + *(int *)(v28 + 20), v20, &demangling cache variable for type metadata for SearchResultItem?);
  if (__swift_getEnumTagSinglePayload(v20, 1, v21) != 1)
  {
    outlined init with take of Answer(v20, (uint64_t)v27, (void (*)(void))type metadata accessor for SearchResultItem);
    _s10OmniSearch13ExtractedInfoVWOcTm_0(v45, (uint64_t)v15, (void (*)(void))type metadata accessor for SearchResult);
    outlined assign with take of SearchResultItem((uint64_t)v27, (uint64_t)v15);
    uint64_t v40 = (uint64_t)v15;
LABEL_6:
    outlined init with take of Answer(v40, v47, (void (*)(void))type metadata accessor for SearchResult);
    goto LABEL_7;
  }
  uint64_t v29 = v28;
  uint64_t v41 = v25;
  uint64_t v42 = v10;
  outlined destroy of SearchResult?(v20, &demangling cache variable for type metadata for SearchResultItem?);
  ExtractedInfo.buildAnswerResult()();
  SearchResultItem.associatedValue.getter((uint64_t)v49);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SearchItem);
  uint64_t v30 = v43;
  if (!swift_dynamicCast())
  {
    OUTLINED_FUNCTION_6_6(v30, 1);
    outlined destroy of SearchResult?(v30, &demangling cache variable for type metadata for Answer?);
    uint64_t v40 = (uint64_t)v46;
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_6_6(v30, 0);
  outlined init with take of Answer(v30, v1, (void (*)(void))type metadata accessor for Answer);
  uint64_t v31 = *(void *)(v3 + *(int *)(v28 + 24));
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v49[0] = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v31, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, v49);
  *(void *)(v1 + 32) = v49[0];
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_1();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_isUniquelyReferenced_nonNull_native();
  uint64_t v48 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  *(void *)(v1 + 32) = v48;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v33 = *(void *)(v3 + *(int *)(v29 + 32));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = v33;
  outlined assign with copy of URL?(v3 + *(int *)(v29 + 28), v1 + *(int *)(v44 + 36));
  uint64_t v34 = (uint64_t)v41;
  _s10OmniSearch13ExtractedInfoVWOcTm_0(v1, (uint64_t)v41, (void (*)(void))type metadata accessor for Answer);
  swift_storeEnumTagMultiPayload();
  uint64_t v35 = v42;
  uint64_t v36 = (uint64_t)v46;
  id v37 = *(id *)&v46[*(int *)(v42 + 20)];
  _s10OmniSearch13ExtractedInfoVWOhTm_0(v36, (void (*)(void))type metadata accessor for SearchResult);
  uint64_t v38 = v47;
  uint64_t v39 = (void *)(v47 + *(int *)(v35 + 24));
  *uint64_t v39 = 0;
  v39[1] = 0;
  outlined init with take of Answer(v34, v38, (void (*)(void))type metadata accessor for SearchResultItem);
  *(void *)(v38 + *(int *)(v35 + 20)) = v37;
  _s10OmniSearch13ExtractedInfoVWOhTm_0(v1, (void (*)(void))type metadata accessor for Answer);
LABEL_7:
  OUTLINED_FUNCTION_119_0();
}

uint64_t default argument 2 of ResolvedInfo.init(answer:updatedItem:metadata:extractedMediaURL:experiences:)()
{
  return MEMORY[0x263F8EE80];
}

uint64_t default argument 4 of ResolvedInfo.init(answer:updatedItem:metadata:extractedMediaURL:experiences:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t ResolvedInfo.init(answer:updatedItem:metadata:extractedMediaURL:experiences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  *a7 = a1;
  a7[1] = a2;
  uint64_t v12 = (int *)type metadata accessor for ResolvedInfo();
  outlined init with take of SearchResultItem?(a3, (uint64_t)a7 + v12[5], &demangling cache variable for type metadata for SearchResultItem?);
  *(void *)((char *)a7 + v12[6]) = a4;
  uint64_t result = outlined init with take of SearchResultItem?(a5, (uint64_t)a7 + v12[7], &demangling cache variable for type metadata for URL?);
  *(void *)((char *)a7 + v12[8]) = a6;
  return result;
}

uint64_t *ResolvedInfo.kResolvedAnswerKey.unsafeMutableAddressor()
{
  return &static ResolvedInfo.kResolvedAnswerKey;
}

uint64_t static ResolvedInfo.kResolvedAnswerKey.getter()
{
  return OUTLINED_FUNCTION_16_9(&static ResolvedInfo.kResolvedAnswerKey);
}

uint64_t static ResolvedInfo.kResolvedAnswerKey.setter(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_15_7(a1, a2, &static ResolvedInfo.kResolvedAnswerKey);
}

uint64_t (*static ResolvedInfo.kResolvedAnswerKey.modify())()
{
  return protocol witness for _ClientInfoProtocol.trackingConfig.modify in conformance AnswerSynthesisModelOnDevice._ClientInfo;
}

uint64_t ResolvedInfo.answer.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ResolvedInfo.answer.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ResolvedInfo.answer.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t ResolvedInfo.updatedItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ResolvedInfo();
  return outlined init with copy of SearchResultItem?(v1 + *(int *)(v3 + 20), a1, &demangling cache variable for type metadata for SearchResultItem?);
}

uint64_t ResolvedInfo.updatedItem.setter()
{
  uint64_t v2 = OUTLINED_FUNCTION_8_4();
  return outlined assign with take of SearchResultItem?(v0, v1 + *(int *)(v2 + 20), &demangling cache variable for type metadata for SearchResultItem?);
}

uint64_t (*ResolvedInfo.updatedItem.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t ResolvedInfo.metadata.getter()
{
  type metadata accessor for ResolvedInfo();
  return swift_bridgeObjectRetain();
}

uint64_t ResolvedInfo.metadata.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_8_4() + 24);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v2) = v0;
  return result;
}

uint64_t (*ResolvedInfo.metadata.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t ResolvedInfo.extractedMediaURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ResolvedInfo();
  return outlined init with copy of SearchResultItem?(v1 + *(int *)(v3 + 28), a1, &demangling cache variable for type metadata for URL?);
}

uint64_t ResolvedInfo.extractedMediaURL.setter()
{
  uint64_t v2 = OUTLINED_FUNCTION_8_4();
  return outlined assign with take of SearchResultItem?(v0, v1 + *(int *)(v2 + 28), &demangling cache variable for type metadata for URL?);
}

uint64_t (*ResolvedInfo.extractedMediaURL.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t ResolvedInfo.experiences.getter()
{
  type metadata accessor for ResolvedInfo();
  return swift_bridgeObjectRetain();
}

uint64_t ResolvedInfo.experiences.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_8_4() + 32);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v2) = v0;
  return result;
}

uint64_t (*ResolvedInfo.experiences.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t ResolvedInfo.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  uint64_t v2 = type metadata accessor for ResolvedInfo();
  uint64_t v3 = type metadata accessor for SearchResultItem(0);
  OUTLINED_FUNCTION_25_7(v3);
  *(void *)((char *)a1 + *(int *)(v2 + 24)) = MEMORY[0x263F8EE80];
  uint64_t v4 = type metadata accessor for URL();
  uint64_t result = OUTLINED_FUNCTION_25_7(v4);
  *(void *)((char *)a1 + *(int *)(v2 + 32)) = MEMORY[0x263F8EE78];
  return result;
}

uint64_t default argument 0 of ResolvedInfo.init(answer:updatedItem:metadata:extractedMediaURL:experiences:)()
{
  return 0;
}

char *ExtractedInfo.kExtractedInfoKey.unsafeMutableAddressor()
{
  return static ExtractedInfo.kExtractedInfoKey;
}

uint64_t static ExtractedInfo.kExtractedInfoKey.getter()
{
  return OUTLINED_FUNCTION_16_9((uint64_t *)static ExtractedInfo.kExtractedInfoKey);
}

uint64_t static ResolvedInfo.kResolvedAnswerKey.getter(uint64_t *a1)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v2 = *a1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t static ExtractedInfo.kExtractedInfoKey.setter(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_15_7(a1, a2, static ExtractedInfo.kExtractedInfoKey);
}

uint64_t static ResolvedInfo.kResolvedAnswerKey.setter(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  *a3 = a1;
  *a4 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static ExtractedInfo.kExtractedInfoKey.modify())()
{
  return AnswerSynthesisModelOnDevice.modelVersion.modify;
}

uint64_t SearchResult.answer.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Answer?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_13_10();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SearchItem);
  type metadata accessor for Answer(0);
  if (OUTLINED_FUNCTION_12_6())
  {
    OUTLINED_FUNCTION_6_6(v0, 0);
    uint64_t v3 = *(void *)(v0 + 16);
    swift_bridgeObjectRetain();
    _s10OmniSearch13ExtractedInfoVWOhTm_0(v0, (void (*)(void))type metadata accessor for Answer);
  }
  else
  {
    OUTLINED_FUNCTION_6_6(v0, 1);
    outlined destroy of SearchResult?(v0, &demangling cache variable for type metadata for Answer?);
    return 0;
  }
  return v3;
}

uint64_t SearchResult.dialog.getter()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Answer?);
  uint64_t v3 = OUTLINED_FUNCTION_81(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_13_10();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SearchItem);
  type metadata accessor for Answer(0);
  if (OUTLINED_FUNCTION_12_6())
  {
    OUTLINED_FUNCTION_6_6(v0, 0);
    uint64_t v4 = *(void *)(v0 + *(int *)(v1 + 44));
    swift_bridgeObjectRetain();
    _s10OmniSearch13ExtractedInfoVWOhTm_0(v0, (void (*)(void))type metadata accessor for Answer);
  }
  else
  {
    OUTLINED_FUNCTION_6_6(v0, 1);
    outlined destroy of SearchResult?(v0, &demangling cache variable for type metadata for Answer?);
    return 0;
  }
  return v4;
}

uint64_t SearchResult.resolvedAnswer.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Answer?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_16();
  uint64_t v3 = type metadata accessor for Answer(0);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  SearchResultItem.associatedValue.getter((uint64_t)v16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SearchItem);
  if (swift_dynamicCast())
  {
    __swift_storeEnumTagSinglePayload(v0, 0, 1, v3);
    outlined init with take of Answer(v0, (uint64_t)v6, (void (*)(void))type metadata accessor for Answer);
    uint64_t v7 = *((void *)v6 + 4);
    OUTLINED_FUNCTION_0_1();
    uint64_t v8 = static ResolvedInfo.kResolvedAnswerKey;
    uint64_t v9 = unk_26A0609E8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v10 = specialized Dictionary.subscript.getter(v8, v9, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s10OmniSearch13ExtractedInfoVWOhTm_0((uint64_t)v6, (void (*)(void))type metadata accessor for Answer);
  }
  else
  {
    OUTLINED_FUNCTION_46_1();
    __swift_storeEnumTagSinglePayload(v11, v12, v13, v3);
    outlined destroy of SearchResult?(v0, &demangling cache variable for type metadata for Answer?);
    return 0;
  }
  return v10;
}

void SearchResult.isResolved.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v4 = type metadata accessor for JSONDecodingOptions();
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_16();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
  uint64_t v7 = OUTLINED_FUNCTION_81(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_59_0();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightSnippet.Flight?);
  uint64_t v9 = OUTLINED_FUNCTION_81(v8);
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = OUTLINED_FUNCTION_14_8();
  uint64_t v11 = type metadata accessor for SearchResult(v10);
  uint64_t v12 = OUTLINED_FUNCTION_81(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_18_8();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Answer?);
  uint64_t v14 = OUTLINED_FUNCTION_81(v13);
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_15();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = type metadata accessor for Answer(0);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_15();
  uint64_t v22 = v21 - v20;
  SearchResultItem.associatedValue.getter((uint64_t)v36);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SearchItem);
  if (swift_dynamicCast())
  {
    __swift_storeEnumTagSinglePayload(v17, 0, 1, v18);
    outlined init with take of Answer(v17, v22, (void (*)(void))type metadata accessor for Answer);
    uint64_t v23 = *(void *)(v22 + 32);
    OUTLINED_FUNCTION_0_1();
    uint64_t v25 = static ResolvedInfo.kResolvedAnswerKey;
    uint64_t v24 = unk_26A0609E8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.getter(v25, v24, v23);
    uint64_t v27 = v26;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s10OmniSearch13ExtractedInfoVWOhTm_0(v22, (void (*)(void))type metadata accessor for Answer);
    swift_bridgeObjectRelease();
    _s10OmniSearch13ExtractedInfoVWOcTm_0(v1, v3, (void (*)(void))type metadata accessor for SearchResult);
    if (v27)
    {
      _s10OmniSearch13ExtractedInfoVWOhTm_0(v3, (void (*)(void))type metadata accessor for SearchResult);
      goto LABEL_12;
    }
  }
  else
  {
    OUTLINED_FUNCTION_46_1();
    __swift_storeEnumTagSinglePayload(v28, v29, v30, v18);
    outlined destroy of SearchResult?(v17, &demangling cache variable for type metadata for Answer?);
    _s10OmniSearch13ExtractedInfoVWOcTm_0(v1, v3, (void (*)(void))type metadata accessor for SearchResult);
  }
  SearchResultItem.associatedValue.getter((uint64_t)v36);
  uint64_t v31 = type metadata accessor for FlightReservation(0);
  if (swift_dynamicCast())
  {
    OUTLINED_FUNCTION_6_6(v2, 0);
    if (*(void *)(v2 + *(int *)(v31 + 188) + 8))
    {
      uint64_t v32 = type metadata accessor for FlightSnippet.Flight(0);
      swift_bridgeObjectRetain();
      JSONDecodingOptions.init()();
      lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle((unint64_t *)&lazy protocol witness table cache variable for type FlightSnippet.Flight and conformance FlightSnippet.Flight, (void (*)(uint64_t))type metadata accessor for FlightSnippet.Flight);
      Message.init(jsonString:options:)();
      uint64_t v34 = v0;
      uint64_t v35 = 0;
    }
    else
    {
      uint64_t v32 = type metadata accessor for FlightSnippet.Flight(0);
      uint64_t v34 = v0;
      uint64_t v35 = 1;
    }
    OUTLINED_FUNCTION_6_6(v34, v35);
    _s10OmniSearch13ExtractedInfoVWOhTm_0(v3, (void (*)(void))type metadata accessor for SearchResult);
    _s10OmniSearch13ExtractedInfoVWOhTm_0(v2, (void (*)(void))type metadata accessor for FlightReservation);
    type metadata accessor for FlightSnippet.Flight(0);
    __swift_getEnumTagSinglePayload(v0, 1, v32);
  }
  else
  {
    OUTLINED_FUNCTION_6_6(v2, 1);
    _s10OmniSearch13ExtractedInfoVWOhTm_0(v3, (void (*)(void))type metadata accessor for SearchResult);
    outlined destroy of SearchResult?(v2, (uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
    uint64_t v33 = type metadata accessor for FlightSnippet.Flight(0);
    __swift_storeEnumTagSinglePayload(v0, 1, 1, v33);
  }
  outlined destroy of SearchResult?(v0, &demangling cache variable for type metadata for FlightSnippet.Flight?);
LABEL_12:
  OUTLINED_FUNCTION_119_0();
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v1 = v0;
  char v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  Swift::Int v12 = *v0;
  specialized __RawDictionaryStorage.find<A>(_:)(v6, v4);
  OUTLINED_FUNCTION_5_6();
  if (v15)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v16 = v13;
  char v17 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v3 & 1, v12))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v7, v5);
    OUTLINED_FUNCTION_11_7();
    if (!v19) {
      goto LABEL_12;
    }
    unint64_t v16 = v18;
  }
  uint64_t v20 = (void *)*v1;
  if (v17)
  {
    uint64_t v21 = (uint64_t *)(v20[7] + 16 * v16);
    swift_bridgeObjectRelease();
    uint64_t *v21 = v11;
    v21[1] = v9;
    OUTLINED_FUNCTION_119_0();
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, v7, v5, v11, v9, v20);
    OUTLINED_FUNCTION_119_0();
    swift_bridgeObjectRetain();
  }
}

uint64_t _s10OmniSearch13ExtractedInfoVWOcTm_0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_7_2();
  uint64_t v4 = OUTLINED_FUNCTION_210();
  v5(v4);
  return a2;
}

uint64_t type metadata accessor for ResolvedInfo()
{
  uint64_t result = type metadata singleton initialization cache for ResolvedInfo;
  if (!type metadata singleton initialization cache for ResolvedInfo) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, char a3, char a4)
{
  uint64_t v5 = v4;
  char v9 = a3 & 1;
  Swift::Int v10 = *v4;
  specialized __RawDictionaryStorage.find<A>(_:)(a3 & 1);
  OUTLINED_FUNCTION_5_6();
  if (v13)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  uint64_t v14 = v11;
  char v15 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<GlobalSearchClient.QueryType, Result<[SearchResult], Error>>);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v10))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v9);
    OUTLINED_FUNCTION_11_7();
    if (!v17) {
      goto LABEL_12;
    }
    uint64_t v14 = v16;
  }
  if (v15)
  {
    uint64_t v18 = *(void *)(*v5 + 56) + 16 * v14;
    outlined consume of Result<[SearchResult], Error>(*(id *)v18, *(unsigned char *)(v18 + 8));
    *(void *)uint64_t v18 = a1;
    *(unsigned char *)(v18 + 8) = (a2 & 1) != 0;
    OUTLINED_FUNCTION_141_0();
  }
  else
  {
    OUTLINED_FUNCTION_141_0();
    specialized _NativeDictionary._insert(at:key:value:)(v19, v20, v21, v22, v23);
  }
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_7_9(a1, a2, a3);
  OUTLINED_FUNCTION_5_6();
  if (v9)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  uint64_t v10 = v7;
  char v11 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [String]>);
  if (OUTLINED_FUNCTION_31_4())
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v5, v4);
    OUTLINED_FUNCTION_11_7();
    if (!v13) {
      goto LABEL_12;
    }
    uint64_t v10 = v12;
  }
  if (v11)
  {
    uint64_t v14 = *(void *)(*(void *)v6 + 56);
    swift_bridgeObjectRelease();
    *(void *)(v14 + 8 * v10) = v3;
    OUTLINED_FUNCTION_141_0();
  }
  else
  {
    unint64_t v15 = OUTLINED_FUNCTION_32_4();
    specialized _NativeDictionary._insert(at:key:value:)(v15, v16, v17, v18, v19);
    OUTLINED_FUNCTION_141_0();
    swift_bridgeObjectRetain();
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_7_9(a1, a2, a3);
  OUTLINED_FUNCTION_5_6();
  if (v9)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  uint64_t v10 = v7;
  char v11 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, CSSearchableItem>);
  if (OUTLINED_FUNCTION_31_4())
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v5, v4);
    OUTLINED_FUNCTION_11_7();
    if (!v13) {
      goto LABEL_12;
    }
    uint64_t v10 = v12;
  }
  if (v11)
  {
    uint64_t v14 = *(void *)(*(void *)v6 + 56);

    *(void *)(v14 + 8 * v10) = v3;
    OUTLINED_FUNCTION_141_0();
  }
  else
  {
    unint64_t v15 = OUTLINED_FUNCTION_32_4();
    specialized _NativeDictionary._insert(at:key:value:)(v15, v16, v17, v18, v19);
    OUTLINED_FUNCTION_141_0();
    swift_bridgeObjectRetain();
  }
}

uint64_t specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = a4;
  a1[1] = a5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  specialized LazyMapSequence.makeIterator()(a1, a2, a3, &v35);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = specialized LazyMapSequence.Iterator.next()();
  if (v8)
  {
    uint64_t v11 = v7;
    uint64_t v12 = v8;
    uint64_t v13 = v9;
    uint64_t v14 = v10;
    while (1)
    {
      unint64_t v15 = (void *)*a5;
      unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
      uint64_t v18 = v15[2];
      BOOL v19 = (v16 & 1) == 0;
      uint64_t v20 = v18 + v19;
      if (__OFADD__(v18, v19)) {
        break;
      }
      char v21 = v16;
      if (v15[3] >= v20)
      {
        if ((a4 & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, a4 & 1);
        unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
        if ((v21 & 1) != (v23 & 1)) {
          goto LABEL_17;
        }
        unint64_t v17 = v22;
      }
      uint64_t v24 = (void *)*a5;
      if (v21)
      {
        swift_bridgeObjectRelease();
        uint64_t v25 = (void *)(v24[7] + 16 * v17);
        swift_bridgeObjectRelease();
        *uint64_t v25 = v13;
        v25[1] = v14;
      }
      else
      {
        v24[(v17 >> 6) + 8] |= 1 << v17;
        uint64_t v26 = (uint64_t *)(v24[6] + 16 * v17);
        uint64_t *v26 = v11;
        v26[1] = v12;
        uint64_t v27 = (void *)(v24[7] + 16 * v17);
        *uint64_t v27 = v13;
        v27[1] = v14;
        uint64_t v28 = v24[2];
        BOOL v29 = __OFADD__(v28, 1);
        uint64_t v30 = v28 + 1;
        if (v29) {
          goto LABEL_16;
        }
        v24[2] = v30;
      }
      uint64_t v11 = specialized LazyMapSequence.Iterator.next()();
      uint64_t v12 = v31;
      uint64_t v13 = v32;
      uint64_t v14 = v33;
      a4 = 1;
      if (!v31) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of [String : String].Iterator._Variant();
    return swift_release();
  }
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(v7, *a1, a1[1], a1[2], a1[3]);
  uint64_t v4 = v7[0];
  uint64_t v5 = v7[1];
  *a2 = result;
  a2[1] = v6;
  a2[2] = v4;
  a2[3] = v5;
  return result;
}

uint64_t outlined assign with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Answer(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_7_2();
  uint64_t v4 = OUTLINED_FUNCTION_211();
  v5(v4);
  return a2;
}

uint64_t outlined assign with take of SearchResultItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchResultItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of SearchResultItem?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  OUTLINED_FUNCTION_22_9(a1, a2, a3);
  OUTLINED_FUNCTION_7_2();
  uint64_t v4 = OUTLINED_FUNCTION_211();
  v5(v4);
  return v3;
}

uint64_t outlined init with copy of SearchResultItem?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  OUTLINED_FUNCTION_22_9(a1, a2, a3);
  OUTLINED_FUNCTION_7_2();
  uint64_t v4 = OUTLINED_FUNCTION_210();
  v5(v4);
  return v3;
}

uint64_t outlined assign with take of SearchResultItem?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  OUTLINED_FUNCTION_22_9(a1, a2, a3);
  OUTLINED_FUNCTION_7_2();
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v3, v4);
  return v3;
}

uint64_t lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ResolvedInfo(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (void *)((char *)a1 + v8);
    uint64_t v10 = (void *)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for SearchResultItem(0);
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResultItem?);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      v2740 = v10;
      v2743 = v9;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v2707 = v11;
          v2719 = v3;
          v2727 = v6;
          uint64_t v35 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v35;
          uint64_t v36 = v10[3];
          v9[2] = v10[2];
          v9[3] = v36;
          id v37 = v10;
          uint64_t v38 = v10[4];
          uint64_t v39 = v10[5];
          v9[4] = v38;
          v9[5] = v39;
          uint64_t v40 = v9;
          uint64_t v41 = v37[7];
          v40[6] = v37[6];
          v40[7] = v41;
          uint64_t v42 = v37[9];
          v40[8] = v37[8];
          v40[9] = v42;
          v2692 = (int *)type metadata accessor for MobileSMSDocument(0);
          uint64_t v43 = v2692[10];
          uint64_t v44 = (char *)v40 + v43;
          uint64_t v45 = (char *)v37 + v43;
          uint64_t v46 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v45, 1, v46))
          {
            uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v44, v45, *(void *)(*(void *)(v47 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16))(v44, v45, v46);
            __swift_storeEnumTagSinglePayload((uint64_t)v44, 0, 1, v46);
          }
          uint64_t v360 = v2692[11];
          long long v361 = (char *)v2743 + v360;
          long long v362 = (char *)v2740 + v360;
          uint64_t v363 = type metadata accessor for URL();
          uint64_t v2687 = v46;
          uint64_t v2652 = v363;
          if (__swift_getEnumTagSinglePayload((uint64_t)v362, 1, v363))
          {
            uint64_t v364 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v361, v362, *(void *)(*(void *)(v364 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v363 - 8) + 16))(v361, v362, v363);
            __swift_storeEnumTagSinglePayload((uint64_t)v361, 0, 1, v363);
          }
          *(void *)((char *)v2743 + v2692[12]) = *(void *)((char *)v2740 + v2692[12]);
          uint64_t v518 = v2692[13];
          uint64_t v519 = (void *)((char *)v2743 + v518);
          uint64_t v520 = (void *)((char *)v2740 + v518);
          uint64_t v521 = v520[1];
          *uint64_t v519 = *v520;
          v519[1] = v521;
          uint64_t v522 = v2692[14];
          uint64_t v523 = (void *)((char *)v2743 + v522);
          uint64_t v524 = (void *)((char *)v2740 + v522);
          uint64_t v525 = v524[1];
          *uint64_t v523 = *v524;
          v523[1] = v525;
          *(void *)((char *)v2743 + v2692[15]) = *(void *)((char *)v2740 + v2692[15]);
          *(void *)((char *)v2743 + v2692[16]) = *(void *)((char *)v2740 + v2692[16]);
          uint64_t v526 = v2692[17];
          uint64_t v527 = (void *)((char *)v2743 + v526);
          v528 = (char *)v2740 + v526;
          uint64_t v529 = *(void *)((char *)v2740 + v526);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v529)
          {
            uint64_t v530 = *((void *)v528 + 1);
            uint64_t v531 = *((void *)v528 + 2);
            *uint64_t v527 = v529;
            v527[1] = v530;
            uint64_t v532 = *((void *)v528 + 3);
            uint64_t v533 = *((void *)v528 + 4);
            v527[2] = v531;
            v527[3] = v532;
            v527[4] = v533;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v689 = *((_OWORD *)v528 + 1);
            *(_OWORD *)uint64_t v527 = *(_OWORD *)v528;
            *((_OWORD *)v527 + 1) = v689;
            v527[4] = *((void *)v528 + 4);
          }
          uint64_t v690 = v2692[18];
          v380 = v2740;
          uint64_t v691 = v2743;
          uint64_t v692 = (void *)((char *)v2743 + v690);
          v693 = (void *)((char *)v2740 + v690);
          uint64_t v694 = v693[1];
          *uint64_t v692 = *v693;
          v692[1] = v694;
          uint64_t v695 = v2692[19];
          uint64_t v696 = (void *)((char *)v2743 + v695);
          long long v697 = (void *)((char *)v2740 + v695);
          uint64_t v698 = type metadata accessor for PartialExtractedAttributes(0);
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v697, 1, v698))
          {
            uint64_t v699 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
            memcpy(v696, v697, *(void *)(*(void *)(v699 - 8) + 64));
          }
          else
          {
            uint64_t v735 = v697[1];
            *uint64_t v696 = *v697;
            v696[1] = v735;
            uint64_t v736 = *(int *)(v698 + 20);
            v737 = (void *)((char *)v696 + v736);
            v2667 = v697;
            uint64_t v738 = (void *)((char *)v697 + v736);
            uint64_t v739 = type metadata accessor for RentalCarReservation(0);
            swift_bridgeObjectRetain();
            v2615 = (int *)v698;
            v2637 = v696;
            if (__swift_getEnumTagSinglePayload((uint64_t)v738, 1, v739))
            {
              v740 = (int *)v698;
              uint64_t v741 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
              memcpy(v737, v738, *(void *)(*(void *)(v741 - 8) + 64));
            }
            else
            {
              uint64_t v798 = v738[1];
              void *v737 = *v738;
              v737[1] = v798;
              uint64_t v799 = v738[3];
              v737[2] = v738[2];
              v737[3] = v799;
              uint64_t v800 = v738[5];
              v737[4] = v738[4];
              v737[5] = v800;
              uint64_t v801 = v738[7];
              v737[6] = v738[6];
              v737[7] = v801;
              uint64_t v802 = v738[9];
              v737[8] = v738[8];
              v737[9] = v802;
              uint64_t v803 = v738[11];
              v737[10] = v738[10];
              v737[11] = v803;
              uint64_t v804 = v738[13];
              v737[12] = v738[12];
              v737[13] = v804;
              uint64_t v805 = v738[15];
              v737[14] = v738[14];
              v737[15] = v805;
              *((unsigned char *)v737 + 128) = *((unsigned char *)v738 + 128);
              *(_WORD *)((char *)v737 + 129) = *(_WORD *)((char *)v738 + 129);
              uint64_t v806 = v738[18];
              v737[17] = v738[17];
              v737[18] = v806;
              uint64_t v807 = v738[20];
              v737[19] = v738[19];
              v737[20] = v807;
              uint64_t v808 = v738[22];
              v737[21] = v738[21];
              v737[22] = v808;
              uint64_t v2509 = v738[24];
              v737[23] = v738[23];
              v737[24] = v2509;
              uint64_t v809 = v738[26];
              v737[25] = v738[25];
              v737[26] = v809;
              uint64_t v810 = v738[28];
              v737[27] = v738[27];
              v737[28] = v810;
              uint64_t v811 = v738[30];
              v737[29] = v738[29];
              v737[30] = v811;
              uint64_t v812 = v738[32];
              v737[31] = v738[31];
              v737[32] = v812;
              uint64_t v813 = v738[34];
              v737[33] = v738[33];
              v737[34] = v813;
              uint64_t v814 = v738[36];
              v737[35] = v738[35];
              v737[36] = v814;
              uint64_t v815 = v738[38];
              v737[37] = v738[37];
              v737[38] = v815;
              uint64_t v816 = v738[40];
              v737[39] = v738[39];
              v737[40] = v816;
              uint64_t v817 = v738[42];
              v737[41] = v738[41];
              v737[42] = v817;
              uint64_t v818 = v738[44];
              v737[43] = v738[43];
              v737[44] = v818;
              uint64_t v819 = v738[46];
              v737[45] = v738[45];
              v737[46] = v819;
              uint64_t v820 = v738[47];
              *((unsigned char *)v737 + 384) = *((unsigned char *)v738 + 384);
              v737[47] = v820;
              uint64_t v821 = v738[50];
              v737[49] = v738[49];
              v737[50] = v821;
              uint64_t v822 = v738[52];
              v737[51] = v738[51];
              v737[52] = v822;
              uint64_t v823 = *(int *)(v739 + 140);
              v2586 = (char *)v737 + v823;
              v824 = (char *)v738 + v823;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v824, 1, v2687))
              {
                uint64_t v825 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2586, v824, *(void *)(*(void *)(v825 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2687 - 8) + 16))(v2586, v824, v2687);
                __swift_storeEnumTagSinglePayload((uint64_t)v2586, 0, 1, v2687);
              }
              uint64_t v835 = *(int *)(v739 + 144);
              uint64_t v836 = (char *)v737 + v835;
              uint64_t v837 = (char *)v738 + v835;
              v380 = v2740;
              if (__swift_getEnumTagSinglePayload((uint64_t)v738 + v835, 1, v2687))
              {
                uint64_t v838 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v836, v837, *(void *)(*(void *)(v838 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2687 - 8) + 16))(v836, v837, v2687);
                __swift_storeEnumTagSinglePayload((uint64_t)v836, 0, 1, v2687);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v737, 0, 1, v739);
              v740 = v2615;
              uint64_t v696 = v2637;
            }
            uint64_t v890 = v740[6];
            v891 = (void *)((char *)v696 + v890);
            uint64_t v892 = v2667;
            v893 = (void *)((char *)v2667 + v890);
            uint64_t v894 = type metadata accessor for TicketedTransportation(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v893, 1, v894))
            {
              uint64_t v895 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
              memcpy(v891, v893, *(void *)(*(void *)(v895 - 8) + 64));
            }
            else
            {
              uint64_t v896 = v893[1];
              void *v891 = *v893;
              v891[1] = v896;
              uint64_t v897 = v893[3];
              v891[2] = v893[2];
              v891[3] = v897;
              uint64_t v898 = v893[5];
              v891[4] = v893[4];
              v891[5] = v898;
              uint64_t v899 = v893[7];
              v891[6] = v893[6];
              v891[7] = v899;
              uint64_t v900 = v893[9];
              v891[8] = v893[8];
              v891[9] = v900;
              uint64_t v901 = v893[11];
              v891[10] = v893[10];
              v891[11] = v901;
              uint64_t v902 = v893[13];
              v891[12] = v893[12];
              v891[13] = v902;
              uint64_t v903 = v893[15];
              v891[14] = v893[14];
              v891[15] = v903;
              *((unsigned char *)v891 + 128) = *((unsigned char *)v893 + 128);
              *(_WORD *)((char *)v891 + 129) = *(_WORD *)((char *)v893 + 129);
              uint64_t v904 = v893[18];
              v891[17] = v893[17];
              v891[18] = v904;
              uint64_t v905 = v893[20];
              v891[19] = v893[19];
              v891[20] = v905;
              uint64_t v906 = v893[22];
              v891[21] = v893[21];
              v891[22] = v906;
              uint64_t v2518 = v893[24];
              v891[23] = v893[23];
              v891[24] = v2518;
              uint64_t v907 = v893[26];
              v891[25] = v893[25];
              v891[26] = v907;
              uint64_t v908 = v893[28];
              v891[27] = v893[27];
              v891[28] = v908;
              uint64_t v909 = v893[30];
              v891[29] = v893[29];
              v891[30] = v909;
              uint64_t v910 = v893[32];
              v891[31] = v893[31];
              v891[32] = v910;
              uint64_t v911 = v893[34];
              v891[33] = v893[33];
              v891[34] = v911;
              uint64_t v913 = v893[35];
              uint64_t v912 = v893[36];
              *((unsigned char *)v891 + 296) = *((unsigned char *)v893 + 296);
              v891[35] = v913;
              v891[36] = v912;
              uint64_t v914 = *(int *)(v894 + 112);
              v2588 = (char *)v891 + v914;
              v915 = (char *)v893 + v914;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v915, 1, v2687))
              {
                uint64_t v916 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2588, v915, *(void *)(*(void *)(v916 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2687 - 8) + 16))(v2588, v915, v2687);
                __swift_storeEnumTagSinglePayload((uint64_t)v2588, 0, 1, v2687);
              }
              uint64_t v927 = *(int *)(v894 + 116);
              uint64_t v928 = (char *)v891 + v927;
              uint64_t v929 = (char *)v893 + v927;
              v380 = v2740;
              uint64_t v892 = v2667;
              if (__swift_getEnumTagSinglePayload((uint64_t)v893 + v927, 1, v2687))
              {
                uint64_t v930 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v928, v929, *(void *)(*(void *)(v930 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2687 - 8) + 16))(v928, v929, v2687);
                __swift_storeEnumTagSinglePayload((uint64_t)v928, 0, 1, v2687);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v891, 0, 1, v894);
              v740 = v2615;
              uint64_t v696 = v2637;
            }
            uint64_t v985 = v740[7];
            uint64_t v986 = (void *)((char *)v696 + v985);
            uint64_t v987 = (void *)((char *)v892 + v985);
            v988 = (int *)type metadata accessor for TicketedShow(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v987, 1, (uint64_t)v988))
            {
              uint64_t v989 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
              memcpy(v986, v987, *(void *)(*(void *)(v989 - 8) + 64));
            }
            else
            {
              uint64_t v990 = v987[1];
              *uint64_t v986 = *v987;
              v986[1] = v990;
              uint64_t v991 = v987[3];
              v986[2] = v987[2];
              v986[3] = v991;
              uint64_t v992 = v987[5];
              v986[4] = v987[4];
              v986[5] = v992;
              uint64_t v993 = v987[7];
              v986[6] = v987[6];
              v986[7] = v993;
              uint64_t v994 = v987[9];
              v986[8] = v987[8];
              v986[9] = v994;
              uint64_t v995 = v987[11];
              v986[10] = v987[10];
              v986[11] = v995;
              uint64_t v996 = v987[13];
              v986[12] = v987[12];
              v986[13] = v996;
              uint64_t v997 = v987[15];
              v986[14] = v987[14];
              v986[15] = v997;
              *((unsigned char *)v986 + 128) = *((unsigned char *)v987 + 128);
              *(_WORD *)((char *)v986 + 129) = *(_WORD *)((char *)v987 + 129);
              uint64_t v998 = v987[18];
              v986[17] = v987[17];
              v986[18] = v998;
              uint64_t v999 = v987[20];
              v986[19] = v987[19];
              v986[20] = v999;
              uint64_t v1000 = v987[22];
              v986[21] = v987[21];
              v986[22] = v1000;
              uint64_t v2516 = v987[24];
              v986[23] = v987[23];
              v986[24] = v2516;
              uint64_t v1001 = v987[26];
              v986[25] = v987[25];
              v986[26] = v1001;
              uint64_t v1002 = v987[28];
              v986[27] = v987[27];
              v986[28] = v1002;
              uint64_t v1003 = v987[30];
              v986[29] = v987[29];
              v986[30] = v1003;
              uint64_t v1004 = v987[32];
              v986[31] = v987[31];
              v986[32] = v1004;
              uint64_t v1005 = v987[34];
              v986[33] = v987[33];
              v986[34] = v1005;
              uint64_t v1007 = v987[35];
              uint64_t v1006 = v987[36];
              *((unsigned char *)v986 + 296) = *((unsigned char *)v987 + 296);
              v986[35] = v1007;
              v986[36] = v1006;
              uint64_t v1008 = v987[39];
              v986[38] = v987[38];
              v986[39] = v1008;
              uint64_t v1009 = v988[29];
              v2590 = (char *)v986 + v1009;
              uint64_t v1010 = (char *)v987 + v1009;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1010, 1, v2652))
              {
                uint64_t v1011 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v2590, v1010, *(void *)(*(void *)(v1011 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2652 - 8) + 16))(v2590, v1010, v2652);
                __swift_storeEnumTagSinglePayload((uint64_t)v2590, 0, 1, v2652);
              }
              uint64_t v1028 = v988[30];
              uint64_t v1029 = (void *)((char *)v986 + v1028);
              uint64_t v1030 = (void *)((char *)v987 + v1028);
              uint64_t v1031 = v1030[1];
              *uint64_t v1029 = *v1030;
              v1029[1] = v1031;
              uint64_t v1032 = (uint64_t)v988;
              uint64_t v1033 = v988[31];
              uint64_t v1034 = (char *)v986 + v1033;
              long long v1035 = (char *)v987 + v1033;
              swift_bridgeObjectRetain();
              v380 = v2740;
              uint64_t v892 = v2667;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1035, 1, v2687))
              {
                uint64_t v1036 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1034, v1035, *(void *)(*(void *)(v1036 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2687 - 8) + 16))(v1034, v1035, v2687);
                __swift_storeEnumTagSinglePayload((uint64_t)v1034, 0, 1, v2687);
              }
              uint64_t v1045 = *(int *)(v1032 + 128);
              uint64_t v1046 = (char *)v986 + v1045;
              v1047 = (char *)v987 + v1045;
              if (__swift_getEnumTagSinglePayload((uint64_t)v987 + v1045, 1, v2687))
              {
                uint64_t v1048 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1046, v1047, *(void *)(*(void *)(v1048 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2687 - 8) + 16))(v1046, v1047, v2687);
                __swift_storeEnumTagSinglePayload((uint64_t)v1046, 0, 1, v2687);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v986, 0, 1, v1032);
              v740 = v2615;
              uint64_t v696 = v2637;
            }
            uint64_t v1101 = v740[8];
            v1102 = (void *)((char *)v696 + v1101);
            v1103 = (void *)((char *)v892 + v1101);
            uint64_t v1104 = type metadata accessor for Appointment(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1103, 1, v1104))
            {
              uint64_t v1105 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
              memcpy(v1102, v1103, *(void *)(*(void *)(v1105 - 8) + 64));
            }
            else
            {
              uint64_t v1106 = v1103[1];
              void *v1102 = *v1103;
              v1102[1] = v1106;
              uint64_t v1107 = v1103[3];
              v1102[2] = v1103[2];
              v1102[3] = v1107;
              uint64_t v1108 = v1103[5];
              v1102[4] = v1103[4];
              v1102[5] = v1108;
              uint64_t v1109 = v1103[7];
              v1102[6] = v1103[6];
              v1102[7] = v1109;
              uint64_t v1110 = v1103[9];
              v1102[8] = v1103[8];
              v1102[9] = v1110;
              uint64_t v1111 = v1103[11];
              v1102[10] = v1103[10];
              v1102[11] = v1111;
              uint64_t v1112 = v1103[13];
              v1102[12] = v1103[12];
              v1102[13] = v1112;
              uint64_t v1113 = v1103[15];
              v1102[14] = v1103[14];
              v1102[15] = v1113;
              *((unsigned char *)v1102 + 128) = *((unsigned char *)v1103 + 128);
              *(_WORD *)((char *)v1102 + 129) = *(_WORD *)((char *)v1103 + 129);
              uint64_t v1114 = v1103[18];
              v1102[17] = v1103[17];
              v1102[18] = v1114;
              uint64_t v1115 = v1103[20];
              v1102[19] = v1103[19];
              v1102[20] = v1115;
              uint64_t v1116 = v1103[22];
              v1102[21] = v1103[21];
              v1102[22] = v1116;
              uint64_t v2523 = v1103[24];
              v1102[23] = v1103[23];
              v1102[24] = v2523;
              uint64_t v1117 = v1103[26];
              v1102[25] = v1103[25];
              v1102[26] = v1117;
              uint64_t v1118 = v1103[28];
              v1102[27] = v1103[27];
              v1102[28] = v1118;
              uint64_t v1119 = v1103[30];
              v1102[29] = v1103[29];
              v1102[30] = v1119;
              uint64_t v1120 = v1103[32];
              v1102[31] = v1103[31];
              v1102[32] = v1120;
              uint64_t v1121 = v1103[34];
              uint64_t v1122 = v1103[33];
              *((unsigned char *)v1102 + 280) = *((unsigned char *)v1103 + 280);
              v1102[33] = v1122;
              v1102[34] = v1121;
              uint64_t v1123 = v1103[37];
              v1102[36] = v1103[36];
              v1102[37] = v1123;
              uint64_t v1124 = *(int *)(v1104 + 108);
              v2591 = (char *)v1102 + v1124;
              v1125 = (char *)v1103 + v1124;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1125, 1, v2687))
              {
                uint64_t v1126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2591, v1125, *(void *)(*(void *)(v1126 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2687 - 8) + 16))(v2591, v1125, v2687);
                __swift_storeEnumTagSinglePayload((uint64_t)v2591, 0, 1, v2687);
              }
              uint64_t v1137 = *(int *)(v1104 + 112);
              uint64_t v1138 = (char *)v1102 + v1137;
              v1139 = (char *)v1103 + v1137;
              v380 = v2740;
              uint64_t v892 = v2667;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1103 + v1137, 1, v2687))
              {
                uint64_t v1140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1138, v1139, *(void *)(*(void *)(v1140 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2687 - 8) + 16))(v1138, v1139, v2687);
                __swift_storeEnumTagSinglePayload((uint64_t)v1138, 0, 1, v2687);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v1102, 0, 1, v1104);
              v740 = v2615;
              uint64_t v696 = v2637;
            }
            uint64_t v1190 = v740[9];
            v1191 = (void *)((char *)v696 + v1190);
            v1192 = (void *)((char *)v892 + v1190);
            v1193 = (int *)type metadata accessor for Party(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1192, 1, (uint64_t)v1193))
            {
              uint64_t v1194 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
              memcpy(v1191, v1192, *(void *)(*(void *)(v1194 - 8) + 64));
            }
            else
            {
              uint64_t v1195 = v1192[1];
              void *v1191 = *v1192;
              v1191[1] = v1195;
              uint64_t v1196 = v1192[3];
              v1191[2] = v1192[2];
              v1191[3] = v1196;
              uint64_t v1197 = v1192[5];
              v1191[4] = v1192[4];
              v1191[5] = v1197;
              uint64_t v1198 = v1192[7];
              v1191[6] = v1192[6];
              v1191[7] = v1198;
              uint64_t v1199 = v1192[9];
              v1191[8] = v1192[8];
              v1191[9] = v1199;
              uint64_t v1200 = v1192[11];
              v1191[10] = v1192[10];
              v1191[11] = v1200;
              uint64_t v1201 = v1192[13];
              v1191[12] = v1192[12];
              v1191[13] = v1201;
              uint64_t v1202 = v1192[15];
              v1191[14] = v1192[14];
              v1191[15] = v1202;
              *((unsigned char *)v1191 + 128) = *((unsigned char *)v1192 + 128);
              *(_WORD *)((char *)v1191 + 129) = *(_WORD *)((char *)v1192 + 129);
              uint64_t v1203 = v1192[18];
              v1191[17] = v1192[17];
              v1191[18] = v1203;
              uint64_t v1204 = v1192[20];
              v1191[19] = v1192[19];
              v1191[20] = v1204;
              uint64_t v1205 = v1192[22];
              v1191[21] = v1192[21];
              v1191[22] = v1205;
              uint64_t v1206 = v1192[24];
              v1191[23] = v1192[23];
              v1191[24] = v1206;
              uint64_t v1207 = v1192[26];
              v1191[25] = v1192[25];
              v1191[26] = v1207;
              uint64_t v1208 = v1192[28];
              v1191[27] = v1192[27];
              v1191[28] = v1208;
              uint64_t v1209 = v1192[30];
              v1191[29] = v1192[29];
              v1191[30] = v1209;
              v1191[31] = v1192[31];
              uint64_t v1210 = v1193[24];
              v2593 = (char *)v1191 + v1210;
              v1211 = (char *)v1192 + v1210;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1211, 1, v2687))
              {
                uint64_t v1212 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2593, v1211, *(void *)(*(void *)(v1212 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2687 - 8) + 16))(v2593, v1211, v2687);
                __swift_storeEnumTagSinglePayload((uint64_t)v2593, 0, 1, v2687);
              }
              uint64_t v1221 = v1193[25];
              v1222 = (char *)v1191 + v1221;
              v1223 = (char *)v1192 + v1221;
              v380 = v2740;
              uint64_t v892 = v2667;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1192 + v1221, 1, v2687))
              {
                uint64_t v1224 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1222, v1223, *(void *)(*(void *)(v1224 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2687 - 8) + 16))(v1222, v1223, v2687);
                __swift_storeEnumTagSinglePayload((uint64_t)v1222, 0, 1, v2687);
              }
              uint64_t v1235 = v1193[26];
              v1236 = (char *)v1191 + v1235;
              v1237 = (char *)v1192 + v1235;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1192 + v1235, 1, v2652))
              {
                uint64_t v1238 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v1236, v1237, *(void *)(*(void *)(v1238 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2652 - 8) + 16))(v1236, v1237, v2652);
                __swift_storeEnumTagSinglePayload((uint64_t)v1236, 0, 1, v2652);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v1191, 0, 1, (uint64_t)v1193);
              v740 = v2615;
              uint64_t v696 = v2637;
            }
            uint64_t v1284 = v740[10];
            v1285 = (void *)((char *)v696 + v1284);
            v1286 = (void *)((char *)v892 + v1284);
            v1287 = (int *)type metadata accessor for Trip(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1286, 1, (uint64_t)v1287))
            {
              uint64_t v1288 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
              memcpy(v1285, v1286, *(void *)(*(void *)(v1288 - 8) + 64));
            }
            else
            {
              uint64_t v1289 = v1286[1];
              void *v1285 = *v1286;
              v1285[1] = v1289;
              uint64_t v1290 = v1286[3];
              v1285[2] = v1286[2];
              v1285[3] = v1290;
              uint64_t v1291 = v1286[5];
              v1285[4] = v1286[4];
              v1285[5] = v1291;
              uint64_t v1292 = v1286[7];
              v1285[6] = v1286[6];
              v1285[7] = v1292;
              uint64_t v1293 = v1286[9];
              v1285[8] = v1286[8];
              v1285[9] = v1293;
              uint64_t v1294 = v1286[11];
              v1285[10] = v1286[10];
              v1285[11] = v1294;
              uint64_t v1295 = v1286[13];
              v1285[12] = v1286[12];
              v1285[13] = v1295;
              uint64_t v1296 = v1286[15];
              v1285[14] = v1286[14];
              v1285[15] = v1296;
              *((unsigned char *)v1285 + 128) = *((unsigned char *)v1286 + 128);
              *(_WORD *)((char *)v1285 + 129) = *(_WORD *)((char *)v1286 + 129);
              uint64_t v1297 = v1286[18];
              v1285[17] = v1286[17];
              v1285[18] = v1297;
              uint64_t v1298 = v1286[20];
              v1285[19] = v1286[19];
              v1285[20] = v1298;
              uint64_t v1299 = v1286[22];
              v1285[21] = v1286[21];
              v1285[22] = v1299;
              uint64_t v1300 = v1286[24];
              v1285[23] = v1286[23];
              v1285[24] = v1300;
              uint64_t v1301 = v1286[26];
              v1285[25] = v1286[25];
              v1285[26] = v1301;
              v1285[27] = v1286[27];
              uint64_t v1302 = v1287[22];
              v2595 = (char *)v1285 + v1302;
              v1303 = (char *)v1286 + v1302;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1303, 1, v2687))
              {
                uint64_t v1304 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2595, v1303, *(void *)(*(void *)(v1304 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2687 - 8) + 16))(v2595, v1303, v2687);
                __swift_storeEnumTagSinglePayload((uint64_t)v2595, 0, 1, v2687);
              }
              uint64_t v1313 = v1287[23];
              v1314 = (char *)v1285 + v1313;
              v1315 = (char *)v1286 + v1313;
              v380 = v2740;
              uint64_t v892 = v2667;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1286 + v1313, 1, v2687))
              {
                uint64_t v1316 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1314, v1315, *(void *)(*(void *)(v1316 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2687 - 8) + 16))(v1314, v1315, v2687);
                __swift_storeEnumTagSinglePayload((uint64_t)v1314, 0, 1, v2687);
              }
              uint64_t v1333 = v1287[24];
              v1334 = (char *)v1285 + v1333;
              v1335 = (char *)v1286 + v1333;
              *(void *)v1334 = *(void *)v1335;
              v1334[8] = v1335[8];
              uint64_t v1336 = v1287[25];
              v1337 = (char *)v1285 + v1336;
              v1338 = (char *)v1286 + v1336;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1286 + v1336, 1, v2652))
              {
                uint64_t v1339 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v1337, v1338, *(void *)(*(void *)(v1339 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2652 - 8) + 16))(v1337, v1338, v2652);
                __swift_storeEnumTagSinglePayload((uint64_t)v1337, 0, 1, v2652);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v1285, 0, 1, (uint64_t)v1287);
              v740 = v2615;
              uint64_t v696 = v2637;
            }
            uint64_t v1371 = v740[11];
            v1372 = (void *)((char *)v696 + v1371);
            v1373 = (void *)((char *)v892 + v1371);
            v1374 = (int *)type metadata accessor for FlightReservation(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1373, 1, (uint64_t)v1374))
            {
              uint64_t v1375 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
              memcpy(v1372, v1373, *(void *)(*(void *)(v1375 - 8) + 64));
            }
            else
            {
              uint64_t v1376 = v1373[1];
              void *v1372 = *v1373;
              v1372[1] = v1376;
              uint64_t v1377 = v1373[3];
              v1372[2] = v1373[2];
              v1372[3] = v1377;
              uint64_t v1378 = v1373[5];
              v1372[4] = v1373[4];
              v1372[5] = v1378;
              uint64_t v1379 = v1373[7];
              v1372[6] = v1373[6];
              v1372[7] = v1379;
              uint64_t v1380 = v1373[9];
              v1372[8] = v1373[8];
              v1372[9] = v1380;
              uint64_t v1381 = v1373[11];
              v1372[10] = v1373[10];
              v1372[11] = v1381;
              *((unsigned char *)v1372 + 96) = *((unsigned char *)v1373 + 96);
              uint64_t v1382 = v1373[14];
              v1372[13] = v1373[13];
              v1372[14] = v1382;
              uint64_t v1383 = v1374[13];
              v2596 = (char *)v1372 + v1383;
              v1384 = (char *)v1373 + v1383;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1384, 1, v2652))
              {
                uint64_t v1385 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v2596, v1384, *(void *)(*(void *)(v1385 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2652 - 8) + 16))(v2596, v1384, v2652);
                __swift_storeEnumTagSinglePayload((uint64_t)v2596, 0, 1, v2652);
              }
              uint64_t v1394 = v1374[14];
              v1395 = (char *)v1372 + v1394;
              v1396 = (char *)v1373 + v1394;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1373 + v1394, 1, v2652))
              {
                uint64_t v1397 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v1395, v1396, *(void *)(*(void *)(v1397 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2652 - 8) + 16))(v1395, v1396, v2652);
                __swift_storeEnumTagSinglePayload((uint64_t)v1395, 0, 1, v2652);
              }
              uint64_t v1540 = v1374[15];
              v1541 = (void *)((char *)v1372 + v1540);
              v1542 = (void *)((char *)v1373 + v1540);
              uint64_t v1543 = v1542[1];
              void *v1541 = *v1542;
              v1541[1] = v1543;
              uint64_t v1544 = v1374[16];
              v1545 = (void *)((char *)v1372 + v1544);
              v1546 = (void *)((char *)v1373 + v1544);
              uint64_t v1547 = v1546[1];
              void *v1545 = *v1546;
              v1545[1] = v1547;
              uint64_t v1548 = v1374[17];
              v1549 = (void *)((char *)v1372 + v1548);
              v1550 = (void *)((char *)v1373 + v1548);
              uint64_t v1551 = v1550[1];
              void *v1549 = *v1550;
              v1549[1] = v1551;
              uint64_t v1552 = v1374[18];
              v2578 = (char *)v1373 + v1552;
              v2599 = (char *)v1372 + v1552;
              uint64_t v1553 = type metadata accessor for DateComponents();
              v1554 = *(void (**)(char *, char *, uint64_t))(*(void *)(v1553 - 8) + 16);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1554(v2599, v2578, v1553);
              v1554((char *)v1372 + v1374[19], (char *)v1373 + v1374[19], v1553);
              uint64_t v1555 = v1374[20];
              v1556 = (void *)((char *)v1372 + v1555);
              v1557 = (void *)((char *)v1373 + v1555);
              uint64_t v1558 = v1557[1];
              void *v1556 = *v1557;
              v1556[1] = v1558;
              uint64_t v1559 = v1374[21];
              v1560 = (void *)((char *)v1372 + v1559);
              v1561 = (void *)((char *)v1373 + v1559);
              uint64_t v1562 = v1561[1];
              void *v1560 = *v1561;
              v1560[1] = v1562;
              uint64_t v1563 = v1374[22];
              v1564 = (void *)((char *)v1372 + v1563);
              v1565 = (void *)((char *)v1373 + v1563);
              v2579 = (void *)v1565[1];
              void *v1564 = *v1565;
              v1564[1] = v2579;
              uint64_t v1566 = v1374[23];
              v1567 = (void *)((char *)v1372 + v1566);
              v1568 = (void *)((char *)v1373 + v1566);
              uint64_t v1569 = v1568[1];
              void *v1567 = *v1568;
              v1567[1] = v1569;
              uint64_t v1570 = v1374[24];
              v1571 = (void *)((char *)v1372 + v1570);
              v1572 = (void *)((char *)v1373 + v1570);
              v2600 = (void *)v1572[1];
              void *v1571 = *v1572;
              v1571[1] = v2600;
              uint64_t v1573 = v1374[25];
              v1574 = (void *)((char *)v1372 + v1573);
              v1575 = (void *)((char *)v1373 + v1573);
              uint64_t v2565 = v1575[1];
              void *v1574 = *v1575;
              v1574[1] = v2565;
              uint64_t v1576 = v1374[26];
              v1577 = (void *)((char *)v1372 + v1576);
              v1578 = (void *)((char *)v1373 + v1576);
              v2557 = (void *)v1578[1];
              void *v1577 = *v1578;
              v1577[1] = v2557;
              uint64_t v1579 = v1374[27];
              v1580 = (void *)((char *)v1372 + v1579);
              v1581 = (void *)((char *)v1373 + v1579);
              uint64_t v2549 = v1581[1];
              void *v1580 = *v1581;
              v1580[1] = v2549;
              uint64_t v1582 = v1374[28];
              v1583 = (void *)((char *)v1372 + v1582);
              v1584 = (void *)((char *)v1373 + v1582);
              v2545 = (void *)v1584[1];
              void *v1583 = *v1584;
              v1583[1] = v2545;
              uint64_t v1585 = v1374[29];
              v1586 = (void *)((char *)v1372 + v1585);
              v1587 = (void *)((char *)v1373 + v1585);
              v2535 = (void *)v1587[1];
              void *v1586 = *v1587;
              v1586[1] = v2535;
              uint64_t v1588 = v1374[30];
              v1589 = (void *)((char *)v1372 + v1588);
              v1590 = (void *)((char *)v1373 + v1588);
              v2531 = (void *)v1590[1];
              void *v1589 = *v1590;
              v1589[1] = v2531;
              uint64_t v1591 = v1374[31];
              v1592 = (void *)((char *)v1372 + v1591);
              v1593 = (void *)((char *)v1373 + v1591);
              uint64_t v2527 = v1593[1];
              void *v1592 = *v1593;
              v1592[1] = v2527;
              uint64_t v1594 = v1374[32];
              v1595 = (void *)((char *)v1372 + v1594);
              v1596 = (void *)((char *)v1373 + v1594);
              uint64_t v2521 = v1596[1];
              void *v1595 = *v1596;
              v1595[1] = v2521;
              *(void *)((char *)v1372 + v1374[33]) = *(void *)((char *)v1373 + v1374[33]);
              *(void *)((char *)v1372 + v1374[34]) = *(void *)((char *)v1373 + v1374[34]);
              uint64_t v1597 = v1374[35];
              v1598 = (void *)((char *)v1372 + v1597);
              v1599 = (void *)((char *)v1373 + v1597);
              uint64_t v1600 = v1599[1];
              void *v1598 = *v1599;
              v1598[1] = v1600;
              uint64_t v1601 = v1374[36];
              v1602 = (void *)((char *)v1372 + v1601);
              v1603 = (void *)((char *)v1373 + v1601);
              uint64_t v1604 = v1603[1];
              void *v1602 = *v1603;
              v1602[1] = v1604;
              uint64_t v1605 = v1374[37];
              v1606 = (void *)((char *)v1372 + v1605);
              v1607 = (void *)((char *)v1373 + v1605);
              uint64_t v1608 = v1607[1];
              void *v1606 = *v1607;
              v1606[1] = v1608;
              uint64_t v1609 = v1374[38];
              v2539 = (char *)v1372 + v1609;
              v1610 = (char *)v1373 + v1609;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1610, 1, v2687))
              {
                uint64_t v1611 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2539, v1610, *(void *)(*(void *)(v1611 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2687 - 8) + 16))(v2539, v1610, v2687);
                __swift_storeEnumTagSinglePayload((uint64_t)v2539, 0, 1, v2687);
              }
              uint64_t v1712 = v1374[39];
              v1713 = (void *)((char *)v1372 + v1712);
              v1714 = (void *)((char *)v1373 + v1712);
              uint64_t v1715 = v1714[1];
              void *v1713 = *v1714;
              v1713[1] = v1715;
              uint64_t v1716 = v1374[40];
              v1717 = (void *)((char *)v1372 + v1716);
              v1718 = (void *)((char *)v1373 + v1716);
              uint64_t v1719 = v1718[1];
              void *v1717 = *v1718;
              v1717[1] = v1719;
              uint64_t v1720 = v1374[41];
              v1721 = (char *)v1372 + v1720;
              v1722 = (char *)v1373 + v1720;
              v1721[8] = v1722[8];
              *(void *)v1721 = *(void *)v1722;
              uint64_t v1723 = v1374[42];
              v1724 = (void *)((char *)v1372 + v1723);
              v1725 = (void *)((char *)v1373 + v1723);
              uint64_t v1726 = v1725[1];
              void *v1724 = *v1725;
              v1724[1] = v1726;
              uint64_t v1727 = v1374[43];
              v1728 = (char *)v1372 + v1727;
              v1729 = (char *)v1373 + v1727;
              *(_OWORD *)v1728 = *(_OWORD *)v1729;
              *(void *)(v1728 + 13) = *(void *)(v1729 + 13);
              uint64_t v1730 = v1374[44];
              v1731 = (void *)((char *)v1372 + v1730);
              v1732 = (void *)((char *)v1373 + v1730);
              uint64_t v1733 = v1732[1];
              void *v1731 = *v1732;
              v1731[1] = v1733;
              uint64_t v1734 = v1374[45];
              v1735 = (void *)((char *)v1372 + v1734);
              v1736 = (void *)((char *)v1373 + v1734);
              uint64_t v1737 = v1736[1];
              void *v1735 = *v1736;
              v1735[1] = v1737;
              uint64_t v1738 = v1374[46];
              v1739 = (void *)((char *)v1372 + v1738);
              v1740 = (void *)((char *)v1373 + v1738);
              uint64_t v1741 = v1740[1];
              void *v1739 = *v1740;
              v1739[1] = v1741;
              uint64_t v1742 = v1374[47];
              v1743 = (void *)((char *)v1372 + v1742);
              v1744 = (void *)((char *)v1373 + v1742);
              uint64_t v1745 = v1744[1];
              void *v1743 = *v1744;
              v1743[1] = v1745;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              __swift_storeEnumTagSinglePayload((uint64_t)v1372, 0, 1, (uint64_t)v1374);
              v380 = v2740;
              v740 = v2615;
              uint64_t v696 = v2637;
            }
            uint64_t v1746 = v740[12];
            v1747 = (void *)((char *)v696 + v1746);
            v1748 = (void *)((char *)v2667 + v1746);
            v1749 = (int *)type metadata accessor for HotelReservation(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1748, 1, (uint64_t)v1749))
            {
              uint64_t v1750 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
              memcpy(v1747, v1748, *(void *)(*(void *)(v1750 - 8) + 64));
            }
            else
            {
              uint64_t v1751 = v1748[1];
              void *v1747 = *v1748;
              v1747[1] = v1751;
              uint64_t v1752 = v1748[3];
              v1747[2] = v1748[2];
              v1747[3] = v1752;
              uint64_t v1753 = v1748[5];
              v1747[4] = v1748[4];
              v1747[5] = v1753;
              uint64_t v1754 = v1748[7];
              v1747[6] = v1748[6];
              v1747[7] = v1754;
              uint64_t v1755 = v1748[9];
              v1747[8] = v1748[8];
              v1747[9] = v1755;
              uint64_t v1756 = v1748[11];
              v1747[10] = v1748[10];
              v1747[11] = v1756;
              *((unsigned char *)v1747 + 96) = *((unsigned char *)v1748 + 96);
              uint64_t v1757 = v1748[14];
              v1747[13] = v1748[13];
              v1747[14] = v1757;
              uint64_t v1758 = v1748[16];
              v1747[15] = v1748[15];
              v1747[16] = v1758;
              uint64_t v1759 = v1749[14];
              v2601 = (char *)v1747 + v1759;
              v1760 = (char *)v1748 + v1759;
              v2546 = (void *)type metadata accessor for DateComponents();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1760, 1, (uint64_t)v2546))
              {
                uint64_t v1761 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
                memcpy(v2601, v1760, *(void *)(*(void *)(v1761 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, void *))(*(v2546 - 1) + 16))(v2601, v1760, v2546);
                __swift_storeEnumTagSinglePayload((uint64_t)v2601, 0, 1, (uint64_t)v2546);
              }
              uint64_t v1770 = v1749[15];
              v1771 = (char *)v1747 + v1770;
              v1772 = (char *)v1748 + v1770;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1748 + v1770, 1, (uint64_t)v2546))
              {
                uint64_t v1773 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
                memcpy(v1771, v1772, *(void *)(*(void *)(v1773 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, void *))(*(v2546 - 1) + 16))(v1771, v1772, v2546);
                __swift_storeEnumTagSinglePayload((uint64_t)v1771, 0, 1, (uint64_t)v2546);
              }
              uint64_t v1891 = v1749[16];
              v1892 = (void *)((char *)v1747 + v1891);
              v1893 = (void *)((char *)v1748 + v1891);
              uint64_t v1894 = v1893[1];
              void *v1892 = *v1893;
              v1892[1] = v1894;
              uint64_t v1895 = v1749[17];
              v1896 = (void *)((char *)v1747 + v1895);
              v1897 = (void *)((char *)v1748 + v1895);
              uint64_t v1898 = v1897[1];
              void *v1896 = *v1897;
              v1896[1] = v1898;
              uint64_t v1899 = v1749[18];
              v1900 = (void *)((char *)v1747 + v1899);
              v1901 = (void *)((char *)v1748 + v1899);
              v2604 = (void *)v1901[1];
              void *v1900 = *v1901;
              v1900[1] = v2604;
              uint64_t v1902 = v1749[19];
              v1903 = (void *)((char *)v1747 + v1902);
              v1904 = (void *)((char *)v1748 + v1902);
              v2582 = (void *)v1904[1];
              void *v1903 = *v1904;
              v1903[1] = v2582;
              uint64_t v1905 = v1749[20];
              v1906 = (void *)((char *)v1747 + v1905);
              v1907 = (void *)((char *)v1748 + v1905);
              uint64_t v1908 = v1907[1];
              void *v1906 = *v1907;
              v1906[1] = v1908;
              *(void *)((char *)v1747 + v1749[21]) = *(void *)((char *)v1748 + v1749[21]);
              *(void *)((char *)v1747 + v1749[22]) = *(void *)((char *)v1748 + v1749[22]);
              uint64_t v1909 = v1749[23];
              v1910 = (char *)v1747 + v1909;
              v1911 = (char *)v1748 + v1909;
              *(void *)v1910 = *(void *)v1911;
              v1910[8] = v1911[8];
              uint64_t v1912 = v1749[24];
              v1913 = (char *)v1747 + v1912;
              v1914 = (char *)v1748 + v1912;
              *(void *)v1913 = *(void *)v1914;
              v1913[8] = v1914[8];
              uint64_t v1915 = v1749[25];
              v1916 = (void *)((char *)v1747 + v1915);
              v1917 = (void *)((char *)v1748 + v1915);
              uint64_t v1918 = v1917[1];
              void *v1916 = *v1917;
              v1916[1] = v1918;
              uint64_t v1919 = v1749[26];
              v1920 = (void *)((char *)v1747 + v1919);
              v1921 = (void *)((char *)v1748 + v1919);
              uint64_t v1922 = v1921[1];
              void *v1920 = *v1921;
              v1920[1] = v1922;
              uint64_t v1923 = v1749[27];
              v1924 = (void *)((char *)v1747 + v1923);
              v1925 = (void *)((char *)v1748 + v1923);
              uint64_t v1926 = v1925[1];
              void *v1924 = *v1925;
              v1924[1] = v1926;
              uint64_t v1927 = v1749[28];
              v1928 = (void *)((char *)v1747 + v1927);
              v1929 = (void *)((char *)v1748 + v1927);
              uint64_t v1930 = v1929[1];
              void *v1928 = *v1929;
              v1928[1] = v1930;
              uint64_t v1931 = v1749[29];
              v1932 = (char *)v1747 + v1931;
              v1933 = (char *)v1748 + v1931;
              *(void *)v1932 = *(void *)v1933;
              v1932[8] = v1933[8];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              __swift_storeEnumTagSinglePayload((uint64_t)v1747, 0, 1, (uint64_t)v1749);
              v380 = v2740;
              v740 = v2615;
              uint64_t v696 = v2637;
            }
            uint64_t v1934 = v740[13];
            v1935 = (void *)((char *)v696 + v1934);
            v1936 = (void *)((char *)v2667 + v1934);
            v1937 = (int *)type metadata accessor for RestaurantReservation(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1936, 1, (uint64_t)v1937))
            {
              uint64_t v1938 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
              memcpy(v1935, v1936, *(void *)(*(void *)(v1938 - 8) + 64));
            }
            else
            {
              uint64_t v1939 = v1936[1];
              void *v1935 = *v1936;
              v1935[1] = v1939;
              uint64_t v1940 = v1936[3];
              v1935[2] = v1936[2];
              v1935[3] = v1940;
              uint64_t v1941 = v1936[5];
              v1935[4] = v1936[4];
              v1935[5] = v1941;
              uint64_t v1942 = v1936[7];
              v1935[6] = v1936[6];
              v1935[7] = v1942;
              uint64_t v1943 = v1936[9];
              v1935[8] = v1936[8];
              v1935[9] = v1943;
              uint64_t v1944 = v1936[11];
              v1935[10] = v1936[10];
              v1935[11] = v1944;
              *((unsigned char *)v1935 + 96) = *((unsigned char *)v1936 + 96);
              uint64_t v1945 = v1936[14];
              v1935[13] = v1936[13];
              v1935[14] = v1945;
              uint64_t v1946 = v1936[16];
              v1935[15] = v1936[15];
              v1935[16] = v1946;
              uint64_t v1947 = v1937[14];
              v2669 = (char *)v1935 + v1947;
              v1948 = (char *)v1936 + v1947;
              uint64_t v1949 = type metadata accessor for DateComponents();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1948, 1, v1949))
              {
                uint64_t v1950 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
                memcpy(v2669, v1948, *(void *)(*(void *)(v1950 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1949 - 8) + 16))(v2669, v1948, v1949);
                __swift_storeEnumTagSinglePayload((uint64_t)v2669, 0, 1, v1949);
              }
              uint64_t v2313 = v1937[15];
              v2314 = (void *)((char *)v1935 + v2313);
              v2315 = (void *)((char *)v1936 + v2313);
              uint64_t v2316 = v2315[1];
              void *v2314 = *v2315;
              v2314[1] = v2316;
              uint64_t v2317 = v1937[16];
              v2318 = (void *)((char *)v1935 + v2317);
              v2319 = (void *)((char *)v1936 + v2317);
              uint64_t v2320 = v2319[1];
              void *v2318 = *v2319;
              v2318[1] = v2320;
              uint64_t v2321 = v1937[17];
              v2322 = (void *)((char *)v1935 + v2321);
              v2323 = (void *)((char *)v1936 + v2321);
              uint64_t v2674 = v2323[1];
              void *v2322 = *v2323;
              v2322[1] = v2674;
              uint64_t v2324 = v1937[18];
              v2325 = (void *)((char *)v1935 + v2324);
              v2326 = (void *)((char *)v1936 + v2324);
              uint64_t v2327 = v2326[1];
              void *v2325 = *v2326;
              v2325[1] = v2327;
              uint64_t v2328 = v1937[19];
              v2329 = (void *)((char *)v1935 + v2328);
              v2330 = (void *)((char *)v1936 + v2328);
              uint64_t v2331 = v2330[1];
              void *v2329 = *v2330;
              v2329[1] = v2331;
              *(void *)((char *)v1935 + v1937[20]) = *(void *)((char *)v1936 + v1937[20]);
              uint64_t v2332 = v1937[21];
              v2333 = (void *)((char *)v1935 + v2332);
              v2334 = (void *)((char *)v1936 + v2332);
              uint64_t v2335 = v2334[1];
              void *v2333 = *v2334;
              v2333[1] = v2335;
              uint64_t v2336 = v1937[22];
              v2337 = (void *)((char *)v1935 + v2336);
              v2338 = (void *)((char *)v1936 + v2336);
              uint64_t v2339 = v2338[1];
              void *v2337 = *v2338;
              v2337[1] = v2339;
              uint64_t v2340 = v1937[23];
              v2341 = (void *)((char *)v1935 + v2340);
              v2342 = (void *)((char *)v1936 + v2340);
              uint64_t v2343 = v2342[1];
              void *v2341 = *v2342;
              v2341[1] = v2343;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              __swift_storeEnumTagSinglePayload((uint64_t)v1935, 0, 1, (uint64_t)v1937);
              v380 = v2740;
              v740 = v2615;
              uint64_t v696 = v2637;
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v696, 0, 1, (uint64_t)v740);
            uint64_t v691 = v2743;
          }
          v2344 = v2692;
          uint64_t v2345 = v2692[20];
          v2346 = (void *)((char *)v691 + v2345);
          v2347 = (void *)((char *)v380 + v2345);
          v2348 = (int *)type metadata accessor for PreExtractedCard(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v2347, 1, (uint64_t)v2348))
          {
            uint64_t v2349 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
            memcpy(v2346, v2347, *(void *)(*(void *)(v2349 - 8) + 64));
          }
          else
          {
            uint64_t v2350 = v2347[1];
            void *v2346 = *v2347;
            v2346[1] = v2350;
            uint64_t v2351 = v2347[3];
            v2346[2] = v2347[2];
            v2346[3] = v2351;
            uint64_t v2352 = v2347[5];
            v2346[4] = v2347[4];
            v2346[5] = v2352;
            uint64_t v2353 = v2347[7];
            v2346[6] = v2347[6];
            v2346[7] = v2353;
            uint64_t v2354 = v2347[9];
            v2346[8] = v2347[8];
            v2346[9] = v2354;
            uint64_t v2355 = v2347[11];
            v2346[10] = v2347[10];
            v2346[11] = v2355;
            uint64_t v2356 = v2348[10];
            v2675 = (char *)v2346 + v2356;
            v2357 = (char *)v2347 + v2356;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2357, 1, v2687))
            {
              uint64_t v2358 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2675, v2357, *(void *)(*(void *)(v2358 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2687 - 8) + 16))(v2675, v2357, v2687);
              __swift_storeEnumTagSinglePayload((uint64_t)v2675, 0, 1, v2687);
            }
            uint64_t v2359 = v2348[11];
            v2360 = (char *)v2346 + v2359;
            v2361 = (char *)v2347 + v2359;
            if (__swift_getEnumTagSinglePayload((uint64_t)v2347 + v2359, 1, v2687))
            {
              uint64_t v2362 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2360, v2361, *(void *)(*(void *)(v2362 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2687 - 8) + 16))(v2360, v2361, v2687);
              __swift_storeEnumTagSinglePayload((uint64_t)v2360, 0, 1, v2687);
            }
            uint64_t v2363 = v2348[12];
            v2364 = (void *)((char *)v2346 + v2363);
            v2365 = (void *)((char *)v2347 + v2363);
            uint64_t v2366 = v2365[1];
            void *v2364 = *v2365;
            v2364[1] = v2366;
            uint64_t v2367 = v2348[13];
            v2368 = (void *)((char *)v2346 + v2367);
            v2369 = (void *)((char *)v2347 + v2367);
            uint64_t v2370 = v2369[1];
            void *v2368 = *v2369;
            v2368[1] = v2370;
            uint64_t v2371 = v2348[14];
            v2372 = (void *)((char *)v2346 + v2371);
            v2373 = (void *)((char *)v2347 + v2371);
            uint64_t v2374 = v2373[1];
            void *v2372 = *v2373;
            v2372[1] = v2374;
            uint64_t v2375 = v2348[15];
            v2376 = (char *)v2346 + v2375;
            v2377 = (char *)v2347 + v2375;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2377, 1, v2687))
            {
              uint64_t v2378 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2376, v2377, *(void *)(*(void *)(v2378 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2687 - 8) + 16))(v2376, v2377, v2687);
              __swift_storeEnumTagSinglePayload((uint64_t)v2376, 0, 1, v2687);
            }
            uint64_t v2379 = v2348[16];
            v2380 = (void *)((char *)v2346 + v2379);
            v2381 = (void *)((char *)v2347 + v2379);
            uint64_t v2382 = v2381[1];
            void *v2380 = *v2381;
            v2380[1] = v2382;
            uint64_t v2383 = v2348[17];
            v2384 = (void *)((char *)v2346 + v2383);
            v2385 = (void *)((char *)v2347 + v2383);
            uint64_t v2386 = v2385[1];
            void *v2384 = *v2385;
            v2384[1] = v2386;
            uint64_t v2387 = v2348[18];
            v2388 = (void *)((char *)v2346 + v2387);
            v2389 = (void *)((char *)v2347 + v2387);
            uint64_t v2390 = v2389[1];
            void *v2388 = *v2389;
            v2388[1] = v2390;
            uint64_t v2391 = v2348[19];
            v2392 = (void *)((char *)v2346 + v2391);
            v2393 = (void *)((char *)v2347 + v2391);
            uint64_t v2394 = v2393[1];
            void *v2392 = *v2393;
            v2392[1] = v2394;
            uint64_t v2395 = v2348[20];
            v2396 = (void *)((char *)v2346 + v2395);
            v2397 = (void *)((char *)v2347 + v2395);
            uint64_t v2398 = v2397[1];
            void *v2396 = *v2397;
            v2396[1] = v2398;
            uint64_t v2399 = v2348[21];
            v2400 = (void *)((char *)v2346 + v2399);
            v2401 = (void *)((char *)v2347 + v2399);
            uint64_t v2402 = v2401[1];
            void *v2400 = *v2401;
            v2400[1] = v2402;
            uint64_t v2403 = v2348[22];
            v2404 = (void *)((char *)v2346 + v2403);
            v2405 = (void *)((char *)v2347 + v2403);
            uint64_t v2406 = v2405[1];
            void *v2404 = *v2405;
            v2404[1] = v2406;
            uint64_t v2407 = v2348[23];
            v2408 = (void *)((char *)v2346 + v2407);
            v2409 = (void *)((char *)v2347 + v2407);
            uint64_t v2410 = v2409[1];
            void *v2408 = *v2409;
            v2408[1] = v2410;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v2346, 0, 1, (uint64_t)v2348);
            v380 = v2740;
            v2344 = v2692;
          }
          uint64_t v2411 = v2344[21];
          v2412 = (void *)((char *)v2743 + v2411);
          v2413 = (void *)((char *)v380 + v2411);
          v2414 = (int *)type metadata accessor for PreExtractedContact(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v2413, 1, (uint64_t)v2414))
          {
            uint64_t v2415 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
            memcpy(v2412, v2413, *(void *)(*(void *)(v2415 - 8) + 64));
          }
          else
          {
            uint64_t v2416 = v2413[1];
            void *v2412 = *v2413;
            v2412[1] = v2416;
            uint64_t v2417 = v2413[3];
            v2412[2] = v2413[2];
            v2412[3] = v2417;
            uint64_t v2418 = v2413[5];
            v2412[4] = v2413[4];
            v2412[5] = v2418;
            uint64_t v2419 = v2413[7];
            v2412[6] = v2413[6];
            v2412[7] = v2419;
            uint64_t v2420 = v2413[9];
            v2412[8] = v2413[8];
            v2412[9] = v2420;
            uint64_t v2644 = v2413[11];
            v2412[10] = v2413[10];
            v2412[11] = v2644;
            uint64_t v2421 = v2414[11];
            v2676 = (char *)v2412 + v2421;
            v2422 = (char *)v2413 + v2421;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2422, 1, v2687))
            {
              uint64_t v2423 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2676, v2422, *(void *)(*(void *)(v2423 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2687 - 8) + 16))(v2676, v2422, v2687);
              __swift_storeEnumTagSinglePayload((uint64_t)v2676, 0, 1, v2687);
            }
            uint64_t v2424 = v2414[12];
            v2425 = (void *)((char *)v2412 + v2424);
            v2426 = (void *)((char *)v2413 + v2424);
            uint64_t v2427 = v2426[1];
            void *v2425 = *v2426;
            v2425[1] = v2427;
            *(void *)((char *)v2412 + v2414[13]) = *(void *)((char *)v2413 + v2414[13]);
            uint64_t v2428 = v2414[14];
            v2429 = (char *)v2412 + v2428;
            v2430 = (char *)v2413 + v2428;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v380 = v2740;
            v2344 = v2692;
            if (__swift_getEnumTagSinglePayload((uint64_t)v2430, 1, v2687))
            {
              uint64_t v2431 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2429, v2430, *(void *)(*(void *)(v2431 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2687 - 8) + 16))(v2429, v2430, v2687);
              __swift_storeEnumTagSinglePayload((uint64_t)v2429, 0, 1, v2687);
            }
            *(void *)((char *)v2412 + v2414[15]) = *(void *)((char *)v2413 + v2414[15]);
            *(void *)((char *)v2412 + v2414[16]) = *(void *)((char *)v2413 + v2414[16]);
            uint64_t v2432 = v2414[17];
            v2433 = (void *)((char *)v2412 + v2432);
            v2434 = (void *)((char *)v2413 + v2432);
            uint64_t v2435 = v2434[1];
            void *v2433 = *v2434;
            v2433[1] = v2435;
            *(void *)((char *)v2412 + v2414[18]) = *(void *)((char *)v2413 + v2414[18]);
            *(void *)((char *)v2412 + v2414[19]) = *(void *)((char *)v2413 + v2414[19]);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v2412, 0, 1, (uint64_t)v2414);
          }
          uint64_t v2436 = v2344[22];
          v2437 = (void *)((char *)v2743 + v2436);
          v2438 = (void *)((char *)v380 + v2436);
          v2439 = (int *)type metadata accessor for PreExtractedSharedLink(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v2438, 1, (uint64_t)v2439))
          {
            uint64_t v2440 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
            memcpy(v2437, v2438, *(void *)(*(void *)(v2440 - 8) + 64));
          }
          else
          {
            uint64_t v2441 = v2438[1];
            void *v2437 = *v2438;
            v2437[1] = v2441;
            uint64_t v2442 = v2438[3];
            v2437[2] = v2438[2];
            v2437[3] = v2442;
            uint64_t v2443 = v2438[5];
            v2437[4] = v2438[4];
            v2437[5] = v2443;
            uint64_t v2444 = v2438[7];
            v2437[6] = v2438[6];
            v2437[7] = v2444;
            uint64_t v2445 = v2439[8];
            v2446 = (char *)v2437 + v2445;
            v2447 = (char *)v2438 + v2445;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2447, 1, v2652))
            {
              uint64_t v2448 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v2446, v2447, *(void *)(*(void *)(v2448 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2652 - 8) + 16))(v2446, v2447, v2652);
              __swift_storeEnumTagSinglePayload((uint64_t)v2446, 0, 1, v2652);
            }
            uint64_t v2449 = v2439[9];
            v2450 = (void *)((char *)v2437 + v2449);
            v2451 = (void *)((char *)v2438 + v2449);
            uint64_t v2452 = v2451[1];
            void *v2450 = *v2451;
            v2450[1] = v2452;
            uint64_t v2453 = v2439[10];
            v2454 = (void *)((char *)v2437 + v2453);
            v2455 = (void *)((char *)v2438 + v2453);
            uint64_t v2456 = v2455[1];
            void *v2454 = *v2455;
            v2454[1] = v2456;
            uint64_t v2457 = v2439[11];
            v2458 = (void *)((char *)v2437 + v2457);
            v2459 = (void *)((char *)v2438 + v2457);
            uint64_t v2460 = v2459[1];
            void *v2458 = *v2459;
            v2458[1] = v2460;
            uint64_t v2461 = v2439[12];
            v2462 = (char *)v2437 + v2461;
            v2463 = (char *)v2438 + v2461;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v380 = v2740;
            if (__swift_getEnumTagSinglePayload((uint64_t)v2463, 1, v2687))
            {
              uint64_t v2464 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2462, v2463, *(void *)(*(void *)(v2464 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2687 - 8) + 16))(v2462, v2463, v2687);
              __swift_storeEnumTagSinglePayload((uint64_t)v2462, 0, 1, v2687);
            }
            uint64_t v2465 = v2439[13];
            v2466 = (char *)v2437 + v2465;
            v2467 = (char *)v2438 + v2465;
            if (__swift_getEnumTagSinglePayload((uint64_t)v2438 + v2465, 1, v2687))
            {
              uint64_t v2468 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2466, v2467, *(void *)(*(void *)(v2468 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2687 - 8) + 16))(v2466, v2467, v2687);
              __swift_storeEnumTagSinglePayload((uint64_t)v2466, 0, 1, v2687);
            }
            uint64_t v2469 = v2439[14];
            v2470 = (char *)v2437 + v2469;
            v2471 = (char *)v2438 + v2469;
            *(void *)v2470 = *(void *)v2471;
            v2470[8] = v2471[8];
            uint64_t v2472 = v2439[15];
            v2473 = (void *)((char *)v2437 + v2472);
            v2474 = (void *)((char *)v2438 + v2472);
            uint64_t v2475 = v2474[1];
            void *v2473 = *v2474;
            v2473[1] = v2475;
            uint64_t v2476 = v2439[16];
            v2477 = (void *)((char *)v2437 + v2476);
            v2478 = (void *)((char *)v2438 + v2476);
            uint64_t v2479 = v2478[1];
            void *v2477 = *v2478;
            v2477[1] = v2479;
            uint64_t v2480 = v2439[17];
            v2481 = (void *)((char *)v2437 + v2480);
            v2482 = (void *)((char *)v2438 + v2480);
            uint64_t v2483 = v2482[1];
            void *v2481 = *v2482;
            v2481[1] = v2483;
            uint64_t v2484 = v2439[18];
            v2485 = (void *)((char *)v2437 + v2484);
            v2486 = (void *)((char *)v2438 + v2484);
            uint64_t v2487 = v2486[1];
            void *v2485 = *v2486;
            v2485[1] = v2487;
            uint64_t v2488 = v2439[19];
            v2489 = (void *)((char *)v2437 + v2488);
            v2490 = (void *)((char *)v2438 + v2488);
            uint64_t v2491 = v2490[1];
            void *v2489 = *v2490;
            v2489[1] = v2491;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v2437, 0, 1, (uint64_t)v2439);
          }
          uint64_t v2312 = v2344[23];
          goto LABEL_541;
        case 2u:
          v2728 = v6;
          uint64_t v48 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v48;
          uint64_t v49 = v10[3];
          v9[2] = v10[2];
          v9[3] = v49;
          uint64_t v50 = v10[5];
          v9[4] = v10[4];
          v9[5] = v50;
          uint64_t v51 = type metadata accessor for CalendarEvent(0);
          id v52 = v9;
          uint64_t v53 = (int *)v51;
          uint64_t v54 = *(int *)(v51 + 28);
          uint64_t v55 = (char *)v52 + v54;
          uint64_t v56 = (char *)v10 + v54;
          uint64_t v57 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v56, 1, v57))
          {
            uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v55, v56, *(void *)(*(void *)(v58 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16))(v55, v56, v57);
            __swift_storeEnumTagSinglePayload((uint64_t)v55, 0, 1, v57);
          }
          uint64_t v365 = v53[8];
          long long v366 = (char *)v2743 + v365;
          uint64_t v367 = (char *)v2740 + v365;
          uint64_t v6 = v2728;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2740 + v365, 1, v57))
          {
            uint64_t v368 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v366, v367, *(void *)(*(void *)(v368 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16))(v366, v367, v57);
            __swift_storeEnumTagSinglePayload((uint64_t)v366, 0, 1, v57);
          }
          uint64_t v534 = v53[9];
          long long v535 = (void *)((char *)v2743 + v534);
          long long v536 = (void *)((char *)v2740 + v534);
          uint64_t v537 = v536[1];
          *long long v535 = *v536;
          v535[1] = v537;
          *(void *)((char *)v2743 + v53[10]) = *(void *)((char *)v2740 + v53[10]);
          *(void *)((char *)v2743 + v53[11]) = *(void *)((char *)v2740 + v53[11]);
          uint64_t v538 = v53[12];
          long long v539 = (void *)((char *)v2743 + v538);
          uint64_t v540 = (void *)((char *)v2740 + v538);
          uint64_t v541 = v540[1];
          *long long v539 = *v540;
          v539[1] = v541;
          uint64_t v542 = v53[13];
          uint64_t v543 = (void *)((char *)v2743 + v542);
          uint64_t v544 = (char *)v2740 + v542;
          uint64_t v545 = *(void *)((char *)v2740 + v542);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v545)
          {
            uint64_t v546 = *((void *)v544 + 1);
            uint64_t v547 = *((void *)v544 + 2);
            *uint64_t v543 = v545;
            v543[1] = v546;
            uint64_t v548 = *((void *)v544 + 3);
            uint64_t v549 = *((void *)v544 + 4);
            v543[2] = v547;
            v543[3] = v548;
            v543[4] = v549;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v700 = *((_OWORD *)v544 + 1);
            *(_OWORD *)uint64_t v543 = *(_OWORD *)v544;
            *((_OWORD *)v543 + 1) = v700;
            v543[4] = *((void *)v544 + 4);
          }
          goto LABEL_163;
        case 3u:
          uint64_t v2707 = v11;
          v2719 = v3;
          v2727 = v6;
          uint64_t v59 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v59;
          uint64_t v60 = v10[3];
          v9[2] = v10[2];
          v9[3] = v60;
          uint64_t v61 = v9;
          uint64_t v62 = v10[5];
          uint64_t v63 = v10[6];
          v61[4] = v10[4];
          v61[5] = v62;
          uint64_t v64 = v10[7];
          uint64_t v65 = v10[8];
          v61[6] = v63;
          v61[7] = v64;
          uint64_t v66 = v10[9];
          uint64_t v67 = v10[10];
          v61[8] = v65;
          v61[9] = v66;
          v61[10] = v67;
          uint64_t v68 = type metadata accessor for Photo(0);
          uint64_t v69 = *(int *)(v68 + 44);
          v2657 = (char *)v61 + v69;
          v2679 = (int *)v68;
          uint64_t v70 = (char *)v10 + v69;
          uint64_t v71 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v2693 = v71;
          if (__swift_getEnumTagSinglePayload((uint64_t)v70, 1, v71))
          {
            uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2657, v70, *(void *)(*(void *)(v72 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 16))(v2657, v70, v71);
            __swift_storeEnumTagSinglePayload((uint64_t)v2657, 0, 1, v71);
          }
          v369 = v2743;
          *(void *)((char *)v2743 + v2679[12]) = *(void *)((char *)v10 + v2679[12]);
          *(void *)((char *)v2743 + v2679[13]) = *(void *)((char *)v10 + v2679[13]);
          *(void *)((char *)v2743 + v2679[14]) = *(void *)((char *)v10 + v2679[14]);
          *(void *)((char *)v2743 + v2679[15]) = *(void *)((char *)v10 + v2679[15]);
          uint64_t v370 = v2679[16];
          long long v371 = (void *)((char *)v2743 + v370);
          long long v372 = (void *)((char *)v10 + v370);
          uint64_t v373 = v372[1];
          *long long v371 = *v372;
          v371[1] = v373;
          uint64_t v374 = v2679[17];
          long long v375 = (void *)((char *)v2743 + v374);
          long long v376 = (void *)((char *)v2740 + v374);
          uint64_t v377 = type metadata accessor for PartialExtractedAttributes(0);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v378 = v376;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v376, 1, v377))
          {
            uint64_t v379 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
            memcpy(v375, v376, *(void *)(*(void *)(v379 - 8) + 64));
            v380 = v2740;
          }
          else
          {
            uint64_t v550 = v376[1];
            *long long v375 = *v376;
            v375[1] = v550;
            v2653 = (int *)v377;
            uint64_t v551 = *(int *)(v377 + 20);
            long long v552 = (void *)((char *)v375 + v551);
            long long v553 = (void *)((char *)v376 + v551);
            uint64_t v554 = type metadata accessor for RentalCarReservation(0);
            swift_bridgeObjectRetain();
            v380 = v2740;
            uint64_t v555 = (uint64_t)v375;
            v2664 = v378;
            if (__swift_getEnumTagSinglePayload((uint64_t)v553, 1, v554))
            {
              uint64_t v556 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
              memcpy(v552, v553, *(void *)(*(void *)(v556 - 8) + 64));
            }
            else
            {
              uint64_t v770 = v553[1];
              *long long v552 = *v553;
              v552[1] = v770;
              uint64_t v771 = v553[3];
              v552[2] = v553[2];
              v552[3] = v771;
              uint64_t v772 = v553[5];
              v552[4] = v553[4];
              v552[5] = v772;
              uint64_t v773 = v553[7];
              v552[6] = v553[6];
              v552[7] = v773;
              uint64_t v774 = v553[9];
              v552[8] = v553[8];
              v552[9] = v774;
              uint64_t v775 = v553[11];
              v552[10] = v553[10];
              v552[11] = v775;
              uint64_t v776 = v553[13];
              v552[12] = v553[12];
              v552[13] = v776;
              uint64_t v777 = v553[15];
              v552[14] = v553[14];
              v552[15] = v777;
              *((unsigned char *)v552 + 128) = *((unsigned char *)v553 + 128);
              *(_WORD *)((char *)v552 + 129) = *(_WORD *)((char *)v553 + 129);
              uint64_t v778 = v553[18];
              v552[17] = v553[17];
              v552[18] = v778;
              uint64_t v779 = v553[20];
              v552[19] = v553[19];
              v552[20] = v779;
              uint64_t v780 = v553[22];
              v552[21] = v553[21];
              v552[22] = v780;
              uint64_t v2510 = v553[24];
              v552[23] = v553[23];
              v552[24] = v2510;
              uint64_t v781 = v553[26];
              v552[25] = v553[25];
              v552[26] = v781;
              uint64_t v782 = v553[28];
              v552[27] = v553[27];
              v552[28] = v782;
              uint64_t v783 = v553[30];
              v552[29] = v553[29];
              v552[30] = v783;
              uint64_t v784 = v553[32];
              v552[31] = v553[31];
              v552[32] = v784;
              uint64_t v785 = v553[34];
              v552[33] = v553[33];
              v552[34] = v785;
              uint64_t v786 = v553[36];
              v552[35] = v553[35];
              v552[36] = v786;
              uint64_t v787 = v553[38];
              v552[37] = v553[37];
              v552[38] = v787;
              uint64_t v788 = v553[40];
              v552[39] = v553[39];
              v552[40] = v788;
              uint64_t v789 = v553[42];
              v552[41] = v553[41];
              v552[42] = v789;
              uint64_t v790 = v553[44];
              v552[43] = v553[43];
              v552[44] = v790;
              uint64_t v791 = v553[46];
              v552[45] = v553[45];
              v552[46] = v791;
              uint64_t v792 = v553[47];
              *((unsigned char *)v552 + 384) = *((unsigned char *)v553 + 384);
              v552[47] = v792;
              uint64_t v793 = v553[50];
              v552[49] = v553[49];
              v552[50] = v793;
              uint64_t v794 = v553[52];
              v552[51] = v553[51];
              v552[52] = v794;
              uint64_t v795 = *(int *)(v554 + 140);
              v2616 = (char *)v552 + v795;
              v796 = (char *)v553 + v795;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v796, 1, v2693))
              {
                uint64_t v797 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2616, v796, *(void *)(*(void *)(v797 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2693 - 8) + 16))(v2616, v796, v2693);
                __swift_storeEnumTagSinglePayload((uint64_t)v2616, 0, 1, v2693);
              }
              uint64_t v831 = *(int *)(v554 + 144);
              long long v832 = (char *)v552 + v831;
              uint64_t v833 = (char *)v553 + v831;
              v380 = v2740;
              if (__swift_getEnumTagSinglePayload((uint64_t)v553 + v831, 1, v2693))
              {
                uint64_t v834 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v832, v833, *(void *)(*(void *)(v834 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2693 - 8) + 16))(v832, v833, v2693);
                __swift_storeEnumTagSinglePayload((uint64_t)v832, 0, 1, v2693);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v552, 0, 1, v554);
              uint64_t v378 = v2664;
            }
            v864 = v2653;
            uint64_t v865 = v2653[6];
            uint64_t v866 = (void *)(v555 + v865);
            long long v867 = (void *)((char *)v378 + v865);
            uint64_t v868 = type metadata accessor for TicketedTransportation(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v867, 1, v868))
            {
              uint64_t v869 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
              memcpy(v866, v867, *(void *)(*(void *)(v869 - 8) + 64));
            }
            else
            {
              uint64_t v870 = v867[1];
              *uint64_t v866 = *v867;
              v866[1] = v870;
              uint64_t v871 = v867[3];
              v866[2] = v867[2];
              v866[3] = v871;
              uint64_t v872 = v867[5];
              v866[4] = v867[4];
              v866[5] = v872;
              uint64_t v873 = v867[7];
              v866[6] = v867[6];
              v866[7] = v873;
              uint64_t v874 = v867[9];
              v866[8] = v867[8];
              v866[9] = v874;
              uint64_t v875 = v867[11];
              v866[10] = v867[10];
              v866[11] = v875;
              uint64_t v876 = v867[13];
              v866[12] = v867[12];
              v866[13] = v876;
              uint64_t v877 = v867[15];
              v866[14] = v867[14];
              v866[15] = v877;
              *((unsigned char *)v866 + 128) = *((unsigned char *)v867 + 128);
              *(_WORD *)((char *)v866 + 129) = *(_WORD *)((char *)v867 + 129);
              uint64_t v878 = v867[18];
              v866[17] = v867[17];
              v866[18] = v878;
              uint64_t v879 = v867[20];
              v866[19] = v867[19];
              v866[20] = v879;
              uint64_t v880 = v867[22];
              v866[21] = v867[21];
              v866[22] = v880;
              uint64_t v2515 = v867[24];
              v866[23] = v867[23];
              v866[24] = v2515;
              v2587 = (void *)v867[26];
              v866[25] = v867[25];
              v866[26] = v2587;
              uint64_t v881 = v867[28];
              v866[27] = v867[27];
              v866[28] = v881;
              uint64_t v882 = v867[30];
              v866[29] = v867[29];
              v866[30] = v882;
              uint64_t v883 = v867[32];
              v866[31] = v867[31];
              v866[32] = v883;
              uint64_t v884 = v867[34];
              v866[33] = v867[33];
              v866[34] = v884;
              uint64_t v885 = v867[36];
              uint64_t v886 = v867[35];
              *((unsigned char *)v866 + 296) = *((unsigned char *)v867 + 296);
              v866[35] = v886;
              v866[36] = v885;
              uint64_t v887 = *(int *)(v868 + 112);
              v2617 = (char *)v866 + v887;
              v888 = (char *)v867 + v887;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v888, 1, v2693))
              {
                uint64_t v889 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2617, v888, *(void *)(*(void *)(v889 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2693 - 8) + 16))(v2617, v888, v2693);
                __swift_storeEnumTagSinglePayload((uint64_t)v2617, 0, 1, v2693);
              }
              uint64_t v922 = v868;
              uint64_t v923 = *(int *)(v868 + 116);
              uint64_t v924 = (char *)v866 + v923;
              v925 = (char *)v867 + v923;
              v380 = v2740;
              if (__swift_getEnumTagSinglePayload((uint64_t)v867 + v923, 1, v2693))
              {
                uint64_t v926 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v924, v925, *(void *)(*(void *)(v926 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2693 - 8) + 16))(v924, v925, v2693);
                __swift_storeEnumTagSinglePayload((uint64_t)v924, 0, 1, v2693);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v866, 0, 1, v922);
              uint64_t v378 = v2664;
            }
            uint64_t v958 = v2653[7];
            uint64_t v959 = (void *)(v555 + v958);
            v960 = (void *)((char *)v378 + v958);
            v961 = (int *)type metadata accessor for TicketedShow(0);
            uint64_t v2638 = v555;
            if (__swift_getEnumTagSinglePayload((uint64_t)v960, 1, (uint64_t)v961))
            {
              uint64_t v962 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
              memcpy(v959, v960, *(void *)(*(void *)(v962 - 8) + 64));
            }
            else
            {
              uint64_t v963 = v960[1];
              *uint64_t v959 = *v960;
              v959[1] = v963;
              uint64_t v964 = v960[3];
              v959[2] = v960[2];
              v959[3] = v964;
              uint64_t v965 = v960[5];
              v959[4] = v960[4];
              v959[5] = v965;
              uint64_t v966 = v960[7];
              v959[6] = v960[6];
              v959[7] = v966;
              uint64_t v967 = v960[9];
              v959[8] = v960[8];
              v959[9] = v967;
              uint64_t v968 = v960[11];
              v959[10] = v960[10];
              v959[11] = v968;
              uint64_t v969 = v960[13];
              v959[12] = v960[12];
              v959[13] = v969;
              uint64_t v970 = v960[15];
              v959[14] = v960[14];
              v959[15] = v970;
              *((unsigned char *)v959 + 128) = *((unsigned char *)v960 + 128);
              *(_WORD *)((char *)v959 + 129) = *(_WORD *)((char *)v960 + 129);
              uint64_t v971 = v960[18];
              v959[17] = v960[17];
              v959[18] = v971;
              uint64_t v972 = v960[20];
              v959[19] = v960[19];
              v959[20] = v972;
              uint64_t v973 = v960[22];
              v959[21] = v960[21];
              v959[22] = v973;
              __dstb = (void *)v960[24];
              v959[23] = v960[23];
              v959[24] = __dstb;
              uint64_t v974 = v960[26];
              v959[25] = v960[25];
              v959[26] = v974;
              uint64_t v975 = v960[28];
              v959[27] = v960[27];
              v959[28] = v975;
              v2589 = (void *)v960[30];
              v959[29] = v960[29];
              v959[30] = v2589;
              uint64_t v976 = v960[32];
              v959[31] = v960[31];
              v959[32] = v976;
              uint64_t v977 = v960[34];
              v959[33] = v960[33];
              v959[34] = v977;
              uint64_t v978 = v960[36];
              uint64_t v979 = v960[35];
              *((unsigned char *)v959 + 296) = *((unsigned char *)v960 + 296);
              v959[35] = v979;
              v959[36] = v978;
              uint64_t v980 = v960[39];
              v959[38] = v960[38];
              v959[39] = v980;
              uint64_t v981 = v961[29];
              v2618 = (char *)v959 + v981;
              uint64_t v982 = (char *)v960 + v981;
              uint64_t v983 = type metadata accessor for URL();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v982, 1, v983))
              {
                uint64_t v984 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v2618, v982, *(void *)(*(void *)(v984 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v983 - 8) + 16))(v2618, v982, v983);
                __swift_storeEnumTagSinglePayload((uint64_t)v2618, 0, 1, v983);
              }
              uint64_t v1020 = v961[30];
              uint64_t v1021 = (void *)((char *)v959 + v1020);
              uint64_t v1022 = (void *)((char *)v960 + v1020);
              uint64_t v1023 = v1022[1];
              *uint64_t v1021 = *v1022;
              v1021[1] = v1023;
              uint64_t v1024 = v961[31];
              uint64_t v1025 = (char *)v959 + v1024;
              uint64_t v1026 = (char *)v960 + v1024;
              swift_bridgeObjectRetain();
              v380 = v2740;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1026, 1, v2693))
              {
                uint64_t v1027 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1025, v1026, *(void *)(*(void *)(v1027 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2693 - 8) + 16))(v1025, v1026, v2693);
                __swift_storeEnumTagSinglePayload((uint64_t)v1025, 0, 1, v2693);
              }
              uint64_t v1041 = v961[32];
              uint64_t v1042 = (char *)v959 + v1041;
              v1043 = (char *)v960 + v1041;
              if (__swift_getEnumTagSinglePayload((uint64_t)v960 + v1041, 1, v2693))
              {
                uint64_t v1044 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1042, v1043, *(void *)(*(void *)(v1044 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2693 - 8) + 16))(v1042, v1043, v2693);
                __swift_storeEnumTagSinglePayload((uint64_t)v1042, 0, 1, v2693);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v959, 0, 1, (uint64_t)v961);
              uint64_t v378 = v2664;
            }
            uint64_t v1075 = v2653[8];
            long long v1076 = (void *)(v555 + v1075);
            uint64_t v1077 = (void *)((char *)v378 + v1075);
            uint64_t v1078 = type metadata accessor for Appointment(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1077, 1, v1078))
            {
              uint64_t v1079 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
              memcpy(v1076, v1077, *(void *)(*(void *)(v1079 - 8) + 64));
            }
            else
            {
              uint64_t v1080 = v1077[1];
              *long long v1076 = *v1077;
              v1076[1] = v1080;
              uint64_t v1081 = v1077[3];
              v1076[2] = v1077[2];
              v1076[3] = v1081;
              uint64_t v1082 = v1077[5];
              v1076[4] = v1077[4];
              v1076[5] = v1082;
              uint64_t v1083 = v1077[7];
              v1076[6] = v1077[6];
              v1076[7] = v1083;
              uint64_t v1084 = v1077[9];
              v1076[8] = v1077[8];
              v1076[9] = v1084;
              uint64_t v1085 = v1077[11];
              v1076[10] = v1077[10];
              v1076[11] = v1085;
              uint64_t v1086 = v1077[13];
              v1076[12] = v1077[12];
              v1076[13] = v1086;
              uint64_t v1087 = v1077[15];
              v1076[14] = v1077[14];
              v1076[15] = v1087;
              *((unsigned char *)v1076 + 128) = *((unsigned char *)v1077 + 128);
              *(_WORD *)((char *)v1076 + 129) = *(_WORD *)((char *)v1077 + 129);
              uint64_t v1088 = v1077[18];
              v1076[17] = v1077[17];
              v1076[18] = v1088;
              uint64_t v1089 = v1077[20];
              v1076[19] = v1077[19];
              v1076[20] = v1089;
              uint64_t v1090 = v1077[22];
              v1076[21] = v1077[21];
              v1076[22] = v1090;
              uint64_t v2522 = v1077[24];
              v1076[23] = v1077[23];
              v1076[24] = v2522;
              uint64_t v1091 = v1077[26];
              v1076[25] = v1077[25];
              v1076[26] = v1091;
              uint64_t v1092 = v1077[28];
              v1076[27] = v1077[27];
              v1076[28] = v1092;
              uint64_t v1093 = v1077[30];
              v1076[29] = v1077[29];
              v1076[30] = v1093;
              uint64_t v1094 = v1077[32];
              v1076[31] = v1077[31];
              v1076[32] = v1094;
              uint64_t v1095 = v1077[34];
              uint64_t v1096 = v1077[33];
              *((unsigned char *)v1076 + 280) = *((unsigned char *)v1077 + 280);
              v1076[33] = v1096;
              v1076[34] = v1095;
              uint64_t v1097 = v1077[37];
              v1076[36] = v1077[36];
              v1076[37] = v1097;
              uint64_t v1098 = *(int *)(v1078 + 108);
              v2619 = (char *)v1076 + v1098;
              v1099 = (char *)v1077 + v1098;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1099, 1, v2693))
              {
                uint64_t v1100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2619, v1099, *(void *)(*(void *)(v1100 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2693 - 8) + 16))(v2619, v1099, v2693);
                __swift_storeEnumTagSinglePayload((uint64_t)v2619, 0, 1, v2693);
              }
              uint64_t v1132 = v1078;
              uint64_t v1133 = *(int *)(v1078 + 112);
              uint64_t v1134 = (char *)v1076 + v1133;
              uint64_t v1135 = (char *)v1077 + v1133;
              v380 = v2740;
              v864 = v2653;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1077 + v1133, 1, v2693))
              {
                uint64_t v1136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1134, v1135, *(void *)(*(void *)(v1136 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2693 - 8) + 16))(v1134, v1135, v2693);
                __swift_storeEnumTagSinglePayload((uint64_t)v1134, 0, 1, v2693);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v1076, 0, 1, v1132);
              uint64_t v378 = v2664;
            }
            uint64_t v1167 = v864[9];
            uint64_t v1168 = (void *)(v555 + v1167);
            v1169 = (void *)((char *)v378 + v1167);
            v1170 = (int *)type metadata accessor for Party(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1169, 1, (uint64_t)v1170))
            {
              uint64_t v1171 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
              memcpy(v1168, v1169, *(void *)(*(void *)(v1171 - 8) + 64));
            }
            else
            {
              uint64_t v1172 = v1169[1];
              *uint64_t v1168 = *v1169;
              v1168[1] = v1172;
              uint64_t v1173 = v1169[3];
              v1168[2] = v1169[2];
              v1168[3] = v1173;
              uint64_t v1174 = v1169[5];
              v1168[4] = v1169[4];
              v1168[5] = v1174;
              uint64_t v1175 = v1169[7];
              v1168[6] = v1169[6];
              v1168[7] = v1175;
              uint64_t v1176 = v1169[9];
              v1168[8] = v1169[8];
              v1168[9] = v1176;
              uint64_t v1177 = v1169[11];
              v1168[10] = v1169[10];
              v1168[11] = v1177;
              uint64_t v1178 = v1169[13];
              v1168[12] = v1169[12];
              v1168[13] = v1178;
              uint64_t v1179 = v1169[15];
              v1168[14] = v1169[14];
              v1168[15] = v1179;
              *((unsigned char *)v1168 + 128) = *((unsigned char *)v1169 + 128);
              *(_WORD *)((char *)v1168 + 129) = *(_WORD *)((char *)v1169 + 129);
              uint64_t v1180 = v1169[18];
              v1168[17] = v1169[17];
              v1168[18] = v1180;
              uint64_t v1181 = v1169[20];
              v1168[19] = v1169[19];
              v1168[20] = v1181;
              uint64_t v1182 = v1169[22];
              v1168[21] = v1169[21];
              v1168[22] = v1182;
              uint64_t v1183 = v1169[24];
              v1168[23] = v1169[23];
              v1168[24] = v1183;
              uint64_t v1184 = v1169[26];
              v1168[25] = v1169[25];
              v1168[26] = v1184;
              uint64_t v1185 = v1169[28];
              v1168[27] = v1169[27];
              v1168[28] = v1185;
              uint64_t v1186 = v1169[30];
              v1168[29] = v1169[29];
              v1168[30] = v1186;
              v1168[31] = v1169[31];
              uint64_t v1187 = v1170[24];
              v2592 = (char *)v1168 + v1187;
              v1188 = (char *)v1169 + v1187;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1188, 1, v2693))
              {
                uint64_t v1189 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2592, v1188, *(void *)(*(void *)(v1189 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2693 - 8) + 16))(v2592, v1188, v2693);
                __swift_storeEnumTagSinglePayload((uint64_t)v2592, 0, 1, v2693);
              }
              uint64_t v1217 = v1170[25];
              v1218 = (char *)v1168 + v1217;
              v1219 = (char *)v1169 + v1217;
              uint64_t v555 = v2638;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1169 + v1217, 1, v2693))
              {
                uint64_t v1220 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1218, v1219, *(void *)(*(void *)(v1220 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2693 - 8) + 16))(v1218, v1219, v2693);
                __swift_storeEnumTagSinglePayload((uint64_t)v1218, 0, 1, v2693);
              }
              uint64_t v1230 = v1170[26];
              v1231 = (char *)v1168 + v1230;
              v1232 = (char *)v1169 + v1230;
              uint64_t v1233 = type metadata accessor for URL();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1232, 1, v1233))
              {
                uint64_t v1234 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v1231, v1232, *(void *)(*(void *)(v1234 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1233 - 8) + 16))(v1231, v1232, v1233);
                __swift_storeEnumTagSinglePayload((uint64_t)v1231, 0, 1, v1233);
              }
              v380 = v2740;
              __swift_storeEnumTagSinglePayload((uint64_t)v1168, 0, 1, (uint64_t)v1170);
              uint64_t v378 = v2664;
            }
            uint64_t v1263 = v864[10];
            v1264 = (void *)(v555 + v1263);
            v1265 = (void *)((char *)v378 + v1263);
            v1266 = (int *)type metadata accessor for Trip(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1265, 1, (uint64_t)v1266))
            {
              uint64_t v1267 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
              memcpy(v1264, v1265, *(void *)(*(void *)(v1267 - 8) + 64));
            }
            else
            {
              uint64_t v1268 = v1265[1];
              void *v1264 = *v1265;
              v1264[1] = v1268;
              uint64_t v1269 = v1265[3];
              v1264[2] = v1265[2];
              v1264[3] = v1269;
              uint64_t v1270 = v1265[5];
              v1264[4] = v1265[4];
              v1264[5] = v1270;
              uint64_t v1271 = v1265[7];
              v1264[6] = v1265[6];
              v1264[7] = v1271;
              uint64_t v1272 = v1265[9];
              v1264[8] = v1265[8];
              v1264[9] = v1272;
              uint64_t v1273 = v1265[11];
              v1264[10] = v1265[10];
              v1264[11] = v1273;
              uint64_t v1274 = v1265[13];
              v1264[12] = v1265[12];
              v1264[13] = v1274;
              uint64_t v1275 = v1265[15];
              v1264[14] = v1265[14];
              v1264[15] = v1275;
              *((unsigned char *)v1264 + 128) = *((unsigned char *)v1265 + 128);
              *(_WORD *)((char *)v1264 + 129) = *(_WORD *)((char *)v1265 + 129);
              uint64_t v1276 = v1265[18];
              v1264[17] = v1265[17];
              v1264[18] = v1276;
              uint64_t v1277 = v1265[20];
              v1264[19] = v1265[19];
              v1264[20] = v1277;
              uint64_t v1278 = v1265[22];
              v1264[21] = v1265[21];
              v1264[22] = v1278;
              uint64_t v1279 = v1265[24];
              v1264[23] = v1265[23];
              v1264[24] = v1279;
              uint64_t v1280 = v1265[26];
              v1264[25] = v1265[25];
              v1264[26] = v1280;
              v1264[27] = v1265[27];
              uint64_t v1281 = v1266[22];
              v2594 = (char *)v1264 + v1281;
              v1282 = (char *)v1265 + v1281;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1282, 1, v2693))
              {
                uint64_t v1283 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2594, v1282, *(void *)(*(void *)(v1283 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2693 - 8) + 16))(v2594, v1282, v2693);
                __swift_storeEnumTagSinglePayload((uint64_t)v2594, 0, 1, v2693);
              }
              uint64_t v1309 = v1266[23];
              v1310 = (char *)v1264 + v1309;
              v1311 = (char *)v1265 + v1309;
              uint64_t v555 = v2638;
              v864 = v2653;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1265 + v1309, 1, v2693))
              {
                uint64_t v1312 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1310, v1311, *(void *)(*(void *)(v1312 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2693 - 8) + 16))(v1310, v1311, v2693);
                __swift_storeEnumTagSinglePayload((uint64_t)v1310, 0, 1, v2693);
              }
              uint64_t v1325 = v1266[24];
              v1326 = (char *)v1264 + v1325;
              v1327 = (char *)v1265 + v1325;
              *(void *)v1326 = *(void *)v1327;
              v1326[8] = v1327[8];
              uint64_t v1328 = v1266[25];
              v1329 = (char *)v1264 + v1328;
              v1330 = (char *)v1265 + v1328;
              uint64_t v1331 = type metadata accessor for URL();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1330, 1, v1331))
              {
                uint64_t v1332 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v1329, v1330, *(void *)(*(void *)(v1332 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1331 - 8) + 16))(v1329, v1330, v1331);
                __swift_storeEnumTagSinglePayload((uint64_t)v1329, 0, 1, v1331);
              }
              v380 = v2740;
              __swift_storeEnumTagSinglePayload((uint64_t)v1264, 0, 1, (uint64_t)v1266);
              uint64_t v378 = v2664;
            }
            uint64_t v1356 = v864[11];
            v1357 = (void *)(v555 + v1356);
            v1358 = (void *)((char *)v378 + v1356);
            v1359 = (int *)type metadata accessor for FlightReservation(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1358, 1, (uint64_t)v1359))
            {
              uint64_t v1360 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
              memcpy(v1357, v1358, *(void *)(*(void *)(v1360 - 8) + 64));
            }
            else
            {
              uint64_t v1361 = v1358[1];
              void *v1357 = *v1358;
              v1357[1] = v1361;
              uint64_t v1362 = v1358[3];
              v1357[2] = v1358[2];
              v1357[3] = v1362;
              uint64_t v1363 = v1358[5];
              v1357[4] = v1358[4];
              v1357[5] = v1363;
              uint64_t v1364 = v1358[7];
              v1357[6] = v1358[6];
              v1357[7] = v1364;
              uint64_t v1365 = v1358[9];
              v1357[8] = v1358[8];
              v1357[9] = v1365;
              uint64_t v1366 = v1358[11];
              v1357[10] = v1358[10];
              v1357[11] = v1366;
              *((unsigned char *)v1357 + 96) = *((unsigned char *)v1358 + 96);
              uint64_t v1367 = v1358[14];
              v1357[13] = v1358[13];
              v1357[14] = v1367;
              uint64_t v1368 = v1359[13];
              v2620 = (char *)v1357 + v1368;
              v2553 = (char *)v1358 + v1368;
              uint64_t v1369 = type metadata accessor for URL();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v2553, 1, v1369))
              {
                uint64_t v1370 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v2620, v2553, *(void *)(*(void *)(v1370 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1369 - 8) + 16))(v2620, v2553, v1369);
                __swift_storeEnumTagSinglePayload((uint64_t)v2620, 0, 1, v1369);
              }
              uint64_t v1390 = v1359[14];
              v1391 = (char *)v1357 + v1390;
              v1392 = (char *)v1358 + v1390;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1358 + v1390, 1, v1369))
              {
                uint64_t v1393 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v1391, v1392, *(void *)(*(void *)(v1393 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1369 - 8) + 16))(v1391, v1392, v1369);
                __swift_storeEnumTagSinglePayload((uint64_t)v1391, 0, 1, v1369);
              }
              uint64_t v1468 = v1359[15];
              v1469 = (void *)((char *)v1357 + v1468);
              v1470 = (void *)((char *)v1358 + v1468);
              uint64_t v1471 = v1470[1];
              void *v1469 = *v1470;
              v1469[1] = v1471;
              uint64_t v1472 = v1359[16];
              v1473 = (void *)((char *)v1357 + v1472);
              v1474 = (void *)((char *)v1358 + v1472);
              uint64_t v1475 = v1474[1];
              void *v1473 = *v1474;
              v1473[1] = v1475;
              uint64_t v1476 = v1359[17];
              v1477 = (void *)((char *)v1357 + v1476);
              v1478 = (void *)((char *)v1358 + v1476);
              uint64_t v1479 = v1478[1];
              void *v1477 = *v1478;
              v1477[1] = v1479;
              uint64_t v1480 = v1359[18];
              v2621 = (char *)v1357 + v1480;
              v2597 = (char *)v1358 + v1480;
              uint64_t v1481 = type metadata accessor for DateComponents();
              v1482 = *(void (**)(char *, char *, uint64_t))(*(void *)(v1481 - 8) + 16);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1482(v2621, v2597, v1481);
              v1482((char *)v1357 + v1359[19], (char *)v1358 + v1359[19], v1481);
              uint64_t v1483 = v1359[20];
              v1484 = (void *)((char *)v1357 + v1483);
              v1485 = (void *)((char *)v1358 + v1483);
              uint64_t v1486 = v1485[1];
              void *v1484 = *v1485;
              v1484[1] = v1486;
              uint64_t v1487 = v1359[21];
              v1488 = (void *)((char *)v1357 + v1487);
              v1489 = (void *)((char *)v1358 + v1487);
              uint64_t v1490 = v1489[1];
              void *v1488 = *v1489;
              v1488[1] = v1490;
              uint64_t v1491 = v1359[22];
              v1492 = (void *)((char *)v1357 + v1491);
              v1493 = (void *)((char *)v1358 + v1491);
              v2598 = (void *)v1493[1];
              void *v1492 = *v1493;
              v1492[1] = v2598;
              uint64_t v1494 = v1359[23];
              v1495 = (void *)((char *)v1357 + v1494);
              v1496 = (void *)((char *)v1358 + v1494);
              uint64_t v1497 = v1496[1];
              void *v1495 = *v1496;
              v1495[1] = v1497;
              uint64_t v1498 = v1359[24];
              v1499 = (void *)((char *)v1357 + v1498);
              v1500 = (void *)((char *)v1358 + v1498);
              uint64_t v2622 = v1500[1];
              void *v1499 = *v1500;
              v1499[1] = v2622;
              uint64_t v1501 = v1359[25];
              v1502 = (void *)((char *)v1357 + v1501);
              v1503 = (void *)((char *)v1358 + v1501);
              v2577 = (void *)v1503[1];
              void *v1502 = *v1503;
              v1502[1] = v2577;
              uint64_t v1504 = v1359[26];
              v1505 = (void *)((char *)v1357 + v1504);
              v1506 = (void *)((char *)v1358 + v1504);
              uint64_t v2564 = v1506[1];
              void *v1505 = *v1506;
              v1505[1] = v2564;
              uint64_t v1507 = v1359[27];
              v1508 = (void *)((char *)v1357 + v1507);
              v1509 = (void *)((char *)v1358 + v1507);
              v2556 = (void *)v1509[1];
              void *v1508 = *v1509;
              v1508[1] = v2556;
              uint64_t v1510 = v1359[28];
              v1511 = (void *)((char *)v1357 + v1510);
              v1512 = (void *)((char *)v1358 + v1510);
              uint64_t v2548 = v1512[1];
              void *v1511 = *v1512;
              v1511[1] = v2548;
              uint64_t v1513 = v1359[29];
              v1514 = (void *)((char *)v1357 + v1513);
              v1515 = (void *)((char *)v1358 + v1513);
              v2538 = (void *)v1515[1];
              void *v1514 = *v1515;
              v1514[1] = v2538;
              uint64_t v1516 = v1359[30];
              v1517 = (void *)((char *)v1357 + v1516);
              v1518 = (void *)((char *)v1358 + v1516);
              v2534 = (void *)v1518[1];
              void *v1517 = *v1518;
              v1517[1] = v2534;
              uint64_t v1519 = v1359[31];
              v1520 = (void *)((char *)v1357 + v1519);
              v1521 = (void *)((char *)v1358 + v1519);
              v2530 = (void *)v1521[1];
              void *v1520 = *v1521;
              v1520[1] = v2530;
              uint64_t v1522 = v1359[32];
              v1523 = (void *)((char *)v1357 + v1522);
              v1524 = (void *)((char *)v1358 + v1522);
              uint64_t v2524 = v1524[1];
              void *v1523 = *v1524;
              v1523[1] = v2524;
              *(void *)((char *)v1357 + v1359[33]) = *(void *)((char *)v1358 + v1359[33]);
              *(void *)((char *)v1357 + v1359[34]) = *(void *)((char *)v1358 + v1359[34]);
              uint64_t v1525 = v1359[35];
              v1526 = (void *)((char *)v1357 + v1525);
              v1527 = (void *)((char *)v1358 + v1525);
              uint64_t v1528 = v1527[1];
              void *v1526 = *v1527;
              v1526[1] = v1528;
              uint64_t v1529 = v1359[36];
              v1530 = (void *)((char *)v1357 + v1529);
              v1531 = (void *)((char *)v1358 + v1529);
              uint64_t v1532 = v1531[1];
              void *v1530 = *v1531;
              v1530[1] = v1532;
              uint64_t v1533 = v1359[37];
              v1534 = (void *)((char *)v1357 + v1533);
              v1535 = (void *)((char *)v1358 + v1533);
              uint64_t v1536 = v1535[1];
              void *v1534 = *v1535;
              v1534[1] = v1536;
              uint64_t v1537 = v1359[38];
              v2544 = (char *)v1357 + v1537;
              v1538 = (char *)v1358 + v1537;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1538, 1, v2693))
              {
                uint64_t v1539 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2544, v1538, *(void *)(*(void *)(v1539 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2693 - 8) + 16))(v2544, v1538, v2693);
                __swift_storeEnumTagSinglePayload((uint64_t)v2544, 0, 1, v2693);
              }
              uint64_t v1662 = v1359[39];
              v1663 = (void *)((char *)v1357 + v1662);
              v1664 = (void *)((char *)v1358 + v1662);
              uint64_t v1665 = v1664[1];
              void *v1663 = *v1664;
              v1663[1] = v1665;
              uint64_t v1666 = v1359[40];
              v1667 = (void *)((char *)v1357 + v1666);
              v1668 = (void *)((char *)v1358 + v1666);
              uint64_t v1669 = v1668[1];
              void *v1667 = *v1668;
              v1667[1] = v1669;
              uint64_t v1670 = v1359[41];
              v1671 = (char *)v1357 + v1670;
              v1672 = (char *)v1358 + v1670;
              v1671[8] = v1672[8];
              *(void *)v1671 = *(void *)v1672;
              uint64_t v1673 = v1359[42];
              v1674 = (void *)((char *)v1357 + v1673);
              v1675 = (void *)((char *)v1358 + v1673);
              uint64_t v1676 = v1675[1];
              void *v1674 = *v1675;
              v1674[1] = v1676;
              uint64_t v1677 = v1359[43];
              v1678 = (char *)v1357 + v1677;
              v1679 = (char *)v1358 + v1677;
              *(_OWORD *)v1678 = *(_OWORD *)v1679;
              *(void *)(v1678 + 13) = *(void *)(v1679 + 13);
              uint64_t v1680 = v1359[44];
              v1681 = (void *)((char *)v1357 + v1680);
              v1682 = (void *)((char *)v1358 + v1680);
              uint64_t v1683 = v1682[1];
              void *v1681 = *v1682;
              v1681[1] = v1683;
              uint64_t v1684 = v1359[45];
              v1685 = (void *)((char *)v1357 + v1684);
              v1686 = (void *)((char *)v1358 + v1684);
              uint64_t v1687 = v1686[1];
              void *v1685 = *v1686;
              v1685[1] = v1687;
              uint64_t v1688 = v1359[46];
              v1689 = (void *)((char *)v1357 + v1688);
              v1690 = (void *)((char *)v1358 + v1688);
              uint64_t v1691 = v1690[1];
              void *v1689 = *v1690;
              v1689[1] = v1691;
              uint64_t v1692 = v1359[47];
              v1693 = (void *)((char *)v1357 + v1692);
              v1694 = (void *)((char *)v1358 + v1692);
              uint64_t v1695 = v1694[1];
              void *v1693 = *v1694;
              v1693[1] = v1695;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              __swift_storeEnumTagSinglePayload((uint64_t)v1357, 0, 1, (uint64_t)v1359);
              v380 = v2740;
              uint64_t v555 = v2638;
              v864 = v2653;
              uint64_t v378 = v2664;
            }
            uint64_t v1696 = v864[12];
            v1697 = (void *)(v555 + v1696);
            v1698 = (void *)((char *)v378 + v1696);
            v1699 = (int *)type metadata accessor for HotelReservation(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1698, 1, (uint64_t)v1699))
            {
              uint64_t v1700 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
              memcpy(v1697, v1698, *(void *)(*(void *)(v1700 - 8) + 64));
            }
            else
            {
              uint64_t v1701 = v1698[1];
              void *v1697 = *v1698;
              v1697[1] = v1701;
              uint64_t v1702 = v1698[3];
              v1697[2] = v1698[2];
              v1697[3] = v1702;
              uint64_t v1703 = v1698[5];
              v1697[4] = v1698[4];
              v1697[5] = v1703;
              uint64_t v1704 = v1698[7];
              v1697[6] = v1698[6];
              v1697[7] = v1704;
              uint64_t v1705 = v1698[9];
              v1697[8] = v1698[8];
              v1697[9] = v1705;
              uint64_t v1706 = v1698[11];
              v1697[10] = v1698[10];
              v1697[11] = v1706;
              *((unsigned char *)v1697 + 96) = *((unsigned char *)v1698 + 96);
              uint64_t v1707 = v1698[14];
              v1697[13] = v1698[13];
              v1697[14] = v1707;
              uint64_t v1708 = v1698[16];
              v1697[15] = v1698[15];
              v1697[16] = v1708;
              uint64_t v1709 = v1699[14];
              v2623 = (char *)v1697 + v1709;
              v1710 = (char *)v1698 + v1709;
              uint64_t v2550 = type metadata accessor for DateComponents();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1710, 1, v2550))
              {
                uint64_t v1711 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
                memcpy(v2623, v1710, *(void *)(*(void *)(v1711 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2550 - 8) + 16))(v2623, v1710, v2550);
                __swift_storeEnumTagSinglePayload((uint64_t)v2623, 0, 1, v2550);
              }
              uint64_t v1766 = v1699[15];
              v1767 = (char *)v1697 + v1766;
              v1768 = (char *)v1698 + v1766;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1698 + v1766, 1, v2550))
              {
                uint64_t v1769 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
                memcpy(v1767, v1768, *(void *)(*(void *)(v1769 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2550 - 8) + 16))(v1767, v1768, v2550);
                __swift_storeEnumTagSinglePayload((uint64_t)v1767, 0, 1, v2550);
              }
              uint64_t v1832 = v1699[16];
              v1833 = (void *)((char *)v1697 + v1832);
              v1834 = (void *)((char *)v1698 + v1832);
              uint64_t v1835 = v1834[1];
              void *v1833 = *v1834;
              v1833[1] = v1835;
              uint64_t v1836 = v1699[17];
              v1837 = (void *)((char *)v1697 + v1836);
              v1838 = (void *)((char *)v1698 + v1836);
              uint64_t v1839 = v1838[1];
              void *v1837 = *v1838;
              v1837[1] = v1839;
              uint64_t v1840 = v1699[18];
              v1841 = (void *)((char *)v1697 + v1840);
              v1842 = (void *)((char *)v1698 + v1840);
              uint64_t v2624 = v1842[1];
              void *v1841 = *v1842;
              v1841[1] = v2624;
              uint64_t v1843 = v1699[19];
              v1844 = (void *)((char *)v1697 + v1843);
              v1845 = (void *)((char *)v1698 + v1843);
              v2603 = (void *)v1845[1];
              void *v1844 = *v1845;
              v1844[1] = v2603;
              uint64_t v1846 = v1699[20];
              v1847 = (void *)((char *)v1697 + v1846);
              v1848 = (void *)((char *)v1698 + v1846);
              uint64_t v1849 = v1848[1];
              void *v1847 = *v1848;
              v1847[1] = v1849;
              *(void *)((char *)v1697 + v1699[21]) = *(void *)((char *)v1698 + v1699[21]);
              *(void *)((char *)v1697 + v1699[22]) = *(void *)((char *)v1698 + v1699[22]);
              uint64_t v1850 = v1699[23];
              v1851 = (char *)v1697 + v1850;
              v1852 = (char *)v1698 + v1850;
              *(void *)v1851 = *(void *)v1852;
              v1851[8] = v1852[8];
              uint64_t v1853 = v1699[24];
              v1854 = (char *)v1697 + v1853;
              v1855 = (char *)v1698 + v1853;
              *(void *)v1854 = *(void *)v1855;
              v1854[8] = v1855[8];
              uint64_t v1856 = v1699[25];
              v1857 = (void *)((char *)v1697 + v1856);
              v1858 = (void *)((char *)v1698 + v1856);
              uint64_t v1859 = v1858[1];
              void *v1857 = *v1858;
              v1857[1] = v1859;
              uint64_t v1860 = v1699[26];
              v1861 = (void *)((char *)v1697 + v1860);
              v1862 = (void *)((char *)v1698 + v1860);
              uint64_t v1863 = v1862[1];
              void *v1861 = *v1862;
              v1861[1] = v1863;
              uint64_t v1864 = v1699[27];
              v1865 = (void *)((char *)v1697 + v1864);
              v1866 = (void *)((char *)v1698 + v1864);
              uint64_t v1867 = v1866[1];
              void *v1865 = *v1866;
              v1865[1] = v1867;
              uint64_t v1868 = v1699[28];
              v1869 = (void *)((char *)v1697 + v1868);
              v1870 = (void *)((char *)v1698 + v1868);
              uint64_t v1871 = v1870[1];
              void *v1869 = *v1870;
              v1869[1] = v1871;
              uint64_t v1872 = v1699[29];
              v1873 = (char *)v1697 + v1872;
              v1874 = (char *)v1698 + v1872;
              *(void *)v1873 = *(void *)v1874;
              v1873[8] = v1874[8];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              __swift_storeEnumTagSinglePayload((uint64_t)v1697, 0, 1, (uint64_t)v1699);
              v380 = v2740;
              uint64_t v555 = v2638;
              v864 = v2653;
              uint64_t v378 = v2664;
            }
            uint64_t v1875 = v864[13];
            v1876 = (void *)(v555 + v1875);
            v1877 = (void *)((char *)v378 + v1875);
            v1878 = (int *)type metadata accessor for RestaurantReservation(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1877, 1, (uint64_t)v1878))
            {
              uint64_t v1879 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
              memcpy(v1876, v1877, *(void *)(*(void *)(v1879 - 8) + 64));
            }
            else
            {
              uint64_t v1880 = v1877[1];
              void *v1876 = *v1877;
              v1876[1] = v1880;
              uint64_t v2625 = v1877[3];
              v1876[2] = v1877[2];
              v1876[3] = v2625;
              uint64_t v1881 = v1877[5];
              v1876[4] = v1877[4];
              v1876[5] = v1881;
              uint64_t v1882 = v1877[7];
              v1876[6] = v1877[6];
              v1876[7] = v1882;
              uint64_t v1883 = v1877[9];
              v1876[8] = v1877[8];
              v1876[9] = v1883;
              uint64_t v1884 = v1877[11];
              v1876[10] = v1877[10];
              v1876[11] = v1884;
              *((unsigned char *)v1876 + 96) = *((unsigned char *)v1877 + 96);
              uint64_t v1885 = v1877[14];
              v1876[13] = v1877[13];
              v1876[14] = v1885;
              uint64_t v1886 = v1877[16];
              v1876[15] = v1877[15];
              v1876[16] = v1886;
              uint64_t v1887 = v1878[14];
              v2668 = (char *)v1876 + v1887;
              v1888 = (char *)v1877 + v1887;
              uint64_t v1889 = type metadata accessor for DateComponents();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1888, 1, v1889))
              {
                uint64_t v1890 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
                memcpy(v2668, v1888, *(void *)(*(void *)(v1890 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1889 - 8) + 16))(v2668, v1888, v1889);
                __swift_storeEnumTagSinglePayload((uint64_t)v2668, 0, 1, v1889);
              }
              uint64_t v2135 = v1878[15];
              v2136 = (void *)((char *)v1876 + v2135);
              v2137 = (void *)((char *)v1877 + v2135);
              uint64_t v2138 = v2137[1];
              void *v2136 = *v2137;
              v2136[1] = v2138;
              uint64_t v2139 = v1878[16];
              v2140 = (void *)((char *)v1876 + v2139);
              v2141 = (void *)((char *)v1877 + v2139);
              uint64_t v2142 = v2141[1];
              void *v2140 = *v2141;
              v2140[1] = v2142;
              uint64_t v2143 = v1878[17];
              v2144 = (void *)((char *)v1876 + v2143);
              v2145 = (void *)((char *)v1877 + v2143);
              uint64_t v2670 = v2145[1];
              void *v2144 = *v2145;
              v2144[1] = v2670;
              uint64_t v2146 = v1878[18];
              v2147 = (void *)((char *)v1876 + v2146);
              v2148 = (void *)((char *)v1877 + v2146);
              uint64_t v2149 = v2148[1];
              void *v2147 = *v2148;
              v2147[1] = v2149;
              uint64_t v2150 = v1878[19];
              v2151 = (void *)((char *)v1876 + v2150);
              v2152 = (void *)((char *)v1877 + v2150);
              uint64_t v2153 = v2152[1];
              void *v2151 = *v2152;
              v2151[1] = v2153;
              *(void *)((char *)v1876 + v1878[20]) = *(void *)((char *)v1877 + v1878[20]);
              uint64_t v2154 = v1878[21];
              v2155 = (void *)((char *)v1876 + v2154);
              v2156 = (void *)((char *)v1877 + v2154);
              uint64_t v2157 = v2156[1];
              void *v2155 = *v2156;
              v2155[1] = v2157;
              uint64_t v2158 = v1878[22];
              v2159 = (void *)((char *)v1876 + v2158);
              v2160 = (void *)((char *)v1877 + v2158);
              uint64_t v2161 = v2160[1];
              void *v2159 = *v2160;
              v2159[1] = v2161;
              uint64_t v2162 = v1878[23];
              v2163 = (void *)((char *)v1876 + v2162);
              v2164 = (void *)((char *)v1877 + v2162);
              uint64_t v2165 = v2164[1];
              void *v2163 = *v2164;
              v2163[1] = v2165;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              __swift_storeEnumTagSinglePayload((uint64_t)v1876, 0, 1, (uint64_t)v1878);
              v380 = v2740;
              uint64_t v555 = v2638;
              v864 = v2653;
            }
            __swift_storeEnumTagSinglePayload(v555, 0, 1, (uint64_t)v864);
            v369 = v2743;
          }
          uint64_t v2166 = v2679[18];
          v2167 = (void *)((char *)v369 + v2166);
          v2168 = (void *)((char *)v380 + v2166);
          v2169 = (int *)type metadata accessor for PreExtractedCard(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v2168, 1, (uint64_t)v2169))
          {
            uint64_t v2170 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
            memcpy(v2167, v2168, *(void *)(*(void *)(v2170 - 8) + 64));
          }
          else
          {
            uint64_t v2171 = v2168[1];
            void *v2167 = *v2168;
            v2167[1] = v2171;
            uint64_t v2172 = v2168[3];
            v2167[2] = v2168[2];
            v2167[3] = v2172;
            uint64_t v2173 = v2168[5];
            v2167[4] = v2168[4];
            v2167[5] = v2173;
            uint64_t v2174 = v2168[7];
            v2167[6] = v2168[6];
            v2167[7] = v2174;
            uint64_t v2175 = v2168[9];
            v2167[8] = v2168[8];
            v2167[9] = v2175;
            uint64_t v2176 = v2168[11];
            v2167[10] = v2168[10];
            v2167[11] = v2176;
            uint64_t v2177 = v2169[10];
            v2671 = (char *)v2167 + v2177;
            v2178 = (char *)v2168 + v2177;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2178, 1, v2693))
            {
              uint64_t v2179 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2671, v2178, *(void *)(*(void *)(v2179 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2693 - 8) + 16))(v2671, v2178, v2693);
              __swift_storeEnumTagSinglePayload((uint64_t)v2671, 0, 1, v2693);
            }
            uint64_t v2180 = v2169[11];
            v2181 = (char *)v2167 + v2180;
            v2182 = (char *)v2168 + v2180;
            if (__swift_getEnumTagSinglePayload((uint64_t)v2168 + v2180, 1, v2693))
            {
              uint64_t v2183 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2181, v2182, *(void *)(*(void *)(v2183 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2693 - 8) + 16))(v2181, v2182, v2693);
              __swift_storeEnumTagSinglePayload((uint64_t)v2181, 0, 1, v2693);
            }
            uint64_t v2184 = v2169[12];
            v2185 = (void *)((char *)v2167 + v2184);
            v2186 = (void *)((char *)v2168 + v2184);
            uint64_t v2187 = v2186[1];
            void *v2185 = *v2186;
            v2185[1] = v2187;
            uint64_t v2188 = v2169[13];
            v2189 = (void *)((char *)v2167 + v2188);
            v2190 = (void *)((char *)v2168 + v2188);
            uint64_t v2191 = v2190[1];
            void *v2189 = *v2190;
            v2189[1] = v2191;
            uint64_t v2192 = v2169[14];
            v2193 = (void *)((char *)v2167 + v2192);
            v2194 = (void *)((char *)v2168 + v2192);
            uint64_t v2195 = v2194[1];
            void *v2193 = *v2194;
            v2193[1] = v2195;
            uint64_t v2196 = v2169[15];
            v2197 = (char *)v2167 + v2196;
            v2198 = (char *)v2168 + v2196;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2198, 1, v2693))
            {
              uint64_t v2199 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2197, v2198, *(void *)(*(void *)(v2199 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2693 - 8) + 16))(v2197, v2198, v2693);
              __swift_storeEnumTagSinglePayload((uint64_t)v2197, 0, 1, v2693);
            }
            uint64_t v2200 = v2169[16];
            v2201 = (void *)((char *)v2167 + v2200);
            v2202 = (void *)((char *)v2168 + v2200);
            uint64_t v2203 = v2202[1];
            void *v2201 = *v2202;
            v2201[1] = v2203;
            uint64_t v2204 = v2169[17];
            v2205 = (void *)((char *)v2167 + v2204);
            v2206 = (void *)((char *)v2168 + v2204);
            uint64_t v2207 = v2206[1];
            void *v2205 = *v2206;
            v2205[1] = v2207;
            uint64_t v2208 = v2169[18];
            v2209 = (void *)((char *)v2167 + v2208);
            v2210 = (void *)((char *)v2168 + v2208);
            uint64_t v2211 = v2210[1];
            void *v2209 = *v2210;
            v2209[1] = v2211;
            uint64_t v2212 = v2169[19];
            v2213 = (void *)((char *)v2167 + v2212);
            v2214 = (void *)((char *)v2168 + v2212);
            uint64_t v2215 = v2214[1];
            void *v2213 = *v2214;
            v2213[1] = v2215;
            uint64_t v2216 = v2169[20];
            v2217 = (void *)((char *)v2167 + v2216);
            v2218 = (void *)((char *)v2168 + v2216);
            uint64_t v2219 = v2218[1];
            void *v2217 = *v2218;
            v2217[1] = v2219;
            uint64_t v2220 = v2169[21];
            v2221 = (void *)((char *)v2167 + v2220);
            v2222 = (void *)((char *)v2168 + v2220);
            uint64_t v2223 = v2222[1];
            void *v2221 = *v2222;
            v2221[1] = v2223;
            uint64_t v2224 = v2169[22];
            v2225 = (void *)((char *)v2167 + v2224);
            v2226 = (void *)((char *)v2168 + v2224);
            uint64_t v2227 = v2226[1];
            void *v2225 = *v2226;
            v2225[1] = v2227;
            uint64_t v2228 = v2169[23];
            v2229 = (void *)((char *)v2167 + v2228);
            v2230 = (void *)((char *)v2168 + v2228);
            uint64_t v2231 = v2230[1];
            void *v2229 = *v2230;
            v2229[1] = v2231;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v2167, 0, 1, (uint64_t)v2169);
            v380 = v2740;
          }
          uint64_t v2232 = v2679[19];
          v2233 = (void *)((char *)v2743 + v2232);
          v2234 = (void *)((char *)v380 + v2232);
          v2235 = (int *)type metadata accessor for PreExtractedContact(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v2234, 1, (uint64_t)v2235))
          {
            uint64_t v2236 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
            memcpy(v2233, v2234, *(void *)(*(void *)(v2236 - 8) + 64));
          }
          else
          {
            uint64_t v2237 = v2234[1];
            void *v2233 = *v2234;
            v2233[1] = v2237;
            uint64_t v2238 = v2234[3];
            v2233[2] = v2234[2];
            v2233[3] = v2238;
            uint64_t v2239 = v2234[5];
            v2233[4] = v2234[4];
            v2233[5] = v2239;
            uint64_t v2240 = v2234[7];
            v2233[6] = v2234[6];
            v2233[7] = v2240;
            uint64_t v2241 = v2234[9];
            v2233[8] = v2234[8];
            v2233[9] = v2241;
            uint64_t v2655 = v2234[11];
            v2233[10] = v2234[10];
            v2233[11] = v2655;
            uint64_t v2242 = v2235[11];
            v2672 = (char *)v2233 + v2242;
            v2643 = (char *)v2234 + v2242;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2643, 1, v2693))
            {
              uint64_t v2243 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2672, v2643, *(void *)(*(void *)(v2243 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2693 - 8) + 16))(v2672, v2643, v2693);
              __swift_storeEnumTagSinglePayload((uint64_t)v2672, 0, 1, v2693);
            }
            uint64_t v2244 = v2235[12];
            v2245 = (void *)((char *)v2233 + v2244);
            v2246 = (void *)((char *)v2234 + v2244);
            uint64_t v2247 = v2246[1];
            void *v2245 = *v2246;
            v2245[1] = v2247;
            *(void *)((char *)v2233 + v2235[13]) = *(void *)((char *)v2234 + v2235[13]);
            uint64_t v2248 = v2235[14];
            v2249 = (char *)v2233 + v2248;
            v2250 = (char *)v2234 + v2248;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v380 = v2740;
            if (__swift_getEnumTagSinglePayload((uint64_t)v2250, 1, v2693))
            {
              uint64_t v2251 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2249, v2250, *(void *)(*(void *)(v2251 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2693 - 8) + 16))(v2249, v2250, v2693);
              __swift_storeEnumTagSinglePayload((uint64_t)v2249, 0, 1, v2693);
            }
            *(void *)((char *)v2233 + v2235[15]) = *(void *)((char *)v2234 + v2235[15]);
            *(void *)((char *)v2233 + v2235[16]) = *(void *)((char *)v2234 + v2235[16]);
            uint64_t v2252 = v2235[17];
            v2253 = (void *)((char *)v2233 + v2252);
            v2254 = (void *)((char *)v2234 + v2252);
            uint64_t v2255 = v2254[1];
            void *v2253 = *v2254;
            v2253[1] = v2255;
            *(void *)((char *)v2233 + v2235[18]) = *(void *)((char *)v2234 + v2235[18]);
            *(void *)((char *)v2233 + v2235[19]) = *(void *)((char *)v2234 + v2235[19]);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v2233, 0, 1, (uint64_t)v2235);
          }
          uint64_t v2256 = v2679[20];
          v2257 = (void *)((char *)v2743 + v2256);
          v2258 = (void *)((char *)v380 + v2256);
          v2259 = (int *)type metadata accessor for PreExtractedSharedLink(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v2258, 1, (uint64_t)v2259))
          {
            uint64_t v2260 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
            memcpy(v2257, v2258, *(void *)(*(void *)(v2260 - 8) + 64));
          }
          else
          {
            uint64_t v2261 = v2258[1];
            void *v2257 = *v2258;
            v2257[1] = v2261;
            uint64_t v2262 = v2258[3];
            v2257[2] = v2258[2];
            v2257[3] = v2262;
            uint64_t v2263 = v2258[5];
            v2257[4] = v2258[4];
            v2257[5] = v2263;
            uint64_t v2264 = v2258[7];
            v2257[6] = v2258[6];
            v2257[7] = v2264;
            uint64_t v2265 = v2259[8];
            v2673 = (char *)v2257 + v2265;
            v2266 = (char *)v2258 + v2265;
            uint64_t v2267 = type metadata accessor for URL();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2266, 1, v2267))
            {
              uint64_t v2268 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v2673, v2266, *(void *)(*(void *)(v2268 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2267 - 8) + 16))(v2673, v2266, v2267);
              __swift_storeEnumTagSinglePayload((uint64_t)v2673, 0, 1, v2267);
            }
            uint64_t v2269 = v2259[9];
            v2270 = (void *)((char *)v2257 + v2269);
            v2271 = (void *)((char *)v2258 + v2269);
            uint64_t v2272 = v2271[1];
            void *v2270 = *v2271;
            v2270[1] = v2272;
            uint64_t v2273 = v2259[10];
            v2274 = (void *)((char *)v2257 + v2273);
            v2275 = (void *)((char *)v2258 + v2273);
            uint64_t v2276 = v2275[1];
            void *v2274 = *v2275;
            v2274[1] = v2276;
            uint64_t v2277 = v2259[11];
            v2278 = (void *)((char *)v2257 + v2277);
            v2279 = (void *)((char *)v2258 + v2277);
            uint64_t v2280 = v2279[1];
            void *v2278 = *v2279;
            v2278[1] = v2280;
            uint64_t v2281 = v2259[12];
            v2282 = (char *)v2257 + v2281;
            v2283 = (char *)v2258 + v2281;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v380 = v2740;
            if (__swift_getEnumTagSinglePayload((uint64_t)v2283, 1, v2693))
            {
              uint64_t v2284 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2282, v2283, *(void *)(*(void *)(v2284 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2693 - 8) + 16))(v2282, v2283, v2693);
              __swift_storeEnumTagSinglePayload((uint64_t)v2282, 0, 1, v2693);
            }
            uint64_t v2285 = v2259[13];
            v2286 = (char *)v2257 + v2285;
            v2287 = (char *)v2258 + v2285;
            if (__swift_getEnumTagSinglePayload((uint64_t)v2258 + v2285, 1, v2693))
            {
              uint64_t v2288 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2286, v2287, *(void *)(*(void *)(v2288 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2693 - 8) + 16))(v2286, v2287, v2693);
              __swift_storeEnumTagSinglePayload((uint64_t)v2286, 0, 1, v2693);
            }
            uint64_t v2289 = v2259[14];
            v2290 = (char *)v2257 + v2289;
            v2291 = (char *)v2258 + v2289;
            *(void *)v2290 = *(void *)v2291;
            v2290[8] = v2291[8];
            uint64_t v2292 = v2259[15];
            v2293 = (void *)((char *)v2257 + v2292);
            v2294 = (void *)((char *)v2258 + v2292);
            uint64_t v2295 = v2294[1];
            void *v2293 = *v2294;
            v2293[1] = v2295;
            uint64_t v2296 = v2259[16];
            v2297 = (void *)((char *)v2257 + v2296);
            v2298 = (void *)((char *)v2258 + v2296);
            uint64_t v2299 = v2298[1];
            void *v2297 = *v2298;
            v2297[1] = v2299;
            uint64_t v2300 = v2259[17];
            v2301 = (void *)((char *)v2257 + v2300);
            v2302 = (void *)((char *)v2258 + v2300);
            uint64_t v2303 = v2302[1];
            void *v2301 = *v2302;
            v2301[1] = v2303;
            uint64_t v2304 = v2259[18];
            v2305 = (void *)((char *)v2257 + v2304);
            v2306 = (void *)((char *)v2258 + v2304);
            uint64_t v2307 = v2306[1];
            void *v2305 = *v2306;
            v2305[1] = v2307;
            uint64_t v2308 = v2259[19];
            v2309 = (void *)((char *)v2257 + v2308);
            v2310 = (void *)((char *)v2258 + v2308);
            uint64_t v2311 = v2310[1];
            void *v2309 = *v2310;
            v2309[1] = v2311;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v2257, 0, 1, (uint64_t)v2259);
          }
          uint64_t v2312 = v2679[21];
LABEL_541:
          uint64_t v9 = v2743;
          v2492 = (void *)((char *)v2743 + v2312);
          v2493 = (void *)((char *)v380 + v2312);
          uint64_t v2494 = *(void *)((char *)v380 + v2312 + 8);
          if (v2494)
          {
            void *v2492 = *v2493;
            v2492[1] = v2494;
            uint64_t v2495 = v2493[3];
            v2492[2] = v2493[2];
            v2492[3] = v2495;
            uint64_t v2496 = v2493[5];
            v2492[4] = v2493[4];
            v2492[5] = v2496;
            uint64_t v2497 = v2493[7];
            v2492[6] = v2493[6];
            v2492[7] = v2497;
            uint64_t v2498 = v2493[9];
            v2492[8] = v2493[8];
            v2492[9] = v2498;
            uint64_t v2499 = v2493[11];
            v2492[10] = v2493[10];
            v2492[11] = v2499;
            uint64_t v2500 = v2493[13];
            v2492[12] = v2493[12];
            v2492[13] = v2500;
            uint64_t v2501 = v2493[15];
            v2492[14] = v2493[14];
            v2492[15] = v2501;
            uint64_t v2742 = v2493[17];
            v2492[16] = v2493[16];
            v2492[17] = v2742;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v9 = v2743;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_543:
            swift_bridgeObjectRetain();
          }
          else
          {
            memcpy(v2492, v2493, 0x90uLL);
          }
          uint64_t v3 = v2719;
          uint64_t v6 = v2727;
LABEL_546:
          uint64_t v11 = v2707;
          goto LABEL_547;
        case 4u:
          v2720 = v3;
          v2729 = v6;
          uint64_t v73 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v73;
          uint64_t v74 = v10[3];
          v9[2] = v10[2];
          v9[3] = v74;
          uint64_t v75 = v10[5];
          v9[4] = v10[4];
          v9[5] = v75;
          uint64_t v76 = v10[7];
          v9[6] = v10[6];
          v9[7] = v76;
          uint64_t v77 = type metadata accessor for NoteDocument(0);
          uint64_t v78 = v10;
          uint64_t v79 = v77;
          uint64_t v80 = *(int *)(v77 + 32);
          long long v81 = (char *)v9 + v80;
          uint64_t v82 = (char *)v78 + v80;
          uint64_t v83 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v82, 1, v83))
          {
            uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v81, v82, *(void *)(*(void *)(v84 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 16))(v81, v82, v83);
            __swift_storeEnumTagSinglePayload((uint64_t)v81, 0, 1, v83);
          }
          uint64_t v381 = *(int *)(v79 + 36);
          uint64_t v9 = v2743;
          uint64_t v382 = (char *)v2743 + v381;
          uint64_t v383 = (uint64_t)v2740 + v381;
          uint64_t v3 = v2720;
          uint64_t v6 = v2729;
          if (!__swift_getEnumTagSinglePayload((uint64_t)v2740 + v381, 1, v83)) {
            goto LABEL_148;
          }
          goto LABEL_146;
        case 5u:
          v2730 = v6;
          uint64_t v85 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v85;
          uint64_t v86 = v10[3];
          v9[2] = v10[2];
          v9[3] = v86;
          uint64_t v87 = v10[5];
          v9[4] = v10[4];
          v9[5] = v87;
          uint64_t v88 = type metadata accessor for Reminder(0);
          char v89 = v10;
          uint64_t v90 = (int *)v88;
          uint64_t v91 = *(int *)(v88 + 28);
          char v92 = (char *)v9 + v91;
          char v93 = (char *)v89 + v91;
          uint64_t v94 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v93, 1, v94))
          {
            uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v92, v93, *(void *)(*(void *)(v95 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v94 - 8) + 16))(v92, v93, v94);
            __swift_storeEnumTagSinglePayload((uint64_t)v92, 0, 1, v94);
          }
          uint64_t v384 = v90[8];
          uint64_t v385 = (char *)v2743 + v384;
          uint64_t v386 = (char *)v2740 + v384;
          uint64_t v6 = v2730;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2740 + v384, 1, v94))
          {
            uint64_t v387 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v385, v386, *(void *)(*(void *)(v387 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v94 - 8) + 16))(v385, v386, v94);
            __swift_storeEnumTagSinglePayload((uint64_t)v385, 0, 1, v94);
          }
          uint64_t v9 = v2743;
          *((unsigned char *)v2743 + v90[9]) = *((unsigned char *)v2740 + v90[9]);
          uint64_t v557 = v90[10];
          v558 = (void *)((char *)v2743 + v557);
          v559 = (void *)((char *)v2740 + v557);
          uint64_t v560 = v559[1];
          void *v558 = *v559;
          v558[1] = v560;
          uint64_t v561 = v90[11];
          v562 = (void *)((char *)v2743 + v561);
          v563 = (void *)((char *)v2740 + v561);
          uint64_t v564 = v563[1];
          void *v562 = *v563;
          v562[1] = v564;
          uint64_t v565 = v90[12];
          uint64_t v397 = (char *)v2743 + v565;
          uint64_t v398 = (uint64_t)v2740 + v565;
          uint64_t v399 = type metadata accessor for URL();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_156;
        case 6u:
          uint64_t v2708 = v11;
          v2731 = v6;
          uint64_t v96 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v96;
          uint64_t v97 = v10[3];
          v9[2] = v10[2];
          v9[3] = v97;
          uint64_t v98 = v10[5];
          v9[4] = v10[4];
          v9[5] = v98;
          uint64_t v99 = v10;
          uint64_t v100 = v10[6];
          uint64_t v101 = v10[7];
          v9[6] = v100;
          v9[7] = v101;
          uint64_t v102 = (int *)type metadata accessor for PhoneHistory(0);
          uint64_t v103 = v102[10];
          v2694 = (char *)v9 + v103;
          uint64_t v104 = (char *)v99 + v103;
          uint64_t v105 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v104, 1, v105))
          {
            uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2694, v104, *(void *)(*(void *)(v106 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v105 - 8) + 16))(v2694, v104, v105);
            __swift_storeEnumTagSinglePayload((uint64_t)v2694, 0, 1, v105);
          }
          uint64_t v388 = v102[11];
          uint64_t v9 = v2743;
          uint64_t v389 = (void *)((char *)v2743 + v388);
          uint64_t v390 = (void *)((char *)v2740 + v388);
          uint64_t v391 = v390[1];
          *uint64_t v389 = *v390;
          v389[1] = v391;
          uint64_t v392 = v102[12];
          uint64_t v393 = (void *)((char *)v2743 + v392);
          uint64_t v394 = (void *)((char *)v2740 + v392);
          uint64_t v395 = v394[1];
          *uint64_t v393 = *v394;
          v393[1] = v395;
          uint64_t v396 = v102[13];
          uint64_t v397 = (char *)v2743 + v396;
          uint64_t v398 = (uint64_t)v2740 + v396;
          uint64_t v399 = type metadata accessor for URL();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v6 = v2731;
          uint64_t v11 = v2708;
          if (!__swift_getEnumTagSinglePayload(v398, 1, v399)) {
            goto LABEL_78;
          }
          goto LABEL_157;
        case 7u:
          v2732 = v6;
          uint64_t v107 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v107;
          uint64_t v108 = v10[3];
          v9[2] = v10[2];
          v9[3] = v108;
          uint64_t v109 = v10[5];
          v9[4] = v10[4];
          v9[5] = v109;
          uint64_t v110 = type metadata accessor for VoicemailTranscript(0);
          uint64_t v111 = *(int *)(v110 + 28);
          uint64_t v112 = (char *)v9 + v111;
          v113 = (char *)v10 + v111;
          uint64_t v114 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v113, 1, v114))
          {
            uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v112, v113, *(void *)(*(void *)(v115 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v114 - 8) + 16))(v112, v113, v114);
            __swift_storeEnumTagSinglePayload((uint64_t)v112, 0, 1, v114);
          }
          uint64_t v402 = *(int *)(v110 + 32);
          uint64_t v9 = v2743;
          uint64_t v397 = (char *)v2743 + v402;
          uint64_t v398 = (uint64_t)v2740 + v402;
          uint64_t v399 = type metadata accessor for URL();
          uint64_t v6 = v2732;
          if (!__swift_getEnumTagSinglePayload(v398, 1, v399)) {
            goto LABEL_78;
          }
          goto LABEL_157;
        case 8u:
          uint64_t v116 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v116;
          uint64_t v117 = v10[3];
          v9[2] = v10[2];
          v9[3] = v117;
          long long v118 = v9;
          uint64_t v119 = v10[5];
          v118[4] = v10[4];
          v118[5] = v119;
          uint64_t v120 = *(int *)(type metadata accessor for JournalEntry(0) + 28);
          uint64_t v121 = (char *)v118 + v120;
          v122 = (char *)v10 + v120;
          uint64_t v123 = type metadata accessor for URL();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v122, 1, v123))
          {
            uint64_t v124 = &demangling cache variable for type metadata for URL?;
            goto LABEL_111;
          }
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v123 - 8) + 16))(v121, v122, v123);
          uint64_t v403 = (uint64_t)v121;
          uint64_t v404 = v123;
          goto LABEL_113;
        case 9u:
          uint64_t v125 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v125;
          uint64_t v126 = v10[3];
          v9[2] = v10[2];
          v9[3] = v126;
          long long v127 = (int *)type metadata accessor for VoiceMemo(0);
          uint64_t v128 = v127[6];
          v129 = (char *)v9 + v128;
          uint64_t v130 = (char *)v10 + v128;
          uint64_t v131 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v130, 1, v131))
          {
            uint64_t v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v129, v130, *(void *)(*(void *)(v132 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v131 - 8) + 16))(v129, v130, v131);
            __swift_storeEnumTagSinglePayload((uint64_t)v129, 0, 1, v131);
          }
          uint64_t v405 = v127[7];
          uint64_t v406 = v2740;
          uint64_t v9 = v2743;
          v407 = (char *)v2743 + v405;
          v408 = (char *)v2740 + v405;
          *(void *)v407 = *(void *)v408;
          v407[8] = v408[8];
          uint64_t v409 = v127[8];
          goto LABEL_154;
        case 0xAu:
          uint64_t v133 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v133;
          uint64_t v134 = v10[3];
          v9[2] = v10[2];
          v9[3] = v134;
          uint64_t v135 = type metadata accessor for Safari(0);
          long long v136 = v10;
          long long v137 = (int *)v135;
          uint64_t v138 = *(int *)(v135 + 24);
          long long v139 = (char *)v9 + v138;
          long long v140 = (char *)v136 + v138;
          uint64_t v83 = type metadata accessor for URL();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v140, 1, v83))
          {
            uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v139, v140, *(void *)(*(void *)(v141 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 16))(v139, v140, v83);
            __swift_storeEnumTagSinglePayload((uint64_t)v139, 0, 1, v83);
          }
          uint64_t v410 = v137[7];
          uint64_t v9 = v2743;
          v411 = (void *)((char *)v2743 + v410);
          v412 = (void *)((char *)v2740 + v410);
          uint64_t v413 = v412[1];
          void *v411 = *v412;
          v411[1] = v413;
          uint64_t v414 = v137[8];
          long long v415 = (void *)((char *)v2743 + v414);
          long long v416 = (void *)((char *)v2740 + v414);
          uint64_t v417 = v416[1];
          *long long v415 = *v416;
          v415[1] = v417;
          uint64_t v418 = v137[9];
          uint64_t v382 = (char *)v2743 + v418;
          uint64_t v383 = (uint64_t)v2740 + v418;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (!__swift_getEnumTagSinglePayload(v383, 1, v83)) {
            goto LABEL_148;
          }
          long long v419 = &demangling cache variable for type metadata for URL?;
          goto LABEL_147;
        case 0xBu:
          uint64_t v142 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v142;
          uint64_t v143 = (void *)v10[2];
          v9[2] = v143;
          swift_bridgeObjectRetain();
          id v144 = v143;
          goto LABEL_547;
        case 0xCu:
          v2733 = v6;
          uint64_t v145 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v145;
          uint64_t v146 = v10[3];
          v9[2] = v10[2];
          v9[3] = v146;
          uint64_t v147 = v10[5];
          v9[4] = v10[4];
          v9[5] = v147;
          long long v148 = (int *)type metadata accessor for WalletTransaction(0);
          uint64_t v149 = v148[7];
          long long v150 = (char *)v9 + v149;
          long long v151 = (char *)v10 + v149;
          uint64_t v152 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v151, 1, v152))
          {
            uint64_t v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v150, v151, *(void *)(*(void *)(v153 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v152 - 8) + 16))(v150, v151, v152);
            __swift_storeEnumTagSinglePayload((uint64_t)v150, 0, 1, v152);
          }
          uint64_t v6 = v2733;
          uint64_t v420 = v148[8];
          uint64_t v9 = v2743;
          uint64_t v421 = (void *)((char *)v2743 + v420);
          uint64_t v422 = (void *)((char *)v2740 + v420);
          uint64_t v423 = v422[1];
          *uint64_t v421 = *v422;
          v421[1] = v423;
          uint64_t v424 = v148[9];
          uint64_t v425 = (void *)((char *)v2743 + v424);
          uint64_t v426 = (void *)((char *)v2740 + v424);
          uint64_t v427 = v426[1];
          *uint64_t v425 = *v426;
          v425[1] = v427;
          uint64_t v428 = v148[10];
          uint64_t v429 = (void *)((char *)v2743 + v428);
          uint64_t v430 = (void *)((char *)v2740 + v428);
          uint64_t v431 = v430[1];
          *uint64_t v429 = *v430;
          v429[1] = v431;
          uint64_t v432 = v148[11];
          long long v433 = (char *)v2743 + v432;
          long long v434 = (char *)v2740 + v432;
          *(_OWORD *)long long v433 = *(_OWORD *)v434;
          *(void *)(v433 + 13) = *(void *)(v434 + 13);
          uint64_t v435 = v148[12];
          long long v436 = (void *)((char *)v2743 + v435);
          uint64_t v437 = (void *)((char *)v2740 + v435);
          uint64_t v438 = v437[1];
          *long long v436 = *v437;
          v436[1] = v438;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_55;
        case 0xDu:
          v2734 = v6;
          uint64_t v154 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v154;
          uint64_t v155 = v10[3];
          v9[2] = v10[2];
          v9[3] = v155;
          uint64_t v156 = v10[5];
          v9[4] = v10[4];
          v9[5] = v156;
          v157 = (int *)type metadata accessor for WalletPass(0);
          uint64_t v158 = v157[7];
          long long v159 = (char *)v9 + v158;
          long long v160 = (char *)v10 + v158;
          uint64_t v161 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v160, 1, v161))
          {
            uint64_t v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v159, v160, *(void *)(*(void *)(v162 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v161 - 8) + 16))(v159, v160, v161);
            __swift_storeEnumTagSinglePayload((uint64_t)v159, 0, 1, v161);
          }
          uint64_t v6 = v2734;
          uint64_t v439 = v157[8];
          uint64_t v9 = v2743;
          uint64_t v440 = (void *)((char *)v2743 + v439);
          uint64_t v441 = (void *)((char *)v2740 + v439);
          uint64_t v442 = v441[1];
          *uint64_t v440 = *v441;
          v440[1] = v442;
          *(void *)((char *)v2743 + v157[9]) = *(void *)((char *)v2740 + v157[9]);
          swift_bridgeObjectRetain();
          goto LABEL_55;
        case 0xEu:
          uint64_t v163 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v163;
          uint64_t v164 = v10[3];
          v9[2] = v10[2];
          v9[3] = v164;
          uint64_t v165 = v10[5];
          v9[4] = v10[4];
          v9[5] = v165;
          uint64_t v166 = v10;
          uint64_t v167 = v10[6];
          uint64_t v168 = v10[7];
          v9[6] = v167;
          v9[7] = v168;
          uint64_t v2709 = v11;
          uint64_t v169 = v166[9];
          v9[8] = v166[8];
          v9[9] = v169;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v11 = v2709;
          goto LABEL_55;
        case 0xFu:
          uint64_t v2707 = v11;
          v2721 = v3;
          v2735 = v6;
          uint64_t v170 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v170;
          uint64_t v171 = v10[3];
          v9[2] = v10[2];
          v9[3] = v171;
          uint64_t v172 = v10[5];
          v9[4] = v10[4];
          v9[5] = v172;
          uint64_t v2695 = v10[7];
          v9[6] = v10[6];
          v9[7] = v2695;
          uint64_t v2680 = v10[9];
          v9[8] = v10[8];
          v9[9] = v2680;
          uint64_t v173 = v10[11];
          v9[10] = v10[10];
          v9[11] = v173;
          *((unsigned char *)v9 + 96) = *((unsigned char *)v10 + 96);
          uint64_t v174 = v10[14];
          v9[13] = v10[13];
          v9[14] = v174;
          long long v175 = (int *)type metadata accessor for FlightReservation(0);
          uint64_t v176 = v175[13];
          v2658 = (char *)v9 + v176;
          long long v177 = (char *)v10 + v176;
          uint64_t v178 = type metadata accessor for URL();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v177, 1, v178))
          {
            uint64_t v179 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v2658, v177, *(void *)(*(void *)(v179 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v178 - 8) + 16))(v2658, v177, v178);
            __swift_storeEnumTagSinglePayload((uint64_t)v2658, 0, 1, v178);
          }
          uint64_t v443 = v175[14];
          uint64_t v444 = (char *)v2743 + v443;
          uint64_t v445 = (char *)v2740 + v443;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2740 + v443, 1, v178))
          {
            uint64_t v446 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v444, v445, *(void *)(*(void *)(v446 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v178 - 8) + 16))(v444, v445, v178);
            __swift_storeEnumTagSinglePayload((uint64_t)v444, 0, 1, v178);
          }
          uint64_t v566 = v175[15];
          long long v567 = (void *)((char *)v2743 + v566);
          long long v568 = (void *)((char *)v2740 + v566);
          uint64_t v569 = v568[1];
          *long long v567 = *v568;
          v567[1] = v569;
          uint64_t v570 = v175[16];
          long long v571 = (void *)((char *)v2743 + v570);
          long long v572 = (void *)((char *)v2740 + v570);
          uint64_t v573 = v572[1];
          *long long v571 = *v572;
          v571[1] = v573;
          uint64_t v574 = v175[17];
          v575 = (void *)((char *)v2743 + v574);
          uint64_t v576 = (void *)((char *)v2740 + v574);
          uint64_t v577 = v576[1];
          void *v575 = *v576;
          v575[1] = v577;
          uint64_t v578 = v175[18];
          v2688 = (char *)v2740 + v578;
          v2703 = (char *)v2743 + v578;
          uint64_t v579 = type metadata accessor for DateComponents();
          uint64_t v580 = *(void (**)(char *, char *, uint64_t))(*(void *)(v579 - 8) + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v580(v2703, v2688, v579);
          v580((char *)v2743 + v175[19], (char *)v2740 + v175[19], v579);
          uint64_t v581 = v175[20];
          v582 = (void *)((char *)v2743 + v581);
          v583 = (void *)((char *)v2740 + v581);
          uint64_t v584 = v583[1];
          void *v582 = *v583;
          v582[1] = v584;
          uint64_t v585 = v175[21];
          v586 = (void *)((char *)v2743 + v585);
          uint64_t v587 = (void *)((char *)v2740 + v585);
          uint64_t v588 = v587[1];
          void *v586 = *v587;
          v586[1] = v588;
          uint64_t v589 = v175[22];
          v590 = (void *)((char *)v2743 + v589);
          v591 = (void *)((char *)v2740 + v589);
          uint64_t v2704 = v591[1];
          void *v590 = *v591;
          v590[1] = v2704;
          uint64_t v592 = v175[23];
          long long v593 = (void *)((char *)v2743 + v592);
          long long v594 = (void *)((char *)v2740 + v592);
          uint64_t v2689 = v594[1];
          *long long v593 = *v594;
          v593[1] = v2689;
          uint64_t v595 = v175[24];
          long long v596 = (void *)((char *)v2743 + v595);
          long long v597 = (void *)((char *)v2740 + v595);
          uint64_t v2665 = v597[1];
          *long long v596 = *v597;
          v596[1] = v2665;
          uint64_t v598 = v175[25];
          long long v599 = (void *)((char *)v2743 + v598);
          uint64_t v600 = (void *)((char *)v2740 + v598);
          uint64_t v2654 = v600[1];
          *long long v599 = *v600;
          v599[1] = v2654;
          uint64_t v601 = v175[26];
          v602 = (void *)((char *)v2743 + v601);
          uint64_t v603 = (void *)((char *)v2740 + v601);
          uint64_t v2636 = v603[1];
          void *v602 = *v603;
          v602[1] = v2636;
          uint64_t v604 = v175[27];
          v605 = (void *)((char *)v2743 + v604);
          v606 = (void *)((char *)v2740 + v604);
          uint64_t v2614 = v606[1];
          void *v605 = *v606;
          v605[1] = v2614;
          uint64_t v607 = v175[28];
          uint64_t v608 = (void *)((char *)v2743 + v607);
          long long v609 = (void *)((char *)v2740 + v607);
          v2585 = (void *)v609[1];
          *uint64_t v608 = *v609;
          v608[1] = v2585;
          uint64_t v610 = v175[29];
          long long v611 = (void *)((char *)v2743 + v610);
          long long v612 = (void *)((char *)v2740 + v610);
          v2567 = (void *)v612[1];
          *long long v611 = *v612;
          v611[1] = v2567;
          uint64_t v613 = v175[30];
          long long v614 = (void *)((char *)v2743 + v613);
          long long v615 = (void *)((char *)v2740 + v613);
          uint64_t v2559 = v615[1];
          *long long v614 = *v615;
          v614[1] = v2559;
          uint64_t v616 = v175[31];
          v617 = (void *)((char *)v2743 + v616);
          v618 = (void *)((char *)v2740 + v616);
          v2552 = (void *)v618[1];
          void *v617 = *v618;
          v617[1] = v2552;
          uint64_t v619 = v175[32];
          uint64_t v620 = (void *)((char *)v2743 + v619);
          v621 = (void *)((char *)v2740 + v619);
          uint64_t v622 = v621[1];
          *uint64_t v620 = *v621;
          v620[1] = v622;
          *(void *)((char *)v2743 + v175[33]) = *(void *)((char *)v2740 + v175[33]);
          *(void *)((char *)v2743 + v175[34]) = *(void *)((char *)v2740 + v175[34]);
          uint64_t v623 = v175[35];
          uint64_t v624 = (void *)((char *)v2743 + v623);
          long long v625 = (void *)((char *)v2740 + v623);
          uint64_t v626 = v625[1];
          *uint64_t v624 = *v625;
          v624[1] = v626;
          uint64_t v627 = v175[36];
          long long v628 = (void *)((char *)v2743 + v627);
          long long v629 = (void *)((char *)v2740 + v627);
          uint64_t v630 = v629[1];
          *long long v628 = *v629;
          v628[1] = v630;
          uint64_t v631 = v175[37];
          uint64_t v632 = (void *)((char *)v2743 + v631);
          v633 = (void *)((char *)v2740 + v631);
          uint64_t v634 = v633[1];
          *uint64_t v632 = *v633;
          v632[1] = v634;
          uint64_t v635 = v175[38];
          v2536 = (char *)v2743 + v635;
          uint64_t v636 = (char *)v2740 + v635;
          uint64_t v637 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v636, 1, v637))
          {
            uint64_t v638 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2536, v636, *(void *)(*(void *)(v638 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v637 - 8) + 16))(v2536, v636, v637);
            __swift_storeEnumTagSinglePayload((uint64_t)v2536, 0, 1, v637);
          }
          uint64_t v3 = v2721;
          uint64_t v6 = v2735;
          uint64_t v701 = v175[39];
          uint64_t v9 = v2743;
          long long v702 = (void *)((char *)v2743 + v701);
          uint64_t v703 = (void *)((char *)v2740 + v701);
          uint64_t v704 = v703[1];
          *long long v702 = *v703;
          v702[1] = v704;
          uint64_t v705 = v175[40];
          uint64_t v706 = (void *)((char *)v2743 + v705);
          uint64_t v707 = (void *)((char *)v2740 + v705);
          uint64_t v2739 = v707[1];
          *uint64_t v706 = *v707;
          v706[1] = v2739;
          uint64_t v708 = v175[41];
          v709 = (char *)v2743 + v708;
          uint64_t v710 = (char *)v2740 + v708;
          v709[8] = v710[8];
          *(void *)v709 = *(void *)v710;
          uint64_t v711 = v175[42];
          v712 = (void *)((char *)v2743 + v711);
          v713 = (void *)((char *)v2740 + v711);
          uint64_t v714 = v713[1];
          void *v712 = *v713;
          v712[1] = v714;
          uint64_t v715 = v175[43];
          v716 = (char *)v2743 + v715;
          v717 = (char *)v2740 + v715;
          *(_OWORD *)v716 = *(_OWORD *)v717;
          *(void *)(v716 + 13) = *(void *)(v717 + 13);
          uint64_t v718 = v175[44];
          uint64_t v719 = (void *)((char *)v2743 + v718);
          v720 = (void *)((char *)v2740 + v718);
          uint64_t v721 = v720[1];
          *uint64_t v719 = *v720;
          v719[1] = v721;
          uint64_t v722 = v175[45];
          v723 = (void *)((char *)v2743 + v722);
          v724 = (void *)((char *)v2740 + v722);
          uint64_t v725 = v724[1];
          void *v723 = *v724;
          v723[1] = v725;
          uint64_t v726 = v175[46];
          uint64_t v727 = (void *)((char *)v2743 + v726);
          v728 = (void *)((char *)v2740 + v726);
          uint64_t v729 = v728[1];
          *uint64_t v727 = *v728;
          v727[1] = v729;
          uint64_t v730 = v175[47];
          v731 = (void *)((char *)v2743 + v730);
          v732 = (void *)((char *)v2740 + v730);
          uint64_t v733 = v732[1];
          void *v731 = *v732;
          v731[1] = v733;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v734 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]));
          *(void *)((char *)v2743 + *(int *)(v734 + 48)) = *(void *)((char *)v2740 + *(int *)(v734 + 48));
          swift_bridgeObjectRetain();
          goto LABEL_546;
        case 0x10u:
          uint64_t v2710 = v11;
          v2718 = v3;
          v2726 = v6;
          uint64_t v180 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v180;
          uint64_t v2696 = v10[3];
          v9[2] = v10[2];
          v9[3] = v2696;
          uint64_t v181 = v10[5];
          v9[4] = v10[4];
          v9[5] = v181;
          uint64_t v182 = v10;
          uint64_t v183 = v10[6];
          uint64_t v184 = v10[7];
          v9[6] = v183;
          v9[7] = v184;
          uint64_t v185 = v182[9];
          v9[8] = v182[8];
          v9[9] = v185;
          uint64_t v2681 = v182[11];
          v9[10] = v182[10];
          v9[11] = v2681;
          *((unsigned char *)v9 + 96) = *((unsigned char *)v182 + 96);
          uint64_t v186 = v182[14];
          v9[13] = v182[13];
          v9[14] = v186;
          uint64_t v187 = v182[16];
          v9[15] = v182[15];
          v9[16] = v187;
          uint64_t v188 = type metadata accessor for HotelReservation(0);
          long long v189 = v9;
          long long v190 = (int *)v188;
          uint64_t v191 = *(int *)(v188 + 56);
          v2659 = (char *)v189 + v191;
          long long v192 = (char *)v182 + v191;
          uint64_t v193 = type metadata accessor for DateComponents();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v192, 1, v193))
          {
            uint64_t v194 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
            memcpy(v2659, v192, *(void *)(*(void *)(v194 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v193 - 8) + 16))(v2659, v192, v193);
            __swift_storeEnumTagSinglePayload((uint64_t)v2659, 0, 1, v193);
          }
          uint64_t v447 = v190[15];
          uint64_t v448 = (char *)v2743 + v447;
          uint64_t v449 = (char *)v2740 + v447;
          uint64_t v11 = v2710;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2740 + v447, 1, v193))
          {
            uint64_t v450 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
            memcpy(v448, v449, *(void *)(*(void *)(v450 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v193 - 8) + 16))(v448, v449, v193);
            __swift_storeEnumTagSinglePayload((uint64_t)v448, 0, 1, v193);
          }
          uint64_t v639 = v190[16];
          uint64_t v640 = (void *)((char *)v2743 + v639);
          v641 = (void *)((char *)v2740 + v639);
          uint64_t v642 = v641[1];
          *uint64_t v640 = *v641;
          v640[1] = v642;
          uint64_t v643 = v190[17];
          uint64_t v644 = (void *)((char *)v2743 + v643);
          v645 = (void *)((char *)v2740 + v643);
          uint64_t v2705 = v645[1];
          *uint64_t v644 = *v645;
          v644[1] = v2705;
          uint64_t v646 = v190[18];
          uint64_t v647 = (void *)((char *)v2743 + v646);
          uint64_t v648 = (void *)((char *)v2740 + v646);
          uint64_t v2690 = v648[1];
          *uint64_t v647 = *v648;
          v647[1] = v2690;
          uint64_t v649 = v190[19];
          v650 = (void *)((char *)v2743 + v649);
          uint64_t v651 = (void *)((char *)v2740 + v649);
          uint64_t v2666 = v651[1];
          void *v650 = *v651;
          v650[1] = v2666;
          uint64_t v652 = v190[20];
          uint64_t v653 = (void *)((char *)v2743 + v652);
          v654 = (void *)((char *)v2740 + v652);
          uint64_t v655 = v654[1];
          *uint64_t v653 = *v654;
          v653[1] = v655;
          *(void *)((char *)v2743 + v190[21]) = *(void *)((char *)v2740 + v190[21]);
          *(void *)((char *)v2743 + v190[22]) = *(void *)((char *)v2740 + v190[22]);
          uint64_t v656 = v190[23];
          uint64_t v657 = (char *)v2743 + v656;
          uint64_t v658 = (char *)v2740 + v656;
          *(void *)uint64_t v657 = *(void *)v658;
          v657[8] = v658[8];
          uint64_t v659 = v190[24];
          v660 = (char *)v2743 + v659;
          uint64_t v661 = (char *)v2740 + v659;
          *(void *)v660 = *(void *)v661;
          v660[8] = v661[8];
          uint64_t v662 = v190[25];
          v663 = (void *)((char *)v2743 + v662);
          v664 = (void *)((char *)v2740 + v662);
          uint64_t v665 = v664[1];
          void *v663 = *v664;
          v663[1] = v665;
          uint64_t v666 = v190[26];
          long long v667 = (void *)((char *)v2743 + v666);
          long long v668 = (void *)((char *)v2740 + v666);
          uint64_t v669 = v668[1];
          *long long v667 = *v668;
          v667[1] = v669;
          uint64_t v670 = v190[27];
          long long v671 = (void *)((char *)v2743 + v670);
          long long v672 = (void *)((char *)v2740 + v670);
          uint64_t v673 = v672[1];
          *long long v671 = *v672;
          v671[1] = v673;
          uint64_t v674 = v190[28];
          v675 = (void *)((char *)v2743 + v674);
          uint64_t v676 = (void *)((char *)v2740 + v674);
          uint64_t v677 = v676[1];
          void *v675 = *v676;
          v675[1] = v677;
          uint64_t v678 = v190[29];
          uint64_t v9 = v2743;
          v679 = (char *)v2743 + v678;
          v680 = (char *)v2740 + v678;
          *(void *)v679 = *(void *)v680;
          v679[8] = v680[8];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_464;
        case 0x11u:
          uint64_t v2707 = v11;
          v2719 = v3;
          v2727 = v6;
          uint64_t v195 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v195;
          uint64_t v2697 = v10[3];
          v9[2] = v10[2];
          v9[3] = v2697;
          uint64_t v196 = v10[5];
          v9[4] = v10[4];
          v9[5] = v196;
          uint64_t v2682 = v10[7];
          v9[6] = v10[6];
          v9[7] = v2682;
          uint64_t v197 = v10;
          uint64_t v198 = v10[8];
          uint64_t v199 = v10[9];
          v9[8] = v198;
          v9[9] = v199;
          uint64_t v2660 = v197[11];
          v9[10] = v197[10];
          v9[11] = v2660;
          *((unsigned char *)v9 + 96) = *((unsigned char *)v197 + 96);
          uint64_t v200 = v197[14];
          v9[13] = v197[13];
          v9[14] = v200;
          uint64_t v201 = v197[16];
          v9[15] = v197[15];
          v9[16] = v201;
          uint64_t v202 = type metadata accessor for RestaurantReservation(0);
          long long v203 = v9;
          long long v204 = (int *)v202;
          uint64_t v205 = *(int *)(v202 + 56);
          v2645 = (char *)v203 + v205;
          uint64_t v206 = (char *)v197 + v205;
          uint64_t v207 = type metadata accessor for DateComponents();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v206, 1, v207))
          {
            uint64_t v208 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
            memcpy(v2645, v206, *(void *)(*(void *)(v208 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v207 - 8) + 16))(v2645, v206, v207);
            __swift_storeEnumTagSinglePayload((uint64_t)v2645, 0, 1, v207);
          }
          uint64_t v451 = v204[15];
          uint64_t v452 = (void *)((char *)v2743 + v451);
          v453 = (void *)((char *)v2740 + v451);
          uint64_t v454 = v453[1];
          *uint64_t v452 = *v453;
          v452[1] = v454;
          uint64_t v455 = v204[16];
          uint64_t v456 = (void *)((char *)v2743 + v455);
          long long v457 = (void *)((char *)v2740 + v455);
          uint64_t v458 = v457[1];
          *uint64_t v456 = *v457;
          v456[1] = v458;
          uint64_t v459 = v204[17];
          long long v460 = (void *)((char *)v2743 + v459);
          long long v461 = (void *)((char *)v2740 + v459);
          uint64_t v462 = v461[1];
          *long long v460 = *v461;
          v460[1] = v462;
          uint64_t v463 = v204[18];
          uint64_t v464 = (void *)((char *)v2743 + v463);
          uint64_t v465 = (void *)((char *)v2740 + v463);
          uint64_t v466 = v465[1];
          *uint64_t v464 = *v465;
          v464[1] = v466;
          uint64_t v467 = v204[19];
          uint64_t v468 = (void *)((char *)v2743 + v467);
          uint64_t v469 = (void *)((char *)v2740 + v467);
          uint64_t v470 = v469[1];
          *uint64_t v468 = *v469;
          v468[1] = v470;
          *(void *)((char *)v2743 + v204[20]) = *(void *)((char *)v2740 + v204[20]);
          uint64_t v471 = v204[21];
          v472 = (void *)((char *)v2743 + v471);
          v473 = (void *)((char *)v2740 + v471);
          uint64_t v474 = v473[1];
          void *v472 = *v473;
          v472[1] = v474;
          uint64_t v475 = v204[22];
          long long v476 = (void *)((char *)v2743 + v475);
          long long v477 = (void *)((char *)v2740 + v475);
          uint64_t v478 = v477[1];
          *long long v476 = *v477;
          v476[1] = v478;
          uint64_t v479 = v204[23];
          uint64_t v9 = v2743;
          long long v480 = (void *)((char *)v2743 + v479);
          long long v481 = (void *)((char *)v2740 + v479);
          uint64_t v482 = v481[1];
          *long long v480 = *v481;
          v480[1] = v482;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_543;
        case 0x12u:
          v2722 = v3;
          v2736 = v6;
          uint64_t v209 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v209;
          uint64_t v210 = v10[3];
          v9[2] = v10[2];
          v9[3] = v210;
          uint64_t v211 = v10[5];
          v9[4] = v10[4];
          v9[5] = v211;
          uint64_t v212 = v10[7];
          v9[6] = v10[6];
          v9[7] = v212;
          uint64_t v213 = v10[9];
          v9[8] = v10[8];
          v9[9] = v213;
          uint64_t v214 = v10[11];
          v9[10] = v10[10];
          v9[11] = v214;
          uint64_t v215 = v10[13];
          v9[12] = v10[12];
          v9[13] = v215;
          uint64_t v216 = v10[15];
          v9[14] = v10[14];
          v9[15] = v216;
          *((unsigned char *)v9 + 128) = *((unsigned char *)v10 + 128);
          *(_WORD *)((char *)v9 + 129) = *(_WORD *)((char *)v10 + 129);
          uint64_t v217 = v10[18];
          v9[17] = v10[17];
          v9[18] = v217;
          uint64_t v218 = v10[20];
          uint64_t v219 = v10[21];
          v9[19] = v10[19];
          v9[20] = v218;
          uint64_t v220 = v10[22];
          uint64_t v221 = v10[23];
          v9[21] = v219;
          v9[22] = v220;
          uint64_t v223 = v10[25];
          uint64_t v222 = v10[24];
          v9[23] = v221;
          v9[24] = v222;
          uint64_t v224 = v10[26];
          v9[25] = v223;
          v9[26] = v224;
          uint64_t v225 = v10[28];
          v9[27] = v10[27];
          v9[28] = v225;
          uint64_t v226 = v10[30];
          v9[29] = v10[29];
          v9[30] = v226;
          uint64_t v227 = v10[32];
          v9[31] = v10[31];
          v9[32] = v227;
          uint64_t v228 = v10[34];
          v9[33] = v10[33];
          v9[34] = v228;
          uint64_t v2698 = v10[36];
          v9[35] = v10[35];
          v9[36] = v2698;
          uint64_t v2683 = v10[38];
          v9[37] = v10[37];
          v9[38] = v2683;
          uint64_t v2661 = v10[40];
          v9[39] = v10[39];
          unsigned char v9[40] = v2661;
          uint64_t v2646 = v10[42];
          v9[41] = v10[41];
          v9[42] = v2646;
          uint64_t v2630 = v10[44];
          v9[43] = v10[43];
          v9[44] = v2630;
          uint64_t v2608 = v10[46];
          v9[45] = v10[45];
          v9[46] = v2608;
          uint64_t v229 = v10[47];
          *((unsigned char *)v9 + 384) = *((unsigned char *)v10 + 384);
          v9[47] = v229;
          uint64_t v230 = v10[50];
          v9[49] = v10[49];
          v9[50] = v230;
          uint64_t v231 = v10[52];
          v9[51] = v10[51];
          v9[52] = v231;
          uint64_t v2711 = type metadata accessor for RentalCarReservation(0);
          uint64_t v232 = *(int *)(v2711 + 140);
          __dst = (char *)v9 + v232;
          uint64_t v233 = (char *)v10 + v232;
          uint64_t v234 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v233, 1, v234))
          {
            uint64_t v235 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(__dst, v233, *(void *)(*(void *)(v235 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v234 - 8) + 16))(__dst, v233, v234);
            __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v234);
          }
          uint64_t v483 = *(int *)(v2711 + 144);
          goto LABEL_109;
        case 0x13u:
          v2722 = v3;
          v2736 = v6;
          uint64_t v2609 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v2609;
          uint64_t v236 = v10[3];
          v9[2] = v10[2];
          v9[3] = v236;
          uint64_t v237 = v10[5];
          v9[4] = v10[4];
          v9[5] = v237;
          uint64_t v238 = v10[7];
          v9[6] = v10[6];
          v9[7] = v238;
          uint64_t v239 = v10[9];
          v9[8] = v10[8];
          v9[9] = v239;
          uint64_t v240 = v10[11];
          v9[10] = v10[10];
          v9[11] = v240;
          uint64_t v241 = v10[13];
          v9[12] = v10[12];
          v9[13] = v241;
          uint64_t v242 = v10[15];
          v9[14] = v10[14];
          v9[15] = v242;
          *((unsigned char *)v9 + 128) = *((unsigned char *)v10 + 128);
          *(_WORD *)((char *)v9 + 129) = *(_WORD *)((char *)v10 + 129);
          uint64_t v243 = v10[18];
          v9[17] = v10[17];
          v9[18] = v243;
          uint64_t v244 = v10[20];
          uint64_t v245 = v10[21];
          v9[19] = v10[19];
          v9[20] = v244;
          uint64_t v246 = v10[22];
          uint64_t v247 = v10[23];
          v9[21] = v245;
          v9[22] = v246;
          uint64_t v248 = v10[24];
          v9[23] = v247;
          v9[24] = v248;
          uint64_t v249 = v10[26];
          v9[25] = v10[25];
          v9[26] = v249;
          uint64_t v2699 = v10[28];
          v9[27] = v10[27];
          v9[28] = v2699;
          uint64_t v2684 = v10[30];
          v9[29] = v10[29];
          v9[30] = v2684;
          uint64_t v2662 = v10[32];
          v9[31] = v10[31];
          v9[32] = v2662;
          uint64_t v2647 = v10[34];
          v9[33] = v10[33];
          v9[34] = v2647;
          uint64_t v251 = v10[35];
          uint64_t v250 = v10[36];
          *((unsigned char *)v9 + 296) = *((unsigned char *)v10 + 296);
          v9[35] = v251;
          v9[36] = v250;
          uint64_t v2712 = type metadata accessor for TicketedTransportation(0);
          uint64_t v252 = *(int *)(v2712 + 112);
          v2528 = (char *)v9 + v252;
          uint64_t v253 = (char *)v10 + v252;
          uint64_t v234 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v253, 1, v234))
          {
            uint64_t v254 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2528, v253, *(void *)(*(void *)(v254 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v234 - 8) + 16))(v2528, v253, v234);
            __swift_storeEnumTagSinglePayload((uint64_t)v2528, 0, 1, v234);
          }
          uint64_t v483 = *(int *)(v2712 + 116);
          goto LABEL_109;
        case 0x14u:
          v2723 = v3;
          uint64_t v255 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v255;
          uint64_t v256 = v10[3];
          v9[2] = v10[2];
          v9[3] = v256;
          uint64_t v257 = v10[5];
          v9[4] = v10[4];
          v9[5] = v257;
          uint64_t v258 = v10[7];
          v9[6] = v10[6];
          v9[7] = v258;
          uint64_t v259 = v10[9];
          v9[8] = v10[8];
          v9[9] = v259;
          uint64_t v260 = v10[11];
          v9[10] = v10[10];
          v9[11] = v260;
          uint64_t v261 = v10[13];
          v9[12] = v10[12];
          v9[13] = v261;
          uint64_t v262 = v10[15];
          v9[14] = v10[14];
          v9[15] = v262;
          *((unsigned char *)v9 + 128) = *((unsigned char *)v10 + 128);
          *(_WORD *)((char *)v9 + 129) = *(_WORD *)((char *)v10 + 129);
          uint64_t v263 = v10[18];
          v9[17] = v10[17];
          v9[18] = v263;
          uint64_t v264 = v10[20];
          v9[19] = v10[19];
          v9[20] = v264;
          uint64_t v265 = v10[22];
          v9[21] = v10[21];
          v9[22] = v265;
          uint64_t v266 = v10[24];
          v9[23] = v10[23];
          v9[24] = v266;
          uint64_t v267 = v10[26];
          v9[25] = v10[25];
          v9[26] = v267;
          uint64_t v268 = v10[28];
          v9[27] = v10[27];
          v9[28] = v268;
          uint64_t v2700 = v10[30];
          v9[29] = v10[29];
          v9[30] = v2700;
          uint64_t v2685 = v10[32];
          v9[31] = v10[31];
          v9[32] = v2685;
          uint64_t v269 = v10[34];
          v9[33] = v10[33];
          v9[34] = v269;
          uint64_t v270 = v10[36];
          uint64_t v2648 = v10[35];
          *((unsigned char *)v9 + 296) = *((unsigned char *)v10 + 296);
          v9[35] = v2648;
          v9[36] = v270;
          uint64_t v2631 = v10[39];
          v9[38] = v10[38];
          v9[39] = v2631;
          v2713 = (int *)type metadata accessor for TicketedShow(0);
          uint64_t v271 = v2713[29];
          uint64_t v272 = (char *)v9 + v271;
          uint64_t v273 = (char *)v10 + v271;
          uint64_t v274 = type metadata accessor for URL();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v273, 1, v274))
          {
            uint64_t v275 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v272, v273, *(void *)(*(void *)(v275 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v274 - 8) + 16))(v272, v273, v274);
            __swift_storeEnumTagSinglePayload((uint64_t)v272, 0, 1, v274);
          }
          uint64_t v484 = v2713[30];
          v485 = (void *)((char *)v9 + v484);
          uint64_t v486 = (void *)((char *)v10 + v484);
          uint64_t v487 = v486[1];
          void *v485 = *v486;
          v485[1] = v487;
          uint64_t v488 = v2713[31];
          v489 = (char *)v9 + v488;
          v490 = (char *)v10 + v488;
          uint64_t v83 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          uint64_t v3 = v2723;
          if (__swift_getEnumTagSinglePayload((uint64_t)v490, 1, v83))
          {
            uint64_t v491 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v489, v490, *(void *)(*(void *)(v491 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 16))(v489, v490, v83);
            __swift_storeEnumTagSinglePayload((uint64_t)v489, 0, 1, v83);
          }
          uint64_t v681 = v2713[32];
          uint64_t v382 = (char *)v9 + v681;
          uint64_t v383 = (uint64_t)v2740 + v681;
          if (!__swift_getEnumTagSinglePayload((uint64_t)v2740 + v681, 1, v83))
          {
LABEL_148:
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v83 - 8) + 16))(v382, v383, v83);
            uint64_t v400 = (uint64_t)v382;
            uint64_t v401 = v83;
            goto LABEL_149;
          }
LABEL_146:
          long long v419 = &demangling cache variable for type metadata for Date?;
LABEL_147:
          size_t v682 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v419) - 8) + 64);
          long long v683 = v382;
          long long v684 = (const void *)v383;
          goto LABEL_158;
        case 0x15u:
          v2722 = v3;
          v2736 = v6;
          uint64_t v2649 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v2649;
          uint64_t v2632 = v10[3];
          v9[2] = v10[2];
          v9[3] = v2632;
          uint64_t v2610 = v10[5];
          v9[4] = v10[4];
          v9[5] = v2610;
          uint64_t v276 = v10[7];
          v9[6] = v10[6];
          v9[7] = v276;
          uint64_t v277 = v10[9];
          v9[8] = v10[8];
          v9[9] = v277;
          uint64_t v278 = v10[11];
          v9[10] = v10[10];
          v9[11] = v278;
          uint64_t v279 = v10[13];
          v9[12] = v10[12];
          v9[13] = v279;
          uint64_t v280 = v10[15];
          v9[14] = v10[14];
          v9[15] = v280;
          *((unsigned char *)v9 + 128) = *((unsigned char *)v10 + 128);
          *(_WORD *)((char *)v9 + 129) = *(_WORD *)((char *)v10 + 129);
          uint64_t v281 = v10[18];
          v9[17] = v10[17];
          v9[18] = v281;
          uint64_t v282 = v10[20];
          uint64_t v283 = v10[21];
          v9[19] = v10[19];
          v9[20] = v282;
          uint64_t v284 = v10[22];
          uint64_t v285 = v10[23];
          v9[21] = v283;
          v9[22] = v284;
          uint64_t v286 = v10[25];
          v2542 = (void *)v10[24];
          v9[23] = v285;
          v9[24] = v2542;
          uint64_t v287 = v10[26];
          v9[25] = v286;
          v9[26] = v287;
          uint64_t v288 = v10[28];
          v9[27] = v10[27];
          v9[28] = v288;
          uint64_t v289 = v10[30];
          v9[29] = v10[29];
          v9[30] = v289;
          uint64_t v290 = v10[32];
          v9[31] = v10[31];
          v9[32] = v290;
          uint64_t v292 = v10[33];
          uint64_t v291 = v10[34];
          *((unsigned char *)v9 + 280) = *((unsigned char *)v10 + 280);
          v9[33] = v292;
          v9[34] = v291;
          uint64_t v293 = v10[37];
          v9[36] = v10[36];
          v9[37] = v293;
          uint64_t v2714 = type metadata accessor for Appointment(0);
          uint64_t v294 = *(int *)(v2714 + 108);
          v2532 = (char *)v9 + v294;
          v295 = (char *)v10 + v294;
          uint64_t v234 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v295, 1, v234))
          {
            uint64_t v296 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2532, v295, *(void *)(*(void *)(v296 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v234 - 8) + 16))(v2532, v295, v234);
            __swift_storeEnumTagSinglePayload((uint64_t)v2532, 0, 1, v234);
          }
          uint64_t v483 = *(int *)(v2714 + 112);
LABEL_109:
          uint64_t v121 = (char *)v2743 + v483;
          v122 = (char *)v10 + v483;
          uint64_t v3 = v2722;
          uint64_t v6 = v2736;
          if (__swift_getEnumTagSinglePayload((uint64_t)v10 + v483, 1, v234))
          {
            uint64_t v124 = &demangling cache variable for type metadata for Date?;
LABEL_111:
            uint64_t v492 = __swift_instantiateConcreteTypeFromMangledName(v124);
            memcpy(v121, v122, *(void *)(*(void *)(v492 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v234 - 8) + 16))(v121, v122, v234);
            uint64_t v403 = (uint64_t)v121;
            uint64_t v404 = v234;
LABEL_113:
            __swift_storeEnumTagSinglePayload(v403, 0, 1, v404);
          }
LABEL_163:
          uint64_t v9 = v2743;
          goto LABEL_547;
        case 0x16u:
          uint64_t v2715 = v11;
          v2737 = v6;
          uint64_t v2650 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v2650;
          uint64_t v2633 = v10[3];
          v9[2] = v10[2];
          v9[3] = v2633;
          uint64_t v2611 = v10[5];
          v9[4] = v10[4];
          v9[5] = v2611;
          uint64_t v297 = v10[7];
          v9[6] = v10[6];
          v9[7] = v297;
          uint64_t v298 = v10[9];
          v9[8] = v10[8];
          v9[9] = v298;
          uint64_t v299 = v10[11];
          v9[10] = v10[10];
          v9[11] = v299;
          uint64_t v300 = v10[13];
          v9[12] = v10[12];
          v9[13] = v300;
          uint64_t v301 = v10[15];
          v9[14] = v10[14];
          v9[15] = v301;
          *((unsigned char *)v9 + 128) = *((unsigned char *)v10 + 128);
          *(_WORD *)((char *)v9 + 129) = *(_WORD *)((char *)v10 + 129);
          uint64_t v302 = v10[18];
          v9[17] = v10[17];
          v9[18] = v302;
          uint64_t v303 = v10[20];
          v9[19] = v10[19];
          v9[20] = v303;
          uint64_t v304 = v10[22];
          v9[21] = v10[21];
          v9[22] = v304;
          uint64_t v305 = v10[24];
          v9[23] = v10[23];
          v9[24] = v305;
          uint64_t v306 = v10[26];
          v9[25] = v10[25];
          v9[26] = v306;
          uint64_t v307 = v10[28];
          v9[27] = v10[27];
          v9[28] = v307;
          uint64_t v308 = v10[30];
          v9[29] = v10[29];
          v9[30] = v308;
          v9[31] = v10[31];
          v2701 = (int *)type metadata accessor for Party(0);
          uint64_t v309 = v2701[24];
          v310 = (char *)v9 + v309;
          uint64_t v311 = (char *)v10 + v309;
          uint64_t v312 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v311, 1, v312))
          {
            uint64_t v313 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v310, v311, *(void *)(*(void *)(v313 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v312 - 8) + 16))(v310, v311, v312);
            __swift_storeEnumTagSinglePayload((uint64_t)v310, 0, 1, v312);
          }
          uint64_t v493 = v2701[25];
          long long v494 = (char *)v9 + v493;
          long long v495 = (char *)v10 + v493;
          uint64_t v11 = v2715;
          if (__swift_getEnumTagSinglePayload((uint64_t)v10 + v493, 1, v312))
          {
            uint64_t v496 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v494, v495, *(void *)(*(void *)(v496 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v312 - 8) + 16))(v494, v495, v312);
            __swift_storeEnumTagSinglePayload((uint64_t)v494, 0, 1, v312);
          }
          uint64_t v6 = v2737;
          uint64_t v685 = v2701[26];
          uint64_t v397 = (char *)v9 + v685;
          uint64_t v398 = (uint64_t)v10 + v685;
          goto LABEL_155;
        case 0x17u:
          uint64_t v2716 = v11;
          v2724 = v3;
          uint64_t v2686 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v2686;
          uint64_t v2663 = v10[3];
          v9[2] = v10[2];
          v9[3] = v2663;
          uint64_t v2651 = v10[5];
          v9[4] = v10[4];
          v9[5] = v2651;
          uint64_t v314 = v10[7];
          v9[6] = v10[6];
          v9[7] = v314;
          uint64_t v2634 = v10[9];
          v9[8] = v10[8];
          v9[9] = v2634;
          uint64_t v2612 = v10[11];
          v9[10] = v10[10];
          v9[11] = v2612;
          uint64_t v315 = v10[13];
          v9[12] = v10[12];
          v9[13] = v315;
          uint64_t v316 = v10[15];
          v9[14] = v10[14];
          v9[15] = v316;
          *((unsigned char *)v9 + 128) = *((unsigned char *)v10 + 128);
          *(_WORD *)((char *)v9 + 129) = *(_WORD *)((char *)v10 + 129);
          uint64_t v317 = v10[18];
          v9[17] = v10[17];
          v9[18] = v317;
          uint64_t v318 = v10[20];
          v9[19] = v10[19];
          v9[20] = v318;
          uint64_t v319 = v10[22];
          v9[21] = v10[21];
          v9[22] = v319;
          uint64_t v320 = v10[24];
          v9[23] = v10[23];
          v9[24] = v320;
          uint64_t v321 = v10[26];
          v9[25] = v10[25];
          v9[26] = v321;
          v9[27] = v10[27];
          v2702 = (int *)type metadata accessor for Trip(0);
          uint64_t v322 = v2702[22];
          v2551 = (char *)v9 + v322;
          v323 = (char *)v10 + v322;
          uint64_t v324 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v323, 1, v324))
          {
            uint64_t v325 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2551, v323, *(void *)(*(void *)(v325 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v324 - 8) + 16))(v2551, v323, v324);
            __swift_storeEnumTagSinglePayload((uint64_t)v2551, 0, 1, v324);
          }
          uint64_t v497 = v2702[23];
          long long v498 = (char *)v9 + v497;
          long long v499 = (char *)v2740 + v497;
          uint64_t v3 = v2724;
          uint64_t v11 = v2716;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2740 + v497, 1, v324))
          {
            uint64_t v500 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v498, v499, *(void *)(*(void *)(v500 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v324 - 8) + 16))(v498, v499, v324);
            __swift_storeEnumTagSinglePayload((uint64_t)v498, 0, 1, v324);
          }
          uint64_t v686 = v2702[24];
          long long v687 = (char *)v9 + v686;
          uint64_t v406 = v2740;
          uint64_t v688 = (char *)v2740 + v686;
          *(void *)long long v687 = *(void *)v688;
          v687[8] = v688[8];
          uint64_t v409 = v2702[25];
LABEL_154:
          uint64_t v397 = (char *)v9 + v409;
          uint64_t v398 = (uint64_t)v406 + v409;
LABEL_155:
          uint64_t v399 = type metadata accessor for URL();
LABEL_156:
          if (__swift_getEnumTagSinglePayload(v398, 1, v399))
          {
LABEL_157:
            size_t v682 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                         - 8)
                             + 64);
            long long v683 = v397;
            long long v684 = (const void *)v398;
LABEL_158:
            memcpy(v683, v684, v682);
          }
          else
          {
LABEL_78:
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v399 - 8) + 16))(v397, v398, v399);
            uint64_t v400 = (uint64_t)v397;
            uint64_t v401 = v399;
LABEL_149:
            __swift_storeEnumTagSinglePayload(v400, 0, 1, v401);
          }
LABEL_547:
          swift_storeEnumTagMultiPayload();
          __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
          break;
        case 0x18u:
          v2738 = v6;
          uint64_t v326 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v326;
          uint64_t v327 = v10[3];
          v9[2] = v10[2];
          v9[3] = v327;
          uint64_t v328 = v10[5];
          v9[4] = v10[4];
          v9[5] = v328;
          v329 = (int *)type metadata accessor for GlobalItem();
          uint64_t v330 = v329[7];
          uint64_t v331 = (char *)v9 + v330;
          uint64_t v332 = (char *)v10 + v330;
          uint64_t v333 = type metadata accessor for GlobalDialog();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v332, 1, v333))
          {
            uint64_t v334 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GlobalDialog?);
            memcpy(v331, v332, *(void *)(*(void *)(v334 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v333 - 8) + 16))(v331, v332, v333);
            __swift_storeEnumTagSinglePayload((uint64_t)v331, 0, 1, v333);
          }
          uint64_t v501 = v329[8];
          uint64_t v9 = v2743;
          v502 = (char *)v2743 + v501;
          v503 = (char *)v2740 + v501;
          unint64_t v504 = *((void *)v503 + 1);
          uint64_t v6 = v2738;
          if (v504 >> 60 == 15)
          {
            *(_OWORD *)v502 = *(_OWORD *)v503;
          }
          else
          {
            uint64_t v505 = *(void *)v503;
            outlined copy of Data._Representation(*(void *)v503, *((void *)v503 + 1));
            *(void *)v502 = v505;
            *((void *)v502 + 1) = v504;
          }
          *((unsigned char *)v2743 + v329[9]) = *((unsigned char *)v2740 + v329[9]);
          uint64_t v506 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GlobalItem, experiences: [DialogExperience]));
          *(void *)((char *)v2743 + *(int *)(v506 + 48)) = *(void *)((char *)v2740 + *(int *)(v506 + 48));
          goto LABEL_55;
        case 0x19u:
          uint64_t v335 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v335;
          uint64_t v336 = v10[3];
          v9[2] = v10[2];
          v9[3] = v336;
          uint64_t v337 = v10[5];
          v9[4] = v10[4];
          v9[5] = v337;
          uint64_t v338 = v10[7];
          v9[6] = v10[6];
          v9[7] = v338;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_55;
        case 0x1Au:
          v2725 = v3;
          uint64_t v339 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v339;
          uint64_t v340 = v10[3];
          v9[2] = v10[2];
          v9[3] = v340;
          uint64_t v341 = v10[5];
          v9[4] = v10[4];
          v9[5] = v341;
          v9[6] = v10[6];
          uint64_t v342 = (int *)type metadata accessor for Answer(0);
          uint64_t v343 = v342[9];
          v2717 = (char *)v9 + v343;
          v344 = (char *)v10 + v343;
          uint64_t v345 = type metadata accessor for URL();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v344, 1, v345))
          {
            uint64_t v346 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v2717, v344, *(void *)(*(void *)(v346 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v345 - 8) + 16))(v2717, v344, v345);
            __swift_storeEnumTagSinglePayload((uint64_t)v2717, 0, 1, v345);
          }
          uint64_t v3 = v2725;
          uint64_t v9 = v2743;
          *((unsigned char *)v2743 + v342[10]) = *((unsigned char *)v2740 + v342[10]);
          uint64_t v507 = v342[11];
          uint64_t v508 = (void *)((char *)v2743 + v507);
          uint64_t v509 = (void *)((char *)v2740 + v507);
          uint64_t v510 = v509[1];
          *uint64_t v508 = *v509;
          v508[1] = v510;
LABEL_55:
          swift_bridgeObjectRetain();
          goto LABEL_547;
        default:
          uint64_t v2706 = v11;
          v2718 = v3;
          v2726 = v6;
          uint64_t v14 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v14;
          uint64_t v15 = v10[3];
          v9[2] = v10[2];
          v9[3] = v15;
          uint64_t v16 = v10[5];
          v9[4] = v10[4];
          v9[5] = v16;
          uint64_t v17 = v10[7];
          v9[6] = v10[6];
          v9[7] = v17;
          uint64_t v18 = v10[9];
          v9[8] = v10[8];
          v9[9] = v18;
          uint64_t v2677 = v10[11];
          v9[10] = v10[10];
          v9[11] = v2677;
          BOOL v19 = (int *)type metadata accessor for EmailDocument(0);
          uint64_t v20 = v19[12];
          v2607 = (char *)v10 + v20;
          v2629 = (char *)v9 + v20;
          uint64_t v21 = type metadata accessor for Date();
          unint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v2656 = v22;
          uint64_t v2678 = v21;
          v22(v2629, v2607, v21);
          *(void *)((char *)v9 + v19[13]) = *(void *)((char *)v10 + v19[13]);
          *(void *)((char *)v9 + v19[14]) = *(void *)((char *)v10 + v19[14]);
          *(void *)((char *)v9 + v19[15]) = *(void *)((char *)v10 + v19[15]);
          *((unsigned char *)v9 + v19[16]) = *((unsigned char *)v10 + v19[16]);
          *((unsigned char *)v9 + v19[17]) = *((unsigned char *)v10 + v19[17]);
          uint64_t v23 = v19[18];
          uint64_t v24 = (void *)((char *)v9 + v23);
          uint64_t v25 = (void *)((char *)v10 + v23);
          uint64_t v26 = v25[1];
          *uint64_t v24 = *v25;
          v24[1] = v26;
          v2691 = v19;
          uint64_t v27 = v19[19];
          uint64_t v28 = (void *)((char *)v9 + v27);
          BOOL v29 = (void *)((char *)v10 + v27);
          uint64_t v30 = *v29;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v30)
          {
            uint64_t v31 = v29[1];
            uint64_t v32 = v29[2];
            void *v28 = v30;
            v28[1] = v31;
            uint64_t v33 = v29[3];
            uint64_t v34 = v29[4];
            v28[2] = v32;
            v28[3] = v33;
            v28[4] = v34;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v347 = *((_OWORD *)v29 + 1);
            *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
            *((_OWORD *)v28 + 1) = v347;
            v28[4] = v29[4];
          }
          uint64_t v348 = v19[20];
          long long v350 = v2740;
          long long v349 = v2743;
          long long v351 = (void *)((char *)v2743 + v348);
          long long v352 = (void *)((char *)v2740 + v348);
          uint64_t v353 = v352[1];
          *long long v351 = *v352;
          v351[1] = v353;
          uint64_t v354 = v19[21];
          long long v355 = (void *)((char *)v2743 + v354);
          uint64_t v356 = (void *)((char *)v2740 + v354);
          uint64_t v357 = type metadata accessor for PartialExtractedAttributes(0);
          swift_bridgeObjectRetain();
          uint64_t v11 = v2706;
          if (__swift_getEnumTagSinglePayload((uint64_t)v356, 1, v357))
          {
            uint64_t v358 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
            memcpy(v355, v356, *(void *)(*(void *)(v358 - 8) + 64));
            uint64_t v359 = v19;
          }
          else
          {
            uint64_t v511 = v356[1];
            *long long v355 = *v356;
            v355[1] = v511;
            uint64_t v512 = *(int *)(v357 + 20);
            uint64_t v513 = (void *)((char *)v355 + v512);
            v514 = (void *)((char *)v356 + v512);
            uint64_t v515 = type metadata accessor for RentalCarReservation(0);
            swift_bridgeObjectRetain();
            v2613 = (int *)v357;
            v2635 = v355;
            v2584 = v356;
            if (__swift_getEnumTagSinglePayload((uint64_t)v514, 1, v515))
            {
              uint64_t v516 = (int *)v357;
              uint64_t v517 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
              memcpy(v513, v514, *(void *)(*(void *)(v517 - 8) + 64));
            }
            else
            {
              uint64_t v742 = v514[1];
              *uint64_t v513 = *v514;
              v513[1] = v742;
              uint64_t v743 = v514[3];
              v513[2] = v514[2];
              v513[3] = v743;
              uint64_t v744 = v514[5];
              v513[4] = v514[4];
              v513[5] = v744;
              uint64_t v745 = v514[7];
              v513[6] = v514[6];
              v513[7] = v745;
              uint64_t v746 = v514[9];
              v513[8] = v514[8];
              v513[9] = v746;
              uint64_t v747 = v514[11];
              v513[10] = v514[10];
              v513[11] = v747;
              uint64_t v748 = v514[13];
              v513[12] = v514[12];
              v513[13] = v748;
              uint64_t v749 = v514[15];
              v513[14] = v514[14];
              v513[15] = v749;
              *((unsigned char *)v513 + 128) = *((unsigned char *)v514 + 128);
              *(_WORD *)((char *)v513 + 129) = *(_WORD *)((char *)v514 + 129);
              uint64_t v750 = v514[18];
              v513[17] = v514[17];
              v513[18] = v750;
              uint64_t v751 = v514[20];
              v513[19] = v514[19];
              v513[20] = v751;
              uint64_t v752 = v514[22];
              v513[21] = v514[21];
              v513[22] = v752;
              uint64_t v2508 = v514[24];
              v513[23] = v514[23];
              v513[24] = v2508;
              uint64_t v753 = v514[26];
              v513[25] = v514[25];
              v513[26] = v753;
              uint64_t v754 = v514[28];
              v513[27] = v514[27];
              v513[28] = v754;
              uint64_t v755 = v514[30];
              v513[29] = v514[29];
              v513[30] = v755;
              uint64_t v756 = v514[32];
              v513[31] = v514[31];
              v513[32] = v756;
              uint64_t v757 = v514[34];
              v513[33] = v514[33];
              v513[34] = v757;
              uint64_t v758 = v514[36];
              v513[35] = v514[35];
              v513[36] = v758;
              uint64_t v759 = v514[38];
              v513[37] = v514[37];
              v513[38] = v759;
              uint64_t v760 = v514[40];
              v513[39] = v514[39];
              v513[40] = v760;
              uint64_t v761 = v514[42];
              v513[41] = v514[41];
              v513[42] = v761;
              uint64_t v762 = v514[44];
              v513[43] = v514[43];
              v513[44] = v762;
              uint64_t v763 = v514[46];
              v513[45] = v514[45];
              v513[46] = v763;
              uint64_t v764 = v514[47];
              *((unsigned char *)v513 + 384) = *((unsigned char *)v514 + 384);
              v513[47] = v764;
              uint64_t v765 = v514[50];
              v513[49] = v514[49];
              v513[50] = v765;
              uint64_t v766 = v514[52];
              v513[51] = v514[51];
              v513[52] = v766;
              uint64_t v767 = *(int *)(v515 + 140);
              v2568 = (char *)v513 + v767;
              uint64_t v768 = (char *)v514 + v767;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v768, 1, v2678))
              {
                uint64_t v769 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2568, v768, *(void *)(*(void *)(v769 - 8) + 64));
              }
              else
              {
                v2656(v2568, v768, v2678);
                __swift_storeEnumTagSinglePayload((uint64_t)v2568, 0, 1, v2678);
              }
              uint64_t v826 = v515;
              uint64_t v827 = *(int *)(v515 + 144);
              v828 = (char *)v513 + v827;
              uint64_t v829 = (char *)v514 + v827;
              long long v350 = v2740;
              if (__swift_getEnumTagSinglePayload((uint64_t)v514 + v827, 1, v2678))
              {
                uint64_t v830 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v828, v829, *(void *)(*(void *)(v830 - 8) + 64));
              }
              else
              {
                v2656(v828, v829, v2678);
                __swift_storeEnumTagSinglePayload((uint64_t)v828, 0, 1, v2678);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v513, 0, 1, v826);
              uint64_t v516 = v2613;
              long long v355 = v2635;
              uint64_t v356 = v2584;
            }
            uint64_t v839 = v516[6];
            uint64_t v840 = (void *)((char *)v355 + v839);
            v841 = (void *)((char *)v356 + v839);
            uint64_t v842 = type metadata accessor for TicketedTransportation(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v841, 1, v842))
            {
              uint64_t v843 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
              memcpy(v840, v841, *(void *)(*(void *)(v843 - 8) + 64));
            }
            else
            {
              uint64_t v844 = v841[1];
              *uint64_t v840 = *v841;
              v840[1] = v844;
              uint64_t v845 = v841[3];
              v840[2] = v841[2];
              v840[3] = v845;
              uint64_t v846 = v841[5];
              v840[4] = v841[4];
              v840[5] = v846;
              uint64_t v847 = v841[7];
              v840[6] = v841[6];
              v840[7] = v847;
              uint64_t v848 = v841[9];
              v840[8] = v841[8];
              v840[9] = v848;
              uint64_t v849 = v841[11];
              v840[10] = v841[10];
              v840[11] = v849;
              uint64_t v850 = v841[13];
              v840[12] = v841[12];
              v840[13] = v850;
              uint64_t v851 = v841[15];
              v840[14] = v841[14];
              v840[15] = v851;
              *((unsigned char *)v840 + 128) = *((unsigned char *)v841 + 128);
              *(_WORD *)((char *)v840 + 129) = *(_WORD *)((char *)v841 + 129);
              uint64_t v852 = v841[18];
              v840[17] = v841[17];
              v840[18] = v852;
              uint64_t v853 = v841[20];
              v840[19] = v841[19];
              v840[20] = v853;
              uint64_t v854 = v841[22];
              v840[21] = v841[21];
              v840[22] = v854;
              __dsta = (void *)v841[24];
              v840[23] = v841[23];
              v840[24] = __dsta;
              uint64_t v2560 = v841[26];
              v840[25] = v841[25];
              v840[26] = v2560;
              uint64_t v855 = v841[28];
              v840[27] = v841[27];
              v840[28] = v855;
              uint64_t v856 = v841[30];
              v840[29] = v841[29];
              v840[30] = v856;
              uint64_t v857 = v841[32];
              v840[31] = v841[31];
              v840[32] = v857;
              uint64_t v858 = v841[34];
              v840[33] = v841[33];
              v840[34] = v858;
              uint64_t v860 = v841[35];
              uint64_t v859 = v841[36];
              *((unsigned char *)v840 + 296) = *((unsigned char *)v841 + 296);
              v840[35] = v860;
              v840[36] = v859;
              uint64_t v861 = *(int *)(v842 + 112);
              v2569 = (char *)v840 + v861;
              uint64_t v862 = (char *)v841 + v861;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v862, 1, v2678))
              {
                uint64_t v863 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2569, v862, *(void *)(*(void *)(v863 - 8) + 64));
              }
              else
              {
                v2656(v2569, v862, v2678);
                __swift_storeEnumTagSinglePayload((uint64_t)v2569, 0, 1, v2678);
              }
              uint64_t v917 = v842;
              uint64_t v918 = *(int *)(v842 + 116);
              v919 = (char *)v840 + v918;
              uint64_t v920 = (char *)v841 + v918;
              long long v350 = v2740;
              if (__swift_getEnumTagSinglePayload((uint64_t)v841 + v918, 1, v2678))
              {
                uint64_t v921 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v919, v920, *(void *)(*(void *)(v921 - 8) + 64));
              }
              else
              {
                v2656(v919, v920, v2678);
                __swift_storeEnumTagSinglePayload((uint64_t)v919, 0, 1, v2678);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v840, 0, 1, v917);
              uint64_t v516 = v2613;
              long long v355 = v2635;
              uint64_t v356 = v2584;
            }
            uint64_t v931 = v516[7];
            uint64_t v932 = (void *)((char *)v355 + v931);
            v933 = (void *)((char *)v356 + v931);
            v934 = (int *)type metadata accessor for TicketedShow(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v933, 1, (uint64_t)v934))
            {
              uint64_t v935 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
              memcpy(v932, v933, *(void *)(*(void *)(v935 - 8) + 64));
            }
            else
            {
              uint64_t v936 = v933[1];
              *uint64_t v932 = *v933;
              v932[1] = v936;
              uint64_t v937 = v933[3];
              v932[2] = v933[2];
              v932[3] = v937;
              uint64_t v938 = v933[5];
              v932[4] = v933[4];
              v932[5] = v938;
              uint64_t v939 = v933[7];
              v932[6] = v933[6];
              v932[7] = v939;
              uint64_t v940 = v933[9];
              v932[8] = v933[8];
              v932[9] = v940;
              uint64_t v941 = v933[11];
              v932[10] = v933[10];
              v932[11] = v941;
              uint64_t v942 = v933[13];
              v932[12] = v933[12];
              v932[13] = v942;
              uint64_t v943 = v933[15];
              v932[14] = v933[14];
              v932[15] = v943;
              *((unsigned char *)v932 + 128) = *((unsigned char *)v933 + 128);
              *(_WORD *)((char *)v932 + 129) = *(_WORD *)((char *)v933 + 129);
              uint64_t v944 = v933[18];
              v932[17] = v933[17];
              v932[18] = v944;
              uint64_t v945 = v933[20];
              v932[19] = v933[19];
              v932[20] = v945;
              uint64_t v946 = v933[22];
              v932[21] = v933[21];
              v932[22] = v946;
              uint64_t v2511 = v933[24];
              v932[23] = v933[23];
              v932[24] = v2511;
              uint64_t v947 = v933[26];
              v932[25] = v933[25];
              v932[26] = v947;
              uint64_t v948 = v933[28];
              v932[27] = v933[27];
              v932[28] = v948;
              uint64_t v2561 = v933[30];
              v932[29] = v933[29];
              v932[30] = v2561;
              uint64_t v949 = v933[32];
              v932[31] = v933[31];
              v932[32] = v949;
              uint64_t v950 = v933[34];
              v932[33] = v933[33];
              v932[34] = v950;
              uint64_t v951 = v933[36];
              uint64_t v952 = v933[35];
              *((unsigned char *)v932 + 296) = *((unsigned char *)v933 + 296);
              v932[35] = v952;
              v932[36] = v951;
              uint64_t v953 = v933[39];
              v932[38] = v933[38];
              v932[39] = v953;
              uint64_t v954 = v934[29];
              v2570 = (char *)v932 + v954;
              uint64_t v955 = (char *)v933 + v954;
              uint64_t v956 = type metadata accessor for URL();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v955, 1, v956))
              {
                uint64_t v957 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v2570, v955, *(void *)(*(void *)(v957 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v956 - 8) + 16))(v2570, v955, v956);
                __swift_storeEnumTagSinglePayload((uint64_t)v2570, 0, 1, v956);
              }
              uint64_t v1012 = v934[30];
              v1013 = (void *)((char *)v932 + v1012);
              uint64_t v1014 = (void *)((char *)v933 + v1012);
              uint64_t v1015 = v1014[1];
              void *v1013 = *v1014;
              v1013[1] = v1015;
              uint64_t v1016 = v934[31];
              long long v1017 = (char *)v932 + v1016;
              uint64_t v1018 = (char *)v933 + v1016;
              swift_bridgeObjectRetain();
              long long v350 = v2740;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1018, 1, v2678))
              {
                uint64_t v1019 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1017, v1018, *(void *)(*(void *)(v1019 - 8) + 64));
              }
              else
              {
                v2656(v1017, v1018, v2678);
                __swift_storeEnumTagSinglePayload((uint64_t)v1017, 0, 1, v2678);
              }
              uint64_t v1037 = v934[32];
              uint64_t v1038 = (char *)v932 + v1037;
              v1039 = (char *)v933 + v1037;
              if (__swift_getEnumTagSinglePayload((uint64_t)v933 + v1037, 1, v2678))
              {
                uint64_t v1040 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1038, v1039, *(void *)(*(void *)(v1040 - 8) + 64));
              }
              else
              {
                v2656(v1038, v1039, v2678);
                __swift_storeEnumTagSinglePayload((uint64_t)v1038, 0, 1, v2678);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v932, 0, 1, (uint64_t)v934);
              uint64_t v516 = v2613;
              long long v355 = v2635;
              uint64_t v356 = v2584;
            }
            uint64_t v1049 = v516[8];
            uint64_t v1050 = (void *)((char *)v355 + v1049);
            long long v1051 = (void *)((char *)v356 + v1049);
            uint64_t v1052 = type metadata accessor for Appointment(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1051, 1, v1052))
            {
              uint64_t v1053 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
              memcpy(v1050, v1051, *(void *)(*(void *)(v1053 - 8) + 64));
            }
            else
            {
              uint64_t v1054 = v1051[1];
              *uint64_t v1050 = *v1051;
              v1050[1] = v1054;
              uint64_t v1055 = v1051[3];
              v1050[2] = v1051[2];
              v1050[3] = v1055;
              uint64_t v1056 = v1051[5];
              v1050[4] = v1051[4];
              v1050[5] = v1056;
              uint64_t v1057 = v1051[7];
              v1050[6] = v1051[6];
              v1050[7] = v1057;
              uint64_t v1058 = v1051[9];
              v1050[8] = v1051[8];
              v1050[9] = v1058;
              uint64_t v1059 = v1051[11];
              v1050[10] = v1051[10];
              v1050[11] = v1059;
              uint64_t v1060 = v1051[13];
              v1050[12] = v1051[12];
              v1050[13] = v1060;
              uint64_t v1061 = v1051[15];
              v1050[14] = v1051[14];
              v1050[15] = v1061;
              *((unsigned char *)v1050 + 128) = *((unsigned char *)v1051 + 128);
              *(_WORD *)((char *)v1050 + 129) = *(_WORD *)((char *)v1051 + 129);
              uint64_t v1062 = v1051[18];
              v1050[17] = v1051[17];
              v1050[18] = v1062;
              uint64_t v1063 = v1051[20];
              v1050[19] = v1051[19];
              v1050[20] = v1063;
              uint64_t v1064 = v1051[22];
              v1050[21] = v1051[21];
              v1050[22] = v1064;
              uint64_t v2519 = v1051[24];
              v1050[23] = v1051[23];
              v1050[24] = v2519;
              uint64_t v1065 = v1051[26];
              v1050[25] = v1051[25];
              v1050[26] = v1065;
              uint64_t v1066 = v1051[28];
              v1050[27] = v1051[27];
              v1050[28] = v1066;
              uint64_t v1067 = v1051[30];
              v1050[29] = v1051[29];
              v1050[30] = v1067;
              uint64_t v1068 = v1051[32];
              v1050[31] = v1051[31];
              v1050[32] = v1068;
              uint64_t v1069 = v1051[34];
              uint64_t v1070 = v1051[33];
              *((unsigned char *)v1050 + 280) = *((unsigned char *)v1051 + 280);
              v1050[33] = v1070;
              v1050[34] = v1069;
              uint64_t v1071 = v1051[37];
              v1050[36] = v1051[36];
              v1050[37] = v1071;
              uint64_t v1072 = *(int *)(v1052 + 108);
              v2571 = (char *)v1050 + v1072;
              uint64_t v1073 = (char *)v1051 + v1072;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1073, 1, v2678))
              {
                uint64_t v1074 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2571, v1073, *(void *)(*(void *)(v1074 - 8) + 64));
              }
              else
              {
                v2656(v2571, v1073, v2678);
                __swift_storeEnumTagSinglePayload((uint64_t)v2571, 0, 1, v2678);
              }
              uint64_t v1127 = v1052;
              uint64_t v1128 = *(int *)(v1052 + 112);
              v1129 = (char *)v1050 + v1128;
              uint64_t v1130 = (char *)v1051 + v1128;
              long long v350 = v2740;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1051 + v1128, 1, v2678))
              {
                uint64_t v1131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1129, v1130, *(void *)(*(void *)(v1131 - 8) + 64));
              }
              else
              {
                v2656(v1129, v1130, v2678);
                __swift_storeEnumTagSinglePayload((uint64_t)v1129, 0, 1, v2678);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v1050, 0, 1, v1127);
              uint64_t v516 = v2613;
              long long v355 = v2635;
              uint64_t v356 = v2584;
            }
            uint64_t v1141 = v516[9];
            long long v1142 = (void *)((char *)v355 + v1141);
            long long v1143 = (void *)((char *)v356 + v1141);
            uint64_t v1144 = type metadata accessor for Party(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1143, 1, v1144))
            {
              uint64_t v1145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
              memcpy(v1142, v1143, *(void *)(*(void *)(v1145 - 8) + 64));
            }
            else
            {
              uint64_t v1146 = v1143[1];
              *long long v1142 = *v1143;
              v1142[1] = v1146;
              uint64_t v1147 = v1143[3];
              v1142[2] = v1143[2];
              v1142[3] = v1147;
              uint64_t v1148 = v1143[5];
              v1142[4] = v1143[4];
              v1142[5] = v1148;
              uint64_t v1149 = v1143[7];
              v1142[6] = v1143[6];
              v1142[7] = v1149;
              uint64_t v1150 = v1143[9];
              v1142[8] = v1143[8];
              v1142[9] = v1150;
              uint64_t v1151 = v1143[11];
              v1142[10] = v1143[10];
              v1142[11] = v1151;
              uint64_t v1152 = v1143[13];
              v1142[12] = v1143[12];
              v1142[13] = v1152;
              uint64_t v1153 = v1143[15];
              v1142[14] = v1143[14];
              v1142[15] = v1153;
              *((unsigned char *)v1142 + 128) = *((unsigned char *)v1143 + 128);
              *(_WORD *)((char *)v1142 + 129) = *(_WORD *)((char *)v1143 + 129);
              uint64_t v1154 = v1143[18];
              v1142[17] = v1143[17];
              v1142[18] = v1154;
              uint64_t v1155 = v1143[20];
              v1142[19] = v1143[19];
              v1142[20] = v1155;
              uint64_t v1156 = v1143[22];
              v1142[21] = v1143[21];
              v1142[22] = v1156;
              uint64_t v1157 = v1143[24];
              v1142[23] = v1143[23];
              v1142[24] = v1157;
              uint64_t v1158 = v1143[26];
              v1142[25] = v1143[25];
              v1142[26] = v1158;
              uint64_t v1159 = v1143[28];
              v1142[27] = v1143[27];
              v1142[28] = v1159;
              uint64_t v1160 = v1143[30];
              v1142[29] = v1143[29];
              v1142[30] = v1160;
              v1142[31] = v1143[31];
              uint64_t v1161 = *(int *)(v1144 + 96);
              v2572 = (char *)v1142 + v1161;
              uint64_t v1162 = (uint64_t)v1143 + v1161;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v1163 = (void *)v1162;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v1162, 1, v2678);
              uint64_t v1165 = v1144;
              if (EnumTagSinglePayload)
              {
                uint64_t v1166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2572, v1163, *(void *)(*(void *)(v1166 - 8) + 64));
              }
              else
              {
                v2656(v2572, (char *)v1163, v2678);
                __swift_storeEnumTagSinglePayload((uint64_t)v2572, 0, 1, v2678);
              }
              uint64_t v1213 = *(int *)(v1144 + 100);
              v1214 = (char *)v1142 + v1213;
              v1215 = (char *)v1143 + v1213;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1143 + v1213, 1, v2678))
              {
                uint64_t v1216 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1214, v1215, *(void *)(*(void *)(v1216 - 8) + 64));
              }
              else
              {
                v2656(v1214, v1215, v2678);
                __swift_storeEnumTagSinglePayload((uint64_t)v1214, 0, 1, v2678);
              }
              uint64_t v1225 = *(int *)(v1165 + 104);
              v1226 = (char *)v1142 + v1225;
              v1227 = (char *)v1143 + v1225;
              uint64_t v1228 = type metadata accessor for URL();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1227, 1, v1228))
              {
                uint64_t v1229 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v1226, v1227, *(void *)(*(void *)(v1229 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1228 - 8) + 16))(v1226, v1227, v1228);
                __swift_storeEnumTagSinglePayload((uint64_t)v1226, 0, 1, v1228);
              }
              long long v350 = v2740;
              __swift_storeEnumTagSinglePayload((uint64_t)v1142, 0, 1, v1165);
              uint64_t v516 = v2613;
              long long v355 = v2635;
              uint64_t v356 = v2584;
            }
            uint64_t v1239 = v516[10];
            v1240 = (void *)((char *)v355 + v1239);
            v1241 = (void *)((char *)v356 + v1239);
            uint64_t v1242 = type metadata accessor for Trip(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1241, 1, v1242))
            {
              uint64_t v1243 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
              memcpy(v1240, v1241, *(void *)(*(void *)(v1243 - 8) + 64));
            }
            else
            {
              uint64_t v1244 = v1241[1];
              void *v1240 = *v1241;
              v1240[1] = v1244;
              uint64_t v1245 = v1241[3];
              v1240[2] = v1241[2];
              v1240[3] = v1245;
              uint64_t v1246 = v1241[5];
              v1240[4] = v1241[4];
              v1240[5] = v1246;
              uint64_t v1247 = v1241[7];
              v1240[6] = v1241[6];
              v1240[7] = v1247;
              uint64_t v1248 = v1241[9];
              v1240[8] = v1241[8];
              v1240[9] = v1248;
              uint64_t v1249 = v1241[11];
              v1240[10] = v1241[10];
              v1240[11] = v1249;
              uint64_t v1250 = v1241[13];
              v1240[12] = v1241[12];
              v1240[13] = v1250;
              uint64_t v1251 = v1241[15];
              v1240[14] = v1241[14];
              v1240[15] = v1251;
              *((unsigned char *)v1240 + 128) = *((unsigned char *)v1241 + 128);
              *(_WORD *)((char *)v1240 + 129) = *(_WORD *)((char *)v1241 + 129);
              uint64_t v1252 = v1241[18];
              v1240[17] = v1241[17];
              v1240[18] = v1252;
              uint64_t v1253 = v1241[20];
              v1240[19] = v1241[19];
              v1240[20] = v1253;
              uint64_t v1254 = v1241[22];
              v1240[21] = v1241[21];
              v1240[22] = v1254;
              uint64_t v1255 = v1241[24];
              v1240[23] = v1241[23];
              v1240[24] = v1255;
              uint64_t v1256 = v1241[26];
              v1240[25] = v1241[25];
              v1240[26] = v1256;
              v1240[27] = v1241[27];
              uint64_t v1257 = *(int *)(v1242 + 88);
              v2573 = (char *)v1240 + v1257;
              uint64_t v1258 = (uint64_t)v1241 + v1257;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1259 = (void *)v1258;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              int v1260 = __swift_getEnumTagSinglePayload(v1258, 1, v2678);
              uint64_t v1261 = v1242;
              if (v1260)
              {
                uint64_t v1262 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2573, v1259, *(void *)(*(void *)(v1262 - 8) + 64));
              }
              else
              {
                v2656(v2573, (char *)v1259, v2678);
                __swift_storeEnumTagSinglePayload((uint64_t)v2573, 0, 1, v2678);
              }
              uint64_t v1305 = *(int *)(v1242 + 92);
              v1306 = (char *)v1240 + v1305;
              v1307 = (char *)v1241 + v1305;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1241 + v1305, 1, v2678))
              {
                uint64_t v1308 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1306, v1307, *(void *)(*(void *)(v1308 - 8) + 64));
              }
              else
              {
                v2656(v1306, v1307, v2678);
                __swift_storeEnumTagSinglePayload((uint64_t)v1306, 0, 1, v2678);
              }
              uint64_t v1317 = *(int *)(v1261 + 96);
              v1318 = (char *)v1240 + v1317;
              v1319 = (char *)v1241 + v1317;
              *(void *)v1318 = *(void *)v1319;
              v1318[8] = v1319[8];
              uint64_t v1320 = *(int *)(v1261 + 100);
              v1321 = (char *)v1240 + v1320;
              v1322 = (char *)v1241 + v1320;
              uint64_t v1323 = type metadata accessor for URL();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1322, 1, v1323))
              {
                uint64_t v1324 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v1321, v1322, *(void *)(*(void *)(v1324 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1323 - 8) + 16))(v1321, v1322, v1323);
                __swift_storeEnumTagSinglePayload((uint64_t)v1321, 0, 1, v1323);
              }
              long long v350 = v2740;
              __swift_storeEnumTagSinglePayload((uint64_t)v1240, 0, 1, v1261);
              uint64_t v516 = v2613;
              long long v355 = v2635;
              uint64_t v356 = v2584;
            }
            uint64_t v1340 = v516[11];
            v1341 = (void *)((char *)v355 + v1340);
            v1342 = (void *)((char *)v356 + v1340);
            v1343 = (int *)type metadata accessor for FlightReservation(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1342, 1, (uint64_t)v1343))
            {
              uint64_t v1344 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
              memcpy(v1341, v1342, *(void *)(*(void *)(v1344 - 8) + 64));
            }
            else
            {
              uint64_t v1345 = v1342[1];
              void *v1341 = *v1342;
              v1341[1] = v1345;
              uint64_t v1346 = v1342[3];
              v1341[2] = v1342[2];
              v1341[3] = v1346;
              uint64_t v1347 = v1342[5];
              v1341[4] = v1342[4];
              v1341[5] = v1347;
              uint64_t v1348 = v1342[7];
              v1341[6] = v1342[6];
              v1341[7] = v1348;
              uint64_t v1349 = v1342[9];
              v1341[8] = v1342[8];
              v1341[9] = v1349;
              uint64_t v1350 = v1342[11];
              v1341[10] = v1342[10];
              v1341[11] = v1350;
              *((unsigned char *)v1341 + 96) = *((unsigned char *)v1342 + 96);
              uint64_t v1351 = v1342[14];
              v1341[13] = v1342[13];
              v1341[14] = v1351;
              uint64_t v1352 = v1343[13];
              v2574 = (char *)v1341 + v1352;
              v1353 = (char *)v1342 + v1352;
              uint64_t v1354 = type metadata accessor for URL();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1353, 1, v1354))
              {
                uint64_t v1355 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v2574, v1353, *(void *)(*(void *)(v1355 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1354 - 8) + 16))(v2574, v1353, v1354);
                __swift_storeEnumTagSinglePayload((uint64_t)v2574, 0, 1, v1354);
              }
              uint64_t v1386 = v1343[14];
              v1387 = (char *)v1341 + v1386;
              v1388 = (char *)v1342 + v1386;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1342 + v1386, 1, v1354))
              {
                uint64_t v1389 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v1387, v1388, *(void *)(*(void *)(v1389 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1354 - 8) + 16))(v1387, v1388, v1354);
                __swift_storeEnumTagSinglePayload((uint64_t)v1387, 0, 1, v1354);
              }
              uint64_t v1398 = v1343[15];
              v1399 = (void *)((char *)v1341 + v1398);
              v1400 = (void *)((char *)v1342 + v1398);
              v2575 = (void *)v1400[1];
              void *v1399 = *v1400;
              v1399[1] = v2575;
              uint64_t v1401 = v1343[16];
              v1402 = (void *)((char *)v1341 + v1401);
              v1403 = (void *)((char *)v1342 + v1401);
              uint64_t v1404 = v1403[1];
              void *v1402 = *v1403;
              v1402[1] = v1404;
              uint64_t v1405 = v1343[17];
              v1406 = (void *)((char *)v1341 + v1405);
              v1407 = (void *)((char *)v1342 + v1405);
              uint64_t v1408 = v1407[1];
              void *v1406 = *v1407;
              v1406[1] = v1408;
              uint64_t v1409 = v1343[18];
              v2554 = (char *)v1342 + v1409;
              v2562 = (char *)v1341 + v1409;
              uint64_t v1410 = type metadata accessor for DateComponents();
              v1411 = *(void (**)(char *, char *, uint64_t))(*(void *)(v1410 - 8) + 16);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1411(v2562, v2554, v1410);
              v1411((char *)v1341 + v1343[19], (char *)v1342 + v1343[19], v1410);
              uint64_t v1412 = v1343[20];
              v1413 = (void *)((char *)v1341 + v1412);
              v1414 = (void *)((char *)v1342 + v1412);
              uint64_t v1415 = v1414[1];
              void *v1413 = *v1414;
              v1413[1] = v1415;
              uint64_t v1416 = v1343[21];
              v1417 = (void *)((char *)v1341 + v1416);
              v1418 = (void *)((char *)v1342 + v1416);
              uint64_t v1419 = v1418[1];
              void *v1417 = *v1418;
              v1417[1] = v1419;
              uint64_t v1420 = v1343[22];
              v1421 = (void *)((char *)v1341 + v1420);
              v1422 = (void *)((char *)v1342 + v1420);
              uint64_t v1423 = v1422[1];
              void *v1421 = *v1422;
              v1421[1] = v1423;
              uint64_t v1424 = v1343[23];
              v1425 = (void *)((char *)v1341 + v1424);
              v1426 = (void *)((char *)v1342 + v1424);
              uint64_t v2547 = v1426[1];
              void *v1425 = *v1426;
              v1425[1] = v2547;
              uint64_t v1427 = v1343[24];
              v1428 = (void *)((char *)v1341 + v1427);
              v1429 = (void *)((char *)v1342 + v1427);
              uint64_t v2563 = v1429[1];
              void *v1428 = *v1429;
              v1428[1] = v2563;
              uint64_t v1430 = v1343[25];
              v1431 = (void *)((char *)v1341 + v1430);
              v1432 = (void *)((char *)v1342 + v1430);
              v2555 = (void *)v1432[1];
              void *v1431 = *v1432;
              v1431[1] = v2555;
              uint64_t v1433 = v1343[26];
              v1434 = (void *)((char *)v1341 + v1433);
              v1435 = (void *)((char *)v1342 + v1433);
              v2543 = (void *)v1435[1];
              void *v1434 = *v1435;
              v1434[1] = v2543;
              uint64_t v1436 = v1343[27];
              v1437 = (void *)((char *)v1341 + v1436);
              v1438 = (void *)((char *)v1342 + v1436);
              v2537 = (void *)v1438[1];
              void *v1437 = *v1438;
              v1437[1] = v2537;
              uint64_t v1439 = v1343[28];
              v1440 = (void *)((char *)v1341 + v1439);
              v1441 = (void *)((char *)v1342 + v1439);
              v2533 = (void *)v1441[1];
              void *v1440 = *v1441;
              v1440[1] = v2533;
              uint64_t v1442 = v1343[29];
              v1443 = (void *)((char *)v1341 + v1442);
              v1444 = (void *)((char *)v1342 + v1442);
              v2529 = (void *)v1444[1];
              void *v1443 = *v1444;
              v1443[1] = v2529;
              uint64_t v1445 = v1343[30];
              v1446 = (void *)((char *)v1341 + v1445);
              v1447 = (void *)((char *)v1342 + v1445);
              uint64_t v2526 = v1447[1];
              void *v1446 = *v1447;
              v1446[1] = v2526;
              uint64_t v1448 = v1343[31];
              v1449 = (void *)((char *)v1341 + v1448);
              v1450 = (void *)((char *)v1342 + v1448);
              uint64_t v2525 = v1450[1];
              void *v1449 = *v1450;
              v1449[1] = v2525;
              uint64_t v1451 = v1343[32];
              v1452 = (void *)((char *)v1341 + v1451);
              v1453 = (void *)((char *)v1342 + v1451);
              uint64_t v2520 = v1453[1];
              void *v1452 = *v1453;
              v1452[1] = v2520;
              *(void *)((char *)v1341 + v1343[33]) = *(void *)((char *)v1342 + v1343[33]);
              *(void *)((char *)v1341 + v1343[34]) = *(void *)((char *)v1342 + v1343[34]);
              uint64_t v1454 = v1343[35];
              v1455 = (void *)((char *)v1341 + v1454);
              v1456 = (void *)((char *)v1342 + v1454);
              uint64_t v2517 = v1456[1];
              void *v1455 = *v1456;
              v1455[1] = v2517;
              uint64_t v1457 = v1343[36];
              v1458 = (void *)((char *)v1341 + v1457);
              v1459 = (void *)((char *)v1342 + v1457);
              uint64_t v1460 = v1459[1];
              void *v1458 = *v1459;
              v1458[1] = v1460;
              uint64_t v1461 = v1343[37];
              v1462 = (void *)((char *)v1341 + v1461);
              v1463 = (void *)((char *)v1342 + v1461);
              uint64_t v1464 = v1463[1];
              void *v1462 = *v1463;
              v1462[1] = v1464;
              uint64_t v1465 = v1343[38];
              v2576 = (char *)v1341 + v1465;
              v1466 = (char *)v1342 + v1465;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1466, 1, v2678))
              {
                uint64_t v1467 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2576, v1466, *(void *)(*(void *)(v1467 - 8) + 64));
              }
              else
              {
                v2656(v2576, v1466, v2678);
                __swift_storeEnumTagSinglePayload((uint64_t)v2576, 0, 1, v2678);
              }
              uint64_t v1612 = v1343[39];
              v1613 = (void *)((char *)v1341 + v1612);
              v1614 = (void *)((char *)v1342 + v1612);
              uint64_t v1615 = v1614[1];
              void *v1613 = *v1614;
              v1613[1] = v1615;
              uint64_t v1616 = v1343[40];
              v1617 = (void *)((char *)v1341 + v1616);
              v1618 = (void *)((char *)v1342 + v1616);
              uint64_t v1619 = v1618[1];
              void *v1617 = *v1618;
              v1617[1] = v1619;
              uint64_t v1620 = v1343[41];
              v1621 = (char *)v1341 + v1620;
              v1622 = (char *)v1342 + v1620;
              v1621[8] = v1622[8];
              *(void *)v1621 = *(void *)v1622;
              uint64_t v1623 = v1343[42];
              v1624 = (void *)((char *)v1341 + v1623);
              v1625 = (void *)((char *)v1342 + v1623);
              uint64_t v1626 = v1625[1];
              void *v1624 = *v1625;
              v1624[1] = v1626;
              uint64_t v1627 = v1343[43];
              v1628 = (char *)v1341 + v1627;
              v1629 = (char *)v1342 + v1627;
              *(_OWORD *)v1628 = *(_OWORD *)v1629;
              *(void *)(v1628 + 13) = *(void *)(v1629 + 13);
              uint64_t v1630 = v1343[44];
              v1631 = (void *)((char *)v1341 + v1630);
              v1632 = (void *)((char *)v1342 + v1630);
              uint64_t v1633 = v1632[1];
              void *v1631 = *v1632;
              v1631[1] = v1633;
              uint64_t v1634 = v1343[45];
              v1635 = (void *)((char *)v1341 + v1634);
              v1636 = (void *)((char *)v1342 + v1634);
              uint64_t v1637 = v1636[1];
              void *v1635 = *v1636;
              v1635[1] = v1637;
              uint64_t v1638 = v1343[46];
              v1639 = (void *)((char *)v1341 + v1638);
              v1640 = (void *)((char *)v1342 + v1638);
              uint64_t v1641 = v1640[1];
              void *v1639 = *v1640;
              v1639[1] = v1641;
              uint64_t v1642 = v1343[47];
              v1643 = (void *)((char *)v1341 + v1642);
              v1644 = (void *)((char *)v1342 + v1642);
              uint64_t v1645 = v1644[1];
              void *v1643 = *v1644;
              v1643[1] = v1645;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              __swift_storeEnumTagSinglePayload((uint64_t)v1341, 0, 1, (uint64_t)v1343);
              long long v350 = v2740;
              uint64_t v516 = v2613;
              long long v355 = v2635;
              uint64_t v356 = v2584;
            }
            uint64_t v1646 = v516[12];
            v1647 = (void *)((char *)v355 + v1646);
            v1648 = (void *)((char *)v356 + v1646);
            v1649 = (int *)type metadata accessor for HotelReservation(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1648, 1, (uint64_t)v1649))
            {
              uint64_t v1650 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
              memcpy(v1647, v1648, *(void *)(*(void *)(v1650 - 8) + 64));
            }
            else
            {
              uint64_t v1651 = v1648[1];
              void *v1647 = *v1648;
              v1647[1] = v1651;
              uint64_t v1652 = v1648[3];
              v1647[2] = v1648[2];
              v1647[3] = v1652;
              uint64_t v1653 = v1648[5];
              v1647[4] = v1648[4];
              v1647[5] = v1653;
              uint64_t v1654 = v1648[7];
              v1647[6] = v1648[6];
              v1647[7] = v1654;
              uint64_t v1655 = v1648[9];
              v1647[8] = v1648[8];
              v1647[9] = v1655;
              uint64_t v1656 = v1648[11];
              v1647[10] = v1648[10];
              v1647[11] = v1656;
              *((unsigned char *)v1647 + 96) = *((unsigned char *)v1648 + 96);
              uint64_t v1657 = v1648[14];
              v1647[13] = v1648[13];
              v1647[14] = v1657;
              uint64_t v1658 = v1648[16];
              v1647[15] = v1648[15];
              v1647[16] = v1658;
              uint64_t v1659 = v1649[14];
              v2580 = (char *)v1647 + v1659;
              v2540 = (char *)v1648 + v1659;
              uint64_t v1660 = type metadata accessor for DateComponents();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v2540, 1, v1660))
              {
                uint64_t v1661 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
                memcpy(v2580, v2540, *(void *)(*(void *)(v1661 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1660 - 8) + 16))(v2580, v2540, v1660);
                __swift_storeEnumTagSinglePayload((uint64_t)v2580, 0, 1, v1660);
              }
              uint64_t v1762 = v1649[15];
              v1763 = (char *)v1647 + v1762;
              v1764 = (char *)v1648 + v1762;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1648 + v1762, 1, v1660))
              {
                uint64_t v1765 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
                memcpy(v1763, v1764, *(void *)(*(void *)(v1765 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1660 - 8) + 16))(v1763, v1764, v1660);
                __swift_storeEnumTagSinglePayload((uint64_t)v1763, 0, 1, v1660);
              }
              uint64_t v1774 = v1649[16];
              v1775 = (void *)((char *)v1647 + v1774);
              v1776 = (void *)((char *)v1648 + v1774);
              uint64_t v1777 = v1776[1];
              void *v1775 = *v1776;
              v1775[1] = v1777;
              uint64_t v1778 = v1649[17];
              v1779 = (void *)((char *)v1647 + v1778);
              v1780 = (void *)((char *)v1648 + v1778);
              v2581 = (void *)v1780[1];
              void *v1779 = *v1780;
              v1779[1] = v2581;
              uint64_t v1781 = v1649[18];
              v1782 = (void *)((char *)v1647 + v1781);
              v1783 = (void *)((char *)v1648 + v1781);
              uint64_t v2566 = v1783[1];
              void *v1782 = *v1783;
              v1782[1] = v2566;
              uint64_t v1784 = v1649[19];
              v1785 = (void *)((char *)v1647 + v1784);
              v1786 = (void *)((char *)v1648 + v1784);
              v2558 = (void *)v1786[1];
              void *v1785 = *v1786;
              v1785[1] = v2558;
              uint64_t v1787 = v1649[20];
              v1788 = (void *)((char *)v1647 + v1787);
              v1789 = (void *)((char *)v1648 + v1787);
              uint64_t v1790 = v1789[1];
              void *v1788 = *v1789;
              v1788[1] = v1790;
              *(void *)((char *)v1647 + v1649[21]) = *(void *)((char *)v1648 + v1649[21]);
              *(void *)((char *)v1647 + v1649[22]) = *(void *)((char *)v1648 + v1649[22]);
              uint64_t v1791 = v1649[23];
              v1792 = (char *)v1647 + v1791;
              v1793 = (char *)v1648 + v1791;
              *(void *)v1792 = *(void *)v1793;
              v1792[8] = v1793[8];
              uint64_t v1794 = v1649[24];
              v1795 = (char *)v1647 + v1794;
              v1796 = (char *)v1648 + v1794;
              *(void *)v1795 = *(void *)v1796;
              v1795[8] = v1796[8];
              uint64_t v1797 = v1649[25];
              v1798 = (void *)((char *)v1647 + v1797);
              v1799 = (void *)((char *)v1648 + v1797);
              uint64_t v1800 = v1799[1];
              void *v1798 = *v1799;
              v1798[1] = v1800;
              uint64_t v1801 = v1649[26];
              v1802 = (void *)((char *)v1647 + v1801);
              v1803 = (void *)((char *)v1648 + v1801);
              uint64_t v1804 = v1803[1];
              void *v1802 = *v1803;
              v1802[1] = v1804;
              uint64_t v1805 = v1649[27];
              v1806 = (void *)((char *)v1647 + v1805);
              v1807 = (void *)((char *)v1648 + v1805);
              uint64_t v1808 = v1807[1];
              void *v1806 = *v1807;
              v1806[1] = v1808;
              uint64_t v1809 = v1649[28];
              v1810 = (void *)((char *)v1647 + v1809);
              v1811 = (void *)((char *)v1648 + v1809);
              uint64_t v1812 = v1811[1];
              void *v1810 = *v1811;
              v1810[1] = v1812;
              uint64_t v1813 = v1649[29];
              v1814 = (char *)v1647 + v1813;
              v1815 = (char *)v1648 + v1813;
              *(void *)v1814 = *(void *)v1815;
              v1814[8] = v1815[8];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              __swift_storeEnumTagSinglePayload((uint64_t)v1647, 0, 1, (uint64_t)v1649);
              long long v350 = v2740;
              uint64_t v516 = v2613;
              long long v355 = v2635;
              uint64_t v356 = v2584;
            }
            uint64_t v1816 = v516[13];
            v1817 = (void *)((char *)v355 + v1816);
            v1818 = (void *)((char *)v356 + v1816);
            v1819 = (int *)type metadata accessor for RestaurantReservation(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1818, 1, (uint64_t)v1819))
            {
              uint64_t v1820 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
              memcpy(v1817, v1818, *(void *)(*(void *)(v1820 - 8) + 64));
              uint64_t v359 = v2691;
            }
            else
            {
              uint64_t v1821 = v1818[1];
              void *v1817 = *v1818;
              v1817[1] = v1821;
              uint64_t v1822 = v1818[3];
              v1817[2] = v1818[2];
              v1817[3] = v1822;
              uint64_t v1823 = v1818[5];
              v1817[4] = v1818[4];
              v1817[5] = v1823;
              uint64_t v1824 = v1818[7];
              v1817[6] = v1818[6];
              v1817[7] = v1824;
              uint64_t v1825 = v1818[9];
              v1817[8] = v1818[8];
              v1817[9] = v1825;
              uint64_t v1826 = v1818[11];
              v1817[10] = v1818[10];
              v1817[11] = v1826;
              *((unsigned char *)v1817 + 96) = *((unsigned char *)v1818 + 96);
              uint64_t v1827 = v1818[14];
              v1817[13] = v1818[13];
              v1817[14] = v1827;
              uint64_t v1828 = v1818[16];
              v1817[15] = v1818[15];
              v1817[16] = v1828;
              uint64_t v1829 = v1819[14];
              v2602 = (char *)v1817 + v1829;
              v2541 = (char *)v1818 + v1829;
              uint64_t v1830 = type metadata accessor for DateComponents();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v2541, 1, v1830))
              {
                uint64_t v1831 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
                memcpy(v2602, v2541, *(void *)(*(void *)(v1831 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1830 - 8) + 16))(v2602, v2541, v1830);
                __swift_storeEnumTagSinglePayload((uint64_t)v2602, 0, 1, v1830);
              }
              uint64_t v1951 = v1819[15];
              v1952 = (void *)((char *)v1817 + v1951);
              v1953 = (void *)((char *)v1818 + v1951);
              uint64_t v1954 = v1953[1];
              void *v1952 = *v1953;
              v1952[1] = v1954;
              uint64_t v1955 = v1819[16];
              v1956 = (void *)((char *)v1817 + v1955);
              v1957 = (void *)((char *)v1818 + v1955);
              v2605 = (void *)v1957[1];
              void *v1956 = *v1957;
              v1956[1] = v2605;
              uint64_t v1958 = v1819[17];
              v1959 = (void *)((char *)v1817 + v1958);
              v1960 = (void *)((char *)v1818 + v1958);
              v2583 = (void *)v1960[1];
              void *v1959 = *v1960;
              v1959[1] = v2583;
              uint64_t v1961 = v1819[18];
              v1962 = (void *)((char *)v1817 + v1961);
              v1963 = (void *)((char *)v1818 + v1961);
              uint64_t v1964 = v1963[1];
              void *v1962 = *v1963;
              v1962[1] = v1964;
              uint64_t v1965 = v1819[19];
              v1966 = (void *)((char *)v1817 + v1965);
              v1967 = (void *)((char *)v1818 + v1965);
              uint64_t v1968 = v1967[1];
              void *v1966 = *v1967;
              v1966[1] = v1968;
              *(void *)((char *)v1817 + v1819[20]) = *(void *)((char *)v1818 + v1819[20]);
              uint64_t v1969 = v1819[21];
              v1970 = (void *)((char *)v1817 + v1969);
              v1971 = (void *)((char *)v1818 + v1969);
              uint64_t v1972 = v1971[1];
              void *v1970 = *v1971;
              v1970[1] = v1972;
              uint64_t v1973 = v1819[22];
              v1974 = (void *)((char *)v1817 + v1973);
              v1975 = (void *)((char *)v1818 + v1973);
              uint64_t v1976 = v1975[1];
              void *v1974 = *v1975;
              v1974[1] = v1976;
              uint64_t v1977 = v1819[23];
              v1978 = (void *)((char *)v1817 + v1977);
              v1979 = (void *)((char *)v1818 + v1977);
              uint64_t v1980 = v1979[1];
              void *v1978 = *v1979;
              v1978[1] = v1980;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              __swift_storeEnumTagSinglePayload((uint64_t)v1817, 0, 1, (uint64_t)v1819);
              long long v350 = v2740;
              uint64_t v359 = v2691;
              uint64_t v516 = v2613;
              long long v355 = v2635;
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v355, 0, 1, (uint64_t)v516);
            long long v349 = v2743;
          }
          uint64_t v1981 = v359[22];
          v1982 = (void *)((char *)v349 + v1981);
          v1983 = (void *)((char *)v350 + v1981);
          v1984 = (int *)type metadata accessor for PreExtractedCard(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1983, 1, (uint64_t)v1984))
          {
            uint64_t v1985 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
            memcpy(v1982, v1983, *(void *)(*(void *)(v1985 - 8) + 64));
          }
          else
          {
            uint64_t v1986 = v1983[1];
            void *v1982 = *v1983;
            v1982[1] = v1986;
            uint64_t v1987 = v1983[3];
            v1982[2] = v1983[2];
            v1982[3] = v1987;
            uint64_t v1988 = v1983[5];
            v1982[4] = v1983[4];
            v1982[5] = v1988;
            uint64_t v1989 = v1983[7];
            v1982[6] = v1983[6];
            v1982[7] = v1989;
            uint64_t v1990 = v1983[9];
            v1982[8] = v1983[8];
            v1982[9] = v1990;
            uint64_t v1991 = v1983[11];
            v1982[10] = v1983[10];
            v1982[11] = v1991;
            uint64_t v1992 = v1984[10];
            v2626 = (char *)v1983 + v1992;
            v2639 = (char *)v1982 + v1992;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2626, 1, v2678))
            {
              uint64_t v1993 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2639, v2626, *(void *)(*(void *)(v1993 - 8) + 64));
            }
            else
            {
              v2656(v2639, v2626, v2678);
              __swift_storeEnumTagSinglePayload((uint64_t)v2639, 0, 1, v2678);
            }
            uint64_t v1994 = v1984[11];
            v1995 = (char *)v1982 + v1994;
            v1996 = (char *)v1983 + v1994;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1983 + v1994, 1, v2678))
            {
              uint64_t v1997 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1995, v1996, *(void *)(*(void *)(v1997 - 8) + 64));
            }
            else
            {
              v2656(v1995, v1996, v2678);
              __swift_storeEnumTagSinglePayload((uint64_t)v1995, 0, 1, v2678);
            }
            uint64_t v1998 = v1984[12];
            v1999 = (void *)((char *)v1982 + v1998);
            v2000 = (void *)((char *)v1983 + v1998);
            uint64_t v2001 = v2000[1];
            void *v1999 = *v2000;
            v1999[1] = v2001;
            uint64_t v2002 = v1984[13];
            v2003 = (void *)((char *)v1982 + v2002);
            v2004 = (void *)((char *)v1983 + v2002);
            uint64_t v2005 = v2004[1];
            void *v2003 = *v2004;
            v2003[1] = v2005;
            uint64_t v2006 = v1984[14];
            v2007 = (void *)((char *)v1982 + v2006);
            v2008 = (void *)((char *)v1983 + v2006);
            uint64_t v2009 = v2008[1];
            void *v2007 = *v2008;
            v2007[1] = v2009;
            uint64_t v2010 = v1984[15];
            v2011 = (char *)v1982 + v2010;
            v2012 = (char *)v1983 + v2010;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2012, 1, v2678))
            {
              uint64_t v2013 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2011, v2012, *(void *)(*(void *)(v2013 - 8) + 64));
            }
            else
            {
              v2656(v2011, v2012, v2678);
              __swift_storeEnumTagSinglePayload((uint64_t)v2011, 0, 1, v2678);
            }
            uint64_t v2014 = v1984[16];
            v2015 = (void *)((char *)v1982 + v2014);
            v2016 = (void *)((char *)v1983 + v2014);
            uint64_t v2017 = v2016[1];
            void *v2015 = *v2016;
            v2015[1] = v2017;
            uint64_t v2018 = v1984[17];
            v2019 = (void *)((char *)v1982 + v2018);
            v2020 = (void *)((char *)v1983 + v2018);
            uint64_t v2640 = v2020[1];
            void *v2019 = *v2020;
            v2019[1] = v2640;
            uint64_t v2021 = v1984[18];
            v2022 = (void *)((char *)v1982 + v2021);
            v2023 = (void *)((char *)v1983 + v2021);
            uint64_t v2024 = v2023[1];
            void *v2022 = *v2023;
            v2022[1] = v2024;
            uint64_t v2025 = v1984[19];
            v2026 = (void *)((char *)v1982 + v2025);
            v2027 = (void *)((char *)v1983 + v2025);
            uint64_t v2028 = v2027[1];
            void *v2026 = *v2027;
            v2026[1] = v2028;
            uint64_t v2029 = v1984[20];
            v2030 = (void *)((char *)v1982 + v2029);
            v2031 = (void *)((char *)v1983 + v2029);
            uint64_t v2032 = v2031[1];
            void *v2030 = *v2031;
            v2030[1] = v2032;
            uint64_t v2033 = v1984[21];
            v2034 = (void *)((char *)v1982 + v2033);
            v2035 = (void *)((char *)v1983 + v2033);
            uint64_t v2036 = v2035[1];
            void *v2034 = *v2035;
            v2034[1] = v2036;
            uint64_t v2037 = v1984[22];
            v2038 = (void *)((char *)v1982 + v2037);
            v2039 = (void *)((char *)v1983 + v2037);
            uint64_t v2040 = v2039[1];
            void *v2038 = *v2039;
            v2038[1] = v2040;
            uint64_t v2041 = v1984[23];
            v2042 = (void *)((char *)v1982 + v2041);
            v2043 = (void *)((char *)v1983 + v2041);
            uint64_t v2044 = v2043[1];
            void *v2042 = *v2043;
            v2042[1] = v2044;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1982, 0, 1, (uint64_t)v1984);
            long long v350 = v2740;
            uint64_t v359 = v2691;
          }
          uint64_t v2045 = v359[23];
          v2046 = (void *)((char *)v2743 + v2045);
          v2047 = (void *)((char *)v350 + v2045);
          v2048 = (int *)type metadata accessor for PreExtractedContact(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v2047, 1, (uint64_t)v2048))
          {
            uint64_t v2049 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
            memcpy(v2046, v2047, *(void *)(*(void *)(v2049 - 8) + 64));
          }
          else
          {
            uint64_t v2050 = v2047[1];
            void *v2046 = *v2047;
            v2046[1] = v2050;
            uint64_t v2051 = v2047[3];
            v2046[2] = v2047[2];
            v2046[3] = v2051;
            uint64_t v2052 = v2047[5];
            v2046[4] = v2047[4];
            v2046[5] = v2052;
            uint64_t v2053 = v2047[7];
            v2046[6] = v2047[6];
            v2046[7] = v2053;
            uint64_t v2054 = v2047[9];
            v2046[8] = v2047[8];
            v2046[9] = v2054;
            uint64_t v2627 = v2047[11];
            v2046[10] = v2047[10];
            v2046[11] = v2627;
            uint64_t v2055 = v2048[11];
            v2641 = (char *)v2046 + v2055;
            v2606 = (char *)v2047 + v2055;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2606, 1, v2678))
            {
              uint64_t v2056 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2641, v2606, *(void *)(*(void *)(v2056 - 8) + 64));
            }
            else
            {
              v2656(v2641, v2606, v2678);
              __swift_storeEnumTagSinglePayload((uint64_t)v2641, 0, 1, v2678);
            }
            uint64_t v2057 = v2048[12];
            v2058 = (void *)((char *)v2046 + v2057);
            v2059 = (void *)((char *)v2047 + v2057);
            uint64_t v2060 = v2059[1];
            void *v2058 = *v2059;
            v2058[1] = v2060;
            *(void *)((char *)v2046 + v2048[13]) = *(void *)((char *)v2047 + v2048[13]);
            uint64_t v2061 = v2048[14];
            v2062 = (char *)v2046 + v2061;
            v2063 = (char *)v2047 + v2061;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            long long v350 = v2740;
            if (__swift_getEnumTagSinglePayload((uint64_t)v2063, 1, v2678))
            {
              uint64_t v2064 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2062, v2063, *(void *)(*(void *)(v2064 - 8) + 64));
            }
            else
            {
              v2656(v2062, v2063, v2678);
              __swift_storeEnumTagSinglePayload((uint64_t)v2062, 0, 1, v2678);
            }
            *(void *)((char *)v2046 + v2048[15]) = *(void *)((char *)v2047 + v2048[15]);
            *(void *)((char *)v2046 + v2048[16]) = *(void *)((char *)v2047 + v2048[16]);
            uint64_t v2065 = v2048[17];
            v2066 = (void *)((char *)v2046 + v2065);
            v2067 = (void *)((char *)v2047 + v2065);
            uint64_t v2068 = v2067[1];
            void *v2066 = *v2067;
            v2066[1] = v2068;
            *(void *)((char *)v2046 + v2048[18]) = *(void *)((char *)v2047 + v2048[18]);
            *(void *)((char *)v2046 + v2048[19]) = *(void *)((char *)v2047 + v2048[19]);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v2046, 0, 1, (uint64_t)v2048);
            uint64_t v359 = v2691;
          }
          uint64_t v2069 = v359[24];
          v2070 = (void *)((char *)v2743 + v2069);
          v2071 = (void *)((char *)v350 + v2069);
          v2072 = (int *)type metadata accessor for PreExtractedSharedLink(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v2071, 1, (uint64_t)v2072))
          {
            uint64_t v2073 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
            memcpy(v2070, v2071, *(void *)(*(void *)(v2073 - 8) + 64));
          }
          else
          {
            uint64_t v2074 = v2071[1];
            void *v2070 = *v2071;
            v2070[1] = v2074;
            uint64_t v2075 = v2071[3];
            v2070[2] = v2071[2];
            v2070[3] = v2075;
            uint64_t v2076 = v2071[5];
            v2070[4] = v2071[4];
            v2070[5] = v2076;
            uint64_t v2077 = v2071[7];
            v2070[6] = v2071[6];
            v2070[7] = v2077;
            uint64_t v2078 = v2072[8];
            v2628 = (char *)v2071 + v2078;
            v2642 = (char *)v2070 + v2078;
            uint64_t v2079 = type metadata accessor for URL();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2628, 1, v2079))
            {
              uint64_t v2080 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v2642, v2628, *(void *)(*(void *)(v2080 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2079 - 8) + 16))(v2642, v2628, v2079);
              __swift_storeEnumTagSinglePayload((uint64_t)v2642, 0, 1, v2079);
            }
            uint64_t v2081 = v2072[9];
            v2082 = (void *)((char *)v2070 + v2081);
            v2083 = (void *)((char *)v2071 + v2081);
            uint64_t v2084 = v2083[1];
            void *v2082 = *v2083;
            v2082[1] = v2084;
            uint64_t v2085 = v2072[10];
            v2086 = (void *)((char *)v2070 + v2085);
            v2087 = (void *)((char *)v2071 + v2085);
            uint64_t v2088 = v2087[1];
            void *v2086 = *v2087;
            v2086[1] = v2088;
            uint64_t v2089 = v2072[11];
            v2090 = (void *)((char *)v2070 + v2089);
            v2091 = (void *)((char *)v2071 + v2089);
            uint64_t v2092 = v2091[1];
            void *v2090 = *v2091;
            v2090[1] = v2092;
            uint64_t v2093 = v2072[12];
            v2094 = (char *)v2070 + v2093;
            v2095 = (char *)v2071 + v2093;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            long long v350 = v2740;
            if (__swift_getEnumTagSinglePayload((uint64_t)v2095, 1, v2678))
            {
              uint64_t v2096 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2094, v2095, *(void *)(*(void *)(v2096 - 8) + 64));
            }
            else
            {
              v2656(v2094, v2095, v2678);
              __swift_storeEnumTagSinglePayload((uint64_t)v2094, 0, 1, v2678);
            }
            uint64_t v2097 = v2072[13];
            v2098 = (char *)v2070 + v2097;
            v2099 = (char *)v2071 + v2097;
            if (__swift_getEnumTagSinglePayload((uint64_t)v2071 + v2097, 1, v2678))
            {
              uint64_t v2100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2098, v2099, *(void *)(*(void *)(v2100 - 8) + 64));
            }
            else
            {
              v2656(v2098, v2099, v2678);
              __swift_storeEnumTagSinglePayload((uint64_t)v2098, 0, 1, v2678);
            }
            uint64_t v2101 = v2072[14];
            v2102 = (char *)v2070 + v2101;
            v2103 = (char *)v2071 + v2101;
            *(void *)v2102 = *(void *)v2103;
            v2102[8] = v2103[8];
            uint64_t v2104 = v2072[15];
            v2105 = (void *)((char *)v2070 + v2104);
            v2106 = (void *)((char *)v2071 + v2104);
            uint64_t v2107 = v2106[1];
            void *v2105 = *v2106;
            v2105[1] = v2107;
            uint64_t v2108 = v2072[16];
            v2109 = (void *)((char *)v2070 + v2108);
            v2110 = (void *)((char *)v2071 + v2108);
            uint64_t v2111 = v2110[1];
            void *v2109 = *v2110;
            v2109[1] = v2111;
            uint64_t v2112 = v2072[17];
            v2113 = (void *)((char *)v2070 + v2112);
            v2114 = (void *)((char *)v2071 + v2112);
            uint64_t v2115 = v2114[1];
            void *v2113 = *v2114;
            v2113[1] = v2115;
            uint64_t v2116 = v2072[18];
            v2117 = (void *)((char *)v2070 + v2116);
            v2118 = (void *)((char *)v2071 + v2116);
            uint64_t v2119 = v2118[1];
            void *v2117 = *v2118;
            v2117[1] = v2119;
            uint64_t v2120 = v2072[19];
            v2121 = (void *)((char *)v2070 + v2120);
            v2122 = (void *)((char *)v2071 + v2120);
            uint64_t v2123 = v2122[1];
            void *v2121 = *v2122;
            v2121[1] = v2123;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v2070, 0, 1, (uint64_t)v2072);
            uint64_t v359 = v2691;
          }
          uint64_t v2124 = v359[25];
          uint64_t v9 = v2743;
          v2125 = (void *)((char *)v2743 + v2124);
          v2126 = (void *)((char *)v350 + v2124);
          uint64_t v2127 = *(void *)((char *)v350 + v2124 + 8);
          if (v2127)
          {
            void *v2125 = *v2126;
            v2125[1] = v2127;
            uint64_t v2128 = v2126[3];
            v2125[2] = v2126[2];
            v2125[3] = v2128;
            uint64_t v2129 = v2126[5];
            v2125[4] = v2126[4];
            v2125[5] = v2129;
            uint64_t v2130 = v2126[7];
            v2125[6] = v2126[6];
            v2125[7] = v2130;
            uint64_t v2131 = v2126[9];
            v2125[8] = v2126[8];
            v2125[9] = v2131;
            uint64_t v2132 = v2126[11];
            v2125[10] = v2126[10];
            v2125[11] = v2132;
            uint64_t v2133 = v2126[13];
            v2125[12] = v2126[12];
            v2125[13] = v2133;
            uint64_t v2134 = v2126[15];
            v2125[14] = v2126[14];
            v2125[15] = v2134;
            uint64_t v2741 = v2126[17];
            v2125[16] = v2126[16];
            v2125[17] = v2741;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v11 = v2706;
            swift_bridgeObjectRetain();
            uint64_t v9 = v2743;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_464:
            swift_bridgeObjectRetain();
          }
          else
          {
            memcpy(v2125, v2126, 0x90uLL);
          }
          uint64_t v3 = v2718;
          uint64_t v6 = v2726;
          goto LABEL_547;
      }
    }
    uint64_t v2502 = v6[7];
    *(void *)((char *)v4 + v6[6]) = *(void *)((char *)v3 + v6[6]);
    v2503 = (char *)v4 + v2502;
    v2504 = (char *)v3 + v2502;
    uint64_t v2505 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v2504, 1, v2505))
    {
      uint64_t v2506 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v2503, v2504, *(void *)(*(void *)(v2506 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v2505 - 8) + 16))(v2503, v2504, v2505);
      __swift_storeEnumTagSinglePayload((uint64_t)v2503, 0, 1, v2505);
    }
    *(void *)((char *)v4 + v6[8]) = *(void *)((char *)v3 + v6[8]);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for ResolvedInfo(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for SearchResultItem(0);
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v9 = (int *)type metadata accessor for EmailDocument(0);
        uint64_t v10 = v4 + v9[12];
        uint64_t v11 = type metadata accessor for Date();
        uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
        v12(v10, v11);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v4 + v9[19]))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t v13 = v4 + v9[21];
        uint64_t v14 = type metadata accessor for PartialExtractedAttributes(0);
        if (!__swift_getEnumTagSinglePayload(v13, 1, v14))
        {
          swift_bridgeObjectRelease();
          uint64_t v290 = (int *)v14;
          uint64_t v15 = v13 + *(int *)(v14 + 20);
          uint64_t v16 = type metadata accessor for RentalCarReservation(0);
          if (!__swift_getEnumTagSinglePayload(v15, 1, v16))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v17 = v15 + *(int *)(v16 + 140);
            if (!__swift_getEnumTagSinglePayload(v17, 1, v11)) {
              v12(v17, v11);
            }
            uint64_t v18 = v15 + *(int *)(v16 + 144);
            if (!__swift_getEnumTagSinglePayload(v18, 1, v11)) {
              v12(v18, v11);
            }
          }
          uint64_t v19 = v13 + v290[6];
          uint64_t v20 = type metadata accessor for TicketedTransportation(0);
          if (!__swift_getEnumTagSinglePayload(v19, 1, v20))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v21 = v19 + *(int *)(v20 + 112);
            if (!__swift_getEnumTagSinglePayload(v21, 1, v11)) {
              v12(v21, v11);
            }
            uint64_t v22 = v19 + *(int *)(v20 + 116);
            if (!__swift_getEnumTagSinglePayload(v22, 1, v11)) {
              v12(v22, v11);
            }
          }
          uint64_t v23 = v13 + v290[7];
          uint64_t v24 = (int *)type metadata accessor for TicketedShow(0);
          uint64_t v286 = v13;
          if (!__swift_getEnumTagSinglePayload(v23, 1, (uint64_t)v24))
          {
            uint64_t v25 = v12;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v26 = v23 + v24[29];
            uint64_t v27 = type metadata accessor for URL();
            if (!__swift_getEnumTagSinglePayload(v26, 1, v27)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v26, v27);
            }
            swift_bridgeObjectRelease();
            uint64_t v28 = v23 + v24[31];
            uint64_t v12 = v25;
            if (!__swift_getEnumTagSinglePayload(v28, 1, v11)) {
              v25(v28, v11);
            }
            uint64_t v29 = v23 + v24[32];
            uint64_t v13 = v286;
            if (!__swift_getEnumTagSinglePayload(v29, 1, v11)) {
              v12(v29, v11);
            }
          }
          uint64_t v30 = v13 + v290[8];
          uint64_t v31 = type metadata accessor for Appointment(0);
          if (!__swift_getEnumTagSinglePayload(v30, 1, v31))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v32 = v30 + *(int *)(v31 + 108);
            if (!__swift_getEnumTagSinglePayload(v32, 1, v11)) {
              v12(v32, v11);
            }
            uint64_t v33 = v30 + *(int *)(v31 + 112);
            if (!__swift_getEnumTagSinglePayload(v33, 1, v11)) {
              v12(v33, v11);
            }
          }
          uint64_t v34 = v13 + v290[9];
          uint64_t v35 = (int *)type metadata accessor for Party(0);
          if (!__swift_getEnumTagSinglePayload(v34, 1, (uint64_t)v35))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v36 = v34 + v35[24];
            if (!__swift_getEnumTagSinglePayload(v36, 1, v11)) {
              v12(v36, v11);
            }
            uint64_t v37 = v34 + v35[25];
            if (!__swift_getEnumTagSinglePayload(v37, 1, v11)) {
              v12(v37, v11);
            }
            uint64_t v38 = v34 + v35[26];
            uint64_t v39 = type metadata accessor for URL();
            if (!__swift_getEnumTagSinglePayload(v38, 1, v39)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(v38, v39);
            }
          }
          uint64_t v40 = v13 + v290[10];
          uint64_t v41 = (int *)type metadata accessor for Trip(0);
          if (!__swift_getEnumTagSinglePayload(v40, 1, (uint64_t)v41))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v42 = v40 + v41[22];
            if (!__swift_getEnumTagSinglePayload(v42, 1, v11)) {
              v12(v42, v11);
            }
            uint64_t v43 = v40 + v41[23];
            if (!__swift_getEnumTagSinglePayload(v43, 1, v11)) {
              v12(v43, v11);
            }
            uint64_t v44 = v40 + v41[25];
            uint64_t v45 = type metadata accessor for URL();
            if (!__swift_getEnumTagSinglePayload(v44, 1, v45)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v45 - 8) + 8))(v44, v45);
            }
          }
          uint64_t v46 = v290;
          uint64_t v47 = v13 + v290[11];
          uint64_t v48 = (int *)type metadata accessor for FlightReservation(0);
          if (!__swift_getEnumTagSinglePayload(v47, 1, (uint64_t)v48))
          {
            uint64_t v284 = v12;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v49 = v47 + v48[13];
            uint64_t v50 = type metadata accessor for URL();
            if (!__swift_getEnumTagSinglePayload(v49, 1, v50)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v49, v50);
            }
            uint64_t v51 = v47 + v48[14];
            if (!__swift_getEnumTagSinglePayload(v51, 1, v50)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v51, v50);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v52 = v47 + v48[18];
            uint64_t v53 = type metadata accessor for DateComponents();
            uint64_t v54 = *(void (**)(uint64_t, uint64_t))(*(void *)(v53 - 8) + 8);
            v54(v52, v53);
            v54(v47 + v48[19], v53);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v55 = v47 + v48[38];
            uint64_t v12 = v284;
            if (!__swift_getEnumTagSinglePayload(v55, 1, v11)) {
              v284(v55, v11);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v13 = v286;
            uint64_t v46 = v290;
          }
          uint64_t v56 = v13 + v46[12];
          uint64_t v57 = type metadata accessor for HotelReservation(0);
          if (!__swift_getEnumTagSinglePayload(v56, 1, v57))
          {
            uint64_t v58 = v12;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v59 = v56 + *(int *)(v57 + 56);
            uint64_t v60 = type metadata accessor for DateComponents();
            if (!__swift_getEnumTagSinglePayload(v59, 1, v60)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
            }
            uint64_t v61 = v56 + *(int *)(v57 + 60);
            if (!__swift_getEnumTagSinglePayload(v61, 1, v60)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v61, v60);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v12 = v58;
            uint64_t v13 = v286;
            uint64_t v46 = v290;
          }
          uint64_t v62 = v13 + v46[13];
          uint64_t v63 = type metadata accessor for RestaurantReservation(0);
          if (!__swift_getEnumTagSinglePayload(v62, 1, v63))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v64 = v62 + *(int *)(v63 + 56);
            uint64_t v65 = type metadata accessor for DateComponents();
            if (!__swift_getEnumTagSinglePayload(v64, 1, v65)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v65 - 8) + 8))(v64, v65);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
        }
        uint64_t v66 = v4 + v9[22];
        uint64_t v67 = (int *)type metadata accessor for PreExtractedCard(0);
        if (!__swift_getEnumTagSinglePayload(v66, 1, (uint64_t)v67))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v68 = v66 + v67[10];
          if (!__swift_getEnumTagSinglePayload(v68, 1, v11)) {
            v12(v68, v11);
          }
          uint64_t v69 = v66 + v67[11];
          if (!__swift_getEnumTagSinglePayload(v69, 1, v11)) {
            v12(v69, v11);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v70 = v66 + v67[15];
          if (!__swift_getEnumTagSinglePayload(v70, 1, v11)) {
            v12(v70, v11);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v71 = v4 + v9[23];
        uint64_t v72 = type metadata accessor for PreExtractedContact(0);
        if (!__swift_getEnumTagSinglePayload(v71, 1, v72))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v73 = v71 + *(int *)(v72 + 44);
          if (!__swift_getEnumTagSinglePayload(v73, 1, v11)) {
            v12(v73, v11);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v74 = v71 + *(int *)(v72 + 56);
          if (!__swift_getEnumTagSinglePayload(v74, 1, v11)) {
            v12(v74, v11);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v75 = v4 + v9[24];
        uint64_t v76 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (!__swift_getEnumTagSinglePayload(v75, 1, (uint64_t)v76))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v77 = v75 + v76[8];
          uint64_t v78 = type metadata accessor for URL();
          if (!__swift_getEnumTagSinglePayload(v77, 1, v78)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v78 - 8) + 8))(v77, v78);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v79 = v75 + v76[12];
          if (!__swift_getEnumTagSinglePayload(v79, 1, v11)) {
            v12(v79, v11);
          }
          uint64_t v80 = v75 + v76[13];
          if (!__swift_getEnumTagSinglePayload(v80, 1, v11)) {
            v12(v80, v11);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v81 = v9[25];
        goto LABEL_258;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v82 = (int *)type metadata accessor for MobileSMSDocument(0);
        uint64_t v83 = v4 + v82[10];
        uint64_t v84 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v83, 1, v84)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v83, v84);
        }
        uint64_t v85 = v4 + v82[11];
        uint64_t v86 = type metadata accessor for URL();
        if (!__swift_getEnumTagSinglePayload(v85, 1, v86)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v86 - 8) + 8))(v85, v86);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v4 + v82[17]))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t v87 = v4 + v82[19];
        uint64_t v88 = (int *)type metadata accessor for PartialExtractedAttributes(0);
        if (!__swift_getEnumTagSinglePayload(v87, 1, (uint64_t)v88))
        {
          uint64_t v291 = v86;
          swift_bridgeObjectRelease();
          uint64_t v89 = v87 + v88[5];
          uint64_t v90 = type metadata accessor for RentalCarReservation(0);
          if (!__swift_getEnumTagSinglePayload(v89, 1, v90))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v91 = v89 + *(int *)(v90 + 140);
            if (!__swift_getEnumTagSinglePayload(v91, 1, v84)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v91, v84);
            }
            uint64_t v92 = v89 + *(int *)(v90 + 144);
            if (!__swift_getEnumTagSinglePayload(v92, 1, v84)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v92, v84);
            }
          }
          uint64_t v93 = v87 + v88[6];
          uint64_t v94 = type metadata accessor for TicketedTransportation(0);
          if (!__swift_getEnumTagSinglePayload(v93, 1, v94))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v95 = v93 + *(int *)(v94 + 112);
            if (!__swift_getEnumTagSinglePayload(v95, 1, v84)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v95, v84);
            }
            uint64_t v96 = v93 + *(int *)(v94 + 116);
            if (!__swift_getEnumTagSinglePayload(v96, 1, v84)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v96, v84);
            }
          }
          uint64_t v97 = v87 + v88[7];
          uint64_t v98 = (int *)type metadata accessor for TicketedShow(0);
          if (!__swift_getEnumTagSinglePayload(v97, 1, (uint64_t)v98))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v99 = v97 + v98[29];
            if (!__swift_getEnumTagSinglePayload(v99, 1, v291)) {
              (*(void (**)(uint64_t))(*(void *)(v291 - 8) + 8))(v99);
            }
            swift_bridgeObjectRelease();
            uint64_t v100 = v97 + v98[31];
            if (!__swift_getEnumTagSinglePayload(v100, 1, v84)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v100, v84);
            }
            uint64_t v101 = v97 + v98[32];
            if (!__swift_getEnumTagSinglePayload(v101, 1, v84)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v101, v84);
            }
          }
          uint64_t v102 = v87 + v88[8];
          uint64_t v103 = type metadata accessor for Appointment(0);
          if (!__swift_getEnumTagSinglePayload(v102, 1, v103))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v104 = v102 + *(int *)(v103 + 108);
            if (!__swift_getEnumTagSinglePayload(v104, 1, v84)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v104, v84);
            }
            uint64_t v105 = v102 + *(int *)(v103 + 112);
            if (!__swift_getEnumTagSinglePayload(v105, 1, v84)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v105, v84);
            }
          }
          uint64_t v106 = v87 + v88[9];
          uint64_t v107 = (int *)type metadata accessor for Party(0);
          if (!__swift_getEnumTagSinglePayload(v106, 1, (uint64_t)v107))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v108 = v106 + v107[24];
            if (!__swift_getEnumTagSinglePayload(v108, 1, v84)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v108, v84);
            }
            uint64_t v109 = v106 + v107[25];
            if (!__swift_getEnumTagSinglePayload(v109, 1, v84)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v109, v84);
            }
            uint64_t v110 = v106 + v107[26];
            if (!__swift_getEnumTagSinglePayload(v110, 1, v291)) {
              (*(void (**)(uint64_t))(*(void *)(v291 - 8) + 8))(v110);
            }
          }
          uint64_t v111 = v87 + v88[10];
          uint64_t v112 = (int *)type metadata accessor for Trip(0);
          if (!__swift_getEnumTagSinglePayload(v111, 1, (uint64_t)v112))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v113 = v111 + v112[22];
            if (!__swift_getEnumTagSinglePayload(v113, 1, v84)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v113, v84);
            }
            uint64_t v114 = v111 + v112[23];
            if (!__swift_getEnumTagSinglePayload(v114, 1, v84)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v114, v84);
            }
            uint64_t v115 = v111 + v112[25];
            if (!__swift_getEnumTagSinglePayload(v115, 1, v291)) {
              (*(void (**)(uint64_t))(*(void *)(v291 - 8) + 8))(v115);
            }
          }
          uint64_t v116 = v87 + v88[11];
          uint64_t v117 = (int *)type metadata accessor for FlightReservation(0);
          if (!__swift_getEnumTagSinglePayload(v116, 1, (uint64_t)v117))
          {
            uint64_t v285 = v87;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v118 = v116 + v117[13];
            if (!__swift_getEnumTagSinglePayload(v118, 1, v291)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v291 - 8) + 8))(v118, v291);
            }
            uint64_t v288 = v88;
            uint64_t v119 = v116 + v117[14];
            if (!__swift_getEnumTagSinglePayload(v119, 1, v291)) {
              (*(void (**)(uint64_t))(*(void *)(v291 - 8) + 8))(v119);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v120 = v116 + v117[18];
            uint64_t v121 = type metadata accessor for DateComponents();
            v122 = *(void (**)(uint64_t, uint64_t))(*(void *)(v121 - 8) + 8);
            v122(v120, v121);
            v122(v116 + v117[19], v121);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v123 = v116 + v117[38];
            if (!__swift_getEnumTagSinglePayload(v123, 1, v84)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v123, v84);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v87 = v285;
            uint64_t v88 = v288;
          }
          uint64_t v124 = v87 + v88[12];
          uint64_t v125 = type metadata accessor for HotelReservation(0);
          if (!__swift_getEnumTagSinglePayload(v124, 1, v125))
          {
            uint64_t v289 = v88;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v126 = v124 + *(int *)(v125 + 56);
            uint64_t v127 = type metadata accessor for DateComponents();
            if (!__swift_getEnumTagSinglePayload(v126, 1, v127)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v127 - 8) + 8))(v126, v127);
            }
            uint64_t v128 = v124 + *(int *)(v125 + 60);
            if (!__swift_getEnumTagSinglePayload(v128, 1, v127)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v127 - 8) + 8))(v128, v127);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v88 = v289;
          }
          uint64_t v129 = v87 + v88[13];
          uint64_t v130 = type metadata accessor for RestaurantReservation(0);
          uint64_t v86 = v291;
          if (!__swift_getEnumTagSinglePayload(v129, 1, v130))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v131 = v129 + *(int *)(v130 + 56);
            uint64_t v132 = type metadata accessor for DateComponents();
            if (!__swift_getEnumTagSinglePayload(v131, 1, v132)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v132 - 8) + 8))(v131, v132);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
        }
        uint64_t v133 = v4 + v82[20];
        uint64_t v134 = (int *)type metadata accessor for PreExtractedCard(0);
        if (!__swift_getEnumTagSinglePayload(v133, 1, (uint64_t)v134))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v135 = v133 + v134[10];
          if (!__swift_getEnumTagSinglePayload(v135, 1, v84)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v135, v84);
          }
          uint64_t v136 = v133 + v134[11];
          if (!__swift_getEnumTagSinglePayload(v136, 1, v84)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v136, v84);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v137 = v133 + v134[15];
          if (!__swift_getEnumTagSinglePayload(v137, 1, v84)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v137, v84);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v138 = v4 + v82[21];
        uint64_t v139 = type metadata accessor for PreExtractedContact(0);
        if (!__swift_getEnumTagSinglePayload(v138, 1, v139))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v140 = v138 + *(int *)(v139 + 44);
          if (!__swift_getEnumTagSinglePayload(v140, 1, v84)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v140, v84);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v141 = v138 + *(int *)(v139 + 56);
          if (!__swift_getEnumTagSinglePayload(v141, 1, v84)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v141, v84);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v142 = v4 + v82[22];
        uint64_t v143 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (!__swift_getEnumTagSinglePayload(v142, 1, (uint64_t)v143))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v144 = v142 + v143[8];
          if (!__swift_getEnumTagSinglePayload(v144, 1, v86)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v86 - 8) + 8))(v144, v86);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v145 = v142 + v143[12];
          if (!__swift_getEnumTagSinglePayload(v145, 1, v84)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v145, v84);
          }
          uint64_t v146 = v142 + v143[13];
          if (!__swift_getEnumTagSinglePayload(v146, 1, v84)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v146, v84);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v81 = v82[23];
        goto LABEL_258;
      case 2u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v147 = (int *)type metadata accessor for CalendarEvent(0);
        uint64_t v148 = v4 + v147[7];
        uint64_t v149 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v148, 1, v149)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v149 - 8) + 8))(v148, v149);
        }
        uint64_t v150 = v4 + v147[8];
        if (!__swift_getEnumTagSinglePayload(v150, 1, v149)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v149 - 8) + 8))(v150, v149);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!*(void *)(v4 + v147[13])) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_340;
      case 3u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        long long v151 = (int *)type metadata accessor for Photo(0);
        uint64_t v152 = v4 + v151[11];
        uint64_t v153 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v152, 1, v153)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v153 - 8) + 8))(v152, v153);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v154 = v4 + v151[17];
        uint64_t v155 = (int *)type metadata accessor for PartialExtractedAttributes(0);
        if (!__swift_getEnumTagSinglePayload(v154, 1, (uint64_t)v155))
        {
          swift_bridgeObjectRelease();
          uint64_t v156 = v154 + v155[5];
          uint64_t v157 = type metadata accessor for RentalCarReservation(0);
          if (!__swift_getEnumTagSinglePayload(v156, 1, v157))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v158 = v156 + *(int *)(v157 + 140);
            if (!__swift_getEnumTagSinglePayload(v158, 1, v153)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v153 - 8) + 8))(v158, v153);
            }
            uint64_t v159 = v156 + *(int *)(v157 + 144);
            if (!__swift_getEnumTagSinglePayload(v159, 1, v153)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v153 - 8) + 8))(v159, v153);
            }
          }
          uint64_t v160 = v154 + v155[6];
          uint64_t v161 = type metadata accessor for TicketedTransportation(0);
          if (!__swift_getEnumTagSinglePayload(v160, 1, v161))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v162 = v160 + *(int *)(v161 + 112);
            if (!__swift_getEnumTagSinglePayload(v162, 1, v153)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v153 - 8) + 8))(v162, v153);
            }
            uint64_t v163 = v160 + *(int *)(v161 + 116);
            if (!__swift_getEnumTagSinglePayload(v163, 1, v153)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v153 - 8) + 8))(v163, v153);
            }
          }
          uint64_t v164 = v154 + v155[7];
          uint64_t v165 = (int *)type metadata accessor for TicketedShow(0);
          uint64_t v292 = v155;
          if (!__swift_getEnumTagSinglePayload(v164, 1, (uint64_t)v165))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v166 = v164 + v165[29];
            uint64_t v167 = type metadata accessor for URL();
            if (!__swift_getEnumTagSinglePayload(v166, 1, v167)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v167 - 8) + 8))(v166, v167);
            }
            swift_bridgeObjectRelease();
            uint64_t v168 = v164 + v165[31];
            if (!__swift_getEnumTagSinglePayload(v168, 1, v153)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v153 - 8) + 8))(v168, v153);
            }
            uint64_t v169 = v164 + v165[32];
            uint64_t v155 = v292;
            if (!__swift_getEnumTagSinglePayload(v169, 1, v153)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v153 - 8) + 8))(v169, v153);
            }
          }
          uint64_t v170 = v154 + v155[8];
          uint64_t v171 = type metadata accessor for Appointment(0);
          if (!__swift_getEnumTagSinglePayload(v170, 1, v171))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v172 = v170 + *(int *)(v171 + 108);
            if (!__swift_getEnumTagSinglePayload(v172, 1, v153)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v153 - 8) + 8))(v172, v153);
            }
            uint64_t v173 = v170 + *(int *)(v171 + 112);
            if (!__swift_getEnumTagSinglePayload(v173, 1, v153)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v153 - 8) + 8))(v173, v153);
            }
          }
          uint64_t v174 = v154 + v155[9];
          long long v175 = (int *)type metadata accessor for Party(0);
          if (!__swift_getEnumTagSinglePayload(v174, 1, (uint64_t)v175))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v176 = v174 + v175[24];
            if (!__swift_getEnumTagSinglePayload(v176, 1, v153)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v153 - 8) + 8))(v176, v153);
            }
            uint64_t v177 = v174 + v175[25];
            if (!__swift_getEnumTagSinglePayload(v177, 1, v153)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v153 - 8) + 8))(v177, v153);
            }
            uint64_t v178 = v174 + v175[26];
            uint64_t v179 = type metadata accessor for URL();
            if (!__swift_getEnumTagSinglePayload(v178, 1, v179)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v179 - 8) + 8))(v178, v179);
            }
          }
          uint64_t v180 = v154 + v155[10];
          uint64_t v181 = (int *)type metadata accessor for Trip(0);
          if (!__swift_getEnumTagSinglePayload(v180, 1, (uint64_t)v181))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v182 = v180 + v181[22];
            if (!__swift_getEnumTagSinglePayload(v182, 1, v153)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v153 - 8) + 8))(v182, v153);
            }
            uint64_t v183 = v180 + v181[23];
            if (!__swift_getEnumTagSinglePayload(v183, 1, v153)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v153 - 8) + 8))(v183, v153);
            }
            uint64_t v184 = v180 + v181[25];
            uint64_t v185 = type metadata accessor for URL();
            if (!__swift_getEnumTagSinglePayload(v184, 1, v185)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v185 - 8) + 8))(v184, v185);
            }
          }
          uint64_t v186 = v154 + v155[11];
          uint64_t v187 = (int *)type metadata accessor for FlightReservation(0);
          if (!__swift_getEnumTagSinglePayload(v186, 1, (uint64_t)v187))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v188 = v186 + v187[13];
            uint64_t v189 = type metadata accessor for URL();
            if (!__swift_getEnumTagSinglePayload(v188, 1, v189)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v189 - 8) + 8))(v188, v189);
            }
            uint64_t v287 = v154;
            uint64_t v190 = v186 + v187[14];
            if (!__swift_getEnumTagSinglePayload(v190, 1, v189)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v189 - 8) + 8))(v190, v189);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v191 = v186 + v187[18];
            uint64_t v192 = type metadata accessor for DateComponents();
            uint64_t v193 = *(void (**)(uint64_t, uint64_t))(*(void *)(v192 - 8) + 8);
            v193(v191, v192);
            v193(v186 + v187[19], v192);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v194 = v186 + v187[38];
            if (!__swift_getEnumTagSinglePayload(v194, 1, v153)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v153 - 8) + 8))(v194, v153);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v154 = v287;
            uint64_t v155 = v292;
          }
          uint64_t v195 = v154 + v155[12];
          uint64_t v196 = type metadata accessor for HotelReservation(0);
          if (!__swift_getEnumTagSinglePayload(v195, 1, v196))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v197 = v195 + *(int *)(v196 + 56);
            uint64_t v198 = type metadata accessor for DateComponents();
            if (!__swift_getEnumTagSinglePayload(v197, 1, v198)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v198 - 8) + 8))(v197, v198);
            }
            uint64_t v199 = v195 + *(int *)(v196 + 60);
            if (!__swift_getEnumTagSinglePayload(v199, 1, v198)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v198 - 8) + 8))(v199, v198);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v155 = v292;
          }
          uint64_t v200 = v154 + v155[13];
          uint64_t v201 = type metadata accessor for RestaurantReservation(0);
          if (!__swift_getEnumTagSinglePayload(v200, 1, v201))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v202 = v200 + *(int *)(v201 + 56);
            uint64_t v203 = type metadata accessor for DateComponents();
            if (!__swift_getEnumTagSinglePayload(v202, 1, v203)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v203 - 8) + 8))(v202, v203);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
        }
        uint64_t v204 = v4 + v151[18];
        uint64_t v205 = (int *)type metadata accessor for PreExtractedCard(0);
        if (!__swift_getEnumTagSinglePayload(v204, 1, (uint64_t)v205))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v206 = v204 + v205[10];
          if (!__swift_getEnumTagSinglePayload(v206, 1, v153)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v153 - 8) + 8))(v206, v153);
          }
          uint64_t v207 = v204 + v205[11];
          if (!__swift_getEnumTagSinglePayload(v207, 1, v153)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v153 - 8) + 8))(v207, v153);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v208 = v204 + v205[15];
          if (!__swift_getEnumTagSinglePayload(v208, 1, v153)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v153 - 8) + 8))(v208, v153);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v209 = v4 + v151[19];
        uint64_t v210 = type metadata accessor for PreExtractedContact(0);
        if (!__swift_getEnumTagSinglePayload(v209, 1, v210))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v211 = v209 + *(int *)(v210 + 44);
          if (!__swift_getEnumTagSinglePayload(v211, 1, v153)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v153 - 8) + 8))(v211, v153);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v212 = v209 + *(int *)(v210 + 56);
          if (!__swift_getEnumTagSinglePayload(v212, 1, v153)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v153 - 8) + 8))(v212, v153);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v213 = v4 + v151[20];
        uint64_t v214 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (!__swift_getEnumTagSinglePayload(v213, 1, (uint64_t)v214))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v215 = v213 + v214[8];
          uint64_t v216 = type metadata accessor for URL();
          if (!__swift_getEnumTagSinglePayload(v215, 1, v216)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v216 - 8) + 8))(v215, v216);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v217 = v213 + v214[12];
          if (!__swift_getEnumTagSinglePayload(v217, 1, v153)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v153 - 8) + 8))(v217, v153);
          }
          uint64_t v218 = v213 + v214[13];
          if (!__swift_getEnumTagSinglePayload(v218, 1, v153)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v153 - 8) + 8))(v218, v153);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v81 = v151[21];
LABEL_258:
        if (!*(void *)(v4 + v81 + 8)) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_340;
      case 4u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v219 = (int *)type metadata accessor for NoteDocument(0);
        uint64_t v220 = v4 + v219[8];
        uint64_t v221 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v220, 1, v221)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v221 - 8) + 8))(v220, v221);
        }
        goto LABEL_279;
      case 5u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v222 = (int *)type metadata accessor for Reminder(0);
        uint64_t v223 = v4 + v222[7];
        uint64_t v224 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v223, 1, v224)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v224 - 8) + 8))(v223, v224);
        }
        uint64_t v225 = v4 + v222[8];
        if (!__swift_getEnumTagSinglePayload(v225, 1, v224)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v224 - 8) + 8))(v225, v224);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v226 = v222[12];
        goto LABEL_329;
      case 6u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v227 = type metadata accessor for PhoneHistory(0);
        uint64_t v228 = v4 + *(int *)(v227 + 40);
        uint64_t v229 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v228, 1, v229)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v229 - 8) + 8))(v228, v229);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v226 = *(int *)(v227 + 52);
        goto LABEL_329;
      case 7u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v230 = (int *)type metadata accessor for VoicemailTranscript(0);
        uint64_t v231 = v230[7];
        goto LABEL_273;
      case 8u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v226 = *(int *)(type metadata accessor for JournalEntry(0) + 28);
        goto LABEL_329;
      case 9u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v230 = (int *)type metadata accessor for VoiceMemo(0);
        uint64_t v231 = v230[6];
LABEL_273:
        uint64_t v232 = v4 + v231;
        uint64_t v233 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v232, 1, v233)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v233 - 8) + 8))(v232, v233);
        }
        uint64_t v226 = v230[8];
        goto LABEL_329;
      case 0xAu:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v219 = (int *)type metadata accessor for Safari(0);
        uint64_t v234 = v4 + v219[6];
        uint64_t v221 = type metadata accessor for URL();
        if (!__swift_getEnumTagSinglePayload(v234, 1, v221)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v221 - 8) + 8))(v234, v221);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_279:
        uint64_t v235 = v219[9];
        goto LABEL_318;
      case 0xBu:
        swift_bridgeObjectRelease();

        break;
      case 0xCu:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v236 = v4 + *(int *)(type metadata accessor for WalletTransaction(0) + 28);
        uint64_t v237 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v236, 1, v237)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v237 - 8) + 8))(v236, v237);
        }
        goto LABEL_283;
      case 0xDu:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v238 = v4 + *(int *)(type metadata accessor for WalletPass(0) + 28);
        uint64_t v239 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v238, 1, v239)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v239 - 8) + 8))(v238, v239);
        }
        swift_bridgeObjectRelease();
        goto LABEL_340;
      case 0xEu:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_340;
      case 0xFu:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v240 = (int *)type metadata accessor for FlightReservation(0);
        uint64_t v241 = v4 + v240[13];
        uint64_t v242 = type metadata accessor for URL();
        if (!__swift_getEnumTagSinglePayload(v241, 1, v242)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v242 - 8) + 8))(v241, v242);
        }
        uint64_t v243 = v4 + v240[14];
        if (!__swift_getEnumTagSinglePayload(v243, 1, v242)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v242 - 8) + 8))(v243, v242);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v244 = v4 + v240[18];
        uint64_t v245 = type metadata accessor for DateComponents();
        uint64_t v246 = *(void (**)(uint64_t, uint64_t))(*(void *)(v245 - 8) + 8);
        v246(v244, v245);
        v246(v4 + v240[19], v245);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v247 = v4 + v240[38];
        uint64_t v248 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v247, 1, v248)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v248 - 8) + 8))(v247, v248);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v249 = &demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]);
        goto LABEL_337;
      case 0x10u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v250 = type metadata accessor for HotelReservation(0);
        uint64_t v251 = v4 + *(int *)(v250 + 56);
        uint64_t v252 = type metadata accessor for DateComponents();
        if (!__swift_getEnumTagSinglePayload(v251, 1, v252)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v252 - 8) + 8))(v251, v252);
        }
        uint64_t v253 = v4 + *(int *)(v250 + 60);
        if (!__swift_getEnumTagSinglePayload(v253, 1, v252)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v252 - 8) + 8))(v253, v252);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_340;
      case 0x11u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v254 = v4 + *(int *)(type metadata accessor for RestaurantReservation(0) + 56);
        uint64_t v255 = type metadata accessor for DateComponents();
        if (!__swift_getEnumTagSinglePayload(v254, 1, v255)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v255 - 8) + 8))(v254, v255);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_340;
      case 0x12u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v256 = type metadata accessor for RentalCarReservation(0);
        uint64_t v257 = v4 + *(int *)(v256 + 140);
        uint64_t v221 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v257, 1, v221)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v221 - 8) + 8))(v257, v221);
        }
        uint64_t v235 = *(int *)(v256 + 144);
        goto LABEL_318;
      case 0x13u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v258 = type metadata accessor for TicketedTransportation(0);
        uint64_t v259 = v4 + *(int *)(v258 + 112);
        uint64_t v221 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v259, 1, v221)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v221 - 8) + 8))(v259, v221);
        }
        uint64_t v235 = *(int *)(v258 + 116);
        goto LABEL_318;
      case 0x14u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v260 = (int *)type metadata accessor for TicketedShow(0);
        uint64_t v261 = v4 + v260[29];
        uint64_t v262 = type metadata accessor for URL();
        if (!__swift_getEnumTagSinglePayload(v261, 1, v262)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v262 - 8) + 8))(v261, v262);
        }
        swift_bridgeObjectRelease();
        uint64_t v263 = v4 + v260[31];
        uint64_t v264 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v263, 1, v264)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v264 - 8) + 8))(v263, v264);
        }
        uint64_t v265 = v4 + v260[32];
        if (!__swift_getEnumTagSinglePayload(v265, 1, v264)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v264 - 8) + 8))(v265, v264);
        }
        break;
      case 0x15u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v266 = type metadata accessor for Appointment(0);
        uint64_t v267 = v4 + *(int *)(v266 + 108);
        uint64_t v221 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v267, 1, v221)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v221 - 8) + 8))(v267, v221);
        }
        uint64_t v235 = *(int *)(v266 + 112);
LABEL_318:
        uint64_t v268 = v4 + v235;
        goto LABEL_330;
      case 0x16u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v269 = (int *)type metadata accessor for Party(0);
        uint64_t v270 = v4 + v269[24];
        uint64_t v271 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v270, 1, v271)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v271 - 8) + 8))(v270, v271);
        }
        uint64_t v272 = v4 + v269[25];
        if (!__swift_getEnumTagSinglePayload(v272, 1, v271)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v271 - 8) + 8))(v272, v271);
        }
        uint64_t v226 = v269[26];
        goto LABEL_329;
      case 0x17u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v273 = (int *)type metadata accessor for Trip(0);
        uint64_t v274 = v4 + v273[22];
        uint64_t v275 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v274, 1, v275)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v275 - 8) + 8))(v274, v275);
        }
        uint64_t v276 = v4 + v273[23];
        if (!__swift_getEnumTagSinglePayload(v276, 1, v275)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v275 - 8) + 8))(v276, v275);
        }
        uint64_t v226 = v273[25];
LABEL_329:
        uint64_t v268 = v4 + v226;
        uint64_t v221 = type metadata accessor for URL();
LABEL_330:
        if (!__swift_getEnumTagSinglePayload(v268, 1, v221)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v221 - 8) + 8))(v268, v221);
        }
        break;
      case 0x18u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v277 = type metadata accessor for GlobalItem();
        uint64_t v278 = v4 + *(int *)(v277 + 28);
        uint64_t v279 = type metadata accessor for GlobalDialog();
        if (!__swift_getEnumTagSinglePayload(v278, 1, v279)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v279 - 8) + 8))(v278, v279);
        }
        uint64_t v280 = (uint64_t *)(v4 + *(int *)(v277 + 32));
        unint64_t v281 = v280[1];
        if (v281 >> 60 != 15) {
          outlined consume of Data._Representation(*v280, v281);
        }
        uint64_t v249 = &demangling cache variable for type metadata for (GlobalItem, experiences: [DialogExperience]);
LABEL_337:
        __swift_instantiateConcreteTypeFromMangledName(v249);
        goto LABEL_340;
      case 0x19u:
LABEL_283:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_340;
      case 0x1Au:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v282 = v4 + *(int *)(type metadata accessor for Answer(0) + 36);
        uint64_t v283 = type metadata accessor for URL();
        if (!__swift_getEnumTagSinglePayload(v282, 1, v283)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v283 - 8) + 8))(v282, v283);
        }
LABEL_340:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ResolvedInfo(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for SearchResultItem(0);
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResultItem?);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v2700 = v8;
    uint64_t v2699 = v10;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v2681 = v4;
        uint64_t v2689 = v3;
        v2672 = v5;
        uint64_t v33 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v33;
        uint64_t v34 = v9[3];
        v8[2] = v9[2];
        v8[3] = v34;
        uint64_t v35 = v8;
        uint64_t v36 = v9[5];
        v35[4] = v9[4];
        v35[5] = v36;
        uint64_t v37 = v9[7];
        v35[6] = v9[6];
        v35[7] = v37;
        uint64_t v38 = v9[9];
        v35[8] = v9[8];
        v35[9] = v38;
        uint64_t v2660 = (int *)type metadata accessor for MobileSMSDocument(0);
        uint64_t v39 = v2660[10];
        uint64_t v40 = (char *)v35 + v39;
        uint64_t v41 = (char *)v9 + v39;
        uint64_t v42 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v41, 1, v42))
        {
          uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v40, v41, *(void *)(*(void *)(v43 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16))(v40, v41, v42);
          __swift_storeEnumTagSinglePayload((uint64_t)v40, 0, 1, v42);
        }
        uint64_t v357 = v2660[11];
        uint64_t v358 = (char *)v2700 + v357;
        uint64_t v359 = (char *)v9 + v357;
        uint64_t v360 = type metadata accessor for URL();
        uint64_t v2640 = v360;
        uint64_t v2654 = v42;
        if (__swift_getEnumTagSinglePayload((uint64_t)v359, 1, v360))
        {
          uint64_t v361 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v358, v359, *(void *)(*(void *)(v361 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v360 - 8) + 16))(v358, v359, v360);
          __swift_storeEnumTagSinglePayload((uint64_t)v358, 0, 1, v360);
        }
        *(void *)((char *)v2700 + v2660[12]) = *(void *)((char *)v9 + v2660[12]);
        uint64_t v507 = v2660[13];
        uint64_t v508 = (void *)((char *)v2700 + v507);
        uint64_t v509 = (void *)((char *)v9 + v507);
        uint64_t v510 = v509[1];
        *uint64_t v508 = *v509;
        v508[1] = v510;
        uint64_t v511 = v2660[14];
        uint64_t v512 = (void *)((char *)v2700 + v511);
        uint64_t v513 = (void *)((char *)v9 + v511);
        uint64_t v514 = v513[1];
        *uint64_t v512 = *v513;
        v512[1] = v514;
        *(void *)((char *)v2700 + v2660[15]) = *(void *)((char *)v9 + v2660[15]);
        *(void *)((char *)v2700 + v2660[16]) = *(void *)((char *)v9 + v2660[16]);
        uint64_t v515 = v2660[17];
        uint64_t v516 = (void *)((char *)v2700 + v515);
        uint64_t v517 = (char *)v9 + v515;
        uint64_t v518 = *(void *)((char *)v9 + v515);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v518)
        {
          uint64_t v519 = *((void *)v517 + 1);
          uint64_t v520 = *((void *)v517 + 2);
          *uint64_t v516 = v518;
          v516[1] = v519;
          uint64_t v521 = *((void *)v517 + 3);
          uint64_t v522 = *((void *)v517 + 4);
          v516[2] = v520;
          v516[3] = v521;
          v516[4] = v522;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v681 = *((_OWORD *)v517 + 1);
          *(_OWORD *)uint64_t v516 = *(_OWORD *)v517;
          *((_OWORD *)v516 + 1) = v681;
          v516[4] = *((void *)v517 + 4);
        }
        uint64_t v8 = v2700;
        uint64_t v682 = v2660[18];
        long long v683 = (void *)((char *)v2700 + v682);
        long long v684 = (void *)((char *)v9 + v682);
        uint64_t v685 = v684[1];
        *long long v683 = *v684;
        v683[1] = v685;
        uint64_t v686 = v2660[19];
        long long v687 = (void *)((char *)v2700 + v686);
        uint64_t v688 = (void *)((char *)v9 + v686);
        long long v689 = (int *)type metadata accessor for PartialExtractedAttributes(0);
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v688, 1, (uint64_t)v689))
        {
          uint64_t v690 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
          memcpy(v687, v688, *(void *)(*(void *)(v690 - 8) + 64));
        }
        else
        {
          uint64_t v727 = v688[1];
          *long long v687 = *v688;
          v687[1] = v727;
          uint64_t v728 = v689[5];
          uint64_t v729 = (void *)((char *)v687 + v728);
          uint64_t v730 = (void *)((char *)v688 + v728);
          uint64_t v731 = type metadata accessor for RentalCarReservation(0);
          swift_bridgeObjectRetain();
          v2613 = v689;
          uint64_t v2627 = v687;
          v2593 = v688;
          if (__swift_getEnumTagSinglePayload((uint64_t)v730, 1, v731))
          {
            uint64_t v732 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
            memcpy(v729, v730, *(void *)(*(void *)(v732 - 8) + 64));
          }
          else
          {
            uint64_t v789 = v730[1];
            void *v729 = *v730;
            v729[1] = v789;
            uint64_t v790 = v730[3];
            v729[2] = v730[2];
            v729[3] = v790;
            uint64_t v791 = v730[5];
            v729[4] = v730[4];
            v729[5] = v791;
            uint64_t v792 = v730[7];
            v729[6] = v730[6];
            v729[7] = v792;
            uint64_t v793 = v730[9];
            v729[8] = v730[8];
            v729[9] = v793;
            uint64_t v794 = v730[11];
            v729[10] = v730[10];
            v729[11] = v794;
            uint64_t v795 = v730[13];
            v729[12] = v730[12];
            v729[13] = v795;
            uint64_t v796 = v730[15];
            v729[14] = v730[14];
            v729[15] = v796;
            *((unsigned char *)v729 + 128) = *((unsigned char *)v730 + 128);
            *(_WORD *)((char *)v729 + 129) = *(_WORD *)((char *)v730 + 129);
            uint64_t v797 = v730[18];
            v729[17] = v730[17];
            v729[18] = v797;
            uint64_t v798 = v730[20];
            v729[19] = v730[19];
            v729[20] = v798;
            uint64_t v799 = v730[22];
            v729[21] = v730[21];
            v729[22] = v799;
            uint64_t v2493 = v730[24];
            v729[23] = v730[23];
            v729[24] = v2493;
            uint64_t v800 = v730[26];
            v729[25] = v730[25];
            v729[26] = v800;
            uint64_t v801 = v730[28];
            v729[27] = v730[27];
            v729[28] = v801;
            uint64_t v802 = v730[30];
            v729[29] = v730[29];
            v729[30] = v802;
            uint64_t v803 = v730[32];
            v729[31] = v730[31];
            v729[32] = v803;
            uint64_t v804 = v730[34];
            v729[33] = v730[33];
            v729[34] = v804;
            uint64_t v805 = v730[36];
            v729[35] = v730[35];
            v729[36] = v805;
            uint64_t v806 = v730[38];
            v729[37] = v730[37];
            v729[38] = v806;
            uint64_t v807 = v730[40];
            v729[39] = v730[39];
            v729[40] = v807;
            uint64_t v808 = v730[42];
            v729[41] = v730[41];
            v729[42] = v808;
            uint64_t v809 = v730[44];
            v729[43] = v730[43];
            v729[44] = v809;
            uint64_t v810 = v730[46];
            v729[45] = v730[45];
            v729[46] = v810;
            uint64_t v811 = v730[47];
            *((unsigned char *)v729 + 384) = *((unsigned char *)v730 + 384);
            v729[47] = v811;
            uint64_t v812 = v730[50];
            v729[49] = v730[49];
            v729[50] = v812;
            uint64_t v813 = v730[52];
            v729[51] = v730[51];
            v729[52] = v813;
            uint64_t v814 = *(int *)(v731 + 140);
            v2570 = (char *)v729 + v814;
            uint64_t v815 = (char *)v730 + v814;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v815, 1, v2654))
            {
              uint64_t v816 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2570, v815, *(void *)(*(void *)(v816 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2654 - 8) + 16))(v2570, v815, v2654);
              __swift_storeEnumTagSinglePayload((uint64_t)v2570, 0, 1, v2654);
            }
            uint64_t v825 = *(int *)(v731 + 144);
            uint64_t v826 = (char *)v729 + v825;
            uint64_t v827 = (char *)v730 + v825;
            uint64_t v8 = v2700;
            if (__swift_getEnumTagSinglePayload((uint64_t)v730 + v825, 1, v2654))
            {
              uint64_t v828 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v826, v827, *(void *)(*(void *)(v828 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2654 - 8) + 16))(v826, v827, v2654);
              __swift_storeEnumTagSinglePayload((uint64_t)v826, 0, 1, v2654);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v729, 0, 1, v731);
            long long v687 = v2627;
          }
          uint64_t v881 = v689[6];
          uint64_t v882 = (void *)((char *)v687 + v881);
          uint64_t v883 = (void *)((char *)v688 + v881);
          uint64_t v884 = type metadata accessor for TicketedTransportation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v883, 1, v884))
          {
            uint64_t v885 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
            memcpy(v882, v883, *(void *)(*(void *)(v885 - 8) + 64));
          }
          else
          {
            uint64_t v886 = v883[1];
            *uint64_t v882 = *v883;
            v882[1] = v886;
            uint64_t v887 = v883[3];
            v882[2] = v883[2];
            v882[3] = v887;
            uint64_t v888 = v883[5];
            v882[4] = v883[4];
            v882[5] = v888;
            uint64_t v889 = v883[7];
            v882[6] = v883[6];
            v882[7] = v889;
            uint64_t v890 = v883[9];
            v882[8] = v883[8];
            v882[9] = v890;
            uint64_t v891 = v883[11];
            v882[10] = v883[10];
            v882[11] = v891;
            uint64_t v892 = v883[13];
            v882[12] = v883[12];
            v882[13] = v892;
            uint64_t v893 = v883[15];
            v882[14] = v883[14];
            v882[15] = v893;
            *((unsigned char *)v882 + 128) = *((unsigned char *)v883 + 128);
            *(_WORD *)((char *)v882 + 129) = *(_WORD *)((char *)v883 + 129);
            uint64_t v894 = v883[18];
            v882[17] = v883[17];
            v882[18] = v894;
            uint64_t v895 = v883[20];
            v882[19] = v883[19];
            v882[20] = v895;
            uint64_t v896 = v883[22];
            v882[21] = v883[21];
            v882[22] = v896;
            uint64_t v897 = v883[24];
            v882[23] = v883[23];
            v882[24] = v897;
            v2551 = (void *)v883[26];
            v882[25] = v883[25];
            v882[26] = v2551;
            uint64_t v898 = v883[28];
            v882[27] = v883[27];
            v882[28] = v898;
            uint64_t v899 = v883[30];
            v882[29] = v883[29];
            v882[30] = v899;
            uint64_t v900 = v883[32];
            v882[31] = v883[31];
            v882[32] = v900;
            uint64_t v901 = v883[34];
            v882[33] = v883[33];
            v882[34] = v901;
            uint64_t v902 = v883[36];
            uint64_t v903 = v883[35];
            *((unsigned char *)v882 + 296) = *((unsigned char *)v883 + 296);
            v882[35] = v903;
            v882[36] = v902;
            uint64_t v904 = *(int *)(v884 + 112);
            v2572 = (char *)v882 + v904;
            uint64_t v905 = (char *)v883 + v904;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v905, 1, v2654))
            {
              uint64_t v906 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2572, v905, *(void *)(*(void *)(v906 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2654 - 8) + 16))(v2572, v905, v2654);
              __swift_storeEnumTagSinglePayload((uint64_t)v2572, 0, 1, v2654);
            }
            uint64_t v916 = v884;
            uint64_t v917 = *(int *)(v884 + 116);
            uint64_t v918 = (char *)v882 + v917;
            v919 = (char *)v883 + v917;
            uint64_t v8 = v2700;
            if (__swift_getEnumTagSinglePayload((uint64_t)v883 + v917, 1, v2654))
            {
              uint64_t v920 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v918, v919, *(void *)(*(void *)(v920 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2654 - 8) + 16))(v918, v919, v2654);
              __swift_storeEnumTagSinglePayload((uint64_t)v918, 0, 1, v2654);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v882, 0, 1, v916);
            long long v687 = v2627;
          }
          uint64_t v975 = v689[7];
          uint64_t v976 = (void *)((char *)v687 + v975);
          uint64_t v977 = (void *)((char *)v688 + v975);
          uint64_t v978 = type metadata accessor for TicketedShow(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v977, 1, v978))
          {
            uint64_t v979 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
            memcpy(v976, v977, *(void *)(*(void *)(v979 - 8) + 64));
          }
          else
          {
            uint64_t v980 = v977[1];
            *uint64_t v976 = *v977;
            v976[1] = v980;
            uint64_t v981 = v977[3];
            v976[2] = v977[2];
            v976[3] = v981;
            uint64_t v982 = v977[5];
            v976[4] = v977[4];
            v976[5] = v982;
            uint64_t v983 = v977[7];
            v976[6] = v977[6];
            v976[7] = v983;
            uint64_t v984 = v977[9];
            v976[8] = v977[8];
            v976[9] = v984;
            uint64_t v985 = v977[11];
            v976[10] = v977[10];
            v976[11] = v985;
            uint64_t v986 = v977[13];
            v976[12] = v977[12];
            v976[13] = v986;
            uint64_t v987 = v977[15];
            v976[14] = v977[14];
            v976[15] = v987;
            *((unsigned char *)v976 + 128) = *((unsigned char *)v977 + 128);
            *(_WORD *)((char *)v976 + 129) = *(_WORD *)((char *)v977 + 129);
            uint64_t v988 = v977[18];
            v976[17] = v977[17];
            v976[18] = v988;
            uint64_t v989 = v977[20];
            v976[19] = v977[19];
            v976[20] = v989;
            uint64_t v990 = v977[22];
            v976[21] = v977[21];
            v976[22] = v990;
            uint64_t v991 = v977[24];
            v976[23] = v977[23];
            v976[24] = v991;
            uint64_t v992 = v977[26];
            v976[25] = v977[25];
            v976[26] = v992;
            uint64_t v993 = v977[28];
            v976[27] = v977[27];
            v976[28] = v993;
            uint64_t v994 = v977[30];
            v976[29] = v977[29];
            v976[30] = v994;
            uint64_t v995 = v977[32];
            v976[31] = v977[31];
            v976[32] = v995;
            uint64_t v996 = v977[34];
            v976[33] = v977[33];
            v976[34] = v996;
            uint64_t v998 = v977[35];
            uint64_t v997 = v977[36];
            *((unsigned char *)v976 + 296) = *((unsigned char *)v977 + 296);
            v976[35] = v998;
            v976[36] = v997;
            uint64_t v999 = v977[39];
            v976[38] = v977[38];
            v976[39] = v999;
            uint64_t v1000 = *(int *)(v978 + 116);
            v2553 = (char *)v976 + v1000;
            v2574 = (int *)v978;
            uint64_t v1001 = (char *)v977 + v1000;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1001, 1, v2640))
            {
              uint64_t v1002 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v2553, v1001, *(void *)(*(void *)(v1002 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2640 - 8) + 16))(v2553, v1001, v2640);
              __swift_storeEnumTagSinglePayload((uint64_t)v2553, 0, 1, v2640);
            }
            uint64_t v1019 = v2574[30];
            uint64_t v1020 = (void *)((char *)v976 + v1019);
            uint64_t v1021 = (void *)((char *)v977 + v1019);
            uint64_t v1022 = v1021[1];
            void *v1020 = *v1021;
            v1020[1] = v1022;
            uint64_t v1023 = v2574[31];
            uint64_t v1024 = (char *)v976 + v1023;
            uint64_t v1025 = (char *)v977 + v1023;
            swift_bridgeObjectRetain();
            uint64_t v8 = v2700;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1025, 1, v2654))
            {
              uint64_t v1026 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1024, v1025, *(void *)(*(void *)(v1026 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2654 - 8) + 16))(v1024, v1025, v2654);
              __swift_storeEnumTagSinglePayload((uint64_t)v1024, 0, 1, v2654);
            }
            uint64_t v1035 = v2574[32];
            uint64_t v1036 = (char *)v976 + v1035;
            uint64_t v1037 = (char *)v977 + v1035;
            if (__swift_getEnumTagSinglePayload((uint64_t)v977 + v1035, 1, v2654))
            {
              uint64_t v1038 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1036, v1037, *(void *)(*(void *)(v1038 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2654 - 8) + 16))(v1036, v1037, v2654);
              __swift_storeEnumTagSinglePayload((uint64_t)v1036, 0, 1, v2654);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v976, 0, 1, (uint64_t)v2574);
            long long v687 = v2627;
          }
          uint64_t v1093 = v689[8];
          uint64_t v1094 = (void *)((char *)v687 + v1093);
          uint64_t v1095 = (void *)((char *)v688 + v1093);
          uint64_t v1096 = type metadata accessor for Appointment(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1095, 1, v1096))
          {
            uint64_t v1097 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
            memcpy(v1094, v1095, *(void *)(*(void *)(v1097 - 8) + 64));
          }
          else
          {
            uint64_t v1098 = v1095[1];
            *uint64_t v1094 = *v1095;
            v1094[1] = v1098;
            uint64_t v1099 = v1095[3];
            v1094[2] = v1095[2];
            v1094[3] = v1099;
            uint64_t v1100 = v1095[5];
            v1094[4] = v1095[4];
            v1094[5] = v1100;
            uint64_t v1101 = v1095[7];
            v1094[6] = v1095[6];
            v1094[7] = v1101;
            uint64_t v1102 = v1095[9];
            v1094[8] = v1095[8];
            v1094[9] = v1102;
            uint64_t v1103 = v1095[11];
            v1094[10] = v1095[10];
            v1094[11] = v1103;
            uint64_t v1104 = v1095[13];
            v1094[12] = v1095[12];
            v1094[13] = v1104;
            uint64_t v1105 = v1095[15];
            v1094[14] = v1095[14];
            v1094[15] = v1105;
            *((unsigned char *)v1094 + 128) = *((unsigned char *)v1095 + 128);
            *(_WORD *)((char *)v1094 + 129) = *(_WORD *)((char *)v1095 + 129);
            uint64_t v1106 = v1095[18];
            v1094[17] = v1095[17];
            v1094[18] = v1106;
            uint64_t v1107 = v1095[20];
            v1094[19] = v1095[19];
            v1094[20] = v1107;
            uint64_t v1108 = v1095[22];
            v1094[21] = v1095[21];
            v1094[22] = v1108;
            uint64_t v1109 = v1095[24];
            v1094[23] = v1095[23];
            v1094[24] = v1109;
            uint64_t v1110 = v1095[26];
            v1094[25] = v1095[25];
            v1094[26] = v1110;
            uint64_t v1111 = v1095[28];
            v1094[27] = v1095[27];
            v1094[28] = v1111;
            uint64_t v1112 = v1095[30];
            v1094[29] = v1095[29];
            v1094[30] = v1112;
            uint64_t v1113 = v1095[32];
            v1094[31] = v1095[31];
            v1094[32] = v1113;
            uint64_t v1114 = v1095[34];
            uint64_t v1115 = v1095[33];
            *((unsigned char *)v1094 + 280) = *((unsigned char *)v1095 + 280);
            v1094[33] = v1115;
            v1094[34] = v1114;
            uint64_t v1116 = v1095[37];
            v1094[36] = v1095[36];
            v1094[37] = v1116;
            uint64_t v1117 = *(int *)(v1096 + 108);
            v2576 = (char *)v1094 + v1117;
            uint64_t v1118 = (char *)v1095 + v1117;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1118, 1, v2654))
            {
              uint64_t v1119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2576, v1118, *(void *)(*(void *)(v1119 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2654 - 8) + 16))(v2576, v1118, v2654);
              __swift_storeEnumTagSinglePayload((uint64_t)v2576, 0, 1, v2654);
            }
            uint64_t v1129 = v1096;
            uint64_t v1130 = *(int *)(v1096 + 112);
            uint64_t v1131 = (char *)v1094 + v1130;
            uint64_t v1132 = (char *)v1095 + v1130;
            uint64_t v8 = v2700;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1095 + v1130, 1, v2654))
            {
              uint64_t v1133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1131, v1132, *(void *)(*(void *)(v1133 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2654 - 8) + 16))(v1131, v1132, v2654);
              __swift_storeEnumTagSinglePayload((uint64_t)v1131, 0, 1, v2654);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v1094, 0, 1, v1129);
            long long v687 = v2627;
          }
          uint64_t v1180 = v689[9];
          uint64_t v1181 = (void *)((char *)v687 + v1180);
          uint64_t v1182 = (void *)((char *)v688 + v1180);
          uint64_t v1183 = type metadata accessor for Party(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1182, 1, v1183))
          {
            uint64_t v1184 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
            memcpy(v1181, v1182, *(void *)(*(void *)(v1184 - 8) + 64));
          }
          else
          {
            uint64_t v1185 = v1182[1];
            *uint64_t v1181 = *v1182;
            v1181[1] = v1185;
            uint64_t v1186 = v1182[3];
            v1181[2] = v1182[2];
            v1181[3] = v1186;
            uint64_t v1187 = v1182[5];
            v1181[4] = v1182[4];
            v1181[5] = v1187;
            uint64_t v1188 = v1182[7];
            v1181[6] = v1182[6];
            v1181[7] = v1188;
            uint64_t v1189 = v1182[9];
            v1181[8] = v1182[8];
            v1181[9] = v1189;
            uint64_t v1190 = v1182[11];
            v1181[10] = v1182[10];
            v1181[11] = v1190;
            uint64_t v1191 = v1182[13];
            v1181[12] = v1182[12];
            v1181[13] = v1191;
            uint64_t v1192 = v1182[15];
            v1181[14] = v1182[14];
            v1181[15] = v1192;
            *((unsigned char *)v1181 + 128) = *((unsigned char *)v1182 + 128);
            *(_WORD *)((char *)v1181 + 129) = *(_WORD *)((char *)v1182 + 129);
            uint64_t v1193 = v1182[18];
            v1181[17] = v1182[17];
            v1181[18] = v1193;
            uint64_t v1194 = v1182[20];
            v1181[19] = v1182[19];
            v1181[20] = v1194;
            uint64_t v1195 = v1182[22];
            v1181[21] = v1182[21];
            v1181[22] = v1195;
            uint64_t v1196 = v1182[24];
            v1181[23] = v1182[23];
            v1181[24] = v1196;
            uint64_t v1197 = v1182[26];
            v1181[25] = v1182[25];
            v1181[26] = v1197;
            uint64_t v1198 = v1182[28];
            v1181[27] = v1182[27];
            v1181[28] = v1198;
            uint64_t v1199 = v1182[30];
            v1181[29] = v1182[29];
            v1181[30] = v1199;
            v1181[31] = v1182[31];
            uint64_t v1200 = *(int *)(v1183 + 96);
            v2556 = (char *)v1181 + v1200;
            v2578 = (int *)v1183;
            uint64_t v1201 = (char *)v1182 + v1200;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1201, 1, v2654))
            {
              uint64_t v1202 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2556, v1201, *(void *)(*(void *)(v1202 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2654 - 8) + 16))(v2556, v1201, v2654);
              __swift_storeEnumTagSinglePayload((uint64_t)v2556, 0, 1, v2654);
            }
            uint64_t v1211 = v2578[25];
            uint64_t v1212 = (char *)v1181 + v1211;
            uint64_t v1213 = (char *)v1182 + v1211;
            uint64_t v8 = v2700;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1182 + v1211, 1, v2654))
            {
              uint64_t v1214 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1212, v1213, *(void *)(*(void *)(v1214 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2654 - 8) + 16))(v1212, v1213, v2654);
              __swift_storeEnumTagSinglePayload((uint64_t)v1212, 0, 1, v2654);
            }
            uint64_t v1225 = v2578[26];
            v1226 = (char *)v1181 + v1225;
            v1227 = (char *)v1182 + v1225;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1182 + v1225, 1, v2640))
            {
              uint64_t v1228 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1226, v1227, *(void *)(*(void *)(v1228 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2640 - 8) + 16))(v1226, v1227, v2640);
              __swift_storeEnumTagSinglePayload((uint64_t)v1226, 0, 1, v2640);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v1181, 0, 1, (uint64_t)v2578);
            long long v687 = v2627;
          }
          uint64_t v1271 = v689[10];
          uint64_t v1272 = (void *)((char *)v687 + v1271);
          uint64_t v1273 = (void *)((char *)v688 + v1271);
          uint64_t v1274 = type metadata accessor for Trip(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1273, 1, v1274))
          {
            uint64_t v1275 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
            memcpy(v1272, v1273, *(void *)(*(void *)(v1275 - 8) + 64));
          }
          else
          {
            uint64_t v1276 = v1273[1];
            *uint64_t v1272 = *v1273;
            v1272[1] = v1276;
            uint64_t v1277 = v1273[3];
            v1272[2] = v1273[2];
            v1272[3] = v1277;
            uint64_t v1278 = v1273[5];
            v1272[4] = v1273[4];
            v1272[5] = v1278;
            uint64_t v1279 = v1273[7];
            v1272[6] = v1273[6];
            v1272[7] = v1279;
            uint64_t v1280 = v1273[9];
            v1272[8] = v1273[8];
            v1272[9] = v1280;
            uint64_t v1281 = v1273[11];
            v1272[10] = v1273[10];
            v1272[11] = v1281;
            uint64_t v1282 = v1273[13];
            v1272[12] = v1273[12];
            v1272[13] = v1282;
            uint64_t v1283 = v1273[15];
            v1272[14] = v1273[14];
            v1272[15] = v1283;
            *((unsigned char *)v1272 + 128) = *((unsigned char *)v1273 + 128);
            *(_WORD *)((char *)v1272 + 129) = *(_WORD *)((char *)v1273 + 129);
            uint64_t v1284 = v1273[18];
            v1272[17] = v1273[17];
            v1272[18] = v1284;
            uint64_t v1285 = v1273[20];
            v1272[19] = v1273[19];
            v1272[20] = v1285;
            uint64_t v1286 = v1273[22];
            v1272[21] = v1273[21];
            v1272[22] = v1286;
            uint64_t v1287 = v1273[24];
            v1272[23] = v1273[23];
            v1272[24] = v1287;
            uint64_t v1288 = v1273[26];
            v1272[25] = v1273[25];
            v1272[26] = v1288;
            v1272[27] = v1273[27];
            v2580 = (int *)v1274;
            uint64_t v1289 = *(int *)(v1274 + 88);
            v2558 = (char *)v1272 + v1289;
            uint64_t v1290 = (char *)v1273 + v1289;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1290, 1, v2654))
            {
              uint64_t v1291 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2558, v1290, *(void *)(*(void *)(v1291 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2654 - 8) + 16))(v2558, v1290, v2654);
              __swift_storeEnumTagSinglePayload((uint64_t)v2558, 0, 1, v2654);
            }
            uint64_t v1300 = *(int *)(v1274 + 92);
            uint64_t v1301 = (char *)v1272 + v1300;
            uint64_t v1302 = (char *)v1273 + v1300;
            uint64_t v8 = v2700;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1273 + v1300, 1, v2654))
            {
              uint64_t v1303 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1301, v1302, *(void *)(*(void *)(v1303 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2654 - 8) + 16))(v1301, v1302, v2654);
              __swift_storeEnumTagSinglePayload((uint64_t)v1301, 0, 1, v2654);
            }
            uint64_t v1320 = v2580[24];
            v1321 = (char *)v1272 + v1320;
            v1322 = (char *)v1273 + v1320;
            *(void *)v1321 = *(void *)v1322;
            v1321[8] = v1322[8];
            uint64_t v1323 = v2580[25];
            uint64_t v1324 = (char *)v1272 + v1323;
            uint64_t v1325 = (char *)v1273 + v1323;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1273 + v1323, 1, v2640))
            {
              uint64_t v1326 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1324, v1325, *(void *)(*(void *)(v1326 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2640 - 8) + 16))(v1324, v1325, v2640);
              __swift_storeEnumTagSinglePayload((uint64_t)v1324, 0, 1, v2640);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v1272, 0, 1, (uint64_t)v2580);
            long long v687 = v2627;
          }
          uint64_t v1359 = v689[11];
          uint64_t v1360 = (void *)((char *)v687 + v1359);
          uint64_t v1361 = (void *)((char *)v688 + v1359);
          uint64_t v1362 = (int *)type metadata accessor for FlightReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1361, 1, (uint64_t)v1362))
          {
            uint64_t v1363 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
            memcpy(v1360, v1361, *(void *)(*(void *)(v1363 - 8) + 64));
          }
          else
          {
            uint64_t v1364 = v1361[1];
            *uint64_t v1360 = *v1361;
            v1360[1] = v1364;
            uint64_t v1365 = v1361[3];
            v1360[2] = v1361[2];
            v1360[3] = v1365;
            uint64_t v1366 = v1361[5];
            v1360[4] = v1361[4];
            v1360[5] = v1366;
            uint64_t v1367 = v1361[7];
            v1360[6] = v1361[6];
            v1360[7] = v1367;
            uint64_t v1368 = v1361[9];
            v1360[8] = v1361[8];
            v1360[9] = v1368;
            uint64_t v1369 = v1361[11];
            v1360[10] = v1361[10];
            v1360[11] = v1369;
            *((unsigned char *)v1360 + 96) = *((unsigned char *)v1361 + 96);
            uint64_t v1370 = v1361[14];
            v1360[13] = v1361[13];
            v1360[14] = v1370;
            uint64_t v1371 = v1362[13];
            v2581 = (char *)v1360 + v1371;
            v1372 = (char *)v1361 + v1371;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1372, 1, v2640))
            {
              uint64_t v1373 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v2581, v1372, *(void *)(*(void *)(v1373 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2640 - 8) + 16))(v2581, v1372, v2640);
              __swift_storeEnumTagSinglePayload((uint64_t)v2581, 0, 1, v2640);
            }
            uint64_t v1382 = v1362[14];
            uint64_t v1383 = (char *)v1360 + v1382;
            v1384 = (char *)v1361 + v1382;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1361 + v1382, 1, v2640))
            {
              uint64_t v1385 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1383, v1384, *(void *)(*(void *)(v1385 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2640 - 8) + 16))(v1383, v1384, v2640);
              __swift_storeEnumTagSinglePayload((uint64_t)v1383, 0, 1, v2640);
            }
            uint64_t v1530 = v1362[15];
            v1531 = (void *)((char *)v1360 + v1530);
            uint64_t v1532 = (void *)((char *)v1361 + v1530);
            uint64_t v1533 = v1532[1];
            void *v1531 = *v1532;
            v1531[1] = v1533;
            uint64_t v1534 = v1362[16];
            v1535 = (void *)((char *)v1360 + v1534);
            uint64_t v1536 = (void *)((char *)v1361 + v1534);
            uint64_t v1537 = v1536[1];
            void *v1535 = *v1536;
            v1535[1] = v1537;
            uint64_t v1538 = v1362[17];
            uint64_t v1539 = (void *)((char *)v1360 + v1538);
            uint64_t v1540 = (void *)((char *)v1361 + v1538);
            uint64_t v1541 = v1540[1];
            *uint64_t v1539 = *v1540;
            v1539[1] = v1541;
            uint64_t v1542 = v1362[18];
            uint64_t v2563 = (char *)v1361 + v1542;
            v2584 = (char *)v1360 + v1542;
            uint64_t v1543 = type metadata accessor for DateComponents();
            uint64_t v1544 = *(void (**)(char *, char *, uint64_t))(*(void *)(v1543 - 8) + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1544(v2584, v2563, v1543);
            v1544((char *)v1360 + v1362[19], (char *)v1361 + v1362[19], v1543);
            uint64_t v1545 = v1362[20];
            v1546 = (void *)((char *)v1360 + v1545);
            uint64_t v1547 = (void *)((char *)v1361 + v1545);
            uint64_t v1548 = v1547[1];
            void *v1546 = *v1547;
            v1546[1] = v1548;
            uint64_t v1549 = v1362[21];
            v1550 = (void *)((char *)v1360 + v1549);
            uint64_t v1551 = (void *)((char *)v1361 + v1549);
            uint64_t v1552 = v1551[1];
            void *v1550 = *v1551;
            v1550[1] = v1552;
            uint64_t v1553 = v1362[22];
            v1554 = (void *)((char *)v1360 + v1553);
            uint64_t v1555 = (void *)((char *)v1361 + v1553);
            v2585 = (void *)v1555[1];
            void *v1554 = *v1555;
            v1554[1] = v2585;
            uint64_t v1556 = v1362[23];
            v1557 = (void *)((char *)v1360 + v1556);
            uint64_t v1558 = (void *)((char *)v1361 + v1556);
            uint64_t v2564 = (void *)v1558[1];
            void *v1557 = *v1558;
            v1557[1] = v2564;
            uint64_t v1559 = v1362[24];
            v1560 = (void *)((char *)v1360 + v1559);
            v1561 = (void *)((char *)v1361 + v1559);
            v2545 = (void *)v1561[1];
            void *v1560 = *v1561;
            v1560[1] = v2545;
            uint64_t v1562 = v1362[25];
            uint64_t v1563 = (void *)((char *)v1360 + v1562);
            v1564 = (void *)((char *)v1361 + v1562);
            uint64_t v2528 = v1564[1];
            *uint64_t v1563 = *v1564;
            v1563[1] = v2528;
            uint64_t v1565 = v1362[26];
            uint64_t v1566 = (void *)((char *)v1360 + v1565);
            v1567 = (void *)((char *)v1361 + v1565);
            uint64_t v2522 = v1567[1];
            *uint64_t v1566 = *v1567;
            v1566[1] = v2522;
            uint64_t v1568 = v1362[27];
            uint64_t v1569 = (void *)((char *)v1360 + v1568);
            uint64_t v1570 = (void *)((char *)v1361 + v1568);
            uint64_t v2516 = v1570[1];
            *uint64_t v1569 = *v1570;
            v1569[1] = v2516;
            uint64_t v1571 = v1362[28];
            v1572 = (void *)((char *)v1360 + v1571);
            uint64_t v1573 = (void *)((char *)v1361 + v1571);
            v2512 = (void *)v1573[1];
            void *v1572 = *v1573;
            v1572[1] = v2512;
            uint64_t v1574 = v1362[29];
            v1575 = (void *)((char *)v1360 + v1574);
            uint64_t v1576 = (void *)((char *)v1361 + v1574);
            uint64_t v2507 = v1576[1];
            void *v1575 = *v1576;
            v1575[1] = v2507;
            uint64_t v1577 = v1362[30];
            v1578 = (void *)((char *)v1360 + v1577);
            uint64_t v1579 = (void *)((char *)v1361 + v1577);
            uint64_t v2503 = v1579[1];
            void *v1578 = *v1579;
            v1578[1] = v2503;
            uint64_t v1580 = v1362[31];
            v1581 = (void *)((char *)v1360 + v1580);
            uint64_t v1582 = (void *)((char *)v1361 + v1580);
            uint64_t v2500 = v1582[1];
            void *v1581 = *v1582;
            v1581[1] = v2500;
            uint64_t v1583 = v1362[32];
            v1584 = (void *)((char *)v1360 + v1583);
            uint64_t v1585 = (void *)((char *)v1361 + v1583);
            uint64_t v1586 = v1585[1];
            void *v1584 = *v1585;
            v1584[1] = v1586;
            *(void *)((char *)v1360 + v1362[33]) = *(void *)((char *)v1361 + v1362[33]);
            *(void *)((char *)v1360 + v1362[34]) = *(void *)((char *)v1361 + v1362[34]);
            uint64_t v1587 = v1362[35];
            uint64_t v1588 = (void *)((char *)v1360 + v1587);
            v1589 = (void *)((char *)v1361 + v1587);
            uint64_t v1590 = v1589[1];
            *uint64_t v1588 = *v1589;
            v1588[1] = v1590;
            uint64_t v1591 = v1362[36];
            v1592 = (void *)((char *)v1360 + v1591);
            v1593 = (void *)((char *)v1361 + v1591);
            uint64_t v1594 = v1593[1];
            void *v1592 = *v1593;
            v1592[1] = v1594;
            uint64_t v1595 = v1362[37];
            v1596 = (void *)((char *)v1360 + v1595);
            uint64_t v1597 = (void *)((char *)v1361 + v1595);
            uint64_t v1598 = v1597[1];
            void *v1596 = *v1597;
            v1596[1] = v1598;
            uint64_t v1599 = v1362[38];
            __dsta = (char *)v1360 + v1599;
            uint64_t v1600 = (char *)v1361 + v1599;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1600, 1, v2654))
            {
              uint64_t v1601 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__dsta, v1600, *(void *)(*(void *)(v1601 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2654 - 8) + 16))(__dsta, v1600, v2654);
              __swift_storeEnumTagSinglePayload((uint64_t)__dsta, 0, 1, v2654);
            }
            uint64_t v1702 = v1362[39];
            uint64_t v1703 = (void *)((char *)v1360 + v1702);
            uint64_t v1704 = (void *)((char *)v1361 + v1702);
            uint64_t v1705 = v1704[1];
            *uint64_t v1703 = *v1704;
            v1703[1] = v1705;
            uint64_t v1706 = v1362[40];
            uint64_t v1707 = (void *)((char *)v1360 + v1706);
            uint64_t v1708 = (void *)((char *)v1361 + v1706);
            uint64_t v1709 = v1708[1];
            *uint64_t v1707 = *v1708;
            v1707[1] = v1709;
            uint64_t v1710 = v1362[41];
            uint64_t v1711 = (char *)v1360 + v1710;
            uint64_t v1712 = (char *)v1361 + v1710;
            v1711[8] = v1712[8];
            *(void *)uint64_t v1711 = *(void *)v1712;
            uint64_t v1713 = v1362[42];
            v1714 = (void *)((char *)v1360 + v1713);
            uint64_t v1715 = (void *)((char *)v1361 + v1713);
            uint64_t v1716 = v1715[1];
            void *v1714 = *v1715;
            v1714[1] = v1716;
            uint64_t v1717 = v1362[43];
            v1718 = (char *)v1360 + v1717;
            uint64_t v1719 = (char *)v1361 + v1717;
            *(_OWORD *)v1718 = *(_OWORD *)v1719;
            *(void *)(v1718 + 13) = *(void *)(v1719 + 13);
            uint64_t v1720 = v1362[44];
            v1721 = (void *)((char *)v1360 + v1720);
            v1722 = (void *)((char *)v1361 + v1720);
            uint64_t v1723 = v1722[1];
            void *v1721 = *v1722;
            v1721[1] = v1723;
            uint64_t v1724 = v1362[45];
            v1725 = (void *)((char *)v1360 + v1724);
            uint64_t v1726 = (void *)((char *)v1361 + v1724);
            uint64_t v1727 = v1726[1];
            void *v1725 = *v1726;
            v1725[1] = v1727;
            uint64_t v1728 = v1362[46];
            v1729 = (void *)((char *)v1360 + v1728);
            uint64_t v1730 = (void *)((char *)v1361 + v1728);
            uint64_t v1731 = v1730[1];
            void *v1729 = *v1730;
            v1729[1] = v1731;
            uint64_t v1732 = v1362[47];
            uint64_t v1733 = (void *)((char *)v1360 + v1732);
            uint64_t v1734 = (void *)((char *)v1361 + v1732);
            uint64_t v1735 = v1734[1];
            *uint64_t v1733 = *v1734;
            v1733[1] = v1735;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1360, 0, 1, (uint64_t)v1362);
            uint64_t v8 = v2700;
            long long v689 = v2613;
            long long v687 = v2627;
            uint64_t v688 = v2593;
          }
          uint64_t v1736 = v689[12];
          uint64_t v1737 = (void *)((char *)v687 + v1736);
          uint64_t v1738 = (void *)((char *)v688 + v1736);
          v1739 = (int *)type metadata accessor for HotelReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1738, 1, (uint64_t)v1739))
          {
            uint64_t v1740 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
            memcpy(v1737, v1738, *(void *)(*(void *)(v1740 - 8) + 64));
          }
          else
          {
            uint64_t v1741 = v1738[1];
            *uint64_t v1737 = *v1738;
            v1737[1] = v1741;
            uint64_t v1742 = v1738[3];
            v1737[2] = v1738[2];
            v1737[3] = v1742;
            uint64_t v1743 = v1738[5];
            v1737[4] = v1738[4];
            v1737[5] = v1743;
            uint64_t v1744 = v1738[7];
            v1737[6] = v1738[6];
            v1737[7] = v1744;
            uint64_t v1745 = v1738[9];
            v1737[8] = v1738[8];
            v1737[9] = v1745;
            uint64_t v1746 = v1738[11];
            v1737[10] = v1738[10];
            v1737[11] = v1746;
            *((unsigned char *)v1737 + 96) = *((unsigned char *)v1738 + 96);
            uint64_t v1747 = v1738[14];
            v1737[13] = v1738[13];
            v1737[14] = v1747;
            uint64_t v1748 = v1738[16];
            v1737[15] = v1738[15];
            v1737[16] = v1748;
            uint64_t v1749 = v1739[14];
            v2586 = (char *)v1737 + v1749;
            uint64_t v2523 = (char *)v1738 + v1749;
            uint64_t v1750 = type metadata accessor for DateComponents();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2523, 1, v1750))
            {
              uint64_t v1751 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v2586, v2523, *(void *)(*(void *)(v1751 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1750 - 8) + 16))(v2586, v2523, v1750);
              __swift_storeEnumTagSinglePayload((uint64_t)v2586, 0, 1, v1750);
            }
            uint64_t v1760 = v1739[15];
            uint64_t v1761 = (char *)v1737 + v1760;
            uint64_t v1762 = (char *)v1738 + v1760;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1738 + v1760, 1, v1750))
            {
              uint64_t v1763 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1761, v1762, *(void *)(*(void *)(v1763 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1750 - 8) + 16))(v1761, v1762, v1750);
              __swift_storeEnumTagSinglePayload((uint64_t)v1761, 0, 1, v1750);
            }
            uint64_t v1882 = v1739[16];
            uint64_t v1883 = (void *)((char *)v1737 + v1882);
            uint64_t v1884 = (void *)((char *)v1738 + v1882);
            uint64_t v1885 = v1884[1];
            *uint64_t v1883 = *v1884;
            v1883[1] = v1885;
            uint64_t v1886 = v1739[17];
            uint64_t v1887 = (void *)((char *)v1737 + v1886);
            v1888 = (void *)((char *)v1738 + v1886);
            uint64_t v1889 = v1888[1];
            *uint64_t v1887 = *v1888;
            v1887[1] = v1889;
            uint64_t v1890 = v1739[18];
            uint64_t v1891 = (void *)((char *)v1737 + v1890);
            v1892 = (void *)((char *)v1738 + v1890);
            v2589 = (void *)v1892[1];
            *uint64_t v1891 = *v1892;
            v1891[1] = v2589;
            uint64_t v1893 = v1739[19];
            uint64_t v1894 = (void *)((char *)v1737 + v1893);
            uint64_t v1895 = (void *)((char *)v1738 + v1893);
            v2567 = (void *)v1895[1];
            *uint64_t v1894 = *v1895;
            v1894[1] = v2567;
            uint64_t v1896 = v1739[20];
            v1897 = (void *)((char *)v1737 + v1896);
            uint64_t v1898 = (void *)((char *)v1738 + v1896);
            uint64_t v1899 = v1898[1];
            void *v1897 = *v1898;
            v1897[1] = v1899;
            *(void *)((char *)v1737 + v1739[21]) = *(void *)((char *)v1738 + v1739[21]);
            *(void *)((char *)v1737 + v1739[22]) = *(void *)((char *)v1738 + v1739[22]);
            uint64_t v1900 = v1739[23];
            v1901 = (char *)v1737 + v1900;
            uint64_t v1902 = (char *)v1738 + v1900;
            *(void *)v1901 = *(void *)v1902;
            v1901[8] = v1902[8];
            uint64_t v1903 = v1739[24];
            v1904 = (char *)v1737 + v1903;
            uint64_t v1905 = (char *)v1738 + v1903;
            *(void *)v1904 = *(void *)v1905;
            v1904[8] = v1905[8];
            uint64_t v1906 = v1739[25];
            v1907 = (void *)((char *)v1737 + v1906);
            uint64_t v1908 = (void *)((char *)v1738 + v1906);
            uint64_t v1909 = v1908[1];
            void *v1907 = *v1908;
            v1907[1] = v1909;
            uint64_t v1910 = v1739[26];
            v1911 = (void *)((char *)v1737 + v1910);
            uint64_t v1912 = (void *)((char *)v1738 + v1910);
            uint64_t v1913 = v1912[1];
            void *v1911 = *v1912;
            v1911[1] = v1913;
            uint64_t v1914 = v1739[27];
            uint64_t v1915 = (void *)((char *)v1737 + v1914);
            v1916 = (void *)((char *)v1738 + v1914);
            uint64_t v1917 = v1916[1];
            *uint64_t v1915 = *v1916;
            v1915[1] = v1917;
            uint64_t v1918 = v1739[28];
            uint64_t v1919 = (void *)((char *)v1737 + v1918);
            v1920 = (void *)((char *)v1738 + v1918);
            uint64_t v1921 = v1920[1];
            *uint64_t v1919 = *v1920;
            v1919[1] = v1921;
            uint64_t v1922 = v1739[29];
            uint64_t v1923 = (char *)v1737 + v1922;
            v1924 = (char *)v1738 + v1922;
            *(void *)uint64_t v1923 = *(void *)v1924;
            v1923[8] = v1924[8];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1737, 0, 1, (uint64_t)v1739);
            uint64_t v8 = v2700;
            long long v689 = v2613;
            long long v687 = v2627;
            uint64_t v688 = v2593;
          }
          uint64_t v1925 = v689[13];
          uint64_t v1926 = (void *)((char *)v687 + v1925);
          uint64_t v1927 = (void *)((char *)v688 + v1925);
          v1928 = (int *)type metadata accessor for RestaurantReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1927, 1, (uint64_t)v1928))
          {
            uint64_t v1929 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
            memcpy(v1926, v1927, *(void *)(*(void *)(v1929 - 8) + 64));
          }
          else
          {
            uint64_t v1930 = v1927[1];
            *uint64_t v1926 = *v1927;
            v1926[1] = v1930;
            uint64_t v1931 = v1927[3];
            v1926[2] = v1927[2];
            v1926[3] = v1931;
            uint64_t v1932 = v1927[5];
            v1926[4] = v1927[4];
            v1926[5] = v1932;
            uint64_t v1933 = v1927[7];
            v1926[6] = v1927[6];
            v1926[7] = v1933;
            uint64_t v1934 = v1927[9];
            v1926[8] = v1927[8];
            v1926[9] = v1934;
            uint64_t v1935 = v1927[11];
            v1926[10] = v1927[10];
            v1926[11] = v1935;
            *((unsigned char *)v1926 + 96) = *((unsigned char *)v1927 + 96);
            uint64_t v1936 = v1927[14];
            v1926[13] = v1927[13];
            v1926[14] = v1936;
            uint64_t v1937 = v1927[16];
            v1926[15] = v1927[15];
            v1926[16] = v1937;
            uint64_t v1938 = v1928[14];
            v2601 = (char *)v1926 + v1938;
            v2530 = (char *)v1927 + v1938;
            uint64_t v1939 = type metadata accessor for DateComponents();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2530, 1, v1939))
            {
              uint64_t v1940 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v2601, v2530, *(void *)(*(void *)(v1940 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1939 - 8) + 16))(v2601, v2530, v1939);
              __swift_storeEnumTagSinglePayload((uint64_t)v2601, 0, 1, v1939);
            }
            uint64_t v2299 = v1928[15];
            uint64_t v2300 = (void *)((char *)v1926 + v2299);
            v2301 = (void *)((char *)v1927 + v2299);
            uint64_t v2302 = v2301[1];
            *uint64_t v2300 = *v2301;
            v2300[1] = v2302;
            uint64_t v2303 = v1928[16];
            uint64_t v2304 = (void *)((char *)v1926 + v2303);
            v2305 = (void *)((char *)v1927 + v2303);
            uint64_t v2306 = v2305[1];
            *uint64_t v2304 = *v2305;
            v2304[1] = v2306;
            uint64_t v2307 = v1928[17];
            uint64_t v2308 = (void *)((char *)v1926 + v2307);
            v2309 = (void *)((char *)v1927 + v2307);
            v2602 = (void *)v2309[1];
            *uint64_t v2308 = *v2309;
            v2308[1] = v2602;
            uint64_t v2310 = v1928[18];
            uint64_t v2311 = (void *)((char *)v1926 + v2310);
            uint64_t v2312 = (void *)((char *)v1927 + v2310);
            uint64_t v2313 = v2312[1];
            *uint64_t v2311 = *v2312;
            v2311[1] = v2313;
            uint64_t v2314 = v1928[19];
            v2315 = (void *)((char *)v1926 + v2314);
            uint64_t v2316 = (void *)((char *)v1927 + v2314);
            uint64_t v2317 = v2316[1];
            void *v2315 = *v2316;
            v2315[1] = v2317;
            *(void *)((char *)v1926 + v1928[20]) = *(void *)((char *)v1927 + v1928[20]);
            uint64_t v2318 = v1928[21];
            v2319 = (void *)((char *)v1926 + v2318);
            uint64_t v2320 = (void *)((char *)v1927 + v2318);
            uint64_t v2321 = v2320[1];
            void *v2319 = *v2320;
            v2319[1] = v2321;
            uint64_t v2322 = v1928[22];
            v2323 = (void *)((char *)v1926 + v2322);
            uint64_t v2324 = (void *)((char *)v1927 + v2322);
            uint64_t v2325 = v2324[1];
            void *v2323 = *v2324;
            v2323[1] = v2325;
            uint64_t v2326 = v1928[23];
            uint64_t v2327 = (void *)((char *)v1926 + v2326);
            uint64_t v2328 = (void *)((char *)v1927 + v2326);
            uint64_t v2329 = v2328[1];
            *uint64_t v2327 = *v2328;
            v2327[1] = v2329;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1926, 0, 1, (uint64_t)v1928);
            uint64_t v8 = v2700;
            long long v689 = v2613;
            long long v687 = v2627;
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v687, 0, 1, (uint64_t)v689);
        }
        uint64_t v2330 = v2660[20];
        uint64_t v2331 = (void *)((char *)v8 + v2330);
        uint64_t v2332 = (void *)((char *)v9 + v2330);
        v2333 = (int *)type metadata accessor for PreExtractedCard(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2332, 1, (uint64_t)v2333))
        {
          uint64_t v2334 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
          memcpy(v2331, v2332, *(void *)(*(void *)(v2334 - 8) + 64));
        }
        else
        {
          uint64_t v2335 = v2332[1];
          *uint64_t v2331 = *v2332;
          v2331[1] = v2335;
          uint64_t v2336 = v2332[3];
          v2331[2] = v2332[2];
          v2331[3] = v2336;
          uint64_t v2337 = v2332[5];
          v2331[4] = v2332[4];
          v2331[5] = v2337;
          uint64_t v2338 = v2332[7];
          v2331[6] = v2332[6];
          v2331[7] = v2338;
          uint64_t v2339 = v2332[9];
          v2331[8] = v2332[8];
          v2331[9] = v2339;
          uint64_t v2340 = v2332[11];
          v2331[10] = v2332[10];
          v2331[11] = v2340;
          uint64_t v2341 = v2333[10];
          v2629 = (char *)v2331 + v2341;
          v2342 = (char *)v2332 + v2341;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2342, 1, v2654))
          {
            uint64_t v2343 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2629, v2342, *(void *)(*(void *)(v2343 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2654 - 8) + 16))(v2629, v2342, v2654);
            __swift_storeEnumTagSinglePayload((uint64_t)v2629, 0, 1, v2654);
          }
          uint64_t v2344 = v2333[11];
          uint64_t v2345 = (char *)v2331 + v2344;
          v2346 = (char *)v2332 + v2344;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2332 + v2344, 1, v2654))
          {
            uint64_t v2347 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2345, v2346, *(void *)(*(void *)(v2347 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2654 - 8) + 16))(v2345, v2346, v2654);
            __swift_storeEnumTagSinglePayload((uint64_t)v2345, 0, 1, v2654);
          }
          uint64_t v2348 = v2333[12];
          uint64_t v2349 = (void *)((char *)v2331 + v2348);
          uint64_t v2350 = (void *)((char *)v2332 + v2348);
          uint64_t v2351 = v2350[1];
          *uint64_t v2349 = *v2350;
          v2349[1] = v2351;
          uint64_t v2352 = v2333[13];
          uint64_t v2353 = (void *)((char *)v2331 + v2352);
          uint64_t v2354 = (void *)((char *)v2332 + v2352);
          uint64_t v2355 = v2354[1];
          *uint64_t v2353 = *v2354;
          v2353[1] = v2355;
          uint64_t v2356 = v2333[14];
          v2357 = (void *)((char *)v2331 + v2356);
          uint64_t v2358 = (void *)((char *)v2332 + v2356);
          uint64_t v2359 = v2358[1];
          void *v2357 = *v2358;
          v2357[1] = v2359;
          uint64_t v2360 = v2333[15];
          v2361 = (char *)v2331 + v2360;
          uint64_t v2362 = (char *)v2332 + v2360;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2362, 1, v2654))
          {
            uint64_t v2363 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2361, v2362, *(void *)(*(void *)(v2363 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2654 - 8) + 16))(v2361, v2362, v2654);
            __swift_storeEnumTagSinglePayload((uint64_t)v2361, 0, 1, v2654);
          }
          uint64_t v2364 = v2333[16];
          v2365 = (void *)((char *)v2331 + v2364);
          uint64_t v2366 = (void *)((char *)v2332 + v2364);
          uint64_t v2367 = v2366[1];
          void *v2365 = *v2366;
          v2365[1] = v2367;
          uint64_t v2368 = v2333[17];
          v2369 = (void *)((char *)v2331 + v2368);
          uint64_t v2370 = (void *)((char *)v2332 + v2368);
          uint64_t v2371 = v2370[1];
          void *v2369 = *v2370;
          v2369[1] = v2371;
          uint64_t v2372 = v2333[18];
          v2373 = (void *)((char *)v2331 + v2372);
          uint64_t v2374 = (void *)((char *)v2332 + v2372);
          uint64_t v2375 = v2374[1];
          void *v2373 = *v2374;
          v2373[1] = v2375;
          uint64_t v2376 = v2333[19];
          v2377 = (void *)((char *)v2331 + v2376);
          uint64_t v2378 = (void *)((char *)v2332 + v2376);
          uint64_t v2379 = v2378[1];
          void *v2377 = *v2378;
          v2377[1] = v2379;
          uint64_t v2380 = v2333[20];
          v2381 = (void *)((char *)v2331 + v2380);
          uint64_t v2382 = (void *)((char *)v2332 + v2380);
          uint64_t v2383 = v2382[1];
          void *v2381 = *v2382;
          v2381[1] = v2383;
          uint64_t v2384 = v2333[21];
          v2385 = (void *)((char *)v2331 + v2384);
          uint64_t v2386 = (void *)((char *)v2332 + v2384);
          uint64_t v2387 = v2386[1];
          void *v2385 = *v2386;
          v2385[1] = v2387;
          uint64_t v2388 = v2333[22];
          v2389 = (void *)((char *)v2331 + v2388);
          uint64_t v2390 = (void *)((char *)v2332 + v2388);
          uint64_t v2391 = v2390[1];
          void *v2389 = *v2390;
          v2389[1] = v2391;
          uint64_t v2392 = v2333[23];
          v2393 = (void *)((char *)v2331 + v2392);
          uint64_t v2394 = (void *)((char *)v2332 + v2392);
          uint64_t v2395 = v2394[1];
          void *v2393 = *v2394;
          v2393[1] = v2395;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2331, 0, 1, (uint64_t)v2333);
          uint64_t v8 = v2700;
        }
        uint64_t v2396 = v2660[21];
        v2397 = (void *)((char *)v8 + v2396);
        uint64_t v2398 = (void *)((char *)v9 + v2396);
        uint64_t v2399 = (int *)type metadata accessor for PreExtractedContact(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2398, 1, (uint64_t)v2399))
        {
          uint64_t v2400 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
          memcpy(v2397, v2398, *(void *)(*(void *)(v2400 - 8) + 64));
        }
        else
        {
          uint64_t v2401 = v2398[1];
          void *v2397 = *v2398;
          v2397[1] = v2401;
          uint64_t v2402 = v2398[3];
          v2397[2] = v2398[2];
          v2397[3] = v2402;
          uint64_t v2403 = v2398[5];
          v2397[4] = v2398[4];
          v2397[5] = v2403;
          uint64_t v2404 = v2398[7];
          v2397[6] = v2398[6];
          v2397[7] = v2404;
          uint64_t v2405 = v2398[9];
          v2397[8] = v2398[8];
          v2397[9] = v2405;
          uint64_t v2619 = v2398[11];
          v2397[10] = v2398[10];
          v2397[11] = v2619;
          uint64_t v2406 = v2399[11];
          uint64_t v2630 = (char *)v2397 + v2406;
          uint64_t v2407 = (char *)v2398 + v2406;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2407, 1, v2654))
          {
            uint64_t v2408 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2630, v2407, *(void *)(*(void *)(v2408 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2654 - 8) + 16))(v2630, v2407, v2654);
            __swift_storeEnumTagSinglePayload((uint64_t)v2630, 0, 1, v2654);
          }
          uint64_t v2409 = v2399[12];
          uint64_t v2410 = (void *)((char *)v2397 + v2409);
          uint64_t v2411 = (void *)((char *)v2398 + v2409);
          uint64_t v2412 = v2411[1];
          *uint64_t v2410 = *v2411;
          v2410[1] = v2412;
          *(void *)((char *)v2397 + v2399[13]) = *(void *)((char *)v2398 + v2399[13]);
          uint64_t v2413 = v2399[14];
          v2414 = (char *)v2397 + v2413;
          uint64_t v2415 = (char *)v2398 + v2413;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v8 = v2700;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2415, 1, v2654))
          {
            uint64_t v2416 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2414, v2415, *(void *)(*(void *)(v2416 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2654 - 8) + 16))(v2414, v2415, v2654);
            __swift_storeEnumTagSinglePayload((uint64_t)v2414, 0, 1, v2654);
          }
          *(void *)((char *)v2397 + v2399[15]) = *(void *)((char *)v2398 + v2399[15]);
          *(void *)((char *)v2397 + v2399[16]) = *(void *)((char *)v2398 + v2399[16]);
          uint64_t v2417 = v2399[17];
          uint64_t v2418 = (void *)((char *)v2397 + v2417);
          uint64_t v2419 = (void *)((char *)v2398 + v2417);
          uint64_t v2420 = v2419[1];
          *uint64_t v2418 = *v2419;
          v2418[1] = v2420;
          *(void *)((char *)v2397 + v2399[18]) = *(void *)((char *)v2398 + v2399[18]);
          *(void *)((char *)v2397 + v2399[19]) = *(void *)((char *)v2398 + v2399[19]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2397, 0, 1, (uint64_t)v2399);
        }
        uint64_t v2421 = v2660[22];
        v2422 = (void *)((char *)v8 + v2421);
        uint64_t v2423 = (void *)((char *)v9 + v2421);
        uint64_t v2424 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2423, 1, (uint64_t)v2424))
        {
          uint64_t v2425 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
          memcpy(v2422, v2423, *(void *)(*(void *)(v2425 - 8) + 64));
        }
        else
        {
          uint64_t v2426 = v2423[1];
          void *v2422 = *v2423;
          v2422[1] = v2426;
          uint64_t v2427 = v2423[3];
          v2422[2] = v2423[2];
          v2422[3] = v2427;
          uint64_t v2428 = v2423[5];
          v2422[4] = v2423[4];
          v2422[5] = v2428;
          uint64_t v2429 = v2423[7];
          v2422[6] = v2423[6];
          v2422[7] = v2429;
          uint64_t v2430 = v2424[8];
          uint64_t v2431 = (char *)v2422 + v2430;
          uint64_t v2432 = (char *)v2423 + v2430;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2432, 1, v2640))
          {
            uint64_t v2433 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v2431, v2432, *(void *)(*(void *)(v2433 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2640 - 8) + 16))(v2431, v2432, v2640);
            __swift_storeEnumTagSinglePayload((uint64_t)v2431, 0, 1, v2640);
          }
          uint64_t v2434 = v2424[9];
          uint64_t v2435 = (void *)((char *)v2422 + v2434);
          uint64_t v2436 = (void *)((char *)v2423 + v2434);
          uint64_t v2437 = v2436[1];
          *uint64_t v2435 = *v2436;
          v2435[1] = v2437;
          uint64_t v2438 = v2424[10];
          v2439 = (void *)((char *)v2422 + v2438);
          uint64_t v2440 = (void *)((char *)v2423 + v2438);
          uint64_t v2441 = v2440[1];
          void *v2439 = *v2440;
          v2439[1] = v2441;
          uint64_t v2442 = v2424[11];
          uint64_t v2443 = (void *)((char *)v2422 + v2442);
          uint64_t v2444 = (void *)((char *)v2423 + v2442);
          uint64_t v2445 = v2444[1];
          *uint64_t v2443 = *v2444;
          v2443[1] = v2445;
          uint64_t v2446 = v2424[12];
          v2447 = (char *)v2422 + v2446;
          uint64_t v2448 = (char *)v2423 + v2446;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v8 = v2700;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2448, 1, v2654))
          {
            uint64_t v2449 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2447, v2448, *(void *)(*(void *)(v2449 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2654 - 8) + 16))(v2447, v2448, v2654);
            __swift_storeEnumTagSinglePayload((uint64_t)v2447, 0, 1, v2654);
          }
          uint64_t v2450 = v2424[13];
          v2451 = (char *)v2422 + v2450;
          uint64_t v2452 = (char *)v2423 + v2450;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2423 + v2450, 1, v2654))
          {
            uint64_t v2453 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2451, v2452, *(void *)(*(void *)(v2453 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2654 - 8) + 16))(v2451, v2452, v2654);
            __swift_storeEnumTagSinglePayload((uint64_t)v2451, 0, 1, v2654);
          }
          uint64_t v2454 = v2424[14];
          v2455 = (char *)v2422 + v2454;
          uint64_t v2456 = (char *)v2423 + v2454;
          *(void *)v2455 = *(void *)v2456;
          v2455[8] = v2456[8];
          uint64_t v2457 = v2424[15];
          v2458 = (void *)((char *)v2422 + v2457);
          v2459 = (void *)((char *)v2423 + v2457);
          uint64_t v2460 = v2459[1];
          void *v2458 = *v2459;
          v2458[1] = v2460;
          uint64_t v2461 = v2424[16];
          v2462 = (void *)((char *)v2422 + v2461);
          v2463 = (void *)((char *)v2423 + v2461);
          uint64_t v2464 = v2463[1];
          void *v2462 = *v2463;
          v2462[1] = v2464;
          uint64_t v2465 = v2424[17];
          v2466 = (void *)((char *)v2422 + v2465);
          v2467 = (void *)((char *)v2423 + v2465);
          uint64_t v2468 = v2467[1];
          void *v2466 = *v2467;
          v2466[1] = v2468;
          uint64_t v2469 = v2424[18];
          v2470 = (void *)((char *)v2422 + v2469);
          v2471 = (void *)((char *)v2423 + v2469);
          uint64_t v2472 = v2471[1];
          void *v2470 = *v2471;
          v2470[1] = v2472;
          uint64_t v2473 = v2424[19];
          v2474 = (void *)((char *)v2422 + v2473);
          uint64_t v2475 = (void *)((char *)v2423 + v2473);
          uint64_t v2476 = v2475[1];
          void *v2474 = *v2475;
          v2474[1] = v2476;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2422, 0, 1, (uint64_t)v2424);
        }
        uint64_t v2120 = v2660[23];
        goto LABEL_537;
      case 2u:
        uint64_t v2690 = v3;
        uint64_t v44 = v8;
        uint64_t v45 = v4;
        uint64_t v46 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v46;
        uint64_t v47 = v9[3];
        v44[2] = v9[2];
        v44[3] = v47;
        uint64_t v48 = v9[5];
        v44[4] = v9[4];
        v44[5] = v48;
        uint64_t v49 = (int *)type metadata accessor for CalendarEvent(0);
        uint64_t v50 = v49[7];
        uint64_t v51 = (char *)v44 + v50;
        uint64_t v52 = (char *)v9 + v50;
        uint64_t v53 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v52, 1, v53))
        {
          uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v51, v52, *(void *)(*(void *)(v54 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16))(v51, v52, v53);
          __swift_storeEnumTagSinglePayload((uint64_t)v51, 0, 1, v53);
        }
        uint64_t v4 = v45;
        uint64_t v362 = v49[8];
        uint64_t v363 = (char *)v2700 + v362;
        uint64_t v364 = (char *)v9 + v362;
        if (__swift_getEnumTagSinglePayload((uint64_t)v9 + v362, 1, v53))
        {
          uint64_t v365 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v363, v364, *(void *)(*(void *)(v365 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16))(v363, v364, v53);
          __swift_storeEnumTagSinglePayload((uint64_t)v363, 0, 1, v53);
        }
        uint64_t v523 = v49[9];
        uint64_t v524 = (void *)((char *)v2700 + v523);
        uint64_t v525 = (void *)((char *)v9 + v523);
        uint64_t v526 = v525[1];
        *uint64_t v524 = *v525;
        v524[1] = v526;
        *(void *)((char *)v2700 + v49[10]) = *(void *)((char *)v9 + v49[10]);
        *(void *)((char *)v2700 + v49[11]) = *(void *)((char *)v9 + v49[11]);
        uint64_t v527 = v49[12];
        v528 = (void *)((char *)v2700 + v527);
        uint64_t v529 = (void *)((char *)v9 + v527);
        uint64_t v530 = v529[1];
        void *v528 = *v529;
        v528[1] = v530;
        uint64_t v531 = v49[13];
        uint64_t v532 = (void *)((char *)v2700 + v531);
        uint64_t v533 = (char *)v9 + v531;
        uint64_t v534 = *(void *)((char *)v9 + v531);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v534)
        {
          uint64_t v535 = *((void *)v533 + 1);
          uint64_t v536 = *((void *)v533 + 2);
          *uint64_t v532 = v534;
          v532[1] = v535;
          uint64_t v537 = *((void *)v533 + 3);
          uint64_t v538 = *((void *)v533 + 4);
          v532[2] = v536;
          v532[3] = v537;
          v532[4] = v538;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v691 = *((_OWORD *)v533 + 1);
          *(_OWORD *)uint64_t v532 = *(_OWORD *)v533;
          *((_OWORD *)v532 + 1) = v691;
          v532[4] = *((void *)v533 + 4);
        }
        uint64_t v3 = v2690;
        goto LABEL_162;
      case 3u:
        uint64_t v2681 = v4;
        uint64_t v2689 = v3;
        v2672 = v5;
        uint64_t v55 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v55;
        uint64_t v56 = v9[3];
        v8[2] = v9[2];
        v8[3] = v56;
        uint64_t v57 = v9[5];
        v8[4] = v9[4];
        v8[5] = v57;
        uint64_t v58 = v9[7];
        v8[6] = v9[6];
        v8[7] = v58;
        uint64_t v59 = v9[9];
        v8[8] = v9[8];
        v8[9] = v59;
        v8[10] = v9[10];
        uint64_t v2661 = (int *)type metadata accessor for Photo(0);
        uint64_t v60 = v2661[11];
        uint64_t v2633 = (char *)v8 + v60;
        uint64_t v61 = (char *)v9 + v60;
        uint64_t v62 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v2647 = v62;
        if (__swift_getEnumTagSinglePayload((uint64_t)v61, 1, v62))
        {
          uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v2633, v61, *(void *)(*(void *)(v63 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 16))(v2633, v61, v62);
          __swift_storeEnumTagSinglePayload((uint64_t)v2633, 0, 1, v62);
        }
        *(void *)((char *)v8 + v2661[12]) = *(void *)((char *)v9 + v2661[12]);
        *(void *)((char *)v8 + v2661[13]) = *(void *)((char *)v9 + v2661[13]);
        *(void *)((char *)v8 + v2661[14]) = *(void *)((char *)v9 + v2661[14]);
        *(void *)((char *)v8 + v2661[15]) = *(void *)((char *)v9 + v2661[15]);
        uint64_t v366 = v2661[16];
        uint64_t v367 = (void *)((char *)v8 + v366);
        uint64_t v368 = (void *)((char *)v9 + v366);
        uint64_t v369 = v368[1];
        *uint64_t v367 = *v368;
        v367[1] = v369;
        uint64_t v370 = v2661[17];
        long long v371 = (void *)((char *)v2700 + v370);
        long long v372 = (void *)((char *)v9 + v370);
        uint64_t v373 = type metadata accessor for PartialExtractedAttributes(0);
        swift_bridgeObjectRetain();
        uint64_t v374 = (int *)v373;
        swift_bridgeObjectRetain();
        long long v375 = v372;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v372, 1, v373))
        {
          uint64_t v376 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
          memcpy(v371, v372, *(void *)(*(void *)(v376 - 8) + 64));
          uint64_t v8 = v2700;
        }
        else
        {
          uint64_t v539 = v372[1];
          *long long v371 = *v372;
          v371[1] = v539;
          uint64_t v540 = *(int *)(v373 + 20);
          uint64_t v541 = (void *)((char *)v371 + v540);
          uint64_t v542 = (void *)((char *)v372 + v540);
          uint64_t v543 = type metadata accessor for RentalCarReservation(0);
          swift_bridgeObjectRetain();
          uint64_t v2625 = v374;
          v2641 = v371;
          uint64_t v2611 = v375;
          if (__swift_getEnumTagSinglePayload((uint64_t)v542, 1, v543))
          {
            uint64_t v544 = (uint64_t)v371;
            uint64_t v545 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
            memcpy(v541, v542, *(void *)(*(void *)(v545 - 8) + 64));
            uint64_t v8 = v2700;
          }
          else
          {
            uint64_t v761 = v542[1];
            void *v541 = *v542;
            v541[1] = v761;
            uint64_t v762 = v542[3];
            v541[2] = v542[2];
            v541[3] = v762;
            uint64_t v763 = v542[5];
            v541[4] = v542[4];
            v541[5] = v763;
            uint64_t v764 = v542[7];
            v541[6] = v542[6];
            v541[7] = v764;
            uint64_t v765 = v542[9];
            v541[8] = v542[8];
            v541[9] = v765;
            uint64_t v766 = v542[11];
            v541[10] = v542[10];
            v541[11] = v766;
            uint64_t v767 = v542[13];
            v541[12] = v542[12];
            v541[13] = v767;
            uint64_t v768 = v542[15];
            v541[14] = v542[14];
            v541[15] = v768;
            *((unsigned char *)v541 + 128) = *((unsigned char *)v542 + 128);
            *(_WORD *)((char *)v541 + 129) = *(_WORD *)((char *)v542 + 129);
            uint64_t v769 = v542[18];
            v541[17] = v542[17];
            v541[18] = v769;
            uint64_t v770 = v542[20];
            v541[19] = v542[19];
            v541[20] = v770;
            uint64_t v771 = v542[22];
            v541[21] = v542[21];
            v541[22] = v771;
            uint64_t v2494 = v542[24];
            v541[23] = v542[23];
            v541[24] = v2494;
            uint64_t v772 = v542[26];
            v541[25] = v542[25];
            v541[26] = v772;
            uint64_t v773 = v542[28];
            v541[27] = v542[27];
            v541[28] = v773;
            uint64_t v774 = v542[30];
            v541[29] = v542[29];
            v541[30] = v774;
            uint64_t v775 = v542[32];
            v541[31] = v542[31];
            v541[32] = v775;
            uint64_t v776 = v542[34];
            v541[33] = v542[33];
            v541[34] = v776;
            uint64_t v777 = v542[36];
            v541[35] = v542[35];
            v541[36] = v777;
            uint64_t v778 = v542[38];
            v541[37] = v542[37];
            v541[38] = v778;
            uint64_t v779 = v542[40];
            v541[39] = v542[39];
            v541[40] = v779;
            uint64_t v780 = v542[42];
            v541[41] = v542[41];
            v541[42] = v780;
            uint64_t v781 = v542[44];
            v541[43] = v542[43];
            v541[44] = v781;
            uint64_t v782 = v542[46];
            v541[45] = v542[45];
            v541[46] = v782;
            uint64_t v783 = v542[47];
            *((unsigned char *)v541 + 384) = *((unsigned char *)v542 + 384);
            v541[47] = v783;
            uint64_t v784 = v542[50];
            v541[49] = v542[49];
            v541[50] = v784;
            uint64_t v785 = v542[52];
            v541[51] = v542[51];
            v541[52] = v785;
            uint64_t v786 = *(int *)(v543 + 140);
            v2594 = (char *)v541 + v786;
            uint64_t v787 = (char *)v542 + v786;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v787, 1, v2647))
            {
              uint64_t v788 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2594, v787, *(void *)(*(void *)(v788 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2647 - 8) + 16))(v2594, v787, v2647);
              __swift_storeEnumTagSinglePayload((uint64_t)v2594, 0, 1, v2647);
            }
            uint64_t v821 = *(int *)(v543 + 144);
            uint64_t v822 = (char *)v541 + v821;
            uint64_t v823 = (char *)v542 + v821;
            uint64_t v8 = v2700;
            if (__swift_getEnumTagSinglePayload((uint64_t)v542 + v821, 1, v2647))
            {
              uint64_t v824 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v822, v823, *(void *)(*(void *)(v824 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2647 - 8) + 16))(v822, v823, v2647);
              __swift_storeEnumTagSinglePayload((uint64_t)v822, 0, 1, v2647);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v541, 0, 1, v543);
            uint64_t v374 = v2625;
            uint64_t v544 = (uint64_t)v2641;
          }
          uint64_t v855 = v374[6];
          uint64_t v856 = (void *)(v544 + v855);
          uint64_t v857 = (void *)((char *)v375 + v855);
          uint64_t v858 = type metadata accessor for TicketedTransportation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v857, 1, v858))
          {
            uint64_t v859 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
            memcpy(v856, v857, *(void *)(*(void *)(v859 - 8) + 64));
          }
          else
          {
            uint64_t v860 = v857[1];
            *uint64_t v856 = *v857;
            v856[1] = v860;
            uint64_t v861 = v857[3];
            v856[2] = v857[2];
            v856[3] = v861;
            uint64_t v862 = v857[5];
            v856[4] = v857[4];
            v856[5] = v862;
            uint64_t v863 = v857[7];
            v856[6] = v857[6];
            v856[7] = v863;
            uint64_t v864 = v857[9];
            v856[8] = v857[8];
            v856[9] = v864;
            uint64_t v865 = v857[11];
            v856[10] = v857[10];
            v856[11] = v865;
            uint64_t v866 = v857[13];
            v856[12] = v857[12];
            v856[13] = v866;
            uint64_t v867 = v857[15];
            v856[14] = v857[14];
            v856[15] = v867;
            *((unsigned char *)v856 + 128) = *((unsigned char *)v857 + 128);
            *(_WORD *)((char *)v856 + 129) = *(_WORD *)((char *)v857 + 129);
            uint64_t v868 = v857[18];
            v856[17] = v857[17];
            v856[18] = v868;
            uint64_t v869 = v857[20];
            v856[19] = v857[19];
            v856[20] = v869;
            uint64_t v870 = v857[22];
            v856[21] = v857[21];
            v856[22] = v870;
            uint64_t v871 = v857[24];
            v856[23] = v857[23];
            v856[24] = v871;
            uint64_t v2550 = (void *)v857[26];
            v856[25] = v857[25];
            v856[26] = v2550;
            uint64_t v872 = v857[28];
            v856[27] = v857[27];
            v856[28] = v872;
            uint64_t v873 = v857[30];
            v856[29] = v857[29];
            v856[30] = v873;
            uint64_t v874 = v857[32];
            v856[31] = v857[31];
            v856[32] = v874;
            uint64_t v875 = v857[34];
            v856[33] = v857[33];
            v856[34] = v875;
            uint64_t v877 = v857[35];
            uint64_t v876 = v857[36];
            *((unsigned char *)v856 + 296) = *((unsigned char *)v857 + 296);
            v856[35] = v877;
            v856[36] = v876;
            uint64_t v878 = *(int *)(v858 + 112);
            v2571 = (char *)v856 + v878;
            uint64_t v879 = (char *)v857 + v878;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v879, 1, v2647))
            {
              uint64_t v880 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2571, v879, *(void *)(*(void *)(v880 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2647 - 8) + 16))(v2571, v879, v2647);
              __swift_storeEnumTagSinglePayload((uint64_t)v2571, 0, 1, v2647);
            }
            uint64_t v912 = *(int *)(v858 + 116);
            uint64_t v913 = (char *)v856 + v912;
            uint64_t v914 = (char *)v857 + v912;
            uint64_t v8 = v2700;
            if (__swift_getEnumTagSinglePayload((uint64_t)v857 + v912, 1, v2647))
            {
              uint64_t v915 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v913, v914, *(void *)(*(void *)(v915 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2647 - 8) + 16))(v913, v914, v2647);
              __swift_storeEnumTagSinglePayload((uint64_t)v913, 0, 1, v2647);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v856, 0, 1, v858);
            uint64_t v374 = v2625;
            uint64_t v544 = (uint64_t)v2641;
          }
          uint64_t v948 = v374[7];
          uint64_t v949 = (void *)(v544 + v948);
          uint64_t v950 = (void *)((char *)v375 + v948);
          uint64_t v951 = (int *)type metadata accessor for TicketedShow(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v950, 1, (uint64_t)v951))
          {
            uint64_t v952 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
            memcpy(v949, v950, *(void *)(*(void *)(v952 - 8) + 64));
          }
          else
          {
            uint64_t v953 = v950[1];
            *uint64_t v949 = *v950;
            v949[1] = v953;
            uint64_t v954 = v950[3];
            v949[2] = v950[2];
            v949[3] = v954;
            uint64_t v955 = v950[5];
            v949[4] = v950[4];
            v949[5] = v955;
            uint64_t v956 = v950[7];
            v949[6] = v950[6];
            v949[7] = v956;
            uint64_t v957 = v950[9];
            v949[8] = v950[8];
            v949[9] = v957;
            uint64_t v958 = v950[11];
            v949[10] = v950[10];
            v949[11] = v958;
            uint64_t v959 = v950[13];
            v949[12] = v950[12];
            v949[13] = v959;
            uint64_t v960 = v950[15];
            v949[14] = v950[14];
            v949[15] = v960;
            *((unsigned char *)v949 + 128) = *((unsigned char *)v950 + 128);
            *(_WORD *)((char *)v949 + 129) = *(_WORD *)((char *)v950 + 129);
            uint64_t v961 = v950[18];
            v949[17] = v950[17];
            v949[18] = v961;
            uint64_t v962 = v950[20];
            v949[19] = v950[19];
            v949[20] = v962;
            uint64_t v963 = v950[22];
            v949[21] = v950[21];
            v949[22] = v963;
            uint64_t v2497 = v950[24];
            v949[23] = v950[23];
            v949[24] = v2497;
            uint64_t v964 = v950[26];
            v949[25] = v950[25];
            v949[26] = v964;
            uint64_t v965 = v950[28];
            v949[27] = v950[27];
            v949[28] = v965;
            v2573 = (void *)v950[30];
            v949[29] = v950[29];
            v949[30] = v2573;
            uint64_t v966 = v950[32];
            v949[31] = v950[31];
            v949[32] = v966;
            uint64_t v967 = v950[34];
            v949[33] = v950[33];
            v949[34] = v967;
            uint64_t v968 = v950[36];
            uint64_t v969 = v950[35];
            *((unsigned char *)v949 + 296) = *((unsigned char *)v950 + 296);
            v949[35] = v969;
            v949[36] = v968;
            uint64_t v970 = v950[39];
            v949[38] = v950[38];
            v949[39] = v970;
            uint64_t v971 = v951[29];
            v2595 = (char *)v949 + v971;
            uint64_t v972 = (char *)v950 + v971;
            uint64_t v973 = type metadata accessor for URL();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v972, 1, v973))
            {
              uint64_t v974 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v2595, v972, *(void *)(*(void *)(v974 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v973 - 8) + 16))(v2595, v972, v973);
              __swift_storeEnumTagSinglePayload((uint64_t)v2595, 0, 1, v973);
            }
            uint64_t v1011 = v951[30];
            uint64_t v1012 = (void *)((char *)v949 + v1011);
            v1013 = (void *)((char *)v950 + v1011);
            uint64_t v1014 = v1013[1];
            void *v1012 = *v1013;
            v1012[1] = v1014;
            uint64_t v1015 = v951[31];
            uint64_t v1016 = (char *)v949 + v1015;
            long long v1017 = (char *)v950 + v1015;
            swift_bridgeObjectRetain();
            uint64_t v8 = v2700;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1017, 1, v2647))
            {
              uint64_t v1018 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1016, v1017, *(void *)(*(void *)(v1018 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2647 - 8) + 16))(v1016, v1017, v2647);
              __swift_storeEnumTagSinglePayload((uint64_t)v1016, 0, 1, v2647);
            }
            uint64_t v1031 = v951[32];
            uint64_t v1032 = (char *)v949 + v1031;
            uint64_t v1033 = (char *)v950 + v1031;
            if (__swift_getEnumTagSinglePayload((uint64_t)v950 + v1031, 1, v2647))
            {
              uint64_t v1034 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1032, v1033, *(void *)(*(void *)(v1034 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2647 - 8) + 16))(v1032, v1033, v2647);
              __swift_storeEnumTagSinglePayload((uint64_t)v1032, 0, 1, v2647);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v949, 0, 1, (uint64_t)v951);
            uint64_t v374 = v2625;
            uint64_t v544 = (uint64_t)v2641;
          }
          uint64_t v1066 = v374[8];
          uint64_t v1067 = (void *)(v544 + v1066);
          uint64_t v1068 = (void *)((char *)v375 + v1066);
          uint64_t v1069 = type metadata accessor for Appointment(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1068, 1, v1069))
          {
            uint64_t v1070 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
            memcpy(v1067, v1068, *(void *)(*(void *)(v1070 - 8) + 64));
          }
          else
          {
            uint64_t v1071 = v1068[1];
            void *v1067 = *v1068;
            v1067[1] = v1071;
            uint64_t v1072 = v1068[3];
            v1067[2] = v1068[2];
            v1067[3] = v1072;
            uint64_t v1073 = v1068[5];
            v1067[4] = v1068[4];
            v1067[5] = v1073;
            uint64_t v1074 = v1068[7];
            v1067[6] = v1068[6];
            v1067[7] = v1074;
            uint64_t v1075 = v1068[9];
            v1067[8] = v1068[8];
            v1067[9] = v1075;
            uint64_t v1076 = v1068[11];
            v1067[10] = v1068[10];
            v1067[11] = v1076;
            uint64_t v1077 = v1068[13];
            v1067[12] = v1068[12];
            v1067[13] = v1077;
            uint64_t v1078 = v1068[15];
            v1067[14] = v1068[14];
            v1067[15] = v1078;
            *((unsigned char *)v1067 + 128) = *((unsigned char *)v1068 + 128);
            *(_WORD *)((char *)v1067 + 129) = *(_WORD *)((char *)v1068 + 129);
            uint64_t v1079 = v1068[18];
            v1067[17] = v1068[17];
            v1067[18] = v1079;
            uint64_t v1080 = v1068[20];
            v1067[19] = v1068[19];
            v1067[20] = v1080;
            uint64_t v1081 = v1068[22];
            v1067[21] = v1068[21];
            v1067[22] = v1081;
            uint64_t v1082 = v1068[24];
            v1067[23] = v1068[23];
            v1067[24] = v1082;
            uint64_t v1083 = v1068[26];
            v1067[25] = v1068[25];
            v1067[26] = v1083;
            uint64_t v1084 = v1068[28];
            v1067[27] = v1068[27];
            v1067[28] = v1084;
            uint64_t v1085 = v1068[30];
            v1067[29] = v1068[29];
            v1067[30] = v1085;
            uint64_t v1086 = v1068[32];
            v1067[31] = v1068[31];
            v1067[32] = v1086;
            uint64_t v1088 = v1068[33];
            uint64_t v1087 = v1068[34];
            *((unsigned char *)v1067 + 280) = *((unsigned char *)v1068 + 280);
            v1067[33] = v1088;
            v1067[34] = v1087;
            uint64_t v1089 = v1068[37];
            v1067[36] = v1068[36];
            v1067[37] = v1089;
            uint64_t v1090 = *(int *)(v1069 + 108);
            v2575 = (char *)v1067 + v1090;
            uint64_t v1091 = (char *)v1068 + v1090;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1091, 1, v2647))
            {
              uint64_t v1092 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2575, v1091, *(void *)(*(void *)(v1092 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2647 - 8) + 16))(v2575, v1091, v2647);
              __swift_storeEnumTagSinglePayload((uint64_t)v2575, 0, 1, v2647);
            }
            uint64_t v1125 = *(int *)(v1069 + 112);
            uint64_t v1126 = (char *)v1067 + v1125;
            uint64_t v1127 = (char *)v1068 + v1125;
            uint64_t v8 = v2700;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1068 + v1125, 1, v2647))
            {
              uint64_t v1128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1126, v1127, *(void *)(*(void *)(v1128 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2647 - 8) + 16))(v1126, v1127, v2647);
              __swift_storeEnumTagSinglePayload((uint64_t)v1126, 0, 1, v2647);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v1067, 0, 1, v1069);
            uint64_t v374 = v2625;
            uint64_t v544 = (uint64_t)v2641;
          }
          uint64_t v1157 = v374[9];
          uint64_t v1158 = (void *)(v544 + v1157);
          uint64_t v1159 = (void *)((char *)v375 + v1157);
          uint64_t v1160 = (int *)type metadata accessor for Party(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1159, 1, (uint64_t)v1160))
          {
            uint64_t v1161 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
            memcpy(v1158, v1159, *(void *)(*(void *)(v1161 - 8) + 64));
          }
          else
          {
            uint64_t v1162 = v1159[1];
            *uint64_t v1158 = *v1159;
            v1158[1] = v1162;
            uint64_t v1163 = v1159[3];
            v1158[2] = v1159[2];
            v1158[3] = v1163;
            uint64_t v1164 = v1159[5];
            v1158[4] = v1159[4];
            v1158[5] = v1164;
            uint64_t v1165 = v1159[7];
            v1158[6] = v1159[6];
            v1158[7] = v1165;
            uint64_t v1166 = v1159[9];
            v1158[8] = v1159[8];
            v1158[9] = v1166;
            uint64_t v1167 = v1159[11];
            v1158[10] = v1159[10];
            v1158[11] = v1167;
            uint64_t v1168 = v1159[13];
            v1158[12] = v1159[12];
            v1158[13] = v1168;
            uint64_t v1169 = v1159[15];
            v1158[14] = v1159[14];
            v1158[15] = v1169;
            *((unsigned char *)v1158 + 128) = *((unsigned char *)v1159 + 128);
            *(_WORD *)((char *)v1158 + 129) = *(_WORD *)((char *)v1159 + 129);
            uint64_t v1170 = v1159[18];
            v1158[17] = v1159[17];
            v1158[18] = v1170;
            uint64_t v1171 = v1159[20];
            v1158[19] = v1159[19];
            v1158[20] = v1171;
            uint64_t v1172 = v1159[22];
            v1158[21] = v1159[21];
            v1158[22] = v1172;
            uint64_t v1173 = v1159[24];
            v1158[23] = v1159[23];
            v1158[24] = v1173;
            uint64_t v1174 = v1159[26];
            v1158[25] = v1159[25];
            v1158[26] = v1174;
            uint64_t v1175 = v1159[28];
            v1158[27] = v1159[27];
            v1158[28] = v1175;
            uint64_t v1176 = v1159[30];
            v1158[29] = v1159[29];
            v1158[30] = v1176;
            v1158[31] = v1159[31];
            uint64_t v1177 = v1160[24];
            v2577 = (char *)v1158 + v1177;
            uint64_t v1178 = (char *)v1159 + v1177;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1178, 1, v2647))
            {
              uint64_t v1179 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2577, v1178, *(void *)(*(void *)(v1179 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2647 - 8) + 16))(v2577, v1178, v2647);
              __swift_storeEnumTagSinglePayload((uint64_t)v2577, 0, 1, v2647);
            }
            uint64_t v1207 = v1160[25];
            uint64_t v1208 = (char *)v1158 + v1207;
            uint64_t v1209 = (char *)v1159 + v1207;
            uint64_t v8 = v2700;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1159 + v1207, 1, v2647))
            {
              uint64_t v1210 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1208, v1209, *(void *)(*(void *)(v1210 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2647 - 8) + 16))(v1208, v1209, v2647);
              __swift_storeEnumTagSinglePayload((uint64_t)v1208, 0, 1, v2647);
            }
            uint64_t v1220 = v1160[26];
            uint64_t v1221 = (char *)v1158 + v1220;
            v1222 = (char *)v1159 + v1220;
            uint64_t v1223 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1222, 1, v1223))
            {
              uint64_t v1224 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1221, v1222, *(void *)(*(void *)(v1224 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1223 - 8) + 16))(v1221, v1222, v1223);
              __swift_storeEnumTagSinglePayload((uint64_t)v1221, 0, 1, v1223);
            }
            long long v375 = v2611;
            __swift_storeEnumTagSinglePayload((uint64_t)v1158, 0, 1, (uint64_t)v1160);
            uint64_t v374 = v2625;
            uint64_t v544 = (uint64_t)v2641;
          }
          uint64_t v1250 = v374[10];
          uint64_t v1251 = (void *)(v544 + v1250);
          uint64_t v1252 = (void *)((char *)v375 + v1250);
          uint64_t v1253 = (int *)type metadata accessor for Trip(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1252, 1, (uint64_t)v1253))
          {
            uint64_t v1254 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
            memcpy(v1251, v1252, *(void *)(*(void *)(v1254 - 8) + 64));
          }
          else
          {
            uint64_t v1255 = v1252[1];
            *uint64_t v1251 = *v1252;
            v1251[1] = v1255;
            uint64_t v1256 = v1252[3];
            v1251[2] = v1252[2];
            v1251[3] = v1256;
            uint64_t v1257 = v1252[5];
            v1251[4] = v1252[4];
            v1251[5] = v1257;
            uint64_t v1258 = v1252[7];
            v1251[6] = v1252[6];
            v1251[7] = v1258;
            uint64_t v1259 = v1252[9];
            v1251[8] = v1252[8];
            v1251[9] = v1259;
            uint64_t v1260 = v1252[11];
            v1251[10] = v1252[10];
            v1251[11] = v1260;
            uint64_t v1261 = v1252[13];
            v1251[12] = v1252[12];
            v1251[13] = v1261;
            uint64_t v1262 = v1252[15];
            v1251[14] = v1252[14];
            v1251[15] = v1262;
            *((unsigned char *)v1251 + 128) = *((unsigned char *)v1252 + 128);
            *(_WORD *)((char *)v1251 + 129) = *(_WORD *)((char *)v1252 + 129);
            uint64_t v1263 = v1252[18];
            v1251[17] = v1252[17];
            v1251[18] = v1263;
            uint64_t v1264 = v1252[20];
            v1251[19] = v1252[19];
            v1251[20] = v1264;
            uint64_t v1265 = v1252[22];
            v1251[21] = v1252[21];
            v1251[22] = v1265;
            uint64_t v1266 = v1252[24];
            v1251[23] = v1252[23];
            v1251[24] = v1266;
            uint64_t v1267 = v1252[26];
            v1251[25] = v1252[25];
            v1251[26] = v1267;
            v1251[27] = v1252[27];
            uint64_t v1268 = v1253[22];
            v2579 = (char *)v1251 + v1268;
            uint64_t v1269 = (char *)v1252 + v1268;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1269, 1, v2647))
            {
              uint64_t v1270 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2579, v1269, *(void *)(*(void *)(v1270 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2647 - 8) + 16))(v2579, v1269, v2647);
              __swift_storeEnumTagSinglePayload((uint64_t)v2579, 0, 1, v2647);
            }
            uint64_t v1296 = v1253[23];
            uint64_t v1297 = (char *)v1251 + v1296;
            uint64_t v1298 = (char *)v1252 + v1296;
            uint64_t v8 = v2700;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1252 + v1296, 1, v2647))
            {
              uint64_t v1299 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1297, v1298, *(void *)(*(void *)(v1299 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2647 - 8) + 16))(v1297, v1298, v2647);
              __swift_storeEnumTagSinglePayload((uint64_t)v1297, 0, 1, v2647);
            }
            uint64_t v1312 = v1253[24];
            uint64_t v1313 = (char *)v1251 + v1312;
            v1314 = (char *)v1252 + v1312;
            *(void *)uint64_t v1313 = *(void *)v1314;
            v1313[8] = v1314[8];
            uint64_t v1315 = v1253[25];
            uint64_t v1316 = (char *)v1251 + v1315;
            uint64_t v1317 = (char *)v1252 + v1315;
            uint64_t v1318 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1317, 1, v1318))
            {
              uint64_t v1319 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1316, v1317, *(void *)(*(void *)(v1319 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1318 - 8) + 16))(v1316, v1317, v1318);
              __swift_storeEnumTagSinglePayload((uint64_t)v1316, 0, 1, v1318);
            }
            long long v375 = v2611;
            __swift_storeEnumTagSinglePayload((uint64_t)v1251, 0, 1, (uint64_t)v1253);
            uint64_t v374 = v2625;
            uint64_t v544 = (uint64_t)v2641;
          }
          uint64_t v1343 = v374[11];
          uint64_t v1344 = (void *)(v544 + v1343);
          uint64_t v1345 = (void *)((char *)v375 + v1343);
          uint64_t v1346 = (int *)type metadata accessor for FlightReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1345, 1, (uint64_t)v1346))
          {
            uint64_t v1347 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
            memcpy(v1344, v1345, *(void *)(*(void *)(v1347 - 8) + 64));
          }
          else
          {
            uint64_t v1348 = v1345[1];
            *uint64_t v1344 = *v1345;
            v1344[1] = v1348;
            uint64_t v1349 = v1345[3];
            v1344[2] = v1345[2];
            v1344[3] = v1349;
            uint64_t v1350 = v1345[5];
            v1344[4] = v1345[4];
            v1344[5] = v1350;
            uint64_t v1351 = v1345[7];
            v1344[6] = v1345[6];
            v1344[7] = v1351;
            uint64_t v1352 = v1345[9];
            v1344[8] = v1345[8];
            v1344[9] = v1352;
            uint64_t v1353 = v1345[11];
            v1344[10] = v1345[10];
            v1344[11] = v1353;
            *((unsigned char *)v1344 + 96) = *((unsigned char *)v1345 + 96);
            uint64_t v1354 = v1345[14];
            v1344[13] = v1345[13];
            v1344[14] = v1354;
            uint64_t v1355 = v1346[13];
            v2596 = (char *)v1344 + v1355;
            uint64_t v1356 = (char *)v1345 + v1355;
            uint64_t v1357 = type metadata accessor for URL();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1356, 1, v1357))
            {
              uint64_t v1358 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v2596, v1356, *(void *)(*(void *)(v1358 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1357 - 8) + 16))(v2596, v1356, v1357);
              __swift_storeEnumTagSinglePayload((uint64_t)v2596, 0, 1, v1357);
            }
            uint64_t v1378 = v1346[14];
            uint64_t v1379 = (char *)v1344 + v1378;
            uint64_t v1380 = (char *)v1345 + v1378;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1345 + v1378, 1, v1357))
            {
              uint64_t v1381 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1379, v1380, *(void *)(*(void *)(v1381 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1357 - 8) + 16))(v1379, v1380, v1357);
              __swift_storeEnumTagSinglePayload((uint64_t)v1379, 0, 1, v1357);
            }
            uint64_t v1458 = v1346[15];
            v1459 = (void *)((char *)v1344 + v1458);
            uint64_t v1460 = (void *)((char *)v1345 + v1458);
            uint64_t v1461 = v1460[1];
            void *v1459 = *v1460;
            v1459[1] = v1461;
            uint64_t v1462 = v1346[16];
            v1463 = (void *)((char *)v1344 + v1462);
            uint64_t v1464 = (void *)((char *)v1345 + v1462);
            uint64_t v1465 = v1464[1];
            void *v1463 = *v1464;
            v1463[1] = v1465;
            uint64_t v1466 = v1346[17];
            uint64_t v1467 = (void *)((char *)v1344 + v1466);
            uint64_t v1468 = (void *)((char *)v1345 + v1466);
            uint64_t v1469 = v1468[1];
            *uint64_t v1467 = *v1468;
            v1467[1] = v1469;
            uint64_t v1470 = v1346[18];
            v2582 = (char *)v1345 + v1470;
            v2597 = (char *)v1344 + v1470;
            uint64_t v1471 = type metadata accessor for DateComponents();
            uint64_t v1472 = *(void (**)(char *, char *, uint64_t))(*(void *)(v1471 - 8) + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1472(v2597, v2582, v1471);
            v1472((char *)v1344 + v1346[19], (char *)v1345 + v1346[19], v1471);
            uint64_t v1473 = v1346[20];
            v1474 = (void *)((char *)v1344 + v1473);
            uint64_t v1475 = (void *)((char *)v1345 + v1473);
            uint64_t v1476 = v1475[1];
            void *v1474 = *v1475;
            v1474[1] = v1476;
            uint64_t v1477 = v1346[21];
            v1478 = (void *)((char *)v1344 + v1477);
            uint64_t v1479 = (void *)((char *)v1345 + v1477);
            uint64_t v1480 = v1479[1];
            void *v1478 = *v1479;
            v1478[1] = v1480;
            uint64_t v1481 = v1346[22];
            v1482 = (void *)((char *)v1344 + v1481);
            uint64_t v1483 = (void *)((char *)v1345 + v1481);
            v2598 = (void *)v1483[1];
            void *v1482 = *v1483;
            v1482[1] = v2598;
            uint64_t v1484 = v1346[23];
            v1485 = (void *)((char *)v1344 + v1484);
            uint64_t v1486 = (void *)((char *)v1345 + v1484);
            v2583 = (void *)v1486[1];
            void *v1485 = *v1486;
            v1485[1] = v2583;
            uint64_t v1487 = v1346[24];
            v1488 = (void *)((char *)v1344 + v1487);
            v1489 = (void *)((char *)v1345 + v1487);
            v2562 = (void *)v1489[1];
            void *v1488 = *v1489;
            v1488[1] = v2562;
            uint64_t v1490 = v1346[25];
            uint64_t v1491 = (void *)((char *)v1344 + v1490);
            v1492 = (void *)((char *)v1345 + v1490);
            __dste = (void *)v1492[1];
            *uint64_t v1491 = *v1492;
            v1491[1] = __dste;
            uint64_t v1493 = v1346[26];
            uint64_t v1494 = (void *)((char *)v1344 + v1493);
            v1495 = (void *)((char *)v1345 + v1493);
            uint64_t v2527 = v1495[1];
            *uint64_t v1494 = *v1495;
            v1494[1] = v2527;
            uint64_t v1496 = v1346[27];
            uint64_t v1497 = (void *)((char *)v1344 + v1496);
            uint64_t v1498 = (void *)((char *)v1345 + v1496);
            uint64_t v2521 = v1498[1];
            *uint64_t v1497 = *v1498;
            v1497[1] = v2521;
            uint64_t v1499 = v1346[28];
            v1500 = (void *)((char *)v1344 + v1499);
            uint64_t v1501 = (void *)((char *)v1345 + v1499);
            uint64_t v2515 = v1501[1];
            void *v1500 = *v1501;
            v1500[1] = v2515;
            uint64_t v1502 = v1346[29];
            v1503 = (void *)((char *)v1344 + v1502);
            uint64_t v1504 = (void *)((char *)v1345 + v1502);
            uint64_t v2511 = (void *)v1504[1];
            void *v1503 = *v1504;
            v1503[1] = v2511;
            uint64_t v1505 = v1346[30];
            v1506 = (void *)((char *)v1344 + v1505);
            uint64_t v1507 = (void *)((char *)v1345 + v1505);
            uint64_t v2506 = v1507[1];
            void *v1506 = *v1507;
            v1506[1] = v2506;
            uint64_t v1508 = v1346[31];
            v1509 = (void *)((char *)v1344 + v1508);
            uint64_t v1510 = (void *)((char *)v1345 + v1508);
            uint64_t v2502 = v1510[1];
            void *v1509 = *v1510;
            v1509[1] = v2502;
            uint64_t v1511 = v1346[32];
            v1512 = (void *)((char *)v1344 + v1511);
            uint64_t v1513 = (void *)((char *)v1345 + v1511);
            uint64_t v1514 = v1513[1];
            void *v1512 = *v1513;
            v1512[1] = v1514;
            *(void *)((char *)v1344 + v1346[33]) = *(void *)((char *)v1345 + v1346[33]);
            *(void *)((char *)v1344 + v1346[34]) = *(void *)((char *)v1345 + v1346[34]);
            uint64_t v1515 = v1346[35];
            uint64_t v1516 = (void *)((char *)v1344 + v1515);
            v1517 = (void *)((char *)v1345 + v1515);
            uint64_t v1518 = v1517[1];
            *uint64_t v1516 = *v1517;
            v1516[1] = v1518;
            uint64_t v1519 = v1346[36];
            v1520 = (void *)((char *)v1344 + v1519);
            v1521 = (void *)((char *)v1345 + v1519);
            uint64_t v1522 = v1521[1];
            void *v1520 = *v1521;
            v1520[1] = v1522;
            uint64_t v1523 = v1346[37];
            v1524 = (void *)((char *)v1344 + v1523);
            uint64_t v1525 = (void *)((char *)v1345 + v1523);
            uint64_t v1526 = v1525[1];
            void *v1524 = *v1525;
            v1524[1] = v1526;
            uint64_t v1527 = v1346[38];
            v2544 = (char *)v1344 + v1527;
            uint64_t v1528 = (char *)v1345 + v1527;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1528, 1, v2647))
            {
              uint64_t v1529 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2544, v1528, *(void *)(*(void *)(v1529 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2647 - 8) + 16))(v2544, v1528, v2647);
              __swift_storeEnumTagSinglePayload((uint64_t)v2544, 0, 1, v2647);
            }
            uint64_t v1652 = v1346[39];
            uint64_t v1653 = (void *)((char *)v1344 + v1652);
            uint64_t v1654 = (void *)((char *)v1345 + v1652);
            uint64_t v1655 = v1654[1];
            *uint64_t v1653 = *v1654;
            v1653[1] = v1655;
            uint64_t v1656 = v1346[40];
            uint64_t v1657 = (void *)((char *)v1344 + v1656);
            uint64_t v1658 = (void *)((char *)v1345 + v1656);
            uint64_t v1659 = v1658[1];
            *uint64_t v1657 = *v1658;
            v1657[1] = v1659;
            uint64_t v1660 = v1346[41];
            uint64_t v1661 = (char *)v1344 + v1660;
            uint64_t v1662 = (char *)v1345 + v1660;
            v1661[8] = v1662[8];
            *(void *)uint64_t v1661 = *(void *)v1662;
            uint64_t v1663 = v1346[42];
            v1664 = (void *)((char *)v1344 + v1663);
            uint64_t v1665 = (void *)((char *)v1345 + v1663);
            uint64_t v1666 = v1665[1];
            void *v1664 = *v1665;
            v1664[1] = v1666;
            uint64_t v1667 = v1346[43];
            v1668 = (char *)v1344 + v1667;
            uint64_t v1669 = (char *)v1345 + v1667;
            *(_OWORD *)v1668 = *(_OWORD *)v1669;
            *(void *)(v1668 + 13) = *(void *)(v1669 + 13);
            uint64_t v1670 = v1346[44];
            v1671 = (void *)((char *)v1344 + v1670);
            v1672 = (void *)((char *)v1345 + v1670);
            uint64_t v1673 = v1672[1];
            void *v1671 = *v1672;
            v1671[1] = v1673;
            uint64_t v1674 = v1346[45];
            v1675 = (void *)((char *)v1344 + v1674);
            uint64_t v1676 = (void *)((char *)v1345 + v1674);
            uint64_t v1677 = v1676[1];
            void *v1675 = *v1676;
            v1675[1] = v1677;
            uint64_t v1678 = v1346[46];
            v1679 = (void *)((char *)v1344 + v1678);
            uint64_t v1680 = (void *)((char *)v1345 + v1678);
            uint64_t v1681 = v1680[1];
            void *v1679 = *v1680;
            v1679[1] = v1681;
            uint64_t v1682 = v1346[47];
            uint64_t v1683 = (void *)((char *)v1344 + v1682);
            uint64_t v1684 = (void *)((char *)v1345 + v1682);
            uint64_t v1685 = v1684[1];
            *uint64_t v1683 = *v1684;
            v1683[1] = v1685;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1344, 0, 1, (uint64_t)v1346);
            uint64_t v8 = v2700;
            uint64_t v374 = v2625;
            uint64_t v544 = (uint64_t)v2641;
            long long v375 = v2611;
          }
          uint64_t v1686 = v374[12];
          uint64_t v1687 = (void *)(v544 + v1686);
          uint64_t v1688 = (void *)((char *)v375 + v1686);
          v1689 = (int *)type metadata accessor for HotelReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1688, 1, (uint64_t)v1689))
          {
            uint64_t v1690 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
            memcpy(v1687, v1688, *(void *)(*(void *)(v1690 - 8) + 64));
          }
          else
          {
            uint64_t v1691 = v1688[1];
            *uint64_t v1687 = *v1688;
            v1687[1] = v1691;
            uint64_t v1692 = v1688[3];
            v1687[2] = v1688[2];
            v1687[3] = v1692;
            uint64_t v1693 = v1688[5];
            v1687[4] = v1688[4];
            v1687[5] = v1693;
            uint64_t v1694 = v1688[7];
            v1687[6] = v1688[6];
            v1687[7] = v1694;
            uint64_t v1695 = v1688[9];
            v1687[8] = v1688[8];
            v1687[9] = v1695;
            uint64_t v1696 = v1688[11];
            v1687[10] = v1688[10];
            v1687[11] = v1696;
            *((unsigned char *)v1687 + 96) = *((unsigned char *)v1688 + 96);
            uint64_t v1697 = v1688[14];
            v1687[13] = v1688[13];
            v1687[14] = v1697;
            uint64_t v1698 = v1688[16];
            v1687[15] = v1688[15];
            v1687[16] = v1698;
            uint64_t v1699 = v1689[14];
            v2599 = (char *)v1687 + v1699;
            v2529 = (char *)v1688 + v1699;
            uint64_t v1700 = type metadata accessor for DateComponents();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2529, 1, v1700))
            {
              uint64_t v1701 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v2599, v2529, *(void *)(*(void *)(v1701 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1700 - 8) + 16))(v2599, v2529, v1700);
              __swift_storeEnumTagSinglePayload((uint64_t)v2599, 0, 1, v1700);
            }
            uint64_t v1756 = v1689[15];
            uint64_t v1757 = (char *)v1687 + v1756;
            uint64_t v1758 = (char *)v1688 + v1756;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1688 + v1756, 1, v1700))
            {
              uint64_t v1759 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1757, v1758, *(void *)(*(void *)(v1759 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1700 - 8) + 16))(v1757, v1758, v1700);
              __swift_storeEnumTagSinglePayload((uint64_t)v1757, 0, 1, v1700);
            }
            uint64_t v1823 = v1689[16];
            uint64_t v1824 = (void *)((char *)v1687 + v1823);
            uint64_t v1825 = (void *)((char *)v1688 + v1823);
            uint64_t v1826 = v1825[1];
            *uint64_t v1824 = *v1825;
            v1824[1] = v1826;
            uint64_t v1827 = v1689[17];
            uint64_t v1828 = (void *)((char *)v1687 + v1827);
            uint64_t v1829 = (void *)((char *)v1688 + v1827);
            uint64_t v1830 = v1829[1];
            *uint64_t v1828 = *v1829;
            v1828[1] = v1830;
            uint64_t v1831 = v1689[18];
            uint64_t v1832 = (void *)((char *)v1687 + v1831);
            v1833 = (void *)((char *)v1688 + v1831);
            v2600 = (void *)v1833[1];
            *uint64_t v1832 = *v1833;
            v1832[1] = v2600;
            uint64_t v1834 = v1689[19];
            uint64_t v1835 = (void *)((char *)v1687 + v1834);
            uint64_t v1836 = (void *)((char *)v1688 + v1834);
            v2588 = (void *)v1836[1];
            *uint64_t v1835 = *v1836;
            v1835[1] = v2588;
            uint64_t v1837 = v1689[20];
            v1838 = (void *)((char *)v1687 + v1837);
            uint64_t v1839 = (void *)((char *)v1688 + v1837);
            uint64_t v1840 = v1839[1];
            void *v1838 = *v1839;
            v1838[1] = v1840;
            *(void *)((char *)v1687 + v1689[21]) = *(void *)((char *)v1688 + v1689[21]);
            *(void *)((char *)v1687 + v1689[22]) = *(void *)((char *)v1688 + v1689[22]);
            uint64_t v1841 = v1689[23];
            v1842 = (char *)v1687 + v1841;
            uint64_t v1843 = (char *)v1688 + v1841;
            *(void *)v1842 = *(void *)v1843;
            v1842[8] = v1843[8];
            uint64_t v1844 = v1689[24];
            v1845 = (char *)v1687 + v1844;
            uint64_t v1846 = (char *)v1688 + v1844;
            *(void *)v1845 = *(void *)v1846;
            v1845[8] = v1846[8];
            uint64_t v1847 = v1689[25];
            v1848 = (void *)((char *)v1687 + v1847);
            uint64_t v1849 = (void *)((char *)v1688 + v1847);
            uint64_t v1850 = v1849[1];
            void *v1848 = *v1849;
            v1848[1] = v1850;
            uint64_t v1851 = v1689[26];
            v1852 = (void *)((char *)v1687 + v1851);
            uint64_t v1853 = (void *)((char *)v1688 + v1851);
            uint64_t v1854 = v1853[1];
            void *v1852 = *v1853;
            v1852[1] = v1854;
            uint64_t v1855 = v1689[27];
            uint64_t v1856 = (void *)((char *)v1687 + v1855);
            v1857 = (void *)((char *)v1688 + v1855);
            uint64_t v1858 = v1857[1];
            *uint64_t v1856 = *v1857;
            v1856[1] = v1858;
            uint64_t v1859 = v1689[28];
            uint64_t v1860 = (void *)((char *)v1687 + v1859);
            v1861 = (void *)((char *)v1688 + v1859);
            uint64_t v1862 = v1861[1];
            *uint64_t v1860 = *v1861;
            v1860[1] = v1862;
            uint64_t v1863 = v1689[29];
            uint64_t v1864 = (char *)v1687 + v1863;
            v1865 = (char *)v1688 + v1863;
            *(void *)uint64_t v1864 = *(void *)v1865;
            v1864[8] = v1865[8];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1687, 0, 1, (uint64_t)v1689);
            uint64_t v8 = v2700;
            uint64_t v374 = v2625;
            uint64_t v544 = (uint64_t)v2641;
            long long v375 = v2611;
          }
          uint64_t v1866 = v374[13];
          uint64_t v1867 = (void *)(v544 + v1866);
          uint64_t v1868 = (void *)((char *)v375 + v1866);
          v1869 = (int *)type metadata accessor for RestaurantReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1868, 1, (uint64_t)v1869))
          {
            uint64_t v1870 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
            memcpy(v1867, v1868, *(void *)(*(void *)(v1870 - 8) + 64));
          }
          else
          {
            uint64_t v1871 = v1868[1];
            *uint64_t v1867 = *v1868;
            v1867[1] = v1871;
            uint64_t v1872 = v1868[3];
            v1867[2] = v1868[2];
            v1867[3] = v1872;
            uint64_t v1873 = v1868[5];
            v1867[4] = v1868[4];
            v1867[5] = v1873;
            uint64_t v1874 = v1868[7];
            v1867[6] = v1868[6];
            v1867[7] = v1874;
            uint64_t v1875 = v1868[9];
            v1867[8] = v1868[8];
            v1867[9] = v1875;
            uint64_t v1876 = v1868[11];
            v1867[10] = v1868[10];
            v1867[11] = v1876;
            *((unsigned char *)v1867 + 96) = *((unsigned char *)v1868 + 96);
            uint64_t v1877 = v1868[14];
            v1867[13] = v1868[13];
            v1867[14] = v1877;
            uint64_t v1878 = v1868[16];
            v1867[15] = v1868[15];
            v1867[16] = v1878;
            uint64_t v1879 = v1869[14];
            uint64_t v2614 = (char *)v1867 + v1879;
            __dstb = (char *)v1868 + v1879;
            uint64_t v1880 = type metadata accessor for DateComponents();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)__dstb, 1, v1880))
            {
              uint64_t v1881 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v2614, __dstb, *(void *)(*(void *)(v1881 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1880 - 8) + 16))(v2614, __dstb, v1880);
              __swift_storeEnumTagSinglePayload((uint64_t)v2614, 0, 1, v1880);
            }
            uint64_t v2121 = v1869[15];
            v2122 = (void *)((char *)v1867 + v2121);
            uint64_t v2123 = (void *)((char *)v1868 + v2121);
            uint64_t v2124 = v2123[1];
            void *v2122 = *v2123;
            v2122[1] = v2124;
            uint64_t v2125 = v1869[16];
            v2126 = (void *)((char *)v1867 + v2125);
            uint64_t v2127 = (void *)((char *)v1868 + v2125);
            uint64_t v2128 = v2127[1];
            void *v2126 = *v2127;
            v2126[1] = v2128;
            uint64_t v2129 = v1869[17];
            uint64_t v2130 = (void *)((char *)v1867 + v2129);
            uint64_t v2131 = (void *)((char *)v1868 + v2129);
            uint64_t v2618 = v2131[1];
            *uint64_t v2130 = *v2131;
            v2130[1] = v2618;
            uint64_t v2132 = v1869[18];
            uint64_t v2133 = (void *)((char *)v1867 + v2132);
            uint64_t v2134 = (void *)((char *)v1868 + v2132);
            uint64_t v2135 = v2134[1];
            *uint64_t v2133 = *v2134;
            v2133[1] = v2135;
            uint64_t v2136 = v1869[19];
            v2137 = (void *)((char *)v1867 + v2136);
            uint64_t v2138 = (void *)((char *)v1868 + v2136);
            uint64_t v2139 = v2138[1];
            void *v2137 = *v2138;
            v2137[1] = v2139;
            *(void *)((char *)v1867 + v1869[20]) = *(void *)((char *)v1868 + v1869[20]);
            uint64_t v2140 = v1869[21];
            v2141 = (void *)((char *)v1867 + v2140);
            uint64_t v2142 = (void *)((char *)v1868 + v2140);
            uint64_t v2143 = v2142[1];
            void *v2141 = *v2142;
            v2141[1] = v2143;
            uint64_t v2144 = v1869[22];
            v2145 = (void *)((char *)v1867 + v2144);
            uint64_t v2146 = (void *)((char *)v1868 + v2144);
            uint64_t v2147 = v2146[1];
            void *v2145 = *v2146;
            v2145[1] = v2147;
            uint64_t v2148 = v1869[23];
            uint64_t v2149 = (void *)((char *)v1867 + v2148);
            uint64_t v2150 = (void *)((char *)v1868 + v2148);
            uint64_t v2151 = v2150[1];
            *uint64_t v2149 = *v2150;
            v2149[1] = v2151;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1867, 0, 1, (uint64_t)v1869);
            uint64_t v8 = v2700;
            uint64_t v374 = v2625;
            uint64_t v544 = (uint64_t)v2641;
          }
          __swift_storeEnumTagSinglePayload(v544, 0, 1, (uint64_t)v374);
        }
        uint64_t v2152 = v2661[18];
        uint64_t v2153 = (void *)((char *)v8 + v2152);
        uint64_t v2154 = (void *)((char *)v9 + v2152);
        v2155 = (int *)type metadata accessor for PreExtractedCard(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2154, 1, (uint64_t)v2155))
        {
          uint64_t v2156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
          memcpy(v2153, v2154, *(void *)(*(void *)(v2156 - 8) + 64));
        }
        else
        {
          uint64_t v2157 = v2154[1];
          *uint64_t v2153 = *v2154;
          v2153[1] = v2157;
          uint64_t v2158 = v2154[3];
          v2153[2] = v2154[2];
          v2153[3] = v2158;
          uint64_t v2159 = v2154[5];
          v2153[4] = v2154[4];
          v2153[5] = v2159;
          uint64_t v2160 = v2154[7];
          v2153[6] = v2154[6];
          v2153[7] = v2160;
          uint64_t v2161 = v2154[9];
          v2153[8] = v2154[8];
          v2153[9] = v2161;
          uint64_t v2162 = v2154[11];
          v2153[10] = v2154[10];
          v2153[11] = v2162;
          uint64_t v2163 = v2155[10];
          v2643 = (char *)v2153 + v2163;
          v2164 = (char *)v2154 + v2163;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2164, 1, v2647))
          {
            uint64_t v2165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2643, v2164, *(void *)(*(void *)(v2165 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2647 - 8) + 16))(v2643, v2164, v2647);
            __swift_storeEnumTagSinglePayload((uint64_t)v2643, 0, 1, v2647);
          }
          uint64_t v2166 = v2155[11];
          v2167 = (char *)v2153 + v2166;
          v2168 = (char *)v2154 + v2166;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2154 + v2166, 1, v2647))
          {
            uint64_t v2169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2167, v2168, *(void *)(*(void *)(v2169 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2647 - 8) + 16))(v2167, v2168, v2647);
            __swift_storeEnumTagSinglePayload((uint64_t)v2167, 0, 1, v2647);
          }
          uint64_t v2170 = v2155[12];
          uint64_t v2171 = (void *)((char *)v2153 + v2170);
          uint64_t v2172 = (void *)((char *)v2154 + v2170);
          uint64_t v2173 = v2172[1];
          *uint64_t v2171 = *v2172;
          v2171[1] = v2173;
          uint64_t v2174 = v2155[13];
          uint64_t v2175 = (void *)((char *)v2153 + v2174);
          uint64_t v2176 = (void *)((char *)v2154 + v2174);
          uint64_t v2177 = v2176[1];
          *uint64_t v2175 = *v2176;
          v2175[1] = v2177;
          uint64_t v2178 = v2155[14];
          uint64_t v2179 = (void *)((char *)v2153 + v2178);
          uint64_t v2180 = (void *)((char *)v2154 + v2178);
          uint64_t v2181 = v2180[1];
          *uint64_t v2179 = *v2180;
          v2179[1] = v2181;
          uint64_t v2182 = v2155[15];
          uint64_t v2183 = (char *)v2153 + v2182;
          uint64_t v2184 = (char *)v2154 + v2182;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2184, 1, v2647))
          {
            uint64_t v2185 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2183, v2184, *(void *)(*(void *)(v2185 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2647 - 8) + 16))(v2183, v2184, v2647);
            __swift_storeEnumTagSinglePayload((uint64_t)v2183, 0, 1, v2647);
          }
          uint64_t v2186 = v2155[16];
          uint64_t v2187 = (void *)((char *)v2153 + v2186);
          uint64_t v2188 = (void *)((char *)v2154 + v2186);
          uint64_t v2189 = v2188[1];
          *uint64_t v2187 = *v2188;
          v2187[1] = v2189;
          uint64_t v2190 = v2155[17];
          uint64_t v2191 = (void *)((char *)v2153 + v2190);
          uint64_t v2192 = (void *)((char *)v2154 + v2190);
          uint64_t v2193 = v2192[1];
          *uint64_t v2191 = *v2192;
          v2191[1] = v2193;
          uint64_t v2194 = v2155[18];
          uint64_t v2195 = (void *)((char *)v2153 + v2194);
          uint64_t v2196 = (void *)((char *)v2154 + v2194);
          uint64_t v2197 = v2196[1];
          *uint64_t v2195 = *v2196;
          v2195[1] = v2197;
          uint64_t v2198 = v2155[19];
          uint64_t v2199 = (void *)((char *)v2153 + v2198);
          uint64_t v2200 = (void *)((char *)v2154 + v2198);
          uint64_t v2201 = v2200[1];
          *uint64_t v2199 = *v2200;
          v2199[1] = v2201;
          uint64_t v2202 = v2155[20];
          uint64_t v2203 = (void *)((char *)v2153 + v2202);
          uint64_t v2204 = (void *)((char *)v2154 + v2202);
          uint64_t v2205 = v2204[1];
          *uint64_t v2203 = *v2204;
          v2203[1] = v2205;
          uint64_t v2206 = v2155[21];
          uint64_t v2207 = (void *)((char *)v2153 + v2206);
          uint64_t v2208 = (void *)((char *)v2154 + v2206);
          uint64_t v2209 = v2208[1];
          *uint64_t v2207 = *v2208;
          v2207[1] = v2209;
          uint64_t v2210 = v2155[22];
          uint64_t v2211 = (void *)((char *)v2153 + v2210);
          uint64_t v2212 = (void *)((char *)v2154 + v2210);
          uint64_t v2213 = v2212[1];
          *uint64_t v2211 = *v2212;
          v2211[1] = v2213;
          uint64_t v2214 = v2155[23];
          uint64_t v2215 = (void *)((char *)v2153 + v2214);
          uint64_t v2216 = (void *)((char *)v2154 + v2214);
          uint64_t v2217 = v2216[1];
          *uint64_t v2215 = *v2216;
          v2215[1] = v2217;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2153, 0, 1, (uint64_t)v2155);
          uint64_t v8 = v2700;
        }
        uint64_t v2218 = v2661[19];
        uint64_t v2219 = (void *)((char *)v8 + v2218);
        uint64_t v2220 = (void *)((char *)v9 + v2218);
        v2221 = (int *)type metadata accessor for PreExtractedContact(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2220, 1, (uint64_t)v2221))
        {
          uint64_t v2222 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
          memcpy(v2219, v2220, *(void *)(*(void *)(v2222 - 8) + 64));
        }
        else
        {
          uint64_t v2223 = v2220[1];
          *uint64_t v2219 = *v2220;
          v2219[1] = v2223;
          uint64_t v2224 = v2220[3];
          v2219[2] = v2220[2];
          v2219[3] = v2224;
          uint64_t v2225 = v2220[5];
          v2219[4] = v2220[4];
          v2219[5] = v2225;
          uint64_t v2226 = v2220[7];
          v2219[6] = v2220[6];
          v2219[7] = v2226;
          uint64_t v2227 = v2220[9];
          v2219[8] = v2220[8];
          v2219[9] = v2227;
          uint64_t v2628 = v2220[11];
          v2219[10] = v2220[10];
          v2219[11] = v2628;
          uint64_t v2228 = v2221[11];
          uint64_t v2644 = (char *)v2219 + v2228;
          v2229 = (char *)v2220 + v2228;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2229, 1, v2647))
          {
            uint64_t v2230 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2644, v2229, *(void *)(*(void *)(v2230 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2647 - 8) + 16))(v2644, v2229, v2647);
            __swift_storeEnumTagSinglePayload((uint64_t)v2644, 0, 1, v2647);
          }
          uint64_t v2231 = v2221[12];
          uint64_t v2232 = (void *)((char *)v2219 + v2231);
          v2233 = (void *)((char *)v2220 + v2231);
          uint64_t v2234 = v2233[1];
          *uint64_t v2232 = *v2233;
          v2232[1] = v2234;
          *(void *)((char *)v2219 + v2221[13]) = *(void *)((char *)v2220 + v2221[13]);
          uint64_t v2235 = v2221[14];
          uint64_t v2236 = (char *)v2219 + v2235;
          uint64_t v2237 = (char *)v2220 + v2235;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v8 = v2700;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2237, 1, v2647))
          {
            uint64_t v2238 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2236, v2237, *(void *)(*(void *)(v2238 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2647 - 8) + 16))(v2236, v2237, v2647);
            __swift_storeEnumTagSinglePayload((uint64_t)v2236, 0, 1, v2647);
          }
          *(void *)((char *)v2219 + v2221[15]) = *(void *)((char *)v2220 + v2221[15]);
          *(void *)((char *)v2219 + v2221[16]) = *(void *)((char *)v2220 + v2221[16]);
          uint64_t v2239 = v2221[17];
          uint64_t v2240 = (void *)((char *)v2219 + v2239);
          uint64_t v2241 = (void *)((char *)v2220 + v2239);
          uint64_t v2242 = v2241[1];
          *uint64_t v2240 = *v2241;
          v2240[1] = v2242;
          *(void *)((char *)v2219 + v2221[18]) = *(void *)((char *)v2220 + v2221[18]);
          *(void *)((char *)v2219 + v2221[19]) = *(void *)((char *)v2220 + v2221[19]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2219, 0, 1, (uint64_t)v2221);
        }
        uint64_t v2243 = v2661[20];
        uint64_t v2244 = (void *)((char *)v8 + v2243);
        v2245 = (void *)((char *)v9 + v2243);
        v2246 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2245, 1, (uint64_t)v2246))
        {
          uint64_t v2247 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
          memcpy(v2244, v2245, *(void *)(*(void *)(v2247 - 8) + 64));
        }
        else
        {
          uint64_t v2248 = v2245[1];
          *uint64_t v2244 = *v2245;
          v2244[1] = v2248;
          uint64_t v2249 = v2245[3];
          v2244[2] = v2245[2];
          v2244[3] = v2249;
          uint64_t v2250 = v2245[5];
          v2244[4] = v2245[4];
          v2244[5] = v2250;
          uint64_t v2251 = v2245[7];
          v2244[6] = v2245[6];
          v2244[7] = v2251;
          uint64_t v2252 = v2246[8];
          v2645 = (char *)v2244 + v2252;
          v2253 = (char *)v2245 + v2252;
          uint64_t v2254 = type metadata accessor for URL();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2253, 1, v2254))
          {
            uint64_t v2255 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v2645, v2253, *(void *)(*(void *)(v2255 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2254 - 8) + 16))(v2645, v2253, v2254);
            __swift_storeEnumTagSinglePayload((uint64_t)v2645, 0, 1, v2254);
          }
          uint64_t v2256 = v2246[9];
          v2257 = (void *)((char *)v2244 + v2256);
          v2258 = (void *)((char *)v2245 + v2256);
          uint64_t v2259 = v2258[1];
          void *v2257 = *v2258;
          v2257[1] = v2259;
          uint64_t v2260 = v2246[10];
          uint64_t v2261 = (void *)((char *)v2244 + v2260);
          uint64_t v2262 = (void *)((char *)v2245 + v2260);
          uint64_t v2263 = v2262[1];
          *uint64_t v2261 = *v2262;
          v2261[1] = v2263;
          uint64_t v2264 = v2246[11];
          uint64_t v2265 = (void *)((char *)v2244 + v2264);
          v2266 = (void *)((char *)v2245 + v2264);
          uint64_t v2267 = v2266[1];
          *uint64_t v2265 = *v2266;
          v2265[1] = v2267;
          uint64_t v2268 = v2246[12];
          uint64_t v2269 = (char *)v2244 + v2268;
          v2270 = (char *)v2245 + v2268;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v8 = v2700;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2270, 1, v2647))
          {
            uint64_t v2271 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2269, v2270, *(void *)(*(void *)(v2271 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2647 - 8) + 16))(v2269, v2270, v2647);
            __swift_storeEnumTagSinglePayload((uint64_t)v2269, 0, 1, v2647);
          }
          uint64_t v2272 = v2246[13];
          uint64_t v2273 = (char *)v2244 + v2272;
          v2274 = (char *)v2245 + v2272;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2245 + v2272, 1, v2647))
          {
            uint64_t v2275 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2273, v2274, *(void *)(*(void *)(v2275 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2647 - 8) + 16))(v2273, v2274, v2647);
            __swift_storeEnumTagSinglePayload((uint64_t)v2273, 0, 1, v2647);
          }
          uint64_t v2276 = v2246[14];
          uint64_t v2277 = (char *)v2244 + v2276;
          v2278 = (char *)v2245 + v2276;
          *(void *)uint64_t v2277 = *(void *)v2278;
          v2277[8] = v2278[8];
          uint64_t v2279 = v2246[15];
          uint64_t v2280 = (void *)((char *)v2244 + v2279);
          uint64_t v2281 = (void *)((char *)v2245 + v2279);
          uint64_t v2282 = v2281[1];
          *uint64_t v2280 = *v2281;
          v2280[1] = v2282;
          uint64_t v2283 = v2246[16];
          uint64_t v2284 = (void *)((char *)v2244 + v2283);
          uint64_t v2285 = (void *)((char *)v2245 + v2283);
          uint64_t v2286 = v2285[1];
          *uint64_t v2284 = *v2285;
          v2284[1] = v2286;
          uint64_t v2287 = v2246[17];
          uint64_t v2288 = (void *)((char *)v2244 + v2287);
          uint64_t v2289 = (void *)((char *)v2245 + v2287);
          uint64_t v2290 = v2289[1];
          *uint64_t v2288 = *v2289;
          v2288[1] = v2290;
          uint64_t v2291 = v2246[18];
          uint64_t v2292 = (void *)((char *)v2244 + v2291);
          v2293 = (void *)((char *)v2245 + v2291);
          uint64_t v2294 = v2293[1];
          *uint64_t v2292 = *v2293;
          v2292[1] = v2294;
          uint64_t v2295 = v2246[19];
          uint64_t v2296 = (void *)((char *)v2244 + v2295);
          v2297 = (void *)((char *)v2245 + v2295);
          uint64_t v2298 = v2297[1];
          *uint64_t v2296 = *v2297;
          v2296[1] = v2298;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2244, 0, 1, (uint64_t)v2246);
        }
        uint64_t v2120 = v2661[21];
        goto LABEL_537;
      case 4u:
        uint64_t v2682 = v4;
        v2691 = v3;
        uint64_t v64 = v8;
        uint64_t v65 = v5;
        uint64_t v66 = v9[1];
        *uint64_t v64 = *v9;
        v64[1] = v66;
        uint64_t v67 = v9[3];
        v64[2] = v9[2];
        v64[3] = v67;
        uint64_t v68 = v9[5];
        v64[4] = v9[4];
        v64[5] = v68;
        uint64_t v69 = v9[7];
        v64[6] = v9[6];
        v64[7] = v69;
        uint64_t v70 = type metadata accessor for NoteDocument(0);
        uint64_t v71 = *(int *)(v70 + 32);
        uint64_t v72 = (char *)v64 + v71;
        uint64_t v73 = (char *)v9 + v71;
        uint64_t v74 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v73, 1, v74))
        {
          uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v72, v73, *(void *)(*(void *)(v75 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 16))(v72, v73, v74);
          __swift_storeEnumTagSinglePayload((uint64_t)v72, 0, 1, v74);
        }
        uint64_t v5 = v65;
        uint64_t v4 = v2682;
        uint64_t v3 = v2691;
        uint64_t v8 = v2700;
        uint64_t v10 = v2699;
        uint64_t v377 = *(int *)(v70 + 36);
        goto LABEL_147;
      case 5u:
        uint64_t v2689 = v3;
        uint64_t v76 = v8;
        uint64_t v77 = v4;
        uint64_t v78 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v78;
        uint64_t v79 = v9[3];
        v8[2] = v9[2];
        v8[3] = v79;
        uint64_t v80 = v9[5];
        v8[4] = v9[4];
        v8[5] = v80;
        uint64_t v81 = (int *)type metadata accessor for Reminder(0);
        uint64_t v82 = v81[7];
        uint64_t v83 = (char *)v76 + v82;
        uint64_t v84 = (char *)v9 + v82;
        uint64_t v85 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v84, 1, v85))
        {
          uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v83, v84, *(void *)(*(void *)(v86 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v85 - 8) + 16))(v83, v84, v85);
          __swift_storeEnumTagSinglePayload((uint64_t)v83, 0, 1, v85);
        }
        uint64_t v4 = v77;
        uint64_t v378 = v81[8];
        uint64_t v379 = (char *)v2700 + v378;
        v380 = (char *)v9 + v378;
        if (__swift_getEnumTagSinglePayload((uint64_t)v9 + v378, 1, v85))
        {
          uint64_t v381 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v379, v380, *(void *)(*(void *)(v381 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v85 - 8) + 16))(v379, v380, v85);
          __swift_storeEnumTagSinglePayload((uint64_t)v379, 0, 1, v85);
        }
        *((unsigned char *)v2700 + v81[9]) = *((unsigned char *)v9 + v81[9]);
        uint64_t v546 = v81[10];
        uint64_t v547 = (void *)((char *)v2700 + v546);
        uint64_t v548 = (void *)((char *)v9 + v546);
        uint64_t v549 = v548[1];
        *uint64_t v547 = *v548;
        v547[1] = v549;
        uint64_t v550 = v81[11];
        uint64_t v551 = (void *)((char *)v2700 + v550);
        long long v552 = (void *)((char *)v9 + v550);
        uint64_t v553 = v552[1];
        *uint64_t v551 = *v552;
        v551[1] = v553;
        uint64_t v554 = v81[12];
        uint64_t v8 = v2700;
        uint64_t v555 = (char *)v2700 + v554;
        uint64_t v556 = (char *)v9 + v554;
        uint64_t v557 = type metadata accessor for URL();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v556, 1, v557))
        {
          uint64_t v558 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v555, v556, *(void *)(*(void *)(v558 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v557 - 8) + 16))(v555, v556, v557);
          __swift_storeEnumTagSinglePayload((uint64_t)v555, 0, 1, v557);
        }
        goto LABEL_543;
      case 6u:
        uint64_t v2683 = v4;
        uint64_t v87 = v8;
        uint64_t v88 = v9[1];
        *uint64_t v87 = *v9;
        v87[1] = v88;
        uint64_t v89 = v9[3];
        v87[2] = v9[2];
        v87[3] = v89;
        uint64_t v90 = v9[5];
        v87[4] = v9[4];
        v87[5] = v90;
        uint64_t v91 = v9[7];
        v87[6] = v9[6];
        v87[7] = v91;
        uint64_t v92 = (int *)type metadata accessor for PhoneHistory(0);
        uint64_t v93 = v92[10];
        uint64_t v2662 = (char *)v87 + v93;
        uint64_t v94 = (char *)v9 + v93;
        uint64_t v95 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v94, 1, v95))
        {
          uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v2662, v94, *(void *)(*(void *)(v96 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v95 - 8) + 16))(v2662, v94, v95);
          __swift_storeEnumTagSinglePayload((uint64_t)v2662, 0, 1, v95);
        }
        uint64_t v4 = v2683;
        uint64_t v382 = v92[11];
        uint64_t v383 = (void *)((char *)v2700 + v382);
        uint64_t v384 = (void *)((char *)v9 + v382);
        uint64_t v385 = v384[1];
        void *v383 = *v384;
        v383[1] = v385;
        uint64_t v386 = v92[12];
        uint64_t v387 = (void *)((char *)v2700 + v386);
        uint64_t v388 = (void *)((char *)v9 + v386);
        uint64_t v389 = v388[1];
        void *v387 = *v388;
        v387[1] = v389;
        uint64_t v390 = v92[13];
        uint64_t v391 = v2700;
        uint64_t v392 = (char *)v2700 + v390;
        uint64_t v393 = (char *)v9 + v390;
        uint64_t v135 = type metadata accessor for URL();
        goto LABEL_83;
      case 7u:
        v2692 = v3;
        uint64_t v97 = v8;
        uint64_t v98 = v4;
        uint64_t v99 = v9[1];
        void *v97 = *v9;
        v97[1] = v99;
        uint64_t v100 = v9[3];
        v97[2] = v9[2];
        v97[3] = v100;
        uint64_t v101 = v9[5];
        v97[4] = v9[4];
        v97[5] = v101;
        uint64_t v102 = (int *)type metadata accessor for VoicemailTranscript(0);
        uint64_t v103 = v102[7];
        uint64_t v104 = (char *)v97 + v103;
        uint64_t v105 = (char *)v9 + v103;
        uint64_t v106 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v105, 1, v106))
        {
          uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v104, v105, *(void *)(*(void *)(v107 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v106 - 8) + 16))(v104, v105, v106);
          __swift_storeEnumTagSinglePayload((uint64_t)v104, 0, 1, v106);
        }
        uint64_t v4 = v98;
        uint64_t v3 = v2692;
        uint64_t v10 = v2699;
        uint64_t v8 = v2700;
        goto LABEL_80;
      case 8u:
        uint64_t v108 = v8;
        uint64_t v109 = v3;
        uint64_t v110 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v110;
        uint64_t v111 = v9[3];
        v108[2] = v9[2];
        v108[3] = v111;
        uint64_t v112 = v9[5];
        v108[4] = v9[4];
        v108[5] = v112;
        uint64_t v113 = *(int *)(type metadata accessor for JournalEntry(0) + 28);
        uint64_t v114 = (char *)v108 + v113;
        uint64_t v115 = (char *)v9 + v113;
        uint64_t v116 = type metadata accessor for URL();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v115, 1, v116))
        {
          uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v114, v115, *(void *)(*(void *)(v117 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v116 - 8) + 16))(v114, v115, v116);
          __swift_storeEnumTagSinglePayload((uint64_t)v114, 0, 1, v116);
        }
        uint64_t v3 = v109;
LABEL_162:
        uint64_t v8 = v2700;
        uint64_t v10 = v2699;
        break;
      case 9u:
        uint64_t v118 = v8;
        uint64_t v119 = v3;
        uint64_t v120 = v9[1];
        *uint64_t v118 = *v9;
        v118[1] = v120;
        uint64_t v121 = v9[3];
        v118[2] = v9[2];
        v118[3] = v121;
        uint64_t v102 = (int *)type metadata accessor for VoiceMemo(0);
        uint64_t v122 = v102[6];
        uint64_t v123 = (char *)v118 + v122;
        uint64_t v124 = (char *)v9 + v122;
        uint64_t v125 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v124, 1, v125))
        {
          uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v123, v124, *(void *)(*(void *)(v126 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v125 - 8) + 16))(v123, v124, v125);
          __swift_storeEnumTagSinglePayload((uint64_t)v123, 0, 1, v125);
        }
        uint64_t v3 = v119;
        uint64_t v8 = v2700;
        uint64_t v10 = v2699;
        uint64_t v394 = v102[7];
        uint64_t v395 = (char *)v2700 + v394;
        uint64_t v396 = (char *)v9 + v394;
        *(void *)uint64_t v395 = *(void *)v396;
        v395[8] = v396[8];
LABEL_80:
        uint64_t v397 = v102[8];
        goto LABEL_153;
      case 0xAu:
        uint64_t v127 = v8;
        uint64_t v128 = v3;
        uint64_t v129 = v9[1];
        *uint64_t v127 = *v9;
        v127[1] = v129;
        uint64_t v130 = v9[3];
        v127[2] = v9[2];
        v127[3] = v130;
        uint64_t v131 = (int *)type metadata accessor for Safari(0);
        uint64_t v132 = v131[6];
        uint64_t v133 = (char *)v127 + v132;
        uint64_t v134 = (char *)v9 + v132;
        uint64_t v135 = type metadata accessor for URL();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v134, 1, v135))
        {
          uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v133, v134, *(void *)(*(void *)(v136 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v135 - 8) + 16))(v133, v134, v135);
          __swift_storeEnumTagSinglePayload((uint64_t)v133, 0, 1, v135);
        }
        uint64_t v3 = v128;
        uint64_t v398 = v131[7];
        uint64_t v399 = (void *)((char *)v2700 + v398);
        uint64_t v400 = (void *)((char *)v9 + v398);
        uint64_t v401 = v400[1];
        *uint64_t v399 = *v400;
        v399[1] = v401;
        uint64_t v402 = v131[8];
        uint64_t v403 = (void *)((char *)v2700 + v402);
        uint64_t v404 = (void *)((char *)v9 + v402);
        uint64_t v405 = v404[1];
        *uint64_t v403 = *v404;
        v403[1] = v405;
        uint64_t v406 = v131[9];
        uint64_t v391 = v2700;
        uint64_t v392 = (char *)v2700 + v406;
        uint64_t v393 = (char *)v9 + v406;
LABEL_83:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v393, 1, v135))
        {
          uint64_t v407 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v392, v393, *(void *)(*(void *)(v407 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v135 - 8) + 16))(v392, v393, v135);
          __swift_storeEnumTagSinglePayload((uint64_t)v392, 0, 1, v135);
        }
        uint64_t v10 = v2699;
        uint64_t v8 = v391;
        break;
      case 0xBu:
        uint64_t v137 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v137;
        uint64_t v138 = (void *)v9[2];
        v8[2] = v138;
        swift_bridgeObjectRetain();
        id v139 = v138;
        break;
      case 0xCu:
        uint64_t v2693 = v3;
        uint64_t v140 = v8;
        uint64_t v141 = v4;
        uint64_t v142 = v9[1];
        *uint64_t v140 = *v9;
        v140[1] = v142;
        uint64_t v143 = v9[3];
        v140[2] = v9[2];
        v140[3] = v143;
        uint64_t v144 = v9[5];
        v140[4] = v9[4];
        v140[5] = v144;
        uint64_t v145 = (int *)type metadata accessor for WalletTransaction(0);
        uint64_t v146 = v145[7];
        uint64_t v147 = (char *)v140 + v146;
        uint64_t v148 = (char *)v9 + v146;
        uint64_t v149 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v148, 1, v149))
        {
          uint64_t v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v147, v148, *(void *)(*(void *)(v150 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v149 - 8) + 16))(v147, v148, v149);
          __swift_storeEnumTagSinglePayload((uint64_t)v147, 0, 1, v149);
        }
        uint64_t v4 = v141;
        uint64_t v3 = v2693;
        uint64_t v10 = v2699;
        uint64_t v8 = v2700;
        uint64_t v408 = v145[8];
        uint64_t v409 = (void *)((char *)v2700 + v408);
        uint64_t v410 = (void *)((char *)v9 + v408);
        uint64_t v411 = v410[1];
        *uint64_t v409 = *v410;
        v409[1] = v411;
        uint64_t v412 = v145[9];
        uint64_t v413 = (void *)((char *)v2700 + v412);
        uint64_t v414 = (void *)((char *)v9 + v412);
        uint64_t v415 = v414[1];
        *uint64_t v413 = *v414;
        v413[1] = v415;
        uint64_t v416 = v145[10];
        uint64_t v417 = (void *)((char *)v2700 + v416);
        uint64_t v418 = (void *)((char *)v9 + v416);
        uint64_t v419 = v418[1];
        *uint64_t v417 = *v418;
        v417[1] = v419;
        uint64_t v420 = v145[11];
        uint64_t v421 = (char *)v2700 + v420;
        uint64_t v422 = (char *)v9 + v420;
        *(_OWORD *)uint64_t v421 = *(_OWORD *)v422;
        *(void *)(v421 + 13) = *(void *)(v422 + 13);
        uint64_t v423 = v145[12];
        uint64_t v424 = (void *)((char *)v2700 + v423);
        uint64_t v425 = (void *)((char *)v9 + v423);
        uint64_t v426 = v425[1];
        void *v424 = *v425;
        v424[1] = v426;
        goto LABEL_89;
      case 0xDu:
        v2694 = v3;
        long long v151 = v8;
        uint64_t v152 = v4;
        uint64_t v153 = v9[1];
        *long long v151 = *v9;
        v151[1] = v153;
        uint64_t v154 = v9[3];
        v151[2] = v9[2];
        v151[3] = v154;
        uint64_t v155 = v9[5];
        v151[4] = v9[4];
        v151[5] = v155;
        uint64_t v156 = (int *)type metadata accessor for WalletPass(0);
        uint64_t v157 = v156[7];
        uint64_t v158 = (char *)v151 + v157;
        uint64_t v159 = (char *)v9 + v157;
        uint64_t v160 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v159, 1, v160))
        {
          uint64_t v161 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v158, v159, *(void *)(*(void *)(v161 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v160 - 8) + 16))(v158, v159, v160);
          __swift_storeEnumTagSinglePayload((uint64_t)v158, 0, 1, v160);
        }
        uint64_t v4 = v152;
        uint64_t v3 = v2694;
        uint64_t v10 = v2699;
        uint64_t v8 = v2700;
        uint64_t v427 = v156[8];
        uint64_t v428 = (void *)((char *)v2700 + v427);
        uint64_t v429 = (void *)((char *)v9 + v427);
        uint64_t v430 = v429[1];
        void *v428 = *v429;
        v428[1] = v430;
        *(void *)((char *)v2700 + v156[9]) = *(void *)((char *)v9 + v156[9]);
        swift_bridgeObjectRetain();
        goto LABEL_126;
      case 0xEu:
        uint64_t v162 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v162;
        uint64_t v163 = v9[3];
        v8[2] = v9[2];
        v8[3] = v163;
        uint64_t v164 = v9[5];
        v8[4] = v9[4];
        v8[5] = v164;
        uint64_t v165 = v9[7];
        v8[6] = v9[6];
        v8[7] = v165;
        uint64_t v166 = v9[8];
        uint64_t v167 = v9[9];
        v8[8] = v166;
        v8[9] = v167;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_126;
      case 0xFu:
        uint64_t v2684 = v4;
        uint64_t v2689 = v3;
        v2673 = v5;
        uint64_t v168 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v168;
        uint64_t v169 = v9[3];
        v8[2] = v9[2];
        v8[3] = v169;
        uint64_t v170 = v9[5];
        v8[4] = v9[4];
        v8[5] = v170;
        uint64_t v2663 = v9[7];
        v8[6] = v9[6];
        v8[7] = v2663;
        uint64_t v2648 = v9[9];
        v8[8] = v9[8];
        v8[9] = v2648;
        uint64_t v171 = v9[11];
        v8[10] = v9[10];
        v8[11] = v171;
        *((unsigned char *)v8 + 96) = *((unsigned char *)v9 + 96);
        uint64_t v172 = v9[14];
        v8[13] = v9[13];
        v8[14] = v172;
        uint64_t v173 = (int *)type metadata accessor for FlightReservation(0);
        uint64_t v174 = v173[13];
        uint64_t v2634 = (char *)v8 + v174;
        long long v175 = (char *)v9 + v174;
        uint64_t v176 = type metadata accessor for URL();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v175, 1, v176))
        {
          uint64_t v177 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v2634, v175, *(void *)(*(void *)(v177 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v176 - 8) + 16))(v2634, v175, v176);
          __swift_storeEnumTagSinglePayload((uint64_t)v2634, 0, 1, v176);
        }
        uint64_t v431 = v173[14];
        uint64_t v432 = (char *)v8 + v431;
        long long v433 = (char *)v9 + v431;
        if (__swift_getEnumTagSinglePayload((uint64_t)v9 + v431, 1, v176))
        {
          uint64_t v434 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v432, v433, *(void *)(*(void *)(v434 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v176 - 8) + 16))(v432, v433, v176);
          __swift_storeEnumTagSinglePayload((uint64_t)v432, 0, 1, v176);
        }
        uint64_t v559 = v173[15];
        uint64_t v560 = (void *)((char *)v8 + v559);
        uint64_t v561 = (void *)((char *)v9 + v559);
        uint64_t v562 = v561[1];
        *uint64_t v560 = *v561;
        v560[1] = v562;
        uint64_t v563 = v173[16];
        uint64_t v564 = (void *)((char *)v8 + v563);
        uint64_t v565 = (void *)((char *)v9 + v563);
        uint64_t v566 = v565[1];
        *uint64_t v564 = *v565;
        v564[1] = v566;
        uint64_t v567 = v173[17];
        long long v568 = (void *)((char *)v8 + v567);
        uint64_t v569 = (void *)((char *)v9 + v567);
        uint64_t v570 = v569[1];
        *long long v568 = *v569;
        v568[1] = v570;
        uint64_t v571 = v173[18];
        long long v572 = (char *)v8 + v571;
        uint64_t v573 = (char *)v9 + v571;
        uint64_t v574 = type metadata accessor for DateComponents();
        v575 = *(void (**)(char *, char *, uint64_t))(*(void *)(v574 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v575(v572, v573, v574);
        v575((char *)v2700 + v173[19], (char *)v9 + v173[19], v574);
        uint64_t v576 = v173[20];
        uint64_t v577 = (void *)((char *)v2700 + v576);
        uint64_t v578 = (void *)((char *)v9 + v576);
        v2569 = (void *)v578[1];
        *uint64_t v577 = *v578;
        v577[1] = v2569;
        uint64_t v579 = v173[21];
        uint64_t v580 = (void *)((char *)v2700 + v579);
        uint64_t v581 = (void *)((char *)v9 + v579);
        uint64_t v2670 = v581[1];
        *uint64_t v580 = *v581;
        v580[1] = v2670;
        uint64_t v582 = v173[22];
        v583 = (void *)((char *)v2700 + v582);
        uint64_t v584 = (void *)((char *)v9 + v582);
        uint64_t v2655 = v584[1];
        void *v583 = *v584;
        v583[1] = v2655;
        uint64_t v585 = v173[23];
        v586 = (void *)((char *)v2700 + v585);
        uint64_t v587 = (void *)((char *)v9 + v585);
        uint64_t v2642 = v587[1];
        void *v586 = *v587;
        v586[1] = v2642;
        uint64_t v588 = v173[24];
        uint64_t v589 = (void *)((char *)v2700 + v588);
        v590 = (void *)((char *)v9 + v588);
        uint64_t v2626 = v590[1];
        void *v589 = *v590;
        v589[1] = v2626;
        uint64_t v591 = v173[25];
        uint64_t v592 = (void *)((char *)v2700 + v591);
        long long v593 = (void *)((char *)v9 + v591);
        uint64_t v2612 = v593[1];
        *uint64_t v592 = *v593;
        v592[1] = v2612;
        uint64_t v594 = v173[26];
        uint64_t v595 = (void *)((char *)v2700 + v594);
        long long v596 = (void *)((char *)v9 + v594);
        v2592 = (void *)v596[1];
        *uint64_t v595 = *v596;
        v595[1] = v2592;
        uint64_t v597 = v173[27];
        uint64_t v598 = (void *)((char *)v2700 + v597);
        long long v599 = (void *)((char *)v9 + v597);
        uint64_t v2547 = (void *)v599[1];
        *uint64_t v598 = *v599;
        v598[1] = v2547;
        uint64_t v600 = v173[28];
        uint64_t v601 = (void *)((char *)v2700 + v600);
        v602 = (void *)((char *)v9 + v600);
        v2537 = (void *)v602[1];
        void *v601 = *v602;
        v601[1] = v2537;
        uint64_t v603 = v173[29];
        uint64_t v604 = (void *)((char *)v2700 + v603);
        v605 = (void *)((char *)v9 + v603);
        __dstc = (void *)v605[1];
        *uint64_t v604 = *v605;
        v604[1] = __dstc;
        uint64_t v606 = v173[30];
        uint64_t v607 = (void *)((char *)v2700 + v606);
        uint64_t v608 = (void *)((char *)v9 + v606);
        uint64_t v2525 = v608[1];
        void *v607 = *v608;
        v607[1] = v2525;
        uint64_t v609 = v173[31];
        uint64_t v610 = (void *)((char *)v2700 + v609);
        long long v611 = (void *)((char *)v9 + v609);
        uint64_t v2519 = v611[1];
        *uint64_t v610 = *v611;
        v610[1] = v2519;
        uint64_t v612 = v173[32];
        uint64_t v613 = (void *)((char *)v2700 + v612);
        long long v614 = (void *)((char *)v9 + v612);
        uint64_t v615 = v614[1];
        *uint64_t v613 = *v614;
        v613[1] = v615;
        *(void *)((char *)v2700 + v173[33]) = *(void *)((char *)v9 + v173[33]);
        *(void *)((char *)v2700 + v173[34]) = *(void *)((char *)v9 + v173[34]);
        uint64_t v616 = v173[35];
        v617 = (void *)((char *)v2700 + v616);
        v618 = (void *)((char *)v9 + v616);
        uint64_t v619 = v618[1];
        void *v617 = *v618;
        v617[1] = v619;
        uint64_t v620 = v173[36];
        v621 = (void *)((char *)v2700 + v620);
        uint64_t v622 = (void *)((char *)v9 + v620);
        uint64_t v623 = v622[1];
        void *v621 = *v622;
        v621[1] = v623;
        uint64_t v624 = v173[37];
        long long v625 = (void *)((char *)v2700 + v624);
        uint64_t v626 = (void *)((char *)v9 + v624);
        uint64_t v627 = v626[1];
        *long long v625 = *v626;
        v625[1] = v627;
        uint64_t v628 = v173[38];
        uint64_t v2509 = (char *)v2700 + v628;
        v2513 = (char *)v9 + v628;
        uint64_t v629 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v2513, 1, v629))
        {
          uint64_t v630 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v2509, v2513, *(void *)(*(void *)(v630 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v629 - 8) + 16))(v2509, v2513, v629);
          __swift_storeEnumTagSinglePayload((uint64_t)v2509, 0, 1, v629);
        }
        uint64_t v5 = v2673;
        uint64_t v4 = v2684;
        uint64_t v692 = v173[39];
        v693 = (void *)((char *)v2700 + v692);
        uint64_t v694 = (void *)((char *)v9 + v692);
        uint64_t v695 = v694[1];
        void *v693 = *v694;
        v693[1] = v695;
        uint64_t v696 = v173[40];
        long long v697 = (void *)((char *)v2700 + v696);
        uint64_t v698 = (void *)((char *)v9 + v696);
        uint64_t v699 = v698[1];
        *long long v697 = *v698;
        v697[1] = v699;
        uint64_t v700 = v173[41];
        uint64_t v701 = (char *)v2700 + v700;
        long long v702 = (char *)v9 + v700;
        v701[8] = v702[8];
        *(void *)uint64_t v701 = *(void *)v702;
        uint64_t v703 = v173[42];
        uint64_t v704 = (void *)((char *)v2700 + v703);
        uint64_t v705 = (void *)((char *)v9 + v703);
        uint64_t v706 = v705[1];
        void *v704 = *v705;
        v704[1] = v706;
        uint64_t v707 = v173[43];
        uint64_t v708 = (char *)v2700 + v707;
        v709 = (char *)v9 + v707;
        *(_OWORD *)uint64_t v708 = *(_OWORD *)v709;
        *(void *)(v708 + 13) = *(void *)(v709 + 13);
        uint64_t v710 = v173[44];
        uint64_t v711 = (void *)((char *)v2700 + v710);
        v712 = (void *)((char *)v9 + v710);
        uint64_t v713 = v712[1];
        *uint64_t v711 = *v712;
        v711[1] = v713;
        uint64_t v714 = v173[45];
        uint64_t v715 = (void *)((char *)v2700 + v714);
        v716 = (void *)((char *)v9 + v714);
        uint64_t v717 = v716[1];
        *uint64_t v715 = *v716;
        v715[1] = v717;
        uint64_t v718 = v173[46];
        uint64_t v719 = (void *)((char *)v2700 + v718);
        v720 = (void *)((char *)v9 + v718);
        uint64_t v721 = v720[1];
        *uint64_t v719 = *v720;
        v719[1] = v721;
        uint64_t v722 = v173[47];
        v723 = (void *)((char *)v2700 + v722);
        v724 = (void *)((char *)v9 + v722);
        uint64_t v725 = v724[1];
        void *v723 = *v724;
        v723[1] = v725;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v8 = v2700;
        swift_bridgeObjectRetain();
        uint64_t v726 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]));
        *(void *)((char *)v2700 + *(int *)(v726 + 48)) = *(void *)((char *)v9 + *(int *)(v726 + 48));
        swift_bridgeObjectRetain();
        goto LABEL_543;
      case 0x10u:
        uint64_t v2681 = v4;
        uint64_t v2689 = v3;
        v2672 = v5;
        uint64_t v178 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v178;
        uint64_t v179 = v8;
        uint64_t v180 = v9[3];
        v179[2] = v9[2];
        v179[3] = v180;
        uint64_t v181 = v9[5];
        v179[4] = v9[4];
        v179[5] = v181;
        uint64_t v182 = v9[7];
        v179[6] = v9[6];
        v179[7] = v182;
        uint64_t v2664 = v9[9];
        v179[8] = v9[8];
        v179[9] = v2664;
        uint64_t v2649 = v9[11];
        v179[10] = v9[10];
        v179[11] = v2649;
        *((unsigned char *)v179 + 96) = *((unsigned char *)v9 + 96);
        uint64_t v183 = v9[14];
        v179[13] = v9[13];
        v179[14] = v183;
        uint64_t v184 = v9[16];
        v179[15] = v9[15];
        v179[16] = v184;
        uint64_t v185 = (int *)type metadata accessor for HotelReservation(0);
        uint64_t v186 = v185[14];
        v2621 = (char *)v179 + v186;
        v2635 = (char *)v9 + v186;
        uint64_t v187 = type metadata accessor for DateComponents();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v2635, 1, v187))
        {
          uint64_t v188 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
          memcpy(v2621, v2635, *(void *)(*(void *)(v188 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v187 - 8) + 16))(v2621, v2635, v187);
          __swift_storeEnumTagSinglePayload((uint64_t)v2621, 0, 1, v187);
        }
        uint64_t v435 = v185[15];
        long long v436 = (char *)v2700 + v435;
        uint64_t v437 = (char *)v9 + v435;
        if (__swift_getEnumTagSinglePayload((uint64_t)v9 + v435, 1, v187))
        {
          uint64_t v438 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
          memcpy(v436, v437, *(void *)(*(void *)(v438 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v187 - 8) + 16))(v436, v437, v187);
          __swift_storeEnumTagSinglePayload((uint64_t)v436, 0, 1, v187);
        }
        uint64_t v631 = v185[16];
        uint64_t v632 = (void *)((char *)v2700 + v631);
        v633 = (void *)((char *)v9 + v631);
        uint64_t v634 = v633[1];
        *uint64_t v632 = *v633;
        v632[1] = v634;
        uint64_t v635 = v185[17];
        uint64_t v636 = (void *)((char *)v2700 + v635);
        uint64_t v637 = (void *)((char *)v9 + v635);
        uint64_t v2671 = v637[1];
        *uint64_t v636 = *v637;
        v636[1] = v2671;
        uint64_t v638 = v185[18];
        uint64_t v639 = (void *)((char *)v2700 + v638);
        uint64_t v640 = (void *)((char *)v9 + v638);
        uint64_t v2656 = v640[1];
        *uint64_t v639 = *v640;
        v639[1] = v2656;
        uint64_t v641 = v185[19];
        uint64_t v642 = (void *)((char *)v2700 + v641);
        uint64_t v643 = (void *)((char *)v9 + v641);
        uint64_t v644 = v643[1];
        void *v642 = *v643;
        v642[1] = v644;
        uint64_t v645 = v185[20];
        uint64_t v646 = (void *)((char *)v2700 + v645);
        uint64_t v647 = (void *)((char *)v9 + v645);
        uint64_t v648 = v647[1];
        void *v646 = *v647;
        v646[1] = v648;
        *(void *)((char *)v2700 + v185[21]) = *(void *)((char *)v9 + v185[21]);
        *(void *)((char *)v2700 + v185[22]) = *(void *)((char *)v9 + v185[22]);
        uint64_t v649 = v185[23];
        v650 = (char *)v2700 + v649;
        uint64_t v651 = (char *)v9 + v649;
        *(void *)v650 = *(void *)v651;
        v650[8] = v651[8];
        uint64_t v652 = v185[24];
        uint64_t v653 = (char *)v2700 + v652;
        v654 = (char *)v9 + v652;
        *(void *)uint64_t v653 = *(void *)v654;
        v653[8] = v654[8];
        uint64_t v655 = v185[25];
        uint64_t v656 = (void *)((char *)v2700 + v655);
        uint64_t v657 = (void *)((char *)v9 + v655);
        uint64_t v658 = v657[1];
        *uint64_t v656 = *v657;
        v656[1] = v658;
        uint64_t v659 = v185[26];
        v660 = (void *)((char *)v2700 + v659);
        uint64_t v661 = (void *)((char *)v9 + v659);
        uint64_t v662 = v661[1];
        void *v660 = *v661;
        v660[1] = v662;
        uint64_t v663 = v185[27];
        v664 = (void *)((char *)v2700 + v663);
        uint64_t v665 = (void *)((char *)v9 + v663);
        uint64_t v666 = v665[1];
        void *v664 = *v665;
        v664[1] = v666;
        uint64_t v667 = v185[28];
        long long v668 = (void *)((char *)v2700 + v667);
        uint64_t v669 = (void *)((char *)v9 + v667);
        uint64_t v670 = v669[1];
        *long long v668 = *v669;
        v668[1] = v670;
        uint64_t v671 = v185[29];
        long long v672 = (char *)v2700 + v671;
        uint64_t v673 = (char *)v9 + v671;
        *(void *)long long v672 = *(void *)v673;
        v672[8] = v673[8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v8 = v2700;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_539;
      case 0x11u:
        uint64_t v2681 = v4;
        uint64_t v2689 = v3;
        uint64_t v2674 = v5;
        uint64_t v189 = v9[1];
        uint64_t v190 = v8;
        *uint64_t v8 = *v9;
        v8[1] = v189;
        uint64_t v191 = v9[3];
        v190[2] = v9[2];
        v190[3] = v191;
        uint64_t v192 = v9[5];
        v190[4] = v9[4];
        v190[5] = v192;
        uint64_t v193 = v9[7];
        v190[6] = v9[6];
        v190[7] = v193;
        uint64_t v2665 = v9[9];
        v190[8] = v9[8];
        v190[9] = v2665;
        uint64_t v2650 = v9[11];
        v190[10] = v9[10];
        v190[11] = v2650;
        *((unsigned char *)v190 + 96) = *((unsigned char *)v9 + 96);
        uint64_t v194 = v9[14];
        v190[13] = v9[13];
        v190[14] = v194;
        uint64_t v195 = v9[16];
        v190[15] = v9[15];
        v190[16] = v195;
        uint64_t v196 = (int *)type metadata accessor for RestaurantReservation(0);
        uint64_t v197 = v196[14];
        uint64_t v2636 = (char *)v190 + v197;
        uint64_t v198 = (char *)v9 + v197;
        uint64_t v199 = type metadata accessor for DateComponents();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v198, 1, v199))
        {
          uint64_t v200 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
          memcpy(v2636, v198, *(void *)(*(void *)(v200 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v199 - 8) + 16))(v2636, v198, v199);
          __swift_storeEnumTagSinglePayload((uint64_t)v2636, 0, 1, v199);
        }
        uint64_t v5 = v2674;
        uint64_t v439 = v196[15];
        uint64_t v440 = (void *)((char *)v2700 + v439);
        uint64_t v441 = (void *)((char *)v9 + v439);
        uint64_t v442 = v441[1];
        *uint64_t v440 = *v441;
        v440[1] = v442;
        uint64_t v443 = v196[16];
        uint64_t v444 = (void *)((char *)v2700 + v443);
        uint64_t v445 = (void *)((char *)v9 + v443);
        uint64_t v446 = v445[1];
        *uint64_t v444 = *v445;
        v444[1] = v446;
        uint64_t v447 = v196[17];
        uint64_t v448 = (void *)((char *)v2700 + v447);
        uint64_t v449 = (void *)((char *)v9 + v447);
        uint64_t v450 = v449[1];
        *uint64_t v448 = *v449;
        v448[1] = v450;
        uint64_t v451 = v196[18];
        uint64_t v452 = (void *)((char *)v2700 + v451);
        v453 = (void *)((char *)v9 + v451);
        uint64_t v454 = v453[1];
        *uint64_t v452 = *v453;
        v452[1] = v454;
        uint64_t v455 = v196[19];
        uint64_t v456 = (void *)((char *)v2700 + v455);
        long long v457 = (void *)((char *)v9 + v455);
        uint64_t v458 = v457[1];
        *uint64_t v456 = *v457;
        v456[1] = v458;
        *(void *)((char *)v2700 + v196[20]) = *(void *)((char *)v9 + v196[20]);
        uint64_t v459 = v196[21];
        long long v460 = (void *)((char *)v2700 + v459);
        long long v461 = (void *)((char *)v9 + v459);
        uint64_t v462 = v461[1];
        *long long v460 = *v461;
        v460[1] = v462;
        uint64_t v463 = v196[22];
        uint64_t v464 = (void *)((char *)v2700 + v463);
        uint64_t v465 = (void *)((char *)v9 + v463);
        uint64_t v466 = v465[1];
        *uint64_t v464 = *v465;
        v464[1] = v466;
        uint64_t v467 = v196[23];
        uint64_t v468 = (void *)((char *)v2700 + v467);
        uint64_t v469 = (void *)((char *)v9 + v467);
        uint64_t v470 = v469[1];
        *uint64_t v468 = *v469;
        v468[1] = v470;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v8 = v2700;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_542;
      case 0x12u:
        uint64_t v2695 = v3;
        v2675 = v5;
        uint64_t v201 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v201;
        uint64_t v202 = v9[3];
        v8[2] = v9[2];
        v8[3] = v202;
        uint64_t v203 = v9[5];
        v8[4] = v9[4];
        v8[5] = v203;
        uint64_t v204 = v9[7];
        v8[6] = v9[6];
        v8[7] = v204;
        uint64_t v205 = v9[9];
        v8[8] = v9[8];
        v8[9] = v205;
        uint64_t v206 = v9[11];
        v8[10] = v9[10];
        v8[11] = v206;
        uint64_t v207 = v9[13];
        v8[12] = v9[12];
        v8[13] = v207;
        uint64_t v208 = v9[15];
        v8[14] = v9[14];
        v8[15] = v208;
        *((unsigned char *)v8 + 128) = *((unsigned char *)v9 + 128);
        *(_WORD *)((char *)v8 + 129) = *(_WORD *)((char *)v9 + 129);
        uint64_t v209 = v9[18];
        v8[17] = v9[17];
        v8[18] = v209;
        uint64_t v210 = v9[20];
        v8[19] = v9[19];
        v8[20] = v210;
        uint64_t v211 = v9[22];
        v8[21] = v9[21];
        v8[22] = v211;
        uint64_t v212 = v9[24];
        v8[23] = v9[23];
        v8[24] = v212;
        uint64_t v213 = v9[26];
        v8[25] = v9[25];
        v8[26] = v213;
        uint64_t v214 = v9[28];
        v8[27] = v9[27];
        v8[28] = v214;
        uint64_t v215 = v9[30];
        v8[29] = v9[29];
        v8[30] = v215;
        uint64_t v216 = v9[32];
        v8[31] = v9[31];
        v8[32] = v216;
        uint64_t v2666 = v9[34];
        v8[33] = v9[33];
        v8[34] = v2666;
        uint64_t v2651 = v9[36];
        v8[35] = v9[35];
        v8[36] = v2651;
        uint64_t v2637 = v9[38];
        v8[37] = v9[37];
        v8[38] = v2637;
        uint64_t v2622 = v9[40];
        v8[39] = v9[39];
        v8[40] = v2622;
        uint64_t v2604 = v9[42];
        v8[41] = v9[41];
        v8[42] = v2604;
        uint64_t v217 = v9[44];
        v8[43] = v9[43];
        v8[44] = v217;
        uint64_t v218 = v9[46];
        v8[45] = v9[45];
        v8[46] = v218;
        uint64_t v219 = v9[47];
        *((unsigned char *)v8 + 384) = *((unsigned char *)v9 + 384);
        v8[47] = v219;
        uint64_t v220 = v9[50];
        v8[49] = v9[49];
        v8[50] = v220;
        uint64_t v221 = v9[52];
        v8[51] = v9[51];
        v8[52] = v221;
        uint64_t v2496 = type metadata accessor for RentalCarReservation(0);
        uint64_t v222 = *(int *)(v2496 + 140);
        uint64_t v223 = (char *)v8 + v222;
        uint64_t v224 = (char *)v9 + v222;
        uint64_t v225 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v224, 1, v225))
        {
          uint64_t v226 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v223, v224, *(void *)(*(void *)(v226 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v225 - 8) + 16))(v223, v224, v225);
          __swift_storeEnumTagSinglePayload((uint64_t)v223, 0, 1, v225);
        }
        uint64_t v5 = v2675;
        uint64_t v471 = *(int *)(v2496 + 144);
        goto LABEL_109;
      case 0x13u:
        uint64_t v2695 = v3;
        v2676 = v5;
        uint64_t v227 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v227;
        uint64_t v228 = v9[3];
        v8[2] = v9[2];
        v8[3] = v228;
        uint64_t v229 = v9[5];
        v8[4] = v9[4];
        v8[5] = v229;
        uint64_t v230 = v9[7];
        v8[6] = v9[6];
        v8[7] = v230;
        uint64_t v231 = v9[9];
        v8[8] = v9[8];
        v8[9] = v231;
        uint64_t v232 = v9[11];
        v8[10] = v9[10];
        v8[11] = v232;
        uint64_t v233 = v9[13];
        v8[12] = v9[12];
        v8[13] = v233;
        uint64_t v234 = v9[15];
        v8[14] = v9[14];
        v8[15] = v234;
        *((unsigned char *)v8 + 128) = *((unsigned char *)v9 + 128);
        *(_WORD *)((char *)v8 + 129) = *(_WORD *)((char *)v9 + 129);
        uint64_t v235 = v9[18];
        v8[17] = v9[17];
        v8[18] = v235;
        uint64_t v236 = v9[20];
        v8[19] = v9[19];
        v8[20] = v236;
        uint64_t v237 = v9[22];
        v8[21] = v9[21];
        v8[22] = v237;
        uint64_t v238 = v9[24];
        v8[23] = v9[23];
        v8[24] = v238;
        uint64_t v2667 = v9[26];
        v8[25] = v9[25];
        v8[26] = v2667;
        uint64_t v2652 = v9[28];
        v8[27] = v9[27];
        v8[28] = v2652;
        uint64_t v2638 = v9[30];
        v8[29] = v9[29];
        v8[30] = v2638;
        uint64_t v2623 = v9[32];
        v8[31] = v9[31];
        v8[32] = v2623;
        uint64_t v2605 = v9[34];
        v8[33] = v9[33];
        v8[34] = v2605;
        uint64_t v240 = v9[35];
        uint64_t v239 = v9[36];
        *((unsigned char *)v8 + 296) = *((unsigned char *)v9 + 296);
        v8[35] = v240;
        v8[36] = v239;
        uint64_t v2504 = type metadata accessor for TicketedTransportation(0);
        uint64_t v241 = *(int *)(v2504 + 112);
        uint64_t v242 = (char *)v8 + v241;
        uint64_t v243 = (char *)v9 + v241;
        uint64_t v225 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v243, 1, v225))
        {
          uint64_t v244 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v242, v243, *(void *)(*(void *)(v244 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v225 - 8) + 16))(v242, v243, v225);
          __swift_storeEnumTagSinglePayload((uint64_t)v242, 0, 1, v225);
        }
        uint64_t v5 = v2676;
        uint64_t v471 = *(int *)(v2504 + 116);
        goto LABEL_109;
      case 0x14u:
        uint64_t v2685 = v4;
        uint64_t v2677 = v5;
        uint64_t v245 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v245;
        uint64_t v246 = v9[3];
        v8[2] = v9[2];
        v8[3] = v246;
        uint64_t v247 = v9[5];
        v8[4] = v9[4];
        v8[5] = v247;
        uint64_t v248 = v9[7];
        v8[6] = v9[6];
        v8[7] = v248;
        uint64_t v249 = v9[9];
        v8[8] = v9[8];
        v8[9] = v249;
        uint64_t v250 = v9[11];
        v8[10] = v9[10];
        v8[11] = v250;
        uint64_t v251 = v9[13];
        v8[12] = v9[12];
        v8[13] = v251;
        uint64_t v252 = v9[15];
        v8[14] = v9[14];
        v8[15] = v252;
        *((unsigned char *)v8 + 128) = *((unsigned char *)v9 + 128);
        *(_WORD *)((char *)v8 + 129) = *(_WORD *)((char *)v9 + 129);
        uint64_t v253 = v9[18];
        v8[17] = v9[17];
        v8[18] = v253;
        uint64_t v254 = v9[20];
        v8[19] = v9[19];
        v8[20] = v254;
        uint64_t v255 = v9[22];
        v8[21] = v9[21];
        v8[22] = v255;
        uint64_t v256 = v9[24];
        v8[23] = v9[23];
        v8[24] = v256;
        uint64_t v257 = v9[26];
        v8[25] = v9[25];
        v8[26] = v257;
        uint64_t v258 = v9[28];
        v8[27] = v9[27];
        v8[28] = v258;
        uint64_t v2653 = v9[30];
        v8[29] = v9[29];
        v8[30] = v2653;
        uint64_t v2639 = v9[32];
        v8[31] = v9[31];
        v8[32] = v2639;
        uint64_t v259 = v9[34];
        v8[33] = v9[33];
        v8[34] = v259;
        uint64_t v260 = v9[36];
        uint64_t v2606 = v9[35];
        *((unsigned char *)v8 + 296) = *((unsigned char *)v9 + 296);
        v8[35] = v2606;
        v8[36] = v260;
        uint64_t v261 = v9[39];
        v8[38] = v9[38];
        v8[39] = v261;
        v2668 = (int *)type metadata accessor for TicketedShow(0);
        uint64_t v262 = v2668[29];
        uint64_t v263 = (char *)v8 + v262;
        uint64_t v264 = (char *)v9 + v262;
        uint64_t v265 = type metadata accessor for URL();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v264, 1, v265))
        {
          uint64_t v266 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v263, v264, *(void *)(*(void *)(v266 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v265 - 8) + 16))(v263, v264, v265);
          __swift_storeEnumTagSinglePayload((uint64_t)v263, 0, 1, v265);
        }
        uint64_t v5 = v2677;
        uint64_t v4 = v2685;
        uint64_t v472 = v2668[30];
        v473 = (void *)((char *)v8 + v472);
        uint64_t v474 = (void *)((char *)v9 + v472);
        uint64_t v475 = v474[1];
        void *v473 = *v474;
        v473[1] = v475;
        uint64_t v476 = v2668[31];
        long long v477 = (char *)v8 + v476;
        uint64_t v478 = (char *)v9 + v476;
        uint64_t v74 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v478, 1, v74))
        {
          uint64_t v479 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v477, v478, *(void *)(*(void *)(v479 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 16))(v477, v478, v74);
          __swift_storeEnumTagSinglePayload((uint64_t)v477, 0, 1, v74);
        }
        uint64_t v377 = v2668[32];
LABEL_147:
        uint64_t v674 = (char *)v8 + v377;
        v675 = (char *)v9 + v377;
        if (!__swift_getEnumTagSinglePayload((uint64_t)v9 + v377, 1, v74)) {
          goto LABEL_156;
        }
        uint64_t v676 = &demangling cache variable for type metadata for Date?;
        goto LABEL_155;
      case 0x15u:
        uint64_t v2695 = v3;
        uint64_t v2678 = v5;
        uint64_t v267 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v267;
        uint64_t v2607 = v9[3];
        v8[2] = v9[2];
        v8[3] = v2607;
        uint64_t v268 = v9[5];
        v8[4] = v9[4];
        v8[5] = v268;
        uint64_t v269 = v9[7];
        v8[6] = v9[6];
        v8[7] = v269;
        uint64_t v270 = v9[9];
        v8[8] = v9[8];
        v8[9] = v270;
        uint64_t v271 = v9[11];
        v8[10] = v9[10];
        v8[11] = v271;
        uint64_t v272 = v9[13];
        v8[12] = v9[12];
        v8[13] = v272;
        uint64_t v273 = v9[15];
        v8[14] = v9[14];
        v8[15] = v273;
        *((unsigned char *)v8 + 128) = *((unsigned char *)v9 + 128);
        *(_WORD *)((char *)v8 + 129) = *(_WORD *)((char *)v9 + 129);
        uint64_t v274 = v9[18];
        v8[17] = v9[17];
        v8[18] = v274;
        uint64_t v275 = v9[20];
        v8[19] = v9[19];
        v8[20] = v275;
        uint64_t v276 = v9[22];
        v8[21] = v9[21];
        v8[22] = v276;
        uint64_t v277 = v9[24];
        v8[23] = v9[23];
        v8[24] = v277;
        uint64_t v278 = v9[26];
        v8[25] = v9[25];
        v8[26] = v278;
        uint64_t v279 = v9[28];
        v8[27] = v9[27];
        v8[28] = v279;
        uint64_t v280 = v9[30];
        v8[29] = v9[29];
        v8[30] = v280;
        uint64_t v281 = v9[32];
        v8[31] = v9[31];
        v8[32] = v281;
        uint64_t v283 = v9[33];
        uint64_t v282 = v9[34];
        *((unsigned char *)v8 + 280) = *((unsigned char *)v9 + 280);
        v8[33] = v283;
        v8[34] = v282;
        uint64_t v284 = v9[37];
        v8[36] = v9[36];
        v8[37] = v284;
        uint64_t v2508 = (int *)type metadata accessor for Appointment(0);
        uint64_t v285 = v2508[27];
        uint64_t v286 = (char *)v8 + v285;
        uint64_t v287 = (char *)v9 + v285;
        uint64_t v225 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v287, 1, v225))
        {
          uint64_t v288 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v286, v287, *(void *)(*(void *)(v288 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v225 - 8) + 16))(v286, v287, v225);
          __swift_storeEnumTagSinglePayload((uint64_t)v286, 0, 1, v225);
        }
        uint64_t v5 = v2678;
        uint64_t v471 = v2508[28];
LABEL_109:
        long long v480 = (char *)v8 + v471;
        long long v481 = (char *)v9 + v471;
        if (__swift_getEnumTagSinglePayload((uint64_t)v9 + v471, 1, v225))
        {
          uint64_t v482 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v480, v481, *(void *)(*(void *)(v482 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v225 - 8) + 16))(v480, v481, v225);
          __swift_storeEnumTagSinglePayload((uint64_t)v480, 0, 1, v225);
        }
        uint64_t v3 = v2695;
        break;
      case 0x16u:
        uint64_t v2686 = v4;
        uint64_t v2696 = v3;
        v2679 = v5;
        uint64_t v289 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v289;
        uint64_t v2608 = v9[3];
        v8[2] = v9[2];
        v8[3] = v2608;
        uint64_t v290 = v9[5];
        v8[4] = v9[4];
        v8[5] = v290;
        uint64_t v291 = v9[7];
        v8[6] = v9[6];
        v8[7] = v291;
        uint64_t v292 = v9[9];
        v8[8] = v9[8];
        v8[9] = v292;
        uint64_t v293 = v9[11];
        v8[10] = v9[10];
        v8[11] = v293;
        uint64_t v294 = v9[13];
        v8[12] = v9[12];
        v8[13] = v294;
        uint64_t v295 = v9[15];
        v8[14] = v9[14];
        v8[15] = v295;
        *((unsigned char *)v8 + 128) = *((unsigned char *)v9 + 128);
        *(_WORD *)((char *)v8 + 129) = *(_WORD *)((char *)v9 + 129);
        uint64_t v296 = v9[18];
        v8[17] = v9[17];
        v8[18] = v296;
        uint64_t v297 = v9[20];
        v8[19] = v9[19];
        v8[20] = v297;
        uint64_t v298 = v9[22];
        v8[21] = v9[21];
        v8[22] = v298;
        uint64_t v299 = v9[24];
        v8[23] = v9[23];
        v8[24] = v299;
        uint64_t v300 = v9[26];
        v8[25] = v9[25];
        v8[26] = v300;
        uint64_t v301 = v9[28];
        v8[27] = v9[27];
        v8[28] = v301;
        uint64_t v302 = v9[30];
        v8[29] = v9[29];
        v8[30] = v302;
        v8[31] = v9[31];
        uint64_t v2518 = (int *)type metadata accessor for Party(0);
        uint64_t v303 = v2518[24];
        uint64_t v304 = (char *)v8 + v303;
        uint64_t v305 = (char *)v9 + v303;
        uint64_t v306 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v305, 1, v306))
        {
          uint64_t v307 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v304, v305, *(void *)(*(void *)(v307 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v306 - 8) + 16))(v304, v305, v306);
          __swift_storeEnumTagSinglePayload((uint64_t)v304, 0, 1, v306);
        }
        uint64_t v5 = v2679;
        uint64_t v3 = v2696;
        uint64_t v483 = v2518[25];
        uint64_t v484 = (char *)v8 + v483;
        v485 = (char *)v9 + v483;
        if (__swift_getEnumTagSinglePayload((uint64_t)v9 + v483, 1, v306))
        {
          uint64_t v486 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v484, v485, *(void *)(*(void *)(v486 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v306 - 8) + 16))(v484, v485, v306);
          __swift_storeEnumTagSinglePayload((uint64_t)v484, 0, 1, v306);
        }
        uint64_t v4 = v2686;
        uint64_t v397 = v2518[26];
        goto LABEL_153;
      case 0x17u:
        uint64_t v2687 = v4;
        uint64_t v2697 = v3;
        uint64_t v2680 = v5;
        uint64_t v308 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v308;
        uint64_t v2624 = v9[3];
        v8[2] = v9[2];
        v8[3] = v2624;
        uint64_t v309 = v9[5];
        v8[4] = v9[4];
        v8[5] = v309;
        uint64_t v2609 = v9[7];
        v8[6] = v9[6];
        v8[7] = v2609;
        uint64_t v310 = v9[9];
        v8[8] = v9[8];
        v8[9] = v310;
        uint64_t v311 = v9[11];
        v8[10] = v9[10];
        v8[11] = v311;
        uint64_t v312 = v9[13];
        v8[12] = v9[12];
        v8[13] = v312;
        uint64_t v313 = v9[15];
        v8[14] = v9[14];
        v8[15] = v313;
        *((unsigned char *)v8 + 128) = *((unsigned char *)v9 + 128);
        *(_WORD *)((char *)v8 + 129) = *(_WORD *)((char *)v9 + 129);
        uint64_t v314 = v9[18];
        v8[17] = v9[17];
        v8[18] = v314;
        uint64_t v315 = v9[20];
        v8[19] = v9[19];
        v8[20] = v315;
        uint64_t v316 = v9[22];
        v8[21] = v9[21];
        v8[22] = v316;
        uint64_t v317 = v9[24];
        v8[23] = v9[23];
        v8[24] = v317;
        uint64_t v318 = v9[26];
        v8[25] = v9[25];
        v8[26] = v318;
        v8[27] = v9[27];
        v2669 = (int *)type metadata accessor for Trip(0);
        uint64_t v319 = v2669[22];
        __dst = (char *)v8 + v319;
        uint64_t v320 = (char *)v9 + v319;
        uint64_t v321 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v320, 1, v321))
        {
          uint64_t v322 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(__dst, v320, *(void *)(*(void *)(v322 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v321 - 8) + 16))(__dst, v320, v321);
          __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v321);
        }
        uint64_t v5 = v2680;
        uint64_t v4 = v2687;
        uint64_t v3 = v2697;
        uint64_t v487 = v2669[23];
        uint64_t v488 = (char *)v2700 + v487;
        v489 = (char *)v9 + v487;
        if (__swift_getEnumTagSinglePayload((uint64_t)v9 + v487, 1, v321))
        {
          uint64_t v490 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v488, v489, *(void *)(*(void *)(v490 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v321 - 8) + 16))(v488, v489, v321);
          __swift_storeEnumTagSinglePayload((uint64_t)v488, 0, 1, v321);
        }
        uint64_t v8 = v2700;
        uint64_t v677 = v2669[24];
        uint64_t v678 = (char *)v2700 + v677;
        v679 = (char *)v9 + v677;
        *(void *)uint64_t v678 = *(void *)v679;
        v678[8] = v679[8];
        uint64_t v397 = v2669[25];
LABEL_153:
        uint64_t v674 = (char *)v8 + v397;
        v675 = (char *)v9 + v397;
        uint64_t v74 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v675, 1, v74))
        {
          uint64_t v676 = &demangling cache variable for type metadata for URL?;
LABEL_155:
          uint64_t v680 = __swift_instantiateConcreteTypeFromMangledName(v676);
          memcpy(v674, v675, *(void *)(*(void *)(v680 - 8) + 64));
        }
        else
        {
LABEL_156:
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 16))(v674, v675, v74);
          __swift_storeEnumTagSinglePayload((uint64_t)v674, 0, 1, v74);
        }
        break;
      case 0x18u:
        uint64_t v2698 = v3;
        uint64_t v323 = v9[1];
        uint64_t v324 = v8;
        *uint64_t v8 = *v9;
        v8[1] = v323;
        uint64_t v325 = v9[3];
        v324[2] = v9[2];
        v324[3] = v325;
        uint64_t v326 = v9[5];
        v324[4] = v9[4];
        v324[5] = v326;
        uint64_t v327 = (int *)type metadata accessor for GlobalItem();
        uint64_t v328 = v327[7];
        v329 = (char *)v324 + v328;
        uint64_t v330 = (char *)v9 + v328;
        uint64_t v331 = type metadata accessor for GlobalDialog();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v330, 1, v331))
        {
          uint64_t v332 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GlobalDialog?);
          memcpy(v329, v330, *(void *)(*(void *)(v332 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v331 - 8) + 16))(v329, v330, v331);
          __swift_storeEnumTagSinglePayload((uint64_t)v329, 0, 1, v331);
        }
        uint64_t v3 = v2698;
        uint64_t v10 = v2699;
        uint64_t v491 = v327[8];
        uint64_t v492 = (char *)v2700 + v491;
        uint64_t v493 = (char *)v9 + v491;
        unint64_t v494 = *((void *)v493 + 1);
        if (v494 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v492 = *(_OWORD *)v493;
        }
        else
        {
          uint64_t v495 = *(void *)v493;
          outlined copy of Data._Representation(*(void *)v493, *((void *)v493 + 1));
          *(void *)uint64_t v492 = v495;
          *((void *)v492 + 1) = v494;
        }
        uint64_t v8 = v2700;
        *((unsigned char *)v2700 + v327[9]) = *((unsigned char *)v9 + v327[9]);
        uint64_t v496 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GlobalItem, experiences: [DialogExperience]));
        *(void *)((char *)v2700 + *(int *)(v496 + 48)) = *(void *)((char *)v9 + *(int *)(v496 + 48));
        goto LABEL_126;
      case 0x19u:
        uint64_t v333 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v333;
        uint64_t v334 = v9[3];
        v8[2] = v9[2];
        v8[3] = v334;
        uint64_t v335 = v9[5];
        v8[4] = v9[4];
        v8[5] = v335;
        uint64_t v336 = v9[7];
        v8[6] = v9[6];
        v8[7] = v336;
LABEL_89:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_126;
      case 0x1Au:
        v2688 = v4;
        uint64_t v337 = v9[1];
        uint64_t v338 = v8;
        *uint64_t v8 = *v9;
        v8[1] = v337;
        uint64_t v339 = v9[3];
        v338[2] = v9[2];
        v338[3] = v339;
        uint64_t v340 = v9[5];
        v338[4] = v9[4];
        v338[5] = v340;
        v338[6] = v9[6];
        uint64_t v341 = (int *)type metadata accessor for Answer(0);
        uint64_t v342 = v341[9];
        uint64_t v343 = (char *)v338 + v342;
        v344 = (char *)v9 + v342;
        uint64_t v345 = type metadata accessor for URL();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v344, 1, v345))
        {
          uint64_t v346 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v343, v344, *(void *)(*(void *)(v346 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v345 - 8) + 16))(v343, v344, v345);
          __swift_storeEnumTagSinglePayload((uint64_t)v343, 0, 1, v345);
        }
        uint64_t v4 = v2688;
        uint64_t v10 = v2699;
        uint64_t v8 = v2700;
        *((unsigned char *)v2700 + v341[10]) = *((unsigned char *)v9 + v341[10]);
        uint64_t v497 = v341[11];
        long long v498 = (void *)((char *)v2700 + v497);
        long long v499 = (void *)((char *)v9 + v497);
        uint64_t v500 = v499[1];
        *long long v498 = *v499;
        v498[1] = v500;
LABEL_126:
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v2681 = v4;
        uint64_t v2689 = v3;
        v2672 = v5;
        uint64_t v12 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v12;
        uint64_t v13 = v9[3];
        v8[2] = v9[2];
        v8[3] = v13;
        uint64_t v14 = v9[5];
        v8[4] = v9[4];
        v8[5] = v14;
        uint64_t v15 = v9[7];
        v8[6] = v9[6];
        v8[7] = v15;
        uint64_t v16 = v9[9];
        v8[8] = v9[8];
        v8[9] = v16;
        uint64_t v2658 = v9[11];
        v8[10] = v9[10];
        v8[11] = v2658;
        uint64_t v17 = (int *)type metadata accessor for EmailDocument(0);
        uint64_t v18 = v17[12];
        v2603 = (char *)v9 + v18;
        v2620 = (char *)v8 + v18;
        uint64_t v19 = type metadata accessor for Date();
        uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v2632 = v20;
        uint64_t v2646 = v19;
        v20(v2620, v2603, v19);
        *(void *)((char *)v8 + v17[13]) = *(void *)((char *)v9 + v17[13]);
        *(void *)((char *)v8 + v17[14]) = *(void *)((char *)v9 + v17[14]);
        *(void *)((char *)v8 + v17[15]) = *(void *)((char *)v9 + v17[15]);
        *((unsigned char *)v8 + v17[16]) = *((unsigned char *)v9 + v17[16]);
        *((unsigned char *)v8 + v17[17]) = *((unsigned char *)v9 + v17[17]);
        uint64_t v21 = v17[18];
        uint64_t v22 = (void *)((char *)v8 + v21);
        uint64_t v23 = (void *)((char *)v9 + v21);
        uint64_t v24 = v23[1];
        void *v22 = *v23;
        v22[1] = v24;
        v2659 = v17;
        uint64_t v25 = v17[19];
        uint64_t v26 = (void *)((char *)v8 + v25);
        uint64_t v27 = (char *)v9 + v25;
        uint64_t v28 = *(void *)((char *)v9 + v25);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v28)
        {
          uint64_t v29 = *((void *)v27 + 1);
          uint64_t v30 = *((void *)v27 + 2);
          void *v26 = v28;
          v26[1] = v29;
          uint64_t v31 = *((void *)v27 + 3);
          uint64_t v32 = *((void *)v27 + 4);
          v26[2] = v30;
          v26[3] = v31;
          v26[4] = v32;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v347 = *((_OWORD *)v27 + 1);
          *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
          *((_OWORD *)v26 + 1) = v347;
          v26[4] = *((void *)v27 + 4);
        }
        uint64_t v8 = v2700;
        uint64_t v348 = v17[20];
        long long v349 = (void *)((char *)v2700 + v348);
        long long v350 = (void *)((char *)v9 + v348);
        uint64_t v351 = v350[1];
        *long long v349 = *v350;
        v349[1] = v351;
        uint64_t v352 = v17[21];
        uint64_t v353 = (void *)((char *)v2700 + v352);
        uint64_t v354 = (void *)((char *)v9 + v352);
        long long v355 = (int *)type metadata accessor for PartialExtractedAttributes(0);
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v354, 1, (uint64_t)v355))
        {
          uint64_t v356 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
          memcpy(v353, v354, *(void *)(*(void *)(v356 - 8) + 64));
        }
        else
        {
          uint64_t v501 = v354[1];
          *uint64_t v353 = *v354;
          v353[1] = v501;
          uint64_t v502 = v355[5];
          v503 = (void *)((char *)v353 + v502);
          unint64_t v504 = (void *)((char *)v354 + v502);
          uint64_t v505 = type metadata accessor for RentalCarReservation(0);
          swift_bridgeObjectRetain();
          uint64_t v2610 = v353;
          v2568 = v354;
          v2591 = v355;
          if (__swift_getEnumTagSinglePayload((uint64_t)v504, 1, v505))
          {
            uint64_t v506 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
            memcpy(v503, v504, *(void *)(*(void *)(v506 - 8) + 64));
          }
          else
          {
            uint64_t v733 = v504[1];
            void *v503 = *v504;
            v503[1] = v733;
            uint64_t v734 = v504[3];
            v503[2] = v504[2];
            v503[3] = v734;
            uint64_t v735 = v504[5];
            v503[4] = v504[4];
            v503[5] = v735;
            uint64_t v736 = v504[7];
            v503[6] = v504[6];
            v503[7] = v736;
            uint64_t v737 = v504[9];
            v503[8] = v504[8];
            v503[9] = v737;
            uint64_t v738 = v504[11];
            v503[10] = v504[10];
            v503[11] = v738;
            uint64_t v739 = v504[13];
            v503[12] = v504[12];
            v503[13] = v739;
            uint64_t v740 = v504[15];
            v503[14] = v504[14];
            v503[15] = v740;
            *((unsigned char *)v503 + 128) = *((unsigned char *)v504 + 128);
            *(_WORD *)((char *)v503 + 129) = *(_WORD *)((char *)v504 + 129);
            uint64_t v741 = v504[18];
            v503[17] = v504[17];
            v503[18] = v741;
            uint64_t v742 = v504[20];
            v503[19] = v504[19];
            v503[20] = v742;
            uint64_t v743 = v504[22];
            v503[21] = v504[21];
            v503[22] = v743;
            uint64_t v2492 = v504[24];
            v503[23] = v504[23];
            v503[24] = v2492;
            uint64_t v744 = v504[26];
            v503[25] = v504[25];
            v503[26] = v744;
            uint64_t v745 = v504[28];
            v503[27] = v504[27];
            v503[28] = v745;
            uint64_t v746 = v504[30];
            v503[29] = v504[29];
            v503[30] = v746;
            uint64_t v747 = v504[32];
            v503[31] = v504[31];
            v503[32] = v747;
            uint64_t v748 = v504[34];
            v503[33] = v504[33];
            v503[34] = v748;
            uint64_t v749 = v504[36];
            v503[35] = v504[35];
            v503[36] = v749;
            uint64_t v750 = v504[38];
            v503[37] = v504[37];
            v503[38] = v750;
            uint64_t v751 = v504[40];
            v503[39] = v504[39];
            v503[40] = v751;
            uint64_t v752 = v504[42];
            v503[41] = v504[41];
            v503[42] = v752;
            uint64_t v753 = v504[44];
            v503[43] = v504[43];
            v503[44] = v753;
            uint64_t v754 = v504[46];
            v503[45] = v504[45];
            v503[46] = v754;
            uint64_t v755 = v504[47];
            *((unsigned char *)v503 + 384) = *((unsigned char *)v504 + 384);
            v503[47] = v755;
            uint64_t v756 = v504[50];
            v503[49] = v504[49];
            v503[50] = v756;
            uint64_t v757 = v504[52];
            v503[51] = v504[51];
            v503[52] = v757;
            uint64_t v758 = *(int *)(v505 + 140);
            uint64_t v2548 = (char *)v503 + v758;
            uint64_t v759 = (char *)v504 + v758;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v759, 1, v2646))
            {
              uint64_t v760 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2548, v759, *(void *)(*(void *)(v760 - 8) + 64));
            }
            else
            {
              v2632(v2548, v759, v2646);
              __swift_storeEnumTagSinglePayload((uint64_t)v2548, 0, 1, v2646);
            }
            uint64_t v817 = *(int *)(v505 + 144);
            uint64_t v818 = (char *)v503 + v817;
            uint64_t v819 = (char *)v504 + v817;
            if (__swift_getEnumTagSinglePayload((uint64_t)v504 + v817, 1, v2646))
            {
              uint64_t v820 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v818, v819, *(void *)(*(void *)(v820 - 8) + 64));
            }
            else
            {
              v2632(v818, v819, v2646);
              __swift_storeEnumTagSinglePayload((uint64_t)v818, 0, 1, v2646);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v503, 0, 1, v505);
            uint64_t v353 = v2610;
          }
          uint64_t v829 = v355[6];
          uint64_t v830 = (void *)((char *)v353 + v829);
          uint64_t v831 = (void *)((char *)v354 + v829);
          uint64_t v832 = type metadata accessor for TicketedTransportation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v831, 1, v832))
          {
            uint64_t v833 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
            memcpy(v830, v831, *(void *)(*(void *)(v833 - 8) + 64));
          }
          else
          {
            uint64_t v834 = v831[1];
            *uint64_t v830 = *v831;
            v830[1] = v834;
            uint64_t v835 = v831[3];
            v830[2] = v831[2];
            v830[3] = v835;
            uint64_t v836 = v831[5];
            v830[4] = v831[4];
            v830[5] = v836;
            uint64_t v837 = v831[7];
            v830[6] = v831[6];
            v830[7] = v837;
            uint64_t v838 = v831[9];
            v830[8] = v831[8];
            v830[9] = v838;
            uint64_t v839 = v831[11];
            v830[10] = v831[10];
            v830[11] = v839;
            uint64_t v840 = v831[13];
            v830[12] = v831[12];
            v830[13] = v840;
            uint64_t v841 = v831[15];
            v830[14] = v831[14];
            v830[15] = v841;
            *((unsigned char *)v830 + 128) = *((unsigned char *)v831 + 128);
            *(_WORD *)((char *)v830 + 129) = *(_WORD *)((char *)v831 + 129);
            uint64_t v842 = v831[18];
            v830[17] = v831[17];
            v830[18] = v842;
            uint64_t v843 = v831[20];
            v830[19] = v831[19];
            v830[20] = v843;
            uint64_t v844 = v831[22];
            v830[21] = v831[21];
            v830[22] = v844;
            uint64_t v845 = v831[24];
            v830[23] = v831[23];
            v830[24] = v845;
            v2538 = (void *)v831[26];
            v830[25] = v831[25];
            v830[26] = v2538;
            uint64_t v846 = v831[28];
            v830[27] = v831[27];
            v830[28] = v846;
            uint64_t v847 = v831[30];
            v830[29] = v831[29];
            v830[30] = v847;
            uint64_t v848 = v831[32];
            v830[31] = v831[31];
            v830[32] = v848;
            uint64_t v849 = v831[34];
            v830[33] = v831[33];
            v830[34] = v849;
            uint64_t v850 = v831[36];
            uint64_t v851 = v831[35];
            *((unsigned char *)v830 + 296) = *((unsigned char *)v831 + 296);
            v830[35] = v851;
            v830[36] = v850;
            uint64_t v852 = *(int *)(v832 + 112);
            uint64_t v2549 = (char *)v830 + v852;
            uint64_t v853 = (char *)v831 + v852;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v853, 1, v2646))
            {
              uint64_t v854 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2549, v853, *(void *)(*(void *)(v854 - 8) + 64));
            }
            else
            {
              v2632(v2549, v853, v2646);
              __swift_storeEnumTagSinglePayload((uint64_t)v2549, 0, 1, v2646);
            }
            uint64_t v907 = v832;
            uint64_t v908 = *(int *)(v832 + 116);
            uint64_t v909 = (char *)v830 + v908;
            uint64_t v910 = (char *)v831 + v908;
            if (__swift_getEnumTagSinglePayload((uint64_t)v831 + v908, 1, v2646))
            {
              uint64_t v911 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v909, v910, *(void *)(*(void *)(v911 - 8) + 64));
            }
            else
            {
              v2632(v909, v910, v2646);
              __swift_storeEnumTagSinglePayload((uint64_t)v909, 0, 1, v2646);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v830, 0, 1, v907);
            uint64_t v353 = v2610;
          }
          uint64_t v921 = v355[7];
          uint64_t v922 = (void *)((char *)v353 + v921);
          uint64_t v923 = (void *)((char *)v354 + v921);
          uint64_t v924 = (int *)type metadata accessor for TicketedShow(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v923, 1, (uint64_t)v924))
          {
            uint64_t v925 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
            memcpy(v922, v923, *(void *)(*(void *)(v925 - 8) + 64));
          }
          else
          {
            uint64_t v926 = v923[1];
            *uint64_t v922 = *v923;
            v922[1] = v926;
            uint64_t v927 = v923[3];
            v922[2] = v923[2];
            v922[3] = v927;
            uint64_t v928 = v923[5];
            v922[4] = v923[4];
            v922[5] = v928;
            uint64_t v929 = v923[7];
            v922[6] = v923[6];
            v922[7] = v929;
            uint64_t v930 = v923[9];
            v922[8] = v923[8];
            v922[9] = v930;
            uint64_t v931 = v923[11];
            v922[10] = v923[10];
            v922[11] = v931;
            uint64_t v932 = v923[13];
            v922[12] = v923[12];
            v922[13] = v932;
            uint64_t v933 = v923[15];
            v922[14] = v923[14];
            v922[15] = v933;
            *((unsigned char *)v922 + 128) = *((unsigned char *)v923 + 128);
            *(_WORD *)((char *)v922 + 129) = *(_WORD *)((char *)v923 + 129);
            uint64_t v934 = v923[18];
            v922[17] = v923[17];
            v922[18] = v934;
            uint64_t v935 = v923[20];
            v922[19] = v923[19];
            v922[20] = v935;
            uint64_t v936 = v923[22];
            v922[21] = v923[21];
            v922[22] = v936;
            uint64_t v2495 = v923[24];
            v922[23] = v923[23];
            v922[24] = v2495;
            uint64_t v937 = v923[26];
            v922[25] = v923[25];
            v922[26] = v937;
            uint64_t v938 = v923[28];
            v922[27] = v923[27];
            v922[28] = v938;
            v2539 = (void *)v923[30];
            v922[29] = v923[29];
            v922[30] = v2539;
            uint64_t v939 = v923[32];
            v922[31] = v923[31];
            v922[32] = v939;
            uint64_t v940 = v923[34];
            v922[33] = v923[33];
            v922[34] = v940;
            uint64_t v941 = v923[36];
            uint64_t v942 = v923[35];
            *((unsigned char *)v922 + 296) = *((unsigned char *)v923 + 296);
            v922[35] = v942;
            v922[36] = v941;
            uint64_t v943 = v923[39];
            v922[38] = v923[38];
            v922[39] = v943;
            uint64_t v944 = v924[29];
            v2552 = (char *)v922 + v944;
            uint64_t v945 = (char *)v923 + v944;
            uint64_t v946 = type metadata accessor for URL();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v945, 1, v946))
            {
              uint64_t v947 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v2552, v945, *(void *)(*(void *)(v947 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v946 - 8) + 16))(v2552, v945, v946);
              __swift_storeEnumTagSinglePayload((uint64_t)v2552, 0, 1, v946);
            }
            uint64_t v1003 = v924[30];
            uint64_t v1004 = (void *)((char *)v922 + v1003);
            uint64_t v1005 = (void *)((char *)v923 + v1003);
            uint64_t v1006 = v1005[1];
            void *v1004 = *v1005;
            v1004[1] = v1006;
            uint64_t v1007 = v924[31];
            uint64_t v1008 = (char *)v922 + v1007;
            uint64_t v1009 = (char *)v923 + v1007;
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1009, 1, v2646))
            {
              uint64_t v1010 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1008, v1009, *(void *)(*(void *)(v1010 - 8) + 64));
            }
            else
            {
              v2632(v1008, v1009, v2646);
              __swift_storeEnumTagSinglePayload((uint64_t)v1008, 0, 1, v2646);
            }
            uint64_t v1027 = v924[32];
            uint64_t v1028 = (char *)v922 + v1027;
            uint64_t v1029 = (char *)v923 + v1027;
            if (__swift_getEnumTagSinglePayload((uint64_t)v923 + v1027, 1, v2646))
            {
              uint64_t v1030 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1028, v1029, *(void *)(*(void *)(v1030 - 8) + 64));
            }
            else
            {
              v2632(v1028, v1029, v2646);
              __swift_storeEnumTagSinglePayload((uint64_t)v1028, 0, 1, v2646);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v922, 0, 1, (uint64_t)v924);
            uint64_t v353 = v2610;
          }
          uint64_t v1039 = v355[8];
          uint64_t v1040 = (void *)((char *)v353 + v1039);
          uint64_t v1041 = (void *)((char *)v354 + v1039);
          uint64_t v1042 = type metadata accessor for Appointment(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1041, 1, v1042))
          {
            uint64_t v1043 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
            memcpy(v1040, v1041, *(void *)(*(void *)(v1043 - 8) + 64));
          }
          else
          {
            uint64_t v1044 = v1041[1];
            void *v1040 = *v1041;
            v1040[1] = v1044;
            uint64_t v1045 = v1041[3];
            v1040[2] = v1041[2];
            v1040[3] = v1045;
            uint64_t v1046 = v1041[5];
            v1040[4] = v1041[4];
            v1040[5] = v1046;
            uint64_t v1047 = v1041[7];
            v1040[6] = v1041[6];
            v1040[7] = v1047;
            uint64_t v1048 = v1041[9];
            v1040[8] = v1041[8];
            v1040[9] = v1048;
            uint64_t v1049 = v1041[11];
            v1040[10] = v1041[10];
            v1040[11] = v1049;
            uint64_t v1050 = v1041[13];
            v1040[12] = v1041[12];
            v1040[13] = v1050;
            uint64_t v1051 = v1041[15];
            v1040[14] = v1041[14];
            v1040[15] = v1051;
            *((unsigned char *)v1040 + 128) = *((unsigned char *)v1041 + 128);
            *(_WORD *)((char *)v1040 + 129) = *(_WORD *)((char *)v1041 + 129);
            uint64_t v1052 = v1041[18];
            v1040[17] = v1041[17];
            v1040[18] = v1052;
            uint64_t v1053 = v1041[20];
            v1040[19] = v1041[19];
            v1040[20] = v1053;
            uint64_t v1054 = v1041[22];
            v1040[21] = v1041[21];
            v1040[22] = v1054;
            uint64_t v1055 = v1041[24];
            v1040[23] = v1041[23];
            v1040[24] = v1055;
            uint64_t v1056 = v1041[26];
            v1040[25] = v1041[25];
            v1040[26] = v1056;
            uint64_t v1057 = v1041[28];
            v1040[27] = v1041[27];
            v1040[28] = v1057;
            uint64_t v1058 = v1041[30];
            v1040[29] = v1041[29];
            v1040[30] = v1058;
            uint64_t v1059 = v1041[32];
            v1040[31] = v1041[31];
            v1040[32] = v1059;
            uint64_t v1060 = v1041[34];
            uint64_t v1061 = v1041[33];
            *((unsigned char *)v1040 + 280) = *((unsigned char *)v1041 + 280);
            v1040[33] = v1061;
            v1040[34] = v1060;
            uint64_t v1062 = v1041[37];
            v1040[36] = v1041[36];
            v1040[37] = v1062;
            uint64_t v1063 = *(int *)(v1042 + 108);
            v2554 = (char *)v1040 + v1063;
            uint64_t v1064 = (char *)v1041 + v1063;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1064, 1, v2646))
            {
              uint64_t v1065 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2554, v1064, *(void *)(*(void *)(v1065 - 8) + 64));
            }
            else
            {
              v2632(v2554, v1064, v2646);
              __swift_storeEnumTagSinglePayload((uint64_t)v2554, 0, 1, v2646);
            }
            uint64_t v1120 = v1042;
            uint64_t v1121 = *(int *)(v1042 + 112);
            uint64_t v1122 = (char *)v1040 + v1121;
            uint64_t v1123 = (char *)v1041 + v1121;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1041 + v1121, 1, v2646))
            {
              uint64_t v1124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1122, v1123, *(void *)(*(void *)(v1124 - 8) + 64));
            }
            else
            {
              v2632(v1122, v1123, v2646);
              __swift_storeEnumTagSinglePayload((uint64_t)v1122, 0, 1, v2646);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v1040, 0, 1, v1120);
            uint64_t v353 = v2610;
          }
          uint64_t v1134 = v355[9];
          uint64_t v1135 = (void *)((char *)v353 + v1134);
          uint64_t v1136 = (void *)((char *)v354 + v1134);
          uint64_t v1137 = type metadata accessor for Party(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1136, 1, v1137))
          {
            uint64_t v1138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
            memcpy(v1135, v1136, *(void *)(*(void *)(v1138 - 8) + 64));
          }
          else
          {
            uint64_t v1139 = v1136[1];
            *uint64_t v1135 = *v1136;
            v1135[1] = v1139;
            uint64_t v1140 = v1136[3];
            v1135[2] = v1136[2];
            v1135[3] = v1140;
            uint64_t v1141 = v1136[5];
            v1135[4] = v1136[4];
            v1135[5] = v1141;
            uint64_t v1142 = v1136[7];
            v1135[6] = v1136[6];
            v1135[7] = v1142;
            uint64_t v1143 = v1136[9];
            v1135[8] = v1136[8];
            v1135[9] = v1143;
            uint64_t v1144 = v1136[11];
            v1135[10] = v1136[10];
            v1135[11] = v1144;
            uint64_t v1145 = v1136[13];
            v1135[12] = v1136[12];
            v1135[13] = v1145;
            uint64_t v1146 = v1136[15];
            v1135[14] = v1136[14];
            v1135[15] = v1146;
            *((unsigned char *)v1135 + 128) = *((unsigned char *)v1136 + 128);
            *(_WORD *)((char *)v1135 + 129) = *(_WORD *)((char *)v1136 + 129);
            uint64_t v1147 = v1136[18];
            v1135[17] = v1136[17];
            v1135[18] = v1147;
            uint64_t v1148 = v1136[20];
            v1135[19] = v1136[19];
            v1135[20] = v1148;
            uint64_t v1149 = v1136[22];
            v1135[21] = v1136[21];
            v1135[22] = v1149;
            uint64_t v1150 = v1136[24];
            v1135[23] = v1136[23];
            v1135[24] = v1150;
            uint64_t v1151 = v1136[26];
            v1135[25] = v1136[25];
            v1135[26] = v1151;
            uint64_t v1152 = v1136[28];
            v1135[27] = v1136[27];
            v1135[28] = v1152;
            uint64_t v1153 = v1136[30];
            v1135[29] = v1136[29];
            v1135[30] = v1153;
            v1135[31] = v1136[31];
            uint64_t v1154 = *(int *)(v1137 + 96);
            v2540 = (char *)v1135 + v1154;
            v2555 = (int *)v1137;
            uint64_t v1155 = (char *)v1136 + v1154;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1155, 1, v2646))
            {
              uint64_t v1156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2540, v1155, *(void *)(*(void *)(v1156 - 8) + 64));
            }
            else
            {
              v2632(v2540, v1155, v2646);
              __swift_storeEnumTagSinglePayload((uint64_t)v2540, 0, 1, v2646);
            }
            uint64_t v1203 = v2555[25];
            uint64_t v1204 = (char *)v1135 + v1203;
            uint64_t v1205 = (char *)v1136 + v1203;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1136 + v1203, 1, v2646))
            {
              uint64_t v1206 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1204, v1205, *(void *)(*(void *)(v1206 - 8) + 64));
            }
            else
            {
              v2632(v1204, v1205, v2646);
              __swift_storeEnumTagSinglePayload((uint64_t)v1204, 0, 1, v2646);
            }
            uint64_t v1215 = v2555[26];
            uint64_t v1216 = (char *)v1135 + v1215;
            uint64_t v1217 = (char *)v1136 + v1215;
            uint64_t v1218 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1217, 1, v1218))
            {
              uint64_t v1219 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1216, v1217, *(void *)(*(void *)(v1219 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1218 - 8) + 16))(v1216, v1217, v1218);
              __swift_storeEnumTagSinglePayload((uint64_t)v1216, 0, 1, v1218);
            }
            long long v355 = v2591;
            __swift_storeEnumTagSinglePayload((uint64_t)v1135, 0, 1, (uint64_t)v2555);
            uint64_t v353 = v2610;
          }
          uint64_t v1229 = v355[10];
          uint64_t v1230 = (void *)((char *)v353 + v1229);
          v1231 = (void *)((char *)v354 + v1229);
          uint64_t v1232 = type metadata accessor for Trip(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1231, 1, v1232))
          {
            uint64_t v1233 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
            memcpy(v1230, v1231, *(void *)(*(void *)(v1233 - 8) + 64));
          }
          else
          {
            uint64_t v1234 = v1231[1];
            *uint64_t v1230 = *v1231;
            v1230[1] = v1234;
            uint64_t v1235 = v1231[3];
            v1230[2] = v1231[2];
            v1230[3] = v1235;
            uint64_t v1236 = v1231[5];
            v1230[4] = v1231[4];
            v1230[5] = v1236;
            uint64_t v1237 = v1231[7];
            v1230[6] = v1231[6];
            v1230[7] = v1237;
            uint64_t v1238 = v1231[9];
            v1230[8] = v1231[8];
            v1230[9] = v1238;
            uint64_t v1239 = v1231[11];
            v1230[10] = v1231[10];
            v1230[11] = v1239;
            uint64_t v1240 = v1231[13];
            v1230[12] = v1231[12];
            v1230[13] = v1240;
            uint64_t v1241 = v1231[15];
            v1230[14] = v1231[14];
            v1230[15] = v1241;
            *((unsigned char *)v1230 + 128) = *((unsigned char *)v1231 + 128);
            *(_WORD *)((char *)v1230 + 129) = *(_WORD *)((char *)v1231 + 129);
            uint64_t v1242 = v1231[18];
            v1230[17] = v1231[17];
            v1230[18] = v1242;
            uint64_t v1243 = v1231[20];
            v1230[19] = v1231[19];
            v1230[20] = v1243;
            uint64_t v1244 = v1231[22];
            v1230[21] = v1231[21];
            v1230[22] = v1244;
            uint64_t v1245 = v1231[24];
            v1230[23] = v1231[23];
            v1230[24] = v1245;
            uint64_t v1246 = v1231[26];
            v1230[25] = v1231[25];
            v1230[26] = v1246;
            v1230[27] = v1231[27];
            v2557 = (int *)v1232;
            uint64_t v1247 = *(int *)(v1232 + 88);
            v2541 = (char *)v1230 + v1247;
            uint64_t v1248 = (char *)v1231 + v1247;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1248, 1, v2646))
            {
              uint64_t v1249 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2541, v1248, *(void *)(*(void *)(v1249 - 8) + 64));
            }
            else
            {
              v2632(v2541, v1248, v2646);
              __swift_storeEnumTagSinglePayload((uint64_t)v2541, 0, 1, v2646);
            }
            uint64_t v1292 = *(int *)(v1232 + 92);
            uint64_t v1293 = (char *)v1230 + v1292;
            uint64_t v1294 = (char *)v1231 + v1292;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1231 + v1292, 1, v2646))
            {
              uint64_t v1295 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1293, v1294, *(void *)(*(void *)(v1295 - 8) + 64));
            }
            else
            {
              v2632(v1293, v1294, v2646);
              __swift_storeEnumTagSinglePayload((uint64_t)v1293, 0, 1, v2646);
            }
            uint64_t v1304 = v2557[24];
            uint64_t v1305 = (char *)v1230 + v1304;
            v1306 = (char *)v1231 + v1304;
            *(void *)uint64_t v1305 = *(void *)v1306;
            v1305[8] = v1306[8];
            uint64_t v1307 = v2557[25];
            uint64_t v1308 = (char *)v1230 + v1307;
            uint64_t v1309 = (char *)v1231 + v1307;
            uint64_t v1310 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1309, 1, v1310))
            {
              uint64_t v1311 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1308, v1309, *(void *)(*(void *)(v1311 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1310 - 8) + 16))(v1308, v1309, v1310);
              __swift_storeEnumTagSinglePayload((uint64_t)v1308, 0, 1, v1310);
            }
            long long v355 = v2591;
            __swift_storeEnumTagSinglePayload((uint64_t)v1230, 0, 1, (uint64_t)v2557);
            uint64_t v353 = v2610;
          }
          uint64_t v1327 = v355[11];
          uint64_t v1328 = (void *)((char *)v353 + v1327);
          v1329 = (void *)((char *)v354 + v1327);
          v1330 = (int *)type metadata accessor for FlightReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1329, 1, (uint64_t)v1330))
          {
            uint64_t v1331 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
            memcpy(v1328, v1329, *(void *)(*(void *)(v1331 - 8) + 64));
          }
          else
          {
            uint64_t v1332 = v1329[1];
            *uint64_t v1328 = *v1329;
            v1328[1] = v1332;
            uint64_t v1333 = v1329[3];
            v1328[2] = v1329[2];
            v1328[3] = v1333;
            uint64_t v1334 = v1329[5];
            v1328[4] = v1329[4];
            v1328[5] = v1334;
            uint64_t v1335 = v1329[7];
            v1328[6] = v1329[6];
            v1328[7] = v1335;
            uint64_t v1336 = v1329[9];
            v1328[8] = v1329[8];
            v1328[9] = v1336;
            uint64_t v1337 = v1329[11];
            v1328[10] = v1329[10];
            v1328[11] = v1337;
            *((unsigned char *)v1328 + 96) = *((unsigned char *)v1329 + 96);
            uint64_t v1338 = v1329[14];
            v1328[13] = v1329[13];
            v1328[14] = v1338;
            uint64_t v1339 = v1330[13];
            uint64_t v2559 = (char *)v1328 + v1339;
            uint64_t v1340 = (char *)v1329 + v1339;
            uint64_t v1341 = type metadata accessor for URL();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1340, 1, v1341))
            {
              uint64_t v1342 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v2559, v1340, *(void *)(*(void *)(v1342 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1341 - 8) + 16))(v2559, v1340, v1341);
              __swift_storeEnumTagSinglePayload((uint64_t)v2559, 0, 1, v1341);
            }
            uint64_t v1374 = v1330[14];
            uint64_t v1375 = (char *)v1328 + v1374;
            uint64_t v1376 = (char *)v1329 + v1374;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1329 + v1374, 1, v1341))
            {
              uint64_t v1377 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1375, v1376, *(void *)(*(void *)(v1377 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1341 - 8) + 16))(v1375, v1376, v1341);
              __swift_storeEnumTagSinglePayload((uint64_t)v1375, 0, 1, v1341);
            }
            uint64_t v1386 = v1330[15];
            v1387 = (void *)((char *)v1328 + v1386);
            v1388 = (void *)((char *)v1329 + v1386);
            uint64_t v1389 = v1388[1];
            void *v1387 = *v1388;
            v1387[1] = v1389;
            uint64_t v1390 = v1330[16];
            v1391 = (void *)((char *)v1328 + v1390);
            v1392 = (void *)((char *)v1329 + v1390);
            uint64_t v1393 = v1392[1];
            void *v1391 = *v1392;
            v1391[1] = v1393;
            uint64_t v1394 = v1330[17];
            v1395 = (void *)((char *)v1328 + v1394);
            v1396 = (void *)((char *)v1329 + v1394);
            uint64_t v1397 = v1396[1];
            void *v1395 = *v1396;
            v1395[1] = v1397;
            uint64_t v1398 = v1330[18];
            v2542 = (char *)v1329 + v1398;
            uint64_t v2560 = (char *)v1328 + v1398;
            uint64_t v1399 = type metadata accessor for DateComponents();
            v1400 = *(void (**)(char *, char *, uint64_t))(*(void *)(v1399 - 8) + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1400(v2560, v2542, v1399);
            v1400((char *)v1328 + v1330[19], (char *)v1329 + v1330[19], v1399);
            uint64_t v1401 = v1330[20];
            v1402 = (void *)((char *)v1328 + v1401);
            v1403 = (void *)((char *)v1329 + v1401);
            uint64_t v1404 = v1403[1];
            void *v1402 = *v1403;
            v1402[1] = v1404;
            uint64_t v1405 = v1330[21];
            v1406 = (void *)((char *)v1328 + v1405);
            v1407 = (void *)((char *)v1329 + v1405);
            uint64_t v2520 = v1407[1];
            void *v1406 = *v1407;
            v1406[1] = v2520;
            uint64_t v1408 = v1330[22];
            uint64_t v1409 = (void *)((char *)v1328 + v1408);
            uint64_t v1410 = (void *)((char *)v1329 + v1408);
            uint64_t v1411 = v1410[1];
            *uint64_t v1409 = *v1410;
            v1409[1] = v1411;
            uint64_t v1412 = v1330[23];
            v1413 = (void *)((char *)v1328 + v1412);
            v1414 = (void *)((char *)v1329 + v1412);
            uint64_t v2561 = (void *)v1414[1];
            void *v1413 = *v1414;
            v1413[1] = v2561;
            uint64_t v1415 = v1330[24];
            uint64_t v1416 = (void *)((char *)v1328 + v1415);
            v1417 = (void *)((char *)v1329 + v1415);
            __dstd = (void *)v1417[1];
            *uint64_t v1416 = *v1417;
            v1416[1] = __dstd;
            uint64_t v1418 = v1330[25];
            uint64_t v1419 = (void *)((char *)v1328 + v1418);
            uint64_t v1420 = (void *)((char *)v1329 + v1418);
            uint64_t v2526 = v1420[1];
            *uint64_t v1419 = *v1420;
            v1419[1] = v2526;
            uint64_t v1421 = v1330[26];
            v1422 = (void *)((char *)v1328 + v1421);
            uint64_t v1423 = (void *)((char *)v1329 + v1421);
            uint64_t v2514 = v1423[1];
            void *v1422 = *v1423;
            v1422[1] = v2514;
            uint64_t v1424 = v1330[27];
            v1425 = (void *)((char *)v1328 + v1424);
            v1426 = (void *)((char *)v1329 + v1424);
            uint64_t v2510 = (void *)v1426[1];
            void *v1425 = *v1426;
            v1425[1] = v2510;
            uint64_t v1427 = v1330[28];
            v1428 = (void *)((char *)v1328 + v1427);
            v1429 = (void *)((char *)v1329 + v1427);
            uint64_t v2505 = v1429[1];
            void *v1428 = *v1429;
            v1428[1] = v2505;
            uint64_t v1430 = v1330[29];
            v1431 = (void *)((char *)v1328 + v1430);
            v1432 = (void *)((char *)v1329 + v1430);
            uint64_t v2501 = v1432[1];
            void *v1431 = *v1432;
            v1431[1] = v2501;
            uint64_t v1433 = v1330[30];
            v1434 = (void *)((char *)v1328 + v1433);
            v1435 = (void *)((char *)v1329 + v1433);
            uint64_t v2499 = v1435[1];
            void *v1434 = *v1435;
            v1434[1] = v2499;
            uint64_t v1436 = v1330[31];
            v1437 = (void *)((char *)v1328 + v1436);
            v1438 = (void *)((char *)v1329 + v1436);
            uint64_t v2498 = v1438[1];
            void *v1437 = *v1438;
            v1437[1] = v2498;
            uint64_t v1439 = v1330[32];
            v1440 = (void *)((char *)v1328 + v1439);
            v1441 = (void *)((char *)v1329 + v1439);
            uint64_t v1442 = v1441[1];
            void *v1440 = *v1441;
            v1440[1] = v1442;
            *(void *)((char *)v1328 + v1330[33]) = *(void *)((char *)v1329 + v1330[33]);
            *(void *)((char *)v1328 + v1330[34]) = *(void *)((char *)v1329 + v1330[34]);
            uint64_t v1443 = v1330[35];
            v1444 = (void *)((char *)v1328 + v1443);
            uint64_t v1445 = (void *)((char *)v1329 + v1443);
            uint64_t v1446 = v1445[1];
            void *v1444 = *v1445;
            v1444[1] = v1446;
            uint64_t v1447 = v1330[36];
            uint64_t v1448 = (void *)((char *)v1328 + v1447);
            v1449 = (void *)((char *)v1329 + v1447);
            uint64_t v1450 = v1449[1];
            *uint64_t v1448 = *v1449;
            v1448[1] = v1450;
            uint64_t v1451 = v1330[37];
            v1452 = (void *)((char *)v1328 + v1451);
            v1453 = (void *)((char *)v1329 + v1451);
            uint64_t v1454 = v1453[1];
            void *v1452 = *v1453;
            v1452[1] = v1454;
            uint64_t v1455 = v1330[38];
            v2543 = (char *)v1328 + v1455;
            v1456 = (char *)v1329 + v1455;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1456, 1, v2646))
            {
              uint64_t v1457 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2543, v1456, *(void *)(*(void *)(v1457 - 8) + 64));
            }
            else
            {
              v2632(v2543, v1456, v2646);
              __swift_storeEnumTagSinglePayload((uint64_t)v2543, 0, 1, v2646);
            }
            uint64_t v1602 = v1330[39];
            v1603 = (void *)((char *)v1328 + v1602);
            uint64_t v1604 = (void *)((char *)v1329 + v1602);
            uint64_t v1605 = v1604[1];
            void *v1603 = *v1604;
            v1603[1] = v1605;
            uint64_t v1606 = v1330[40];
            v1607 = (void *)((char *)v1328 + v1606);
            uint64_t v1608 = (void *)((char *)v1329 + v1606);
            uint64_t v1609 = v1608[1];
            void *v1607 = *v1608;
            v1607[1] = v1609;
            uint64_t v1610 = v1330[41];
            uint64_t v1611 = (char *)v1328 + v1610;
            uint64_t v1612 = (char *)v1329 + v1610;
            v1611[8] = v1612[8];
            *(void *)uint64_t v1611 = *(void *)v1612;
            uint64_t v1613 = v1330[42];
            v1614 = (void *)((char *)v1328 + v1613);
            uint64_t v1615 = (void *)((char *)v1329 + v1613);
            uint64_t v1616 = v1615[1];
            void *v1614 = *v1615;
            v1614[1] = v1616;
            uint64_t v1617 = v1330[43];
            v1618 = (char *)v1328 + v1617;
            uint64_t v1619 = (char *)v1329 + v1617;
            *(_OWORD *)v1618 = *(_OWORD *)v1619;
            *(void *)(v1618 + 13) = *(void *)(v1619 + 13);
            uint64_t v1620 = v1330[44];
            v1621 = (void *)((char *)v1328 + v1620);
            v1622 = (void *)((char *)v1329 + v1620);
            uint64_t v1623 = v1622[1];
            void *v1621 = *v1622;
            v1621[1] = v1623;
            uint64_t v1624 = v1330[45];
            v1625 = (void *)((char *)v1328 + v1624);
            uint64_t v1626 = (void *)((char *)v1329 + v1624);
            uint64_t v1627 = v1626[1];
            void *v1625 = *v1626;
            v1625[1] = v1627;
            uint64_t v1628 = v1330[46];
            v1629 = (void *)((char *)v1328 + v1628);
            uint64_t v1630 = (void *)((char *)v1329 + v1628);
            uint64_t v1631 = v1630[1];
            void *v1629 = *v1630;
            v1629[1] = v1631;
            uint64_t v1632 = v1330[47];
            uint64_t v1633 = (void *)((char *)v1328 + v1632);
            uint64_t v1634 = (void *)((char *)v1329 + v1632);
            uint64_t v1635 = v1634[1];
            *uint64_t v1633 = *v1634;
            v1633[1] = v1635;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1328, 0, 1, (uint64_t)v1330);
            uint64_t v353 = v2610;
            uint64_t v354 = v2568;
            long long v355 = v2591;
          }
          uint64_t v1636 = v355[12];
          uint64_t v1637 = (void *)((char *)v353 + v1636);
          uint64_t v1638 = (void *)((char *)v354 + v1636);
          v1639 = (int *)type metadata accessor for HotelReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1638, 1, (uint64_t)v1639))
          {
            uint64_t v1640 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
            memcpy(v1637, v1638, *(void *)(*(void *)(v1640 - 8) + 64));
          }
          else
          {
            uint64_t v1641 = v1638[1];
            *uint64_t v1637 = *v1638;
            v1637[1] = v1641;
            uint64_t v1642 = v1638[3];
            v1637[2] = v1638[2];
            v1637[3] = v1642;
            uint64_t v1643 = v1638[5];
            v1637[4] = v1638[4];
            v1637[5] = v1643;
            uint64_t v1644 = v1638[7];
            v1637[6] = v1638[6];
            v1637[7] = v1644;
            uint64_t v1645 = v1638[9];
            v1637[8] = v1638[8];
            v1637[9] = v1645;
            uint64_t v1646 = v1638[11];
            v1637[10] = v1638[10];
            v1637[11] = v1646;
            *((unsigned char *)v1637 + 96) = *((unsigned char *)v1638 + 96);
            uint64_t v1647 = v1638[14];
            v1637[13] = v1638[13];
            v1637[14] = v1647;
            uint64_t v1648 = v1638[16];
            v1637[15] = v1638[15];
            v1637[16] = v1648;
            uint64_t v1649 = v1639[14];
            uint64_t v2565 = (char *)v1637 + v1649;
            uint64_t v2517 = (char *)v1638 + v1649;
            uint64_t v1650 = type metadata accessor for DateComponents();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2517, 1, v1650))
            {
              uint64_t v1651 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v2565, v2517, *(void *)(*(void *)(v1651 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1650 - 8) + 16))(v2565, v2517, v1650);
              __swift_storeEnumTagSinglePayload((uint64_t)v2565, 0, 1, v1650);
            }
            uint64_t v1752 = v1639[15];
            uint64_t v1753 = (char *)v1637 + v1752;
            uint64_t v1754 = (char *)v1638 + v1752;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1638 + v1752, 1, v1650))
            {
              uint64_t v1755 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1753, v1754, *(void *)(*(void *)(v1755 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1650 - 8) + 16))(v1753, v1754, v1650);
              __swift_storeEnumTagSinglePayload((uint64_t)v1753, 0, 1, v1650);
            }
            uint64_t v1764 = v1639[16];
            uint64_t v1765 = (void *)((char *)v1637 + v1764);
            uint64_t v1766 = (void *)((char *)v1638 + v1764);
            uint64_t v1767 = v1766[1];
            *uint64_t v1765 = *v1766;
            v1765[1] = v1767;
            uint64_t v1768 = v1639[17];
            uint64_t v1769 = (void *)((char *)v1637 + v1768);
            uint64_t v1770 = (void *)((char *)v1638 + v1768);
            uint64_t v1771 = v1770[1];
            *uint64_t v1769 = *v1770;
            v1769[1] = v1771;
            uint64_t v1772 = v1639[18];
            uint64_t v1773 = (void *)((char *)v1637 + v1772);
            uint64_t v1774 = (void *)((char *)v1638 + v1772);
            uint64_t v2566 = (void *)v1774[1];
            *uint64_t v1773 = *v1774;
            v1773[1] = v2566;
            uint64_t v1775 = v1639[19];
            v1776 = (void *)((char *)v1637 + v1775);
            uint64_t v1777 = (void *)((char *)v1638 + v1775);
            v2546 = (void *)v1777[1];
            void *v1776 = *v1777;
            v1776[1] = v2546;
            uint64_t v1778 = v1639[20];
            v1779 = (void *)((char *)v1637 + v1778);
            v1780 = (void *)((char *)v1638 + v1778);
            uint64_t v1781 = v1780[1];
            void *v1779 = *v1780;
            v1779[1] = v1781;
            *(void *)((char *)v1637 + v1639[21]) = *(void *)((char *)v1638 + v1639[21]);
            *(void *)((char *)v1637 + v1639[22]) = *(void *)((char *)v1638 + v1639[22]);
            uint64_t v1782 = v1639[23];
            v1783 = (char *)v1637 + v1782;
            uint64_t v1784 = (char *)v1638 + v1782;
            *(void *)v1783 = *(void *)v1784;
            v1783[8] = v1784[8];
            uint64_t v1785 = v1639[24];
            v1786 = (char *)v1637 + v1785;
            uint64_t v1787 = (char *)v1638 + v1785;
            *(void *)v1786 = *(void *)v1787;
            v1786[8] = v1787[8];
            uint64_t v1788 = v1639[25];
            v1789 = (void *)((char *)v1637 + v1788);
            uint64_t v1790 = (void *)((char *)v1638 + v1788);
            uint64_t v1791 = v1790[1];
            void *v1789 = *v1790;
            v1789[1] = v1791;
            uint64_t v1792 = v1639[26];
            v1793 = (void *)((char *)v1637 + v1792);
            uint64_t v1794 = (void *)((char *)v1638 + v1792);
            uint64_t v1795 = v1794[1];
            void *v1793 = *v1794;
            v1793[1] = v1795;
            uint64_t v1796 = v1639[27];
            uint64_t v1797 = (void *)((char *)v1637 + v1796);
            v1798 = (void *)((char *)v1638 + v1796);
            uint64_t v1799 = v1798[1];
            *uint64_t v1797 = *v1798;
            v1797[1] = v1799;
            uint64_t v1800 = v1639[28];
            uint64_t v1801 = (void *)((char *)v1637 + v1800);
            v1802 = (void *)((char *)v1638 + v1800);
            uint64_t v1803 = v1802[1];
            *uint64_t v1801 = *v1802;
            v1801[1] = v1803;
            uint64_t v1804 = v1639[29];
            uint64_t v1805 = (char *)v1637 + v1804;
            v1806 = (char *)v1638 + v1804;
            *(void *)uint64_t v1805 = *(void *)v1806;
            v1805[8] = v1806[8];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1637, 0, 1, (uint64_t)v1639);
            uint64_t v353 = v2610;
            uint64_t v354 = v2568;
            long long v355 = v2591;
          }
          uint64_t v1807 = v355[13];
          uint64_t v1808 = (void *)((char *)v353 + v1807);
          uint64_t v1809 = (void *)((char *)v354 + v1807);
          v1810 = (int *)type metadata accessor for RestaurantReservation(0);
          uint64_t v8 = v2700;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1809, 1, (uint64_t)v1810))
          {
            uint64_t v1811 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
            memcpy(v1808, v1809, *(void *)(*(void *)(v1811 - 8) + 64));
          }
          else
          {
            uint64_t v1812 = v1809[1];
            *uint64_t v1808 = *v1809;
            v1808[1] = v1812;
            uint64_t v1813 = v1809[3];
            v1808[2] = v1809[2];
            v1808[3] = v1813;
            uint64_t v1814 = v1809[5];
            v1808[4] = v1809[4];
            v1808[5] = v1814;
            uint64_t v1815 = v1809[7];
            v1808[6] = v1809[6];
            v1808[7] = v1815;
            uint64_t v1816 = v1809[9];
            v1808[8] = v1809[8];
            v1808[9] = v1816;
            uint64_t v1817 = v1809[11];
            v1808[10] = v1809[10];
            v1808[11] = v1817;
            *((unsigned char *)v1808 + 96) = *((unsigned char *)v1809 + 96);
            uint64_t v1818 = v1809[14];
            v1808[13] = v1809[13];
            v1808[14] = v1818;
            uint64_t v1819 = v1809[16];
            v1808[15] = v1809[15];
            v1808[16] = v1819;
            uint64_t v1820 = v1810[14];
            v2587 = (char *)v1808 + v1820;
            uint64_t v2524 = (char *)v1809 + v1820;
            uint64_t v1821 = type metadata accessor for DateComponents();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2524, 1, v1821))
            {
              uint64_t v1822 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v2587, v2524, *(void *)(*(void *)(v1822 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1821 - 8) + 16))(v2587, v2524, v1821);
              __swift_storeEnumTagSinglePayload((uint64_t)v2587, 0, 1, v1821);
            }
            uint64_t v1941 = v1810[15];
            uint64_t v1942 = (void *)((char *)v1808 + v1941);
            uint64_t v1943 = (void *)((char *)v1809 + v1941);
            uint64_t v1944 = v1943[1];
            *uint64_t v1942 = *v1943;
            v1942[1] = v1944;
            uint64_t v1945 = v1810[16];
            uint64_t v1946 = (void *)((char *)v1808 + v1945);
            uint64_t v1947 = (void *)((char *)v1809 + v1945);
            uint64_t v1948 = v1947[1];
            *uint64_t v1946 = *v1947;
            v1946[1] = v1948;
            uint64_t v1949 = v1810[17];
            uint64_t v1950 = (void *)((char *)v1808 + v1949);
            uint64_t v1951 = (void *)((char *)v1809 + v1949);
            v2590 = (void *)v1951[1];
            *uint64_t v1950 = *v1951;
            v1950[1] = v2590;
            uint64_t v1952 = v1810[18];
            v1953 = (void *)((char *)v1808 + v1952);
            uint64_t v1954 = (void *)((char *)v1809 + v1952);
            uint64_t v1955 = v1954[1];
            void *v1953 = *v1954;
            v1953[1] = v1955;
            uint64_t v1956 = v1810[19];
            v1957 = (void *)((char *)v1808 + v1956);
            uint64_t v1958 = (void *)((char *)v1809 + v1956);
            uint64_t v1959 = v1958[1];
            void *v1957 = *v1958;
            v1957[1] = v1959;
            *(void *)((char *)v1808 + v1810[20]) = *(void *)((char *)v1809 + v1810[20]);
            uint64_t v1960 = v1810[21];
            uint64_t v1961 = (void *)((char *)v1808 + v1960);
            v1962 = (void *)((char *)v1809 + v1960);
            uint64_t v1963 = v1962[1];
            *uint64_t v1961 = *v1962;
            v1961[1] = v1963;
            uint64_t v1964 = v1810[22];
            uint64_t v1965 = (void *)((char *)v1808 + v1964);
            v1966 = (void *)((char *)v1809 + v1964);
            uint64_t v1967 = v1966[1];
            *uint64_t v1965 = *v1966;
            v1965[1] = v1967;
            uint64_t v1968 = v1810[23];
            uint64_t v1969 = (void *)((char *)v1808 + v1968);
            v1970 = (void *)((char *)v1809 + v1968);
            uint64_t v1971 = v1970[1];
            *uint64_t v1969 = *v1970;
            v1969[1] = v1971;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1808, 0, 1, (uint64_t)v1810);
            uint64_t v8 = v2700;
            uint64_t v353 = v2610;
            long long v355 = v2591;
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v353, 0, 1, (uint64_t)v355);
        }
        uint64_t v1972 = v2659[22];
        uint64_t v1973 = (void *)((char *)v8 + v1972);
        v1974 = (void *)((char *)v9 + v1972);
        v1975 = (int *)type metadata accessor for PreExtractedCard(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1974, 1, (uint64_t)v1975))
        {
          uint64_t v1976 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
          memcpy(v1973, v1974, *(void *)(*(void *)(v1976 - 8) + 64));
        }
        else
        {
          uint64_t v1977 = v1974[1];
          *uint64_t v1973 = *v1974;
          v1973[1] = v1977;
          uint64_t v1978 = v1974[3];
          v1973[2] = v1974[2];
          v1973[3] = v1978;
          uint64_t v1979 = v1974[5];
          v1973[4] = v1974[4];
          v1973[5] = v1979;
          uint64_t v1980 = v1974[7];
          v1973[6] = v1974[6];
          v1973[7] = v1980;
          uint64_t v1981 = v1974[9];
          v1973[8] = v1974[8];
          v1973[9] = v1981;
          uint64_t v1982 = v1974[11];
          v1973[10] = v1974[10];
          v1973[11] = v1982;
          uint64_t v1983 = v1975[10];
          v2615 = (char *)v1973 + v1983;
          v1984 = (char *)v1974 + v1983;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v1984, 1, v2646))
          {
            uint64_t v1985 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2615, v1984, *(void *)(*(void *)(v1985 - 8) + 64));
          }
          else
          {
            v2632(v2615, v1984, v2646);
            __swift_storeEnumTagSinglePayload((uint64_t)v2615, 0, 1, v2646);
          }
          uint64_t v1986 = v1975[11];
          uint64_t v1987 = (char *)v1973 + v1986;
          uint64_t v1988 = (char *)v1974 + v1986;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1974 + v1986, 1, v2646))
          {
            uint64_t v1989 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1987, v1988, *(void *)(*(void *)(v1989 - 8) + 64));
          }
          else
          {
            v2632(v1987, v1988, v2646);
            __swift_storeEnumTagSinglePayload((uint64_t)v1987, 0, 1, v2646);
          }
          uint64_t v1990 = v1975[12];
          uint64_t v1991 = (void *)((char *)v1973 + v1990);
          uint64_t v1992 = (void *)((char *)v1974 + v1990);
          uint64_t v1993 = v1992[1];
          *uint64_t v1991 = *v1992;
          v1991[1] = v1993;
          uint64_t v1994 = v1975[13];
          v1995 = (void *)((char *)v1973 + v1994);
          v1996 = (void *)((char *)v1974 + v1994);
          uint64_t v1997 = v1996[1];
          void *v1995 = *v1996;
          v1995[1] = v1997;
          uint64_t v1998 = v1975[14];
          v1999 = (void *)((char *)v1973 + v1998);
          v2000 = (void *)((char *)v1974 + v1998);
          uint64_t v2001 = v2000[1];
          void *v1999 = *v2000;
          v1999[1] = v2001;
          uint64_t v2002 = v1975[15];
          v2003 = (char *)v1973 + v2002;
          v2004 = (char *)v1974 + v2002;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2004, 1, v2646))
          {
            uint64_t v2005 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2003, v2004, *(void *)(*(void *)(v2005 - 8) + 64));
          }
          else
          {
            v2632(v2003, v2004, v2646);
            __swift_storeEnumTagSinglePayload((uint64_t)v2003, 0, 1, v2646);
          }
          uint64_t v2006 = v1975[16];
          v2007 = (void *)((char *)v1973 + v2006);
          v2008 = (void *)((char *)v1974 + v2006);
          uint64_t v2009 = v2008[1];
          void *v2007 = *v2008;
          v2007[1] = v2009;
          uint64_t v2010 = v1975[17];
          v2011 = (void *)((char *)v1973 + v2010);
          v2012 = (void *)((char *)v1974 + v2010);
          uint64_t v2013 = v2012[1];
          void *v2011 = *v2012;
          v2011[1] = v2013;
          uint64_t v2014 = v1975[18];
          v2015 = (void *)((char *)v1973 + v2014);
          v2016 = (void *)((char *)v1974 + v2014);
          uint64_t v2017 = v2016[1];
          void *v2015 = *v2016;
          v2015[1] = v2017;
          uint64_t v2018 = v1975[19];
          v2019 = (void *)((char *)v1973 + v2018);
          v2020 = (void *)((char *)v1974 + v2018);
          uint64_t v2021 = v2020[1];
          void *v2019 = *v2020;
          v2019[1] = v2021;
          uint64_t v2022 = v1975[20];
          v2023 = (void *)((char *)v1973 + v2022);
          uint64_t v2024 = (void *)((char *)v1974 + v2022);
          uint64_t v2025 = v2024[1];
          void *v2023 = *v2024;
          v2023[1] = v2025;
          uint64_t v2026 = v1975[21];
          v2027 = (void *)((char *)v1973 + v2026);
          uint64_t v2028 = (void *)((char *)v1974 + v2026);
          uint64_t v2029 = v2028[1];
          void *v2027 = *v2028;
          v2027[1] = v2029;
          uint64_t v2030 = v1975[22];
          v2031 = (void *)((char *)v1973 + v2030);
          uint64_t v2032 = (void *)((char *)v1974 + v2030);
          uint64_t v2033 = v2032[1];
          void *v2031 = *v2032;
          v2031[1] = v2033;
          uint64_t v2034 = v1975[23];
          v2035 = (void *)((char *)v1973 + v2034);
          uint64_t v2036 = (void *)((char *)v1974 + v2034);
          uint64_t v2037 = v2036[1];
          void *v2035 = *v2036;
          v2035[1] = v2037;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v1973, 0, 1, (uint64_t)v1975);
          uint64_t v8 = v2700;
        }
        uint64_t v2038 = v2659[23];
        v2039 = (void *)((char *)v8 + v2038);
        uint64_t v2040 = (void *)((char *)v9 + v2038);
        uint64_t v2041 = (int *)type metadata accessor for PreExtractedContact(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2040, 1, (uint64_t)v2041))
        {
          uint64_t v2042 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
          memcpy(v2039, v2040, *(void *)(*(void *)(v2042 - 8) + 64));
        }
        else
        {
          uint64_t v2043 = v2040[1];
          void *v2039 = *v2040;
          v2039[1] = v2043;
          uint64_t v2044 = v2040[3];
          v2039[2] = v2040[2];
          v2039[3] = v2044;
          uint64_t v2045 = v2040[5];
          v2039[4] = v2040[4];
          v2039[5] = v2045;
          uint64_t v2046 = v2040[7];
          v2039[6] = v2040[6];
          v2039[7] = v2046;
          uint64_t v2047 = v2040[9];
          v2039[8] = v2040[8];
          v2039[9] = v2047;
          uint64_t v2048 = v2040[11];
          v2039[10] = v2040[10];
          v2039[11] = v2048;
          uint64_t v2049 = v2041[11];
          v2616 = (char *)v2039 + v2049;
          uint64_t v2050 = (char *)v2040 + v2049;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2050, 1, v2646))
          {
            uint64_t v2051 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2616, v2050, *(void *)(*(void *)(v2051 - 8) + 64));
          }
          else
          {
            v2632(v2616, v2050, v2646);
            __swift_storeEnumTagSinglePayload((uint64_t)v2616, 0, 1, v2646);
          }
          uint64_t v2052 = v2041[12];
          uint64_t v2053 = (void *)((char *)v2039 + v2052);
          uint64_t v2054 = (void *)((char *)v2040 + v2052);
          uint64_t v2055 = v2054[1];
          *uint64_t v2053 = *v2054;
          v2053[1] = v2055;
          *(void *)((char *)v2039 + v2041[13]) = *(void *)((char *)v2040 + v2041[13]);
          uint64_t v2056 = v2041[14];
          uint64_t v2057 = (char *)v2039 + v2056;
          v2058 = (char *)v2040 + v2056;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v8 = v2700;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2058, 1, v2646))
          {
            uint64_t v2059 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2057, v2058, *(void *)(*(void *)(v2059 - 8) + 64));
          }
          else
          {
            v2632(v2057, v2058, v2646);
            __swift_storeEnumTagSinglePayload((uint64_t)v2057, 0, 1, v2646);
          }
          *(void *)((char *)v2039 + v2041[15]) = *(void *)((char *)v2040 + v2041[15]);
          *(void *)((char *)v2039 + v2041[16]) = *(void *)((char *)v2040 + v2041[16]);
          uint64_t v2060 = v2041[17];
          uint64_t v2061 = (void *)((char *)v2039 + v2060);
          v2062 = (void *)((char *)v2040 + v2060);
          uint64_t v2063 = v2062[1];
          *uint64_t v2061 = *v2062;
          v2061[1] = v2063;
          *(void *)((char *)v2039 + v2041[18]) = *(void *)((char *)v2040 + v2041[18]);
          *(void *)((char *)v2039 + v2041[19]) = *(void *)((char *)v2040 + v2041[19]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2039, 0, 1, (uint64_t)v2041);
        }
        uint64_t v2064 = v2659[24];
        uint64_t v2065 = (void *)((char *)v8 + v2064);
        v2066 = (void *)((char *)v9 + v2064);
        v2067 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2066, 1, (uint64_t)v2067))
        {
          uint64_t v2068 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
          memcpy(v2065, v2066, *(void *)(*(void *)(v2068 - 8) + 64));
        }
        else
        {
          uint64_t v2069 = v2066[1];
          *uint64_t v2065 = *v2066;
          v2065[1] = v2069;
          uint64_t v2070 = v2066[3];
          v2065[2] = v2066[2];
          v2065[3] = v2070;
          uint64_t v2071 = v2066[5];
          v2065[4] = v2066[4];
          v2065[5] = v2071;
          uint64_t v2072 = v2066[7];
          v2065[6] = v2066[6];
          v2065[7] = v2072;
          uint64_t v2073 = v2067[8];
          v2617 = (char *)v2065 + v2073;
          uint64_t v2074 = (char *)v2066 + v2073;
          uint64_t v2075 = type metadata accessor for URL();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2074, 1, v2075))
          {
            uint64_t v2076 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v2617, v2074, *(void *)(*(void *)(v2076 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2075 - 8) + 16))(v2617, v2074, v2075);
            __swift_storeEnumTagSinglePayload((uint64_t)v2617, 0, 1, v2075);
          }
          uint64_t v2077 = v2067[9];
          uint64_t v2078 = (void *)((char *)v2065 + v2077);
          uint64_t v2079 = (void *)((char *)v2066 + v2077);
          uint64_t v2080 = v2079[1];
          *uint64_t v2078 = *v2079;
          v2078[1] = v2080;
          uint64_t v2081 = v2067[10];
          v2082 = (void *)((char *)v2065 + v2081);
          v2083 = (void *)((char *)v2066 + v2081);
          uint64_t v2084 = v2083[1];
          void *v2082 = *v2083;
          v2082[1] = v2084;
          uint64_t v2085 = v2067[11];
          v2086 = (void *)((char *)v2065 + v2085);
          v2087 = (void *)((char *)v2066 + v2085);
          uint64_t v2088 = v2087[1];
          void *v2086 = *v2087;
          v2086[1] = v2088;
          uint64_t v2089 = v2067[12];
          v2090 = (char *)v2065 + v2089;
          v2091 = (char *)v2066 + v2089;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v8 = v2700;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2091, 1, v2646))
          {
            uint64_t v2092 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2090, v2091, *(void *)(*(void *)(v2092 - 8) + 64));
          }
          else
          {
            v2632(v2090, v2091, v2646);
            __swift_storeEnumTagSinglePayload((uint64_t)v2090, 0, 1, v2646);
          }
          uint64_t v2093 = v2067[13];
          v2094 = (char *)v2065 + v2093;
          v2095 = (char *)v2066 + v2093;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2066 + v2093, 1, v2646))
          {
            uint64_t v2096 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2094, v2095, *(void *)(*(void *)(v2096 - 8) + 64));
          }
          else
          {
            v2632(v2094, v2095, v2646);
            __swift_storeEnumTagSinglePayload((uint64_t)v2094, 0, 1, v2646);
          }
          uint64_t v2097 = v2067[14];
          v2098 = (char *)v2065 + v2097;
          v2099 = (char *)v2066 + v2097;
          *(void *)v2098 = *(void *)v2099;
          v2098[8] = v2099[8];
          uint64_t v2100 = v2067[15];
          uint64_t v2101 = (void *)((char *)v2065 + v2100);
          v2102 = (void *)((char *)v2066 + v2100);
          uint64_t v2103 = v2102[1];
          *uint64_t v2101 = *v2102;
          v2101[1] = v2103;
          uint64_t v2104 = v2067[16];
          v2105 = (void *)((char *)v2065 + v2104);
          v2106 = (void *)((char *)v2066 + v2104);
          uint64_t v2107 = v2106[1];
          void *v2105 = *v2106;
          v2105[1] = v2107;
          uint64_t v2108 = v2067[17];
          v2109 = (void *)((char *)v2065 + v2108);
          v2110 = (void *)((char *)v2066 + v2108);
          uint64_t v2111 = v2110[1];
          void *v2109 = *v2110;
          v2109[1] = v2111;
          uint64_t v2112 = v2067[18];
          v2113 = (void *)((char *)v2065 + v2112);
          v2114 = (void *)((char *)v2066 + v2112);
          uint64_t v2115 = v2114[1];
          void *v2113 = *v2114;
          v2113[1] = v2115;
          uint64_t v2116 = v2067[19];
          v2117 = (void *)((char *)v2065 + v2116);
          v2118 = (void *)((char *)v2066 + v2116);
          uint64_t v2119 = v2118[1];
          void *v2117 = *v2118;
          v2117[1] = v2119;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2065, 0, 1, (uint64_t)v2067);
        }
        uint64_t v2120 = v2659[25];
LABEL_537:
        v2477 = (void *)((char *)v8 + v2120);
        v2478 = (void *)((char *)v9 + v2120);
        uint64_t v2479 = *(void *)((char *)v9 + v2120 + 8);
        if (v2479)
        {
          void *v2477 = *v2478;
          v2477[1] = v2479;
          uint64_t v2480 = v2478[3];
          v2477[2] = v2478[2];
          v2477[3] = v2480;
          uint64_t v2481 = v2478[5];
          v2477[4] = v2478[4];
          v2477[5] = v2481;
          uint64_t v2482 = v2478[7];
          v2477[6] = v2478[6];
          v2477[7] = v2482;
          uint64_t v2483 = v2478[9];
          v2477[8] = v2478[8];
          v2477[9] = v2483;
          uint64_t v2484 = v2478[11];
          v2477[10] = v2478[10];
          v2477[11] = v2484;
          uint64_t v2631 = v2478[13];
          v2477[12] = v2478[12];
          v2477[13] = v2631;
          uint64_t v2657 = v2478[15];
          v2477[14] = v2478[14];
          v2477[15] = v2657;
          uint64_t v2485 = v2478[17];
          v2477[16] = v2478[16];
          v2477[17] = v2485;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v8 = v2700;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_539:
          swift_bridgeObjectRetain();
        }
        else
        {
          memcpy(v2477, v2478, 0x90uLL);
        }
        uint64_t v5 = v2672;
LABEL_542:
        uint64_t v4 = v2681;
LABEL_543:
        uint64_t v3 = v2689;
        uint64_t v10 = v2699;
        break;
    }
    swift_storeEnumTagMultiPayload();
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v2486 = v3[7];
  *(void *)((char *)v5 + v3[6]) = *(void *)((char *)v4 + v3[6]);
  uint64_t v2487 = (char *)v5 + v2486;
  uint64_t v2488 = (char *)v4 + v2486;
  uint64_t v2489 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v2488, 1, v2489))
  {
    uint64_t v2490 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v2487, v2488, *(void *)(*(void *)(v2490 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v2489 - 8) + 16))(v2487, v2488, v2489);
    __swift_storeEnumTagSinglePayload((uint64_t)v2487, 0, 1, v2489);
  }
  *(void *)((char *)v5 + v3[8]) = *(void *)((char *)v4 + v3[8]);
  swift_bridgeObjectRetain();
  return v5;
}

#error "257F1B450: too big function (funcsize=0)"

uint64_t _s10OmniSearch13ExtractedInfoVWOhTm_0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_7_2();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

_OWORD *initializeWithTake for ResolvedInfo(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (_OWORD *)((char *)a1 + v6);
  uint64_t v8 = (_OWORD *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for SearchResultItem(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResultItem?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        long long v11 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v11;
        long long v12 = v8[3];
        void v7[2] = v8[2];
        v7[3] = v12;
        long long v13 = v8[5];
        v7[4] = v8[4];
        v7[5] = v13;
        uint64_t v14 = (int *)type metadata accessor for EmailDocument(0);
        uint64_t v15 = v14[12];
        uint64_t v16 = (char *)v7 + v15;
        uint64_t v17 = (char *)v8 + v15;
        uint64_t v1167 = (void *)type metadata accessor for Date();
        uint64_t v1163 = *(void (**)(char *, char *, void *))(*(v1167 - 1) + 32);
        v1163(v16, v17, v1167);
        *(void *)((char *)v7 + v14[13]) = *(void *)((char *)v8 + v14[13]);
        *(void *)((char *)v7 + v14[14]) = *(void *)((char *)v8 + v14[14]);
        *(void *)((char *)v7 + v14[15]) = *(void *)((char *)v8 + v14[15]);
        *((unsigned char *)v7 + v14[16]) = *((unsigned char *)v8 + v14[16]);
        *((unsigned char *)v7 + v14[17]) = *((unsigned char *)v8 + v14[17]);
        *(_OWORD *)((char *)v7 + v14[18]) = *(_OWORD *)((char *)v8 + v14[18]);
        uint64_t v18 = v14[19];
        uint64_t v19 = (char *)v7 + v18;
        uint64_t v20 = (char *)v8 + v18;
        long long v21 = *((_OWORD *)v20 + 1);
        *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
        *((_OWORD *)v19 + 1) = v21;
        *((void *)v19 + 4) = *((void *)v20 + 4);
        *(_OWORD *)((char *)v7 + v14[20]) = *(_OWORD *)((char *)v8 + v14[20]);
        uint64_t v1187 = v14;
        uint64_t v22 = v14[21];
        uint64_t v23 = (_OWORD *)((char *)v7 + v22);
        uint64_t v24 = (_OWORD *)((char *)v8 + v22);
        uint64_t v25 = (int *)type metadata accessor for PartialExtractedAttributes(0);
        uint64_t v1190 = v9;
        if (__swift_getEnumTagSinglePayload((uint64_t)v24, 1, (uint64_t)v25))
        {
          uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
          memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
        }
        else
        {
          *uint64_t v23 = *v24;
          uint64_t v238 = v25[5];
          uint64_t v239 = (_OWORD *)((char *)v23 + v238);
          uint64_t v240 = (_OWORD *)((char *)v24 + v238);
          __dst = (int *)type metadata accessor for RentalCarReservation(0);
          uint64_t v1133 = v23;
          uint64_t v1149 = (char *)v24;
          __src = v25;
          if (__swift_getEnumTagSinglePayload((uint64_t)v240, 1, (uint64_t)__dst))
          {
            uint64_t v241 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
            memcpy(v239, v240, *(void *)(*(void *)(v241 - 8) + 64));
          }
          else
          {
            long long v361 = v240[1];
            *uint64_t v239 = *v240;
            v239[1] = v361;
            long long v362 = v240[3];
            v239[2] = v240[2];
            v239[3] = v362;
            long long v363 = v240[5];
            v239[4] = v240[4];
            v239[5] = v363;
            long long v364 = v240[7];
            v239[6] = v240[6];
            v239[7] = v364;
            *((unsigned char *)v239 + 128) = *((unsigned char *)v240 + 128);
            *(_WORD *)((char *)v239 + 129) = *(_WORD *)((char *)v240 + 129);
            *((void *)v239 + 17) = *((void *)v240 + 17);
            long long v365 = v240[10];
            v239[9] = v240[9];
            v239[10] = v365;
            long long v366 = v240[12];
            v239[11] = v240[11];
            v239[12] = v366;
            long long v367 = v240[14];
            v239[13] = v240[13];
            v239[14] = v367;
            v239[15] = v240[15];
            *((void *)v239 + 32) = *((void *)v240 + 32);
            *(_OWORD *)((char *)v239 + 264) = *(_OWORD *)((char *)v240 + 264);
            *(_OWORD *)((char *)v239 + 280) = *(_OWORD *)((char *)v240 + 280);
            *(_OWORD *)((char *)v239 + 296) = *(_OWORD *)((char *)v240 + 296);
            *(_OWORD *)((char *)v239 + 312) = *(_OWORD *)((char *)v240 + 312);
            *(_OWORD *)((char *)v239 + 328) = *(_OWORD *)((char *)v240 + 328);
            *(_OWORD *)((char *)v239 + 344) = *(_OWORD *)((char *)v240 + 344);
            *(_OWORD *)((char *)v239 + 360) = *(_OWORD *)((char *)v240 + 360);
            *((unsigned char *)v239 + 384) = *((unsigned char *)v240 + 384);
            *((void *)v239 + 47) = *((void *)v240 + 47);
            *(_OWORD *)((char *)v239 + 392) = *(_OWORD *)((char *)v240 + 392);
            *(_OWORD *)((char *)v239 + 408) = *(_OWORD *)((char *)v240 + 408);
            uint64_t v368 = __dst[35];
            uint64_t v369 = (char *)v239 + v368;
            uint64_t v370 = (char *)v240 + v368;
            if (__swift_getEnumTagSinglePayload((uint64_t)v240 + v368, 1, (uint64_t)v1167))
            {
              uint64_t v371 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v369, v370, *(void *)(*(void *)(v371 - 8) + 64));
            }
            else
            {
              v1163(v369, v370, v1167);
              __swift_storeEnumTagSinglePayload((uint64_t)v369, 0, 1, (uint64_t)v1167);
            }
            uint64_t v395 = __dst[36];
            uint64_t v396 = (char *)v239 + v395;
            uint64_t v397 = (char *)v240 + v395;
            if (__swift_getEnumTagSinglePayload((uint64_t)v240 + v395, 1, (uint64_t)v1167))
            {
              uint64_t v398 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v396, v397, *(void *)(*(void *)(v398 - 8) + 64));
            }
            else
            {
              v1163(v396, v397, v1167);
              __swift_storeEnumTagSinglePayload((uint64_t)v396, 0, 1, (uint64_t)v1167);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v239, 0, 1, (uint64_t)__dst);
            uint64_t v23 = v1133;
            uint64_t v25 = __src;
          }
          uint64_t v407 = v25[6];
          uint64_t v408 = (_OWORD *)((char *)v23 + v407);
          uint64_t v409 = (_OWORD *)((char *)v24 + v407);
          uint64_t v410 = type metadata accessor for TicketedTransportation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v409, 1, v410))
          {
            uint64_t v411 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
            memcpy(v408, v409, *(void *)(*(void *)(v411 - 8) + 64));
          }
          else
          {
            long long v412 = v409[1];
            _OWORD *v408 = *v409;
            v408[1] = v412;
            long long v413 = v409[3];
            v408[2] = v409[2];
            v408[3] = v413;
            long long v414 = v409[5];
            v408[4] = v409[4];
            v408[5] = v414;
            long long v415 = v409[7];
            v408[6] = v409[6];
            v408[7] = v415;
            *((unsigned char *)v408 + 128) = *((unsigned char *)v409 + 128);
            *(_WORD *)((char *)v408 + 129) = *(_WORD *)((char *)v409 + 129);
            *((void *)v408 + 17) = *((void *)v409 + 17);
            long long v416 = v409[10];
            v408[9] = v409[9];
            v408[10] = v416;
            long long v417 = v409[12];
            v408[11] = v409[11];
            v408[12] = v417;
            *((void *)v408 + 26) = *((void *)v409 + 26);
            *(_OWORD *)((char *)v408 + 216) = *(_OWORD *)((char *)v409 + 216);
            *(_OWORD *)((char *)v408 + 232) = *(_OWORD *)((char *)v409 + 232);
            *(_OWORD *)((char *)v408 + 248) = *(_OWORD *)((char *)v409 + 248);
            *(_OWORD *)((char *)v408 + 264) = *(_OWORD *)((char *)v409 + 264);
            *((unsigned char *)v408 + 296) = *((unsigned char *)v409 + 296);
            uint64_t v418 = *((void *)v409 + 36);
            *((void *)v408 + 35) = *((void *)v409 + 35);
            *((void *)v408 + 36) = v418;
            uint64_t v419 = *(int *)(v410 + 112);
            __dsta = (char *)v408 + v419;
            uint64_t v420 = (char *)v409 + v419;
            if (__swift_getEnumTagSinglePayload((uint64_t)v409 + v419, 1, (uint64_t)v1167))
            {
              uint64_t v421 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__dsta, v420, *(void *)(*(void *)(v421 - 8) + 64));
            }
            else
            {
              v1163(__dsta, v420, v1167);
              __swift_storeEnumTagSinglePayload((uint64_t)__dsta, 0, 1, (uint64_t)v1167);
            }
            uint64_t v452 = *(int *)(v410 + 116);
            __dstb = (char *)v408 + v452;
            v453 = (char *)v409 + v452;
            if (__swift_getEnumTagSinglePayload((uint64_t)v409 + v452, 1, (uint64_t)v1167))
            {
              uint64_t v454 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__dstb, v453, *(void *)(*(void *)(v454 - 8) + 64));
            }
            else
            {
              v1163(__dstb, v453, v1167);
              __swift_storeEnumTagSinglePayload((uint64_t)__dstb, 0, 1, (uint64_t)v1167);
            }
            uint64_t v25 = __src;
            __swift_storeEnumTagSinglePayload((uint64_t)v408, 0, 1, v410);
            uint64_t v23 = v1133;
          }
          uint64_t v463 = v25[7];
          uint64_t v464 = (_OWORD *)((char *)v23 + v463);
          uint64_t v465 = v1149;
          uint64_t v466 = &v1149[v463];
          uint64_t v467 = (int *)type metadata accessor for TicketedShow(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v466, 1, (uint64_t)v467))
          {
            uint64_t v468 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
            memcpy(v464, v466, *(void *)(*(void *)(v468 - 8) + 64));
            uint64_t v469 = v1133;
          }
          else
          {
            long long v470 = *((_OWORD *)v466 + 1);
            *uint64_t v464 = *(_OWORD *)v466;
            v464[1] = v470;
            long long v471 = *((_OWORD *)v466 + 3);
            v464[2] = *((_OWORD *)v466 + 2);
            v464[3] = v471;
            long long v472 = *((_OWORD *)v466 + 5);
            v464[4] = *((_OWORD *)v466 + 4);
            v464[5] = v472;
            long long v473 = *((_OWORD *)v466 + 7);
            v464[6] = *((_OWORD *)v466 + 6);
            v464[7] = v473;
            *((unsigned char *)v464 + 128) = v466[128];
            *(_WORD *)((char *)v464 + 129) = *(_WORD *)(v466 + 129);
            *((void *)v464 + 17) = *((void *)v466 + 17);
            long long v474 = *((_OWORD *)v466 + 10);
            v464[9] = *((_OWORD *)v466 + 9);
            v464[10] = v474;
            long long v475 = *((_OWORD *)v466 + 12);
            v464[11] = *((_OWORD *)v466 + 11);
            v464[12] = v475;
            long long v476 = *((_OWORD *)v466 + 14);
            v464[13] = *((_OWORD *)v466 + 13);
            v464[14] = v476;
            *((void *)v464 + 30) = *((void *)v466 + 30);
            *(_OWORD *)((char *)v464 + 248) = *(_OWORD *)(v466 + 248);
            *(_OWORD *)((char *)v464 + 264) = *(_OWORD *)(v466 + 264);
            *((unsigned char *)v464 + 296) = v466[296];
            uint64_t v477 = *((void *)v466 + 36);
            *((void *)v464 + 35) = *((void *)v466 + 35);
            *((void *)v464 + 36) = v477;
            v464[19] = *((_OWORD *)v466 + 19);
            uint64_t v478 = v467[29];
            __dstc = (char *)v464 + v478;
            uint64_t v479 = &v466[v478];
            uint64_t v480 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v479, 1, v480))
            {
              uint64_t v481 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(__dstc, v479, *(void *)(*(void *)(v481 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v480 - 8) + 32))(__dstc, v479, v480);
              __swift_storeEnumTagSinglePayload((uint64_t)__dstc, 0, 1, v480);
            }
            *(_OWORD *)((char *)v464 + v467[30]) = *(_OWORD *)&v466[v467[30]];
            __dstd = v467;
            uint64_t v515 = v467[31];
            uint64_t v516 = (char *)v464 + v515;
            uint64_t v517 = &v466[v515];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v466[v515], 1, (uint64_t)v1167))
            {
              uint64_t v518 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v516, v517, *(void *)(*(void *)(v518 - 8) + 64));
            }
            else
            {
              v1163(v516, v517, v1167);
              __swift_storeEnumTagSinglePayload((uint64_t)v516, 0, 1, (uint64_t)v1167);
            }
            uint64_t v525 = __dstd[32];
            uint64_t v526 = (char *)v464 + v525;
            uint64_t v527 = &v466[v525];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v466[v525], 1, (uint64_t)v1167))
            {
              uint64_t v528 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v526, v527, *(void *)(*(void *)(v528 - 8) + 64));
            }
            else
            {
              v1163(v526, v527, v1167);
              __swift_storeEnumTagSinglePayload((uint64_t)v526, 0, 1, (uint64_t)v1167);
            }
            uint64_t v465 = v1149;
            __swift_storeEnumTagSinglePayload((uint64_t)v464, 0, 1, (uint64_t)__dstd);
            uint64_t v469 = v1133;
            uint64_t v25 = __src;
          }
          uint64_t v537 = v25[8];
          uint64_t v538 = (_OWORD *)((char *)v469 + v537);
          uint64_t v539 = &v465[v537];
          uint64_t v540 = type metadata accessor for Appointment(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v539, 1, v540))
          {
            uint64_t v541 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
            memcpy(v538, v539, *(void *)(*(void *)(v541 - 8) + 64));
          }
          else
          {
            long long v542 = *((_OWORD *)v539 + 1);
            *uint64_t v538 = *(_OWORD *)v539;
            v538[1] = v542;
            long long v543 = *((_OWORD *)v539 + 3);
            v538[2] = *((_OWORD *)v539 + 2);
            v538[3] = v543;
            long long v544 = *((_OWORD *)v539 + 5);
            v538[4] = *((_OWORD *)v539 + 4);
            v538[5] = v544;
            long long v545 = *((_OWORD *)v539 + 7);
            v538[6] = *((_OWORD *)v539 + 6);
            v538[7] = v545;
            *((unsigned char *)v538 + 128) = v539[128];
            *(_WORD *)((char *)v538 + 129) = *(_WORD *)(v539 + 129);
            *((void *)v538 + 17) = *((void *)v539 + 17);
            long long v546 = *((_OWORD *)v539 + 10);
            v538[9] = *((_OWORD *)v539 + 9);
            v538[10] = v546;
            long long v547 = *((_OWORD *)v539 + 12);
            v538[11] = *((_OWORD *)v539 + 11);
            v538[12] = v547;
            long long v548 = *((_OWORD *)v539 + 14);
            v538[13] = *((_OWORD *)v539 + 13);
            v538[14] = v548;
            long long v549 = *((_OWORD *)v539 + 16);
            v538[15] = *((_OWORD *)v539 + 15);
            v538[16] = v549;
            *((unsigned char *)v538 + 280) = v539[280];
            *((void *)v538 + 34) = *((void *)v539 + 34);
            v538[18] = *((_OWORD *)v539 + 18);
            uint64_t v550 = *(int *)(v540 + 108);
            __dste = (char *)v538 + v550;
            uint64_t v551 = &v539[v550];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v539[v550], 1, (uint64_t)v1167))
            {
              uint64_t v552 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__dste, v551, *(void *)(*(void *)(v552 - 8) + 64));
            }
            else
            {
              v1163(__dste, v551, v1167);
              __swift_storeEnumTagSinglePayload((uint64_t)__dste, 0, 1, (uint64_t)v1167);
            }
            uint64_t v585 = *(int *)(v540 + 112);
            __dstf = (char *)v538 + v585;
            v586 = &v539[v585];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v539[v585], 1, (uint64_t)v1167))
            {
              uint64_t v587 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__dstf, v586, *(void *)(*(void *)(v587 - 8) + 64));
            }
            else
            {
              v1163(__dstf, v586, v1167);
              __swift_storeEnumTagSinglePayload((uint64_t)__dstf, 0, 1, (uint64_t)v1167);
            }
            uint64_t v25 = __src;
            __swift_storeEnumTagSinglePayload((uint64_t)v538, 0, 1, v540);
            uint64_t v469 = v1133;
          }
          uint64_t v596 = v25[9];
          uint64_t v597 = (_OWORD *)((char *)v469 + v596);
          uint64_t v598 = v1149;
          long long v599 = &v1149[v596];
          uint64_t v600 = type metadata accessor for Party(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v599, 1, v600))
          {
            uint64_t v601 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
            memcpy(v597, v599, *(void *)(*(void *)(v601 - 8) + 64));
            uint64_t v602 = (uint64_t)v1133;
          }
          else
          {
            long long v603 = *((_OWORD *)v599 + 1);
            *uint64_t v597 = *(_OWORD *)v599;
            v597[1] = v603;
            long long v604 = *((_OWORD *)v599 + 3);
            v597[2] = *((_OWORD *)v599 + 2);
            v597[3] = v604;
            long long v605 = *((_OWORD *)v599 + 5);
            v597[4] = *((_OWORD *)v599 + 4);
            v597[5] = v605;
            long long v606 = *((_OWORD *)v599 + 7);
            v597[6] = *((_OWORD *)v599 + 6);
            v597[7] = v606;
            *((unsigned char *)v597 + 128) = v599[128];
            *(_WORD *)((char *)v597 + 129) = *(_WORD *)(v599 + 129);
            *((void *)v597 + 17) = *((void *)v599 + 17);
            long long v607 = *((_OWORD *)v599 + 10);
            v597[9] = *((_OWORD *)v599 + 9);
            v597[10] = v607;
            long long v608 = *((_OWORD *)v599 + 12);
            v597[11] = *((_OWORD *)v599 + 11);
            v597[12] = v608;
            long long v609 = *((_OWORD *)v599 + 14);
            v597[13] = *((_OWORD *)v599 + 13);
            v597[14] = v609;
            v597[15] = *((_OWORD *)v599 + 15);
            __dstg = (int *)v600;
            uint64_t v610 = *(int *)(v600 + 96);
            long long v611 = (char *)v597 + v610;
            uint64_t v612 = &v599[v610];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v599[v610], 1, (uint64_t)v1167))
            {
              uint64_t v613 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v611, v612, *(void *)(*(void *)(v613 - 8) + 64));
            }
            else
            {
              v1163(v611, v612, v1167);
              __swift_storeEnumTagSinglePayload((uint64_t)v611, 0, 1, (uint64_t)v1167);
            }
            uint64_t v644 = __dstg[25];
            uint64_t v645 = (char *)v597 + v644;
            uint64_t v646 = &v599[v644];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v599[v644], 1, (uint64_t)v1167))
            {
              uint64_t v647 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v645, v646, *(void *)(*(void *)(v647 - 8) + 64));
            }
            else
            {
              v1163(v645, v646, v1167);
              __swift_storeEnumTagSinglePayload((uint64_t)v645, 0, 1, (uint64_t)v1167);
            }
            uint64_t v598 = v1149;
            uint64_t v654 = __dstg[26];
            uint64_t v1091 = (char *)v597 + v654;
            uint64_t v655 = &v599[v654];
            uint64_t v656 = type metadata accessor for URL();
            uint64_t v602 = (uint64_t)v1133;
            if (__swift_getEnumTagSinglePayload((uint64_t)v655, 1, v656))
            {
              uint64_t v657 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1091, v655, *(void *)(*(void *)(v657 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v656 - 8) + 32))(v1091, v655, v656);
              __swift_storeEnumTagSinglePayload((uint64_t)v1091, 0, 1, v656);
            }
            uint64_t v25 = __src;
            __swift_storeEnumTagSinglePayload((uint64_t)v597, 0, 1, (uint64_t)__dstg);
          }
          uint64_t v667 = v25[10];
          long long v668 = (_OWORD *)(v602 + v667);
          uint64_t v669 = &v598[v667];
          uint64_t v670 = (int *)type metadata accessor for Trip(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v669, 1, (uint64_t)v670))
          {
            uint64_t v671 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
            memcpy(v668, v669, *(void *)(*(void *)(v671 - 8) + 64));
          }
          else
          {
            long long v672 = *((_OWORD *)v669 + 1);
            *long long v668 = *(_OWORD *)v669;
            v668[1] = v672;
            long long v673 = *((_OWORD *)v669 + 3);
            v668[2] = *((_OWORD *)v669 + 2);
            v668[3] = v673;
            long long v674 = *((_OWORD *)v669 + 5);
            v668[4] = *((_OWORD *)v669 + 4);
            v668[5] = v674;
            long long v675 = *((_OWORD *)v669 + 7);
            v668[6] = *((_OWORD *)v669 + 6);
            v668[7] = v675;
            *((unsigned char *)v668 + 128) = v669[128];
            *(_WORD *)((char *)v668 + 129) = *(_WORD *)(v669 + 129);
            *((void *)v668 + 17) = *((void *)v669 + 17);
            long long v676 = *((_OWORD *)v669 + 10);
            v668[9] = *((_OWORD *)v669 + 9);
            v668[10] = v676;
            long long v677 = *((_OWORD *)v669 + 12);
            v668[11] = *((_OWORD *)v669 + 11);
            v668[12] = v677;
            v668[13] = *((_OWORD *)v669 + 13);
            uint64_t v678 = v670[22];
            __dsth = (char *)v668 + v678;
            v679 = &v669[v678];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v669[v678], 1, (uint64_t)v1167))
            {
              uint64_t v680 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__dsth, v679, *(void *)(*(void *)(v680 - 8) + 64));
            }
            else
            {
              v1163(__dsth, v679, v1167);
              __swift_storeEnumTagSinglePayload((uint64_t)__dsth, 0, 1, (uint64_t)v1167);
            }
            uint64_t v709 = v670[23];
            __dstuint64_t i = (char *)v668 + v709;
            uint64_t v710 = &v669[v709];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v669[v709], 1, (uint64_t)v1167))
            {
              uint64_t v711 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__dsti, v710, *(void *)(*(void *)(v711 - 8) + 64));
            }
            else
            {
              v1163(__dsti, v710, v1167);
              __swift_storeEnumTagSinglePayload((uint64_t)__dsti, 0, 1, (uint64_t)v1167);
            }
            uint64_t v718 = v670[24];
            uint64_t v719 = (char *)v668 + v718;
            v720 = &v669[v718];
            *(void *)uint64_t v719 = *(void *)v720;
            v719[8] = v720[8];
            uint64_t v721 = v670[25];
            __dstj = (char *)v668 + v721;
            uint64_t v722 = &v669[v721];
            uint64_t v723 = type metadata accessor for URL();
            uint64_t v602 = (uint64_t)v1133;
            if (__swift_getEnumTagSinglePayload((uint64_t)v722, 1, v723))
            {
              uint64_t v724 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(__dstj, v722, *(void *)(*(void *)(v724 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v723 - 8) + 32))(__dstj, v722, v723);
              __swift_storeEnumTagSinglePayload((uint64_t)__dstj, 0, 1, v723);
            }
            uint64_t v25 = __src;
            __swift_storeEnumTagSinglePayload((uint64_t)v668, 0, 1, (uint64_t)v670);
          }
          uint64_t v740 = v25[11];
          uint64_t v741 = (_OWORD *)(v602 + v740);
          uint64_t v742 = &v1149[v740];
          uint64_t v743 = (int *)type metadata accessor for FlightReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v742, 1, (uint64_t)v743))
          {
            uint64_t v744 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
            memcpy(v741, v742, *(void *)(*(void *)(v744 - 8) + 64));
          }
          else
          {
            long long v745 = *((_OWORD *)v742 + 1);
            *uint64_t v741 = *(_OWORD *)v742;
            v741[1] = v745;
            long long v746 = *((_OWORD *)v742 + 3);
            v741[2] = *((_OWORD *)v742 + 2);
            v741[3] = v746;
            long long v747 = *((_OWORD *)v742 + 5);
            v741[4] = *((_OWORD *)v742 + 4);
            v741[5] = v747;
            *((unsigned char *)v741 + 96) = v742[96];
            *(_OWORD *)((char *)v741 + 104) = *(_OWORD *)(v742 + 104);
            uint64_t v748 = v743[13];
            uint64_t v1092 = (char *)v741 + v748;
            uint64_t v749 = &v742[v748];
            uint64_t v750 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v749, 1, v750))
            {
              uint64_t v751 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1092, v749, *(void *)(*(void *)(v751 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v750 - 8) + 32))(v1092, v749, v750);
              __swift_storeEnumTagSinglePayload((uint64_t)v1092, 0, 1, v750);
            }
            uint64_t v777 = v743[14];
            __dstk = (char *)v741 + v777;
            uint64_t v778 = &v742[v777];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v742[v777], 1, v750))
            {
              uint64_t v779 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(__dstk, v778, *(void *)(*(void *)(v779 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v750 - 8) + 32))(__dstk, v778, v750);
              __swift_storeEnumTagSinglePayload((uint64_t)__dstk, 0, 1, v750);
            }
            *(_OWORD *)((char *)v741 + v743[15]) = *(_OWORD *)&v742[v743[15]];
            *(_OWORD *)((char *)v741 + v743[16]) = *(_OWORD *)&v742[v743[16]];
            *(_OWORD *)((char *)v741 + v743[17]) = *(_OWORD *)&v742[v743[17]];
            uint64_t v785 = v743[18];
            uint64_t v1090 = &v742[v785];
            uint64_t v1093 = (char *)v741 + v785;
            uint64_t v786 = type metadata accessor for DateComponents();
            uint64_t v787 = *(void (**)(char *, char *, uint64_t))(*(void *)(v786 - 8) + 32);
            v787(v1093, v1090, v786);
            v787((char *)v741 + v743[19], &v742[v743[19]], v786);
            *(_OWORD *)((char *)v741 + v743[20]) = *(_OWORD *)&v742[v743[20]];
            *(_OWORD *)((char *)v741 + v743[21]) = *(_OWORD *)&v742[v743[21]];
            *(_OWORD *)((char *)v741 + v743[22]) = *(_OWORD *)&v742[v743[22]];
            *(_OWORD *)((char *)v741 + v743[23]) = *(_OWORD *)&v742[v743[23]];
            *(_OWORD *)((char *)v741 + v743[24]) = *(_OWORD *)&v742[v743[24]];
            *(_OWORD *)((char *)v741 + v743[25]) = *(_OWORD *)&v742[v743[25]];
            *(_OWORD *)((char *)v741 + v743[26]) = *(_OWORD *)&v742[v743[26]];
            *(_OWORD *)((char *)v741 + v743[27]) = *(_OWORD *)&v742[v743[27]];
            *(_OWORD *)((char *)v741 + v743[28]) = *(_OWORD *)&v742[v743[28]];
            *(_OWORD *)((char *)v741 + v743[29]) = *(_OWORD *)&v742[v743[29]];
            *(_OWORD *)((char *)v741 + v743[30]) = *(_OWORD *)&v742[v743[30]];
            *(_OWORD *)((char *)v741 + v743[31]) = *(_OWORD *)&v742[v743[31]];
            *(_OWORD *)((char *)v741 + v743[32]) = *(_OWORD *)&v742[v743[32]];
            *(void *)((char *)v741 + v743[33]) = *(void *)&v742[v743[33]];
            *(void *)((char *)v741 + v743[34]) = *(void *)&v742[v743[34]];
            *(_OWORD *)((char *)v741 + v743[35]) = *(_OWORD *)&v742[v743[35]];
            *(_OWORD *)((char *)v741 + v743[36]) = *(_OWORD *)&v742[v743[36]];
            *(_OWORD *)((char *)v741 + v743[37]) = *(_OWORD *)&v742[v743[37]];
            uint64_t v788 = v743[38];
            __dstl = (char *)v741 + v788;
            uint64_t v789 = &v742[v788];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v742[v788], 1, (uint64_t)v1167))
            {
              uint64_t v790 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__dstl, v789, *(void *)(*(void *)(v790 - 8) + 64));
            }
            else
            {
              v1163(__dstl, v789, v1167);
              __swift_storeEnumTagSinglePayload((uint64_t)__dstl, 0, 1, (uint64_t)v1167);
            }
            uint64_t v25 = __src;
            *(_OWORD *)((char *)v741 + v743[39]) = *(_OWORD *)&v742[v743[39]];
            *(_OWORD *)((char *)v741 + v743[40]) = *(_OWORD *)&v742[v743[40]];
            uint64_t v803 = v743[41];
            uint64_t v804 = (char *)v741 + v803;
            uint64_t v805 = &v742[v803];
            *(void *)uint64_t v804 = *(void *)v805;
            v804[8] = v805[8];
            *(_OWORD *)((char *)v741 + v743[42]) = *(_OWORD *)&v742[v743[42]];
            uint64_t v806 = v743[43];
            uint64_t v807 = (char *)v741 + v806;
            uint64_t v808 = &v742[v806];
            *(_OWORD *)uint64_t v807 = *(_OWORD *)v808;
            *(void *)(v807 + 13) = *(void *)(v808 + 13);
            *(_OWORD *)((char *)v741 + v743[44]) = *(_OWORD *)&v742[v743[44]];
            *(_OWORD *)((char *)v741 + v743[45]) = *(_OWORD *)&v742[v743[45]];
            *(_OWORD *)((char *)v741 + v743[46]) = *(_OWORD *)&v742[v743[46]];
            *(_OWORD *)((char *)v741 + v743[47]) = *(_OWORD *)&v742[v743[47]];
            __swift_storeEnumTagSinglePayload((uint64_t)v741, 0, 1, (uint64_t)v743);
            uint64_t v602 = (uint64_t)v1133;
          }
          uint64_t v809 = v25[12];
          uint64_t v810 = (_OWORD *)(v602 + v809);
          uint64_t v811 = &v1149[v809];
          uint64_t v812 = (int *)type metadata accessor for HotelReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v811, 1, (uint64_t)v812))
          {
            uint64_t v813 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
            memcpy(v810, v811, *(void *)(*(void *)(v813 - 8) + 64));
          }
          else
          {
            long long v814 = *((_OWORD *)v811 + 1);
            *uint64_t v810 = *(_OWORD *)v811;
            v810[1] = v814;
            long long v815 = *((_OWORD *)v811 + 3);
            v810[2] = *((_OWORD *)v811 + 2);
            v810[3] = v815;
            long long v816 = *((_OWORD *)v811 + 5);
            v810[4] = *((_OWORD *)v811 + 4);
            v810[5] = v816;
            *((unsigned char *)v810 + 96) = v811[96];
            *(_OWORD *)((char *)v810 + 104) = *(_OWORD *)(v811 + 104);
            *(_OWORD *)((char *)v810 + 120) = *(_OWORD *)(v811 + 120);
            uint64_t v817 = v812[14];
            __dstm = (char *)v810 + v817;
            uint64_t v818 = &v811[v817];
            uint64_t v819 = type metadata accessor for DateComponents();
            if (__swift_getEnumTagSinglePayload((uint64_t)v818, 1, v819))
            {
              uint64_t v820 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(__dstm, v818, *(void *)(*(void *)(v820 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v819 - 8) + 32))(__dstm, v818, v819);
              __swift_storeEnumTagSinglePayload((uint64_t)__dstm, 0, 1, v819);
            }
            uint64_t v861 = v812[15];
            __dsto = (char *)v810 + v861;
            uint64_t v862 = &v811[v861];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v811[v861], 1, v819))
            {
              uint64_t v863 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(__dsto, v862, *(void *)(*(void *)(v863 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v819 - 8) + 32))(__dsto, v862, v819);
              __swift_storeEnumTagSinglePayload((uint64_t)__dsto, 0, 1, v819);
            }
            *(_OWORD *)((char *)v810 + v812[16]) = *(_OWORD *)&v811[v812[16]];
            *(_OWORD *)((char *)v810 + v812[17]) = *(_OWORD *)&v811[v812[17]];
            *(_OWORD *)((char *)v810 + v812[18]) = *(_OWORD *)&v811[v812[18]];
            *(_OWORD *)((char *)v810 + v812[19]) = *(_OWORD *)&v811[v812[19]];
            *(_OWORD *)((char *)v810 + v812[20]) = *(_OWORD *)&v811[v812[20]];
            *(void *)((char *)v810 + v812[21]) = *(void *)&v811[v812[21]];
            *(void *)((char *)v810 + v812[22]) = *(void *)&v811[v812[22]];
            uint64_t v869 = v812[23];
            uint64_t v870 = (char *)v810 + v869;
            uint64_t v871 = &v811[v869];
            v870[8] = v871[8];
            *(void *)uint64_t v870 = *(void *)v871;
            uint64_t v872 = v812[24];
            uint64_t v873 = (char *)v810 + v872;
            uint64_t v874 = &v811[v872];
            v873[8] = v874[8];
            *(void *)uint64_t v873 = *(void *)v874;
            *(_OWORD *)((char *)v810 + v812[25]) = *(_OWORD *)&v811[v812[25]];
            *(_OWORD *)((char *)v810 + v812[26]) = *(_OWORD *)&v811[v812[26]];
            *(_OWORD *)((char *)v810 + v812[27]) = *(_OWORD *)&v811[v812[27]];
            *(_OWORD *)((char *)v810 + v812[28]) = *(_OWORD *)&v811[v812[28]];
            uint64_t v875 = v812[29];
            uint64_t v876 = (char *)v810 + v875;
            uint64_t v877 = &v811[v875];
            *(void *)uint64_t v876 = *(void *)v877;
            v876[8] = v877[8];
            __swift_storeEnumTagSinglePayload((uint64_t)v810, 0, 1, (uint64_t)v812);
            uint64_t v25 = __src;
            uint64_t v602 = (uint64_t)v1133;
          }
          uint64_t v878 = v25[13];
          uint64_t v879 = (_OWORD *)(v602 + v878);
          uint64_t v880 = &v1149[v878];
          uint64_t v881 = (int *)type metadata accessor for RestaurantReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v880, 1, (uint64_t)v881))
          {
            uint64_t v882 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
            memcpy(v879, v880, *(void *)(*(void *)(v882 - 8) + 64));
          }
          else
          {
            long long v883 = *((_OWORD *)v880 + 1);
            _OWORD *v879 = *(_OWORD *)v880;
            v879[1] = v883;
            long long v884 = *((_OWORD *)v880 + 3);
            v879[2] = *((_OWORD *)v880 + 2);
            v879[3] = v884;
            long long v885 = *((_OWORD *)v880 + 5);
            v879[4] = *((_OWORD *)v880 + 4);
            v879[5] = v885;
            *((unsigned char *)v879 + 96) = v880[96];
            *(_OWORD *)((char *)v879 + 104) = *(_OWORD *)(v880 + 104);
            *(_OWORD *)((char *)v879 + 120) = *(_OWORD *)(v880 + 120);
            uint64_t v886 = v881[14];
            uint64_t v1152 = (char *)v879 + v886;
            uint64_t v887 = &v880[v886];
            uint64_t v888 = type metadata accessor for DateComponents();
            if (__swift_getEnumTagSinglePayload((uint64_t)v887, 1, v888))
            {
              uint64_t v889 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1152, v887, *(void *)(*(void *)(v889 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v888 - 8) + 32))(v1152, v887, v888);
              __swift_storeEnumTagSinglePayload((uint64_t)v1152, 0, 1, v888);
            }
            *(_OWORD *)((char *)v879 + v881[15]) = *(_OWORD *)&v880[v881[15]];
            *(_OWORD *)((char *)v879 + v881[16]) = *(_OWORD *)&v880[v881[16]];
            *(_OWORD *)((char *)v879 + v881[17]) = *(_OWORD *)&v880[v881[17]];
            *(_OWORD *)((char *)v879 + v881[18]) = *(_OWORD *)&v880[v881[18]];
            *(_OWORD *)((char *)v879 + v881[19]) = *(_OWORD *)&v880[v881[19]];
            *(void *)((char *)v879 + v881[20]) = *(void *)&v880[v881[20]];
            *(_OWORD *)((char *)v879 + v881[21]) = *(_OWORD *)&v880[v881[21]];
            *(_OWORD *)((char *)v879 + v881[22]) = *(_OWORD *)&v880[v881[22]];
            *(_OWORD *)((char *)v879 + v881[23]) = *(_OWORD *)&v880[v881[23]];
            __swift_storeEnumTagSinglePayload((uint64_t)v879, 0, 1, (uint64_t)v881);
            uint64_t v25 = __src;
            uint64_t v602 = (uint64_t)v1133;
          }
          __swift_storeEnumTagSinglePayload(v602, 0, 1, (uint64_t)v25);
        }
        uint64_t v932 = v1187[22];
        uint64_t v933 = (_OWORD *)((char *)v7 + v932);
        uint64_t v934 = (_OWORD *)((char *)v8 + v932);
        uint64_t v935 = (int *)type metadata accessor for PreExtractedCard(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v934, 1, (uint64_t)v935))
        {
          uint64_t v936 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
          memcpy(v933, v934, *(void *)(*(void *)(v936 - 8) + 64));
        }
        else
        {
          long long v937 = v934[1];
          _OWORD *v933 = *v934;
          v933[1] = v937;
          long long v938 = v934[3];
          v933[2] = v934[2];
          v933[3] = v938;
          long long v939 = v934[5];
          v933[4] = v934[4];
          v933[5] = v939;
          uint64_t v940 = v935[10];
          uint64_t v1153 = (char *)v933 + v940;
          uint64_t v941 = (char *)v934 + v940;
          if (__swift_getEnumTagSinglePayload((uint64_t)v934 + v940, 1, (uint64_t)v1167))
          {
            uint64_t v942 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1153, v941, *(void *)(*(void *)(v942 - 8) + 64));
          }
          else
          {
            v1163(v1153, v941, v1167);
            __swift_storeEnumTagSinglePayload((uint64_t)v1153, 0, 1, (uint64_t)v1167);
          }
          uint64_t v943 = v935[11];
          uint64_t v1154 = (char *)v933 + v943;
          uint64_t v944 = (char *)v934 + v943;
          if (__swift_getEnumTagSinglePayload((uint64_t)v934 + v943, 1, (uint64_t)v1167))
          {
            uint64_t v945 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1154, v944, *(void *)(*(void *)(v945 - 8) + 64));
          }
          else
          {
            v1163(v1154, v944, v1167);
            __swift_storeEnumTagSinglePayload((uint64_t)v1154, 0, 1, (uint64_t)v1167);
          }
          *(_OWORD *)((char *)v933 + v935[12]) = *(_OWORD *)((char *)v934 + v935[12]);
          *(_OWORD *)((char *)v933 + v935[13]) = *(_OWORD *)((char *)v934 + v935[13]);
          *(_OWORD *)((char *)v933 + v935[14]) = *(_OWORD *)((char *)v934 + v935[14]);
          uint64_t v946 = v935[15];
          uint64_t v1155 = (char *)v933 + v946;
          uint64_t v947 = (char *)v934 + v946;
          if (__swift_getEnumTagSinglePayload((uint64_t)v934 + v946, 1, (uint64_t)v1167))
          {
            uint64_t v948 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1155, v947, *(void *)(*(void *)(v948 - 8) + 64));
          }
          else
          {
            v1163(v1155, v947, v1167);
            __swift_storeEnumTagSinglePayload((uint64_t)v1155, 0, 1, (uint64_t)v1167);
          }
          *(_OWORD *)((char *)v933 + v935[16]) = *(_OWORD *)((char *)v934 + v935[16]);
          *(_OWORD *)((char *)v933 + v935[17]) = *(_OWORD *)((char *)v934 + v935[17]);
          *(_OWORD *)((char *)v933 + v935[18]) = *(_OWORD *)((char *)v934 + v935[18]);
          *(_OWORD *)((char *)v933 + v935[19]) = *(_OWORD *)((char *)v934 + v935[19]);
          *(_OWORD *)((char *)v933 + v935[20]) = *(_OWORD *)((char *)v934 + v935[20]);
          *(_OWORD *)((char *)v933 + v935[21]) = *(_OWORD *)((char *)v934 + v935[21]);
          *(_OWORD *)((char *)v933 + v935[22]) = *(_OWORD *)((char *)v934 + v935[22]);
          *(_OWORD *)((char *)v933 + v935[23]) = *(_OWORD *)((char *)v934 + v935[23]);
          __swift_storeEnumTagSinglePayload((uint64_t)v933, 0, 1, (uint64_t)v935);
        }
        uint64_t v949 = v1187[23];
        uint64_t v950 = (_OWORD *)((char *)v7 + v949);
        uint64_t v951 = (_OWORD *)((char *)v8 + v949);
        uint64_t v952 = (int *)type metadata accessor for PreExtractedContact(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v951, 1, (uint64_t)v952))
        {
          uint64_t v953 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
          memcpy(v950, v951, *(void *)(*(void *)(v953 - 8) + 64));
        }
        else
        {
          long long v954 = v951[1];
          *uint64_t v950 = *v951;
          v950[1] = v954;
          long long v955 = v951[3];
          v950[2] = v951[2];
          v950[3] = v955;
          long long v956 = v951[5];
          v950[4] = v951[4];
          v950[5] = v956;
          uint64_t v957 = v952[11];
          uint64_t v1156 = (char *)v950 + v957;
          uint64_t v958 = (char *)v951 + v957;
          if (__swift_getEnumTagSinglePayload((uint64_t)v951 + v957, 1, (uint64_t)v1167))
          {
            uint64_t v959 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1156, v958, *(void *)(*(void *)(v959 - 8) + 64));
          }
          else
          {
            v1163(v1156, v958, v1167);
            __swift_storeEnumTagSinglePayload((uint64_t)v1156, 0, 1, (uint64_t)v1167);
          }
          *(_OWORD *)((char *)v950 + v952[12]) = *(_OWORD *)((char *)v951 + v952[12]);
          *(void *)((char *)v950 + v952[13]) = *(void *)((char *)v951 + v952[13]);
          uint64_t v960 = v952[14];
          uint64_t v1157 = (char *)v950 + v960;
          uint64_t v961 = (char *)v951 + v960;
          if (__swift_getEnumTagSinglePayload((uint64_t)v951 + v960, 1, (uint64_t)v1167))
          {
            uint64_t v962 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1157, v961, *(void *)(*(void *)(v962 - 8) + 64));
          }
          else
          {
            v1163(v1157, v961, v1167);
            __swift_storeEnumTagSinglePayload((uint64_t)v1157, 0, 1, (uint64_t)v1167);
          }
          *(void *)((char *)v950 + v952[15]) = *(void *)((char *)v951 + v952[15]);
          *(void *)((char *)v950 + v952[16]) = *(void *)((char *)v951 + v952[16]);
          *(_OWORD *)((char *)v950 + v952[17]) = *(_OWORD *)((char *)v951 + v952[17]);
          *(void *)((char *)v950 + v952[18]) = *(void *)((char *)v951 + v952[18]);
          *(void *)((char *)v950 + v952[19]) = *(void *)((char *)v951 + v952[19]);
          __swift_storeEnumTagSinglePayload((uint64_t)v950, 0, 1, (uint64_t)v952);
        }
        uint64_t v963 = v1187[24];
        uint64_t v964 = (_OWORD *)((char *)v7 + v963);
        uint64_t v965 = (_OWORD *)((char *)v8 + v963);
        uint64_t v966 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v965, 1, (uint64_t)v966))
        {
          uint64_t v967 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
          memcpy(v964, v965, *(void *)(*(void *)(v967 - 8) + 64));
        }
        else
        {
          long long v968 = v965[1];
          _OWORD *v964 = *v965;
          v964[1] = v968;
          long long v969 = v965[3];
          v964[2] = v965[2];
          v964[3] = v969;
          uint64_t v970 = v966[8];
          uint64_t v1158 = (char *)v964 + v970;
          uint64_t v971 = (char *)v965 + v970;
          uint64_t v972 = type metadata accessor for URL();
          if (__swift_getEnumTagSinglePayload((uint64_t)v971, 1, v972))
          {
            uint64_t v973 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v1158, v971, *(void *)(*(void *)(v973 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v972 - 8) + 32))(v1158, v971, v972);
            __swift_storeEnumTagSinglePayload((uint64_t)v1158, 0, 1, v972);
          }
          *(_OWORD *)((char *)v964 + v966[9]) = *(_OWORD *)((char *)v965 + v966[9]);
          *(_OWORD *)((char *)v964 + v966[10]) = *(_OWORD *)((char *)v965 + v966[10]);
          *(_OWORD *)((char *)v964 + v966[11]) = *(_OWORD *)((char *)v965 + v966[11]);
          uint64_t v974 = v966[12];
          uint64_t v1159 = (char *)v964 + v974;
          uint64_t v975 = (char *)v965 + v974;
          if (__swift_getEnumTagSinglePayload((uint64_t)v965 + v974, 1, (uint64_t)v1167))
          {
            uint64_t v976 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1159, v975, *(void *)(*(void *)(v976 - 8) + 64));
          }
          else
          {
            v1163(v1159, v975, v1167);
            __swift_storeEnumTagSinglePayload((uint64_t)v1159, 0, 1, (uint64_t)v1167);
          }
          uint64_t v977 = v966[13];
          uint64_t v1160 = (char *)v964 + v977;
          uint64_t v978 = (char *)v965 + v977;
          if (__swift_getEnumTagSinglePayload((uint64_t)v965 + v977, 1, (uint64_t)v1167))
          {
            uint64_t v979 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1160, v978, *(void *)(*(void *)(v979 - 8) + 64));
          }
          else
          {
            v1163(v1160, v978, v1167);
            __swift_storeEnumTagSinglePayload((uint64_t)v1160, 0, 1, (uint64_t)v1167);
          }
          uint64_t v980 = v966[14];
          uint64_t v981 = (char *)v964 + v980;
          uint64_t v982 = (char *)v965 + v980;
          *(void *)uint64_t v981 = *(void *)v982;
          v981[8] = v982[8];
          *(_OWORD *)((char *)v964 + v966[15]) = *(_OWORD *)((char *)v965 + v966[15]);
          *(_OWORD *)((char *)v964 + v966[16]) = *(_OWORD *)((char *)v965 + v966[16]);
          *(_OWORD *)((char *)v964 + v966[17]) = *(_OWORD *)((char *)v965 + v966[17]);
          *(_OWORD *)((char *)v964 + v966[18]) = *(_OWORD *)((char *)v965 + v966[18]);
          *(_OWORD *)((char *)v964 + v966[19]) = *(_OWORD *)((char *)v965 + v966[19]);
          __swift_storeEnumTagSinglePayload((uint64_t)v964, 0, 1, (uint64_t)v966);
        }
        uint64_t v9 = v1190;
        memcpy((char *)v7 + v1187[25], (char *)v8 + v1187[25], 0x90uLL);
        goto LABEL_524;
      case 1u:
        long long v27 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v27;
        long long v28 = v8[3];
        void v7[2] = v8[2];
        v7[3] = v28;
        v7[4] = v8[4];
        uint64_t v29 = type metadata accessor for MobileSMSDocument(0);
        uint64_t v30 = *(int *)(v29 + 40);
        uint64_t v31 = (char *)v7 + v30;
        uint64_t v32 = (char *)v8 + v30;
        uint64_t v33 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v32, 1, v33))
        {
          uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v31, v32, *(void *)(*(void *)(v34 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v31, v32, v33);
          __swift_storeEnumTagSinglePayload((uint64_t)v31, 0, 1, v33);
        }
        uint64_t v1188 = (int *)v29;
        uint64_t v242 = *(int *)(v29 + 44);
        uint64_t v243 = (char *)v7 + v242;
        uint64_t v244 = (char *)v8 + v242;
        uint64_t v245 = type metadata accessor for URL();
        uint64_t v1161 = v245;
        uint64_t v1164 = (void *)v33;
        if (__swift_getEnumTagSinglePayload((uint64_t)v244, 1, v245))
        {
          uint64_t v246 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v243, v244, *(void *)(*(void *)(v246 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v245 - 8) + 32))(v243, v244, v245);
          __swift_storeEnumTagSinglePayload((uint64_t)v243, 0, 1, v245);
        }
        *(void *)((char *)v7 + v1188[12]) = *(void *)((char *)v8 + v1188[12]);
        *(_OWORD *)((char *)v7 + v1188[13]) = *(_OWORD *)((char *)v8 + v1188[13]);
        *(_OWORD *)((char *)v7 + v1188[14]) = *(_OWORD *)((char *)v8 + v1188[14]);
        *(void *)((char *)v7 + v1188[15]) = *(void *)((char *)v8 + v1188[15]);
        *(void *)((char *)v7 + v1188[16]) = *(void *)((char *)v8 + v1188[16]);
        uint64_t v301 = v1188[17];
        uint64_t v302 = (char *)v7 + v301;
        uint64_t v303 = (char *)v8 + v301;
        long long v304 = *((_OWORD *)v303 + 1);
        *(_OWORD *)uint64_t v302 = *(_OWORD *)v303;
        *((_OWORD *)v302 + 1) = v304;
        *((void *)v302 + 4) = *((void *)v303 + 4);
        *(_OWORD *)((char *)v7 + v1188[18]) = *(_OWORD *)((char *)v8 + v1188[18]);
        uint64_t v305 = v1188[19];
        uint64_t v306 = (_OWORD *)((char *)v7 + v305);
        uint64_t v307 = (_OWORD *)((char *)v8 + v305);
        uint64_t v308 = (int *)type metadata accessor for PartialExtractedAttributes(0);
        uint64_t v1194 = v9;
        if (__swift_getEnumTagSinglePayload((uint64_t)v307, 1, (uint64_t)v308))
        {
          uint64_t v309 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
          memcpy(v306, v307, *(void *)(*(void *)(v309 - 8) + 64));
          uint64_t v310 = v1188;
        }
        else
        {
          *uint64_t v306 = *v307;
          uint64_t v349 = v308[5];
          long long v350 = (char *)v307;
          uint64_t v351 = (_OWORD *)((char *)v306 + v349);
          uint64_t v1169 = v350;
          uint64_t v352 = &v350[v349];
          __srca = (int *)type metadata accessor for RentalCarReservation(0);
          uint64_t v1135 = v308;
          uint64_t v1151 = v306;
          if (__swift_getEnumTagSinglePayload((uint64_t)v352, 1, (uint64_t)__srca))
          {
            uint64_t v353 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
            memcpy(v351, v352, *(void *)(*(void *)(v353 - 8) + 64));
          }
          else
          {
            long long v384 = *((_OWORD *)v352 + 1);
            *uint64_t v351 = *(_OWORD *)v352;
            v351[1] = v384;
            long long v385 = *((_OWORD *)v352 + 3);
            v351[2] = *((_OWORD *)v352 + 2);
            v351[3] = v385;
            long long v386 = *((_OWORD *)v352 + 5);
            v351[4] = *((_OWORD *)v352 + 4);
            v351[5] = v386;
            long long v387 = *((_OWORD *)v352 + 7);
            v351[6] = *((_OWORD *)v352 + 6);
            v351[7] = v387;
            *((unsigned char *)v351 + 128) = v352[128];
            *(_WORD *)((char *)v351 + 129) = *(_WORD *)(v352 + 129);
            *((void *)v351 + 17) = *((void *)v352 + 17);
            long long v388 = *((_OWORD *)v352 + 10);
            v351[9] = *((_OWORD *)v352 + 9);
            v351[10] = v388;
            long long v389 = *((_OWORD *)v352 + 12);
            v351[11] = *((_OWORD *)v352 + 11);
            v351[12] = v389;
            long long v390 = *((_OWORD *)v352 + 14);
            v351[13] = *((_OWORD *)v352 + 13);
            v351[14] = v390;
            v351[15] = *((_OWORD *)v352 + 15);
            *((void *)v351 + 32) = *((void *)v352 + 32);
            *(_OWORD *)((char *)v351 + 264) = *(_OWORD *)(v352 + 264);
            *(_OWORD *)((char *)v351 + 280) = *(_OWORD *)(v352 + 280);
            *(_OWORD *)((char *)v351 + 296) = *(_OWORD *)(v352 + 296);
            *(_OWORD *)((char *)v351 + 312) = *(_OWORD *)(v352 + 312);
            *(_OWORD *)((char *)v351 + 328) = *(_OWORD *)(v352 + 328);
            *(_OWORD *)((char *)v351 + 344) = *(_OWORD *)(v352 + 344);
            *(_OWORD *)((char *)v351 + 360) = *(_OWORD *)(v352 + 360);
            *((unsigned char *)v351 + 384) = v352[384];
            *((void *)v351 + 47) = *((void *)v352 + 47);
            *(_OWORD *)((char *)v351 + 392) = *(_OWORD *)(v352 + 392);
            *(_OWORD *)((char *)v351 + 408) = *(_OWORD *)(v352 + 408);
            uint64_t v391 = __srca[35];
            uint64_t v392 = (char *)v351 + v391;
            uint64_t v393 = &v352[v391];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v352[v391], 1, (uint64_t)v1164))
            {
              uint64_t v394 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v392, v393, *(void *)(*(void *)(v394 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1164 - 1) + 32))(v392, v393, v1164);
              __swift_storeEnumTagSinglePayload((uint64_t)v392, 0, 1, (uint64_t)v1164);
            }
            uint64_t v403 = __srca[36];
            uint64_t v404 = (char *)v351 + v403;
            uint64_t v405 = &v352[v403];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v352[v403], 1, (uint64_t)v1164))
            {
              uint64_t v406 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v404, v405, *(void *)(*(void *)(v406 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1164 - 1) + 32))(v404, v405, v1164);
              __swift_storeEnumTagSinglePayload((uint64_t)v404, 0, 1, (uint64_t)v1164);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v351, 0, 1, (uint64_t)__srca);
            uint64_t v308 = v1135;
          }
          uint64_t v437 = v308[6];
          uint64_t v438 = (_OWORD *)((char *)v306 + v437);
          uint64_t v439 = &v1169[v437];
          uint64_t v440 = type metadata accessor for TicketedTransportation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v439, 1, v440))
          {
            uint64_t v441 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
            memcpy(v438, v439, *(void *)(*(void *)(v441 - 8) + 64));
          }
          else
          {
            long long v442 = *((_OWORD *)v439 + 1);
            *uint64_t v438 = *(_OWORD *)v439;
            v438[1] = v442;
            long long v443 = *((_OWORD *)v439 + 3);
            v438[2] = *((_OWORD *)v439 + 2);
            v438[3] = v443;
            long long v444 = *((_OWORD *)v439 + 5);
            v438[4] = *((_OWORD *)v439 + 4);
            v438[5] = v444;
            long long v445 = *((_OWORD *)v439 + 7);
            v438[6] = *((_OWORD *)v439 + 6);
            v438[7] = v445;
            *((unsigned char *)v438 + 128) = v439[128];
            *(_WORD *)((char *)v438 + 129) = *(_WORD *)(v439 + 129);
            *((void *)v438 + 17) = *((void *)v439 + 17);
            long long v446 = *((_OWORD *)v439 + 10);
            v438[9] = *((_OWORD *)v439 + 9);
            v438[10] = v446;
            long long v447 = *((_OWORD *)v439 + 12);
            v438[11] = *((_OWORD *)v439 + 11);
            v438[12] = v447;
            *((void *)v438 + 26) = *((void *)v439 + 26);
            *(_OWORD *)((char *)v438 + 216) = *(_OWORD *)(v439 + 216);
            *(_OWORD *)((char *)v438 + 232) = *(_OWORD *)(v439 + 232);
            *(_OWORD *)((char *)v438 + 248) = *(_OWORD *)(v439 + 248);
            *(_OWORD *)((char *)v438 + 264) = *(_OWORD *)(v439 + 264);
            *((unsigned char *)v438 + 296) = v439[296];
            uint64_t v448 = *((void *)v439 + 36);
            *((void *)v438 + 35) = *((void *)v439 + 35);
            *((void *)v438 + 36) = v448;
            uint64_t v449 = *(int *)(v440 + 112);
            __srcb = (char *)v438 + v449;
            uint64_t v450 = &v439[v449];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v439[v449], 1, (uint64_t)v1164))
            {
              uint64_t v451 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__srcb, v450, *(void *)(*(void *)(v451 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1164 - 1) + 32))(__srcb, v450, v1164);
              __swift_storeEnumTagSinglePayload((uint64_t)__srcb, 0, 1, (uint64_t)v1164);
            }
            uint64_t v459 = *(int *)(v440 + 116);
            long long v460 = (char *)v438 + v459;
            long long v461 = &v439[v459];
            if (__swift_getEnumTagSinglePayload((uint64_t)v461, 1, (uint64_t)v1164))
            {
              uint64_t v462 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v460, v461, *(void *)(*(void *)(v462 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1164 - 1) + 32))(v460, v461, v1164);
              __swift_storeEnumTagSinglePayload((uint64_t)v460, 0, 1, (uint64_t)v1164);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v438, 0, 1, v440);
            uint64_t v308 = v1135;
          }
          uint64_t v499 = v308[7];
          uint64_t v500 = (_OWORD *)((char *)v306 + v499);
          uint64_t v501 = &v1169[v499];
          uint64_t v502 = (int *)type metadata accessor for TicketedShow(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v501, 1, (uint64_t)v502))
          {
            uint64_t v503 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
            memcpy(v500, v501, *(void *)(*(void *)(v503 - 8) + 64));
          }
          else
          {
            long long v504 = *((_OWORD *)v501 + 1);
            *uint64_t v500 = *(_OWORD *)v501;
            v500[1] = v504;
            long long v505 = *((_OWORD *)v501 + 3);
            v500[2] = *((_OWORD *)v501 + 2);
            v500[3] = v505;
            long long v506 = *((_OWORD *)v501 + 5);
            v500[4] = *((_OWORD *)v501 + 4);
            v500[5] = v506;
            long long v507 = *((_OWORD *)v501 + 7);
            v500[6] = *((_OWORD *)v501 + 6);
            v500[7] = v507;
            *((unsigned char *)v500 + 128) = v501[128];
            *(_WORD *)((char *)v500 + 129) = *(_WORD *)(v501 + 129);
            *((void *)v500 + 17) = *((void *)v501 + 17);
            long long v508 = *((_OWORD *)v501 + 10);
            v500[9] = *((_OWORD *)v501 + 9);
            v500[10] = v508;
            long long v509 = *((_OWORD *)v501 + 12);
            v500[11] = *((_OWORD *)v501 + 11);
            v500[12] = v509;
            long long v510 = *((_OWORD *)v501 + 14);
            v500[13] = *((_OWORD *)v501 + 13);
            v500[14] = v510;
            *((void *)v500 + 30) = *((void *)v501 + 30);
            *(_OWORD *)((char *)v500 + 248) = *(_OWORD *)(v501 + 248);
            *(_OWORD *)((char *)v500 + 264) = *(_OWORD *)(v501 + 264);
            *((unsigned char *)v500 + 296) = v501[296];
            uint64_t v511 = *((void *)v501 + 36);
            *((void *)v500 + 35) = *((void *)v501 + 35);
            *((void *)v500 + 36) = v511;
            v500[19] = *((_OWORD *)v501 + 19);
            uint64_t v512 = v502[29];
            __srcc = (char *)v500 + v512;
            uint64_t v513 = &v501[v512];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v501[v512], 1, v1161))
            {
              uint64_t v514 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(__srcc, v513, *(void *)(*(void *)(v514 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1161 - 8) + 32))(__srcc, v513, v1161);
              __swift_storeEnumTagSinglePayload((uint64_t)__srcc, 0, 1, v1161);
            }
            *(_OWORD *)((char *)v500 + v502[30]) = *(_OWORD *)&v501[v502[30]];
            uint64_t v522 = v502[31];
            __srcd = (char *)v500 + v522;
            uint64_t v523 = &v501[v522];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v501[v522], 1, (uint64_t)v1164))
            {
              uint64_t v524 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__srcd, v523, *(void *)(*(void *)(v524 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1164 - 1) + 32))(__srcd, v523, v1164);
              __swift_storeEnumTagSinglePayload((uint64_t)__srcd, 0, 1, (uint64_t)v1164);
            }
            uint64_t v533 = v502[32];
            uint64_t v534 = (char *)v500 + v533;
            uint64_t v535 = &v501[v533];
            if (__swift_getEnumTagSinglePayload((uint64_t)v535, 1, (uint64_t)v1164))
            {
              uint64_t v536 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v534, v535, *(void *)(*(void *)(v536 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1164 - 1) + 32))(v534, v535, v1164);
              __swift_storeEnumTagSinglePayload((uint64_t)v534, 0, 1, (uint64_t)v1164);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v500, 0, 1, (uint64_t)v502);
            uint64_t v308 = v1135;
          }
          uint64_t v569 = v308[8];
          uint64_t v570 = (_OWORD *)((char *)v306 + v569);
          uint64_t v571 = &v1169[v569];
          uint64_t v572 = type metadata accessor for Appointment(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v571, 1, v572))
          {
            uint64_t v573 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
            memcpy(v570, v571, *(void *)(*(void *)(v573 - 8) + 64));
          }
          else
          {
            long long v574 = *((_OWORD *)v571 + 1);
            *uint64_t v570 = *(_OWORD *)v571;
            v570[1] = v574;
            long long v575 = *((_OWORD *)v571 + 3);
            v570[2] = *((_OWORD *)v571 + 2);
            v570[3] = v575;
            long long v576 = *((_OWORD *)v571 + 5);
            v570[4] = *((_OWORD *)v571 + 4);
            v570[5] = v576;
            long long v577 = *((_OWORD *)v571 + 7);
            v570[6] = *((_OWORD *)v571 + 6);
            v570[7] = v577;
            *((unsigned char *)v570 + 128) = v571[128];
            *(_WORD *)((char *)v570 + 129) = *(_WORD *)(v571 + 129);
            *((void *)v570 + 17) = *((void *)v571 + 17);
            long long v578 = *((_OWORD *)v571 + 10);
            v570[9] = *((_OWORD *)v571 + 9);
            v570[10] = v578;
            long long v579 = *((_OWORD *)v571 + 12);
            v570[11] = *((_OWORD *)v571 + 11);
            v570[12] = v579;
            long long v580 = *((_OWORD *)v571 + 14);
            v570[13] = *((_OWORD *)v571 + 13);
            v570[14] = v580;
            long long v581 = *((_OWORD *)v571 + 16);
            v570[15] = *((_OWORD *)v571 + 15);
            v570[16] = v581;
            *((unsigned char *)v570 + 280) = v571[280];
            *((void *)v570 + 34) = *((void *)v571 + 34);
            v570[18] = *((_OWORD *)v571 + 18);
            uint64_t v582 = *(int *)(v572 + 108);
            __srce = (char *)v570 + v582;
            v583 = &v571[v582];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v571[v582], 1, (uint64_t)v1164))
            {
              uint64_t v584 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__srce, v583, *(void *)(*(void *)(v584 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1164 - 1) + 32))(__srce, v583, v1164);
              __swift_storeEnumTagSinglePayload((uint64_t)__srce, 0, 1, (uint64_t)v1164);
            }
            uint64_t v592 = *(int *)(v572 + 112);
            long long v593 = (char *)v570 + v592;
            uint64_t v594 = &v571[v592];
            if (__swift_getEnumTagSinglePayload((uint64_t)v594, 1, (uint64_t)v1164))
            {
              uint64_t v595 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v593, v594, *(void *)(*(void *)(v595 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1164 - 1) + 32))(v593, v594, v1164);
              __swift_storeEnumTagSinglePayload((uint64_t)v593, 0, 1, (uint64_t)v1164);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v570, 0, 1, v572);
            uint64_t v308 = v1135;
          }
          uint64_t v629 = v308[9];
          uint64_t v630 = (_OWORD *)((char *)v306 + v629);
          uint64_t v631 = &v1169[v629];
          uint64_t v632 = (int *)type metadata accessor for Party(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v631, 1, (uint64_t)v632))
          {
            uint64_t v633 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
            memcpy(v630, v631, *(void *)(*(void *)(v633 - 8) + 64));
          }
          else
          {
            long long v634 = *((_OWORD *)v631 + 1);
            *uint64_t v630 = *(_OWORD *)v631;
            v630[1] = v634;
            long long v635 = *((_OWORD *)v631 + 3);
            v630[2] = *((_OWORD *)v631 + 2);
            v630[3] = v635;
            long long v636 = *((_OWORD *)v631 + 5);
            v630[4] = *((_OWORD *)v631 + 4);
            v630[5] = v636;
            long long v637 = *((_OWORD *)v631 + 7);
            v630[6] = *((_OWORD *)v631 + 6);
            v630[7] = v637;
            *((unsigned char *)v630 + 128) = v631[128];
            *(_WORD *)((char *)v630 + 129) = *(_WORD *)(v631 + 129);
            *((void *)v630 + 17) = *((void *)v631 + 17);
            long long v638 = *((_OWORD *)v631 + 10);
            v630[9] = *((_OWORD *)v631 + 9);
            v630[10] = v638;
            long long v639 = *((_OWORD *)v631 + 12);
            v630[11] = *((_OWORD *)v631 + 11);
            v630[12] = v639;
            long long v640 = *((_OWORD *)v631 + 14);
            v630[13] = *((_OWORD *)v631 + 13);
            v630[14] = v640;
            v630[15] = *((_OWORD *)v631 + 15);
            uint64_t v641 = v632[24];
            __srcf = (char *)v630 + v641;
            uint64_t v642 = &v631[v641];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v631[v641], 1, (uint64_t)v1164))
            {
              uint64_t v643 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__srcf, v642, *(void *)(*(void *)(v643 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1164 - 1) + 32))(__srcf, v642, v1164);
              __swift_storeEnumTagSinglePayload((uint64_t)__srcf, 0, 1, (uint64_t)v1164);
            }
            uint64_t v651 = v632[25];
            __srcg = (char *)v630 + v651;
            uint64_t v652 = &v631[v651];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v631[v651], 1, (uint64_t)v1164))
            {
              uint64_t v653 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__srcg, v652, *(void *)(*(void *)(v653 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1164 - 1) + 32))(__srcg, v652, v1164);
              __swift_storeEnumTagSinglePayload((uint64_t)__srcg, 0, 1, (uint64_t)v1164);
            }
            uint64_t v663 = v632[26];
            v664 = (char *)v630 + v663;
            uint64_t v665 = &v631[v663];
            if (__swift_getEnumTagSinglePayload((uint64_t)v665, 1, v1161))
            {
              uint64_t v666 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v664, v665, *(void *)(*(void *)(v666 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1161 - 8) + 32))(v664, v665, v1161);
              __swift_storeEnumTagSinglePayload((uint64_t)v664, 0, 1, v1161);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v630, 0, 1, (uint64_t)v632);
            uint64_t v308 = v1135;
          }
          uint64_t v695 = v308[10];
          uint64_t v696 = (_OWORD *)((char *)v306 + v695);
          long long v697 = &v1169[v695];
          uint64_t v698 = (int *)type metadata accessor for Trip(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v697, 1, (uint64_t)v698))
          {
            uint64_t v699 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
            memcpy(v696, v697, *(void *)(*(void *)(v699 - 8) + 64));
          }
          else
          {
            long long v700 = *((_OWORD *)v697 + 1);
            *uint64_t v696 = *(_OWORD *)v697;
            v696[1] = v700;
            long long v701 = *((_OWORD *)v697 + 3);
            v696[2] = *((_OWORD *)v697 + 2);
            v696[3] = v701;
            long long v702 = *((_OWORD *)v697 + 5);
            v696[4] = *((_OWORD *)v697 + 4);
            v696[5] = v702;
            long long v703 = *((_OWORD *)v697 + 7);
            v696[6] = *((_OWORD *)v697 + 6);
            v696[7] = v703;
            *((unsigned char *)v696 + 128) = v697[128];
            *(_WORD *)((char *)v696 + 129) = *(_WORD *)(v697 + 129);
            *((void *)v696 + 17) = *((void *)v697 + 17);
            long long v704 = *((_OWORD *)v697 + 10);
            v696[9] = *((_OWORD *)v697 + 9);
            v696[10] = v704;
            long long v705 = *((_OWORD *)v697 + 12);
            v696[11] = *((_OWORD *)v697 + 11);
            v696[12] = v705;
            v696[13] = *((_OWORD *)v697 + 13);
            uint64_t v706 = v698[22];
            __srch = (char *)v696 + v706;
            uint64_t v707 = &v697[v706];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v697[v706], 1, (uint64_t)v1164))
            {
              uint64_t v708 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__srch, v707, *(void *)(*(void *)(v708 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1164 - 1) + 32))(__srch, v707, v1164);
              __swift_storeEnumTagSinglePayload((uint64_t)__srch, 0, 1, (uint64_t)v1164);
            }
            uint64_t v715 = v698[23];
            __srcuint64_t i = (char *)v696 + v715;
            v716 = &v697[v715];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v697[v715], 1, (uint64_t)v1164))
            {
              uint64_t v717 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__srci, v716, *(void *)(*(void *)(v717 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1164 - 1) + 32))(__srci, v716, v1164);
              __swift_storeEnumTagSinglePayload((uint64_t)__srci, 0, 1, (uint64_t)v1164);
            }
            uint64_t v733 = v698[24];
            uint64_t v734 = (char *)v696 + v733;
            uint64_t v735 = &v697[v733];
            *(void *)uint64_t v734 = *(void *)v735;
            v734[8] = v735[8];
            uint64_t v736 = v698[25];
            uint64_t v737 = (char *)v696 + v736;
            uint64_t v738 = &v697[v736];
            if (__swift_getEnumTagSinglePayload((uint64_t)v738, 1, v1161))
            {
              uint64_t v739 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v737, v738, *(void *)(*(void *)(v739 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1161 - 8) + 32))(v737, v738, v1161);
              __swift_storeEnumTagSinglePayload((uint64_t)v737, 0, 1, v1161);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v696, 0, 1, (uint64_t)v698);
            uint64_t v308 = v1135;
          }
          uint64_t v766 = v308[11];
          uint64_t v767 = (_OWORD *)((char *)v306 + v766);
          uint64_t v768 = &v1169[v766];
          uint64_t v769 = (int *)type metadata accessor for FlightReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v768, 1, (uint64_t)v769))
          {
            uint64_t v770 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
            memcpy(v767, v768, *(void *)(*(void *)(v770 - 8) + 64));
          }
          else
          {
            long long v771 = *((_OWORD *)v768 + 1);
            *uint64_t v767 = *(_OWORD *)v768;
            v767[1] = v771;
            long long v772 = *((_OWORD *)v768 + 3);
            v767[2] = *((_OWORD *)v768 + 2);
            v767[3] = v772;
            long long v773 = *((_OWORD *)v768 + 5);
            v767[4] = *((_OWORD *)v768 + 4);
            v767[5] = v773;
            *((unsigned char *)v767 + 96) = v768[96];
            *(_OWORD *)((char *)v767 + 104) = *(_OWORD *)(v768 + 104);
            uint64_t v774 = v769[13];
            __srck = (char *)v767 + v774;
            uint64_t v775 = &v768[v774];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v768[v774], 1, v1161))
            {
              uint64_t v776 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(__srck, v775, *(void *)(*(void *)(v776 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1161 - 8) + 32))(__srck, v775, v1161);
              __swift_storeEnumTagSinglePayload((uint64_t)__srck, 0, 1, v1161);
            }
            uint64_t v782 = v769[14];
            __srcm = (char *)v767 + v782;
            uint64_t v783 = &v768[v782];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v768[v782], 1, v1161))
            {
              uint64_t v784 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(__srcm, v783, *(void *)(*(void *)(v784 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1161 - 8) + 32))(__srcm, v783, v1161);
              __swift_storeEnumTagSinglePayload((uint64_t)__srcm, 0, 1, v1161);
            }
            *(_OWORD *)((char *)v767 + v769[15]) = *(_OWORD *)&v768[v769[15]];
            *(_OWORD *)((char *)v767 + v769[16]) = *(_OWORD *)&v768[v769[16]];
            *(_OWORD *)((char *)v767 + v769[17]) = *(_OWORD *)&v768[v769[17]];
            uint64_t v797 = v769[18];
            uint64_t v1094 = &v768[v797];
            __dstq = (char *)v767 + v797;
            uint64_t v798 = type metadata accessor for DateComponents();
            uint64_t v799 = *(void (**)(char *, char *, uint64_t))(*(void *)(v798 - 8) + 32);
            v799(__dstq, v1094, v798);
            v799((char *)v767 + v769[19], &v768[v769[19]], v798);
            *(_OWORD *)((char *)v767 + v769[20]) = *(_OWORD *)&v768[v769[20]];
            *(_OWORD *)((char *)v767 + v769[21]) = *(_OWORD *)&v768[v769[21]];
            *(_OWORD *)((char *)v767 + v769[22]) = *(_OWORD *)&v768[v769[22]];
            *(_OWORD *)((char *)v767 + v769[23]) = *(_OWORD *)&v768[v769[23]];
            *(_OWORD *)((char *)v767 + v769[24]) = *(_OWORD *)&v768[v769[24]];
            *(_OWORD *)((char *)v767 + v769[25]) = *(_OWORD *)&v768[v769[25]];
            *(_OWORD *)((char *)v767 + v769[26]) = *(_OWORD *)&v768[v769[26]];
            *(_OWORD *)((char *)v767 + v769[27]) = *(_OWORD *)&v768[v769[27]];
            *(_OWORD *)((char *)v767 + v769[28]) = *(_OWORD *)&v768[v769[28]];
            *(_OWORD *)((char *)v767 + v769[29]) = *(_OWORD *)&v768[v769[29]];
            *(_OWORD *)((char *)v767 + v769[30]) = *(_OWORD *)&v768[v769[30]];
            *(_OWORD *)((char *)v767 + v769[31]) = *(_OWORD *)&v768[v769[31]];
            *(_OWORD *)((char *)v767 + v769[32]) = *(_OWORD *)&v768[v769[32]];
            *(void *)((char *)v767 + v769[33]) = *(void *)&v768[v769[33]];
            *(void *)((char *)v767 + v769[34]) = *(void *)&v768[v769[34]];
            *(_OWORD *)((char *)v767 + v769[35]) = *(_OWORD *)&v768[v769[35]];
            *(_OWORD *)((char *)v767 + v769[36]) = *(_OWORD *)&v768[v769[36]];
            *(_OWORD *)((char *)v767 + v769[37]) = *(_OWORD *)&v768[v769[37]];
            uint64_t v800 = v769[38];
            __srcn = (char *)v767 + v800;
            uint64_t v801 = &v768[v800];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v768[v800], 1, (uint64_t)v1164))
            {
              uint64_t v802 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__srcn, v801, *(void *)(*(void *)(v802 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1164 - 1) + 32))(__srcn, v801, v1164);
              __swift_storeEnumTagSinglePayload((uint64_t)__srcn, 0, 1, (uint64_t)v1164);
            }
            uint64_t v306 = v1151;
            *(_OWORD *)((char *)v767 + v769[39]) = *(_OWORD *)&v768[v769[39]];
            *(_OWORD *)((char *)v767 + v769[40]) = *(_OWORD *)&v768[v769[40]];
            uint64_t v841 = v769[41];
            uint64_t v842 = (char *)v767 + v841;
            uint64_t v843 = &v768[v841];
            *(void *)uint64_t v842 = *(void *)v843;
            v842[8] = v843[8];
            *(_OWORD *)((char *)v767 + v769[42]) = *(_OWORD *)&v768[v769[42]];
            uint64_t v844 = v769[43];
            uint64_t v845 = (char *)v767 + v844;
            uint64_t v846 = &v768[v844];
            *(_OWORD *)uint64_t v845 = *(_OWORD *)v846;
            *(void *)(v845 + 13) = *(void *)(v846 + 13);
            *(_OWORD *)((char *)v767 + v769[44]) = *(_OWORD *)&v768[v769[44]];
            *(_OWORD *)((char *)v767 + v769[45]) = *(_OWORD *)&v768[v769[45]];
            *(_OWORD *)((char *)v767 + v769[46]) = *(_OWORD *)&v768[v769[46]];
            *(_OWORD *)((char *)v767 + v769[47]) = *(_OWORD *)&v768[v769[47]];
            __swift_storeEnumTagSinglePayload((uint64_t)v767, 0, 1, (uint64_t)v769);
            uint64_t v308 = v1135;
          }
          uint64_t v847 = v308[12];
          uint64_t v848 = (_OWORD *)((char *)v306 + v847);
          uint64_t v849 = &v1169[v847];
          uint64_t v850 = (int *)type metadata accessor for HotelReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v849, 1, (uint64_t)v850))
          {
            uint64_t v851 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
            memcpy(v848, v849, *(void *)(*(void *)(v851 - 8) + 64));
          }
          else
          {
            long long v852 = *((_OWORD *)v849 + 1);
            *uint64_t v848 = *(_OWORD *)v849;
            v848[1] = v852;
            long long v853 = *((_OWORD *)v849 + 3);
            v848[2] = *((_OWORD *)v849 + 2);
            v848[3] = v853;
            long long v854 = *((_OWORD *)v849 + 5);
            v848[4] = *((_OWORD *)v849 + 4);
            v848[5] = v854;
            *((unsigned char *)v848 + 96) = v849[96];
            *(_OWORD *)((char *)v848 + 104) = *(_OWORD *)(v849 + 104);
            *(_OWORD *)((char *)v848 + 120) = *(_OWORD *)(v849 + 120);
            uint64_t v855 = v850[14];
            __srcp = (char *)v848 + v855;
            uint64_t v856 = &v849[v855];
            uint64_t v857 = type metadata accessor for DateComponents();
            __dstn = v856;
            uint64_t v858 = (uint64_t)v856;
            uint64_t v859 = v857;
            if (__swift_getEnumTagSinglePayload(v858, 1, v857))
            {
              uint64_t v860 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(__srcp, __dstn, *(void *)(*(void *)(v860 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, void *, uint64_t))(*(void *)(v859 - 8) + 32))(__srcp, __dstn, v859);
              __swift_storeEnumTagSinglePayload((uint64_t)__srcp, 0, 1, v859);
            }
            uint64_t v866 = v850[15];
            __srcr = (char *)v848 + v866;
            uint64_t v867 = &v849[v866];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v849[v866], 1, v859))
            {
              uint64_t v868 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(__srcr, v867, *(void *)(*(void *)(v868 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v859 - 8) + 32))(__srcr, v867, v859);
              __swift_storeEnumTagSinglePayload((uint64_t)__srcr, 0, 1, v859);
            }
            *(_OWORD *)((char *)v848 + v850[16]) = *(_OWORD *)&v849[v850[16]];
            *(_OWORD *)((char *)v848 + v850[17]) = *(_OWORD *)&v849[v850[17]];
            *(_OWORD *)((char *)v848 + v850[18]) = *(_OWORD *)&v849[v850[18]];
            *(_OWORD *)((char *)v848 + v850[19]) = *(_OWORD *)&v849[v850[19]];
            *(_OWORD *)((char *)v848 + v850[20]) = *(_OWORD *)&v849[v850[20]];
            *(void *)((char *)v848 + v850[21]) = *(void *)&v849[v850[21]];
            *(void *)((char *)v848 + v850[22]) = *(void *)&v849[v850[22]];
            uint64_t v911 = v850[23];
            uint64_t v912 = (char *)v848 + v911;
            uint64_t v913 = &v849[v911];
            v912[8] = v913[8];
            *(void *)uint64_t v912 = *(void *)v913;
            uint64_t v914 = v850[24];
            uint64_t v915 = (char *)v848 + v914;
            uint64_t v916 = &v849[v914];
            v915[8] = v916[8];
            *(void *)uint64_t v915 = *(void *)v916;
            *(_OWORD *)((char *)v848 + v850[25]) = *(_OWORD *)&v849[v850[25]];
            *(_OWORD *)((char *)v848 + v850[26]) = *(_OWORD *)&v849[v850[26]];
            *(_OWORD *)((char *)v848 + v850[27]) = *(_OWORD *)&v849[v850[27]];
            *(_OWORD *)((char *)v848 + v850[28]) = *(_OWORD *)&v849[v850[28]];
            uint64_t v917 = v850[29];
            uint64_t v918 = (char *)v848 + v917;
            v919 = &v849[v917];
            *(void *)uint64_t v918 = *(void *)v919;
            v918[8] = v919[8];
            __swift_storeEnumTagSinglePayload((uint64_t)v848, 0, 1, (uint64_t)v850);
            uint64_t v308 = v1135;
            uint64_t v306 = v1151;
          }
          uint64_t v920 = v308[13];
          uint64_t v921 = (_OWORD *)((char *)v306 + v920);
          uint64_t v922 = &v1169[v920];
          uint64_t v923 = (int *)type metadata accessor for RestaurantReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v922, 1, (uint64_t)v923))
          {
            uint64_t v924 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
            memcpy(v921, v922, *(void *)(*(void *)(v924 - 8) + 64));
          }
          else
          {
            long long v925 = *((_OWORD *)v922 + 1);
            *uint64_t v921 = *(_OWORD *)v922;
            v921[1] = v925;
            long long v926 = *((_OWORD *)v922 + 3);
            v921[2] = *((_OWORD *)v922 + 2);
            v921[3] = v926;
            long long v927 = *((_OWORD *)v922 + 5);
            v921[4] = *((_OWORD *)v922 + 4);
            v921[5] = v927;
            *((unsigned char *)v921 + 96) = v922[96];
            *(_OWORD *)((char *)v921 + 104) = *(_OWORD *)(v922 + 104);
            *(_OWORD *)((char *)v921 + 120) = *(_OWORD *)(v922 + 120);
            uint64_t v928 = v923[14];
            uint64_t v1170 = (char *)v921 + v928;
            uint64_t v929 = &v922[v928];
            uint64_t v930 = type metadata accessor for DateComponents();
            if (__swift_getEnumTagSinglePayload((uint64_t)v929, 1, v930))
            {
              uint64_t v931 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1170, v929, *(void *)(*(void *)(v931 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v930 - 8) + 32))(v1170, v929, v930);
              __swift_storeEnumTagSinglePayload((uint64_t)v1170, 0, 1, v930);
            }
            *(_OWORD *)((char *)v921 + v923[15]) = *(_OWORD *)&v922[v923[15]];
            *(_OWORD *)((char *)v921 + v923[16]) = *(_OWORD *)&v922[v923[16]];
            *(_OWORD *)((char *)v921 + v923[17]) = *(_OWORD *)&v922[v923[17]];
            *(_OWORD *)((char *)v921 + v923[18]) = *(_OWORD *)&v922[v923[18]];
            *(_OWORD *)((char *)v921 + v923[19]) = *(_OWORD *)&v922[v923[19]];
            *(void *)((char *)v921 + v923[20]) = *(void *)&v922[v923[20]];
            *(_OWORD *)((char *)v921 + v923[21]) = *(_OWORD *)&v922[v923[21]];
            *(_OWORD *)((char *)v921 + v923[22]) = *(_OWORD *)&v922[v923[22]];
            *(_OWORD *)((char *)v921 + v923[23]) = *(_OWORD *)&v922[v923[23]];
            __swift_storeEnumTagSinglePayload((uint64_t)v921, 0, 1, (uint64_t)v923);
            uint64_t v308 = v1135;
            uint64_t v306 = v1151;
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v306, 0, 1, (uint64_t)v308);
          uint64_t v310 = v1188;
        }
        uint64_t v1034 = v310[20];
        uint64_t v1035 = (_OWORD *)((char *)v7 + v1034);
        uint64_t v1036 = (_OWORD *)((char *)v8 + v1034);
        uint64_t v1037 = (int *)type metadata accessor for PreExtractedCard(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1036, 1, (uint64_t)v1037))
        {
          uint64_t v1038 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
          memcpy(v1035, v1036, *(void *)(*(void *)(v1038 - 8) + 64));
        }
        else
        {
          long long v1039 = v1036[1];
          *uint64_t v1035 = *v1036;
          v1035[1] = v1039;
          long long v1040 = v1036[3];
          v1035[2] = v1036[2];
          v1035[3] = v1040;
          long long v1041 = v1036[5];
          v1035[4] = v1036[4];
          v1035[5] = v1041;
          uint64_t v1042 = v1037[10];
          uint64_t v1179 = (char *)v1035 + v1042;
          uint64_t v1043 = (char *)v1036 + v1042;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1036 + v1042, 1, (uint64_t)v1164))
          {
            uint64_t v1044 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1179, v1043, *(void *)(*(void *)(v1044 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, void *))(*(v1164 - 1) + 32))(v1179, v1043, v1164);
            __swift_storeEnumTagSinglePayload((uint64_t)v1179, 0, 1, (uint64_t)v1164);
          }
          uint64_t v1045 = v1037[11];
          uint64_t v1180 = (char *)v1035 + v1045;
          uint64_t v1046 = (char *)v1036 + v1045;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1036 + v1045, 1, (uint64_t)v1164))
          {
            uint64_t v1047 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1180, v1046, *(void *)(*(void *)(v1047 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, void *))(*(v1164 - 1) + 32))(v1180, v1046, v1164);
            __swift_storeEnumTagSinglePayload((uint64_t)v1180, 0, 1, (uint64_t)v1164);
          }
          *(_OWORD *)((char *)v1035 + v1037[12]) = *(_OWORD *)((char *)v1036 + v1037[12]);
          *(_OWORD *)((char *)v1035 + v1037[13]) = *(_OWORD *)((char *)v1036 + v1037[13]);
          *(_OWORD *)((char *)v1035 + v1037[14]) = *(_OWORD *)((char *)v1036 + v1037[14]);
          uint64_t v1048 = v1037[15];
          uint64_t v1181 = (char *)v1035 + v1048;
          uint64_t v1049 = (char *)v1036 + v1048;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1036 + v1048, 1, (uint64_t)v1164))
          {
            uint64_t v1050 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1181, v1049, *(void *)(*(void *)(v1050 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, void *))(*(v1164 - 1) + 32))(v1181, v1049, v1164);
            __swift_storeEnumTagSinglePayload((uint64_t)v1181, 0, 1, (uint64_t)v1164);
          }
          uint64_t v310 = v1188;
          *(_OWORD *)((char *)v1035 + v1037[16]) = *(_OWORD *)((char *)v1036 + v1037[16]);
          *(_OWORD *)((char *)v1035 + v1037[17]) = *(_OWORD *)((char *)v1036 + v1037[17]);
          *(_OWORD *)((char *)v1035 + v1037[18]) = *(_OWORD *)((char *)v1036 + v1037[18]);
          *(_OWORD *)((char *)v1035 + v1037[19]) = *(_OWORD *)((char *)v1036 + v1037[19]);
          *(_OWORD *)((char *)v1035 + v1037[20]) = *(_OWORD *)((char *)v1036 + v1037[20]);
          *(_OWORD *)((char *)v1035 + v1037[21]) = *(_OWORD *)((char *)v1036 + v1037[21]);
          *(_OWORD *)((char *)v1035 + v1037[22]) = *(_OWORD *)((char *)v1036 + v1037[22]);
          *(_OWORD *)((char *)v1035 + v1037[23]) = *(_OWORD *)((char *)v1036 + v1037[23]);
          __swift_storeEnumTagSinglePayload((uint64_t)v1035, 0, 1, (uint64_t)v1037);
        }
        uint64_t v1051 = v310[21];
        uint64_t v1052 = (_OWORD *)((char *)v7 + v1051);
        uint64_t v1053 = (_OWORD *)((char *)v8 + v1051);
        uint64_t v1054 = (int *)type metadata accessor for PreExtractedContact(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1053, 1, (uint64_t)v1054))
        {
          uint64_t v1055 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
          memcpy(v1052, v1053, *(void *)(*(void *)(v1055 - 8) + 64));
        }
        else
        {
          long long v1056 = v1053[1];
          *uint64_t v1052 = *v1053;
          v1052[1] = v1056;
          long long v1057 = v1053[3];
          v1052[2] = v1053[2];
          v1052[3] = v1057;
          long long v1058 = v1053[5];
          v1052[4] = v1053[4];
          v1052[5] = v1058;
          uint64_t v1059 = v1054[11];
          uint64_t v1182 = (char *)v1052 + v1059;
          uint64_t v1060 = (char *)v1053 + v1059;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1053 + v1059, 1, (uint64_t)v1164))
          {
            uint64_t v1061 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1182, v1060, *(void *)(*(void *)(v1061 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, void *))(*(v1164 - 1) + 32))(v1182, v1060, v1164);
            __swift_storeEnumTagSinglePayload((uint64_t)v1182, 0, 1, (uint64_t)v1164);
          }
          *(_OWORD *)((char *)v1052 + v1054[12]) = *(_OWORD *)((char *)v1053 + v1054[12]);
          *(void *)((char *)v1052 + v1054[13]) = *(void *)((char *)v1053 + v1054[13]);
          uint64_t v1062 = v1054[14];
          uint64_t v1183 = (char *)v1052 + v1062;
          uint64_t v1063 = (char *)v1053 + v1062;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1053 + v1062, 1, (uint64_t)v1164))
          {
            uint64_t v1064 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1183, v1063, *(void *)(*(void *)(v1064 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, void *))(*(v1164 - 1) + 32))(v1183, v1063, v1164);
            __swift_storeEnumTagSinglePayload((uint64_t)v1183, 0, 1, (uint64_t)v1164);
          }
          uint64_t v310 = v1188;
          *(void *)((char *)v1052 + v1054[15]) = *(void *)((char *)v1053 + v1054[15]);
          *(void *)((char *)v1052 + v1054[16]) = *(void *)((char *)v1053 + v1054[16]);
          *(_OWORD *)((char *)v1052 + v1054[17]) = *(_OWORD *)((char *)v1053 + v1054[17]);
          *(void *)((char *)v1052 + v1054[18]) = *(void *)((char *)v1053 + v1054[18]);
          *(void *)((char *)v1052 + v1054[19]) = *(void *)((char *)v1053 + v1054[19]);
          __swift_storeEnumTagSinglePayload((uint64_t)v1052, 0, 1, (uint64_t)v1054);
        }
        uint64_t v1065 = v310[22];
        uint64_t v1066 = (_OWORD *)((char *)v7 + v1065);
        uint64_t v1067 = (_OWORD *)((char *)v8 + v1065);
        uint64_t v1068 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1067, 1, (uint64_t)v1068))
        {
          uint64_t v1069 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
          memcpy(v1066, v1067, *(void *)(*(void *)(v1069 - 8) + 64));
        }
        else
        {
          long long v1070 = v1067[1];
          *uint64_t v1066 = *v1067;
          v1066[1] = v1070;
          long long v1071 = v1067[3];
          v1066[2] = v1067[2];
          v1066[3] = v1071;
          uint64_t v1072 = v1068[8];
          uint64_t v1184 = (char *)v1066 + v1072;
          uint64_t v1073 = (char *)v1067 + v1072;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1067 + v1072, 1, v1161))
          {
            uint64_t v1074 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v1184, v1073, *(void *)(*(void *)(v1074 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1161 - 8) + 32))(v1184, v1073, v1161);
            __swift_storeEnumTagSinglePayload((uint64_t)v1184, 0, 1, v1161);
          }
          *(_OWORD *)((char *)v1066 + v1068[9]) = *(_OWORD *)((char *)v1067 + v1068[9]);
          *(_OWORD *)((char *)v1066 + v1068[10]) = *(_OWORD *)((char *)v1067 + v1068[10]);
          *(_OWORD *)((char *)v1066 + v1068[11]) = *(_OWORD *)((char *)v1067 + v1068[11]);
          uint64_t v1075 = v1068[12];
          uint64_t v1185 = (char *)v1066 + v1075;
          uint64_t v1076 = (char *)v1067 + v1075;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1067 + v1075, 1, (uint64_t)v1164))
          {
            uint64_t v1077 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1185, v1076, *(void *)(*(void *)(v1077 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, void *))(*(v1164 - 1) + 32))(v1185, v1076, v1164);
            __swift_storeEnumTagSinglePayload((uint64_t)v1185, 0, 1, (uint64_t)v1164);
          }
          uint64_t v1078 = v1068[13];
          uint64_t v1186 = (char *)v1066 + v1078;
          uint64_t v1079 = (char *)v1067 + v1078;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1067 + v1078, 1, (uint64_t)v1164))
          {
            uint64_t v1080 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1186, v1079, *(void *)(*(void *)(v1080 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, void *))(*(v1164 - 1) + 32))(v1186, v1079, v1164);
            __swift_storeEnumTagSinglePayload((uint64_t)v1186, 0, 1, (uint64_t)v1164);
          }
          uint64_t v310 = v1188;
          uint64_t v1081 = v1068[14];
          uint64_t v1082 = (char *)v1066 + v1081;
          uint64_t v1083 = (char *)v1067 + v1081;
          *(void *)uint64_t v1082 = *(void *)v1083;
          v1082[8] = v1083[8];
          *(_OWORD *)((char *)v1066 + v1068[15]) = *(_OWORD *)((char *)v1067 + v1068[15]);
          *(_OWORD *)((char *)v1066 + v1068[16]) = *(_OWORD *)((char *)v1067 + v1068[16]);
          *(_OWORD *)((char *)v1066 + v1068[17]) = *(_OWORD *)((char *)v1067 + v1068[17]);
          *(_OWORD *)((char *)v1066 + v1068[18]) = *(_OWORD *)((char *)v1067 + v1068[18]);
          *(_OWORD *)((char *)v1066 + v1068[19]) = *(_OWORD *)((char *)v1067 + v1068[19]);
          __swift_storeEnumTagSinglePayload((uint64_t)v1066, 0, 1, (uint64_t)v1068);
        }
        uint64_t v9 = v1194;
        memcpy((char *)v7 + v310[23], (char *)v8 + v310[23], 0x90uLL);
        goto LABEL_524;
      case 2u:
        uint64_t v35 = v9;
        long long v36 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v36;
        void v7[2] = v8[2];
        uint64_t v37 = (int *)type metadata accessor for CalendarEvent(0);
        uint64_t v38 = v37[7];
        uint64_t v39 = (char *)v7 + v38;
        uint64_t v40 = (char *)v8 + v38;
        uint64_t v41 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v40, 1, v41))
        {
          uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v39, v40, *(void *)(*(void *)(v42 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32))(v39, v40, v41);
          __swift_storeEnumTagSinglePayload((uint64_t)v39, 0, 1, v41);
        }
        uint64_t v247 = v37[8];
        uint64_t v248 = (char *)v7 + v247;
        uint64_t v249 = (char *)v8 + v247;
        if (__swift_getEnumTagSinglePayload((uint64_t)v8 + v247, 1, v41))
        {
          uint64_t v250 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v248, v249, *(void *)(*(void *)(v250 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32))(v248, v249, v41);
          __swift_storeEnumTagSinglePayload((uint64_t)v248, 0, 1, v41);
        }
        uint64_t v9 = v35;
        *(_OWORD *)((char *)v7 + v37[9]) = *(_OWORD *)((char *)v8 + v37[9]);
        *(void *)((char *)v7 + v37[10]) = *(void *)((char *)v8 + v37[10]);
        *(void *)((char *)v7 + v37[11]) = *(void *)((char *)v8 + v37[11]);
        *(_OWORD *)((char *)v7 + v37[12]) = *(_OWORD *)((char *)v8 + v37[12]);
        uint64_t v311 = v37[13];
        uint64_t v312 = (char *)v7 + v311;
        uint64_t v313 = (char *)v8 + v311;
        long long v314 = *((_OWORD *)v313 + 1);
        *(_OWORD *)uint64_t v312 = *(_OWORD *)v313;
        *((_OWORD *)v312 + 1) = v314;
        *((void *)v312 + 4) = *((void *)v313 + 4);
        goto LABEL_524;
      case 3u:
        long long v43 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v43;
        void v7[2] = v8[2];
        *((void *)v7 + 6) = *((void *)v8 + 6);
        *(_OWORD *)((char *)v7 + 56) = *(_OWORD *)((char *)v8 + 56);
        *(_OWORD *)((char *)v7 + 72) = *(_OWORD *)((char *)v8 + 72);
        uint64_t v44 = (int *)type metadata accessor for Photo(0);
        uint64_t v45 = v44[11];
        uint64_t v46 = (char *)v7 + v45;
        uint64_t v47 = (char *)v8 + v45;
        uint64_t v48 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v47, 1, v48))
        {
          uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v46, v47, *(void *)(*(void *)(v49 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 32))(v46, v47, v48);
          __swift_storeEnumTagSinglePayload((uint64_t)v46, 0, 1, v48);
        }
        *(void *)((char *)v7 + v44[12]) = *(void *)((char *)v8 + v44[12]);
        *(void *)((char *)v7 + v44[13]) = *(void *)((char *)v8 + v44[13]);
        *(void *)((char *)v7 + v44[14]) = *(void *)((char *)v8 + v44[14]);
        *(void *)((char *)v7 + v44[15]) = *(void *)((char *)v8 + v44[15]);
        *(_OWORD *)((char *)v7 + v44[16]) = *(_OWORD *)((char *)v8 + v44[16]);
        uint64_t v1189 = v44;
        uint64_t v251 = v44[17];
        uint64_t v252 = (_OWORD *)((char *)v7 + v251);
        uint64_t v253 = (_OWORD *)((char *)v8 + v251);
        uint64_t v254 = type metadata accessor for PartialExtractedAttributes(0);
        uint64_t v1162 = v48;
        uint64_t v1193 = v9;
        if (__swift_getEnumTagSinglePayload((uint64_t)v253, 1, v254))
        {
          uint64_t v255 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
          memcpy(v252, v253, *(void *)(*(void *)(v255 - 8) + 64));
          uint64_t v256 = v1189;
        }
        else
        {
          *uint64_t v252 = *v253;
          uint64_t v1165 = (char *)v253;
          uint64_t v1168 = (int *)v254;
          uint64_t v315 = *(int *)(v254 + 20);
          uint64_t v316 = (_OWORD *)((char *)v252 + v315);
          uint64_t v317 = (_OWORD *)((char *)v253 + v315);
          uint64_t v1134 = (int *)type metadata accessor for RentalCarReservation(0);
          uint64_t v1150 = v252;
          if (__swift_getEnumTagSinglePayload((uint64_t)v317, 1, (uint64_t)v1134))
          {
            uint64_t v318 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
            memcpy(v316, v317, *(void *)(*(void *)(v318 - 8) + 64));
          }
          else
          {
            long long v372 = v317[1];
            *uint64_t v316 = *v317;
            v316[1] = v372;
            long long v373 = v317[3];
            v316[2] = v317[2];
            v316[3] = v373;
            long long v374 = v317[5];
            v316[4] = v317[4];
            v316[5] = v374;
            long long v375 = v317[7];
            v316[6] = v317[6];
            v316[7] = v375;
            *((unsigned char *)v316 + 128) = *((unsigned char *)v317 + 128);
            *(_WORD *)((char *)v316 + 129) = *(_WORD *)((char *)v317 + 129);
            *((void *)v316 + 17) = *((void *)v317 + 17);
            long long v376 = v317[10];
            v316[9] = v317[9];
            v316[10] = v376;
            long long v377 = v317[12];
            v316[11] = v317[11];
            v316[12] = v377;
            long long v378 = v317[14];
            v316[13] = v317[13];
            v316[14] = v378;
            v316[15] = v317[15];
            *((void *)v316 + 32) = *((void *)v317 + 32);
            *(_OWORD *)((char *)v316 + 264) = *(_OWORD *)((char *)v317 + 264);
            *(_OWORD *)((char *)v316 + 280) = *(_OWORD *)((char *)v317 + 280);
            *(_OWORD *)((char *)v316 + 296) = *(_OWORD *)((char *)v317 + 296);
            *(_OWORD *)((char *)v316 + 312) = *(_OWORD *)((char *)v317 + 312);
            *(_OWORD *)((char *)v316 + 328) = *(_OWORD *)((char *)v317 + 328);
            *(_OWORD *)((char *)v316 + 344) = *(_OWORD *)((char *)v317 + 344);
            *(_OWORD *)((char *)v316 + 360) = *(_OWORD *)((char *)v317 + 360);
            *((unsigned char *)v316 + 384) = *((unsigned char *)v317 + 384);
            *((void *)v316 + 47) = *((void *)v317 + 47);
            *(_OWORD *)((char *)v316 + 392) = *(_OWORD *)((char *)v317 + 392);
            *(_OWORD *)((char *)v316 + 408) = *(_OWORD *)((char *)v317 + 408);
            uint64_t v379 = v1134[35];
            v380 = (char *)v316 + v379;
            uint64_t v381 = v48;
            uint64_t v382 = (char *)v317 + v379;
            if (__swift_getEnumTagSinglePayload((uint64_t)v317 + v379, 1, v381))
            {
              uint64_t v383 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v380, v382, *(void *)(*(void *)(v383 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v381 - 8) + 32))(v380, v382, v381);
              __swift_storeEnumTagSinglePayload((uint64_t)v380, 0, 1, v381);
            }
            uint64_t v399 = v1134[36];
            uint64_t v400 = (char *)v316 + v399;
            uint64_t v401 = (char *)v317 + v399;
            if (__swift_getEnumTagSinglePayload((uint64_t)v317 + v399, 1, v381))
            {
              uint64_t v402 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v400, v401, *(void *)(*(void *)(v402 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v381 - 8) + 32))(v400, v401, v381);
              __swift_storeEnumTagSinglePayload((uint64_t)v400, 0, 1, v381);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v316, 0, 1, (uint64_t)v1134);
            uint64_t v252 = v1150;
          }
          uint64_t v422 = v1168[6];
          uint64_t v423 = (_OWORD *)((char *)v252 + v422);
          uint64_t v424 = &v1165[v422];
          uint64_t v425 = type metadata accessor for TicketedTransportation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v424, 1, v425))
          {
            uint64_t v426 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
            memcpy(v423, v424, *(void *)(*(void *)(v426 - 8) + 64));
            uint64_t v256 = v1189;
          }
          else
          {
            long long v427 = *((_OWORD *)v424 + 1);
            _OWORD *v423 = *(_OWORD *)v424;
            v423[1] = v427;
            long long v428 = *((_OWORD *)v424 + 3);
            v423[2] = *((_OWORD *)v424 + 2);
            v423[3] = v428;
            long long v429 = *((_OWORD *)v424 + 5);
            v423[4] = *((_OWORD *)v424 + 4);
            v423[5] = v429;
            long long v430 = *((_OWORD *)v424 + 7);
            v423[6] = *((_OWORD *)v424 + 6);
            v423[7] = v430;
            *((unsigned char *)v423 + 128) = v424[128];
            *(_WORD *)((char *)v423 + 129) = *(_WORD *)(v424 + 129);
            *((void *)v423 + 17) = *((void *)v424 + 17);
            long long v431 = *((_OWORD *)v424 + 10);
            v423[9] = *((_OWORD *)v424 + 9);
            v423[10] = v431;
            long long v432 = *((_OWORD *)v424 + 12);
            v423[11] = *((_OWORD *)v424 + 11);
            v423[12] = v432;
            *((void *)v423 + 26) = *((void *)v424 + 26);
            *(_OWORD *)((char *)v423 + 216) = *(_OWORD *)(v424 + 216);
            *(_OWORD *)((char *)v423 + 232) = *(_OWORD *)(v424 + 232);
            *(_OWORD *)((char *)v423 + 248) = *(_OWORD *)(v424 + 248);
            *(_OWORD *)((char *)v423 + 264) = *(_OWORD *)(v424 + 264);
            *((unsigned char *)v423 + 296) = v424[296];
            uint64_t v433 = *((void *)v424 + 36);
            *((void *)v423 + 35) = *((void *)v424 + 35);
            *((void *)v423 + 36) = v433;
            uint64_t v434 = *(int *)(v425 + 112);
            uint64_t v1136 = (char *)v423 + v434;
            uint64_t v435 = &v424[v434];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v424[v434], 1, v1162))
            {
              uint64_t v436 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1136, v435, *(void *)(*(void *)(v436 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1162 - 8) + 32))(v1136, v435, v1162);
              __swift_storeEnumTagSinglePayload((uint64_t)v1136, 0, 1, v1162);
            }
            uint64_t v455 = *(int *)(v425 + 116);
            uint64_t v456 = (char *)v423 + v455;
            long long v457 = &v424[v455];
            if (__swift_getEnumTagSinglePayload((uint64_t)v457, 1, v1162))
            {
              uint64_t v458 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v456, v457, *(void *)(*(void *)(v458 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1162 - 8) + 32))(v456, v457, v1162);
              __swift_storeEnumTagSinglePayload((uint64_t)v456, 0, 1, v1162);
            }
            uint64_t v256 = v1189;
            __swift_storeEnumTagSinglePayload((uint64_t)v423, 0, 1, v425);
            uint64_t v252 = v1150;
          }
          uint64_t v482 = v1168[7];
          uint64_t v483 = (_OWORD *)((char *)v252 + v482);
          uint64_t v484 = &v1165[v482];
          v485 = (int *)type metadata accessor for TicketedShow(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v484, 1, (uint64_t)v485))
          {
            uint64_t v486 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
            memcpy(v483, v484, *(void *)(*(void *)(v486 - 8) + 64));
          }
          else
          {
            long long v487 = *((_OWORD *)v484 + 1);
            *uint64_t v483 = *(_OWORD *)v484;
            v483[1] = v487;
            long long v488 = *((_OWORD *)v484 + 3);
            v483[2] = *((_OWORD *)v484 + 2);
            v483[3] = v488;
            long long v489 = *((_OWORD *)v484 + 5);
            v483[4] = *((_OWORD *)v484 + 4);
            v483[5] = v489;
            long long v490 = *((_OWORD *)v484 + 7);
            v483[6] = *((_OWORD *)v484 + 6);
            v483[7] = v490;
            *((unsigned char *)v483 + 128) = v484[128];
            *(_WORD *)((char *)v483 + 129) = *(_WORD *)(v484 + 129);
            *((void *)v483 + 17) = *((void *)v484 + 17);
            long long v491 = *((_OWORD *)v484 + 10);
            v483[9] = *((_OWORD *)v484 + 9);
            v483[10] = v491;
            long long v492 = *((_OWORD *)v484 + 12);
            v483[11] = *((_OWORD *)v484 + 11);
            v483[12] = v492;
            long long v493 = *((_OWORD *)v484 + 14);
            v483[13] = *((_OWORD *)v484 + 13);
            v483[14] = v493;
            *((void *)v483 + 30) = *((void *)v484 + 30);
            *(_OWORD *)((char *)v483 + 248) = *(_OWORD *)(v484 + 248);
            *(_OWORD *)((char *)v483 + 264) = *(_OWORD *)(v484 + 264);
            *((unsigned char *)v483 + 296) = v484[296];
            uint64_t v494 = *((void *)v484 + 36);
            *((void *)v483 + 35) = *((void *)v484 + 35);
            *((void *)v483 + 36) = v494;
            v483[19] = *((_OWORD *)v484 + 19);
            uint64_t v495 = v485[29];
            uint64_t v1137 = (char *)v483 + v495;
            uint64_t v496 = &v484[v495];
            uint64_t v497 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v496, 1, v497))
            {
              uint64_t v498 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1137, v496, *(void *)(*(void *)(v498 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v497 - 8) + 32))(v1137, v496, v497);
              __swift_storeEnumTagSinglePayload((uint64_t)v1137, 0, 1, v497);
            }
            *(_OWORD *)((char *)v483 + v485[30]) = *(_OWORD *)&v484[v485[30]];
            uint64_t v519 = v485[31];
            uint64_t v1138 = (char *)v483 + v519;
            uint64_t v520 = &v484[v519];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v484[v519], 1, v1162))
            {
              uint64_t v521 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1138, v520, *(void *)(*(void *)(v521 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1162 - 8) + 32))(v1138, v520, v1162);
              __swift_storeEnumTagSinglePayload((uint64_t)v1138, 0, 1, v1162);
            }
            uint64_t v529 = v485[32];
            uint64_t v530 = (char *)v483 + v529;
            uint64_t v531 = &v484[v529];
            if (__swift_getEnumTagSinglePayload((uint64_t)v531, 1, v1162))
            {
              uint64_t v532 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v530, v531, *(void *)(*(void *)(v532 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1162 - 8) + 32))(v530, v531, v1162);
              __swift_storeEnumTagSinglePayload((uint64_t)v530, 0, 1, v1162);
            }
            uint64_t v256 = v1189;
            __swift_storeEnumTagSinglePayload((uint64_t)v483, 0, 1, (uint64_t)v485);
            uint64_t v252 = v1150;
          }
          uint64_t v553 = v1168[8];
          uint64_t v554 = (_OWORD *)((char *)v252 + v553);
          uint64_t v555 = &v1165[v553];
          uint64_t v556 = type metadata accessor for Appointment(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v555, 1, v556))
          {
            uint64_t v557 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
            memcpy(v554, v555, *(void *)(*(void *)(v557 - 8) + 64));
          }
          else
          {
            long long v558 = *((_OWORD *)v555 + 1);
            *uint64_t v554 = *(_OWORD *)v555;
            v554[1] = v558;
            long long v559 = *((_OWORD *)v555 + 3);
            v554[2] = *((_OWORD *)v555 + 2);
            v554[3] = v559;
            long long v560 = *((_OWORD *)v555 + 5);
            v554[4] = *((_OWORD *)v555 + 4);
            v554[5] = v560;
            long long v561 = *((_OWORD *)v555 + 7);
            v554[6] = *((_OWORD *)v555 + 6);
            v554[7] = v561;
            *((unsigned char *)v554 + 128) = v555[128];
            *(_WORD *)((char *)v554 + 129) = *(_WORD *)(v555 + 129);
            *((void *)v554 + 17) = *((void *)v555 + 17);
            long long v562 = *((_OWORD *)v555 + 10);
            v554[9] = *((_OWORD *)v555 + 9);
            v554[10] = v562;
            long long v563 = *((_OWORD *)v555 + 12);
            v554[11] = *((_OWORD *)v555 + 11);
            v554[12] = v563;
            long long v564 = *((_OWORD *)v555 + 14);
            v554[13] = *((_OWORD *)v555 + 13);
            v554[14] = v564;
            long long v565 = *((_OWORD *)v555 + 16);
            v554[15] = *((_OWORD *)v555 + 15);
            v554[16] = v565;
            *((unsigned char *)v554 + 280) = v555[280];
            *((void *)v554 + 34) = *((void *)v555 + 34);
            v554[18] = *((_OWORD *)v555 + 18);
            uint64_t v566 = *(int *)(v556 + 108);
            uint64_t v1139 = (char *)v554 + v566;
            uint64_t v567 = &v555[v566];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v555[v566], 1, v1162))
            {
              uint64_t v568 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1139, v567, *(void *)(*(void *)(v568 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1162 - 8) + 32))(v1139, v567, v1162);
              __swift_storeEnumTagSinglePayload((uint64_t)v1139, 0, 1, v1162);
            }
            uint64_t v588 = *(int *)(v556 + 112);
            uint64_t v589 = (char *)v554 + v588;
            v590 = &v555[v588];
            if (__swift_getEnumTagSinglePayload((uint64_t)v590, 1, v1162))
            {
              uint64_t v591 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v589, v590, *(void *)(*(void *)(v591 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1162 - 8) + 32))(v589, v590, v1162);
              __swift_storeEnumTagSinglePayload((uint64_t)v589, 0, 1, v1162);
            }
            uint64_t v256 = v1189;
            __swift_storeEnumTagSinglePayload((uint64_t)v554, 0, 1, v556);
            uint64_t v252 = v1150;
          }
          uint64_t v614 = v1168[9];
          uint64_t v615 = (_OWORD *)((char *)v252 + v614);
          uint64_t v616 = &v1165[v614];
          v617 = (int *)type metadata accessor for Party(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v616, 1, (uint64_t)v617))
          {
            uint64_t v618 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
            memcpy(v615, v616, *(void *)(*(void *)(v618 - 8) + 64));
          }
          else
          {
            long long v619 = *((_OWORD *)v616 + 1);
            *uint64_t v615 = *(_OWORD *)v616;
            v615[1] = v619;
            long long v620 = *((_OWORD *)v616 + 3);
            v615[2] = *((_OWORD *)v616 + 2);
            v615[3] = v620;
            long long v621 = *((_OWORD *)v616 + 5);
            v615[4] = *((_OWORD *)v616 + 4);
            v615[5] = v621;
            long long v622 = *((_OWORD *)v616 + 7);
            v615[6] = *((_OWORD *)v616 + 6);
            v615[7] = v622;
            *((unsigned char *)v615 + 128) = v616[128];
            *(_WORD *)((char *)v615 + 129) = *(_WORD *)(v616 + 129);
            *((void *)v615 + 17) = *((void *)v616 + 17);
            long long v623 = *((_OWORD *)v616 + 10);
            v615[9] = *((_OWORD *)v616 + 9);
            v615[10] = v623;
            long long v624 = *((_OWORD *)v616 + 12);
            v615[11] = *((_OWORD *)v616 + 11);
            v615[12] = v624;
            long long v625 = *((_OWORD *)v616 + 14);
            v615[13] = *((_OWORD *)v616 + 13);
            v615[14] = v625;
            v615[15] = *((_OWORD *)v616 + 15);
            uint64_t v626 = v617[24];
            uint64_t v1140 = (char *)v615 + v626;
            uint64_t v627 = &v616[v626];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v616[v626], 1, v1162))
            {
              uint64_t v628 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1140, v627, *(void *)(*(void *)(v628 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1162 - 8) + 32))(v1140, v627, v1162);
              __swift_storeEnumTagSinglePayload((uint64_t)v1140, 0, 1, v1162);
            }
            uint64_t v648 = v617[25];
            uint64_t v1141 = (char *)v615 + v648;
            uint64_t v649 = &v616[v648];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v616[v648], 1, v1162))
            {
              uint64_t v650 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1141, v649, *(void *)(*(void *)(v650 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1162 - 8) + 32))(v1141, v649, v1162);
              __swift_storeEnumTagSinglePayload((uint64_t)v1141, 0, 1, v1162);
            }
            uint64_t v658 = v617[26];
            uint64_t v659 = (char *)v615 + v658;
            v660 = &v616[v658];
            uint64_t v661 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v660, 1, v661))
            {
              uint64_t v662 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v659, v660, *(void *)(*(void *)(v662 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v661 - 8) + 32))(v659, v660, v661);
              __swift_storeEnumTagSinglePayload((uint64_t)v659, 0, 1, v661);
            }
            uint64_t v256 = v1189;
            __swift_storeEnumTagSinglePayload((uint64_t)v615, 0, 1, (uint64_t)v617);
            uint64_t v252 = v1150;
          }
          uint64_t v681 = v1168[10];
          uint64_t v682 = (_OWORD *)((char *)v252 + v681);
          long long v683 = &v1165[v681];
          long long v684 = (int *)type metadata accessor for Trip(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v683, 1, (uint64_t)v684))
          {
            uint64_t v685 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
            memcpy(v682, v683, *(void *)(*(void *)(v685 - 8) + 64));
          }
          else
          {
            long long v686 = *((_OWORD *)v683 + 1);
            *uint64_t v682 = *(_OWORD *)v683;
            v682[1] = v686;
            long long v687 = *((_OWORD *)v683 + 3);
            v682[2] = *((_OWORD *)v683 + 2);
            v682[3] = v687;
            long long v688 = *((_OWORD *)v683 + 5);
            v682[4] = *((_OWORD *)v683 + 4);
            v682[5] = v688;
            long long v689 = *((_OWORD *)v683 + 7);
            v682[6] = *((_OWORD *)v683 + 6);
            v682[7] = v689;
            *((unsigned char *)v682 + 128) = v683[128];
            *(_WORD *)((char *)v682 + 129) = *(_WORD *)(v683 + 129);
            *((void *)v682 + 17) = *((void *)v683 + 17);
            long long v690 = *((_OWORD *)v683 + 10);
            v682[9] = *((_OWORD *)v683 + 9);
            v682[10] = v690;
            long long v691 = *((_OWORD *)v683 + 12);
            v682[11] = *((_OWORD *)v683 + 11);
            v682[12] = v691;
            v682[13] = *((_OWORD *)v683 + 13);
            uint64_t v692 = v684[22];
            uint64_t v1142 = (char *)v682 + v692;
            v693 = &v683[v692];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v683[v692], 1, v1162))
            {
              uint64_t v694 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1142, v693, *(void *)(*(void *)(v694 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1162 - 8) + 32))(v1142, v693, v1162);
              __swift_storeEnumTagSinglePayload((uint64_t)v1142, 0, 1, v1162);
            }
            uint64_t v712 = v684[23];
            uint64_t v1143 = (char *)v682 + v712;
            uint64_t v713 = &v683[v712];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v683[v712], 1, v1162))
            {
              uint64_t v714 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1143, v713, *(void *)(*(void *)(v714 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1162 - 8) + 32))(v1143, v713, v1162);
              __swift_storeEnumTagSinglePayload((uint64_t)v1143, 0, 1, v1162);
            }
            uint64_t v725 = v684[24];
            uint64_t v726 = (char *)v682 + v725;
            uint64_t v727 = &v683[v725];
            *(void *)uint64_t v726 = *(void *)v727;
            v726[8] = v727[8];
            uint64_t v728 = v684[25];
            uint64_t v729 = (char *)v682 + v728;
            uint64_t v730 = &v683[v728];
            uint64_t v731 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v730, 1, v731))
            {
              uint64_t v732 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v729, v730, *(void *)(*(void *)(v732 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v731 - 8) + 32))(v729, v730, v731);
              __swift_storeEnumTagSinglePayload((uint64_t)v729, 0, 1, v731);
            }
            uint64_t v256 = v1189;
            __swift_storeEnumTagSinglePayload((uint64_t)v682, 0, 1, (uint64_t)v684);
            uint64_t v252 = v1150;
          }
          uint64_t v752 = v1168[11];
          uint64_t v753 = (_OWORD *)((char *)v252 + v752);
          uint64_t v754 = &v1165[v752];
          uint64_t v755 = (int *)type metadata accessor for FlightReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v754, 1, (uint64_t)v755))
          {
            uint64_t v756 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
            memcpy(v753, v754, *(void *)(*(void *)(v756 - 8) + 64));
          }
          else
          {
            long long v757 = *((_OWORD *)v754 + 1);
            *uint64_t v753 = *(_OWORD *)v754;
            v753[1] = v757;
            long long v758 = *((_OWORD *)v754 + 3);
            v753[2] = *((_OWORD *)v754 + 2);
            v753[3] = v758;
            long long v759 = *((_OWORD *)v754 + 5);
            v753[4] = *((_OWORD *)v754 + 4);
            v753[5] = v759;
            *((unsigned char *)v753 + 96) = v754[96];
            *(_OWORD *)((char *)v753 + 104) = *(_OWORD *)(v754 + 104);
            uint64_t v760 = v755[13];
            uint64_t v1144 = (char *)v753 + v760;
            uint64_t v761 = &v754[v760];
            uint64_t v762 = type metadata accessor for URL();
            __srcj = v761;
            uint64_t v763 = (uint64_t)v761;
            uint64_t v764 = v762;
            if (__swift_getEnumTagSinglePayload(v763, 1, v762))
            {
              uint64_t v765 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1144, __srcj, *(void *)(*(void *)(v765 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, void *, uint64_t))(*(void *)(v764 - 8) + 32))(v1144, __srcj, v764);
              __swift_storeEnumTagSinglePayload((uint64_t)v1144, 0, 1, v764);
            }
            uint64_t v780 = v755[14];
            uint64_t v1145 = (char *)v753 + v780;
            __srcl = &v754[v780];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v754[v780], 1, v764))
            {
              uint64_t v781 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1145, __srcl, *(void *)(*(void *)(v781 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v764 - 8) + 32))(v1145, __srcl, v764);
              __swift_storeEnumTagSinglePayload((uint64_t)v1145, 0, 1, v764);
            }
            *(_OWORD *)((char *)v753 + v755[15]) = *(_OWORD *)&v754[v755[15]];
            *(_OWORD *)((char *)v753 + v755[16]) = *(_OWORD *)&v754[v755[16]];
            *(_OWORD *)((char *)v753 + v755[17]) = *(_OWORD *)&v754[v755[17]];
            uint64_t v791 = v755[18];
            __dstp = &v754[v791];
            __srcs = (char *)v753 + v791;
            uint64_t v792 = type metadata accessor for DateComponents();
            uint64_t v793 = *(void (**)(char *, char *, uint64_t))(*(void *)(v792 - 8) + 32);
            v793(__srcs, __dstp, v792);
            v793((char *)v753 + v755[19], &v754[v755[19]], v792);
            *(_OWORD *)((char *)v753 + v755[20]) = *(_OWORD *)&v754[v755[20]];
            *(_OWORD *)((char *)v753 + v755[21]) = *(_OWORD *)&v754[v755[21]];
            *(_OWORD *)((char *)v753 + v755[22]) = *(_OWORD *)&v754[v755[22]];
            *(_OWORD *)((char *)v753 + v755[23]) = *(_OWORD *)&v754[v755[23]];
            *(_OWORD *)((char *)v753 + v755[24]) = *(_OWORD *)&v754[v755[24]];
            *(_OWORD *)((char *)v753 + v755[25]) = *(_OWORD *)&v754[v755[25]];
            *(_OWORD *)((char *)v753 + v755[26]) = *(_OWORD *)&v754[v755[26]];
            *(_OWORD *)((char *)v753 + v755[27]) = *(_OWORD *)&v754[v755[27]];
            *(_OWORD *)((char *)v753 + v755[28]) = *(_OWORD *)&v754[v755[28]];
            *(_OWORD *)((char *)v753 + v755[29]) = *(_OWORD *)&v754[v755[29]];
            *(_OWORD *)((char *)v753 + v755[30]) = *(_OWORD *)&v754[v755[30]];
            *(_OWORD *)((char *)v753 + v755[31]) = *(_OWORD *)&v754[v755[31]];
            *(_OWORD *)((char *)v753 + v755[32]) = *(_OWORD *)&v754[v755[32]];
            *(void *)((char *)v753 + v755[33]) = *(void *)&v754[v755[33]];
            *(void *)((char *)v753 + v755[34]) = *(void *)&v754[v755[34]];
            *(_OWORD *)((char *)v753 + v755[35]) = *(_OWORD *)&v754[v755[35]];
            *(_OWORD *)((char *)v753 + v755[36]) = *(_OWORD *)&v754[v755[36]];
            *(_OWORD *)((char *)v753 + v755[37]) = *(_OWORD *)&v754[v755[37]];
            uint64_t v794 = v755[38];
            uint64_t v1146 = (char *)v753 + v794;
            uint64_t v795 = &v754[v794];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v754[v794], 1, v1162))
            {
              uint64_t v796 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1146, v795, *(void *)(*(void *)(v796 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1162 - 8) + 32))(v1146, v795, v1162);
              __swift_storeEnumTagSinglePayload((uint64_t)v1146, 0, 1, v1162);
            }
            uint64_t v256 = v1189;
            *(_OWORD *)((char *)v753 + v755[39]) = *(_OWORD *)&v754[v755[39]];
            *(_OWORD *)((char *)v753 + v755[40]) = *(_OWORD *)&v754[v755[40]];
            uint64_t v821 = v755[41];
            uint64_t v822 = (char *)v753 + v821;
            uint64_t v823 = &v754[v821];
            *(void *)uint64_t v822 = *(void *)v823;
            v822[8] = v823[8];
            *(_OWORD *)((char *)v753 + v755[42]) = *(_OWORD *)&v754[v755[42]];
            uint64_t v824 = v755[43];
            uint64_t v825 = (char *)v753 + v824;
            uint64_t v826 = &v754[v824];
            *(_OWORD *)uint64_t v825 = *(_OWORD *)v826;
            *(void *)(v825 + 13) = *(void *)(v826 + 13);
            *(_OWORD *)((char *)v753 + v755[44]) = *(_OWORD *)&v754[v755[44]];
            *(_OWORD *)((char *)v753 + v755[45]) = *(_OWORD *)&v754[v755[45]];
            *(_OWORD *)((char *)v753 + v755[46]) = *(_OWORD *)&v754[v755[46]];
            *(_OWORD *)((char *)v753 + v755[47]) = *(_OWORD *)&v754[v755[47]];
            __swift_storeEnumTagSinglePayload((uint64_t)v753, 0, 1, (uint64_t)v755);
            uint64_t v252 = v1150;
          }
          uint64_t v827 = v1168[12];
          uint64_t v828 = (_OWORD *)((char *)v252 + v827);
          uint64_t v829 = &v1165[v827];
          uint64_t v830 = (int *)type metadata accessor for HotelReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v829, 1, (uint64_t)v830))
          {
            uint64_t v831 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
            memcpy(v828, v829, *(void *)(*(void *)(v831 - 8) + 64));
          }
          else
          {
            long long v832 = *((_OWORD *)v829 + 1);
            _OWORD *v828 = *(_OWORD *)v829;
            v828[1] = v832;
            long long v833 = *((_OWORD *)v829 + 3);
            v828[2] = *((_OWORD *)v829 + 2);
            v828[3] = v833;
            long long v834 = *((_OWORD *)v829 + 5);
            v828[4] = *((_OWORD *)v829 + 4);
            v828[5] = v834;
            *((unsigned char *)v828 + 96) = v829[96];
            *(_OWORD *)((char *)v828 + 104) = *(_OWORD *)(v829 + 104);
            *(_OWORD *)((char *)v828 + 120) = *(_OWORD *)(v829 + 120);
            uint64_t v835 = v830[14];
            uint64_t v1147 = (char *)v828 + v835;
            uint64_t v836 = &v829[v835];
            uint64_t v837 = type metadata accessor for DateComponents();
            __srco = v836;
            uint64_t v838 = (uint64_t)v836;
            uint64_t v839 = v837;
            if (__swift_getEnumTagSinglePayload(v838, 1, v837))
            {
              uint64_t v840 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1147, __srco, *(void *)(*(void *)(v840 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, void *, uint64_t))(*(void *)(v839 - 8) + 32))(v1147, __srco, v839);
              __swift_storeEnumTagSinglePayload((uint64_t)v1147, 0, 1, v839);
            }
            uint64_t v864 = v830[15];
            uint64_t v1148 = (char *)v828 + v864;
            __srcq = &v829[v864];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v829[v864], 1, v839))
            {
              uint64_t v865 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1148, __srcq, *(void *)(*(void *)(v865 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v839 - 8) + 32))(v1148, __srcq, v839);
              __swift_storeEnumTagSinglePayload((uint64_t)v1148, 0, 1, v839);
            }
            *(_OWORD *)((char *)v828 + v830[16]) = *(_OWORD *)&v829[v830[16]];
            *(_OWORD *)((char *)v828 + v830[17]) = *(_OWORD *)&v829[v830[17]];
            *(_OWORD *)((char *)v828 + v830[18]) = *(_OWORD *)&v829[v830[18]];
            *(_OWORD *)((char *)v828 + v830[19]) = *(_OWORD *)&v829[v830[19]];
            *(_OWORD *)((char *)v828 + v830[20]) = *(_OWORD *)&v829[v830[20]];
            *(void *)((char *)v828 + v830[21]) = *(void *)&v829[v830[21]];
            *(void *)((char *)v828 + v830[22]) = *(void *)&v829[v830[22]];
            uint64_t v890 = v830[23];
            uint64_t v891 = (char *)v828 + v890;
            uint64_t v892 = &v829[v890];
            v891[8] = v892[8];
            *(void *)uint64_t v891 = *(void *)v892;
            uint64_t v893 = v830[24];
            uint64_t v894 = (char *)v828 + v893;
            uint64_t v895 = &v829[v893];
            v894[8] = v895[8];
            *(void *)uint64_t v894 = *(void *)v895;
            *(_OWORD *)((char *)v828 + v830[25]) = *(_OWORD *)&v829[v830[25]];
            *(_OWORD *)((char *)v828 + v830[26]) = *(_OWORD *)&v829[v830[26]];
            *(_OWORD *)((char *)v828 + v830[27]) = *(_OWORD *)&v829[v830[27]];
            *(_OWORD *)((char *)v828 + v830[28]) = *(_OWORD *)&v829[v830[28]];
            uint64_t v896 = v830[29];
            uint64_t v897 = (char *)v828 + v896;
            uint64_t v898 = &v829[v896];
            *(void *)uint64_t v897 = *(void *)v898;
            v897[8] = v898[8];
            __swift_storeEnumTagSinglePayload((uint64_t)v828, 0, 1, (uint64_t)v830);
            uint64_t v252 = v1150;
          }
          uint64_t v899 = v1168[13];
          uint64_t v900 = (_OWORD *)((char *)v252 + v899);
          uint64_t v901 = &v1165[v899];
          uint64_t v902 = (int *)type metadata accessor for RestaurantReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v901, 1, (uint64_t)v902))
          {
            uint64_t v903 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
            memcpy(v900, v901, *(void *)(*(void *)(v903 - 8) + 64));
          }
          else
          {
            long long v904 = *((_OWORD *)v901 + 1);
            *uint64_t v900 = *(_OWORD *)v901;
            v900[1] = v904;
            long long v905 = *((_OWORD *)v901 + 3);
            v900[2] = *((_OWORD *)v901 + 2);
            v900[3] = v905;
            long long v906 = *((_OWORD *)v901 + 5);
            v900[4] = *((_OWORD *)v901 + 4);
            v900[5] = v906;
            *((unsigned char *)v900 + 96) = v901[96];
            *(_OWORD *)((char *)v900 + 104) = *(_OWORD *)(v901 + 104);
            *(_OWORD *)((char *)v900 + 120) = *(_OWORD *)(v901 + 120);
            uint64_t v907 = v902[14];
            uint64_t v1166 = (char *)v900 + v907;
            uint64_t v908 = &v901[v907];
            uint64_t v909 = type metadata accessor for DateComponents();
            if (__swift_getEnumTagSinglePayload((uint64_t)v908, 1, v909))
            {
              uint64_t v910 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1166, v908, *(void *)(*(void *)(v910 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v909 - 8) + 32))(v1166, v908, v909);
              __swift_storeEnumTagSinglePayload((uint64_t)v1166, 0, 1, v909);
            }
            uint64_t v256 = v1189;
            *(_OWORD *)((char *)v900 + v902[15]) = *(_OWORD *)&v901[v902[15]];
            *(_OWORD *)((char *)v900 + v902[16]) = *(_OWORD *)&v901[v902[16]];
            *(_OWORD *)((char *)v900 + v902[17]) = *(_OWORD *)&v901[v902[17]];
            *(_OWORD *)((char *)v900 + v902[18]) = *(_OWORD *)&v901[v902[18]];
            *(_OWORD *)((char *)v900 + v902[19]) = *(_OWORD *)&v901[v902[19]];
            *(void *)((char *)v900 + v902[20]) = *(void *)&v901[v902[20]];
            *(_OWORD *)((char *)v900 + v902[21]) = *(_OWORD *)&v901[v902[21]];
            *(_OWORD *)((char *)v900 + v902[22]) = *(_OWORD *)&v901[v902[22]];
            *(_OWORD *)((char *)v900 + v902[23]) = *(_OWORD *)&v901[v902[23]];
            __swift_storeEnumTagSinglePayload((uint64_t)v900, 0, 1, (uint64_t)v902);
            uint64_t v252 = v1150;
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v252, 0, 1, (uint64_t)v1168);
        }
        uint64_t v983 = v256[18];
        uint64_t v984 = (_OWORD *)((char *)v7 + v983);
        uint64_t v985 = (_OWORD *)((char *)v8 + v983);
        uint64_t v986 = (int *)type metadata accessor for PreExtractedCard(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v985, 1, (uint64_t)v986))
        {
          uint64_t v987 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
          memcpy(v984, v985, *(void *)(*(void *)(v987 - 8) + 64));
        }
        else
        {
          long long v988 = v985[1];
          _OWORD *v984 = *v985;
          v984[1] = v988;
          long long v989 = v985[3];
          v984[2] = v985[2];
          v984[3] = v989;
          long long v990 = v985[5];
          v984[4] = v985[4];
          v984[5] = v990;
          uint64_t v991 = v986[10];
          uint64_t v1171 = (char *)v984 + v991;
          uint64_t v992 = (char *)v985 + v991;
          if (__swift_getEnumTagSinglePayload((uint64_t)v985 + v991, 1, v1162))
          {
            uint64_t v993 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1171, v992, *(void *)(*(void *)(v993 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1162 - 8) + 32))(v1171, v992, v1162);
            __swift_storeEnumTagSinglePayload((uint64_t)v1171, 0, 1, v1162);
          }
          uint64_t v994 = v986[11];
          uint64_t v1172 = (char *)v984 + v994;
          uint64_t v995 = (char *)v985 + v994;
          if (__swift_getEnumTagSinglePayload((uint64_t)v985 + v994, 1, v1162))
          {
            uint64_t v996 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1172, v995, *(void *)(*(void *)(v996 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1162 - 8) + 32))(v1172, v995, v1162);
            __swift_storeEnumTagSinglePayload((uint64_t)v1172, 0, 1, v1162);
          }
          *(_OWORD *)((char *)v984 + v986[12]) = *(_OWORD *)((char *)v985 + v986[12]);
          *(_OWORD *)((char *)v984 + v986[13]) = *(_OWORD *)((char *)v985 + v986[13]);
          *(_OWORD *)((char *)v984 + v986[14]) = *(_OWORD *)((char *)v985 + v986[14]);
          uint64_t v997 = v986[15];
          uint64_t v1173 = (char *)v984 + v997;
          uint64_t v998 = (char *)v985 + v997;
          if (__swift_getEnumTagSinglePayload((uint64_t)v985 + v997, 1, v1162))
          {
            uint64_t v999 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1173, v998, *(void *)(*(void *)(v999 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1162 - 8) + 32))(v1173, v998, v1162);
            __swift_storeEnumTagSinglePayload((uint64_t)v1173, 0, 1, v1162);
          }
          uint64_t v256 = v1189;
          *(_OWORD *)((char *)v984 + v986[16]) = *(_OWORD *)((char *)v985 + v986[16]);
          *(_OWORD *)((char *)v984 + v986[17]) = *(_OWORD *)((char *)v985 + v986[17]);
          *(_OWORD *)((char *)v984 + v986[18]) = *(_OWORD *)((char *)v985 + v986[18]);
          *(_OWORD *)((char *)v984 + v986[19]) = *(_OWORD *)((char *)v985 + v986[19]);
          *(_OWORD *)((char *)v984 + v986[20]) = *(_OWORD *)((char *)v985 + v986[20]);
          *(_OWORD *)((char *)v984 + v986[21]) = *(_OWORD *)((char *)v985 + v986[21]);
          *(_OWORD *)((char *)v984 + v986[22]) = *(_OWORD *)((char *)v985 + v986[22]);
          *(_OWORD *)((char *)v984 + v986[23]) = *(_OWORD *)((char *)v985 + v986[23]);
          __swift_storeEnumTagSinglePayload((uint64_t)v984, 0, 1, (uint64_t)v986);
        }
        uint64_t v1000 = v256[19];
        uint64_t v1001 = (_OWORD *)((char *)v7 + v1000);
        uint64_t v1002 = (_OWORD *)((char *)v8 + v1000);
        uint64_t v1003 = (int *)type metadata accessor for PreExtractedContact(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1002, 1, (uint64_t)v1003))
        {
          uint64_t v1004 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
          memcpy(v1001, v1002, *(void *)(*(void *)(v1004 - 8) + 64));
        }
        else
        {
          long long v1005 = v1002[1];
          _OWORD *v1001 = *v1002;
          v1001[1] = v1005;
          long long v1006 = v1002[3];
          v1001[2] = v1002[2];
          v1001[3] = v1006;
          long long v1007 = v1002[5];
          v1001[4] = v1002[4];
          v1001[5] = v1007;
          uint64_t v1008 = v1003[11];
          uint64_t v1174 = (char *)v1001 + v1008;
          uint64_t v1009 = (char *)v1002 + v1008;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1002 + v1008, 1, v1162))
          {
            uint64_t v1010 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1174, v1009, *(void *)(*(void *)(v1010 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1162 - 8) + 32))(v1174, v1009, v1162);
            __swift_storeEnumTagSinglePayload((uint64_t)v1174, 0, 1, v1162);
          }
          *(_OWORD *)((char *)v1001 + v1003[12]) = *(_OWORD *)((char *)v1002 + v1003[12]);
          *(void *)((char *)v1001 + v1003[13]) = *(void *)((char *)v1002 + v1003[13]);
          uint64_t v1011 = v1003[14];
          uint64_t v1175 = (char *)v1001 + v1011;
          uint64_t v1012 = (char *)v1002 + v1011;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1002 + v1011, 1, v1162))
          {
            uint64_t v1013 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1175, v1012, *(void *)(*(void *)(v1013 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1162 - 8) + 32))(v1175, v1012, v1162);
            __swift_storeEnumTagSinglePayload((uint64_t)v1175, 0, 1, v1162);
          }
          uint64_t v256 = v1189;
          *(void *)((char *)v1001 + v1003[15]) = *(void *)((char *)v1002 + v1003[15]);
          *(void *)((char *)v1001 + v1003[16]) = *(void *)((char *)v1002 + v1003[16]);
          *(_OWORD *)((char *)v1001 + v1003[17]) = *(_OWORD *)((char *)v1002 + v1003[17]);
          *(void *)((char *)v1001 + v1003[18]) = *(void *)((char *)v1002 + v1003[18]);
          *(void *)((char *)v1001 + v1003[19]) = *(void *)((char *)v1002 + v1003[19]);
          __swift_storeEnumTagSinglePayload((uint64_t)v1001, 0, 1, (uint64_t)v1003);
        }
        uint64_t v1014 = v256[20];
        uint64_t v1015 = (_OWORD *)((char *)v7 + v1014);
        uint64_t v1016 = (_OWORD *)((char *)v8 + v1014);
        long long v1017 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1016, 1, (uint64_t)v1017))
        {
          uint64_t v1018 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
          memcpy(v1015, v1016, *(void *)(*(void *)(v1018 - 8) + 64));
        }
        else
        {
          long long v1019 = v1016[1];
          *uint64_t v1015 = *v1016;
          v1015[1] = v1019;
          long long v1020 = v1016[3];
          v1015[2] = v1016[2];
          v1015[3] = v1020;
          uint64_t v1021 = v1017[8];
          uint64_t v1176 = (char *)v1015 + v1021;
          uint64_t v1022 = (char *)v1016 + v1021;
          uint64_t v1023 = type metadata accessor for URL();
          if (__swift_getEnumTagSinglePayload((uint64_t)v1022, 1, v1023))
          {
            uint64_t v1024 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v1176, v1022, *(void *)(*(void *)(v1024 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1023 - 8) + 32))(v1176, v1022, v1023);
            __swift_storeEnumTagSinglePayload((uint64_t)v1176, 0, 1, v1023);
          }
          *(_OWORD *)((char *)v1015 + v1017[9]) = *(_OWORD *)((char *)v1016 + v1017[9]);
          *(_OWORD *)((char *)v1015 + v1017[10]) = *(_OWORD *)((char *)v1016 + v1017[10]);
          *(_OWORD *)((char *)v1015 + v1017[11]) = *(_OWORD *)((char *)v1016 + v1017[11]);
          uint64_t v1025 = v1017[12];
          uint64_t v1177 = (char *)v1015 + v1025;
          uint64_t v1026 = (char *)v1016 + v1025;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1016 + v1025, 1, v1162))
          {
            uint64_t v1027 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1177, v1026, *(void *)(*(void *)(v1027 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1162 - 8) + 32))(v1177, v1026, v1162);
            __swift_storeEnumTagSinglePayload((uint64_t)v1177, 0, 1, v1162);
          }
          uint64_t v1028 = v1017[13];
          uint64_t v1178 = (char *)v1015 + v1028;
          uint64_t v1029 = (char *)v1016 + v1028;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1016 + v1028, 1, v1162))
          {
            uint64_t v1030 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1178, v1029, *(void *)(*(void *)(v1030 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1162 - 8) + 32))(v1178, v1029, v1162);
            __swift_storeEnumTagSinglePayload((uint64_t)v1178, 0, 1, v1162);
          }
          uint64_t v256 = v1189;
          uint64_t v1031 = v1017[14];
          uint64_t v1032 = (char *)v1015 + v1031;
          uint64_t v1033 = (char *)v1016 + v1031;
          *(void *)uint64_t v1032 = *(void *)v1033;
          v1032[8] = v1033[8];
          *(_OWORD *)((char *)v1015 + v1017[15]) = *(_OWORD *)((char *)v1016 + v1017[15]);
          *(_OWORD *)((char *)v1015 + v1017[16]) = *(_OWORD *)((char *)v1016 + v1017[16]);
          *(_OWORD *)((char *)v1015 + v1017[17]) = *(_OWORD *)((char *)v1016 + v1017[17]);
          *(_OWORD *)((char *)v1015 + v1017[18]) = *(_OWORD *)((char *)v1016 + v1017[18]);
          *(_OWORD *)((char *)v1015 + v1017[19]) = *(_OWORD *)((char *)v1016 + v1017[19]);
          __swift_storeEnumTagSinglePayload((uint64_t)v1015, 0, 1, (uint64_t)v1017);
        }
        uint64_t v9 = v1193;
        memcpy((char *)v7 + v256[21], (char *)v8 + v256[21], 0x90uLL);
        goto LABEL_524;
      case 4u:
        uint64_t v50 = v9;
        long long v51 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v51;
        long long v52 = v8[3];
        void v7[2] = v8[2];
        v7[3] = v52;
        uint64_t v53 = type metadata accessor for NoteDocument(0);
        uint64_t v54 = *(int *)(v53 + 32);
        uint64_t v55 = (char *)v7 + v54;
        uint64_t v56 = (char *)v8 + v54;
        uint64_t v57 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v56, 1, v57))
        {
          uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v55, v56, *(void *)(*(void *)(v58 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v55, v56, v57);
          __swift_storeEnumTagSinglePayload((uint64_t)v55, 0, 1, v57);
        }
        uint64_t v9 = v50;
        uint64_t v257 = *(int *)(v53 + 36);
        uint64_t v258 = (char *)v7 + v257;
        uint64_t v259 = (char *)v8 + v257;
        if (__swift_getEnumTagSinglePayload((uint64_t)v259, 1, v57)) {
          goto LABEL_106;
        }
        goto LABEL_136;
      case 5u:
        uint64_t v59 = v9;
        long long v60 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v60;
        void v7[2] = v8[2];
        uint64_t v61 = (int *)type metadata accessor for Reminder(0);
        uint64_t v62 = v61[7];
        uint64_t v63 = (char *)v7 + v62;
        uint64_t v64 = (char *)v8 + v62;
        uint64_t v65 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v64, 1, v65))
        {
          uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v63, v64, *(void *)(*(void *)(v66 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 32))(v63, v64, v65);
          __swift_storeEnumTagSinglePayload((uint64_t)v63, 0, 1, v65);
        }
        uint64_t v260 = v61[8];
        uint64_t v261 = (char *)v7 + v260;
        uint64_t v262 = (char *)v8 + v260;
        if (__swift_getEnumTagSinglePayload((uint64_t)v8 + v260, 1, v65))
        {
          uint64_t v263 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v261, v262, *(void *)(*(void *)(v263 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 32))(v261, v262, v65);
          __swift_storeEnumTagSinglePayload((uint64_t)v261, 0, 1, v65);
        }
        uint64_t v9 = v59;
        *((unsigned char *)v7 + v61[9]) = *((unsigned char *)v8 + v61[9]);
        *(_OWORD *)((char *)v7 + v61[10]) = *(_OWORD *)((char *)v8 + v61[10]);
        *(_OWORD *)((char *)v7 + v61[11]) = *(_OWORD *)((char *)v8 + v61[11]);
        uint64_t v319 = v61[12];
        uint64_t v84 = (char *)v7 + v319;
        uint64_t v85 = (char *)v8 + v319;
        uint64_t v86 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v85, 1, v86)) {
          goto LABEL_146;
        }
        goto LABEL_128;
      case 6u:
        long long v67 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v67;
        long long v68 = v8[3];
        void v7[2] = v8[2];
        v7[3] = v68;
        uint64_t v69 = (int *)type metadata accessor for PhoneHistory(0);
        uint64_t v70 = v69[10];
        uint64_t v71 = (char *)v7 + v70;
        uint64_t v72 = (char *)v8 + v70;
        uint64_t v73 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v72, 1, v73))
        {
          uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v71, v72, *(void *)(*(void *)(v74 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v73 - 8) + 32))(v71, v72, v73);
          __swift_storeEnumTagSinglePayload((uint64_t)v71, 0, 1, v73);
        }
        *(_OWORD *)((char *)v7 + v69[11]) = *(_OWORD *)((char *)v8 + v69[11]);
        *(_OWORD *)((char *)v7 + v69[12]) = *(_OWORD *)((char *)v8 + v69[12]);
        uint64_t v264 = v69[13];
        uint64_t v84 = (char *)v7 + v264;
        uint64_t v85 = (char *)v8 + v264;
        uint64_t v86 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v85, 1, v86)) {
          goto LABEL_146;
        }
        goto LABEL_128;
      case 7u:
        long long v75 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v75;
        void v7[2] = v8[2];
        uint64_t v76 = type metadata accessor for VoicemailTranscript(0);
        uint64_t v77 = *(int *)(v76 + 28);
        uint64_t v78 = (char *)v7 + v77;
        uint64_t v79 = (char *)v8 + v77;
        uint64_t v80 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v79, 1, v80))
        {
          uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v78, v79, *(void *)(*(void *)(v81 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 32))(v78, v79, v80);
          __swift_storeEnumTagSinglePayload((uint64_t)v78, 0, 1, v80);
        }
        uint64_t v265 = *(int *)(v76 + 32);
        uint64_t v84 = (char *)v7 + v265;
        uint64_t v85 = (char *)v8 + v265;
        uint64_t v86 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v85, 1, v86)) {
          goto LABEL_146;
        }
        goto LABEL_128;
      case 8u:
        long long v82 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v82;
        void v7[2] = v8[2];
        uint64_t v83 = *(int *)(type metadata accessor for JournalEntry(0) + 28);
        uint64_t v84 = (char *)v7 + v83;
        uint64_t v85 = (char *)v8 + v83;
        uint64_t v86 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v85, 1, v86)) {
          goto LABEL_146;
        }
        goto LABEL_128;
      case 9u:
        long long v87 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v87;
        uint64_t v88 = (int *)type metadata accessor for VoiceMemo(0);
        uint64_t v89 = v88[6];
        uint64_t v90 = (char *)v7 + v89;
        uint64_t v91 = (char *)v8 + v89;
        uint64_t v92 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v91, 1, v92))
        {
          uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v90, v91, *(void *)(*(void *)(v93 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v92 - 8) + 32))(v90, v91, v92);
          __swift_storeEnumTagSinglePayload((uint64_t)v90, 0, 1, v92);
        }
        uint64_t v266 = v88[7];
        uint64_t v267 = (char *)v7 + v266;
        uint64_t v268 = (char *)v8 + v266;
        *(void *)uint64_t v267 = *(void *)v268;
        v267[8] = v268[8];
        uint64_t v269 = v88[8];
        uint64_t v84 = (char *)v7 + v269;
        uint64_t v85 = (char *)v8 + v269;
        uint64_t v86 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v85, 1, v86)) {
          goto LABEL_146;
        }
        goto LABEL_128;
      case 0xAu:
        uint64_t v94 = v9;
        long long v95 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v95;
        uint64_t v96 = (int *)type metadata accessor for Safari(0);
        uint64_t v97 = v96[6];
        uint64_t v98 = (char *)v7 + v97;
        uint64_t v99 = (char *)v8 + v97;
        uint64_t v57 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v99, 1, v57))
        {
          uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v98, v99, *(void *)(*(void *)(v100 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v98, v99, v57);
          __swift_storeEnumTagSinglePayload((uint64_t)v98, 0, 1, v57);
        }
        uint64_t v9 = v94;
        *(_OWORD *)((char *)v7 + v96[7]) = *(_OWORD *)((char *)v8 + v96[7]);
        *(_OWORD *)((char *)v7 + v96[8]) = *(_OWORD *)((char *)v8 + v96[8]);
        uint64_t v270 = v96[9];
        uint64_t v258 = (char *)v7 + v270;
        uint64_t v259 = (char *)v8 + v270;
        if (!__swift_getEnumTagSinglePayload((uint64_t)v259, 1, v57)) {
          goto LABEL_136;
        }
        uint64_t v271 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v258, v259, *(void *)(*(void *)(v271 - 8) + 64));
        goto LABEL_524;
      case 0xCu:
        long long v101 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v101;
        void v7[2] = v8[2];
        uint64_t v102 = (int *)type metadata accessor for WalletTransaction(0);
        uint64_t v103 = v102[7];
        uint64_t v104 = (char *)v7 + v103;
        uint64_t v105 = (char *)v8 + v103;
        uint64_t v106 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v105, 1, v106))
        {
          uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v104, v105, *(void *)(*(void *)(v107 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v106 - 8) + 32))(v104, v105, v106);
          __swift_storeEnumTagSinglePayload((uint64_t)v104, 0, 1, v106);
        }
        *(_OWORD *)((char *)v7 + v102[8]) = *(_OWORD *)((char *)v8 + v102[8]);
        *(_OWORD *)((char *)v7 + v102[9]) = *(_OWORD *)((char *)v8 + v102[9]);
        *(_OWORD *)((char *)v7 + v102[10]) = *(_OWORD *)((char *)v8 + v102[10]);
        uint64_t v272 = v102[11];
        uint64_t v273 = (char *)v7 + v272;
        uint64_t v274 = (char *)v8 + v272;
        *(void *)(v273 + 13) = *(void *)(v274 + 13);
        *(_OWORD *)uint64_t v273 = *(_OWORD *)v274;
        *(_OWORD *)((char *)v7 + v102[12]) = *(_OWORD *)((char *)v8 + v102[12]);
        goto LABEL_524;
      case 0xDu:
        long long v108 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v108;
        void v7[2] = v8[2];
        uint64_t v109 = (int *)type metadata accessor for WalletPass(0);
        uint64_t v110 = v109[7];
        uint64_t v111 = (char *)v7 + v110;
        uint64_t v112 = (char *)v8 + v110;
        uint64_t v113 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v112, 1, v113))
        {
          uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v111, v112, *(void *)(*(void *)(v114 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v113 - 8) + 32))(v111, v112, v113);
          __swift_storeEnumTagSinglePayload((uint64_t)v111, 0, 1, v113);
        }
        *(_OWORD *)((char *)v7 + v109[8]) = *(_OWORD *)((char *)v8 + v109[8]);
        *(void *)((char *)v7 + v109[9]) = *(void *)((char *)v8 + v109[9]);
        goto LABEL_524;
      case 0xFu:
        uint64_t v1191 = v9;
        long long v115 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v115;
        long long v116 = v8[3];
        void v7[2] = v8[2];
        v7[3] = v116;
        long long v117 = v8[5];
        v7[4] = v8[4];
        v7[5] = v117;
        *((unsigned char *)v7 + 96) = *((unsigned char *)v8 + 96);
        *(_OWORD *)((char *)v7 + 104) = *(_OWORD *)((char *)v8 + 104);
        uint64_t v118 = (int *)type metadata accessor for FlightReservation(0);
        uint64_t v119 = v118[13];
        uint64_t v120 = (char *)v7 + v119;
        uint64_t v121 = (char *)v8 + v119;
        uint64_t v122 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v121, 1, v122))
        {
          uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v120, v121, *(void *)(*(void *)(v123 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v122 - 8) + 32))(v120, v121, v122);
          __swift_storeEnumTagSinglePayload((uint64_t)v120, 0, 1, v122);
        }
        uint64_t v275 = v118[14];
        uint64_t v276 = (char *)v7 + v275;
        uint64_t v277 = (char *)v8 + v275;
        if (__swift_getEnumTagSinglePayload((uint64_t)v8 + v275, 1, v122))
        {
          uint64_t v278 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v276, v277, *(void *)(*(void *)(v278 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v122 - 8) + 32))(v276, v277, v122);
          __swift_storeEnumTagSinglePayload((uint64_t)v276, 0, 1, v122);
        }
        *(_OWORD *)((char *)v7 + v118[15]) = *(_OWORD *)((char *)v8 + v118[15]);
        *(_OWORD *)((char *)v7 + v118[16]) = *(_OWORD *)((char *)v8 + v118[16]);
        *(_OWORD *)((char *)v7 + v118[17]) = *(_OWORD *)((char *)v8 + v118[17]);
        uint64_t v320 = v118[18];
        uint64_t v321 = (char *)v7 + v320;
        uint64_t v322 = (char *)v8 + v320;
        uint64_t v323 = type metadata accessor for DateComponents();
        uint64_t v324 = *(void (**)(char *, char *, uint64_t))(*(void *)(v323 - 8) + 32);
        v324(v321, v322, v323);
        v324((char *)v7 + v118[19], (char *)v8 + v118[19], v323);
        *(_OWORD *)((char *)v7 + v118[20]) = *(_OWORD *)((char *)v8 + v118[20]);
        *(_OWORD *)((char *)v7 + v118[21]) = *(_OWORD *)((char *)v8 + v118[21]);
        *(_OWORD *)((char *)v7 + v118[22]) = *(_OWORD *)((char *)v8 + v118[22]);
        *(_OWORD *)((char *)v7 + v118[23]) = *(_OWORD *)((char *)v8 + v118[23]);
        *(_OWORD *)((char *)v7 + v118[24]) = *(_OWORD *)((char *)v8 + v118[24]);
        *(_OWORD *)((char *)v7 + v118[25]) = *(_OWORD *)((char *)v8 + v118[25]);
        *(_OWORD *)((char *)v7 + v118[26]) = *(_OWORD *)((char *)v8 + v118[26]);
        *(_OWORD *)((char *)v7 + v118[27]) = *(_OWORD *)((char *)v8 + v118[27]);
        *(_OWORD *)((char *)v7 + v118[28]) = *(_OWORD *)((char *)v8 + v118[28]);
        *(_OWORD *)((char *)v7 + v118[29]) = *(_OWORD *)((char *)v8 + v118[29]);
        *(_OWORD *)((char *)v7 + v118[30]) = *(_OWORD *)((char *)v8 + v118[30]);
        *(_OWORD *)((char *)v7 + v118[31]) = *(_OWORD *)((char *)v8 + v118[31]);
        *(_OWORD *)((char *)v7 + v118[32]) = *(_OWORD *)((char *)v8 + v118[32]);
        *(void *)((char *)v7 + v118[33]) = *(void *)((char *)v8 + v118[33]);
        *(void *)((char *)v7 + v118[34]) = *(void *)((char *)v8 + v118[34]);
        *(_OWORD *)((char *)v7 + v118[35]) = *(_OWORD *)((char *)v8 + v118[35]);
        *(_OWORD *)((char *)v7 + v118[36]) = *(_OWORD *)((char *)v8 + v118[36]);
        *(_OWORD *)((char *)v7 + v118[37]) = *(_OWORD *)((char *)v8 + v118[37]);
        uint64_t v325 = v118[38];
        uint64_t v326 = (char *)v7 + v325;
        uint64_t v327 = (char *)v8 + v325;
        uint64_t v328 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v327, 1, v328))
        {
          uint64_t v329 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v326, v327, *(void *)(*(void *)(v329 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v328 - 8) + 32))(v326, v327, v328);
          __swift_storeEnumTagSinglePayload((uint64_t)v326, 0, 1, v328);
        }
        uint64_t v9 = v1191;
        *(_OWORD *)((char *)v7 + v118[39]) = *(_OWORD *)((char *)v8 + v118[39]);
        *(_OWORD *)((char *)v7 + v118[40]) = *(_OWORD *)((char *)v8 + v118[40]);
        uint64_t v354 = v118[41];
        long long v355 = (char *)v7 + v354;
        uint64_t v356 = (char *)v8 + v354;
        *(void *)long long v355 = *(void *)v356;
        v355[8] = v356[8];
        *(_OWORD *)((char *)v7 + v118[42]) = *(_OWORD *)((char *)v8 + v118[42]);
        uint64_t v357 = v118[43];
        uint64_t v358 = (char *)v7 + v357;
        uint64_t v359 = (char *)v8 + v357;
        *(_OWORD *)uint64_t v358 = *(_OWORD *)v359;
        *(void *)(v358 + 13) = *(void *)(v359 + 13);
        *(_OWORD *)((char *)v7 + v118[44]) = *(_OWORD *)((char *)v8 + v118[44]);
        *(_OWORD *)((char *)v7 + v118[45]) = *(_OWORD *)((char *)v8 + v118[45]);
        *(_OWORD *)((char *)v7 + v118[46]) = *(_OWORD *)((char *)v8 + v118[46]);
        *(_OWORD *)((char *)v7 + v118[47]) = *(_OWORD *)((char *)v8 + v118[47]);
        uint64_t v360 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]));
        *(void *)((char *)v7 + *(int *)(v360 + 48)) = *(void *)((char *)v8 + *(int *)(v360 + 48));
        goto LABEL_524;
      case 0x10u:
        uint64_t v124 = v9;
        long long v125 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v125;
        long long v126 = v8[3];
        void v7[2] = v8[2];
        v7[3] = v126;
        long long v127 = v8[5];
        v7[4] = v8[4];
        v7[5] = v127;
        *((unsigned char *)v7 + 96) = *((unsigned char *)v8 + 96);
        *(_OWORD *)((char *)v7 + 104) = *(_OWORD *)((char *)v8 + 104);
        *(_OWORD *)((char *)v7 + 120) = *(_OWORD *)((char *)v8 + 120);
        uint64_t v128 = (int *)type metadata accessor for HotelReservation(0);
        uint64_t v129 = v128[14];
        uint64_t v130 = (char *)v7 + v129;
        uint64_t v131 = (char *)v8 + v129;
        uint64_t v132 = type metadata accessor for DateComponents();
        if (__swift_getEnumTagSinglePayload((uint64_t)v131, 1, v132))
        {
          uint64_t v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
          memcpy(v130, v131, *(void *)(*(void *)(v133 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v132 - 8) + 32))(v130, v131, v132);
          __swift_storeEnumTagSinglePayload((uint64_t)v130, 0, 1, v132);
        }
        uint64_t v279 = v128[15];
        uint64_t v280 = (char *)v7 + v279;
        uint64_t v281 = (char *)v8 + v279;
        if (__swift_getEnumTagSinglePayload((uint64_t)v8 + v279, 1, v132))
        {
          uint64_t v282 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
          memcpy(v280, v281, *(void *)(*(void *)(v282 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v132 - 8) + 32))(v280, v281, v132);
          __swift_storeEnumTagSinglePayload((uint64_t)v280, 0, 1, v132);
        }
        uint64_t v9 = v124;
        *(_OWORD *)((char *)v7 + v128[16]) = *(_OWORD *)((char *)v8 + v128[16]);
        *(_OWORD *)((char *)v7 + v128[17]) = *(_OWORD *)((char *)v8 + v128[17]);
        *(_OWORD *)((char *)v7 + v128[18]) = *(_OWORD *)((char *)v8 + v128[18]);
        *(_OWORD *)((char *)v7 + v128[19]) = *(_OWORD *)((char *)v8 + v128[19]);
        *(_OWORD *)((char *)v7 + v128[20]) = *(_OWORD *)((char *)v8 + v128[20]);
        *(void *)((char *)v7 + v128[21]) = *(void *)((char *)v8 + v128[21]);
        *(void *)((char *)v7 + v128[22]) = *(void *)((char *)v8 + v128[22]);
        uint64_t v330 = v128[23];
        uint64_t v331 = (char *)v7 + v330;
        uint64_t v332 = (char *)v8 + v330;
        v331[8] = v332[8];
        *(void *)uint64_t v331 = *(void *)v332;
        uint64_t v333 = v128[24];
        uint64_t v334 = (char *)v7 + v333;
        uint64_t v335 = (char *)v8 + v333;
        v334[8] = v335[8];
        *(void *)uint64_t v334 = *(void *)v335;
        *(_OWORD *)((char *)v7 + v128[25]) = *(_OWORD *)((char *)v8 + v128[25]);
        *(_OWORD *)((char *)v7 + v128[26]) = *(_OWORD *)((char *)v8 + v128[26]);
        *(_OWORD *)((char *)v7 + v128[27]) = *(_OWORD *)((char *)v8 + v128[27]);
        *(_OWORD *)((char *)v7 + v128[28]) = *(_OWORD *)((char *)v8 + v128[28]);
        uint64_t v336 = v128[29];
        uint64_t v337 = (char *)v7 + v336;
        uint64_t v338 = (char *)v8 + v336;
        *(void *)uint64_t v337 = *(void *)v338;
        v337[8] = v338[8];
        goto LABEL_524;
      case 0x11u:
        long long v134 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v134;
        long long v135 = v8[3];
        void v7[2] = v8[2];
        v7[3] = v135;
        long long v136 = v8[5];
        v7[4] = v8[4];
        v7[5] = v136;
        *((unsigned char *)v7 + 96) = *((unsigned char *)v8 + 96);
        *(_OWORD *)((char *)v7 + 104) = *(_OWORD *)((char *)v8 + 104);
        *(_OWORD *)((char *)v7 + 120) = *(_OWORD *)((char *)v8 + 120);
        uint64_t v137 = (int *)type metadata accessor for RestaurantReservation(0);
        uint64_t v138 = v137[14];
        id v139 = (char *)v7 + v138;
        uint64_t v140 = (char *)v8 + v138;
        uint64_t v141 = type metadata accessor for DateComponents();
        if (__swift_getEnumTagSinglePayload((uint64_t)v140, 1, v141))
        {
          uint64_t v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
          memcpy(v139, v140, *(void *)(*(void *)(v142 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v141 - 8) + 32))(v139, v140, v141);
          __swift_storeEnumTagSinglePayload((uint64_t)v139, 0, 1, v141);
        }
        *(_OWORD *)((char *)v7 + v137[15]) = *(_OWORD *)((char *)v8 + v137[15]);
        *(_OWORD *)((char *)v7 + v137[16]) = *(_OWORD *)((char *)v8 + v137[16]);
        *(_OWORD *)((char *)v7 + v137[17]) = *(_OWORD *)((char *)v8 + v137[17]);
        *(_OWORD *)((char *)v7 + v137[18]) = *(_OWORD *)((char *)v8 + v137[18]);
        *(_OWORD *)((char *)v7 + v137[19]) = *(_OWORD *)((char *)v8 + v137[19]);
        *(void *)((char *)v7 + v137[20]) = *(void *)((char *)v8 + v137[20]);
        *(_OWORD *)((char *)v7 + v137[21]) = *(_OWORD *)((char *)v8 + v137[21]);
        *(_OWORD *)((char *)v7 + v137[22]) = *(_OWORD *)((char *)v8 + v137[22]);
        *(_OWORD *)((char *)v7 + v137[23]) = *(_OWORD *)((char *)v8 + v137[23]);
        goto LABEL_524;
      case 0x12u:
        uint64_t v143 = v9;
        long long v144 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v144;
        long long v145 = v8[3];
        void v7[2] = v8[2];
        v7[3] = v145;
        long long v146 = v8[5];
        v7[4] = v8[4];
        v7[5] = v146;
        long long v147 = v8[7];
        v7[6] = v8[6];
        v7[7] = v147;
        *((unsigned char *)v7 + 128) = *((unsigned char *)v8 + 128);
        *(_WORD *)((char *)v7 + 129) = *(_WORD *)((char *)v8 + 129);
        *((void *)v7 + 17) = *((void *)v8 + 17);
        long long v148 = v8[10];
        v7[9] = v8[9];
        v7[10] = v148;
        long long v149 = v8[12];
        v7[11] = v8[11];
        v7[12] = v149;
        long long v150 = v8[14];
        v7[13] = v8[13];
        v7[14] = v150;
        v7[15] = v8[15];
        *((void *)v7 + 32) = *((void *)v8 + 32);
        *(_OWORD *)((char *)v7 + 264) = *(_OWORD *)((char *)v8 + 264);
        *(_OWORD *)((char *)v7 + 280) = *(_OWORD *)((char *)v8 + 280);
        *(_OWORD *)((char *)v7 + 296) = *(_OWORD *)((char *)v8 + 296);
        *(_OWORD *)((char *)v7 + 312) = *(_OWORD *)((char *)v8 + 312);
        *(_OWORD *)((char *)v7 + 328) = *(_OWORD *)((char *)v8 + 328);
        *(_OWORD *)((char *)v7 + 344) = *(_OWORD *)((char *)v8 + 344);
        *(_OWORD *)((char *)v7 + 360) = *(_OWORD *)((char *)v8 + 360);
        *((unsigned char *)v7 + 384) = *((unsigned char *)v8 + 384);
        *((void *)v7 + 47) = *((void *)v8 + 47);
        *(_OWORD *)((char *)v7 + 392) = *(_OWORD *)((char *)v8 + 392);
        *(_OWORD *)((char *)v7 + 408) = *(_OWORD *)((char *)v8 + 408);
        uint64_t v151 = type metadata accessor for RentalCarReservation(0);
        uint64_t v152 = *(int *)(v151 + 140);
        uint64_t v153 = (char *)v7 + v152;
        uint64_t v154 = (char *)v8 + v152;
        uint64_t v57 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v154, 1, v57))
        {
          uint64_t v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v153, v154, *(void *)(*(void *)(v155 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v153, v154, v57);
          __swift_storeEnumTagSinglePayload((uint64_t)v153, 0, 1, v57);
        }
        uint64_t v9 = v143;
        uint64_t v283 = *(int *)(v151 + 144);
        uint64_t v258 = (char *)v7 + v283;
        uint64_t v259 = (char *)v8 + v283;
        if (__swift_getEnumTagSinglePayload((uint64_t)v259, 1, v57)) {
          goto LABEL_106;
        }
        goto LABEL_136;
      case 0x13u:
        uint64_t v156 = v9;
        long long v157 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v157;
        long long v158 = v8[3];
        void v7[2] = v8[2];
        v7[3] = v158;
        long long v159 = v8[5];
        v7[4] = v8[4];
        v7[5] = v159;
        long long v160 = v8[7];
        v7[6] = v8[6];
        v7[7] = v160;
        *((unsigned char *)v7 + 128) = *((unsigned char *)v8 + 128);
        *(_WORD *)((char *)v7 + 129) = *(_WORD *)((char *)v8 + 129);
        *((void *)v7 + 17) = *((void *)v8 + 17);
        long long v161 = v8[10];
        v7[9] = v8[9];
        v7[10] = v161;
        long long v162 = v8[12];
        v7[11] = v8[11];
        v7[12] = v162;
        *((void *)v7 + 26) = *((void *)v8 + 26);
        *(_OWORD *)((char *)v7 + 216) = *(_OWORD *)((char *)v8 + 216);
        *(_OWORD *)((char *)v7 + 232) = *(_OWORD *)((char *)v8 + 232);
        *(_OWORD *)((char *)v7 + 248) = *(_OWORD *)((char *)v8 + 248);
        *(_OWORD *)((char *)v7 + 264) = *(_OWORD *)((char *)v8 + 264);
        *((unsigned char *)v7 + 296) = *((unsigned char *)v8 + 296);
        uint64_t v163 = *((void *)v8 + 36);
        *((void *)v7 + 35) = *((void *)v8 + 35);
        *((void *)v7 + 36) = v163;
        uint64_t v164 = type metadata accessor for TicketedTransportation(0);
        uint64_t v165 = *(int *)(v164 + 112);
        uint64_t v166 = (char *)v7 + v165;
        uint64_t v167 = (char *)v8 + v165;
        uint64_t v57 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v167, 1, v57))
        {
          uint64_t v168 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v166, v167, *(void *)(*(void *)(v168 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v166, v167, v57);
          __swift_storeEnumTagSinglePayload((uint64_t)v166, 0, 1, v57);
        }
        uint64_t v9 = v156;
        uint64_t v284 = *(int *)(v164 + 116);
        uint64_t v258 = (char *)v7 + v284;
        uint64_t v259 = (char *)v8 + v284;
        if (__swift_getEnumTagSinglePayload((uint64_t)v259, 1, v57)) {
          goto LABEL_106;
        }
        goto LABEL_136;
      case 0x14u:
        long long v169 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v169;
        long long v170 = v8[3];
        void v7[2] = v8[2];
        v7[3] = v170;
        long long v171 = v8[5];
        v7[4] = v8[4];
        v7[5] = v171;
        long long v172 = v8[7];
        v7[6] = v8[6];
        v7[7] = v172;
        *((unsigned char *)v7 + 128) = *((unsigned char *)v8 + 128);
        *(_WORD *)((char *)v7 + 129) = *(_WORD *)((char *)v8 + 129);
        *((void *)v7 + 17) = *((void *)v8 + 17);
        long long v173 = v8[10];
        v7[9] = v8[9];
        v7[10] = v173;
        long long v174 = v8[12];
        v7[11] = v8[11];
        v7[12] = v174;
        long long v175 = v8[14];
        v7[13] = v8[13];
        v7[14] = v175;
        *((void *)v7 + 30) = *((void *)v8 + 30);
        *(_OWORD *)((char *)v7 + 248) = *(_OWORD *)((char *)v8 + 248);
        *(_OWORD *)((char *)v7 + 264) = *(_OWORD *)((char *)v8 + 264);
        *((unsigned char *)v7 + 296) = *((unsigned char *)v8 + 296);
        uint64_t v176 = *((void *)v8 + 36);
        *((void *)v7 + 35) = *((void *)v8 + 35);
        *((void *)v7 + 36) = v176;
        v7[19] = v8[19];
        uint64_t v177 = (int *)type metadata accessor for TicketedShow(0);
        uint64_t v178 = v177[29];
        uint64_t v179 = (char *)v7 + v178;
        uint64_t v180 = (char *)v8 + v178;
        uint64_t v181 = type metadata accessor for URL();
        uint64_t v1192 = v9;
        if (__swift_getEnumTagSinglePayload((uint64_t)v180, 1, v181))
        {
          uint64_t v182 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v179, v180, *(void *)(*(void *)(v182 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v181 - 8) + 32))(v179, v180, v181);
          __swift_storeEnumTagSinglePayload((uint64_t)v179, 0, 1, v181);
        }
        *(_OWORD *)((char *)v7 + v177[30]) = *(_OWORD *)((char *)v8 + v177[30]);
        uint64_t v285 = v177[31];
        uint64_t v286 = (char *)v7 + v285;
        uint64_t v287 = (char *)v8 + v285;
        uint64_t v288 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v287, 1, v288))
        {
          uint64_t v289 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v286, v287, *(void *)(*(void *)(v289 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v288 - 8) + 32))(v286, v287, v288);
          __swift_storeEnumTagSinglePayload((uint64_t)v286, 0, 1, v288);
        }
        uint64_t v9 = v1192;
        uint64_t v339 = v177[32];
        uint64_t v340 = (char *)v7 + v339;
        uint64_t v341 = (char *)v8 + v339;
        if (__swift_getEnumTagSinglePayload((uint64_t)v341, 1, v288))
        {
          uint64_t v342 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v340, v341, *(void *)(*(void *)(v342 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v288 - 8) + 32))(v340, v341, v288);
          __swift_storeEnumTagSinglePayload((uint64_t)v340, 0, 1, v288);
        }
        goto LABEL_524;
      case 0x15u:
        uint64_t v183 = v9;
        long long v184 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v184;
        long long v185 = v8[3];
        void v7[2] = v8[2];
        v7[3] = v185;
        long long v186 = v8[5];
        v7[4] = v8[4];
        v7[5] = v186;
        long long v187 = v8[7];
        v7[6] = v8[6];
        v7[7] = v187;
        *((unsigned char *)v7 + 128) = *((unsigned char *)v8 + 128);
        *(_WORD *)((char *)v7 + 129) = *(_WORD *)((char *)v8 + 129);
        *((void *)v7 + 17) = *((void *)v8 + 17);
        long long v188 = v8[10];
        v7[9] = v8[9];
        v7[10] = v188;
        long long v189 = v8[12];
        v7[11] = v8[11];
        v7[12] = v189;
        long long v190 = v8[14];
        v7[13] = v8[13];
        v7[14] = v190;
        long long v191 = v8[16];
        v7[15] = v8[15];
        v7[16] = v191;
        *((unsigned char *)v7 + 280) = *((unsigned char *)v8 + 280);
        *((void *)v7 + 34) = *((void *)v8 + 34);
        v7[18] = v8[18];
        uint64_t v192 = type metadata accessor for Appointment(0);
        uint64_t v193 = *(int *)(v192 + 108);
        uint64_t v194 = (char *)v7 + v193;
        uint64_t v195 = (char *)v8 + v193;
        uint64_t v57 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v195, 1, v57))
        {
          uint64_t v196 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v194, v195, *(void *)(*(void *)(v196 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v194, v195, v57);
          __swift_storeEnumTagSinglePayload((uint64_t)v194, 0, 1, v57);
        }
        uint64_t v9 = v183;
        uint64_t v290 = *(int *)(v192 + 112);
        uint64_t v258 = (char *)v7 + v290;
        uint64_t v259 = (char *)v8 + v290;
        if (__swift_getEnumTagSinglePayload((uint64_t)v259, 1, v57))
        {
LABEL_106:
          uint64_t v291 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v258, v259, *(void *)(*(void *)(v291 - 8) + 64));
        }
        else
        {
LABEL_136:
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v258, v259, v57);
          __swift_storeEnumTagSinglePayload((uint64_t)v258, 0, 1, v57);
        }
        goto LABEL_524;
      case 0x16u:
        uint64_t v197 = v9;
        long long v198 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v198;
        long long v199 = v8[3];
        void v7[2] = v8[2];
        v7[3] = v199;
        long long v200 = v8[5];
        v7[4] = v8[4];
        v7[5] = v200;
        long long v201 = v8[7];
        v7[6] = v8[6];
        v7[7] = v201;
        *((unsigned char *)v7 + 128) = *((unsigned char *)v8 + 128);
        *(_WORD *)((char *)v7 + 129) = *(_WORD *)((char *)v8 + 129);
        *((void *)v7 + 17) = *((void *)v8 + 17);
        long long v202 = v8[10];
        v7[9] = v8[9];
        v7[10] = v202;
        long long v203 = v8[12];
        v7[11] = v8[11];
        v7[12] = v203;
        long long v204 = v8[14];
        v7[13] = v8[13];
        v7[14] = v204;
        v7[15] = v8[15];
        uint64_t v205 = (int *)type metadata accessor for Party(0);
        uint64_t v206 = v205[24];
        uint64_t v207 = (char *)v7 + v206;
        uint64_t v208 = (char *)v8 + v206;
        uint64_t v209 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v208, 1, v209))
        {
          uint64_t v210 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v207, v208, *(void *)(*(void *)(v210 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v209 - 8) + 32))(v207, v208, v209);
          __swift_storeEnumTagSinglePayload((uint64_t)v207, 0, 1, v209);
        }
        uint64_t v292 = v205[25];
        uint64_t v293 = (char *)v7 + v292;
        uint64_t v294 = (char *)v8 + v292;
        if (__swift_getEnumTagSinglePayload((uint64_t)v8 + v292, 1, v209))
        {
          uint64_t v295 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v293, v294, *(void *)(*(void *)(v295 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v209 - 8) + 32))(v293, v294, v209);
          __swift_storeEnumTagSinglePayload((uint64_t)v293, 0, 1, v209);
        }
        uint64_t v9 = v197;
        uint64_t v343 = v205[26];
        uint64_t v84 = (char *)v7 + v343;
        uint64_t v85 = (char *)v8 + v343;
        uint64_t v86 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v85, 1, v86)) {
          goto LABEL_146;
        }
        goto LABEL_128;
      case 0x17u:
        uint64_t v211 = v9;
        long long v212 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v212;
        long long v213 = v8[3];
        void v7[2] = v8[2];
        v7[3] = v213;
        long long v214 = v8[5];
        v7[4] = v8[4];
        v7[5] = v214;
        long long v215 = v8[7];
        v7[6] = v8[6];
        v7[7] = v215;
        *((unsigned char *)v7 + 128) = *((unsigned char *)v8 + 128);
        *(_WORD *)((char *)v7 + 129) = *(_WORD *)((char *)v8 + 129);
        *((void *)v7 + 17) = *((void *)v8 + 17);
        long long v216 = v8[10];
        v7[9] = v8[9];
        v7[10] = v216;
        long long v217 = v8[12];
        v7[11] = v8[11];
        v7[12] = v217;
        v7[13] = v8[13];
        uint64_t v218 = (int *)type metadata accessor for Trip(0);
        uint64_t v219 = v218[22];
        uint64_t v220 = (char *)v7 + v219;
        uint64_t v221 = (char *)v8 + v219;
        uint64_t v222 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v221, 1, v222))
        {
          uint64_t v223 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v220, v221, *(void *)(*(void *)(v223 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v222 - 8) + 32))(v220, v221, v222);
          __swift_storeEnumTagSinglePayload((uint64_t)v220, 0, 1, v222);
        }
        uint64_t v296 = v218[23];
        uint64_t v297 = (char *)v7 + v296;
        uint64_t v298 = (char *)v8 + v296;
        if (__swift_getEnumTagSinglePayload((uint64_t)v8 + v296, 1, v222))
        {
          uint64_t v299 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v297, v298, *(void *)(*(void *)(v299 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v222 - 8) + 32))(v297, v298, v222);
          __swift_storeEnumTagSinglePayload((uint64_t)v297, 0, 1, v222);
        }
        uint64_t v9 = v211;
        uint64_t v344 = v218[24];
        uint64_t v345 = (char *)v7 + v344;
        uint64_t v346 = (char *)v8 + v344;
        *(void *)uint64_t v345 = *(void *)v346;
        v345[8] = v346[8];
        uint64_t v347 = v218[25];
        uint64_t v84 = (char *)v7 + v347;
        uint64_t v85 = (char *)v8 + v347;
        uint64_t v86 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v85, 1, v86))
        {
LABEL_146:
          uint64_t v348 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v84, v85, *(void *)(*(void *)(v348 - 8) + 64));
        }
        else
        {
LABEL_128:
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 32))(v84, v85, v86);
          __swift_storeEnumTagSinglePayload((uint64_t)v84, 0, 1, v86);
        }
        goto LABEL_524;
      case 0x18u:
        long long v224 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v224;
        void v7[2] = v8[2];
        uint64_t v225 = (int *)type metadata accessor for GlobalItem();
        uint64_t v226 = v225[7];
        uint64_t v227 = (char *)v7 + v226;
        uint64_t v228 = (char *)v8 + v226;
        uint64_t v229 = type metadata accessor for GlobalDialog();
        if (__swift_getEnumTagSinglePayload((uint64_t)v228, 1, v229))
        {
          uint64_t v230 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GlobalDialog?);
          memcpy(v227, v228, *(void *)(*(void *)(v230 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v229 - 8) + 32))(v227, v228, v229);
          __swift_storeEnumTagSinglePayload((uint64_t)v227, 0, 1, v229);
        }
        *(_OWORD *)((char *)v7 + v225[8]) = *(_OWORD *)((char *)v8 + v225[8]);
        *((unsigned char *)v7 + v225[9]) = *((unsigned char *)v8 + v225[9]);
        uint64_t v300 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GlobalItem, experiences: [DialogExperience]));
        *(void *)((char *)v7 + *(int *)(v300 + 48)) = *(void *)((char *)v8 + *(int *)(v300 + 48));
        goto LABEL_524;
      case 0x1Au:
        long long v231 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v231;
        void v7[2] = v8[2];
        *((void *)v7 + 6) = *((void *)v8 + 6);
        uint64_t v232 = (int *)type metadata accessor for Answer(0);
        uint64_t v233 = v232[9];
        uint64_t v234 = (char *)v7 + v233;
        uint64_t v235 = (char *)v8 + v233;
        uint64_t v236 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v235, 1, v236))
        {
          uint64_t v237 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v234, v235, *(void *)(*(void *)(v237 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v236 - 8) + 32))(v234, v235, v236);
          __swift_storeEnumTagSinglePayload((uint64_t)v234, 0, 1, v236);
        }
        *((unsigned char *)v7 + v232[10]) = *((unsigned char *)v8 + v232[10]);
        *(_OWORD *)((char *)v7 + v232[11]) = *(_OWORD *)((char *)v8 + v232[11]);
LABEL_524:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
        break;
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v1084 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  uint64_t v1085 = (char *)a1 + v1084;
  uint64_t v1086 = (char *)a2 + v1084;
  uint64_t v1087 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v1086, 1, v1087))
  {
    uint64_t v1088 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v1085, v1086, *(void *)(*(void *)(v1088 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v1087 - 8) + 32))(v1085, v1086, v1087);
    __swift_storeEnumTagSinglePayload((uint64_t)v1085, 0, 1, v1087);
  }
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  return a1;
}

#error "257F40C00: too big function (funcsize=0)"

uint64_t getEnumTagSinglePayload for ResolvedInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257F526C4);
}

uint64_t sub_257F526C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResultItem?);
    OUTLINED_FUNCTION_29_3();
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 20);
    }
    else
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      uint64_t v11 = *(int *)(a3 + 28);
    }
    return __swift_getEnumTagSinglePayload(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ResolvedInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257F5278C);
}

uint64_t sub_257F5278C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResultItem?);
    OUTLINED_FUNCTION_29_3();
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 20);
    }
    else
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      uint64_t v11 = *(int *)(a4 + 28);
    }
    return __swift_storeEnumTagSinglePayload(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for ResolvedInfo()
{
  type metadata accessor for SearchResultItem?(319, &lazy cache variable for type metadata for SearchResultItem?, (void (*)(uint64_t))type metadata accessor for SearchResultItem);
  if (v0 <= 0x3F)
  {
    type metadata accessor for SearchResultItem?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for SearchResultItem?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

id outlined copy of Result<[SearchResult], Error>(id a1, char a2)
{
  if (a2) {
    return a1;
  }
  else {
    return (id)swift_bridgeObjectRetain();
  }
}

void outlined consume of Result<[SearchResult], Error>(id a1, char a2)
{
  if (a2) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

uint64_t specialized LazyMapSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v8 = -1;
  }
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  void (*v13)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  void v22[4];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = (uint64_t *)(*(void *)(v1 + 56) + 16 * v6);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    v0[3] = v4;
    v0[4] = v5;
    long long v13 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v22[0] = v8;
    v22[1] = v9;
    v22[2] = v11;
    v22[3] = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(&v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v21;
  }
  uint64_t v15 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v16 = (unint64_t)(v0[2] + 64) >> 6;
    if (v15 < v16)
    {
      uint64_t v17 = v0[1];
      uint64_t v18 = *(void *)(v17 + 8 * v15);
      if (v18)
      {
LABEL_7:
        uint64_t v5 = (v18 - 1) & v18;
        unint64_t v6 = __clz(__rbit64(v18)) + (v15 << 6);
        int64_t v4 = v15;
        goto LABEL_3;
      }
      uint64_t v19 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v16)
      {
        uint64_t v18 = *(void *)(v17 + 8 * v19);
        if (v18)
        {
LABEL_10:
          uint64_t v15 = v19;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v16)
        {
          uint64_t v18 = *(void *)(v17 + 8 * (v3 + 3));
          if (v18)
          {
            uint64_t v15 = v3 + 3;
            goto LABEL_7;
          }
          uint64_t v19 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v16)
          {
            uint64_t v18 = *(void *)(v17 + 8 * v19);
            if (v18) {
              goto LABEL_10;
            }
            uint64_t v15 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v16)
            {
              uint64_t v18 = *(void *)(v17 + 8 * v15);
              if (v18) {
                goto LABEL_7;
              }
              int64_t v4 = v16 - 1;
              uint64_t v20 = v3 + 6;
              while (v20 < v16)
              {
                uint64_t v18 = *(void *)(v17 + 8 * v20++);
                if (v18)
                {
                  uint64_t v15 = v20 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_6_6(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

unint64_t OUTLINED_FUNCTION_7_9(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
}

uint64_t OUTLINED_FUNCTION_8_4()
{
  return type metadata accessor for ResolvedInfo();
}

uint64_t OUTLINED_FUNCTION_12_6()
{
  return swift_dynamicCast();
}

unint64_t OUTLINED_FUNCTION_13_10()
{
  return SearchResultItem.associatedValue.getter(v0 - 72);
}

uint64_t OUTLINED_FUNCTION_14_8()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_15_7(uint64_t a1, uint64_t a2, void *a3)
{
  return static ResolvedInfo.kResolvedAnswerKey.setter(a1, a2, a3, a3 + 1);
}

uint64_t OUTLINED_FUNCTION_16_9(uint64_t *a1)
{
  return static ResolvedInfo.kResolvedAnswerKey.getter(a1);
}

uint64_t OUTLINED_FUNCTION_22_9(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return __swift_instantiateConcreteTypeFromMangledName(a3);
}

uint64_t OUTLINED_FUNCTION_25_7(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_26_8()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_30_7()
{
  return swift_beginAccess();
}

BOOL OUTLINED_FUNCTION_31_4()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

uint64_t OUTLINED_FUNCTION_32_4()
{
  return v0;
}

void *AnySearchEntityPreprocessing.init(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = __swift_mutable_project_boxed_opaque_existential_1(a1, v2);
  MEMORY[0x270FA5388](v4);
  unint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  uint64_t v8 = specialized AnySearchEntityPreprocessing.init(_:)((uint64_t)v6, v2, v3);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v8;
}

uint64_t SearchEntityPreprocessor.preprocess(data:query:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return OUTLINED_FUNCTION_66((uint64_t)SearchEntityPreprocessor.preprocess(data:query:));
}

uint64_t SearchEntityPreprocessor.preprocess(data:query:)()
{
  char v1 = (void *)v0[5];
  uint64_t v2 = v1[2];
  v0[6] = v2;
  swift_bridgeObjectRetain();
  if (v2)
  {
    uint64_t v3 = v0[2];
    v0[7] = 0;
    v0[8] = v3;
    uint64_t v4 = (int *)v1[4];
    v0[9] = v1[5];
    uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[10] = v5;
    *uint64_t v5 = v0;
    v5[1] = SearchEntityPreprocessor.preprocess(data:query:);
    uint64_t v6 = v0[3];
    uint64_t v7 = v0[4];
    return v11(v3, v6, v7);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v9 = v0[2];
    uint64_t v10 = (uint64_t (*)(uint64_t))v0[1];
    return v10(v9);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  OUTLINED_FUNCTION_2();
  *(void *)(v1 + 88) = v0;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SearchEntityPreprocessor.preprocess(data:query:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  uint64_t v2 = v0[6];
  char v1 = v0[7];
  swift_release();
  swift_bridgeObjectRelease();
  if (v1 + 1 == v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = v0[11];
    uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
    return v4(v3);
  }
  else
  {
    uint64_t v6 = v0[11];
    uint64_t v7 = v0[7] + 1;
    v0[7] = v7;
    v0[8] = v6;
    uint64_t v8 = v0[5] + 16 * v7;
    uint64_t v9 = *(int **)(v8 + 32);
    v0[9] = *(void *)(v8 + 40);
    long long v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v9 + *v9);
    swift_retain();
    uint64_t v10 = (void *)swift_task_alloc();
    v0[10] = v10;
    uint64_t *v10 = v0;
    v10[1] = SearchEntityPreprocessor.preprocess(data:query:);
    uint64_t v11 = v0[3];
    uint64_t v12 = v0[4];
    return v13(v6, v11, v12);
  }
}

uint64_t SearchEntityPreprocessor.functions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *char v1 = a1;
  return result;
}

uint64_t (*SearchEntityPreprocessor.functions.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t AnySearchEntityPreprocessing.preprocess(data:query:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = AnySearchEntityPreprocessing.preprocess(data:query:);
  uint64_t v6 = OUTLINED_FUNCTION_4_5();
  return v8(v6);
}

uint64_t AnySearchEntityPreprocessing.preprocess(data:query:)(uint64_t a1)
{
  OUTLINED_FUNCTION_2();
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t closure #1 in AnySearchEntityPreprocessing.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return OUTLINED_FUNCTION_66((uint64_t)closure #1 in AnySearchEntityPreprocessing.init(_:));
}

uint64_t closure #1 in AnySearchEntityPreprocessing.init(_:)()
{
  char v1 = (void *)v0[5];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 8) + **(int **)(v3 + 8));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in AnySearchEntityPreprocessing.init(_:);
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v7 = v0[2];
  return v9(v7, v5, v6, v2, v3);
}

uint64_t closure #1 in AnySearchEntityPreprocessing.init(_:)(uint64_t a1)
{
  OUTLINED_FUNCTION_2();
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

void one-time initialization function for shared()
{
  static SearchEntityPreprocessorManager.shared = MEMORY[0x263F8EE78];
}

uint64_t *SearchEntityPreprocessorManager.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static SearchEntityPreprocessorManager.shared;
}

uint64_t static SearchEntityPreprocessorManager.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static SearchEntityPreprocessorManager.shared.setter(uint64_t a1)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_2_4();
  static SearchEntityPreprocessorManager.shared = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static SearchEntityPreprocessorManager.shared.modify())()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  return protocol witness for _ClientInfoProtocol.trackingConfig.modify in conformance AnswerSynthesisModelOnDevice._ClientInfo;
}

void __swiftcall SearchEntityPreprocessorManager.init(functions:)(Swift::OpaquePointer functions)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_2_4();
  static SearchEntityPreprocessorManager.shared = (uint64_t)functions._rawValue;
  swift_bridgeObjectRelease();
}

void *specialized AnySearchEntityPreprocessing.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  boxed_opaque_existential_1Tm = __swift_allocate_boxed_opaque_existential_1Tm((uint64_t *)&v8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(boxed_opaque_existential_1Tm, a1, a2);
  uint64_t v6 = swift_allocObject();
  outlined init with take of SageSearchClient(&v8, v6 + 16);
  return &async function pointer to partial apply for closure #1 in AnySearchEntityPreprocessing.init(_:);
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t dispatch thunk of SearchEntityPreprocess.preprocess(data:query:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 8) + **(int **)(a5 + 8));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = dispatch thunk of SearchEntityPreprocess.preprocess(data:query:);
  return v13(a1, a2, a3, a4, a5);
}

void type metadata accessor for SearchEntityPreprocessor()
{
}

void *initializeBufferWithCopyOfBuffer for AnySearchEntityPreprocessing(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for AnySearchEntityPreprocessing()
{
  return swift_release();
}

void *assignWithCopy for AnySearchEntityPreprocessing(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for AnySearchEntityPreprocessing(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnySearchEntityPreprocessing(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnySearchEntityPreprocessing(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for AnySearchEntityPreprocessing()
{
}

void type metadata accessor for SearchEntityPreprocessorManager()
{
}

uint64_t sub_257F53BD0()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t OUTLINED_FUNCTION_2_4()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_4_5()
{
  return v0;
}

uint64_t SmartChunkingPreprocessing.init()()
{
  type metadata accessor for NSUserDefaults(0, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
  if (static NSUserDefaults.smartChunkingPreprocessing.getter())
  {
    id v1 = objc_msgSend(self, sel_service);
    type metadata accessor for UniversalEmbeddingModelClient();
    swift_allocObject();
    UniversalEmbeddingModelClient.init(madService:)(v1);
  }
  else
  {
    if (one-time initialization token for answerSynthesis != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logging.answerSynthesis);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_130_0(v5);
      _os_log_impl(&dword_257DC6000, v3, v4, "SmartChunkingPreprocessing disabled, so won't init UniversalEmbeddingModelClient", v0, 2u);
      OUTLINED_FUNCTION_34();
    }
  }
  return 0;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10OmniSearch18SmartChunkingInputOG_SSsAE_pTg504_s10d8Search26fg76PreprocessingV11buildOutput33_C5D698872BA1E2D0DAC7A6518B71C76CLLySSSayAA0cD5H14OGKFSSAGKXEfU_AF0fgK0VTf1cn_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v21 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v8 = v21;
    uint64_t v9 = (unsigned char *)(a1 + 48);
    while (1)
    {
      uint64_t v10 = *((void *)v9 - 1);
      char v11 = *v9;
      v18[0] = *((void *)v9 - 2);
      v18[1] = v10;
      char v19 = v11;
      outlined copy of SmartChunkingInput();
      closure #1 in SmartChunkingPreprocessing.buildOutput(_:)((uint64_t)v18, a3, &v17, v20);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      outlined consume of SmartChunkingInput();
      uint64_t v12 = v20[0];
      uint64_t v13 = v20[1];
      uint64_t v21 = v8;
      unint64_t v14 = *(void *)(v8 + 16);
      if (v14 >= *(void *)(v8 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v8 = v21;
      }
      v9 += 24;
      *(void *)(v8 + 16) = v14 + 1;
      uint64_t v15 = v8 + 16 * v14;
      *(void *)(v15 + 32) = v12;
      *(void *)(v15 + 40) = v13;
      if (!--v6)
      {
        swift_release();
        return v8;
      }
    }
    outlined consume of SmartChunkingInput();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE78];
  }
  return v8;
}

uint64_t SmartChunkingInput.debugDescription.getter(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    uint64_t v4 = type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for NSNumber);
    return MEMORY[0x25A2C7E60](a1, v4);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return a1;
}

BOOL static SmartChunkingPreprocessing.SmartChunkingError.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void SmartChunkingPreprocessing.SmartChunkingError.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int SmartChunkingPreprocessing.SmartChunkingError.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SmartChunkingPreprocessing.SmartChunkingError(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static SmartChunkingPreprocessing.SmartChunkingError.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SmartChunkingPreprocessing.SmartChunkingError()
{
  return SmartChunkingPreprocessing.SmartChunkingError.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance SmartChunkingPreprocessing.SmartChunkingError(uint64_t a1)
{
  SmartChunkingPreprocessing.SmartChunkingError.hash(into:)(a1, *v1);
}

uint64_t SmartChunkingPreprocessing.universalEmbeddingClient.getter()
{
  return swift_retain();
}

uint64_t SmartChunkingPreprocessing.preprocess(data:query:)()
{
  OUTLINED_FUNCTION_27();
  v0[5] = v1;
  v0[6] = v2;
  v0[3] = v3;
  v0[4] = v4;
  v0[2] = v5;
  uint64_t v6 = type metadata accessor for OSSignpostError();
  v0[7] = v6;
  OUTLINED_FUNCTION_12_0(v6);
  v0[8] = v7;
  v0[9] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OSSignpostID();
  v0[10] = v8;
  OUTLINED_FUNCTION_12_0(v8);
  v0[11] = v9;
  v0[12] = OUTLINED_FUNCTION_50_0();
  v0[13] = swift_task_alloc();
  v0[14] = swift_task_alloc();
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v10, v11, v12);
}

{
  uint8_t *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_signpost_type_t v4;
  _WORD *v5;
  os_signpost_id_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  void (*v15)(uint64_t);
  void *v16;
  void *v17;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t (__cdecl *v26)();
  uint64_t v27;

  type metadata accessor for NSUserDefaults(0, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
  if (static NSUserDefaults.smartChunkingPreprocessing.getter())
  {
    if (one-time initialization token for searchSignposter != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for OSSignposter();
    v1[15] = __swift_project_value_buffer(v2, (uint64_t)static Logging.searchSignposter);
    OSSignposter.logHandle.getter();
    OSSignpostID.init(log:)();
    uint64_t v3 = OSSignposter.logHandle.getter();
    uint64_t v4 = static os_signpost_type_t.begin.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_130_0(v5);
      uint64_t v6 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_257DC6000, v3, v4, v6, "SmartChunkingPreprocessing.preprocess", "", v0, 2u);
      OUTLINED_FUNCTION_34();
    }
    uint64_t v7 = v1[11];
    uint64_t v9 = v1[5];
    uint64_t v8 = v1[6];
    uint64_t v11 = v1[3];
    uint64_t v10 = v1[4];

    uint64_t v12 = OUTLINED_FUNCTION_25_8();
    v13(v12);
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    v1[16] = OUTLINED_FUNCTION_160();
    v1[17] = *(void *)(v7 + 8);
    v1[18] = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v14 = OUTLINED_FUNCTION_46_4();
    v15(v14);
    uint64_t v16 = (void *)swift_allocObject();
    v1[19] = v16;
    v16[2] = v9;
    v16[3] = v8;
    v16[4] = v11;
    v16[5] = v10;
    uint64_t v26 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized Array.oms_mapWithTaskGroup<A>(ignoreOrder:itemTransform:)
                                + async function pointer to specialized Array.oms_mapWithTaskGroup<A>(ignoreOrder:itemTransform:));
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v17 = (void *)swift_task_alloc();
    v1[20] = v17;
    char *v17 = v1;
    v17[1] = SmartChunkingPreprocessing.preprocess(data:query:);
    return v26();
  }
  else
  {
    if (one-time initialization token for answerSynthesis != -1) {
      swift_once();
    }
    char v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logging.answerSynthesis);
    uint64_t v20 = Logger.logObject.getter();
    uint64_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_130_0(v22);
      OUTLINED_FUNCTION_17_6(&dword_257DC6000, v20, v23, "SmartChunkingPreprocessing disabled.");
      OUTLINED_FUNCTION_34();
    }

    swift_bridgeObjectRetain();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = OUTLINED_FUNCTION_51_0();
    return v25(v24);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_10();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v4 = v3;
  *(void *)(v6 + 168) = v5;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  unsigned int (*v3)(uint64_t);
  void (*v4)(void);
  _WORD *v5;
  uint64_t v6;
  os_signpost_type_t v7;
  os_signpost_id_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v15;

  OSSignposter.logHandle.getter();
  OUTLINED_FUNCTION_18_9();
  static os_signpost_type_t.end.getter();
  if (OUTLINED_FUNCTION_60_0())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v2 = OUTLINED_FUNCTION_20_1();
    if (v3(v2) != *MEMORY[0x263F90238])
    {
      OUTLINED_FUNCTION_77();
      v4();
    }
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_55();
    OUTLINED_FUNCTION_41_1(v5);
    OUTLINED_FUNCTION_186();
    OUTLINED_FUNCTION_32_1(&dword_257DC6000, v6, v7, v8, "SmartChunkingPreprocessing.preprocess");
    OUTLINED_FUNCTION_34();
  }
  uint64_t v9 = (void (*)(uint64_t, uint64_t))v1[17];
  uint64_t v10 = v1[12];
  uint64_t v11 = v1[10];

  v9(v10, v11);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = OUTLINED_FUNCTION_51_0();
  return v13(v12);
}

uint64_t closure #1 in SmartChunkingPreprocessing.preprocess(data:query:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = (void *)swift_task_alloc();
  v4[9] = v5;
  *uint64_t v5 = v4;
  v5[1] = closure #1 in SmartChunkingPreprocessing.preprocess(data:query:);
  return SmartChunkingPreprocessing.smartChunk(_:query:)();
}

uint64_t closure #1 in SmartChunkingPreprocessing.preprocess(data:query:)()
{
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_10();
  *uint64_t v2 = v1;
  v1[2] = v0;
  v1[3] = v3;
  v1[4] = v4;
  uint64_t v5 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v8 + 80) = v7;
  swift_task_dealloc();
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_27();
  if (v0[10])
  {
    SmartChunkingPreprocessing.buildSearchResult(with:searchResult:)(v0[3], v0[10], v0[6], v0[5]);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with copy of SearchResultItem(v0[6], v0[5], type metadata accessor for SearchResult);
  }
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t SmartChunkingPreprocessing.smartChunk(_:query:)()
{
  OUTLINED_FUNCTION_27();
  v0[48] = v1;
  v0[49] = v2;
  v0[46] = v3;
  v0[47] = v4;
  v0[45] = v5;
  uint64_t v6 = type metadata accessor for OSSignpostError();
  v0[50] = v6;
  OUTLINED_FUNCTION_12_0(v6);
  v0[51] = v7;
  v0[52] = OUTLINED_FUNCTION_50_0();
  v0[53] = swift_task_alloc();
  v0[54] = swift_task_alloc();
  v0[55] = swift_task_alloc();
  v0[56] = swift_task_alloc();
  v0[57] = swift_task_alloc();
  v0[58] = swift_task_alloc();
  type metadata accessor for EmailDocument(0);
  v0[59] = swift_task_alloc();
  v0[60] = type metadata accessor for SearchResultItem(0);
  v0[61] = OUTLINED_FUNCTION_50_0();
  v0[62] = swift_task_alloc();
  v0[63] = swift_task_alloc();
  v0[64] = swift_task_alloc();
  v0[65] = swift_task_alloc();
  v0[66] = swift_task_alloc();
  v0[67] = swift_task_alloc();
  v0[68] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OSSignpostID();
  v0[69] = v8;
  OUTLINED_FUNCTION_12_0(v8);
  v0[70] = v9;
  v0[71] = OUTLINED_FUNCTION_50_0();
  v0[72] = swift_task_alloc();
  v0[73] = swift_task_alloc();
  v0[74] = swift_task_alloc();
  v0[75] = swift_task_alloc();
  v0[76] = swift_task_alloc();
  v0[77] = swift_task_alloc();
  v0[78] = swift_task_alloc();
  v0[79] = swift_task_alloc();
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v10, v11, v12);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  uint8_t *v3;
  os_signpost_type_t v4;
  os_signpost_id_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(void);
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void (*v49)(void);
  _WORD *v50;
  uint64_t v51;
  os_signpost_type_t v52;
  os_signpost_id_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  _WORD *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  unsigned int (*v61)(uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(void);
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  void (*v85)(void);
  _WORD *v86;
  uint64_t v87;
  os_signpost_type_t v88;
  os_signpost_id_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  unsigned int (*v94)(uint64_t);
  NSObject *v95;
  os_log_type_t v96;
  _WORD *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int (*v100)(uint64_t);
  void (*v101)(void);
  _WORD *v102;
  uint64_t v103;
  os_signpost_type_t v104;
  os_signpost_id_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(uint64_t);
  void (*v110)(void);
  _WORD *v111;
  uint64_t v112;
  os_signpost_type_t v113;
  os_signpost_id_t v114;
  void (*v115)(uint64_t);
  uint64_t v116;
  uint64_t type;
  os_log_type_t v118;
  void (*v119)(uint64_t);
  void (*v120)(uint64_t);
  uint64_t (*v121)(uint64_t);
  char v122;
  uint64_t v123[2];
  void *v124;
  uint64_t v125;

  uint64_t v124 = v0;
  if (one-time initialization token for searchSignposter != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for OSSignposter();
  v0[80] = __swift_project_value_buffer(v1, (uint64_t)static Logging.searchSignposter);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  uint64_t v2 = OSSignposter.logHandle.getter();
  static os_signpost_type_t.begin.getter();
  if (OUTLINED_FUNCTION_60_0())
  {
    uint64_t v3 = (uint8_t *)OUTLINED_FUNCTION_55();
    *(_WORD *)uint64_t v3 = 0;
    OSSignpostID.rawValue.getter();
    OUTLINED_FUNCTION_186();
    _os_signpost_emit_with_name_impl(&dword_257DC6000, v2, v4, v5, "SmartChunkingPreprocessing.smartChunk", "", v3, 2u);
    OUTLINED_FUNCTION_34();
  }
  uint64_t v6 = v0[70];
  uint64_t v7 = v0[68];
  uint64_t v8 = v0[45];

  uint64_t v9 = OUTLINED_FUNCTION_25_8();
  v10(v9);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  v0[81] = OUTLINED_FUNCTION_160();
  uint64_t v11 = *(void (**)(uint64_t))(v6 + 8);
  v0[82] = v11;
  v0[83] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v12 = OUTLINED_FUNCTION_46_4();
  v11(v12);
  outlined init with copy of SearchResultItem(v8, v7, type metadata accessor for SearchResultItem);
  if (swift_getEnumCaseMultiPayload())
  {
    uint64_t v119 = v11;
    if (one-time initialization token for answerSynthesis != -1) {
      swift_once();
    }
    uint64_t v13 = v0[66];
    uint64_t v14 = (uint64_t (*)(uint64_t))v0[65];
    uint64_t v15 = v0[45];
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logging.answerSynthesis);
    outlined init with copy of SearchResultItem(v15, v13, type metadata accessor for SearchResultItem);
    outlined init with copy of SearchResultItem(v15, (uint64_t)v14, type metadata accessor for SearchResultItem);
    uint64_t v17 = Logger.logObject.getter();
    uint64_t v18 = static os_log_type_t.info.getter();
    char v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = v0[66];
    uint64_t v21 = v0[65];
    if (v19)
    {
      uint64_t v22 = swift_slowAlloc();
      v123[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315394;
      SearchResultItem.associatedValue.getter((uint64_t)(v0 + 2));
      OUTLINED_FUNCTION_47_3();
      OUTLINED_FUNCTION_35_5();
      uint64_t v24 = v23();
      v0[42] = OUTLINED_FUNCTION_38_2(v24, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v14 = type metadata accessor for SearchResultItem;
      _s10OmniSearch0B10ResultItemOWOhTm_1(v20, type metadata accessor for SearchResultItem);
      *(_WORD *)(v22 + 12) = 2080;
      SearchResultItem.type.getter(&v122);
      uint64_t v26 = SearchResultKey.rawValue.getter();
      v0[38] = OUTLINED_FUNCTION_44_5(v26, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s10OmniSearch0B10ResultItemOWOhTm_1(v21, type metadata accessor for SearchResultItem);
      _os_log_impl(&dword_257DC6000, v17, v18, "SmartChunkingPreprocessing.smartChunk this item:%s type is%s, doesn't need smartChunk.", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_34();
    }
    else
    {
      _s10OmniSearch0B10ResultItemOWOhTm_1(v0[66], type metadata accessor for SearchResultItem);
      _s10OmniSearch0B10ResultItemOWOhTm_1(v21, type metadata accessor for SearchResultItem);
    }

    _s10OmniSearch0B10ResultItemOWOhTm_1(v0[68], type metadata accessor for SearchResultItem);
    OSSignposter.logHandle.getter();
    OUTLINED_FUNCTION_50_5();
    static os_signpost_type_t.end.getter();
    if (OUTLINED_FUNCTION_60_0())
    {
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v41 = OUTLINED_FUNCTION_15_8();
      if (v42(v41) != *MEMORY[0x263F90238])
      {
        OUTLINED_FUNCTION_77();
        v49();
      }
      uint64_t v50 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_41_1(v50);
      OUTLINED_FUNCTION_186();
      OUTLINED_FUNCTION_32_1(&dword_257DC6000, v51, v52, v53, "SmartChunkingPreprocessing.smartChunk");
      OUTLINED_FUNCTION_34();
    }

    uint64_t v54 = OUTLINED_FUNCTION_148();
    v119(v54);
LABEL_51:
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v108 = OUTLINED_FUNCTION_14_9();
    return v109(v108);
  }
  outlined init with take of EmailDocument(v0[68], v0[59]);
  if (one-time initialization token for answerSynthesis != -1) {
    swift_once();
  }
  long long v28 = v0[67];
  uint64_t v29 = v0[45];
  uint64_t v30 = type metadata accessor for Logger();
  v0[84] = __swift_project_value_buffer(v30, (uint64_t)static Logging.answerSynthesis);
  outlined init with copy of SearchResultItem(v29, v28, type metadata accessor for SearchResultItem);
  swift_bridgeObjectRetain_n();
  uint64_t v31 = Logger.logObject.getter();
  uint64_t v32 = static os_log_type_t.info.getter();
  uint64_t v33 = os_log_type_enabled(v31, v32);
  uint64_t v34 = v0[67];
  uint64_t v35 = v0[47];
  if (v33)
  {
    long long v116 = v0[46];
    uint64_t v120 = v11;
    long long v36 = swift_slowAlloc();
    v123[0] = swift_slowAlloc();
    *(_DWORD *)long long v36 = 136315394;
    SearchResultItem.associatedValue.getter((uint64_t)(v0 + 7));
    __swift_project_boxed_opaque_existential_1(v0 + 7, v0[10]);
    OUTLINED_FUNCTION_35_5();
    v37();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 7));
    uint64_t v38 = OUTLINED_FUNCTION_148();
    v0[43] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s10OmniSearch0B10ResultItemOWOhTm_1(v34, type metadata accessor for SearchResultItem);
    *(_WORD *)(v36 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[44] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v116, v35, v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_257DC6000, v31, v32, "SmartChunkingPreprocessing.smartChunk start preprocess for email item:%s, query is:%s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_34();
    uint64_t v11 = v120;
    OUTLINED_FUNCTION_34();
  }
  else
  {
    _s10OmniSearch0B10ResultItemOWOhTm_1(v0[67], type metadata accessor for SearchResultItem);
    swift_bridgeObjectRelease_n();
  }

  long long v43 = v0[59];
  uint64_t v44 = *(void *)(v43 + 56);
  if (!v44)
  {
    uint64_t v55 = Logger.logObject.getter();
    uint64_t v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_130_0(v57);
      OUTLINED_FUNCTION_17_6(&dword_257DC6000, v55, v58, "SmartChunkingPreprocessing.smartChunk the body of emailDocument is empty.");
      OUTLINED_FUNCTION_34();
    }
    uint64_t v59 = (void *)v0[59];

    _s10OmniSearch0B10ResultItemOWOhTm_1((uint64_t)v59, type metadata accessor for EmailDocument);
    OSSignposter.logHandle.getter();
    OUTLINED_FUNCTION_50_5();
    static os_signpost_type_t.end.getter();
    if (OUTLINED_FUNCTION_60_0())
    {
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      long long v60 = OUTLINED_FUNCTION_15_8();
      if (v61(v60) != *MEMORY[0x263F90238])
      {
        OUTLINED_FUNCTION_77();
        v85();
      }
      uint64_t v86 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_41_1(v86);
      OUTLINED_FUNCTION_186();
      OUTLINED_FUNCTION_32_1(&dword_257DC6000, v87, v88, v89, "SmartChunkingPreprocessing.smartChunk");
      OUTLINED_FUNCTION_34();
    }
    uint64_t v90 = v0[77];
    uint64_t v91 = v0[69];

    ((void (*)(uint64_t, uint64_t))v11)(v90, v91);
    goto LABEL_51;
  }
  uint64_t v46 = v0[48];
  uint64_t v45 = v0[49];
  uint64_t v47 = *(void *)(v43 + 48);
  swift_bridgeObjectRetain();
  uint64_t v48 = (void *)SmartChunkingPreprocessing.splitIntoChunks(_:)(v47, v44, v46, v45);
  v0[85] = v48;
  _s10OmniSearch0B10ResultItemOWOhTm_1(v0[59], type metadata accessor for EmailDocument);
  swift_bridgeObjectRelease();
  uint64_t v62 = v48[2];
  v0[86] = type metadata accessor for NSUserDefaults(0, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
  if (static NSUserDefaults.smartChunksPerDocument.getter() >= v62)
  {
    uint64_t v70 = v0[61];
    uint64_t v69 = v0[62];
    uint64_t v71 = v0[45];
    swift_bridgeObjectRelease();
    outlined init with copy of SearchResultItem(v71, v69, type metadata accessor for SearchResultItem);
    outlined init with copy of SearchResultItem(v71, v70, type metadata accessor for SearchResultItem);
    uint64_t v72 = Logger.logObject.getter();
    uint64_t v73 = static os_log_type_t.info.getter();
    uint64_t v74 = os_log_type_enabled(v72, v73);
    long long v75 = v0[61];
    uint64_t v76 = v0[62];
    if (v74)
    {
      type = v0[61];
      uint64_t v77 = swift_slowAlloc();
      v123[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v77 = 136315394;
      uint64_t v118 = v73;
      SearchResultItem.associatedValue.getter((uint64_t)(v0 + 22));
      __swift_project_boxed_opaque_existential_1(v0 + 22, v0[25]);
      OUTLINED_FUNCTION_35_5();
      uint64_t v79 = v78();
      uint64_t v81 = v80;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 22));
      v0[31] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v81, v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s10OmniSearch0B10ResultItemOWOhTm_1(v76, type metadata accessor for SearchResultItem);
      *(_WORD *)(v77 + 12) = 2080;
      SearchResultItem.type.getter(&v122);
      long long v82 = SearchResultKey.rawValue.getter();
      v0[32] = OUTLINED_FUNCTION_44_5(v82, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s10OmniSearch0B10ResultItemOWOhTm_1(type, type metadata accessor for SearchResultItem);
      _os_log_impl(&dword_257DC6000, v72, v118, "SmartChunkingPreprocessing.smartChunk this item:%s type is%s will skip chunk.", (uint8_t *)v77, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_34();
    }
    else
    {
      _s10OmniSearch0B10ResultItemOWOhTm_1(v0[62], type metadata accessor for SearchResultItem);
      _s10OmniSearch0B10ResultItemOWOhTm_1(v75, type metadata accessor for SearchResultItem);
    }

    uint64_t v92 = (void *)OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    static os_signpost_type_t.end.getter();
    if (OUTLINED_FUNCTION_60_0())
    {
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v93 = OUTLINED_FUNCTION_15_8();
      if (v94(v93) != *MEMORY[0x263F90238])
      {
        OUTLINED_FUNCTION_77();
        v101();
      }
      uint64_t v102 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_41_1(v102);
      OUTLINED_FUNCTION_186();
      OUTLINED_FUNCTION_32_1(&dword_257DC6000, v103, v104, v105, "SmartChunkingPreprocessing.smartChunk");
      OUTLINED_FUNCTION_34();
    }
    uint64_t v106 = v0[72];
    uint64_t v107 = v0[69];

    ((void (*)(uint64_t, uint64_t))v11)(v106, v107);
    goto LABEL_51;
  }
  uint64_t v63 = v0[49];
  if (!v63)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v95 = Logger.logObject.getter();
    uint64_t v96 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_32_5(v96))
    {
      uint64_t v97 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_130_0(v97);
      OUTLINED_FUNCTION_17_6(&dword_257DC6000, v95, v98, "SmartChunkingPreprocessing.smartChunk failed. didn't get valid embeddings.");
      OUTLINED_FUNCTION_34();
    }

    OSSignposter.logHandle.getter();
    OUTLINED_FUNCTION_36_4();
    static os_signpost_type_t.end.getter();
    if (OUTLINED_FUNCTION_60_0())
    {
      OUTLINED_FUNCTION_42_2();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v99 = OUTLINED_FUNCTION_20_1();
      if (v100(v99) != *MEMORY[0x263F90238])
      {
        OUTLINED_FUNCTION_77();
        v110();
      }
      uint64_t v111 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_41_1(v111);
      OUTLINED_FUNCTION_186();
      OUTLINED_FUNCTION_32_1(&dword_257DC6000, v112, v113, v114, "SmartChunkingPreprocessing.smartChunk");
      OUTLINED_FUNCTION_34();
    }
    long long v115 = (void (*)(uint64_t))v0[82];

    uint64_t v84 = OUTLINED_FUNCTION_148();
    v115(v84);
    goto LABEL_51;
  }
  uint64_t v65 = v0[46];
  uint64_t v64 = v0[47];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SmartChunkingInput>);
  uint64_t v66 = swift_allocObject();
  v0[87] = v66;
  *(_OWORD *)(v66 + 16) = xmmword_258661700;
  *(void *)(v66 + 32) = v65;
  *(void *)(v66 + 40) = v64;
  *(unsigned char *)(v66 + 48) = 0;
  uint64_t v121 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v63 + 104) + **(int **)(*(void *)v63 + 104));
  swift_bridgeObjectRetain();
  long long v67 = (void *)swift_task_alloc();
  v0[88] = v67;
  *long long v67 = v0;
  v67[1] = SmartChunkingPreprocessing.smartChunk(_:query:);
  return v121(v66);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;

  uint64_t v2 = (void *)*v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v3 = v2;
  uint64_t v4 = (void *)*v1;
  OUTLINED_FUNCTION_10();
  *uint64_t v5 = v4;
  v2[89] = v6;
  v2[90] = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_26();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = v2[49];
    swift_bridgeObjectRelease();
    uint64_t v14 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v10 + 104) + **(int **)(*(void *)v10 + 104));
    uint64_t v11 = (void *)swift_task_alloc();
    v2[91] = v11;
    *uint64_t v11 = v4;
    v11[1] = SmartChunkingPreprocessing.smartChunk(_:query:);
    uint64_t v12 = v2[85];
    return v14(v12);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_2();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_10();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 736) = v5;
  *(void *)(v3 + 744) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_10();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v4 = v3;
  *(void *)(v6 + 760) = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t SmartChunkingPreprocessing.smartChunk(_:query:)(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t type,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36)
{
  OUTLINED_FUNCTION_31_5();
  a35 = v37;
  a36 = v38;
  a34 = v36;
  uint64_t v39 = (void *)v36[89];
  uint64_t v40 = v36[92];
  if (v39 && v40)
  {
    outlined init with copy of SearchResultItem(v36[45], v36[64], type metadata accessor for SearchResultItem);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    BOOL v43 = os_log_type_enabled(v41, v42);
    uint64_t v44 = v36[64];
    unint64_t v45 = v36[47];
    if (v43)
    {
      uint64_t v87 = v36[46];
      uint64_t v46 = OUTLINED_FUNCTION_13_1();
      a25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v46 = 136315650;
      uint64_t v89 = v41;
      SearchResultItem.associatedValue.getter((uint64_t)(v36 + 12));
      os_log_type_t typea = v42;
      __swift_project_boxed_opaque_existential_1(v36 + 12, v36[15]);
      OUTLINED_FUNCTION_35_5();
      uint64_t v48 = v47();
      unint64_t v50 = v49;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v36 + 12));
      v36[39] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v50, &a25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s10OmniSearch0B10ResultItemOWOhTm_1(v44, type metadata accessor for SearchResultItem);
      *(_WORD *)(v46 + 12) = 2080;
      swift_bridgeObjectRetain();
      unsigned char v36[40] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v45, &a25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v46 + 22) = 2080;
      uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
      uint64_t v52 = MEMORY[0x25A2C7E60](v39, v51);
      v36[41] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, &a25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v41 = v89;
      _os_log_impl(&dword_257DC6000, v89, typea, "SmartChunkingPreprocessing.smartChunk item:%s, query is:%s, queryEmbeding is:%s", (uint8_t *)v46, 0x20u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_34();
    }
    else
    {
      _s10OmniSearch0B10ResultItemOWOhTm_1(v36[64], type metadata accessor for SearchResultItem);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    uint64_t v60 = *(void *)(v36[85] + 16);
    if (v60)
    {
      unint64_t v61 = 0;
      uint64_t v62 = (char *)(swift_bridgeObjectRetain() + 48);
      do
      {
        uint64_t v63 = v36[45];
        uint64_t v64 = *((void *)v62 - 2);
        unint64_t v65 = *((void *)v62 - 1);
        char v66 = *v62;
        v62 += 24;
        outlined copy of SmartChunkingInput();
        closure #1 in SmartChunkingPreprocessing.smartChunk(_:query:)(v61, v64, v65, v66, v63, v40);
        outlined consume of SmartChunkingInput();
        ++v61;
      }
      while (v60 != v61);
      swift_bridgeObjectRelease();
    }
    long long v67 = (void *)swift_task_alloc();
    v36[94] = v67;
    *long long v67 = v36;
    v67[1] = SmartChunkingPreprocessing.smartChunk(_:query:);
    OUTLINED_FUNCTION_20_6();
    return SmartChunkingPreprocessing.cosineDistance(vector1:vector2:)(v68, v69);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_32_5(v55))
    {
      uint64_t v56 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_130_0(v56);
      OUTLINED_FUNCTION_17_6(&dword_257DC6000, v54, v57, "SmartChunkingPreprocessing.smartChunk failed. didn't get valid embeddings.");
      OUTLINED_FUNCTION_34();
    }

    OSSignposter.logHandle.getter();
    OUTLINED_FUNCTION_36_4();
    static os_signpost_type_t.end.getter();
    if (OUTLINED_FUNCTION_60_0())
    {
      OUTLINED_FUNCTION_42_2();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v58 = OUTLINED_FUNCTION_20_1();
      if (v59(v58) != *MEMORY[0x263F90238])
      {
        OUTLINED_FUNCTION_77();
        v72();
      }
      uint64_t v73 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_41_1(v73);
      OUTLINED_FUNCTION_186();
      OUTLINED_FUNCTION_32_1(&dword_257DC6000, v74, v75, v76, "SmartChunkingPreprocessing.smartChunk");
      OUTLINED_FUNCTION_34();
    }
    uint64_t v77 = (void (*)(uint64_t))v36[82];

    uint64_t v78 = OUTLINED_FUNCTION_148();
    v77(v78);
    OUTLINED_FUNCTION_0_4();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_14_9();
    OUTLINED_FUNCTION_20_6();
    return v82(v79, v80, v81, v82, v83, v84, v85, v86, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             type,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28);
  }
}

void SmartChunkingPreprocessing.smartChunk(_:query:)()
{
  uint64_t v73 = v0;
  uint64_t v1 = v0[95];
  if (!v1[2].isa)
  {
    __break(1u);
    return;
  }
  uint64_t isa = (uint64_t)v1[4].isa;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v3 = static NSUserDefaults.smartChunksPerDocument.getter();
  uint64_t v4 = specialized Array<A>.argminN(_:)(v3, isa);
  swift_bridgeObjectRelease();
  if (v4)
  {
    uint64_t v5 = (void *)v0[93];
    uint64_t v6 = v0[85];
    uint64_t v8 = v0[48];
    uint64_t v7 = v0[49];
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized Sequence.compactMap<A>(_:)((uint64_t)v4, v6);
    swift_bridgeObjectRelease();
    swift_retain();
    uint64_t v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10OmniSearch18SmartChunkingInputOG_SSsAE_pTg504_s10d8Search26fg76PreprocessingV11buildOutput33_C5D698872BA1E2D0DAC7A6518B71C76CLLySSSayAA0cD5H14OGKFSSAGKXEfU_AF0fgK0VTf1cn_n(v9, v8, v7);
    if (!v5)
    {
      uint64_t v23 = v0[63];
      uint64_t v24 = v0[45];
      v0[33] = v10;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v25 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v27 = v26;
      swift_bridgeObjectRelease();
      unint64_t v28 = v27;
      swift_bridgeObjectRelease();
      outlined init with copy of SearchResultItem(v24, v23, type metadata accessor for SearchResultItem);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.info.getter();
      uint64_t v31 = v30;
      BOOL v32 = os_log_type_enabled(v29, v30);
      uint64_t v33 = v0[63];
      unint64_t v71 = v28;
      if (v32)
      {
        os_log_type_t v69 = v31;
        uint64_t v34 = OUTLINED_FUNCTION_13_1();
        v72[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v34 = 136315651;
        SearchResultItem.associatedValue.getter((uint64_t)(v0 + 17));
        OUTLINED_FUNCTION_47_3();
        OUTLINED_FUNCTION_35_5();
        uint64_t v36 = v35();
        v0[35] = OUTLINED_FUNCTION_38_2(v36, v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s10OmniSearch0B10ResultItemOWOhTm_1(v33, type metadata accessor for SearchResultItem);
        *(_WORD *)(v34 + 12) = 2080;
        uint64_t v38 = swift_bridgeObjectRetain();
        uint64_t v39 = MEMORY[0x25A2C7E60](v38, MEMORY[0x263F8D6C8]);
        unint64_t v41 = v40;
        swift_bridgeObjectRelease();
        v0[36] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v34 + 22) = 2085;
        swift_bridgeObjectRetain();
        v0[37] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v71, v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_257DC6000, v29, v69, "SmartChunkingPreprocessing.smartChunk finished. ItemId is:%s ChunkIndex is:%s, SmartChunkText is:%{sensitive}s", (uint8_t *)v34, 0x20u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_34();
        OUTLINED_FUNCTION_34();
      }
      else
      {
        _s10OmniSearch0B10ResultItemOWOhTm_1(v33, type metadata accessor for SearchResultItem);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }

      uint64_t v44 = OSSignposter.logHandle.getter();
      OSSignpostIntervalState.signpostID.getter();
      os_signpost_type_t v45 = static os_signpost_type_t.end.getter();
      if (OS_os_log.signpostsEnabled.getter())
      {
        uint64_t v46 = v0[56];
        uint64_t v47 = (uint8_t *)v0[50];
        uint64_t v48 = v0[51];
        swift_retain();
        checkForErrorAndConsumeState(state:)();
        swift_release();
        if ((*(unsigned int (**)(uint64_t, uint8_t *))(v48 + 88))(v46, v47) == *MEMORY[0x263F90238])
        {
          unint64_t v49 = "[Error] Interval already ended";
        }
        else
        {
          OUTLINED_FUNCTION_77();
          v62();
          unint64_t v49 = "";
        }
        uint64_t v63 = (_WORD *)OUTLINED_FUNCTION_55();
        os_signpost_id_t v64 = OUTLINED_FUNCTION_41_1(v63);
        _os_signpost_emit_with_name_impl(&dword_257DC6000, v44, v45, v64, "SmartChunkingPreprocessing.smartChunk", v49, v47, 2u);
        OUTLINED_FUNCTION_34();
      }
      unint64_t v65 = (void (*)(uint64_t, uint64_t))v0[82];
      uint64_t v66 = v0[75];
      uint64_t v67 = v0[69];

      v65(v66, v67);
      uint64_t v70 = v25;
      goto LABEL_31;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v11 = v5;
    id v12 = v5;
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v1, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      v72[0] = OUTLINED_FUNCTION_13_1();
      *(_DWORD *)uint64_t v14 = 136315138;
      swift_getErrorValue();
      uint64_t v15 = OUTLINED_FUNCTION_49_3();
      v0[30] = OUTLINED_FUNCTION_44_5(v15, v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_257DC6000, v1, v13, "SmartChunkingPreprocessing.smartChunk failed. %s", v14, 0xCu);
      OUTLINED_FUNCTION_33_4();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_34();
    }
    else
    {
    }
    OUTLINED_FUNCTION_22_10();
    OUTLINED_FUNCTION_18_9();
    static os_signpost_type_t.end.getter();
    if (OUTLINED_FUNCTION_60_0())
    {
      OUTLINED_FUNCTION_13_11();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v42 = OUTLINED_FUNCTION_20_1();
      if (v43(v42) != *MEMORY[0x263F90238])
      {
        OUTLINED_FUNCTION_77();
        v50();
      }
      uint64_t v51 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_41_1(v51);
      OUTLINED_FUNCTION_186();
      OUTLINED_FUNCTION_32_1(&dword_257DC6000, v52, v53, v54, "SmartChunkingPreprocessing.smartChunk");
      OUTLINED_FUNCTION_34();
    }
    os_log_type_t v55 = (void (*)(uint64_t))v0[82];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_32_5(v18))
    {
      char v19 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_130_0(v19);
      OUTLINED_FUNCTION_17_6(&dword_257DC6000, v17, v20, "SmartChunkingPreprocessing.smartChunk didn't find valid chunk.");
      OUTLINED_FUNCTION_34();
    }

    OSSignposter.logHandle.getter();
    OUTLINED_FUNCTION_36_4();
    static os_signpost_type_t.end.getter();
    if (OUTLINED_FUNCTION_60_0())
    {
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v21 = OUTLINED_FUNCTION_20_1();
      if (v22(v21) != *MEMORY[0x263F90238])
      {
        OUTLINED_FUNCTION_77();
        v56();
      }
      uint64_t v57 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_41_1(v57);
      OUTLINED_FUNCTION_186();
      OUTLINED_FUNCTION_32_1(&dword_257DC6000, v58, v59, v60, "SmartChunkingPreprocessing.smartChunk");
      OUTLINED_FUNCTION_34();
    }
    os_log_type_t v55 = (void (*)(uint64_t))v0[82];
  }

  uint64_t v61 = OUTLINED_FUNCTION_148();
  v55(v61);
  uint64_t v70 = 0;
  unint64_t v71 = 0;
LABEL_31:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v68 = (void (*)(uint64_t, unint64_t))v0[1];
  v68(v70, v71);
}

uint64_t SmartChunkingPreprocessing.smartChunk(_:query:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  OUTLINED_FUNCTION_31_5();
  a35 = v37;
  a36 = v38;
  a34 = v36;
  uint64_t v39 = *(void **)(v36 + 720);
  id v40 = v39;
  id v41 = v39;
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.error.getter();
  uint64_t v44 = (void (*)(uint64_t))v43;
  if (os_log_type_enabled(v42, v43))
  {
    OUTLINED_FUNCTION_34_4();
    a25 = OUTLINED_FUNCTION_13_1();
    OUTLINED_FUNCTION_27_6(4.8149e-34);
    uint64_t v45 = OUTLINED_FUNCTION_49_3();
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, &a25);
    OUTLINED_FUNCTION_26_9(v47);
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_40_4(&dword_257DC6000, v48, v49, "SmartChunkingPreprocessing.smartChunk failed. %s");
    OUTLINED_FUNCTION_33_4();
    OUTLINED_FUNCTION_34();
    OUTLINED_FUNCTION_34();
  }
  else
  {
  }
  OUTLINED_FUNCTION_22_10();
  OUTLINED_FUNCTION_18_9();
  static os_signpost_type_t.end.getter();
  if (OUTLINED_FUNCTION_60_0())
  {
    OUTLINED_FUNCTION_13_11();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v50 = OUTLINED_FUNCTION_20_1();
    if (v51(v50) != *MEMORY[0x263F90238])
    {
      OUTLINED_FUNCTION_77();
      v52();
    }
    os_signpost_type_t v53 = (_WORD *)OUTLINED_FUNCTION_55();
    OUTLINED_FUNCTION_41_1(v53);
    OUTLINED_FUNCTION_186();
    OUTLINED_FUNCTION_32_1(&dword_257DC6000, v54, v55, v56, "SmartChunkingPreprocessing.smartChunk");
    OUTLINED_FUNCTION_34();
  }
  OUTLINED_FUNCTION_39_1();
  uint64_t v57 = OUTLINED_FUNCTION_148();
  v44(v57);
  OUTLINED_FUNCTION_0_4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_14_9();
  OUTLINED_FUNCTION_20_6();
  return v61(v58, v59, v60, v61, v62, v63, v64, v65, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28);
}

{
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  void (*v44)(uint64_t);
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t);
  void (*v52)(void);
  _WORD *v53;
  uint64_t v54;
  os_signpost_type_t v55;
  os_signpost_id_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  OUTLINED_FUNCTION_31_5();
  a35 = v37;
  a36 = v38;
  a34 = v36;
  uint64_t v39 = *(void **)(v36 + 744);
  id v40 = v39;
  id v41 = v39;
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.error.getter();
  uint64_t v44 = (void (*)(uint64_t))v43;
  if (os_log_type_enabled(v42, v43))
  {
    OUTLINED_FUNCTION_34_4();
    a25 = OUTLINED_FUNCTION_13_1();
    OUTLINED_FUNCTION_27_6(4.8149e-34);
    uint64_t v45 = OUTLINED_FUNCTION_49_3();
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, &a25);
    OUTLINED_FUNCTION_26_9(v47);
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_40_4(&dword_257DC6000, v48, v49, "SmartChunkingPreprocessing.smartChunk failed. %s");
    OUTLINED_FUNCTION_33_4();
    OUTLINED_FUNCTION_34();
    OUTLINED_FUNCTION_34();
  }
  else
  {
  }
  OUTLINED_FUNCTION_22_10();
  OUTLINED_FUNCTION_18_9();
  static os_signpost_type_t.end.getter();
  if (OUTLINED_FUNCTION_60_0())
  {
    OUTLINED_FUNCTION_13_11();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v50 = OUTLINED_FUNCTION_20_1();
    if (v51(v50) != *MEMORY[0x263F90238])
    {
      OUTLINED_FUNCTION_77();
      v52();
    }
    os_signpost_type_t v53 = (_WORD *)OUTLINED_FUNCTION_55();
    OUTLINED_FUNCTION_41_1(v53);
    OUTLINED_FUNCTION_186();
    OUTLINED_FUNCTION_32_1(&dword_257DC6000, v54, v55, v56, "SmartChunkingPreprocessing.smartChunk");
    OUTLINED_FUNCTION_34();
  }
  OUTLINED_FUNCTION_39_1();
  uint64_t v57 = OUTLINED_FUNCTION_148();
  v44(v57);
  OUTLINED_FUNCTION_0_4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_14_9();
  OUTLINED_FUNCTION_20_6();
  return v61(v58, v59, v60, v61, v62, v63, v64, v65, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28);
}

uint64_t SmartChunkingPreprocessing.buildSearchResult(with:searchResult:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v71 = a2;
  uint64_t v69 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  id v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v13 = (int *)type metadata accessor for EmailDocument(0);
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v68 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (uint64_t *)((char *)&v51 - v16);
  uint64_t v18 = type metadata accessor for SearchResultItem(0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = a4;
  outlined init with copy of SearchResultItem(a3, a4, type metadata accessor for SearchResult);
  outlined init with copy of SearchResultItem(a3, (uint64_t)v20, type metadata accessor for SearchResultItem);
  if (swift_getEnumCaseMultiPayload()) {
    return _s10OmniSearch0B10ResultItemOWOhTm_1((uint64_t)v20, type metadata accessor for SearchResultItem);
  }
  outlined init with take of EmailDocument((uint64_t)v20, (uint64_t)v17);
  uint64_t v22 = v17[1];
  uint64_t v66 = *v17;
  uint64_t v67 = v22;
  uint64_t v23 = v17[2];
  uint64_t v24 = v17[3];
  uint64_t v64 = v17[4];
  uint64_t v65 = v23;
  uint64_t v25 = (uint64_t *)v17[5];
  uint64_t v55 = v24;
  os_signpost_id_t v56 = v25;
  uint64_t v26 = (uint64_t)v8;
  uint64_t v54 = v8;
  uint64_t v27 = v17[8];
  uint64_t v28 = v17[9];
  uint64_t v29 = v12;
  uint64_t v63 = v12;
  uint64_t v30 = v17[10];
  uint64_t v60 = (void *)v17[11];
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v29, (char *)v17 + v13[12], v9);
  uint64_t v31 = *(uint64_t *)((char *)v17 + v13[13]);
  uint64_t v32 = *(uint64_t *)((char *)v17 + v13[14]);
  uint64_t v33 = v13[16];
  uint64_t v59 = *(uint64_t *)((char *)v17 + v13[15]);
  int v34 = *((unsigned __int8 *)v17 + v33);
  int v61 = *((unsigned __int8 *)v17 + v13[17]);
  int v62 = v34;
  uint64_t v73 = 0;
  memset(v72, 0, sizeof(v72));
  uint64_t v35 = (uint64_t *)((char *)v17 + v13[20]);
  uint64_t v36 = (uint64_t)v17 + v13[21];
  uint64_t v37 = *v35;
  uint64_t v38 = v35[1];
  uint64_t v57 = v31;
  uint64_t v58 = v37;
  uint64_t v53 = v38;
  outlined init with copy of PartialExtractedAttributes?(v36, v26);
  uint64_t v39 = *(void **)(a3 + *(int *)(type metadata accessor for SearchResult(0) + 20));
  uint64_t v51 = (uint64_t)v39;
  type metadata accessor for FeatureFlagService();
  uint64_t v52 = swift_allocObject();
  swift_bridgeObjectRetain();
  id v40 = v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v41 = v55;
  swift_bridgeObjectRetain();
  uint64_t v42 = v56;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v43 = (uint64_t)v60;
  swift_bridgeObjectRetain();
  uint64_t v44 = v57;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v45 = swift_bridgeObjectRetain();
  BYTE1(v49) = v61;
  LOBYTE(v49) = v62;
  uint64_t v48 = v27;
  uint64_t v46 = (uint64_t)v68;
  EmailDocument.init(id:mailMessageId:subject:body:authorNames:from:to:cc:date:attachmentNames:attachmentTypes:attachmentPaths:unread:hydratable:dataDetectorResults:extractedEventsLLMConsumableDescription:partialExtractedAttributes:csItem:featureFlagService:)(v66, v67, v65, v41, v64, (uint64_t)v42, v69, v71, v48, v28, v30, v43, (uint64_t)v63, v44, v32, v45, v49, (uint64_t)v72, v58,
    v53,
    (uint64_t)v54,
    v51,
    v52,
    v50,
    v51,
    v52,
    v53,
    (uint64_t)v54,
    v55,
    SBYTE1(v55),
    v56,
    v57,
    v58,
    v59,
    v60);
  _s10OmniSearch0B10ResultItemOWOhTm_1((uint64_t)v17, type metadata accessor for EmailDocument);
  uint64_t v47 = v70;
  _s10OmniSearch0B10ResultItemOWOhTm_1(v70, type metadata accessor for SearchResultItem);
  outlined init with take of EmailDocument(v46, v47);
  return swift_storeEnumTagMultiPayload();
}

uint64_t SmartChunkingPreprocessing.splitIntoChunks(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4 || (uint64_t v6 = *(void **)(a4 + 24)) == 0)
  {
    if (one-time initialization token for answerSynthesis != -1) {
LABEL_108:
    }
      swift_once();
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logging.answerSynthesis);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      unint64_t v81 = v21;
      *(_DWORD *)uint64_t v20 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000013, 0x800000025867EC40, (uint64_t *)&v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_257DC6000, v18, v19, "%s failed to split body because csuTokenizer is nil.", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A2C94B0](v21, -1, -1);
      MEMORY[0x25A2C94B0](v20, -1, -1);
    }

    lazy protocol witness table accessor for type SmartChunkingPreprocessing.SmartChunkingError and conformance SmartChunkingPreprocessing.SmartChunkingError();
    swift_allocError();
    unsigned char *v22 = 0;
    swift_willThrow();
    return (uint64_t)v4;
  }
  uint64_t v10 = one-time initialization token for answerSynthesis;
  id v11 = v6;
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logging.answerSynthesis);
  int64_t v13 = (int64_t)v11;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (uint8_t *)v13;
    *(_DWORD *)uint64_t v16 = 134217984;
    uint64_t v4 = v16 + 4;
    unint64_t v81 = (unint64_t)objc_msgSend((id)v13, sel_revision);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_257DC6000, v14, v15, "csuTokenizer version is:%ld", v16, 0xCu);
    MEMORY[0x25A2C94B0](v16, -1, -1);
  }
  else
  {
  }
  uint64_t v23 = (uint64_t)objc_msgSend((id)v13, sel_maxTokenLength);
  type metadata accessor for NSUserDefaults(0, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
  if (static NSUserDefaults.smartChunkingOverlap.getter() < v23) {
    a3 = static NSUserDefaults.smartChunkingOverlap.getter();
  }
  uint64_t v24 = (void *)MEMORY[0x25A2C7AB0](a1, a2);
  id v25 = objc_msgSend((id)v13, sel_getTokenIDsForText_, v24);

  type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for NSNumber);
  unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v26 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v27) {
      goto LABEL_16;
    }
LABEL_110:
    __break(1u);
LABEL_111:
    __break(1u);
    goto LABEL_112;
  }
  unint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v27) {
    goto LABEL_110;
  }
LABEL_16:
  unint64_t v81 = v26;
  if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
    || (v26 & 0x8000000000000000) != 0
    || (v26 & 0x4000000000000000) != 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()(v26);
    unint64_t v26 = v28;
    unint64_t v81 = v28;
  }
  uint64_t v29 = v26 & 0xFFFFFFFFFFFFFF8;
  uint64_t v30 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v30) {
    goto LABEL_111;
  }
  uint64_t v31 = v30 - 1;
  uint64_t v32 = *(void **)((v26 & 0xFFFFFFFFFFFFFF8) + 8 * v31 + 0x20);
  *(void *)(v29 + 16) = v31;
  specialized Array._endMutation()();

  unint64_t v27 = v81;
  uint64_t v5 = (uint8_t *)(v81 >> 62);
  if (!(v81 >> 62))
  {
    uint64_t v33 = *(void *)((v81 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_23;
  }
LABEL_112:
  swift_bridgeObjectRetain();
  uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_23:
  int64_t v74 = v13;
  if (v23 >= v33)
  {
    int64_t v13 = 0;
    uint64_t v5 = (uint8_t *)MEMORY[0x263F8EE78];
LABEL_82:
    uint64_t v4 = (uint8_t *)(v27 >> 62);
    if (v27 >> 62)
    {
      swift_bridgeObjectRetain();
      a2 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v13 < a2)
      {
        swift_bridgeObjectRetain();
        uint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
LABEL_84:
        if (!__OFSUB__(v57, v23))
        {
          a2 = (v57 - v23) & ~((v57 - v23) >> 63);
          if (!v4)
          {
            uint64_t v23 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v23 >= (unint64_t)a2) {
              goto LABEL_87;
            }
LABEL_124:
            __break(1u);
LABEL_125:
            OUTLINED_FUNCTION_37_4();
            uint64_t v4 = v72;
            goto LABEL_96;
          }
LABEL_120:
          swift_bridgeObjectRetain();
          uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v23 >= a2)
          {
            int64_t v13 = v27 & 0x8000000000000000;
            swift_bridgeObjectRetain();
            uint64_t v70 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v70 < a2) {
              goto LABEL_128;
            }
            swift_bridgeObjectRetain();
            uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
            uint64_t result = swift_bridgeObjectRelease();
            if (v71 >= v23) {
              goto LABEL_130;
            }
            __break(1u);
          }
          goto LABEL_124;
        }
LABEL_119:
        __break(1u);
        goto LABEL_120;
      }
    }
    else
    {
      uint64_t v57 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v13 < v57) {
        goto LABEL_84;
      }
    }
    swift_bridgeObjectRelease();
    int64_t v13 = v74;
    uint64_t v4 = v5;
    goto LABEL_116;
  }
  BOOL v34 = __OFSUB__(v23, a3);
  uint64_t v35 = v23 - a3;
  if (v34)
  {
    __break(1u);
    goto LABEL_119;
  }
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v76 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v76 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  int64_t v13 = 0;
  uint64_t v4 = (uint8_t *)MEMORY[0x263F8EE78];
  int64_t v36 = v23;
  uint64_t v77 = v5;
  uint64_t v78 = v35;
  while (1)
  {
    if (v36 < v13)
    {
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
      goto LABEL_108;
    }
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v37 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v37 < v13) {
      goto LABEL_100;
    }
    if (v13 < 0) {
      goto LABEL_101;
    }
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v38 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v38 < v36) {
      goto LABEL_102;
    }
    if ((v27 & 0xC000000000000001) != 0 && v13 != v36)
    {
      if (v13 >= (unint64_t)v36) {
        goto LABEL_106;
      }
      uint64_t v39 = 0;
      do
        _ArrayBuffer._typeCheckSlowPath(_:)(v13 + v39++);
      while (v23 != v39);
    }
    if (v5)
    {
      swift_bridgeObjectRetain();
      a2 = _CocoaArrayWrapper.subscript.getter();
      uint64_t v41 = v42;
      int64_t v80 = v43;
      unint64_t v40 = v44;
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v40 = (2 * v36) | 1;
      swift_bridgeObjectRetain();
      a2 = v27 & 0xFFFFFFFFFFFFFF8;
      uint64_t v41 = (v27 & 0xFFFFFFFFFFFFFF8) + 32;
      int64_t v80 = v13;
    }
    unint64_t v45 = v40 >> 1;
    if (v40)
    {
      os_signpost_type_t v75 = v4;
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      uint64_t v49 = swift_dynamicCastClass();
      if (!v49)
      {
        swift_unknownObjectRelease();
        uint64_t v49 = MEMORY[0x263F8EE78];
      }
      uint64_t v4 = *(uint8_t **)(v49 + 16);
      swift_release();
      uint64_t v46 = v45 - v80;
      if (__OFSUB__(v45, v80)) {
        goto LABEL_107;
      }
      if (v4 == (uint8_t *)v46)
      {
        uint64_t v5 = (uint8_t *)swift_dynamicCastClass();
        swift_unknownObjectRelease();
        uint64_t v4 = v75;
        if (v5) {
          goto LABEL_72;
        }
        swift_unknownObjectRelease();
LABEL_62:
        uint64_t v5 = (uint8_t *)MEMORY[0x263F8EE78];
        goto LABEL_72;
      }
      swift_unknownObjectRelease_n();
      uint64_t v4 = v75;
      if (!v46) {
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t v46 = v45 - v80;
      BOOL v47 = __OFSUB__(v45, v80);
      swift_unknownObjectRetain();
      if (v47) {
        goto LABEL_105;
      }
      if (!v46) {
        goto LABEL_62;
      }
    }
    uint64_t v79 = v41;
    if (v46 < 1)
    {
      uint64_t v5 = (uint8_t *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v5 = (uint8_t *)swift_allocObject();
      _swift_stdlib_malloc_size(v5);
      OUTLINED_FUNCTION_29_6();
      *((void *)v5 + 2) = v46;
      *((void *)v5 + 3) = v48;
    }
    if (v80 == v45) {
      goto LABEL_127;
    }
    if (v46 < 0) {
      break;
    }
    unint64_t v50 = v79 + 8 * v80;
    if (v50 < (unint64_t)&v5[8 * v46 + 32] && (unint64_t)(v5 + 32) < v50 + 8 * v46) {
      break;
    }
    swift_arrayInitWithCopy();
LABEL_72:
    swift_unknownObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_37_4();
      uint64_t v4 = v55;
    }
    unint64_t v53 = *((void *)v4 + 2);
    unint64_t v52 = *((void *)v4 + 3);
    if (v53 >= v52 >> 1)
    {
      OUTLINED_FUNCTION_51_5(v52);
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v4 = v56;
    }
    *((void *)v4 + 2) = v53 + 1;
    uint64_t v54 = &v4[24 * v53];
    *((void *)v54 + 4) = v5;
    *((void *)v54 + 5) = 0;
    v54[48] = 1;
    swift_unknownObjectRelease();
    if (__OFADD__(v13, v78)) {
      goto LABEL_103;
    }
    v13 += v78;
    int64_t v36 = v13 + v23;
    if (__OFADD__(v13, v23)) {
      goto LABEL_104;
    }
    uint64_t v5 = v77;
    if (v36 >= v76)
    {
      uint64_t v5 = v4;
      unint64_t v27 = v81;
      goto LABEL_82;
    }
  }
  while (1)
  {
    OUTLINED_FUNCTION_17_0();
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_130:
    if (v23 < 0)
    {
      __break(1u);
      return result;
    }
LABEL_87:
    if ((v27 & 0xC000000000000001) == 0 || a2 == v23) {
      break;
    }
    if (a2 < (unint64_t)v23)
    {
      Swift::Int v58 = a2;
      do
      {
        Swift::Int v59 = v58 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v58);
        Swift::Int v58 = v59;
      }
      while (v23 != v59);
      break;
    }
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.subscript.getter();
    uint64_t v60 = v62;
    a2 = v63;
    unint64_t v61 = v64;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v60 = (v27 & 0xFFFFFFFFFFFFFF8) + 32;
    unint64_t v61 = (2 * v23) | 1;
    swift_bridgeObjectRetain();
  }
  int64_t v13 = v74;
  uint64_t v65 = swift_unknownObjectRetain();
  a2 = specialized ArraySlice._copyToContiguousArray()(v65, v60, a2, v61);
  uint64_t v4 = v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_125;
  }
LABEL_96:
  unint64_t v67 = *((void *)v4 + 2);
  unint64_t v66 = *((void *)v4 + 3);
  if (v67 >= v66 >> 1)
  {
    OUTLINED_FUNCTION_51_5(v66);
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v4 = v73;
  }
  *((void *)v4 + 2) = v67 + 1;
  uint64_t v68 = &v4[24 * v67];
  *((void *)v68 + 4) = a2;
  *((void *)v68 + 5) = 0;
  v68[48] = 1;
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
LABEL_116:

  return (uint64_t)v4;
}

void closure #1 in SmartChunkingPreprocessing.smartChunk(_:query:)(unint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for SearchResultItem(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for answerSynthesis != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logging.answerSynthesis);
  outlined init with copy of SearchResultItem(a5, (uint64_t)v14, type metadata accessor for SearchResultItem);
  outlined copy of SmartChunkingInput();
  swift_bridgeObjectRetain();
  outlined copy of SmartChunkingInput();
  swift_bridgeObjectRetain();
  uint64_t v16 = Logger.logObject.getter();
  int v17 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v16, (os_log_type_t)v17))
  {
    _s10OmniSearch0B10ResultItemOWOhTm_1((uint64_t)v14, type metadata accessor for SearchResultItem);
    outlined consume of SmartChunkingInput();
    outlined consume of SmartChunkingInput();

    swift_bridgeObjectRelease_n();
    return;
  }
  int v37 = v17;
  os_log_t v38 = v16;
  uint64_t v39 = a6;
  uint64_t v18 = swift_slowAlloc();
  uint64_t v36 = swift_slowAlloc();
  uint64_t v43 = v36;
  *(_DWORD *)uint64_t v18 = 136315906;
  char v19 = a4;
  SearchResultItem.associatedValue.getter((uint64_t)v40);
  unint64_t v20 = a1;
  uint64_t v21 = v41;
  uint64_t v22 = v42;
  __swift_project_boxed_opaque_existential_1(v40, v41);
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 32))(v21, v22);
  unint64_t v25 = v24;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v40);
  v40[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v43);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  _s10OmniSearch0B10ResultItemOWOhTm_1((uint64_t)v14, type metadata accessor for SearchResultItem);
  *(_WORD *)(v18 + 12) = 2048;
  v40[0] = v20;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v18 + 22) = 2080;
  if (v19)
  {
    uint64_t v26 = type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for NSNumber);
    uint64_t v27 = MEMORY[0x25A2C7E60](a2, v26);
    unint64_t v29 = v28;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = a2;
    unint64_t v29 = a3;
  }
  v40[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v43);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined consume of SmartChunkingInput();
  outlined consume of SmartChunkingInput();
  *(_WORD *)(v18 + 32) = 2080;
  if ((v20 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(v39 + 16) > v20)
  {
    uint64_t v30 = swift_bridgeObjectRetain();
    uint64_t v31 = MEMORY[0x25A2C7E60](v30, MEMORY[0x263F8D5C8]);
    unint64_t v33 = v32;
    swift_bridgeObjectRelease();
    v40[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_t v34 = v38;
    _os_log_impl(&dword_257DC6000, v38, (os_log_type_t)v37, "SmartChunkingPreprocessing.smartChunk item:%s, chunkIndex is:%ld, chunk is:%s, chunkEmbeding is:%s", (uint8_t *)v18, 0x2Au);
    uint64_t v35 = v36;
    swift_arrayDestroy();
    MEMORY[0x25A2C94B0](v35, -1, -1);
    MEMORY[0x25A2C94B0](v18, -1, -1);

    return;
  }
  __break(1u);
}

uint64_t SmartChunkingPreprocessing.cosineDistance(vector1:vector2:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return MEMORY[0x270FA2498](SmartChunkingPreprocessing.cosineDistance(vector1:vector2:), 0, 0);
}

uint64_t SmartChunkingPreprocessing.cosineDistance(vector1:vector2:)()
{
  uint64_t v1 = *((void *)v0 + 2);
  uint64_t v33 = *(void *)(v1 + 16);
  if (v33)
  {
    uint64_t v2 = v0 + 8;
    uint64_t v3 = v0 + 9;
    uint64_t v4 = v0 + 10;
    uint64_t v5 = *((void *)v0 + 3);
    uint64_t v6 = *(void *)(v5 + 16);
    unint64_t v29 = (uint64_t *)(v5 + 32);
    uint64_t v30 = v1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    uint64_t v8 = MEMORY[0x263F8EE78];
    uint64_t v31 = v0;
    uint64_t v32 = v6;
    do
    {
      if (v6)
      {
        uint64_t v34 = v7;
        uint64_t v35 = v8;
        uint64_t v9 = *(void *)(v30 + 8 * v7);
        vDSP_Length v10 = *(void *)(v9 + 16);
        id v11 = (const float *)(v9 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v12 = v29;
        uint64_t v13 = v6;
        uint64_t v14 = MEMORY[0x263F8EE78];
        do
        {
          uint64_t v15 = *v12;
          *uint64_t v2 = 0.0;
          swift_bridgeObjectRetain();
          vDSP_dotpr(v11, 1, (const float *)(v15 + 32), 1, v2, v10);
          *uint64_t v3 = 0.0;
          vDSP_svesq(v11, 1, v3, v10);
          *uint64_t v4 = 0.0;
          vDSP_svesq((const float *)(v15 + 32), 1, v4, *(void *)(v15 + 16));
          swift_bridgeObjectRelease();
          float v16 = *v2;
          float v17 = *v3;
          float v18 = *v4;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v14 = v21;
          }
          unint64_t v20 = *(void *)(v14 + 16);
          unint64_t v19 = *(void *)(v14 + 24);
          if (v20 >= v19 >> 1)
          {
            OUTLINED_FUNCTION_51_5(v19);
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v14 = v22;
          }
          *(void *)(v14 + 16) = v20 + 1;
          *(float *)(v14 + 4 * v20 + 32) = 1.0 - (float)(v16 / (float)(sqrtf(v17) * sqrtf(v18)));
          ++v12;
          --v13;
        }
        while (v13);
        uint64_t v0 = v31;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v7 = v34;
        uint64_t v8 = v35;
      }
      else
      {
        uint64_t v14 = MEMORY[0x263F8EE78];
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v8 = v25;
      }
      unint64_t v24 = *(void *)(v8 + 16);
      unint64_t v23 = *(void *)(v8 + 24);
      if (v24 >= v23 >> 1)
      {
        OUTLINED_FUNCTION_51_5(v23);
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v8 = v26;
      }
      ++v7;
      *(void *)(v8 + 16) = v24 + 1;
      *(void *)(v8 + 8 * v24 + 32) = v14;
      uint64_t v6 = v32;
    }
    while (v7 != v33);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
  }
  uint64_t v27 = (uint64_t (*)(uint64_t))*((void *)v0 + 1);
  return v27(v8);
}

void *specialized Array<A>.argminN(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (a1 < 1) {
    return (void *)v2;
  }
  if (*(void *)(a2 + 16) < (unint64_t)a1) {
    return specialized _copyCollectionToContiguousArray<A>(_:)(0, a1);
  }
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v17 = specialized _copySequenceToContiguousArray<A>(_:)(v4);
  specialized MutableCollection<>.sort(by:)(&v17);
  swift_bridgeObjectRelease();
  specialized Collection.prefix(_:)(a1, v17);
  int64_t v8 = v7 >> 1;
  uint64_t v9 = (v7 >> 1) - v6;
  if (__OFSUB__(v7 >> 1, v6)) {
    goto LABEL_15;
  }
  if (!v9)
  {
LABEL_12:
    swift_unknownObjectRelease();
    return (void *)v2;
  }
  uint64_t v10 = v5;
  uint64_t v11 = v6;
  uint64_t v17 = v2;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9 & ~(v9 >> 63), 0);
  if ((v9 & 0x8000000000000000) == 0)
  {
    uint64_t v2 = v17;
    uint64_t v12 = (uint64_t *)(v10 + 16 * v11);
    while (v11 < v8)
    {
      uint64_t v13 = *v12;
      uint64_t v17 = v2;
      unint64_t v15 = *(void *)(v2 + 16);
      unint64_t v14 = *(void *)(v2 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1);
        uint64_t v2 = v17;
      }
      *(void *)(v2 + 16) = v15 + 1;
      *(void *)(v2 + 8 * v15 + 32) = v13;
      ++v11;
      v12 += 2;
      if (v8 == v11) {
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  __break(1u);
  uint64_t result = (void *)swift_release();
  __break(1u);
  return result;
}

void closure #1 in SmartChunkingPreprocessing.buildOutput(_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X8>)
{
  v25[1] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)a1;
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    uint64_t v18 = *(void *)(a1 + 8);
    *a4 = v5;
    a4[1] = v18;
    swift_bridgeObjectRetain();
    return;
  }
  if (!a2 || (unint64_t v7 = *(void **)(a2 + 24)) == 0)
  {
    if (one-time initialization token for answerSynthesis != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logging.answerSynthesis);
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      v25[0] = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x74754F646C697562, 0xEF293A5F28747570, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_257DC6000, v20, v21, "%s csuTokenizer is nil.", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A2C94B0](v23, -1, -1);
      MEMORY[0x25A2C94B0](v22, -1, -1);
    }

    lazy protocol witness table accessor for type SmartChunkingPreprocessing.SmartChunkingError and conformance SmartChunkingPreprocessing.SmartChunkingError();
    uint64_t v16 = swift_allocError();
    *unint64_t v24 = 0;
    swift_willThrow();
    goto LABEL_12;
  }
  type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for NSNumber);
  id v8 = v7;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v25[0] = 0;
  id v10 = objc_msgSend(v8, sel_getTextFromTokenIds_error_, isa, v25);

  uint64_t v11 = (void *)v25[0];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;
  id v15 = v11;

  if (v15)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type SmartChunkingPreprocessing.SmartChunkingError and conformance SmartChunkingPreprocessing.SmartChunkingError();
    uint64_t v16 = swift_allocError();
    unsigned char *v17 = 1;
    swift_willThrow();

LABEL_12:
    *a3 = v16;
    return;
  }

  *a4 = v12;
  a4[1] = v14;
}

uint64_t protocol witness for SearchEntityPreprocess.preprocess(data:query:) in conformance SmartChunkingPreprocessing()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = dispatch thunk of AnswerResolver.resolve(extractedResults:);
  return SmartChunkingPreprocessing.preprocess(data:query:)();
}

uint64_t sub_257F592CC()
{
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in SmartChunkingPreprocessing.preprocess(data:query:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  id v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *id v8 = v3;
  v8[1] = partial apply for closure #1 in SmartChunkingPreprocessing.preprocess(data:query:);
  return closure #1 in SmartChunkingPreprocessing.preprocess(data:query:)(a1, a2, v6, v7);
}

uint64_t partial apply for closure #1 in SmartChunkingPreprocessing.preprocess(data:query:)()
{
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_2();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t outlined init with take of EmailDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EmailDocument(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s10OmniSearch0B10ResultItemOWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined copy of SmartChunkingInput()
{
  return swift_bridgeObjectRetain();
}

uint64_t outlined consume of SmartChunkingInput()
{
  return swift_bridgeObjectRelease();
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(void *result, uint64_t a2)
{
  uint64_t v2 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2) {
      return (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v4 = (uint64_t)result;
    if (v2 <= 0)
    {
      uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v5 = (void *)OUTLINED_FUNCTION_204();
      size_t v6 = _swift_stdlib_malloc_size(v5);
      v5[2] = v2;
      v5[3] = 2 * ((uint64_t)(v6 - 32) / 8);
    }
    uint64_t result = specialized Sequence._copySequenceContents(initializing:)(v7, v5 + 4, v2, v4, a2);
    if (result == (void *)v2) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: String)>, (uint64_t (*)(void *, void *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of [String : String].Iterator._Variant);
}

{
  uint64_t v1;
  void *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_204();
  uint64_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 16);
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : String].Iterator._Variant();
  if (v5 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<FlightDesignator>, (uint64_t (*)(void *, void *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Set<FlightDesignator>.Iterator._Variant);
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
}

{
  specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), void (*a7)(uint64_t, uint64_t, char *))
{
  unint64_t v7 = a4 >> 1;
  uint64_t v8 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v8)
  {
    if (v8 <= 0)
    {
      uint64_t v18 = (char *)MEMORY[0x263F8EE78];
LABEL_12:
      if (v7 != a3)
      {
        uint64_t v21 = a6(0);
        OUTLINED_FUNCTION_12_0(v21);
        a7(a2 + *(void *)(v23 + 72) * a3, v8, &v18[(*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80)]);
        return;
      }
      goto LABEL_17;
    }
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v13 = a6(0);
    OUTLINED_FUNCTION_12_0(v13);
    uint64_t v15 = *(void *)(v14 + 72);
    unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    uint64_t v18 = (char *)swift_allocObject();
    size_t v19 = _swift_stdlib_malloc_size(v18);
    if (v15)
    {
      if (v19 - v17 != 0x8000000000000000 || v15 != -1)
      {
        *((void *)v18 + 2) = v8;
        *((void *)v18 + 3) = 2 * ((uint64_t)(v19 - v17) / v15);
        goto LABEL_12;
      }
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
      return;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void *, void *, uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v8 = (void *)OUTLINED_FUNCTION_204();
  size_t v9 = _swift_stdlib_malloc_size(v8);
  v8[2] = v4;
  v8[3] = 2 * ((uint64_t)(v9 - 32) / 32);
  uint64_t v10 = a3(v17, v8 + 4, v4, a1);
  uint64_t v11 = v17[0];
  uint64_t v12 = v17[1];
  uint64_t v13 = v17[2];
  uint64_t v14 = v17[3];
  uint64_t v15 = v17[4];
  swift_bridgeObjectRetain();
  a4(v11, v12, v13, v14, v15);
  if (v10 != v4)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v8;
}

size_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
  uint64_t v3 = type metadata accessor for URL();
  OUTLINED_FUNCTION_12_0(v3);
  uint64_t v5 = *(void *)(v4 + 72);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v8);
  if (v5)
  {
    if (result - v7 != 0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * ((uint64_t)(result - v7) / v5);
      swift_bridgeObjectRetain();
      uint64_t v11 = specialized Sequence._copySequenceContents(initializing:)(&v12, (uint64_t)v8 + v7, v1, a1);
      outlined consume of [String : String].Iterator._Variant();
      if (v11 == v1) {
        return (size_t)v8;
      }
      __break(1u);
      return MEMORY[0x263F8EE78];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t, uint64_t, void *))
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  if (v6)
  {
    if (v6 <= 0)
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v10 = (void *)OUTLINED_FUNCTION_204();
      _swift_stdlib_malloc_size(v10);
      OUTLINED_FUNCTION_29_6();
      void v10[2] = v6;
      v10[3] = v11;
    }
    if (v5 != a3)
    {
      a5(a2 + 8 * a3, v6, v10 + 4);
      return;
    }
    goto LABEL_10;
  }
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v2 = v3;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  uint64_t result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v2;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v2 = v3;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  uint64_t result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v2;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v2 = v3;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  uint64_t result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v2;
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(float *a1, float *a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (char *)a2 - (char *)a1;
  uint64_t v9 = ((char *)a2 - (char *)a1) / 16;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 16;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    unint64_t v12 = v4 + 16 * v11;
    if (v7 >= v6 || v10 < 16) {
      goto LABEL_45;
    }
    unint64_t v20 = (float *)(a3 - 16);
    while (1)
    {
      uint64_t v21 = v20 + 4;
      if (*(float *)(v12 - 8) >= *(v6 - 2))
      {
        uint64_t v22 = (float *)(v12 - 16);
        BOOL v24 = v21 != (float *)v12 || (unint64_t)v20 >= v12;
        v12 -= 16;
        if (!v24) {
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v22 = v6 - 4;
        BOOL v23 = v21 != v6 || v20 >= v6;
        v6 -= 4;
        if (!v23) {
          goto LABEL_41;
        }
      }
      *(_OWORD *)unint64_t v20 = *(_OWORD *)v22;
LABEL_41:
      v20 -= 4;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_45;
      }
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, ((char *)a2 - (char *)a1) / 16, a4);
  unint64_t v12 = v4 + 16 * v9;
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    do
    {
      if (v6[2] >= *(float *)(v4 + 8))
      {
        BOOL v14 = v7 == (float *)v4;
        uint64_t v15 = (_OWORD *)v4;
        v4 += 16;
        if (v14 && (unint64_t)v7 < v4) {
          goto LABEL_18;
        }
      }
      else
      {
        BOOL v14 = v7 == v6;
        uint64_t v15 = v6;
        v6 += 4;
        if (v14 && v7 < v6) {
          goto LABEL_18;
        }
      }
      *(_OWORD *)unint64_t v7 = *v15;
LABEL_18:
      v7 += 4;
    }
    while (v4 < v12 && (unint64_t)v6 < a3);
  }
  uint64_t v6 = v7;
LABEL_45:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (uint64_t)(v12 - v4) / 16, v6);
  return 1;
}

uint64_t specialized ArraySlice._copyToContiguousArray()(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v10 = swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  uint64_t v11 = *(void *)(v10 + 16);
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v11 != (a4 >> 1) - a3)
  {
LABEL_12:
    swift_unknownObjectRelease_n();
LABEL_2:
    specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
    uint64_t v9 = v8;
LABEL_9:
    swift_unknownObjectRelease();
    return v9;
  }
  uint64_t v9 = swift_dynamicCastClass();
  swift_unknownObjectRelease_n();
  if (!v9)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    goto LABEL_9;
  }
  return v9;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v10 = swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  uint64_t v11 = *(void *)(v10 + 16);
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v11 != (a4 >> 1) - a3)
  {
LABEL_12:
    swift_unknownObjectRelease_n();
LABEL_2:
    specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SearchEntity>, type metadata accessor for SearchEntity, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
    uint64_t v9 = v8;
LABEL_9:
    swift_unknownObjectRelease();
    return v9;
  }
  uint64_t v9 = swift_dynamicCastClass();
  swift_unknownObjectRelease_n();
  if (!v9)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    goto LABEL_9;
  }
  return v9;
}

unint64_t lazy protocol witness table accessor for type SmartChunkingPreprocessing.SmartChunkingError and conformance SmartChunkingPreprocessing.SmartChunkingError()
{
  unint64_t result = lazy protocol witness table cache variable for type SmartChunkingPreprocessing.SmartChunkingError and conformance SmartChunkingPreprocessing.SmartChunkingError;
  if (!lazy protocol witness table cache variable for type SmartChunkingPreprocessing.SmartChunkingError and conformance SmartChunkingPreprocessing.SmartChunkingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SmartChunkingPreprocessing.SmartChunkingError and conformance SmartChunkingPreprocessing.SmartChunkingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SmartChunkingPreprocessing.SmartChunkingError and conformance SmartChunkingPreprocessing.SmartChunkingError;
  if (!lazy protocol witness table cache variable for type SmartChunkingPreprocessing.SmartChunkingError and conformance SmartChunkingPreprocessing.SmartChunkingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SmartChunkingPreprocessing.SmartChunkingError and conformance SmartChunkingPreprocessing.SmartChunkingError);
  }
  return result;
}

void specialized _ArrayBuffer._consumeAndCreateNew()()
{
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x25A2C8560);
}

uint64_t destroy for SmartChunkingInput()
{
  return outlined consume of SmartChunkingInput();
}

uint64_t initializeBufferWithCopyOfBuffer for SmartChunkingInput(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  OUTLINED_FUNCTION_148();
  outlined copy of SmartChunkingInput();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SmartChunkingInput(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  outlined copy of SmartChunkingInput();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of SmartChunkingInput();
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SmartChunkingInput(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of SmartChunkingInput();
  return a1;
}

uint64_t getEnumTagSinglePayload for SmartChunkingInput(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SmartChunkingInput(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for SmartChunkingInput(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for SmartChunkingInput(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

void type metadata accessor for SmartChunkingInput()
{
}

void *assignWithCopy for SmartChunkingPreprocessing(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for SmartChunkingPreprocessing(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SmartChunkingPreprocessing(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SmartChunkingPreprocessing(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

void type metadata accessor for SmartChunkingPreprocessing()
{
}

unsigned char *storeEnumTagSinglePayload for SmartChunkingPreprocessing.SmartChunkingError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x257F5AB3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for SmartChunkingPreprocessing.SmartChunkingError()
{
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    uint64_t v5 = a4;
LABEL_7:
    *__n128 result = a4;
    result[1] = a5;
    result[2] = v5;
    return (void *)a3;
  }
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a5 == a4)
    {
LABEL_5:
      a3 = 0;
      goto LABEL_6;
    }
    if (a5 >= a4)
    {
      if (a5 <= a4)
      {
LABEL_17:
        __break(1u);
LABEL_18:
        uint64_t v5 = a5;
        a3 = a5 - a4;
      }
      else
      {
        uint64_t v6 = a3 - 1;
        uint64_t v5 = a4 + 1;
        while (1)
        {
          *a2 = v5 - 1;
          if (!v6) {
            break;
          }
          if (a5 == v5) {
            goto LABEL_18;
          }
          ++a2;
          --v6;
          BOOL v7 = v5 >= a4 && v5 < a5;
          ++v5;
          if (!v7) {
            goto LABEL_17;
          }
        }
      }
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_39:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v26 = -1 << *(unsigned char *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    unint64_t v20 = (uint64_t *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    BOOL v23 = (uint64_t *)(*(void *)(a4 + 56) + 16 * v16);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    *uint64_t v11 = v22;
    v11[1] = v21;
    v11[2] = v24;
    v11[3] = v25;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 4;
    swift_bridgeObjectRetain();
    __n128 result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0;
        int64_t v12 = v17;
      }
      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }
        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }
          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0;
            goto LABEL_37;
          }
          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }
              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v9 = 0;
        int64_t v12 = v17 + 2;
      }
LABEL_37:
      uint64_t v10 = v13;
LABEL_38:
      uint64_t v7 = v26;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;

  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    unint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    __n128 result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_39:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v24 = -1 << *(unsigned char *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    unint64_t v20 = (void *)(*(void *)(a4 + 48) + 32 * v16);
    uint64_t v21 = v20[1];
    uint64_t v22 = v20[2];
    BOOL v23 = v20[3];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    v11[2] = v22;
    v11[3] = v23;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 4;
    swift_bridgeObjectRetain();
    __n128 result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0;
        int64_t v12 = v17;
      }
      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }
        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }
          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0;
            goto LABEL_37;
          }
          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }
              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v9 = 0;
        int64_t v12 = v17 + 2;
      }
LABEL_37:
      uint64_t v10 = v13;
LABEL_38:
      uint64_t v7 = v24;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v37 = *(void *)(v11 - 8);
  uint64_t result = MEMORY[0x270FA5388](v11);
  int64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = a4;
  uint64_t v16 = a4 + 56;
  uint64_t v15 = *(void *)(a4 + 56);
  uint64_t v32 = -1 << *(unsigned char *)(a4 + 32);
  if (-v32 < 64) {
    uint64_t v17 = ~(-1 << -(char)v32);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  if (!a2)
  {
    int64_t v19 = 0;
    a3 = 0;
LABEL_39:
    uint64_t v28 = ~v32;
    *a1 = v38;
    a1[1] = v16;
    a1[2] = v28;
    a1[3] = v19;
    a1[4] = v18;
    return a3;
  }
  if (!a3)
  {
    int64_t v19 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v35 = a3;
  uint64_t v31 = a1;
  int64_t v19 = 0;
  a3 = 0;
  uint64_t v36 = v37 + 16;
  unint64_t v20 = (void (**)(char *, char *, uint64_t))(v37 + 32);
  uint64_t v33 = v16;
  int64_t v34 = (unint64_t)(63 - v32) >> 6;
  int64_t v30 = v34 - 1;
  if (!v18) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v21 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  unint64_t v22 = v21 | (v19 << 6);
  while (1)
  {
    uint64_t v26 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v10, *(void *)(v38 + 48) + v26 * v22, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v11);
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11) == 1)
    {
      uint64_t v16 = v33;
      goto LABEL_38;
    }
    ++a3;
    uint64_t v27 = *v20;
    (*v20)(v14, v10, v11);
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(a2, v14, v11);
    if (a3 == v35)
    {
      a3 = v35;
      a1 = v31;
      uint64_t v16 = v33;
      goto LABEL_39;
    }
    a2 += v26;
    if (v18) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    uint64_t v16 = v33;
    if (v23 >= v34) {
      goto LABEL_37;
    }
    unint64_t v24 = *(void *)(v33 + 8 * v23);
    if (!v24)
    {
      int64_t v25 = v19 + 2;
      ++v19;
      if (v23 + 1 >= v34) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v33 + 8 * v25);
      if (v24) {
        goto LABEL_14;
      }
      int64_t v19 = v23 + 1;
      if (v23 + 2 >= v34) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v33 + 8 * (v23 + 2));
      if (v24)
      {
        v23 += 2;
      }
      else
      {
        int64_t v19 = v23 + 2;
        if (v23 + 3 >= v34) {
          goto LABEL_37;
        }
        unint64_t v24 = *(void *)(v33 + 8 * (v23 + 3));
        if (!v24)
        {
          int64_t v25 = v23 + 4;
          int64_t v19 = v23 + 3;
          if (v23 + 4 < v34)
          {
            unint64_t v24 = *(void *)(v33 + 8 * v25);
            if (!v24)
            {
              while (1)
              {
                int64_t v23 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_42;
                }
                if (v23 >= v34)
                {
                  int64_t v19 = v30;
                  goto LABEL_37;
                }
                unint64_t v24 = *(void *)(v33 + 8 * v23);
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
LABEL_14:
            int64_t v23 = v25;
            goto LABEL_21;
          }
LABEL_37:
          __swift_storeEnumTagSinglePayload((uint64_t)v10, 1, 1, v11);
          unint64_t v18 = 0;
LABEL_38:
          outlined destroy of URL?((uint64_t)v10);
          a1 = v31;
          goto LABEL_39;
        }
        v23 += 3;
      }
    }
LABEL_21:
    unint64_t v18 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v23 << 6);
    int64_t v19 = v23;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of SearchResultItem(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_4()
{
  uint64_t v3 = *(void *)(v0 + 416);
  *(void *)(v1 - 96) = *(void *)(v0 + 424);
  *(void *)(v1 - 88) = v3;
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_13_11()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_14_9()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_15_8()
{
  return v0;
}

void OUTLINED_FUNCTION_17_6(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v4, a4, v5, 2u);
}

uint64_t OUTLINED_FUNCTION_18_9()
{
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t OUTLINED_FUNCTION_22_10()
{
  return OSSignposter.logHandle.getter();
}

uint64_t OUTLINED_FUNCTION_25_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_26_9(uint64_t a1)
{
  *(void *)(v1 + 240) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_27_6(float a1)
{
  *uint64_t v1 = a1;
  return swift_getErrorValue();
}

BOOL OUTLINED_FUNCTION_32_5(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_33_4()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_34_4()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_36_4()
{
  return OSSignpostIntervalState.signpostID.getter();
}

void OUTLINED_FUNCTION_37_4()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_38_2(uint64_t a1, unint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1Tm(v2);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v3 - 88));
}

void OUTLINED_FUNCTION_39_1()
{
}

void OUTLINED_FUNCTION_40_4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_42_2()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_44_5(uint64_t a1, unint64_t a2)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t OUTLINED_FUNCTION_46_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_47_3()
{
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return v1;
}

uint64_t OUTLINED_FUNCTION_49_3()
{
  return Error.localizedDescription.getter();
}

uint64_t OUTLINED_FUNCTION_50_5()
{
  return OSSignpostIntervalState.signpostID.getter();
}

BOOL OUTLINED_FUNCTION_51_5@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t static UniversalEmbeddingModelClient.shared()()
{
  id v0 = objc_msgSend(self, sel_service);
  type metadata accessor for UniversalEmbeddingModelClient();
  swift_allocObject();
  return UniversalEmbeddingModelClient.init(madService:)(v0);
}

uint64_t type metadata accessor for UniversalEmbeddingModelClient()
{
  return self;
}

void *UniversalEmbeddingModelClient.madService.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

void *UniversalEmbeddingModelClient.tokenizer.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

uint64_t UniversalEmbeddingModelClient.init(madService:)(void *a1)
{
  uint64_t v2 = v1;
  *(void *)(v2 + 16) = a1;
  type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for CSUTokenizer);
  os_log_type_t v4 = self;
  id v5 = a1;
  id v6 = @nonobjc CSUTokenizer.__allocating_init(for:)((uint64_t)objc_msgSend(v4, sel_csuTokenizerRevision));

  *(void *)(v2 + 24) = v6;
  return v2;
}

id @nonobjc CSUTokenizer.__allocating_init(for:)(uint64_t a1)
{
  v5[1] = *(id *)MEMORY[0x263EF8340];
  v5[0] = 0;
  id v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_TokenizerForRevision_error_, a1, v5);
  if (v1)
  {
    id v2 = v5[0];
  }
  else
  {
    id v3 = v5[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v1;
}

uint64_t UniversalEmbeddingModelClient.embed(items:)(uint64_t a1)
{
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = v1;
  return MEMORY[0x270FA2498](UniversalEmbeddingModelClient.embed(items:), 0, 0);
}

uint64_t UniversalEmbeddingModelClient.embed(items:)()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F54110]), sel_init);
  v0[10] = v1;
  objc_msgSend(v1, sel_setExtendedContextLength_, 1);
  if (one-time initialization token for answerSynthesis != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  v0[11] = __swift_project_value_buffer(v2, (uint64_t)static Logging.answerSynthesis);
  id v3 = v1;
  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    id v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v6 = 134217984;
    v0[7] = [v3 version];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_257DC6000, v4, v5, "MADTextEmbeddingRequest version = %lu", v6, 0xCu);
    OUTLINED_FUNCTION_34();
  }
  else
  {
  }
  uint64_t v7 = *(void **)(v0[9] + 16);
  v0[12] = v7;
  if (!v7)
  {
    unint64_t v20 = Logger.logObject.getter();
    uint64_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, (os_log_type_t)v21))
    {
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v22 = 0;
      _os_log_impl(&dword_257DC6000, v20, (os_log_type_t)v21, "Couldn't fetch embedding due to error: madService is nil", v22, 2u);
      OUTLINED_FUNCTION_34();
      int64_t v23 = v20;
    }
    else
    {
      int64_t v23 = v3;
      id v3 = v20;
    }

    OUTLINED_FUNCTION_5_7();
    OUTLINED_FUNCTION_45_0();
    __asm { BRAA            X2, X16 }
  }
  uint64_t v8 = v0[8];
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v32 = MEMORY[0x263F8EE78];
    id v10 = v7;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v11 = (unsigned char *)(v8 + 48);
    do
    {
      uint64_t v12 = *((void *)v11 - 2);
      uint64_t v13 = *((void *)v11 - 1);
      char v14 = *v11;
      id v15 = objc_allocWithZone(MEMORY[0x263F54120]);
      outlined copy of SmartChunkingInput();
      id v16 = objc_msgSend(v15, sel_init);
      if (v14)
      {
        uint64_t v17 = swift_bridgeObjectRetain();
        outlined bridged method (mbgnn) of @objc MADTextInput.addTokenIDs(_:)(v17, v16);
        outlined consume of SmartChunkingInput();
      }
      else
      {
        unint64_t v18 = (void *)MEMORY[0x25A2C7AB0](v12, v13);
        objc_msgSend(v16, sel_addText_, v18);
      }
      outlined consume of SmartChunkingInput();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v11 += 24;
      --v9;
    }
    while (v9);
    uint64_t v19 = v32;
  }
  else
  {
    id v24 = v7;
    uint64_t v19 = MEMORY[0x263F8EE78];
  }
  v0[13] = v19;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_258662D10;
  *(void *)(v25 + 32) = v3;
  uint64_t v33 = v25;
  specialized Array._endMutation()();
  v0[14] = v33;
  uint64_t v26 = v3;
  uint64_t v27 = (void *)swift_task_alloc();
  v0[15] = v27;
  *uint64_t v27 = v0;
  v27[1] = UniversalEmbeddingModelClient.embed(items:);
  OUTLINED_FUNCTION_45_0();
  return MADService.perform(_:textInputs:)();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_2();
  id v3 = v2;
  OUTLINED_FUNCTION_10();
  *os_log_type_t v4 = v3;
  *os_log_type_t v4 = *v1;
  *(void *)(v3 + 128) = v5;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v6 = UniversalEmbeddingModelClient.embed(items:);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v6 = UniversalEmbeddingModelClient.embed(items:);
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_27();
  id v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void **)(v0 + 96);

  id v3 = *(void *)(v0 + 128);
  if (!*(void *)(v1 + 16))
  {
    swift_bridgeObjectRelease();
    id v3 = 0;
  }
  os_log_type_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v4(v3);
}

void UniversalEmbeddingModelClient.embed(items:)()
{
  id v1 = *(void **)(v0 + 136);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v2 = v1;
  id v3 = v1;
  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    id v6 = *(void **)(v0 + 136);
    char v14 = *(void **)(v0 + 96);
    id v15 = *(void **)(v0 + 80);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_getErrorValue();
    uint64_t v8 = Error.localizedDescription.getter();
    *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_257DC6000, v4, v5, "Couldn't fetch embedding due to error: %s", v7, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_34();
    OUTLINED_FUNCTION_34();
  }
  else
  {
    id v10 = *(void **)(v0 + 136);
    uint64_t v11 = *(void **)(v0 + 96);
  }
  OUTLINED_FUNCTION_5_7();
  OUTLINED_FUNCTION_45_0();
  __asm { BRAA            X2, X16 }
}

uint64_t MADService.perform(_:textInputs:)()
{
  OUTLINED_FUNCTION_27();
  v1[4] = v2;
  v1[5] = v0;
  v1[3] = v3;
  v1[6] = swift_getObjectType();
  return MEMORY[0x270FA2498](MADService.perform(_:textInputs:), 0, 0);
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  long long v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v16;

  id v1 = v0[3];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    uint64_t v3 = v0[5];
    uint64_t v2 = v0[6];
    os_log_type_t v4 = swift_task_alloc();
    v0[7] = v4;
    uint64_t v5 = *(_OWORD *)(v0 + 3);
    *(void *)(v4 + 16) = v3;
    *(_OWORD *)(v4 + 24) = v5;
    *(void *)(v4 + 40) = v2;
    id v6 = (void *)swift_task_alloc();
    v0[8] = v6;
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[Float]]);
    *id v6 = v0;
    v6[1] = MADService.perform(_:textInputs:);
    return MEMORY[0x270FA2360](v0 + 2, 0, 0, 0xD000000000000016, 0x800000025867EC60, partial apply for closure #1 in MADService.perform(_:textInputs:), v4, v7);
  }
  if (one-time initialization token for answerSynthesis != -1) {
    swift_once();
  }
  unint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logging.answerSynthesis);
  id v10 = Logger.logObject.getter();
  uint64_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_257DC6000, v10, v11, "No requests to perform", v12, 2u);
    OUTLINED_FUNCTION_34();
  }

  uint64_t v13 = (uint64_t (*)(uint64_t))v0[1];
  char v14 = MEMORY[0x263F8EE78];
  return v13(v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t (*v7)();
  uint64_t v9;

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_2();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_10();
  *os_log_type_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_10();
  *id v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = MADService.perform(_:textInputs:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v7 = MADService.perform(_:textInputs:);
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_27();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t UniversalEmbeddingModelClient.deinit()
{
  return v0;
}

uint64_t UniversalEmbeddingModelClient.__deallocating_deinit()
{
  UniversalEmbeddingModelClient.deinit();
  return MEMORY[0x270FA0228](v0, 32, 7);
}

BOOL static MADService.EmbeddingError.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void MADService.EmbeddingError.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int MADService.EmbeddingError.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MADService.EmbeddingError(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static MADService.EmbeddingError.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MADService.EmbeddingError()
{
  return MADService.EmbeddingError.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance MADService.EmbeddingError(uint64_t a1)
{
  MADService.EmbeddingError.hash(into:)(a1, *v1);
}

float static MADService.convertFromUInt16BitPatternToFloat32(UInt16BitPattern:)(__int16 a1)
{
  _H0 = a1;
  __asm { FCVT            S0, H0 }
  return result;
}

void closure #1 in MADService.perform(_:textInputs:)(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a5;
  id v18 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[[Float]], Error>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v7);
  id v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 >> 62)
  {
    type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for MADTextRequest);
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for MADTextRequest);
  }
  type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for MADTextRequest);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for MADTextInput);
  Class v12 = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v13 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v14 = (v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v15 + v13, v10, v7);
  *(void *)(v15 + v14) = a3;
  *(void *)(v15 + ((v14 + 15) & 0xFFFFFFFFFFFFFFF8)) = v17;
  aBlock[4] = partial apply for closure #1 in closure #1 in MADService.perform(_:textInputs:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Int32, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_3;
  uint64_t v16 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  objc_msgSend(v18, sel_performRequests_textInputs_completionHandler_, isa, v12, v16);
  _Block_release(v16);
}

void closure #1 in closure #1 in MADService.perform(_:textInputs:)(int a1, id a2, uint64_t a3, unint64_t a4)
{
  v54[3] = *MEMORY[0x263EF8340];
  if (a2)
  {
    v54[0] = a2;
    id v4 = a2;
LABEL_3:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[[Float]], Error>);
    CheckedContinuation.resume(throwing:)();
    return;
  }
  unint64_t v5 = a4;
  if (a4 >> 62) {
    goto LABEL_42;
  }
  uint64_t v6 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6)
  {
LABEL_43:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MADService.EmbeddingError and conformance MADService.EmbeddingError();
    uint64_t v46 = swift_allocError();
    *BOOL v47 = 0;
    v54[0] = v46;
    goto LABEL_3;
  }
  while (1)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v5 & 0xC000000000000001) == 0, v5);
    if ((v5 & 0xC000000000000001) != 0) {
LABEL_45:
    }
      id v7 = (id)MEMORY[0x25A2C8550](0, v5);
    else {
      id v7 = *(id *)(v5 + 32);
    }
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    id v9 = objc_msgSend(v8, sel_error);
    if (v9)
    {
      v54[0] = v9;
      id v10 = v9;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[[Float]], Error>);
      CheckedContinuation.resume(throwing:)();

      goto LABEL_49;
    }
    unint64_t v11 = outlined bridged method (pb) of @objc MADTextEmbeddingRequest.embeddingResults.getter(v8);
    if (!v11)
    {
      lazy protocol witness table accessor for type MADService.EmbeddingError and conformance MADService.EmbeddingError();
      uint64_t v44 = swift_allocError();
      *unint64_t v45 = 1;
      v54[0] = v44;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[[Float]], Error>);
      CheckedContinuation.resume(throwing:)();
      goto LABEL_49;
    }
    unint64_t v12 = v11;
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v13)
      {
LABEL_47:
        swift_bridgeObjectRelease();
        uint64_t v14 = MEMORY[0x263F8EE78];
        goto LABEL_48;
      }
    }
    else
    {
      uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v13) {
        goto LABEL_47;
      }
    }
    uint64_t v48 = v8;
    unint64_t v51 = v12 & 0xC000000000000001;
    uint64_t v14 = MEMORY[0x263F8EE78];
    uint64_t v15 = 4;
    uint64_t v16 = 0x1F80C2000;
    uint64_t v49 = v13;
    unint64_t v50 = v12;
LABEL_14:
    unint64_t v5 = v15 - 4;
    id v17 = v51 ? (id)MEMORY[0x25A2C8550](v15 - 4, v12) : *(id *)(v12 + 8 * v15);
    id v18 = v17;
    if (!__OFADD__(v5, 1)) {
      break;
    }
    __break(1u);
LABEL_42:
    swift_bridgeObjectRetain();
    if (!_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_43;
    }
  }
  uint64_t v52 = v15 - 3;
  if (one-time initialization token for answerSynthesis != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logging.answerSynthesis);
  unint64_t v20 = v18;
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 134217984;
    id v24 = [v20 *(SEL *)(v16 + 952)];
    id v25 = objc_msgSend(v24, sel_type);

    *(void *)(v23 + 4) = v25;
    _os_log_impl(&dword_257DC6000, v21, v22, "Embedding type = %ld", (uint8_t *)v23, 0xCu);
    MEMORY[0x25A2C94B0](v23, -1, -1);
  }
  else
  {

    uint64_t v21 = v20;
  }

  uint64_t v26 = v20;
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 134217984;
    id v30 = [v26 embedding];
    id v31 = objc_msgSend(v30, sel_count);

    uint64_t v16 = (uint64_t)&unk_265435000;
    *(void *)(v29 + 4) = v31;

    _os_log_impl(&dword_257DC6000, v27, v28, "Embedding count = %ld", (uint8_t *)v29, 0xCu);
    MEMORY[0x25A2C94B0](v29, -1, -1);
  }
  else
  {

    uint64_t v27 = v26;
    uint64_t v16 = (uint64_t)&unk_265435000;
  }

  id v32 = [v26 embedding];
  id v33 = objc_msgSend(v32, sel_data);

  uint64_t v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v5 = v35;

  switch(v5 >> 62)
  {
    case 1uLL:
      if (v34 >> 32 >= (int)v34)
      {
        swift_retain();
        uint64_t v16 = 0x265435000;
        uint64_t v37 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v34, v34 >> 32);
        outlined consume of Data._Representation(v34, v5);
        goto LABEL_31;
      }
      __break(1u);
      goto LABEL_45;
    case 2uLL:
      uint64_t v38 = *(void *)(v34 + 16);
      uint64_t v39 = *(void *)(v34 + 24);
      swift_retain();
      swift_retain();
      uint64_t v40 = v39;
      uint64_t v16 = 0x265435000;
      uint64_t v37 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v38, v40);
      swift_release();
      swift_release();
LABEL_31:
      outlined consume of Data._Representation(v34, v5);
      goto LABEL_34;
    case 3uLL:
      memset(v54, 0, 14);
      uint64_t v36 = (char *)v54;
      goto LABEL_33;
    default:
      v54[0] = v34;
      LOWORD(v54[1]) = v5;
      BYTE2(v54[1]) = BYTE2(v5);
      BYTE3(v54[1]) = BYTE3(v5);
      BYTE4(v54[1]) = BYTE4(v5);
      BYTE5(v54[1]) = BYTE5(v5);
      uint64_t v36 = (char *)v54 + BYTE6(v5);
LABEL_33:
      closure #1 in closure #1 in closure #1 in MADService.perform(_:textInputs:)((char *)v54, (uint64_t)v36, &v53);
      outlined consume of Data._Representation(v34, v5);
      uint64_t v37 = v53;
LABEL_34:
      unint64_t v12 = v50;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v14 = v42;
      }
      unint64_t v41 = *(void *)(v14 + 16);
      if (v41 >= *(void *)(v14 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v14 = v43;
      }
      *(void *)(v14 + 16) = v41 + 1;
      *(void *)(v14 + 8 * v41 + 32) = v37;

      ++v15;
      if (v52 != v49) {
        goto LABEL_14;
      }
      swift_bridgeObjectRelease();
      uint64_t v8 = v48;
      break;
  }
LABEL_48:
  v54[0] = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[[Float]], Error>);
  CheckedContinuation.resume(returning:)();
LABEL_49:
}

char *closure #1 in closure #1 in closure #1 in MADService.perform(_:textInputs:)@<X0>(char *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (result)
  {
    float result = closure #1 in closure #1 in closure #1 in closure #1 in MADService.perform(_:textInputs:)(result, (a2 - (uint64_t)result) / 2, &v5);
    uint64_t v4 = v5;
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F8EE78];
  }
  *a3 = v4;
  return result;
}

char *closure #1 in closure #1 in closure #1 in closure #1 in MADService.perform(_:textInputs:)@<X0>(char *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (!a2)
  {
LABEL_7:
    *a3 = v4;
    return result;
  }
  uint64_t v5 = a2;
  uint64_t v6 = result;
  uint64_t v15 = MEMORY[0x263F8EE78];
  float result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2 & ~(a2 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = v15;
    unint64_t v7 = *(void *)(v15 + 16);
    do
    {
      _H8 = *(_WORD *)v6;
      uint64_t v16 = v4;
      unint64_t v9 = *(void *)(v4 + 24);
      if (v7 >= v9 >> 1)
      {
        float result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v7 + 1, 1);
        uint64_t v4 = v16;
      }
      __asm { FCVT            S0, H8 }
      *(void *)(v4 + 16) = v7 + 1;
      *(_DWORD *)(v4 + 4 * v7 + 32) = _S0;
      v6 += 2;
      ++v7;
      --v5;
    }
    while (v5);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

void thunk for @escaping @callee_guaranteed (@unowned Int32, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  id v6 = (char *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v6 += a1 - result;
  }
  BOOL v7 = __OFSUB__(a2, a1);
  uint64_t v8 = a2 - a1;
  if (v7)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v9 = __DataStorage._length.getter();
  if (v9 >= v8) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v9;
  }
  unint64_t v11 = &v6[v10];
  if (v6) {
    uint64_t v12 = (uint64_t)v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t result = (uint64_t)closure #1 in closure #1 in closure #1 in MADService.perform(_:textInputs:)(v6, v12, &v13);
  if (!v2) {
    return v13;
  }
  return result;
}

void outlined bridged method (mbgnn) of @objc MADTextInput.addTokenIDs(_:)(uint64_t a1, void *a2)
{
  type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for NSNumber);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a2, sel_addTokenIDs_, isa);
}

void partial apply for closure #1 in MADService.perform(_:textInputs:)(uint64_t a1)
{
  closure #1 in MADService.perform(_:textInputs:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

unint64_t lazy protocol witness table accessor for type MADService.EmbeddingError and conformance MADService.EmbeddingError()
{
  unint64_t result = lazy protocol witness table cache variable for type MADService.EmbeddingError and conformance MADService.EmbeddingError;
  if (!lazy protocol witness table cache variable for type MADService.EmbeddingError and conformance MADService.EmbeddingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MADService.EmbeddingError and conformance MADService.EmbeddingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MADService.EmbeddingError and conformance MADService.EmbeddingError;
  if (!lazy protocol witness table cache variable for type MADService.EmbeddingError and conformance MADService.EmbeddingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MADService.EmbeddingError and conformance MADService.EmbeddingError);
  }
  return result;
}

uint64_t method lookup function for UniversalEmbeddingModelClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for UniversalEmbeddingModelClient);
}

uint64_t dispatch thunk of UniversalEmbeddingModelClient.embed(items:)(uint64_t a1)
{
  id v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 104) + **(int **)(*(void *)v1 + 104));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = dispatch thunk of UniversalEmbeddingModelClient.embed(items:);
  return v6(a1);
}

uint64_t dispatch thunk of UniversalEmbeddingModelClient.embed(items:)()
{
  OUTLINED_FUNCTION_27();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_2();
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_10();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

unsigned char *storeEnumTagSinglePayload for MADService.EmbeddingError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x257F5DAFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MADService.EmbeddingError()
{
  return &type metadata for MADService.EmbeddingError;
}

uint64_t sub_257F5DB34()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[[Float]], Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, v6, v5);
}

void partial apply for closure #1 in closure #1 in MADService.perform(_:textInputs:)(int a1, void *a2)
{
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[[Float]], Error>)
                 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  closure #1 in closure #1 in MADService.perform(_:textInputs:)(a1, a2, v2 + v6, v7);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t outlined bridged method (pb) of @objc MADTextEmbeddingRequest.embeddingResults.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_embeddingResults);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for MADTextEmbeddingResult);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t OUTLINED_FUNCTION_5_7()
{
  return 0;
}

uint64_t MemoryCreationQUResult.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v28 = type metadata accessor for LocalizedStringResource.BundleDescription();
  OUTLINED_FUNCTION_1();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_5_8();
  uint64_t v8 = type metadata accessor for Locale();
  uint64_t v9 = OUTLINED_FUNCTION_81(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_6_7();
  uint64_t v10 = type metadata accessor for String.LocalizationValue();
  uint64_t v11 = OUTLINED_FUNCTION_81(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_15();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v13 = OUTLINED_FUNCTION_81(v12);
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_12_7();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v15 = OUTLINED_FUNCTION_81(v14);
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_14_10();
  uint64_t v16 = type metadata accessor for LocalizedStringResource();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_13_12();
  OUTLINED_FUNCTION_10_9();
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v16);
  uint64_t v18 = type metadata accessor for DisplayRepresentation.Image();
  OUTLINED_FUNCTION_18_10(v18);
  uint64_t v24 = a1;
  DisplayRepresentation.init(title:subtitle:image:)();
  uint64_t v19 = type metadata accessor for MemoryCreationQUResult();
  uint64_t v25 = *(int *)(v19 + 20);
  uint64_t v27 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Int>);
  OUTLINED_FUNCTION_8_5();
  static Locale.current.getter();
  uint64_t v20 = *MEMORY[0x263F06D18];
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104);
  v21(v1, v20, v28);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  *(void *)(a1 + v25) = MEMORY[0x25A2C4930](v2);
  uint64_t v26 = *(int *)(v27 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<IntentFile?>);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v21(v1, v20, v28);
  OUTLINED_FUNCTION_4_6();
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  *(void *)(a1 + v26) = MEMORY[0x25A2C48A0](v2);
  uint64_t v22 = *(int *)(v27 + 28);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v21(v1, v20, v28);
  OUTLINED_FUNCTION_4_6();
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  *(void *)(v24 + v22) = MEMORY[0x25A2C48A0](v2);
  return EntityProperty.wrappedValue.setter();
}

uint64_t type metadata accessor for MemoryCreationQUResult()
{
  uint64_t result = type metadata singleton initialization cache for MemoryCreationQUResult;
  if (!type metadata singleton initialization cache for MemoryCreationQUResult) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t MemoryCreationQUResult.version.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t one-time initialization function for typeDisplayRepresentation()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = type metadata accessor for TypeDisplayRepresentation();
  __swift_allocate_value_buffer(v4, static MemoryCreationQUResult.typeDisplayRepresentation);
  __swift_project_value_buffer(v4, (uint64_t)static MemoryCreationQUResult.typeDisplayRepresentation);
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = type metadata accessor for TypeDisplayRepresentation();
  __swift_allocate_value_buffer(v4, static SearchToolLLMQUResult.typeDisplayRepresentation);
  __swift_project_value_buffer(v4, (uint64_t)static SearchToolLLMQUResult.typeDisplayRepresentation);
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = type metadata accessor for TypeDisplayRepresentation();
  __swift_allocate_value_buffer(v4, static MediaEntity.typeDisplayRepresentation);
  __swift_project_value_buffer(v4, (uint64_t)static MediaEntity.typeDisplayRepresentation);
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = type metadata accessor for TypeDisplayRepresentation();
  __swift_allocate_value_buffer(v4, static SourceDocument.typeDisplayRepresentation);
  __swift_project_value_buffer(v4, (uint64_t)static SourceDocument.typeDisplayRepresentation);
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = type metadata accessor for TypeDisplayRepresentation();
  __swift_allocate_value_buffer(v4, static SearchAppEntity.typeDisplayRepresentation);
  __swift_project_value_buffer(v4, (uint64_t)static SearchAppEntity.typeDisplayRepresentation);
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = type metadata accessor for TypeDisplayRepresentation();
  __swift_allocate_value_buffer(v4, static SearchSpotlightEntity.typeDisplayRepresentation);
  __swift_project_value_buffer(v4, (uint64_t)static SearchSpotlightEntity.typeDisplayRepresentation);
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = type metadata accessor for TypeDisplayRepresentation();
  __swift_allocate_value_buffer(v4, static AnswerMetadata.typeDisplayRepresentation);
  __swift_project_value_buffer(v4, (uint64_t)static AnswerMetadata.typeDisplayRepresentation);
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = type metadata accessor for TypeDisplayRepresentation();
  __swift_allocate_value_buffer(v4, static SearchNLGEntity.typeDisplayRepresentation);
  __swift_project_value_buffer(v4, (uint64_t)static SearchNLGEntity.typeDisplayRepresentation);
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = type metadata accessor for TypeDisplayRepresentation();
  __swift_allocate_value_buffer(v4, static SearchToolClientType.typeDisplayRepresentation);
  __swift_project_value_buffer(v4, (uint64_t)static SearchToolClientType.typeDisplayRepresentation);
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = type metadata accessor for TypeDisplayRepresentation();
  __swift_allocate_value_buffer(v4, static SearchCATEntity.typeDisplayRepresentation);
  __swift_project_value_buffer(v4, (uint64_t)static SearchCATEntity.typeDisplayRepresentation);
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = type metadata accessor for TypeDisplayRepresentation();
  __swift_allocate_value_buffer(v4, static SearchEntityTypeIdentifier.typeDisplayRepresentation);
  __swift_project_value_buffer(v4, (uint64_t)static SearchEntityTypeIdentifier.typeDisplayRepresentation);
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = type metadata accessor for TypeDisplayRepresentation();
  __swift_allocate_value_buffer(v4, static EntityMatch.typeDisplayRepresentation);
  __swift_project_value_buffer(v4, (uint64_t)static EntityMatch.typeDisplayRepresentation);
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = type metadata accessor for TypeDisplayRepresentation();
  __swift_allocate_value_buffer(v4, static SearchContext.typeDisplayRepresentation);
  __swift_project_value_buffer(v4, (uint64_t)static SearchContext.typeDisplayRepresentation);
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

uint64_t static MemoryCreationQUResult.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for TypeDisplayRepresentation();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MemoryCreationQUResult.typeDisplayRepresentation);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static MemoryCreationQUResult.typeDisplayRepresentation.setter(uint64_t a1)
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for TypeDisplayRepresentation();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MemoryCreationQUResult.typeDisplayRepresentation);
  swift_beginAccess();
  OUTLINED_FUNCTION_30_2();
  uint64_t v5 = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v3, a1, v2);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v2);
}

uint64_t (*static MemoryCreationQUResult.typeDisplayRepresentation.modify())()
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for TypeDisplayRepresentation();
  __swift_project_value_buffer(v0, (uint64_t)static MemoryCreationQUResult.typeDisplayRepresentation);
  swift_beginAccess();
  return protocol witness for _ClientInfoProtocol.trackingConfig.modify in conformance AnswerSynthesisModelOnDevice._ClientInfo;
}

uint64_t MemoryCreationQUResult.displayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for DisplayRepresentation();
  OUTLINED_FUNCTION_7_2();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  return v5(a1, v1, v3);
}

uint64_t MemoryCreationQUResult.displayRepresentation.setter(uint64_t a1)
{
  type metadata accessor for DisplayRepresentation();
  OUTLINED_FUNCTION_7_2();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40);
  return v5(v1, a1, v3);
}

uint64_t (*MemoryCreationQUResult.displayRepresentation.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t MemoryCreationQUResult.version.getter()
{
  type metadata accessor for MemoryCreationQUResult();
  OUTLINED_FUNCTION_58_2();
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t (*MemoryCreationQUResult.version.modify())()
{
  uint64_t v1 = malloc(0x28uLL);
  OUTLINED_FUNCTION_9_6((uint64_t)v1);
  OUTLINED_FUNCTION_58_2();
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t MemoryCreationQUResult.$version.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t MemoryCreationQUResult.encodedMemoryCreationQUParse.getter()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t MemoryCreationQUResult.encodedMemoryCreationQUParse.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_7_10();
  OUTLINED_FUNCTION_19_6();
  outlined init with copy of IntentFile?(a1, v1);
  EntityProperty.wrappedValue.setter();
  return outlined destroy of IntentFile?(a1);
}

uint64_t outlined init with copy of IntentFile?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of IntentFile?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t (*MemoryCreationQUResult.encodedMemoryCreationQUParse.modify())()
{
  uint64_t v1 = malloc(0x28uLL);
  OUTLINED_FUNCTION_9_6((uint64_t)v1);
  OUTLINED_FUNCTION_19_6();
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t MemoryCreationQUResult.$encodedMemoryCreationQUParse.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t MemoryCreationQUResult.encodedMemoryCreationQUPerformanceMetrics.getter()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t key path setter for MemoryCreationQUResult.encodedMemoryCreationQUParse : MemoryCreationQUResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  uint64_t v8 = OUTLINED_FUNCTION_81(v7);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of IntentFile?(a1, (uint64_t)v10);
  return a5(v10);
}

uint64_t MemoryCreationQUResult.encodedMemoryCreationQUPerformanceMetrics.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_7_10();
  OUTLINED_FUNCTION_17_7();
  outlined init with copy of IntentFile?(a1, v1);
  EntityProperty.wrappedValue.setter();
  return outlined destroy of IntentFile?(a1);
}

uint64_t (*MemoryCreationQUResult.encodedMemoryCreationQUPerformanceMetrics.modify())()
{
  uint64_t v1 = malloc(0x28uLL);
  OUTLINED_FUNCTION_9_6((uint64_t)v1);
  OUTLINED_FUNCTION_17_7();
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

void MemoryCreationQUResult.version.modify(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t MemoryCreationQUResult.$encodedMemoryCreationQUPerformanceMetrics.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t MemoryCreationQUResult.init(parse:performanceMetrics:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v82 = a2;
  uint64_t v79 = a1;
  uint64_t v80 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  uint64_t v7 = OUTLINED_FUNCTION_81(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_185_0();
  uint64_t v72 = v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v71 = (char *)&v67 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  uint64_t v12 = OUTLINED_FUNCTION_81(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_15();
  uint64_t v70 = v14 - v13;
  type metadata accessor for IntentFile();
  OUTLINED_FUNCTION_1();
  uint64_t v74 = v16;
  uint64_t v75 = v15;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_185_0();
  unint64_t v67 = v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v73 = (char *)&v67 - v19;
  uint64_t v83 = type metadata accessor for LocalizedStringResource.BundleDescription();
  OUTLINED_FUNCTION_1();
  uint64_t v21 = v20;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for Locale();
  uint64_t v26 = OUTLINED_FUNCTION_81(v25);
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_15();
  uint64_t v27 = type metadata accessor for String.LocalizationValue();
  uint64_t v28 = OUTLINED_FUNCTION_81(v27);
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_13_12();
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v30 = OUTLINED_FUNCTION_81(v29);
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_12_7();
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v32 = OUTLINED_FUNCTION_81(v31);
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_5_8();
  uint64_t v33 = type metadata accessor for LocalizedStringResource();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_6_7();
  uint64_t v35 = type metadata accessor for MemoryCreationQUResult();
  uint64_t v84 = v35;
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_14_10();
  uint64_t v81 = v5;
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v4, 1, 1, v33);
  uint64_t v36 = type metadata accessor for DisplayRepresentation.Image();
  OUTLINED_FUNCTION_18_10(v36);
  DisplayRepresentation.init(title:subtitle:image:)();
  uint64_t v77 = *(int *)(v35 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Int>);
  OUTLINED_FUNCTION_8_5();
  static Locale.current.getter();
  uint64_t v37 = *MEMORY[0x263F06D18];
  uint64_t v76 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 104);
  uint64_t v38 = v83;
  v76(v24, v37, v83);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v39 = MEMORY[0x25A2C4930](v3);
  uint64_t v40 = v81;
  *(void *)(v81 + v77) = v39;
  uint64_t v77 = *(int *)(v84 + 24);
  uint64_t v78 = v39;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<IntentFile?>);
  OUTLINED_FUNCTION_10_9();
  uint64_t v69 = v41;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v42 = v24;
  uint64_t v43 = v24;
  uint64_t v44 = v76;
  v76(v43, v37, v38);
  OUTLINED_FUNCTION_16_10();
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v45 = v40;
  uint64_t v68 = MEMORY[0x25A2C48A0](v3);
  *(void *)(v40 + v77) = v68;
  uint64_t v46 = *(int *)(v84 + 28);
  OUTLINED_FUNCTION_10_9();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v44(v42, v37, v83);
  OUTLINED_FUNCTION_16_10();
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  *(void *)(v45 + v46) = MEMORY[0x25A2C48A0](v3);
  uint64_t v85 = 3;
  EntityProperty.wrappedValue.setter();
  uint64_t v47 = dispatch thunk of MemoryCreationQUParse.encode()();
  unint64_t v49 = v48;
  uint64_t v83 = v46;
  uint64_t v50 = type metadata accessor for UTType();
  __swift_storeEnumTagSinglePayload(v70, 1, 1, v50);
  outlined copy of Data._Representation(v47, v49);
  unint64_t v51 = v73;
  IntentFile.init(data:filename:type:)();
  uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
  uint64_t v53 = (uint64_t)v71;
  uint64_t v54 = v51;
  uint64_t v55 = v75;
  v52(v71, v54, v75);
  __swift_storeEnumTagSinglePayload(v53, 0, 1, v55);
  outlined init with copy of IntentFile?(v53, v72);
  EntityProperty.wrappedValue.setter();
  outlined destroy of IntentFile?(v53);
  uint64_t v57 = dispatch thunk of MemoryCreationQUPerformanceMetrics.encode()();
  unint64_t v59 = v58;
  __swift_storeEnumTagSinglePayload(v70, 1, 1, v50);
  outlined copy of Data._Representation(v57, v59);
  uint64_t v60 = v67;
  IntentFile.init(data:filename:type:)();
  uint64_t v78 = v57;
  uint64_t v61 = (uint64_t)v71;
  uint64_t v62 = v60;
  uint64_t v63 = v75;
  v52(v71, v62, v75);
  __swift_storeEnumTagSinglePayload(v61, 0, 1, v63);
  uint64_t v64 = v81;
  outlined init with copy of IntentFile?(v61, v72);
  EntityProperty.wrappedValue.setter();
  outlined destroy of IntentFile?(v61);
  swift_release();
  swift_release();
  outlined consume of Data._Representation(v78, v59);
  outlined consume of Data._Representation(v47, v49);
  uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
  v65((uint64_t)v67, v63);
  v65((uint64_t)v73, v63);
  uint64_t v66 = v80;
  outlined init with take of MemoryCreationQUResult(v64, v80);
  return __swift_storeEnumTagSinglePayload(v66, 0, 1, v84);
}

uint64_t protocol witness for static AppEntity.defaultQuery.getter in conformance MemoryCreationQUResult(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type MemoryCreationQUResult and conformance MemoryCreationQUResult(&lazy protocol witness table cache variable for type MemoryCreationQUResult and conformance MemoryCreationQUResult, (void (*)(uint64_t))type metadata accessor for MemoryCreationQUResult);
  return MEMORY[0x270EE09F0](a1, v2);
}

uint64_t protocol witness for Identifiable.id.getter in conformance MemoryCreationQUResult()
{
  lazy protocol witness table accessor for type MemoryCreationQUResult and conformance MemoryCreationQUResult(&lazy protocol witness table cache variable for type MemoryCreationQUResult and conformance MemoryCreationQUResult, (void (*)(uint64_t))type metadata accessor for MemoryCreationQUResult);
  return UUID.init()();
}

uint64_t protocol witness for static PersistentlyIdentifiable.persistentIdentifier.getter in conformance MemoryCreationQUResult()
{
  return MEMORY[0x270EE1C48]();
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance MemoryCreationQUResult(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type MemoryCreationQUResult and conformance MemoryCreationQUResult(&lazy protocol witness table cache variable for type MemoryCreationQUResult and conformance MemoryCreationQUResult, (void (*)(uint64_t))type metadata accessor for MemoryCreationQUResult);
  return MEMORY[0x270EE0C68](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance MemoryCreationQUResult(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type MemoryCreationQUResult and conformance MemoryCreationQUResult(&lazy protocol witness table cache variable for type MemoryCreationQUResult and conformance MemoryCreationQUResult, (void (*)(uint64_t))type metadata accessor for MemoryCreationQUResult);
  return MEMORY[0x270EE1D98](a1, v2);
}

uint64_t outlined destroy of MemoryCreationQUResult(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MemoryCreationQUResult();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of MemoryCreationQUResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MemoryCreationQUResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for AppEntity in MemoryCreationQUResult()
{
  return lazy protocol witness table accessor for type MemoryCreationQUResult and conformance MemoryCreationQUResult(&lazy protocol witness table cache variable for type MemoryCreationQUResult and conformance MemoryCreationQUResult, (void (*)(uint64_t))type metadata accessor for MemoryCreationQUResult);
}

uint64_t base witness table accessor for AppValue in MemoryCreationQUResult()
{
  return lazy protocol witness table accessor for type MemoryCreationQUResult and conformance MemoryCreationQUResult(&lazy protocol witness table cache variable for type MemoryCreationQUResult and conformance MemoryCreationQUResult, (void (*)(uint64_t))type metadata accessor for MemoryCreationQUResult);
}

uint64_t base witness table accessor for DisplayRepresentable in MemoryCreationQUResult()
{
  return lazy protocol witness table accessor for type MemoryCreationQUResult and conformance MemoryCreationQUResult(&lazy protocol witness table cache variable for type MemoryCreationQUResult and conformance MemoryCreationQUResult, (void (*)(uint64_t))type metadata accessor for MemoryCreationQUResult);
}

uint64_t base witness table accessor for Identifiable in MemoryCreationQUResult()
{
  return lazy protocol witness table accessor for type MemoryCreationQUResult and conformance MemoryCreationQUResult(&lazy protocol witness table cache variable for type MemoryCreationQUResult and conformance MemoryCreationQUResult, (void (*)(uint64_t))type metadata accessor for MemoryCreationQUResult);
}

uint64_t associated type witness table accessor for AppEntity.DefaultQuery : EntityQuery in MemoryCreationQUResult()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type _TransientAppEntityQuery<MemoryCreationQUResult> and conformance _TransientAppEntityQuery<A>, &demangling cache variable for type metadata for _TransientAppEntityQuery<MemoryCreationQUResult>);
}

uint64_t associated type witness table accessor for Identifiable.ID : EntityIdentifierConvertible in MemoryCreationQUResult()
{
  return MEMORY[0x263EFBFD0];
}

uint64_t base witness table accessor for PersistentlyIdentifiable in MemoryCreationQUResult()
{
  return lazy protocol witness table accessor for type MemoryCreationQUResult and conformance MemoryCreationQUResult(&lazy protocol witness table cache variable for type MemoryCreationQUResult and conformance MemoryCreationQUResult, (void (*)(uint64_t))type metadata accessor for MemoryCreationQUResult);
}

uint64_t base witness table accessor for TypeDisplayRepresentable in MemoryCreationQUResult()
{
  return lazy protocol witness table accessor for type MemoryCreationQUResult and conformance MemoryCreationQUResult(&lazy protocol witness table cache variable for type MemoryCreationQUResult and conformance MemoryCreationQUResult, (void (*)(uint64_t))type metadata accessor for MemoryCreationQUResult);
}

uint64_t base witness table accessor for _IntentValue in MemoryCreationQUResult()
{
  return lazy protocol witness table accessor for type MemoryCreationQUResult and conformance MemoryCreationQUResult((unint64_t *)&lazy protocol witness table cache variable for type MemoryCreationQUResult and conformance MemoryCreationQUResult, (void (*)(uint64_t))type metadata accessor for MemoryCreationQUResult);
}

uint64_t base witness table accessor for InstanceDisplayRepresentable in MemoryCreationQUResult()
{
  return lazy protocol witness table accessor for type MemoryCreationQUResult and conformance MemoryCreationQUResult(&lazy protocol witness table cache variable for type MemoryCreationQUResult and conformance MemoryCreationQUResult, (void (*)(uint64_t))type metadata accessor for MemoryCreationQUResult);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in MemoryCreationQUResult()
{
  return lazy protocol witness table accessor for type MemoryCreationQUResult and conformance MemoryCreationQUResult((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in MemoryCreationQUResult()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyResolverSpecification<MemoryCreationQUResult> and conformance EmptyResolverSpecification<A>, &demangling cache variable for type metadata for EmptyResolverSpecification<MemoryCreationQUResult>);
}

uint64_t base witness table accessor for CustomLocalizedStringResourceConvertible in MemoryCreationQUResult()
{
  return lazy protocol witness table accessor for type MemoryCreationQUResult and conformance MemoryCreationQUResult(&lazy protocol witness table cache variable for type MemoryCreationQUResult and conformance MemoryCreationQUResult, (void (*)(uint64_t))type metadata accessor for MemoryCreationQUResult);
}

uint64_t sub_257F5F908@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MemoryCreationQUResult.version.getter();
  *a1 = result;
  return result;
}

uint64_t sub_257F5F934()
{
  return MemoryCreationQUResult.version.setter();
}

uint64_t sub_257F5F95C()
{
  return MemoryCreationQUResult.encodedMemoryCreationQUParse.getter();
}

uint64_t sub_257F5F980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MemoryCreationQUResult.encodedMemoryCreationQUParse : MemoryCreationQUResult(a1, a2, a3, a4, (uint64_t (*)(char *))MemoryCreationQUResult.encodedMemoryCreationQUParse.setter);
}

uint64_t sub_257F5F9AC()
{
  return MemoryCreationQUResult.encodedMemoryCreationQUPerformanceMetrics.getter();
}

uint64_t sub_257F5F9D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MemoryCreationQUResult.encodedMemoryCreationQUParse : MemoryCreationQUResult(a1, a2, a3, a4, (uint64_t (*)(char *))MemoryCreationQUResult.encodedMemoryCreationQUPerformanceMetrics.setter);
}

uint64_t *initializeBufferWithCopyOfBuffer for MemoryCreationQUResult(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for DisplayRepresentation();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)v4 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)v4 + v8) = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for MemoryCreationQUResult(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for MemoryCreationQUResult(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MemoryCreationQUResult(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for MemoryCreationQUResult(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for MemoryCreationQUResult(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_release();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_release();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MemoryCreationQUResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257F5FE30);
}

uint64_t sub_257F5FE30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for DisplayRepresentation();
  OUTLINED_FUNCTION_30_2();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for MemoryCreationQUResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257F5FED4);
}

void sub_257F5FED4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for DisplayRepresentation();
  OUTLINED_FUNCTION_30_2();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t type metadata completion function for MemoryCreationQUResult()
{
  uint64_t result = type metadata accessor for DisplayRepresentation();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type MemoryCreationQUResult and conformance MemoryCreationQUResult(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_4_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_8()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_6_7()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_7_10()
{
  return type metadata accessor for MemoryCreationQUResult();
}

uint64_t OUTLINED_FUNCTION_8_5()
{
  return String.LocalizationValue.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_9_6(uint64_t a1)
{
  *unint64_t v1 = a1;
  return type metadata accessor for MemoryCreationQUResult();
}

uint64_t OUTLINED_FUNCTION_18_10(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t static SearchToolLLMQU.openAppWhenRun.getter()
{
  return 0;
}

uint64_t static SearchToolLLMQU.isDiscoverable.getter()
{
  return static SearchToolLLMQU.isDiscoverable;
}

uint64_t static SearchToolLLMQU.isDiscoverable.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static SearchToolLLMQU.isDiscoverable = a1;
  return result;
}

uint64_t (*static SearchToolLLMQU.isDiscoverable.modify())()
{
  return AnswerSynthesisModelOnDevice.modelVersion.modify;
}

uint64_t one-time initialization function for title()
{
  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  __swift_allocate_value_buffer(v0, static SearchToolLLMQU.title);
  __swift_project_value_buffer(v0, (uint64_t)static SearchToolLLMQU.title);
  return LocalizedStringResource.init(stringLiteral:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  __swift_allocate_value_buffer(v0, static SearchToolMCGrounding.title);
  __swift_project_value_buffer(v0, (uint64_t)static SearchToolMCGrounding.title);
  return LocalizedStringResource.init(stringLiteral:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  __swift_allocate_value_buffer(v0, static SearchToolMCQU.title);
  __swift_project_value_buffer(v0, (uint64_t)static SearchToolMCQU.title);
  return LocalizedStringResource.init(stringLiteral:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  __swift_allocate_value_buffer(v0, static OpenFlightReservationEntityIntent.title);
  __swift_project_value_buffer(v0, (uint64_t)static OpenFlightReservationEntityIntent.title);
  return LocalizedStringResource.init(stringLiteral:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  __swift_allocate_value_buffer(v0, static OpenGenericEventEntityIntent.title);
  __swift_project_value_buffer(v0, (uint64_t)static OpenGenericEventEntityIntent.title);
  return LocalizedStringResource.init(stringLiteral:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  __swift_allocate_value_buffer(v0, static OpenHotelReservationEntityIntent.title);
  __swift_project_value_buffer(v0, (uint64_t)static OpenHotelReservationEntityIntent.title);
  return LocalizedStringResource.init(stringLiteral:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  __swift_allocate_value_buffer(v0, static OpenIDCardBusinessEntityIntent.title);
  __swift_project_value_buffer(v0, (uint64_t)static OpenIDCardBusinessEntityIntent.title);
  return LocalizedStringResource.init(stringLiteral:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  __swift_allocate_value_buffer(v0, static OpenIDCardPersonalEntityIntent.title);
  __swift_project_value_buffer(v0, (uint64_t)static OpenIDCardPersonalEntityIntent.title);
  return LocalizedStringResource.init(stringLiteral:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  __swift_allocate_value_buffer(v0, static OpenMediaEntityIntent.title);
  __swift_project_value_buffer(v0, (uint64_t)static OpenMediaEntityIntent.title);
  return LocalizedStringResource.init(stringLiteral:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  __swift_allocate_value_buffer(v0, static OpenRestaurantReservationEntityIntent.title);
  __swift_project_value_buffer(v0, (uint64_t)static OpenRestaurantReservationEntityIntent.title);
  return LocalizedStringResource.init(stringLiteral:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  __swift_allocate_value_buffer(v0, static OpenSearchSpotlightEntityIntent.title);
  __swift_project_value_buffer(v0, (uint64_t)static OpenSearchSpotlightEntityIntent.title);
  return LocalizedStringResource.init(stringLiteral:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  __swift_allocate_value_buffer(v0, static OpenTicketedShowEntityIntent.title);
  __swift_project_value_buffer(v0, (uint64_t)static OpenTicketedShowEntityIntent.title);
  return LocalizedStringResource.init(stringLiteral:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  __swift_allocate_value_buffer(v0, static OpenTicketedTransportationEntityIntent.title);
  __swift_project_value_buffer(v0, (uint64_t)static OpenTicketedTransportationEntityIntent.title);
  return LocalizedStringResource.init(stringLiteral:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  __swift_allocate_value_buffer(v0, static OpenVehicleReservationEntityIntent.title);
  __swift_project_value_buffer(v0, (uint64_t)static OpenVehicleReservationEntityIntent.title);
  return LocalizedStringResource.init(stringLiteral:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  __swift_allocate_value_buffer(v0, static SearchTool.title);
  __swift_project_value_buffer(v0, (uint64_t)static SearchTool.title);
  return LocalizedStringResource.init(stringLiteral:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  __swift_allocate_value_buffer(v0, static SearchToolControl.title);
  __swift_project_value_buffer(v0, (uint64_t)static SearchToolControl.title);
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t static SearchToolLLMQU.title.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchToolLLMQU.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t one-time initialization function for description()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v1 = MEMORY[0x270FA5388](v0 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v1);
  int v5 = (char *)&v9 - v4;
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = type metadata accessor for IntentDescription();
  __swift_allocate_value_buffer(v7, static SearchToolLLMQU.description);
  __swift_project_value_buffer(v7, (uint64_t)static SearchToolLLMQU.description);
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LocalizedStringResource>);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_258661700;
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 0, 1, v6);
  return IntentDescription.init(_:categoryName:searchKeywords:resultValueName:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v1 = MEMORY[0x270FA5388](v0 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v1);
  int v5 = (char *)&v9 - v4;
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = type metadata accessor for IntentDescription();
  __swift_allocate_value_buffer(v7, static SearchToolMCGrounding.description);
  __swift_project_value_buffer(v7, (uint64_t)static SearchToolMCGrounding.description);
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LocalizedStringResource>);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_258661700;
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 0, 1, v6);
  return IntentDescription.init(_:categoryName:searchKeywords:resultValueName:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v1 = MEMORY[0x270FA5388](v0 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v1);
  int v5 = (char *)&v9 - v4;
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = type metadata accessor for IntentDescription();
  __swift_allocate_value_buffer(v7, static SearchToolMCQU.description);
  __swift_project_value_buffer(v7, (uint64_t)static SearchToolMCQU.description);
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LocalizedStringResource>);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_258661700;
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 0, 1, v6);
  return IntentDescription.init(_:categoryName:searchKeywords:resultValueName:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t vars8;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  __swift_allocate_value_buffer(v0, static OpenFlightReservationEntityIntent.description);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static OpenFlightReservationEntityIntent.description);
  IntentDescription.init(stringLiteral:)();
  uint64_t v2 = type metadata accessor for IntentDescription();
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t vars8;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  __swift_allocate_value_buffer(v0, static OpenGenericEventEntityIntent.description);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static OpenGenericEventEntityIntent.description);
  IntentDescription.init(stringLiteral:)();
  uint64_t v2 = type metadata accessor for IntentDescription();
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t vars8;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  __swift_allocate_value_buffer(v0, static OpenHotelReservationEntityIntent.description);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static OpenHotelReservationEntityIntent.description);
  IntentDescription.init(stringLiteral:)();
  uint64_t v2 = type metadata accessor for IntentDescription();
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t vars8;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  __swift_allocate_value_buffer(v0, static OpenIDCardBusinessEntityIntent.description);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static OpenIDCardBusinessEntityIntent.description);
  IntentDescription.init(stringLiteral:)();
  uint64_t v2 = type metadata accessor for IntentDescription();
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t vars8;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  __swift_allocate_value_buffer(v0, static OpenIDCardPersonalEntityIntent.description);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static OpenIDCardPersonalEntityIntent.description);
  IntentDescription.init(stringLiteral:)();
  uint64_t v2 = type metadata accessor for IntentDescription();
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t vars8;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  __swift_allocate_value_buffer(v0, static OpenMediaEntityIntent.description);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static OpenMediaEntityIntent.description);
  IntentDescription.init(stringLiteral:)();
  uint64_t v2 = type metadata accessor for IntentDescription();
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t vars8;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  __swift_allocate_value_buffer(v0, static OpenRestaurantReservationEntityIntent.description);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static OpenRestaurantReservationEntityIntent.description);
  IntentDescription.init(stringLiteral:)();
  uint64_t v2 = type metadata accessor for IntentDescription();
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t vars8;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  __swift_allocate_value_buffer(v0, static OpenSearchSpotlightEntityIntent.description);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static OpenSearchSpotlightEntityIntent.description);
  IntentDescription.init(stringLiteral:)();
  uint64_t v2 = type metadata accessor for IntentDescription();
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t vars8;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  __swift_allocate_value_buffer(v0, static OpenTicketedShowEntityIntent.description);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static OpenTicketedShowEntityIntent.description);
  IntentDescription.init(stringLiteral:)();
  uint64_t v2 = type metadata accessor for IntentDescription();
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t vars8;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  __swift_allocate_value_buffer(v0, static OpenTicketedTransportationEntityIntent.description);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static OpenTicketedTransportationEntityIntent.description);
  IntentDescription.init(stringLiteral:)();
  uint64_t v2 = type metadata accessor for IntentDescription();
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t vars8;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  __swift_allocate_value_buffer(v0, static OpenVehicleReservationEntityIntent.description);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static OpenVehicleReservationEntityIntent.description);
  IntentDescription.init(stringLiteral:)();
  uint64_t v2 = type metadata accessor for IntentDescription();
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v1 = MEMORY[0x270FA5388](v0 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v1);
  int v5 = (char *)&v9 - v4;
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = type metadata accessor for IntentDescription();
  __swift_allocate_value_buffer(v7, static SearchTool.description);
  __swift_project_value_buffer(v7, (uint64_t)static SearchTool.description);
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LocalizedStringResource>);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_258661700;
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 0, 1, v6);
  return IntentDescription.init(_:categoryName:searchKeywords:resultValueName:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v1 = MEMORY[0x270FA5388](v0 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v1);
  int v5 = (char *)&v9 - v4;
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = type metadata accessor for IntentDescription();
  __swift_allocate_value_buffer(v7, static SearchToolControl.description);
  __swift_project_value_buffer(v7, (uint64_t)static SearchToolControl.description);
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LocalizedStringResource>);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_258661700;
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 0, 1, v6);
  return IntentDescription.init(_:categoryName:searchKeywords:resultValueName:)();
}

uint64_t static SearchToolLLMQU.description.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchToolLLMQU.description.getter(&one-time initialization token for description, MEMORY[0x263EFBA28], (uint64_t)static SearchToolLLMQU.description, a1);
}

uint64_t static SearchToolLLMQU.description.setter(uint64_t a1)
{
  return static SearchToolLLMQU.description.setter(a1, &one-time initialization token for description, MEMORY[0x263EFBA28], (uint64_t)static SearchToolLLMQU.description);
}

uint64_t (*static SearchToolLLMQU.description.modify())()
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for IntentDescription();
  __swift_project_value_buffer(v0, (uint64_t)static SearchToolLLMQU.description);
  OUTLINED_FUNCTION_21_8();
  return AnswerSynthesisModelOnDevice.modelVersion.modify;
}

uint64_t SearchToolLLMQU.query.getter()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchToolLLMQU.query : SearchToolLLMQU@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SearchToolLLMQU.query.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for SearchToolLLMQU.query : SearchToolLLMQU()
{
  return SearchToolLLMQU.query.setter();
}

uint64_t SearchToolLLMQU.query.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*SearchToolLLMQU.query.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *uint64_t v0 = v1;
  v1[4] = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchToolLLMQU.$query.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t SearchToolLLMQU.init()()
{
  OUTLINED_FUNCTION_27_7();
  uint64_t v4 = type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_1();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_15();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v12 = OUTLINED_FUNCTION_81(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_59_0();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.IntentInputOptions?);
  uint64_t v14 = OUTLINED_FUNCTION_81(v13);
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_18_8();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v16 = OUTLINED_FUNCTION_81(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_14_11();
  uint64_t v17 = type metadata accessor for LocalizedStringResource();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_13_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<String>);
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v3, 0, 1, v17);
  uint64_t v19 = type metadata accessor for String.IntentInputOptions();
  OUTLINED_FUNCTION_32(v2, v20, v21, v19);
  uint64_t v22 = type metadata accessor for IntentDialog();
  OUTLINED_FUNCTION_32(v1, v23, v24, v22);
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v10, *MEMORY[0x263EFBDC8], v4);
  uint64_t result = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)();
  *uint64_t v0 = result;
  return result;
}

uint64_t SearchToolLLMQU.perform()()
{
  OUTLINED_FUNCTION_27();
  v1[10] = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchToolLLMQUResult?);
  v1[11] = v3;
  OUTLINED_FUNCTION_81(v3);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = *v0;
  v1[12] = v4;
  v1[13] = v5;
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;

  if (one-time initialization token for stextension != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[14] = __swift_project_value_buffer(v1, (uint64_t)static Logging.stextension);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)OUTLINED_FUNCTION_14_1();
    uint64_t v8 = OUTLINED_FUNCTION_13_1();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_retain();
    IntentParameter.wrappedValue.getter();
    swift_release();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0[4], v0[5], &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_257DC6000, v2, v3, "SearchTool LLM QU perform() with query: %s", v4, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_34();
    OUTLINED_FUNCTION_34();
  }
  else
  {
    swift_release_n();
  }

  type metadata accessor for OmniSearchService();
  swift_retain();
  IntentParameter.wrappedValue.getter();
  swift_release();
  v0[15] = v0[3];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[16] = v5;
  *uint64_t v5 = v0;
  v5[1] = SearchToolLLMQU.perform();
  return static OmniSearchService.parseWithMemoryCreationQU(_:originatorPID:jsonParse:personNames:petNames:locations:currentTime:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_2();
  *(void *)(v2 + 136) = v1;
  *(void *)(v2 + 144) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _DWORD *v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t (*v30)(void);
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;

  uint64_t v37 = v0;
  uint64_t v1 = v0[17];
  uint64_t v2 = OBJC_IVAR____TtC10OmniSearch10LLMQUParse_parseV2;
  swift_retain();
  MemoryCreationQUParse.attributes.getter();
  swift_release();
  swift_retain();
  uint64_t v35 = MemoryCreationQUParse.isTrip.getter();
  swift_release();
  uint64_t v33 = v2;
  uint64_t v34 = v1;
  swift_retain();
  LOBYTE(v1) = MemoryCreationQUParse.isOpenEndedTimeRange.getter();
  swift_release();
  swift_bridgeObjectRetain();
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.info.getter();
  uint64_t v32 = v1;
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_14_1();
    uint64_t v36 = OUTLINED_FUNCTION_13_1();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v6 = type metadata accessor for MemoryCreationQUParseAttributes();
    uint64_t v7 = swift_bridgeObjectRetain();
    uint64_t v8 = MEMORY[0x25A2C7E60](v7, v6);
    uint64_t v10 = v9;
    swift_bridgeObjectRelease();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_257DC6000, v3, v4, "SearchTool LLM QU returns attributes: %s", v5, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_34();
    OUTLINED_FUNCTION_34();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v11 = Logger.logObject.getter();
  uint64_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (_DWORD *)OUTLINED_FUNCTION_14_1();
    uint64_t v36 = OUTLINED_FUNCTION_13_1();
    int *v13 = 136315138;
    if (v35) {
      uint64_t v14 = 1702195828;
    }
    else {
      uint64_t v14 = 0x65736C6166;
    }
    if (v35) {
      uint64_t v15 = 0xE400000000000000;
    }
    else {
      uint64_t v15 = 0xE500000000000000;
    }
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_28_5(&dword_257DC6000, v16, v17, "SearchTool LLM QU returns isTrip: %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_34();
    OUTLINED_FUNCTION_34();
  }

  uint64_t v18 = Logger.logObject.getter();
  uint64_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (_DWORD *)OUTLINED_FUNCTION_14_1();
    uint64_t v36 = OUTLINED_FUNCTION_13_1();
    NSObject *v20 = 136315138;
    uint64_t v21 = v32;
    if (v32) {
      uint64_t v22 = 1702195828;
    }
    else {
      uint64_t v22 = 0x65736C6166;
    }
    if (v32) {
      uint64_t v23 = 0xE400000000000000;
    }
    else {
      uint64_t v23 = 0xE500000000000000;
    }
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_28_5(&dword_257DC6000, v24, v25, "SearchTool LLM QU returns isOpenEndedTimeRange: %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_34();
    OUTLINED_FUNCTION_34();
  }
  else
  {

    uint64_t v21 = v32;
  }
  uint64_t v26 = (char *)v0[17];
  uint64_t v27 = v0[12];
  uint64_t v28 = *(void *)(v34 + v33);
  uint64_t v29 = *(void **)&v26[OBJC_IVAR____TtC10OmniSearch10LLMQUParse_attributedParse];
  swift_retain();
  SearchToolLLMQUResult.init(parse:attributedString:isTrip:isOpenEndedTimeRange:)(v28, v29, v35 & 1, v21 & 1, v27);
  lazy protocol witness table accessor for type SearchToolLLMQUResult? and conformance <A> A?();
  static IntentResult.result<A>(value:)();

  outlined destroy of SearchResult?(v27, &demangling cache variable for type metadata for SearchToolLLMQUResult?);
  swift_task_dealloc();
  uint64_t v30 = (uint64_t (*)(void))v0[1];
  return v30();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_27();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t SearchToolLLMQUResult.init(parse:attributedString:isTrip:isOpenEndedTimeRange:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v100 = a3;
  int v101 = a4;
  id v110 = a2;
  uint64_t v106 = a1;
  uint64_t v102 = a5;
  v114[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  uint64_t v11 = OUTLINED_FUNCTION_81(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_185_0();
  uint64_t v96 = v12;
  MEMORY[0x270FA5388](v13);
  long long v95 = (char *)v91 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  uint64_t v16 = OUTLINED_FUNCTION_81(v15);
  MEMORY[0x270FA5388](v16);
  uint64_t v94 = (uint64_t)v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IntentFile();
  OUTLINED_FUNCTION_1();
  uint64_t v104 = v19;
  uint64_t v105 = v18;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_185_0();
  uint64_t v92 = v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v103 = (char *)v91 - v22;
  uint64_t v111 = type metadata accessor for LocalizedStringResource.BundleDescription();
  OUTLINED_FUNCTION_1();
  uint64_t v113 = v23;
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_7_11();
  OUTLINED_FUNCTION_27_7();
  uint64_t v25 = type metadata accessor for Locale();
  uint64_t v26 = OUTLINED_FUNCTION_81(v25);
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_7_11();
  uint64_t v27 = type metadata accessor for String.LocalizationValue();
  uint64_t v28 = OUTLINED_FUNCTION_81(v27);
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_7_11();
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v30 = OUTLINED_FUNCTION_81(v29);
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_12_7();
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v32 = OUTLINED_FUNCTION_81(v31);
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_13_12();
  uint64_t v33 = type metadata accessor for LocalizedStringResource();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_18_8();
  uint64_t v35 = type metadata accessor for SearchToolLLMQUResult();
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_59_0();
  OUTLINED_FUNCTION_17_8();
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v9, 1, 1, v33);
  uint64_t v36 = type metadata accessor for DisplayRepresentation.Image();
  OUTLINED_FUNCTION_32(v6, v37, v38, v36);
  uint64_t v112 = v7;
  DisplayRepresentation.init(title:subtitle:image:)();
  uint64_t v98 = *(int *)(v35 + 20);
  uint64_t v109 = v35;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Int>);
  OUTLINED_FUNCTION_8_5();
  static Locale.current.getter();
  unsigned int v107 = *MEMORY[0x263F06D18];
  uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 104);
  v113 += 104;
  long long v108 = v39;
  uint64_t v40 = v5;
  uint64_t v41 = v111;
  ((void (*)(uint64_t))v39)(v5);
  OUTLINED_FUNCTION_16_11();
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v99 = MEMORY[0x25A2C4930](v8);
  *(void *)(v7 + v98) = v99;
  uint64_t v42 = *(int *)(v35 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<IntentFile?>);
  v91[0] = "mber of the response";
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v43 = v5;
  uint64_t v44 = v107;
  uint64_t v45 = v108;
  v108(v43, v107, v41);
  uint64_t v97 = v8;
  OUTLINED_FUNCTION_18_11();
  uint64_t v46 = v40;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v47 = MEMORY[0x25A2C48A0](v8);
  v91[1] = v42;
  uint64_t v48 = v112;
  *(void *)(v112 + v42) = v47;
  uint64_t v49 = v109;
  uint64_t v98 = *(int *)(v109 + 28);
  OUTLINED_FUNCTION_11_8();
  static Locale.current.getter();
  uint64_t v50 = v46;
  uint64_t v51 = v46;
  uint64_t v52 = v44;
  uint64_t v53 = v44;
  uint64_t v54 = v111;
  v45(v51, v53, v111);
  uint64_t v55 = v97;
  OUTLINED_FUNCTION_26();
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v56 = v55;
  uint64_t v93 = MEMORY[0x25A2C48A0](v55);
  *(void *)(v48 + v98) = v93;
  uint64_t v57 = v49;
  uint64_t v98 = *(int *)(v49 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Bool>);
  OUTLINED_FUNCTION_30_8();
  static Locale.current.getter();
  unint64_t v58 = v108;
  v108(v50, v52, v54);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v59 = MEMORY[0x25A2C4910](v56);
  uint64_t v60 = v112;
  *(void *)(v112 + v98) = v59;
  uint64_t v98 = *(int *)(v57 + 36);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v58(v50, v107, v111);
  OUTLINED_FUNCTION_16_11();
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v61 = MEMORY[0x25A2C4910](v56);
  *(void *)(v60 + v98) = v61;
  v114[0] = (id)3;
  EntityProperty.wrappedValue.setter();
  LOBYTE(v114[0]) = v100;
  EntityProperty.wrappedValue.setter();
  LOBYTE(v114[0]) = v101;
  EntityProperty.wrappedValue.setter();
  uint64_t v62 = self;
  v114[0] = 0;
  id v63 = objc_msgSend(v62, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v110, 1, v114);
  id v64 = v114[0];
  if (v63)
  {
    uint64_t v65 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v67 = v66;

    uint64_t v68 = type metadata accessor for UTType();
    __swift_storeEnumTagSinglePayload(v94, 1, 1, v68);
    outlined copy of Data._Representation(v65, v67);
    uint64_t v69 = v103;
    IntentFile.init(data:filename:type:)();
    uint64_t v70 = *(void (**)(char *, char *, uint64_t))(v104 + 16);
    uint64_t v71 = (uint64_t)v95;
    uint64_t v72 = v69;
    uint64_t v73 = v105;
    v70(v95, v72, v105);
    __swift_storeEnumTagSinglePayload(v71, 0, 1, v73);
    outlined init with copy of IntentFile?(v71, v96);
    EntityProperty.wrappedValue.setter();
    outlined destroy of SearchResult?(v71, (uint64_t *)&demangling cache variable for type metadata for IntentFile?);
    uint64_t v80 = dispatch thunk of MemoryCreationQUParse.encode()();
    unint64_t v82 = v81;
    __swift_storeEnumTagSinglePayload(v94, 1, 1, v68);
    outlined copy of Data._Representation(v80, v82);
    uint64_t v83 = v92;
    IntentFile.init(data:filename:type:)();
    uint64_t v84 = (uint64_t)v95;
    uint64_t v85 = v105;
    v70(v95, v83, v105);
    __swift_storeEnumTagSinglePayload(v84, 0, 1, v85);
    uint64_t v86 = v112;
    outlined init with copy of IntentFile?(v84, v96);
    EntityProperty.wrappedValue.setter();
    outlined destroy of SearchResult?(v84, (uint64_t *)&demangling cache variable for type metadata for IntentFile?);
    swift_release();

    outlined consume of Data._Representation(v80, v82);
    outlined consume of Data._Representation(v65, v67);
    uint64_t v87 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
    v87((uint64_t)v83, v85);
    v87((uint64_t)v103, v85);
    uint64_t v88 = v102;
    outlined init with take of SearchToolLLMQUResult(v86, v102);
    uint64_t v89 = 0;
  }
  else
  {
    uint64_t v74 = v64;
    uint64_t v75 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v88 = v102;
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v76 = type metadata accessor for Logger();
    __swift_project_value_buffer(v76, (uint64_t)static Logging.search);
    uint64_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v79 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v79 = 0;
      _os_log_impl(&dword_257DC6000, v77, v78, "Unable to encode this NSAttributedString or LLMQUParse as Data", v79, 2u);
      OUTLINED_FUNCTION_34();
    }

    swift_release();
    outlined destroy of SearchToolLLMQUResult(v112);
    uint64_t v89 = 1;
  }
  return __swift_storeEnumTagSinglePayload(v88, v89, 1, v109);
}

uint64_t protocol witness for static AppIntent.authenticationPolicy.getter in conformance SearchToolLLMQU()
{
  return MEMORY[0x270EE0D18]();
}

uint64_t protocol witness for static AppIntent.description.getter in conformance SearchToolLLMQU()
{
  return MEMORY[0x270EE0CB0]();
}

uint64_t protocol witness for AppIntent.perform() in conformance SearchToolLLMQU()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for AppIntent.perform() in conformance SearchToolLLMQU;
  return SearchToolLLMQU.perform()();
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_2();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t protocol witness for static PersistentlyIdentifiable.persistentIdentifier.getter in conformance SearchToolLLMQU(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SearchToolLLMQU and conformance SearchToolLLMQU();
  return MEMORY[0x270EE0D28](a1, v2);
}

uint64_t SearchToolLLMQUResult.init()()
{
  OUTLINED_FUNCTION_27_7();
  uint64_t v34 = type metadata accessor for LocalizedStringResource.BundleDescription();
  OUTLINED_FUNCTION_1();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_14_11();
  uint64_t v7 = type metadata accessor for Locale();
  uint64_t v8 = OUTLINED_FUNCTION_81(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_15();
  uint64_t v9 = type metadata accessor for String.LocalizationValue();
  uint64_t v10 = OUTLINED_FUNCTION_81(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_18_8();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v12 = OUTLINED_FUNCTION_81(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_12_7();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v14 = OUTLINED_FUNCTION_81(v13);
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_15();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = type metadata accessor for LocalizedStringResource();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_13_12();
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v17, 1, 1, v18);
  uint64_t v20 = type metadata accessor for DisplayRepresentation.Image();
  OUTLINED_FUNCTION_32(v1, v21, v22, v20);
  DisplayRepresentation.init(title:subtitle:image:)();
  uint64_t v23 = type metadata accessor for SearchToolLLMQUResult();
  uint64_t v30 = *(int *)(v23 + 20);
  uint64_t v24 = (int *)v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Int>);
  OUTLINED_FUNCTION_8_5();
  static Locale.current.getter();
  unsigned int v33 = *MEMORY[0x263F06D18];
  uint64_t v29 = *(void (**)(uint64_t))(v5 + 104);
  uint64_t v28 = v2;
  v29(v2);
  OUTLINED_FUNCTION_18_11();
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  *(void *)(v0 + v30) = MEMORY[0x25A2C4930](v3);
  uint64_t v25 = v24[6];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<IntentFile?>);
  OUTLINED_FUNCTION_17_8();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  ((void (*)(uint64_t, void, uint64_t))v29)(v28, v33, v34);
  OUTLINED_FUNCTION_18_11();
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  *(void *)(v0 + v25) = MEMORY[0x25A2C48A0](v3);
  uint64_t v31 = v24[7];
  OUTLINED_FUNCTION_11_8();
  static Locale.current.getter();
  ((void (*)(uint64_t, void, uint64_t))v29)(v28, v33, v34);
  OUTLINED_FUNCTION_26();
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  *(void *)(v0 + v31) = MEMORY[0x25A2C48A0](v3);
  uint64_t v32 = v24[8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Bool>);
  OUTLINED_FUNCTION_30_8();
  static Locale.current.getter();
  ((void (*)(uint64_t, void, uint64_t))v29)(v28, v33, v34);
  OUTLINED_FUNCTION_12_8();
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  *(void *)(v0 + v32) = MEMORY[0x25A2C4910](v3);
  uint64_t v26 = v24[9];
  OUTLINED_FUNCTION_17_8();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  ((void (*)(uint64_t, void, uint64_t))v29)(v28, v33, v34);
  OUTLINED_FUNCTION_12_8();
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  *(void *)(v0 + v26) = MEMORY[0x25A2C4910](v3);
  EntityProperty.wrappedValue.setter();
  EntityProperty.wrappedValue.setter();
  return EntityProperty.wrappedValue.setter();
}

uint64_t SearchToolLLMQUResult.isTrip.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t SearchToolLLMQUResult.isOpenEndedTimeRange.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t SearchToolLLMQUResult.version.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t static SearchToolLLMQUResult.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchToolLLMQU.description.getter(&one-time initialization token for typeDisplayRepresentation, MEMORY[0x263EFBE48], (uint64_t)static SearchToolLLMQUResult.typeDisplayRepresentation, a1);
}

uint64_t static SearchToolLLMQU.description.getter@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = a2(0);
  uint64_t v8 = __swift_project_value_buffer(v7, a3);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a4, v8, v7);
}

uint64_t static SearchToolLLMQUResult.typeDisplayRepresentation.setter(uint64_t a1)
{
  return static SearchToolLLMQU.description.setter(a1, &one-time initialization token for typeDisplayRepresentation, MEMORY[0x263EFBE48], (uint64_t)static SearchToolLLMQUResult.typeDisplayRepresentation);
}

uint64_t static SearchToolLLMQU.description.setter(uint64_t a1, void *a2, uint64_t (*a3)(void), uint64_t a4)
{
  if (*a2 != -1) {
    swift_once();
  }
  uint64_t v7 = a3(0);
  uint64_t v8 = __swift_project_value_buffer(v7, a4);
  swift_beginAccess();
  OUTLINED_FUNCTION_30_2();
  uint64_t v10 = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(v8, a1, v7);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, v7);
}

uint64_t (*static SearchToolLLMQUResult.typeDisplayRepresentation.modify())()
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for TypeDisplayRepresentation();
  __swift_project_value_buffer(v0, (uint64_t)static SearchToolLLMQUResult.typeDisplayRepresentation);
  OUTLINED_FUNCTION_21_8();
  return protocol witness for _ClientInfoProtocol.trackingConfig.modify in conformance AnswerSynthesisModelOnDevice._ClientInfo;
}

uint64_t SearchToolLLMQUResult.displayRepresentation.getter()
{
  OUTLINED_FUNCTION_27_7();
  type metadata accessor for DisplayRepresentation();
  OUTLINED_FUNCTION_7_2();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  return v4(v0, v1, v2);
}

uint64_t SearchToolLLMQUResult.displayRepresentation.setter(uint64_t a1)
{
  type metadata accessor for DisplayRepresentation();
  OUTLINED_FUNCTION_7_2();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40);
  return v5(v1, a1, v3);
}

uint64_t (*SearchToolLLMQUResult.displayRepresentation.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t SearchToolLLMQUResult.version.getter()
{
  type metadata accessor for SearchToolLLMQUResult();
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t (*SearchToolLLMQUResult.version.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_10_10((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchToolLLMQUResult.$version.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchToolLLMQUResult.encodedMemoryCreationQUParse.getter()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t SearchToolLLMQUResult.encodedMemoryCreationQUParse.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_13_13();
  outlined init with copy of IntentFile?(a1, v1);
  EntityProperty.wrappedValue.setter();
  return outlined destroy of SearchResult?(a1, (uint64_t *)&demangling cache variable for type metadata for IntentFile?);
}

uint64_t (*SearchToolLLMQUResult.encodedMemoryCreationQUParse.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_10_10((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchToolLLMQUResult.$encodedMemoryCreationQUParse.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchToolLLMQUResult.encodedParse.getter()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t key path setter for SearchToolLLMQUResult.encodedMemoryCreationQUParse : SearchToolLLMQUResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  uint64_t v9 = OUTLINED_FUNCTION_81(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_59_0();
  outlined init with copy of IntentFile?(a1, v5);
  return a5(v5);
}

uint64_t SearchToolLLMQUResult.encodedParse.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_13_13();
  outlined init with copy of IntentFile?(a1, v1);
  EntityProperty.wrappedValue.setter();
  return outlined destroy of SearchResult?(a1, (uint64_t *)&demangling cache variable for type metadata for IntentFile?);
}

uint64_t (*SearchToolLLMQUResult.encodedParse.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_10_10((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchToolLLMQUResult.$encodedParse.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchToolLLMQUResult.isTrip.getter()
{
  type metadata accessor for SearchToolLLMQUResult();
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t (*SearchToolLLMQUResult.isTrip.modify())()
{
  unsigned __int8 v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_10_10((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchToolLLMQUResult.$isTrip.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchToolLLMQUResult.isOpenEndedTimeRange.getter()
{
  type metadata accessor for SearchToolLLMQUResult();
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t (*SearchToolLLMQUResult.isOpenEndedTimeRange.modify())()
{
  unsigned __int8 v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_10_10((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchToolLLMQUResult.$isOpenEndedTimeRange.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t protocol witness for static AppEntity.defaultQuery.getter in conformance SearchToolLLMQUResult(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult(&lazy protocol witness table cache variable for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult, (void (*)(uint64_t))type metadata accessor for SearchToolLLMQUResult);
  return MEMORY[0x270EE09F0](a1, v2);
}

uint64_t protocol witness for Identifiable.id.getter in conformance SearchToolLLMQUResult()
{
  lazy protocol witness table accessor for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult(&lazy protocol witness table cache variable for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult, (void (*)(uint64_t))type metadata accessor for SearchToolLLMQUResult);
  return UUID.init()();
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance SearchToolLLMQUResult(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult(&lazy protocol witness table cache variable for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult, (void (*)(uint64_t))type metadata accessor for SearchToolLLMQUResult);
  return MEMORY[0x270EE0C68](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance SearchToolLLMQUResult(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult(&lazy protocol witness table cache variable for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult, (void (*)(uint64_t))type metadata accessor for SearchToolLLMQUResult);
  return MEMORY[0x270EE1D98](a1, v2);
}

unint64_t lazy protocol witness table accessor for type SearchToolLLMQUResult? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchToolLLMQUResult? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type SearchToolLLMQUResult? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for SearchToolLLMQUResult?);
    lazy protocol witness table accessor for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult(&lazy protocol witness table cache variable for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult, (void (*)(uint64_t))type metadata accessor for SearchToolLLMQUResult);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolLLMQUResult? and conformance <A> A?);
  }
  return result;
}

uint64_t type metadata accessor for SearchToolLLMQUResult()
{
  uint64_t result = type metadata singleton initialization cache for SearchToolLLMQUResult;
  if (!type metadata singleton initialization cache for SearchToolLLMQUResult) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined destroy of SearchToolLLMQUResult(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SearchToolLLMQUResult();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of SearchToolLLMQUResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchToolLLMQUResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type SearchToolLLMQU and conformance SearchToolLLMQU()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchToolLLMQU and conformance SearchToolLLMQU;
  if (!lazy protocol witness table cache variable for type SearchToolLLMQU and conformance SearchToolLLMQU)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolLLMQU and conformance SearchToolLLMQU);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchToolLLMQU and conformance SearchToolLLMQU;
  if (!lazy protocol witness table cache variable for type SearchToolLLMQU and conformance SearchToolLLMQU)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolLLMQU and conformance SearchToolLLMQU);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchToolLLMQU and conformance SearchToolLLMQU;
  if (!lazy protocol witness table cache variable for type SearchToolLLMQU and conformance SearchToolLLMQU)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolLLMQU and conformance SearchToolLLMQU);
  }
  return result;
}

uint64_t associated type witness table accessor for AppIntent.PerformResult : IntentResult in SearchToolLLMQU()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t associated type witness table accessor for AppIntent.SummaryContent : ParameterSummary in SearchToolLLMQU()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for AppEntity in SearchToolLLMQUResult()
{
  return lazy protocol witness table accessor for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult(&lazy protocol witness table cache variable for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult, (void (*)(uint64_t))type metadata accessor for SearchToolLLMQUResult);
}

uint64_t base witness table accessor for AppValue in SearchToolLLMQUResult()
{
  return lazy protocol witness table accessor for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult(&lazy protocol witness table cache variable for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult, (void (*)(uint64_t))type metadata accessor for SearchToolLLMQUResult);
}

uint64_t base witness table accessor for DisplayRepresentable in SearchToolLLMQUResult()
{
  return lazy protocol witness table accessor for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult(&lazy protocol witness table cache variable for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult, (void (*)(uint64_t))type metadata accessor for SearchToolLLMQUResult);
}

uint64_t base witness table accessor for Identifiable in SearchToolLLMQUResult()
{
  return lazy protocol witness table accessor for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult(&lazy protocol witness table cache variable for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult, (void (*)(uint64_t))type metadata accessor for SearchToolLLMQUResult);
}

uint64_t associated type witness table accessor for AppEntity.DefaultQuery : EntityQuery in SearchToolLLMQUResult()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type _TransientAppEntityQuery<SearchToolLLMQUResult> and conformance _TransientAppEntityQuery<A>, &demangling cache variable for type metadata for _TransientAppEntityQuery<SearchToolLLMQUResult>);
}

uint64_t base witness table accessor for PersistentlyIdentifiable in SearchToolLLMQUResult()
{
  return lazy protocol witness table accessor for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult(&lazy protocol witness table cache variable for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult, (void (*)(uint64_t))type metadata accessor for SearchToolLLMQUResult);
}

uint64_t base witness table accessor for TypeDisplayRepresentable in SearchToolLLMQUResult()
{
  return lazy protocol witness table accessor for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult(&lazy protocol witness table cache variable for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult, (void (*)(uint64_t))type metadata accessor for SearchToolLLMQUResult);
}

uint64_t base witness table accessor for _IntentValue in SearchToolLLMQUResult()
{
  return lazy protocol witness table accessor for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult(&lazy protocol witness table cache variable for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult, (void (*)(uint64_t))type metadata accessor for SearchToolLLMQUResult);
}

uint64_t base witness table accessor for InstanceDisplayRepresentable in SearchToolLLMQUResult()
{
  return lazy protocol witness table accessor for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult(&lazy protocol witness table cache variable for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult, (void (*)(uint64_t))type metadata accessor for SearchToolLLMQUResult);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in SearchToolLLMQUResult()
{
  return lazy protocol witness table accessor for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in SearchToolLLMQUResult()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyResolverSpecification<SearchToolLLMQUResult> and conformance EmptyResolverSpecification<A>, &demangling cache variable for type metadata for EmptyResolverSpecification<SearchToolLLMQUResult>);
}

uint64_t base witness table accessor for CustomLocalizedStringResourceConvertible in SearchToolLLMQUResult()
{
  return lazy protocol witness table accessor for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult(&lazy protocol witness table cache variable for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult, (void (*)(uint64_t))type metadata accessor for SearchToolLLMQUResult);
}

uint64_t sub_257F63708@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SearchToolLLMQUResult.version.getter();
  *a1 = result;
  return result;
}

uint64_t sub_257F63734()
{
  return SearchToolLLMQUResult.version.setter();
}

uint64_t sub_257F6375C()
{
  return SearchToolLLMQUResult.encodedMemoryCreationQUParse.getter();
}

uint64_t sub_257F63780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchToolLLMQUResult.encodedMemoryCreationQUParse : SearchToolLLMQUResult(a1, a2, a3, a4, SearchToolLLMQUResult.encodedMemoryCreationQUParse.setter);
}

uint64_t sub_257F637AC()
{
  return SearchToolLLMQUResult.encodedParse.getter();
}

uint64_t sub_257F637D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchToolLLMQUResult.encodedMemoryCreationQUParse : SearchToolLLMQUResult(a1, a2, a3, a4, SearchToolLLMQUResult.encodedParse.setter);
}

uint64_t sub_257F637FC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SearchToolLLMQUResult.isTrip.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_257F6382C()
{
  return SearchToolLLMQUResult.isTrip.setter();
}

uint64_t sub_257F63854@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SearchToolLLMQUResult.isOpenEndedTimeRange.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_257F63884()
{
  return SearchToolLLMQUResult.isOpenEndedTimeRange.setter();
}

ValueMetadata *type metadata accessor for SearchToolLLMQU()
{
  return &type metadata for SearchToolLLMQU;
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchToolLLMQUResult(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for DisplayRepresentation();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)v4 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)v4 + v8) = *(uint64_t *)((char *)a2 + v8);
    uint64_t v9 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v4 + v9) = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for SearchToolLLMQUResult(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for SearchToolLLMQUResult(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SearchToolLLMQUResult(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for SearchToolLLMQUResult(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for SearchToolLLMQUResult(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_release();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_release();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_release();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_release();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchToolLLMQUResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257F63DD4);
}

uint64_t sub_257F63DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for DisplayRepresentation();
  OUTLINED_FUNCTION_30_2();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SearchToolLLMQUResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257F63E78);
}

void sub_257F63E78(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for DisplayRepresentation();
  OUTLINED_FUNCTION_30_2();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t type metadata completion function for SearchToolLLMQUResult()
{
  uint64_t result = type metadata accessor for DisplayRepresentation();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_257F63FA4()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IntentResultContainer<SearchToolLLMQUResult?, Never, Never, Never> and conformance IntentResultContainer<A, B, C, D>, &demangling cache variable for type metadata for IntentResultContainer<SearchToolLLMQUResult?, Never, Never, Never>);
}

uint64_t lazy protocol witness table accessor for type SearchToolLLMQUResult and conformance SearchToolLLMQUResult(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_10_10(uint64_t a1)
{
  *unint64_t v1 = a1;
  return type metadata accessor for SearchToolLLMQUResult();
}

uint64_t OUTLINED_FUNCTION_11_8()
{
  return String.LocalizationValue.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_12_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_13()
{
  return type metadata accessor for SearchToolLLMQUResult();
}

uint64_t OUTLINED_FUNCTION_14_11()
{
  return 0;
}

void *OUTLINED_FUNCTION_15_9()
{
  return malloc(0x28uLL);
}

uint64_t OUTLINED_FUNCTION_16_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_21_8()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_22_11()
{
  return EntityProperty.wrappedValue.modify();
}

uint64_t OUTLINED_FUNCTION_27_7()
{
  return 0;
}

void OUTLINED_FUNCTION_28_5(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_30_8()
{
  return String.LocalizationValue.init(stringLiteral:)();
}

uint64_t static SearchToolMCGrounding.openAppWhenRun.getter()
{
  return 0;
}

uint64_t static SearchToolMCGrounding.isDiscoverable.getter()
{
  return static SearchToolMCGrounding.isDiscoverable;
}

uint64_t static SearchToolMCGrounding.isDiscoverable.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static SearchToolMCGrounding.isDiscoverable = a1;
  return result;
}

uint64_t (*static SearchToolMCGrounding.isDiscoverable.modify())()
{
  return AnswerSynthesisModelOnDevice.modelVersion.modify;
}

uint64_t static SearchToolMCGrounding.title.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchToolMCGrounding.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t static SearchToolMCGrounding.description.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for IntentDescription();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchToolMCGrounding.description);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static SearchToolMCGrounding.description.setter(uint64_t a1)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for IntentDescription();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchToolMCGrounding.description);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v3, a1, v2);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
}

uint64_t (*static SearchToolMCGrounding.description.modify())()
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for IntentDescription();
  __swift_project_value_buffer(v0, (uint64_t)static SearchToolMCGrounding.description);
  swift_beginAccess();
  return protocol witness for _ClientInfoProtocol.trackingConfig.modify in conformance AnswerSynthesisModelOnDevice._ClientInfo;
}

uint64_t SearchToolMCGrounding.rawQueries.getter()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchToolMCGrounding.rawQueries : SearchToolMCGrounding@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SearchToolMCGrounding.rawQueries.getter();
  *a1 = result;
  return result;
}

uint64_t SearchToolMCGrounding.rawQueries.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*SearchToolMCGrounding.rawQueries.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchToolMCGrounding.$rawQueries.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t SearchToolMCGrounding.quParses.getter()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchToolMCGrounding.quParses : SearchToolMCGrounding@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SearchToolMCGrounding.quParses.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for SearchToolMCGrounding.rawQueries : SearchToolMCGrounding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = swift_bridgeObjectRetain();
  return a5(v6);
}

uint64_t SearchToolMCGrounding.quParses.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*SearchToolMCGrounding.quParses.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchToolMCGrounding.$quParses.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t SearchToolMCGrounding.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1 = type metadata accessor for InputConnectionBehavior();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_15();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v7 = OUTLINED_FUNCTION_81(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_15();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.IntentInputOptions?);
  uint64_t v12 = OUTLINED_FUNCTION_81(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_15();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v17 = OUTLINED_FUNCTION_81(v16);
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_15();
  uint64_t v20 = v19 - v18;
  uint64_t v27 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_15();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<[String]>);
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v20, 0, 1, v27);
  uint64_t v26 = type metadata accessor for String.IntentInputOptions();
  __swift_storeEnumTagSinglePayload(v15, 1, 1, v26);
  uint64_t v25 = type metadata accessor for IntentDialog();
  __swift_storeEnumTagSinglePayload(v10, 1, 1, v25);
  uint64_t v21 = *MEMORY[0x263EFBDC8];
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
  v22(v5, v21, v1);
  OUTLINED_FUNCTION_10_11();
  uint64_t v24 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)();
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v20, 0, 1, v27);
  __swift_storeEnumTagSinglePayload(v15, 1, 1, v26);
  __swift_storeEnumTagSinglePayload(v10, 1, 1, v25);
  v22(v5, v21, v1);
  OUTLINED_FUNCTION_10_11();
  uint64_t result = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)();
  *a1 = v24;
  a1[1] = result;
  return result;
}

uint64_t SearchToolMCGrounding.perform()(uint64_t a1)
{
  *(void *)(v2 + 80) = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MemoryCreationQUResult?);
  OUTLINED_FUNCTION_81(v3);
  *(void *)(v2 + 88) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MemoryCreationQUResult();
  *(void *)(v2 + 96) = v4;
  *(void *)(v2 + 104) = *(void *)(v4 - 8);
  *(void *)(v2 + 112) = swift_task_alloc();
  *(void *)(v2 + 120) = swift_task_alloc();
  *(_OWORD *)(v2 + 128) = *v1;
  return MEMORY[0x270FA2498](SearchToolMCGrounding.perform(), 0, 0);
}

uint64_t SearchToolMCGrounding.perform()()
{
  if (one-time initialization token for stextension != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[18] = __swift_project_value_buffer(v1, (uint64_t)static Logging.stextension);
  swift_retain_n();
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134217984;
    swift_retain();
    swift_retain();
    IntentParameter.wrappedValue.getter();
    swift_release();
    swift_release();
    uint64_t v5 = *(void *)(v0[8] + 16);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v0[9] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_release();
    _os_log_impl(&dword_257DC6000, v2, v3, "SearchTool Memory Creation Grounding perform() with %ld queries", v4, 0xCu);
    OUTLINED_FUNCTION_34();
  }
  else
  {
    swift_release_n();
    swift_release_n();
  }

  swift_retain();
  swift_retain();
  IntentParameter.wrappedValue.getter();
  swift_release();
  swift_release();
  uint64_t v6 = *(void *)(v0[2] + 16);
  swift_bridgeObjectRelease();
  swift_retain();
  swift_retain();
  IntentParameter.wrappedValue.getter();
  swift_release();
  swift_release();
  uint64_t v7 = *(void *)(v0[3] + 16);
  swift_bridgeObjectRelease();
  if (v6 == v7)
  {
    swift_retain();
    swift_retain();
    IntentParameter.wrappedValue.getter();
    swift_release();
    swift_release();
    uint64_t v8 = (void *)v0[5];
    v0[19] = v8;
    uint64_t v9 = v8[2];
    v0[20] = v9;
    if (v9)
    {
      uint64_t v10 = type metadata accessor for OmniSearchService();
      uint64_t v11 = MEMORY[0x263F8EE78];
      v0[22] = 0;
      v0[23] = v11;
      v0[21] = v10;
      v0[24] = v8[4];
      v0[25] = v8[5];
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      IntentParameter.wrappedValue.getter();
      swift_release();
      uint64_t result = swift_release();
      uint64_t v13 = v0[6];
      if (*(void *)(v13 + 16))
      {
        v0[26] = *(void *)(v13 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v14 = (void *)swift_task_alloc();
        v0[27] = v14;
        *uint64_t v14 = v0;
        v14[1] = SearchToolMCGrounding.perform();
        OUTLINED_FUNCTION_0_5();
        return static OmniSearchService.parseWithMemoryCreationQU(_:originatorPID:jsonParse:personNames:petNames:locations:currentTime:)();
      }
      else
      {
        __break(1u);
      }
      return result;
    }
    swift_bridgeObjectRelease();
    v0[7] = MEMORY[0x263F8EE78];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MemoryCreationQUResult]);
    lazy protocol witness table accessor for type [MemoryCreationQUResult] and conformance <A> [A]();
    static IntentResult.result<A>(value:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_257DC6000, v15, v16, "SearchTool Memory Creation Grounding should have the same number of raw queries and qu parses", v17, 2u);
      OUTLINED_FUNCTION_34();
    }

    v0[4] = MEMORY[0x263F8EE78];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MemoryCreationQUResult]);
    lazy protocol witness table accessor for type [MemoryCreationQUResult] and conformance <A> [A]();
    static IntentResult.result<A>(value:)();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_86();
  return v18();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  *(void *)(v2 + 224) = v1;
  *(void *)(v2 + 232) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    os_log_type_t v3 = SearchToolMCGrounding.perform();
  }
  else
  {
    swift_bridgeObjectRelease();
    os_log_type_t v3 = SearchToolMCGrounding.perform();
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t (*v19)(void);
  uint64_t result;
  void *v21;
  uint64_t v22;

  uint64_t v2 = *(void *)(v0 + 224);
  os_log_type_t v3 = *(void *)(v2 + OBJC_IVAR____TtC10OmniSearch10LLMQUParse_parseV2);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC10OmniSearch10LLMQUParse_performanceMetrics);
  swift_retain();
  swift_retain();
  MemoryCreationQUResult.init(parse:performanceMetrics:)(v3, v6, v5);
  if (__swift_getEnumTagSinglePayload(v5, 1, v4) == 1)
  {
    uint64_t v7 = *(void *)(v0 + 88);

    outlined destroy of MemoryCreationQUResult?(v7);
    uint64_t v8 = *(void *)(v0 + 184);
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 112);
    uint64_t v9 = *(void *)(v0 + 120);
    outlined init with take of MemoryCreationQUResult(*(void *)(v0 + 88), v9);
    outlined init with copy of MemoryCreationQUResult(v9, v10);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *(void *)(v0 + 184);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1, *(void *)(v0 + 184));
    }
    uint64_t v13 = *(void *)(v8 + 16);
    uint64_t v12 = *(void *)(v8 + 24);
    if (v13 >= v12 >> 1) {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1, v8);
    }
    uint64_t v14 = *(void **)(v0 + 224);
    uint64_t v15 = *(void *)(v0 + 112);
    os_log_type_t v16 = *(void *)(v0 + 120);
    uint64_t v17 = *(void *)(v0 + 104);
    *(void *)(v8 + 16) = v13 + 1;
    outlined init with take of MemoryCreationQUResult(v15, v8+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(void *)(v17 + 72) * v13);

    outlined destroy of MemoryCreationQUResult(v16);
  }
  OUTLINED_FUNCTION_8_6();
  if (v18)
  {
    swift_bridgeObjectRelease();
    *(void *)(v0 + 56) = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MemoryCreationQUResult]);
    lazy protocol witness table accessor for type [MemoryCreationQUResult] and conformance <A> [A]();
    OUTLINED_FUNCTION_9_7();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_86();
    return v19();
  }
  else
  {
    *(void *)(v0 + 176) = v1;
    *(void *)(v0 + 184) = v8;
    OUTLINED_FUNCTION_3_8(*(void *)(v0 + 152));
    swift_retain();
    swift_bridgeObjectRetain();
    IntentParameter.wrappedValue.getter();
    swift_release();
    uint64_t result = swift_release();
    if (v1 >= *(void *)(*(void *)(v0 + 48) + 16))
    {
      __break(1u);
    }
    else
    {
      OUTLINED_FUNCTION_6_8();
      swift_bridgeObjectRelease();
      uint64_t v21 = (void *)swift_task_alloc();
      *(void *)(v0 + 216) = v21;
      NSObject *v21 = v0;
      v21[1] = SearchToolMCGrounding.perform();
      OUTLINED_FUNCTION_0_5();
      return static OmniSearchService.parseWithMemoryCreationQU(_:originatorPID:jsonParse:personNames:petNames:locations:currentTime:)();
    }
  }
  return result;
}

{
  void *v0;
  unint64_t v1;
  void *v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t result;
  void *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;

  uint64_t v21 = v0;
  uint64_t v2 = (void *)v0[29];
  os_log_type_t v3 = v2;
  swift_bridgeObjectRetain();
  uint64_t v4 = v2;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[29];
  uint64_t v9 = v0[25];
  if (v7)
  {
    uint64_t v10 = v0[24];
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    uint64_t v1 = swift_slowAlloc();
    uint64_t v20 = v1;
    *(_DWORD *)uint64_t v11 = 138412546;
    uint64_t v13 = v8;
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v11 + 4) = v14;
    uint64_t *v12 = v14;

    *(_WORD *)(v11 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v11 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, (uint64_t *)&v20);
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_257DC6000, v5, v6, "SearchTool Memory Creation Grounding failed with error: %@, not adding this query %s to the returned results", (uint8_t *)v11, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_34();
    swift_arrayDestroy();
    OUTLINED_FUNCTION_34();
    OUTLINED_FUNCTION_34();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  OUTLINED_FUNCTION_8_6();
  if (v15)
  {
    os_log_type_t v16 = v0[23];
    swift_bridgeObjectRelease();
    v0[7] = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MemoryCreationQUResult]);
    lazy protocol witness table accessor for type [MemoryCreationQUResult] and conformance <A> [A]();
    OUTLINED_FUNCTION_9_7();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_86();
    return v17();
  }
  else
  {
    v0[22] = v1;
    OUTLINED_FUNCTION_3_8(v0[19]);
    swift_retain();
    swift_bridgeObjectRetain();
    IntentParameter.wrappedValue.getter();
    swift_release();
    uint64_t result = swift_release();
    if (v1 >= *(void *)(v0[6] + 16))
    {
      __break(1u);
    }
    else
    {
      OUTLINED_FUNCTION_6_8();
      swift_bridgeObjectRelease();
      uint64_t v19 = (void *)swift_task_alloc();
      v0[27] = v19;
      *uint64_t v19 = v0;
      v19[1] = SearchToolMCGrounding.perform();
      OUTLINED_FUNCTION_0_5();
      return static OmniSearchService.parseWithMemoryCreationQU(_:originatorPID:jsonParse:personNames:petNames:locations:currentTime:)();
    }
  }
  return result;
}

uint64_t protocol witness for AppIntent.perform() in conformance SearchToolMCGrounding(uint64_t a1)
{
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *os_log_type_t v3 = v1;
  v3[1] = protocol witness for AppIntent.perform() in conformance SearchToolMCGrounding;
  return SearchToolMCGrounding.perform()(a1);
}

uint64_t protocol witness for AppIntent.perform() in conformance SearchToolMCGrounding()
{
  OUTLINED_FUNCTION_2();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t protocol witness for static PersistentlyIdentifiable.persistentIdentifier.getter in conformance SearchToolMCGrounding(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SearchToolMCGrounding and conformance SearchToolMCGrounding();
  return MEMORY[0x270EE0D28](a1, v2);
}

unint64_t lazy protocol witness table accessor for type [MemoryCreationQUResult] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [MemoryCreationQUResult] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [MemoryCreationQUResult] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [MemoryCreationQUResult]);
    lazy protocol witness table accessor for type MemoryCreationQUResult and conformance MemoryCreationQUResult();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [MemoryCreationQUResult] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MemoryCreationQUResult and conformance MemoryCreationQUResult()
{
  unint64_t result = lazy protocol witness table cache variable for type MemoryCreationQUResult and conformance MemoryCreationQUResult;
  if (!lazy protocol witness table cache variable for type MemoryCreationQUResult and conformance MemoryCreationQUResult)
  {
    type metadata accessor for MemoryCreationQUResult();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MemoryCreationQUResult and conformance MemoryCreationQUResult);
  }
  return result;
}

uint64_t outlined destroy of MemoryCreationQUResult?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MemoryCreationQUResult?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of MemoryCreationQUResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MemoryCreationQUResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type SearchToolMCGrounding and conformance SearchToolMCGrounding()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchToolMCGrounding and conformance SearchToolMCGrounding;
  if (!lazy protocol witness table cache variable for type SearchToolMCGrounding and conformance SearchToolMCGrounding)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolMCGrounding and conformance SearchToolMCGrounding);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchToolMCGrounding and conformance SearchToolMCGrounding;
  if (!lazy protocol witness table cache variable for type SearchToolMCGrounding and conformance SearchToolMCGrounding)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolMCGrounding and conformance SearchToolMCGrounding);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchToolMCGrounding and conformance SearchToolMCGrounding;
  if (!lazy protocol witness table cache variable for type SearchToolMCGrounding and conformance SearchToolMCGrounding)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolMCGrounding and conformance SearchToolMCGrounding);
  }
  return result;
}

uint64_t associated type witness table accessor for AppIntent.PerformResult : IntentResult in SearchToolMCGrounding()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t associated type witness table accessor for AppIntent.SummaryContent : ParameterSummary in SearchToolMCGrounding()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_257F65FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchToolMCGrounding.rawQueries : SearchToolMCGrounding(a1, a2, a3, a4, (uint64_t (*)(uint64_t))SearchToolMCGrounding.rawQueries.setter);
}

uint64_t sub_257F6600C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchToolMCGrounding.rawQueries : SearchToolMCGrounding(a1, a2, a3, a4, (uint64_t (*)(uint64_t))SearchToolMCGrounding.quParses.setter);
}

uint64_t destroy for SearchToolMCGrounding()
{
  swift_release();
  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for SearchToolMCGrounding(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for SearchToolMCGrounding(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for SearchToolMCGrounding(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SearchToolMCGrounding()
{
  return &type metadata for SearchToolMCGrounding;
}

unint64_t lazy protocol witness table accessor for type IntentResultContainer<[MemoryCreationQUResult], Never, Never, Never> and conformance IntentResultContainer<A, B, C, D>()
{
  unint64_t result = lazy protocol witness table cache variable for type IntentResultContainer<[MemoryCreationQUResult], Never, Never, Never> and conformance IntentResultContainer<A, B, C, D>;
  if (!lazy protocol witness table cache variable for type IntentResultContainer<[MemoryCreationQUResult], Never, Never, Never> and conformance IntentResultContainer<A, B, C, D>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for IntentResultContainer<[MemoryCreationQUResult], Never, Never, Never>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntentResultContainer<[MemoryCreationQUResult], Never, Never, Never> and conformance IntentResultContainer<A, B, C, D>);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_5()
{
  v1[2] = 0;
  v1[3] = 0;
  v1[4] = 0;
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = a1 + 16 * v2;
  *(void *)(v1 + 192) = *(void *)(v4 + 32);
  *(void *)(v1 + 200) = *(void *)(v4 + 40);
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_6_8()
{
  *(void *)(v1 + 208) = *(void *)(v0 + 16 * v2 + 40);
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_9_7()
{
  return static IntentResult.result<A>(value:)();
}

uint64_t OUTLINED_FUNCTION_10_11()
{
  return v0;
}

uint64_t static SearchToolMCQU.openAppWhenRun.getter()
{
  return 0;
}

uint64_t static SearchToolMCQU.isDiscoverable.getter()
{
  return static SearchToolMCQU.isDiscoverable;
}

uint64_t static SearchToolMCQU.isDiscoverable.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static SearchToolMCQU.isDiscoverable = a1;
  return result;
}

uint64_t (*static SearchToolMCQU.isDiscoverable.modify())()
{
  return AnswerSynthesisModelOnDevice.modelVersion.modify;
}

uint64_t static SearchToolMCQU.title.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchToolMCQU.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t static SearchToolMCQU.description.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for IntentDescription();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchToolMCQU.description);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static SearchToolMCQU.description.setter(uint64_t a1)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for IntentDescription();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchToolMCQU.description);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v3, a1, v2);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
}

uint64_t (*static SearchToolMCQU.description.modify())()
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for IntentDescription();
  __swift_project_value_buffer(v0, (uint64_t)static SearchToolMCQU.description);
  swift_beginAccess();
  return protocol witness for _ClientInfoProtocol.trackingConfig.modify in conformance AnswerSynthesisModelOnDevice._ClientInfo;
}

uint64_t SearchToolMCQU.query.getter()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchToolMCQU.query : SearchToolMCQU@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SearchToolMCQU.query.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for SearchToolMCQU.query : SearchToolMCQU()
{
  return SearchToolMCQU.query.setter();
}

uint64_t SearchToolMCQU.query.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*SearchToolMCQU.query.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchToolMCQU.$query.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t SearchToolMCQU.originatorPID.getter()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchToolMCQU.originatorPID : SearchToolMCQU@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SearchToolMCQU.originatorPID.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for SearchToolMCQU.originatorPID : SearchToolMCQU()
{
  return SearchToolMCQU.originatorPID.setter();
}

uint64_t SearchToolMCQU.originatorPID.setter()
{
  return OUTLINED_FUNCTION_16_12();
}

uint64_t (*SearchToolMCQU.originatorPID.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchToolMCQU.$originatorPID.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t SearchToolMCQU.personNames.getter()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t SearchToolMCQU.personNames.setter()
{
  return OUTLINED_FUNCTION_16_12();
}

uint64_t (*SearchToolMCQU.personNames.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchToolMCQU.$personNames.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t SearchToolMCQU.petNames.getter()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t SearchToolMCQU.petNames.setter()
{
  return OUTLINED_FUNCTION_16_12();
}

uint64_t (*SearchToolMCQU.petNames.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchToolMCQU.$petNames.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t SearchToolMCQU.locations.getter()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchToolMCQU.personNames : SearchToolMCQU@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t result = a4(a1, a2, a3, a4, a5, a6);
  *a7 = result;
  return result;
}

uint64_t key path setter for SearchToolMCQU.personNames : SearchToolMCQU(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = swift_bridgeObjectRetain();
  return a5(v6);
}

uint64_t SearchToolMCQU.locations.setter()
{
  return OUTLINED_FUNCTION_16_12();
}

uint64_t (*SearchToolMCQU.locations.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchToolMCQU.$locations.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t SearchToolMCQU.currentTime.getter()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchToolMCQU.currentTime : SearchToolMCQU@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SearchToolMCQU.currentTime.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for SearchToolMCQU.currentTime : SearchToolMCQU()
{
  return SearchToolMCQU.currentTime.setter();
}

uint64_t SearchToolMCQU.currentTime.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*SearchToolMCQU.currentTime.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchToolMCQU.$currentTime.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t SearchToolMCQU.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<Int>.IntControlStyle);
  OUTLINED_FUNCTION_1();
  uint64_t v55 = v1;
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_184_0();
  uint64_t v53 = v3;
  uint64_t v4 = type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_1();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_184_0();
  uint64_t v9 = v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v11 = OUTLINED_FUNCTION_81(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_15();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.IntentInputOptions?);
  uint64_t v16 = OUTLINED_FUNCTION_81(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_15();
  uint64_t v19 = v18 - v17;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v21 = OUTLINED_FUNCTION_81(v20);
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_15();
  uint64_t v24 = v23 - v22;
  uint64_t v63 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v63);
  OUTLINED_FUNCTION_15();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<String>);
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v25 = OUTLINED_FUNCTION_6_9();
  __swift_storeEnumTagSinglePayload(v25, v26, v27, v63);
  uint64_t v61 = type metadata accessor for String.IntentInputOptions();
  uint64_t v28 = OUTLINED_FUNCTION_3_9();
  __swift_storeEnumTagSinglePayload(v28, v29, v30, v31);
  uint64_t v32 = type metadata accessor for IntentDialog();
  OUTLINED_FUNCTION_11_9(v14);
  unsigned int v62 = *MEMORY[0x263EFBDC8];
  unsigned int v33 = *(void (**)(uint64_t))(v6 + 104);
  v33(v9);
  OUTLINED_FUNCTION_18_12();
  uint64_t v57 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<Int>);
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v24, 0, 1, v63);
  OUTLINED_FUNCTION_11_9(v14);
  (*(void (**)(uint64_t, void, uint64_t))(v55 + 104))(v53, *MEMORY[0x263EFB958], v59);
  ((void (*)(uint64_t, void, uint64_t))v33)(v9, v62, v4);
  uint64_t v56 = IntentParameter<>.init(title:description:default:controlStyle:inclusiveRange:requestValueDialog:inputConnectionBehavior:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<[String]?>);
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v34 = OUTLINED_FUNCTION_6_9();
  __swift_storeEnumTagSinglePayload(v34, v35, v36, v63);
  __swift_storeEnumTagSinglePayload(v19, 1, 1, v61);
  __swift_storeEnumTagSinglePayload(v14, 1, 1, v32);
  ((void (*)(uint64_t, void, uint64_t))v33)(v9, v62, v4);
  uint64_t v54 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)();
  OUTLINED_FUNCTION_15_10();
  OUTLINED_FUNCTION_15_10();
  uint64_t v37 = OUTLINED_FUNCTION_6_9();
  __swift_storeEnumTagSinglePayload(v37, v38, v39, v63);
  uint64_t v40 = OUTLINED_FUNCTION_3_9();
  __swift_storeEnumTagSinglePayload(v40, v41, v42, v61);
  OUTLINED_FUNCTION_11_9(v14);
  ((void (*)(uint64_t, void, uint64_t))v33)(v9, v62, v4);
  uint64_t v52 = OUTLINED_FUNCTION_19_7();
  OUTLINED_FUNCTION_15_10();
  OUTLINED_FUNCTION_15_10();
  __swift_storeEnumTagSinglePayload(v24, 0, 1, v63);
  uint64_t v43 = OUTLINED_FUNCTION_3_9();
  uint64_t v46 = OUTLINED_FUNCTION_12_9(v43, v44, v45);
  ((void (*)(uint64_t, void, uint64_t))v33)(v46, v62, v4);
  OUTLINED_FUNCTION_18_12();
  uint64_t v60 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<String?>);
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v24, 0, 1, v63);
  uint64_t v47 = OUTLINED_FUNCTION_3_9();
  uint64_t v50 = OUTLINED_FUNCTION_12_9(v47, v48, v49);
  ((void (*)(uint64_t, void, uint64_t))v33)(v50, v62, v4);
  uint64_t result = OUTLINED_FUNCTION_19_7();
  *a1 = v57;
  a1[1] = v56;
  a1[2] = v54;
  a1[3] = v52;
  a1[4] = v60;
  a1[5] = result;
  return result;
}

uint64_t SearchToolMCQU.perform()(uint64_t a1)
{
  *(void *)(v2 + 216) = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MemoryCreationQUResult?);
  *(void *)(v2 + 224) = v3;
  OUTLINED_FUNCTION_81(v3);
  *(void *)(v2 + 232) = swift_task_alloc();
  long long v4 = v1[1];
  *(_OWORD *)(v2 + 240) = *v1;
  *(_OWORD *)(v2 + 256) = v4;
  *(_OWORD *)(v2 + 272) = v1[2];
  return MEMORY[0x270FA2498](SearchToolMCQU.perform(), 0, 0);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  OUTLINED_FUNCTION_2();
  long long v4 = v3;
  *(void *)(v3 + 336) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = SearchToolMCQU.perform();
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 344) = a1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = SearchToolMCQU.perform();
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t SearchToolMCQU.perform()()
{
  if (one-time initialization token for stextension != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logging.stextension);
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v17 = v15;
    *(_DWORD *)uint64_t v4 = 136316162;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    IntentParameter.wrappedValue.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(void *)(v0 + 64), *(void *)(v0 + 72), &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_13_14();
    OUTLINED_FUNCTION_8_7();
    OUTLINED_FUNCTION_9_8();
    OUTLINED_FUNCTION_7_12();
    OUTLINED_FUNCTION_10_12();
    OUTLINED_FUNCTION_14_12();
    *(_WORD *)(v4 + 12) = 2080;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    IntentParameter.wrappedValue.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    *(void *)(v0 + 128) = *(void *)(v0 + 120);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]?);
    uint64_t v5 = String.init<A>(describing:)();
    *(void *)(v0 + 136) = OUTLINED_FUNCTION_20_7(v5, v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_13_14();
    OUTLINED_FUNCTION_8_7();
    OUTLINED_FUNCTION_9_8();
    OUTLINED_FUNCTION_7_12();
    OUTLINED_FUNCTION_10_12();
    OUTLINED_FUNCTION_14_12();
    *(_WORD *)(v4 + 22) = 2080;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    IntentParameter.wrappedValue.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    *(void *)(v0 + 152) = *(void *)(v0 + 144);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 160) = OUTLINED_FUNCTION_20_7(v7, v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_13_14();
    OUTLINED_FUNCTION_8_7();
    OUTLINED_FUNCTION_9_8();
    OUTLINED_FUNCTION_7_12();
    OUTLINED_FUNCTION_10_12();
    OUTLINED_FUNCTION_14_12();
    *(_WORD *)(v4 + 32) = 2080;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    IntentParameter.wrappedValue.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    *(void *)(v0 + 176) = *(void *)(v0 + 168);
    uint64_t v9 = String.init<A>(describing:)();
    *(void *)(v0 + 184) = OUTLINED_FUNCTION_20_7(v9, v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_13_14();
    OUTLINED_FUNCTION_8_7();
    OUTLINED_FUNCTION_9_8();
    OUTLINED_FUNCTION_7_12();
    OUTLINED_FUNCTION_10_12();
    OUTLINED_FUNCTION_14_12();
    *(_WORD *)(v4 + 42) = 2080;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    IntentParameter.wrappedValue.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    *(_OWORD *)(v0 + 32) = *(_OWORD *)(v0 + 48);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v11 = String.init<A>(describing:)();
    *(void *)(v0 + 208) = OUTLINED_FUNCTION_20_7(v11, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_13_14();
    OUTLINED_FUNCTION_8_7();
    OUTLINED_FUNCTION_9_8();
    OUTLINED_FUNCTION_7_12();
    OUTLINED_FUNCTION_10_12();
    OUTLINED_FUNCTION_14_12();
    _os_log_impl(&dword_257DC6000, v2, v3, "SearchTool Memory Creation QU perform() with query: %s, personNames: %s, petNames: %s, locations: %s, currentTime: %s", (uint8_t *)v4, 0x34u);
    swift_arrayDestroy();
    MEMORY[0x25A2C94B0](v15, -1, -1);
    MEMORY[0x25A2C94B0](v4, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
  }

  type metadata accessor for OmniSearchService();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  IntentParameter.wrappedValue.getter();
  *(void *)(v0 + 288) = *(void *)(v0 + 24);
  IntentParameter.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  IntentParameter.wrappedValue.getter();
  *(void *)(v0 + 296) = *(void *)(v0 + 192);
  IntentParameter.wrappedValue.getter();
  *(void *)(v0 + 304) = *(void *)(v0 + 104);
  IntentParameter.wrappedValue.getter();
  *(void *)(v0 + 312) = *(void *)(v0 + 96);
  IntentParameter.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  *(void *)(v0 + 320) = *(void *)(v0 + 88);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 328) = v13;
  void *v13 = v0;
  v13[1] = SearchToolMCQU.perform();
  return static OmniSearchService.parseWithMemoryCreationQU(_:originatorPID:jsonParse:personNames:petNames:locations:currentTime:)();
}

{
  void *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = (char *)v0[43];
  uint64_t v2 = v0[29];
  os_log_type_t v3 = *(void *)&v1[OBJC_IVAR____TtC10OmniSearch10LLMQUParse_parseV2];
  uint64_t v4 = *(void *)&v1[OBJC_IVAR____TtC10OmniSearch10LLMQUParse_performanceMetrics];
  swift_retain();
  swift_retain();
  MemoryCreationQUResult.init(parse:performanceMetrics:)(v3, v4, v2);
  lazy protocol witness table accessor for type MemoryCreationQUResult? and conformance <A> A?();
  static IntentResult.result<A>(value:)();

  outlined destroy of MemoryCreationQUResult?(v2);
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t protocol witness for AppIntent.perform() in conformance SearchToolMCQU(uint64_t a1)
{
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *os_log_type_t v3 = v1;
  v3[1] = protocol witness for AppIntent.perform() in conformance SearchToolMCGrounding;
  return SearchToolMCQU.perform()(a1);
}

uint64_t protocol witness for static PersistentlyIdentifiable.persistentIdentifier.getter in conformance SearchToolMCQU(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SearchToolMCQU and conformance SearchToolMCQU();
  return MEMORY[0x270EE0D28](a1, v2);
}

unint64_t lazy protocol witness table accessor for type MemoryCreationQUResult? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type MemoryCreationQUResult? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type MemoryCreationQUResult? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for MemoryCreationQUResult?);
    lazy protocol witness table accessor for type MemoryCreationQUResult and conformance MemoryCreationQUResult();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MemoryCreationQUResult? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchToolMCQU and conformance SearchToolMCQU()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchToolMCQU and conformance SearchToolMCQU;
  if (!lazy protocol witness table cache variable for type SearchToolMCQU and conformance SearchToolMCQU)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolMCQU and conformance SearchToolMCQU);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchToolMCQU and conformance SearchToolMCQU;
  if (!lazy protocol witness table cache variable for type SearchToolMCQU and conformance SearchToolMCQU)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolMCQU and conformance SearchToolMCQU);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchToolMCQU and conformance SearchToolMCQU;
  if (!lazy protocol witness table cache variable for type SearchToolMCQU and conformance SearchToolMCQU)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolMCQU and conformance SearchToolMCQU);
  }
  return result;
}

uint64_t associated type witness table accessor for AppIntent.PerformResult : IntentResult in SearchToolMCQU()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t associated type witness table accessor for AppIntent.SummaryContent : ParameterSummary in SearchToolMCQU()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_257F68584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return key path getter for SearchToolMCQU.personNames : SearchToolMCQU(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))SearchToolMCQU.personNames.getter, a4, a5, a6);
}

uint64_t sub_257F685B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchToolMCQU.personNames : SearchToolMCQU(a1, a2, a3, a4, (uint64_t (*)(uint64_t))SearchToolMCQU.personNames.setter);
}

uint64_t sub_257F685DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return key path getter for SearchToolMCQU.personNames : SearchToolMCQU(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))SearchToolMCQU.petNames.getter, a4, a5, a6);
}

uint64_t sub_257F68608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchToolMCQU.personNames : SearchToolMCQU(a1, a2, a3, a4, (uint64_t (*)(uint64_t))SearchToolMCQU.petNames.setter);
}

uint64_t sub_257F68634@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return key path getter for SearchToolMCQU.personNames : SearchToolMCQU(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))SearchToolMCQU.locations.getter, a4, a5, a6);
}

uint64_t sub_257F68660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchToolMCQU.personNames : SearchToolMCQU(a1, a2, a3, a4, (uint64_t (*)(uint64_t))SearchToolMCQU.locations.setter);
}

uint64_t destroy for SearchToolMCQU()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void *initializeWithCopy for SearchToolMCQU(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for SearchToolMCQU(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_OWORD *assignWithTake for SearchToolMCQU(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  swift_release();
  a1[1] = a2[1];
  swift_release();
  swift_release();
  a1[2] = a2[2];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchToolMCQU(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchToolMCQU(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchToolMCQU()
{
  return &type metadata for SearchToolMCQU;
}

unint64_t lazy protocol witness table accessor for type IntentResultContainer<MemoryCreationQUResult?, Never, Never, Never> and conformance IntentResultContainer<A, B, C, D>()
{
  unint64_t result = lazy protocol witness table cache variable for type IntentResultContainer<MemoryCreationQUResult?, Never, Never, Never> and conformance IntentResultContainer<A, B, C, D>;
  if (!lazy protocol witness table cache variable for type IntentResultContainer<MemoryCreationQUResult?, Never, Never, Never> and conformance IntentResultContainer<A, B, C, D>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for IntentResultContainer<MemoryCreationQUResult?, Never, Never, Never>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntentResultContainer<MemoryCreationQUResult?, Never, Never, Never> and conformance IntentResultContainer<A, B, C, D>);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_3_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_7(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_6_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_12()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_8_7()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_9_8()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_10_12()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_11_9(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_12_9(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_storeEnumTagSinglePayload(a1, a2, a3, v5);
  __swift_storeEnumTagSinglePayload(v3, 1, 1, *(void *)(v6 - 136));
  return v4;
}

uint64_t OUTLINED_FUNCTION_13_14()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_14_12()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_15_10()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_16_12()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t OUTLINED_FUNCTION_19_7()
{
  return IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)();
}

uint64_t OUTLINED_FUNCTION_20_7(uint64_t a1, unint64_t a2)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 + 40));
}

void *OpenFlightReservationEntityIntent.isDiscoverable.unsafeMutableAddressor()
{
  return &static OpenFlightReservationEntityIntent.isDiscoverable;
}

uint64_t static OpenFlightReservationEntityIntent.isDiscoverable.getter()
{
  return 0;
}

void *OpenFlightReservationEntityIntent.assistantOnly.unsafeMutableAddressor()
{
  return &static OpenFlightReservationEntityIntent.assistantOnly;
}

uint64_t static OpenFlightReservationEntityIntent.assistantOnly.getter()
{
  return 1;
}

uint64_t OpenFlightReservationEntityIntent.title.unsafeMutableAddressor()
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  return __swift_project_value_buffer(v0, (uint64_t)static OpenFlightReservationEntityIntent.title);
}

uint64_t static OpenFlightReservationEntityIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenFlightReservationEntityIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t OpenFlightReservationEntityIntent.description.unsafeMutableAddressor()
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  return __swift_project_value_buffer(v0, (uint64_t)static OpenFlightReservationEntityIntent.description);
}

uint64_t static OpenFlightReservationEntityIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenFlightReservationEntityIntent.description);
  return outlined init with copy of IntentDescription?(v3, a1);
}

uint64_t outlined init with copy of IntentDescription?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t OpenFlightReservationEntityIntent.target.getter()
{
  return IntentParameter.wrappedValue.getter();
}

void *key path getter for OpenFlightReservationEntityIntent.target : OpenFlightReservationEntityIntent@<X0>(void *a1@<X8>)
{
  OpenFlightReservationEntityIntent.target.getter();
  return memcpy(a1, v3, 0xD0uLL);
}

uint64_t key path setter for OpenFlightReservationEntityIntent.target : OpenFlightReservationEntityIntent(void *__src)
{
  memcpy(v3, __src, sizeof(v3));
  outlined retain of FlightReservationEntity((uint64_t)v3);
  return OpenFlightReservationEntityIntent.target.setter(__src);
}

uint64_t OpenFlightReservationEntityIntent.target.setter(void *__src)
{
  memcpy(v2, __src, sizeof(v2));
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*OpenFlightReservationEntityIntent.target.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t OpenFlightReservationEntityIntent.$target.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t OpenFlightReservationEntityIntent.perform()()
{
  OUTLINED_FUNCTION_27();
  v0[54] = v1;
  v0[55] = v2;
  type metadata accessor for MainActor();
  v0[56] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[57] = v4;
  v0[58] = v3;
  return MEMORY[0x270FA2498](OpenFlightReservationEntityIntent.perform(), v4, v3);
}

{
  void *v0;
  void *v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  IntentParameter.wrappedValue.getter();
  memcpy(v0 + 2, v0 + 28, 0xD0uLL);
  uint64_t v3 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static SearchSpotlightOpener.openEntity<A>(_:)
                                       + async function pointer to specialized static SearchSpotlightOpener.openEntity<A>(_:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[59] = v1;
  *uint64_t v1 = v0;
  v1[1] = OpenFlightReservationEntityIntent.perform();
  return v3((uint64_t)(v0 + 2));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  OUTLINED_FUNCTION_2();
  uint64_t v2 = v1;
  uint64_t v3 = v1 + 16;
  *(void *)(v1 + 480) = v0;
  swift_task_dealloc();
  outlined release of FlightReservationEntity(v3);
  uint64_t v4 = *(void *)(v2 + 456);
  uint64_t v5 = *(void *)(v2 + 464);
  if (v0) {
    uint64_t v6 = OpenFlightReservationEntityIntent.perform();
  }
  else {
    uint64_t v6 = OpenFlightReservationEntityIntent.perform();
  }
  return MEMORY[0x270FA2498](v6, v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_27();
  swift_release();
  static IntentResult.result<>()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_27();
  swift_release();
  OUTLINED_FUNCTION_13();
  return v0();
}

uint64_t specialized static SearchSpotlightOpener.openEntity<A>(_:)(uint64_t a1)
{
  *(void *)(v1 + 240) = a1;
  return MEMORY[0x270FA2498](specialized static SearchSpotlightOpener.openEntity<A>(_:), 0, 0);
}

{
  uint64_t v1;

  *(void *)(v1 + 240) = a1;
  return OUTLINED_FUNCTION_66((uint64_t)specialized static SearchSpotlightOpener.openEntity<A>(_:));
}

{
  uint64_t v1;

  *(void *)(v1 + 240) = a1;
  return OUTLINED_FUNCTION_66((uint64_t)specialized static SearchSpotlightOpener.openEntity<A>(_:));
}

{
  uint64_t v1;

  *(void *)(v1 + 240) = a1;
  return OUTLINED_FUNCTION_66((uint64_t)specialized static SearchSpotlightOpener.openEntity<A>(_:));
}

{
  uint64_t v1;

  *(void *)(v1 + 240) = a1;
  return OUTLINED_FUNCTION_66((uint64_t)specialized static SearchSpotlightOpener.openEntity<A>(_:));
}

{
  uint64_t v1;

  *(void *)(v1 + 240) = a1;
  return OUTLINED_FUNCTION_66((uint64_t)specialized static SearchSpotlightOpener.openEntity<A>(_:));
}

{
  uint64_t v1;

  *(void *)(v1 + 240) = a1;
  return OUTLINED_FUNCTION_66((uint64_t)specialized static SearchSpotlightOpener.openEntity<A>(_:));
}

{
  uint64_t v1;

  *(void *)(v1 + 240) = a1;
  return OUTLINED_FUNCTION_66((uint64_t)specialized static SearchSpotlightOpener.openEntity<A>(_:));
}

{
  uint64_t v1;

  *(void *)(v1 + 240) = a1;
  return OUTLINED_FUNCTION_66((uint64_t)specialized static SearchSpotlightOpener.openEntity<A>(_:));
}

{
  uint64_t v1;

  *(void *)(v1 + 240) = a1;
  return OUTLINED_FUNCTION_66((uint64_t)specialized static SearchSpotlightOpener.openEntity<A>(_:));
}

uint64_t specialized static SearchSpotlightOpener.openEntity<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_8_8();
  OUTLINED_FUNCTION_29_7();
  OUTLINED_FUNCTION_28_6();
  specialized static SearchSpotlightOpener.decodeSearchableItem<A>(_:)();
  v14[31] = v16;
  if (!v13)
  {
    OUTLINED_FUNCTION_11_10();
    v17._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18.super.Class isa = NSUserActivity.__allocating_init(activityType:)(v17).super.isa;
    OUTLINED_FUNCTION_17_9((uint64_t)v18.super.isa);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
    uint64_t inited = (__n128 *)swift_initStackObject();
    OUTLINED_FUNCTION_24_7(inited, (__n128)xmmword_258661700);
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_23_6(v20, v21);
    OUTLINED_FUNCTION_10_13();
    id v22 = objc_msgSend(v15, sel_uniqueIdentifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_19_8();
    OUTLINED_FUNCTION_18_13();
    uint64_t v23 = (void *)(MEMORY[0x263F8EE58] + 8);
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_5_9();
    uint64_t v24 = OUTLINED_FUNCTION_21_9();
    OUTLINED_FUNCTION_26_10(v24, sel_setUserInfo_);

    id v25 = objc_msgSend(v15, sel_bundleID);
    if (v25)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_20_8();
      id v33 = objc_allocWithZone(MEMORY[0x263F01878]);
      id v34 = OUTLINED_FUNCTION_7_13();
      v14[33] = v34;
      uint64_t v44 = v34;
      id v25 = objc_msgSend(self, sel_defaultWorkspace);
      v14[34] = v25;
      if (v25)
      {
        OUTLINED_FUNCTION_6_10();
        id v45 = objc_allocWithZone(MEMORY[0x263F018D8]);
        v12;
        v44;
        OUTLINED_FUNCTION_12_10((uint64_t)objc_msgSend(v45, sel_init));
        v14[2] = v46;
        OUTLINED_FUNCTION_27_8();
        v14[3] = specialized static SearchSpotlightOpener.openEntity<A>(_:);
        OUTLINED_FUNCTION_16_13();
        v14[23] = MEMORY[0x263EF8330];
        OUTLINED_FUNCTION_25_9(COERCE_DOUBLE(0x40000000));
        v14[25] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool;
        v14[26] = &block_descriptor_24;
        v14[27] = v47;
        OUTLINED_FUNCTION_3_10(v47, sel_openUserActivity_usingApplicationRecord_configuration_completionHandler_);
        OUTLINED_FUNCTION_1_8();
        return MEMORY[0x270FA23F0](v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return MEMORY[0x270FA23F0](v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
  }
  OUTLINED_FUNCTION_13_15();
  OUTLINED_FUNCTION_1_8();
  return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
}

{
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  Swift::String v17;
  NSUserActivity v18;
  __n128 *inited;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;

  OUTLINED_FUNCTION_8_8();
  OUTLINED_FUNCTION_29_7();
  OUTLINED_FUNCTION_28_6();
  specialized static SearchSpotlightOpener.decodeSearchableItem<A>(_:)();
  v14[31] = v16;
  if (!v13)
  {
    OUTLINED_FUNCTION_11_10();
    v17._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18.super.Class isa = NSUserActivity.__allocating_init(activityType:)(v17).super.isa;
    OUTLINED_FUNCTION_17_9((uint64_t)v18.super.isa);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
    uint64_t inited = (__n128 *)swift_initStackObject();
    OUTLINED_FUNCTION_24_7(inited, (__n128)xmmword_258661700);
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_23_6(v20, v21);
    OUTLINED_FUNCTION_10_13();
    id v22 = objc_msgSend(v15, sel_uniqueIdentifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_19_8();
    OUTLINED_FUNCTION_18_13();
    uint64_t v23 = (void *)(MEMORY[0x263F8EE58] + 8);
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_5_9();
    uint64_t v24 = OUTLINED_FUNCTION_21_9();
    OUTLINED_FUNCTION_26_10(v24, sel_setUserInfo_);

    id v25 = objc_msgSend(v15, sel_bundleID);
    if (v25)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_20_8();
      id v33 = objc_allocWithZone(MEMORY[0x263F01878]);
      id v34 = OUTLINED_FUNCTION_7_13();
      v14[33] = v34;
      uint64_t v44 = v34;
      id v25 = objc_msgSend(self, sel_defaultWorkspace);
      v14[34] = v25;
      if (v25)
      {
        OUTLINED_FUNCTION_6_10();
        id v45 = objc_allocWithZone(MEMORY[0x263F018D8]);
        v12;
        v44;
        OUTLINED_FUNCTION_12_10((uint64_t)objc_msgSend(v45, sel_init));
        v14[2] = v46;
        OUTLINED_FUNCTION_27_8();
        v14[3] = specialized static SearchSpotlightOpener.openEntity<A>(_:);
        OUTLINED_FUNCTION_16_13();
        v14[23] = MEMORY[0x263EF8330];
        OUTLINED_FUNCTION_25_9(COERCE_DOUBLE(0x40000000));
        v14[25] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool;
        v14[26] = &block_descriptor_22;
        v14[27] = v47;
        OUTLINED_FUNCTION_3_10(v47, sel_openUserActivity_usingApplicationRecord_configuration_completionHandler_);
        OUTLINED_FUNCTION_1_8();
        return MEMORY[0x270FA23F0](v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return MEMORY[0x270FA23F0](v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
  }
  OUTLINED_FUNCTION_13_15();
  OUTLINED_FUNCTION_1_8();
  return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
}

{
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  Swift::String v17;
  NSUserActivity v18;
  __n128 *inited;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;

  OUTLINED_FUNCTION_8_8();
  OUTLINED_FUNCTION_29_7();
  OUTLINED_FUNCTION_28_6();
  specialized static SearchSpotlightOpener.decodeSearchableItem<A>(_:)();
  v14[31] = v16;
  if (!v13)
  {
    OUTLINED_FUNCTION_11_10();
    v17._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18.super.Class isa = NSUserActivity.__allocating_init(activityType:)(v17).super.isa;
    OUTLINED_FUNCTION_17_9((uint64_t)v18.super.isa);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
    uint64_t inited = (__n128 *)swift_initStackObject();
    OUTLINED_FUNCTION_24_7(inited, (__n128)xmmword_258661700);
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_23_6(v20, v21);
    OUTLINED_FUNCTION_10_13();
    id v22 = objc_msgSend(v15, sel_uniqueIdentifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_19_8();
    OUTLINED_FUNCTION_18_13();
    uint64_t v23 = (void *)(MEMORY[0x263F8EE58] + 8);
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_5_9();
    uint64_t v24 = OUTLINED_FUNCTION_21_9();
    OUTLINED_FUNCTION_26_10(v24, sel_setUserInfo_);

    id v25 = objc_msgSend(v15, sel_bundleID);
    if (v25)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_20_8();
      id v33 = objc_allocWithZone(MEMORY[0x263F01878]);
      id v34 = OUTLINED_FUNCTION_7_13();
      v14[33] = v34;
      uint64_t v44 = v34;
      id v25 = objc_msgSend(self, sel_defaultWorkspace);
      v14[34] = v25;
      if (v25)
      {
        OUTLINED_FUNCTION_6_10();
        id v45 = objc_allocWithZone(MEMORY[0x263F018D8]);
        v12;
        v44;
        OUTLINED_FUNCTION_12_10((uint64_t)objc_msgSend(v45, sel_init));
        v14[2] = v46;
        OUTLINED_FUNCTION_27_8();
        v14[3] = specialized static SearchSpotlightOpener.openEntity<A>(_:);
        OUTLINED_FUNCTION_16_13();
        v14[23] = MEMORY[0x263EF8330];
        OUTLINED_FUNCTION_25_9(COERCE_DOUBLE(0x40000000));
        v14[25] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool;
        v14[26] = &block_descriptor_20;
        v14[27] = v47;
        OUTLINED_FUNCTION_3_10(v47, sel_openUserActivity_usingApplicationRecord_configuration_completionHandler_);
        OUTLINED_FUNCTION_1_8();
        return MEMORY[0x270FA23F0](v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return MEMORY[0x270FA23F0](v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
  }
  OUTLINED_FUNCTION_13_15();
  OUTLINED_FUNCTION_1_8();
  return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
}

{
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  Swift::String v17;
  NSUserActivity v18;
  __n128 *inited;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;

  OUTLINED_FUNCTION_8_8();
  OUTLINED_FUNCTION_29_7();
  OUTLINED_FUNCTION_28_6();
  specialized static SearchSpotlightOpener.decodeSearchableItem<A>(_:)();
  v14[31] = v16;
  if (!v13)
  {
    OUTLINED_FUNCTION_11_10();
    v17._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18.super.Class isa = NSUserActivity.__allocating_init(activityType:)(v17).super.isa;
    OUTLINED_FUNCTION_17_9((uint64_t)v18.super.isa);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
    uint64_t inited = (__n128 *)swift_initStackObject();
    OUTLINED_FUNCTION_24_7(inited, (__n128)xmmword_258661700);
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_23_6(v20, v21);
    OUTLINED_FUNCTION_10_13();
    id v22 = objc_msgSend(v15, sel_uniqueIdentifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_19_8();
    OUTLINED_FUNCTION_18_13();
    uint64_t v23 = (void *)(MEMORY[0x263F8EE58] + 8);
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_5_9();
    uint64_t v24 = OUTLINED_FUNCTION_21_9();
    OUTLINED_FUNCTION_26_10(v24, sel_setUserInfo_);

    id v25 = objc_msgSend(v15, sel_bundleID);
    if (v25)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_20_8();
      id v33 = objc_allocWithZone(MEMORY[0x263F01878]);
      id v34 = OUTLINED_FUNCTION_7_13();
      v14[33] = v34;
      uint64_t v44 = v34;
      id v25 = objc_msgSend(self, sel_defaultWorkspace);
      v14[34] = v25;
      if (v25)
      {
        OUTLINED_FUNCTION_6_10();
        id v45 = objc_allocWithZone(MEMORY[0x263F018D8]);
        v12;
        v44;
        OUTLINED_FUNCTION_12_10((uint64_t)objc_msgSend(v45, sel_init));
        v14[2] = v46;
        OUTLINED_FUNCTION_27_8();
        v14[3] = specialized static SearchSpotlightOpener.openEntity<A>(_:);
        OUTLINED_FUNCTION_16_13();
        v14[23] = MEMORY[0x263EF8330];
        OUTLINED_FUNCTION_25_9(COERCE_DOUBLE(0x40000000));
        v14[25] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool;
        v14[26] = &block_descriptor_18;
        v14[27] = v47;
        OUTLINED_FUNCTION_3_10(v47, sel_openUserActivity_usingApplicationRecord_configuration_completionHandler_);
        OUTLINED_FUNCTION_1_8();
        return MEMORY[0x270FA23F0](v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return MEMORY[0x270FA23F0](v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
  }
  OUTLINED_FUNCTION_13_15();
  OUTLINED_FUNCTION_1_8();
  return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
}

{
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  Swift::String v17;
  NSUserActivity v18;
  __n128 *inited;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;

  OUTLINED_FUNCTION_8_8();
  OUTLINED_FUNCTION_29_7();
  OUTLINED_FUNCTION_28_6();
  specialized static SearchSpotlightOpener.decodeSearchableItem<A>(_:)();
  v14[31] = v16;
  if (!v13)
  {
    OUTLINED_FUNCTION_11_10();
    v17._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18.super.Class isa = NSUserActivity.__allocating_init(activityType:)(v17).super.isa;
    OUTLINED_FUNCTION_17_9((uint64_t)v18.super.isa);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
    uint64_t inited = (__n128 *)swift_initStackObject();
    OUTLINED_FUNCTION_24_7(inited, (__n128)xmmword_258661700);
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_23_6(v20, v21);
    OUTLINED_FUNCTION_10_13();
    id v22 = objc_msgSend(v15, sel_uniqueIdentifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_19_8();
    OUTLINED_FUNCTION_18_13();
    uint64_t v23 = (void *)(MEMORY[0x263F8EE58] + 8);
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_5_9();
    uint64_t v24 = OUTLINED_FUNCTION_21_9();
    OUTLINED_FUNCTION_26_10(v24, sel_setUserInfo_);

    id v25 = objc_msgSend(v15, sel_bundleID);
    if (v25)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_20_8();
      id v33 = objc_allocWithZone(MEMORY[0x263F01878]);
      id v34 = OUTLINED_FUNCTION_7_13();
      v14[33] = v34;
      uint64_t v44 = v34;
      id v25 = objc_msgSend(self, sel_defaultWorkspace);
      v14[34] = v25;
      if (v25)
      {
        OUTLINED_FUNCTION_6_10();
        id v45 = objc_allocWithZone(MEMORY[0x263F018D8]);
        v12;
        v44;
        OUTLINED_FUNCTION_12_10((uint64_t)objc_msgSend(v45, sel_init));
        v14[2] = v46;
        OUTLINED_FUNCTION_27_8();
        v14[3] = specialized static SearchSpotlightOpener.openEntity<A>(_:);
        OUTLINED_FUNCTION_16_13();
        v14[23] = MEMORY[0x263EF8330];
        OUTLINED_FUNCTION_25_9(COERCE_DOUBLE(0x40000000));
        v14[25] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool;
        v14[26] = &block_descriptor_16;
        v14[27] = v47;
        OUTLINED_FUNCTION_3_10(v47, sel_openUserActivity_usingApplicationRecord_configuration_completionHandler_);
        OUTLINED_FUNCTION_1_8();
        return MEMORY[0x270FA23F0](v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return MEMORY[0x270FA23F0](v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
  }
  OUTLINED_FUNCTION_13_15();
  OUTLINED_FUNCTION_1_8();
  return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
}

{
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  Swift::String v17;
  NSUserActivity v18;
  __n128 *inited;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;

  OUTLINED_FUNCTION_8_8();
  OUTLINED_FUNCTION_29_7();
  OUTLINED_FUNCTION_28_6();
  specialized static SearchSpotlightOpener.decodeSearchableItem<A>(_:)();
  v14[31] = v16;
  if (!v13)
  {
    OUTLINED_FUNCTION_11_10();
    v17._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18.super.Class isa = NSUserActivity.__allocating_init(activityType:)(v17).super.isa;
    OUTLINED_FUNCTION_17_9((uint64_t)v18.super.isa);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
    uint64_t inited = (__n128 *)swift_initStackObject();
    OUTLINED_FUNCTION_24_7(inited, (__n128)xmmword_258661700);
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_23_6(v20, v21);
    OUTLINED_FUNCTION_10_13();
    id v22 = objc_msgSend(v15, sel_uniqueIdentifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_19_8();
    OUTLINED_FUNCTION_18_13();
    uint64_t v23 = (void *)(MEMORY[0x263F8EE58] + 8);
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_5_9();
    uint64_t v24 = OUTLINED_FUNCTION_21_9();
    OUTLINED_FUNCTION_26_10(v24, sel_setUserInfo_);

    id v25 = objc_msgSend(v15, sel_bundleID);
    if (v25)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_20_8();
      id v33 = objc_allocWithZone(MEMORY[0x263F01878]);
      id v34 = OUTLINED_FUNCTION_7_13();
      v14[33] = v34;
      uint64_t v44 = v34;
      id v25 = objc_msgSend(self, sel_defaultWorkspace);
      v14[34] = v25;
      if (v25)
      {
        OUTLINED_FUNCTION_6_10();
        id v45 = objc_allocWithZone(MEMORY[0x263F018D8]);
        v12;
        v44;
        OUTLINED_FUNCTION_12_10((uint64_t)objc_msgSend(v45, sel_init));
        v14[2] = v46;
        OUTLINED_FUNCTION_27_8();
        v14[3] = specialized static SearchSpotlightOpener.openEntity<A>(_:);
        OUTLINED_FUNCTION_16_13();
        v14[23] = MEMORY[0x263EF8330];
        OUTLINED_FUNCTION_25_9(COERCE_DOUBLE(0x40000000));
        v14[25] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool;
        v14[26] = &block_descriptor_14;
        v14[27] = v47;
        OUTLINED_FUNCTION_3_10(v47, sel_openUserActivity_usingApplicationRecord_configuration_completionHandler_);
        OUTLINED_FUNCTION_1_8();
        return MEMORY[0x270FA23F0](v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return MEMORY[0x270FA23F0](v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
  }
  OUTLINED_FUNCTION_13_15();
  OUTLINED_FUNCTION_1_8();
  return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
}

{
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  Swift::String v17;
  NSUserActivity v18;
  __n128 *inited;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;

  OUTLINED_FUNCTION_8_8();
  OUTLINED_FUNCTION_29_7();
  OUTLINED_FUNCTION_28_6();
  specialized static SearchSpotlightOpener.decodeSearchableItem<A>(_:)();
  v14[31] = v16;
  if (!v13)
  {
    OUTLINED_FUNCTION_11_10();
    v17._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18.super.Class isa = NSUserActivity.__allocating_init(activityType:)(v17).super.isa;
    OUTLINED_FUNCTION_17_9((uint64_t)v18.super.isa);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
    uint64_t inited = (__n128 *)swift_initStackObject();
    OUTLINED_FUNCTION_24_7(inited, (__n128)xmmword_258661700);
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_23_6(v20, v21);
    OUTLINED_FUNCTION_10_13();
    id v22 = objc_msgSend(v15, sel_uniqueIdentifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_19_8();
    OUTLINED_FUNCTION_18_13();
    uint64_t v23 = (void *)(MEMORY[0x263F8EE58] + 8);
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_5_9();
    uint64_t v24 = OUTLINED_FUNCTION_21_9();
    OUTLINED_FUNCTION_26_10(v24, sel_setUserInfo_);

    id v25 = objc_msgSend(v15, sel_bundleID);
    if (v25)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_20_8();
      id v33 = objc_allocWithZone(MEMORY[0x263F01878]);
      id v34 = OUTLINED_FUNCTION_7_13();
      v14[33] = v34;
      uint64_t v44 = v34;
      id v25 = objc_msgSend(self, sel_defaultWorkspace);
      v14[34] = v25;
      if (v25)
      {
        OUTLINED_FUNCTION_6_10();
        id v45 = objc_allocWithZone(MEMORY[0x263F018D8]);
        v12;
        v44;
        OUTLINED_FUNCTION_12_10((uint64_t)objc_msgSend(v45, sel_init));
        v14[2] = v46;
        OUTLINED_FUNCTION_27_8();
        v14[3] = specialized static SearchSpotlightOpener.openEntity<A>(_:);
        OUTLINED_FUNCTION_16_13();
        v14[23] = MEMORY[0x263EF8330];
        OUTLINED_FUNCTION_25_9(COERCE_DOUBLE(0x40000000));
        v14[25] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool;
        v14[26] = &block_descriptor_12;
        v14[27] = v47;
        OUTLINED_FUNCTION_3_10(v47, sel_openUserActivity_usingApplicationRecord_configuration_completionHandler_);
        OUTLINED_FUNCTION_1_8();
        return MEMORY[0x270FA23F0](v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return MEMORY[0x270FA23F0](v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
  }
  OUTLINED_FUNCTION_13_15();
  OUTLINED_FUNCTION_1_8();
  return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
}

{
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  Swift::String v17;
  NSUserActivity v18;
  __n128 *inited;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;

  OUTLINED_FUNCTION_8_8();
  OUTLINED_FUNCTION_29_7();
  OUTLINED_FUNCTION_28_6();
  specialized static SearchSpotlightOpener.decodeSearchableItem<A>(_:)();
  v14[31] = v16;
  if (!v13)
  {
    OUTLINED_FUNCTION_11_10();
    v17._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18.super.Class isa = NSUserActivity.__allocating_init(activityType:)(v17).super.isa;
    OUTLINED_FUNCTION_17_9((uint64_t)v18.super.isa);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
    uint64_t inited = (__n128 *)swift_initStackObject();
    OUTLINED_FUNCTION_24_7(inited, (__n128)xmmword_258661700);
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_23_6(v20, v21);
    OUTLINED_FUNCTION_10_13();
    id v22 = objc_msgSend(v15, sel_uniqueIdentifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_19_8();
    OUTLINED_FUNCTION_18_13();
    uint64_t v23 = (void *)(MEMORY[0x263F8EE58] + 8);
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_5_9();
    uint64_t v24 = OUTLINED_FUNCTION_21_9();
    OUTLINED_FUNCTION_26_10(v24, sel_setUserInfo_);

    id v25 = objc_msgSend(v15, sel_bundleID);
    if (v25)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_20_8();
      id v33 = objc_allocWithZone(MEMORY[0x263F01878]);
      id v34 = OUTLINED_FUNCTION_7_13();
      v14[33] = v34;
      uint64_t v44 = v34;
      id v25 = objc_msgSend(self, sel_defaultWorkspace);
      v14[34] = v25;
      if (v25)
      {
        OUTLINED_FUNCTION_6_10();
        id v45 = objc_allocWithZone(MEMORY[0x263F018D8]);
        v12;
        v44;
        OUTLINED_FUNCTION_12_10((uint64_t)objc_msgSend(v45, sel_init));
        v14[2] = v46;
        OUTLINED_FUNCTION_27_8();
        v14[3] = specialized static SearchSpotlightOpener.openEntity<A>(_:);
        OUTLINED_FUNCTION_16_13();
        v14[23] = MEMORY[0x263EF8330];
        OUTLINED_FUNCTION_25_9(COERCE_DOUBLE(0x40000000));
        v14[25] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool;
        v14[26] = &block_descriptor_10;
        v14[27] = v47;
        OUTLINED_FUNCTION_3_10(v47, sel_openUserActivity_usingApplicationRecord_configuration_completionHandler_);
        OUTLINED_FUNCTION_1_8();
        return MEMORY[0x270FA23F0](v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return MEMORY[0x270FA23F0](v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
  }
  OUTLINED_FUNCTION_13_15();
  OUTLINED_FUNCTION_1_8();
  return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
}

{
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  Swift::String v17;
  NSUserActivity v18;
  __n128 *inited;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;

  OUTLINED_FUNCTION_8_8();
  OUTLINED_FUNCTION_29_7();
  OUTLINED_FUNCTION_28_6();
  specialized static SearchSpotlightOpener.decodeSearchableItem<A>(_:)();
  v14[31] = v16;
  if (!v13)
  {
    OUTLINED_FUNCTION_11_10();
    v17._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18.super.Class isa = NSUserActivity.__allocating_init(activityType:)(v17).super.isa;
    OUTLINED_FUNCTION_17_9((uint64_t)v18.super.isa);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
    uint64_t inited = (__n128 *)swift_initStackObject();
    OUTLINED_FUNCTION_24_7(inited, (__n128)xmmword_258661700);
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_23_6(v20, v21);
    OUTLINED_FUNCTION_10_13();
    id v22 = objc_msgSend(v15, sel_uniqueIdentifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_19_8();
    OUTLINED_FUNCTION_18_13();
    uint64_t v23 = (void *)(MEMORY[0x263F8EE58] + 8);
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_5_9();
    uint64_t v24 = OUTLINED_FUNCTION_21_9();
    OUTLINED_FUNCTION_26_10(v24, sel_setUserInfo_);

    id v25 = objc_msgSend(v15, sel_bundleID);
    if (v25)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_20_8();
      id v33 = objc_allocWithZone(MEMORY[0x263F01878]);
      id v34 = OUTLINED_FUNCTION_7_13();
      v14[33] = v34;
      uint64_t v44 = v34;
      id v25 = objc_msgSend(self, sel_defaultWorkspace);
      v14[34] = v25;
      if (v25)
      {
        OUTLINED_FUNCTION_6_10();
        id v45 = objc_allocWithZone(MEMORY[0x263F018D8]);
        v12;
        v44;
        OUTLINED_FUNCTION_12_10((uint64_t)objc_msgSend(v45, sel_init));
        v14[2] = v46;
        OUTLINED_FUNCTION_27_8();
        v14[3] = specialized static SearchSpotlightOpener.openEntity<A>(_:);
        OUTLINED_FUNCTION_16_13();
        v14[23] = MEMORY[0x263EF8330];
        OUTLINED_FUNCTION_25_9(COERCE_DOUBLE(0x40000000));
        v14[25] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool;
        v14[26] = &block_descriptor_8;
        v14[27] = v47;
        OUTLINED_FUNCTION_3_10(v47, sel_openUserActivity_usingApplicationRecord_configuration_completionHandler_);
        OUTLINED_FUNCTION_1_8();
        return MEMORY[0x270FA23F0](v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return MEMORY[0x270FA23F0](v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
  }
  OUTLINED_FUNCTION_13_15();
  OUTLINED_FUNCTION_1_8();
  return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
}

{
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  Swift::String v17;
  NSUserActivity v18;
  __n128 *inited;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;

  OUTLINED_FUNCTION_8_8();
  OUTLINED_FUNCTION_29_7();
  OUTLINED_FUNCTION_28_6();
  specialized static SearchSpotlightOpener.decodeSearchableItem<A>(_:)();
  v14[31] = v16;
  if (!v13)
  {
    OUTLINED_FUNCTION_11_10();
    v17._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18.super.Class isa = NSUserActivity.__allocating_init(activityType:)(v17).super.isa;
    OUTLINED_FUNCTION_17_9((uint64_t)v18.super.isa);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
    uint64_t inited = (__n128 *)swift_initStackObject();
    OUTLINED_FUNCTION_24_7(inited, (__n128)xmmword_258661700);
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_23_6(v20, v21);
    OUTLINED_FUNCTION_10_13();
    id v22 = objc_msgSend(v15, sel_uniqueIdentifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_19_8();
    OUTLINED_FUNCTION_18_13();
    uint64_t v23 = (void *)(MEMORY[0x263F8EE58] + 8);
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_5_9();
    uint64_t v24 = OUTLINED_FUNCTION_21_9();
    OUTLINED_FUNCTION_26_10(v24, sel_setUserInfo_);

    id v25 = objc_msgSend(v15, sel_bundleID);
    if (v25)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_20_8();
      id v33 = objc_allocWithZone(MEMORY[0x263F01878]);
      id v34 = OUTLINED_FUNCTION_7_13();
      v14[33] = v34;
      uint64_t v44 = v34;
      id v25 = objc_msgSend(self, sel_defaultWorkspace);
      v14[34] = v25;
      if (v25)
      {
        OUTLINED_FUNCTION_6_10();
        id v45 = objc_allocWithZone(MEMORY[0x263F018D8]);
        v12;
        v44;
        OUTLINED_FUNCTION_12_10((uint64_t)objc_msgSend(v45, sel_init));
        v14[2] = v46;
        OUTLINED_FUNCTION_27_8();
        v14[3] = specialized static SearchSpotlightOpener.openEntity<A>(_:);
        OUTLINED_FUNCTION_16_13();
        v14[23] = MEMORY[0x263EF8330];
        OUTLINED_FUNCTION_25_9(COERCE_DOUBLE(0x40000000));
        v14[25] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool;
        v14[26] = &block_descriptor;
        v14[27] = v47;
        OUTLINED_FUNCTION_3_10(v47, sel_openUserActivity_usingApplicationRecord_configuration_completionHandler_);
        OUTLINED_FUNCTION_1_8();
        return MEMORY[0x270FA23F0](v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return MEMORY[0x270FA23F0](v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
  }
  OUTLINED_FUNCTION_13_15();
  OUTLINED_FUNCTION_1_8();
  return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
}

uint64_t specialized static SearchSpotlightOpener.openEntity<A>(_:)()
{
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_9_9();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 288) = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_9_9();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 288) = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t (*v8)(void);
  unsigned char *v9;
  uint64_t v11;

  uint64_t v1 = *(void **)(v0 + 280);
  uint64_t v3 = *(void **)(v0 + 256);
  uint64_t v2 = *(void **)(v0 + 264);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 296);

  uint64_t v5 = *(void **)(v0 + 256);
  uint64_t v6 = *(void **)(v0 + 264);
  uint64_t v7 = *(void **)(v0 + 248);
  if (v4 == 1)
  {

    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    lazy protocol witness table accessor for type SearchSpotlightOpenerError and conformance SearchSpotlightOpenerError();
    swift_allocError();
    *uint64_t v9 = 2;
    swift_willThrow();

    OUTLINED_FUNCTION_13();
  }
  return v8();
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = (void *)v0[35];
  uint64_t v3 = (void *)v0[33];
  uint64_t v2 = (void *)v0[34];
  uint64_t v5 = (void *)v0[31];
  uint64_t v4 = (void *)v0[32];
  swift_willThrow();

  OUTLINED_FUNCTION_13();
  return v6();
}

uint64_t outlined release of FlightReservationEntity(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 200);
  uint64_t v4 = *(void *)(a1 + 192);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Data?(v4, v3);
  return a1;
}

uint64_t OpenFlightReservationEntityIntent.init()()
{
  type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_15_11();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_16();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_11_0();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_41_5();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_13_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<FlightReservationEntity>);
  OUTLINED_FUNCTION_38_3();
  OUTLINED_FUNCTION_32_6();
  uint64_t v7 = type metadata accessor for IntentDialog();
  OUTLINED_FUNCTION_31_6(v7);
  uint64_t v8 = OUTLINED_FUNCTION_37_5();
  v9(v8);
  lazy protocol witness table accessor for type FlightReservationEntity and conformance FlightReservationEntity();
  return OUTLINED_FUNCTION_30_9();
}

void _s10OmniSearch23FlightReservationEntityVSgWOi0_(void *a1)
{
}

uint64_t outlined init with take of FlightReservationEntity?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlightReservationEntity?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type FlightReservationEntity and conformance FlightReservationEntity()
{
  unint64_t result = lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity;
  if (!lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity;
  if (!lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity;
  if (!lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity;
  if (!lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity;
  if (!lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity;
  if (!lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity;
  if (!lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity;
  if (!lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity;
  if (!lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity;
  if (!lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity;
  if (!lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlightReservationEntity and conformance FlightReservationEntity);
  }
  return result;
}

uint64_t default argument 0 of OpenFlightReservationEntityIntent.init(target:)()
{
  type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_15_11();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_16();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_11_0();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_41_5();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_13_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<FlightReservationEntity>);
  OUTLINED_FUNCTION_38_3();
  OUTLINED_FUNCTION_32_6();
  uint64_t v7 = type metadata accessor for IntentDialog();
  OUTLINED_FUNCTION_31_6(v7);
  uint64_t v8 = OUTLINED_FUNCTION_37_5();
  v9(v8);
  lazy protocol witness table accessor for type FlightReservationEntity and conformance FlightReservationEntity();
  return OUTLINED_FUNCTION_30_9();
}

unint64_t lazy protocol witness table accessor for type OpenFlightReservationEntityIntent and conformance OpenFlightReservationEntityIntent()
{
  unint64_t result = lazy protocol witness table cache variable for type OpenFlightReservationEntityIntent and conformance OpenFlightReservationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenFlightReservationEntityIntent and conformance OpenFlightReservationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenFlightReservationEntityIntent and conformance OpenFlightReservationEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenFlightReservationEntityIntent and conformance OpenFlightReservationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenFlightReservationEntityIntent and conformance OpenFlightReservationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenFlightReservationEntityIntent and conformance OpenFlightReservationEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenFlightReservationEntityIntent and conformance OpenFlightReservationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenFlightReservationEntityIntent and conformance OpenFlightReservationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenFlightReservationEntityIntent and conformance OpenFlightReservationEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenFlightReservationEntityIntent and conformance OpenFlightReservationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenFlightReservationEntityIntent and conformance OpenFlightReservationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenFlightReservationEntityIntent and conformance OpenFlightReservationEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenFlightReservationEntityIntent and conformance OpenFlightReservationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenFlightReservationEntityIntent and conformance OpenFlightReservationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenFlightReservationEntityIntent and conformance OpenFlightReservationEntityIntent);
  }
  return result;
}

uint64_t protocol witness for OpenIntent.target.getter in conformance OpenFlightReservationEntityIntent()
{
  return OpenFlightReservationEntityIntent.target.getter();
}

uint64_t protocol witness for OpenIntent.target.setter in conformance OpenFlightReservationEntityIntent(void *a1)
{
  return OpenFlightReservationEntityIntent.target.setter(a1);
}

uint64_t (*protocol witness for OpenIntent.target.modify in conformance OpenFlightReservationEntityIntent(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t associated type witness table accessor for AppIntent.PerformResult : IntentResult in OpenFlightReservationEntityIntent()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t associated type witness table accessor for AppIntent.SummaryContent : ParameterSummary in OpenFlightReservationEntityIntent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static AppIntent.title.getter in conformance OpenFlightReservationEntityIntent@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenFlightReservationEntityIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t protocol witness for static AppIntent.openAppWhenRun.getter in conformance OpenFlightReservationEntityIntent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenFlightReservationEntityIntent and conformance OpenFlightReservationEntityIntent();
  return MEMORY[0x270EE0E18](a1, v2);
}

uint64_t protocol witness for static AppIntent.description.getter in conformance OpenFlightReservationEntityIntent@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenFlightReservationEntityIntent.description);
  return outlined init with copy of IntentDescription?(v3, a1);
}

uint64_t protocol witness for AppIntent.perform() in conformance OpenFlightReservationEntityIntent()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for AppIntent.perform() in conformance OpenFlightReservationEntityIntent;
  return OpenFlightReservationEntityIntent.perform()();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_2();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13();
  return v0();
}

uint64_t protocol witness for AppIntent.init() in conformance OpenFlightReservationEntityIntent@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = OpenFlightReservationEntityIntent.init()();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static PersistentlyIdentifiable.persistentIdentifier.getter in conformance OpenFlightReservationEntityIntent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenFlightReservationEntityIntent and conformance OpenFlightReservationEntityIntent();
  return MEMORY[0x270EE0D28](a1, v2);
}

ValueMetadata *type metadata accessor for OpenFlightReservationEntityIntent()
{
  return &type metadata for OpenFlightReservationEntityIntent;
}

unint64_t lazy protocol witness table accessor for type IntentResultContainer<Never, Never, Never, Never> and conformance IntentResultContainer<A, B, C, D>()
{
  unint64_t result = lazy protocol witness table cache variable for type IntentResultContainer<Never, Never, Never, Never> and conformance IntentResultContainer<A, B, C, D>;
  if (!lazy protocol witness table cache variable for type IntentResultContainer<Never, Never, Never, Never> and conformance IntentResultContainer<A, B, C, D>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for IntentResultContainer<Never, Never, Never, Never>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntentResultContainer<Never, Never, Never, Never> and conformance IntentResultContainer<A, B, C, D>);
  }
  return result;
}

uint64_t outlined retain of FlightReservationEntity(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 200);
  uint64_t v4 = *(void *)(a1 + 192);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Data?(v4, v3);
  return a1;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

unint64_t type metadata accessor for NSUserActivity()
{
  unint64_t result = lazy cache variable for type metadata for NSUserActivity;
  if (!lazy cache variable for type metadata for NSUserActivity)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSUserActivity);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchSpotlightOpenerError and conformance SearchSpotlightOpenerError()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchSpotlightOpenerError and conformance SearchSpotlightOpenerError;
  if (!lazy protocol witness table cache variable for type SearchSpotlightOpenerError and conformance SearchSpotlightOpenerError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchSpotlightOpenerError and conformance SearchSpotlightOpenerError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchSpotlightOpenerError and conformance SearchSpotlightOpenerError;
  if (!lazy protocol witness table cache variable for type SearchSpotlightOpenerError and conformance SearchSpotlightOpenerError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchSpotlightOpenerError and conformance SearchSpotlightOpenerError);
  }
  return result;
}

id OUTLINED_FUNCTION_3_10(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2, v5, v6, v4);
}

uint64_t OUTLINED_FUNCTION_4_8()
{
  return Dictionary.init(dictionaryLiteral:)();
}

NSDictionary OUTLINED_FUNCTION_5_9()
{
  return Dictionary._bridgeToObjectiveC()();
}

id OUTLINED_FUNCTION_7_13()
{
  return @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v0, v1, 1);
}

uint64_t OUTLINED_FUNCTION_10_13()
{
  return AnyHashable.init<A>(_:)();
}

unint64_t OUTLINED_FUNCTION_11_10()
{
  return type metadata accessor for NSUserActivity();
}

uint64_t OUTLINED_FUNCTION_12_10(uint64_t result)
{
  *(void *)(v1 + 280) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_13_15()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_16_13()
{
  return swift_continuation_init();
}

uint64_t OUTLINED_FUNCTION_17_9(uint64_t result)
{
  *(void *)(v1 + 256) = result;
  return result;
}

void OUTLINED_FUNCTION_18_13()
{
  v0[12] = v1;
  v0[9] = v2;
  v0[10] = v3;
}

void OUTLINED_FUNCTION_19_8()
{
}

void OUTLINED_FUNCTION_20_8()
{
}

uint64_t OUTLINED_FUNCTION_21_9()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_23_6(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 224) = result;
  *(void *)(v2 + 232) = a2;
  return result;
}

__n128 *OUTLINED_FUNCTION_24_7(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

void OUTLINED_FUNCTION_25_9(double a1)
{
  *(double *)(v1 + 192) = a1;
}

id OUTLINED_FUNCTION_26_10(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

void OUTLINED_FUNCTION_27_8()
{
  *(void *)(v0 + 56) = v1;
}

uint64_t OUTLINED_FUNCTION_28_6()
{
  return *(void *)(v0 + 240);
}

uint64_t OUTLINED_FUNCTION_30_9()
{
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
}

uint64_t OUTLINED_FUNCTION_31_6(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v2, 1, 1, a1);
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_32_6()
{
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  _s10OmniSearch23FlightReservationEntityVSgWOi0_((void *)(v0 + 216));
  return outlined init with take of FlightReservationEntity?(v0 + 216, v0 + 8);
}

uint64_t OUTLINED_FUNCTION_34_5()
{
  return type metadata accessor for LocalizedStringResource();
}

uint64_t OUTLINED_FUNCTION_37_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_38_3()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

void *OpenGenericEventEntityIntent.isDiscoverable.unsafeMutableAddressor()
{
  return &static OpenGenericEventEntityIntent.isDiscoverable;
}

uint64_t static OpenGenericEventEntityIntent.isDiscoverable.getter()
{
  return 0;
}

void *OpenGenericEventEntityIntent.assistantOnly.unsafeMutableAddressor()
{
  return &static OpenGenericEventEntityIntent.assistantOnly;
}

uint64_t static OpenGenericEventEntityIntent.assistantOnly.getter()
{
  return 1;
}

uint64_t OpenGenericEventEntityIntent.title.unsafeMutableAddressor()
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  return __swift_project_value_buffer(v0, (uint64_t)static OpenGenericEventEntityIntent.title);
}

uint64_t static OpenGenericEventEntityIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenGenericEventEntityIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t OpenGenericEventEntityIntent.description.unsafeMutableAddressor()
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  return __swift_project_value_buffer(v0, (uint64_t)static OpenGenericEventEntityIntent.description);
}

uint64_t static OpenGenericEventEntityIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenGenericEventEntityIntent.description);
  return outlined init with copy of IntentDescription?(v3, a1);
}

uint64_t OpenGenericEventEntityIntent.target.getter()
{
  return IntentParameter.wrappedValue.getter();
}

void *key path getter for OpenGenericEventEntityIntent.target : OpenGenericEventEntityIntent@<X0>(void *a1@<X8>)
{
  OpenGenericEventEntityIntent.target.getter();
  return memcpy(a1, v3, 0x80uLL);
}

uint64_t key path setter for OpenGenericEventEntityIntent.target : OpenGenericEventEntityIntent(void *__src)
{
  memcpy(v3, __src, sizeof(v3));
  outlined retain of GenericEventEntity((uint64_t)v3);
  return OpenGenericEventEntityIntent.target.setter(__src);
}

uint64_t OpenGenericEventEntityIntent.target.setter(void *__src)
{
  memcpy(v2, __src, sizeof(v2));
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*OpenGenericEventEntityIntent.target.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t OpenGenericEventEntityIntent.$target.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t OpenGenericEventEntityIntent.perform()()
{
  OUTLINED_FUNCTION_27();
  v0[34] = v1;
  v0[35] = v2;
  type metadata accessor for MainActor();
  v0[36] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[37] = v4;
  v0[38] = v3;
  return MEMORY[0x270FA2498](OpenGenericEventEntityIntent.perform(), v4, v3);
}

{
  void *v0;
  void *v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  IntentParameter.wrappedValue.getter();
  memcpy(v0 + 2, v0 + 18, 0x80uLL);
  uint64_t v3 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static SearchSpotlightOpener.openEntity<A>(_:)
                                       + async function pointer to specialized static SearchSpotlightOpener.openEntity<A>(_:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[39] = v1;
  *uint64_t v1 = v0;
  v1[1] = OpenGenericEventEntityIntent.perform();
  return v3((uint64_t)(v0 + 2));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  OUTLINED_FUNCTION_2();
  uint64_t v2 = v1;
  uint64_t v3 = v1 + 16;
  *(void *)(v1 + 320) = v0;
  swift_task_dealloc();
  outlined release of GenericEventEntity(v3);
  uint64_t v4 = *(void *)(v2 + 296);
  uint64_t v5 = *(void *)(v2 + 304);
  if (v0) {
    uint64_t v6 = OpenGenericEventEntityIntent.perform();
  }
  else {
    uint64_t v6 = OpenGenericEventEntityIntent.perform();
  }
  return MEMORY[0x270FA2498](v6, v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_27();
  swift_release();
  static IntentResult.result<>()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_27();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t outlined release of GenericEventEntity(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 112);
  unint64_t v3 = *(void *)(a1 + 120);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Data?(v4, v3);
  return a1;
}

uint64_t OpenGenericEventEntityIntent.init()()
{
  type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_15_11();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_16();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_11_0();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_41_5();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_13_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<GenericEventEntity>);
  OUTLINED_FUNCTION_10_14();
  OUTLINED_FUNCTION_4_9();
  uint64_t v7 = type metadata accessor for IntentDialog();
  OUTLINED_FUNCTION_31_6(v7);
  uint64_t v8 = OUTLINED_FUNCTION_37_5();
  v9(v8);
  lazy protocol witness table accessor for type GenericEventEntity and conformance GenericEventEntity();
  return OUTLINED_FUNCTION_30_9();
}

double _s10OmniSearch18GenericEventEntityVSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t outlined init with take of GenericEventEntity?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenericEventEntity?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type GenericEventEntity and conformance GenericEventEntity()
{
  unint64_t result = lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity;
  if (!lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity;
  if (!lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity;
  if (!lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity;
  if (!lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity;
  if (!lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity;
  if (!lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity;
  if (!lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity;
  if (!lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity;
  if (!lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity;
  if (!lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity;
  if (!lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericEventEntity and conformance GenericEventEntity);
  }
  return result;
}

uint64_t default argument 0 of OpenGenericEventEntityIntent.init(target:)()
{
  type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_15_11();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_16();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_11_0();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_41_5();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_13_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<GenericEventEntity>);
  OUTLINED_FUNCTION_10_14();
  OUTLINED_FUNCTION_4_9();
  uint64_t v7 = type metadata accessor for IntentDialog();
  OUTLINED_FUNCTION_31_6(v7);
  uint64_t v8 = OUTLINED_FUNCTION_37_5();
  v9(v8);
  lazy protocol witness table accessor for type GenericEventEntity and conformance GenericEventEntity();
  return OUTLINED_FUNCTION_30_9();
}

unint64_t lazy protocol witness table accessor for type OpenGenericEventEntityIntent and conformance OpenGenericEventEntityIntent()
{
  unint64_t result = lazy protocol witness table cache variable for type OpenGenericEventEntityIntent and conformance OpenGenericEventEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenGenericEventEntityIntent and conformance OpenGenericEventEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenGenericEventEntityIntent and conformance OpenGenericEventEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenGenericEventEntityIntent and conformance OpenGenericEventEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenGenericEventEntityIntent and conformance OpenGenericEventEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenGenericEventEntityIntent and conformance OpenGenericEventEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenGenericEventEntityIntent and conformance OpenGenericEventEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenGenericEventEntityIntent and conformance OpenGenericEventEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenGenericEventEntityIntent and conformance OpenGenericEventEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenGenericEventEntityIntent and conformance OpenGenericEventEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenGenericEventEntityIntent and conformance OpenGenericEventEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenGenericEventEntityIntent and conformance OpenGenericEventEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenGenericEventEntityIntent and conformance OpenGenericEventEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenGenericEventEntityIntent and conformance OpenGenericEventEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenGenericEventEntityIntent and conformance OpenGenericEventEntityIntent);
  }
  return result;
}

uint64_t protocol witness for OpenIntent.target.getter in conformance OpenGenericEventEntityIntent()
{
  return OpenGenericEventEntityIntent.target.getter();
}

uint64_t protocol witness for OpenIntent.target.setter in conformance OpenGenericEventEntityIntent(void *a1)
{
  return OpenGenericEventEntityIntent.target.setter(a1);
}

uint64_t associated type witness table accessor for AppIntent.PerformResult : IntentResult in OpenGenericEventEntityIntent()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t associated type witness table accessor for AppIntent.SummaryContent : ParameterSummary in OpenGenericEventEntityIntent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static AppIntent.title.getter in conformance OpenGenericEventEntityIntent@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenGenericEventEntityIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t protocol witness for static AppIntent.openAppWhenRun.getter in conformance OpenGenericEventEntityIntent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenGenericEventEntityIntent and conformance OpenGenericEventEntityIntent();
  return MEMORY[0x270EE0E18](a1, v2);
}

uint64_t protocol witness for static AppIntent.description.getter in conformance OpenGenericEventEntityIntent@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenGenericEventEntityIntent.description);
  return outlined init with copy of IntentDescription?(v3, a1);
}

uint64_t protocol witness for AppIntent.perform() in conformance OpenGenericEventEntityIntent()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for AppIntent.perform() in conformance SearchToolLLMQU;
  return OpenGenericEventEntityIntent.perform()();
}

uint64_t protocol witness for AppIntent.init() in conformance OpenGenericEventEntityIntent@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = OpenGenericEventEntityIntent.init()();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static PersistentlyIdentifiable.persistentIdentifier.getter in conformance OpenGenericEventEntityIntent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenGenericEventEntityIntent and conformance OpenGenericEventEntityIntent();
  return MEMORY[0x270EE0D28](a1, v2);
}

ValueMetadata *type metadata accessor for OpenGenericEventEntityIntent()
{
  return &type metadata for OpenGenericEventEntityIntent;
}

uint64_t outlined retain of GenericEventEntity(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 120);
  uint64_t v4 = *(void *)(a1 + 112);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Data?(v4, v3);
  return a1;
}

uint64_t OUTLINED_FUNCTION_4_9()
{
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  _s10OmniSearch18GenericEventEntityVSgWOi0_((_OWORD *)(v0 + 136));
  return outlined init with take of GenericEventEntity?(v0 + 136, v0 + 8);
}

uint64_t OUTLINED_FUNCTION_10_14()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

void *OpenHotelReservationEntityIntent.isDiscoverable.unsafeMutableAddressor()
{
  return &static OpenHotelReservationEntityIntent.isDiscoverable;
}

uint64_t static OpenHotelReservationEntityIntent.isDiscoverable.getter()
{
  return 0;
}

void *OpenHotelReservationEntityIntent.assistantOnly.unsafeMutableAddressor()
{
  return &static OpenHotelReservationEntityIntent.assistantOnly;
}

uint64_t static OpenHotelReservationEntityIntent.assistantOnly.getter()
{
  return 1;
}

uint64_t OpenHotelReservationEntityIntent.title.unsafeMutableAddressor()
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  return __swift_project_value_buffer(v0, (uint64_t)static OpenHotelReservationEntityIntent.title);
}

uint64_t static OpenHotelReservationEntityIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenHotelReservationEntityIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t OpenHotelReservationEntityIntent.description.unsafeMutableAddressor()
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  return __swift_project_value_buffer(v0, (uint64_t)static OpenHotelReservationEntityIntent.description);
}

uint64_t static OpenHotelReservationEntityIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenHotelReservationEntityIntent.description);
  return outlined init with copy of IntentDescription?(v3, a1);
}

uint64_t OpenHotelReservationEntityIntent.target.getter()
{
  return IntentParameter.wrappedValue.getter();
}

double key path getter for OpenHotelReservationEntityIntent.target : OpenHotelReservationEntityIntent@<D0>(uint64_t a1@<X8>)
{
  OpenHotelReservationEntityIntent.target.getter();
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(void *)(a1 + 96) = v9;
  double result = *(double *)&v10;
  *(_OWORD *)(a1 + 104) = v10;
  return result;
}

uint64_t key path setter for OpenHotelReservationEntityIntent.target : OpenHotelReservationEntityIntent(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 104);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Data?(v3, v2);
  return OpenHotelReservationEntityIntent.target.setter();
}

uint64_t OpenHotelReservationEntityIntent.target.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*OpenHotelReservationEntityIntent.target.modify(void *a1))()
{
  unint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t OpenHotelReservationEntityIntent.$target.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t OpenHotelReservationEntityIntent.perform()()
{
  OUTLINED_FUNCTION_27();
  v0[32] = v1;
  v0[33] = v2;
  type metadata accessor for MainActor();
  v0[34] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[35] = v4;
  v0[36] = v3;
  return MEMORY[0x270FA2498](OpenHotelReservationEntityIntent.perform(), v4, v3);
}

{
  void *v0;
  void *v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  IntentParameter.wrappedValue.getter();
  memcpy(v0 + 2, v0 + 17, 0x78uLL);
  uint64_t v3 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static SearchSpotlightOpener.openEntity<A>(_:)
                                       + async function pointer to specialized static SearchSpotlightOpener.openEntity<A>(_:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[37] = v1;
  *uint64_t v1 = v0;
  v1[1] = OpenHotelReservationEntityIntent.perform();
  return v3((uint64_t)(v0 + 2));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  OUTLINED_FUNCTION_2();
  uint64_t v2 = v1;
  uint64_t v3 = v1 + 16;
  *(void *)(v1 + 304) = v0;
  swift_task_dealloc();
  outlined release of HotelReservationEntity(v3);
  uint64_t v4 = *(void *)(v2 + 280);
  long long v5 = *(void *)(v2 + 288);
  if (v0) {
    uint64_t v6 = OpenHotelReservationEntityIntent.perform();
  }
  else {
    uint64_t v6 = OpenHotelReservationEntityIntent.perform();
  }
  return MEMORY[0x270FA2498](v6, v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_27();
  swift_release();
  static IntentResult.result<>()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_27();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t outlined release of HotelReservationEntity(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 104);
  unint64_t v3 = *(void *)(a1 + 112);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Data?(v4, v3);
  return a1;
}

uint64_t OpenHotelReservationEntityIntent.init()()
{
  type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_1_9();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_12_7();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_5_10();
  OUTLINED_FUNCTION_12_11();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_39();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<HotelReservationEntity>);
  OUTLINED_FUNCTION_6_11();
  uint64_t v7 = OUTLINED_FUNCTION_13_16();
  OUTLINED_FUNCTION_0_6(v7);
  uint64_t v8 = OUTLINED_FUNCTION_9_10();
  v9(v8);
  lazy protocol witness table accessor for type HotelReservationEntity and conformance HotelReservationEntity();
  return OUTLINED_FUNCTION_3_11();
}

unint64_t lazy protocol witness table accessor for type HotelReservationEntity and conformance HotelReservationEntity()
{
  unint64_t result = lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity;
  if (!lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity;
  if (!lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity;
  if (!lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity;
  if (!lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity;
  if (!lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity;
  if (!lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity;
  if (!lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity;
  if (!lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity;
  if (!lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity;
  if (!lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity;
  if (!lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HotelReservationEntity and conformance HotelReservationEntity);
  }
  return result;
}

uint64_t default argument 0 of OpenHotelReservationEntityIntent.init(target:)()
{
  type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_1_9();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_12_7();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_5_10();
  OUTLINED_FUNCTION_12_11();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_39();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<HotelReservationEntity>);
  OUTLINED_FUNCTION_6_11();
  uint64_t v7 = OUTLINED_FUNCTION_13_16();
  OUTLINED_FUNCTION_0_6(v7);
  uint64_t v8 = OUTLINED_FUNCTION_9_10();
  v9(v8);
  lazy protocol witness table accessor for type HotelReservationEntity and conformance HotelReservationEntity();
  return OUTLINED_FUNCTION_3_11();
}

unint64_t lazy protocol witness table accessor for type OpenHotelReservationEntityIntent and conformance OpenHotelReservationEntityIntent()
{
  unint64_t result = lazy protocol witness table cache variable for type OpenHotelReservationEntityIntent and conformance OpenHotelReservationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenHotelReservationEntityIntent and conformance OpenHotelReservationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenHotelReservationEntityIntent and conformance OpenHotelReservationEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenHotelReservationEntityIntent and conformance OpenHotelReservationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenHotelReservationEntityIntent and conformance OpenHotelReservationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenHotelReservationEntityIntent and conformance OpenHotelReservationEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenHotelReservationEntityIntent and conformance OpenHotelReservationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenHotelReservationEntityIntent and conformance OpenHotelReservationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenHotelReservationEntityIntent and conformance OpenHotelReservationEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenHotelReservationEntityIntent and conformance OpenHotelReservationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenHotelReservationEntityIntent and conformance OpenHotelReservationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenHotelReservationEntityIntent and conformance OpenHotelReservationEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenHotelReservationEntityIntent and conformance OpenHotelReservationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenHotelReservationEntityIntent and conformance OpenHotelReservationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenHotelReservationEntityIntent and conformance OpenHotelReservationEntityIntent);
  }
  return result;
}

uint64_t protocol witness for OpenIntent.target.getter in conformance OpenHotelReservationEntityIntent()
{
  return OpenHotelReservationEntityIntent.target.getter();
}

uint64_t protocol witness for OpenIntent.target.setter in conformance OpenHotelReservationEntityIntent()
{
  return OpenHotelReservationEntityIntent.target.setter();
}

uint64_t associated type witness table accessor for AppIntent.PerformResult : IntentResult in OpenHotelReservationEntityIntent()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t associated type witness table accessor for AppIntent.SummaryContent : ParameterSummary in OpenHotelReservationEntityIntent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static AppIntent.title.getter in conformance OpenHotelReservationEntityIntent@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenHotelReservationEntityIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t protocol witness for static AppIntent.openAppWhenRun.getter in conformance OpenHotelReservationEntityIntent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenHotelReservationEntityIntent and conformance OpenHotelReservationEntityIntent();
  return MEMORY[0x270EE0E18](a1, v2);
}

uint64_t protocol witness for static AppIntent.description.getter in conformance OpenHotelReservationEntityIntent@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenHotelReservationEntityIntent.description);
  return outlined init with copy of IntentDescription?(v3, a1);
}

uint64_t protocol witness for AppIntent.perform() in conformance OpenHotelReservationEntityIntent()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for AppIntent.perform() in conformance SearchToolLLMQU;
  return OpenHotelReservationEntityIntent.perform()();
}

uint64_t protocol witness for AppIntent.init() in conformance OpenHotelReservationEntityIntent@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = OpenHotelReservationEntityIntent.init()();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static PersistentlyIdentifiable.persistentIdentifier.getter in conformance OpenHotelReservationEntityIntent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenHotelReservationEntityIntent and conformance OpenHotelReservationEntityIntent();
  return MEMORY[0x270EE0D28](a1, v2);
}

ValueMetadata *type metadata accessor for OpenHotelReservationEntityIntent()
{
  return &type metadata for OpenHotelReservationEntityIntent;
}

uint64_t OUTLINED_FUNCTION_0_6(uint64_t a1)
{
  *(_OWORD *)(v3 - 208) = 0u;
  *(_OWORD *)(v3 - 192) = 0u;
  *(_OWORD *)(v3 - 176) = 0u;
  *(_OWORD *)(v3 - 160) = 0u;
  *(_OWORD *)(v3 - 144) = 0u;
  *(_OWORD *)(v3 - 128) = 0u;
  *(_OWORD *)(v3 - 112) = 0u;
  *(void *)(v3 - 96) = 0;
  __swift_storeEnumTagSinglePayload(v2, 1, 1, a1);
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_3_11()
{
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
}

uint64_t OUTLINED_FUNCTION_5_10()
{
  return type metadata accessor for LocalizedStringResource();
}

uint64_t OUTLINED_FUNCTION_6_11()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_9_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_16()
{
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
  return type metadata accessor for IntentDialog();
}

void *OpenIDCardBusinessEntityIntent.isDiscoverable.unsafeMutableAddressor()
{
  return &static OpenIDCardBusinessEntityIntent.isDiscoverable;
}

uint64_t static OpenIDCardBusinessEntityIntent.isDiscoverable.getter()
{
  return 0;
}

void *OpenIDCardBusinessEntityIntent.assistantOnly.unsafeMutableAddressor()
{
  return &static OpenIDCardBusinessEntityIntent.assistantOnly;
}

uint64_t static OpenIDCardBusinessEntityIntent.assistantOnly.getter()
{
  return 1;
}

uint64_t OpenIDCardBusinessEntityIntent.title.unsafeMutableAddressor()
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  return __swift_project_value_buffer(v0, (uint64_t)static OpenIDCardBusinessEntityIntent.title);
}

uint64_t static OpenIDCardBusinessEntityIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenIDCardBusinessEntityIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t OpenIDCardBusinessEntityIntent.description.unsafeMutableAddressor()
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  return __swift_project_value_buffer(v0, (uint64_t)static OpenIDCardBusinessEntityIntent.description);
}

uint64_t static OpenIDCardBusinessEntityIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenIDCardBusinessEntityIntent.description);
  return outlined init with copy of IntentDescription?(v3, a1);
}

uint64_t OpenIDCardBusinessEntityIntent.target.getter()
{
  return IntentParameter.wrappedValue.getter();
}

double key path getter for OpenIDCardBusinessEntityIntent.target : OpenIDCardBusinessEntityIntent@<D0>(uint64_t a1@<X8>)
{
  OpenIDCardBusinessEntityIntent.target.getter();
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 64) = v7;
  double result = *(double *)&v8;
  *(_OWORD *)(a1 + 72) = v8;
  return result;
}

uint64_t key path setter for OpenIDCardBusinessEntityIntent.target : OpenIDCardBusinessEntityIntent(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  unint64_t v2 = *(void *)(a1 + 80);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Data?(v1, v2);
  return OpenIDCardBusinessEntityIntent.target.setter();
}

uint64_t OpenIDCardBusinessEntityIntent.target.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*OpenIDCardBusinessEntityIntent.target.modify(void *a1))()
{
  unint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t OpenIDCardBusinessEntityIntent.$target.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t OpenIDCardBusinessEntityIntent.perform()()
{
  OUTLINED_FUNCTION_27();
  v0[24] = v1;
  v0[25] = v2;
  type metadata accessor for MainActor();
  v0[26] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[27] = v4;
  v0[28] = v3;
  return MEMORY[0x270FA2498](OpenIDCardBusinessEntityIntent.perform(), v4, v3);
}

{
  void *v0;
  void *v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  IntentParameter.wrappedValue.getter();
  memcpy(v0 + 2, v0 + 13, 0x58uLL);
  uint64_t v3 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static SearchSpotlightOpener.openEntity<A>(_:)
                                       + async function pointer to specialized static SearchSpotlightOpener.openEntity<A>(_:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[29] = v1;
  *uint64_t v1 = v0;
  v1[1] = OpenIDCardBusinessEntityIntent.perform();
  return v3((uint64_t)(v0 + 2));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  OUTLINED_FUNCTION_2();
  uint64_t v2 = v1;
  uint64_t v3 = v1 + 16;
  *(void *)(v1 + 240) = v0;
  swift_task_dealloc();
  outlined release of BusinessCardEntity(v3);
  uint64_t v4 = *(void *)(v2 + 216);
  long long v5 = *(void *)(v2 + 224);
  if (v0) {
    uint64_t v6 = OpenIDCardBusinessEntityIntent.perform();
  }
  else {
    uint64_t v6 = OpenIDCardBusinessEntityIntent.perform();
  }
  return MEMORY[0x270FA2498](v6, v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_27();
  swift_release();
  static IntentResult.result<>()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_27();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t outlined release of BusinessCardEntity(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 72);
  unint64_t v2 = *(void *)(a1 + 80);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Data?(v3, v2);
  return a1;
}

uint64_t OpenIDCardBusinessEntityIntent.init()()
{
  type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_1_9();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_12_7();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_5_10();
  OUTLINED_FUNCTION_12_11();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_39();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<BusinessCardEntity>);
  OUTLINED_FUNCTION_6_12();
  uint64_t v7 = OUTLINED_FUNCTION_13_16();
  OUTLINED_FUNCTION_0_7(v7);
  uint64_t v8 = OUTLINED_FUNCTION_9_10();
  v9(v8);
  lazy protocol witness table accessor for type BusinessCardEntity and conformance BusinessCardEntity();
  return OUTLINED_FUNCTION_3_12();
}

unint64_t lazy protocol witness table accessor for type BusinessCardEntity and conformance BusinessCardEntity()
{
  unint64_t result = lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity;
  if (!lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity;
  if (!lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity;
  if (!lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity;
  if (!lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity;
  if (!lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity;
  if (!lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity;
  if (!lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity;
  if (!lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity;
  if (!lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity;
  if (!lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity;
  if (!lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BusinessCardEntity and conformance BusinessCardEntity);
  }
  return result;
}

uint64_t default argument 0 of OpenIDCardBusinessEntityIntent.init(target:)()
{
  type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_1_9();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_12_7();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_5_10();
  OUTLINED_FUNCTION_12_11();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_39();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<BusinessCardEntity>);
  OUTLINED_FUNCTION_6_12();
  uint64_t v7 = OUTLINED_FUNCTION_13_16();
  OUTLINED_FUNCTION_0_7(v7);
  uint64_t v8 = OUTLINED_FUNCTION_9_10();
  v9(v8);
  lazy protocol witness table accessor for type BusinessCardEntity and conformance BusinessCardEntity();
  return OUTLINED_FUNCTION_3_12();
}

unint64_t lazy protocol witness table accessor for type OpenIDCardBusinessEntityIntent and conformance OpenIDCardBusinessEntityIntent()
{
  unint64_t result = lazy protocol witness table cache variable for type OpenIDCardBusinessEntityIntent and conformance OpenIDCardBusinessEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenIDCardBusinessEntityIntent and conformance OpenIDCardBusinessEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenIDCardBusinessEntityIntent and conformance OpenIDCardBusinessEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenIDCardBusinessEntityIntent and conformance OpenIDCardBusinessEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenIDCardBusinessEntityIntent and conformance OpenIDCardBusinessEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenIDCardBusinessEntityIntent and conformance OpenIDCardBusinessEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenIDCardBusinessEntityIntent and conformance OpenIDCardBusinessEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenIDCardBusinessEntityIntent and conformance OpenIDCardBusinessEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenIDCardBusinessEntityIntent and conformance OpenIDCardBusinessEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenIDCardBusinessEntityIntent and conformance OpenIDCardBusinessEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenIDCardBusinessEntityIntent and conformance OpenIDCardBusinessEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenIDCardBusinessEntityIntent and conformance OpenIDCardBusinessEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenIDCardBusinessEntityIntent and conformance OpenIDCardBusinessEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenIDCardBusinessEntityIntent and conformance OpenIDCardBusinessEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenIDCardBusinessEntityIntent and conformance OpenIDCardBusinessEntityIntent);
  }
  return result;
}

uint64_t protocol witness for OpenIntent.target.getter in conformance OpenIDCardBusinessEntityIntent()
{
  return OpenIDCardBusinessEntityIntent.target.getter();
}

uint64_t protocol witness for OpenIntent.target.setter in conformance OpenIDCardBusinessEntityIntent()
{
  return OpenIDCardBusinessEntityIntent.target.setter();
}

uint64_t associated type witness table accessor for AppIntent.PerformResult : IntentResult in OpenIDCardBusinessEntityIntent()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t associated type witness table accessor for AppIntent.SummaryContent : ParameterSummary in OpenIDCardBusinessEntityIntent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static AppIntent.title.getter in conformance OpenIDCardBusinessEntityIntent@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenIDCardBusinessEntityIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t protocol witness for static AppIntent.openAppWhenRun.getter in conformance OpenIDCardBusinessEntityIntent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenIDCardBusinessEntityIntent and conformance OpenIDCardBusinessEntityIntent();
  return MEMORY[0x270EE0E18](a1, v2);
}

uint64_t protocol witness for static AppIntent.description.getter in conformance OpenIDCardBusinessEntityIntent@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenIDCardBusinessEntityIntent.description);
  return outlined init with copy of IntentDescription?(v3, a1);
}

uint64_t protocol witness for AppIntent.perform() in conformance OpenIDCardBusinessEntityIntent()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for AppIntent.perform() in conformance SearchToolLLMQU;
  return OpenIDCardBusinessEntityIntent.perform()();
}

uint64_t protocol witness for AppIntent.init() in conformance OpenIDCardBusinessEntityIntent@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = OpenIDCardBusinessEntityIntent.init()();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static PersistentlyIdentifiable.persistentIdentifier.getter in conformance OpenIDCardBusinessEntityIntent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenIDCardBusinessEntityIntent and conformance OpenIDCardBusinessEntityIntent();
  return MEMORY[0x270EE0D28](a1, v2);
}

ValueMetadata *type metadata accessor for OpenIDCardBusinessEntityIntent()
{
  return &type metadata for OpenIDCardBusinessEntityIntent;
}

uint64_t OUTLINED_FUNCTION_0_7(uint64_t a1)
{
  *(_OWORD *)(v3 - 176) = 0u;
  *(_OWORD *)(v3 - 160) = 0u;
  *(_OWORD *)(v3 - 144) = 0u;
  *(_OWORD *)(v3 - 128) = 0u;
  *(_OWORD *)(v3 - 112) = 0u;
  *(void *)(v3 - 96) = 0;
  __swift_storeEnumTagSinglePayload(v2, 1, 1, a1);
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_3_12()
{
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
}

uint64_t OUTLINED_FUNCTION_6_12()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

void *OpenIDCardPersonalEntityIntent.isDiscoverable.unsafeMutableAddressor()
{
  return &static OpenIDCardPersonalEntityIntent.isDiscoverable;
}

uint64_t static OpenIDCardPersonalEntityIntent.isDiscoverable.getter()
{
  return 0;
}

void *OpenIDCardPersonalEntityIntent.assistantOnly.unsafeMutableAddressor()
{
  return &static OpenIDCardPersonalEntityIntent.assistantOnly;
}

uint64_t static OpenIDCardPersonalEntityIntent.assistantOnly.getter()
{
  return 1;
}

uint64_t OpenIDCardPersonalEntityIntent.title.unsafeMutableAddressor()
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  return __swift_project_value_buffer(v0, (uint64_t)static OpenIDCardPersonalEntityIntent.title);
}

uint64_t static OpenIDCardPersonalEntityIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenIDCardPersonalEntityIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t OpenIDCardPersonalEntityIntent.description.unsafeMutableAddressor()
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  return __swift_project_value_buffer(v0, (uint64_t)static OpenIDCardPersonalEntityIntent.description);
}

uint64_t static OpenIDCardPersonalEntityIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenIDCardPersonalEntityIntent.description);
  return outlined init with copy of IntentDescription?(v3, a1);
}

uint64_t OpenIDCardPersonalEntityIntent.target.getter()
{
  return IntentParameter.wrappedValue.getter();
}

void *key path getter for OpenIDCardPersonalEntityIntent.target : OpenIDCardPersonalEntityIntent@<X0>(void *a1@<X8>)
{
  OpenIDCardPersonalEntityIntent.target.getter();
  return memcpy(a1, __src, 0xB8uLL);
}

uint64_t key path setter for OpenIDCardPersonalEntityIntent.target : OpenIDCardPersonalEntityIntent(void *__src)
{
  memcpy(__dst, __src, sizeof(__dst));
  outlined retain of PersonalCardEntity((uint64_t)__dst);
  return OpenIDCardPersonalEntityIntent.target.setter(__src);
}

uint64_t OpenIDCardPersonalEntityIntent.target.setter(void *__src)
{
  memcpy(__dst, __src, sizeof(__dst));
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*OpenIDCardPersonalEntityIntent.target.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t OpenIDCardPersonalEntityIntent.$target.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t OpenIDCardPersonalEntityIntent.perform()()
{
  OUTLINED_FUNCTION_27();
  v0[48] = v1;
  v0[49] = v2;
  type metadata accessor for MainActor();
  v0[50] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[51] = v4;
  v0[52] = v3;
  return MEMORY[0x270FA2498](OpenIDCardPersonalEntityIntent.perform(), v4, v3);
}

{
  void *v0;
  void *v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  IntentParameter.wrappedValue.getter();
  memcpy(v0 + 2, v0 + 25, 0xB8uLL);
  uint64_t v3 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static SearchSpotlightOpener.openEntity<A>(_:)
                                       + async function pointer to specialized static SearchSpotlightOpener.openEntity<A>(_:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[53] = v1;
  *uint64_t v1 = v0;
  v1[1] = OpenIDCardPersonalEntityIntent.perform();
  return v3((uint64_t)(v0 + 2));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  OUTLINED_FUNCTION_2();
  uint64_t v2 = v1;
  uint64_t v3 = v1 + 16;
  *(void *)(v1 + 432) = v0;
  swift_task_dealloc();
  outlined release of PersonalCardEntity(v3);
  uint64_t v4 = *(void *)(v2 + 408);
  uint64_t v5 = *(void *)(v2 + 416);
  if (v0) {
    uint64_t v6 = OpenIDCardPersonalEntityIntent.perform();
  }
  else {
    uint64_t v6 = OpenIDCardPersonalEntityIntent.perform();
  }
  return MEMORY[0x270FA2498](v6, v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_27();
  swift_release();
  static IntentResult.result<>()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_27();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t outlined release of PersonalCardEntity(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 176);
  uint64_t v4 = *(void *)(a1 + 168);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Data?(v4, v3);
  return a1;
}

uint64_t OpenIDCardPersonalEntityIntent.init()()
{
  type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_15_11();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_16();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_11_0();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_41_5();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_13_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<PersonalCardEntity>);
  OUTLINED_FUNCTION_10_15();
  OUTLINED_FUNCTION_4_11();
  uint64_t v7 = type metadata accessor for IntentDialog();
  OUTLINED_FUNCTION_31_6(v7);
  uint64_t v8 = OUTLINED_FUNCTION_37_5();
  v9(v8);
  lazy protocol witness table accessor for type PersonalCardEntity and conformance PersonalCardEntity();
  return OUTLINED_FUNCTION_30_9();
}

void _s10OmniSearch18PersonalCardEntityVSgWOi0_(void *a1)
{
}

uint64_t outlined init with take of PersonalCardEntity?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalCardEntity?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type PersonalCardEntity and conformance PersonalCardEntity()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity;
  if (!lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity;
  if (!lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity;
  if (!lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity;
  if (!lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity;
  if (!lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity;
  if (!lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity;
  if (!lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity;
  if (!lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity;
  if (!lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity;
  if (!lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity;
  if (!lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalCardEntity and conformance PersonalCardEntity);
  }
  return result;
}

uint64_t default argument 0 of OpenIDCardPersonalEntityIntent.init(target:)()
{
  type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_15_11();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_16();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_11_0();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_41_5();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_13_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<PersonalCardEntity>);
  OUTLINED_FUNCTION_10_15();
  OUTLINED_FUNCTION_4_11();
  uint64_t v7 = type metadata accessor for IntentDialog();
  OUTLINED_FUNCTION_31_6(v7);
  uint64_t v8 = OUTLINED_FUNCTION_37_5();
  v9(v8);
  lazy protocol witness table accessor for type PersonalCardEntity and conformance PersonalCardEntity();
  return OUTLINED_FUNCTION_30_9();
}

unint64_t lazy protocol witness table accessor for type OpenIDCardPersonalEntityIntent and conformance OpenIDCardPersonalEntityIntent()
{
  unint64_t result = lazy protocol witness table cache variable for type OpenIDCardPersonalEntityIntent and conformance OpenIDCardPersonalEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenIDCardPersonalEntityIntent and conformance OpenIDCardPersonalEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenIDCardPersonalEntityIntent and conformance OpenIDCardPersonalEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenIDCardPersonalEntityIntent and conformance OpenIDCardPersonalEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenIDCardPersonalEntityIntent and conformance OpenIDCardPersonalEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenIDCardPersonalEntityIntent and conformance OpenIDCardPersonalEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenIDCardPersonalEntityIntent and conformance OpenIDCardPersonalEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenIDCardPersonalEntityIntent and conformance OpenIDCardPersonalEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenIDCardPersonalEntityIntent and conformance OpenIDCardPersonalEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenIDCardPersonalEntityIntent and conformance OpenIDCardPersonalEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenIDCardPersonalEntityIntent and conformance OpenIDCardPersonalEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenIDCardPersonalEntityIntent and conformance OpenIDCardPersonalEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenIDCardPersonalEntityIntent and conformance OpenIDCardPersonalEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenIDCardPersonalEntityIntent and conformance OpenIDCardPersonalEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenIDCardPersonalEntityIntent and conformance OpenIDCardPersonalEntityIntent);
  }
  return result;
}

uint64_t protocol witness for OpenIntent.target.getter in conformance OpenIDCardPersonalEntityIntent()
{
  return OpenIDCardPersonalEntityIntent.target.getter();
}

uint64_t protocol witness for OpenIntent.target.setter in conformance OpenIDCardPersonalEntityIntent(void *a1)
{
  return OpenIDCardPersonalEntityIntent.target.setter(a1);
}

uint64_t associated type witness table accessor for AppIntent.PerformResult : IntentResult in OpenIDCardPersonalEntityIntent()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t associated type witness table accessor for AppIntent.SummaryContent : ParameterSummary in OpenIDCardPersonalEntityIntent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static AppIntent.title.getter in conformance OpenIDCardPersonalEntityIntent@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenIDCardPersonalEntityIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t protocol witness for static AppIntent.openAppWhenRun.getter in conformance OpenIDCardPersonalEntityIntent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenIDCardPersonalEntityIntent and conformance OpenIDCardPersonalEntityIntent();
  return MEMORY[0x270EE0E18](a1, v2);
}

uint64_t protocol witness for static AppIntent.description.getter in conformance OpenIDCardPersonalEntityIntent@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenIDCardPersonalEntityIntent.description);
  return outlined init with copy of IntentDescription?(v3, a1);
}

uint64_t protocol witness for AppIntent.perform() in conformance OpenIDCardPersonalEntityIntent()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for AppIntent.perform() in conformance SearchToolLLMQU;
  return OpenIDCardPersonalEntityIntent.perform()();
}

uint64_t protocol witness for AppIntent.init() in conformance OpenIDCardPersonalEntityIntent@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = OpenIDCardPersonalEntityIntent.init()();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static PersistentlyIdentifiable.persistentIdentifier.getter in conformance OpenIDCardPersonalEntityIntent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenIDCardPersonalEntityIntent and conformance OpenIDCardPersonalEntityIntent();
  return MEMORY[0x270EE0D28](a1, v2);
}

ValueMetadata *type metadata accessor for OpenIDCardPersonalEntityIntent()
{
  return &type metadata for OpenIDCardPersonalEntityIntent;
}

uint64_t outlined retain of PersonalCardEntity(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 168);
  unint64_t v3 = *(void *)(a1 + 176);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Data?(v4, v3);
  return a1;
}

uint64_t OUTLINED_FUNCTION_4_11()
{
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  _s10OmniSearch18PersonalCardEntityVSgWOi0_((void *)(v0 + 192));
  return outlined init with take of PersonalCardEntity?(v0 + 192, v0 + 8);
}

uint64_t OUTLINED_FUNCTION_10_15()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

void *OpenMediaEntityIntent.isDiscoverable.unsafeMutableAddressor()
{
  return &static OpenMediaEntityIntent.isDiscoverable;
}

uint64_t static OpenMediaEntityIntent.isDiscoverable.getter()
{
  return 0;
}

void *OpenMediaEntityIntent.assistantOnly.unsafeMutableAddressor()
{
  return &static OpenMediaEntityIntent.assistantOnly;
}

uint64_t static OpenMediaEntityIntent.assistantOnly.getter()
{
  return 1;
}

uint64_t OpenMediaEntityIntent.title.unsafeMutableAddressor()
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  return __swift_project_value_buffer(v0, (uint64_t)static OpenMediaEntityIntent.title);
}

uint64_t static OpenMediaEntityIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenMediaEntityIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t OpenMediaEntityIntent.description.unsafeMutableAddressor()
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  return __swift_project_value_buffer(v0, (uint64_t)static OpenMediaEntityIntent.description);
}

uint64_t static OpenMediaEntityIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenMediaEntityIntent.description);
  return outlined init with copy of IntentDescription?(v3, a1);
}

uint64_t OpenMediaEntityIntent.target.getter()
{
  return IntentParameter.wrappedValue.getter();
}

double key path getter for OpenMediaEntityIntent.target : OpenMediaEntityIntent@<D0>(uint64_t a1@<X8>)
{
  OpenMediaEntityIntent.target.getter();
  *(void *)a1 = v3;
  double result = *(double *)&v4;
  *(_OWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t key path setter for OpenMediaEntityIntent.target : OpenMediaEntityIntent(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  unint64_t v2 = *(void *)(a1 + 16);
  swift_retain();
  outlined copy of Data?(v1, v2);
  return OpenMediaEntityIntent.target.setter();
}

uint64_t OpenMediaEntityIntent.target.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*OpenMediaEntityIntent.target.modify(void *a1))()
{
  unint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t OpenMediaEntityIntent.$target.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t OpenMediaEntityIntent.init()()
{
  type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_1_9();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_12_7();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_5_10();
  OUTLINED_FUNCTION_12_11();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_39();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<MediaEntity>);
  OUTLINED_FUNCTION_2_5();
  uint64_t v7 = OUTLINED_FUNCTION_13_16();
  OUTLINED_FUNCTION_1_10(v7);
  uint64_t v8 = OUTLINED_FUNCTION_9_10();
  v9(v8);
  lazy protocol witness table accessor for type MediaEntity and conformance MediaEntity();
  return OUTLINED_FUNCTION_3_13();
}

unint64_t lazy protocol witness table accessor for type MediaEntity and conformance MediaEntity()
{
  unint64_t result = lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity;
  if (!lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity;
  if (!lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity;
  if (!lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity;
  if (!lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity;
  if (!lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity;
  if (!lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity;
  if (!lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity;
  if (!lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity;
  if (!lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity;
  if (!lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity;
  if (!lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaEntity and conformance MediaEntity);
  }
  return result;
}

uint64_t default argument 0 of OpenMediaEntityIntent.init(target:)()
{
  type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_1_9();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_12_7();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_5_10();
  OUTLINED_FUNCTION_12_11();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_39();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<MediaEntity>);
  OUTLINED_FUNCTION_2_5();
  uint64_t v7 = OUTLINED_FUNCTION_13_16();
  OUTLINED_FUNCTION_1_10(v7);
  uint64_t v8 = OUTLINED_FUNCTION_9_10();
  v9(v8);
  lazy protocol witness table accessor for type MediaEntity and conformance MediaEntity();
  return OUTLINED_FUNCTION_3_13();
}

unint64_t lazy protocol witness table accessor for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent()
{
  unint64_t result = lazy protocol witness table cache variable for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent);
  }
  return result;
}

uint64_t protocol witness for OpenIntent.target.getter in conformance OpenMediaEntityIntent()
{
  return OpenMediaEntityIntent.target.getter();
}

uint64_t protocol witness for OpenIntent.target.setter in conformance OpenMediaEntityIntent()
{
  return OpenMediaEntityIntent.target.setter();
}

uint64_t protocol witness for static URLRepresentableIntent.urlRepresentation.getter in conformance OpenMediaEntityIntent(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent();
  unint64_t v5 = lazy protocol witness table accessor for type MediaEntity and conformance MediaEntity();
  return MEMORY[0x270EE1B28](a1, v4, a2, v5);
}

unint64_t lazy protocol witness table accessor for type Never and conformance Never()
{
  unint64_t result = lazy protocol witness table cache variable for type Never and conformance Never;
  if (!lazy protocol witness table cache variable for type Never and conformance Never)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Never and conformance Never);
  }
  return result;
}

uint64_t associated type witness table accessor for AppIntent.SummaryContent : ParameterSummary in OpenMediaEntityIntent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static AppIntent.title.getter in conformance OpenMediaEntityIntent@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenMediaEntityIntent.title);
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t protocol witness for static AppIntent.openAppWhenRun.getter in conformance OpenMediaEntityIntent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent();
  return MEMORY[0x270EE0E18](a1, v2);
}

uint64_t protocol witness for static AppIntent.description.getter in conformance OpenMediaEntityIntent@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenMediaEntityIntent.description);
  return outlined init with copy of IntentDescription?(v3, a1);
}

uint64_t protocol witness for AppIntent.perform() in conformance OpenMediaEntityIntent(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  unint64_t v5 = lazy protocol witness table accessor for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent();
  unint64_t v6 = lazy protocol witness table accessor for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent();
  unint64_t v7 = lazy protocol witness table accessor for type MediaEntity and conformance MediaEntity();
  *unint64_t v4 = v2;
  v4[1] = protocol witness for AppIntent.perform() in conformance OpenMediaEntityIntent;
  return MEMORY[0x270EE1B30](a2, v5, v6, v7);
}

uint64_t protocol witness for AppIntent.perform() in conformance OpenMediaEntityIntent()
{
  uint64_t v2 = *v1;
  uint64_t result = swift_task_dealloc();
  if (v0)
  {
    unint64_t v4 = *(uint64_t (**)(void))(v2 + 8);
    return v4();
  }
  return result;
}

uint64_t protocol witness for AppIntent.init() in conformance OpenMediaEntityIntent@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = OpenMediaEntityIntent.init()();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static PersistentlyIdentifiable.persistentIdentifier.getter in conformance OpenMediaEntityIntent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenMediaEntityIntent and conformance OpenMediaEntityIntent();
  return MEMORY[0x270EE0D28](a1, v2);
}

ValueMetadata *type metadata accessor for OpenMediaEntityIntent()
{
  return &type metadata for OpenMediaEntityIntent;
}

uint64_t OUTLINED_FUNCTION_1_10(uint64_t a1)
{
  *(void *)(v3 - 96) = 0;
  *(void *)(v3 - 88) = 0;
  *(void *)(v3 - 104) = 0;
  __swift_storeEnumTagSinglePayload(v2, 1, 1, a1);
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_2_5()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_3_13()
{
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
}

void *OpenRestaurantReservationEntityIntent.isDiscoverable.unsafeMutableAddressor()
{
  return &static OpenRestaurantReservationEntityIntent.isDiscoverable;
}

uint64_t static OpenRestaurantReservationEntityIntent.isDiscoverable.getter()
{
  return 0;
}

void *OpenRestaurantReservationEntityIntent.assistantOnly.unsafeMutableAddressor()
{
  return &static OpenRestaurantReservationEntityIntent.assistantOnly;
}

uint64_t static OpenRestaurantReservationEntityIntent.assistantOnly.getter()
{
  return 1;
}

uint64_t OpenRestaurantReservationEntityIntent.title.unsafeMutableAddressor()
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  return __swift_project_value_buffer(v0, (uint64_t)static OpenRestaurantReservationEntityIntent.title);
}

uint64_t static OpenRestaurantReservationEntityIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenRestaurantReservationEntityIntent.title);
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t OpenRestaurantReservationEntityIntent.description.unsafeMutableAddressor()
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  return __swift_project_value_buffer(v0, (uint64_t)static OpenRestaurantReservationEntityIntent.description);
}

uint64_t static OpenRestaurantReservationEntityIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenRestaurantReservationEntityIntent.description);
  return outlined init with copy of IntentDescription?(v3, a1);
}

uint64_t OpenRestaurantReservationEntityIntent.target.getter()
{
  return IntentParameter.wrappedValue.getter();
}

double key path getter for OpenRestaurantReservationEntityIntent.target : OpenRestaurantReservationEntityIntent@<D0>(_OWORD *a1@<X8>)
{
  OpenRestaurantReservationEntityIntent.target.getter();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  double result = *(double *)&v7;
  a1[4] = v7;
  a1[5] = v8;
  return result;
}

uint64_t key path setter for OpenRestaurantReservationEntityIntent.target : OpenRestaurantReservationEntityIntent(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  unint64_t v3 = *(void *)(a1 + 88);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Data?(v1, v3);
  return OpenRestaurantReservationEntityIntent.target.setter();
}

uint64_t OpenRestaurantReservationEntityIntent.target.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*OpenRestaurantReservationEntityIntent.target.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t OpenRestaurantReservationEntityIntent.$target.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t OpenRestaurantReservationEntityIntent.perform()()
{
  OUTLINED_FUNCTION_27();
  v0[26] = v1;
  v0[27] = v2;
  type metadata accessor for MainActor();
  v0[28] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[29] = v4;
  v0[30] = v3;
  return MEMORY[0x270FA2498](OpenRestaurantReservationEntityIntent.perform(), v4, v3);
}

{
  void *v0;
  void *v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  IntentParameter.wrappedValue.getter();
  memcpy(v0 + 2, v0 + 14, 0x60uLL);
  uint64_t v3 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static SearchSpotlightOpener.openEntity<A>(_:)
                                       + async function pointer to specialized static SearchSpotlightOpener.openEntity<A>(_:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[31] = v1;
  *uint64_t v1 = v0;
  v1[1] = OpenRestaurantReservationEntityIntent.perform();
  return v3((uint64_t)(v0 + 2));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  OUTLINED_FUNCTION_2();
  uint64_t v2 = v1;
  uint64_t v3 = v1 + 16;
  *(void *)(v1 + 256) = v0;
  swift_task_dealloc();
  outlined release of RestaurantReservationEntity(v3);
  uint64_t v4 = *(void *)(v2 + 232);
  long long v5 = *(void *)(v2 + 240);
  if (v0) {
    uint64_t v6 = OpenRestaurantReservationEntityIntent.perform();
  }
  else {
    uint64_t v6 = OpenRestaurantReservationEntityIntent.perform();
  }
  return MEMORY[0x270FA2498](v6, v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_27();
  swift_release();
  static IntentResult.result<>()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_27();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t outlined release of RestaurantReservationEntity(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  unint64_t v3 = *(void *)(a1 + 88);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Data?(v2, v3);
  return a1;
}

uint64_t OpenRestaurantReservationEntityIntent.init()()
{
  type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_1_9();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_12_7();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_5_10();
  OUTLINED_FUNCTION_12_11();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_39();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<RestaurantReservationEntity>);
  OUTLINED_FUNCTION_7_14();
  uint64_t v7 = OUTLINED_FUNCTION_13_16();
  OUTLINED_FUNCTION_1_11(v7);
  uint64_t v8 = OUTLINED_FUNCTION_9_10();
  v9(v8);
  lazy protocol witness table accessor for type RestaurantReservationEntity and conformance RestaurantReservationEntity();
  return OUTLINED_FUNCTION_3_12();
}

unint64_t lazy protocol witness table accessor for type RestaurantReservationEntity and conformance RestaurantReservationEntity()
{
  unint64_t result = lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity;
  if (!lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity;
  if (!lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity;
  if (!lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity;
  if (!lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity;
  if (!lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity;
  if (!lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity;
  if (!lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity;
  if (!lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity;
  if (!lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity;
  if (!lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity;
  if (!lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RestaurantReservationEntity and conformance RestaurantReservationEntity);
  }
  return result;
}

uint64_t default argument 0 of OpenRestaurantReservationEntityIntent.init(target:)()
{
  type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_1_9();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_12_7();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_5_10();
  OUTLINED_FUNCTION_12_11();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_39();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<RestaurantReservationEntity>);
  OUTLINED_FUNCTION_7_14();
  uint64_t v7 = OUTLINED_FUNCTION_13_16();
  OUTLINED_FUNCTION_1_11(v7);
  uint64_t v8 = OUTLINED_FUNCTION_9_10();
  v9(v8);
  lazy protocol witness table accessor for type RestaurantReservationEntity and conformance RestaurantReservationEntity();
  return OUTLINED_FUNCTION_3_12();
}

unint64_t lazy protocol witness table accessor for type OpenRestaurantReservationEntityIntent and conformance OpenRestaurantReservationEntityIntent()
{
  unint64_t result = lazy protocol witness table cache variable for type OpenRestaurantReservationEntityIntent and conformance OpenRestaurantReservationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenRestaurantReservationEntityIntent and conformance OpenRestaurantReservationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenRestaurantReservationEntityIntent and conformance OpenRestaurantReservationEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenRestaurantReservationEntityIntent and conformance OpenRestaurantReservationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenRestaurantReservationEntityIntent and conformance OpenRestaurantReservationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenRestaurantReservationEntityIntent and conformance OpenRestaurantReservationEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenRestaurantReservationEntityIntent and conformance OpenRestaurantReservationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenRestaurantReservationEntityIntent and conformance OpenRestaurantReservationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenRestaurantReservationEntityIntent and conformance OpenRestaurantReservationEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenRestaurantReservationEntityIntent and conformance OpenRestaurantReservationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenRestaurantReservationEntityIntent and conformance OpenRestaurantReservationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenRestaurantReservationEntityIntent and conformance OpenRestaurantReservationEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenRestaurantReservationEntityIntent and conformance OpenRestaurantReservationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenRestaurantReservationEntityIntent and conformance OpenRestaurantReservationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenRestaurantReservationEntityIntent and conformance OpenRestaurantReservationEntityIntent);
  }
  return result;
}

uint64_t protocol witness for OpenIntent.target.getter in conformance OpenRestaurantReservationEntityIntent()
{
  return OpenRestaurantReservationEntityIntent.target.getter();
}

uint64_t protocol witness for OpenIntent.target.setter in conformance OpenRestaurantReservationEntityIntent()
{
  return OpenRestaurantReservationEntityIntent.target.setter();
}

uint64_t associated type witness table accessor for AppIntent.PerformResult : IntentResult in OpenRestaurantReservationEntityIntent()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t associated type witness table accessor for AppIntent.SummaryContent : ParameterSummary in OpenRestaurantReservationEntityIntent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static AppIntent.title.getter in conformance OpenRestaurantReservationEntityIntent@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenRestaurantReservationEntityIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t protocol witness for static AppIntent.openAppWhenRun.getter in conformance OpenRestaurantReservationEntityIntent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenRestaurantReservationEntityIntent and conformance OpenRestaurantReservationEntityIntent();
  return MEMORY[0x270EE0E18](a1, v2);
}

uint64_t protocol witness for static AppIntent.description.getter in conformance OpenRestaurantReservationEntityIntent@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenRestaurantReservationEntityIntent.description);
  return outlined init with copy of IntentDescription?(v3, a1);
}

uint64_t protocol witness for AppIntent.perform() in conformance OpenRestaurantReservationEntityIntent()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for AppIntent.perform() in conformance SearchToolLLMQU;
  return OpenRestaurantReservationEntityIntent.perform()();
}

uint64_t protocol witness for AppIntent.init() in conformance OpenRestaurantReservationEntityIntent@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = OpenRestaurantReservationEntityIntent.init()();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static PersistentlyIdentifiable.persistentIdentifier.getter in conformance OpenRestaurantReservationEntityIntent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenRestaurantReservationEntityIntent and conformance OpenRestaurantReservationEntityIntent();
  return MEMORY[0x270EE0D28](a1, v2);
}

ValueMetadata *type metadata accessor for OpenRestaurantReservationEntityIntent()
{
  return &type metadata for OpenRestaurantReservationEntityIntent;
}

uint64_t OUTLINED_FUNCTION_1_11(uint64_t a1)
{
  *(_OWORD *)(v3 - 176) = 0u;
  *(_OWORD *)(v3 - 160) = 0u;
  *(_OWORD *)(v3 - 144) = 0u;
  *(_OWORD *)(v3 - 128) = 0u;
  *(_OWORD *)(v3 - 112) = 0u;
  *(_OWORD *)(v3 - 96) = 0u;
  __swift_storeEnumTagSinglePayload(v2, 1, 1, a1);
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_7_14()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

void *OpenSearchSpotlightEntityIntent.isDiscoverable.unsafeMutableAddressor()
{
  return &static OpenSearchSpotlightEntityIntent.isDiscoverable;
}

uint64_t static OpenSearchSpotlightEntityIntent.isDiscoverable.getter()
{
  return 0;
}

void *OpenSearchSpotlightEntityIntent.assistantOnly.unsafeMutableAddressor()
{
  return &static OpenSearchSpotlightEntityIntent.assistantOnly;
}

uint64_t static OpenSearchSpotlightEntityIntent.assistantOnly.getter()
{
  return 1;
}

uint64_t OpenSearchSpotlightEntityIntent.title.unsafeMutableAddressor()
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  return __swift_project_value_buffer(v0, (uint64_t)static OpenSearchSpotlightEntityIntent.title);
}

uint64_t static OpenSearchSpotlightEntityIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenSearchSpotlightEntityIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t OpenSearchSpotlightEntityIntent.description.unsafeMutableAddressor()
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  return __swift_project_value_buffer(v0, (uint64_t)static OpenSearchSpotlightEntityIntent.description);
}

uint64_t static OpenSearchSpotlightEntityIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenSearchSpotlightEntityIntent.description);
  return outlined init with copy of IntentDescription?(v3, a1);
}

uint64_t OpenSearchSpotlightEntityIntent.target.getter()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t key path setter for OpenSearchSpotlightEntityIntent.target : OpenSearchSpotlightEntityIntent(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SearchSpotlightEntity(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SearchSpotlightEntity(a1, (uint64_t)v4);
  return OpenSearchSpotlightEntityIntent.target.setter((uint64_t)v4);
}

uint64_t OpenSearchSpotlightEntityIntent.target.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SearchSpotlightEntity(0);
  uint64_t v3 = OUTLINED_FUNCTION_81(v2);
  MEMORY[0x270FA5388](v3);
  outlined init with copy of SearchSpotlightEntity(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  IntentParameter.wrappedValue.setter();
  return outlined destroy of SearchSpotlightEntity(a1);
}

uint64_t outlined init with copy of SearchSpotlightEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchSpotlightEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SearchSpotlightEntity(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SearchSpotlightEntity(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t (*OpenSearchSpotlightEntityIntent.target.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t OpenSearchSpotlightEntityIntent.$target.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t OpenSearchSpotlightEntityIntent.perform()()
{
  OUTLINED_FUNCTION_27();
  v0[2] = v1;
  v0[3] = v2;
  uint64_t v3 = type metadata accessor for SearchSpotlightEntity(0);
  OUTLINED_FUNCTION_81(v3);
  v0[4] = swift_task_alloc();
  type metadata accessor for MainActor();
  v0[5] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[6] = v5;
  v0[7] = v4;
  return MEMORY[0x270FA2498](OpenSearchSpotlightEntityIntent.perform(), v5, v4);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;

  OUTLINED_FUNCTION_27();
  IntentParameter.wrappedValue.getter();
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static SearchSpotlightOpener.openEntity<A>(_:)
                                       + async function pointer to specialized static SearchSpotlightOpener.openEntity<A>(_:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  *uint64_t v1 = v0;
  v1[1] = OpenSearchSpotlightEntityIntent.perform();
  uint64_t v2 = *(void *)(v0 + 32);
  return v4(v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 32);
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc();
  outlined destroy of SearchSpotlightEntity(v3);
  uint64_t v4 = *(void *)(v2 + 56);
  uint64_t v5 = *(void *)(v2 + 48);
  if (v0) {
    uint64_t v6 = OpenSearchSpotlightEntityIntent.perform();
  }
  else {
    uint64_t v6 = OpenSearchSpotlightEntityIntent.perform();
  }
  return MEMORY[0x270FA2498](v6, v5, v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_27();
  swift_release();
  static IntentResult.result<>()();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_27();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t OpenSearchSpotlightEntityIntent.init()()
{
  type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_15_11();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_17_1();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SearchSpotlightEntity?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_18_8();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v7 = OUTLINED_FUNCTION_81(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_41_5();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_13_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<SearchSpotlightEntity>);
  OUTLINED_FUNCTION_10_15();
  uint64_t v9 = OUTLINED_FUNCTION_14_13();
  uint64_t v10 = OUTLINED_FUNCTION_12_12(v9);
  OUTLINED_FUNCTION_1_12(v10);
  uint64_t v11 = OUTLINED_FUNCTION_8_9();
  v12(v11);
  lazy protocol witness table accessor for type SearchSpotlightEntity and conformance SearchSpotlightEntity(&lazy protocol witness table cache variable for type SearchSpotlightEntity and conformance SearchSpotlightEntity);
  return OUTLINED_FUNCTION_3_14();
}

uint64_t default argument 0 of OpenSearchSpotlightEntityIntent.init(target:)()
{
  type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_15_11();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_17_1();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SearchSpotlightEntity?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_18_8();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v7 = OUTLINED_FUNCTION_81(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_41_5();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_13_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<SearchSpotlightEntity>);
  OUTLINED_FUNCTION_10_15();
  uint64_t v9 = OUTLINED_FUNCTION_14_13();
  uint64_t v10 = OUTLINED_FUNCTION_12_12(v9);
  OUTLINED_FUNCTION_1_12(v10);
  uint64_t v11 = OUTLINED_FUNCTION_8_9();
  v12(v11);
  lazy protocol witness table accessor for type SearchSpotlightEntity and conformance SearchSpotlightEntity(&lazy protocol witness table cache variable for type SearchSpotlightEntity and conformance SearchSpotlightEntity);
  return OUTLINED_FUNCTION_3_14();
}

unint64_t lazy protocol witness table accessor for type OpenSearchSpotlightEntityIntent and conformance OpenSearchSpotlightEntityIntent()
{
  unint64_t result = lazy protocol witness table cache variable for type OpenSearchSpotlightEntityIntent and conformance OpenSearchSpotlightEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenSearchSpotlightEntityIntent and conformance OpenSearchSpotlightEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenSearchSpotlightEntityIntent and conformance OpenSearchSpotlightEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenSearchSpotlightEntityIntent and conformance OpenSearchSpotlightEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenSearchSpotlightEntityIntent and conformance OpenSearchSpotlightEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenSearchSpotlightEntityIntent and conformance OpenSearchSpotlightEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenSearchSpotlightEntityIntent and conformance OpenSearchSpotlightEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenSearchSpotlightEntityIntent and conformance OpenSearchSpotlightEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenSearchSpotlightEntityIntent and conformance OpenSearchSpotlightEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenSearchSpotlightEntityIntent and conformance OpenSearchSpotlightEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenSearchSpotlightEntityIntent and conformance OpenSearchSpotlightEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenSearchSpotlightEntityIntent and conformance OpenSearchSpotlightEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenSearchSpotlightEntityIntent and conformance OpenSearchSpotlightEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenSearchSpotlightEntityIntent and conformance OpenSearchSpotlightEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenSearchSpotlightEntityIntent and conformance OpenSearchSpotlightEntityIntent);
  }
  return result;
}

uint64_t associated type witness table accessor for OpenIntent.Value : AppValue in OpenSearchSpotlightEntityIntent()
{
  return lazy protocol witness table accessor for type SearchSpotlightEntity and conformance SearchSpotlightEntity(&lazy protocol witness table cache variable for type SearchSpotlightEntity and conformance SearchSpotlightEntity);
}

uint64_t lazy protocol witness table accessor for type SearchSpotlightEntity and conformance SearchSpotlightEntity(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for SearchSpotlightEntity(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for OpenIntent.target.getter in conformance OpenSearchSpotlightEntityIntent()
{
  return OpenSearchSpotlightEntityIntent.target.getter();
}

uint64_t protocol witness for OpenIntent.target.setter in conformance OpenSearchSpotlightEntityIntent(uint64_t a1)
{
  return OpenSearchSpotlightEntityIntent.target.setter(a1);
}

uint64_t associated type witness table accessor for AppIntent.PerformResult : IntentResult in OpenSearchSpotlightEntityIntent()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t associated type witness table accessor for AppIntent.SummaryContent : ParameterSummary in OpenSearchSpotlightEntityIntent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static AppIntent.title.getter in conformance OpenSearchSpotlightEntityIntent@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenSearchSpotlightEntityIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t protocol witness for static AppIntent.openAppWhenRun.getter in conformance OpenSearchSpotlightEntityIntent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenSearchSpotlightEntityIntent and conformance OpenSearchSpotlightEntityIntent();
  return MEMORY[0x270EE0E18](a1, v2);
}

uint64_t protocol witness for static AppIntent.description.getter in conformance OpenSearchSpotlightEntityIntent@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenSearchSpotlightEntityIntent.description);
  return outlined init with copy of IntentDescription?(v3, a1);
}

uint64_t protocol witness for AppIntent.perform() in conformance OpenSearchSpotlightEntityIntent()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for RegexExtractionRule.extractMatched(typedResult:) in conformance MediaAnswerRule;
  return OpenSearchSpotlightEntityIntent.perform()();
}

uint64_t protocol witness for AppIntent.init() in conformance OpenSearchSpotlightEntityIntent@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = OpenSearchSpotlightEntityIntent.init()();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static PersistentlyIdentifiable.persistentIdentifier.getter in conformance OpenSearchSpotlightEntityIntent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenSearchSpotlightEntityIntent and conformance OpenSearchSpotlightEntityIntent();
  return MEMORY[0x270EE0D28](a1, v2);
}

uint64_t sub_257F7401C()
{
  return OpenSearchSpotlightEntityIntent.target.getter();
}

ValueMetadata *type metadata accessor for OpenSearchSpotlightEntityIntent()
{
  return &type metadata for OpenSearchSpotlightEntityIntent;
}

uint64_t OUTLINED_FUNCTION_1_12(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v2, 1, 1, a1);
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_3_14()
{
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
}

uint64_t OUTLINED_FUNCTION_8_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_12_12(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
  return type metadata accessor for IntentDialog();
}

uint64_t OUTLINED_FUNCTION_14_13()
{
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
  return type metadata accessor for SearchSpotlightEntity(0);
}

void *OpenTicketedShowEntityIntent.isDiscoverable.unsafeMutableAddressor()
{
  return &static OpenTicketedShowEntityIntent.isDiscoverable;
}

uint64_t static OpenTicketedShowEntityIntent.isDiscoverable.getter()
{
  return 0;
}

void *OpenTicketedShowEntityIntent.assistantOnly.unsafeMutableAddressor()
{
  return &static OpenTicketedShowEntityIntent.assistantOnly;
}

uint64_t static OpenTicketedShowEntityIntent.assistantOnly.getter()
{
  return 1;
}

uint64_t OpenTicketedShowEntityIntent.title.unsafeMutableAddressor()
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  return __swift_project_value_buffer(v0, (uint64_t)static OpenTicketedShowEntityIntent.title);
}

uint64_t static OpenTicketedShowEntityIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenTicketedShowEntityIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t OpenTicketedShowEntityIntent.description.unsafeMutableAddressor()
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  return __swift_project_value_buffer(v0, (uint64_t)static OpenTicketedShowEntityIntent.description);
}

uint64_t static OpenTicketedShowEntityIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenTicketedShowEntityIntent.description);
  return outlined init with copy of IntentDescription?(v3, a1);
}

uint64_t OpenTicketedShowEntityIntent.target.getter()
{
  return IntentParameter.wrappedValue.getter();
}

void *key path getter for OpenTicketedShowEntityIntent.target : OpenTicketedShowEntityIntent@<X0>(void *a1@<X8>)
{
  OpenTicketedShowEntityIntent.target.getter();
  return memcpy(a1, v3, 0x80uLL);
}

uint64_t key path setter for OpenTicketedShowEntityIntent.target : OpenTicketedShowEntityIntent(void *__src)
{
  memcpy(v3, __src, sizeof(v3));
  outlined retain of GenericEventEntity((uint64_t)v3);
  return OpenTicketedShowEntityIntent.target.setter(__src);
}

uint64_t OpenTicketedShowEntityIntent.target.setter(void *__src)
{
  memcpy(v2, __src, sizeof(v2));
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*OpenTicketedShowEntityIntent.target.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t OpenTicketedShowEntityIntent.$target.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t OpenTicketedShowEntityIntent.perform()()
{
  OUTLINED_FUNCTION_27();
  v0[34] = v1;
  v0[35] = v2;
  type metadata accessor for MainActor();
  v0[36] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[37] = v4;
  v0[38] = v3;
  return MEMORY[0x270FA2498](OpenTicketedShowEntityIntent.perform(), v4, v3);
}

{
  void *v0;
  void *v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  IntentParameter.wrappedValue.getter();
  memcpy(v0 + 2, v0 + 18, 0x80uLL);
  uint64_t v3 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static SearchSpotlightOpener.openEntity<A>(_:)
                                       + async function pointer to specialized static SearchSpotlightOpener.openEntity<A>(_:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[39] = v1;
  *uint64_t v1 = v0;
  v1[1] = OpenGenericEventEntityIntent.perform();
  return v3((uint64_t)(v0 + 2));
}

uint64_t OpenTicketedShowEntityIntent.init()()
{
  type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_15_11();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_16();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_11_0();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_41_5();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_13_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<TicketedShowEntity>);
  OUTLINED_FUNCTION_10_14();
  OUTLINED_FUNCTION_4_12();
  uint64_t v7 = type metadata accessor for IntentDialog();
  OUTLINED_FUNCTION_31_6(v7);
  uint64_t v8 = OUTLINED_FUNCTION_37_5();
  v9(v8);
  lazy protocol witness table accessor for type TicketedShowEntity and conformance TicketedShowEntity();
  return OUTLINED_FUNCTION_30_9();
}

uint64_t outlined init with take of TicketedShowEntity?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShowEntity?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type TicketedShowEntity and conformance TicketedShowEntity()
{
  unint64_t result = lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity;
  if (!lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity;
  if (!lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity;
  if (!lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity;
  if (!lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity;
  if (!lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity;
  if (!lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity;
  if (!lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity;
  if (!lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity;
  if (!lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity;
  if (!lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity;
  if (!lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedShowEntity and conformance TicketedShowEntity);
  }
  return result;
}

uint64_t default argument 0 of OpenTicketedShowEntityIntent.init(target:)()
{
  type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_15_11();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_16();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_11_0();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_41_5();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_13_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<TicketedShowEntity>);
  OUTLINED_FUNCTION_10_14();
  OUTLINED_FUNCTION_4_12();
  uint64_t v7 = type metadata accessor for IntentDialog();
  OUTLINED_FUNCTION_31_6(v7);
  uint64_t v8 = OUTLINED_FUNCTION_37_5();
  v9(v8);
  lazy protocol witness table accessor for type TicketedShowEntity and conformance TicketedShowEntity();
  return OUTLINED_FUNCTION_30_9();
}

unint64_t lazy protocol witness table accessor for type OpenTicketedShowEntityIntent and conformance OpenTicketedShowEntityIntent()
{
  unint64_t result = lazy protocol witness table cache variable for type OpenTicketedShowEntityIntent and conformance OpenTicketedShowEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenTicketedShowEntityIntent and conformance OpenTicketedShowEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenTicketedShowEntityIntent and conformance OpenTicketedShowEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenTicketedShowEntityIntent and conformance OpenTicketedShowEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenTicketedShowEntityIntent and conformance OpenTicketedShowEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenTicketedShowEntityIntent and conformance OpenTicketedShowEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenTicketedShowEntityIntent and conformance OpenTicketedShowEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenTicketedShowEntityIntent and conformance OpenTicketedShowEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenTicketedShowEntityIntent and conformance OpenTicketedShowEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenTicketedShowEntityIntent and conformance OpenTicketedShowEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenTicketedShowEntityIntent and conformance OpenTicketedShowEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenTicketedShowEntityIntent and conformance OpenTicketedShowEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenTicketedShowEntityIntent and conformance OpenTicketedShowEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenTicketedShowEntityIntent and conformance OpenTicketedShowEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenTicketedShowEntityIntent and conformance OpenTicketedShowEntityIntent);
  }
  return result;
}

uint64_t protocol witness for OpenIntent.target.getter in conformance OpenTicketedShowEntityIntent()
{
  return OpenTicketedShowEntityIntent.target.getter();
}

uint64_t protocol witness for OpenIntent.target.setter in conformance OpenTicketedShowEntityIntent(void *a1)
{
  return OpenTicketedShowEntityIntent.target.setter(a1);
}

uint64_t associated type witness table accessor for AppIntent.PerformResult : IntentResult in OpenTicketedShowEntityIntent()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t associated type witness table accessor for AppIntent.SummaryContent : ParameterSummary in OpenTicketedShowEntityIntent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static AppIntent.title.getter in conformance OpenTicketedShowEntityIntent@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenTicketedShowEntityIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t protocol witness for static AppIntent.openAppWhenRun.getter in conformance OpenTicketedShowEntityIntent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenTicketedShowEntityIntent and conformance OpenTicketedShowEntityIntent();
  return MEMORY[0x270EE0E18](a1, v2);
}

uint64_t protocol witness for static AppIntent.description.getter in conformance OpenTicketedShowEntityIntent@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenTicketedShowEntityIntent.description);
  return outlined init with copy of IntentDescription?(v3, a1);
}

uint64_t protocol witness for AppIntent.perform() in conformance OpenTicketedShowEntityIntent()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for AppIntent.perform() in conformance SearchToolLLMQU;
  return OpenTicketedShowEntityIntent.perform()();
}

uint64_t protocol witness for AppIntent.init() in conformance OpenTicketedShowEntityIntent@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = OpenTicketedShowEntityIntent.init()();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static PersistentlyIdentifiable.persistentIdentifier.getter in conformance OpenTicketedShowEntityIntent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenTicketedShowEntityIntent and conformance OpenTicketedShowEntityIntent();
  return MEMORY[0x270EE0D28](a1, v2);
}

ValueMetadata *type metadata accessor for OpenTicketedShowEntityIntent()
{
  return &type metadata for OpenTicketedShowEntityIntent;
}

uint64_t OUTLINED_FUNCTION_4_12()
{
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  _s10OmniSearch18GenericEventEntityVSgWOi0_((_OWORD *)(v0 + 136));
  return outlined init with take of TicketedShowEntity?(v0 + 136, v0 + 8);
}

void *OpenTicketedTransportationEntityIntent.isDiscoverable.unsafeMutableAddressor()
{
  return &static OpenTicketedTransportationEntityIntent.isDiscoverable;
}

uint64_t static OpenTicketedTransportationEntityIntent.isDiscoverable.getter()
{
  return 0;
}

void *OpenTicketedTransportationEntityIntent.assistantOnly.unsafeMutableAddressor()
{
  return &static OpenTicketedTransportationEntityIntent.assistantOnly;
}

uint64_t static OpenTicketedTransportationEntityIntent.assistantOnly.getter()
{
  return 1;
}

uint64_t OpenTicketedTransportationEntityIntent.title.unsafeMutableAddressor()
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  return __swift_project_value_buffer(v0, (uint64_t)static OpenTicketedTransportationEntityIntent.title);
}

uint64_t static OpenTicketedTransportationEntityIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenTicketedTransportationEntityIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t OpenTicketedTransportationEntityIntent.description.unsafeMutableAddressor()
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  return __swift_project_value_buffer(v0, (uint64_t)static OpenTicketedTransportationEntityIntent.description);
}

uint64_t static OpenTicketedTransportationEntityIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenTicketedTransportationEntityIntent.description);
  return outlined init with copy of IntentDescription?(v3, a1);
}

uint64_t OpenTicketedTransportationEntityIntent.target.getter()
{
  return IntentParameter.wrappedValue.getter();
}

double key path getter for OpenTicketedTransportationEntityIntent.target : OpenTicketedTransportationEntityIntent@<D0>(uint64_t a1@<X8>)
{
  OpenTicketedTransportationEntityIntent.target.getter();
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(void *)(a1 + 80) = v8;
  double result = *(double *)&v9;
  *(_OWORD *)(a1 + 88) = v9;
  return result;
}

uint64_t key path setter for OpenTicketedTransportationEntityIntent.target : OpenTicketedTransportationEntityIntent(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 88);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Data?(v3, v2);
  return OpenTicketedTransportationEntityIntent.target.setter();
}

uint64_t OpenTicketedTransportationEntityIntent.target.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*OpenTicketedTransportationEntityIntent.target.modify(void *a1))()
{
  unint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t OpenTicketedTransportationEntityIntent.$target.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t OpenTicketedTransportationEntityIntent.perform()()
{
  OUTLINED_FUNCTION_27();
  v0[28] = v1;
  v0[29] = v2;
  type metadata accessor for MainActor();
  v0[30] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[31] = v4;
  v0[32] = v3;
  return MEMORY[0x270FA2498](OpenTicketedTransportationEntityIntent.perform(), v4, v3);
}

{
  void *v0;
  void *v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  IntentParameter.wrappedValue.getter();
  memcpy(v0 + 2, v0 + 15, 0x68uLL);
  uint64_t v3 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static SearchSpotlightOpener.openEntity<A>(_:)
                                       + async function pointer to specialized static SearchSpotlightOpener.openEntity<A>(_:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[33] = v1;
  *uint64_t v1 = v0;
  v1[1] = OpenTicketedTransportationEntityIntent.perform();
  return v3((uint64_t)(v0 + 2));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  OUTLINED_FUNCTION_2();
  uint64_t v2 = v1;
  uint64_t v3 = v1 + 16;
  *(void *)(v1 + 272) = v0;
  swift_task_dealloc();
  outlined release of TicketedTransportationEntity(v3);
  uint64_t v4 = *(void *)(v2 + 248);
  long long v5 = *(void *)(v2 + 256);
  if (v0) {
    uint64_t v6 = OpenTicketedTransportationEntityIntent.perform();
  }
  else {
    uint64_t v6 = OpenTicketedTransportationEntityIntent.perform();
  }
  return MEMORY[0x270FA2498](v6, v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_27();
  swift_release();
  static IntentResult.result<>()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_27();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t outlined release of TicketedTransportationEntity(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  unint64_t v4 = *(void *)(a1 + 96);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Data?(v2, v4);
  return a1;
}

uint64_t OpenTicketedTransportationEntityIntent.init()()
{
  type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_1_9();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_12_7();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_5_10();
  OUTLINED_FUNCTION_12_11();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_39();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<TicketedTransportationEntity>);
  OUTLINED_FUNCTION_6_13();
  uint64_t v7 = OUTLINED_FUNCTION_13_16();
  OUTLINED_FUNCTION_0_8(v7);
  uint64_t v8 = OUTLINED_FUNCTION_9_10();
  v9(v8);
  lazy protocol witness table accessor for type TicketedTransportationEntity and conformance TicketedTransportationEntity();
  return OUTLINED_FUNCTION_3_15();
}

unint64_t lazy protocol witness table accessor for type TicketedTransportationEntity and conformance TicketedTransportationEntity()
{
  unint64_t result = lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity;
  if (!lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity;
  if (!lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity;
  if (!lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity;
  if (!lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity;
  if (!lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity;
  if (!lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity;
  if (!lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity;
  if (!lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity;
  if (!lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity;
  if (!lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity;
  if (!lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TicketedTransportationEntity and conformance TicketedTransportationEntity);
  }
  return result;
}

uint64_t default argument 0 of OpenTicketedTransportationEntityIntent.init(target:)()
{
  type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_1_9();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_12_7();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_5_10();
  OUTLINED_FUNCTION_12_11();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_39();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<TicketedTransportationEntity>);
  OUTLINED_FUNCTION_6_13();
  uint64_t v7 = OUTLINED_FUNCTION_13_16();
  OUTLINED_FUNCTION_0_8(v7);
  uint64_t v8 = OUTLINED_FUNCTION_9_10();
  v9(v8);
  lazy protocol witness table accessor for type TicketedTransportationEntity and conformance TicketedTransportationEntity();
  return OUTLINED_FUNCTION_3_15();
}

unint64_t lazy protocol witness table accessor for type OpenTicketedTransportationEntityIntent and conformance OpenTicketedTransportationEntityIntent()
{
  unint64_t result = lazy protocol witness table cache variable for type OpenTicketedTransportationEntityIntent and conformance OpenTicketedTransportationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenTicketedTransportationEntityIntent and conformance OpenTicketedTransportationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenTicketedTransportationEntityIntent and conformance OpenTicketedTransportationEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenTicketedTransportationEntityIntent and conformance OpenTicketedTransportationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenTicketedTransportationEntityIntent and conformance OpenTicketedTransportationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenTicketedTransportationEntityIntent and conformance OpenTicketedTransportationEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenTicketedTransportationEntityIntent and conformance OpenTicketedTransportationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenTicketedTransportationEntityIntent and conformance OpenTicketedTransportationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenTicketedTransportationEntityIntent and conformance OpenTicketedTransportationEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenTicketedTransportationEntityIntent and conformance OpenTicketedTransportationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenTicketedTransportationEntityIntent and conformance OpenTicketedTransportationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenTicketedTransportationEntityIntent and conformance OpenTicketedTransportationEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenTicketedTransportationEntityIntent and conformance OpenTicketedTransportationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenTicketedTransportationEntityIntent and conformance OpenTicketedTransportationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenTicketedTransportationEntityIntent and conformance OpenTicketedTransportationEntityIntent);
  }
  return result;
}

uint64_t protocol witness for OpenIntent.target.getter in conformance OpenTicketedTransportationEntityIntent()
{
  return OpenTicketedTransportationEntityIntent.target.getter();
}

uint64_t protocol witness for OpenIntent.target.setter in conformance OpenTicketedTransportationEntityIntent()
{
  return OpenTicketedTransportationEntityIntent.target.setter();
}

uint64_t associated type witness table accessor for AppIntent.PerformResult : IntentResult in OpenTicketedTransportationEntityIntent()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t associated type witness table accessor for AppIntent.SummaryContent : ParameterSummary in OpenTicketedTransportationEntityIntent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static AppIntent.title.getter in conformance OpenTicketedTransportationEntityIntent@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenTicketedTransportationEntityIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t protocol witness for static AppIntent.openAppWhenRun.getter in conformance OpenTicketedTransportationEntityIntent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenTicketedTransportationEntityIntent and conformance OpenTicketedTransportationEntityIntent();
  return MEMORY[0x270EE0E18](a1, v2);
}

uint64_t protocol witness for static AppIntent.description.getter in conformance OpenTicketedTransportationEntityIntent@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenTicketedTransportationEntityIntent.description);
  return outlined init with copy of IntentDescription?(v3, a1);
}

uint64_t protocol witness for AppIntent.perform() in conformance OpenTicketedTransportationEntityIntent()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for AppIntent.perform() in conformance SearchToolLLMQU;
  return OpenTicketedTransportationEntityIntent.perform()();
}

uint64_t protocol witness for AppIntent.init() in conformance OpenTicketedTransportationEntityIntent@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = OpenTicketedTransportationEntityIntent.init()();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static PersistentlyIdentifiable.persistentIdentifier.getter in conformance OpenTicketedTransportationEntityIntent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenTicketedTransportationEntityIntent and conformance OpenTicketedTransportationEntityIntent();
  return MEMORY[0x270EE0D28](a1, v2);
}

ValueMetadata *type metadata accessor for OpenTicketedTransportationEntityIntent()
{
  return &type metadata for OpenTicketedTransportationEntityIntent;
}

uint64_t OUTLINED_FUNCTION_0_8(uint64_t a1)
{
  *(_OWORD *)(v3 - 192) = 0u;
  *(_OWORD *)(v3 - 176) = 0u;
  *(_OWORD *)(v3 - 160) = 0u;
  *(_OWORD *)(v3 - 144) = 0u;
  *(_OWORD *)(v3 - 128) = 0u;
  *(_OWORD *)(v3 - 112) = 0u;
  *(void *)(v3 - 96) = 0;
  __swift_storeEnumTagSinglePayload(v2, 1, 1, a1);
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_3_15()
{
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
}

uint64_t OUTLINED_FUNCTION_6_13()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

void *OpenVehicleReservationEntityIntent.isDiscoverable.unsafeMutableAddressor()
{
  return &static OpenVehicleReservationEntityIntent.isDiscoverable;
}

uint64_t static OpenVehicleReservationEntityIntent.isDiscoverable.getter()
{
  return 0;
}

void *OpenVehicleReservationEntityIntent.assistantOnly.unsafeMutableAddressor()
{
  return &static OpenVehicleReservationEntityIntent.assistantOnly;
}

uint64_t static OpenVehicleReservationEntityIntent.assistantOnly.getter()
{
  return 1;
}

uint64_t OpenVehicleReservationEntityIntent.title.unsafeMutableAddressor()
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  return __swift_project_value_buffer(v0, (uint64_t)static OpenVehicleReservationEntityIntent.title);
}

uint64_t static OpenVehicleReservationEntityIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenVehicleReservationEntityIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t OpenVehicleReservationEntityIntent.description.unsafeMutableAddressor()
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  return __swift_project_value_buffer(v0, (uint64_t)static OpenVehicleReservationEntityIntent.description);
}

uint64_t static OpenVehicleReservationEntityIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenVehicleReservationEntityIntent.description);
  return outlined init with copy of IntentDescription?(v3, a1);
}

uint64_t OpenVehicleReservationEntityIntent.target.getter()
{
  return IntentParameter.wrappedValue.getter();
}

void *key path getter for OpenVehicleReservationEntityIntent.target : OpenVehicleReservationEntityIntent@<X0>(void *a1@<X8>)
{
  OpenVehicleReservationEntityIntent.target.getter();
  return memcpy(a1, v3, 0x90uLL);
}

uint64_t key path setter for OpenVehicleReservationEntityIntent.target : OpenVehicleReservationEntityIntent(void *__src)
{
  memcpy(v3, __src, sizeof(v3));
  outlined retain of VehicleReservationEntity((uint64_t)v3);
  return OpenVehicleReservationEntityIntent.target.setter(__src);
}

uint64_t OpenVehicleReservationEntityIntent.target.setter(void *__src)
{
  memcpy(v2, __src, sizeof(v2));
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*OpenVehicleReservationEntityIntent.target.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t OpenVehicleReservationEntityIntent.$target.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t OpenVehicleReservationEntityIntent.perform()()
{
  OUTLINED_FUNCTION_27();
  v0[38] = v1;
  v0[39] = v2;
  type metadata accessor for MainActor();
  v0[40] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[41] = v4;
  v0[42] = v3;
  return MEMORY[0x270FA2498](OpenVehicleReservationEntityIntent.perform(), v4, v3);
}

{
  void *v0;
  void *v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  IntentParameter.wrappedValue.getter();
  memcpy(v0 + 2, v0 + 20, 0x90uLL);
  uint64_t v3 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static SearchSpotlightOpener.openEntity<A>(_:)
                                       + async function pointer to specialized static SearchSpotlightOpener.openEntity<A>(_:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[43] = v1;
  *uint64_t v1 = v0;
  v1[1] = OpenVehicleReservationEntityIntent.perform();
  return v3((uint64_t)(v0 + 2));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  OUTLINED_FUNCTION_2();
  uint64_t v2 = v1;
  uint64_t v3 = v1 + 16;
  *(void *)(v1 + 352) = v0;
  swift_task_dealloc();
  outlined release of VehicleReservationEntity(v3);
  uint64_t v4 = *(void *)(v2 + 328);
  uint64_t v5 = *(void *)(v2 + 336);
  if (v0) {
    uint64_t v6 = OpenVehicleReservationEntityIntent.perform();
  }
  else {
    uint64_t v6 = OpenVehicleReservationEntityIntent.perform();
  }
  return MEMORY[0x270FA2498](v6, v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_27();
  swift_release();
  static IntentResult.result<>()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_27();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t outlined release of VehicleReservationEntity(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 128);
  unint64_t v3 = *(void *)(a1 + 136);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Data?(v4, v3);
  return a1;
}

uint64_t OpenVehicleReservationEntityIntent.init()()
{
  type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_15_11();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_16();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_11_0();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_41_5();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_13_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<VehicleReservationEntity>);
  OUTLINED_FUNCTION_10_16();
  OUTLINED_FUNCTION_4_13();
  uint64_t v7 = type metadata accessor for IntentDialog();
  OUTLINED_FUNCTION_31_6(v7);
  uint64_t v8 = OUTLINED_FUNCTION_37_5();
  v9(v8);
  lazy protocol witness table accessor for type VehicleReservationEntity and conformance VehicleReservationEntity();
  return OUTLINED_FUNCTION_30_9();
}

uint64_t outlined init with take of VehicleReservationEntity?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VehicleReservationEntity?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type VehicleReservationEntity and conformance VehicleReservationEntity()
{
  unint64_t result = lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity;
  if (!lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity;
  if (!lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity;
  if (!lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity;
  if (!lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity;
  if (!lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity;
  if (!lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity;
  if (!lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity;
  if (!lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity;
  if (!lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity;
  if (!lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity;
  if (!lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VehicleReservationEntity and conformance VehicleReservationEntity);
  }
  return result;
}

uint64_t default argument 0 of OpenVehicleReservationEntityIntent.init(target:)()
{
  type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_15_11();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_16();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_11_0();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_41_5();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_13_12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<VehicleReservationEntity>);
  OUTLINED_FUNCTION_10_16();
  OUTLINED_FUNCTION_4_13();
  uint64_t v7 = type metadata accessor for IntentDialog();
  OUTLINED_FUNCTION_31_6(v7);
  uint64_t v8 = OUTLINED_FUNCTION_37_5();
  v9(v8);
  lazy protocol witness table accessor for type VehicleReservationEntity and conformance VehicleReservationEntity();
  return OUTLINED_FUNCTION_30_9();
}

unint64_t lazy protocol witness table accessor for type OpenVehicleReservationEntityIntent and conformance OpenVehicleReservationEntityIntent()
{
  unint64_t result = lazy protocol witness table cache variable for type OpenVehicleReservationEntityIntent and conformance OpenVehicleReservationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenVehicleReservationEntityIntent and conformance OpenVehicleReservationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenVehicleReservationEntityIntent and conformance OpenVehicleReservationEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenVehicleReservationEntityIntent and conformance OpenVehicleReservationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenVehicleReservationEntityIntent and conformance OpenVehicleReservationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenVehicleReservationEntityIntent and conformance OpenVehicleReservationEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenVehicleReservationEntityIntent and conformance OpenVehicleReservationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenVehicleReservationEntityIntent and conformance OpenVehicleReservationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenVehicleReservationEntityIntent and conformance OpenVehicleReservationEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenVehicleReservationEntityIntent and conformance OpenVehicleReservationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenVehicleReservationEntityIntent and conformance OpenVehicleReservationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenVehicleReservationEntityIntent and conformance OpenVehicleReservationEntityIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenVehicleReservationEntityIntent and conformance OpenVehicleReservationEntityIntent;
  if (!lazy protocol witness table cache variable for type OpenVehicleReservationEntityIntent and conformance OpenVehicleReservationEntityIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenVehicleReservationEntityIntent and conformance OpenVehicleReservationEntityIntent);
  }
  return result;
}

uint64_t protocol witness for OpenIntent.target.getter in conformance OpenVehicleReservationEntityIntent()
{
  return OpenVehicleReservationEntityIntent.target.getter();
}

uint64_t protocol witness for OpenIntent.target.setter in conformance OpenVehicleReservationEntityIntent(void *a1)
{
  return OpenVehicleReservationEntityIntent.target.setter(a1);
}

uint64_t associated type witness table accessor for AppIntent.PerformResult : IntentResult in OpenVehicleReservationEntityIntent()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t associated type witness table accessor for AppIntent.SummaryContent : ParameterSummary in OpenVehicleReservationEntityIntent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static AppIntent.title.getter in conformance OpenVehicleReservationEntityIntent@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenVehicleReservationEntityIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t protocol witness for static AppIntent.openAppWhenRun.getter in conformance OpenVehicleReservationEntityIntent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenVehicleReservationEntityIntent and conformance OpenVehicleReservationEntityIntent();
  return MEMORY[0x270EE0E18](a1, v2);
}

uint64_t protocol witness for static AppIntent.description.getter in conformance OpenVehicleReservationEntityIntent@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDescription?);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenVehicleReservationEntityIntent.description);
  return outlined init with copy of IntentDescription?(v3, a1);
}

uint64_t protocol witness for AppIntent.perform() in conformance OpenVehicleReservationEntityIntent()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for AppIntent.perform() in conformance SearchToolLLMQU;
  return OpenVehicleReservationEntityIntent.perform()();
}

uint64_t protocol witness for AppIntent.init() in conformance OpenVehicleReservationEntityIntent@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = OpenVehicleReservationEntityIntent.init()();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static PersistentlyIdentifiable.persistentIdentifier.getter in conformance OpenVehicleReservationEntityIntent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenVehicleReservationEntityIntent and conformance OpenVehicleReservationEntityIntent();
  return MEMORY[0x270EE0D28](a1, v2);
}

ValueMetadata *type metadata accessor for OpenVehicleReservationEntityIntent()
{
  return &type metadata for OpenVehicleReservationEntityIntent;
}

uint64_t outlined retain of VehicleReservationEntity(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 136);
  uint64_t v4 = *(void *)(a1 + 128);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Data?(v4, v3);
  return a1;
}

uint64_t OUTLINED_FUNCTION_4_13()
{
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  _s10OmniSearch0B7ContextVSgWOi0_((void *)(v0 + 152));
  return outlined init with take of VehicleReservationEntity?(v0 + 152, v0 + 8);
}

uint64_t OUTLINED_FUNCTION_10_16()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t static SearchSpotlightOpener.openEntity<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[31] = a2;
  v3[32] = a3;
  v3[30] = a1;
  return MEMORY[0x270FA2498](static SearchSpotlightOpener.openEntity<A>(_:), 0, 0);
}

uint64_t static SearchSpotlightOpener.openEntity<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = static SearchSpotlightOpener.decodeSearchableItem<A>(_:)(*(void *)(v12 + 240), *(void *)(v12 + 248), *(void *)(v12 + 256));
  *(void *)(v12 + 264) = v13;
  uint64_t v14 = (void *)v13;
  type metadata accessor for NSUserDefaults(0, (unint64_t *)&lazy cache variable for type metadata for NSUserActivity);
  v15._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16.super.Class isa = NSUserActivity.__allocating_init(activityType:)(v15).super.isa;
  *(NSUserActivity *)(v12 + 272) = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_258661700;
  *(void *)(v12 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v12 + 232) = v18;
  uint64_t v19 = MEMORY[0x263F8D310];
  AnyHashable.init<A>(_:)();
  id v20 = objc_msgSend(v14, sel_uniqueIdentifier);
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  *(void *)(inited + 96) = v19;
  *(void *)(inited + 72) = v21;
  *(void *)(inited + 80) = v23;
  Dictionary.init(dictionaryLiteral:)();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [(objc_class *)v16.super.isa setUserInfo:isa];

  id v25 = objc_msgSend(v14, sel_bundleID);
  if (!v25)
  {
    __break(1u);
    goto LABEL_7;
  }
  id v33 = v25;
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;

  objc_allocWithZone(MEMORY[0x263F01878]);
  id v37 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v34, v36, 1);
  *(void *)(v12 + 280) = v37;
  uint64_t v38 = v37;
  id v25 = objc_msgSend(self, sel_defaultWorkspace);
  *(void *)(v12 + 288) = v25;
  if (!v25)
  {
LABEL_7:
    __break(1u);
    return MEMORY[0x270FA23F0](v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
  }
  uint64_t v39 = v25;
  id v40 = objc_allocWithZone(MEMORY[0x263F018D8]);
  uint64_t v41 = v16.super.isa;
  id v42 = v38;
  id v43 = objc_msgSend(v40, sel_init);
  *(void *)(v12 + 296) = v43;
  *(void *)(v12 + 16) = v12;
  *(void *)(v12 + 56) = v12 + 312;
  *(void *)(v12 + 24) = static SearchSpotlightOpener.openEntity<A>(_:);
  uint64_t v44 = swift_continuation_init();
  *(void *)(v12 + 184) = MEMORY[0x263EF8330];
  *(void *)(v12 + 192) = 0x40000000;
  *(void *)(v12 + 200) = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool;
  *(void *)(v12 + 208) = &block_descriptor_0;
  *(void *)(v12 + 216) = v44;
  objc_msgSend(v39, sel_openUserActivity_usingApplicationRecord_configuration_completionHandler_, v41, v42, v43, v12 + 184);
  id v25 = (id)(v12 + 16);
  return MEMORY[0x270FA23F0](v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
}

uint64_t static SearchSpotlightOpener.openEntity<A>(_:)()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 304) = v1;
  if (v1) {
    uint64_t v2 = static SearchSpotlightOpener.openEntity<A>(_:);
  }
  else {
    uint64_t v2 = static SearchSpotlightOpener.openEntity<A>(_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t (*v8)(void);
  unsigned char *v9;
  uint64_t v11;

  uint64_t v1 = *(void **)(v0 + 296);
  unint64_t v3 = *(void **)(v0 + 272);
  uint64_t v2 = *(void **)(v0 + 280);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 312);

  uint64_t v5 = *(void **)(v0 + 272);
  uint64_t v6 = *(void **)(v0 + 280);
  uint64_t v7 = *(void **)(v0 + 264);
  if (v4 != 1)
  {
    lazy protocol witness table accessor for type SearchSpotlightOpenerError and conformance SearchSpotlightOpenerError();
    swift_allocError();
    *long long v9 = 2;
    swift_willThrow();
  }

  OUTLINED_FUNCTION_13();
  return v8();
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = (void *)v0[37];
  unint64_t v3 = (void *)v0[35];
  uint64_t v2 = (void *)v0[36];
  uint64_t v5 = (void *)v0[33];
  uint64_t v4 = (void *)v0[34];
  swift_willThrow();

  OUTLINED_FUNCTION_13();
  return v6();
}

BOOL static SearchSpotlightOpenerError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void SearchSpotlightOpenerError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int SearchSpotlightOpenerError.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SearchSpotlightOpenerError(char *a1, char *a2)
{
  return static SearchSpotlightOpenerError.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SearchSpotlightOpenerError()
{
  return SearchSpotlightOpenerError.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance SearchSpotlightOpenerError(uint64_t a1)
{
  SearchSpotlightOpenerError.hash(into:)(a1, *v1);
}

uint64_t static SearchSpotlightOpener.decodeSearchableItem<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  MEMORY[0x270FA5388](v7 - 8);
  long long v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for IntentFile();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10) == 1)
  {
    outlined destroy of IntentFile?((uint64_t)v9);
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logging.search);
    Swift::String v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      Swift::String v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v17 = 0;
      _os_log_impl(&dword_257DC6000, v15, v16, "SearchSpotlightEntity missing data of the underlying CSSearchableItem", v17, 2u);
      MEMORY[0x25A2C94B0](v17, -1, -1);
    }

    lazy protocol witness table accessor for type SearchSpotlightOpenerError and conformance SearchSpotlightOpenerError();
    swift_allocError();
    *uint64_t v18 = 0;
    swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    uint64_t v19 = IntentFile.data.getter();
    unint64_t v21 = v20;
    type metadata accessor for NSUserDefaults(0, (unint64_t *)&lazy cache variable for type metadata for NSKeyedUnarchiver);
    type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for CSSearchableItem);
    uint64_t v22 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
    if (v3)
    {
      uint64_t v23 = OUTLINED_FUNCTION_0_9();
      v24(v23);
      outlined consume of Data._Representation(v19, v21);
    }
    else
    {
      uint64_t v4 = v22;
      outlined consume of Data._Representation(v19, v21);
      if (v4)
      {
        uint64_t v26 = OUTLINED_FUNCTION_0_9();
        v27(v26);
      }
      else
      {
        if (one-time initialization token for search != -1) {
          swift_once();
        }
        uint64_t v28 = type metadata accessor for Logger();
        __swift_project_value_buffer(v28, (uint64_t)static Logging.search);
        uint64_t v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.error.getter();
        uint64_t v4 = v30;
        if (os_log_type_enabled(v29, v30))
        {
          uint64_t v31 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v31 = 0;
          _os_log_impl(&dword_257DC6000, v29, (os_log_type_t)v4, "NSKeyedUnarchiver returning nil when unarchiving CSSearchableItem data", v31, 2u);
          MEMORY[0x25A2C94B0](v31, -1, -1);
        }

        lazy protocol witness table accessor for type SearchSpotlightOpenerError and conformance SearchSpotlightOpenerError();
        swift_allocError();
        *uint64_t v32 = 1;
        swift_willThrow();
        uint64_t v33 = OUTLINED_FUNCTION_0_9();
        v34(v33);
      }
    }
  }
  return v4;
}

NSUserActivity __swiftcall NSUserActivity.__allocating_init(activityType:)(Swift::String activityType)
{
  object = activityType._object;
  uint64_t countAndFlagsBits = activityType._countAndFlagsBits;
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v4 = (void *)MEMORY[0x25A2C7AB0](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v3, sel_initWithActivityType_, v4);

  return (NSUserActivity)v5;
}

uint64_t @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    id v4 = a3;
    return specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(v3, v4);
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    return specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(v6, a2);
  }
}

id @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  v10[1] = *(id *)MEMORY[0x263EF8340];
  id v5 = (void *)MEMORY[0x25A2C7AB0]();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  id v6 = objc_msgSend(v3, sel_initWithBundleIdentifier_allowPlaceholder_error_, v5, a3 & 1, v10);

  if (v6)
  {
    id v7 = v10[0];
  }
  else
  {
    id v8 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t dispatch thunk of SpotlightItemProviding.encodedSearchableItem.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SpotlightItemProviding.encodedSearchableItem.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of SpotlightItemProviding.encodedSearchableItem.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

unsigned char *storeEnumTagSinglePayload for SearchSpotlightOpenerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x257F78310);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchSpotlightOpenerError()
{
  return &type metadata for SearchSpotlightOpenerError;
}

ValueMetadata *type metadata accessor for SearchSpotlightOpener()
{
  return &type metadata for SearchSpotlightOpener;
}

uint64_t OUTLINED_FUNCTION_0_9()
{
  return v0;
}

uint64_t IdCardEntity.subType.getter()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t key path getter for IdCardEntity.subType : IdCardEntity@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = IdCardEntity.subType.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for IdCardEntity.subType : IdCardEntity()
{
  return IdCardEntity.subType.setter();
}

uint64_t IdCardEntity.subType.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*IdCardEntity.subType.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_55_4((uint64_t)v1);
  return MemoryCreationQUResult.version.modify;
}

uint64_t IdCardEntity.$subType.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t IdCardEntity.personal.getter()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t key path getter for IdCardEntity.personal : IdCardEntity@<X0>(uint64_t a1@<X8>)
{
  IdCardEntity.personal.getter();
  outlined init with take of PersonalCardEntity?((uint64_t)&v3, (uint64_t)v4);
  return outlined init with take of PersonalCardEntity?((uint64_t)v4, a1);
}

uint64_t key path setter for IdCardEntity.personal : IdCardEntity(uint64_t a1)
{
  outlined init with take of PersonalCardEntity?(a1, (uint64_t)v3);
  outlined init with take of PersonalCardEntity?((uint64_t)v3, (uint64_t)v2);
  outlined release of PersonalCardEntity?(v3, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of PersonalCardEntity?);
  return IdCardEntity.personal.setter((uint64_t)v2);
}

uint64_t IdCardEntity.personal.setter(uint64_t a1)
{
  outlined init with take of PersonalCardEntity?(a1, (uint64_t)v3);
  outlined init with take of PersonalCardEntity?((uint64_t)v3, (uint64_t)&v2);
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*IdCardEntity.personal.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_53_3((uint64_t)v1);
  return MemoryCreationQUResult.version.modify;
}

uint64_t IdCardEntity.$personal.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t IdCardEntity.business.getter()
{
  return EntityProperty.wrappedValue.getter();
}

double key path getter for IdCardEntity.business : IdCardEntity@<D0>(uint64_t a1@<X8>)
{
  IdCardEntity.business.getter();
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  double result = *(double *)&v7;
  *(_OWORD *)(a1 + 64) = v7;
  *(void *)(a1 + 80) = v8;
  return result;
}

uint64_t key path setter for IdCardEntity.business : IdCardEntity(unint64_t *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  uint64_t v7 = a1[7];
  uint64_t v8 = a1[8];
  uint64_t v9 = a1[9];
  unint64_t v10 = a1[10];
  v12.n128_u64[0] = *a1;
  v12.n128_u64[1] = v1;
  uint64_t v13 = v2;
  uint64_t v14 = v3;
  uint64_t v15 = v4;
  uint64_t v16 = v5;
  uint64_t v17 = v6;
  uint64_t v18 = v7;
  uint64_t v19 = v8;
  uint64_t v20 = v9;
  unint64_t v21 = v10;
  outlined copy of BusinessCardEntity?(v12.n128_i64[0], v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return IdCardEntity.business.setter(&v12);
}

uint64_t IdCardEntity.business.setter(__n128 *a1)
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*IdCardEntity.business.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_54_3((uint64_t)v1);
  return MemoryCreationQUResult.version.modify;
}

uint64_t IdCardEntity.$business.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t IdCardEntity.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_16();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<CardSubType>);
  OUTLINED_FUNCTION_34_6();
  unint64_t v5 = lazy protocol witness table accessor for type CardSubType and conformance CardSubType();
  *(void *)a1 = MEMORY[0x25A2C4880](v1, v5);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<PersonalCardEntity?>);
  OUTLINED_FUNCTION_177_0();
  LocalizedStringResource.init(stringLiteral:)();
  lazy protocol witness table accessor for type PersonalCardEntity and conformance PersonalCardEntity();
  OUTLINED_FUNCTION_65_2();
  *(void *)(a1 + 8) = v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<BusinessCardEntity?>);
  OUTLINED_FUNCTION_50_6();
  lazy protocol witness table accessor for type BusinessCardEntity and conformance BusinessCardEntity();
  OUTLINED_FUNCTION_65_2();
  *(void *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 24) = xmmword_258665BD0;
  uint64_t v8 = a1 + *(int *)(type metadata accessor for IdCardEntity() + 32);
  uint64_t v9 = type metadata accessor for SearchResult(0);
  return __swift_storeEnumTagSinglePayload(v8, 1, 1, v9);
}

unint64_t lazy protocol witness table accessor for type CardSubType and conformance CardSubType()
{
  unint64_t result = lazy protocol witness table cache variable for type CardSubType and conformance CardSubType;
  if (!lazy protocol witness table cache variable for type CardSubType and conformance CardSubType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CardSubType and conformance CardSubType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CardSubType and conformance CardSubType;
  if (!lazy protocol witness table cache variable for type CardSubType and conformance CardSubType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CardSubType and conformance CardSubType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CardSubType and conformance CardSubType;
  if (!lazy protocol witness table cache variable for type CardSubType and conformance CardSubType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CardSubType and conformance CardSubType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CardSubType and conformance CardSubType;
  if (!lazy protocol witness table cache variable for type CardSubType and conformance CardSubType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CardSubType and conformance CardSubType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CardSubType and conformance CardSubType;
  if (!lazy protocol witness table cache variable for type CardSubType and conformance CardSubType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CardSubType and conformance CardSubType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CardSubType and conformance CardSubType;
  if (!lazy protocol witness table cache variable for type CardSubType and conformance CardSubType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CardSubType and conformance CardSubType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CardSubType and conformance CardSubType;
  if (!lazy protocol witness table cache variable for type CardSubType and conformance CardSubType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CardSubType and conformance CardSubType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CardSubType and conformance CardSubType;
  if (!lazy protocol witness table cache variable for type CardSubType and conformance CardSubType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CardSubType and conformance CardSubType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CardSubType and conformance CardSubType;
  if (!lazy protocol witness table cache variable for type CardSubType and conformance CardSubType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CardSubType and conformance CardSubType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CardSubType and conformance CardSubType;
  if (!lazy protocol witness table cache variable for type CardSubType and conformance CardSubType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CardSubType and conformance CardSubType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CardSubType and conformance CardSubType;
  if (!lazy protocol witness table cache variable for type CardSubType and conformance CardSubType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CardSubType and conformance CardSubType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CardSubType and conformance CardSubType;
  if (!lazy protocol witness table cache variable for type CardSubType and conformance CardSubType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CardSubType and conformance CardSubType);
  }
  return result;
}

uint64_t type metadata accessor for IdCardEntity()
{
  uint64_t result = type metadata singleton initialization cache for IdCardEntity;
  if (!type metadata singleton initialization cache for IdCardEntity) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t one-time initialization function for typeDisplayRepresentation(uint64_t a1)
{
  return one-time initialization function for typeDisplayRepresentation(a1, static IdCardEntity.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static CardSubType.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static PersonalCardEntity.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static BusinessCardEntity.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static Sex.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static EventEntity.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static EventSubType.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static FlightReservationEntity.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static HotelReservationEntity.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static RestaurantReservationEntity.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static TicketedTransportationEntity.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static VehicleReservationEntity.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static TicketedShowEntity.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static GenericEventEntity.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static SearchEntity.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static HydratedEntityType.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static SearchPropertyRequest.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static SearchPropertyResponse.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static SearchPropertyType.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static StructuredQueryEntity.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static LocationQueryEntity.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static PersonQueryEntity.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static ObjectType.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static SortOrder.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static TemporalReference.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static Person.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static ContactHandleType.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static MediaType.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static AppEntityStatus.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static EntityUTType.typeDisplayRepresentation);
}

{
  return one-time initialization function for typeDisplayRepresentation(a1, static ReturnType.typeDisplayRepresentation);
}

uint64_t static IdCardEntity.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return static IdCardEntity.typeDisplayRepresentation.getter(&one-time initialization token for typeDisplayRepresentation, (uint64_t)static IdCardEntity.typeDisplayRepresentation, a1);
}

uint64_t static IdCardEntity.typeDisplayRepresentation.setter(uint64_t a1)
{
  return static IdCardEntity.typeDisplayRepresentation.setter(a1, &one-time initialization token for typeDisplayRepresentation, (uint64_t)static IdCardEntity.typeDisplayRepresentation);
}

uint64_t (*static IdCardEntity.typeDisplayRepresentation.modify())()
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for TypeDisplayRepresentation();
  OUTLINED_FUNCTION_11_11(v0, (uint64_t)static IdCardEntity.typeDisplayRepresentation);
  return AnswerSynthesisModelOnDevice.modelVersion.modify;
}

uint64_t IdCardEntity.description.getter()
{
  EntityProperty.wrappedValue.getter();
  if (v3) {
    uint64_t v0 = 0x7373656E69737562;
  }
  else {
    uint64_t v0 = 0x6C616E6F73726570;
  }
  unint64_t v1 = 0xE800000000000000;
  String.append(_:)(*(Swift::String *)&v0);
  swift_bridgeObjectRelease();
  return 0x20647261434449;
}

uint64_t CardSubType.rawValue.getter()
{
  if (*v0) {
    return 0x7373656E69737562;
  }
  else {
    return 0x6C616E6F73726570;
  }
}

uint64_t IdCardEntity.cardData.getter()
{
  return OUTLINED_FUNCTION_41_6();
}

uint64_t IdCardEntity.cardData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data?(*(void *)(v2 + 24), *(void *)(v2 + 32));
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t (*IdCardEntity.cardData.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t IdCardEntity.sourceResult.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for IdCardEntity();
  return outlined init with copy of SearchResult?(v1 + *(int *)(v3 + 32), a1, &demangling cache variable for type metadata for SearchResult?);
}

uint64_t IdCardEntity.sourceResult.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for IdCardEntity() + 32);
  return outlined assign with take of SearchResult?(a1, v3);
}

uint64_t outlined assign with take of SearchResult?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResult?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*IdCardEntity.sourceResult.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

void static IdCardEntity.== infix(_:_:)()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v109 = type metadata accessor for SearchResult(0);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_184_0();
  uint64_t v105 = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResult?);
  uint64_t v7 = OUTLINED_FUNCTION_81(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_184_0();
  uint64_t v106 = v8;
  uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SearchResult?, SearchResult?));
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_184_0();
  uint64_t v110 = v10;
  uint64_t v107 = type metadata accessor for IdCardEntity();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_185_0();
  uint64_t v111 = v12;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_43_4();
  uint64_t v114 = v14;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_43_4();
  unint64_t v112 = v16;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_43_4();
  uint64_t v113 = v18;
  OUTLINED_FUNCTION_113_1();
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v82 - v21;
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  id v25 = (char *)&v82 - v24;
  uint64_t v26 = MEMORY[0x270FA5388](v23);
  uint64_t v28 = (char *)&v82 - v27;
  MEMORY[0x270FA5388](v26);
  os_log_type_t v30 = (char *)&v82 - v29;
  EntityProperty.wrappedValue.getter();
  char v31 = v121[0];
  EntityProperty.wrappedValue.getter();
  char v32 = specialized == infix<A>(_:_:)(v31, v119[0]);
  outlined init with copy of IdCardEntity(v3, (uint64_t)v30);
  outlined init with copy of IdCardEntity(v1, (uint64_t)v28);
  if ((v32 & 1) == 0)
  {
    outlined destroy of IdCardEntity((uint64_t)v28, (void (*)(void))type metadata accessor for IdCardEntity);
    outlined destroy of IdCardEntity((uint64_t)v30, (void (*)(void))type metadata accessor for IdCardEntity);
    uint64_t v33 = v114;
LABEL_9:
    outlined init with copy of IdCardEntity(v3, (uint64_t)v25);
    OUTLINED_FUNCTION_37_6();
LABEL_10:
    outlined destroy of IdCardEntity((uint64_t)v22, (void (*)(void))type metadata accessor for IdCardEntity);
    outlined destroy of IdCardEntity((uint64_t)v25, (void (*)(void))type metadata accessor for IdCardEntity);
    uint64_t v35 = v111;
    uint64_t v34 = v112;
    uint64_t v36 = v113;
LABEL_11:
    outlined init with copy of IdCardEntity(v3, v36);
    outlined init with copy of IdCardEntity(v1, v34);
LABEL_12:
    outlined destroy of IdCardEntity(v34, (void (*)(void))type metadata accessor for IdCardEntity);
    uint64_t v37 = OUTLINED_FUNCTION_66_2();
    outlined destroy of IdCardEntity(v37, v38);
LABEL_13:
    outlined init with copy of IdCardEntity(v3, v33);
    OUTLINED_FUNCTION_37_6();
    goto LABEL_14;
  }
  EntityProperty.wrappedValue.getter();
  outlined init with take of PersonalCardEntity?((uint64_t)&v123, (uint64_t)v124);
  EntityProperty.wrappedValue.getter();
  outlined init with take of PersonalCardEntity?((uint64_t)&v122, (uint64_t)v125);
  outlined init with take of PersonalCardEntity?((uint64_t)v124, (uint64_t)v121);
  outlined init with take of PersonalCardEntity?((uint64_t)v125, (uint64_t)&v121[23]);
  outlined init with take of PersonalCardEntity?((uint64_t)v124, (uint64_t)&v126);
  if (getEnumTag for DataFilter.FilterResult(&v126) == 1)
  {
    outlined destroy of IdCardEntity((uint64_t)v28, (void (*)(void))type metadata accessor for IdCardEntity);
    outlined destroy of IdCardEntity((uint64_t)v30, (void (*)(void))type metadata accessor for IdCardEntity);
    outlined init with take of PersonalCardEntity?((uint64_t)&v121[23], (uint64_t)v120);
    outlined init with take of PersonalCardEntity?((uint64_t)v120, (uint64_t)v119);
    if (getEnumTag for DataFilter.FilterResult(v119) == 1)
    {
      outlined init with take of PersonalCardEntity?((uint64_t)v121, (uint64_t)v118);
      outlined release of PersonalCardEntity?(v118, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of PersonalCardEntity?);
      outlined init with copy of IdCardEntity(v3, (uint64_t)v25);
      OUTLINED_FUNCTION_37_6();
      goto LABEL_17;
    }
    goto LABEL_8;
  }
  outlined init with take of PersonalCardEntity?((uint64_t)v124, (uint64_t)v120);
  outlined init with take of PersonalCardEntity?((uint64_t)v125, (uint64_t)v119);
  if (getEnumTag for DataFilter.FilterResult(v119) == 1)
  {
    outlined init with take of PersonalCardEntity?((uint64_t)v124, (uint64_t)v117);
    outlined retain of PersonalCardEntity((uint64_t)v117);
    outlined destroy of IdCardEntity((uint64_t)v28, (void (*)(void))type metadata accessor for IdCardEntity);
    outlined destroy of IdCardEntity((uint64_t)v30, (void (*)(void))type metadata accessor for IdCardEntity);
    memcpy(v118, v120, sizeof(v118));
    outlined release of PersonalCardEntity((uint64_t)v118);
LABEL_8:
    uint64_t v33 = v114;
    memcpy(v119, v121, sizeof(v119));
    outlined release of (PersonalCardEntity?, PersonalCardEntity?)((uint64_t)v119);
    goto LABEL_9;
  }
  outlined init with take of PersonalCardEntity?((uint64_t)v125, (uint64_t)v115);
  memcpy(v118, v115, sizeof(v118));
  outlined init with take of PersonalCardEntity?((uint64_t)v124, (uint64_t)v116);
  outlined retain of PersonalCardEntity((uint64_t)v116);
  LODWORD(v104) = static PersonalCardEntity.== infix(_:_:)((uint64_t)v120, (uint64_t)v118);
  outlined release of PersonalCardEntity?(v125, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of PersonalCardEntity?);
  outlined destroy of IdCardEntity((uint64_t)v28, (void (*)(void))type metadata accessor for IdCardEntity);
  outlined destroy of IdCardEntity((uint64_t)v30, (void (*)(void))type metadata accessor for IdCardEntity);
  memcpy(v117, v120, sizeof(v117));
  outlined release of PersonalCardEntity((uint64_t)v117);
  outlined init with take of PersonalCardEntity?((uint64_t)v121, (uint64_t)v118);
  outlined release of PersonalCardEntity?(v118, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of PersonalCardEntity?);
  outlined init with copy of IdCardEntity(v3, (uint64_t)v25);
  OUTLINED_FUNCTION_37_6();
  uint64_t v33 = v114;
  if ((v104 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_17:
  EntityProperty.wrappedValue.getter();
  uint64_t v39 = v119[0];
  uint64_t v104 = v119[3];
  uint64_t v40 = v119[4];
  uint64_t v102 = v119[2];
  uint64_t v103 = v119[5];
  uint64_t v41 = v119[6];
  uint64_t v98 = v119[1];
  uint64_t v99 = v119[7];
  uint64_t v100 = v119[9];
  uint64_t v101 = v119[8];
  uint64_t v42 = v119[10];
  EntityProperty.wrappedValue.getter();
  uint64_t v96 = v133;
  uint64_t v97 = v39;
  uint64_t v94 = v131;
  uint64_t v95 = v132;
  uint64_t v92 = v129;
  uint64_t v93 = v130;
  uint64_t v90 = v127;
  uint64_t v91 = v128;
  uint64_t v88 = v135;
  uint64_t v89 = v134;
  unint64_t v87 = v136;
  if (!v39)
  {
    uint64_t v86 = v41;
    uint64_t v49 = v126;
    outlined destroy of IdCardEntity((uint64_t)v22, (void (*)(void))type metadata accessor for IdCardEntity);
    uint64_t v50 = (uint64_t)v25;
    uint64_t v51 = v99;
    uint64_t v43 = v86;
    uint64_t v52 = v103;
    outlined destroy of IdCardEntity(v50, (void (*)(void))type metadata accessor for IdCardEntity);
    uint64_t v53 = v49;
    uint64_t v54 = v40;
    uint64_t v55 = v104;
    uint64_t v56 = v101;
    uint64_t v57 = v102;
    uint64_t v58 = v98;
    uint64_t v59 = v100;
    if (!v53)
    {
      outlined consume of BusinessCardEntity?(0, v98, v102, v104, v54, v52, v43, v51, v101, v100, v42);
      OUTLINED_FUNCTION_62_2();
      uint64_t v34 = v112;
      outlined init with copy of IdCardEntity(v1, v112);
      uint64_t v35 = v111;
      uint64_t v33 = v114;
      goto LABEL_23;
    }
    goto LABEL_27;
  }
  v121[0] = v39;
  v121[1] = v98;
  v121[2] = v102;
  v121[3] = v104;
  v121[4] = v40;
  v121[5] = v103;
  uint64_t v43 = v41;
  v121[6] = v41;
  v121[7] = v99;
  v121[8] = v101;
  v121[9] = v100;
  v121[10] = v42;
  uint64_t v85 = v126;
  if (!v126)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of Data?(v100, v42);
    uint64_t v110 = v40;
    outlined destroy of IdCardEntity((uint64_t)v22, (void (*)(void))type metadata accessor for IdCardEntity);
    uint64_t v64 = (uint64_t)v25;
    uint64_t v52 = v103;
    uint64_t v54 = v110;
    outlined destroy of IdCardEntity(v64, (void (*)(void))type metadata accessor for IdCardEntity);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v57 = v102;
    swift_release();
    uint64_t v58 = v98;
    swift_release();
    swift_release();
    uint64_t v65 = v100;
    outlined consume of Data?(v100, v42);
    uint64_t v53 = v85;
    uint64_t v55 = v104;
    uint64_t v56 = v101;
    uint64_t v59 = v65;
    uint64_t v51 = v99;
LABEL_27:
    v121[0] = v97;
    v121[1] = v58;
    v121[2] = v57;
    v121[3] = v55;
    v121[4] = v54;
    v121[5] = v52;
    v121[6] = v43;
    v121[7] = v51;
    v121[8] = v56;
    v121[9] = v59;
    v121[10] = v42;
    v121[11] = v53;
    v121[12] = v90;
    v121[13] = v91;
    v121[14] = v92;
    v121[15] = v93;
    v121[16] = v94;
    v121[17] = v95;
    v121[18] = v96;
    v121[19] = v89;
    v121[20] = v88;
    v121[21] = v87;
    outlined release of (BusinessCardEntity?, BusinessCardEntity?)((uint64_t)v121);
    uint64_t v35 = v111;
    uint64_t v34 = v112;
    uint64_t v36 = v113;
    uint64_t v33 = v114;
    goto LABEL_11;
  }
  v125[0] = v126;
  v125[1] = v127;
  v125[2] = v128;
  v125[3] = v129;
  v125[4] = v130;
  v125[5] = v131;
  v125[6] = v132;
  v125[7] = v133;
  v125[8] = v134;
  v125[9] = v135;
  v125[10] = v136;
  unint64_t v83 = v42;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v86 = v41;
  outlined copy of Data?(v100, v42);
  BOOL v84 = static BusinessCardEntity.== infix(_:_:)((uint64_t)v121, (uint64_t)v125);
  outlined consume of BusinessCardEntity?(v85, v90, v91, v92, v93, v94, v95, v96, v89, v88, v87);
  outlined destroy of IdCardEntity((uint64_t)v22, (void (*)(void))type metadata accessor for IdCardEntity);
  outlined destroy of IdCardEntity((uint64_t)v25, (void (*)(void))type metadata accessor for IdCardEntity);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v44 = v103;
  swift_release();
  swift_release();
  swift_release();
  uint64_t v42 = v102;
  swift_release();
  uint64_t v45 = v98;
  swift_release();
  uint64_t v46 = v97;
  swift_release();
  uint64_t v47 = v100;
  unint64_t v48 = v83;
  outlined consume of Data?(v100, v83);
  outlined consume of BusinessCardEntity?(v46, v45, v42, v104, v40, v44, v86, v99, v101, v47, v48);
  OUTLINED_FUNCTION_62_2();
  uint64_t v34 = v112;
  outlined init with copy of IdCardEntity(v1, v112);
  uint64_t v35 = v111;
  uint64_t v33 = v114;
  if (!v84) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v60 = *(void *)(v42 + 24);
  unint64_t v61 = *(void *)(v42 + 32);
  uint64_t v62 = *(void *)(v34 + 24);
  unint64_t v63 = *(void *)(v34 + 32);
  if (v61 >> 60 == 15)
  {
    uint64_t v113 = *(void *)(v42 + 24);
    outlined copy of Data?(v62, v63);
    unint64_t v112 = v63;
    outlined destroy of IdCardEntity(v34, (void (*)(void))type metadata accessor for IdCardEntity);
    unint64_t v63 = v112;
    outlined destroy of IdCardEntity(v42, (void (*)(void))type metadata accessor for IdCardEntity);
    if (v63 >> 60 == 15)
    {
      outlined consume of Data?(v113, v61);
      outlined init with copy of IdCardEntity(v3, v33);
      OUTLINED_FUNCTION_37_6();
      goto LABEL_32;
    }
    goto LABEL_30;
  }
  if (v63 >> 60 == 15)
  {
    uint64_t v66 = *(void *)(v42 + 24);
    outlined copy of Data._Representation(v60, v61);
    uint64_t v67 = OUTLINED_FUNCTION_66_2();
    outlined copy of Data._Representation(v67, v68);
    outlined destroy of IdCardEntity(v112, (void (*)(void))type metadata accessor for IdCardEntity);
    outlined destroy of IdCardEntity(v113, (void (*)(void))type metadata accessor for IdCardEntity);
    uint64_t v113 = v66;
    uint64_t v69 = OUTLINED_FUNCTION_66_2();
    outlined consume of Data?(v69, v70);
LABEL_30:
    outlined consume of Data?(v113, v61);
    outlined consume of Data?(v62, v63);
    goto LABEL_13;
  }
  uint64_t v71 = *(void *)(v42 + 24);
  outlined copy of Data?(v71, *(void *)(v42 + 32));
  outlined copy of Data?(v62, v63);
  outlined copy of Data?(v71, v61);
  char v72 = MEMORY[0x25A2C5090](v71, v61, v62, v63);
  unint64_t v73 = v63;
  char v74 = v72;
  outlined consume of Data?(v62, v73);
  outlined consume of Data?(v71, v61);
  outlined destroy of IdCardEntity(v112, (void (*)(void))type metadata accessor for IdCardEntity);
  outlined destroy of IdCardEntity(v113, (void (*)(void))type metadata accessor for IdCardEntity);
  outlined consume of Data?(v71, v61);
  outlined init with copy of IdCardEntity(v3, v33);
  OUTLINED_FUNCTION_37_6();
  if (v74)
  {
LABEL_32:
    uint64_t v75 = *(int *)(v107 + 32);
    uint64_t v76 = v35 + v75;
    uint64_t v77 = v110;
    uint64_t v78 = v110 + *(int *)(v108 + 48);
    outlined init with copy of SearchResult?(v33 + v75, v110, &demangling cache variable for type metadata for SearchResult?);
    outlined init with copy of SearchResult?(v76, v78, &demangling cache variable for type metadata for SearchResult?);
    uint64_t v79 = v109;
    if (__swift_getEnumTagSinglePayload(v77, 1, v109) == 1)
    {
      outlined destroy of IdCardEntity(v35, (void (*)(void))type metadata accessor for IdCardEntity);
      outlined destroy of IdCardEntity(v33, (void (*)(void))type metadata accessor for IdCardEntity);
      if (__swift_getEnumTagSinglePayload(v78, 1, v79) == 1)
      {
        outlined destroy of SearchResult?(v77, &demangling cache variable for type metadata for SearchResult?);
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v80 = v106;
      outlined init with copy of SearchResult?(v77, v106, &demangling cache variable for type metadata for SearchResult?);
      if (__swift_getEnumTagSinglePayload(v78, 1, v79) != 1)
      {
        uint64_t v81 = v105;
        _s10OmniSearch0B6ResultVWObTm_2(v78, v105, (void (*)(void))type metadata accessor for SearchResult);
        static SearchResult.== infix(_:_:)();
        outlined destroy of IdCardEntity(v81, (void (*)(void))type metadata accessor for SearchResult);
        outlined destroy of IdCardEntity(v35, (void (*)(void))type metadata accessor for IdCardEntity);
        outlined destroy of IdCardEntity(v33, (void (*)(void))type metadata accessor for IdCardEntity);
        outlined destroy of IdCardEntity(v80, (void (*)(void))type metadata accessor for SearchResult);
        outlined destroy of SearchResult?(v77, &demangling cache variable for type metadata for SearchResult?);
        goto LABEL_15;
      }
      outlined destroy of IdCardEntity(v35, (void (*)(void))type metadata accessor for IdCardEntity);
      outlined destroy of IdCardEntity(v33, (void (*)(void))type metadata accessor for IdCardEntity);
      outlined destroy of IdCardEntity(v80, (void (*)(void))type metadata accessor for SearchResult);
    }
    outlined destroy of SearchResult?(v77, &demangling cache variable for type metadata for (SearchResult?, SearchResult?));
    goto LABEL_15;
  }
LABEL_14:
  outlined destroy of IdCardEntity(v35, (void (*)(void))type metadata accessor for IdCardEntity);
  outlined destroy of IdCardEntity(v33, (void (*)(void))type metadata accessor for IdCardEntity);
LABEL_15:
  OUTLINED_FUNCTION_119_0();
}

uint64_t outlined init with copy of IdCardEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IdCardEntity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t (*protocol witness for CardDisplayable.cardData.modify in conformance IdCardEntity())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t protocol witness for static AppEntity.defaultQuery.getter in conformance IdCardEntity(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type IdCardEntity and conformance IdCardEntity, (void (*)(uint64_t))type metadata accessor for IdCardEntity);
  return MEMORY[0x270EE09F0](a1, v2);
}

uint64_t protocol witness for Identifiable.id.getter in conformance IdCardEntity()
{
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type IdCardEntity and conformance IdCardEntity, (void (*)(uint64_t))type metadata accessor for IdCardEntity);
  return UUID.init()();
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance IdCardEntity(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type IdCardEntity and conformance IdCardEntity, (void (*)(uint64_t))type metadata accessor for IdCardEntity);
  return MEMORY[0x270EE0C68](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance IdCardEntity(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type IdCardEntity and conformance IdCardEntity, (void (*)(uint64_t))type metadata accessor for IdCardEntity);
  return MEMORY[0x270EE1D98](a1, v2);
}

uint64_t static CardSubType.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return static IdCardEntity.typeDisplayRepresentation.getter(&one-time initialization token for typeDisplayRepresentation, (uint64_t)static CardSubType.typeDisplayRepresentation, a1);
}

uint64_t static CardSubType.typeDisplayRepresentation.setter(uint64_t a1)
{
  return static IdCardEntity.typeDisplayRepresentation.setter(a1, &one-time initialization token for typeDisplayRepresentation, (uint64_t)static CardSubType.typeDisplayRepresentation);
}

uint64_t (*static CardSubType.typeDisplayRepresentation.modify())()
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for TypeDisplayRepresentation();
  OUTLINED_FUNCTION_11_11(v0, (uint64_t)static CardSubType.typeDisplayRepresentation);
  return protocol witness for _ClientInfoProtocol.trackingConfig.modify in conformance AnswerSynthesisModelOnDevice._ClientInfo;
}

void static CardSubType.caseDisplayRepresentations.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_17_1();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  uint64_t v5 = OUTLINED_FUNCTION_44_6();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_16();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CardSubType, DisplayRepresentation)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CardSubType, DisplayRepresentation));
  OUTLINED_FUNCTION_18_14();
  uint64_t v8 = *(void *)(v7 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_258661D60;
  uint64_t v12 = (unsigned char *)(v11 + v10);
  unsigned char *v12 = 0;
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_71_2();
  OUTLINED_FUNCTION_61_2();
  OUTLINED_FUNCTION_24_8();
  v12[v8] = 1;
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v5);
  OUTLINED_FUNCTION_61_2();
  OUTLINED_FUNCTION_24_8();
  type metadata accessor for DisplayRepresentation();
  lazy protocol witness table accessor for type CardSubType and conformance CardSubType();
  Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_119_0();
}

OmniSearch::CardSubType_optional __swiftcall CardSubType.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CardSubType.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *uint64_t v4 = v7;
  return result;
}

void *static CardSubType.allCases.getter()
{
  return &outlined read-only object #0 of static CardSubType.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CardSubType(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CardSubType()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CardSubType()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CardSubType()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

OmniSearch::CardSubType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance CardSubType(Swift::String *a1)
{
  return CardSubType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CardSubType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CardSubType.rawValue.getter();
  *a1 = result;
  a1[1] = 0xE800000000000000;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CardSubType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CardSubType.allCases.getter;
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance CardSubType(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CardSubType and conformance CardSubType();
  return MEMORY[0x270EE0C40](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance CardSubType(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CardSubType and conformance CardSubType();
  return MEMORY[0x270EE1C28](a1, v2);
}

uint64_t PersonalCardEntity.cardName.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t PersonalCardEntity.cardName.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*PersonalCardEntity.cardName.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_55_4((uint64_t)v1);
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonalCardEntity.$cardName.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t PersonalCardEntity.personName.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t PersonalCardEntity.personName.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*PersonalCardEntity.personName.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_53_3((uint64_t)v1);
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonalCardEntity.$personName.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t PersonalCardEntity.idNumber.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t PersonalCardEntity.idNumber.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*PersonalCardEntity.idNumber.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_54_3((uint64_t)v1);
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonalCardEntity.$idNumber.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t PersonalCardEntity.idType.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t PersonalCardEntity.idType.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*PersonalCardEntity.idType.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *uint64_t v0 = v1;
  v1[4] = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonalCardEntity.$idType.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t PersonalCardEntity.memberIDNumber.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t PersonalCardEntity.memberIDNumber.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*PersonalCardEntity.memberIDNumber.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *uint64_t v0 = v1;
  v1[4] = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonalCardEntity.$memberIDNumber.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t PersonalCardEntity.issuingDate.getter()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t PersonalCardEntity.issuingDate.setter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v1 = OUTLINED_FUNCTION_81(v0);
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_59_0();
  OUTLINED_FUNCTION_14_14();
  EntityProperty.wrappedValue.setter();
  return OUTLINED_FUNCTION_33_5();
}

uint64_t (*PersonalCardEntity.issuingDate.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *uint64_t v0 = v1;
  v1[4] = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonalCardEntity.$issuingDate.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t PersonalCardEntity.issuingBusiness.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t PersonalCardEntity.issuingBusiness.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*PersonalCardEntity.issuingBusiness.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *uint64_t v0 = v1;
  v1[4] = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonalCardEntity.$issuingBusiness.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t PersonalCardEntity.issuingRegion.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t PersonalCardEntity.issuingRegion.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*PersonalCardEntity.issuingRegion.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *uint64_t v0 = v1;
  v1[4] = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonalCardEntity.$issuingRegion.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t PersonalCardEntity.issuingCountry.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t PersonalCardEntity.issuingCountry.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*PersonalCardEntity.issuingCountry.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *uint64_t v0 = v1;
  v1[4] = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonalCardEntity.$issuingCountry.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t PersonalCardEntity.expirationDate.getter()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t key path setter for PersonalCardEntity.issuingDate : PersonalCardEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = OUTLINED_FUNCTION_52_2(a1, a2, a3, a4, a5);
  uint64_t v8 = OUTLINED_FUNCTION_81(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_31_7(v9, v11);
  return v5(v6);
}

uint64_t PersonalCardEntity.expirationDate.setter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v1 = OUTLINED_FUNCTION_81(v0);
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_59_0();
  OUTLINED_FUNCTION_14_14();
  EntityProperty.wrappedValue.setter();
  return OUTLINED_FUNCTION_33_5();
}

uint64_t (*PersonalCardEntity.expirationDate.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonalCardEntity.$expirationDate.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t PersonalCardEntity.birthday.getter()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t PersonalCardEntity.birthday.setter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v1 = OUTLINED_FUNCTION_81(v0);
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_59_0();
  OUTLINED_FUNCTION_14_14();
  EntityProperty.wrappedValue.setter();
  return OUTLINED_FUNCTION_33_5();
}

uint64_t (*PersonalCardEntity.birthday.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonalCardEntity.$birthday.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t PersonalCardEntity.placeOfBirth.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t PersonalCardEntity.placeOfBirth.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*PersonalCardEntity.placeOfBirth.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonalCardEntity.$placeOfBirth.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t PersonalCardEntity.address.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

void key path setter for PersonalCardEntity.address : PersonalCardEntity(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  PersonalCardEntity.address.setter(v1);
}

void PersonalCardEntity.address.setter(void *a1)
{
  id v1 = a1;
  EntityProperty.wrappedValue.setter();
}

uint64_t (*PersonalCardEntity.address.modify())()
{
  id v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonalCardEntity.$address.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t PersonalCardEntity.sex.getter()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t key path getter for PersonalCardEntity.sex : PersonalCardEntity@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = PersonalCardEntity.sex.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for PersonalCardEntity.sex : PersonalCardEntity()
{
  return PersonalCardEntity.sex.setter();
}

uint64_t PersonalCardEntity.sex.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*PersonalCardEntity.sex.modify())()
{
  id v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonalCardEntity.$sex.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t PersonalCardEntity.height.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t PersonalCardEntity.height.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*PersonalCardEntity.height.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonalCardEntity.$height.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t PersonalCardEntity.eyeColor.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t PersonalCardEntity.eyeColor.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*PersonalCardEntity.eyeColor.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonalCardEntity.$eyeColor.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t PersonalCardEntity.weight.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t PersonalCardEntity.weight.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*PersonalCardEntity.weight.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonalCardEntity.$weight.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t PersonalCardEntity.licenseClass.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t PersonalCardEntity.licenseClass.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*PersonalCardEntity.licenseClass.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonalCardEntity.$licenseClass.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t PersonalCardEntity.licenseRestrictions.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t PersonalCardEntity.licenseRestrictions.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*PersonalCardEntity.licenseRestrictions.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonalCardEntity.$licenseRestrictions.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t PersonalCardEntity.cardSubType.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path setter for PersonalCardEntity.cardName : PersonalCardEntity(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v6, v7);
}

uint64_t PersonalCardEntity.cardSubType.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*PersonalCardEntity.cardSubType.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonalCardEntity.$cardSubType.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t PersonalCardEntity.encodedSearchableItem.getter()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t PersonalCardEntity.encodedSearchableItem.setter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  uint64_t v1 = OUTLINED_FUNCTION_81(v0);
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_59_0();
  OUTLINED_FUNCTION_14_14();
  EntityProperty.wrappedValue.setter();
  return OUTLINED_FUNCTION_33_5();
}

uint64_t (*PersonalCardEntity.encodedSearchableItem.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonalCardEntity.$encodedSearchableItem.getter()
{
  return EntityProperty.projectedValue.getter();
}

void PersonalCardEntity.init()()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v19 = v1;
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = OUTLINED_FUNCTION_81(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_59_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<String?>);
  OUTLINED_FUNCTION_70_2();
  OUTLINED_FUNCTION_63_2();
  OUTLINED_FUNCTION_67_2();
  uint64_t v18 = v4;
  swift_retain();
  OUTLINED_FUNCTION_7_15();
  uint64_t v5 = MEMORY[0x25A2C4900](v0);
  swift_retain();
  OUTLINED_FUNCTION_40_5();
  uint64_t v6 = MEMORY[0x25A2C4900](v0);
  swift_retain();
  OUTLINED_FUNCTION_34_6();
  uint64_t v7 = MEMORY[0x25A2C4900](v0);
  swift_retain();
  OUTLINED_FUNCTION_177_0();
  OUTLINED_FUNCTION_30_10();
  uint64_t v17 = MEMORY[0x25A2C4900](v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Date?>);
  swift_retain();
  OUTLINED_FUNCTION_23_7();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v8 = MEMORY[0x25A2C48F0](v0);
  swift_retain();
  OUTLINED_FUNCTION_30_10();
  OUTLINED_FUNCTION_67_2();
  uint64_t v16 = v9;
  swift_retain();
  OUTLINED_FUNCTION_23_7();
  OUTLINED_FUNCTION_60_2();
  uint64_t v15 = MEMORY[0x25A2C4900](v0);
  swift_retain();
  OUTLINED_FUNCTION_23_7();
  OUTLINED_FUNCTION_59_4();
  uint64_t v14 = MEMORY[0x25A2C4900](v0);
  swift_retain();
  OUTLINED_FUNCTION_3_16();
  uint64_t v26 = MEMORY[0x25A2C48F0](v0);
  swift_retain();
  OUTLINED_FUNCTION_48_3();
  uint64_t v29 = MEMORY[0x25A2C48F0](v0);
  swift_retain();
  OUTLINED_FUNCTION_29_8();
  OUTLINED_FUNCTION_67_2();
  uint64_t v28 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<CLPlacemark?>);
  swift_retain();
  OUTLINED_FUNCTION_47_4();
  uint64_t v27 = MEMORY[0x25A2C4940](v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Sex>);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  unint64_t v11 = lazy protocol witness table accessor for type Sex and conformance Sex();
  uint64_t v25 = MEMORY[0x25A2C4880](v0, v11);
  swift_retain();
  OUTLINED_FUNCTION_57_1();
  OUTLINED_FUNCTION_67_2();
  uint64_t v24 = v12;
  swift_retain();
  OUTLINED_FUNCTION_38_4();
  uint64_t v23 = MEMORY[0x25A2C4900](v0);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v22 = MEMORY[0x25A2C4900](v0);
  swift_retain();
  OUTLINED_FUNCTION_28_7();
  uint64_t v21 = MEMORY[0x25A2C4900](v0);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v20 = MEMORY[0x25A2C4900](v0);
  swift_retain();
  OUTLINED_FUNCTION_4_14();
  uint64_t v13 = MEMORY[0x25A2C4900](v0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<IntentFile?>);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  v30[0] = v18;
  v30[1] = v5;
  v30[2] = v6;
  v30[3] = v7;
  v30[4] = v17;
  v30[5] = v8;
  v30[6] = v16;
  v30[7] = v15;
  v30[8] = v14;
  v30[9] = v26;
  v30[10] = v29;
  v30[11] = v28;
  v30[12] = v27;
  v30[13] = v25;
  v30[14] = v24;
  v30[15] = v23;
  v30[16] = v22;
  v30[17] = v21;
  v30[18] = v20;
  v30[19] = v13;
  v30[20] = MEMORY[0x25A2C48A0](v0);
  *(_OWORD *)&v30[21] = xmmword_258665BD0;
  outlined retain of PersonalCardEntity((uint64_t)v30);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  EntityProperty.wrappedValue.setter();
  outlined release of PersonalCardEntity((uint64_t)v30);
  memcpy(v19, v30, 0xB8uLL);
  OUTLINED_FUNCTION_119_0();
}

uint64_t static PersonalCardEntity.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return static IdCardEntity.typeDisplayRepresentation.getter(&one-time initialization token for typeDisplayRepresentation, (uint64_t)static PersonalCardEntity.typeDisplayRepresentation, a1);
}

uint64_t static PersonalCardEntity.typeDisplayRepresentation.setter(uint64_t a1)
{
  return static IdCardEntity.typeDisplayRepresentation.setter(a1, &one-time initialization token for typeDisplayRepresentation, (uint64_t)static PersonalCardEntity.typeDisplayRepresentation);
}

uint64_t (*static PersonalCardEntity.typeDisplayRepresentation.modify())()
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for TypeDisplayRepresentation();
  OUTLINED_FUNCTION_11_11(v0, (uint64_t)static PersonalCardEntity.typeDisplayRepresentation);
  return AnswerSynthesisModelOnDevice.modelVersion.modify;
}

uint64_t PersonalCardEntity.description.getter()
{
  memcpy(__dst, v0, sizeof(__dst));
  unint64_t v1 = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  outlined retain of PersonalCardEntity((uint64_t)__dst);
  EntityProperty.wrappedValue.getter();
  outlined release of PersonalCardEntity((uint64_t)__dst);
  if (v7) {
    uint64_t v2 = v6;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v7) {
    unint64_t v1 = v7;
  }
  unint64_t v3 = v1;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x7469746E65646920;
  v4._object = (void *)0xEE00647261632079;
  String.append(_:)(v4);
  return 0;
}

uint64_t PersonalCardEntity.cardData.getter()
{
  return OUTLINED_FUNCTION_41_6();
}

uint64_t PersonalCardEntity.cardData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data?(*(void *)(v2 + 168), *(void *)(v2 + 176));
  *(void *)(v2 + 168) = a1;
  *(void *)(v2 + 176) = a2;
  return result;
}

uint64_t (*PersonalCardEntity.cardData.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

BOOL static PersonalCardEntity.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 168);
  unint64_t v7 = *(void *)(a1 + 176);
  uint64_t v4 = *(void *)(a2 + 168);
  unint64_t v6 = *(void *)(a2 + 176);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<String?>);
  lazy protocol witness table accessor for type String? and conformance <A> A?();
  if ((OUTLINED_FUNCTION_10_17() & 1) == 0) {
    return 0;
  }
  if ((OUTLINED_FUNCTION_10_17() & 1) == 0) {
    return 0;
  }
  if ((OUTLINED_FUNCTION_10_17() & 1) == 0) {
    return 0;
  }
  if ((OUTLINED_FUNCTION_10_17() & 1) == 0) {
    return 0;
  }
  if ((OUTLINED_FUNCTION_10_17() & 1) == 0) {
    return 0;
  }
  char v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Date?>);
  lazy protocol witness table accessor for type Date? and conformance <A> A?();
  if ((OUTLINED_FUNCTION_22_12() & 1) == 0) {
    return 0;
  }
  if ((OUTLINED_FUNCTION_10_17() & 1) == 0) {
    return 0;
  }
  if ((OUTLINED_FUNCTION_10_17() & 1) == 0) {
    return 0;
  }
  if ((OUTLINED_FUNCTION_10_17() & 1) == 0) {
    return 0;
  }
  if ((OUTLINED_FUNCTION_22_12() & 1) == 0) {
    return 0;
  }
  if ((OUTLINED_FUNCTION_22_12() & 1) == 0) {
    return 0;
  }
  if ((OUTLINED_FUNCTION_10_17() & 1) == 0) {
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<CLPlacemark?>);
  lazy protocol witness table accessor for type CLPlacemark? and conformance <A> A?();
  if ((static EntityProperty<>.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Sex>);
  lazy protocol witness table accessor for type Sex and conformance Sex();
  if ((static EntityProperty<>.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  if ((OUTLINED_FUNCTION_10_17() & 1) == 0) {
    return 0;
  }
  if ((OUTLINED_FUNCTION_10_17() & 1) == 0) {
    return 0;
  }
  if ((OUTLINED_FUNCTION_10_17() & 1) == 0) {
    return 0;
  }
  if ((OUTLINED_FUNCTION_10_17() & 1) == 0) {
    return 0;
  }
  if ((OUTLINED_FUNCTION_10_17() & 1) == 0) {
    return 0;
  }
  if ((OUTLINED_FUNCTION_10_17() & 1) == 0) {
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<IntentFile?>);
  lazy protocol witness table accessor for type IntentFile? and conformance <A> A?();
  if ((static EntityProperty<>.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  if (v7 >> 60 == 15)
  {
    if (v6 >> 60 == 15) {
      return 1;
    }
    goto LABEL_26;
  }
  if (v6 >> 60 == 15)
  {
LABEL_26:
    outlined copy of Data?(v5, v7);
    outlined copy of Data?(v4, v6);
    outlined consume of Data?(v5, v7);
    outlined consume of Data?(v4, v6);
    return 0;
  }
  outlined copy of Data?(v5, v7);
  OUTLINED_FUNCTION_56_4(v4);
  OUTLINED_FUNCTION_58_3();
  return (v2 & 1) != 0;
}

uint64_t (*protocol witness for CardDisplayable.cardData.modify in conformance PersonalCardEntity())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t (*protocol witness for SpotlightItemProviding.encodedSearchableItem.modify in conformance PersonalCardEntity(void *a1))()
{
  char v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t protocol witness for static AppEntity.defaultQuery.getter in conformance PersonalCardEntity(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PersonalCardEntity and conformance PersonalCardEntity();
  return MEMORY[0x270EE09F0](a1, v2);
}

uint64_t protocol witness for Identifiable.id.getter in conformance PersonalCardEntity()
{
  lazy protocol witness table accessor for type PersonalCardEntity and conformance PersonalCardEntity();
  return UUID.init()();
}

void protocol witness for InstanceDisplayRepresentable.displayRepresentation.getter in conformance PersonalCardEntity()
{
  memcpy(__dst, v0, sizeof(__dst));
  specialized CardDisplayable.displayRepresentation.getter();
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance PersonalCardEntity(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PersonalCardEntity and conformance PersonalCardEntity();
  return MEMORY[0x270EE0C68](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance PersonalCardEntity(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PersonalCardEntity and conformance PersonalCardEntity();
  return MEMORY[0x270EE1D98](a1, v2);
}

uint64_t BusinessCardEntity.cardName.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t BusinessCardEntity.cardName.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*BusinessCardEntity.cardName.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_55_4((uint64_t)v1);
  return MemoryCreationQUResult.version.modify;
}

uint64_t BusinessCardEntity.$cardName.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t BusinessCardEntity.cardSubType.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t BusinessCardEntity.cardSubType.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*BusinessCardEntity.cardSubType.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_53_3((uint64_t)v1);
  return MemoryCreationQUResult.version.modify;
}

uint64_t BusinessCardEntity.$cardSubType.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t BusinessCardEntity.expirationDate.getter()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t BusinessCardEntity.expirationDate.setter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v1 = OUTLINED_FUNCTION_81(v0);
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_59_0();
  OUTLINED_FUNCTION_14_14();
  EntityProperty.wrappedValue.setter();
  return OUTLINED_FUNCTION_33_5();
}

uint64_t (*BusinessCardEntity.expirationDate.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_54_3((uint64_t)v1);
  return MemoryCreationQUResult.version.modify;
}

uint64_t BusinessCardEntity.$expirationDate.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t BusinessCardEntity.issueDate.getter()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t key path setter for BusinessCardEntity.expirationDate : BusinessCardEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = OUTLINED_FUNCTION_52_2(a1, a2, a3, a4, a5);
  uint64_t v8 = OUTLINED_FUNCTION_81(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_31_7(v9, v11);
  return v5(v6);
}

uint64_t BusinessCardEntity.issueDate.setter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v1 = OUTLINED_FUNCTION_81(v0);
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_59_0();
  OUTLINED_FUNCTION_14_14();
  EntityProperty.wrappedValue.setter();
  return OUTLINED_FUNCTION_33_5();
}

uint64_t (*BusinessCardEntity.issueDate.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *uint64_t v0 = v1;
  v1[4] = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t BusinessCardEntity.$issueDate.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t BusinessCardEntity.issuingBusiness.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t BusinessCardEntity.issuingBusiness.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*BusinessCardEntity.issuingBusiness.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *uint64_t v0 = v1;
  v1[4] = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t BusinessCardEntity.$issuingBusiness.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t BusinessCardEntity.memberIDNumber.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t BusinessCardEntity.memberIDNumber.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*BusinessCardEntity.memberIDNumber.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *uint64_t v0 = v1;
  v1[4] = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t BusinessCardEntity.$memberIDNumber.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t BusinessCardEntity.membershipType.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t BusinessCardEntity.membershipType.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*BusinessCardEntity.membershipType.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *uint64_t v0 = v1;
  v1[4] = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t BusinessCardEntity.$membershipType.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t BusinessCardEntity.personName.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for BusinessCardEntity.cardName : BusinessCardEntity@<X0>(__n128 *a1@<X0>, uint64_t *a2@<X8>)
{
  OUTLINED_FUNCTION_35_6(a1);
  uint64_t result = v3();
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t key path setter for BusinessCardEntity.cardName : BusinessCardEntity(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v6, v7);
}

uint64_t BusinessCardEntity.personName.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*BusinessCardEntity.personName.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *uint64_t v0 = v1;
  v1[4] = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t BusinessCardEntity.$personName.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t BusinessCardEntity.encodedSearchableItem.getter()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t key path getter for BusinessCardEntity.expirationDate : BusinessCardEntity(__n128 *a1)
{
  OUTLINED_FUNCTION_35_6(a1);
  return v1();
}

uint64_t BusinessCardEntity.encodedSearchableItem.setter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  uint64_t v1 = OUTLINED_FUNCTION_81(v0);
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_59_0();
  OUTLINED_FUNCTION_14_14();
  EntityProperty.wrappedValue.setter();
  return OUTLINED_FUNCTION_33_5();
}

uint64_t (*BusinessCardEntity.encodedSearchableItem.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *uint64_t v0 = v1;
  v1[4] = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t BusinessCardEntity.$encodedSearchableItem.getter()
{
  return EntityProperty.projectedValue.getter();
}

void BusinessCardEntity.init()()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_16();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<String?>);
  OUTLINED_FUNCTION_42_3();
  uint64_t v13 = MEMORY[0x25A2C4900](v0);
  OUTLINED_FUNCTION_4_14();
  uint64_t v5 = MEMORY[0x25A2C4900](v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Date?>);
  OUTLINED_FUNCTION_3_16();
  uint64_t v6 = MEMORY[0x25A2C48F0](v0);
  OUTLINED_FUNCTION_39_2();
  uint64_t v7 = MEMORY[0x25A2C48F0](v0);
  OUTLINED_FUNCTION_30_10();
  uint64_t v8 = MEMORY[0x25A2C4900](v0);
  OUTLINED_FUNCTION_30_10();
  uint64_t v9 = MEMORY[0x25A2C4900](v0);
  OUTLINED_FUNCTION_27_9();
  uint64_t v10 = MEMORY[0x25A2C4900](v0);
  OUTLINED_FUNCTION_7_15();
  uint64_t v11 = MEMORY[0x25A2C4900](v0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<IntentFile?>);
  OUTLINED_FUNCTION_50_6();
  uint64_t v12 = MEMORY[0x25A2C48A0](v0);
  *(void *)uint64_t v2 = v13;
  *(void *)(v2 + 8) = v5;
  *(void *)(v2 + 16) = v6;
  *(void *)(v2 + 24) = v7;
  *(void *)(v2 + 32) = v8;
  *(void *)(v2 + 40) = v9;
  *(void *)(v2 + 48) = v10;
  *(void *)(v2 + 56) = v11;
  *(void *)(v2 + 64) = v12;
  *(_OWORD *)(v2 + 72) = xmmword_258665BD0;
  OUTLINED_FUNCTION_119_0();
}

uint64_t static BusinessCardEntity.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return static IdCardEntity.typeDisplayRepresentation.getter(&one-time initialization token for typeDisplayRepresentation, (uint64_t)static BusinessCardEntity.typeDisplayRepresentation, a1);
}

uint64_t static BusinessCardEntity.typeDisplayRepresentation.setter(uint64_t a1)
{
  return static IdCardEntity.typeDisplayRepresentation.setter(a1, &one-time initialization token for typeDisplayRepresentation, (uint64_t)static BusinessCardEntity.typeDisplayRepresentation);
}

uint64_t (*static BusinessCardEntity.typeDisplayRepresentation.modify())()
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for TypeDisplayRepresentation();
  OUTLINED_FUNCTION_11_11(v0, (uint64_t)static BusinessCardEntity.typeDisplayRepresentation);
  return AnswerSynthesisModelOnDevice.modelVersion.modify;
}

uint64_t BusinessCardEntity.description.getter()
{
  uint64_t v9 = *(void *)(v0 + 72);
  unint64_t v1 = *(void *)(v0 + 80);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v2 = OUTLINED_FUNCTION_66_2();
  outlined copy of Data?(v2, v3);
  EntityProperty.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Data?(v9, v1);
  if (v11) {
    uint64_t v4 = v10;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v11) {
    unint64_t v5 = v11;
  }
  else {
    unint64_t v5 = 0xE000000000000000;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0x6472616320;
  v7._object = (void *)0xE500000000000000;
  String.append(_:)(v7);
  return 0;
}

uint64_t BusinessCardEntity.cardData.getter()
{
  return OUTLINED_FUNCTION_41_6();
}

uint64_t BusinessCardEntity.cardData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data?(*(void *)(v2 + 72), *(void *)(v2 + 80));
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = a2;
  return result;
}

uint64_t (*BusinessCardEntity.cardData.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

BOOL static BusinessCardEntity.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 72);
  unint64_t v8 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a2 + 72);
  unint64_t v7 = *(void *)(a2 + 80);
  char v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<String?>);
  lazy protocol witness table accessor for type String? and conformance <A> A?();
  if ((OUTLINED_FUNCTION_22_12() & 1) == 0) {
    return 0;
  }
  if ((OUTLINED_FUNCTION_22_12() & 1) == 0) {
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Date?>);
  lazy protocol witness table accessor for type Date? and conformance <A> A?();
  if ((static EntityProperty<>.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  if ((static EntityProperty<>.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  if ((OUTLINED_FUNCTION_22_12() & 1) == 0) {
    return 0;
  }
  if ((OUTLINED_FUNCTION_22_12() & 1) == 0) {
    return 0;
  }
  if ((OUTLINED_FUNCTION_22_12() & 1) == 0) {
    return 0;
  }
  if ((OUTLINED_FUNCTION_22_12() & 1) == 0) {
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<IntentFile?>);
  lazy protocol witness table accessor for type IntentFile? and conformance <A> A?();
  if ((static EntityProperty<>.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  if (v8 >> 60 == 15)
  {
    unint64_t v3 = v7;
    if (v7 >> 60 == 15) {
      return 1;
    }
    goto LABEL_14;
  }
  unint64_t v3 = v7;
  if (v7 >> 60 == 15)
  {
LABEL_14:
    outlined copy of Data?(v6, v8);
    outlined copy of Data?(v5, v3);
    outlined consume of Data?(v6, v8);
    outlined consume of Data?(v5, v3);
    return 0;
  }
  outlined copy of Data?(v6, v8);
  OUTLINED_FUNCTION_56_4(v5);
  OUTLINED_FUNCTION_58_3();
  return (v2 & 1) != 0;
}

uint64_t (*protocol witness for CardDisplayable.cardData.modify in conformance BusinessCardEntity())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t (*protocol witness for SpotlightItemProviding.encodedSearchableItem.modify in conformance BusinessCardEntity(void *a1))()
{
  char v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t protocol witness for static AppEntity.defaultQuery.getter in conformance BusinessCardEntity(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type BusinessCardEntity and conformance BusinessCardEntity();
  return MEMORY[0x270EE09F0](a1, v2);
}

uint64_t protocol witness for Identifiable.id.getter in conformance BusinessCardEntity()
{
  lazy protocol witness table accessor for type BusinessCardEntity and conformance BusinessCardEntity();
  return UUID.init()();
}

void protocol witness for InstanceDisplayRepresentable.displayRepresentation.getter in conformance BusinessCardEntity()
{
  memcpy(__dst, v0, sizeof(__dst));
  specialized CardDisplayable.displayRepresentation.getter();
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance BusinessCardEntity(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type BusinessCardEntity and conformance BusinessCardEntity();
  return MEMORY[0x270EE0C68](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance BusinessCardEntity(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type BusinessCardEntity and conformance BusinessCardEntity();
  return MEMORY[0x270EE1D98](a1, v2);
}

uint64_t one-time initialization function for typeDisplayRepresentation(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_59_0();
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_15();
  uint64_t v8 = type metadata accessor for TypeDisplayRepresentation();
  __swift_allocate_value_buffer(v8, a2);
  __swift_project_value_buffer(v8, (uint64_t)a2);
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v2, 1, 1, v6);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  unint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_59_0();
  uint64_t v5 = type metadata accessor for LocalizedStringResource();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_39();
  uint64_t v7 = type metadata accessor for TypeDisplayRepresentation();
  __swift_allocate_value_buffer(v7, a2);
  uint64_t v8 = OUTLINED_FUNCTION_121_1();
  __swift_project_value_buffer(v8, v9);
  OUTLINED_FUNCTION_19_0();
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_46_1();
  __swift_storeEnumTagSinglePayload(v10, v11, v12, v5);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_19_12();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_39();
  uint64_t v7 = type metadata accessor for TypeDisplayRepresentation();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  OUTLINED_FUNCTION_19_0();
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_69_5(v2, 1);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = OUTLINED_FUNCTION_19_12();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_15();
  uint64_t v8 = type metadata accessor for TypeDisplayRepresentation();
  __swift_allocate_value_buffer(v8, a2);
  __swift_project_value_buffer(v8, (uint64_t)a2);
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v2, 1, 1, v6);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = OUTLINED_FUNCTION_19_12();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_15();
  uint64_t v8 = type metadata accessor for TypeDisplayRepresentation();
  __swift_allocate_value_buffer(v8, a2);
  __swift_project_value_buffer(v8, (uint64_t)a2);
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v2, 1, 1, v6);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

uint64_t static Sex.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return static IdCardEntity.typeDisplayRepresentation.getter(&one-time initialization token for typeDisplayRepresentation, (uint64_t)static Sex.typeDisplayRepresentation, a1);
}

uint64_t static IdCardEntity.typeDisplayRepresentation.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for TypeDisplayRepresentation();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t static Sex.typeDisplayRepresentation.setter(uint64_t a1)
{
  return static IdCardEntity.typeDisplayRepresentation.setter(a1, &one-time initialization token for typeDisplayRepresentation, (uint64_t)static Sex.typeDisplayRepresentation);
}

uint64_t static IdCardEntity.typeDisplayRepresentation.setter(uint64_t a1, void *a2, uint64_t a3)
{
  if (*a2 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for TypeDisplayRepresentation();
  uint64_t v6 = __swift_project_value_buffer(v5, a3);
  swift_beginAccess();
  uint64_t v7 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(v6, a1, v5);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v5);
}

uint64_t (*static Sex.typeDisplayRepresentation.modify())()
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for TypeDisplayRepresentation();
  OUTLINED_FUNCTION_11_11(v0, (uint64_t)static Sex.typeDisplayRepresentation);
  return AnswerSynthesisModelOnDevice.modelVersion.modify;
}

void static Sex.caseDisplayRepresentations.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_17_1();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_44_6();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_16();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Sex, DisplayRepresentation)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Sex, DisplayRepresentation));
  OUTLINED_FUNCTION_18_14();
  uint64_t v7 = *(void *)(v6 + 72);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_258661D70;
  unint64_t v11 = v10 + v9;
  *(unsigned char *)(v10 + v9) = 0;
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v12 = OUTLINED_FUNCTION_71_2();
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v12);
  OUTLINED_FUNCTION_24_8();
  *(unsigned char *)(v11 + v7) = 1;
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_24_8();
  *(unsigned char *)(v11 + 2 * v7) = 2;
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_24_8();
  type metadata accessor for DisplayRepresentation();
  lazy protocol witness table accessor for type Sex and conformance Sex();
  Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_119_0();
}

OmniSearch::Sex_optional __swiftcall Sex.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Sex.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 3;
  if (v5 < 3) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

void *static Sex.allCases.getter()
{
  return &outlined read-only object #0 of static Sex.allCases.getter;
}

uint64_t Sex.rawValue.getter()
{
  uint64_t v1 = 0x656C616D6566;
  if (*v0 != 1) {
    uint64_t v1 = 1701601645;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701736302;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Sex(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Sex()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Sex()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Sex()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

OmniSearch::Sex_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Sex(Swift::String *a1)
{
  return Sex.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Sex@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Sex.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Sex(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Sex.allCases.getter;
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance Sex(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Sex and conformance Sex();
  return MEMORY[0x270EE0C40](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance Sex(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Sex and conformance Sex();
  return MEMORY[0x270EE1C28](a1, v2);
}

void IdCardEntity.init(preExtractedCard:card:encodedSearchableItem:)()
{
  OUTLINED_FUNCTION_104_0();
  id v117 = v1;
  uint64_t v118 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  uint64_t v8 = OUTLINED_FUNCTION_81(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_184_0();
  uint64_t v112 = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v11 = OUTLINED_FUNCTION_81(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_185_0();
  uint64_t v110 = v12;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_43_4();
  uint64_t v15 = v14;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_43_4();
  uint64_t v115 = v17;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_43_4();
  uint64_t v113 = v19;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v20);
  uint64_t v114 = (uint64_t)&v91 - v21;
  uint64_t v22 = type metadata accessor for LocalizedStringResource();
  uint64_t v23 = OUTLINED_FUNCTION_81(v22);
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_16();
  uint64_t v24 = type metadata accessor for IdCardEntity();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_15();
  uint64_t v28 = v27 - v26;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<CardSubType>);
  OUTLINED_FUNCTION_34_6();
  unint64_t v29 = lazy protocol witness table accessor for type CardSubType and conformance CardSubType();
  *(void *)uint64_t v28 = MEMORY[0x25A2C4880](v0, v29);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<PersonalCardEntity?>);
  OUTLINED_FUNCTION_177_0();
  LocalizedStringResource.init(stringLiteral:)();
  lazy protocol witness table accessor for type PersonalCardEntity and conformance PersonalCardEntity();
  OUTLINED_FUNCTION_65_2();
  uint64_t v111 = v30;
  *(void *)(v28 + 8) = v30;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<BusinessCardEntity?>);
  OUTLINED_FUNCTION_50_6();
  lazy protocol witness table accessor for type BusinessCardEntity and conformance BusinessCardEntity();
  OUTLINED_FUNCTION_65_2();
  os_log_type_t v32 = v31;
  *(void *)(v28 + 16) = v31;
  *(_OWORD *)(v28 + 24) = xmmword_258665BD0;
  uint64_t v116 = v24;
  uint64_t v33 = v28 + *(int *)(v24 + 32);
  uint64_t v34 = type metadata accessor for SearchResult(0);
  __swift_storeEnumTagSinglePayload(v33, 1, 1, v34);
  uint64_t v35 = (void *)v4[4];
  uint64_t v36 = (unsigned __int8 *)v4[5];
  static IdCardEntity.cardSubtype(preExtractedCardType:preExtractedCardSubType:)(v4[2], v4[3], (uint64_t)v35, (uint64_t)v36, (char *)&v125);
  char v37 = v125;
  if (v125 == 2)
  {
    if (one-time initialization token for utilities != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logging.utilities);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_51_1(v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl(&dword_257DC6000, v39, v32, "Unsupported subType in PreExtractedCard. Returning nil for IdCardEntity.", v41, 2u);
      MEMORY[0x25A2C94B0](v41, -1, -1);
    }

    outlined destroy of SearchResult?(v118, (uint64_t *)&demangling cache variable for type metadata for IntentFile?);
    outlined destroy of IdCardEntity(v28, (void (*)(void))type metadata accessor for IdCardEntity);
    outlined destroy of IdCardEntity((uint64_t)v4, (void (*)(void))type metadata accessor for PreExtractedCard);
    uint64_t v42 = 1;
  }
  else
  {
    uint64_t v108 = v35;
    LOBYTE(v125) = v125 & 1;
    EntityProperty.wrappedValue.setter();
    uint64_t v109 = v6;
    if (v37)
    {
      uint64_t v60 = v4[7];
      uint64_t v115 = v4[6];
      unint64_t v61 = (int *)type metadata accessor for PreExtractedCard(0);
      uint64_t v62 = (uint64_t)v4 + v61[11];
      uint64_t v107 = v15;
      outlined init with copy of SearchResult?(v62, v15, &demangling cache variable for type metadata for Date?);
      uint64_t v63 = v110;
      outlined init with copy of SearchResult?((uint64_t)v4 + v61[10], v110, &demangling cache variable for type metadata for Date?);
      uint64_t v64 = (uint64_t *)((char *)v4 + v61[12]);
      uint64_t v65 = *v64;
      uint64_t v66 = v64[1];
      uint64_t v67 = v4[11];
      uint64_t v113 = v4[10];
      uint64_t v114 = v65;
      uint64_t v68 = v4[9];
      uint64_t v111 = v4[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      BusinessCardEntity.init(cardName:cardSubType:expirationDate:issueDate:issuingBusiness:memberIDNumber:membershipType:personName:)(v115, v60, (uint64_t)v108, (uint64_t)v36, v107, v63, v114, v66, v113, v67, 0, 0, v111, v68, v91, (uint64_t)v92, (uint64_t)v93, (uint64_t)v94, v95,
        (uint64_t)v96,
        v97,
        (uint64_t)v98,
        v99,
        (uint64_t)v100,
        v101,
        v102);
      long long v119 = v125;
      long long v120 = v126;
      long long v121 = v127;
      long long v122 = v128;
      uint64_t v123 = v129;
      long long v124 = v130;
    }
    else
    {
      uint64_t v43 = v4[7];
      uint64_t v104 = v4[6];
      uint64_t v44 = v4[8];
      uint64_t v107 = v4[9];
      uint64_t v102 = v4[10];
      uint64_t v110 = v4[11];
      uint64_t v45 = (int *)type metadata accessor for PreExtractedCard(0);
      outlined init with copy of SearchResult?((uint64_t)v4 + v45[10], v114, &demangling cache variable for type metadata for Date?);
      uint64_t v46 = v45[11];
      uint64_t v47 = (uint64_t *)((char *)v4 + v45[12]);
      uint64_t v48 = v47[1];
      uint64_t v101 = *v47;
      uint64_t v49 = v45[14];
      uint64_t v50 = (char *)v4 + v45[13];
      uint64_t v51 = *(void **)v50;
      uint64_t v106 = *((void *)v50 + 1);
      uint64_t v52 = *(uint64_t *)((char *)v4 + v49 + 8);
      uint64_t v99 = *(uint64_t *)((char *)v4 + v49);
      uint64_t v100 = v51;
      uint64_t v105 = v52;
      outlined init with copy of SearchResult?((uint64_t)v4 + v46, v113, &demangling cache variable for type metadata for Date?);
      outlined init with copy of SearchResult?((uint64_t)v4 + v45[15], v115, &demangling cache variable for type metadata for Date?);
      uint64_t v53 = (char *)v4 + v45[16];
      uint64_t v54 = *(void **)v53;
      uint64_t v55 = (void *)*((void *)v53 + 1);
      uint64_t v56 = *(uint64_t *)((char *)v4 + v45[18] + 8);
      uint64_t v103 = v44;
      uint64_t v98 = v54;
      if (v56)
      {
        Swift::String v57 = String.lowercased()();
        uint64_t countAndFlagsBits = v57._countAndFlagsBits;
        object = v57._object;
      }
      else
      {
        uint64_t countAndFlagsBits = 0;
        object = (void *)0xE000000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v95 = v43;
      swift_bridgeObjectRetain();
      uint64_t v96 = v55;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v97 = v48;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v69._uint64_t countAndFlagsBits = countAndFlagsBits;
      v69._object = object;
      Sex.init(rawValue:)(v69);
      char v70 = v131;
      if (v131 == 3) {
        char v70 = 0;
      }
      LOBYTE(v119) = v70;
      uint64_t v71 = (char *)v4 + v45[19];
      char v72 = *(void **)v71;
      uint64_t v73 = *((void *)v71 + 1);
      char v74 = (char *)v4 + v45[20];
      uint64_t v75 = *((void *)v74 + 1);
      uint64_t v93 = *(void **)v74;
      uint64_t v94 = v72;
      uint64_t v76 = (char *)v4 + v45[21];
      uint64_t v77 = *(void **)v76;
      uint64_t v78 = *((void *)v76 + 1);
      uint64_t v79 = (uint64_t *)((char *)v4 + v45[22]);
      uint64_t v80 = v79[1];
      uint64_t v91 = *v79;
      uint64_t v92 = v77;
      uint64_t v81 = (char *)v4 + v45[23];
      uint64_t v82 = *(void **)v81;
      uint64_t v83 = *((void *)v81 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      PersonalCardEntity.init(cardName:personName:idNumber:idType:memberIDNumber:issuingDate:issuingBusiness:issuingRegion:issuingCountry:expirationDate:birthday:placeOfBirth:address:sex:height:eyeColor:weight:licenseClass:licenseRestrictions:cardSubType:)(v104, v95, v103, v107, v102, v110, 0, 0, 0, 0, v114, v101, v97, (uint64_t)v100, v106, v99, v105, v113, v115,
        (uint64_t)v98,
        v96,
        0,
        (uint64_t)&v119,
        v94,
        v73,
        v93,
        v75,
        v92,
        v78,
        v91,
        v80,
        v82,
        v83,
        v108,
        v36,
        v90,
        v91,
        v92,
        (uint64_t)v93,
        v94,
        v95,
        v96,
        v97,
        v98,
        v99,
        v100,
        v101);
      destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType(&v125);
      outlined init with take of PersonalCardEntity?((uint64_t)&v125, (uint64_t)&v119);
    }
    EntityProperty.wrappedValue.setter();
    IdCardEntity.representedEntity.getter((uint64_t)&v119);
    uint64_t v6 = v109;
    if (*((void *)&v120 + 1))
    {
      outlined init with take of AppEntity & CardDisplayable & SpotlightItemProviding(&v119, (uint64_t)&v125);
      uint64_t v84 = v118;
      uint64_t v85 = v112;
      OUTLINED_FUNCTION_69_2(v118);
      uint64_t v86 = *((void *)&v126 + 1);
      uint64_t v87 = v128;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v125, *((uint64_t *)&v126 + 1));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 16))(v85, v86, v87);
      uint64_t v88 = *((void *)&v126 + 1);
      uint64_t v89 = *((void *)&v127 + 1);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v125, *((uint64_t *)&v126 + 1));
      (*(void (**)(id, uint64_t))(*(void *)(v89 + 16) + 16))(v117, v88);
      outlined destroy of SearchResult?(v84, (uint64_t *)&demangling cache variable for type metadata for IntentFile?);
      outlined destroy of IdCardEntity((uint64_t)v4, (void (*)(void))type metadata accessor for PreExtractedCard);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v125);
    }
    else
    {

      outlined destroy of SearchResult?(v118, (uint64_t *)&demangling cache variable for type metadata for IntentFile?);
      outlined destroy of IdCardEntity((uint64_t)v4, (void (*)(void))type metadata accessor for PreExtractedCard);
      outlined destroy of SearchResult?((uint64_t)&v119, &demangling cache variable for type metadata for (AppEntity & CardDisplayable & SpotlightItemProviding)?);
    }
    _s10OmniSearch0B6ResultVWObTm_2(v28, v6, (void (*)(void))type metadata accessor for IdCardEntity);
    uint64_t v42 = 0;
  }
  __swift_storeEnumTagSinglePayload(v6, v42, 1, v116);
  OUTLINED_FUNCTION_119_0();
}

void static IdCardEntity.cardSubtype(preExtractedCardType:preExtractedCardSubType:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  if (!a4)
  {
    if (one-time initialization token for utilities != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logging.utilities);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (!OUTLINED_FUNCTION_51_1(v17)) {
      goto LABEL_34;
    }
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    uint64_t v19 = "preExtractedCardSubType is nil. Returning nil CardSubType.";
    goto LABEL_33;
  }
  uint64_t v5 = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_258663010;
  *(void *)(inited + 32) = 0xD000000000000011;
  *(void *)(inited + 40) = 0x800000025867F730;
  *(void *)(inited + 48) = 0x70737361705F6469;
  *(void *)(inited + 56) = 0xEB0000000074726FLL;
  strcpy((char *)(inited + 64), "id_green_card");
  *(_WORD *)(inited + 78) = -4864;
  *(void *)(inited + 80) = 0x6E73735F6469;
  *(void *)(inited + 88) = 0xE600000000000000;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!a2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (v11 == a1 && v12 == a2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v14 = OUTLINED_FUNCTION_72_1();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
LABEL_17:
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (a2)
      {
        if (v21 == a1 && v22 == a2)
        {
          swift_bridgeObjectRelease();
          goto LABEL_27;
        }
        char v24 = OUTLINED_FUNCTION_72_1();
        swift_bridgeObjectRelease();
        if (v24)
        {
LABEL_27:
          LOBYTE(v5) = specialized Sequence<>.contains(_:)(a3, v5, (void *)inited);
          swift_setDeallocating();
          specialized _ContiguousArrayStorage.__deallocating_deinit();
          if (v5)
          {
            char v20 = 0;
            goto LABEL_35;
          }
          goto LABEL_29;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
LABEL_29:
      if (one-time initialization token for utilities != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Logging.utilities);
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.debug.getter();
      if (!OUTLINED_FUNCTION_51_1(v26)) {
        goto LABEL_34;
      }
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      uint64_t v19 = "preExtractedCardType is not supported. Returning nil CardSubType.";
LABEL_33:
      _os_log_impl(&dword_257DC6000, v16, (os_log_type_t)v5, v19, v18, 2u);
      MEMORY[0x25A2C94B0](v18, -1, -1);
LABEL_34:

      char v20 = 2;
      goto LABEL_35;
    }
  }
  if ((specialized Sequence<>.contains(_:)(a3, v5, outlined read-only object #0 of static IdCardEntity.cardSubtype(preExtractedCardType:preExtractedCardSubType:)) & 1) == 0)goto LABEL_17; {
  swift_setDeallocating();
  }
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  char v20 = 1;
LABEL_35:
  *a5 = v20;
}

void PersonalCardEntity.init(cardName:personName:idNumber:idType:memberIDNumber:issuingDate:issuingBusiness:issuingRegion:issuingCountry:expirationDate:birthday:placeOfBirth:address:sex:height:eyeColor:weight:licenseClass:licenseRestrictions:cardSubType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,void *a34,unsigned __int8 *a35,void *a36,uint64_t a37,void *a38,uint64_t a39,void *a40,uint64_t a41,void *a42,uint64_t a43,void *a44,uint64_t a45,void *a46,uint64_t a47)
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v98 = v47;
  uint64_t v99 = v48;
  uint64_t v95 = v49;
  uint64_t v93 = v50;
  uint64_t v90 = v51;
  uint64_t v91 = v52;
  uint64_t v88 = v53;
  uint64_t v89 = v54;
  long long v124 = v55;
  uint64_t v123 = a47;
  long long v122 = a46;
  uint64_t v121 = a45;
  long long v120 = a44;
  uint64_t v119 = a43;
  uint64_t v118 = a42;
  uint64_t v117 = a41;
  uint64_t v116 = a40;
  uint64_t v115 = a39;
  uint64_t v114 = a38;
  uint64_t v113 = a37;
  uint64_t v111 = a34;
  uint64_t v110 = a33;
  uint64_t v109 = a32;
  uint64_t v107 = a31;
  uint64_t v106 = a30;
  uint64_t v105 = a29;
  uint64_t v104 = a28;
  uint64_t v103 = a27;
  uint64_t v102 = a26;
  uint64_t v101 = a25;
  uint64_t v100 = a24;
  uint64_t v130 = a23;
  uint64_t v96 = a22;
  uint64_t v94 = a21;
  uint64_t v112 = a36;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v57 = OUTLINED_FUNCTION_81(v56);
  MEMORY[0x270FA5388](v57);
  OUTLINED_FUNCTION_185_0();
  uint64_t v97 = v58;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v59);
  uint64_t v92 = (uint64_t)&v83 - v60;
  uint64_t v61 = type metadata accessor for LocalizedStringResource();
  uint64_t v62 = OUTLINED_FUNCTION_81(v61);
  MEMORY[0x270FA5388](v62);
  OUTLINED_FUNCTION_15();
  uint64_t v65 = v64 - v63;
  int v108 = *a35;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<String?>);
  OUTLINED_FUNCTION_70_2();
  OUTLINED_FUNCTION_63_2();
  OUTLINED_FUNCTION_68_1();
  uint64_t v129 = v66;
  swift_retain();
  OUTLINED_FUNCTION_7_15();
  uint64_t v67 = MEMORY[0x25A2C4900](v65);
  swift_retain();
  OUTLINED_FUNCTION_40_5();
  uint64_t v68 = MEMORY[0x25A2C4900](v65);
  swift_retain();
  OUTLINED_FUNCTION_34_6();
  uint64_t v127 = MEMORY[0x25A2C4900](v65);
  swift_retain();
  OUTLINED_FUNCTION_30_10();
  uint64_t v126 = MEMORY[0x25A2C4900](v65);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Date?>);
  swift_retain();
  OUTLINED_FUNCTION_26_11();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v125 = MEMORY[0x25A2C48F0](v65);
  swift_retain();
  OUTLINED_FUNCTION_30_10();
  OUTLINED_FUNCTION_68_1();
  uint64_t v131 = v69;
  swift_retain();
  OUTLINED_FUNCTION_26_11();
  OUTLINED_FUNCTION_60_2();
  uint64_t v138 = MEMORY[0x25A2C4900](v65);
  swift_retain();
  OUTLINED_FUNCTION_26_11();
  OUTLINED_FUNCTION_59_4();
  uint64_t v135 = MEMORY[0x25A2C4900](v65);
  swift_retain();
  OUTLINED_FUNCTION_3_16();
  uint64_t v133 = MEMORY[0x25A2C48F0](v65);
  swift_retain();
  OUTLINED_FUNCTION_48_3();
  uint64_t v141 = MEMORY[0x25A2C48F0](v65);
  swift_retain();
  OUTLINED_FUNCTION_29_8();
  OUTLINED_FUNCTION_68_1();
  uint64_t v134 = v70;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<CLPlacemark?>);
  swift_retain();
  OUTLINED_FUNCTION_47_4();
  uint64_t v142 = MEMORY[0x25A2C4940](v65);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Sex>);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  unint64_t v71 = lazy protocol witness table accessor for type Sex and conformance Sex();
  uint64_t v140 = MEMORY[0x25A2C4880](v65, v71);
  swift_retain();
  OUTLINED_FUNCTION_57_1();
  OUTLINED_FUNCTION_68_1();
  uint64_t v139 = v72;
  swift_retain();
  OUTLINED_FUNCTION_38_4();
  uint64_t v136 = MEMORY[0x25A2C4900](v65);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v73 = MEMORY[0x25A2C4900](v65);
  uint64_t v132 = v73;
  swift_retain();
  OUTLINED_FUNCTION_28_7();
  uint64_t v137 = MEMORY[0x25A2C4900](v65);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v74 = MEMORY[0x25A2C4900](v65);
  uint64_t v128 = v74;
  swift_retain();
  OUTLINED_FUNCTION_4_14();
  uint64_t v75 = MEMORY[0x25A2C4900](v65);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<IntentFile?>);
  uint64_t v85 = v75;
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v86 = MEMORY[0x25A2C48A0](v65);
  v143[0] = v129;
  v143[1] = v67;
  uint64_t v83 = v68;
  uint64_t v84 = v67;
  v143[2] = v68;
  v143[3] = v127;
  v143[4] = v126;
  v143[5] = v125;
  v143[6] = v131;
  v143[7] = v138;
  v143[8] = v135;
  v143[9] = v133;
  v143[10] = v141;
  v143[11] = v134;
  v143[12] = v142;
  v143[13] = v140;
  v143[14] = v139;
  v143[15] = v136;
  v143[16] = v73;
  v143[17] = v137;
  v143[18] = v74;
  v143[19] = v75;
  v143[20] = v86;
  long long v87 = xmmword_258665BD0;
  *(_OWORD *)&v143[21] = xmmword_258665BD0;
  long long v144 = v88;
  uint64_t v145 = v89;
  swift_retain();
  outlined retain of PersonalCardEntity((uint64_t)v143);
  EntityProperty.wrappedValue.setter();
  outlined release of PersonalCardEntity((uint64_t)v143);
  long long v144 = v90;
  OUTLINED_FUNCTION_12_13(v91);
  EntityProperty.wrappedValue.setter();
  outlined release of PersonalCardEntity((uint64_t)v143);
  long long v144 = v93;
  OUTLINED_FUNCTION_12_13(v95);
  EntityProperty.wrappedValue.setter();
  outlined release of PersonalCardEntity((uint64_t)v143);
  long long v144 = v98;
  OUTLINED_FUNCTION_12_13(v99);
  EntityProperty.wrappedValue.setter();
  outlined release of PersonalCardEntity((uint64_t)v143);
  long long v144 = v94;
  OUTLINED_FUNCTION_12_13(v96);
  EntityProperty.wrappedValue.setter();
  outlined release of PersonalCardEntity((uint64_t)v143);
  uint64_t v76 = v92;
  outlined init with copy of SearchResult?(v130, v92, &demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_69_2(v76);
  outlined retain of PersonalCardEntity((uint64_t)v143);
  EntityProperty.wrappedValue.setter();
  outlined destroy of SearchResult?(v76, &demangling cache variable for type metadata for Date?);
  outlined release of PersonalCardEntity((uint64_t)v143);
  long long v144 = v100;
  OUTLINED_FUNCTION_12_13(v101);
  EntityProperty.wrappedValue.setter();
  outlined release of PersonalCardEntity((uint64_t)v143);
  long long v144 = v102;
  OUTLINED_FUNCTION_12_13(v103);
  EntityProperty.wrappedValue.setter();
  outlined release of PersonalCardEntity((uint64_t)v143);
  long long v144 = v104;
  OUTLINED_FUNCTION_12_13(v105);
  EntityProperty.wrappedValue.setter();
  outlined release of PersonalCardEntity((uint64_t)v143);
  uint64_t v77 = v106;
  outlined init with copy of SearchResult?(v106, v76, &demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_69_2(v76);
  outlined retain of PersonalCardEntity((uint64_t)v143);
  EntityProperty.wrappedValue.setter();
  outlined destroy of SearchResult?(v76, &demangling cache variable for type metadata for Date?);
  outlined release of PersonalCardEntity((uint64_t)v143);
  uint64_t v78 = v107;
  outlined init with copy of SearchResult?(v107, v76, &demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_69_2(v76);
  outlined retain of PersonalCardEntity((uint64_t)v143);
  EntityProperty.wrappedValue.setter();
  outlined destroy of SearchResult?(v76, &demangling cache variable for type metadata for Date?);
  outlined release of PersonalCardEntity((uint64_t)v143);
  long long v144 = v109;
  OUTLINED_FUNCTION_12_13(v110);
  EntityProperty.wrappedValue.setter();
  outlined release of PersonalCardEntity((uint64_t)v143);
  uint64_t v79 = v111;
  long long v144 = v111;
  outlined retain of PersonalCardEntity((uint64_t)v143);
  id v80 = v79;
  EntityProperty.wrappedValue.setter();
  outlined release of PersonalCardEntity((uint64_t)v143);
  LOBYTE(v144) = v108;
  outlined retain of PersonalCardEntity((uint64_t)v143);
  EntityProperty.wrappedValue.setter();
  outlined release of PersonalCardEntity((uint64_t)v143);
  long long v144 = v112;
  OUTLINED_FUNCTION_12_13(v113);
  EntityProperty.wrappedValue.setter();
  outlined release of PersonalCardEntity((uint64_t)v143);
  long long v144 = v114;
  OUTLINED_FUNCTION_12_13(v115);
  EntityProperty.wrappedValue.setter();
  outlined release of PersonalCardEntity((uint64_t)v143);
  long long v144 = v116;
  OUTLINED_FUNCTION_12_13(v117);
  EntityProperty.wrappedValue.setter();
  outlined release of PersonalCardEntity((uint64_t)v143);
  long long v144 = v118;
  OUTLINED_FUNCTION_12_13(v119);
  EntityProperty.wrappedValue.setter();
  outlined release of PersonalCardEntity((uint64_t)v143);
  long long v144 = v120;
  OUTLINED_FUNCTION_12_13(v121);
  uint64_t v81 = v128;
  EntityProperty.wrappedValue.setter();
  outlined release of PersonalCardEntity((uint64_t)v143);
  long long v144 = v122;
  OUTLINED_FUNCTION_12_13(v123);
  uint64_t v82 = v85;
  EntityProperty.wrappedValue.setter();

  outlined destroy of SearchResult?(v78, &demangling cache variable for type metadata for Date?);
  outlined destroy of SearchResult?(v77, &demangling cache variable for type metadata for Date?);
  outlined destroy of SearchResult?(v130, &demangling cache variable for type metadata for Date?);
  long long v144 = v129;
  uint64_t v145 = v84;
  uint64_t v146 = v83;
  uint64_t v147 = v127;
  uint64_t v148 = v126;
  uint64_t v149 = v125;
  uint64_t v150 = v131;
  uint64_t v151 = v138;
  uint64_t v152 = v135;
  uint64_t v153 = v133;
  uint64_t v154 = v141;
  uint64_t v155 = v134;
  uint64_t v156 = v142;
  uint64_t v157 = v140;
  uint64_t v158 = v139;
  uint64_t v159 = v136;
  uint64_t v160 = v132;
  uint64_t v161 = v137;
  uint64_t v162 = v81;
  uint64_t v163 = v82;
  uint64_t v164 = v86;
  long long v165 = v87;
  outlined release of PersonalCardEntity((uint64_t)&v144);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  memcpy(v124, v143, 0xB8uLL);
  OUTLINED_FUNCTION_119_0();
}

void BusinessCardEntity.init(cardName:cardSubType:expirationDate:issueDate:issuingBusiness:memberIDNumber:membershipType:personName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v75 = v27;
  uint64_t v76 = v28;
  uint64_t v86 = v30;
  uint64_t v87 = v29;
  uint64_t v71 = v31;
  uint64_t v72 = v32;
  uint64_t v70 = v33;
  uint64_t v69 = v34;
  uint64_t v83 = v35;
  uint64_t v81 = a25;
  uint64_t v82 = a26;
  uint64_t v79 = a23;
  uint64_t v80 = a24;
  uint64_t v77 = a21;
  uint64_t v78 = a22;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v37 = OUTLINED_FUNCTION_81(v36);
  MEMORY[0x270FA5388](v37);
  OUTLINED_FUNCTION_185_0();
  uint64_t v74 = v38;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v39);
  uint64_t v73 = (uint64_t)&v67 - v40;
  uint64_t v41 = type metadata accessor for LocalizedStringResource();
  uint64_t v42 = OUTLINED_FUNCTION_81(v41);
  MEMORY[0x270FA5388](v42);
  OUTLINED_FUNCTION_17_1();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<String?>);
  OUTLINED_FUNCTION_42_3();
  uint64_t v43 = MEMORY[0x25A2C4900](v26);
  swift_retain();
  OUTLINED_FUNCTION_4_14();
  uint64_t v44 = MEMORY[0x25A2C4900](v26);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Date?>);
  swift_retain();
  OUTLINED_FUNCTION_3_16();
  uint64_t v45 = MEMORY[0x25A2C48F0](v26);
  swift_retain();
  OUTLINED_FUNCTION_39_2();
  uint64_t v85 = MEMORY[0x25A2C48F0](v26);
  swift_retain();
  OUTLINED_FUNCTION_177_0();
  OUTLINED_FUNCTION_30_10();
  uint64_t v46 = MEMORY[0x25A2C4900](v26);
  swift_retain();
  OUTLINED_FUNCTION_30_10();
  uint64_t v47 = MEMORY[0x25A2C4900](v26);
  swift_retain();
  OUTLINED_FUNCTION_27_9();
  uint64_t v48 = MEMORY[0x25A2C4900](v26);
  swift_retain();
  OUTLINED_FUNCTION_7_15();
  uint64_t v49 = MEMORY[0x25A2C4900](v26);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<IntentFile?>);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v50 = MEMORY[0x25A2C48A0](v26);
  uint64_t v90 = v69;
  uint64_t v91 = v70;
  uint64_t v89 = v50;
  swift_retain_n();
  uint64_t v51 = v43;
  swift_retain();
  uint64_t v52 = v44;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v53 = v46;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  OUTLINED_FUNCTION_15_12();
  uint64_t v54 = v51;
  EntityProperty.wrappedValue.setter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v55 = v47;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v88 = v54;
  swift_release();
  OUTLINED_FUNCTION_32_7();
  OUTLINED_FUNCTION_45_3(v72);
  uint64_t v56 = v52;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v84 = v48;
  swift_retain();
  swift_retain();
  swift_retain();
  OUTLINED_FUNCTION_15_12();
  EntityProperty.wrappedValue.setter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_32_7();
  uint64_t v57 = v73;
  outlined init with copy of SearchResult?(v87, v73, &demangling cache variable for type metadata for Date?);
  uint64_t v58 = v74;
  outlined init with copy of SearchResult?(v57, v74, &demangling cache variable for type metadata for Date?);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Data?(0, 0xF000000000000000);
  EntityProperty.wrappedValue.setter();
  outlined destroy of SearchResult?(v57, &demangling cache variable for type metadata for Date?);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v59 = v85;
  swift_release();
  uint64_t v67 = v45;
  swift_release();
  uint64_t v68 = v56;
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_32_7();
  outlined init with copy of SearchResult?(v86, v57, &demangling cache variable for type metadata for Date?);
  outlined init with copy of SearchResult?(v57, v58, &demangling cache variable for type metadata for Date?);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v60 = v84;
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Data?(0, 0xF000000000000000);
  EntityProperty.wrappedValue.setter();
  outlined destroy of SearchResult?(v57, &demangling cache variable for type metadata for Date?);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v61 = v67;
  swift_release();
  uint64_t v62 = v68;
  swift_release();
  uint64_t v63 = v88;
  swift_release();
  OUTLINED_FUNCTION_32_7();
  OUTLINED_FUNCTION_45_3(v76);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  OUTLINED_FUNCTION_15_12();
  EntityProperty.wrappedValue.setter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_32_7();
  OUTLINED_FUNCTION_45_3(v78);
  swift_retain();
  swift_retain();
  uint64_t v64 = v59;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v65 = v89;
  swift_retain();
  OUTLINED_FUNCTION_15_12();
  EntityProperty.wrappedValue.setter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_32_7();
  OUTLINED_FUNCTION_45_3(v80);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  OUTLINED_FUNCTION_15_12();
  EntityProperty.wrappedValue.setter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_32_7();
  OUTLINED_FUNCTION_45_3(v82);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  OUTLINED_FUNCTION_15_12();
  EntityProperty.wrappedValue.setter();
  outlined destroy of SearchResult?(v86, &demangling cache variable for type metadata for Date?);
  outlined destroy of SearchResult?(v87, &demangling cache variable for type metadata for Date?);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_32_7();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v66 = v83;
  *uint64_t v83 = v63;
  v66[1] = v62;
  v66[2] = v61;
  v66[3] = v64;
  v66[4] = v53;
  v66[5] = v55;
  v66[6] = v60;
  v66[7] = v49;
  v66[8] = v65;
  *(_OWORD *)(v66 + 9) = xmmword_258665BD0;
  OUTLINED_FUNCTION_119_0();
}

char *IdCardEntity.representedEntity.getter@<X0>(uint64_t a1@<X8>)
{
  EntityProperty.wrappedValue.getter();
  if (v10)
  {
    uint64_t result = (char *)EntityProperty.wrappedValue.getter();
    uint64_t v3 = __src[0];
    if (__src[0])
    {
      uint64_t v5 = __src[9];
      uint64_t v4 = __src[10];
      *(void *)(a1 + 24) = &type metadata for BusinessCardEntity;
      *(void *)(a1 + 32) = lazy protocol witness table accessor for type BusinessCardEntity and conformance BusinessCardEntity();
      *(void *)(a1 + 40) = lazy protocol witness table accessor for type BusinessCardEntity and conformance BusinessCardEntity();
      *(void *)(a1 + 48) = &protocol witness table for BusinessCardEntity;
      uint64_t result = (char *)swift_allocObject();
      *(void *)a1 = result;
      *((void *)result + 2) = v3;
      *(_OWORD *)(result + 24) = *(_OWORD *)&__src[1];
      *(_OWORD *)(result + 40) = *(_OWORD *)&__src[3];
      *(_OWORD *)(result + 56) = *(_OWORD *)&__src[5];
      *(_OWORD *)(result + 72) = *(_OWORD *)&__src[7];
      *((void *)result + 11) = v5;
      *((void *)result + 12) = v4;
      return result;
    }
    goto LABEL_5;
  }
  EntityProperty.wrappedValue.getter();
  outlined init with take of PersonalCardEntity?((uint64_t)&v7, (uint64_t)v8);
  outlined init with take of PersonalCardEntity?((uint64_t)v8, (uint64_t)__src);
  uint64_t result = (char *)getEnumTag for DataFilter.FilterResult(__src);
  if (result == 1)
  {
LABEL_5:
    *(void *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return result;
  }
  *(void *)(a1 + 24) = &type metadata for PersonalCardEntity;
  *(void *)(a1 + 32) = lazy protocol witness table accessor for type PersonalCardEntity and conformance PersonalCardEntity();
  *(void *)(a1 + 40) = lazy protocol witness table accessor for type PersonalCardEntity and conformance PersonalCardEntity();
  *(void *)(a1 + 48) = &protocol witness table for PersonalCardEntity;
  uint64_t v6 = swift_allocObject();
  *(void *)a1 = v6;
  return (char *)memcpy((void *)(v6 + 16), __src, 0xB8uLL);
}

uint64_t outlined release of (BusinessCardEntity?, BusinessCardEntity?)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 120);
  uint64_t v7 = *(void *)(a1 + 128);
  uint64_t v8 = *(void *)(a1 + 136);
  uint64_t v9 = *(void *)(a1 + 144);
  long long v12 = *(_OWORD *)(a1 + 152);
  unint64_t v10 = *(void *)(a1 + 168);
  outlined consume of BusinessCardEntity?(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80));
  outlined consume of BusinessCardEntity?(v2, v3, v4, v5, v6, v7, v8, v9, v12, *((uint64_t *)&v12 + 1), v10);
  return a1;
}

uint64_t outlined consume of BusinessCardEntity?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  if (result)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return outlined consume of Data?(a10, a11);
  }
  return result;
}

uint64_t outlined release of (PersonalCardEntity?, PersonalCardEntity?)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 184);
  uint64_t v3 = *(void *)(a1 + 192);
  uint64_t v4 = *(void *)(a1 + 200);
  uint64_t v5 = *(void *)(a1 + 208);
  uint64_t v6 = *(void *)(a1 + 216);
  uint64_t v7 = *(void *)(a1 + 224);
  uint64_t v8 = *(void *)(a1 + 232);
  uint64_t v9 = *(void *)(a1 + 240);
  long long v18 = *(_OWORD *)(a1 + 248);
  long long v17 = *(_OWORD *)(a1 + 264);
  long long v16 = *(_OWORD *)(a1 + 280);
  long long v15 = *(_OWORD *)(a1 + 296);
  long long v14 = *(_OWORD *)(a1 + 312);
  long long v13 = *(_OWORD *)(a1 + 328);
  long long v12 = *(_OWORD *)(a1 + 344);
  unint64_t v10 = *(void *)(a1 + 360);
  outlined consume of PersonalCardEntity?(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176));
  outlined consume of PersonalCardEntity?(v2, v3, v4, v5, v6, v7, v8, v9, v18, *((uint64_t *)&v18 + 1), v17, *((uint64_t *)&v17 + 1), v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v10);
  return a1;
}

uint64_t outlined consume of PersonalCardEntity?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unint64_t a23)
{
  if (result)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return outlined consume of Data?(a22, a23);
  }
  return result;
}

uint64_t outlined init with copy of SearchResult?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_7_2();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Sex and conformance Sex()
{
  unint64_t result = lazy protocol witness table cache variable for type Sex and conformance Sex;
  if (!lazy protocol witness table cache variable for type Sex and conformance Sex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Sex and conformance Sex);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Sex and conformance Sex;
  if (!lazy protocol witness table cache variable for type Sex and conformance Sex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Sex and conformance Sex);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Sex and conformance Sex;
  if (!lazy protocol witness table cache variable for type Sex and conformance Sex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Sex and conformance Sex);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Sex and conformance Sex;
  if (!lazy protocol witness table cache variable for type Sex and conformance Sex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Sex and conformance Sex);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Sex and conformance Sex;
  if (!lazy protocol witness table cache variable for type Sex and conformance Sex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Sex and conformance Sex);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Sex and conformance Sex;
  if (!lazy protocol witness table cache variable for type Sex and conformance Sex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Sex and conformance Sex);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Sex and conformance Sex;
  if (!lazy protocol witness table cache variable for type Sex and conformance Sex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Sex and conformance Sex);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Sex and conformance Sex;
  if (!lazy protocol witness table cache variable for type Sex and conformance Sex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Sex and conformance Sex);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Sex and conformance Sex;
  if (!lazy protocol witness table cache variable for type Sex and conformance Sex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Sex and conformance Sex);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Sex and conformance Sex;
  if (!lazy protocol witness table cache variable for type Sex and conformance Sex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Sex and conformance Sex);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Sex and conformance Sex;
  if (!lazy protocol witness table cache variable for type Sex and conformance Sex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Sex and conformance Sex);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Sex and conformance Sex;
  if (!lazy protocol witness table cache variable for type Sex and conformance Sex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Sex and conformance Sex);
  }
  return result;
}