void *initializeBufferWithCopyOfBuffer for AppDialogParams(void *a1, void *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for AppDialogParams()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for AppDialogParams(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for AppDialogParams(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppDialogParams(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AppDialogParams(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppDialogParams()
{
  return &type metadata for AppDialogParams;
}

ValueMetadata *type metadata accessor for EmptyDialogParams()
{
  return &type metadata for EmptyDialogParams;
}

void type metadata accessor for TUCallStatus()
{
  if (!lazy cache variable for type metadata for TUCallStatus)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for TUCallStatus);
    }
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SharingDialogParams.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SharingDialogParams.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SharingDialogParams.CodingKeys()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SharingDialogParams.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SharingDialogParams.CodingKeys()
{
  uint64_t v1 = 0x656D614E707061;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E65697069636572;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E65657263537369;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SharingDialogParams.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SharingDialogParams.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance SharingDialogParams.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance SharingDialogParams.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SharingDialogParams.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SharingDialogParams.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SharingDialogParams.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v13[1] = a3;
  v13[2] = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SharingDialogParams.CodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    char v15 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v13[3] = a5;
    char v14 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DialogPerson]);
    lazy protocol witness table accessor for type [DialogPerson] and conformance <A> [A]();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SharingDialogParams(void *a1)
{
  return SharingDialogParams.encode(to:)(a1, *(unsigned __int8 *)v1, v1[1], v1[2], v1[3]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GenericErrorParams.CodingKeys()
{
  return 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GenericErrorParams.CodingKeys()
{
  return 0x5265726168537369;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GenericErrorParams.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x5265726168537369 && a2 == 0xEE00747365757165)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance GenericErrorParams.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GenericErrorParams.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GenericErrorParams.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GenericErrorParams(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance GenericErrorParams(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<GenericErrorParams.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GenericErrorParams(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void protocol witness for Hashable.hash(into:) in conformance AppDialogParams.CodingKeys()
{
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AppDialogParams.CodingKeys()
{
  return 0x656D614E707061;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AppDialogParams.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x656D614E707061 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AppDialogParams.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AppDialogParams.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AppDialogParams(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AppDialogParams.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AppDialogParams(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a2[1];
  if (v3)
  {
    if (v4)
    {
      BOOL v5 = *a1 == *a2 && v3 == v4;
      if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
    }
  }
  else if (!v4)
  {
    return 1;
  }
  return 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GenericErrorParams.CodingKeys()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GenericErrorParams.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance ConfirmationDialogParams.CodingKeys()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ConfirmationDialogParams.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ConfirmationDialogParams.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ConfirmationDialogParams.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConfirmationDialogParams.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ConfirmationDialogParams(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance GenericErrorParams(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<ConfirmationDialogParams.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GenericErrorParams(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  v12 = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v12();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance EmptyDialogParams.CodingKeys()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance EmptyDialogParams.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance EmptyDialogParams.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance EmptyDialogParams.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance EmptyDialogParams(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<EmptyDialogParams.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  BOOL v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void protocol witness for SetAlgebra.init() in conformance NSJSONReadingOptions(void *a1@<X8>)
{
  *a1 = 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TUConversationActivitySessionState(void *a1, void *a2)
{
  return *a1 == *a2;
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance TUCallStatus@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TUCallStatus(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppDialogParams.CodingKeys and conformance AppDialogParams.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyDialogParams.CodingKeys and conformance EmptyDialogParams.CodingKeys);
  }
  return result;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance NSJSONReadingOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TUConversationActivitySessionState(void *a1@<X8>)
{
  *a1 = *v1;
}

void *type metadata accessor for EmptyDialogParams.CodingKeys()
{
  return &unk_26E1CE760;
}

uint64_t getEnumTag for AppDialogParams.CodingKeys()
{
  return 0;
}

void *type metadata accessor for AppDialogParams.CodingKeys()
{
  return &unk_26E1CE7F0;
}

unint64_t lazy protocol witness table accessor for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationDialogParams.CodingKeys and conformance ConfirmationDialogParams.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingDialogParams.CodingKeys and conformance SharingDialogParams.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DialogPerson] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DialogPerson] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [DialogPerson] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DialogPerson]);
    lazy protocol witness table accessor for type DialogPerson and conformance DialogPerson();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DialogPerson] and conformance <A> [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DialogPerson and conformance DialogPerson()
{
  unint64_t result = lazy protocol witness table cache variable for type DialogPerson and conformance DialogPerson;
  if (!lazy protocol witness table cache variable for type DialogPerson and conformance DialogPerson)
  {
    type metadata accessor for DialogPerson();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DialogPerson and conformance DialogPerson);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericErrorParams.CodingKeys and conformance GenericErrorParams.CodingKeys);
  }
  return result;
}

void *type metadata accessor for GenericErrorParams.CodingKeys()
{
  return &unk_26E1CE880;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SharingDialogParams.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SharingDialogParams.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22DD8DEB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for SharingDialogParams.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for SharingDialogParams.CodingKeys(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

void *type metadata accessor for SharingDialogParams.CodingKeys()
{
  return &unk_26E1CE910;
}

uint64_t getEnumTagSinglePayload for AppDialogParams.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for AppDialogParams.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22DD8DFE8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for ConfirmationDialogParams.CodingKeys()
{
  return &unk_26E1CE9A0;
}

ValueMetadata *type metadata accessor for ConfirmationDialogParams()
{
  return &type metadata for ConfirmationDialogParams;
}

uint64_t initializeBufferWithCopyOfBuffer for SharingDialogParams(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for SharingDialogParams()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SharingDialogParams(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SharingDialogParams(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for SharingDialogParams(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SharingDialogParams(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SharingDialogParams(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingDialogParams()
{
  return &type metadata for SharingDialogParams;
}

uint64_t getEnumTagSinglePayload for ConfirmationDialogParams(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ConfirmationDialogParams(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22DD8E3E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericErrorParams()
{
  return &type metadata for GenericErrorParams;
}

uint64_t specialized SharingDialogParams.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E65657263537369 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D614E707061 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E65697069636572 && a2 == 0xEA00000000007374)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized ConfirmationDialogParams.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000013 && a2 == 0x800000022DDEA660)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t one-time initialization function for typeName()
{
  type metadata accessor for SharingDirectInvocationIntent();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingDirectInvocationIntent.Type);
  uint64_t result = String.init<A>(describing:)();
  static SharingDirectInvocationIntent.typeName = result;
  *(void *)algn_2685B7148 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExpanseFlowProvider.Type);
  uint64_t result = String.init<A>(describing:)();
  static ExpanseFlowProvider.typeName = result;
  unk_2685B72E0 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingDirectInvocation.Type);
  uint64_t result = String.init<A>(describing:)();
  static SharingDirectInvocation.typeName = result;
  *(void *)algn_2685B7328 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharingIntentHelper.Type);
  uint64_t result = String.init<A>(describing:)();
  static SharingIntentHelper.typeName = result;
  *(void *)algn_2685B7358 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScreenShareType.Type);
  uint64_t result = String.init<A>(describing:)();
  static ScreenShareType.typeName = result;
  *(void *)algn_2685B73A8 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for SimpleSharingYesNoPromptFlowStrategy();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SimpleSharingYesNoPromptFlowStrategy.Type);
  uint64_t result = String.init<A>(describing:)();
  static SimpleSharingYesNoPromptFlowStrategy.typeName = result;
  unk_2685B7480 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingNLContextProvider.Type);
  uint64_t result = String.init<A>(describing:)();
  static SharingNLContextProvider.typeName = result;
  *(void *)algn_2685B7528 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for StartSharingConfirmationFlow();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StartSharingConfirmationFlow.Type);
  uint64_t result = String.init<A>(describing:)();
  static StartSharingConfirmationFlow.typeName = result;
  *(void *)algn_2685B75B8 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScreenSharingCallManager.Type);
  uint64_t result = String.init<A>(describing:)();
  static ScreenSharingCallManager.typeName = result;
  *(void *)algn_2685B7698 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for OutputDialogFlow();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OutputDialogFlow.Type);
  uint64_t result = String.init<A>(describing:)();
  static OutputDialogFlow.typeName = result;
  unk_2685B76C0 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for SharePlayHelper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharePlayHelper.Type);
  uint64_t result = String.init<A>(describing:)();
  static SharePlayHelper.typeName = result;
  unk_2685B7820 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationContext.Type);
  uint64_t result = String.init<A>(describing:)();
  static ConfirmationContext.typeName = result;
  unk_2685B7850 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for ValidateCallStatusFlow();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ValidateCallStatusFlow.Type);
  uint64_t result = String.init<A>(describing:)();
  static ValidateCallStatusFlow.typeName = result;
  unk_2685B7870 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShareStatus.Type);
  uint64_t result = String.init<A>(describing:)();
  static ShareStatus.typeName = result;
  *(void *)algn_2685B7968 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for DismissSiriFlow();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DismissSiriFlow.Type);
  uint64_t result = String.init<A>(describing:)();
  static DismissSiriFlow.typeName = result;
  *(void *)algn_2685B7BF8 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sharer.Type);
  uint64_t result = String.init<A>(describing:)();
  static Sharer.typeName = result;
  *(void *)algn_2685B7C28 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for ResponseExecutor();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseExecutor.Type);
  uint64_t result = String.init<A>(describing:)();
  static ResponseExecutor.typeName = result;
  *(void *)algn_2685B7C58 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for ValidateRecipientsFlow();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ValidateRecipientsFlow.Type);
  uint64_t result = String.init<A>(describing:)();
  static ValidateRecipientsFlow.typeName = result;
  unk_2685B7D30 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for SharingNLv4Intent();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingNLv4Intent.Type);
  uint64_t result = String.init<A>(describing:)();
  static SharingNLv4Intent.typeName = result;
  *(void *)algn_2685B7D88 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for ConfirmScreenShareOrMessageSendFlowStrategy();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmScreenShareOrMessageSendFlowStrategy.Type);
  uint64_t result = String.init<A>(describing:)();
  static ConfirmScreenShareOrMessageSendFlowStrategy.typeName = result;
  *(void *)algn_2685B80A8 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShareTargetResolver.Type);
  uint64_t result = String.init<A>(describing:)();
  static ShareTargetResolver.typeName = result;
  unk_2685B8110 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for StartSharingFlow(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StartSharingFlow.Type);
  uint64_t result = String.init<A>(describing:)();
  static StartSharingFlow.typeName = result;
  *(void *)algn_2685B8148 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for ValidateStartSharingIntentFlow();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ValidateStartSharingIntentFlow.Type);
  uint64_t result = String.init<A>(describing:)();
  static ValidateStartSharingIntentFlow.typeName = result;
  unk_2685B8230 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for StopSharingFlow(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StopSharingFlow.Type);
  uint64_t result = String.init<A>(describing:)();
  static StopSharingFlow.typeName = result;
  qword_2685B8270 = v1;
  return result;
}

uint64_t SharingDirectInvocationIntent.description.getter()
{
  BYTE8(v5) = 0;
  _StringGuts.grow(_:)(52);
  v1._object = (void *)0x800000022DDEA6A0;
  v1._countAndFlagsBits = 0xD000000000000031;
  String.append(_:)(v1);
  *(void *)&long long v5 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SharingDirectInvocationIntent() + 60));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationValue?);
  v2._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return *(void *)((char *)&v5 + 1);
}

void SharingDirectInvocationIntent.init(from:)(char a1@<W0>, unsigned char *a2@<X8>)
{
  *a2 = 3;
  unsigned int v4 = (int *)type metadata accessor for SharingDirectInvocationIntent();
  long long v5 = &a2[v4[5]];
  uint64_t v6 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  a2[v4[6]] = 0;
  BOOL v7 = &a2[v4[7]];
  *BOOL v7 = 0;
  v7[1] = 0;
  int v8 = &a2[v4[8]];
  *int v8 = 0;
  v8[1] = 0;
  uint64_t v9 = &a2[v4[9]];
  *uint64_t v9 = 0;
  v9[1] = 0;
  uint64_t v10 = &a2[v4[10]];
  *uint64_t v10 = 0;
  v10[1] = 0;
  a2[v4[11]] = 0;
  a2[v4[12]] = 0;
  a2[v4[13]] = 0;
  *(void *)&a2[v4[14]] = 0;
  type metadata accessor for ShareTarget();
  swift_storeEnumTagMultiPayload();
  a2[v4[17]] = 0;
  *(void *)&a2[v4[18]] = 0;
  a2[v4[19]] = 0;
  a2[v4[20]] = 0;
  a2[v4[21]] = 0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.default);
  v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v21 = v15;
    *(_DWORD *)uint64_t v14 = 136315394;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v16 = static SharingDirectInvocationIntent.typeName;
    unint64_t v17 = *(void *)algn_2685B7148;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    if (a1) {
      uint64_t v18 = 0x7463656A6572;
    }
    else {
      uint64_t v18 = 0x6D7269666E6F63;
    }
    if (a1) {
      unint64_t v19 = 0xE600000000000000;
    }
    else {
      unint64_t v19 = 0xE700000000000000;
    }
    unint64_t v20 = v19;
    String.append(_:)(*(Swift::String *)&v18);
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000018, 0x800000022DDEA680, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22DD8A000, v12, v13, "%s: Initializing self from invocation: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v15, -1, -1);
    MEMORY[0x230F996F0](v14, -1, -1);
  }

  a2[v4[15]] = 2 * (a1 & 1);
}

uint64_t protocol witness for SharingIntent.verb.getter in conformance SharingDirectInvocationIntent()
{
  return *v0;
}

uint64_t protocol witness for SharingIntent.type.getter in conformance SharingDirectInvocationIntent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v2 + *(int *)(a1 + 20), a2);
}

uint64_t protocol witness for SharingIntent.type.setter in conformance SharingDirectInvocationIntent(uint64_t a1, uint64_t a2)
{
  return outlined assign with take of UsoEntity_common_AttachmentType.DefinedValues?(a1, v2 + *(int *)(a2 + 20));
}

uint64_t protocol witness for SharingIntent.containsSharingReference.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 24));
}

uint64_t protocol witness for SharingIntent.containsSharingReference.setter in conformance SharingDirectInvocationIntent(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 24)) = result;
  return result;
}

uint64_t protocol witness for SharingIntent.appName.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 28));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for SharingIntent.appName.setter in conformance SharingDirectInvocationIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3 + 28));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t protocol witness for SharingIntent.typeMatchingSpan.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 32));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for SharingIntent.typeMatchingSpan.setter in conformance SharingDirectInvocationIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3 + 32));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t protocol witness for SharingIntent.appIdentifier.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 36));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for SharingIntent.appIdentifier.setter in conformance SharingDirectInvocationIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3 + 36));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t protocol witness for SharingIntent.associatedAppIdentifier.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 40));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for SharingIntent.refersToScreen.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 44));
}

uint64_t protocol witness for SharingIntent.refersToEverything.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 48));
}

uint64_t protocol witness for SharingIntent.refersToDisplayedContent.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 52));
}

uint64_t protocol witness for SharingIntent.recipients.getter in conformance SharingDirectInvocationIntent()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for SharingIntent.confirmationValue.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 60));
}

uint64_t protocol witness for SharingIntent.shareTarget.getter in conformance SharingDirectInvocationIntent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of ShareTarget(v2 + *(int *)(a1 + 64), a2);
}

uint64_t protocol witness for SharingIntent.isSharePlayRequest.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 68));
}

uint64_t protocol witness for SharingIntent.usoEntity.getter in conformance SharingDirectInvocationIntent()
{
  return swift_retain();
}

uint64_t protocol witness for SharingIntent.isExplicitShareViaMessagesIntent.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 76));
}

uint64_t protocol witness for SharingIntent.isExplicitShareInCallIntent.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 80));
}

uint64_t protocol witness for SharingIntent.isReformed.getter in conformance SharingDirectInvocationIntent(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 84));
}

uint64_t protocol witness for SharingIntent.isReformed.setter in conformance SharingDirectInvocationIntent(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 84)) = result;
  return result;
}

uint64_t type metadata accessor for SharingDirectInvocationIntent()
{
  uint64_t result = type metadata singleton initialization cache for SharingDirectInvocationIntent;
  if (!type metadata singleton initialization cache for SharingDirectInvocationIntent) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

void *initializeBufferWithCopyOfBuffer for SharingDirectInvocationIntent(unsigned char *a1, void *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    uint64_t v7 = a3[5];
    int v8 = &a1[v7];
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v42 = v11;
    uint64_t v43 = v10;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v14 = a3[7];
    *((unsigned char *)v4 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    uint64_t v15 = (void *)((char *)v4 + v14);
    uint64_t v16 = (void *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = a3[8];
    uint64_t v19 = a3[9];
    unint64_t v20 = (void *)((char *)v4 + v18);
    uint64_t v21 = (void *)((char *)a2 + v18);
    uint64_t v22 = v21[1];
    *unint64_t v20 = *v21;
    v20[1] = v22;
    v23 = (void *)((char *)v4 + v19);
    v24 = (void *)((char *)a2 + v19);
    uint64_t v25 = v24[1];
    void *v23 = *v24;
    v23[1] = v25;
    uint64_t v26 = a3[10];
    uint64_t v27 = a3[11];
    v28 = (void *)((char *)v4 + v26);
    v29 = (void *)((char *)a2 + v26);
    uint64_t v30 = v29[1];
    void *v28 = *v29;
    v28[1] = v30;
    *((unsigned char *)v4 + v27) = *((unsigned char *)a2 + v27);
    uint64_t v31 = a3[13];
    *((unsigned char *)v4 + a3[12]) = *((unsigned char *)a2 + a3[12]);
    *((unsigned char *)v4 + v31) = *((unsigned char *)a2 + v31);
    uint64_t v32 = a3[15];
    *(void *)((char *)v4 + a3[14]) = *(void *)((char *)a2 + a3[14]);
    *((unsigned char *)v4 + v32) = *((unsigned char *)a2 + v32);
    uint64_t v33 = a3[16];
    __dst = (char *)v4 + v33;
    v34 = (char *)a2 + v33;
    uint64_t v35 = type metadata accessor for ShareTarget();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(void *)__dst = *(void *)v34;
        swift_retain();
        uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues));
        (*(void (**)(char *, char *, uint64_t))(v42 + 16))(&__dst[*(int *)(v36 + 48)], &v34[*(int *)(v36 + 48)], v43);
        goto LABEL_11;
      case 1u:
      case 2u:
        uint64_t v37 = *((void *)v34 + 1);
        *(void *)__dst = *(void *)v34;
        *((void *)__dst + 1) = v37;
        swift_bridgeObjectRetain();
        goto LABEL_11;
      case 3u:
        uint64_t v38 = *((void *)v34 + 1);
        *(void *)__dst = *(void *)v34;
        *((void *)__dst + 1) = v38;
        __dst[16] = v34[16];
        swift_bridgeObjectRetain();
LABEL_11:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(__dst, v34, *(void *)(*(void *)(v35 - 8) + 64));
        break;
    }
    uint64_t v39 = a3[18];
    *((unsigned char *)v4 + a3[17]) = *((unsigned char *)a2 + a3[17]);
    *(void *)((char *)v4 + v39) = *(void *)((char *)a2 + v39);
    uint64_t v40 = a3[20];
    *((unsigned char *)v4 + a3[19]) = *((unsigned char *)a2 + a3[19]);
    *((unsigned char *)v4 + v40) = *((unsigned char *)a2 + v40);
    *((unsigned char *)v4 + a3[21]) = *((unsigned char *)a2 + a3[21]);
  }
  swift_retain();
  return v4;
}

uint64_t destroy for SharingDirectInvocationIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 64);
  type metadata accessor for ShareTarget();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_release();
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues));
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7 + *(int *)(v8 + 48), v5);
      break;
    case 1u:
    case 2u:
    case 3u:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  return swift_release();
}

unsigned char *initializeWithCopy for SharingDirectInvocationIntent(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v40 = v10;
  uint64_t v41 = v9;
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = a3[8];
  uint64_t v17 = a3[9];
  uint64_t v18 = &a1[v16];
  uint64_t v19 = &a2[v16];
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = &a1[v17];
  uint64_t v22 = &a2[v17];
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  uint64_t v24 = a3[10];
  uint64_t v25 = a3[11];
  uint64_t v26 = &a1[v24];
  uint64_t v27 = &a2[v24];
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  a1[v25] = a2[v25];
  uint64_t v29 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  a1[v29] = a2[v29];
  uint64_t v30 = a3[15];
  *(void *)&a1[a3[14]] = *(void *)&a2[a3[14]];
  a1[v30] = a2[v30];
  uint64_t v31 = a3[16];
  __dst = &a1[v31];
  uint64_t v32 = &a2[v31];
  uint64_t v33 = type metadata accessor for ShareTarget();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      *(void *)__dst = *(void *)v32;
      swift_retain();
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues));
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(&__dst[*(int *)(v34 + 48)], &v32[*(int *)(v34 + 48)], v41);
      goto LABEL_9;
    case 1u:
    case 2u:
      uint64_t v35 = *((void *)v32 + 1);
      *(void *)__dst = *(void *)v32;
      *((void *)__dst + 1) = v35;
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 3u:
      uint64_t v36 = *((void *)v32 + 1);
      *(void *)__dst = *(void *)v32;
      *((void *)__dst + 1) = v36;
      __dst[16] = v32[16];
      swift_bridgeObjectRetain();
LABEL_9:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(__dst, v32, *(void *)(*(void *)(v33 - 8) + 64));
      break;
  }
  uint64_t v37 = a3[18];
  a1[a3[17]] = a2[a3[17]];
  *(void *)&a1[v37] = *(void *)&a2[v37];
  uint64_t v38 = a3[20];
  a1[a3[19]] = a2[a3[19]];
  a1[v38] = a2[v38];
  a1[a3[21]] = a2[a3[21]];
  swift_retain();
  return a1;
}

unsigned char *assignWithCopy for SharingDirectInvocationIntent(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  a1[a3[6]] = a2[a3[6]];
  uint64_t v15 = a3[7];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[9];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  *uint64_t v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[10];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[11]] = a2[a3[11]];
  a1[a3[12]] = a2[a3[12]];
  a1[a3[13]] = a2[a3[13]];
  *(void *)&a1[a3[14]] = *(void *)&a2[a3[14]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[15]] = a2[a3[15]];
  if (a1 != a2)
  {
    uint64_t v27 = a3[16];
    uint64_t v28 = &a1[v27];
    uint64_t v29 = &a2[v27];
    outlined destroy of ShareTarget((uint64_t)&a1[v27]);
    uint64_t v30 = type metadata accessor for ShareTarget();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(void *)uint64_t v28 = *(void *)v29;
        swift_retain();
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues));
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v28[*(int *)(v31 + 48)], &v29[*(int *)(v31 + 48)], v9);
        goto LABEL_14;
      case 1u:
      case 2u:
        *(void *)uint64_t v28 = *(void *)v29;
        *((void *)v28 + 1) = *((void *)v29 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_14;
      case 3u:
        *(void *)uint64_t v28 = *(void *)v29;
        *((void *)v28 + 1) = *((void *)v29 + 1);
        v28[16] = v29[16];
        swift_bridgeObjectRetain();
LABEL_14:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
        break;
    }
  }
  a1[a3[17]] = a2[a3[17]];
  *(void *)&a1[a3[18]] = *(void *)&a2[a3[18]];
  swift_retain();
  swift_release();
  a1[a3[19]] = a2[a3[19]];
  a1[a3[20]] = a2[a3[20]];
  a1[a3[21]] = a2[a3[21]];
  return a1;
}

uint64_t outlined destroy of ShareTarget(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ShareTarget();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *initializeWithTake for SharingDirectInvocationIntent(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  *(_OWORD *)&a1[v12] = *(_OWORD *)&a2[v12];
  uint64_t v13 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_OWORD *)&a1[v13] = *(_OWORD *)&a2[v13];
  uint64_t v14 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  a1[v14] = a2[v14];
  uint64_t v15 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  a1[v15] = a2[v15];
  uint64_t v16 = a3[15];
  *(void *)&a1[a3[14]] = *(void *)&a2[a3[14]];
  a1[v16] = a2[v16];
  uint64_t v17 = a3[16];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v20 = type metadata accessor for ShareTarget();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    *uint64_t v18 = *v19;
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues));
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v18 + *(int *)(v21 + 48), (char *)v19 + *(int *)(v21 + 48), v9);
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v22 = a3[18];
  a1[a3[17]] = a2[a3[17]];
  *(void *)&a1[v22] = *(void *)&a2[v22];
  uint64_t v23 = a3[20];
  a1[a3[19]] = a2[a3[19]];
  a1[v23] = a2[v23];
  a1[a3[21]] = a2[a3[21]];
  return a1;
}

unsigned char *assignWithTake for SharingDirectInvocationIntent(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = (uint64_t *)&a2[v15];
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[8];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = (uint64_t *)&a2[v20];
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[9];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = (uint64_t *)&a2[v25];
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  *uint64_t v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[10];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = (uint64_t *)&a2[v30];
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  a1[v35] = a2[v35];
  uint64_t v36 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  *(void *)&a1[v36] = *(void *)&a2[v36];
  swift_bridgeObjectRelease();
  a1[a3[15]] = a2[a3[15]];
  if (a1 != a2)
  {
    uint64_t v37 = a3[16];
    uint64_t v38 = &a1[v37];
    uint64_t v39 = &a2[v37];
    outlined destroy of ShareTarget((uint64_t)&a1[v37]);
    uint64_t v40 = type metadata accessor for ShareTarget();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      *uint64_t v38 = *v39;
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues));
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v38 + *(int *)(v41 + 48), (char *)v39 + *(int *)(v41 + 48), v9);
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v42 = a3[18];
  a1[a3[17]] = a2[a3[17]];
  *(void *)&a1[v42] = *(void *)&a2[v42];
  swift_release();
  uint64_t v43 = a3[20];
  a1[a3[19]] = a2[a3[19]];
  a1[v43] = a2[v43];
  a1[a3[21]] = a2[a3[21]];
  return a1;
}

uint64_t getEnumTagSinglePayload for SharingDirectInvocationIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22DD9038C);
}

uint64_t sub_22DD9038C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + a3[5];
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else if (a2 == 2147483646)
  {
    unint64_t v12 = *(void *)(a1 + a3[7] + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
  else
  {
    uint64_t v14 = type metadata accessor for ShareTarget();
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + a3[16];
    return v15(v17, a2, v16);
  }
}

uint64_t storeEnumTagSinglePayload for SharingDirectInvocationIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22DD904E4);
}

uint64_t sub_22DD904E4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + a4[5];
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[7] + 8) = a2;
  }
  else
  {
    uint64_t v13 = type metadata accessor for ShareTarget();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + a4[16];
    return v14(v16, a2, a2, v15);
  }
  return result;
}

void type metadata completion function for SharingDirectInvocationIntent()
{
  type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ShareTarget();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues?()
{
  if (!lazy cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?)
  {
    type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
    }
  }
}

unint64_t instantiation function for generic protocol witness table for SharingDirectInvocationIntent(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SharingDirectInvocationIntent and conformance SharingDirectInvocationIntent();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type SharingDirectInvocationIntent and conformance SharingDirectInvocationIntent()
{
  unint64_t result = lazy protocol witness table cache variable for type SharingDirectInvocationIntent and conformance SharingDirectInvocationIntent;
  if (!lazy protocol witness table cache variable for type SharingDirectInvocationIntent and conformance SharingDirectInvocationIntent)
  {
    type metadata accessor for SharingDirectInvocationIntent();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingDirectInvocationIntent and conformance SharingDirectInvocationIntent);
  }
  return result;
}

uint64_t outlined init with copy of ShareTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShareTarget();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of UsoEntity_common_AttachmentType.DefinedValues?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.responseValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.responseValue.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.responseValue.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.promptResponse.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.userCancelledResponse.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.responseExecutor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.getActionForInput(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.actionForIntent(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.parseResponse(input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 80) + **(int **)(a4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = dispatch thunk of SharingPromptFlowStrategy.parseResponse(input:);
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.makePrompt()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 88) + **(int **)(a3 + 88));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.makePrompt()()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t dispatch thunk of SharingPromptFlowStrategy.makeUserCancelledResponse()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 96) + **(int **)(a3 + 96));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = dispatch thunk of SharingPromptFlowStrategy.parseResponse(input:);
  return v9(a1, a2, a3);
}

uint64_t SharingPromptFlowStrategy.getActionForInput(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v7 = type metadata accessor for Parse();
  uint64_t v44 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Input();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.default);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v43 = a1;
  v16(v13, a1, v10);
  uint64_t v42 = v15;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v39 = a3;
    uint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v40 = a4;
    uint64_t v22 = v21;
    v47[0] = v21;
    uint64_t v38 = v7;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v37 = v20 + 4;
    lazy protocol witness table accessor for type Input and conformance Input();
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v47);
    uint64_t v7 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    _os_log_impl(&dword_22DD8A000, v17, v18, "SharingPromptFlowStrategy: actionForInput received input: %s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v22, -1, -1);
    uint64_t v25 = v20;
    a3 = v39;
    MEMORY[0x230F996F0](v25, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  Input.parse.getter();
  double v26 = static SharingIntentHelper.makeSharingIntentFrom(parse:)((uint64_t)v9, (uint64_t *)&v45);
  (*(void (**)(char *, uint64_t, double))(v44 + 8))(v9, v7, v26);
  if (v46)
  {
    outlined init with take of SharingIntent(&v45, (uint64_t)v47);
    uint64_t v27 = v48;
    uint64_t v28 = v49;
    __swift_project_boxed_opaque_existential_1(v47, v48);
    switch((*(unsigned __int8 (**)(uint64_t, uint64_t))(v28 + 184))(v27, v28))
    {
      case 2u:
        swift_bridgeObjectRelease();
        goto LABEL_14;
      case 3u:
        goto LABEL_9;
      default:
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v29)
        {
LABEL_14:
          uint64_t v34 = Logger.logObject.getter();
          os_log_type_t v35 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v34, v35))
          {
            uint64_t v36 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v36 = 0;
            _os_log_impl(&dword_22DD8A000, v34, v35, "SharingPromptFlowStrategy: Found cancel confirmation value -> cancelling request", v36, 2u);
            MEMORY[0x230F996F0](v36, -1, -1);
          }

          static ActionForInput.cancel()();
        }
        else
        {
LABEL_9:
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(a3 + 72))(v47, v41, a3);
        }
        uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
        break;
    }
  }
  else
  {
    outlined destroy of SharingResponse?((uint64_t)&v45, &demangling cache variable for type metadata for SharingIntent?);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl(&dword_22DD8A000, v30, v31, "SharingPromptFlowStrategy: Unable to create SharingIntent from parse; ignoring input.",
        v32,
        2u);
      MEMORY[0x230F996F0](v32, -1, -1);
    }

    return static ActionForInput.ignore()();
  }
  return result;
}

uint64_t SharingPromptFlowStrategy.makePrompt()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[14] = a3;
  v4[15] = v3;
  v4[12] = a1;
  v4[13] = a2;
  return MEMORY[0x270FA2498](SharingPromptFlowStrategy.makePrompt(), 0, 0);
}

uint64_t SharingPromptFlowStrategy.makePrompt()()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[13];
  (*(void (**)(uint64_t, uint64_t))(v1 + 56))(v2, v1);
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[16] = v3;
  *uint64_t v3 = v0;
  v3[1] = SharingPromptFlowStrategy.makePrompt();
  uint64_t v4 = v0[12];
  return ResponseExecutor.execute(response:)(v4, (uint64_t)(v0 + 7));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)v1 + 56;
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v2);
  if (v0) {
    uint64_t v3 = SharingPromptFlowStrategy.makePrompt();
  }
  else {
    uint64_t v3 = SharingPromptFlowStrategy.makePrompt();
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t SharingPromptFlowStrategy.makeUserCancelledResponse()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[19] = a3;
  v4[20] = v3;
  v4[17] = a1;
  v4[18] = a2;
  return MEMORY[0x270FA2498](SharingPromptFlowStrategy.makeUserCancelledResponse(), 0, 0);
}

uint64_t SharingPromptFlowStrategy.makeUserCancelledResponse()()
{
  (*(void (**)(void))(*(void *)(v0 + 152) + 48))(*(void *)(v0 + 144));
  if (*(void *)(v0 + 80))
  {
    uint64_t v1 = *(void *)(v0 + 152);
    uint64_t v2 = *(void *)(v0 + 144);
    outlined init with take of SharingIntent((long long *)(v0 + 56), v0 + 16);
    (*(void (**)(uint64_t, uint64_t))(v1 + 56))(v2, v1);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), *(void *)(v0 + 120));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v3;
    *uint64_t v3 = v0;
    v3[1] = SharingPromptFlowStrategy.makeUserCancelledResponse();
    uint64_t v4 = *(void *)(v0 + 136);
    return ResponseExecutor.execute(response:)(v4, v0 + 16);
  }
  else
  {
    outlined destroy of SharingResponse?(v0 + 56, &demangling cache variable for type metadata for SharingResponse?);
    type metadata accessor for EmptyOutput();
    static EmptyOutput.instance.getter();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = SharingPromptFlowStrategy.makeUserCancelledResponse();
  }
  else {
    uint64_t v2 = SharingPromptFlowStrategy.makeUserCancelledResponse();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t protocol witness for SharingPromptFlowStrategy.makePrompt() in conformance SimpleSharingYesNoPromptFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of SharingPromptFlowStrategy.parseResponse(input:);
  v8[14] = a3;
  v8[15] = v3;
  v8[12] = a1;
  v8[13] = a2;
  return MEMORY[0x270FA2498](SharingPromptFlowStrategy.makePrompt(), 0, 0);
}

uint64_t protocol witness for SharingPromptFlowStrategy.makeUserCancelledResponse() in conformance SimpleSharingYesNoPromptFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of SharingPromptFlowStrategy.parseResponse(input:);
  v8[19] = a3;
  v8[20] = v3;
  v8[17] = a1;
  v8[18] = a2;
  return MEMORY[0x270FA2498](SharingPromptFlowStrategy.makeUserCancelledResponse(), 0, 0);
}

uint64_t protocol witness for SharingPromptFlowStrategy.makePrompt() in conformance NeedsShareTargetFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  v8[14] = a3;
  v8[15] = v3;
  v8[12] = a1;
  v8[13] = a2;
  return MEMORY[0x270FA2498](SharingPromptFlowStrategy.makePrompt(), 0, 0);
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t outlined destroy of SharingResponse?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of SharingIntent(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

unint64_t lazy protocol witness table accessor for type Input and conformance Input()
{
  unint64_t result = lazy protocol witness table cache variable for type Input and conformance Input;
  if (!lazy protocol witness table cache variable for type Input and conformance Input)
  {
    type metadata accessor for Input();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input);
  }
  return result;
}

unint64_t TUCallStatus.description.getter(int a1)
{
  unint64_t result = 1701602409;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      unint64_t result = 0x657669746361;
      break;
    case 2:
      unint64_t result = 0x646C6F682D6E6FLL;
      break;
    case 3:
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
    case 6:
      unint64_t result = 0x656E6E6F63736964;
      break;
    default:
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      v4._countAndFlagsBits = 41;
      v4._object = (void *)0xE100000000000000;
      String.append(_:)(v4);
      unint64_t result = 0xD000000000000013;
      break;
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance TUCallStatus()
{
  return TUCallStatus.description.getter(*v0);
}

uint64_t type metadata instantiation function for PromptForValueFlowWrapper()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t type metadata completion function for PromptForValueFlowWrapper()
{
  return swift_initClassMetadata2();
}

uint64_t PromptForValueFlowWrapper.exitValue.getter()
{
  return PromptForValueFlowAsync.exitValue.getter();
}

uint64_t PromptForValueFlowWrapper.on(input:)()
{
  return PromptForValueFlowAsync.on(input:)() & 1;
}

uint64_t PromptForValueFlowWrapper.execute()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x270FA2498](PromptForValueFlowWrapper.execute(), 0, 0);
}

uint64_t PromptForValueFlowWrapper.execute()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = PromptForValueFlowWrapper.execute();
  uint64_t v2 = *(void *)(v0 + 16);
  return MEMORY[0x270F66470](v2);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  Swift::String v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t PromptForValueFlowWrapper.deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t PromptForValueFlowWrapper.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0228](v0, 32, 7);
}

uint64_t type metadata accessor for PromptForValueFlowWrapper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for Flow.on(input:) in conformance PromptForValueFlowWrapper<A>()
{
  return PromptForValueFlowWrapper.on(input:)() & 1;
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance PromptForValueFlowWrapper<A1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Flow.onAsync(input:) in conformance PromptForValueFlowWrapper<A1>;
  return MEMORY[0x270F66CE0](a1, a2, a3);
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance PromptForValueFlowWrapper<A1>(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t protocol witness for Flow.execute() in conformance PromptForValueFlowWrapper<A>(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[2] = a1;
  v5[3] = v4;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return MEMORY[0x270FA2498](PromptForValueFlowWrapper.execute(), 0, 0);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance PromptForValueFlowWrapper<A>()
{
  return PromptForValueFlowWrapper.exitValue.getter();
}

uint64_t protocol witness for Flow.flexibleExecutionSupport.getter in conformance PromptForValueFlowWrapper<A1>()
{
  return MEMORY[0x270F66CC8]();
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t dispatch thunk of ShareTargetResolving.resolveShareTargetForStartSharing(target:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + **(int **)(a3 + 8));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = dispatch thunk of ShareTargetResolving.resolveShareTargetForStartSharing(target:);
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of ShareTargetResolving.resolveShareTargetForStartSharing(target:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v9 = *v3;
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, void))(v9 + 8);
  return v7(a1, a2, a3 & 0x1FFFF);
}

uint64_t dispatch thunk of ShareTargetResolving.resolveShareTargetForStopSharing(target:call:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 16) + **(int **)(a4 + 16));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = dispatch thunk of ShareTargetResolving.resolveShareTargetForStopSharing(target:call:);
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of ShareTargetResolving.resolveShareTargetForStopSharing(target:call:)(__int16 a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3(a1 & 0x1FF);
}

uint64_t Flow.execute(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v5, a3);
  unint64_t v16 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v17 = (char *)swift_allocObject();
  *((void *)v17 + 2) = 0;
  *((void *)v17 + 3) = 0;
  *((void *)v17 + 4) = a3;
  *((void *)v17 + 5) = a4;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v17[v16], (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  os_log_type_t v18 = &v17[(v11 + v16 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(void *)os_log_type_t v18 = a1;
  *((void *)v18 + 1) = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in Flow.execute(completion:), (uint64_t)v17);
  return swift_release();
}

uint64_t closure #1 in Flow.execute(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[2] = a5;
  v8[3] = a6;
  uint64_t v11 = type metadata accessor for ExecuteResponse();
  v8[4] = v11;
  v8[5] = *(void *)(v11 - 8);
  uint64_t v12 = swift_task_alloc();
  v8[6] = v12;
  uint64_t v13 = (void *)swift_task_alloc();
  v8[7] = v13;
  *uint64_t v13 = v8;
  v13[1] = closure #1 in Flow.execute(completion:);
  return MEMORY[0x270F66C98](v12, a7, a8);
}

uint64_t closure #1 in Flow.execute(completion:)()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in Flow.execute(completion:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 32);
  (*(void (**)(uint64_t))(v0 + 16))(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_22DD92D2C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in Flow.execute(completion:)(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = (uint64_t)v1 + v6;
  uint64_t v10 = (void *)((char *)v1 + ((*(void *)(*(void *)(v4 - 8) + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return closure #1 in Flow.execute(completion:)(a1, v7, v8, v9, v11, v12, v4, v5);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_22DD93320()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t dispatch thunk of Sharing.startSharing(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of Sharing.stopSharing(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance DefinitiveShareTarget()
{
  return 0xD00000000000001CLL;
}

unsigned char *storeEnumTagSinglePayload for DefinitiveShareTarget(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22DD934F0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DefinitiveShareTarget()
{
  return &type metadata for DefinitiveShareTarget;
}

unint64_t lazy protocol witness table accessor for type DefinitiveShareTarget and conformance DefinitiveShareTarget()
{
  unint64_t result = lazy protocol witness table cache variable for type DefinitiveShareTarget and conformance DefinitiveShareTarget;
  if (!lazy protocol witness table cache variable for type DefinitiveShareTarget and conformance DefinitiveShareTarget)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefinitiveShareTarget and conformance DefinitiveShareTarget);
  }
  return result;
}

unint64_t Encodable.asDictionary()()
{
  v12[4] = *(id *)MEMORY[0x263EF8340];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v0 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v2 = v1;
  swift_release();
  int v3 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v12[0] = 0;
  id v5 = objc_msgSend(v3, sel_JSONObjectWithData_options_error_, isa, 0, v12);

  if (!v5)
  {
    id v8 = v12[0];
    uint64_t v9 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_5;
  }
  id v6 = v12[0];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    outlined consume of Data._Representation(v0, v2);
    return v7;
  }
  outlined consume of Data._Representation(v0, v2);
  return v11;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t ExpanseFlowProvider.init()@<X0>(void *a1@<X8>)
{
  uint64_t v23 = &type metadata for ScreenSharingCallManager;
  unint64_t v24 = &protocol witness table for ScreenSharingCallManager;
  unint64_t v2 = (void *)swift_allocObject();
  *(void *)&long long v22 = v2;
  id v3 = objc_msgSend(self, sel_sharedInstance);
  v2[5] = type metadata accessor for TUCallCenter();
  v2[6] = &protocol witness table for TUCallCenter;
  v2[2] = v3;
  uint64_t v4 = type metadata accessor for DialogExecutor();
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = type metadata accessor for ResponseFactory();
  swift_allocObject();
  uint64_t v7 = ResponseFactory.init()();
  uint64_t v20 = v6;
  uint64_t v21 = MEMORY[0x263F6FB30];
  *(void *)&long long v19 = v7;
  static Device.current.getter();
  type metadata accessor for CATGlobals();
  uint64_t v8 = CATGlobals.__allocating_init()();
  v17[3] = v4;
  v17[4] = &protocol witness table for DialogExecutor;
  v17[0] = v5;
  uint64_t v9 = type metadata accessor for ResponseExecutor();
  uint64_t v10 = (void *)swift_allocObject();
  uint64_t v11 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v17, v4);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (void *)((char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  uint64_t v15 = *v13;
  v10[5] = v4;
  v10[6] = &protocol witness table for DialogExecutor;
  v10[2] = v15;
  outlined init with take of SharingIntent(&v19, (uint64_t)(v10 + 7));
  outlined init with take of SharingIntent(&v18, (uint64_t)(v10 + 12));
  v10[17] = v8;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  a1[8] = v9;
  a1[9] = &protocol witness table for ResponseExecutor;
  a1[5] = v10;
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  return outlined init with take of SharingIntent(&v22, (uint64_t)a1);
}

uint64_t sub_22DD93A58()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return MEMORY[0x270FA0238](v0, 56, 7);
}

unint64_t type metadata accessor for TUCallCenter()
{
  unint64_t result = lazy cache variable for type metadata for TUCallCenter;
  if (!lazy cache variable for type metadata for TUCallCenter)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUCallCenter);
  }
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t ExpanseFlowProvider.findFlowFor(parse:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)static Logger.default);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v89 = v5;
    v90 = v2;
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    v103[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v10 = static ExpanseFlowProvider.typeName;
    unint64_t v11 = unk_2685B72E0;
    swift_bridgeObjectRetain();
    *(void *)&long long v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22DD8A000, v6, v7, "%s: Making flow from parse", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v9, -1, -1);
    MEMORY[0x230F996F0](v8, -1, -1);

    uint64_t v5 = v89;
    uint64_t v2 = v90;
  }
  else
  {
  }
  static SharingIntentHelper.makeSharingIntentFrom(parse:)(a1, (uint64_t *)&v100);
  if (v101)
  {
    outlined init with take of SharingIntent(&v100, (uint64_t)v103);
    uint64_t v12 = v104;
    uint64_t v13 = v105;
    __swift_project_boxed_opaque_existential_1(v103, v104);
    char v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
    switch(v14)
    {
      case 2:
        swift_bridgeObjectRelease();
        goto LABEL_28;
      case 3:
        v47 = Logger.logObject.getter();
        os_log_type_t v55 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v47, v55)) {
          goto LABEL_37;
        }
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        uint64_t v50 = swift_slowAlloc();
        *(void *)&long long v100 = v50;
        *(_DWORD *)uint64_t v49 = 136315138;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v56 = static ExpanseFlowProvider.typeName;
        unint64_t v57 = unk_2685B72E0;
        swift_bridgeObjectRetain();
        *(void *)&long long v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, (uint64_t *)&v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_type_t v53 = v55;
        v54 = "%s: The provided intent doesn't appear to actually be a sharing intent, as it has no sharingVerb - is this a SiriKit bug?";
        goto LABEL_36;
      default:
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v15)
        {
LABEL_28:
          v47 = Logger.logObject.getter();
          os_log_type_t v48 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v47, v48))
          {
            uint64_t v49 = (uint8_t *)swift_slowAlloc();
            uint64_t v50 = swift_slowAlloc();
            *(void *)&long long v100 = v50;
            *(_DWORD *)uint64_t v49 = 136315138;
            if (one-time initialization token for typeName != -1) {
              swift_once();
            }
            uint64_t v51 = static ExpanseFlowProvider.typeName;
            unint64_t v52 = unk_2685B72E0;
            swift_bridgeObjectRetain();
            *(void *)&long long v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, (uint64_t *)&v100);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            os_log_type_t v53 = v48;
            v54 = "%s: findFlowFor(parse:) called with parse with send verb, but only share and unshare verbs are supported";
LABEL_36:
            _os_log_impl(&dword_22DD8A000, v47, v53, v54, v49, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x230F996F0](v50, -1, -1);
            MEMORY[0x230F996F0](v49, -1, -1);
          }
LABEL_37:

          static FlowSearchResult.noFlow.getter();
        }
        else
        {
          __swift_project_boxed_opaque_existential_1(v2, v2[3]);
          ScreenSharingCallManager.getSalientScreenShareSupportingCall()((uint64_t)&v98);
          if (v99)
          {
            outlined init with take of SharingIntent(&v98, (uint64_t)&v100);
            unint64_t v16 = Logger.logObject.getter();
            os_log_type_t v17 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v16, v17))
            {
              uint64_t v89 = v5;
              v90 = v2;
              long long v18 = (uint8_t *)swift_slowAlloc();
              uint64_t v19 = swift_slowAlloc();
              *(void *)&long long v98 = v19;
              *(_DWORD *)long long v18 = 136315138;
              if (one-time initialization token for typeName != -1) {
                swift_once();
              }
              uint64_t v20 = static ExpanseFlowProvider.typeName;
              unint64_t v21 = unk_2685B72E0;
              swift_bridgeObjectRetain();
              *(void *)&v97[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, (uint64_t *)&v98);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_22DD8A000, v16, v17, "%s: Found salient call that supports screen sharing", v18, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x230F996F0](v19, -1, -1);
              MEMORY[0x230F996F0](v18, -1, -1);

              uint64_t v2 = v90;
              if (v14)
              {
LABEL_16:
                char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if ((v22 & 1) == 0)
                {
                  uint64_t v23 = Logger.logObject.getter();
                  os_log_type_t v24 = static os_log_type_t.debug.getter();
                  if (os_log_type_enabled(v23, v24))
                  {
                    uint64_t v25 = (uint8_t *)swift_slowAlloc();
                    uint64_t v26 = swift_slowAlloc();
                    *(void *)&long long v98 = v26;
                    *(_DWORD *)uint64_t v25 = 136315138;
                    if (one-time initialization token for typeName != -1) {
                      swift_once();
                    }
                    uint64_t v27 = static ExpanseFlowProvider.typeName;
                    unint64_t v28 = unk_2685B72E0;
                    swift_bridgeObjectRetain();
                    *(void *)&v97[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, (uint64_t *)&v98);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease();
                    _os_log_impl(&dword_22DD8A000, v23, v24, "%s: Verb is unshare -> returning StopSharingFlow", v25, 0xCu);
                    swift_arrayDestroy();
                    MEMORY[0x230F996F0](v26, -1, -1);
                    MEMORY[0x230F996F0](v25, -1, -1);
                  }

                  outlined init with copy of ResponseExecuting((uint64_t)v103, (uint64_t)&v98);
                  outlined init with copy of ResponseExecuting((uint64_t)&v100, (uint64_t)v97);
                  outlined init with copy of ResponseExecuting((uint64_t)(v2 + 5), (uint64_t)v94);
                  outlined init with copy of ResponseExecuting((uint64_t)(v2 + 10), (uint64_t)v93);
                  v92[3] = &type metadata for ShareTargetResolver;
                  v92[4] = &protocol witness table for ShareTargetResolver;
                  v91[3] = &type metadata for Sharer;
                  v91[4] = &protocol witness table for Sharer;
                  uint64_t v29 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v94, v95);
                  MEMORY[0x270FA5388](v29);
                  os_log_type_t v31 = (uint64_t *)((char *)&v88 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
                  (*(void (**)(uint64_t *))(v32 + 16))(v31);
                  uint64_t v33 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v92, (uint64_t)&type metadata for ShareTargetResolver);
                  MEMORY[0x270FA5388](v33);
                  (*(void (**)(void))(v34 + 16))();
                  uint64_t v35 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v91, (uint64_t)&type metadata for Sharer);
                  MEMORY[0x270FA5388](v35);
                  (*(void (**)(void))(v36 + 16))();
                  uint64_t v37 = specialized StopSharingFlow.__allocating_init(intent:call:responseExecutor:outputPublisher:shareTargetResolver:sharer:)((uint64_t)&v98, (uint64_t)v97, *v31, (uint64_t)v93);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v91);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v94);
                  *(void *)&long long v98 = v37;
                  type metadata accessor for StopSharingFlow(0);
                  uint64_t v38 = (unint64_t *)&lazy protocol witness table cache variable for type StopSharingFlow and conformance SharingFlow<A>;
                  uint64_t v39 = (void (*)(uint64_t))type metadata accessor for StopSharingFlow;
LABEL_51:
                  lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(v38, v39);
                  Flow.eraseToAnyFlow()();
                  swift_release();
                  static FlowSearchResult.flow(_:)();
                  swift_release();
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
                  goto LABEL_38;
                }
LABEL_46:
                v76 = Logger.logObject.getter();
                os_log_type_t v77 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v76, v77))
                {
                  v78 = (uint8_t *)swift_slowAlloc();
                  uint64_t v79 = swift_slowAlloc();
                  *(void *)&long long v98 = v79;
                  *(_DWORD *)v78 = 136315138;
                  if (one-time initialization token for typeName != -1) {
                    swift_once();
                  }
                  uint64_t v80 = static ExpanseFlowProvider.typeName;
                  unint64_t v81 = unk_2685B72E0;
                  swift_bridgeObjectRetain();
                  *(void *)&v97[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, (uint64_t *)&v98);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  _os_log_impl(&dword_22DD8A000, v76, v77, "%s: Verb is share -> returning StartSharingFlow", v78, 0xCu);
                  swift_arrayDestroy();
                  MEMORY[0x230F996F0](v79, -1, -1);
                  MEMORY[0x230F996F0](v78, -1, -1);
                }

                outlined init with copy of ResponseExecuting((uint64_t)v103, (uint64_t)&v98);
                outlined init with copy of ResponseExecuting((uint64_t)&v100, (uint64_t)v97);
                outlined init with copy of ResponseExecuting((uint64_t)(v2 + 5), (uint64_t)v94);
                outlined init with copy of ResponseExecuting((uint64_t)(v2 + 10), (uint64_t)v93);
                type metadata accessor for SharePlayHelper();
                uint64_t v82 = swift_allocObject();
                uint64_t v83 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v94, v95);
                MEMORY[0x270FA5388](v83);
                v85 = (uint64_t *)((char *)&v88 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0));
                (*(void (**)(uint64_t *))(v86 + 16))(v85);
                v87 = specialized StartSharingFlow.__allocating_init(intent:call:responseExecutor:outputPublisher:shareTargetResolver:sharer:sharePlayHelper:)((uint64_t)&v98, (uint64_t)v97, *v85, (uint64_t)v93, v82);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v94);
                *(void *)&long long v98 = v87;
                type metadata accessor for StartSharingFlow(0);
                uint64_t v38 = (unint64_t *)&lazy protocol witness table cache variable for type StartSharingFlow and conformance SharingFlow<A>;
                uint64_t v39 = (void (*)(uint64_t))type metadata accessor for StartSharingFlow;
                goto LABEL_51;
              }
            }
            else
            {

              if (v14) {
                goto LABEL_16;
              }
            }
            swift_bridgeObjectRelease();
            goto LABEL_46;
          }
          outlined destroy of SharingResponse?((uint64_t)&v98, &demangling cache variable for type metadata for Call?);
          v58 = Logger.logObject.getter();
          os_log_type_t v59 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v58, v59))
          {
            v60 = (uint8_t *)swift_slowAlloc();
            uint64_t v61 = swift_slowAlloc();
            *(void *)&long long v100 = v61;
            *(_DWORD *)v60 = 136315138;
            if (one-time initialization token for typeName != -1) {
              swift_once();
            }
            uint64_t v62 = static ExpanseFlowProvider.typeName;
            unint64_t v63 = unk_2685B72E0;
            swift_bridgeObjectRetain();
            *(void *)&long long v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, (uint64_t *)&v100);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_22DD8A000, v58, v59, "%s: No salient call that supports screen sharing found -> returning flow to output not-in-call error dialog", v60, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x230F996F0](v61, -1, -1);
            MEMORY[0x230F996F0](v60, -1, -1);
          }

          uint64_t v101 = type metadata accessor for Responses.Common.NotInCall(0);
          v102 = &protocol witness table for Responses.Common.NotInCall;
          *(unsigned char *)__swift_allocate_boxed_opaque_existential_1((uint64_t *)&v100) = -107;
          static DialogPhase.completion.getter();
          outlined init with copy of ResponseExecuting((uint64_t)(v2 + 5), (uint64_t)&v98);
          outlined init with copy of ResponseExecuting((uint64_t)(v2 + 10), (uint64_t)v97);
          uint64_t v64 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v98, v99);
          MEMORY[0x270FA5388](v64);
          v66 = (uint64_t *)((char *)&v88 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0));
          (*(void (**)(uint64_t *))(v67 + 16))(v66);
          uint64_t v68 = *v66;
          uint64_t v69 = type metadata accessor for ResponseExecutor();
          uint64_t v95 = v69;
          v96 = &protocol witness table for ResponseExecutor;
          v94[0] = v68;
          type metadata accessor for OutputDialogFlow();
          uint64_t v70 = swift_allocObject();
          uint64_t v71 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v94, v69);
          MEMORY[0x270FA5388](v71);
          v73 = (uint64_t *)((char *)&v88 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0));
          (*(void (**)(uint64_t *))(v74 + 16))(v73);
          uint64_t v75 = *v73;
          *(void *)(v70 + 88) = v69;
          *(void *)(v70 + 96) = &protocol witness table for ResponseExecutor;
          *(void *)(v70 + 64) = v75;
          *(unsigned char *)(v70 + 16) = 0;
          outlined init with take of SharingIntent(&v100, v70 + 24);
          outlined init with take of SharingIntent(v97, v70 + 104);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v94);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v98);
          *(void *)&long long v100 = v70;
          lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow((unint64_t *)&lazy protocol witness table cache variable for type OutputDialogFlow and conformance OutputDialogFlow, (void (*)(uint64_t))type metadata accessor for OutputDialogFlow);
          Flow.eraseToAnyFlow()();
          swift_release();
          static FlowSearchResult.flow(_:)();
          swift_release();
        }
LABEL_38:
        uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v103);
        break;
    }
  }
  else
  {
    outlined destroy of SharingResponse?((uint64_t)&v100, &demangling cache variable for type metadata for SharingIntent?);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      v103[0] = v43;
      *(_DWORD *)uint64_t v42 = 136315138;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v44 = static ExpanseFlowProvider.typeName;
      unint64_t v45 = unk_2685B72E0;
      swift_bridgeObjectRetain();
      *(void *)&long long v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v40, v41, "%s: Failed to make a SharingIntent from the parse", v42, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v43, -1, -1);
      MEMORY[0x230F996F0](v42, -1, -1);
    }

    return static FlowSearchResult.noFlow.getter();
  }
  return result;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0x4D616956646E6573;
  }
  else {
    unint64_t v3 = 0xD000000000000014;
  }
  if (v2) {
    unint64_t v4 = 0x800000022DDEA630;
  }
  else {
    unint64_t v4 = 0xEF73656761737365;
  }
  if (a2) {
    unint64_t v5 = 0x4D616956646E6573;
  }
  else {
    unint64_t v5 = 0xD000000000000014;
  }
  if (a2) {
    unint64_t v6 = 0xEF73656761737365;
  }
  else {
    unint64_t v6 = 0x800000022DDEA630;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000012;
  }
  else {
    unint64_t v3 = 0xD00000000000001FLL;
  }
  if (v2) {
    unint64_t v4 = 0x800000022DDEA1D0;
  }
  else {
    unint64_t v4 = 0x800000022DDEA1F0;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000012;
  }
  else {
    unint64_t v5 = 0xD00000000000001FLL;
  }
  if (a2) {
    unint64_t v6 = 0x800000022DDEA1F0;
  }
  else {
    unint64_t v6 = 0x800000022DDEA1D0;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0x7463656A6572;
  }
  else {
    unint64_t v3 = 0x6D7269666E6F63;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0xE600000000000000;
  }
  if (a2) {
    unint64_t v5 = 0x7463656A6572;
  }
  else {
    unint64_t v5 = 0x6D7269666E6F63;
  }
  if (a2) {
    unint64_t v6 = 0xE600000000000000;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  unint64_t v3 = 0xD000000000000018;
  unint64_t v4 = 0x800000022DDEA5C0;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0x6F486E4F6C6C6163;
      unint64_t v4 = 0xEA0000000000646CLL;
      break;
    case 2:
      unint64_t v4 = 0x800000022DDEA5F0;
      unint64_t v3 = 0xD000000000000010;
      break;
    case 3:
      unint64_t v3 = 0xD000000000000013;
      unint64_t v4 = 0x800000022DDEA610;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xD000000000000018;
  unint64_t v6 = 0x800000022DDEA5C0;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xEA0000000000646CLL;
      if (v3 == 0x6F486E4F6C6C6163) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0x800000022DDEA5F0;
      unint64_t v5 = 0xD000000000000010;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0x800000022DDEA610;
      if (v3 == 0xD000000000000013) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v3 != v5) {
        goto LABEL_14;
      }
LABEL_12:
      if (v4 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0x656C646E61686E75;
  }
  else {
    unint64_t v3 = 0x64656C646E6168;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0xE900000000000064;
  }
  if (a2) {
    unint64_t v5 = 0x656C646E61686E75;
  }
  else {
    unint64_t v5 = 0x64656C646E6168;
  }
  if (a2) {
    unint64_t v6 = 0xE900000000000064;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x6C65636E6143;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6C65636E6143;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x7041686372616553;
      unint64_t v3 = 0xEE0065726F745370;
      break;
    case 2:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v5 = 0x7070416572616853;
      break;
    case 3:
      uint64_t v5 = 0x7263536572616853;
      unint64_t v3 = 0xEB000000006E6565;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xEE0065726F745370;
      if (v5 == 0x7041686372616553) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0xE800000000000000;
      uint64_t v2 = 0x7070416572616853;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xEB000000006E6565;
      if (v5 == 0x7263536572616853) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 28526;
    }
    else {
      uint64_t v3 = 0x6C65636E6163;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE200000000000000;
    }
    else {
      unint64_t v4 = 0xE600000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 28526;
      }
      else {
        uint64_t v6 = 0x6C65636E6163;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE200000000000000;
      }
      else {
        unint64_t v7 = 0xE600000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v3 = 7562617;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE300000000000000;
  if (v3 != 7562617)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t specialized == infix<A>(_:_:)(char a1, unsigned __int8 a2)
{
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v2 = 1886352499;
    }
    else {
      uint64_t v2 = 1684956531;
    }
    unint64_t v3 = 0xE400000000000000;
    int v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1) {
        uint64_t v5 = 1886352499;
      }
      else {
        uint64_t v5 = 1684956531;
      }
      unint64_t v6 = 0xE400000000000000;
      if (v2 != v5) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v3 = 0xE500000000000000;
    uint64_t v2 = 0x6572616873;
    int v4 = a2;
    if (a2) {
      goto LABEL_6;
    }
  }
  unint64_t v6 = 0xE500000000000000;
  if (v2 != 0x6572616873)
  {
LABEL_15:
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_16;
  }
LABEL_13:
  if (v3 != v6) {
    goto LABEL_15;
  }
  char v7 = 1;
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t serialize(_:at:)(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned char **closure #1 in OSLogArguments.append(_:)(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4 = *result;
  *unint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  unint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void *specialized SharingFlow.init(intent:call:responseExecutor:outputPublisher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(void), uint64_t a7, uint64_t (*a8)(void), uint64_t (*a9)(uint64_t))
{
  uint64_t v15 = a6(0);
  MEMORY[0x270FA5388](v15);
  os_log_type_t v17 = (char *)&v41 - v16;
  v50[3] = type metadata accessor for ResponseExecutor();
  v50[4] = &protocol witness table for ResponseExecutor;
  v50[0] = a3;
  a5[2] = 0x46676E6972616853;
  a5[3] = 0xEB00000000776F6CLL;
  swift_storeEnumTagMultiPayload();
  outlined init with copy of ResponseExecuting(a1, (uint64_t)a5 + *(void *)(*a5 + 112));
  outlined init with copy of ResponseExecuting(a2, (uint64_t)a5 + *(void *)(*a5 + 120));
  outlined init with copy of ResponseExecuting((uint64_t)v50, (uint64_t)a5 + *(void *)(*a5 + 128));
  outlined init with copy of ResponseExecuting(a4, (uint64_t)a5 + *(void *)(*a5 + 136));
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.default);
  swift_retain_n();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v45 = a4;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    uint64_t v49 = v42;
    *(_DWORD *)uint64_t v21 = 136315650;
    uint64_t v43 = a2;
    uint64_t v44 = a1;
    uint64_t v22 = a5[2];
    unint64_t v23 = a5[3];
    swift_bridgeObjectRetain();
    uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2080;
    uint64_t v24 = (uint64_t)a5 + *(void *)(*a5 + 104);
    swift_beginAccess();
    outlined init with copy of StartSharingFlow.StartSharingFlowState(v24, (uint64_t)v17, a8);
    uint64_t v25 = swift_release();
    uint64_t v26 = a9(v25);
    unint64_t v28 = v27;
    outlined destroy of StartSharingFlow.StartSharingFlowState((uint64_t)v17, a8);
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 22) = 2080;
    uint64_t v41 = v21 + 24;
    uint64_t v29 = (void *)((char *)a5 + *(void *)(*a5 + 112));
    swift_beginAccess();
    uint64_t v30 = v29[3];
    os_log_type_t v31 = __swift_project_boxed_opaque_existential_1(v29, v30);
    uint64_t v32 = *(void *)(v30 - 8);
    MEMORY[0x270FA5388](v31);
    uint64_t v34 = (char *)&v41 - v33;
    (*(void (**)(char *))(v32 + 16))((char *)&v41 - v33);
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v37 = v36;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v30);
    uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22DD8A000, v19, v20, "%s: Initialized SharingFlow with state %s, intent %s", (uint8_t *)v21, 0x20u);
    uint64_t v38 = v42;
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v38, -1, -1);
    MEMORY[0x230F996F0](v21, -1, -1);

    __swift_destroy_boxed_opaque_existential_1(v45);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
    __swift_destroy_boxed_opaque_existential_1(v43);
    uint64_t v39 = v44;
  }
  else
  {
    swift_release_n();

    __swift_destroy_boxed_opaque_existential_1(a4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
    __swift_destroy_boxed_opaque_existential_1(a2);
    uint64_t v39 = a1;
  }
  __swift_destroy_boxed_opaque_existential_1(v39);
  return a5;
}

void *specialized StartSharingFlow.__allocating_init(intent:call:responseExecutor:outputPublisher:shareTargetResolver:sharer:sharePlayHelper:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v37 = type metadata accessor for ResponseExecutor();
  uint64_t v38 = &protocol witness table for ResponseExecutor;
  v36[0] = a3;
  uint64_t v34 = &type metadata for ShareTargetResolver;
  uint64_t v35 = &protocol witness table for ShareTargetResolver;
  os_log_type_t v31 = &type metadata for Sharer;
  uint64_t v32 = &protocol witness table for Sharer;
  uint64_t v28 = type metadata accessor for SharePlayHelper();
  uint64_t v29 = &protocol witness table for SharePlayHelper;
  v27[0] = a5;
  type metadata accessor for StartSharingFlow(0);
  uint64_t v10 = (void *)swift_allocObject();
  uint64_t v11 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v36, v37);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (void *)((char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  uint64_t v15 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v33, (uint64_t)v34);
  MEMORY[0x270FA5388](v15);
  (*(void (**)(char *))(v17 + 16))((char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v30, (uint64_t)v31);
  MEMORY[0x270FA5388](v18);
  (*(void (**)(char *))(v20 + 16))((char *)v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v27, v28);
  MEMORY[0x270FA5388](v21);
  unint64_t v23 = (void *)((char *)v27 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v24 + 16))(v23);
  uint64_t v25 = specialized StartSharingFlow.init(intent:call:responseExecutor:outputPublisher:shareTargetResolver:sharer:sharePlayHelper:)(a1, a2, *v13, a4, *v23, v10);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  return v25;
}

void *specialized StopSharingFlow.__allocating_init(intent:call:responseExecutor:outputPublisher:shareTargetResolver:sharer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = type metadata accessor for ResponseExecutor();
  uint64_t v28 = &protocol witness table for ResponseExecutor;
  v26[0] = a3;
  uint64_t v24 = &type metadata for ShareTargetResolver;
  uint64_t v25 = &protocol witness table for ShareTargetResolver;
  uint64_t v21 = &type metadata for Sharer;
  uint64_t v22 = &protocol witness table for Sharer;
  type metadata accessor for StopSharingFlow(0);
  int64_t v8 = (void *)swift_allocObject();
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v26, v27);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (uint64_t *)&v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  uint64_t v13 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v23, (uint64_t)v24);
  MEMORY[0x270FA5388](v13);
  (*(void (**)(void))(v14 + 16))();
  uint64_t v15 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v20, (uint64_t)v21);
  MEMORY[0x270FA5388](v15);
  (*(void (**)(void))(v16 + 16))();
  uint64_t v17 = specialized StopSharingFlow.init(intent:call:responseExecutor:outputPublisher:shareTargetResolver:sharer:)(a1, a2, *v11, a4, v8);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  return v17;
}

uint64_t lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for ExpanseFlowProvider(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1 + 80);
}

_OWORD *initializeWithCopy for ExpanseFlowProvider(_OWORD *a1, _OWORD *a2)
{
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  long long v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  return a1;
}

uint64_t *assignWithCopy for ExpanseFlowProvider(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    unint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *unint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy120_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for ExpanseFlowProvider(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpanseFlowProvider(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExpanseFlowProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExpanseFlowProvider()
{
  return &type metadata for ExpanseFlowProvider;
}

void *specialized StartSharingFlow.init(intent:call:responseExecutor:outputPublisher:shareTargetResolver:sharer:sharePlayHelper:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v22 = &type metadata for ShareTargetResolver;
  unint64_t v23 = &protocol witness table for ShareTargetResolver;
  uint64_t v19 = &type metadata for Sharer;
  uint64_t v20 = &protocol witness table for Sharer;
  v17[3] = type metadata accessor for SharePlayHelper();
  v17[4] = &protocol witness table for SharePlayHelper;
  v17[0] = a5;
  outlined init with copy of ResponseExecuting((uint64_t)v21, (uint64_t)a6 + direct field offset for StartSharingFlow.shareTargetResolver);
  outlined init with copy of ResponseExecuting((uint64_t)v18, (uint64_t)a6 + direct field offset for StartSharingFlow.sharer);
  outlined init with copy of ResponseExecuting((uint64_t)v17, (uint64_t)a6 + direct field offset for StartSharingFlow.sharePlayHelper);
  outlined init with copy of ResponseExecuting(a1, (uint64_t)v16);
  outlined init with copy of ResponseExecuting(a2, (uint64_t)v15);
  outlined init with copy of ResponseExecuting(a4, (uint64_t)v14);
  swift_retain();
  uint64_t v12 = specialized SharingFlow.init(intent:call:responseExecutor:outputPublisher:)((uint64_t)v16, (uint64_t)v15, a3, (uint64_t)v14, a6, type metadata accessor for StartSharingFlow.StartSharingFlowState, 9, type metadata accessor for StartSharingFlow.StartSharingFlowState, (uint64_t (*)(uint64_t))StartSharingFlow.StartSharingFlowState.description.getter);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  __swift_destroy_boxed_opaque_existential_1(a4);
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v12;
}

uint64_t outlined init with copy of ResponseExecuting(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void *specialized StopSharingFlow.init(intent:call:responseExecutor:outputPublisher:shareTargetResolver:sharer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v19 = &type metadata for ShareTargetResolver;
  uint64_t v20 = &protocol witness table for ShareTargetResolver;
  uint64_t v16 = &type metadata for Sharer;
  uint64_t v17 = &protocol witness table for Sharer;
  outlined init with copy of ResponseExecuting((uint64_t)v18, (uint64_t)a5 + direct field offset for StopSharingFlow.shareTargetResolver);
  outlined init with copy of ResponseExecuting((uint64_t)v15, (uint64_t)a5 + direct field offset for StopSharingFlow.sharer);
  outlined init with copy of ResponseExecuting(a1, (uint64_t)v14);
  outlined init with copy of ResponseExecuting(a2, (uint64_t)v13);
  outlined init with copy of ResponseExecuting(a4, (uint64_t)v12);
  swift_retain();
  uint64_t v10 = specialized SharingFlow.init(intent:call:responseExecutor:outputPublisher:)((uint64_t)v14, (uint64_t)v13, a3, (uint64_t)v12, a5, type metadata accessor for StopSharingFlow.StopSharingFlowState, 5, type metadata accessor for StopSharingFlow.StopSharingFlowState, (uint64_t (*)(uint64_t))StopSharingFlow.StopSharingFlowState.description.getter);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  __swift_destroy_boxed_opaque_existential_1(a4);
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v10;
}

uint64_t outlined init with copy of StartSharingFlow.StartSharingFlowState(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of StartSharingFlow.StartSharingFlowState(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id SharingDirectInvocation.toSAIntentGroupRunSiriKitExecutor(deviceState:)(void *a1, char a2)
{
  id v4 = objc_allocWithZone(MEMORY[0x263F70030]);
  uint64_t v5 = (void *)MEMORY[0x230F98C20](0xD000000000000027, 0x800000022DDEA9C0);
  id v6 = objc_msgSend(v4, sel_initWithIdentifier_, v5);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22DDE63C0;
  uint64_t v8 = MEMORY[0x263F8D310];
  AnyHashable.init<A>(_:)();
  uint64_t v9 = 0x7463656A6572;
  if ((a2 & 1) == 0) {
    uint64_t v9 = 0x6D7269666E6F63;
  }
  unint64_t v10 = 0xE600000000000000;
  *(void *)(inited + 96) = v8;
  if ((a2 & 1) == 0) {
    unint64_t v10 = 0xE700000000000000;
  }
  *(void *)(inited + 72) = v9;
  *(void *)(inited + 80) = v10;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_setUserData_, isa);

  uint64_t v12 = self;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v13 = (void *)DeviceState.asInvocationContext.getter();
  id v14 = objc_msgSend(v12, sel_runSiriKitExecutorCommandWithContext_payload_, v13, v6);

  return v14;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SharingDirectInvocation(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SharingDirectInvocation()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SharingDirectInvocation()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SharingDirectInvocation()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SharingDirectInvocation@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SharingDirectInvocation.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SharingDirectInvocation(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6D7269666E6F63;
  if (*v1) {
    uint64_t v2 = 0x7463656A6572;
  }
  unint64_t v3 = 0xE700000000000000;
  if (*v1) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SharingDirectInvocation()
{
  int v1 = *v0;
  _StringGuts.grow(_:)(26);
  v2._object = (void *)0x800000022DDEA680;
  v2._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v2);
  if (v1) {
    uint64_t v3 = 0x7463656A6572;
  }
  else {
    uint64_t v3 = 0x6D7269666E6F63;
  }
  if (v1) {
    unint64_t v4 = 0xE600000000000000;
  }
  else {
    unint64_t v4 = 0xE700000000000000;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t specialized SharingDirectInvocation.init(from:)(char *a1)
{
  uint64_t v2 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  Swift::String v6 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)&v58 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v58 - v10;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.default);
  uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v61(v11, a1, v2);
  uint64_t v62 = v13;
  id v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v63 = v3;
  if (v16)
  {
    v58 = v6;
    uint64_t v59 = v2;
    v60 = a1;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(void *)&long long v65 = v18;
    *(_DWORD *)uint64_t v17 = 136315394;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v20 = static SharingDirectInvocation.typeName;
    unint64_t v19 = *(void *)algn_2685B7328;
    swift_bridgeObjectRetain();
    v64._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, (uint64_t *)&v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v21 = v59;
    v61(v9, v11, v59);
    uint64_t v22 = String.init<A>(describing:)();
    v64._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, (uint64_t *)&v65);
    uint64_t v2 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v24 = *(void (**)(char *, uint64_t))(v63 + 8);
    v24(v11, v2);
    _os_log_impl(&dword_22DD8A000, v14, v15, "%s: Initializing SharingDirectInvocation from %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v18, -1, -1);
    MEMORY[0x230F996F0](v17, -1, -1);

    a1 = v60;
    Swift::String v6 = v58;
  }
  else
  {
    uint64_t v24 = *(void (**)(char *, uint64_t))(v3 + 8);
    v24(v11, v2);
  }
  if (Parse.DirectInvocation.identifier.getter() == 0xD000000000000027 && v25 == 0x800000022DDEA9C0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v26)
  {
LABEL_12:
    uint64_t v27 = Parse.DirectInvocation.userData.getter();
    if (v27)
    {
      uint64_t v28 = v27;
      if (*(void *)(v27 + 16)
        && (unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000017, 0x800000022DDE63B0),
            (v30 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v28 + 56) + 32 * v29, (uint64_t)&v65);
      }
      else
      {
        long long v65 = 0u;
        long long v66 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v66 + 1))
      {
        if (swift_dynamicCast())
        {
          Swift::Int v31 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SharingDirectInvocation.init(rawValue:), v64);
          swift_bridgeObjectRelease();
          if (v31 == 1)
          {
            v24(a1, v2);
            return 1;
          }
          if (!v31)
          {
            v24(a1, v2);
            return 0;
          }
          uint64_t v40 = a1;
          uint64_t v56 = v2;
          goto LABEL_38;
        }
        uint64_t v33 = v2;
      }
      else
      {
        uint64_t v33 = v2;
        outlined destroy of Any?((uint64_t)&v65);
      }
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v51))
      {
        uint64_t v52 = swift_slowAlloc();
        uint64_t v53 = swift_slowAlloc();
        *(void *)&long long v65 = v53;
        *(_DWORD *)uint64_t v52 = 136315394;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v54 = static SharingDirectInvocation.typeName;
        unint64_t v55 = *(void *)algn_2685B7328;
        swift_bridgeObjectRetain();
        v64._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, (uint64_t *)&v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v52 + 12) = 2080;
        v64._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x800000022DDE63B0, (uint64_t *)&v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_22DD8A000, v34, v51, "%s: Cannot init SharingDirectInvocation from direct invocation without userData containing key '%s' with a String value", (uint8_t *)v52, 0x16u);
        uint64_t v32 = 2;
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v53, -1, -1);
        MEMORY[0x230F996F0](v52, -1, -1);

        v24(a1, v33);
        return v32;
      }
    }
    else
    {
      uint64_t v33 = v2;
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        unint64_t v36 = (uint8_t *)swift_slowAlloc();
        uint64_t v37 = swift_slowAlloc();
        *(void *)&long long v65 = v37;
        *(_DWORD *)unint64_t v36 = 136315138;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v38 = static SharingDirectInvocation.typeName;
        unint64_t v39 = *(void *)algn_2685B7328;
        swift_bridgeObjectRetain();
        v64._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, (uint64_t *)&v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22DD8A000, v34, v35, "%s: Cannot init SharingDirectInvocation from direct invocation with nil userData", v36, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v37, -1, -1);
        MEMORY[0x230F996F0](v36, -1, -1);

        uint64_t v40 = a1;
        goto LABEL_37;
      }
    }

    uint64_t v40 = a1;
LABEL_37:
    uint64_t v56 = v33;
LABEL_38:
    v24(v40, v56);
    return 2;
  }
  v61(v6, a1, v2);
  uint64_t v41 = Logger.logObject.getter();
  uint64_t v42 = v6;
  os_log_type_t v43 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v41, v43))
  {

    v24(v42, v2);
    v24(a1, v2);
    return 2;
  }
  v60 = a1;
  uint64_t v44 = swift_slowAlloc();
  uint64_t v45 = swift_slowAlloc();
  *(void *)&long long v65 = v45;
  *(_DWORD *)uint64_t v44 = 136315394;
  if (one-time initialization token for typeName != -1) {
    swift_once();
  }
  uint64_t v46 = static SharingDirectInvocation.typeName;
  unint64_t v47 = *(void *)algn_2685B7328;
  swift_bridgeObjectRetain();
  v64._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, (uint64_t *)&v65);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v44 + 12) = 2080;
  uint64_t v48 = Parse.DirectInvocation.identifier.getter();
  v64._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, (uint64_t *)&v65);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  v24(v42, v2);
  _os_log_impl(&dword_22DD8A000, v41, v43, "%s: Cannot init SharingDirectInvocation from direct invocation with identifier: %s", (uint8_t *)v44, 0x16u);
  uint64_t v50 = v2;
  uint64_t v32 = 2;
  swift_arrayDestroy();
  MEMORY[0x230F996F0](v45, -1, -1);
  MEMORY[0x230F996F0](v44, -1, -1);

  v24(v60, v50);
  return v32;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for SharingDirectInvocation(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SharingDirectInvocation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22DD98228);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for SharingDirectInvocation(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SharingDirectInvocation()
{
  return &type metadata for SharingDirectInvocation;
}

unint64_t lazy protocol witness table accessor for type SharingDirectInvocation and conformance SharingDirectInvocation()
{
  unint64_t result = lazy protocol witness table cache variable for type SharingDirectInvocation and conformance SharingDirectInvocation;
  if (!lazy protocol witness table cache variable for type SharingDirectInvocation and conformance SharingDirectInvocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingDirectInvocation and conformance SharingDirectInvocation);
  }
  return result;
}

uint64_t protocol witness for Contact.handles.getter in conformance <> Match<A, B>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](a1);
  unsigned int v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Match.value.getter();
  uint64_t v5 = Contact.handles.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v5;
}

uint64_t dispatch thunk of Contact.handles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SharingIntent.verb.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SharingIntent.type.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SharingIntent.type.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of SharingIntent.type.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of SharingIntent.containsSharingReference.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of SharingIntent.containsSharingReference.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of SharingIntent.containsSharingReference.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of SharingIntent.appName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of SharingIntent.appName.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of SharingIntent.appName.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of SharingIntent.typeMatchingSpan.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of SharingIntent.typeMatchingSpan.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 104))();
}

uint64_t dispatch thunk of SharingIntent.typeMatchingSpan.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of SharingIntent.appIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of SharingIntent.appIdentifier.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 128))();
}

uint64_t dispatch thunk of SharingIntent.appIdentifier.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 136))();
}

uint64_t dispatch thunk of SharingIntent.associatedAppIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t dispatch thunk of SharingIntent.refersToScreen.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of SharingIntent.refersToEverything.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of SharingIntent.refersToDisplayedContent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of SharingIntent.recipients.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of SharingIntent.confirmationValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t dispatch thunk of SharingIntent.shareTarget.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 192))();
}

uint64_t dispatch thunk of SharingIntent.isSharePlayRequest.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 200))();
}

uint64_t dispatch thunk of SharingIntent.usoEntity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t dispatch thunk of SharingIntent.isExplicitShareViaMessagesIntent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 216))();
}

uint64_t dispatch thunk of SharingIntent.isExplicitShareInCallIntent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 224))();
}

uint64_t dispatch thunk of SharingIntent.reform()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 232))();
}

uint64_t dispatch thunk of SharingIntent.isReformed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 240))();
}

uint64_t dispatch thunk of SharingIntent.isReformed.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 248))();
}

uint64_t dispatch thunk of SharingIntent.isReformed.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 256))();
}

uint64_t dispatch thunk of SharingIntent.merge(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 264))();
}

uint64_t specialized SharingIntent.reform()()
{
  uint64_t v1 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  v58 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  uint64_t v4 = MEMORY[0x270FA5388](v57);
  unsigned int v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)&v49 - v8;
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v49 - v11;
  MEMORY[0x270FA5388](v10);
  id v14 = (char *)&v49 - v13;
  os_log_type_t v15 = (int *)type metadata accessor for SharingDirectInvocationIntent();
  uint64_t v16 = v0 + v15[5];
  outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v16, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v14, 1, v1))
  {
    outlined destroy of SharingResponse?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
    return 0;
  }
  else
  {
    uint64_t v53 = v6;
    uint64_t v54 = v9;
    uint64_t v18 = v0;
    unint64_t v55 = v12;
    uint64_t v56 = v16;
    unint64_t v19 = v58;
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v58, v14, v1);
    outlined destroy of SharingResponse?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
    unint64_t PartyAppBundle = UsoEntity_common_AttachmentType.DefinedValues.matchingFirstPartyAppBundleID.getter();
    unint64_t v22 = v21;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v19, v1);
    if (v22)
    {
      v58 = (char *)v1;
      unint64_t v23 = v15;
      uint64_t v24 = v18;
      uint64_t v25 = (unint64_t *)(v18 + v15[9]);
      *uint64_t v25 = PartyAppBundle;
      v25[1] = v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v26 = String.localizedAppDisplayName.getter();
      uint64_t v28 = v27;
      swift_bridgeObjectRelease();
      if (v28)
      {
        unint64_t v29 = (uint64_t *)(v18 + v15[7]);
        swift_bridgeObjectRelease();
        uint64_t *v29 = v26;
        v29[1] = v28;
        uint64_t v31 = (uint64_t)v55;
        uint64_t v30 = v56;
      }
      else
      {
        uint64_t v32 = (uint64_t *)(v18 + v15[8]);
        uint64_t v33 = v32[1];
        uint64_t v31 = (uint64_t)v55;
        if (v33)
        {
          uint64_t v34 = *v32;
          os_log_type_t v35 = (void *)(v18 + v15[7]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *os_log_type_t v35 = v34;
          v35[1] = v33;
          unint64_t v23 = v15;
          uint64_t v30 = v56;
        }
        else
        {
          uint64_t v30 = v56;
          uint64_t v36 = (uint64_t)v54;
          outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v56, (uint64_t)v54);
          if (one-time initialization token for default != -1) {
            swift_once();
          }
          uint64_t v37 = type metadata accessor for Logger();
          __swift_project_value_buffer(v37, (uint64_t)static Logger.default);
          uint64_t v38 = (uint64_t)v53;
          outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v36, (uint64_t)v53);
          unint64_t v39 = Logger.logObject.getter();
          os_log_type_t v40 = static os_log_type_t.error.getter();
          int v52 = v40;
          if (os_log_type_enabled(v39, v40))
          {
            uint64_t v41 = (uint8_t *)swift_slowAlloc();
            uint64_t v51 = swift_slowAlloc();
            uint64_t v60 = v51;
            uint64_t v50 = v41;
            *(_DWORD *)uint64_t v41 = 136315138;
            outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v38, v31);
            uint64_t v42 = String.init<A>(describing:)();
            uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v60);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            unint64_t v23 = v15;
            swift_bridgeObjectRelease();
            outlined destroy of SharingResponse?(v38, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
            uint64_t v44 = v50;
            _os_log_impl(&dword_22DD8A000, v39, (os_log_type_t)v52, "SharingIntent: unable to determine appName for entity type=%s", v50, 0xCu);
            uint64_t v45 = v51;
            swift_arrayDestroy();
            MEMORY[0x230F996F0](v45, -1, -1);
            MEMORY[0x230F996F0](v44, -1, -1);

            uint64_t v46 = v36;
            uint64_t v30 = v56;
          }
          else
          {

            outlined destroy of SharingResponse?(v38, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
            uint64_t v46 = v36;
          }
          outlined destroy of SharingResponse?(v46, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
        }
      }
      uint64_t v17 = 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(v2 + 56))(v31, 1, 1, v58);
      outlined assign with take of UsoEntity_common_AttachmentType.DefinedValues?(v31, v30);
      unint64_t v47 = (void *)(v24 + v23[8]);
      swift_bridgeObjectRelease();
      void *v47 = 0;
      v47[1] = 0;
      *(unsigned char *)(v24 + v23[6]) = 0;
      *(unsigned char *)(v24 + v23[21]) = 1;
    }
    else
    {
      return 0;
    }
  }
  return v17;
}

Swift::Bool __swiftcall SharingIntent.reform()()
{
  uint64_t v3 = v1;
  uint64_t v57 = v0;
  uint64_t v4 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  uint64_t v5 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v56 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  uint64_t v7 = MEMORY[0x270FA5388](v54);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v48 - v11;
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  os_log_type_t v15 = (char *)&v48 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v48 - v16;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v3 + 24);
  uint64_t v55 = v3;
  v18(v57, v3);
  if (v5[6](v17, 1, v4))
  {
    outlined destroy of SharingResponse?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
    return 0;
  }
  uint64_t v48 = (uint8_t *)(v3 + 24);
  uint64_t v49 = v18;
  uint64_t v51 = v15;
  uint64_t v52 = v2;
  uint64_t v50 = v12;
  uint64_t v21 = v55;
  uint64_t v20 = v56;
  uint64_t v53 = v9;
  v5[2](v56, (uint64_t)v17, v4);
  outlined destroy of SharingResponse?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  unint64_t PartyAppBundle = UsoEntity_common_AttachmentType.DefinedValues.matchingFirstPartyAppBundleID.getter();
  uint64_t v24 = v23;
  ((void (*)(char *, uint64_t))v5[1])(v20, v4);
  if (!v24) {
    return 0;
  }
  uint64_t v25 = v4;
  uint64_t v56 = (char *)v5;
  uint64_t v26 = v21;
  uint64_t v27 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v21 + 128);
  swift_bridgeObjectRetain();
  uint64_t v28 = v57;
  v27(PartyAppBundle, v24, v57, v26);
  uint64_t v29 = String.localizedAppDisplayName.getter();
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();
  if (v31)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 80))(v29, v31, v28, v26);
    uint64_t v32 = (uint64_t)v53;
  }
  else
  {
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 96))(v28, v26);
    if (v34)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 80))(v33, v34, v28, v26);
      uint64_t v32 = (uint64_t)v53;
    }
    else
    {
      uint64_t v35 = (uint64_t)v51;
      v49(v28, v26);
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      __swift_project_value_buffer(v36, (uint64_t)static Logger.default);
      uint64_t v37 = (uint64_t)v50;
      outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v35, (uint64_t)v50);
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      BOOL v40 = os_log_type_enabled(v38, v39);
      uint64_t v32 = (uint64_t)v53;
      if (v40)
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc();
        uint64_t v49 = (void (*)(uint64_t, uint64_t))swift_slowAlloc();
        uint64_t v59 = v49;
        uint64_t v48 = v41;
        *(_DWORD *)uint64_t v41 = 136315138;
        outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v37, v32);
        uint64_t v42 = String.init<A>(describing:)();
        uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, (uint64_t *)&v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of SharingResponse?(v37, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
        uint64_t v44 = v48;
        _os_log_impl(&dword_22DD8A000, v38, v39, "SharingIntent: unable to determine appName for entity type=%s", v48, 0xCu);
        uint64_t v45 = v49;
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v45, -1, -1);
        MEMORY[0x230F996F0](v44, -1, -1);

        uint64_t v46 = (uint64_t)v51;
      }
      else
      {

        outlined destroy of SharingResponse?(v37, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
        uint64_t v46 = v35;
      }
      outlined destroy of SharingResponse?(v46, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
      uint64_t v28 = v57;
    }
  }
  Swift::Bool v19 = 1;
  (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v56 + 7))(v32, 1, 1, v25);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v32, v28, v26);
  (*(void (**)(void, void, uint64_t, uint64_t))(v26 + 104))(0, 0, v28, v26);
  (*(void (**)(void, uint64_t, uint64_t))(v26 + 56))(0, v28, v26);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 248))(1, v28, v26);
  return v19;
}

double static SharingIntentHelper.makeSharingIntentFrom(parse:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v148 = a2;
  uint64_t v3 = type metadata accessor for Parse.DirectInvocation();
  os_log_t v147 = *(os_log_t *)(v3 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  os_log_t v145 = (os_log_t)((char *)&v133 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  v146 = (char *)&v133 - v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v133 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x270FA5388](v10 - 8);
  v139 = (char *)&v133 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v141 = *(void *)(v12 - 8);
  v142 = (void (*)(char *, char *, uint64_t))v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  os_log_t v140 = (os_log_t)((char *)&v133 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v13);
  v143 = (char *)&v133 - v15;
  uint64_t v135 = type metadata accessor for USOParse();
  uint64_t v138 = *(void *)(v135 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v135);
  v134 = (char *)&v133 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  v136 = (char *)&v133 - v19;
  MEMORY[0x270FA5388](v18);
  v137 = (char *)&v133 - v20;
  uint64_t v21 = type metadata accessor for Parse();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  v133 = (char *)&v133 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v133 - v26;
  MEMORY[0x270FA5388](v25);
  uint64_t v29 = (uint64_t *)((char *)&v133 - v28);
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v31 = a1;
  v30((char *)&v133 - v28, a1, v21);
  int v32 = (*(uint64_t (**)(uint64_t *, uint64_t))(v22 + 88))(v29, v21);
  if (v32 == *MEMORY[0x263F6FF70])
  {
    (*(void (**)(uint64_t *, uint64_t))(v22 + 96))(v29, v21);
    os_log_t v33 = v147;
    ((void (*)(char *, uint64_t *, uint64_t))v147[4].isa)(v9, v29, v3);
    uint64_t v34 = (char *)v3;
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    uint64_t v36 = __swift_project_value_buffer(v35, (uint64_t)static Logger.default);
    Class isa = (void (*)(char *, char *, uint64_t))v33[2].isa;
    uint64_t v38 = v146;
    isa(v146, v9, v3);
    v143 = (char *)v36;
    os_log_type_t v39 = Logger.logObject.getter();
    int v40 = static os_log_type_t.debug.getter();
    BOOL v41 = os_log_type_enabled(v39, (os_log_type_t)v40);
    v144 = v9;
    if (v41)
    {
      LODWORD(v141) = v40;
      v142 = isa;
      uint64_t v42 = swift_slowAlloc();
      os_log_t v140 = (os_log_t)swift_slowAlloc();
      os_log_t v149 = v140;
      *(_DWORD *)uint64_t v42 = 136315394;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v43 = static SharingIntentHelper.typeName;
      unint64_t v44 = *(void *)algn_2685B7358;
      swift_bridgeObjectRetain();
      v151[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, (uint64_t *)&v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 12) = 2080;
      uint64_t v45 = (char *)v145;
      uint64_t v46 = v146;
      Class isa = v142;
      v142((char *)v145, v146, v3);
      uint64_t v47 = String.init<A>(describing:)();
      v151[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, (uint64_t *)&v149);
      uint64_t v34 = (char *)v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      Class v49 = v147[1].isa;
      ((void (*)(char *, uint64_t))v49)(v46, v3);
      _os_log_impl(&dword_22DD8A000, v39, (os_log_type_t)v141, "%s: Received .directInvocation parse with directInvocation: %s", (uint8_t *)v42, 0x16u);
      os_log_t v50 = v140;
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v50, -1, -1);
      MEMORY[0x230F996F0](v42, -1, -1);

      uint64_t v9 = v144;
    }
    else
    {
      Class v49 = v33[1].isa;
      ((void (*)(char *, uint64_t))v49)(v38, v3);

      uint64_t v45 = (char *)v145;
    }
    isa(v45, v9, (uint64_t)v34);
    char v61 = specialized SharingDirectInvocation.init(from:)(v45);
    if (v61 == 2)
    {
      uint64_t v62 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v62, v63))
      {
        Swift::String v64 = (uint8_t *)swift_slowAlloc();
        os_log_t v65 = (os_log_t)swift_slowAlloc();
        os_log_t v149 = v65;
        *(_DWORD *)Swift::String v64 = 136315138;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v66 = static SharingIntentHelper.typeName;
        unint64_t v67 = *(void *)algn_2685B7358;
        swift_bridgeObjectRetain();
        v151[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, (uint64_t *)&v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22DD8A000, v62, v63, "%s: Failed to construct SharingDirectInvocation from the provided directInvocation", v64, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v65, -1, -1);
        MEMORY[0x230F996F0](v64, -1, -1);
      }
      else
      {
      }
      ((void (*)(char *, char *))v49)(v144, v34);
      goto LABEL_65;
    }
    int v84 = v61 & 1;
    v85 = Logger.logObject.getter();
    os_log_type_t v86 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v85, v86))
    {
      v146 = v34;
      uint64_t v87 = swift_slowAlloc();
      uint64_t v88 = swift_slowAlloc();
      v151[0] = v88;
      *(_DWORD *)uint64_t v87 = 136315394;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v89 = static SharingIntentHelper.typeName;
      unint64_t v90 = *(void *)algn_2685B7358;
      swift_bridgeObjectRetain();
      os_log_t v149 = (os_log_t)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v90, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v87 + 12) = 2080;
      os_log_t v149 = 0;
      unint64_t v150 = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      os_log_t v149 = (os_log_t)0xD000000000000018;
      unint64_t v150 = 0x800000022DDEA680;
      if (v84) {
        uint64_t v91 = 0x7463656A6572;
      }
      else {
        uint64_t v91 = 0x6D7269666E6F63;
      }
      if (v84) {
        unint64_t v92 = 0xE600000000000000;
      }
      else {
        unint64_t v92 = 0xE700000000000000;
      }
      unint64_t v93 = v92;
      String.append(_:)(*(Swift::String *)&v91);
      swift_bridgeObjectRelease();
      os_log_t v149 = (os_log_t)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v149, v150, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v85, v86, "%s: SharingDirectInvocation initialized to %s", (uint8_t *)v87, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v88, -1, -1);
      MEMORY[0x230F996F0](v87, -1, -1);

      uint64_t v34 = v146;
    }
    else
    {
    }
    uint64_t v117 = type metadata accessor for SharingDirectInvocationIntent();
    v118 = v148;
    v148[3] = v117;
    v118[4] = lazy protocol witness table accessor for type SharingDirectInvocationIntent and conformance SharingDirectInvocationIntent(&lazy protocol witness table cache variable for type SharingDirectInvocationIntent and conformance SharingDirectInvocationIntent, (void (*)(uint64_t))type metadata accessor for SharingDirectInvocationIntent);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v118);
    SharingDirectInvocationIntent.init(from:)(v84, boxed_opaque_existential_1);
    ((void (*)(char *, char *))v49)(v144, v34);
  }
  else
  {
    if (v32 == *MEMORY[0x263F6FF58])
    {
      (*(void (**)(uint64_t *, uint64_t))(v22 + 96))(v29, v21);
      uint64_t v51 = *v29;
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      __swift_project_value_buffer(v52, (uint64_t)static Logger.default);
      swift_unknownObjectRetain_n();
      uint64_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = swift_slowAlloc();
        os_log_t v56 = (os_log_t)swift_slowAlloc();
        os_log_t v149 = v56;
        *(_DWORD *)uint64_t v55 = 136315394;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v57 = static SharingIntentHelper.typeName;
        unint64_t v58 = *(void *)algn_2685B7358;
        swift_bridgeObjectRetain();
        v151[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, (uint64_t *)&v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v55 + 12) = 2080;
        v151[0] = v51;
        swift_unknownObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserDialogAct);
        uint64_t v59 = String.init<A>(describing:)();
        v151[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, (uint64_t *)&v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22DD8A000, v53, v54, "%s: Received .NLv4IntentOnly parse with userDialogAct: %s", (uint8_t *)v55, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v56, -1, -1);
        MEMORY[0x230F996F0](v55, -1, -1);
      }
      else
      {

        swift_unknownObjectRelease_n();
      }
      v94 = v142;
      uint64_t v95 = (uint64_t)v139;
      os_log_t v96 = v140;
      static ConversionUtils.toUserParse(from:)();
      uint64_t v97 = v141;
      if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v141 + 48))(v95, 1, v94) == 1)
      {
        outlined destroy of SharingResponse?(v95, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
        long long v98 = Logger.logObject.getter();
        os_log_type_t v99 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v98, v99))
        {
          long long v100 = (uint8_t *)swift_slowAlloc();
          os_log_t v101 = (os_log_t)swift_slowAlloc();
          os_log_t v149 = v101;
          *(_DWORD *)long long v100 = 136315138;
          if (one-time initialization token for typeName != -1) {
            swift_once();
          }
          uint64_t v102 = static SharingIntentHelper.typeName;
          unint64_t v103 = *(void *)algn_2685B7358;
          swift_bridgeObjectRetain();
          v151[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v103, (uint64_t *)&v149);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_22DD8A000, v98, v99, "%s: Failed to convert UserDialogAct to Siri_Nlu_External_UserParse", v100, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x230F996F0](v101, -1, -1);
          MEMORY[0x230F996F0](v100, -1, -1);
          swift_unknownObjectRelease();

          goto LABEL_65;
        }
      }
      else
      {
        (*(void (**)(os_log_t, uint64_t, void))(v97 + 32))(v96, v95, v94);
        uint64_t v121 = (uint64_t)v143;
        (*(void (**)(char *, os_log_t, void))(v97 + 16))(v143, v96, v94);
        uint64_t v122 = type metadata accessor for SharingNLv4Intent();
        swift_allocObject();
        uint64_t v123 = SharingNLv4Intent.init(from:)(v121);
        if (v123)
        {
          uint64_t v124 = v123;
          v125 = v148;
          v148[3] = v122;
          v125[4] = lazy protocol witness table accessor for type SharingDirectInvocationIntent and conformance SharingDirectInvocationIntent(&lazy protocol witness table cache variable for type SharingNLv4Intent and conformance SharingNLv4Intent, (void (*)(uint64_t))type metadata accessor for SharingNLv4Intent);
          swift_unknownObjectRelease();
          uint64_t *v125 = v124;
          (*(void (**)(os_log_t, void (*)(char *, char *, uint64_t)))(v97 + 8))(v96, v94);
          return result;
        }
        (*(void (**)(os_log_t, void (*)(char *, char *, uint64_t)))(v97 + 8))(v96, v94);
      }
      swift_unknownObjectRelease();
LABEL_65:
      v132 = v148;
      v148[4] = 0;
      double result = 0.0;
      *(_OWORD *)v132 = 0u;
      *((_OWORD *)v132 + 1) = 0u;
      return result;
    }
    if (v32 == *MEMORY[0x263F6FF80])
    {
      (*(void (**)(uint64_t *, uint64_t))(v22 + 96))(v29, v21);
      uint64_t v68 = v137;
      uint64_t v69 = v138;
      uint64_t v70 = v135;
      (*(void (**)(char *, uint64_t *, uint64_t))(v138 + 32))(v137, v29, v135);
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v71 = type metadata accessor for Logger();
      __swift_project_value_buffer(v71, (uint64_t)static Logger.default);
      uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
      v73 = v136;
      v72(v136, v68, v70);
      uint64_t v74 = Logger.logObject.getter();
      os_log_type_t v75 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v74, v75))
      {
        uint64_t v76 = swift_slowAlloc();
        os_log_t v147 = (os_log_t)swift_slowAlloc();
        os_log_t v149 = v147;
        *(_DWORD *)uint64_t v76 = 136315394;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v77 = static SharingIntentHelper.typeName;
        unint64_t v78 = *(void *)algn_2685B7358;
        swift_bridgeObjectRetain();
        v151[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, (uint64_t *)&v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v76 + 12) = 2080;
        uint64_t v79 = v136;
        v72(v134, v136, v70);
        uint64_t v80 = String.init<A>(describing:)();
        v151[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, (uint64_t *)&v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v82 = *(void (**)(char *, uint64_t))(v138 + 8);
        v82(v79, v70);
        _os_log_impl(&dword_22DD8A000, v74, v75, "%s: Received .uso parse with usoParse: %s", (uint8_t *)v76, 0x16u);
        os_log_t v83 = v147;
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v83, -1, -1);
        MEMORY[0x230F996F0](v76, -1, -1);

        uint64_t v68 = v137;
      }
      else
      {
        uint64_t v82 = *(void (**)(char *, uint64_t))(v69 + 8);
        v82(v73, v70);
      }
      uint64_t v126 = (uint64_t)v143;
      USOParse.userParse.getter();
      uint64_t v127 = type metadata accessor for SharingNLv4Intent();
      swift_allocObject();
      uint64_t v128 = SharingNLv4Intent.init(from:)(v126);
      if (v128)
      {
        uint64_t v129 = v128;
        v130 = v148;
        v148[3] = v127;
        v130[4] = lazy protocol witness table accessor for type SharingDirectInvocationIntent and conformance SharingDirectInvocationIntent(&lazy protocol witness table cache variable for type SharingNLv4Intent and conformance SharingNLv4Intent, (void (*)(uint64_t))type metadata accessor for SharingNLv4Intent);
        uint64_t *v130 = v129;
        v82(v68, v70);
        return result;
      }
      v82(v68, v70);
      goto LABEL_65;
    }
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v104 = type metadata accessor for Logger();
    __swift_project_value_buffer(v104, (uint64_t)static Logger.default);
    uint64_t v105 = v27;
    v30(v27, v31, v21);
    v106 = Logger.logObject.getter();
    int v107 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v106, (os_log_type_t)v107))
    {
      LODWORD(v146) = v107;
      os_log_t v147 = v106;
      uint64_t v108 = swift_slowAlloc();
      os_log_t v145 = (os_log_t)swift_slowAlloc();
      os_log_t v149 = v145;
      *(_DWORD *)uint64_t v108 = 136315394;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v110 = static SharingIntentHelper.typeName;
      unint64_t v109 = *(void *)algn_2685B7358;
      swift_bridgeObjectRetain();
      v151[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v109, (uint64_t *)&v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v108 + 12) = 2080;
      v144 = (char *)(v108 + 14);
      v30(v133, (uint64_t)v105, v21);
      uint64_t v111 = String.init<A>(describing:)();
      uint64_t v112 = v108;
      v151[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v113, (uint64_t *)&v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v114 = *(void (**)(char *, uint64_t))(v22 + 8);
      v114(v105, v21);
      os_log_t v115 = v147;
      _os_log_impl(&dword_22DD8A000, v147, (os_log_type_t)v146, "%s: Received parse of unexpected type: %s", (uint8_t *)v108, 0x16u);
      os_log_t v116 = v145;
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v116, -1, -1);
      MEMORY[0x230F996F0](v112, -1, -1);
    }
    else
    {
      v114 = *(void (**)(char *, uint64_t))(v22 + 8);
      v114(v27, v21);
    }
    v131 = v148;
    v148[4] = 0;
    *(_OWORD *)v131 = 0u;
    *((_OWORD *)v131 + 1) = 0u;
    v114((char *)v29, v21);
  }
  return result;
}

uint64_t SharingIntent.shareTarget.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v93 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v87 = (uint64_t)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  uint64_t v88 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v83 - v13;
  uint64_t v90 = *(void *)(a1 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (void (**)(char *, uint64_t, uint64_t))((char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v83 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v89 = (char *)&v83 - v21;
  uint64_t v22 = type metadata accessor for Logger();
  unint64_t v92 = *(void (***)(char *, uint64_t, uint64_t))(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v91 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 120))(a1, a2);
  if (v25)
  {
    unint64_t v26 = v25;
    uint64_t v88 = v3;
    uint64_t v27 = v24;
    id v28 = objc_allocWithZone(MEMORY[0x263F01878]);
    swift_bridgeObjectRetain();
    uint64_t v87 = v27;
    id v38 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v27, v26, 0);

    uint64_t v40 = v88;
    os_log_type_t v39 = v89;
    BOOL v41 = v91;
    if (!v38)
    {
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v29 = __swift_project_value_buffer(v22, (uint64_t)static Logger.default);
      v92[2](v41, v29, v22);
      uint64_t v30 = *(void (**)(uint64_t, uint64_t))(a2 + 72);
      v30(a1, a2);
      uint64_t v31 = (char *)v30;
      uint64_t v33 = v32;
      swift_bridgeObjectRelease();
      uint64_t v86 = v22;
      uint64_t v89 = v31;
      if (v33) {
        os_log_type_t v34 = static os_log_type_t.debug.getter();
      }
      else {
        os_log_type_t v34 = static os_log_type_t.error.getter();
      }
      os_log_type_t v43 = v34;
      uint64_t v44 = v90;
      (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v39, v40, a1);
      swift_bridgeObjectRetain();
      uint64_t v45 = Logger.logObject.getter();
      if (os_log_type_enabled(v45, v43))
      {
        uint64_t v46 = swift_slowAlloc();
        uint64_t v85 = swift_slowAlloc();
        v95[0] = v85;
        *(_DWORD *)uint64_t v46 = 136315394;
        os_log_t v84 = v45;
        swift_bridgeObjectRetain();
        uint64_t v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v26, v95);
        LODWORD(v87) = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v46 + 12) = 2080;
        uint64_t v47 = v39;
        unint64_t v48 = v89;
        uint64_t v49 = ((uint64_t (*)(uint64_t, uint64_t))v89)(a1, a2);
        if (v50)
        {
          unint64_t v51 = v50;
        }
        else
        {
          uint64_t v49 = 7104878;
          unint64_t v51 = 0xE300000000000000;
        }
        uint64_t v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v51, v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v44 + 8))(v47, a1);
        os_log_t v52 = v84;
        _os_log_impl(&dword_22DD8A000, v84, (os_log_type_t)v87, "SharingIntent: share target for appIdentifier=%s appName=%s not installed", (uint8_t *)v46, 0x16u);
        uint64_t v53 = v85;
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v53, -1, -1);
        MEMORY[0x230F996F0](v46, -1, -1);

        ((void (*)(char *, uint64_t))v92[1])(v91, v86);
      }
      else
      {
        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v44 + 8))(v39, a1);

        ((void (*)(char *, uint64_t))v92[1])(v41, v86);
        unint64_t v48 = v89;
      }
      uint64_t v54 = ((uint64_t (*)(uint64_t, uint64_t))v48)(a1, a2);
      if (v55) {
        uint64_t v56 = v54;
      }
      else {
        uint64_t v56 = 0;
      }
      unint64_t v57 = 0xE000000000000000;
      if (v55) {
        unint64_t v57 = v55;
      }
      unint64_t v58 = v93;
      *unint64_t v93 = v56;
      v58[1] = v57;
      type metadata accessor for ShareTarget();
      return swift_storeEnumTagMultiPayload();
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2))
    {
      uint64_t v42 = v93;
      *unint64_t v93 = v87;
      v42[1] = v26;
      type metadata accessor for ShareTarget();
    }
    else
    {
      if ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 240))(a1, a2)) {
        char v65 = 0;
      }
      else {
        char v65 = 2;
      }
      uint64_t v66 = v93;
      *unint64_t v93 = v87;
      v66[1] = v26;
      *((unsigned char *)v66 + 16) = v65;
      type metadata accessor for ShareTarget();
    }
    goto LABEL_31;
  }
  uint64_t v91 = v14;
  unint64_t v92 = v17;
  uint64_t v89 = v11;
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 72))(a1, a2);
  if (v36)
  {
    uint64_t v37 = v93;
    *unint64_t v93 = v35;
    v37[1] = v36;
    type metadata accessor for ShareTarget();
LABEL_31:
    return swift_storeEnumTagMultiPayload();
  }
  char v59 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 152))(a1, a2);
  unint64_t v60 = *(void (**)(char *, uint64_t, uint64_t))(v90 + 16);
  char v61 = v20;
  uint64_t v62 = v20;
  uint64_t v63 = v3;
  v60(v62, v3, a1);
  if (v59) {
    char v64 = 1;
  }
  else {
    char v64 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 160))(a1, a2);
  }
  uint64_t v68 = *(void (**)(char *, uint64_t))(v90 + 8);
  v68(v61, a1);
  uint64_t v69 = v92;
  v60((char *)v92, v63, a1);
  if (v64)
  {
    v68((char *)v69, a1);
LABEL_38:
    type metadata accessor for ShareTarget();
    return swift_storeEnumTagMultiPayload();
  }
  char v70 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 168))(a1, a2);
  v68((char *)v69, a1);
  if ((v70 & 1) != 0 || ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2) & 1) == 0) {
    goto LABEL_38;
  }
  uint64_t v71 = v87;
  (*(void (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  uint64_t v72 = v88;
  uint64_t v73 = v8;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v71, 1, v8) == 1)
  {
    outlined destroy of SharingResponse?(v71, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
LABEL_49:
    type metadata accessor for ShareTarget();
    uint64_t v82 = v93;
    *unint64_t v93 = 0;
    v82[1] = 0;
    return swift_storeEnumTagMultiPayload();
  }
  uint64_t v74 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 32);
  os_log_type_t v75 = v91;
  v74(v91, v71, v8);
  uint64_t v76 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 208))(a1, a2);
  if (!v76)
  {
    (*(void (**)(char *, uint64_t))(v72 + 8))(v75, v8);
    goto LABEL_49;
  }
  uint64_t v77 = v76;
  unint64_t v78 = v89;
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v89, v75, v73);
  int v79 = (*(uint64_t (**)(char *, uint64_t))(v72 + 88))(v78, v73);
  if (v79 == *MEMORY[0x263F731B0] || v79 == *MEMORY[0x263F73158])
  {
    (*(void (**)(char *, uint64_t))(v72 + 8))(v75, v73);
    swift_release();
    goto LABEL_49;
  }
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues));
  unint64_t v81 = (char *)v93 + *(int *)(v80 + 48);
  *unint64_t v93 = v77;
  v74(v81, (uint64_t)v75, v73);
  type metadata accessor for ShareTarget();
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v78, v73);
}

uint64_t SharingIntent.isExplicitShareViaMessagesIntent.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](a1);
  uint64_t v36 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v37 = (char *)&v35 - v7;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  id v38 = (char *)&v35 - v9;
  uint64_t v11 = *(unsigned __int8 (**)(uint64_t))(v10 + 16);
  uint64_t v12 = v10;
  char v13 = 1;
  char v14 = 0;
  switch(v11(v8))
  {
    case 2u:
      goto LABEL_3;
    case 3u:
      break;
    default:
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
LABEL_3:
      swift_bridgeObjectRelease();
      char v14 = v13;
      break;
  }
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v16 = v38;
  v15(v38, v1, a1);
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v16, a1);
    char v17 = 1;
  }
  else
  {
    uint64_t v35 = v3;
    uint64_t v18 = v12;
    char v19 = ((uint64_t (*)(uint64_t, uint64_t))v11)(a1, v12);
    uint64_t v20 = v37;
    switch(v19)
    {
      case 1:
      case 2:
        char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v21 = v38;
        v15(v20, (uint64_t)v38, a1);
        if ((v22 & 1) == 0) {
          goto LABEL_15;
        }
        goto LABEL_9;
      case 3:
        uint64_t v21 = v38;
        v15(v37, (uint64_t)v38, a1);
LABEL_15:
        uint64_t v31 = *(void (**)(char *, uint64_t))(v35 + 8);
        v31(v20, a1);
        goto LABEL_17;
      default:
        swift_bridgeObjectRelease();
        uint64_t v21 = v38;
        v15(v20, (uint64_t)v38, a1);
LABEL_9:
        uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v12 + 144);
        v23(a1, v12);
        uint64_t v25 = v24;
        swift_bridgeObjectRelease();
        unint64_t v26 = v36;
        v15(v36, (uint64_t)v20, a1);
        if (v25)
        {
          uint64_t v27 = ((uint64_t (*)(uint64_t, uint64_t))v23)(a1, v18);
          uint64_t v29 = v35;
          if (v28)
          {
            if (v27 == 0xD000000000000012 && v28 == 0x800000022DDEAAD0) {
              char v30 = 1;
            }
            else {
              char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
            }
            uint64_t v33 = *(void (**)(char *, uint64_t))(v29 + 8);
            v33(v26, a1);
            v33(v20, a1);
            v33(v21, a1);
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v32 = *(void (**)(char *, uint64_t))(v35 + 8);
            v32(v26, a1);
            v32(v20, a1);
            v32(v21, a1);
            char v30 = 0;
          }
          char v17 = v30 ^ 1;
        }
        else
        {
          uint64_t v31 = *(void (**)(char *, uint64_t))(v35 + 8);
          v31(v26, a1);
          v31(v20, a1);
LABEL_17:
          v31(v21, a1);
          char v17 = 0;
        }
        break;
    }
  }
  return v17 & 1;
}

uint64_t SharingIntent.isExplicitShareInCallIntent.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v33 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v32 = (char *)&v31 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  os_log_type_t v34 = (char *)&v31 - v11;
  char v13 = *(unsigned __int8 (**)(uint64_t))(v12 + 16);
  char v14 = 1;
  char v15 = 0;
  switch(v13(v10))
  {
    case 1u:
      goto LABEL_3;
    case 3u:
      break;
    default:
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
LABEL_3:
      swift_bridgeObjectRelease();
      char v15 = v14;
      break;
  }
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  char v17 = v34;
  v16(v34, v2, a1);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v17, a1);
    char v18 = 1;
  }
  else
  {
    char v19 = ((uint64_t (*)(uint64_t, uint64_t))v13)(a1, a2);
    uint64_t v21 = v32;
    uint64_t v20 = v33;
    switch(v19)
    {
      case 1:
      case 2:
        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        char v22 = v34;
        v16(v21, (uint64_t)v34, a1);
        if ((v23 & 1) == 0) {
          goto LABEL_12;
        }
        goto LABEL_9;
      case 3:
        char v22 = v34;
        v16(v32, (uint64_t)v34, a1);
LABEL_12:
        unint64_t v26 = *(void (**)(char *, uint64_t))(v5 + 8);
        goto LABEL_13;
      default:
        swift_bridgeObjectRelease();
        char v22 = v34;
        v16(v21, (uint64_t)v34, a1);
LABEL_9:
        char v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 200))(a1, a2);
        v16(v20, (uint64_t)v21, a1);
        if (v24)
        {
          uint64_t v25 = *(void (**)(char *, uint64_t))(v5 + 8);
          v25(v20, a1);
          v25(v21, a1);
          v25(v22, a1);
          char v18 = 1;
        }
        else
        {
          uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 144))(a1, a2);
          if (v28)
          {
            if (v27 == 0xD000000000000012 && v28 == 0x800000022DDEAAD0) {
              char v18 = 1;
            }
            else {
              char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
            }
            uint64_t v29 = *(void (**)(char *, uint64_t))(v5 + 8);
            v29(v33, a1);
            v29(v21, a1);
            v29(v22, a1);
            swift_bridgeObjectRelease();
          }
          else
          {
            unint64_t v26 = *(void (**)(char *, uint64_t))(v5 + 8);
            v26(v20, a1);
LABEL_13:
            v26(v21, a1);
            v26(v22, a1);
            char v18 = 0;
          }
        }
        break;
    }
  }
  return v18 & 1;
}

unint64_t UsoEntity_common_AttachmentType.DefinedValues.matchingFirstPartyAppBundleID.getter()
{
  uint64_t v1 = v0;
  unint64_t v2 = 0xD000000000000013;
  uint64_t v3 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1, v3);
  int v7 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v7 == *MEMORY[0x263F731C0]) {
    return 0xD00000000000001BLL;
  }
  if (v7 != *MEMORY[0x263F731F0])
  {
    if (v7 == *MEMORY[0x263F73160])
    {
      return 0xD000000000000010;
    }
    else if (v7 == *MEMORY[0x263F73168])
    {
      return 0xD000000000000015;
    }
    else if (v7 != *MEMORY[0x263F731D0])
    {
      if (v7 == *MEMORY[0x263F73198])
      {
        return 0xD000000000000019;
      }
      else if (v7 == *MEMORY[0x263F731D8])
      {
        return 0xD000000000000012;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        return 0;
      }
    }
  }
  return v2;
}

id @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  v10[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v5 = (void *)MEMORY[0x230F98C20]();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  id v6 = objc_msgSend(v3, sel_initWithBundleIdentifier_allowPlaceholder_error_, v5, a3 & 1, v10);

  if (v6)
  {
    id v7 = v10[0];
  }
  else
  {
    id v8 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t lazy protocol witness table accessor for type SharingDirectInvocationIntent and conformance SharingDirectInvocationIntent(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingIntentHelper()
{
  return &type metadata for SharingIntentHelper;
}

unint64_t ResolvedRecipients.description.getter(uint64_t a1)
{
  unint64_t v1 = 0xD000000000000020;
  if (a1 != 1)
  {
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    v3._countAndFlagsBits = PermittedRecipients.description.getter(a1);
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = 41;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    return 0xD000000000000027;
  }
  return v1;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvedRecipients()
{
  return ResolvedRecipients.description.getter(*v0);
}

uint64_t ScreenShareType.description.getter()
{
  if (one-time initialization token for typeName != -1) {
    swift_once();
  }
  uint64_t v2 = static ScreenShareType.typeName;
  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = 0x6E65657263732ELL;
  v0._object = (void *)0xE700000000000000;
  String.append(_:)(v0);
  return v2;
}

void ScreenShareType.hash(into:)()
{
}

uint64_t static ScreenShareType.== infix(_:_:)()
{
  return 1;
}

Swift::Int ScreenShareType.hashValue.getter()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ScreenShareType and conformance ScreenShareType()
{
  unint64_t result = lazy protocol witness table cache variable for type ScreenShareType and conformance ScreenShareType;
  if (!lazy protocol witness table cache variable for type ScreenShareType and conformance ScreenShareType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScreenShareType and conformance ScreenShareType);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ScreenShareType()
{
  if (one-time initialization token for typeName != -1) {
    swift_once();
  }
  uint64_t v2 = static ScreenShareType.typeName;
  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = 0x6E65657263732ELL;
  v0._object = (void *)0xE700000000000000;
  String.append(_:)(v0);
  return v2;
}

unsigned char *storeEnumTagSinglePayload for ScreenShareType(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22DD9C070);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScreenShareType()
{
  return &type metadata for ScreenShareType;
}

uint64_t type metadata completion function for SharingFlow()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t SharingFlow.on(input:)()
{
  uint64_t v1 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.default);
  swift_retain();
  int v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v10 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v7 = *(void *)(v1 + 16);
    unint64_t v8 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22DD8A000, v3, v4, "%s: on(input:) called. This should never happen.", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v6, -1, -1);
    MEMORY[0x230F996F0](v5, -1, -1);
  }
  else
  {

    swift_release();
  }
  return 0;
}

uint64_t SharingFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return MEMORY[0x270FA2498](SharingFlow.execute(), 0, 0);
}

uint64_t SharingFlow.execute()()
{
  char v13 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.default);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[4];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v12 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v9 = *(void *)(v5 + 16);
    unint64_t v8 = *(void *)(v5 + 24);
    swift_bridgeObjectRetain();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_22DD8A000, v2, v3, "%s: execute() called. This should never happen.", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v7, -1, -1);
    MEMORY[0x230F996F0](v6, -1, -1);
  }
  else
  {
    swift_release();
  }

  static ExecuteResponse.complete()();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t *SharingFlow.deinit()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 104));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v0 + *(void *)(*v0 + 112));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v0 + *(void *)(*v0 + 120));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v0 + *(void *)(*v0 + 128));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v0 + *(void *)(*v0 + 136));
  return v0;
}

uint64_t SharingFlow.__deallocating_deinit()
{
  SharingFlow.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t type metadata accessor for SharingFlow()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of static SharingFlowState.failedWithCommonError(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t associated type witness table accessor for PromptManaging.StateType : PromptFlowState in SharingFlow<A>(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 88) + 8);
}

uint64_t instantiation function for generic protocol witness table for SharingFlow<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for Flow.on(input:) in conformance SharingFlow<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208))() & 1;
}

uint64_t protocol witness for Flow.execute() in conformance SharingFlow<A>(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 216) + **(int **)(**(void **)v1 + 216));
  BOOL v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *BOOL v4 = v2;
  v4[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance SharingFlow<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

unint64_t SharingFlowError.description.getter(char a1)
{
  unint64_t result = 0x6F486E4F6C6C6163;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x6C61436E49746F6ELL;
      break;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance SharingFlowError()
{
  return SharingFlowError.description.getter(*v0);
}

uint64_t getEnumTagSinglePayload for SharingFlowError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SharingFlowError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22DD9CA94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingFlowError()
{
  return &type metadata for SharingFlowError;
}

unint64_t lazy protocol witness table accessor for type SharingFlowError and conformance SharingFlowError()
{
  unint64_t result = lazy protocol witness table cache variable for type SharingFlowError and conformance SharingFlowError;
  if (!lazy protocol witness table cache variable for type SharingFlowError and conformance SharingFlowError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingFlowError and conformance SharingFlowError);
  }
  return result;
}

uint64_t SharingYesNoPromptFlowStrategy.actionForInput(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 + 8) + 64))();
}

uint64_t SharingYesNoPromptFlowStrategy.makePromptForYesNoResponse()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 16) = v3;
  uint64_t v7 = *(void *)(a3 + 8);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 88) + **(int **)(v7 + 88));
  int v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v8;
  *int v8 = v4;
  v8[1] = SharingYesNoPromptFlowStrategy.makePromptForYesNoResponse();
  return v10(a1, a2, v7);
}

uint64_t SharingYesNoPromptFlowStrategy.makePromptForYesNoResponse()()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 32) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](SharingYesNoPromptFlowStrategy.makePromptForYesNoResponse(), 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t SharingYesNoPromptFlowStrategy.makeFlowCancelledResponse()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 16) = v3;
  uint64_t v7 = *(void *)(a3 + 8);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 96) + **(int **)(v7 + 96));
  int v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v8;
  *int v8 = v4;
  v8[1] = SharingYesNoPromptFlowStrategy.makeFlowCancelledResponse();
  return v10(a1, a2, v7);
}

uint64_t SharingYesNoPromptFlowStrategy.makeFlowCancelledResponse()()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 32) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](SharingYesNoPromptFlowStrategy.makeFlowCancelledResponse(), 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

id protocol witness for ConversationParticipant.handle.getter in conformance TUConversationParticipant()
{
  id v1 = objc_msgSend(*v0, sel_handle);

  return v1;
}

uint64_t dispatch thunk of ConversationParticipant.handle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

unint64_t ExpanseFlowExitValue.description.getter()
{
  int v1 = *v0;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v2 = 0x656C646E61686E75;
  }
  else {
    uint64_t v2 = 0x64656C646E6168;
  }
  if (v1) {
    unint64_t v3 = 0xE900000000000064;
  }
  else {
    unint64_t v3 = 0xE700000000000000;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  return 0xD000000000000015;
}

uint64_t ExpanseFlowExitValue.rawValue.getter()
{
  if (*v0) {
    return 0x656C646E61686E75;
  }
  else {
    return 0x64656C646E6168;
  }
}

SiriExpanseInternal::ExpanseFlowExitValue_optional __swiftcall ExpanseFlowExitValue.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  unint64_t v4 = v1;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ExpanseFlowExitValue.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *unint64_t v4 = v7;
  return result;
}

unint64_t lazy protocol witness table accessor for type ExpanseFlowExitValue and conformance ExpanseFlowExitValue()
{
  unint64_t result = lazy protocol witness table cache variable for type ExpanseFlowExitValue and conformance ExpanseFlowExitValue;
  if (!lazy protocol witness table cache variable for type ExpanseFlowExitValue and conformance ExpanseFlowExitValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseFlowExitValue and conformance ExpanseFlowExitValue);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ExpanseFlowExitValue()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ExpanseFlowExitValue()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExpanseFlowExitValue()
{
  return Hasher._finalize()();
}

SiriExpanseInternal::ExpanseFlowExitValue_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ExpanseFlowExitValue(Swift::String *a1)
{
  return ExpanseFlowExitValue.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ExpanseFlowExitValue(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x64656C646E6168;
  if (*v1) {
    uint64_t v2 = 0x656C646E61686E75;
  }
  unint64_t v3 = 0xE700000000000000;
  if (*v1) {
    unint64_t v3 = 0xE900000000000064;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ExpanseFlowExitValue(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unsigned char *storeEnumTagSinglePayload for ExpanseFlowExitValue(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22DD9D4B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExpanseFlowExitValue()
{
  return &type metadata for ExpanseFlowExitValue;
}

uint64_t specialized SharingPromptFlowStrategy.parseResponse(input:)(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for Input();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized SharingPromptFlowStrategy.parseResponse(input:), 0, 0);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for Input();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized SharingPromptFlowStrategy.parseResponse(input:), 0, 0);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for Input();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized SharingPromptFlowStrategy.parseResponse(input:), 0, 0);
}

uint64_t specialized SharingPromptFlowStrategy.parseResponse(input:)()
{
  uint64_t v21 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[7];
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.default);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[10];
  uint64_t v9 = v0[11];
  uint64_t v11 = v0[9];
  if (v8)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v20 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    lazy protocol witness table accessor for type SimpleSharingYesNoPromptFlowStrategy and conformance SimpleSharingYesNoPromptFlowStrategy((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, MEMORY[0x263F6FF40]);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl(&dword_22DD8A000, v6, v7, "SharingPromptFlowStrategy: parseResponse received input: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v13, -1, -1);
    MEMORY[0x230F996F0](v12, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[11], v0[9]);
  }

  uint64_t v16 = v0[6];
  uint64_t v17 = v0[8] + 136;
  swift_beginAccess();
  outlined init with copy of SharingResponse?(v17, v16, &demangling cache variable for type metadata for SharingIntent?);
  swift_task_dealloc();
  char v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  uint64_t v21;
  void *v22;
  uint64_t v23;

  uint64_t v22 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[7];
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.default);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[10];
  uint64_t v9 = v0[11];
  uint64_t v11 = v0[9];
  if (v8)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v21 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    lazy protocol witness table accessor for type SimpleSharingYesNoPromptFlowStrategy and conformance SimpleSharingYesNoPromptFlowStrategy((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, MEMORY[0x263F6FF40]);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl(&dword_22DD8A000, v6, v7, "SharingPromptFlowStrategy: parseResponse received input: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v13, -1, -1);
    MEMORY[0x230F996F0](v12, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[11], v0[9]);
  }

  uint64_t v16 = v0[6];
  uint64_t v17 = v0[8] + OBJC_IVAR____TtC19SiriExpanseInternal36SimpleSharingYesNoPromptFlowStrategy_responseValue;
  swift_beginAccess();
  char v18 = type metadata accessor for SimpleConfirmationResponseProvider();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  swift_task_dealloc();
  char v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  void *v21;
  uint64_t v22;

  uint64_t v21 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[7];
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.default);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[10];
  uint64_t v9 = v0[11];
  uint64_t v11 = v0[9];
  if (v8)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v20 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    lazy protocol witness table accessor for type SimpleSharingYesNoPromptFlowStrategy and conformance SimpleSharingYesNoPromptFlowStrategy((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, MEMORY[0x263F6FF40]);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl(&dword_22DD8A000, v6, v7, "SharingPromptFlowStrategy: parseResponse received input: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v13, -1, -1);
    MEMORY[0x230F996F0](v12, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[11], v0[9]);
  }

  uint64_t v16 = v0[6];
  uint64_t v17 = v0[8] + 136;
  swift_beginAccess();
  outlined init with copy of SharingResponse?(v17, v16, &demangling cache variable for type metadata for ConfirmScreenShareOrMessageSendFlowStrategy.Decision?);
  swift_task_dealloc();
  char v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t SimpleSharingYesNoPromptFlowStrategy.actionForIntent(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SimpleConfirmationResponseProvider();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  switch((*(unsigned __int8 (**)(uint64_t, uint64_t))(v12 + 184))(v11, v12))
  {
    case 1u:
      uint64_t v13 = (unsigned int *)MEMORY[0x263F6FC90];
      goto LABEL_4;
    case 2u:
      uint64_t result = static ActionForInput.cancel()();
      break;
    case 3u:
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.default);
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        uint64_t v23 = swift_slowAlloc();
        v26[0] = v23;
        *(_DWORD *)uint64_t v22 = 136315138;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v24 = static SimpleSharingYesNoPromptFlowStrategy.typeName;
        unint64_t v25 = unk_2685B7480;
        swift_bridgeObjectRetain();
        void v26[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22DD8A000, v20, v21, "%s: SharingIntent has no confirmation value; ignoring input.",
          v22,
          0xCu);
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v23, -1, -1);
        MEMORY[0x230F996F0](v22, -1, -1);
      }

      uint64_t result = static ActionForInput.ignore()();
      break;
    default:
      uint64_t v13 = (unsigned int *)MEMORY[0x263F6FC98];
LABEL_4:
      uint64_t v14 = *v13;
      uint64_t v15 = type metadata accessor for ConfirmationResponse();
      uint64_t v16 = *(void *)(v15 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 104))(v6, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v6, 0, 1, v15);
      SimpleConfirmationResponseProvider.init(_:)();
      uint64_t v17 = v2 + OBJC_IVAR____TtC19SiriExpanseInternal36SimpleSharingYesNoPromptFlowStrategy_responseValue;
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v8 + 24))(v17, v10, v7);
      swift_endAccess();
      static ActionForInput.handle()();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      break;
  }
  return result;
}

uint64_t SimpleSharingYesNoPromptFlowStrategy.makeConfirmationRejectedResponse()(uint64_t a1)
{
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = v1;
  return MEMORY[0x270FA2498](SimpleSharingYesNoPromptFlowStrategy.makeConfirmationRejectedResponse(), 0, 0);
}

uint64_t SimpleSharingYesNoPromptFlowStrategy.makeConfirmationRejectedResponse()()
{
  outlined init with copy of SharingResponse?(*(void *)(v0 + 104) + 56, v0 + 56, &demangling cache variable for type metadata for SharingResponse?);
  if (*(void *)(v0 + 80))
  {
    uint64_t v1 = *(void *)(v0 + 104);
    outlined init with take of SharingIntent((long long *)(v0 + 56), v0 + 16);
    __swift_project_boxed_opaque_existential_1((void *)(v1 + 136), *(void *)(v1 + 160));
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v2;
    *uint64_t v2 = v0;
    v2[1] = SimpleSharingYesNoPromptFlowStrategy.makeConfirmationRejectedResponse();
    uint64_t v3 = *(void *)(v0 + 96);
    return ResponseExecutor.execute(response:)(v3, v0 + 16);
  }
  else
  {
    outlined destroy of SharingResponse?(v0 + 56);
    type metadata accessor for EmptyOutput();
    static EmptyOutput.instance.getter();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = SimpleSharingYesNoPromptFlowStrategy.makeConfirmationRejectedResponse();
  }
  else {
    uint64_t v2 = SharingPromptFlowStrategy.makePrompt();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t SimpleSharingYesNoPromptFlowStrategy.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of SharingResponse?(v0 + 56);
  outlined destroy of SharingResponse?(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  uint64_t v1 = v0 + OBJC_IVAR____TtC19SiriExpanseInternal36SimpleSharingYesNoPromptFlowStrategy_responseValue;
  uint64_t v2 = type metadata accessor for SimpleConfirmationResponseProvider();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v3, v4);
}

uint64_t ObjC metadata update function for SimpleSharingYesNoPromptFlowStrategy()
{
  return type metadata accessor for SimpleSharingYesNoPromptFlowStrategy();
}

uint64_t type metadata accessor for SimpleSharingYesNoPromptFlowStrategy()
{
  uint64_t result = type metadata singleton initialization cache for SimpleSharingYesNoPromptFlowStrategy;
  if (!type metadata singleton initialization cache for SimpleSharingYesNoPromptFlowStrategy) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for SimpleSharingYesNoPromptFlowStrategy()
{
  uint64_t result = type metadata accessor for SimpleConfirmationResponseProvider();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t associated type witness table accessor for PromptForConfirmationFlowStrategyAsync.AnswerType : ConfirmationResponseProviding in SimpleSharingYesNoPromptFlowStrategy()
{
  return MEMORY[0x263F6FF10];
}

uint64_t protocol witness for YesNoPromptFlowStrategy.makePromptForYesNoResponse() in conformance SimpleSharingYesNoPromptFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable();
  *uint64_t v5 = v2;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return SharingYesNoPromptFlowStrategy.makePromptForYesNoResponse()(a1, a2, WitnessTable);
}

uint64_t protocol witness for SharingPromptFlowStrategy.promptResponse.getter in conformance SimpleSharingYesNoPromptFlowStrategy@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ResponseExecuting(*v1 + 16, a1);
}

uint64_t protocol witness for SharingPromptFlowStrategy.userCancelledResponse.getter in conformance SimpleSharingYesNoPromptFlowStrategy@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SharingResponse?(*v1 + 96, a1, &demangling cache variable for type metadata for SharingResponse?);
}

uint64_t protocol witness for SharingPromptFlowStrategy.responseExecutor.getter in conformance SimpleSharingYesNoPromptFlowStrategy@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ResponseExecuting(*v1 + 136, a1);
}

uint64_t protocol witness for SharingPromptFlowStrategy.actionForIntent(_:) in conformance SimpleSharingYesNoPromptFlowStrategy(void *a1)
{
  return SimpleSharingYesNoPromptFlowStrategy.actionForIntent(_:)(a1);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.actionForInput(_:) in conformance SimpleSharingYesNoPromptFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return SharingYesNoPromptFlowStrategy.actionForInput(_:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance SimpleSharingYesNoPromptFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized SharingPromptFlowStrategy.parseResponse(input:)
                                                + async function pointer to specialized SharingPromptFlowStrategy.parseResponse(input:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.parseResponse(input:);
  return v7(a1, a2);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makePromptForConfirmation(itemToConfirm:) in conformance SimpleSharingYesNoPromptFlowStrategy(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  uint64_t v4 = type metadata accessor for SimpleSharingYesNoPromptFlowStrategy();
  uint64_t v5 = lazy protocol witness table accessor for type SimpleSharingYesNoPromptFlowStrategy and conformance SimpleSharingYesNoPromptFlowStrategy(&lazy protocol witness table cache variable for type SimpleSharingYesNoPromptFlowStrategy and conformance SimpleSharingYesNoPromptFlowStrategy, (void (*)(uint64_t))type metadata accessor for SimpleSharingYesNoPromptFlowStrategy);
  *uint64_t v3 = v1;
  v3[1] = dispatch thunk of SharingPromptFlowStrategy.parseResponse(input:);
  return MEMORY[0x270F66330](a1, v4, v5);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:) in conformance SimpleSharingYesNoPromptFlowStrategy(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  uint64_t v4 = type metadata accessor for SimpleSharingYesNoPromptFlowStrategy();
  uint64_t v5 = lazy protocol witness table accessor for type SimpleSharingYesNoPromptFlowStrategy and conformance SimpleSharingYesNoPromptFlowStrategy(&lazy protocol witness table cache variable for type SimpleSharingYesNoPromptFlowStrategy and conformance SimpleSharingYesNoPromptFlowStrategy, (void (*)(uint64_t))type metadata accessor for SimpleSharingYesNoPromptFlowStrategy);
  *uint64_t v3 = v1;
  v3[1] = dispatch thunk of SharingPromptFlowStrategy.parseResponse(input:);
  return MEMORY[0x270F66338](a1, v4, v5);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:) in conformance SimpleSharingYesNoPromptFlowStrategy(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  uint64_t v4 = type metadata accessor for SimpleSharingYesNoPromptFlowStrategy();
  uint64_t v5 = lazy protocol witness table accessor for type SimpleSharingYesNoPromptFlowStrategy and conformance SimpleSharingYesNoPromptFlowStrategy(&lazy protocol witness table cache variable for type SimpleSharingYesNoPromptFlowStrategy and conformance SimpleSharingYesNoPromptFlowStrategy, (void (*)(uint64_t))type metadata accessor for SimpleSharingYesNoPromptFlowStrategy);
  *uint64_t v3 = v1;
  v3[1] = dispatch thunk of SharingPromptFlowStrategy.parseResponse(input:);
  return MEMORY[0x270F66340](a1, v4, v5);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse() in conformance SimpleSharingYesNoPromptFlowStrategy(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = dispatch thunk of SharingPromptFlowStrategy.parseResponse(input:);
  v4[12] = a1;
  v4[13] = v1;
  return MEMORY[0x270FA2498](SimpleSharingYesNoPromptFlowStrategy.makeConfirmationRejectedResponse(), 0, 0);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse() in conformance SimpleSharingYesNoPromptFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable();
  *uint64_t v5 = v2;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.parseResponse(input:);
  return SharingYesNoPromptFlowStrategy.makeFlowCancelledResponse()(a1, a2, WitnessTable);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:) in conformance SimpleSharingYesNoPromptFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = dispatch thunk of SharingPromptFlowStrategy.parseResponse(input:);
  return MEMORY[0x270F666F8](a1, a2, a3, a4);
}

uint64_t base witness table accessor for PromptForConfirmationFlowStrategyAsync in SimpleSharingYesNoPromptFlowStrategy()
{
  return lazy protocol witness table accessor for type SimpleSharingYesNoPromptFlowStrategy and conformance SimpleSharingYesNoPromptFlowStrategy(&lazy protocol witness table cache variable for type SimpleSharingYesNoPromptFlowStrategy and conformance SimpleSharingYesNoPromptFlowStrategy, (void (*)(uint64_t))type metadata accessor for SimpleSharingYesNoPromptFlowStrategy);
}

uint64_t instantiation function for generic protocol witness table for SimpleSharingYesNoPromptFlowStrategy(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type SimpleSharingYesNoPromptFlowStrategy and conformance SimpleSharingYesNoPromptFlowStrategy(&lazy protocol witness table cache variable for type SimpleSharingYesNoPromptFlowStrategy and conformance SimpleSharingYesNoPromptFlowStrategy, (void (*)(uint64_t))type metadata accessor for SimpleSharingYesNoPromptFlowStrategy);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type SimpleSharingYesNoPromptFlowStrategy and conformance SimpleSharingYesNoPromptFlowStrategy(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of SharingResponse?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of SharingResponse?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingResponse?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t one-time initialization function for target()
{
  _StringGuts.grow(_:)(22);
  uint64_t result = swift_bridgeObjectRelease();
  static SharingNLContextProvider.PromptResponse.Confirmation.target = 0xD000000000000025;
  *(void *)algn_2685B7538 = 0x800000022DDEACA0;
  return result;
}

void one-time initialization function for options()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_22DDE6B70;
  if (one-time initialization token for target != -1) {
    swift_once();
  }
  uint64_t v4 = static SharingNLContextProvider.PromptResponse.Confirmation.target;
  uint64_t v7 = *(void *)algn_2685B7538;
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = 0x592E65756C61562ELL;
  v1._object = (void *)0xEA00000000005345;
  String.append(_:)(v1);
  *(void *)(v0 + 32) = v4;
  *(void *)(v0 + 40) = v7;
  uint64_t v5 = static SharingNLContextProvider.PromptResponse.Confirmation.target;
  uint64_t v8 = *(void *)algn_2685B7538;
  swift_bridgeObjectRetain();
  v2._countAndFlagsBits = 0x4E2E65756C61562ELL;
  v2._object = (void *)0xE90000000000004FLL;
  String.append(_:)(v2);
  *(void *)(v0 + 48) = v5;
  *(void *)(v0 + 56) = v8;
  uint64_t v6 = static SharingNLContextProvider.PromptResponse.Confirmation.target;
  uint64_t v9 = *(void *)algn_2685B7538;
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = 0x432E65756C61562ELL;
  v3._object = (void *)0xED00004C45434E41;
  String.append(_:)(v3);
  *(void *)(v0 + 64) = v6;
  *(void *)(v0 + 72) = v9;
  static SharingNLContextProvider.PromptResponse.Confirmation.options = v0;
}

uint64_t static SharingNLContextProvider.makeNLContextUpdateForShareTargetPrompt()()
{
  NLContextUpdate.init()();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  type metadata accessor for UsoEntityBuilder_common_Message();
  swift_allocObject();
  UsoEntityBuilder_common_Message.init()();
  type metadata accessor for UsoEntityBuilder_common_Attachment();
  swift_allocObject();
  UsoEntityBuilder_common_Attachment.init()();
  dispatch thunk of UsoEntityBuilder_common_Message.addAttachments(value:)();
  type metadata accessor for UsoTaskBuilder_share_common_Message();
  swift_allocObject();
  uint64_t v0 = UsoTaskBuilder_share_common_Message.init()();
  dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  uint64_t v1 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_22DDE63C0;
  static SharingNLContextProvider.makePromptedSystemDialogAct(for:)(v0, v3 + v2);
  NLContextUpdate.nluSystemDialogActs.setter();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t static SharingNLContextProvider.makePromptedSystemDialogAct(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v20 = type metadata accessor for Siri_Nlu_External_SystemPrompted();
  uint64_t v8 = *(void *)(v20 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v20);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v19 - v12;
  Siri_Nlu_External_SystemPrompted.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_22DDE6B80;
  *(void *)(v14 + 32) = a1;
  uint64_t v21 = v14;
  specialized Array._endMutation()();
  uint64_t v15 = v21;
  uint64_t v16 = type metadata accessor for UsoBuilderOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v6, 1, 1, v16);
  swift_retain();
  MEMORY[0x230F986A0](v15, v6);
  swift_bridgeObjectRelease();
  outlined destroy of UsoBuilderOptions?((uint64_t)v6);
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  swift_release();
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v20);
  }
  Siri_Nlu_External_SystemPrompted.target.setter();
  Siri_Nlu_External_SystemDialogAct.init()();
  uint64_t v18 = v20;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v20);
  Siri_Nlu_External_SystemDialogAct.prompted.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v18);
}

uint64_t static SharingNLContextProvider.makeNLContextUpdateForConfirmationPrompt(sharingAction:)(char a1)
{
  NLContextUpdate.init()();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_22DDE63C0;
  if (one-time initialization token for target != -1) {
    swift_once();
  }
  uint64_t v3 = *(void *)algn_2685B7538;
  *(void *)(v2 + 32) = static SharingNLContextProvider.PromptResponse.Confirmation.target;
  *(void *)(v2 + 40) = v3;
  swift_bridgeObjectRetain();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  if (one-time initialization token for options != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  NLContextUpdate.weightedPromptResponseOptions.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  if (a1)
  {
    type metadata accessor for UsoTaskBuilder_unshare_common_Message();
    swift_allocObject();
    uint64_t v4 = UsoTaskBuilder_unshare_common_Message.init()();
  }
  else
  {
    type metadata accessor for UsoTaskBuilder_share_common_Message();
    swift_allocObject();
    uint64_t v4 = UsoTaskBuilder_share_common_Message.init()();
  }
  uint64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  uint64_t v6 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_22DDE63C0;
  static SharingNLContextProvider.makeConfirmationSystemDialogAct(for:)(v5, v8 + v7);
  NLContextUpdate.nluSystemDialogActs.setter();

  return swift_release();
}

uint64_t static SharingNLContextProvider.makeConfirmationSystemDialogAct(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v37 = type metadata accessor for Siri_Nlu_External_SystemOffered();
  uint64_t v35 = *(void *)(v37 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v37);
  os_log_type_t v34 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v31 = (char *)&v29 - v5;
  uint64_t v38 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v33 = *(void *)(v38 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v38);
  uint64_t v32 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v40 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  uint64_t v14 = *(void *)(v40 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v40);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v29 - v18;
  Siri_Nlu_External_UserWantedToProceed.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_22DDE6B80;
  *(void *)(v20 + 32) = a1;
  uint64_t v41 = v20;
  specialized Array._endMutation()();
  uint64_t v21 = v41;
  uint64_t v22 = type metadata accessor for UsoBuilderOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v12, 1, 1, v22);
  swift_retain();
  MEMORY[0x230F986A0](v21, v12);
  swift_bridgeObjectRelease();
  outlined destroy of UsoBuilderOptions?((uint64_t)v12);
  uint64_t v23 = v39;
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  swift_release();
  if (v23) {
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v19, v40);
  }
  Siri_Nlu_External_UserWantedToProceed.reference.setter();
  Siri_Nlu_External_UserDialogAct.init()();
  uint64_t v30 = v14;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v40);
  Siri_Nlu_External_UserDialogAct.wantedToProceed.setter();
  unint64_t v25 = v31;
  Siri_Nlu_External_SystemOffered.init()();
  uint64_t v26 = v33;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v32, v9, v38);
  Siri_Nlu_External_SystemOffered.offeredAct.setter();
  Siri_Nlu_External_SystemDialogAct.init()();
  uint64_t v27 = v35;
  uint64_t v28 = v37;
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v34, v25, v37);
  Siri_Nlu_External_SystemDialogAct.offered.setter();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v25, v28);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v38);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v19, v40);
}

uint64_t outlined destroy of UsoBuilderOptions?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for SharingNLContextProvider()
{
  return &type metadata for SharingNLContextProvider;
}

uint64_t NeedsShareTargetFlowStrategy.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of SharingResponse?(v0 + 56, &demangling cache variable for type metadata for SharingResponse?);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  outlined destroy of SharingResponse?(v0 + 136, &demangling cache variable for type metadata for SharingIntent?);

  return MEMORY[0x270FA0228](v0, 176, 7);
}

uint64_t type metadata accessor for NeedsShareTargetFlowStrategy()
{
  return self;
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.actionForInput(_:) in conformance NeedsShareTargetFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return SharingYesNoPromptFlowStrategy.actionForInput(_:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance NeedsShareTargetFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized SharingPromptFlowStrategy.parseResponse(input:)
                                                + async function pointer to specialized SharingPromptFlowStrategy.parseResponse(input:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance NeedsShareTargetFlowStrategy;
  return v7(a1, a2);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance NeedsShareTargetFlowStrategy()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return MEMORY[0x270FA2498](protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance NeedsShareTargetFlowStrategy, 0, 0);
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makePromptForValue() in conformance NeedsShareTargetFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable();
  *uint64_t v5 = v2;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.parseResponse(input:);
  return SharingYesNoPromptFlowStrategy.makePromptForYesNoResponse()(a1, a2, WitnessTable);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance NeedsShareTargetFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = dispatch thunk of SharingPromptFlowStrategy.parseResponse(input:);
  return MEMORY[0x270F66450](a1, a2, a3);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence() in conformance NeedsShareTargetFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = dispatch thunk of SharingPromptFlowStrategy.parseResponse(input:);
  return MEMORY[0x270F66458](a1, a2, a3);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance NeedsShareTargetFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable();
  *uint64_t v5 = v2;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return SharingYesNoPromptFlowStrategy.makeFlowCancelledResponse()(a1, a2, WitnessTable);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeErrorResponse(_:) in conformance NeedsShareTargetFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = dispatch thunk of SharingPromptFlowStrategy.parseResponse(input:);
  return MEMORY[0x270F66448](a1, a2, a3, a4);
}

uint64_t protocol witness for SharingPromptFlowStrategy.userCancelledResponse.getter in conformance NeedsShareTargetFlowStrategy@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SharingResponse?(*v1 + 56, a1);
}

uint64_t protocol witness for SharingPromptFlowStrategy.responseExecutor.getter in conformance NeedsShareTargetFlowStrategy@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ResponseExecuting(*v1 + 96, a1);
}

uint64_t protocol witness for SharingPromptFlowStrategy.actionForIntent(_:) in conformance NeedsShareTargetFlowStrategy(uint64_t a1)
{
  uint64_t v2 = *v1;
  outlined init with copy of ResponseExecuting(a1, (uint64_t)v5);
  outlined init with take of SharingIntent?((uint64_t)v5, (uint64_t)v4);
  swift_beginAccess();
  outlined assign with take of SharingIntent?((uint64_t)v4, v2 + 136);
  swift_endAccess();
  return static ActionForInput.handle()();
}

unint64_t instantiation function for generic protocol witness table for NeedsShareTargetFlowStrategy(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type NeedsShareTargetFlowStrategy and conformance NeedsShareTargetFlowStrategy();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type NeedsShareTargetFlowStrategy and conformance NeedsShareTargetFlowStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type NeedsShareTargetFlowStrategy and conformance NeedsShareTargetFlowStrategy;
  if (!lazy protocol witness table cache variable for type NeedsShareTargetFlowStrategy and conformance NeedsShareTargetFlowStrategy)
  {
    type metadata accessor for NeedsShareTargetFlowStrategy();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NeedsShareTargetFlowStrategy and conformance NeedsShareTargetFlowStrategy);
  }
  return result;
}

uint64_t outlined init with take of SharingIntent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingIntent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of SharingIntent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingIntent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of SharingResponse?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingResponse?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized PromptManaging.executeYesNoConfirmationFlow(withPrompt:confirmationRejectedDialog:flowCancelledDialog:onYes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  v35[1] = a6;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ResponseExecuting(a1, (uint64_t)v41);
  outlined init with copy of SharingResponse?(a2, (uint64_t)v40);
  outlined init with copy of SharingResponse?(a3, (uint64_t)v39);
  outlined init with copy of ResponseExecuting(v7 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_responseExecutor, (uint64_t)v37);
  uint64_t v16 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v37, v38);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (void *)((char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  uint64_t v20 = *v18;
  uint64_t v21 = type metadata accessor for ResponseExecutor();
  v36[4] = &protocol witness table for ResponseExecutor;
  void v36[3] = v21;
  v36[0] = v20;
  type metadata accessor for SimpleSharingYesNoPromptFlowStrategy();
  uint64_t v22 = (void *)swift_allocObject();
  uint64_t v23 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v36, v21);
  MEMORY[0x270FA5388](v23);
  unint64_t v25 = (void *)((char *)v35 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  uint64_t v27 = *v25;
  v22[20] = v21;
  v22[21] = &protocol witness table for ResponseExecutor;
  v22[17] = v27;
  uint64_t v28 = *MEMORY[0x263F6FC90];
  uint64_t v29 = type metadata accessor for ConfirmationResponse();
  uint64_t v30 = *(void *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 104))(v15, v28, v29);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v15, 0, 1, v29);
  SimpleConfirmationResponseProvider.init(_:)();
  outlined init with take of SharingIntent(v41, (uint64_t)(v22 + 2));
  outlined init with take of SharingResponse?((uint64_t)v40, (uint64_t)(v22 + 7));
  outlined init with take of SharingResponse?((uint64_t)v39, (uint64_t)(v22 + 12));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  outlined init with copy of ResponseExecuting(v7 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_outputPublisher, (uint64_t)v41);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForConfirmationFlowWrapper<SimpleSharingYesNoPromptFlowStrategy>);
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v22;
  outlined init with copy of ResponseExecuting((uint64_t)v41, (uint64_t)v40);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForConfirmationFlowAsync<(), SimpleConfirmationResponseProvider>);
  swift_allocObject();
  lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type SimpleSharingYesNoPromptFlowStrategy and conformance SimpleSharingYesNoPromptFlowStrategy, (void (*)(uint64_t))type metadata accessor for SimpleSharingYesNoPromptFlowStrategy);
  swift_retain();
  uint64_t v32 = PromptForConfirmationFlowAsync.init<A>(itemToConfirm:strategy:outputPublisher:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  *(void *)(v31 + 24) = v32;
  *(void *)&v41[0] = v31;
  uint64_t v33 = (void *)swift_allocObject();
  v33[2] = v7;
  v33[3] = a4;
  v33[4] = a5;
  lazy protocol witness table accessor for type PromptForConfirmationFlowWrapper<SimpleSharingYesNoPromptFlowStrategy> and conformance PromptForConfirmationFlowWrapper<A>();
  swift_retain();
  swift_retain();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  return swift_release();
}

uint64_t StartSharingConfirmationFlow.State.description.getter()
{
  uint64_t v1 = v0;
  outlined init with take of StartSharingConfirmationFlow.State(v0, (uint64_t)&v18);
  uint64_t v2 = v18;
  outlined init with take of StartSharingConfirmationFlow.State(v1, (uint64_t)&v19);
  int v3 = (v25 >> 4) & 3;
  if (v3)
  {
    uint64_t v4 = v19;
    if (v3 == 1)
    {
      v25 &= 0xCFu;
      uint64_t v26 = 0;
      unint64_t v27 = 0xE000000000000000;
      id v5 = v2;
      _StringGuts.grow(_:)(26);
      v6._countAndFlagsBits = 0xD000000000000017;
      v6._object = (void *)0x800000022DDEADB0;
      String.append(_:)(v6);
      v15[0] = v4;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      _print_unlocked<A, B>(_:_:)();
      v7._countAndFlagsBits = 41;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      outlined release of StartSharingConfirmationFlow.State((uint64_t)v1, (void (*)(void, void, void, void, void, void, void))outlined consume of StartSharingConfirmationFlow.State);
      return v26;
    }
    else
    {
      uint64_t v11 = v22 | v23 | v24;
      if (v25 != 32 || v11 | v19 | v21 | v20)
      {
        uint64_t v12 = v11 | v21 | v20;
        if (v25 == 32 && v19 == 1 && !v12)
        {
          return 0xD000000000000014;
        }
        else if (v25 == 32 && v19 == 2 && !v12)
        {
          return 0xD000000000000016;
        }
        else if (v25 == 32 && v19 == 3 && !v12)
        {
          uint64_t v26 = 0;
          unint64_t v27 = 0xE000000000000000;
          _StringGuts.grow(_:)(19);
          swift_bridgeObjectRelease();
          return 0xD00000000000002DLL;
        }
        else
        {
          BOOL v14 = v19 == 4 && v12 == 0;
          if (v25 == 32 && v14) {
            return 0xD000000000000010;
          }
          else {
            return 0xD00000000000001ELL;
          }
        }
      }
      else
      {
        return 0x696C616974696E69;
      }
    }
  }
  else
  {
    v25 &= 0xCFu;
    outlined init with take of ConfirmationContext((uint64_t)&v19, (uint64_t)&v26);
    v15[0] = 0;
    v15[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(18);
    uint64_t v16 = 0;
    unint64_t v17 = 0xE000000000000000;
    v9._countAndFlagsBits = 0x43687469576E7572;
    v9._object = (void *)0xEF28747865746E6FLL;
    String.append(_:)(v9);
    outlined init with take of ConfirmationContext((uint64_t)&v26, (uint64_t)v15);
    _print_unlocked<A, B>(_:_:)();
    v10._countAndFlagsBits = 41;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    return v16;
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StartSharingConfirmationFlow.State()
{
  outlined init with take of StartSharingConfirmationFlow.State(v0, (uint64_t)v2);
  return StartSharingConfirmationFlow.State.description.getter();
}

void StartSharingConfirmationFlow.state.didset(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.default);
  outlined release of StartSharingConfirmationFlow.State(a1, (void (*)(void, void, void, void, void, void, void))outlined copy of StartSharingConfirmationFlow.State);
  swift_retain();
  outlined release of StartSharingConfirmationFlow.State(a1, (void (*)(void, void, void, void, void, void, void))outlined copy of StartSharingConfirmationFlow.State);
  swift_retain();
  oslog = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v17 = v15;
    *(_DWORD *)uint64_t v6 = 136315650;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v7 = static StartSharingConfirmationFlow.typeName;
    unint64_t v8 = *(void *)algn_2685B75B8;
    swift_bridgeObjectRetain();
    v18[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    outlined release of StartSharingConfirmationFlow.State(a1, (void (*)(void, void, void, void, void, void, void))outlined copy of StartSharingConfirmationFlow.State);
    uint64_t started = StartSharingConfirmationFlow.State.description.getter();
    unint64_t v11 = v10;
    outlined release of StartSharingConfirmationFlow.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of StartSharingConfirmationFlow.State);
    v18[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(started, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of StartSharingConfirmationFlow.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of StartSharingConfirmationFlow.State);
    outlined release of StartSharingConfirmationFlow.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of StartSharingConfirmationFlow.State);
    *(_WORD *)(v6 + 22) = 2080;
    outlined init with take of StartSharingConfirmationFlow.State((long long *)(v2 + 16), (uint64_t)v18);
    outlined release of StartSharingConfirmationFlow.State((uint64_t)v18, (void (*)(void, void, void, void, void, void, void))outlined copy of StartSharingConfirmationFlow.State);
    uint64_t v12 = StartSharingConfirmationFlow.State.description.getter();
    unint64_t v14 = v13;
    outlined release of StartSharingConfirmationFlow.State((uint64_t)v18, (void (*)(void, void, void, void, void, void, void))outlined consume of StartSharingConfirmationFlow.State);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_22DD8A000, oslog, v5, "%s: transitioned from state %s to %s", (uint8_t *)v6, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v15, -1, -1);
    MEMORY[0x230F996F0](v6, -1, -1);
  }
  else
  {
    outlined release of StartSharingConfirmationFlow.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of StartSharingConfirmationFlow.State);
    outlined release of StartSharingConfirmationFlow.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of StartSharingConfirmationFlow.State);
    swift_release_n();
  }
}

uint64_t StartSharingConfirmationFlow.exitValue.getter()
{
  uint64_t v1 = v0;
  int v3 = (long long *)(v0 + 2);
  unint64_t v2 = v0[2];
  unsigned int v4 = *((unsigned __int8 *)v3 + 48);
  int v5 = (v4 >> 4) & 3;
  if (!v5) {
    goto LABEL_19;
  }
  if (v5 == 1)
  {
    id v6 = (id)v2;
    return v2;
  }
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[5] | v1[6] | v1[7];
  if (v4 == 32 && (v9 | v2 | v7 | v8) == 0)
  {
LABEL_19:
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.default);
    swift_retain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v27 = v18;
      *(_DWORD *)uint64_t v17 = 136315394;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v19 = static StartSharingConfirmationFlow.typeName;
      unint64_t v20 = *(void *)algn_2685B75B8;
      swift_bridgeObjectRetain();
      v28[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2080;
      outlined init with take of StartSharingConfirmationFlow.State(v3, (uint64_t)v28);
      outlined release of StartSharingConfirmationFlow.State((uint64_t)v28, (void (*)(void, void, void, void, void, void, void))outlined copy of StartSharingConfirmationFlow.State);
      uint64_t started = StartSharingConfirmationFlow.State.description.getter();
      unint64_t v23 = v22;
      outlined release of StartSharingConfirmationFlow.State((uint64_t)v28, (void (*)(void, void, void, void, void, void, void))outlined consume of StartSharingConfirmationFlow.State);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(started, v23, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_22DD8A000, v15, v16, "%s: exitValue accessed with flow in unexpected state %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v18, -1, -1);
      MEMORY[0x230F996F0](v17, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    lazy protocol witness table accessor for type ExpanseError and conformance ExpanseError();
    return swift_allocError();
  }
  else
  {
    uint64_t v11 = v9 | v7 | v8;
    if (v4 == 32 && v2 == 1 && v11 == 0)
    {
      return 0;
    }
    else if (v4 == 32 && v2 == 2 && !v11)
    {
      return 1;
    }
    else if (v4 == 32 && v2 == 3 && !v11)
    {
      return 2;
    }
    else
    {
      if (v11) {
        BOOL v25 = 0;
      }
      else {
        BOOL v25 = v2 == 4;
      }
      if (v25 && v4 == 32) {
        return 3;
      }
      else {
        return 4;
      }
    }
  }
}

uint64_t StartSharingConfirmationFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 424) = a1;
  *(void *)(v2 + 432) = v1;
  return MEMORY[0x270FA2498](StartSharingConfirmationFlow.execute(), 0, 0);
}

uint64_t StartSharingConfirmationFlow.execute()()
{
  uint64_t v1 = *(void *)(v0 + 432);
  outlined init with take of StartSharingConfirmationFlow.State((long long *)(v1 + 16), v0 + 184);
  uint64_t v31 = *(void *)(v1 + 16);
  uint64_t v33 = *(void *)(v1 + 24);
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  unsigned __int8 v6 = *(unsigned char *)(v1 + 64);
  outlined init with take of StartSharingConfirmationFlow.State((long long *)(v0 + 184), v0 + 128);
  unsigned int v7 = *(unsigned __int8 *)(v0 + 176);
  int v8 = (v7 >> 4) & 3;
  if (!v8)
  {
    uint64_t v30 = v0 + 184;
    *(unsigned char *)(v0 + 176) = v7 & 0xCF;
    outlined init with take of ConfirmationContext(v0 + 128, v0 + 72);
    outlined init with take of ConfirmationContext(v0 + 72, v0 + 16);
    unsigned int v9 = *(unsigned __int8 *)(v0 + 64);
    if (v9 >> 6)
    {
      if (v9 >> 6 == 1)
      {
        uint64_t v10 = *(void *)(v0 + 424);
        *(unsigned char *)(v0 + 64) = v9 & 0x3F;
        unint64_t v11 = *(void *)(v0 + 16);
        char v12 = *(unsigned char *)(v0 + 24);
        outlined copy of ConfirmationContext(v31, v33, v2, v3, v4, v5, v6);
        StartSharingConfirmationFlow.confirmationFlowForScreenContext(_:)(v11, v12, v10);
      }
      else
      {
        uint64_t v22 = *(void *)(v0 + 424);
        *(unsigned char *)(v0 + 64) = v9 & 0x3F;
        uint64_t v23 = *(void *)(v0 + 32);
        char v24 = *(unsigned char *)(v0 + 40);
        outlined release of StartSharingConfirmationFlow.State(v30, (void (*)(void, void, void, void, void, void, void))outlined copy of StartSharingConfirmationFlow.State);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        StartSharingConfirmationFlow.confirmSingleWindowSharingRequestOnPlatformWithoutSupport(currentlySharedTarget:requestedRecipients:)(v24, v23, v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      outlined release of StartSharingConfirmationFlow.State(v30, (void (*)(void, void, void, void, void, void, void))outlined consume of StartSharingConfirmationFlow.State);
    }
    else
    {
      *(unsigned char *)(v0 + 64) = v9 & 0x3F;
      uint64_t v18 = *(void *)(v0 + 56);
      uint64_t v19 = *(void *)(v0 + 424);
      if (*(unsigned char *)(v0 + 50) == 1)
      {
        char v20 = v9 & 1;
        uint64_t v21 = v0 + 184;
        outlined release of StartSharingConfirmationFlow.State(v30, (void (*)(void, void, void, void, void, void, void))outlined copy of StartSharingConfirmationFlow.State);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        StartSharingConfirmationFlow.confirmSingleWindowSharingRequestOnPlatformWithoutSupport(currentlySharedTarget:requestedRecipients:)(v20, v18, v19);
      }
      else
      {
        uint64_t v25 = *(void *)(v1 + 16);
        uint64_t v32 = *(void *)(v1 + 32);
        uint64_t v34 = *(void *)(v1 + 24);
        uint64_t v28 = *(void *)(v1 + 48);
        uint64_t v29 = *(void *)(v1 + 40);
        uint64_t v27 = *(void *)(v1 + 56);
        *(void *)(v1 + 16) = 2;
        *(_OWORD *)(v1 + 24) = 0u;
        *(_OWORD *)(v1 + 40) = 0u;
        *(void *)(v1 + 56) = 0;
        unsigned int v26 = *(unsigned __int8 *)(v1 + 64);
        *(unsigned char *)(v1 + 64) = 32;
        uint64_t v21 = v0 + 184;
        outlined release of StartSharingConfirmationFlow.State(v30, (void (*)(void, void, void, void, void, void, void))outlined copy of StartSharingConfirmationFlow.State);
        outlined release of StartSharingConfirmationFlow.State(v30, (void (*)(void, void, void, void, void, void, void))outlined copy of StartSharingConfirmationFlow.State);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined consume of StartSharingConfirmationFlow.State(v25, v34, v32, v29, v28, v27, v26);
        StartSharingConfirmationFlow.state.didset(v30);
        outlined release of StartSharingConfirmationFlow.State(v30, (void (*)(void, void, void, void, void, void, void))outlined consume of StartSharingConfirmationFlow.State);
        static ExecuteResponse.complete()();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of StartSharingConfirmationFlow.State(v21, (void (*)(void, void, void, void, void, void, void))outlined consume of StartSharingConfirmationFlow.State);
    }
    goto LABEL_14;
  }
  if (v8 == 1)
  {
    *(unsigned char *)(v0 + 176) = v7 & 0xCF;
LABEL_13:
    static ExecuteResponse.complete()();
LABEL_14:
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
  int8x16_t v13 = vorrq_s8(*(int8x16_t *)(v0 + 144), *(int8x16_t *)(v0 + 160));
  int8x8_t v14 = vorr_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
  if (v7 != 32 || *(void *)&v14 | *(void *)(v0 + 128) | *(void *)(v0 + 136)) {
    goto LABEL_13;
  }
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 440) = v15;
  *uint64_t v15 = v0;
  v15[1] = StartSharingConfirmationFlow.execute();
  return StartSharingConfirmationFlow.makeConfirmationContext()(v0 + 352);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  long long v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 448) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = StartSharingConfirmationFlow.execute();
  }
  else
  {
    uint64_t v4 = *(_OWORD *)(v2 + 368);
    *(_OWORD *)(v2 + 456) = *(_OWORD *)(v2 + 352);
    *(_OWORD *)(v2 + 472) = v4;
    *(_OWORD *)(v2 + 488) = *(_OWORD *)(v2 + 384);
    *(unsigned char *)(v2 + 65) = *(unsigned char *)(v2 + 400);
    uint64_t v3 = StartSharingConfirmationFlow.execute();
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  long long v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v1 = *(unsigned char *)(v0 + 65);
  uint64_t v2 = *(void *)(v0 + 496);
  uint64_t v3 = *(void *)(v0 + 472);
  unint64_t v11 = *(_OWORD *)(v0 + 456);
  char v12 = *(_OWORD *)(v0 + 480);
  uint64_t v4 = *(void *)(v0 + 432);
  outlined init with take of StartSharingConfirmationFlow.State((long long *)(v4 + 16), v0 + 296);
  uint64_t v5 = *(void *)(v4 + 32);
  int8x16_t v13 = *(void *)(v4 + 24);
  int8x8_t v14 = *(void *)(v4 + 16);
  unsigned __int8 v6 = *(void *)(v4 + 40);
  unsigned int v7 = *(void *)(v4 + 48);
  int v8 = *(void *)(v4 + 56);
  *(_OWORD *)(v4 + 16) = v11;
  *(void *)(v4 + 32) = v3;
  *(_OWORD *)(v4 + 40) = v12;
  *(void *)(v4 + 56) = v2;
  LODWORD(v2) = *(unsigned __int8 *)(v4 + 64);
  *(unsigned char *)(v4 + 64) = v1;
  outlined release of StartSharingConfirmationFlow.State(v0 + 296, (void (*)(void, void, void, void, void, void, void))outlined copy of StartSharingConfirmationFlow.State);
  outlined release of StartSharingConfirmationFlow.State(v0 + 352, (void (*)(void, void, void, void, void, void, void))outlined copy of ConfirmationContext);
  outlined consume of StartSharingConfirmationFlow.State(v14, v13, v5, v6, v7, v8, v2);
  StartSharingConfirmationFlow.state.didset(v0 + 296);
  outlined release of StartSharingConfirmationFlow.State(v0 + 352, (void (*)(void, void, void, void, void, void, void))outlined consume of ConfirmationContext);
  outlined release of StartSharingConfirmationFlow.State(v0 + 296, (void (*)(void, void, void, void, void, void, void))outlined consume of StartSharingConfirmationFlow.State);
  static ExecuteResponse.ongoing(requireInput:)();
  unsigned int v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  id v23;
  id v24;
  uint64_t (*v25)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;

  uint64_t v30 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[56];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.default);
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  unsigned __int8 v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    unsigned int v7 = swift_slowAlloc();
    int v8 = (void *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    uint64_t v29 = v27;
    *(_DWORD *)unsigned int v7 = 136315394;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    unsigned int v9 = (void *)v0[56];
    unint64_t v11 = static StartSharingConfirmationFlow.typeName;
    uint64_t v10 = *(void *)algn_2685B75B8;
    swift_bridgeObjectRetain();
    v0[51] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2112;
    char v12 = v9;
    int8x16_t v13 = _swift_stdlib_bridgeErrorToNSError();
    v0[52] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *int v8 = v13;

    _os_log_impl(&dword_22DD8A000, v5, v6, "%s: Failed to initialize ConfirmationContext with error: %@", (uint8_t *)v7, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v8, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v27, -1, -1);
    MEMORY[0x230F996F0](v7, -1, -1);
  }
  else
  {
    int8x8_t v14 = (void *)v0[56];
  }
  uint64_t v15 = (void *)v0[56];
  os_log_type_t v16 = v0[54];
  outlined init with take of StartSharingConfirmationFlow.State((long long *)(v16 + 16), (uint64_t)(v0 + 30));
  uint64_t v17 = *(void *)(v16 + 24);
  uint64_t v28 = *(void *)(v16 + 16);
  uint64_t v18 = *(void *)(v16 + 32);
  uint64_t v19 = *(void *)(v16 + 40);
  char v20 = *(void *)(v16 + 48);
  uint64_t v21 = *(void *)(v16 + 56);
  *(void *)(v16 + 16) = v15;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *(void *)(v16 + 56) = 0;
  uint64_t v22 = *(unsigned __int8 *)(v16 + 64);
  *(unsigned char *)(v16 + 64) = 16;
  uint64_t v23 = v15;
  char v24 = v15;
  outlined release of StartSharingConfirmationFlow.State((uint64_t)(v0 + 30), (void (*)(void, void, void, void, void, void, void))outlined copy of StartSharingConfirmationFlow.State);
  outlined consume of StartSharingConfirmationFlow.State(v28, v17, v18, v19, v20, v21, v22);
  StartSharingConfirmationFlow.state.didset((uint64_t)(v0 + 30));

  outlined release of StartSharingConfirmationFlow.State((uint64_t)(v0 + 30), (void (*)(void, void, void, void, void, void, void))outlined consume of StartSharingConfirmationFlow.State);
  static ExecuteResponse.ongoing(requireInput:)();
  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t StartSharingConfirmationFlow.makeConfirmationContext()(uint64_t a1)
{
  v2[26] = a1;
  v2[27] = v1;
  type metadata accessor for ShareTarget();
  v2[28] = swift_task_alloc();
  return MEMORY[0x270FA2498](StartSharingConfirmationFlow.makeConfirmationContext(), 0, 0);
}

void StartSharingConfirmationFlow.makeConfirmationContext()()
{
  uint64_t v2 = v0[27];
  uint64_t v1 = v0[28];
  outlined init with copy of ResponseExecuting(v2 + 72, (uint64_t)(v0 + 9));
  outlined init with copy of Responses.StartSharing.ConfirmShareEntireScreen(v2 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_requestedTarget, v1, (uint64_t (*)(void))type metadata accessor for ShareTarget);
  outlined init with copy of ResponseExecuting(v2 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_call, (uint64_t)(v0 + 14));
  uint64_t v3 = type metadata accessor for SharePlayHelper();
  uint64_t inited = swift_initStackObject();
  v0[29] = inited;
  v0[19] = inited;
  v0[22] = v3;
  v0[23] = &protocol witness table for SharePlayHelper;
  unsigned __int8 v6 = (char *)&async function pointer to specialized ConfirmationContext.init(intent:requestedTarget:resolvedTarget:recipients:call:sharePlayHelper:)
     + async function pointer to specialized ConfirmationContext.init(intent:requestedTarget:resolvedTarget:recipients:call:sharePlayHelper:);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[30] = v5;
  *uint64_t v5 = v0;
  v5[1] = StartSharingConfirmationFlow.makeConfirmationContext();
  __asm { BR              X8; specialized ConfirmationContext.init(intent:requestedTarget:resolvedTarget:recipients:call:sharePlayHelper:) }
}

uint64_t StartSharingConfirmationFlow.makeConfirmationContext()()
{
  uint64_t v2 = (void *)*v1;
  v2[31] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](StartSharingConfirmationFlow.makeConfirmationContext(), 0, 0);
  }
  else
  {
    outlined init with take of ConfirmationContext((uint64_t)(v2 + 2), v2[26]);
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v2[1];
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t StartSharingConfirmationFlow.executeYesNoConfirmationFlow(with:onYes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t started = type metadata accessor for Responses.StartSharing.ShareRequestCancelled(0);
  MEMORY[0x270FA5388](started);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v10 = -101;
  static DialogPhase.canceled.getter();
  v15[3] = started;
  v15[4] = (uint64_t)&protocol witness table for Responses.StartSharing.ShareRequestCancelled;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  outlined init with copy of Responses.StartSharing.ConfirmShareEntireScreen((uint64_t)v10, (uint64_t)boxed_opaque_existential_1, type metadata accessor for Responses.StartSharing.ShareRequestCancelled);
  v14[3] = started;
  v14[4] = (uint64_t)&protocol witness table for Responses.StartSharing.ShareRequestCancelled;
  char v12 = __swift_allocate_boxed_opaque_existential_1(v14);
  outlined init with copy of Responses.StartSharing.ConfirmShareEntireScreen((uint64_t)v10, (uint64_t)v12, type metadata accessor for Responses.StartSharing.ShareRequestCancelled);
  specialized PromptManaging.executeYesNoConfirmationFlow(withPrompt:confirmationRejectedDialog:flowCancelledDialog:onYes:)(a1, (uint64_t)v15, (uint64_t)v14, a2, a3, a4);
  outlined destroy of Responses.StartSharing.ConfirmShareEntireScreen((uint64_t)v10, type metadata accessor for Responses.StartSharing.ShareRequestCancelled);
  outlined destroy of SharingResponse?((uint64_t)v14);
  return outlined destroy of SharingResponse?((uint64_t)v15);
}

uint64_t StartSharingConfirmationFlow.confirmationFlowForScreenContext(_:)@<X0>(unint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t started = type metadata accessor for Responses.StartSharing.ConfirmReadyToShare(0);
  MEMORY[0x270FA5388](started);
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Locale();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v12 = type metadata accessor for Responses.StartSharing.ConfirmShareWithEveryoneInCall(0);
  MEMORY[0x270FA5388](v12);
  int8x8_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    outlined init with take of StartSharingConfirmationFlow.State((long long *)(v4 + 16), (uint64_t)v55);
    uint64_t v15 = *(void *)(v4 + 16);
    uint64_t v16 = *(void *)(v4 + 24);
    uint64_t v17 = *(void *)(v4 + 32);
    uint64_t v18 = *(void *)(v4 + 40);
    uint64_t v19 = *(void *)(v4 + 48);
    uint64_t v20 = *(void *)(v4 + 56);
    *(void *)(v4 + 16) = 1;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(void *)(v4 + 56) = 0;
    unsigned int v21 = *(unsigned __int8 *)(v4 + 64);
    *(unsigned char *)(v4 + 64) = 32;
    outlined release of StartSharingConfirmationFlow.State((uint64_t)v55, (void (*)(void, void, void, void, void, void, void))outlined copy of StartSharingConfirmationFlow.State);
    outlined consume of StartSharingConfirmationFlow.State(v15, v16, v17, v18, v19, v20, v21);
    StartSharingConfirmationFlow.state.didset((uint64_t)v55);
    outlined release of StartSharingConfirmationFlow.State((uint64_t)v55, (void (*)(void, void, void, void, void, void, void))outlined consume of StartSharingConfirmationFlow.State);
    return static ExecuteResponse.complete()();
  }
  if (!a1)
  {
    if (one-time initialization token for default == -1)
    {
LABEL_18:
      uint64_t v30 = type metadata accessor for Logger();
      __swift_project_value_buffer(v30, (uint64_t)static Logger.default);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v51 = a3;
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        uint64_t v34 = swift_slowAlloc();
        v55[0] = v34;
        *(_DWORD *)uint64_t v33 = 136315138;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v35 = static StartSharingConfirmationFlow.typeName;
        unint64_t v36 = *(void *)algn_2685B75B8;
        swift_bridgeObjectRetain();
        uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22DD8A000, v31, v32, "%s: Confirming with the user that they're ready to share their screen", v33, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v34, -1, -1);
        MEMORY[0x230F996F0](v33, -1, -1);

        a3 = v51;
      }
      else
      {
      }
      *uint64_t v10 = -118;
      static DialogPhase.clarification.getter();
      uint64_t v37 = &v10[*(int *)(started + 24)];
      static SharingNLContextProvider.makeNLContextUpdateForConfirmationPrompt(sharingAction:)(0);
      uint64_t v38 = type metadata accessor for NLContextUpdate();
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 0, 1, v38);
      uint64_t v39 = &v10[*(int *)(started + 28)];
      *uint64_t v39 = 1;
      *((void *)v39 + 2) = 0;
      *((void *)v39 + 3) = 0;
      *((void *)v39 + 1) = 0;
      uint64_t v56 = started;
      unint64_t v57 = &protocol witness table for Responses.StartSharing.ConfirmReadyToShare;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v55);
      outlined init with copy of Responses.StartSharing.ConfirmShareEntireScreen((uint64_t)v10, (uint64_t)boxed_opaque_existential_1, type metadata accessor for Responses.StartSharing.ConfirmReadyToShare);
      swift_retain();
      StartSharingConfirmationFlow.executeYesNoConfirmationFlow(with:onYes:)((uint64_t)v55, (uint64_t)partial apply for closure #1 in StartSharingConfirmationFlow.confirmSingleWindowSharingRequestOnPlatformWithoutSupport(currentlySharedTarget:requestedRecipients:), v4, a3);
      swift_release();
      uint64_t v41 = (uint64_t)v10;
      uint64_t v42 = type metadata accessor for Responses.StartSharing.ConfirmReadyToShare;
      goto LABEL_27;
    }
LABEL_29:
    swift_once();
    goto LABEL_18;
  }
  os_log_t v52 = v14;
  uint64_t v54 = MEMORY[0x263F8EE78];
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t started = _CocoaArrayWrapper.endIndex.getter();
    if (started) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t started = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (started)
    {
LABEL_6:
      uint64_t v49 = v12;
      uint64_t v50 = v4;
      uint64_t v51 = a3;
      uint64_t v53 = type metadata accessor for DialogPerson();
      if (started >= 1)
      {
        uint64_t v23 = 0;
        unint64_t v24 = a1 & 0xC000000000000001;
        unint64_t v25 = a1;
        do
        {
          if (v24) {
            id v26 = (id)MEMORY[0x230F98F30](v23, a1);
          }
          else {
            id v26 = *(id *)(a1 + 8 * v23 + 32);
          }
          id v27 = v26;
          static Device.current.getter();
          __swift_project_boxed_opaque_existential_1(v55, v56);
          dispatch thunk of DeviceState.siriLocale.getter();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
          uint64_t v28 = DialogPerson.__allocating_init(person:locale:useConversationalName:)();

          if (v28)
          {
            MEMORY[0x230F98CD0]();
            if (*(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          ++v23;
          a1 = v25;
        }
        while (started != v23);
        swift_bridgeObjectRelease();
        uint64_t v29 = v54;
        uint64_t v4 = v50;
        a3 = v51;
        uint64_t v12 = v49;
        goto LABEL_26;
      }
      __break(1u);
      goto LABEL_29;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v29 = MEMORY[0x263F8EE78];
LABEL_26:
  uint64_t v43 = (uint64_t)v52;
  *os_log_t v52 = -115;
  static DialogPhase.clarification.getter();
  uint64_t v44 = v43 + *(int *)(v12 + 24);
  static SharingNLContextProvider.makeNLContextUpdateForConfirmationPrompt(sharingAction:)(0);
  uint64_t v45 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v44, 0, 1, v45);
  uint64_t v46 = v43 + *(int *)(v12 + 28);
  *(unsigned char *)uint64_t v46 = 0;
  *(void *)(v46 + 8) = 0;
  *(void *)(v46 + 16) = 0;
  *(void *)(v46 + 24) = v29;
  uint64_t v56 = v12;
  unint64_t v57 = &protocol witness table for Responses.StartSharing.ConfirmShareWithEveryoneInCall;
  uint64_t v47 = __swift_allocate_boxed_opaque_existential_1(v55);
  outlined init with copy of Responses.StartSharing.ConfirmShareEntireScreen(v43, (uint64_t)v47, type metadata accessor for Responses.StartSharing.ConfirmShareWithEveryoneInCall);
  swift_retain();
  StartSharingConfirmationFlow.executeYesNoConfirmationFlow(with:onYes:)((uint64_t)v55, (uint64_t)partial apply for closure #1 in StartSharingConfirmationFlow.confirmSingleWindowSharingRequestOnPlatformWithoutSupport(currentlySharedTarget:requestedRecipients:), v4, a3);
  swift_release();
  uint64_t v41 = v43;
  uint64_t v42 = type metadata accessor for Responses.StartSharing.ConfirmShareWithEveryoneInCall;
LABEL_27:
  outlined destroy of Responses.StartSharing.ConfirmShareEntireScreen(v41, v42);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
}

uint64_t closure #2 in StartSharingConfirmationFlow.confirmationFlowForScreenContext(_:)(uint64_t a1)
{
  outlined init with take of StartSharingConfirmationFlow.State((long long *)(a1 + 16), (uint64_t)v10);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  *(void *)(a1 + 16) = 3;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  unsigned int v8 = *(unsigned __int8 *)(a1 + 64);
  *(unsigned char *)(a1 + 64) = 32;
  outlined release of StartSharingConfirmationFlow.State((uint64_t)v10, (void (*)(void, void, void, void, void, void, void))outlined copy of StartSharingConfirmationFlow.State);
  outlined consume of StartSharingConfirmationFlow.State(v2, v3, v4, v5, v6, v7, v8);
  StartSharingConfirmationFlow.state.didset((uint64_t)v10);
  return outlined release of StartSharingConfirmationFlow.State((uint64_t)v10, (void (*)(void, void, void, void, void, void, void))outlined consume of StartSharingConfirmationFlow.State);
}

uint64_t StartSharingConfirmationFlow.confirmSingleWindowSharingRequestOnPlatformWithoutSupport(currentlySharedTarget:requestedRecipients:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t started = type metadata accessor for Responses.StartSharing.ConfirmShareEntireScreen(0);
  MEMORY[0x270FA5388](started);
  uint64_t v9 = (char *)&v23[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    BOOL v18 = a2 != 0;
    *uint64_t v9 = -117;
    static DialogPhase.clarification.getter();
    uint64_t v19 = &v9[*(int *)(started + 24)];
    static SharingNLContextProvider.makeNLContextUpdateForConfirmationPrompt(sharingAction:)(0);
    uint64_t v20 = type metadata accessor for NLContextUpdate();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 0, 1, v20);
    v9[*(int *)(started + 28)] = v18;
    v23[3] = started;
    v23[4] = (uint64_t)&protocol witness table for Responses.StartSharing.ConfirmShareEntireScreen;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23);
    outlined init with copy of Responses.StartSharing.ConfirmShareEntireScreen((uint64_t)v9, (uint64_t)boxed_opaque_existential_1, type metadata accessor for Responses.StartSharing.ConfirmShareEntireScreen);
    swift_retain();
    StartSharingConfirmationFlow.executeYesNoConfirmationFlow(with:onYes:)((uint64_t)v23, (uint64_t)partial apply for closure #1 in StartSharingConfirmationFlow.confirmSingleWindowSharingRequestOnPlatformWithoutSupport(currentlySharedTarget:requestedRecipients:), v3, a3);
    swift_release();
    outlined destroy of Responses.StartSharing.ConfirmShareEntireScreen((uint64_t)v9, type metadata accessor for Responses.StartSharing.ConfirmShareEntireScreen);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  else
  {
    outlined init with take of StartSharingConfirmationFlow.State((long long *)(v3 + 16), (uint64_t)v23);
    uint64_t v10 = *(void *)(v3 + 16);
    uint64_t v11 = *(void *)(v3 + 24);
    uint64_t v12 = *(void *)(v3 + 32);
    uint64_t v13 = *(void *)(v3 + 40);
    uint64_t v14 = *(void *)(v3 + 48);
    uint64_t v15 = *(void *)(v3 + 56);
    *(void *)(v3 + 16) = 5;
    *(_OWORD *)(v3 + 24) = 0u;
    *(_OWORD *)(v3 + 40) = 0u;
    *(void *)(v3 + 56) = 0;
    unsigned int v16 = *(unsigned __int8 *)(v3 + 64);
    *(unsigned char *)(v3 + 64) = 32;
    outlined release of StartSharingConfirmationFlow.State((uint64_t)v23, (void (*)(void, void, void, void, void, void, void))outlined copy of StartSharingConfirmationFlow.State);
    outlined consume of StartSharingConfirmationFlow.State(v10, v11, v12, v13, v14, v15, v16);
    StartSharingConfirmationFlow.state.didset((uint64_t)v23);
    outlined release of StartSharingConfirmationFlow.State((uint64_t)v23, (void (*)(void, void, void, void, void, void, void))outlined consume of StartSharingConfirmationFlow.State);
    return static ExecuteResponse.complete()();
  }
}

uint64_t StartSharingConfirmationFlow.__deallocating_deinit()
{
  outlined consume of StartSharingConfirmationFlow.State(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned __int8 *)(v0 + 64));
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  outlined destroy of Responses.StartSharing.ConfirmShareEntireScreen(v0 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_requestedTarget, (uint64_t (*)(void))type metadata accessor for ShareTarget);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_call);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_responseExecutor);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_outputPublisher);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t ObjC metadata update function for StartSharingConfirmationFlow()
{
  return type metadata accessor for StartSharingConfirmationFlow();
}

uint64_t type metadata accessor for StartSharingConfirmationFlow()
{
  uint64_t result = type metadata singleton initialization cache for StartSharingConfirmationFlow;
  if (!type metadata singleton initialization cache for StartSharingConfirmationFlow) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for StartSharingConfirmationFlow()
{
  uint64_t result = type metadata accessor for ShareTarget();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t outlined copy of StartSharingConfirmationFlow.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  int v7 = (a7 >> 4) & 3;
  if (v7 == 1) {
    return (uint64_t)(id)a1;
  }
  if (!v7) {
    return outlined copy of ConfirmationContext(a1, a2, a3, a4, a5, a6, a7);
  }
  return a1;
}

uint64_t outlined copy of ConfirmationContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  int v7 = a7 >> 6;
  if (v7 == 2)
  {
LABEL_5:
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  if (v7 != 1)
  {
    if (a7 >> 6) {
      return result;
    }
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
LABEL_6:

  return swift_bridgeObjectRetain();
}

void destroy for StartSharingConfirmationFlow.State(uint64_t a1)
{
}

void outlined consume of StartSharingConfirmationFlow.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  int v7 = (a7 >> 4) & 3;
  if (v7 == 1)
  {
  }
  else if (!v7)
  {
    outlined consume of ConfirmationContext(a1, a2, a3, a4, a5, a6, a7);
  }
}

uint64_t outlined consume of ConfirmationContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  int v7 = a7 >> 6;
  if (v7 == 2)
  {
LABEL_5:
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  if (v7 != 1)
  {
    if (a7 >> 6) {
      return result;
    }
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
LABEL_6:

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StartSharingConfirmationFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  unsigned int v9 = *(unsigned __int8 *)(a2 + 48);
  outlined copy of StartSharingConfirmationFlow.State(*(void *)a2, v4, v5, v6, v7, v8, v9);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for StartSharingConfirmationFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  unsigned int v9 = *(unsigned __int8 *)(a2 + 48);
  outlined copy of StartSharingConfirmationFlow.State(*(void *)a2, v4, v5, v6, v7, v8, v9);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  unsigned int v16 = *(unsigned __int8 *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v9;
  outlined consume of StartSharingConfirmationFlow.State(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for StartSharingConfirmationFlow.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  unsigned int v11 = *(unsigned __int8 *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v3;
  outlined consume of StartSharingConfirmationFlow.State(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for StartSharingConfirmationFlow.State(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = (*(void *)(a1 + 32) >> 2) & 0x3F80 | (*(void *)(a1 + 32) >> 1) | (*(void *)(a1 + 32) >> 3) & 0x1FC000 | (*(void *)(a1 + 32) >> 4) & 0xFFE00000;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for StartSharingConfirmationFlow.State(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 40) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 32) = (-4 * a2) & 0xFE00 | (2 * (-a2 & 0x7FLL)) & 0xFFFFFFF00101FFFFLL | ((((unint64_t)-a2 >> 14) & 0x7F) << 17) & 0xFFFFFFF001FFFFFFLL | ((unint64_t)(-a2 >> 21) << 25);
      *(void *)(a1 + 40) = 0;
      *(unsigned char *)(a1 + 48) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for StartSharingConfirmationFlow.State(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 48);
  if (((v1 >> 4) & 2) != 0) {
    return (*(_DWORD *)a1 + 2);
  }
  else {
    return (v1 >> 4) & 3;
  }
}

uint64_t destructiveProjectEnumData for StartSharingConfirmationFlow.State(uint64_t result)
{
  *(unsigned char *)(result + 48) &= 0xCFu;
  return result;
}

uint64_t destructiveInjectEnumTag for StartSharingConfirmationFlow.State(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    char v2 = *(unsigned char *)(result + 48) & 0xC1 | (16 * (a2 & 3));
    *(void *)(result + 32) &= 0x1010101uLL;
    *(unsigned char *)(result + 48) = v2;
  }
  else
  {
    *(void *)double result = a2 - 2;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)(result + 40) = 0;
    *(unsigned char *)(result + 48) = 32;
  }
  return result;
}

ValueMetadata *type metadata accessor for StartSharingConfirmationFlow.State()
{
  return &type metadata for StartSharingConfirmationFlow.State;
}

unint64_t instantiation function for generic protocol witness table for StartSharingConfirmationFlow.State(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type StartSharingConfirmationFlow.State and conformance StartSharingConfirmationFlow.State();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type StartSharingConfirmationFlow.State and conformance StartSharingConfirmationFlow.State()
{
  unint64_t result = lazy protocol witness table cache variable for type StartSharingConfirmationFlow.State and conformance StartSharingConfirmationFlow.State;
  if (!lazy protocol witness table cache variable for type StartSharingConfirmationFlow.State and conformance StartSharingConfirmationFlow.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StartSharingConfirmationFlow.State and conformance StartSharingConfirmationFlow.State);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StartSharingConfirmationFlow.State and conformance StartSharingConfirmationFlow.State;
  if (!lazy protocol witness table cache variable for type StartSharingConfirmationFlow.State and conformance StartSharingConfirmationFlow.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StartSharingConfirmationFlow.State and conformance StartSharingConfirmationFlow.State);
  }
  return result;
}

uint64_t protocol witness for Flow.execute() in conformance StartSharingConfirmationFlow(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  v5[53] = a1;
  v5[54] = v4;
  return MEMORY[0x270FA2498](StartSharingConfirmationFlow.execute(), 0, 0);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance StartSharingConfirmationFlow@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = StartSharingConfirmationFlow.exitValue.getter();
  *a1 = result;
  return result;
}

uint64_t specialized closure #1 in PromptManaging.executeYesNoConfirmationFlow(withPrompt:confirmationRejectedDialog:flowCancelledDialog:onYes:)(uint64_t a1, void (*a2)(char *, uint64_t), void (*a3)(void), uint64_t a4)
{
  swift_retain();
  swift_retain();
  specialized PromptManaging.processPromptFlowExitValue<A>(_:onValueReceived:)(a1, (uint64_t)a2, a3, a4, a2);
  swift_release();

  return swift_release();
}

uint64_t specialized StartSharingConfirmationFlow.on(input:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v17 = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v11 = static StartSharingConfirmationFlow.typeName;
    unint64_t v12 = *(void *)algn_2685B75B8;
    swift_bridgeObjectRetain();
    uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    lazy protocol witness table accessor for type Input and conformance Input((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, MEMORY[0x263F6FF40]);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    _os_log_impl(&dword_22DD8A000, v7, v8, "%s: received input %s - this flow should never receive input, ignoring it...", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v10, -1, -1);
    MEMORY[0x230F996F0](v9, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  return 0;
}

uint64_t outlined init with take of StartSharingConfirmationFlow.State(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  long long v4 = a1[2];
  *(unsigned char *)(a2 + 48) = *((unsigned char *)a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v2;
  return a2;
}

uint64_t outlined init with take of ConfirmationContext(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for closure #1 in StartSharingConfirmationFlow.confirmSingleWindowSharingRequestOnPlatformWithoutSupport(currentlySharedTarget:requestedRecipients:)()
{
  return closure #2 in StartSharingConfirmationFlow.confirmationFlowForScreenContext(_:)(v0);
}

uint64_t outlined init with take of SharingResponse?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingResponse?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type Input and conformance Input(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22DDA42E8()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for specialized closure #1 in PromptManaging.executeYesNoConfirmationFlow(withPrompt:confirmationRejectedDialog:flowCancelledDialog:onYes:)(uint64_t a1)
{
  return specialized closure #1 in PromptManaging.executeYesNoConfirmationFlow(withPrompt:confirmationRejectedDialog:flowCancelledDialog:onYes:)(a1, *(void (**)(char *, uint64_t))(v1 + 16), *(void (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

unint64_t lazy protocol witness table accessor for type PromptForConfirmationFlowWrapper<SimpleSharingYesNoPromptFlowStrategy> and conformance PromptForConfirmationFlowWrapper<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptForConfirmationFlowWrapper<SimpleSharingYesNoPromptFlowStrategy> and conformance PromptForConfirmationFlowWrapper<A>;
  if (!lazy protocol witness table cache variable for type PromptForConfirmationFlowWrapper<SimpleSharingYesNoPromptFlowStrategy> and conformance PromptForConfirmationFlowWrapper<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PromptForConfirmationFlowWrapper<SimpleSharingYesNoPromptFlowStrategy>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptForConfirmationFlowWrapper<SimpleSharingYesNoPromptFlowStrategy> and conformance PromptForConfirmationFlowWrapper<A>);
  }
  return result;
}

uint64_t outlined init with copy of Responses.StartSharing.ConfirmShareEntireScreen(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined release of StartSharingConfirmationFlow.State(uint64_t a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type ExpanseError and conformance ExpanseError()
{
  unint64_t result = lazy protocol witness table cache variable for type ExpanseError and conformance ExpanseError;
  if (!lazy protocol witness table cache variable for type ExpanseError and conformance ExpanseError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseError and conformance ExpanseError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpanseError and conformance ExpanseError;
  if (!lazy protocol witness table cache variable for type ExpanseError and conformance ExpanseError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseError and conformance ExpanseError);
  }
  return result;
}

uint64_t outlined destroy of Responses.StartSharing.ConfirmShareEntireScreen(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *initializeBufferWithCopyOfBuffer for StartSharingConfirmationFlow.ConfirmationResult(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    id v4 = v3;
  }
  *a1 = v3;
  return a1;
}

void destroy for StartSharingConfirmationFlow.ConfirmationResult(void **a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF) {
}
  }

void **assignWithCopy for StartSharingConfirmationFlow.ConfirmationResult(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF) {
      id v7 = v4;
    }
    *a1 = v4;
  }
  else if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    *a1 = *a2;
  }
  else
  {
    id v5 = v4;
    uint64_t v6 = *a1;
    *a1 = v4;
  }
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

void **assignWithTake for StartSharingConfirmationFlow.ConfirmationResult(void **a1, unint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for StartSharingConfirmationFlow.ConfirmationResult(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFA && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483643);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 4;
  if (v4 >= 6) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for StartSharingConfirmationFlow.ConfirmationResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 4;
    }
  }
  return result;
}

uint64_t getEnumTag for StartSharingConfirmationFlow.ConfirmationResult(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for StartSharingConfirmationFlow.ConfirmationResult(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for StartSharingConfirmationFlow.ConfirmationResult()
{
  return &type metadata for StartSharingConfirmationFlow.ConfirmationResult;
}

uint64_t Confidence.description.getter(char a1)
{
  if (a1 == 2) {
    return 0x6E656469666E6F43;
  }
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  if (a1) {
    unint64_t v3 = 0xD000000000000012;
  }
  else {
    unint64_t v3 = 0xD00000000000001FLL;
  }
  if (a1) {
    unint64_t v4 = 0x800000022DDEA1F0;
  }
  else {
    unint64_t v4 = 0x800000022DDEA1D0;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0xD000000000000017;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Confidence.LowConfidenceReason()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Confidence.LowConfidenceReason()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Confidence.LowConfidenceReason()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Confidence.LowConfidenceReason@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Confidence.LowConfidenceReason.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Confidence.LowConfidenceReason(unint64_t *a1@<X8>)
{
  if (*v1) {
    unint64_t v2 = 0xD000000000000012;
  }
  else {
    unint64_t v2 = 0xD00000000000001FLL;
  }
  unint64_t v3 = 0x800000022DDEA1D0;
  if (*v1) {
    unint64_t v3 = 0x800000022DDEA1F0;
  }
  *a1 = v2;
  a1[1] = v3;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance Confidence.LowConfidenceReason()
{
  if (*v0) {
    return 0xD000000000000012;
  }
  else {
    return 0xD00000000000001FLL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Confidence.LowConfidenceReason(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Confidence()
{
  return Confidence.description.getter(*v0);
}

uint64_t getEnumTagSinglePayload for Confidence(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE)
  {
    unsigned int v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 2;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x22DDA4A60);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  BOOL v8 = v7 >= 2;
  unsigned int v9 = v7 - 2;
  if (!v8) {
    unsigned int v9 = -1;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for Confidence(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFE) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v7 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x22DDA4B48);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for Confidence(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 2) {
    return v1 - 1;
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for Confidence(unsigned char *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Confidence()
{
  return &type metadata for Confidence;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Confidence(char *a1, char *a2)
{
  return specialized static Confidence.== infix(_:_:)(*a1, *a2);
}

uint64_t specialized static Confidence.== infix(_:_:)(char a1, char a2)
{
  char v3 = a2 == 2 && a1 == 2;
  if (a1 != 2 && a2 != 2)
  {
    if (a1) {
      unint64_t v4 = 0xD000000000000012;
    }
    else {
      unint64_t v4 = 0xD00000000000001FLL;
    }
    if (a1) {
      unint64_t v5 = 0x800000022DDEA1F0;
    }
    else {
      unint64_t v5 = 0x800000022DDEA1D0;
    }
    if (a2) {
      unint64_t v6 = 0xD000000000000012;
    }
    else {
      unint64_t v6 = 0xD00000000000001FLL;
    }
    if (a2) {
      unint64_t v7 = 0x800000022DDEA1F0;
    }
    else {
      unint64_t v7 = 0x800000022DDEA1D0;
    }
    if (v4 == v6 && v5 == v7) {
      char v3 = 1;
    }
    else {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v3 & 1;
}

unsigned char *storeEnumTagSinglePayload for Confidence.LowConfidenceReason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22DDA4D54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Confidence.LowConfidenceReason()
{
  return &type metadata for Confidence.LowConfidenceReason;
}

unint64_t lazy protocol witness table accessor for type Confidence.LowConfidenceReason and conformance Confidence.LowConfidenceReason()
{
  unint64_t result = lazy protocol witness table cache variable for type Confidence.LowConfidenceReason and conformance Confidence.LowConfidenceReason;
  if (!lazy protocol witness table cache variable for type Confidence.LowConfidenceReason and conformance Confidence.LowConfidenceReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Confidence.LowConfidenceReason and conformance Confidence.LowConfidenceReason);
  }
  return result;
}

uint64_t dispatch thunk of RecipientsResolving.resolve(persons:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t type metadata accessor for SharingCATsSimple()
{
  uint64_t result = type metadata singleton initialization cache for SharingCATsSimple;
  if (!type metadata singleton initialization cache for SharingCATsSimple) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for SharingCATsSimple()
{
  return swift_initClassMetadata2();
}

uint64_t SharingCATsSimple.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject();
  outlined init with copy of URL?(a1, (uint64_t)v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v11 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of URL?(a1);
  return v11;
}

uint64_t SharingCATsSimple.__allocating_init(useResponseMode:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for CATOption();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a2, v3);
  uint64_t v7 = CATWrapperSimple.init(useResponseMode:options:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a2, v3);
  return v7;
}

uint64_t SharingCATsSimple.__deallocating_deinit()
{
  uint64_t v0 = CATWrapperSimple.deinit();

  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t ObjC metadata update function for SharingCATsSimple()
{
  return type metadata accessor for SharingCATsSimple();
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeBufferWithCopyOfBuffer for ShareTarget(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (void *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        swift_retain();
        uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                    + 48);
        uint64_t v8 = (char *)a1 + v7;
        uint64_t v9 = (char *)a2 + v7;
        uint64_t v10 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
      case 2u:
        uint64_t v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for ShareTarget(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_release();
      uint64_t v3 = a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                  + 48);
      uint64_t v4 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
      int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
      uint64_t result = v5(v3, v4);
      break;
    case 1:
    case 2:
    case 3:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for ShareTarget(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      *a1 = *a2;
      swift_retain();
      uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                  + 48);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      goto LABEL_6;
    case 1u:
    case 2u:
      uint64_t v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      swift_bridgeObjectRetain();
      goto LABEL_6;
    case 3u:
      uint64_t v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
      swift_bridgeObjectRetain();
LABEL_6:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for ShareTarget(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ShareTarget((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        swift_retain();
        uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                    + 48);
        uint64_t v7 = (char *)a1 + v6;
        uint64_t v8 = (char *)a2 + v6;
        uint64_t v9 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
        goto LABEL_7;
      case 1u:
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_7;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
        swift_bridgeObjectRetain();
LABEL_7:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata accessor for ShareTarget()
{
  uint64_t result = type metadata singleton initialization cache for ShareTarget;
  if (!type metadata singleton initialization cache for ShareTarget) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *initializeWithTake for ShareTarget(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                + 48);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for ShareTarget(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ShareTarget((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                  + 48);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for ShareTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for ShareTarget()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for ShareTarget()
{
  uint64_t result = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[4] = v2;
    v2[5] = &unk_22DDE7050;
    v2[6] = &unk_22DDE7068;
    v2[7] = &unk_22DDE7080;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(char a1)
{
  if (a1 == 4)
  {
    unint64_t v1 = 0xD00000000000001ELL;
    unint64_t v2 = 0x800000022DDEAFA0;
  }
  else
  {
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    unint64_t v3 = 0xD000000000000018;
    unint64_t v4 = 0x800000022DDEA5C0;
    switch("UnableToStartSharingTarget")
    {
      case 1u:
        unint64_t v4 = 0xEA0000000000646CLL;
        unint64_t v3 = 0x6F486E4F6C6C6163;
        break;
      case 2u:
        unint64_t v4 = 0x800000022DDEA5F0;
        unint64_t v3 = 0xD000000000000010;
        break;
      case 3u:
        unint64_t v3 = 0xD000000000000013;
        unint64_t v4 = 0x800000022DDEA610;
        break;
      default:
        break;
    }
    unint64_t v5 = v4;
    String.append(_:)(*(Swift::String *)&v3);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 41;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    unint64_t v1 = 0xD000000000000021;
    unint64_t v2 = 0x800000022DDEAFC0;
  }
  unint64_t v7 = v2;
  String.append(_:)(*(Swift::String *)&v1);

  return swift_bridgeObjectRelease();
}

{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Swift::String v7;
  unint64_t v8;
  uint64_t vars8;

  if (a1 == 2)
  {
    unint64_t v2 = 0xEF686769682E6563;
    unint64_t v3 = 0x6E656469666E6F43;
  }
  else
  {
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    if (a1) {
      unint64_t v4 = 0xD000000000000012;
    }
    else {
      unint64_t v4 = 0xD00000000000001FLL;
    }
    if (a1) {
      unint64_t v5 = 0x800000022DDEA1F0;
    }
    else {
      unint64_t v5 = 0x800000022DDEA1D0;
    }
    Swift::String v6 = v5;
    String.append(_:)(*(Swift::String *)&v4);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 41;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    unint64_t v3 = 0xD000000000000017;
    unint64_t v2 = 0x800000022DDEAE60;
  }
  uint64_t v8 = v2;
  String.append(_:)(*(Swift::String *)&v3);

  return swift_bridgeObjectRelease();
}

unint64_t ShareTarget.description.getter()
{
  uint64_t v1 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  unint64_t v4 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ShareTarget();
  MEMORY[0x270FA5388](v5);
  unint64_t v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ShareTarget(v0, (uint64_t)v7);
  unint64_t v8 = 0xD000000000000012;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v15 = *(void *)v7;
      uint64_t v16 = *((void *)v7 + 1);
      unint64_t v31 = 0;
      unint64_t v32 = 0xE000000000000000;
      _StringGuts.grow(_:)(52);
      v17._countAndFlagsBits = 0xD000000000000031;
      v17._object = (void *)0x800000022DDEAF40;
      String.append(_:)(v17);
      v30[0] = v15;
      v30[1] = v16;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      v18._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v18);
      goto LABEL_5;
    case 2u:
      uint64_t v19 = *(void *)v7;
      uint64_t v20 = (void *)*((void *)v7 + 1);
      unint64_t v31 = 0;
      unint64_t v32 = 0xE000000000000000;
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      unint64_t v31 = 0xD000000000000022;
      unint64_t v32 = 0x800000022DDEAF10;
      v21._countAndFlagsBits = v19;
      v21._object = v20;
      String.append(_:)(v21);
LABEL_5:
      swift_bridgeObjectRelease();
      goto LABEL_7;
    case 3u:
      uint64_t v22 = *(void *)v7;
      uint64_t v23 = (void *)*((void *)v7 + 1);
      char v24 = v7[16];
      unint64_t v31 = 0;
      unint64_t v32 = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      v25._countAndFlagsBits = 0xD00000000000001ALL;
      v25._object = (void *)0x800000022DDEAEF0;
      String.append(_:)(v25);
      v26._countAndFlagsBits = v22;
      v26._object = v23;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._countAndFlagsBits = 0x6469666E6F63202CLL;
      v27._object = (void *)0xEE00203A65636E65;
      String.append(_:)(v27);
      specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v24);
LABEL_7:
      v28._countAndFlagsBits = 41;
      v28._object = (void *)0xE100000000000000;
      String.append(_:)(v28);
      unint64_t v8 = v31;
      break;
    case 4u:
      return v8;
    case 5u:
      unint64_t v8 = 0xD000000000000010;
      break;
    default:
      uint64_t v9 = *(void *)v7;
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues));
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, &v7[*(int *)(v10 + 48)], v1);
      unint64_t v31 = 0;
      unint64_t v32 = 0xE000000000000000;
      _StringGuts.grow(_:)(42);
      v11._countAndFlagsBits = 0xD00000000000001DLL;
      v11._object = (void *)0x800000022DDEAF80;
      String.append(_:)(v11);
      v30[0] = v9;
      type metadata accessor for UsoEntity();
      _print_unlocked<A, B>(_:_:)();
      v12._countAndFlagsBits = 0x203A65707974202CLL;
      v12._object = (void *)0xE800000000000000;
      String.append(_:)(v12);
      v13._countAndFlagsBits = UsoEntity_common_AttachmentType.DefinedValues.rawValue.getter();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      v14._countAndFlagsBits = 41;
      v14._object = (void *)0xE100000000000000;
      String.append(_:)(v14);
      swift_release();
      unint64_t v8 = v31;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      break;
  }
  return v8;
}

uint64_t specialized static ShareTarget.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v103 = (char *)a2;
  uint64_t v3 = type metadata accessor for ShareTarget();
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v92 = (uint64_t)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v94 = (uint64_t)&v90 - v7;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v93 = (uint64_t)&v90 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v95 = (uint64_t)&v90 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v96 = (uint64_t)&v90 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v98 = (uint64_t)&v90 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v97 = (uint64_t *)((char *)&v90 - v17);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  os_log_type_t v99 = (uint64_t *)((char *)&v90 - v19);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  long long v100 = (char *)&v90 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  char v24 = (uint64_t *)((char *)&v90 - v23);
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  uint64_t v102 = (uint64_t)&v90 - v26;
  MEMORY[0x270FA5388](v25);
  Swift::String v28 = (uint64_t *)((char *)&v90 - v27);
  uint64_t v29 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  uint64_t v101 = *(void *)(v29 - 8);
  uint64_t v30 = MEMORY[0x270FA5388](v29);
  unint64_t v32 = (char *)&v90 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x270FA5388](v30);
  uint64_t v35 = (char *)&v90 - v34;
  uint64_t v36 = MEMORY[0x270FA5388](v33);
  uint64_t v38 = (char *)&v90 - v37;
  MEMORY[0x270FA5388](v36);
  uint64_t v40 = (char *)&v90 - v39;
  outlined init with copy of ShareTarget(a1, (uint64_t)v28);
  if (swift_getEnumCaseMultiPayload())
  {
    uint64_t v41 = (uint64_t)v103;
    outlined destroy of ShareTarget((uint64_t)v28);
    outlined init with copy of ShareTarget(a1, (uint64_t)v24);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v43 = *v24;
      uint64_t v42 = v24[1];
      uint64_t v44 = v41;
      uint64_t v45 = (uint64_t)v100;
      outlined init with copy of ShareTarget(v44, (uint64_t)v100);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v46 = *(void *)(v45 + 8);
        if (v42)
        {
          if (v46)
          {
            if (v43 == *(void *)v45 && v42 == v46)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              char v47 = 1;
              return v47 & 1;
            }
LABEL_40:
            char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v47 & 1;
          }
LABEL_36:
          swift_bridgeObjectRelease();
          char v47 = 0;
          return v47 & 1;
        }
        if (v46) {
          goto LABEL_36;
        }
LABEL_34:
        char v47 = 1;
        return v47 & 1;
      }
      goto LABEL_21;
    }
    outlined destroy of ShareTarget((uint64_t)v24);
    uint64_t v53 = v99;
    outlined init with copy of ShareTarget(a1, (uint64_t)v99);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v55 = *v53;
      uint64_t v54 = v53[1];
      uint64_t v56 = v97;
      outlined init with copy of ShareTarget(v41, (uint64_t)v97);
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        swift_bridgeObjectRelease();
        uint64_t v52 = (uint64_t)v56;
        goto LABEL_27;
      }
      uint64_t v57 = *v56;
      uint64_t v58 = v56[1];
      if (v55 != v57 || v54 != v58) {
        goto LABEL_40;
      }
LABEL_15:
      swift_bridgeObjectRelease_n();
      char v47 = 1;
      return v47 & 1;
    }
    outlined destroy of ShareTarget((uint64_t)v53);
    uint64_t v59 = v98;
    outlined init with copy of ShareTarget(a1, v98);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v61 = *(void *)v59;
      uint64_t v60 = *(void *)(v59 + 8);
      int v62 = *(unsigned __int8 *)(v59 + 16);
      uint64_t v63 = v41;
      uint64_t v45 = v96;
      outlined init with copy of ShareTarget(v63, v96);
      if (swift_getEnumCaseMultiPayload() != 3)
      {
LABEL_21:
        swift_bridgeObjectRelease();
        uint64_t v52 = v45;
        goto LABEL_27;
      }
      uint64_t v64 = *(void *)v45;
      uint64_t v65 = *(void *)(v45 + 8);
      int v66 = *(unsigned __int8 *)(v45 + 16);
      if (v61 == v64 && v60 == v65)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v84 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v47 = 0;
        if ((v84 & 1) == 0) {
          return v47 & 1;
        }
      }
      char v47 = v66 == 2 && v62 == 2;
      if (v62 != 2 && v66 != 2)
      {
        if (v62) {
          unint64_t v85 = 0xD000000000000012;
        }
        else {
          unint64_t v85 = 0xD00000000000001FLL;
        }
        if (v62) {
          unint64_t v86 = 0x800000022DDEA1F0;
        }
        else {
          unint64_t v86 = 0x800000022DDEA1D0;
        }
        if (v66) {
          unint64_t v87 = 0xD000000000000012;
        }
        else {
          unint64_t v87 = 0xD00000000000001FLL;
        }
        if (v66) {
          unint64_t v88 = 0x800000022DDEA1F0;
        }
        else {
          unint64_t v88 = 0x800000022DDEA1D0;
        }
        if (v85 != v87 || v86 != v88) {
          goto LABEL_40;
        }
        goto LABEL_15;
      }
    }
    else
    {
      outlined destroy of ShareTarget(v59);
      uint64_t v74 = v95;
      outlined init with copy of ShareTarget(a1, v95);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      outlined destroy of ShareTarget(v74);
      if (EnumCaseMultiPayload == 4)
      {
        uint64_t v76 = v93;
        outlined init with copy of ShareTarget(v41, v93);
        int v77 = swift_getEnumCaseMultiPayload();
        outlined destroy of ShareTarget(v76);
        if (v77 == 4) {
          goto LABEL_34;
        }
      }
      uint64_t v78 = v94;
      outlined init with copy of ShareTarget(a1, v94);
      int v79 = swift_getEnumCaseMultiPayload();
      outlined destroy of ShareTarget(v78);
      if (v79 == 5)
      {
        uint64_t v80 = v92;
        outlined init with copy of ShareTarget(v41, v92);
        char v47 = swift_getEnumCaseMultiPayload() == 5;
        outlined destroy of ShareTarget(v80);
      }
      else
      {
        char v47 = 0;
      }
    }
  }
  else
  {
    uint64_t v91 = v38;
    long long v100 = v32;
    uint64_t v48 = *v28;
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues));
    uint64_t v50 = v101;
    uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v101 + 32);
    v51(v40, (char *)v28 + *(int *)(v49 + 48), v29);
    outlined init with copy of ShareTarget((uint64_t)v103, v102);
    if (swift_getEnumCaseMultiPayload())
    {
      (*(void (**)(char *, uint64_t))(v50 + 8))(v40, v29);
      swift_release();
      uint64_t v52 = v102;
LABEL_27:
      outlined destroy of ShareTarget(v52);
      char v47 = 0;
      return v47 & 1;
    }
    uint64_t v67 = v48;
    uint64_t v68 = v91;
    v51(v91, (char *)(v102 + *(int *)(v49 + 48)), v29);
    char v69 = UsoEntity.isEquivalentTo(_:)();
    char v70 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
    unint64_t v103 = v35;
    v70(v35, v40, v29);
    uint64_t v71 = (uint64_t)v100;
    v70(v100, v68, v29);
    uint64_t v72 = v40;
    if (v69)
    {
      uint64_t v102 = v67;
      lazy protocol witness table accessor for type UsoEntity_common_AttachmentType.DefinedValues and conformance UsoEntity_common_AttachmentType.DefinedValues();
      uint64_t v73 = (uint64_t)v103;
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v106 == v104 && v107 == v105) {
        char v47 = 1;
      }
      else {
        char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      unint64_t v81 = v91;
      uint64_t v82 = v71;
    }
    else
    {
      swift_release();
      swift_release();
      char v47 = 0;
      unint64_t v81 = v91;
      uint64_t v73 = (uint64_t)v103;
      uint64_t v82 = v71;
    }
    uint64_t v83 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    v83(v82, v29);
    v83(v73, v29);
    v83((uint64_t)v81, v29);
    v83((uint64_t)v72, v29);
  }
  return v47 & 1;
}

unint64_t lazy protocol witness table accessor for type UsoEntity_common_AttachmentType.DefinedValues and conformance UsoEntity_common_AttachmentType.DefinedValues()
{
  unint64_t result = lazy protocol witness table cache variable for type UsoEntity_common_AttachmentType.DefinedValues and conformance UsoEntity_common_AttachmentType.DefinedValues;
  if (!lazy protocol witness table cache variable for type UsoEntity_common_AttachmentType.DefinedValues and conformance UsoEntity_common_AttachmentType.DefinedValues)
  {
    type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_AttachmentType.DefinedValues and conformance UsoEntity_common_AttachmentType.DefinedValues);
  }
  return result;
}

unint64_t ScreenSharingCallManager.init()@<X0>(void *a1@<X8>)
{
  id v2 = objc_msgSend(self, sel_sharedInstance);
  unint64_t result = type metadata accessor for TUCallCenter();
  a1[3] = result;
  a1[4] = &protocol witness table for TUCallCenter;
  *a1 = v2;
  return result;
}

uint64_t ScreenSharingCallManager.currentShareStatus.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v4 + 8))(&v17, v3, v4);
  if (v18)
  {
    outlined init with take of SharingIntent(&v17, (uint64_t)v19);
    uint64_t v5 = v20;
    uint64_t v6 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 64))(v5, v6);
    uint64_t v12 = v8;
    switch(v8)
    {
      case 1:
        *(void *)a1 = 1;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        goto LABEL_7;
      case 2:
        *(void *)a1 = 2;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(unsigned char *)(a1 + 32) = 2;
        goto LABEL_9;
      case 3:
        *(unsigned char *)(a1 + 32) = 0;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        goto LABEL_9;
      case 4:
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
LABEL_7:
        char v13 = 2;
        goto LABEL_8;
      default:
        uint64_t v14 = v7;
        uint64_t v15 = v9;
        uint64_t v16 = v10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined consume of ShareSession?(v14, v12);
        *(void *)a1 = v14;
        *(void *)(a1 + 8) = v12;
        *(void *)(a1 + 16) = v15;
        *(void *)(a1 + 24) = v16;
        char v13 = 1;
LABEL_8:
        *(unsigned char *)(a1 + 32) = v13;
LABEL_9:
        uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
        break;
    }
  }
  else
  {
    uint64_t result = outlined destroy of SharingResponse?((uint64_t)&v17, &demangling cache variable for type metadata for Call?);
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(unsigned char *)(a1 + 32) = -1;
  }
  return result;
}

Swift::Bool __swiftcall ScreenSharingCallManager.isScreenShareSupportingCallSalient()()
{
  ScreenSharingCallManager.getSalientScreenShareSupportingCall()((uint64_t)v2);
  Swift::Bool v0 = v3 != 0;
  outlined destroy of SharingResponse?((uint64_t)v2, &demangling cache variable for type metadata for Call?);
  return v0;
}

double ScreenSharingCallManager.getSalientScreenShareSupportingCall()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v4 + 8))(&v10, v3, v4);
  if (v11)
  {
    outlined init with take of SharingIntent(&v10, (uint64_t)v12);
    uint64_t v5 = v13;
    uint64_t v6 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 56))(v5, v6))
    {
      uint64_t v7 = v13;
      uint64_t v8 = v14;
      __swift_project_boxed_opaque_existential_1(v12, v13);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 160))(v7, v8))
      {
        outlined init with copy of ResponseExecuting((uint64_t)v12, a1);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
        return result;
      }
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    outlined destroy of SharingResponse?((uint64_t)&v10, &demangling cache variable for type metadata for Call?);
  }
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t ScreenSharingCallManager.getRemoteCallParticipantHandles()()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v2 + 8))(&v27, v1, v2);
  if (!v28)
  {
    outlined destroy of SharingResponse?((uint64_t)&v27, &demangling cache variable for type metadata for Call?);
    return MEMORY[0x263F8EE88];
  }
  outlined init with take of SharingIntent(&v27, (uint64_t)v30);
  uint64_t v3 = v31;
  uint64_t v4 = v32;
  __swift_project_boxed_opaque_existential_1(v30, v31);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v4 + 40))(&v24, v3, v4);
  if (!v25)
  {
    outlined destroy of SharingResponse?((uint64_t)&v24, &demangling cache variable for type metadata for Conversation?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    return MEMORY[0x263F8EE88];
  }
  outlined init with take of SharingIntent(&v24, (uint64_t)&v27);
  uint64_t v5 = v28;
  uint64_t v6 = v29;
  __swift_project_boxed_opaque_existential_1(&v27, v28);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  int64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v23 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    uint64_t v9 = v7 + 32;
    uint64_t v10 = v23;
    do
    {
      outlined init with copy of ResponseExecuting(v9, (uint64_t)&v24);
      uint64_t v11 = v25;
      uint64_t v12 = v26;
      __swift_project_boxed_opaque_existential_1(&v24, v25);
      uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
      id v14 = objc_msgSend(v13, sel_value);

      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v17 = v16;

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1);
        uint64_t v10 = v23;
      }
      unint64_t v19 = *(void *)(v10 + 16);
      unint64_t v18 = *(void *)(v10 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        uint64_t v10 = v23;
      }
      *(void *)(v10 + 16) = v19 + 1;
      uint64_t v20 = v10 + 16 * v19;
      *(void *)(v20 + 32) = v15;
      *(void *)(v20 + 40) = v17;
      v9 += 40;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  uint64_t v21 = specialized Set.init<A>(_:)(v10);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  return v21;
}

BOOL protocol witness for ScreenSharingCallManaging.isScreenShareSupportingCallSalient() in conformance ScreenSharingCallManager()
{
  ScreenSharingCallManager.getSalientScreenShareSupportingCall()((uint64_t)v2);
  BOOL v0 = v3 != 0;
  outlined destroy of SharingResponse?((uint64_t)v2, &demangling cache variable for type metadata for Call?);
  return v0;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(void (*a1)(void))
{
  a1();

  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(uint64_t (*a1)(void))
{
  return a1();
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  int64_t v8 = *a2;
  if (*a2)
  {
    *int64_t v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

uint64_t outlined consume of ShareSession?(uint64_t a1, uint64_t a2)
{
  if (a2 != 4) {
    return outlined consume of ShareSession(a1, a2);
  }
  return a1;
}

uint64_t outlined consume of ShareSession(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 1) >= 3)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ScreenSharingCallManager(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for ScreenSharingCallManager(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ScreenSharingCallManager(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScreenSharingCallManager(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScreenSharingCallManager(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScreenSharingCallManager()
{
  return &type metadata for ScreenSharingCallManager;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      unint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *long long v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *long long v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *BOOL v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    BOOL v19 = (void *)(*(void *)(v4 + 48) + v16);
    *BOOL v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *int64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t OutputDialogFlow.execute()(uint64_t a1)
{
  v2[7] = a1;
  void v2[8] = v1;
  v2[9] = *v1;
  return MEMORY[0x270FA2498](OutputDialogFlow.execute(), 0, 0);
}

uint64_t OutputDialogFlow.execute()()
{
  uint64_t v1 = v0[9];
  outlined init with copy of ResponseExecuting(v0[8] + 104, (uint64_t)(v0 + 2));
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  swift_retain_n();
  v0[2] = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  *(void *)(swift_allocObject() + 16) = v1;
  static ExecuteResponse.complete<A>(next:childCompletion:)();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t closure #1 in OutputDialogFlow.execute()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return MEMORY[0x270FA2498](closure #1 in OutputDialogFlow.execute(), 0, 0);
}

uint64_t closure #1 in OutputDialogFlow.execute()()
{
  uint64_t v1 = v0[3];
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 64), *(void *)(v1 + 88));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[4] = v2;
  *uint64_t v2 = v0;
  v2[1] = PromptForValueFlowWrapper.execute();
  uint64_t v3 = v0[2];
  return ResponseExecutor.execute(response:)(v3, v1 + 24);
}

void closure #2 in OutputDialogFlow.execute()(uint64_t a1)
{
  outlined init with copy of Result<Output, Error>(a1, (uint64_t)v14);
  if (v15)
  {
    uint64_t v1 = (void *)v14[0];
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.default);
    id v3 = v1;
    id v4 = v1;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      v14[0] = v9;
      *(_DWORD *)uint64_t v7 = 136315394;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v10 = static OutputDialogFlow.typeName;
      unint64_t v11 = unk_2685B76C0;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2112;
      id v12 = v1;
      uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v8 = v13;

      _os_log_impl(&dword_22DD8A000, v5, v6, "%s: Ending flow silently due to error while producing output: %@", (uint8_t *)v7, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v8, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v9, -1, -1);
      MEMORY[0x230F996F0](v7, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    outlined destroy of Result<Output, Error>((uint64_t)v14);
  }
}

uint64_t OutputDialogFlow.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  __swift_destroy_boxed_opaque_existential_1(v0 + 104);

  return MEMORY[0x270FA0228](v0, 144, 7);
}

uint64_t type metadata accessor for OutputDialogFlow()
{
  return self;
}

unint64_t instantiation function for generic protocol witness table for OutputDialogFlow(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type OutputDialogFlow and conformance OutputDialogFlow()
{
  unint64_t result = lazy protocol witness table cache variable for type OutputDialogFlow and conformance OutputDialogFlow;
  if (!lazy protocol witness table cache variable for type OutputDialogFlow and conformance OutputDialogFlow)
  {
    type metadata accessor for OutputDialogFlow();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutputDialogFlow and conformance OutputDialogFlow);
  }
  return result;
}

uint64_t protocol witness for Flow.execute() in conformance OutputDialogFlow(uint64_t a1)
{
  id v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  v5[7] = a1;
  v5[8] = v4;
  v5[9] = *v4;
  return MEMORY[0x270FA2498](OutputDialogFlow.execute(), 0, 0);
}

void protocol witness for Flow.exitValue.getter in conformance OutputDialogFlow(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(*(void *)v1 + 16);
}

uint64_t partial apply for closure #1 in OutputDialogFlow.execute()(uint64_t a1)
{
  id v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *id v4 = v2;
  v4[2] = a1;
  v4[3] = v1;
  v4[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return MEMORY[0x270FA2498](closure #1 in OutputDialogFlow.execute(), 0, 0);
}

uint64_t sub_22DDA8950()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #2 in OutputDialogFlow.execute()(uint64_t a1)
{
}

uint64_t outlined init with copy of Result<Output, Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Output, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Result<Output, Error>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Output, Error>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for StartSharingTargetResolutionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22DDA8AFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StartSharingTargetResolutionError()
{
  return &type metadata for StartSharingTargetResolutionError;
}

unint64_t lazy protocol witness table accessor for type StartSharingTargetResolutionError and conformance StartSharingTargetResolutionError()
{
  unint64_t result = lazy protocol witness table cache variable for type StartSharingTargetResolutionError and conformance StartSharingTargetResolutionError;
  if (!lazy protocol witness table cache variable for type StartSharingTargetResolutionError and conformance StartSharingTargetResolutionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StartSharingTargetResolutionError and conformance StartSharingTargetResolutionError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StartSharingTargetResolutionError and conformance StartSharingTargetResolutionError;
  if (!lazy protocol witness table cache variable for type StartSharingTargetResolutionError and conformance StartSharingTargetResolutionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StartSharingTargetResolutionError and conformance StartSharingTargetResolutionError);
  }
  return result;
}

uint64_t protocol witness for Error._domain.getter in conformance StartSharingTargetResolutionError()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t protocol witness for Error._code.getter in conformance StartSharingTargetResolutionError()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance StartSharingTargetResolutionError()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance StartSharingTargetResolutionError()
{
  return MEMORY[0x270F9FB30]();
}

ValueMetadata *type metadata accessor for ConfirmationValue()
{
  return &type metadata for ConfirmationValue;
}

unsigned char *storeEnumTagSinglePayload for ConfirmationValue(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22DDA8C80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingVerb()
{
  return &type metadata for SharingVerb;
}

unint64_t lazy protocol witness table accessor for type SharingVerb and conformance SharingVerb()
{
  unint64_t result = lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb;
  if (!lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb;
  if (!lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb;
  if (!lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb;
  if (!lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb;
  if (!lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb;
  if (!lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingVerb and conformance SharingVerb);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SharingVerb(char *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SharingVerb()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SharingVerb()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SharingVerb()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SharingVerb@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of SharingVerb.init(rawValue:);
  unint64_t result = specialized SharingVerb.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SharingVerb(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE500000000000000;
  uint64_t v4 = 1886352499;
  if (v2 != 1) {
    uint64_t v4 = 1684956531;
  }
  BOOL v5 = v2 == 0;
  if (*v1) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0x6572616873;
  }
  if (!v5) {
    unint64_t v3 = 0xE400000000000000;
  }
  *a1 = v6;
  a1[1] = v3;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SharingVerb(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance SharingVerb;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SharingVerb()
{
  int v1 = *v0;
  strcpy((char *)v7, "SharingVerb.");
  BYTE5(v7[1]) = 0;
  HIWORD(v7[1]) = -5120;
  uint64_t v2 = 1886352499;
  if (v1 != 1) {
    uint64_t v2 = 1684956531;
  }
  if (v1) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0x6572616873;
  }
  if (v1) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  return v7[0];
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance SharingVerb(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance SharingVerb(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type SharingVerb and conformance SharingVerb, (uint64_t (*)(void))lazy protocol witness table accessor for type SharingVerb and conformance SharingVerb, (uint64_t (*)(void))lazy protocol witness table accessor for type SharingVerb and conformance SharingVerb);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SharingVerb()
{
  return lazy protocol witness table accessor for type [SharingVerb] and conformance [A](&lazy protocol witness table cache variable for type [SharingVerb] and conformance [A], &demangling cache variable for type metadata for [SharingVerb]);
}

unint64_t lazy protocol witness table accessor for type ConfirmationValue and conformance ConfirmationValue()
{
  unint64_t result = lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue;
  if (!lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue;
  if (!lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue;
  if (!lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue;
  if (!lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue;
  if (!lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue;
  if (!lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationValue and conformance ConfirmationValue);
  }
  return result;
}

unint64_t ConfirmationValue.description.getter(char a1)
{
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v2 = 28526;
    }
    else {
      uint64_t v2 = 0x6C65636E6163;
    }
    if (a1 == 1) {
      unint64_t v3 = 0xE200000000000000;
    }
    else {
      unint64_t v3 = 0xE600000000000000;
    }
  }
  else
  {
    unint64_t v3 = 0xE300000000000000;
    uint64_t v2 = 7562617;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  return 0xD000000000000012;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConfirmationValue(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConfirmationValue()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ConfirmationValue()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConfirmationValue()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ConfirmationValue@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of ConfirmationValue.init(rawValue:);
  unint64_t result = specialized SharingVerb.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ConfirmationValue(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE300000000000000;
  unint64_t v4 = 0xE200000000000000;
  uint64_t v5 = 28526;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6C65636E6163;
    unint64_t v4 = 0xE600000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 7562617;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ConfirmationValue(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ConfirmationValue;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ConfirmationValue()
{
  return ConfirmationValue.description.getter(*v0);
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ConfirmationValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance SharingVerb(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type ConfirmationValue and conformance ConfirmationValue, (uint64_t (*)(void))lazy protocol witness table accessor for type ConfirmationValue and conformance ConfirmationValue, (uint64_t (*)(void))lazy protocol witness table accessor for type ConfirmationValue and conformance ConfirmationValue);
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance SharingVerb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v10 = a4();
  uint64_t v11 = a5();
  uint64_t v12 = a6();

  return MEMORY[0x270F6DF80](a1, a2, v10, v11, v12);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ConfirmationValue()
{
  return lazy protocol witness table accessor for type [SharingVerb] and conformance [A](&lazy protocol witness table cache variable for type [ConfirmationValue] and conformance [A], &demangling cache variable for type metadata for [ConfirmationValue]);
}

uint64_t lazy protocol witness table accessor for type [SharingVerb] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t specialized SharingVerb.init(rawValue:)(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 3) {
    return 3;
  }
  else {
    return v5;
  }
}

uint64_t type metadata instantiation function for CATExecutionInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t type metadata completion function for CATExecutionInfo()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CATExecutionInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  Swift::String v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = ~v5;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 1) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *Swift::String v3 = *a2;
    Swift::String v3 = (uint64_t *)(v9 + ((v5 + 16) & v6));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 1) & v6, ((unint64_t)a2 + v5 + 1) & v6);
  }
  return v3;
}

uint64_t destroy for CATExecutionInfo(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

unsigned char *initializeWithCopy for CATExecutionInfo(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

unsigned char *assignWithCopy for CATExecutionInfo(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

unsigned char *initializeWithTake for CATExecutionInfo(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

unsigned char *assignWithTake for CATExecutionInfo(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for CATExecutionInfo(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 6) {
    unsigned int v7 = 6;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 1) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)&a1[v9];
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)&a1[v9];
      if (!*(_WORD *)&a1[v9]) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 6) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v6 + 1] & ~v6);
      }
      unsigned int v15 = *a1;
      if (((v15 >> 4) & 6) != 0) {
        return 8 - ((v15 >> 4) & 6 | (v15 >> 7));
      }
      else {
        return 0;
      }
    }
  }
  int v11 = a1[v9];
  if (!a1[v9]) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v9) = *(unsigned __int16 *)a1 | (a1[2] << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for CATExecutionInfo(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 6) {
    unsigned int v8 = 6;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 1) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x22DDAA020);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 6)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 1] & ~v9;
          uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
        else
        {
          if (a2 > 6) {
            LOBYTE(v18) = a2 - 7;
          }
          else {
            unsigned int v18 = 32 * (((-a2 >> 1) & 3) - 4 * a2);
          }
          *a1 = v18;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for CATExecutionInfo()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static CATExecutionInfo<>.== infix(_:_:)(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = CATIdentifier.stringValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == CATIdentifier.stringValue.getter(v2) && v5 == v6)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0) {
      return 0;
    }
  }
  type metadata accessor for CATExecutionInfo();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> CATExecutionInfo<A>(char *a1, char *a2)
{
  return static CATExecutionInfo<>.== infix(_:_:)(a1, a2);
}

uint64_t CATIdentifier.stringValue.getter(char a1)
{
  if (a1 < 0)
  {
    strcpy((char *)v6, "Sharing#");
    BYTE1(v6[1]) = 0;
    WORD1(v6[1]) = 0;
    HIDWORD(v6[1]) = -402653184;
    unint64_t v3 = SharingCATFamily.rawValue.getter(a1 & 0x7F);
  }
  else
  {
    strcpy((char *)v6, "ButtonLabels#");
    HIWORD(v6[1]) = -4864;
    unint64_t v2 = 0xE600000000000000;
    unint64_t v3 = 0x6C65636E6143;
    switch(a1)
    {
      case 1:
        unint64_t v2 = 0xEE0065726F745370;
        unint64_t v3 = 0x7041686372616553;
        break;
      case 2:
        unint64_t v2 = 0xE800000000000000;
        unint64_t v3 = 0x7070416572616853;
        break;
      case 3:
        unint64_t v2 = 0xEB000000006E6565;
        unint64_t v3 = 0x7263536572616853;
        break;
      default:
        break;
    }
    unint64_t v4 = v2;
  }
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  return v6[0];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ButtonLabelsCATFamily(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ButtonLabelsCATFamily()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ButtonLabelsCATFamily()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ButtonLabelsCATFamily()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ButtonLabelsCATFamily@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized ButtonLabelsCATFamily.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ButtonLabelsCATFamily(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE600000000000000;
  uint64_t v3 = 0x6C65636E6143;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEE0065726F745370;
      uint64_t v3 = 0x7041686372616553;
      goto LABEL_3;
    case 2:
      *a1 = 0x7070416572616853;
      a1[1] = 0xE800000000000000;
      break;
    case 3:
      *a1 = 0x7263536572616853;
      a1[1] = 0xEB000000006E6565;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

unint64_t SharingCATFamily.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000014;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 3:
      unint64_t result = 0x6F486E4F6C6C6143;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0x6853746F6E6E6143;
      break;
    case 6:
      unint64_t result = 0xD000000000000010;
      break;
    case 7:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 8:
      unint64_t result = 0xD000000000000020;
      break;
    case 9:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 10:
      unint64_t result = 0xD000000000000013;
      break;
    case 11:
      unint64_t result = 0xD000000000000018;
      break;
    case 12:
      unint64_t result = 0xD000000000000023;
      break;
    case 13:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 14:
      unint64_t result = 0xD000000000000029;
      break;
    case 15:
    case 20:
    case 22:
      unint64_t result = 0xD000000000000012;
      break;
    case 16:
      unint64_t result = 0x45636972656E6547;
      break;
    case 17:
      unint64_t result = 0xD000000000000016;
      break;
    case 18:
      unint64_t result = 0xD000000000000021;
      break;
    case 19:
      unint64_t result = 0x726154736465654ELL;
      break;
    case 21:
      unint64_t result = 0x6C61436E49746F4ELL;
      break;
    case 23:
      unint64_t result = 0xD000000000000014;
      break;
    case 24:
      unint64_t result = 0xD000000000000015;
      break;
    case 25:
      unint64_t result = 0xD000000000000018;
      break;
    case 26:
      unint64_t result = 0xD000000000000014;
      break;
    case 27:
      unint64_t result = 0xD000000000000015;
      break;
    case 28:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 29:
      unint64_t result = 0xD00000000000001ALL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CATIdentifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 7) {
    goto LABEL_17;
  }
  if (a2 + 249 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 249) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 249;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 249;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 249;
    }
  }
LABEL_17:
  unsigned int v6 = ((*a1 >> 4) & 6 | (*a1 >> 7)) ^ 7;
  if (v6 >= 6) {
    unsigned int v6 = -1;
  }
  return v6 + 1;
}

unsigned char *storeEnumTagSinglePayload for CATIdentifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 249 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 249) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 6)
  {
    unsigned int v6 = ((a2 - 7) >> 8) + 1;
    *unint64_t result = a2 - 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22DDAAA70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = 32 * (((-a2 >> 1) & 3) - 4 * a2);
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for CATIdentifier(unsigned __int8 *a1)
{
  return *a1 >> 7;
}

unsigned char *destructiveProjectEnumData for CATIdentifier(unsigned char *result)
{
  *result &= ~0x80u;
  return result;
}

unsigned char *destructiveInjectEnumTag for CATIdentifier(unsigned char *result, char a2)
{
  *unint64_t result = *result & 0x1F | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for CATIdentifier()
{
  return &type metadata for CATIdentifier;
}

uint64_t getEnumTagSinglePayload for SharingCATFamily(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE3) {
    goto LABEL_17;
  }
  if (a2 + 29 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 29) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 29;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 29;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 29;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1E;
  int v8 = v6 - 30;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SharingCATFamily(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 29 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 29) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE2)
  {
    unsigned int v6 = ((a2 - 227) >> 8) + 1;
    *unint64_t result = a2 + 29;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22DDAAC34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 29;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingCATFamily()
{
  return &type metadata for SharingCATFamily;
}

uint64_t getEnumTagSinglePayload for ButtonLabelsCATFamily(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ButtonLabelsCATFamily(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22DDAADC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ButtonLabelsCATFamily()
{
  return &type metadata for ButtonLabelsCATFamily;
}

unint64_t lazy protocol witness table accessor for type ButtonLabelsCATFamily and conformance ButtonLabelsCATFamily()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonLabelsCATFamily and conformance ButtonLabelsCATFamily;
  if (!lazy protocol witness table cache variable for type ButtonLabelsCATFamily and conformance ButtonLabelsCATFamily)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonLabelsCATFamily and conformance ButtonLabelsCATFamily);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SharingCATFamily(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = SharingCATFamily.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == SharingCATFamily.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SharingCATFamily()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  SharingCATFamily.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SharingCATFamily()
{
  SharingCATFamily.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SharingCATFamily()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  SharingCATFamily.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SharingCATFamily@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized SharingCATFamily.init(rawValue:)();
  *a1 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SharingCATFamily@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = SharingCATFamily.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t lazy protocol witness table accessor for type SharingCATFamily and conformance SharingCATFamily()
{
  unint64_t result = lazy protocol witness table cache variable for type SharingCATFamily and conformance SharingCATFamily;
  if (!lazy protocol witness table cache variable for type SharingCATFamily and conformance SharingCATFamily)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingCATFamily and conformance SharingCATFamily);
  }
  return result;
}

unint64_t specialized ButtonLabelsCATFamily.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ButtonLabelsCATFamily.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t specialized SharingCATFamily.init(rawValue:)()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x1E) {
    return 30;
  }
  else {
    return v0;
  }
}

uint64_t dispatch thunk of ScreenSharingCallManaging.currentShareStatus.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ScreenSharingCallManaging.isScreenShareSupportingCallSalient()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ScreenSharingCallManagingInternal.frontmostCall.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ScreenSharingCallManagingInternal.getSalientScreenShareSupportingCall()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ScreenSharingCallManagingInternal.getRemoteCallParticipantHandles()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SharePlayHelping.appSupportsSharePlay(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

id LSPropertyList.contains(entitlement:)()
{
  uint64_t v1 = Entitlement.rawValue.getter();
  Swift::String v2 = (void *)MEMORY[0x230F98C20](v1);
  swift_bridgeObjectRelease();
  type metadata accessor for LSBundleRecord(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  id v3 = objc_msgSend(v0, sel_objectForKey_ofClass_, v2, swift_getObjCClassFromMetadata());

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  outlined init with take of Any?((uint64_t)v7, (uint64_t)v8);
  if (!v9)
  {
    outlined destroy of Any?((uint64_t)v8);
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  id v4 = objc_msgSend(v6, sel_BOOLValue);

  return v4;
}

id @nonobjc LSBundleRecord.__allocating_init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  v9[1] = *(id *)MEMORY[0x263EF8340];
  id v4 = (void *)MEMORY[0x230F98C20]();
  swift_bridgeObjectRelease();
  v9[0] = 0;
  id v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_bundleRecordWithBundleIdentifier_allowPlaceholder_error_, v4, a3 & 1, v9);

  if (v5)
  {
    id v6 = v9[0];
  }
  else
  {
    id v7 = v9[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

uint64_t SharePlayHelper.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t type metadata accessor for SharePlayHelper()
{
  return self;
}

uint64_t specialized SharePlayHelper.appSupportsSharePlay(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Entitlement();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  id v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  id v9 = (id)__swift_project_value_buffer(v8, (uint64_t)static Logger.default);
  swift_bridgeObjectRetain_n();
  size_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v38 = a1;
  if (v12)
  {
    uint64_t v36 = v5;
    id v37 = v9;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    v40[0] = v14;
    *(_DWORD *)uint64_t v13 = 136315394;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v15 = static SharePlayHelper.typeName;
    unint64_t v16 = unk_2685B7820;
    swift_bridgeObjectRetain();
    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain();
    a1 = v38;
    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, a2, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_22DD8A000, v10, v11, "%s: Checking if %s supports SharePlay", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v14, -1, -1);
    MEMORY[0x230F996F0](v13, -1, -1);

    uint64_t v5 = v36;
    id v9 = v37;
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for LSBundleRecord(0, &lazy cache variable for type metadata for LSBundleRecord);
  swift_bridgeObjectRetain();
  id v17 = @nonobjc LSBundleRecord.__allocating_init(bundleIdentifier:allowPlaceholder:)(a1, a2, 0);
  id v18 = objc_msgSend(v17, sel_entitlements);

  uint64_t v19 = *MEMORY[0x263F33FC8];
  id v37 = v9;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v20(v7, v19, v4);
  id v21 = v18;
  unsigned int v22 = LSPropertyList.contains(entitlement:)();
  unint64_t v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  v23(v7, v4);
  v20(v7, *MEMORY[0x263F33FC0], v4);
  unsigned __int8 v24 = LSPropertyList.contains(entitlement:)();
  v23(v7, v4);
  v20(v7, *MEMORY[0x263F33FB8], v4);
  char v25 = v21;
  LODWORD(v21) = LSPropertyList.contains(entitlement:)();

  v23(v7, v4);
  int v35 = (int)v21;
  LODWORD(v36) = v22;
  char v26 = v22 | v24 | v21;
  swift_bridgeObjectRetain_n();
  BOOL v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    id v37 = v25;
    uint64_t v29 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    v40[0] = v30;
    *(_DWORD *)uint64_t v29 = 136316418;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v31 = static SharePlayHelper.typeName;
    unint64_t v32 = unk_2685B7820;
    swift_bridgeObjectRetain();
    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, a2, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v29 + 22) = 1024;
    LODWORD(v39) = v26 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v29 + 28) = 1024;
    LODWORD(v39) = v36 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v29 + 34) = 1024;
    LODWORD(v39) = v24 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v29 + 40) = 1024;
    LODWORD(v39) = v35 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_22DD8A000, v27, v28, "%s: %s supports SharePlay: %{BOOL}d\nsupports public API: %{BOOL}d\nsupports deprecated public API %{BOOL}d\nsupports private API %{BOOL}d", (uint8_t *)v29, 0x2Eu);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v30, -1, -1);
    MEMORY[0x230F996F0](v29, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return v26 & 1;
}

uint64_t type metadata accessor for LSBundleRecord(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for StopSharingTargetResolutionError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22DDABE34);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for StopSharingTargetResolutionError()
{
  return &type metadata for StopSharingTargetResolutionError;
}

unint64_t lazy protocol witness table accessor for type StopSharingTargetResolutionError and conformance StopSharingTargetResolutionError()
{
  unint64_t result = lazy protocol witness table cache variable for type StopSharingTargetResolutionError and conformance StopSharingTargetResolutionError;
  if (!lazy protocol witness table cache variable for type StopSharingTargetResolutionError and conformance StopSharingTargetResolutionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StopSharingTargetResolutionError and conformance StopSharingTargetResolutionError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StopSharingTargetResolutionError and conformance StopSharingTargetResolutionError;
  if (!lazy protocol witness table cache variable for type StopSharingTargetResolutionError and conformance StopSharingTargetResolutionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StopSharingTargetResolutionError and conformance StopSharingTargetResolutionError);
  }
  return result;
}

uint64_t dispatch thunk of AppNameResolving.appBundleId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CommonConfirmationContextProviding.requestedRecipients.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CommonConfirmationContextProviding.currentlySharedTarget.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))() & 1;
}

uint64_t dispatch thunk of SceneConfirmationContextProviding.singleWindowSharingSupported.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AppConfirmationContextProviding.bundleId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ConfirmationContext.EntityConfirmationContext(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  char v3 = a1[16];
  if (a1[1]) {
    int v4 = 256;
  }
  else {
    int v4 = 0;
  }
  int v5 = v4 | *a1;
  if (a1[2]) {
    int v6 = 0x10000;
  }
  else {
    int v6 = 0;
  }
  if (a1[3]) {
    int v7 = 0x1000000;
  }
  else {
    int v7 = 0;
  }
  unsigned int v8 = v5 | v6 | v7;
  if (a2[1]) {
    int v9 = 256;
  }
  else {
    int v9 = 0;
  }
  int v10 = v9 | *a2;
  if (a2[2]) {
    int v11 = 0x10000;
  }
  else {
    int v11 = 0;
  }
  if (a2[3]) {
    int v12 = 0x1000000;
  }
  else {
    int v12 = 0;
  }
  return specialized static ConfirmationContext.EntityConfirmationContext.== infix(_:_:)(v8, v2, v3, v10 | v11 | v12, *((void *)a2 + 1), a2[16]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConfirmationContext.ScreenConfirmationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t v6 = *(void *)a2;
  int v7 = *(unsigned __int8 *)(a2 + 8);
  if (v4)
  {
    if (!v6 || (specialized static Array<A>.== infix(_:_:)(v4, v6) & 1) == 0) {
      return 0;
    }
  }
  else if (v6)
  {
    return 0;
  }
  if (v5)
  {
    if (v7) {
      return 1;
    }
  }
  else if ((v7 & 1) == 0)
  {
    return 1;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConfirmationContext.AppConfirmationContext(uint64_t a1, uint64_t a2)
{
  return specialized static ConfirmationContext.AppConfirmationContext.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(unsigned char *)(a2 + 24));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConfirmationContext(uint64_t a1, uint64_t a2)
{
  outlined init with take of ConfirmationContext(a1, (uint64_t)v4);
  outlined init with take of ConfirmationContext(a2, (uint64_t)v5);
  return specialized static ConfirmationContext.== infix(_:_:)((uint64_t)v4, (uint64_t)v5) & 1;
}

uint64_t specialized static ConfirmationContext.AppConfirmationContext.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a1 == a5 && a2 == a6 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v12 & 1) != 0))
  {
    if (a3)
    {
      if (!a7 || (specialized static Array<A>.== infix(_:_:)(a3, a7) & 1) == 0) {
        return 0;
      }
    }
    else if (a7)
    {
      return 0;
    }
    if (a4)
    {
      if ((a8 & 1) == 0) {
        return 0;
      }
    }
    else if (a8)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

BOOL specialized static ConfirmationContext.EntityConfirmationContext.== infix(_:_:)(unsigned int a1, uint64_t a2, char a3, unsigned int a4, uint64_t a5, char a6)
{
  if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)veorq_s8((int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(a4), (int8x16_t)xmmword_22DDE7A80)), (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(a1), (int8x16_t)xmmword_22DDE7A80))))))return 0; {
  if (a2)
  }
  {
    if (!a5 || (specialized static Array<A>.== infix(_:_:)(a2, a5) & 1) == 0) {
      return 0;
    }
  }
  else if (a5)
  {
    return 0;
  }
  if ((a3 & 1) == 0) {
    return (a6 & 1) == 0;
  }
  return (a6 & 1) != 0;
}

uint64_t specialized static ConfirmationContext.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with take of ConfirmationContext(a1, (uint64_t)&v48);
  unsigned __int8 v3 = v57;
  int v4 = v57 >> 6;
  if (v4)
  {
    if (v4 != 1)
    {
      v57 &= 0x3Fu;
      uint64_t v24 = v48;
      uint64_t v25 = v49;
      uint64_t v26 = v50;
      char v27 = v51;
      outlined init with take of ConfirmationContext(a2, (uint64_t)&v38);
      if ((v47 & 0xC0) != 0x80) {
        return 0;
      }
      v47 &= 0x3Fu;
      uint64_t v28 = v40;
      char v29 = v41;
      if ((v24 != v38 || v25 != v39) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        return 0;
      }
      if (v26)
      {
        if (!v28 || (specialized static Array<A>.== infix(_:_:)(v26, v28) & 1) == 0) {
          return 0;
        }
      }
      else if (v28)
      {
        return 0;
      }
      if (v27)
      {
        if ((v29 & 1) == 0) {
          return 0;
        }
      }
      else if (v29)
      {
        return 0;
      }
      return 1;
    }
    v57 &= 0x3Fu;
    uint64_t v5 = v48;
    char v6 = v49;
    outlined init with take of ConfirmationContext(a2, (uint64_t)&v38);
    if ((v47 & 0xC0) != 0x40) {
      return 0;
    }
    v47 &= 0x3Fu;
    unsigned __int8 v7 = v39;
    if (v5)
    {
      if (!v38 || (specialized static Array<A>.== infix(_:_:)(v5, v38) & 1) == 0) {
        return 0;
      }
    }
    else if (v38)
    {
      return 0;
    }
    if (v6) {
      return (v7 & 1) != 0;
    }
    return (v7 & 1) == 0;
  }
  v57 &= 0x3Fu;
  uint64_t v8 = v48;
  uint64_t v37 = v49;
  uint64_t v10 = v50;
  uint64_t v9 = v51;
  int v11 = v52;
  int v12 = v53;
  int v13 = v54;
  int v14 = v55;
  uint64_t v15 = v56;
  outlined init with take of ConfirmationContext(a2, (uint64_t)&v38);
  unsigned __int8 v7 = v47;
  if (v47 > 0x3Fu) {
    return 0;
  }
  uint64_t v36 = v15;
  int v34 = v12;
  int v35 = v11;
  int v32 = v13;
  int v30 = v14;
  uint64_t v16 = v40;
  uint64_t v17 = v41;
  int v18 = v42;
  int v33 = v43;
  int v31 = v44;
  int v19 = v45;
  uint64_t v20 = v46;
  if (v8 == v38 && v37 == v39 || (v21 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v21 & 1) != 0))
  {
    if (v10 == v16 && v9 == v17 || (v23 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v23 & 1) != 0))
    {
      if (v35 != v18 || ((v34 ^ v33) & 1) != 0 || ((v32 ^ v31) & 1) != 0 || ((v30 ^ v19) & 1) != 0) {
        return 0;
      }
      if (v36)
      {
        if (!v20 || (specialized static Array<A>.== infix(_:_:)(v36, v20) & 1) == 0) {
          return 0;
        }
      }
      else if (v20)
      {
        return 0;
      }
      if (v3) {
        return (v7 & 1) != 0;
      }
      return (v7 & 1) == 0;
    }
  }
  return result;
}

void specialized static ConfirmationContext.getCurrentlySharedTarget(in:)(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  unsigned __int8 v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 104))(v1, v2);
  int v4 = v3;
  if (v3)
  {
    if (objc_msgSend(v3, sel_isWindowed))
    {
      lazy protocol witness table accessor for type ExpanseError and conformance ExpanseError();
      swift_allocError();
      swift_willThrow();
    }
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.default);
    char v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v12 = v9;
      *(_DWORD *)uint64_t v8 = 136315138;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v10 = static ConfirmationContext.typeName;
      unint64_t v11 = unk_2685B7850;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v6, v7, "%s: The user is not currently sharing anything", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v9, -1, -1);
      MEMORY[0x230F996F0](v8, -1, -1);
    }
  }
}

uint64_t specialized ConfirmationContext.init(intent:requestedTarget:resolvedTarget:recipients:call:sharePlayHelper:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[8] = a8;
  v8[9] = v12;
  v8[6] = a5;
  v8[7] = a7;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  v8[10] = type metadata accessor for ShareTarget();
  v8[11] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  v8[12] = v9;
  v8[13] = *(void *)(v9 - 8);
  v8[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized ConfirmationContext.init(intent:requestedTarget:resolvedTarget:recipients:call:sharePlayHelper:), 0, 0);
}

uint64_t specialized ConfirmationContext.init(intent:requestedTarget:resolvedTarget:recipients:call:sharePlayHelper:)()
{
  specialized static ConfirmationContext.getCurrentlySharedTarget(in:)((void *)v0[8]);
  unint64_t v2 = v1 & 1;
  if (v0[6])
  {
    outlined init with copy of ShareTarget(v0[4], v0[11]);
    if (swift_getEnumCaseMultiPayload())
    {
      uint64_t v3 = v0[11];
      uint64_t v4 = v0[4];
      __swift_destroy_boxed_opaque_existential_1(v0[8]);
      outlined destroy of ShareTarget(v4);
      outlined destroy of ShareTarget(v3);
      unint64_t v5 = 0;
      uint64_t v6 = 0;
      unint64_t v7 = v0[6];
      uint64_t v8 = v0[7];
      char v32 = 0x80;
      uint64_t v30 = v0[5];
    }
    else
    {
      char v32 = v2;
      uint64_t v11 = v0[13];
      uint64_t v10 = v0[14];
      uint64_t v13 = v0[11];
      uint64_t v12 = v0[12];
      uint64_t v15 = v0[5];
      unint64_t v14 = v0[6];
      uint64_t v16 = (void *)v0[3];
      uint64_t v29 = v0[8];
      uint64_t v31 = v0[4];
      swift_bridgeObjectRetain();
      swift_release();
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v10, v13 + *(int *)(v17 + 48), v12);
      uint64_t v18 = v16[3];
      uint64_t v19 = v16[4];
      __swift_project_boxed_opaque_existential_1(v16, v18);
      char v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 224))(v18, v19);
      LOBYTE(v15) = specialized SharePlayHelper.appSupportsSharePlay(_:)(v15, v14);
      char v21 = UsoEntity_common_AttachmentType.DefinedValues.preferSharingInCall.getter();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(v29);
      outlined destroy of ShareTarget(v31);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      uint64_t v30 = 0;
      uint64_t v22 = 256;
      if ((v15 & 1) == 0) {
        uint64_t v22 = 0;
      }
      unint64_t v23 = v22 & 0xFFFFFFFFFFFFFFFELL | v20 & 1;
      uint64_t v24 = 0x10000;
      if ((v21 & 1) == 0) {
        uint64_t v24 = 0;
      }
      unint64_t v5 = v23 | v24;
      unint64_t v2 = v0[6];
      uint64_t v6 = v0[7];
      uint64_t v8 = v0[5];
      unint64_t v7 = 0xE000000000000000;
    }
  }
  else
  {
    uint64_t v9 = v0[4];
    __swift_destroy_boxed_opaque_existential_1(v0[8]);
    outlined destroy of ShareTarget(v9);
    uint64_t v8 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v30 = v0[7];
    char v32 = 64;
    unint64_t v7 = v2;
    unint64_t v2 = 0;
  }
  uint64_t v26 = v0[2];
  uint64_t v25 = v0[3];
  __swift_destroy_boxed_opaque_existential_1(v0[9]);
  __swift_destroy_boxed_opaque_existential_1(v25);
  swift_task_dealloc();
  swift_task_dealloc();
  *(void *)uint64_t v26 = v30;
  *(void *)(v26 + 8) = v7;
  *(void *)(v26 + 16) = v8;
  *(void *)(v26 + 24) = v2;
  *(void *)(v26 + 32) = v5;
  *(void *)(v26 + 40) = v6;
  *(unsigned char *)(v26 + 48) = v32;
  char v27 = (uint64_t (*)(void))v0[1];
  return v27();
}

uint64_t destroy for ConfirmationContext(uint64_t a1)
{
  return outlined consume of ConfirmationContext(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
}

uint64_t initializeWithCopy for ConfirmationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  unsigned __int8 v9 = *(unsigned char *)(a2 + 48);
  outlined copy of ConfirmationContext(*(void *)a2, v4, v5, v6, v7, v8, v9);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for ConfirmationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  unsigned __int8 v9 = *(unsigned char *)(a2 + 48);
  outlined copy of ConfirmationContext(*(void *)a2, v4, v5, v6, v7, v8, v9);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  unsigned __int8 v16 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v9;
  outlined consume of ConfirmationContext(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t assignWithTake for ConfirmationContext(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  unsigned __int8 v11 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v3;
  outlined consume of ConfirmationContext(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTag for ConfirmationContext(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48) >> 6;
}

uint64_t destructiveProjectEnumData for ConfirmationContext(uint64_t result)
{
  *(unsigned char *)(result + 48) &= 0x3Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for ConfirmationContext(uint64_t result, char a2)
{
  char v2 = *(unsigned char *)(result + 48) & 1 | (a2 << 6);
  *(void *)(result + 32) &= 0x1010101uLL;
  *(unsigned char *)(result + 48) = v2;
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationContext()
{
  return &type metadata for ConfirmationContext;
}

uint64_t destroy for ConfirmationContext.AppConfirmationContext()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ConfirmationContext.AppConfirmationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConfirmationContext.AppConfirmationContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ConfirmationContext.AppConfirmationContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationContext.AppConfirmationContext(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationContext.AppConfirmationContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationContext.AppConfirmationContext()
{
  return &type metadata for ConfirmationContext.AppConfirmationContext;
}

uint64_t initializeBufferWithCopyOfBuffer for ConfirmationContext.ScreenConfirmationContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ConfirmationContext.ScreenConfirmationContext()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for ConfirmationContext.ScreenConfirmationContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t assignWithTake for ConfirmationContext.ScreenConfirmationContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationContext.ScreenConfirmationContext(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 9)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationContext.ScreenConfirmationContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationContext.ScreenConfirmationContext()
{
  return &type metadata for ConfirmationContext.ScreenConfirmationContext;
}

uint64_t initializeBufferWithCopyOfBuffer for ConfirmationContext.EntityConfirmationContext(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConfirmationContext.EntityConfirmationContext(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ConfirmationContext.EntityConfirmationContext(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationContext.EntityConfirmationContext(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationContext.EntityConfirmationContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationContext.EntityConfirmationContext()
{
  return &type metadata for ConfirmationContext.EntityConfirmationContext;
}

unint64_t ValidateCallStatusFlow.ValidationResult.description.getter(char a1)
{
  unint64_t v1 = 0xD000000000000015;
  if (a1 != 5)
  {
    _StringGuts.grow(_:)(33);
    v3._countAndFlagsBits = 0xD00000000000001ELL;
    v3._object = (void *)0x800000022DDEB0C0;
    String.append(_:)(v3);
    specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(a1);
    v4._countAndFlagsBits = 41;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    return 0;
  }
  return v1;
}

unint64_t ValidateCallStatusFlow.ValidationResult.ValidationFailureReason.description.getter(char a1)
{
  if (a1 == 4) {
    return 0xD00000000000001ELL;
  }
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  unint64_t v2 = 0xD000000000000018;
  unint64_t v3 = 0x800000022DDEA5C0;
  switch("UnableToStartSharingTarget")
  {
    case 1u:
      unint64_t v3 = 0xEA0000000000646CLL;
      unint64_t v2 = 0x6F486E4F6C6C6163;
      break;
    case 2u:
      unint64_t v3 = 0x800000022DDEA5F0;
      unint64_t v2 = 0xD000000000000010;
      break;
    case 3u:
      unint64_t v2 = 0xD000000000000013;
      unint64_t v3 = 0x800000022DDEA610;
      break;
    default:
      break;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0xD000000000000021;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ValidateCallStatusFlow.ValidationResult.ValidationFailureReason(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  BOOL v4 = v3 == 4 && v2 == 4;
  if (v2 == 4 || v3 == 4) {
    return v4;
  }
  else {
    return specialized == infix<A>(_:_:)(v2, v3);
  }
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ValidateCallStatusFlow.ValidationResult.ValidationFailureReason()
{
  return ValidateCallStatusFlow.ValidationResult.ValidationFailureReason.description.getter(*v0);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ValidateCallStatusFlow.ValidationResult(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 5)
  {
    if (v3 == 5) {
      return 1;
    }
  }
  else if (v3 != 5)
  {
    if (v2 == 4)
    {
      if (v3 == 4) {
        return 1;
      }
    }
    else if (v3 != 4 && (specialized == infix<A>(_:_:)(v2, v3) & 1) != 0)
    {
      return 1;
    }
  }
  return 0;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ValidateCallStatusFlow.ValidationResult()
{
  return ValidateCallStatusFlow.ValidationResult.description.getter(*v0);
}

uint64_t ValidateCallStatusFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return MEMORY[0x270FA2498](ValidateCallStatusFlow.execute(), 0, 0);
}

uint64_t ValidateCallStatusFlow.execute()()
{
  unsigned __int8 v43 = v0;
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = v1[6];
  uint64_t v3 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v2);
  unsigned __int8 v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 152))(v2, v3);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.default);
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  unint64_t v8 = 0x2685B6000uLL;
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v38 = v7;
    unsigned __int8 v39 = v4;
    uint64_t v9 = swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    uint64_t v41 = v37;
    *(_DWORD *)uint64_t v9 = 136315906;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v10 = static ValidateCallStatusFlow.typeName;
    unint64_t v11 = unk_2685B7870;
    swift_bridgeObjectRetain();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 1024;
    uint64_t v13 = v1[6];
    uint64_t v12 = v1[7];
    __swift_project_boxed_opaque_existential_1(v1 + 3, v13);
    *((_DWORD *)v0 + 4) = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 56))(v13, v12) & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 18) = 2080;
    uint64_t v15 = v1[6];
    uint64_t v14 = v1[7];
    __swift_project_boxed_opaque_existential_1(v1 + 3, v15);
    int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v15, v14);
    unint64_t v17 = TUCallStatus.description.getter(v16);
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v9 + 28) = 2080;
    unsigned __int8 v4 = v39;
    unint64_t v19 = ScreenShareAvailability.description.getter(v39);
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22DD8A000, v6, v38, "%s: Call/device allows screen sharing: %{BOOL}d, call status: %s -> derived screen sharing availability: %s", (uint8_t *)v9, 0x26u);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v37, -1, -1);
    MEMORY[0x230F996F0](v9, -1, -1);

    unint64_t v8 = 0x2685B6000;
  }
  else
  {
    swift_release_n();
  }
  if (v4 == 5) {
    char v21 = 4;
  }
  else {
    char v21 = v4;
  }
  if (v4 == 4) {
    char v22 = 5;
  }
  else {
    char v22 = v21;
  }
  *(unsigned char *)(v0[4] + 16) = v22;
  swift_retain_n();
  unint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v40 = v26;
    *(_DWORD *)uint64_t v25 = 136315394;
    if (*(void *)(v8 + 3760) != -1) {
      swift_once();
    }
    uint64_t v27 = 0xD000000000000015;
    uint64_t v28 = v0[4];
    uint64_t v29 = static ValidateCallStatusFlow.typeName;
    unint64_t v30 = unk_2685B7870;
    swift_bridgeObjectRetain();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2080;
    int v31 = *(unsigned __int8 *)(v28 + 16);
    if (v31 == 5)
    {
      unint64_t v32 = 0x800000022DDEB0E0;
    }
    else
    {
      uint64_t v41 = 0;
      unint64_t v42 = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      v33._countAndFlagsBits = 0xD00000000000001ELL;
      v33._object = (void *)0x800000022DDEB0C0;
      String.append(_:)(v33);
      specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v31);
      v34._countAndFlagsBits = 41;
      v34._object = (void *)0xE100000000000000;
      String.append(_:)(v34);
      uint64_t v27 = v41;
      unint64_t v32 = v42;
    }
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v32, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_22DD8A000, v23, v24, "%s: Completing flow with exit value: %s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v26, -1, -1);
    MEMORY[0x230F996F0](v25, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  static ExecuteResponse.complete()();
  int v35 = (uint64_t (*)(void))v0[1];
  return v35();
}

uint64_t ValidateCallStatusFlow.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  return MEMORY[0x270FA0228](v0, 64, 7);
}

uint64_t type metadata accessor for ValidateCallStatusFlow()
{
  return self;
}

uint64_t getEnumTagSinglePayload for ValidateCallStatusFlow.ValidationResult(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB)
  {
    unsigned int v2 = a2 + 5;
    if (a2 + 5 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 5;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 5;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x22DDADC40);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 5;
      default:
        break;
    }
  }
  if (*a1 <= 4u) {
    int v7 = 4;
  }
  else {
    int v7 = *a1;
  }
  unsigned int v8 = v7 - 5;
  if (*a1 < 4u) {
    unsigned int v9 = -1;
  }
  else {
    unsigned int v9 = v8;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for ValidateCallStatusFlow.ValidationResult(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 5;
  if (a3 + 5 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFB) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v7 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x22DDADD28);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for ValidateCallStatusFlow.ValidationResult(unsigned __int8 *a1)
{
  if (*a1 <= 4u) {
    int v1 = 4;
  }
  else {
    int v1 = *a1;
  }
  unsigned int v2 = v1 - 4;
  if (*a1 >= 4u) {
    return v2;
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for ValidateCallStatusFlow.ValidationResult(unsigned char *result, int a2)
{
  if (a2) {
    *__n128 result = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for ValidateCallStatusFlow.ValidationResult()
{
  return &type metadata for ValidateCallStatusFlow.ValidationResult;
}

uint64_t protocol witness for Flow.execute() in conformance ValidateCallStatusFlow(uint64_t a1)
{
  uint64_t v4 = *v1;
  unsigned int v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unsigned int v5 = v2;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  v5[3] = a1;
  v5[4] = v4;
  return MEMORY[0x270FA2498](ValidateCallStatusFlow.execute(), 0, 0);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(uint64_t (*a1)(void))
{
  return a1() & 1;
}

{
  return a1();
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t specialized ValidateCallStatusFlow.on(input:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unsigned int v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v17 = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v11 = static ValidateCallStatusFlow.typeName;
    unint64_t v12 = unk_2685B7870;
    swift_bridgeObjectRetain();
    uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    lazy protocol witness table accessor for type Input and conformance Input();
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    _os_log_impl(&dword_22DD8A000, v7, v8, "%s: received input %s - this flow should never receive input, ignoring it...", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v10, -1, -1);
    MEMORY[0x230F996F0](v9, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  return 0;
}

uint64_t getEnumTagSinglePayload for ValidateCallStatusFlow.ValidationResult.ValidationFailureReason(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC)
  {
    unsigned int v2 = a2 + 4;
    if (a2 + 4 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 4;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 4;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x22DDAE254);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 4;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  BOOL v8 = v7 >= 4;
  unsigned int v9 = v7 - 4;
  if (!v8) {
    unsigned int v9 = -1;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for ValidateCallStatusFlow.ValidationResult.ValidationFailureReason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 4;
  if (a3 + 4 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFC) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v7 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x22DDAE33CLL);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for ValidateCallStatusFlow.ValidationResult.ValidationFailureReason(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 4) {
    return v1 - 3;
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for ValidateCallStatusFlow.ValidationResult.ValidationFailureReason(unsigned char *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for ValidateCallStatusFlow.ValidationResult.ValidationFailureReason()
{
  return &type metadata for ValidateCallStatusFlow.ValidationResult.ValidationFailureReason;
}

uint64_t type metadata completion function for PromptForConfirmationFlowWrapper()
{
  return swift_initClassMetadata2();
}

uint64_t PromptForConfirmationFlowWrapper.exitValue.getter()
{
  return PromptForConfirmationFlowAsync.exitValue.getter();
}

uint64_t PromptForConfirmationFlowWrapper.on(input:)()
{
  return PromptForConfirmationFlowAsync.on(input:)() & 1;
}

uint64_t PromptForConfirmationFlowWrapper.execute()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x270FA2498](PromptForConfirmationFlowWrapper.execute(), 0, 0);
}

uint64_t PromptForConfirmationFlowWrapper.execute()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = PromptForValueFlowWrapper.execute();
  uint64_t v2 = *(void *)(v0 + 16);
  return MEMORY[0x270F66720](v2);
}

uint64_t type metadata accessor for PromptForConfirmationFlowWrapper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for Flow.on(input:) in conformance PromptForConfirmationFlowWrapper<A>()
{
  return PromptForConfirmationFlowWrapper.on(input:)() & 1;
}

uint64_t protocol witness for Flow.execute() in conformance PromptForConfirmationFlowWrapper<A>(uint64_t a1)
{
  uint64_t v4 = *v1;
  unsigned int v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unsigned int v5 = v2;
  v5[2] = a1;
  v5[3] = v4;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return MEMORY[0x270FA2498](PromptForConfirmationFlowWrapper.execute(), 0, 0);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance PromptForConfirmationFlowWrapper<A>()
{
  return PromptForConfirmationFlowWrapper.exitValue.getter();
}

id one-time initialization function for bundle()
{
  type metadata accessor for DialogExecutor();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  static DialogExecutor.bundle = (uint64_t)result;
  return result;
}

unint64_t DialogExecutor.DialogExecutorError.description.getter(char a1)
{
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = CATIdentifier.stringValue.getter(a1);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0xD00000000000002ALL;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance DialogExecutor.DialogExecutorError()
{
  return DialogExecutor.DialogExecutorError.description.getter(*v0);
}

uint64_t type metadata accessor for DialogExecutor()
{
  return self;
}

uint64_t specialized DialogExecutor.execute(catId:parameters:globals:)(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 56) = a2;
  *(void *)(v3 + 64) = a3;
  *(unsigned char *)(v3 + 120) = a1;
  uint64_t v4 = type metadata accessor for CATOption();
  *(void *)(v3 + 72) = v4;
  *(void *)(v3 + 80) = *(void *)(v4 - 8);
  *(void *)(v3 + 88) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized DialogExecutor.execute(catId:parameters:globals:), 0, 0);
}

uint64_t specialized DialogExecutor.execute(catId:parameters:globals:)()
{
  type metadata accessor for CATDialog();
  if (one-time initialization token for bundle != -1) {
    swift_once();
  }
  uint64_t v1 = static DialogExecutor.bundle;
  uint64_t v2 = CATIdentifier.stringValue.getter(*(unsigned char *)(v0 + 120));
  uint64_t v4 = v3;
  *(void *)(v0 + 96) = v3;
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  static CATOption.defaultMode.getter();
  unsigned int v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  *unsigned int v5 = v0;
  v5[1] = specialized DialogExecutor.execute(catId:parameters:globals:);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v8 = *(void *)(v0 + 64);
  return MEMORY[0x270F65148](v1, v2, v4, v7, v8, v0 + 16, v6);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized DialogExecutor.execute(catId:parameters:globals:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)v2 + 16;
  uint64_t v6 = *(void **)v2;
  *(void *)(*(void *)v2 + 112) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  (*(void (**)(void, void))(v4[10] + 8))(v4[11], v4[9]);
  outlined destroy of CatCallable?(v5);
  if (v1)
  {
    return MEMORY[0x270FA2498](specialized DialogExecutor.execute(catId:parameters:globals:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(uint64_t))v6[1];
    return v7(a1);
  }
}

uint64_t specialized DialogExecutor.executeAsLabel(catId:parameters:)(char a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  *(unsigned char *)(v2 + 88) = a1;
  uint64_t v3 = type metadata accessor for ResponseMode();
  *(void *)(v2 + 24) = v3;
  *(void *)(v2 + 32) = *(void *)(v3 - 8);
  *(void *)(v2 + 40) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized DialogExecutor.executeAsLabel(catId:parameters:), 0, 0);
}

uint64_t specialized DialogExecutor.executeAsLabel(catId:parameters:)()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (objc_class *)type metadata accessor for CATGlobals();
  static CATGlobals.defaultBuilder()();
  static ResponseMode.displayOnly.getter();
  *(void *)(v0 + 48) = dispatch thunk of CATGlobals.Builder.withResponseMode(_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  id v5 = objc_allocWithZone(v4);
  swift_retain();
  uint64_t v6 = CATGlobals.init(builder:)();
  *(void *)(v0 + 56) = v6;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized DialogExecutor.execute(catId:parameters:globals:)
                                                          + async function pointer to specialized DialogExecutor.execute(catId:parameters:globals:));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v7;
  *uint64_t v7 = v0;
  v7[1] = specialized DialogExecutor.executeAsLabel(catId:parameters:);
  uint64_t v8 = *(void *)(v0 + 16);
  uint64_t v9 = *(unsigned __int8 *)(v0 + 88);
  return v11(v9, v8, v6);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized DialogExecutor.executeAsLabel(catId:parameters:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 72) = a1;
  *(void *)(v3 + 80) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = specialized DialogExecutor.executeAsLabel(catId:parameters:);
  }
  else
  {

    uint64_t v4 = specialized DialogExecutor.executeAsLabel(catId:parameters:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

void specialized DialogExecutor.executeAsLabel(catId:parameters:)()
{
  id v1 = objc_msgSend(*(id *)(v0 + 72), sel_dialog);
  type metadata accessor for DialogElement();
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v11) {
      goto LABEL_13;
    }
  }
  else if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_13;
  }
  if ((v2 & 0xC000000000000001) != 0)
  {
    id v3 = (id)MEMORY[0x230F98F30](0, v2);
  }
  else
  {
    if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v3 = *(id *)(v2 + 32);
  }
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v4, sel_fullPrint);

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (v9)
  {

    swift_release();
    swift_task_dealloc();
    uint64_t v10 = *(void (**)(uint64_t, unint64_t))(v0 + 8);
    v10(v6, v8);
    return;
  }
LABEL_13:
  uint64_t v12 = *(void **)(v0 + 72);
  char v13 = *(unsigned char *)(v0 + 88);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type DialogExecutor.DialogExecutorError and conformance DialogExecutor.DialogExecutorError();
  swift_allocError();
  *unint64_t v14 = v13;
  swift_willThrow();

  swift_release();
  swift_task_dealloc();
  uint64_t v15 = *(void (**)(void))(v0 + 8);
  v15();
}

unint64_t type metadata accessor for DialogElement()
{
  unint64_t result = lazy cache variable for type metadata for DialogElement;
  if (!lazy cache variable for type metadata for DialogElement)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for DialogElement);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DialogExecutor.DialogExecutorError and conformance DialogExecutor.DialogExecutorError()
{
  unint64_t result = lazy protocol witness table cache variable for type DialogExecutor.DialogExecutorError and conformance DialogExecutor.DialogExecutorError;
  if (!lazy protocol witness table cache variable for type DialogExecutor.DialogExecutorError and conformance DialogExecutor.DialogExecutorError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DialogExecutor.DialogExecutorError and conformance DialogExecutor.DialogExecutorError);
  }
  return result;
}

uint64_t outlined destroy of CatCallable?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CatCallable?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for DialogExecutor.DialogExecutorError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 249 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 249) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 6)
  {
    unsigned int v6 = ((a2 - 7) >> 8) + 1;
    *unint64_t result = a2 - 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22DDAF2BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = 32 * (((-a2 >> 1) & 3) - 4 * a2);
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DialogExecutor.DialogExecutorError()
{
  return &type metadata for DialogExecutor.DialogExecutorError;
}

uint64_t ShareStatus.description.getter()
{
  if (!*((unsigned char *)v0 + 32))
  {
    _StringGuts.grow(_:)(29);
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v11 = static ShareStatus.typeName;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v22 = v11;
    v12._countAndFlagsBits = 0xD000000000000018;
    v12._object = (void *)0x800000022DDEB180;
    String.append(_:)(v12);
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v20 = static ScreenShareType.typeName;
    uint64_t v21 = *(void *)algn_2685B73A8;
    swift_bridgeObjectRetain();
    v13._countAndFlagsBits = 0x6E65657263732ELL;
    v13._object = (void *)0xE700000000000000;
    String.append(_:)(v13);
    uint64_t v9 = v20;
    uint64_t v10 = v21;
    goto LABEL_11;
  }
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  if (*((unsigned char *)v0 + 32) == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(44);
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v5 = static ShareStatus.typeName;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v22 = v5;
    v6._countAndFlagsBits = 0xD000000000000019;
    v6._object = (void *)0x800000022DDEB160;
    String.append(_:)(v6);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    v7._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 0x656C646E7562202CLL;
    v8._object = (void *)0xEC000000203A6449;
    String.append(_:)(v8);
    uint64_t v9 = String.init<A>(describing:)();
LABEL_11:
    String.append(_:)(*(Swift::String *)&v9);
    swift_bridgeObjectRelease();
    unint64_t v14 = 41;
    unint64_t v15 = 0xE100000000000000;
    goto LABEL_12;
  }
  if (v4 | v1 | v2 | v3)
  {
    if (v2 == 1 && (v4 | v1 | v3) == 0)
    {
      _StringGuts.grow(_:)(20);
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v19 = static ShareStatus.typeName;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v22 = v19;
      unint64_t v14 = 0xD000000000000012;
      unint64_t v15 = 0x800000022DDEB1C0;
    }
    else
    {
      _StringGuts.grow(_:)(18);
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v18 = static ShareStatus.typeName;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v22 = v18;
      unint64_t v15 = 0x800000022DDEB1A0;
      unint64_t v14 = 0xD000000000000010;
    }
  }
  else
  {
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v22 = static ShareStatus.typeName;
    swift_bridgeObjectRetain();
    unint64_t v14 = 0x76697463616E692ELL;
    unint64_t v15 = 0xE900000000000065;
  }
LABEL_12:
  String.append(_:)(*(Swift::String *)&v14);
  return v22;
}

uint64_t specialized static ShareStatus.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  int v6 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v8 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  int v11 = *(unsigned __int8 *)(a2 + 32);
  if (!*(unsigned char *)(a1 + 32))
  {
    if (!*(unsigned char *)(a2 + 32))
    {
      outlined consume of ShareStatus(*(void *)a1, v2, v4, v5, 0);
      uint64_t v13 = v8;
      uint64_t v14 = v7;
      uint64_t v15 = v9;
      uint64_t v16 = v10;
      char v17 = 0;
LABEL_33:
      outlined consume of ShareStatus(v13, v14, v15, v16, v17);
      return 1;
    }
    goto LABEL_38;
  }
  if (v6 != 1)
  {
    if (!(v4 | v2 | v3 | v5))
    {
      if (v11 != 2 || (v9 | v7 | v8 | v10) != 0) {
        goto LABEL_38;
      }
      outlined consume of ShareStatus(0, 0, 0, 0, 2);
      uint64_t v13 = 0;
      goto LABEL_32;
    }
    if (v3 == 1 && (v4 | v2 | v5) == 0)
    {
      if (v11 == 2 && v8 == 1 && !(v9 | v7 | v10))
      {
        uint64_t v12 = 1;
        outlined consume of ShareStatus(1, 0, 0, 0, 2);
        outlined consume of ShareStatus(1, 0, 0, 0, 2);
        return v12;
      }
      goto LABEL_38;
    }
    if (v11 == 2 && v8 == 2 && !(v9 | v7 | v10))
    {
      outlined consume of ShareStatus(2, 0, 0, 0, 2);
      uint64_t v13 = 2;
LABEL_32:
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      char v17 = 2;
      goto LABEL_33;
    }
LABEL_38:
    outlined copy of ShareStatus(v8, v7, v9, v10, v11);
    outlined consume of ShareStatus(v3, v2, v4, v5, v6);
    uint64_t v20 = v8;
    uint64_t v21 = v7;
    uint64_t v22 = v9;
    uint64_t v23 = v10;
    char v24 = v11;
LABEL_39:
    outlined consume of ShareStatus(v20, v21, v22, v23, v24);
    return 0;
  }
  if (v11 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_38;
  }
  if (!v2)
  {
    if (!v7) {
      goto LABEL_9;
    }
    goto LABEL_43;
  }
  if (!v7 || (v3 != v8 || v2 != v7) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
LABEL_43:
    outlined copy of ShareStatus(v8, v7, v9, v10, 1);
    outlined copy of ShareStatus(v3, v2, v4, v5, 1);
    outlined consume of ShareStatus(v3, v2, v4, v5, 1);
    uint64_t v20 = v8;
    uint64_t v21 = v7;
    uint64_t v22 = v9;
    uint64_t v23 = v10;
    char v24 = 1;
    goto LABEL_39;
  }
LABEL_9:
  if (!v5)
  {
    uint64_t v12 = 1;
    outlined copy of ShareStatus(v8, v7, v9, v10, 1);
    outlined copy of ShareStatus(v3, v2, v4, 0, 1);
    swift_bridgeObjectRetain();
    outlined consume of ShareStatus(v3, v2, v4, 0, 1);
    outlined consume of ShareStatus(v8, v7, v9, v10, 1);
    if (!v10) {
      return v12;
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  if (!v10)
  {
    outlined copy of ShareStatus(v8, v7, v9, 0, 1);
    outlined copy of ShareStatus(v3, v2, v4, v5, 1);
    outlined consume of ShareStatus(v3, v2, v4, v5, 1);
    uint64_t v20 = v8;
    uint64_t v21 = v7;
    uint64_t v22 = v9;
    uint64_t v23 = 0;
    char v24 = 1;
    goto LABEL_39;
  }
  if (v4 != v9 || v5 != v10)
  {
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v12 = 1;
    outlined copy of ShareStatus(v8, v7, v9, v10, 1);
    outlined copy of ShareStatus(v3, v2, v4, v5, 1);
    outlined consume of ShareStatus(v3, v2, v4, v5, 1);
    outlined consume of ShareStatus(v8, v7, v9, v10, 1);
    if (v26) {
      return v12;
    }
    return 0;
  }
  uint64_t v12 = 1;
  outlined copy of ShareStatus(v8, v7, v4, v5, 1);
  outlined copy of ShareStatus(v3, v2, v4, v5, 1);
  outlined consume of ShareStatus(v3, v2, v4, v5, 1);
  outlined consume of ShareStatus(v8, v7, v4, v5, 1);
  return v12;
}

uint64_t outlined copy of ShareStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 == 1)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for ShareStatus(uint64_t a1)
{
  return outlined consume of ShareStatus(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t outlined consume of ShareStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 == 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ShareStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of ShareStatus(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for ShareStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of ShareStatus(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  char v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of ShareStatus(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ShareStatus(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  char v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of ShareStatus(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareStatus(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ShareStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ShareStatus(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 1u) {
    return *(unsigned __int8 *)(a1 + 32);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for ShareStatus(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ShareStatus()
{
  return &type metadata for ShareStatus;
}

uint64_t dispatch thunk of Converter.convert(utils:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 24) + **(int **)(a4 + 24));
  char v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *char v9 = v4;
  v9[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return v11(a1, a2, a3, a4);
}

uint64_t type metadata completion function for ExpanseUIModelConverter.BinaryButtonSnippetModelConverter()
{
  uint64_t result = type metadata accessor for ExpanseUIModelConverter.ButtonModelConverter();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ExpanseUIModelConverter.ButtonModelConverter();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t ExpanseUIModelConverter.AppStorePunchoutSnippetModelConverter.convert(utils:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[6] = a1;
  return MEMORY[0x270FA2498](ExpanseUIModelConverter.AppStorePunchoutSnippetModelConverter.convert(utils:), 0, 0);
}

uint64_t ExpanseUIModelConverter.AppStorePunchoutSnippetModelConverter.convert(utils:)()
{
  unint64_t v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v0 + 72) = v1;
  uint64_t v4 = (uint64_t (*)(char, uint64_t))((char *)&async function pointer to specialized DialogExecutor.executeAsLabel(catId:parameters:)
                                             + async function pointer to specialized DialogExecutor.executeAsLabel(catId:parameters:));
  unint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v2;
  *unint64_t v2 = v0;
  v2[1] = ExpanseUIModelConverter.AppStorePunchoutSnippetModelConverter.convert(utils:);
  return v4(1, v1);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  unint64_t v1 = v0[12];
  unsigned int v3 = v0[7];
  unint64_t v2 = v0[8];
  v0[2] = v0[13];
  v0[3] = v1;
  swift_bridgeObjectRetain();
  Loggable.init(wrappedValue:)();
  type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(0);
  v0[4] = v3;
  v0[5] = v2;
  Loggable.init(wrappedValue:)();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ExpanseUIModelConverter.AppStorePunchoutSnippetModelConverter.convert(utils:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 88) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = ExpanseUIModelConverter.AppStorePunchoutSnippetModelConverter.convert(utils:);
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v6 + 96) = a2;
    *(void *)(v6 + 104) = a1;
    uint64_t v7 = ExpanseUIModelConverter.AppStorePunchoutSnippetModelConverter.convert(utils:);
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ExpanseUIModelConverter.AppStorePunchoutSnippetModelConverter(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 112);
  uint64_t v2 = type metadata accessor for ExpanseUIModelConverter.ButtonModelConverter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 120);
  uint64_t v4 = type metadata accessor for ExpanseUIModelConverter.ButtonModelConverter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.__deallocating_deinit()
{
  ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t type metadata accessor for ExpanseUIModelConverter.BinaryButtonSnippetModelConverter()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ExpanseUIModelConverter.ButtonModelConverter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 20, 7);
}

uint64_t type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter);
}

uint64_t ExpanseUIModelConverter.ShareAppConfirmationSnippetModelConverter.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0228](v0, 43, 7);
}

uint64_t type metadata accessor for ExpanseUIModelConverter.ShareAppConfirmationSnippetModelConverter(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for ExpanseUIModelConverter.ShareAppConfirmationSnippetModelConverter);
}

uint64_t type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter()
{
  return swift_initClassMetadata2();
}

uint64_t outlined copy of ExpanseUIModelConverter(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2 || a3 == 1) {
    return swift_retain();
  }
  if (!a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for ExpanseUIModelConverter(uint64_t a1)
{
  return outlined consume of ExpanseUIModelConverter(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of ExpanseUIModelConverter(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2 || a3 == 1) {
    return swift_release();
  }
  if (!a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ExpanseUIModelConverter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of ExpanseUIModelConverter(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ExpanseUIModelConverter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of ExpanseUIModelConverter(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of ExpanseUIModelConverter(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ExpanseUIModelConverter(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of ExpanseUIModelConverter(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpanseUIModelConverter(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ExpanseUIModelConverter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ExpanseUIModelConverter(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for ExpanseUIModelConverter(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ExpanseUIModelConverter()
{
  return &type metadata for ExpanseUIModelConverter;
}

uint64_t type metadata completion function for ExpanseUIModelConverter.ButtonModelConverter()
{
  uint64_t result = type metadata accessor for CATExecutionInfo();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ExpanseUIModelConverter.ButtonModelConverter(unsigned char *a1, void *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = ~v6;
  uint64_t v8 = ((v6 + 1) & ~v6) + *(void *)(v5 + 64);
  if (v6 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || (unint64_t)(v8 + 1) > 0x18)
  {
    uint64_t v11 = *a2;
    *int v4 = *a2;
    int v4 = (void *)(v11 + ((v6 + 16) & v7));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    (*(void (**)(unint64_t, unint64_t))(v5 + 16))((unint64_t)&a1[v6 + 1] & v7, ((unint64_t)a2 + v6 + 1) & v7);
    *((unsigned char *)v4 + v8) = *((unsigned char *)a2 + v8);
  }
  return v4;
}

unsigned char *initializeWithCopy for ExpanseUIModelConverter.ButtonModelConverter(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 16;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t, unint64_t))(v5 + 16))((unint64_t)&a1[v7 + 1] & ~v7, (unint64_t)&a2[v7 + 1] & ~v7);
  uint64_t v8 = ((v7 + 1) & ~v7) + *(void *)(v6 + 48);
  a1[v8] = a2[v8];
  return a1;
}

unsigned char *assignWithCopy for ExpanseUIModelConverter.ButtonModelConverter(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 24;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t, unint64_t))(v5 + 24))((unint64_t)&a1[v7 + 1] & ~v7, (unint64_t)&a2[v7 + 1] & ~v7);
  uint64_t v8 = ((v7 + 1) & ~v7) + *(void *)(v6 + 40);
  a1[v8] = a2[v8];
  return a1;
}

unsigned char *initializeWithTake for ExpanseUIModelConverter.ButtonModelConverter(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t, unint64_t))(v5 + 32))((unint64_t)&a1[v7 + 1] & ~v7, (unint64_t)&a2[v7 + 1] & ~v7);
  uint64_t v8 = ((v7 + 1) & ~v7) + *(void *)(v6 + 32);
  a1[v8] = a2[v8];
  return a1;
}

unsigned char *assignWithTake for ExpanseUIModelConverter.ButtonModelConverter(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 40;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t, unint64_t))(v5 + 40))((unint64_t)&a1[v7 + 1] & ~v7, (unint64_t)&a2[v7 + 1] & ~v7);
  uint64_t v8 = ((v7 + 1) & ~v7) + *(void *)(v6 + 24);
  a1[v8] = a2[v8];
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpanseUIModelConverter.ButtonModelConverter(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 6) {
    int v6 = 6;
  }
  else {
    int v6 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v9 = ((v7 + 1) & ~v7) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  int v10 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_26;
  }
  uint64_t v11 = v9 + 1;
  char v12 = 8 * (v9 + 1);
  if ((v9 + 1) <= 3)
  {
    unsigned int v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)&a1[v11];
      if (!v13) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)&a1[v11];
      if (!*(_WORD *)&a1[v11]) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v15 < 2)
    {
LABEL_26:
      if (v6 == v8)
      {
        if (v5 > 6)
        {
          return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v7 + 1] & ~v7);
        }
        else
        {
          unsigned int v17 = *a1;
          if (((v17 >> 4) & 6) != 0) {
            return 8 - ((v17 >> 4) & 6 | (v17 >> 7));
          }
          else {
            return 0;
          }
        }
      }
      else
      {
        unsigned int v18 = a1[v9];
        if (v18 >= 2) {
          return v18 - 1;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v13 = a1[v11];
  if (!a1[v11]) {
    goto LABEL_26;
  }
LABEL_18:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v9 != -1)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v11) = *(unsigned __int16 *)a1 | (a1[2] << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *a1;
        break;
    }
  }
  return v8 + (v11 | v16) + 1;
}

void storeEnumTagSinglePayload for ExpanseUIModelConverter.ButtonModelConverter(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 6) {
    int v8 = 6;
  }
  else {
    int v8 = *(_DWORD *)(v6 + 84);
  }
  if (v7 <= 0xFE) {
    unsigned int v9 = 254;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = ((v10 + 1) & ~v10) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v12 = v11 + 1;
  BOOL v13 = a3 >= v9;
  unsigned int v14 = a3 - v9;
  if (v14 != 0 && v13)
  {
    if (v12 <= 3)
    {
      unsigned int v18 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
      if (HIWORD(v18))
      {
        int v15 = 4;
      }
      else if (v18 >= 0x100)
      {
        int v15 = 2;
      }
      else
      {
        int v15 = v18 > 1;
      }
    }
    else
    {
      int v15 = 1;
    }
  }
  else
  {
    int v15 = 0;
  }
  if (v9 < a2)
  {
    unsigned int v16 = ~v9 + a2;
    if (v12 < 4)
    {
      int v17 = (v16 >> (8 * v12)) + 1;
      if (v11 != -1)
      {
        int v19 = v16 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if (v12 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v12 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v11 + 1);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v15)
    {
      case 1:
        a1[v12] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v17;
        return;
      case 3:
        goto LABEL_47;
      case 4:
        *(_DWORD *)&a1[v12] = v17;
        return;
      default:
        return;
    }
  }
  switch(v15)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_47:
      __break(1u);
      JUMPOUT(0x22DDB10FCLL);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v8 == v9)
        {
          if (v7 > 6)
          {
            unint64_t v21 = (unint64_t)&a1[v10 + 1] & ~v10;
            uint64_t v22 = *(void (**)(unint64_t))(v6 + 56);
            v22(v21);
          }
          else
          {
            if (a2 > 6) {
              LOBYTE(v20) = a2 - 7;
            }
            else {
              unsigned int v20 = 32 * (((-a2 >> 1) & 3) - 4 * a2);
            }
            *a1 = v20;
          }
        }
        else
        {
          a1[v11] = a2 + 1;
        }
      }
      return;
  }
}

uint64_t destroy for ExpanseUIModelConverter.Utils(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  return __swift_destroy_boxed_opaque_existential_1(a1 + 40);
}

uint64_t initializeWithCopy for ExpanseUIModelConverter.Utils(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

uint64_t *assignWithCopy for ExpanseUIModelConverter.Utils(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for ExpanseUIModelConverter.Utils(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpanseUIModelConverter.Utils(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExpanseUIModelConverter.Utils(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExpanseUIModelConverter.Utils()
{
  return &type metadata for ExpanseUIModelConverter.Utils;
}

uint64_t getEnumTagSinglePayload for ExpanseUIModelConverter.AppStorePunchoutSnippetModelConverter(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExpanseUIModelConverter.AppStorePunchoutSnippetModelConverter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExpanseUIModelConverter.AppStorePunchoutSnippetModelConverter()
{
  return &type metadata for ExpanseUIModelConverter.AppStorePunchoutSnippetModelConverter;
}

uint64_t dispatch thunk of SharingResponse.dialogId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SharingResponse.dialogPhase.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SharingResponse.nlContextUpdate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SharingResponse.uiModelConverter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ParameterizedSharingResponse.parameters.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t getEnumTagSinglePayload for Responses.Common.NotInCall(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm);
}

uint64_t storeEnumTagSinglePayload for Responses.Common.NotInCall(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm);
}

uint64_t type metadata accessor for Responses.Common.NotInCall(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.Common.NotInCall);
}

uint64_t protocol witness for SharingResponse.uiModelConverter.getter in conformance Responses.StartSharing.AlreadySharingTarget()
{
  return 0;
}

uint64_t protocol witness for ParameterizedSharingResponse.parameters.getter in conformance Responses.StartSharing.AlreadySharingTarget@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2 + *(int *)(a1 + 24);
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 24);
  *(unsigned char *)a2 = *(unsigned char *)v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for SharingResponse.nlContextUpdate.getter in conformance Responses.StartSharing.NeedsTarget@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of NLContextUpdate?(v2 + *(int *)(a1 + 24), a2);
}

uint64_t protocol witness for SharingResponse.uiModelConverter.getter in conformance Responses.StartSharing.AppNotInstalled(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 24));
  uint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  uint64_t v5 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    uint64_t v5 = v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0;
  }
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t protocol witness for ParameterizedSharingResponse.parameters.getter in conformance Responses.StartSharing.ConfirmShareEntireScreen@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(v2 + *(int *)(result + 28));
  return result;
}

double protocol witness for SharingResponse.uiModelConverter.getter in conformance Responses.StartSharing.ConfirmShareWithEveryoneInCall()
{
  type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(0);
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 16777219;
  *(_DWORD *)(v0 + 16) = 16777219;
  return result;
}

uint64_t Responses.StartSharing.ConfirmReadyToShare.uiModelConverter.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Responses.StartSharing.ConfirmReadyToShare(0) + 28);
  if (*(unsigned char *)v1 == 1)
  {
    type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(0);
    uint64_t v2 = swift_allocObject();
    *(_DWORD *)(v2 + 16) = 16777219;
  }
  else
  {
    uint64_t v4 = *(void *)(v1 + 8);
    uint64_t v3 = *(void *)(v1 + 16);
    type metadata accessor for ExpanseUIModelConverter.ShareAppConfirmationSnippetModelConverter(0);
    uint64_t v2 = swift_allocObject();
    *(unsigned char *)(v2 + 16) = 2;
    *(void *)(v2 + 24) = v4;
    *(void *)(v2 + 32) = v3;
    *(_WORD *)(v2 + 40) = 0;
    *(unsigned char *)(v2 + 42) = 1;
    swift_bridgeObjectRetain();
  }
  return v2;
}

uint64_t protocol witness for ParameterizedSharingResponse.parameters.getter in conformance Responses.StartSharing.ConfirmShareWithEveryoneInCall@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2 + *(int *)(a1 + 28);
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 24);
  *(unsigned char *)a2 = *(unsigned char *)v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for SharingResponse.uiModelConverter.getter in conformance Responses.StartSharing.ConfirmReadyToShare()
{
  return Responses.StartSharing.ConfirmReadyToShare.uiModelConverter.getter();
}

uint64_t getEnumTagSinglePayload for Responses.StartSharing.ConfirmShareWithEveryoneInCall(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_2Tm);
}

uint64_t storeEnumTagSinglePayload for Responses.StartSharing.ConfirmShareWithEveryoneInCall(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3Tm);
}

uint64_t type metadata accessor for Responses.StartSharing.ConfirmShareWithEveryoneInCall(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StartSharing.ConfirmShareWithEveryoneInCall);
}

void type metadata completion function for Responses.StartSharing.ConfirmShareWithEveryoneInCall()
{
}

{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for DialogPhase();
  if (v0 <= 0x3F)
  {
    type metadata accessor for NLContextUpdate?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for NLContextUpdate?()
{
  if (!lazy cache variable for type metadata for NLContextUpdate?)
  {
    type metadata accessor for NLContextUpdate();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NLContextUpdate?);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Responses.StartSharing.ConfirmShareWithEveryoneInCall(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = a3[5];
    int v8 = (char *)a1 + v7;
    unsigned int v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for DialogPhase();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[6];
    size_t v12 = (char *)v4 + v11;
    BOOL v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for NLContextUpdate();
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    uint64_t v18 = a3[7];
    int v19 = (char *)v4 + v18;
    unsigned int v20 = (char *)a2 + v18;
    *int v19 = *v20;
    uint64_t v21 = *((void *)v20 + 2);
    *((void *)v19 + 1) = *((void *)v20 + 1);
    *((void *)v19 + 2) = v21;
    *((void *)v19 + 3) = *((void *)v20 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Responses.StartSharing.ConfirmShareWithEveryoneInCall(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for DialogPhase();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for NLContextUpdate();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

unsigned char *initializeWithCopy for Responses.StartSharing.ConfirmShareWithEveryoneInCall(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  size_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for NLContextUpdate();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v16 = a3[7];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  *uint64_t v17 = *v18;
  uint64_t v19 = *((void *)v18 + 2);
  *((void *)v17 + 1) = *((void *)v18 + 1);
  *((void *)v17 + 2) = v19;
  *((void *)v17 + 3) = *((void *)v18 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unsigned char *assignWithCopy for Responses.StartSharing.ConfirmShareWithEveryoneInCall(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  size_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for NLContextUpdate();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(unsigned char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  uint64_t v19 = a3[7];
  unsigned int v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  *unsigned int v20 = a2[v19];
  *((void *)v20 + 1) = *(void *)&a2[v19 + 8];
  *((void *)v20 + 2) = *(void *)&a2[v19 + 16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v20 + 3) = *((void *)v21 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

unsigned char *initializeWithTake for Responses.StartSharing.ConfirmShareWithEveryoneInCall(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  size_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for NLContextUpdate();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v16 = a3[7];
  int v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  long long v19 = v18[1];
  *int v17 = *v18;
  v17[1] = v19;
  return a1;
}

unsigned char *assignWithTake for Responses.StartSharing.ConfirmShareWithEveryoneInCall(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  size_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for NLContextUpdate();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(unsigned char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  uint64_t v19 = a3[7];
  unsigned int v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  *unsigned int v20 = *v21;
  uint64_t v22 = *((void *)v21 + 2);
  *((void *)v20 + 1) = *((void *)v21 + 1);
  *((void *)v20 + 2) = v22;
  swift_bridgeObjectRelease();
  *((void *)v20 + 3) = *((void *)v21 + 3);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Responses.StartSharing.ConfirmReadyToShare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22DDB223C);
}

uint64_t __swift_get_extra_inhabitant_index_2Tm(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DialogPhase();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_5:
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[6];
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + a3[7] + 16);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  int v14 = v13 - 1;
  if (v14 < 0) {
    int v14 = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for Responses.StartSharing.ConfirmReadyToShare(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22DDB2378);
}

uint64_t __swift_store_extra_inhabitant_index_3Tm(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for DialogPhase();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
  }
  else
  {
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
    {
      *(void *)(a1 + a4[7] + 16) = a2;
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[6];
  }
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v13(a1 + v11, a2, a2, v9);
}

uint64_t type metadata accessor for Responses.StartSharing.ConfirmReadyToShare(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StartSharing.ConfirmReadyToShare);
}

void *initializeBufferWithCopyOfBuffer for Responses.StartSharing.ConfirmShareEntireScreen(unsigned char *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = &a1[v7];
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for DialogPhase();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[6];
    size_t v12 = (char *)v4 + v11;
    unint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for NLContextUpdate();
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    *((unsigned char *)v4 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  }
  return v4;
}

unsigned char *initializeWithCopy for Responses.StartSharing.ConfirmShareEntireScreen(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  size_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for NLContextUpdate();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

unsigned char *assignWithCopy for Responses.StartSharing.ConfirmShareEntireScreen(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  size_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for NLContextUpdate();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(unsigned char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

unsigned char *initializeWithTake for Responses.StartSharing.ConfirmShareEntireScreen(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  size_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for NLContextUpdate();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

unsigned char *assignWithTake for Responses.StartSharing.ConfirmShareEntireScreen(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  size_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for NLContextUpdate();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(unsigned char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

uint64_t getEnumTagSinglePayload for Responses.StartSharing.ConfirmShareEntireScreen(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22DDB2D38);
}

uint64_t sub_22DDB2D38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DialogPhase();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    if (*(_DWORD *)(*(void *)(v10 - 8) + 84) != a2)
    {
      unsigned int v13 = *(unsigned __int8 *)(a1 + a3[7]);
      if (v13 >= 2) {
        return ((v13 + 2147483646) & 0x7FFFFFFF) + 1;
      }
      else {
        return 0;
      }
    }
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[6];
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);

  return v11(a1 + v9, a2, v7);
}

uint64_t storeEnumTagSinglePayload for Responses.StartSharing.ConfirmShareEntireScreen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22DDB2E70);
}

uint64_t sub_22DDB2E70(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for DialogPhase();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
  }
  else
  {
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
    {
      *(unsigned char *)(a1 + a4[7]) = a2 + 1;
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[6];
  }
  unsigned int v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v13(a1 + v11, a2, a2, v9);
}

uint64_t type metadata accessor for Responses.StartSharing.ConfirmShareEntireScreen(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StartSharing.ConfirmShareEntireScreen);
}

void type metadata completion function for Responses.StartSharing.ConfirmShareEntireScreen()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for Responses.StartSharing.NeedsTarget(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for DialogPhase();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = *(int *)(a3 + 24);
    size_t v12 = (char *)v4 + v11;
    unsigned int v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for NLContextUpdate();
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
  }
  return v4;
}

uint64_t destroy for Responses.StartSharing.ConfirmShareEntireScreen(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for DialogPhase();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for NLContextUpdate();
  uint64_t v10 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v6, 1, v7);
  if (!result)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
    return v9(v6, v7);
  }
  return result;
}

unsigned char *initializeWithCopy for Responses.StartSharing.NeedsTarget(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = &a1[v10];
  size_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for NLContextUpdate();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  return a1;
}

unsigned char *assignWithCopy for Responses.StartSharing.NeedsTarget(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = &a1[v10];
  size_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for NLContextUpdate();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v8) = v15(v11, 1, v13);
  int v16 = v15(v12, 1, v13);
  if (!v8)
  {
    if (!v16)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 24))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(unsigned char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

unsigned char *initializeWithTake for Responses.StartSharing.NeedsTarget(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = &a1[v10];
  size_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for NLContextUpdate();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  return a1;
}

unsigned char *assignWithTake for Responses.StartSharing.NeedsTarget(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = &a1[v10];
  size_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for NLContextUpdate();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v8) = v15(v11, 1, v13);
  int v16 = v15(v12, 1, v13);
  if (!v8)
  {
    if (!v16)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 40))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(unsigned char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
    memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for Responses.StartSharing.NeedsTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22DDB39B8);
}

uint64_t sub_22DDB39B8(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 6)
  {
    unsigned int v4 = *a1;
    if (((v4 >> 4) & 6) != 0) {
      return 8 - ((v4 >> 4) & 6 | (v4 >> 7));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for DialogPhase();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = &a1[*(int *)(a3 + 20)];
      size_t v12 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
      uint64_t v14 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      int v16 = &a1[*(int *)(a3 + 24)];
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for Responses.StartSharing.NeedsTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22DDB3B04);
}

unsigned char *sub_22DDB3B04(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 6)
  {
    *uint64_t result = 32 * (((-(int)a2 >> 1) & 3) - 4 * a2);
  }
  else
  {
    uint64_t v8 = type metadata accessor for DialogPhase();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = &v5[*(int *)(a4 + 20)];
      size_t v12 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (unsigned char *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
      uint64_t v14 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      int v16 = &v5[*(int *)(a4 + 24)];
      return (unsigned char *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for Responses.StartSharing.NeedsTarget(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StartSharing.NeedsTarget);
}

void type metadata completion function for Responses.StartSharing.NeedsTarget()
{
  type metadata accessor for DialogPhase();
  if (v0 <= 0x3F)
  {
    type metadata accessor for NLContextUpdate?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for Responses.StartSharing.InterstitialStartingScreenSharing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0);
}

uint64_t storeEnumTagSinglePayload for Responses.StartSharing.InterstitialStartingScreenSharing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0);
}

uint64_t type metadata accessor for Responses.StartSharing.InterstitialStartingScreenSharing(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StartSharing.InterstitialStartingScreenSharing);
}

uint64_t getEnumTagSinglePayload for Responses.StartSharing.AlreadySharingTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_17Tm);
}

uint64_t storeEnumTagSinglePayload for Responses.StartSharing.AlreadySharingTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_18Tm);
}

uint64_t type metadata accessor for Responses.StartSharing.AlreadySharingTarget(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StartSharing.AlreadySharingTarget);
}

uint64_t type metadata completion function for Responses.StartSharing.AlreadySharingTarget()
{
  return type metadata completion function for Responses.StartSharing.AlreadySharingTarget();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for DialogPhase();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Responses.StartSharing.AppNotInstalled(uint64_t *a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for DialogPhase();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[6];
    uint64_t v12 = a3[7];
    uint64_t v13 = (uint64_t *)((char *)v4 + v11);
    uint64_t v14 = (uint64_t *)((char *)a2 + v11);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    int v16 = (char *)v4 + v12;
    uint64_t v17 = (char *)a2 + v12;
    *int v16 = *v17;
    uint64_t v18 = *((void *)v17 + 2);
    *((void *)v16 + 1) = *((void *)v17 + 1);
    *((void *)v16 + 2) = v18;
    *((void *)v16 + 3) = *((void *)v17 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Responses.StartSharing.AppNotInstalled(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for DialogPhase();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

unsigned char *initializeWithCopy for Responses.StartSharing.AppNotInstalled(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v10];
  uint64_t v13 = &a2[v10];
  uint64_t v14 = v13[1];
  void *v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = &a1[v11];
  int v16 = &a2[v11];
  *uint64_t v15 = *v16;
  uint64_t v17 = *((void *)v16 + 2);
  *((void *)v15 + 1) = *((void *)v16 + 1);
  *((void *)v15 + 2) = v17;
  *((void *)v15 + 3) = *((void *)v16 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unsigned char *assignWithCopy for Responses.StartSharing.AppNotInstalled(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  void *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  *uint64_t v14 = *v15;
  *((void *)v14 + 1) = *((void *)v15 + 1);
  *((void *)v14 + 2) = *((void *)v15 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v14 + 3) = *((void *)v15 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

unsigned char *initializeWithTake for Responses.StartSharing.AppNotInstalled(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  long long v13 = v12[1];
  _OWORD *v11 = *v12;
  v11[1] = v13;
  return a1;
}

unsigned char *assignWithTake for Responses.StartSharing.AppNotInstalled(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = (uint64_t *)&a2[v10];
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  void *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[7];
  int v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *int v16 = *v17;
  uint64_t v18 = *((void *)v17 + 2);
  *((void *)v16 + 1) = *((void *)v17 + 1);
  *((void *)v16 + 2) = v18;
  swift_bridgeObjectRelease();
  *((void *)v16 + 3) = *((void *)v17 + 3);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Responses.StartSharing.AppNotInstalled(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22DDB4328);
}

uint64_t sub_22DDB4328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DialogPhase();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for Responses.StartSharing.AppNotInstalled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22DDB4404);
}

uint64_t sub_22DDB4404(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DialogPhase();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for Responses.StartSharing.AppNotInstalled(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StartSharing.AppNotInstalled);
}

uint64_t type metadata completion function for Responses.StartSharing.AppNotInstalled()
{
  uint64_t result = type metadata accessor for DialogPhase();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Responses.StartSharing.AlreadySharingTarget(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for DialogPhase();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = *(int *)(a3 + 24);
    unint64_t v12 = (char *)v4 + v11;
    uint64_t v13 = (char *)a2 + v11;
    char *v12 = *v13;
    uint64_t v14 = *((void *)v13 + 2);
    *((void *)v12 + 1) = *((void *)v13 + 1);
    *((void *)v12 + 2) = v14;
    *((void *)v12 + 3) = *((void *)v13 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Responses.StartSharing.AlreadySharingTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for DialogPhase();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

unsigned char *initializeWithCopy for Responses.StartSharing.AlreadySharingTarget(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = &a1[v10];
  unint64_t v12 = &a2[v10];
  unsigned char *v11 = *v12;
  uint64_t v13 = *((void *)v12 + 2);
  *((void *)v11 + 1) = *((void *)v12 + 1);
  *((void *)v11 + 2) = v13;
  *((void *)v11 + 3) = *((void *)v12 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unsigned char *assignWithCopy for Responses.StartSharing.AlreadySharingTarget(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = &a1[v10];
  unint64_t v12 = &a2[v10];
  unsigned char *v11 = *v12;
  *((void *)v11 + 1) = *((void *)v12 + 1);
  *((void *)v11 + 2) = *((void *)v12 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v11 + 3) = *((void *)v12 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

unsigned char *initializeWithTake for Responses.StartSharing.AlreadySharingTarget(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = &a1[v10];
  unint64_t v12 = &a2[v10];
  long long v13 = v12[1];
  _OWORD *v11 = *v12;
  v11[1] = v13;
  return a1;
}

unsigned char *assignWithTake for Responses.StartSharing.AlreadySharingTarget(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = &a1[v10];
  unint64_t v12 = &a2[v10];
  unsigned char *v11 = *v12;
  uint64_t v13 = *((void *)v12 + 2);
  *((void *)v11 + 1) = *((void *)v12 + 1);
  *((void *)v11 + 2) = v13;
  swift_bridgeObjectRelease();
  *((void *)v11 + 3) = *((void *)v12 + 3);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Responses.StartSharing.UnableToStartSharingTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22DDB4A38);
}

uint64_t __swift_get_extra_inhabitant_index_17Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DialogPhase();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24) + 16);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for Responses.StartSharing.UnableToStartSharingTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22DDB4B24);
}

uint64_t __swift_store_extra_inhabitant_index_18Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DialogPhase();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 16) = a2;
  }
  return result;
}

uint64_t type metadata accessor for Responses.StartSharing.UnableToStartSharingTarget(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StartSharing.UnableToStartSharingTarget);
}

uint64_t getEnumTagSinglePayload for Responses.StartSharing.SingleWindowSharingUnsupported(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1);
}

uint64_t storeEnumTagSinglePayload for Responses.StartSharing.SingleWindowSharingUnsupported(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1);
}

uint64_t type metadata accessor for Responses.StartSharing.SingleWindowSharingUnsupported(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StartSharing.SingleWindowSharingUnsupported);
}

uint64_t getEnumTagSinglePayload for Responses.StartSharing.ShareRequestCancelled(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_2);
}

uint64_t storeEnumTagSinglePayload for Responses.StartSharing.ShareRequestCancelled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_2);
}

uint64_t type metadata accessor for Responses.StartSharing.ShareRequestCancelled(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StartSharing.ShareRequestCancelled);
}

uint64_t getEnumTagSinglePayload for Responses.Common.CallOnHold(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_3);
}

uint64_t storeEnumTagSinglePayload for Responses.Common.CallOnHold(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_3);
}

uint64_t type metadata accessor for Responses.Common.CallOnHold(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.Common.CallOnHold);
}

uint64_t getEnumTagSinglePayload for Responses.Common.CallOutgoing1on1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_4);
}

uint64_t storeEnumTagSinglePayload for Responses.Common.CallOutgoing1on1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_4);
}

uint64_t type metadata accessor for Responses.Common.CallOutgoing1on1(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.Common.CallOutgoing1on1);
}

uint64_t getEnumTagSinglePayload for Responses.Common.SharePlayUnsupported(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_5);
}

uint64_t storeEnumTagSinglePayload for Responses.Common.SharePlayUnsupported(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_5);
}

uint64_t type metadata accessor for Responses.Common.SharePlayUnsupported(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.Common.SharePlayUnsupported);
}

uint64_t getEnumTagSinglePayload for Responses.Common.ScreenSharingUnsupported(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_6);
}

uint64_t storeEnumTagSinglePayload for Responses.Common.ScreenSharingUnsupported(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_6);
}

uint64_t type metadata accessor for Responses.Common.ScreenSharingUnsupported(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.Common.ScreenSharingUnsupported);
}

uint64_t getEnumTagSinglePayload for Responses.StopSharing.CannotUnshareRemotelyOwnedTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_7);
}

uint64_t storeEnumTagSinglePayload for Responses.StopSharing.CannotUnshareRemotelyOwnedTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_7);
}

uint64_t type metadata accessor for Responses.StopSharing.CannotUnshareRemotelyOwnedTarget(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StopSharing.CannotUnshareRemotelyOwnedTarget);
}

uint64_t *initializeBufferWithCopyOfBuffer for Responses.Common.NotInCall(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for DialogPhase();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

unsigned char *initializeWithCopy for Responses.Common.NotInCall(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

unsigned char *assignWithCopy for Responses.Common.NotInCall(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

unsigned char *initializeWithTake for Responses.Common.NotInCall(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

unsigned char *assignWithTake for Responses.Common.NotInCall(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for Responses.StopSharing.NothingBeingShared(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22DDB510C);
}

uint64_t __swift_get_extra_inhabitant_indexTm(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 6)
  {
    unsigned int v4 = *a1;
    if (((v4 >> 4) & 6) != 0) {
      return 8 - ((v4 >> 4) & 6 | (v4 >> 7));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for DialogPhase();
    uint64_t v9 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = &a1[*(int *)(a3 + 20)];
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Responses.StopSharing.NothingBeingShared(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22DDB51DC);
}

unsigned char *__swift_store_extra_inhabitant_indexTm(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 6)
  {
    *uint64_t result = 32 * (((-(int)a2 >> 1) & 3) - 4 * a2);
  }
  else
  {
    uint64_t v7 = type metadata accessor for DialogPhase();
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 20)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for Responses.StopSharing.NothingBeingShared(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.StopSharing.NothingBeingShared);
}

uint64_t type metadata completion function for Responses.Common.NotInCall()
{
  uint64_t result = type metadata accessor for DialogPhase();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for Responses.Common.GenericError(unsigned char *a1, void *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = &a1[v7];
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for DialogPhase();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    *((unsigned char *)v4 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t destroy for Responses.Common.NotInCall(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for DialogPhase();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

unsigned char *initializeWithCopy for Responses.Common.GenericError(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *assignWithCopy for Responses.Common.GenericError(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *initializeWithTake for Responses.Common.GenericError(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *assignWithTake for Responses.Common.GenericError(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for DialogPhase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t getEnumTagSinglePayload for Responses.Common.GenericError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22DDB570C);
}

uint64_t sub_22DDB570C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DialogPhase();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unsigned int v12 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    if (v12 >= 2) {
      return ((v12 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for Responses.Common.GenericError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22DDB57F4);
}

uint64_t sub_22DDB57F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DialogPhase();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unsigned int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  }
  return result;
}

uint64_t type metadata accessor for Responses.Common.GenericError(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for Responses.Common.GenericError);
}

uint64_t type metadata completion function for Responses.Common.GenericError()
{
  return type metadata completion function for Responses.StartSharing.AlreadySharingTarget();
}

unint64_t lazy protocol witness table accessor for type GenericErrorParams and conformance GenericErrorParams()
{
  unint64_t result = lazy protocol witness table cache variable for type GenericErrorParams and conformance GenericErrorParams;
  if (!lazy protocol witness table cache variable for type GenericErrorParams and conformance GenericErrorParams)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericErrorParams and conformance GenericErrorParams);
  }
  return result;
}

uint64_t protocol witness for ParameterizedSharingResponse.parameters.getter in conformance Responses.Common.GenericError@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(v2 + *(int *)(result + 24));
  return result;
}

unint64_t lazy protocol witness table accessor for type SharingDialogParams and conformance SharingDialogParams()
{
  unint64_t result = lazy protocol witness table cache variable for type SharingDialogParams and conformance SharingDialogParams;
  if (!lazy protocol witness table cache variable for type SharingDialogParams and conformance SharingDialogParams)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingDialogParams and conformance SharingDialogParams);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ConfirmationDialogParams and conformance ConfirmationDialogParams()
{
  unint64_t result = lazy protocol witness table cache variable for type ConfirmationDialogParams and conformance ConfirmationDialogParams;
  if (!lazy protocol witness table cache variable for type ConfirmationDialogParams and conformance ConfirmationDialogParams)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationDialogParams and conformance ConfirmationDialogParams);
  }
  return result;
}

uint64_t protocol witness for SharingResponse.dialogPhase.getter in conformance Responses.StartSharing.AlreadySharingTarget@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for DialogPhase();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t protocol witness for SharingResponse.nlContextUpdate.getter in conformance Responses.StartSharing.AlreadySharingTarget@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for NLContextUpdate();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t outlined init with copy of NLContextUpdate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t String.localizedAppDisplayName.getter()
{
  uint64_t v0 = type metadata accessor for Locale();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for App();
  swift_bridgeObjectRetain();
  App.__allocating_init(appIdentifier:)();
  type metadata accessor for AppInformationResolver();
  swift_allocObject();
  swift_retain();
  AppInformationResolver.init(app:)();
  static Locale.current.getter();
  uint64_t v4 = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)();
  unint64_t v6 = v5;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v6) {
    uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v6) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v4;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CATIdentifier(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = CATIdentifier.stringValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == CATIdentifier.stringValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t DismissSiriFlow.execute()(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for AceOutput();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](DismissSiriFlow.execute(), 0, 0);
}

uint64_t DismissSiriFlow.execute()()
{
  uint64_t v21 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_22DDE6B80;
  *(void *)(v1 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F64F10]), sel_init);
  specialized Array._endMutation()();
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  AceOutput.init(commands:flowActivity:)();
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  v0[15] = __swift_project_value_buffer(v2, (uint64_t)static Logger.default);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(void *)&v19[0] = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v7 = static DismissSiriFlow.typeName;
    unint64_t v8 = *(void *)algn_2685B7BF8;
    swift_bridgeObjectRetain();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, (uint64_t *)v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22DD8A000, v3, v4, "%s: Dismissing Siri", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v6, -1, -1);
    MEMORY[0x230F996F0](v5, -1, -1);
  }

  uint64_t v10 = v0[13];
  uint64_t v9 = v0[14];
  uint64_t v11 = (void *)v0[11];
  uint64_t v12 = v0[12];
  uint64_t v13 = v11[5];
  uint64_t v14 = v11[6];
  __swift_project_boxed_opaque_existential_1(v11 + 2, v13);
  uint64_t v15 = MEMORY[0x263F6FFF0];
  v0[5] = v12;
  v0[6] = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 16))(boxed_opaque_existential_1, v9, v12);
  uint64_t v17 = (void *)swift_task_alloc();
  v0[16] = (uint64_t)v17;
  *uint64_t v17 = v0;
  v17[1] = DismissSiriFlow.execute();
  return MEMORY[0x270F67C10](v0 + 2, v13, v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = DismissSiriFlow.execute();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(v2 + 16);
    uint64_t v3 = DismissSiriFlow.execute();
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  static ExecuteResponse.complete()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  os_log_type_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;

  uint64_t v21 = v0;
  uint64_t v1 = (void *)v0[17];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  uint64_t v2 = v1;
  uint64_t v3 = v1;
  os_log_type_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v20 = v19;
    *(_DWORD *)uint64_t v6 = 136315394;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    unint64_t v8 = (void *)v0[17];
    uint64_t v10 = static DismissSiriFlow.typeName;
    uint64_t v9 = *(void *)algn_2685B7BF8;
    swift_bridgeObjectRetain();
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2112;
    uint64_t v11 = v8;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v12;

    _os_log_impl(&dword_22DD8A000, v4, v5, "%s: Error publishing SAUICloseAssistant command: %@", (uint8_t *)v6, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v7, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v19, -1, -1);
    MEMORY[0x230F996F0](v6, -1, -1);
  }
  else
  {
    uint64_t v13 = (void *)v0[17];
  }
  uint64_t v15 = v0[13];
  uint64_t v14 = v0[14];
  int v16 = v0[12];
  static ExecuteResponse.complete()();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t DismissSiriFlow.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return MEMORY[0x270FA0228](v0, 56, 7);
}

uint64_t type metadata accessor for DismissSiriFlow()
{
  return self;
}

uint64_t protocol witness for Flow.execute() in conformance DismissSiriFlow(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return DismissSiriFlow.execute()(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance DismissSiriFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DismissSiriFlow();

  return MEMORY[0x270F66CE8](v3, a2);
}

uint64_t initializeBufferWithCopyOfBuffer for ResolvedShareTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ResolvedShareTarget(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ResolvedShareTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedShareTarget(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ResolvedShareTarget(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ResolvedShareTarget(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t destructiveInjectEnumTag for ResolvedShareTarget(uint64_t result, int a2)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedShareTarget()
{
  return &type metadata for ResolvedShareTarget;
}

unint64_t ResolvedShareTarget.description.getter(uint64_t a1, void *a2, char a3)
{
  if (a2)
  {
    _StringGuts.grow(_:)(53);
    v6._object = (void *)0x800000022DDEB350;
    v6._countAndFlagsBits = 0xD000000000000022;
    String.append(_:)(v6);
    v7._countAndFlagsBits = a1;
    v7._object = a2;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0x6469666E6F63202CLL;
    v8._object = (void *)0xEE00203A65636E65;
    String.append(_:)(v8);
    specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(a3);
    v9._countAndFlagsBits = 41;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    return 0;
  }
  else
  {
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    return 0xD000000000000047;
  }
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvedShareTarget()
{
  return ResolvedShareTarget.description.getter(*(void *)v0, *(void **)(v0 + 8), *(unsigned char *)(v0 + 16));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ResolvedShareTarget(uint64_t a1, uint64_t a2)
{
  return specialized static ResolvedShareTarget.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

BOOL specialized static ResolvedShareTarget.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (!a2) {
    return a5 == 0;
  }
  if (!a5) {
    return 0;
  }
  if (a1 == a4 && a2 == a5 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v8 & 1) != 0))
  {
    char v10 = a6;
    if (a3 == 2)
    {
      if (a6 == 2) {
        return 1;
      }
    }
    else if (a6 != 2)
    {
      if (a3) {
        unint64_t v11 = 0xD000000000000012;
      }
      else {
        unint64_t v11 = 0xD00000000000001FLL;
      }
      if (a3) {
        unint64_t v12 = 0x800000022DDEA1F0;
      }
      else {
        unint64_t v12 = 0x800000022DDEA1D0;
      }
      if (v10) {
        unint64_t v13 = 0xD000000000000012;
      }
      else {
        unint64_t v13 = 0xD00000000000001FLL;
      }
      if (v10) {
        unint64_t v14 = 0x800000022DDEA1F0;
      }
      else {
        unint64_t v14 = 0x800000022DDEA1D0;
      }
      if (v11 == v13 && v12 == v14)
      {
        swift_bridgeObjectRelease_n();
        return 1;
      }
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v15) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Sharer()
{
  return &type metadata for Sharer;
}

void specialized Sharer.enableSharingOf(target:in:)(void *a1)
{
  if (one-time initialization token for fullScreenAttributes != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)static TUCallScreenShareAttributes.fullScreenAttributes;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 72);
  id v6 = v2;
  if (v5(v3, v4))
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.default);
    id v8 = v6;
    Swift::String v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      unint64_t v12 = (void *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v31 = v29;
      *(_DWORD *)uint64_t v11 = 136315394;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v14 = static Sharer.typeName;
      unint64_t v13 = *(void *)algn_2685B7C28;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2112;
      id v15 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v12 = v8;

      _os_log_impl(&dword_22DD8A000, v9, v10, "%s: Local participant already sharing - replacing attributes with %@", (uint8_t *)v11, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v12, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v29, -1, -1);
      MEMORY[0x230F996F0](v11, -1, -1);
    }
    else
    {
    }
    uint64_t v25 = a1[3];
    uint64_t v26 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v25);
    (*(void (**)(id, uint64_t, uint64_t))(v26 + 112))(v8, v25, v26);
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.default);
    id v17 = v6;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v21 = (void *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v31 = v30;
      *(_DWORD *)uint64_t v20 = 136315394;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v22 = static Sharer.typeName;
      unint64_t v23 = *(void *)algn_2685B7C28;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2112;
      id v24 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v21 = v17;

      _os_log_impl(&dword_22DD8A000, v18, v19, "%s: Enabling screen sharing with attributes %@", (uint8_t *)v20, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v21, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v30, -1, -1);
      MEMORY[0x230F996F0](v20, -1, -1);
    }
    else
    {
    }
    uint64_t v27 = a1[3];
    uint64_t v28 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v27);
    (*(void (**)(id, uint64_t, uint64_t))(v28 + 128))(v17, v27, v28);
  }
}

void specialized Sharer.setScreenSharingEnabled(_:for:in:)(char a1, void *a2)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.default);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v15 = v8;
    *(_DWORD *)uint64_t v7 = 136315650;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v9 = static Sharer.typeName;
    unint64_t v10 = *(void *)algn_2685B7C28;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    if (a1) {
      uint64_t v11 = 0x676E696C62616E45;
    }
    else {
      uint64_t v11 = 0x6E696C6261736944;
    }
    if (a1) {
      unint64_t v12 = 0xE800000000000000;
    }
    else {
      unint64_t v12 = 0xE900000000000067;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 22) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000022DDEA750, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_22DD8A000, v5, v6, "%s: %s sharing of %s", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v8, -1, -1);
    MEMORY[0x230F996F0](v7, -1, -1);
  }

  if (a1)
  {
    specialized Sharer.enableSharingOf(target:in:)(a2);
  }
  else
  {
    uint64_t v13 = a2[3];
    uint64_t v14 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v13);
    (*(void (**)(uint64_t, uint64_t))(v14 + 136))(v13, v14);
  }
}

uint64_t protocol witness for ActivitySession.bundleId.getter in conformance TUConversationActivitySession()
{
  id v1 = objc_msgSend(*v0, sel_activity);
  id v2 = objc_msgSend(v1, sel_bundleIdentifier);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t protocol witness for ActivitySession.sceneId.getter in conformance TUConversationActivitySession()
{
  id v1 = objc_msgSend(*v0, sel_persistentSceneIdentifier);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id protocol witness for ActivitySession.isLocallyInitiated.getter in conformance TUConversationActivitySession()
{
  return objc_msgSend(*v0, sel_isLocallyInitiated);
}

id protocol witness for ActivitySession.isScreenSharingActivitySession.getter in conformance TUConversationActivitySession()
{
  id v1 = objc_msgSend(*v0, sel_activity);
  id v2 = objc_msgSend(v1, sel_isScreenSharingActivity);

  return v2;
}

uint64_t dispatch thunk of ActivitySession.bundleId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ActivitySession.sceneId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ActivitySession.isLocallyInitiated.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ActivitySession.isScreenSharingActivitySession.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

double TUCallCenter.frontmostCall.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)(swift_allocObject() + 16) = v1;
  uint64_t v3 = self;
  id v4 = v1;
  if (objc_msgSend(v3, sel_isMainThread))
  {
    id v5 = objc_msgSend(v4, sel_frontmostAudioOrVideoCall);

    swift_release();
    if (v5)
    {
LABEL_3:
      *(void *)(a1 + 24) = type metadata accessor for LSBundleRecord(0, &lazy cache variable for type metadata for TUCall);
      *(void *)(a1 + 32) = &protocol witness table for TUCall;
      *(void *)a1 = v5;
      return result;
    }
  }
  else
  {
    type metadata accessor for LSBundleRecord(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    uint64_t v7 = (void *)static OS_dispatch_queue.main.getter();
    MEMORY[0x270FA5388](v7);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUCall?);
    OS_dispatch_queue.sync<A>(execute:)();

    swift_release();
    id v5 = v8;
    if (v8) {
      goto LABEL_3;
    }
  }
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double protocol witness for CallCenter.frontmostCall.getter in conformance TUCallCenter@<D0>(uint64_t a1@<X8>)
{
  return TUCallCenter.frontmostCall.getter(a1);
}

uint64_t dispatch thunk of CallCenter.frontmostCall.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_22DDB77AC()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

id partial apply for closure #1 in TUCallCenter.frontmostCall.getter@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(*(id *)(v1 + 16), sel_frontmostAudioOrVideoCall);
  *a1 = result;
  return result;
}

void *partial apply for specialized closure #1 in static OS_dispatch_queue.executeOnMain<A>(_:)@<X0>(void *a1@<X8>)
{
  id result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v4);
  *a1 = v4;
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of SharingResponse?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  long long v10;
  long long v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of SharingResponse?(v6, (uint64_t)v15, &demangling cache variable for type metadata for (AnyHashable, Any));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    char v10 = v15[0];
    uint64_t v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  *(unsigned char *)(v6 + 153) = a6;
  *(void *)(v6 + 96) = a4;
  *(void *)(v6 + 104) = a5;
  *(unsigned char *)(v6 + 152) = a3;
  *(void *)(v6 + 80) = a1;
  *(void *)(v6 + 88) = a2;
  return MEMORY[0x270FA2498](specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:), 0, 0);
}

uint64_t specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:)()
{
  *(void *)(v0 + 48) = *(void *)(v0 + 96);
  *(void *)(v0 + 56) = *(void *)(v0 + 104);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  swift_bridgeObjectRetain();
  JSONEncoder.init()();
  lazy protocol witness table accessor for type AppDialogParams and conformance AppDialogParams();
  uint64_t v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v3 = v2;
  swift_release();
  uint64_t v4 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 64) = 0;
  id v6 = objc_msgSend(v4, sel_JSONObjectWithData_options_error_, isa, 0, v0 + 64);

  uint64_t v7 = *(void **)(v0 + 64);
  if (v6)
  {
    id v8 = v7;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if (swift_dynamicCast())
    {
      outlined consume of Data._Representation(v1, v3);
      unint64_t v9 = *(void *)(v0 + 72);
      goto LABEL_6;
    }
  }
  else
  {
    id v10 = v7;
    uint64_t v11 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  unint64_t v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  outlined consume of Data._Representation(v1, v3);
LABEL_6:
  swift_bridgeObjectRelease();
  *(void *)(v0 + 112) = v9;
  uint64_t v12 = async function pointer to specialized DialogExecutor.executeAsLabel(catId:parameters:);
  BOOL v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v13;
  *BOOL v13 = v0;
  v13[1] = specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:);
  char v14 = *(unsigned char *)(v0 + 152);
  return ((uint64_t (*)(char, uint64_t))((char *)&async function pointer to specialized DialogExecutor.executeAsLabel(catId:parameters:)
                                                + v12))(v14, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  unint64_t v2 = *(void *)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  unint64_t v3 = *(void **)(v0 + 80);
  SharingDirectInvocation.toSAIntentGroupRunSiriKitExecutor(deviceState:)((void *)(*(void *)(v0 + 88) + 40), *(unsigned char *)(v0 + 153) & 1);
  *unint64_t v3 = v1;
  v3[1] = v2;
  type metadata accessor for ExpanseUIModel.ButtonModel(0);
  type metadata accessor for LSBundleRecord(0, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor);
  CodableAceObject.init(wrappedValue:)();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  void *v4;
  Class isa;
  id v6;
  void *v7;
  id v8;
  unint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  char v13;
  void *v14;
  uint64_t v16;

  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  lazy protocol witness table accessor for type EmptyDialogParams and conformance EmptyDialogParams();
  uint64_t v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v3 = v2;
  swift_release();
  uint64_t v4 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 48) = 0;
  id v6 = objc_msgSend(v4, sel_JSONObjectWithData_options_error_, isa, 0, v0 + 48);

  uint64_t v7 = *(void **)(v0 + 48);
  if (v6)
  {
    id v8 = v7;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if (swift_dynamicCast())
    {
      outlined consume of Data._Representation(v1, v3);
      unint64_t v9 = *(void *)(v0 + 56);
      goto LABEL_6;
    }
  }
  else
  {
    id v10 = v7;
    uint64_t v11 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  unint64_t v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  outlined consume of Data._Representation(v1, v3);
LABEL_6:
  *(void *)(v0 + 80) = v9;
  uint64_t v12 = async function pointer to specialized DialogExecutor.executeAsLabel(catId:parameters:);
  BOOL v13 = *(unsigned char *)(v0 + 120);
  char v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v14;
  *char v14 = v0;
  v14[1] = specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:);
  return ((uint64_t (*)(char, uint64_t))((char *)&async function pointer to specialized DialogExecutor.executeAsLabel(catId:parameters:)
                                                + v12))(v13, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  unint64_t v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  unint64_t v3 = *(void **)(v0 + 64);
  SharingDirectInvocation.toSAIntentGroupRunSiriKitExecutor(deviceState:)((void *)(*(void *)(v0 + 72) + 40), *(unsigned char *)(v0 + 121) & 1);
  *unint64_t v3 = v1;
  v3[1] = v2;
  type metadata accessor for ExpanseUIModel.ButtonModel(0);
  type metadata accessor for LSBundleRecord(0, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor);
  CodableAceObject.init(wrappedValue:)();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 128) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:);
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v6 + 136) = a2;
    *(void *)(v6 + 144) = a1;
    uint64_t v7 = specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:);
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v6 = *v3;
  *(void *)(*v3 + 96) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:);
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v6 + 104) = a2;
    *(void *)(v6 + 112) = a1;
    uint64_t v7 = specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:);
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

uint64_t specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:)(uint64_t a1, uint64_t a2, __int16 a3)
{
  *(_WORD *)(v3 + 120) = a3;
  *(void *)(v3 + 64) = a1;
  *(void *)(v3 + 72) = a2;
  return MEMORY[0x270FA2498](specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:), 0, 0);
}

uint64_t specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = type metadata accessor for ExpanseUIModel.ButtonModel(0);
  v3[6] = swift_task_alloc();
  v3[7] = swift_task_alloc();
  v3[8] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:), 0, 0);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = type metadata accessor for ExpanseUIModel.ButtonModel(0);
  v3[6] = swift_task_alloc();
  v3[7] = swift_task_alloc();
  v3[8] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:), 0, 0);
}

uint64_t specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:)()
{
  uint64_t v1 = v0[4];
  unsigned int v2 = *(unsigned __int8 *)(v1 + 16);
  int v3 = *(unsigned __int8 *)(v1 + 17);
  uint64_t v9 = (char *)&async function pointer to specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:)
     + async function pointer to specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[9] = v4;
  if (v3) {
    int v5 = 256;
  }
  else {
    int v5 = 0;
  }
  *uint64_t v4 = v0;
  v4[1] = specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:);
  uint64_t v6 = v0[8];
  uint64_t v7 = v0[3];
  return ((uint64_t (*)(uint64_t, uint64_t, void))v9)(v6, v7, v5 | v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    unsigned int v2 = specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:);
  }
  else {
    unsigned int v2 = specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  unsigned int v2;
  int v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;
  uint64_t v10;

  uint64_t v1 = v0[4];
  unsigned int v2 = *(unsigned __int8 *)(v1 + 18);
  int v3 = *(unsigned __int8 *)(v1 + 19);
  uint64_t v9 = (char *)&async function pointer to specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:)
     + async function pointer to specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[11] = v4;
  if (v3) {
    int v5 = 256;
  }
  else {
    int v5 = 0;
  }
  *uint64_t v4 = v0;
  v4[1] = specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:);
  uint64_t v6 = v0[7];
  uint64_t v7 = v0[3];
  return ((uint64_t (*)(uint64_t, uint64_t, void))v9)(v6, v7, v5 | v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  unsigned int v2 = *v1;
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    outlined destroy of ExpanseUIModel(*(void *)(v2 + 64), type metadata accessor for ExpanseUIModel.ButtonModel);
    int v3 = specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:);
  }
  else
  {
    int v3 = specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[4];
  int v3 = *(void *)(v1 + 24);
  unsigned int v2 = *(void *)(v1 + 32);
  uint64_t v4 = *(unsigned __int8 *)(v1 + 40);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:)
                                                                                     + async function pointer to specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:));
  int v5 = *(unsigned __int8 *)(v1 + 16);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[9] = v6;
  *uint64_t v6 = v0;
  v6[1] = specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:);
  uint64_t v7 = v0[8];
  id v8 = v0[3];
  return v10(v7, v8, v5, v3, v2, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    unsigned int v2 = specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:);
  }
  else {
    unsigned int v2 = specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  unsigned int v2;
  int v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;
  uint64_t v10;

  uint64_t v1 = v0[4];
  unsigned int v2 = *(unsigned __int8 *)(v1 + 41);
  int v3 = *(unsigned __int8 *)(v1 + 42);
  uint64_t v9 = (char *)&async function pointer to specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:)
     + async function pointer to specialized ExpanseUIModelConverter.ButtonModelConverter.convert(utils:);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[11] = v4;
  if (v3) {
    int v5 = 256;
  }
  else {
    int v5 = 0;
  }
  *uint64_t v4 = v0;
  v4[1] = specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:);
  uint64_t v6 = v0[7];
  uint64_t v7 = v0[3];
  return ((uint64_t (*)(uint64_t, uint64_t, void))v9)(v6, v7, v5 | v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  unsigned int v2 = *v1;
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    outlined destroy of ExpanseUIModel(*(void *)(v2 + 64), type metadata accessor for ExpanseUIModel.ButtonModel);
    int v3 = specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:);
  }
  else
  {
    int v3 = specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[7];
  unsigned int v2 = v0[8];
  int v3 = v0[6];
  outlined init with copy of ExpanseUIModel(v2, v3, type metadata accessor for ExpanseUIModel.ButtonModel);
  Loggable.init(wrappedValue:)();
  outlined destroy of ExpanseUIModel(v2, type metadata accessor for ExpanseUIModel.ButtonModel);
  type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(0);
  outlined init with copy of ExpanseUIModel(v1, v3, type metadata accessor for ExpanseUIModel.ButtonModel);
  Loggable.init(wrappedValue:)();
  outlined destroy of ExpanseUIModel(v1, type metadata accessor for ExpanseUIModel.ButtonModel);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ResponseExecutor.execute(response:)(uint64_t a1, uint64_t a2)
{
  v3[256] = v2;
  v3[255] = a2;
  v3[249] = a1;
  v3[257] = *v2;
  uint64_t v4 = type metadata accessor for ExpanseUIModel(0);
  v3[258] = v4;
  v3[259] = *(void *)(v4 - 8);
  v3[260] = swift_task_alloc();
  v3[261] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExpanseUIModel?);
  v3[262] = swift_task_alloc();
  v3[263] = swift_task_alloc();
  v3[264] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[265] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DialogPhase();
  v3[266] = v5;
  v3[267] = *(void *)(v5 - 8);
  v3[268] = swift_task_alloc();
  v3[269] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OutputGenerationManifest();
  v3[270] = v6;
  v3[271] = *(void *)(v6 - 8);
  v3[272] = swift_task_alloc();
  return MEMORY[0x270FA2498](ResponseExecutor.execute(response:), 0, 0);
}

uint64_t ResponseExecutor.execute(response:)()
{
  int v35 = (long long *)(v0 + 1416);
  uint64_t v1 = *(void *)(v0 + 2152);
  uint64_t v2 = *(void *)(v0 + 2144);
  uint64_t v3 = *(void *)(v0 + 2136);
  uint64_t v4 = *(void *)(v0 + 2128);
  uint64_t v5 = *(void *)(v0 + 2120);
  uint64_t v36 = *(void *)(v0 + 2056);
  uint64_t v6 = *(void **)(v0 + 2040);
  uint64_t v8 = v6[3];
  uint64_t v7 = v6[4];
  __swift_project_boxed_opaque_existential_1(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v8, v7);
  uint64_t v9 = v6[3];
  uint64_t v10 = v6[4];
  __swift_project_boxed_opaque_existential_1(v6, v9);
  uint64_t v11 = v9;
  uint64_t v12 = (long long *)(v0 + 1336);
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v11, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  BOOL v13 = (void *)swift_task_alloc();
  v13[2] = v1;
  v13[3] = v5;
  void v13[4] = v36;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_task_dealloc();
  outlined destroy of SharingResponse?(v5, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
  outlined init with copy of ResponseExecuting((uint64_t)v6, v0 + 1496);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingResponse);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterizedSharingResponse);
  if (swift_dynamicCast())
  {
    outlined init with take of SharingIntent(v12, v0 + 1656);
    uint64_t v14 = *(void *)(v0 + 1680);
    uint64_t v15 = *(void *)(v0 + 1688);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 1656), v14);
    uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v15 + 32);
    *(void *)(v0 + 1760) = swift_getAssociatedTypeWitness();
    *(void *)(v0 + 1768) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 1736));
    v37(v14, v15);
    unint64_t v16 = Encodable.asDictionary()();
    __swift_destroy_boxed_opaque_existential_1(v0 + 1736);
    __swift_destroy_boxed_opaque_existential_1(v0 + 1656);
  }
  else
  {
    *(void *)(v0 + 1368) = 0;
    long long *v12 = 0u;
    *(_OWORD *)(v0 + 1352) = 0u;
    outlined destroy of SharingResponse?((uint64_t)v12, &demangling cache variable for type metadata for ParameterizedSharingResponse?);
    unint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  uint64_t v17 = *(void *)(v0 + 2048);
  uint64_t v18 = *(void **)(v0 + 2040);
  outlined init with copy of ResponseExecuting((uint64_t)v18, (uint64_t)v35);
  uint64_t v19 = swift_allocObject();
  *(void *)(v0 + 2184) = v19;
  *(void *)(v19 + 16) = v17;
  outlined init with take of SharingIntent(v35, v19 + 24);
  *(void *)(v19 + 64) = v16;
  swift_retain();
  swift_retain();
  type metadata accessor for LSBundleRecord(255, &lazy cache variable for type metadata for DialogExecutionResult);
  swift_asyncLet_begin();
  uint64_t v20 = v6[3];
  uint64_t v21 = v6[4];
  __swift_project_boxed_opaque_existential_1(v18, v20);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
  *(void *)(v0 + 2192) = v22;
  *(void *)(v0 + 2200) = v23;
  *(unsigned char *)(v0 + 2320) = v24;
  if (v24 == -1)
  {
    outlined init with copy of ResponseExecuting(*(void *)(v0 + 2048) + 56, v0 + 1576);
    long long v32 = *(_OWORD *)(v0 + 1600);
    *(_OWORD *)(v0 + 2264) = v32;
    *(void *)(v0 + 2280) = __swift_project_boxed_opaque_existential_1((void *)(v0 + 1576), v32);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v33 = swift_allocObject();
    *(void *)(v0 + 2288) = v33;
    *(_OWORD *)(v33 + 16) = xmmword_22DDE6B80;
    return MEMORY[0x270FA23E8](v0 + 656, v0 + 1944, ResponseExecutor.execute(response:), v0 + 1376);
  }
  else
  {
    uint64_t v25 = v22;
    uint64_t v26 = v23;
    char v27 = v24;
    uint64_t v28 = *(void *)(v0 + 2056);
    uint64_t v29 = *(void *)(v0 + 2048);
    uint64_t v30 = swift_allocObject();
    *(void *)(v0 + 2208) = v30;
    *(void *)(v30 + 16) = v25;
    *(void *)(v30 + 24) = v26;
    *(unsigned char *)(v30 + 32) = v27;
    *(void *)(v30 + 40) = v29;
    *(void *)(v30 + 48) = v28;
    swift_retain();
    outlined copy of ExpanseUIModelConverter?(v25, v26, v27);
    swift_retain();
    swift_asyncLet_begin();
    uint64_t v31 = *(void *)(v0 + 2112);
    return MEMORY[0x270FA23E0](v0 + 16, v31, ResponseExecutor.execute(response:), v0 + 1616);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  *(void *)(v1 + 2216) = v0;
  if (v0) {
    uint64_t v2 = ResponseExecutor.execute(response:);
  }
  else {
    uint64_t v2 = ResponseExecutor.execute(response:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;

  unsigned __int8 v39 = v0;
  uint64_t v1 = v0[263];
  uint64_t v2 = v0[262];
  uint64_t v3 = v0[259];
  uint64_t v4 = v0[258];
  uint64_t v5 = (void *)v0[243];
  v0[278] = (uint64_t)v5;
  outlined init with copy of SharingResponse?(v1, v2, &demangling cache variable for type metadata for ExpanseUIModel?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v2, 1, v4) == 1)
  {
    uint64_t v6 = v0[262];
    uint64_t v7 = v5;
    outlined destroy of SharingResponse?(v6, &demangling cache variable for type metadata for ExpanseUIModel?);
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.default);
    uint64_t v9 = Logger.logObject.getter();
    uint64_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v38 = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      BOOL v13 = static ResponseExecutor.typeName;
      uint64_t v14 = *(void *)algn_2685B7C58;
      swift_bridgeObjectRetain();
      v0[237] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v9, v10, "%s: Response contained a UI model generator but generation failed -> the response will not contain the desired UI", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v12, -1, -1);
      MEMORY[0x230F996F0](v11, -1, -1);
    }

    uint64_t v15 = (void *)v0[256];
    unint64_t v16 = v15[10];
    uint64_t v17 = v15[11];
    __swift_project_boxed_opaque_existential_1(v15 + 7, v16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_22DDE6B80;
    *(void *)(v18 + 32) = v7;
    uint64_t v38 = v18;
    specialized Array._endMutation()();
    uint64_t v19 = v38;
    v0[281] = v38;
    uint64_t v20 = v7;
    uint64_t v21 = (void *)swift_task_alloc();
    v0[282] = (uint64_t)v21;
    *uint64_t v21 = v0;
    v21[1] = ResponseExecutor.execute(response:);
    uint64_t v22 = v0[272];
    uint64_t v23 = v0[249];
    return MEMORY[0x270F67AE0](v23, v19, v22, v16, v17);
  }
  else
  {
    char v24 = v0[260];
    uint64_t v25 = v0[258];
    uint64_t v26 = (void *)v0[256];
    outlined init with take of ExpanseUIModel(v0[262], v24);
    char v27 = v26 + 7;
    uint64_t v28 = v26[10];
    uint64_t v29 = v26[11];
    __swift_project_boxed_opaque_existential_1(v27, v28);
    v0[230] = v25;
    v0[231] = lazy protocol witness table accessor for type ExpanseUIModel and conformance ExpanseUIModel(&lazy protocol witness table cache variable for type ExpanseUIModel and conformance ExpanseUIModel, (void (*)(uint64_t))type metadata accessor for ExpanseUIModel);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 227);
    outlined init with copy of ExpanseUIModel(v24, (uint64_t)boxed_opaque_existential_1, type metadata accessor for ExpanseUIModel);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_22DDE6B80;
    *(void *)(v31 + 32) = v5;
    uint64_t v38 = v31;
    specialized Array._endMutation()();
    long long v32 = v38;
    v0[279] = v38;
    uint64_t v33 = v5;
    Swift::String v34 = (void *)swift_task_alloc();
    v0[280] = (uint64_t)v34;
    char *v34 = v0;
    v34[1] = ResponseExecutor.execute(response:);
    int v35 = v0[272];
    uint64_t v36 = v0[249];
    return MEMORY[0x270F67AD0](v36, v0 + 227, v32, v35, v28, v29);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *v0 + 1816;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v1);
  return MEMORY[0x270FA2498](ResponseExecutor.execute(response:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *(void *)(v0 + 2104);
  uint64_t v2 = *(void *)(v0 + 2080);

  outlined destroy of ExpanseUIModel(v2, type metadata accessor for ExpanseUIModel);
  outlined destroy of SharingResponse?(v1, &demangling cache variable for type metadata for ExpanseUIModel?);
  uint64_t v3 = *(void *)(v0 + 2112);
  return MEMORY[0x270FA23D8](v0 + 16, v3, ResponseExecutor.execute(response:), v0 + 2000);
}

{
  return MEMORY[0x270FA2498](ResponseExecutor.execute(response:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  outlined consume of ExpanseUIModelConverter?(*(void *)(v0 + 2192), *(void *)(v0 + 2200), *(unsigned char *)(v0 + 2320));
  swift_release();
  return MEMORY[0x270FA23D8](v0 + 656, v0 + 1944, ResponseExecutor.execute(response:), v0 + 1952);
}

{
  return MEMORY[0x270FA2498](ResponseExecutor.execute(response:), 0, 0);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](ResponseExecutor.execute(response:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 2104);

  outlined destroy of SharingResponse?(v1, &demangling cache variable for type metadata for ExpanseUIModel?);
  uint64_t v2 = *(void *)(v0 + 2112);
  return MEMORY[0x270FA23D8](v0 + 16, v2, ResponseExecutor.execute(response:), v0 + 1856);
}

{
  return MEMORY[0x270FA2498](ResponseExecutor.execute(response:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  outlined consume of ExpanseUIModelConverter?(*(void *)(v0 + 2192), *(void *)(v0 + 2200), *(unsigned char *)(v0 + 2320));
  swift_release();
  return MEMORY[0x270FA23D8](v0 + 656, v0 + 1944, ResponseExecutor.execute(response:), v0 + 1904);
}

{
  return MEMORY[0x270FA2498](ResponseExecutor.execute(response:), 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[271] + 8))(v0[272], v0[270]);
  swift_release_n();
  _sxs5Error_pRi_zRi0_zly19SiriExpanseInternal0C7UIModelOSgIsegHrzo_SgWOe((uint64_t)&async function pointer to partial apply for implicit closure #2 in ResponseExecutor.execute(response:));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  *(void *)(v1 + 2296) = v0;
  if (v0) {
    uint64_t v2 = ResponseExecutor.execute(response:);
  }
  else {
    uint64_t v2 = ResponseExecutor.execute(response:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](ResponseExecutor.execute(response:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1(v0 + 1576);
  return MEMORY[0x270FA23D8](v0 + 656, v0 + 1944, ResponseExecutor.execute(response:), v0 + 1536);
}

{
  return MEMORY[0x270FA2498](ResponseExecutor.execute(response:), 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[271] + 8))(v0[272], v0[270]);
  swift_release_n();
  _sxs5Error_pRi_zRi0_zly19SiriExpanseInternal0C7UIModelOSgIsegHrzo_SgWOe(0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  outlined destroy of SharingResponse?(*(void *)(v0 + 2104), &demangling cache variable for type metadata for ExpanseUIModel?);
  uint64_t v1 = *(void *)(v0 + 2112);
  return MEMORY[0x270FA23D8](v0 + 16, v1, ResponseExecutor.execute(response:), v0 + 1696);
}

{
  return MEMORY[0x270FA2498](ResponseExecutor.execute(response:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  outlined consume of ExpanseUIModelConverter?(*(void *)(v0 + 2192), *(void *)(v0 + 2200), *(unsigned char *)(v0 + 2320));
  swift_release();
  return MEMORY[0x270FA23D8](v0 + 656, v0 + 1944, ResponseExecutor.execute(response:), v0 + 1776);
}

{
  return MEMORY[0x270FA2498](ResponseExecutor.execute(response:), 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[271] + 8))(v0[272], v0[270]);
  swift_release_n();
  _sxs5Error_pRi_zRi0_zly19SiriExpanseInternal0C7UIModelOSgIsegHrzo_SgWOe((uint64_t)&async function pointer to partial apply for implicit closure #2 in ResponseExecutor.execute(response:));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(*(void *)(v0 + 2288) + 16) = 0;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 1576);
  return MEMORY[0x270FA23D8](v0 + 656, v0 + 1944, ResponseExecutor.execute(response:), v0 + 1456);
}

{
  return MEMORY[0x270FA2498](ResponseExecutor.execute(response:), 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[271] + 8))(v0[272], v0[270]);
  swift_release_n();
  _sxs5Error_pRi_zRi0_zly19SiriExpanseInternal0C7UIModelOSgIsegHrzo_SgWOe(0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void ResponseExecutor.execute(response:)()
{
  outlined init with copy of SharingResponse?(*(void *)(v0 + 2112), *(void *)(v0 + 2104), &demangling cache variable for type metadata for ExpanseUIModel?);
  JUMPOUT(0x22DDE5490);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v1 = v0[286];
  uint64_t v2 = (void *)v0[243];
  *(void *)(v1 + 32) = v2;
  uint64_t v5 = v1;
  specialized Array._endMutation()();
  v0[288] = v5;
  uint64_t v3 = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[289] = v4;
  *uint64_t v4 = v0;
  v4[1] = ResponseExecutor.execute(response:);
  JUMPOUT(0x22DDE42E0);
}

uint64_t implicit closure #1 in ResponseExecutor.execute(response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x270FA2498](implicit closure #1 in ResponseExecutor.execute(response:), 0, 0);
}

uint64_t implicit closure #1 in ResponseExecutor.execute(response:)()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = (void *)v0[4];
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  uint64_t v6 = *(void *)(v2 + 136);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized DialogExecutor.execute(catId:parameters:globals:)
                                                          + async function pointer to specialized DialogExecutor.execute(catId:parameters:globals:));
  uint64_t v7 = (void *)swift_task_alloc();
  v0[6] = v7;
  *uint64_t v7 = v0;
  v7[1] = implicit closure #1 in ResponseExecutor.execute(response:);
  uint64_t v8 = v0[5];
  return v10(v5, v8, v6);
}

{
  uint64_t v0;

  **(void **)(v0 + 16) = *(void *)(v0 + 56);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t implicit closure #1 in ResponseExecutor.execute(response:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 56) = a1;
    return MEMORY[0x270FA2498](implicit closure #1 in ResponseExecutor.execute(response:), 0, 0);
  }
}

uint64_t implicit closure #2 in ResponseExecutor.execute(response:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(unsigned char *)(v5 + 64) = a4;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = a5;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  return MEMORY[0x270FA2498](implicit closure #2 in ResponseExecutor.execute(response:), 0, 0);
}

uint64_t implicit closure #2 in ResponseExecutor.execute(response:)()
{
  _StringGuts.grow(_:)(31);
  if (one-time initialization token for typeName != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v4 = static ResponseExecutor.typeName;
  uint64_t v3 = *(void *)algn_2685B7C58;
  char v5 = *(unsigned char *)(v0 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6._object = (void *)0x800000022DDEB3F0;
  v6._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v6);
  *(void *)(v0 + 48) = v3;
  outlined copy of ExpanseUIModelConverter(v2, v1, v5);
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t))((char *)&async function pointer to specialized logIfThrows<A>(message:_:)
                                                                                           + async function pointer to specialized logIfThrows<A>(message:_:));
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v7;
  *uint64_t v7 = v0;
  v7[1] = implicit closure #2 in ResponseExecutor.execute(response:);
  uint64_t v8 = *(void *)(v0 + 32);
  uint64_t v9 = *(void *)(v0 + 40);
  uint64_t v10 = *(void *)(v0 + 16);
  uint64_t v11 = *(void *)(v0 + 24);
  char v12 = *(unsigned char *)(v0 + 64);
  return v14(v10, v4, v3, v11, v8, v12, v9);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t closure #1 in implicit closure #2 in ResponseExecutor.execute(response:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(unsigned char *)(v5 + 176) = a4;
  *(void *)(v5 + 112) = a3;
  *(void *)(v5 + 120) = a5;
  *(void *)(v5 + 96) = a1;
  *(void *)(v5 + 104) = a2;
  return MEMORY[0x270FA2498](closure #1 in implicit closure #2 in ResponseExecutor.execute(response:), 0, 0);
}

uint64_t closure #1 in implicit closure #2 in ResponseExecutor.execute(response:)()
{
  uint64_t v1 = v0 + 16;
  uint64_t v2 = *(void *)(v0 + 120);
  int v3 = *(unsigned __int8 *)(v0 + 176);
  outlined init with copy of ResponseExecuting(v2 + 16, v0 + 16);
  outlined init with copy of ResponseExecuting(v2 + 96, v0 + 56);
  if (v3)
  {
    if (v3 == 1)
    {
      char v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:)
                                                     + async function pointer to specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:));
      swift_retain();
      uint64_t v4 = (void *)swift_task_alloc();
      *(void *)(v0 + 144) = v4;
      *uint64_t v4 = v0;
      uint64_t v5 = closure #1 in implicit closure #2 in ResponseExecutor.execute(response:);
    }
    else
    {
      char v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:)
                                                     + async function pointer to specialized ExpanseUIModelConverter.BinaryButtonSnippetModelConverter.convert(utils:));
      swift_retain();
      uint64_t v4 = (void *)swift_task_alloc();
      *(void *)(v0 + 160) = v4;
      *uint64_t v4 = v0;
      uint64_t v5 = closure #1 in implicit closure #2 in ResponseExecutor.execute(response:);
    }
    v4[1] = v5;
    uint64_t v11 = *(void *)(v0 + 96);
    return v12(v11, v1);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 112);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v7;
    *uint64_t v7 = v0;
    v7[1] = closure #1 in implicit closure #2 in ResponseExecutor.execute(response:);
    uint64_t v8 = *(void *)(v0 + 96);
    uint64_t v9 = *(void *)(v0 + 104);
    return ExpanseUIModelConverter.AppStorePunchoutSnippetModelConverter.convert(utils:)(v8, v1, v9, v6);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in implicit closure #2 in ResponseExecutor.execute(response:);
  }
  else {
    uint64_t v2 = closure #1 in implicit closure #2 in ResponseExecutor.execute(response:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in implicit closure #2 in ResponseExecutor.execute(response:);
  }
  else {
    uint64_t v2 = closure #1 in implicit closure #2 in ResponseExecutor.execute(response:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in implicit closure #2 in ResponseExecutor.execute(response:);
  }
  else {
    uint64_t v2 = closure #1 in implicit closure #2 in ResponseExecutor.execute(response:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  type metadata accessor for ExpanseUIModel(0);
  swift_storeEnumTagMultiPayload();
  outlined destroy of ExpanseUIModelConverter.Utils(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of ExpanseUIModelConverter.Utils(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined consume of ExpanseUIModelConverter(v0[13], v0[14], 1);
  type metadata accessor for ExpanseUIModel(0);
  swift_storeEnumTagMultiPayload();
  outlined destroy of ExpanseUIModelConverter.Utils((uint64_t)(v0 + 2));
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined consume of ExpanseUIModelConverter(v0[13], v0[14], 1);
  outlined destroy of ExpanseUIModelConverter.Utils((uint64_t)(v0 + 2));
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined consume of ExpanseUIModelConverter(v0[13], v0[14], 2);
  type metadata accessor for ExpanseUIModel(0);
  swift_storeEnumTagMultiPayload();
  outlined destroy of ExpanseUIModelConverter.Utils((uint64_t)(v0 + 2));
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined consume of ExpanseUIModelConverter(v0[13], v0[14], 2);
  outlined destroy of ExpanseUIModelConverter.Utils((uint64_t)(v0 + 2));
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t closure #1 in ResponseExecutor.makeOutputGenerationManifest(dialogPhase:nlContextUpdate:)(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v49 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DialogPhase();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v48 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v42 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v42 - v14;
  unint64_t v16 = *(void (**)(char *, os_log_t, uint64_t))(v8 + 16);
  os_log_t v46 = a2;
  unsigned __int8 v47 = v16;
  v16((char *)&v42 - v14, a2, v7);
  static DialogPhase.acknowledgement.getter();
  lazy protocol witness table accessor for type ExpanseUIModel and conformance ExpanseUIModel(&lazy protocol witness table cache variable for type DialogPhase and conformance DialogPhase, MEMORY[0x263F6F8D8]);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v13, v7);
  if (a2) {
    goto LABEL_9;
  }
  static DialogPhase.reflection.getter();
  char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
  v17(v13, v7);
  if (v18) {
    goto LABEL_9;
  }
  static DialogPhase.status.getter();
  char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
  v17(v13, v7);
  if (v19) {
    goto LABEL_9;
  }
  static DialogPhase.summary.getter();
  char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  v17(v13, v7);
  if (v20) {
    goto LABEL_9;
  }
  static DialogPhase.completion.getter();
  char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
  v17(v13, v7);
  if (v21) {
    goto LABEL_9;
  }
  static DialogPhase.error.getter();
  char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
  v17(v13, v7);
  if (v22) {
    goto LABEL_9;
  }
  static DialogPhase.confirmed.getter();
  char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
  v17(v13, v7);
  if ((v23 & 1) != 0
    || (static DialogPhase.canceled.getter(),
        char v24 = dispatch thunk of static Equatable.== infix(_:_:)(),
        v17(v13, v7),
        (v24 & 1) != 0)
    || (static DialogPhase.clarification.getter(),
        char v26 = dispatch thunk of static Equatable.== infix(_:_:)(),
        v17(v13, v7),
        (v26 & 1) != 0))
  {
LABEL_9:
    v17(v15, v7);
  }
  else
  {
    static DialogPhase.confirmation.getter();
    char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17(v13, v7);
    v17(v15, v7);
    if ((v27 & 1) == 0)
    {
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Logger.default);
      uint64_t v29 = v48;
      v47(v48, v46, v7);
      uint64_t v30 = Logger.logObject.getter();
      int v31 = static os_log_type_t.error.getter();
      os_log_t v46 = v30;
      if (os_log_type_enabled(v30, (os_log_type_t)v31))
      {
        int v44 = v31;
        long long v32 = (_DWORD *)swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        uint64_t v51 = v43;
        unsigned __int8 v45 = v32;
        *long long v32 = 136315394;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v34 = static ResponseExecutor.typeName;
        unint64_t v33 = *(void *)algn_2685B7C58;
        swift_bridgeObjectRetain();
        uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v33, &v51);
        uint64_t v36 = v45;
        uint64_t v50 = v35;
        unint64_t v42 = &v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *((_WORD *)v36 + 6) = 2080;
        uint64_t v37 = v48;
        v47(v13, (os_log_t)v48, v7);
        uint64_t v38 = String.init<A>(describing:)();
        uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v17(v37, v7);
        os_log_t v40 = v46;
        _os_log_impl(&dword_22DD8A000, v46, (os_log_type_t)v44, "%s: Encountered unexpected dialog phase: %s", (uint8_t *)v36, 0x16u);
        uint64_t v41 = v43;
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v41, -1, -1);
        MEMORY[0x230F996F0](v36, -1, -1);
      }
      else
      {
        v17(v29, v7);
      }
    }
  }
  OutputGenerationManifest.listenAfterSpeaking.setter();
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.printSupportingDialogInDisplayModes.setter();
  outlined init with copy of SharingResponse?(v49, (uint64_t)v6, &demangling cache variable for type metadata for NLContextUpdate?);
  return OutputGenerationManifest.nlContextUpdate.setter();
}

uint64_t ResponseExecutor.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);

  return MEMORY[0x270FA0228](v0, 144, 7);
}

uint64_t type metadata accessor for ResponseExecutor()
{
  return self;
}

uint64_t partial apply for closure #1 in ResponseExecutor.makeOutputGenerationManifest(dialogPhase:nlContextUpdate:)(uint64_t a1)
{
  return closure #1 in ResponseExecutor.makeOutputGenerationManifest(dialogPhase:nlContextUpdate:)(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_22DDBC228()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t partial apply for implicit closure #1 in ResponseExecutor.execute(response:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + 24;
  uint64_t v6 = *(void *)(v1 + 64);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[4] = v5;
  v7[5] = v6;
  _OWORD v7[2] = a1;
  v7[3] = v4;
  v7[1] = dispatch thunk of SharingPromptFlowStrategy.parseResponse(input:);
  return MEMORY[0x270FA2498](implicit closure #1 in ResponseExecutor.execute(response:), 0, 0);
}

uint64_t _sxs5Error_pRi_zRi0_zly19SiriExpanseInternal0C7UIModelOSgIsegHrzo_SgWOe(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_22DDBC344()
{
  outlined consume of ExpanseUIModelConverter(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for implicit closure #2 in ResponseExecutor.execute(response:)(uint64_t a1)
{
  long long v8 = *(_OWORD *)(v1 + 16);
  char v4 = *(unsigned char *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 40) = v5;
  *(unsigned char *)(v6 + 64) = v4;
  *(_OWORD *)(v6 + 24) = v8;
  *(void *)(v6 + 8) = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  *(void *)(v6 + 16) = a1;
  return MEMORY[0x270FA2498](implicit closure #2 in ResponseExecutor.execute(response:), 0, 0);
}

uint64_t outlined copy of ExpanseUIModelConverter?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return outlined copy of ExpanseUIModelConverter(a1, a2, a3);
  }
  return a1;
}

uint64_t outlined consume of ExpanseUIModelConverter?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return outlined consume of ExpanseUIModelConverter(a1, a2, a3);
  }
  return a1;
}

uint64_t outlined init with take of ExpanseUIModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ExpanseUIModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ExpanseUIModelConverter.Utils(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of ExpanseUIModel(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of ExpanseUIModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type EmptyDialogParams and conformance EmptyDialogParams()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyDialogParams and conformance EmptyDialogParams;
  if (!lazy protocol witness table cache variable for type EmptyDialogParams and conformance EmptyDialogParams)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyDialogParams and conformance EmptyDialogParams);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x230F98ED0](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if (v7) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type AppDialogParams and conformance AppDialogParams()
{
  unint64_t result = lazy protocol witness table cache variable for type AppDialogParams and conformance AppDialogParams;
  if (!lazy protocol witness table cache variable for type AppDialogParams and conformance AppDialogParams)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppDialogParams and conformance AppDialogParams);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ExpanseUIModel and conformance ExpanseUIModel(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ValidateRecipientsFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return MEMORY[0x270FA2498](ValidateRecipientsFlow.execute(), 0, 0);
}

uint64_t ValidateRecipientsFlow.execute()()
{
  uint64_t v37 = v0;
  unint64_t v1 = *(void *)(v0[4] + 32);
  unint64_t v2 = 0x2685B6000uLL;
  if (v1)
  {
    uint64_t v3 = one-time initialization token for default;
    swift_bridgeObjectRetain();
    if (v3 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.default);
    swift_bridgeObjectRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      v36[0] = v34;
      *(_DWORD *)uint64_t v7 = 136315651;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v8 = static ValidateRecipientsFlow.typeName;
      unint64_t v9 = unk_2685B7D30;
      swift_bridgeObjectRetain();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2160;
      v0[2] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 22) = 2081;
      unint64_t v10 = type metadata accessor for INPerson();
      uint64_t v11 = swift_bridgeObjectRetain();
      uint64_t v12 = MEMORY[0x230F98CF0](v11, v10);
      unint64_t v14 = v13;
      swift_bridgeObjectRelease();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_22DD8A000, v5, v6, "%s: Resolving requested recipients: %{private,mask.hash}s", (uint8_t *)v7, 0x20u);
      swift_arrayDestroy();
      uint64_t v15 = v34;
LABEL_14:
      MEMORY[0x230F996F0](v15, -1, -1);
      MEMORY[0x230F996F0](v7, -1, -1);

      unint64_t v2 = 0x2685B6000;
      goto LABEL_17;
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.default);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v17))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      v36[0] = v18;
      *(_DWORD *)uint64_t v7 = 136315138;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v19 = static ValidateRecipientsFlow.typeName;
      unint64_t v20 = unk_2685B7D30;
      swift_bridgeObjectRetain();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v5, v17, "%s: Resolving requested recipients: nil", (uint8_t *)v7, 0xCu);
      swift_arrayDestroy();
      uint64_t v15 = v18;
      goto LABEL_14;
    }
  }

LABEL_17:
  __swift_project_boxed_opaque_existential_1((void *)(v0[4] + 40), *(void *)(v0[4] + 64));
  uint64_t v21 = RecipientsResolver.resolve(persons:)(v1);
  if (*(void *)(v2 + 3832) != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.default);
  outlined copy of ResolvedRecipients(v21);
  outlined copy of ResolvedRecipients(v21);
  char v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    v36[0] = v35;
    *(_DWORD *)uint64_t v25 = 136315651;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v26 = static ValidateRecipientsFlow.typeName;
    unint64_t v27 = unk_2685B7D30;
    swift_bridgeObjectRetain();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2160;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 22) = 2081;
    outlined copy of ResolvedRecipients(v21);
    unint64_t v28 = ResolvedRecipients.description.getter(v21);
    unint64_t v30 = v29;
    outlined consume of ResolvedRecipients(v21);
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of ResolvedRecipients(v21);
    outlined consume of ResolvedRecipients(v21);
    _os_log_impl(&dword_22DD8A000, v23, v24, "%s: Recipients resolution succeeded with result: %{private,mask.hash}s", (uint8_t *)v25, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v35, -1, -1);
    MEMORY[0x230F996F0](v25, -1, -1);
  }
  else
  {
    outlined consume of ResolvedRecipients(v21);
    outlined consume of ResolvedRecipients(v21);
  }

  uint64_t v31 = v0[4];
  if (v21 == 1)
  {
    *(unsigned char *)(v31 + 16) = 1;
  }
  else
  {
    *(unsigned char *)(v31 + 16) = 0;
    *(void *)(v31 + 24) = v21;
    swift_bridgeObjectRelease();
  }
  static ExecuteResponse.complete()();
  long long v32 = (uint64_t (*)(void))v0[1];
  return v32();
}

uint64_t ValidateRecipientsFlow.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);

  return MEMORY[0x270FA0228](v0, 80, 7);
}

uint64_t type metadata accessor for ValidateRecipientsFlow()
{
  return self;
}

uint64_t protocol witness for Flow.execute() in conformance ValidateRecipientsFlow(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  v5[3] = a1;
  v5[4] = v4;
  return MEMORY[0x270FA2498](ValidateRecipientsFlow.execute(), 0, 0);
}

void *closure #1 in serialize<A>(_:at:)(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v5 = a2 - (void)__src;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!__dst)
  {
    if (v5 <= 0) {
      return __src;
    }
LABEL_12:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v5) {
    goto LABEL_12;
  }
  if (__src)
  {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

uint64_t specialized ValidateRecipientsFlow.on(input:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v17 = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v11 = static ValidateRecipientsFlow.typeName;
    unint64_t v12 = unk_2685B7D30;
    swift_bridgeObjectRetain();
    uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    lazy protocol witness table accessor for type Input and conformance Input();
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    _os_log_impl(&dword_22DD8A000, v7, v8, "%s: received input %s - this flow should never receive input, ignoring it...", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v10, -1, -1);
    MEMORY[0x230F996F0](v9, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  return 0;
}

uint64_t outlined copy of ResolvedRecipients(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of ResolvedRecipients(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t type metadata accessor for INPerson()
{
  unint64_t result = lazy cache variable for type metadata for INPerson;
  if (!lazy cache variable for type metadata for INPerson)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INPerson);
  }
  return result;
}

uint64_t dispatch thunk of SharingDialogParamsProviding.sharingDialogParams.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

void specialized Sequence.first(where:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for LSBundleRecord(0, &lazy cache variable for type metadata for TUConversationActivitySession);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject(&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, &lazy cache variable for type metadata for TUConversationActivitySession);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v17 = v19;
    uint64_t v2 = v20;
    uint64_t v3 = v21;
    unint64_t v4 = v22;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  uint64_t v16 = v2;
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v4)
  {
    uint64_t v9 = (v4 - 1) & v4;
    unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v11 = v3;
    goto LABEL_29;
  }
  int64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 < v8)
    {
      unint64_t v14 = *(void *)(v17 + 8 * v13);
      uint64_t v11 = v3 + 1;
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v11 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v11);
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v11 = v3 + 3;
      if (v3 + 3 >= v8) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v11);
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v11 = v3 + 4;
      if (v3 + 4 >= v8) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v11);
      if (v14)
      {
LABEL_28:
        uint64_t v9 = (v14 - 1) & v14;
        unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
        id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
        if (v12)
        {
          do
          {
            if (objc_msgSend(v12, sel_state, v16) != (id)2) {
              break;
            }

            uint64_t v3 = v11;
            unint64_t v4 = v9;
            if ((v1 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (!__CocoaSet.Iterator.next()()) {
              break;
            }
            type metadata accessor for LSBundleRecord(0, &lazy cache variable for type metadata for TUConversationActivitySession);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            id v12 = v23;
            swift_unknownObjectRelease();
            uint64_t v11 = v3;
            uint64_t v9 = v4;
          }
          while (v23);
        }
        goto LABEL_33;
      }
      uint64_t v11 = v3 + 5;
      if (v3 + 5 < v8)
      {
        unint64_t v14 = *(void *)(v17 + 8 * v11);
        if (!v14)
        {
          uint64_t v15 = v3 + 6;
          while (v8 != v15)
          {
            unint64_t v14 = *(void *)(v17 + 8 * v15++);
            if (v14)
            {
              uint64_t v11 = v15 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_33;
        }
        goto LABEL_28;
      }
    }
LABEL_33:
    outlined consume of Set<TUConversationActivitySession>.Iterator._Variant();
    return;
  }
  __break(1u);
}

uint64_t protocol witness for Conversation.activeRemotes.getter in conformance TUConversation()
{
  id v1 = objc_msgSend(*v0, sel_activeRemoteParticipants);
  type metadata accessor for LSBundleRecord(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject(&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = specialized _arrayForceCast<A, B>(_:)(v3);
  swift_release();
  return v4;
}

double protocol witness for Conversation.activeActivitySession.getter in conformance TUConversation@<D0>(uint64_t a1@<X8>)
{
  id v3 = objc_msgSend(*v1, sel_activitySessions);
  uint64_t v4 = type metadata accessor for LSBundleRecord(0, &lazy cache variable for type metadata for TUConversationActivitySession);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject(&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, &lazy cache variable for type metadata for TUConversationActivitySession);
  uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Sequence.first(where:)(v5);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if (v7)
  {
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = &protocol witness table for TUConversationActivitySession;
    *(void *)a1 = v7;
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t protocol witness for Conversation.isGroup.getter in conformance TUConversation()
{
  return objc_msgSend(*v0, sel_isOneToOneModeEnabled) ^ 1;
}

uint64_t dispatch thunk of Conversation.activeRemotes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Conversation.activeActivitySession.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Conversation.screenSharingActivitySession.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Conversation.isGroup.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t outlined consume of Set<TUConversationActivitySession>.Iterator._Variant()
{
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for LSBundleRecord(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = __CocoaSet.count.getter();
    if (v2) {
      goto LABEL_3;
    }
    return MEMORY[0x263F8EE78];
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
LABEL_3:
  if (v2 <= 0)
  {
    id v3 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    id v3 = (void *)swift_allocObject();
    int64_t v4 = _swift_stdlib_malloc_size(v3);
    uint64_t v5 = v4 - 32;
    if (v4 < 32) {
      uint64_t v5 = v4 - 25;
    }
    v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v2, a1);
  uint64_t result = outlined consume of Set<TUConversationActivitySession>.Iterator._Variant();
  if (v6 == (void *)v2) {
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  os_log_type_t v24 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for LSBundleRecord(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject(&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
    uint64_t result = (void *)Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v27;
    uint64_t v7 = v28;
    uint64_t v8 = v29;
    int64_t v9 = v30;
    unint64_t v10 = v31;
    if (v6) {
      goto LABEL_3;
    }
LABEL_36:
    uint64_t v11 = 0;
    goto LABEL_38;
  }
  int64_t v9 = 0;
  uint64_t v19 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v7 = a4 + 56;
  uint64_t v8 = ~v19;
  uint64_t v20 = -v19;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  else {
    uint64_t v21 = -1;
  }
  unint64_t v10 = v21 & *(void *)(a4 + 56);
  if (!a2) {
    goto LABEL_36;
  }
LABEL_3:
  if (!a3)
  {
    uint64_t v11 = 0;
LABEL_38:
    unint64_t v22 = v24;
LABEL_41:
    *unint64_t v22 = v4;
    v22[1] = v7;
    v22[2] = v8;
    v22[3] = v9;
    v22[4] = v10;
    return (void *)v11;
  }
  if (a3 < 0) {
    goto LABEL_48;
  }
  uint64_t v11 = 0;
  int64_t v25 = (unint64_t)(v8 + 64) >> 6;
  uint64_t v23 = v8;
  while (1)
  {
    if (v4 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_40;
      }
      type metadata accessor for LSBundleRecord(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v14 = v26;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (!v26) {
        goto LABEL_40;
      }
      goto LABEL_8;
    }
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_7;
    }
    int64_t v15 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      break;
    }
    if (v15 >= v25)
    {
      unint64_t v10 = 0;
      goto LABEL_40;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v15);
    if (v16) {
      goto LABEL_23;
    }
    int64_t v17 = v9 + 2;
    if (v9 + 2 >= v25)
    {
      unint64_t v10 = 0;
      ++v9;
      goto LABEL_40;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v17);
    if (!v16)
    {
      if (v9 + 3 >= v25) {
        goto LABEL_44;
      }
      unint64_t v16 = *(void *)(v7 + 8 * (v9 + 3));
      if (v16)
      {
        int64_t v15 = v9 + 3;
        goto LABEL_23;
      }
      int64_t v17 = v9 + 4;
      if (v9 + 4 >= v25)
      {
        unint64_t v10 = 0;
        v9 += 3;
        goto LABEL_40;
      }
      unint64_t v16 = *(void *)(v7 + 8 * v17);
      if (!v16)
      {
        int64_t v15 = v9 + 5;
        if (v9 + 5 >= v25)
        {
LABEL_44:
          unint64_t v10 = 0;
          int64_t v9 = v17;
          goto LABEL_40;
        }
        unint64_t v16 = *(void *)(v7 + 8 * v15);
        if (!v16)
        {
          int64_t v18 = v9 + 6;
          while (v25 != v18)
          {
            unint64_t v16 = *(void *)(v7 + 8 * v18++);
            if (v16)
            {
              int64_t v15 = v18 - 1;
              goto LABEL_23;
            }
          }
          unint64_t v10 = 0;
          int64_t v9 = v25 - 1;
          goto LABEL_40;
        }
        goto LABEL_23;
      }
    }
    int64_t v15 = v17;
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v13 = __clz(__rbit64(v16)) + (v15 << 6);
    int64_t v9 = v15;
LABEL_7:
    uint64_t result = *(id *)(*(void *)(v4 + 48) + 8 * v13);
    id v14 = result;
    if (!result) {
      goto LABEL_40;
    }
LABEL_8:
    ++v11;
    *v6++ = v14;
    if (v11 == a3)
    {
      uint64_t v11 = a3;
LABEL_40:
      uint64_t v8 = v23;
      unint64_t v22 = v24;
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t specialized SharingIntent.shareTarget.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v49 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  unint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unint64_t v12 = (char *)&v47 - v11;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  unint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = *(void *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appIdentifier + 8);
  if (v17)
  {
    uint64_t v18 = *(void *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appIdentifier);
    id v19 = objc_allocWithZone(MEMORY[0x263F01878]);
    swift_bridgeObjectRetain_n();
    id v26 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v18, v17, 0);

    if (v26)
    {
      if (*(unsigned char *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_containsSharingReference) == 1)
      {
        uint64_t v27 = v49;
        *uint64_t v49 = v18;
        v27[1] = v17;
        type metadata accessor for ShareTarget();
      }
      else
      {
        if (*(unsigned char *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_isReformed)) {
          char v37 = 0;
        }
        else {
          char v37 = 2;
        }
        uint64_t v38 = v49;
        *uint64_t v49 = v18;
        v38[1] = v17;
        *((unsigned char *)v38 + 16) = v37;
        type metadata accessor for ShareTarget();
      }
      goto LABEL_33;
    }
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v20 = __swift_project_value_buffer(v13, (uint64_t)static Logger.default);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v20, v13);
    uint64_t v21 = (uint64_t *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appName);
    if (*(void *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appName + 8)) {
      int v22 = static os_log_type_t.debug.getter();
    }
    else {
      int v22 = static os_log_type_t.error.getter();
    }
    int v28 = v22;
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v29 = Logger.logObject.getter();
    if (os_log_type_enabled(v29, (os_log_type_t)v28))
    {
      int v48 = v28;
      uint64_t v30 = swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      v51[0] = v47;
      *(_DWORD *)uint64_t v30 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v30 + 12) = 2080;
      if (v21[1])
      {
        uint64_t v31 = *v21;
        unint64_t v32 = v21[1];
      }
      else
      {
        unint64_t v32 = 0xE300000000000000;
        uint64_t v31 = 7104878;
      }
      swift_bridgeObjectRetain();
      uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v29, (os_log_type_t)v48, "SharingIntent: share target for appIdentifier=%s appName=%s not installed", (uint8_t *)v30, 0x16u);
      uint64_t v33 = v47;
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v33, -1, -1);
      MEMORY[0x230F996F0](v30, -1, -1);
    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    if (v21[1])
    {
      uint64_t v34 = *v21;
      unint64_t v35 = v21[1];
    }
    else
    {
      uint64_t v34 = 0;
      unint64_t v35 = 0xE000000000000000;
    }
    uint64_t v36 = v49;
    *uint64_t v49 = v34;
    v36[1] = v35;
    type metadata accessor for ShareTarget();
    swift_storeEnumTagMultiPayload();
    return swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v23 = *(void *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appName + 8);
    if (v23)
    {
      os_log_type_t v24 = v49;
      *uint64_t v49 = *(void *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appName);
      v24[1] = v23;
      type metadata accessor for ShareTarget();
      swift_storeEnumTagMultiPayload();
      return swift_bridgeObjectRetain();
    }
    else
    {
      if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToScreen) & 1) != 0
        || (*(unsigned char *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToEverything) & 1) != 0
        || *(unsigned char *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToDisplayedContent) == 1
        || *(unsigned char *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_containsSharingReference) != 1)
      {
        type metadata accessor for ShareTarget();
LABEL_33:
        return swift_storeEnumTagMultiPayload();
      }
      uint64_t v39 = v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_type;
      swift_beginAccess();
      outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v39, (uint64_t)v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
      {
        outlined destroy of SharingResponse?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
      }
      else
      {
        os_log_t v40 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
        v40(v12, v5, v6);
        uint64_t v41 = *(void *)(v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_usoEntity);
        if (v41)
        {
          (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
          int v42 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v10, v6);
          if (v42 != *MEMORY[0x263F731B0] && v42 != *MEMORY[0x263F73158])
          {
            uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues));
            int v44 = (char *)v49 + *(int *)(v43 + 48);
            *uint64_t v49 = v41;
            v40(v44, v12, v6);
            type metadata accessor for ShareTarget();
            swift_storeEnumTagMultiPayload();
            unsigned __int8 v45 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
            swift_retain();
            return v45(v10, v6);
          }
        }
        (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      }
      type metadata accessor for ShareTarget();
      os_log_t v46 = v49;
      *uint64_t v49 = 0;
      v46[1] = 0;
      return swift_storeEnumTagMultiPayload();
    }
  }
}

uint64_t specialized SharingIntent.isExplicitShareViaMessagesIntent.getter()
{
  char v1 = 0;
  switch(*(unsigned char *)(v0 + 16))
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 3:
      return v1 & 1;
    default:
      char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v2)
      {
LABEL_6:
        char v1 = 1;
      }
      else
      {
        char v1 = 0;
        switch(*(unsigned char *)(v0 + 16))
        {
          case 1:
          case 2:
            char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_retain();
            swift_bridgeObjectRelease();
            if ((v3 & 1) == 0) {
              goto LABEL_11;
            }
            goto LABEL_8;
          case 3:
            return v1 & 1;
          default:
            swift_retain();
            swift_bridgeObjectRelease();
LABEL_8:
            uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_associatedAppIdentifier + 8);
            if (!v4
              || *(void *)(v0 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_associatedAppIdentifier) == 0xD000000000000012
              && v4 == 0x800000022DDEAAD0)
            {
LABEL_11:
              swift_release();
              char v1 = 0;
            }
            else
            {
              char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_release();
              char v1 = v5 ^ 1;
            }
            break;
        }
      }
      break;
  }
  return v1 & 1;
}

uint64_t specialized SharingIntent.isExplicitShareInCallIntent.getter()
{
  uint64_t result = 0;
  switch(*(unsigned char *)(v0 + 16))
  {
    case 1:
      swift_bridgeObjectRelease();
      goto LABEL_12;
    case 3:
      return result;
    default:
      char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v2)
      {
LABEL_12:
        uint64_t result = 1;
      }
      else
      {
        uint64_t result = 0;
        switch(*(unsigned char *)(v0 + 16))
        {
          case 1:
          case 2:
            char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_retain();
            swift_bridgeObjectRelease();
            if ((v3 & 1) == 0) {
              goto LABEL_13;
            }
            goto LABEL_7;
          case 3:
            return result;
          default:
            swift_retain();
            swift_bridgeObjectRelease();
LABEL_7:
            if (*(unsigned char *)(v0 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_isSharePlayRequest) == 1) {
              goto LABEL_11;
            }
            uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_associatedAppIdentifier + 8);
            if (v4)
            {
              if (*(void *)(v0 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_associatedAppIdentifier) == 0xD000000000000012
                && v4 == 0x800000022DDEAAD0)
              {
LABEL_11:
                swift_release();
                goto LABEL_12;
              }
              char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_release();
              uint64_t result = v5 & 1;
            }
            else
            {
LABEL_13:
              swift_release();
              uint64_t result = 0;
            }
            break;
        }
      }
      break;
  }
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, unint64_t a3)
{
  uint64_t v15 = MEMORY[0x263F8EE78];
  if (a3 >> 62)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
    {
LABEL_3:
      for (uint64_t i = 4; ; ++i)
      {
        uint64_t v7 = i - 4;
        if ((a3 & 0xC000000000000001) != 0)
        {
          uint64_t v8 = MEMORY[0x230F98F30](i - 4, a3);
          uint64_t v9 = i - 3;
          if (__OFADD__(v7, 1)) {
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v8 = *(void *)(a3 + 8 * i);
          swift_retain();
          uint64_t v9 = i - 3;
          if (__OFADD__(v7, 1))
          {
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
        }
        uint64_t v14 = v8;
        a1(&v13, &v14);
        if (v3)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return swift_bridgeObjectRelease();
        }
        uint64_t v10 = swift_release();
        if (v13)
        {
          MEMORY[0x230F98CD0](v10);
          if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        if (v9 == v5)
        {
          swift_bridgeObjectRelease();
          return v15;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

uint64_t SharingNLv4Intent.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ShareTarget();
  MEMORY[0x270FA5388](v2 - 8);
  char v69 = (uint64_t *)((char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = 0;
  unint64_t v73 = 0xE000000000000000;
  _StringGuts.grow(_:)(480);
  uint64_t v74 = v72;
  unint64_t v75 = v73;
  v7._countAndFlagsBits = 0xD00000000000001DLL;
  v7._object = (void *)0x800000022DDEB6A0;
  String.append(_:)(v7);
  LOBYTE(v72) = *(unsigned char *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingVerb?);
  v8._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x7974202020200A2CLL;
  v9._object = (void *)0xEC000000203A6570;
  String.append(_:)(v9);
  uint64_t v10 = v0 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_type;
  swift_beginAccess();
  outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v10, (uint64_t)v6);
  v11._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._object = (void *)0x800000022DDEB6C0;
  v12._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v12);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_containsSharingReference)) {
    uint64_t v13 = 1702195828;
  }
  else {
    uint64_t v13 = 0x65736C6166;
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_containsSharingReference)) {
    unint64_t v14 = 0xE400000000000000;
  }
  else {
    unint64_t v14 = 0xE500000000000000;
  }
  unint64_t v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x7061202020200A2CLL;
  v16._object = (void *)0xEF203A656D614E70;
  String.append(_:)(v16);
  uint64_t v17 = *(void *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appName + 8);
  uint64_t v70 = *(void *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appName);
  uint64_t v71 = v17;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v18._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0xD000000000000018;
  v19._object = (void *)0x800000022DDEB6F0;
  String.append(_:)(v19);
  uint64_t v20 = *(void *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_typeMatchingSpan + 8);
  uint64_t v70 = *(void *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_typeMatchingSpan);
  uint64_t v71 = v20;
  swift_bridgeObjectRetain();
  v21._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 0xD000000000000015;
  v22._object = (void *)0x800000022DDEB710;
  String.append(_:)(v22);
  uint64_t v23 = *(void *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appIdentifier + 8);
  uint64_t v70 = *(void *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appIdentifier);
  uint64_t v71 = v23;
  swift_bridgeObjectRetain();
  v24._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 0xD00000000000001FLL;
  v25._object = (void *)0x800000022DDEB730;
  String.append(_:)(v25);
  uint64_t v26 = *(void *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_associatedAppIdentifier + 8);
  uint64_t v70 = *(void *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_associatedAppIdentifier);
  uint64_t v71 = v26;
  swift_bridgeObjectRetain();
  v27._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 0xD000000000000016;
  v28._object = (void *)0x800000022DDEB750;
  String.append(_:)(v28);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToScreen)) {
    uint64_t v29 = 1702195828;
  }
  else {
    uint64_t v29 = 0x65736C6166;
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToScreen)) {
    unint64_t v30 = 0xE400000000000000;
  }
  else {
    unint64_t v30 = 0xE500000000000000;
  }
  unint64_t v31 = v30;
  String.append(_:)(*(Swift::String *)&v29);
  swift_bridgeObjectRelease();
  v32._object = (void *)0x800000022DDEB770;
  v32._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v32);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToEverything)) {
    uint64_t v33 = 1702195828;
  }
  else {
    uint64_t v33 = 0x65736C6166;
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToEverything)) {
    unint64_t v34 = 0xE400000000000000;
  }
  else {
    unint64_t v34 = 0xE500000000000000;
  }
  unint64_t v35 = v34;
  String.append(_:)(*(Swift::String *)&v33);
  swift_bridgeObjectRelease();
  v36._object = (void *)0x800000022DDEB790;
  v36._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v36);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToDisplayedContent)) {
    uint64_t v37 = 1702195828;
  }
  else {
    uint64_t v37 = 0x65736C6166;
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToDisplayedContent)) {
    unint64_t v38 = 0xE400000000000000;
  }
  else {
    unint64_t v38 = 0xE500000000000000;
  }
  unint64_t v39 = v38;
  String.append(_:)(*(Swift::String *)&v37);
  swift_bridgeObjectRelease();
  v40._object = (void *)0x800000022DDEB7C0;
  v40._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v40);
  uint64_t v70 = *(void *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_recipients);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]?);
  v41._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  v42._countAndFlagsBits = 0xD000000000000019;
  v42._object = (void *)0x800000022DDEB7E0;
  String.append(_:)(v42);
  LOBYTE(v70) = *(unsigned char *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_confirmationValue);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationValue?);
  v43._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._countAndFlagsBits = 0xD000000000000013;
  v44._object = (void *)0x800000022DDEB800;
  String.append(_:)(v44);
  swift_retain();
  unsigned __int8 v45 = v69;
  specialized SharingIntent.shareTarget.getter(v69);
  swift_release();
  v46._countAndFlagsBits = ShareTarget.description.getter();
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  outlined destroy of ShareTarget((uint64_t)v45);
  v47._object = (void *)0x800000022DDEB820;
  v47._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v47);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_isSharePlayRequest)) {
    uint64_t v48 = 1702195828;
  }
  else {
    uint64_t v48 = 0x65736C6166;
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_isSharePlayRequest)) {
    unint64_t v49 = 0xE400000000000000;
  }
  else {
    unint64_t v49 = 0xE500000000000000;
  }
  unint64_t v50 = v49;
  String.append(_:)(*(Swift::String *)&v48);
  swift_bridgeObjectRelease();
  v51._countAndFlagsBits = 0xD000000000000011;
  v51._object = (void *)0x800000022DDEB840;
  String.append(_:)(v51);
  uint64_t v70 = *(void *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_usoEntity);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity?);
  v52._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  v53._countAndFlagsBits = 0xD000000000000028;
  v53._object = (void *)0x800000022DDEB860;
  String.append(_:)(v53);
  swift_retain();
  char v54 = specialized SharingIntent.isExplicitShareViaMessagesIntent.getter();
  swift_release();
  if (v54) {
    uint64_t v55 = 1702195828;
  }
  else {
    uint64_t v55 = 0x65736C6166;
  }
  if (v54) {
    unint64_t v56 = 0xE400000000000000;
  }
  else {
    unint64_t v56 = 0xE500000000000000;
  }
  unint64_t v57 = v56;
  String.append(_:)(*(Swift::String *)&v55);
  swift_bridgeObjectRelease();
  v58._countAndFlagsBits = 0xD000000000000023;
  v58._object = (void *)0x800000022DDEB890;
  String.append(_:)(v58);
  swift_retain();
  char v59 = specialized SharingIntent.isExplicitShareInCallIntent.getter();
  swift_release();
  if (v59) {
    uint64_t v60 = 1702195828;
  }
  else {
    uint64_t v60 = 0x65736C6166;
  }
  if (v59) {
    unint64_t v61 = 0xE400000000000000;
  }
  else {
    unint64_t v61 = 0xE500000000000000;
  }
  unint64_t v62 = v61;
  String.append(_:)(*(Swift::String *)&v60);
  swift_bridgeObjectRelease();
  v63._object = (void *)0x800000022DDEB8C0;
  v63._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v63);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_isReformed)) {
    uint64_t v64 = 1702195828;
  }
  else {
    uint64_t v64 = 0x65736C6166;
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_isReformed)) {
    unint64_t v65 = 0xE400000000000000;
  }
  else {
    unint64_t v65 = 0xE500000000000000;
  }
  unint64_t v66 = v65;
  String.append(_:)(*(Swift::String *)&v64);
  swift_bridgeObjectRelease();
  v67._countAndFlagsBits = 10506;
  v67._object = (void *)0xE200000000000000;
  String.append(_:)(v67);
  return v74;
}

uint64_t SharingNLv4Intent.init(from:)(uint64_t a1)
{
  uint64_t v92 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v91 = *(void *)(v92 - 8);
  MEMORY[0x270FA5388](v92);
  uint64_t v90 = (char *)&v87 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v89 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  uint64_t v94 = (char *)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v102 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  long long v100 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  Swift::String v16 = (char *)&v87 - v15;
  *(unsigned char *)(v1 + 16) = 3;
  uint64_t v17 = v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_type;
  uint64_t v18 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_containsSharingReference) = 0;
  Swift::String v19 = (void *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appName);
  *Swift::String v19 = 0;
  v19[1] = 0;
  uint64_t v20 = (void *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_typeMatchingSpan);
  *uint64_t v20 = 0;
  v20[1] = 0;
  Swift::String v21 = (void *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appIdentifier);
  *Swift::String v21 = 0;
  v21[1] = 0;
  Swift::String v22 = (void *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_associatedAppIdentifier);
  *Swift::String v22 = 0;
  v22[1] = 0;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToScreen) = 0;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToEverything) = 0;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToDisplayedContent) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_recipients) = 0;
  uint64_t v95 = OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_confirmationValue;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_confirmationValue) = 3;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_isSharePlayRequest) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_usoEntity) = 0;
  uint64_t v104 = v1;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_isReformed) = 0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)static Logger.default);
  Swift::String v25 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v25(v16, a1, v11);
  uint64_t v101 = v24;
  uint64_t v26 = Logger.logObject.getter();
  int v99 = static os_log_type_t.debug.getter();
  BOOL v27 = os_log_type_enabled(v26, (os_log_type_t)v99);
  unint64_t v103 = v10;
  if (v27)
  {
    uint64_t v93 = v12;
    uint64_t v87 = v11;
    uint64_t v97 = a1;
    uint64_t v98 = v7;
    uint64_t v96 = v8;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(void *)&v108[0] = v29;
    *(_DWORD *)uint64_t v28 = 136315394;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v31 = static SharingNLv4Intent.typeName;
    unint64_t v30 = *(void *)algn_2685B7D88;
    swift_bridgeObjectRetain();
    *(void *)&long long v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v30, (uint64_t *)v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2080;
    uint64_t v11 = v87;
    v25(v100, (uint64_t)v16, v87);
    uint64_t v32 = String.init<A>(describing:)();
    *(void *)&long long v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, (uint64_t *)v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v12 = v93;
    unint64_t v34 = *(char **)(v93 + 8);
    ((void (*)(char *, uint64_t))v34)(v16, v11);
    _os_log_impl(&dword_22DD8A000, v26, (os_log_type_t)v99, "%s: Initializing self from user parse: %s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v29, -1, -1);
    MEMORY[0x230F996F0](v28, -1, -1);

    uint64_t v8 = v96;
    a1 = v97;
    uint64_t v7 = v98;
    uint64_t v10 = v103;
  }
  else
  {
    unint64_t v34 = *(char **)(v12 + 8);
    ((void (*)(char *, uint64_t))v34)(v16, v11);
  }
  uint64_t v35 = MEMORY[0x230F98460]();
  uint64_t v36 = (uint64_t)v102;
  if (*(void *)(v35 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v102, v35 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), v7);
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v37 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v36, v37, 1, v7);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v36, 1, v7) == 1)
  {
    swift_release();
    outlined destroy of SharingResponse?(v36, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    unint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v102 = v34;
      Swift::String v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(void *)&v108[0] = v41;
      *(_DWORD *)Swift::String v40 = 136315138;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v42 = static SharingNLv4Intent.typeName;
      unint64_t v43 = *(void *)algn_2685B7D88;
      swift_bridgeObjectRetain();
      *(void *)&long long v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, (uint64_t *)v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v38, v39, "%s: Failed to get UserDialogAct.", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v41, -1, -1);
      MEMORY[0x230F996F0](v40, -1, -1);

      ((void (*)(uint64_t, uint64_t))v102)(a1, v11);
    }
    else
    {

      ((void (*)(uint64_t, uint64_t))v34)(a1, v11);
    }
    return 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v10, v36, v7);
  if (Siri_Nlu_External_UserDialogAct.hasAccepted.getter())
  {
    Swift::String v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v97 = a1;
      uint64_t v98 = v7;
      uint64_t v102 = v34;
      uint64_t v96 = v8;
      Swift::String v46 = (uint8_t *)swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      *(void *)&v108[0] = v47;
      *(_DWORD *)Swift::String v46 = 136315138;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v48 = static SharingNLv4Intent.typeName;
      unint64_t v49 = *(void *)algn_2685B7D88;
      swift_bridgeObjectRetain();
      *(void *)&long long v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, (uint64_t *)v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v44, v45, "%s: UserDialogAct is an accepted response.", v46, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v47, -1, -1);
      MEMORY[0x230F996F0](v46, -1, -1);

      ((void (*)(uint64_t, uint64_t))v102)(v97, v11);
      (*(void (**)(char *, uint64_t))(v96 + 8))(v103, v98);
    }
    else
    {

      ((void (*)(uint64_t, uint64_t))v34)(a1, v11);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v103, v7);
    }
    uint64_t result = v104;
    *(unsigned char *)(v104 + v95) = 0;
    return result;
  }
  if (Siri_Nlu_External_UserDialogAct.hasRejected.getter())
  {
    Swift::String v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v97 = a1;
      uint64_t v98 = v7;
      uint64_t v102 = v34;
      uint64_t v96 = v8;
      Swift::String v53 = (uint8_t *)swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      *(void *)&v108[0] = v54;
      *(_DWORD *)Swift::String v53 = 136315138;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v55 = static SharingNLv4Intent.typeName;
      unint64_t v56 = *(void *)algn_2685B7D88;
      swift_bridgeObjectRetain();
      *(void *)&long long v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, (uint64_t *)v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v51, v52, "%s: UserDialogAct is a rejected response.", v53, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v54, -1, -1);
      MEMORY[0x230F996F0](v53, -1, -1);

      ((void (*)(uint64_t, uint64_t))v102)(v97, v11);
      (*(void (**)(char *, uint64_t))(v96 + 8))(v103, v98);
    }
    else
    {

      ((void (*)(uint64_t, uint64_t))v34)(a1, v11);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v103, v7);
    }
    uint64_t result = v104;
    *(unsigned char *)(v104 + v95) = 1;
    return result;
  }
  if ((Siri_Nlu_External_UserDialogAct.hasCancelled.getter() & 1) == 0)
  {
    if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1) == 0)
    {
      swift_release();
      ((void (*)(uint64_t, uint64_t))v34)(a1, v11);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      return 0;
    }
    Swift::String v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v97 = a1;
      uint64_t v102 = v34;
      uint64_t v93 = v12;
      uint64_t v98 = v7;
      unint64_t v65 = (uint8_t *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      *(void *)&v108[0] = v66;
      *(_DWORD *)unint64_t v65 = 136315138;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v67 = static SharingNLv4Intent.typeName;
      unint64_t v68 = *(void *)algn_2685B7D88;
      swift_bridgeObjectRetain();
      *(void *)&long long v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, (uint64_t *)v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v63, v64, "%s: UserDialogAct has a user stated task.", v65, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v66, -1, -1);
      MEMORY[0x230F996F0](v65, -1, -1);

      a1 = v97;
      uint64_t v7 = v98;
      uint64_t v12 = v93;
      unint64_t v34 = v102;
    }
    else
    {
    }
    char v69 = v90;
    Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
    Siri_Nlu_External_UserStatedTask.task.getter();
    (*(void (**)(char *, uint64_t))(v91 + 8))(v69, v92);
    os_log_type_t v70 = OS_LOG_TYPE_DEFAULT;
    int v77 = static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
    unint64_t v78 = MEMORY[0x230F98710]();
    unint64_t v79 = v78;
    if (v78 >> 62)
    {
      if (_CocoaArrayWrapper.endIndex.getter())
      {
LABEL_55:
        if ((v79 & 0xC000000000000001) != 0)
        {
          MEMORY[0x230F98F30](0, v79);
        }
        else
        {
          if (!*(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_75;
          }
          swift_retain();
        }
      }
    }
    else if (*(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_55;
    }
    swift_bridgeObjectRelease();
    static UsoTask_CodegenConverter.convert(task:)();
    swift_release();
    swift_release();
    if (*((void *)&v107 + 1))
    {
      outlined init with take of Any(&v106, v108);
      outlined init with copy of Any((uint64_t)v108, (uint64_t)&v106);
      type metadata accessor for UsoTask_share_common_Message();
      if (swift_dynamicCast())
      {
        *(unsigned char *)(v104 + 16) = 0;
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_Target.target.getter();
        swift_release_n();
        uint64_t v80 = v106;
        unint64_t v81 = v103;
        goto LABEL_64;
      }
      outlined init with copy of Any((uint64_t)v108, (uint64_t)&v106);
      type metadata accessor for UsoTask_unshare_common_Message();
      char v82 = swift_dynamicCast();
      unint64_t v81 = v103;
      if (v82)
      {
        *(unsigned char *)(v104 + 16) = 1;
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
        swift_release_n();
        uint64_t v80 = v106;
LABEL_64:
        if (v80)
        {
          swift_retain();
          uint64_t v83 = v104;
          SharingNLv4Intent.processCommonMessage(_:)();
          swift_release_n();
          ((void (*)(uint64_t, uint64_t))v34)(a1, v11);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v108);
          (*(void (**)(char *, uint64_t))(v89 + 8))(v94, v88);
          (*(void (**)(char *, uint64_t))(v8 + 8))(v81, v7);
          return v83;
        }
        else
        {
          ((void (*)(uint64_t, uint64_t))v34)(a1, v11);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v108);
          (*(void (**)(char *, uint64_t))(v89 + 8))(v94, v88);
          (*(void (**)(char *, uint64_t))(v8 + 8))(v81, v7);
          return v104;
        }
      }
      outlined init with copy of Any((uint64_t)v108, (uint64_t)&v106);
      type metadata accessor for UsoTask_send_common_Message();
      if (swift_dynamicCast())
      {
        swift_release();
        ((void (*)(uint64_t, uint64_t))v34)(a1, v11);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v108);
        (*(void (**)(char *, uint64_t))(v89 + 8))(v94, v88);
        (*(void (**)(char *, uint64_t))(v8 + 8))(v81, v7);
        uint64_t result = v104;
        *(unsigned char *)(v104 + 16) = 2;
        return result;
      }
      swift_release();
      int v77 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v77, v70))
      {
        uint64_t v93 = v12;
        uint64_t v98 = v7;
        uint64_t v96 = v8;
        uint64_t v8 = swift_slowAlloc();
        uint64_t v104 = swift_slowAlloc();
        *(void *)&long long v106 = v104;
        *(_DWORD *)uint64_t v8 = 136315138;
        if (one-time initialization token for typeName == -1)
        {
LABEL_71:
          uint64_t v84 = static SharingNLv4Intent.typeName;
          unint64_t v85 = *(void *)algn_2685B7D88;
          swift_bridgeObjectRetain();
          uint64_t v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, (uint64_t *)&v106);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_22DD8A000, v77, v70, "%s: Failed to convert UsoTask to any expected type.", (uint8_t *)v8, 0xCu);
          uint64_t v86 = v104;
          swift_arrayDestroy();
          MEMORY[0x230F996F0](v86, -1, -1);
          MEMORY[0x230F996F0](v8, -1, -1);

          ((void (*)(uint64_t, uint64_t))v34)(a1, v11);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v108);
          (*(void (**)(char *, uint64_t))(v89 + 8))(v94, v88);
          (*(void (**)(char *, uint64_t))(v96 + 8))(v103, v98);
          return 0;
        }
LABEL_75:
        swift_once();
        goto LABEL_71;
      }

      ((void (*)(uint64_t, uint64_t))v34)(a1, v11);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v108);
    }
    else
    {
      swift_release();
      outlined destroy of SharingResponse?((uint64_t)&v106, &demangling cache variable for type metadata for Any?);
      uint64_t v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v71, v72))
      {
        uint64_t v97 = a1;
        uint64_t v98 = v7;
        uint64_t v102 = v34;
        uint64_t v96 = v8;
        unint64_t v73 = (uint8_t *)swift_slowAlloc();
        uint64_t v74 = swift_slowAlloc();
        *(void *)&v108[0] = v74;
        *(_DWORD *)unint64_t v73 = 136315138;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v75 = static SharingNLv4Intent.typeName;
        unint64_t v76 = *(void *)algn_2685B7D88;
        swift_bridgeObjectRetain();
        *(void *)&long long v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, (uint64_t *)v108);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22DD8A000, v71, v72, "%s: Failed to convert graph into UsoTask.", v73, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v74, -1, -1);
        MEMORY[0x230F996F0](v73, -1, -1);

        ((void (*)(uint64_t, uint64_t))v102)(v97, v11);
        (*(void (**)(char *, uint64_t))(v89 + 8))(v94, v88);
        (*(void (**)(char *, uint64_t))(v96 + 8))(v103, v98);
        return 0;
      }

      ((void (*)(uint64_t, uint64_t))v34)(a1, v11);
    }
    (*(void (**)(char *, uint64_t))(v89 + 8))(v94, v88);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v103, v7);
    return 0;
  }
  unint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v57, v58))
  {
    uint64_t v97 = a1;
    uint64_t v98 = v7;
    uint64_t v102 = v34;
    uint64_t v96 = v8;
    char v59 = (uint8_t *)swift_slowAlloc();
    uint64_t v60 = swift_slowAlloc();
    *(void *)&v108[0] = v60;
    *(_DWORD *)char v59 = 136315138;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v61 = static SharingNLv4Intent.typeName;
    unint64_t v62 = *(void *)algn_2685B7D88;
    swift_bridgeObjectRetain();
    *(void *)&long long v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, (uint64_t *)v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22DD8A000, v57, v58, "%s: UserDialogAct is a cancelled response.", v59, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v60, -1, -1);
    MEMORY[0x230F996F0](v59, -1, -1);

    ((void (*)(uint64_t, uint64_t))v102)(v97, v11);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v103, v98);
  }
  else
  {

    ((void (*)(uint64_t, uint64_t))v34)(a1, v11);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v103, v7);
  }
  uint64_t result = v104;
  *(unsigned char *)(v104 + v95) = 2;
  return result;
}

uint64_t SharingNLv4Intent.processCommonMessage(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_CollaborationMode.DefinedValues?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v121 = (char *)&v111 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  MEMORY[0x270FA5388](v4 - 8);
  v119 = (char *)&v111 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  uint64_t v120 = *(void *)(v123 - 8);
  MEMORY[0x270FA5388](v123);
  v114 = (char *)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v115 = (uint64_t)&v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  v118 = (char *)&v111 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v117 = (uint64_t)&v111 - v13;
  MEMORY[0x270FA5388](v12);
  os_log_t v116 = (char *)&v111 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoEntity_common_Agent, INPerson>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = ((char *)&v111 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  static Transformer<>.transformer.getter();
  unint64_t v19 = dispatch thunk of UsoEntity_common_Message.recipients.getter();
  if (!v19)
  {
    uint64_t v26 = 0;
    goto LABEL_19;
  }
  unint64_t v20 = v19;
  uint64_t v124 = v16;
  v125[0] = MEMORY[0x263F8EE78];
  if (v19 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    if (v16) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v16 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v16)
    {
LABEL_4:
      if (v16 < 1)
      {
        __break(1u);
        goto LABEL_90;
      }
      uint64_t v122 = v0;
      Swift::String v21 = v18;
      uint64_t v22 = v15;
      for (uint64_t i = 0; i != v16; ++i)
      {
        if ((v20 & 0xC000000000000001) != 0) {
          MEMORY[0x230F98F30](i, v20);
        }
        else {
          swift_retain();
        }
        dispatch thunk of CodeGenListEntry.entry.getter();
        uint64_t v24 = swift_release();
        if (v126)
        {
          MEMORY[0x230F98CD0](v24);
          if (*(void *)((v125[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v125[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v25 = v125[0];
      uint64_t v15 = v22;
      uint64_t v18 = v21;
      uint64_t v1 = v122;
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v25 = MEMORY[0x263F8EE78];
LABEL_18:
  uint64_t v27 = swift_bridgeObjectRelease();
  MEMORY[0x270FA5388](v27);
  *(&v111 - 2) = v18;
  uint64_t v26 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #2 in SharingNLv4Intent.processCommonMessage(_:), (uint64_t)&(&v111)[-4], v25);
  swift_bridgeObjectRelease();
  uint64_t v16 = v124;
LABEL_19:
  *(void *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_recipients) = v26;
  swift_bridgeObjectRelease();
  if (dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter())
  {
    uint64_t v28 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
    if (v28)
    {
      uint64_t v29 = Array<A>.firstAppBundleIdentifier.getter(v28);
      uint64_t v31 = v30;
      swift_release();
      swift_bridgeObjectRelease();
      if (v31)
      {
        uint64_t v32 = (uint64_t *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_associatedAppIdentifier);
        *uint64_t v32 = v29;
        v32[1] = v31;
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_release();
    }
  }
  unint64_t v33 = dispatch thunk of UsoEntity_common_Message.attachments.getter();
  if (!v33) {
    return (*(uint64_t (**)(NSObject *, uint64_t))(v16 + 8))(v18, v15);
  }
  unint64_t v20 = v33;
  uint64_t v34 = v33 & 0xFFFFFFFFFFFFFF8;
  if (!(v33 >> 62))
  {
    uint64_t v35 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v35)
    {
      if (v35 < 2) {
        goto LABEL_34;
      }
      goto LABEL_28;
    }
LABEL_88:
    (*(void (**)(NSObject *, uint64_t))(v16 + 8))(v18, v15);
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v110 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v110) {
    goto LABEL_88;
  }
  swift_bridgeObjectRetain();
  uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v35 < 2) {
    goto LABEL_34;
  }
LABEL_28:
  uint64_t v35 = v16;
  if (one-time initialization token for default != -1) {
    goto LABEL_92;
  }
  while (1)
  {
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.default);
    swift_bridgeObjectRetain_n();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v122 = v1;
      uint64_t v113 = v15;
      uint64_t v124 = v35;
      uint64_t v39 = swift_slowAlloc();
      uint64_t v112 = swift_slowAlloc();
      v125[0] = v112;
      *(_DWORD *)uint64_t v39 = 136315394;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v40 = static SharingNLv4Intent.typeName;
      unint64_t v41 = *(void *)algn_2685B7D88;
      swift_bridgeObjectRetain();
      uint64_t v126 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v39 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodeGenListEntry<UsoEntity_common_Attachment>);
      uint64_t v43 = MEMORY[0x230F98CF0](v20, v42);
      unint64_t v45 = v44;
      swift_bridgeObjectRelease();
      uint64_t v126 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v37, v38, "%s: Found more than one attachment, but only taking the first: %s", (uint8_t *)v39, 0x16u);
      uint64_t v35 = v112;
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v35, -1, -1);
      MEMORY[0x230F996F0](v39, -1, -1);

      uint64_t v16 = v124;
      uint64_t v15 = v113;
      uint64_t v1 = v122;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v16 = v35;
    }
LABEL_34:
    if ((v20 & 0xC000000000000001) != 0) {
      break;
    }
    if (*(void *)(v34 + 16))
    {
      swift_retain();
      goto LABEL_37;
    }
    __break(1u);
LABEL_92:
    swift_once();
  }
LABEL_90:
  MEMORY[0x230F98F30](0, v20);
LABEL_37:
  swift_bridgeObjectRelease();
  dispatch thunk of CodeGenListEntry.entry.getter();
  swift_release();
  if (!v125[0])
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    __swift_project_value_buffer(v55, (uint64_t)static Logger.default);
    unint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = v16;
      char v59 = v18;
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      v125[0] = v61;
      *(_DWORD *)uint64_t v60 = 136315138;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v62 = static SharingNLv4Intent.typeName;
      unint64_t v63 = *(void *)algn_2685B7D88;
      swift_bridgeObjectRetain();
      uint64_t v126 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v56, v57, "%s: CodeGenListEntry<UsoEntity_common_Attachment> missing UsoEntity_common_Attachment entry - file a radar on SiriOntology?", v60, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v61, -1, -1);
      MEMORY[0x230F996F0](v60, -1, -1);

      uint64_t v18 = v59;
      uint64_t v16 = v58;
    }
    else
    {
    }
    return (*(uint64_t (**)(NSObject *, uint64_t))(v16 + 8))(v18, v15);
  }
  swift_retain();
  uint64_t v46 = CodeGenBase.entity.getter();
  swift_release();
  *(void *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_usoEntity) = v46;
  swift_release();
  if (dispatch thunk of UsoEntity_common_Attachment.sharedApp.getter())
  {
    uint64_t v47 = dispatch thunk of UsoEntity_common_App.name.getter();
    uint64_t v48 = (uint64_t *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appName);
    *uint64_t v48 = v47;
    v48[1] = v49;
    swift_bridgeObjectRelease();
    uint64_t v50 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
    if (v50)
    {
      uint64_t v51 = Array<A>.firstAppBundleIdentifier.getter(v50);
      uint64_t v53 = v52;
      swift_release();
      swift_bridgeObjectRelease();
      if (v53)
      {
        uint64_t v54 = (uint64_t *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appIdentifier);
        uint64_t *v54 = v51;
        v54[1] = v53;
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_release();
    }
  }
  if (!dispatch thunk of UsoEntity_common_Attachment.type.getter()) {
    goto LABEL_69;
  }
  uint64_t v124 = v16;
  uint64_t v64 = (uint64_t)v116;
  dispatch thunk of UsoEntity_common_AttachmentType.definedValue.getter();
  uint64_t v122 = v1;
  uint64_t v65 = v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_type;
  swift_beginAccess();
  outlined assign with take of UsoEntity_common_AttachmentType.DefinedValues?(v64, v65);
  swift_endAccess();
  uint64_t v66 = v117;
  outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v65, v117);
  uint64_t v67 = v120;
  unint64_t v68 = *(char **)(v120 + 48);
  uint64_t v69 = v123;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v68)(v66, 1, v123))
  {
    outlined destroy of SharingResponse?(v66, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  }
  else
  {
    int v77 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
    os_log_t v116 = v68;
    unint64_t v78 = v114;
    v77(v114, v66, v69);
    outlined destroy of SharingResponse?(v66, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
    uint64_t v79 = v69;
    UsoEntity_common_AttachmentType.DefinedValues.matchingFirstPartyAppBundleID.getter();
    uint64_t v81 = v80;
    char v82 = v78;
    unint64_t v68 = v116;
    (*(void (**)(char *, uint64_t))(v67 + 8))(v82, v79);
    if (v81)
    {
      swift_bridgeObjectRelease();
      uint64_t v83 = UsoEntity_common_AttachmentType.matchingSpan.getter();
      if (v84)
      {
        uint64_t v85 = v83;
        unint64_t v86 = v84;
        uint64_t v87 = (uint64_t *)(v122 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_typeMatchingSpan);
        uint64_t *v87 = v83;
        v87[1] = v84;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (one-time initialization token for default != -1) {
          swift_once();
        }
        uint64_t v88 = type metadata accessor for Logger();
        __swift_project_value_buffer(v88, (uint64_t)static Logger.default);
        swift_bridgeObjectRetain();
        uint64_t v89 = Logger.logObject.getter();
        int v90 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v89, (os_log_type_t)v90))
        {
          os_log_t v111 = v89;
          LODWORD(v114) = v90;
          uint64_t v117 = v85;
          uint64_t v113 = v15;
          uint64_t v91 = swift_slowAlloc();
          uint64_t v112 = swift_slowAlloc();
          v125[0] = v112;
          *(_DWORD *)uint64_t v91 = 136315394;
          if (one-time initialization token for typeName != -1) {
            swift_once();
          }
          uint64_t v92 = static SharingNLv4Intent.typeName;
          unint64_t v93 = *(void *)algn_2685B7D88;
          swift_bridgeObjectRetain();
          uint64_t v126 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v93, v125);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v91 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v126 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v117, v86, v125);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          os_log_t v94 = v111;
          _os_log_impl(&dword_22DD8A000, v111, (os_log_type_t)v114, "%s: typeMatchingSpan=%s'", (uint8_t *)v91, 0x16u);
          uint64_t v95 = v112;
          swift_arrayDestroy();
          MEMORY[0x230F996F0](v95, -1, -1);
          MEMORY[0x230F996F0](v91, -1, -1);

          uint64_t v15 = v113;
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
    }
  }
  uint64_t v70 = (uint64_t)v118;
  dispatch thunk of UsoEntity_common_AttachmentType.definedValue.getter();
  swift_release();
  uint64_t v71 = v123;
  unsigned int v72 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v68)(v70, 1, v123);
  uint64_t v16 = v124;
  uint64_t v1 = v122;
  if (v72 != 1)
  {
    uint64_t v73 = v115;
    outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v70, v115);
    uint64_t v74 = v120;
    int v75 = (*(uint64_t (**)(uint64_t, uint64_t))(v120 + 88))(v73, v71);
    if (v75 == *MEMORY[0x263F731A8])
    {
      uint64_t v76 = OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToScreen;
    }
    else
    {
      if (v75 != *MEMORY[0x263F73150])
      {
        (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v71);
        goto LABEL_68;
      }
      uint64_t v76 = OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToDisplayedContent;
    }
    *(unsigned char *)(v1 + v76) = 1;
  }
LABEL_68:
  outlined destroy of SharingResponse?(v70, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
LABEL_69:
  swift_retain();
  uint64_t v96 = dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter();
  swift_release();
  uint64_t v97 = (uint64_t)v121;
  if (v96)
  {
    uint64_t v98 = v119;
    dispatch thunk of UsoEntity_common_Quantifier.definedValue.getter();
    uint64_t v99 = (uint64_t)v98;
    swift_release();
    uint64_t v100 = type metadata accessor for UsoEntity_common_Quantifier.DefinedValues();
    uint64_t v101 = *(void *)(v100 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100) == 1)
    {
      outlined destroy of SharingResponse?(v99, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    }
    else
    {
      int v102 = (*(uint64_t (**)(uint64_t, uint64_t))(v101 + 88))(v99, v100);
      uint64_t v103 = v99;
      int v104 = v102;
      int v105 = *MEMORY[0x263F72C78];
      (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v103, v100);
      if (v104 == v105) {
        *(unsigned char *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToEverything) = 1;
      }
    }
  }
  swift_retain();
  uint64_t v106 = dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter();
  swift_release();
  swift_release();
  if (v106) {
    *(unsigned char *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_containsSharingReference) = 1;
  }
  if (!dispatch thunk of UsoEntity_common_Attachment.collaborationMode.getter())
  {
    swift_release();
    return (*(uint64_t (**)(NSObject *, uint64_t))(v16 + 8))(v18, v15);
  }
  dispatch thunk of UsoEntity_common_CollaborationMode.definedValue.getter();
  swift_release();
  swift_release();
  uint64_t v107 = type metadata accessor for UsoEntity_common_CollaborationMode.DefinedValues();
  uint64_t v108 = *(void *)(v107 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v108 + 48))(v97, 1, v107) == 1)
  {
    (*(void (**)(NSObject *, uint64_t))(v16 + 8))(v18, v15);
    return outlined destroy of SharingResponse?(v97, &demangling cache variable for type metadata for UsoEntity_common_CollaborationMode.DefinedValues?);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v108 + 88))(v97, v107) == *MEMORY[0x263F73418])
  {
    (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v97, v107);
    *(unsigned char *)(v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_isSharePlayRequest) = 1;
    return (*(uint64_t (**)(NSObject *, uint64_t))(v16 + 8))(v18, v15);
  }
  (*(void (**)(NSObject *, uint64_t))(v16 + 8))(v18, v15);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v108 + 8))(v97, v107);
}

uint64_t closure #2 in SharingNLv4Intent.processCommonMessage(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  void (*v5)(uint64_t *__return_ptr, uint64_t *);
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoEntity_common_Agent, INPerson>);
  uint64_t v5 = (void (*)(uint64_t *__return_ptr, uint64_t *))Transformer.transform.getter();
  uint64_t v9 = v4;
  v5(&v8, &v9);
  if (v2)
  {

    uint64_t result = swift_release();
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t result = swift_release();
    uint64_t v7 = v8;
  }
  *a2 = v7;
  return result;
}

uint64_t UsoEntity_common_AttachmentType.matchingSpan.getter()
{
  uint64_t v0 = type metadata accessor for CharacterSet();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UtteranceAlignment?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UtteranceAlignment();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = dispatch thunk of CodeGenBase.getUtteranceAlignmentsHelper(attributeName:)();
  if (!v11)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
LABEL_7:
    outlined destroy of SharingResponse?((uint64_t)v6, &demangling cache variable for type metadata for UtteranceAlignment?);
LABEL_18:
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.default);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl(&dword_22DD8A000, v29, v30, "UsoEntity_common_AttachmentType: unable to determine matchingSpan", v31, 2u);
      MEMORY[0x230F996F0](v31, -1, -1);
    }

    return 0;
  }
  if (*(void *)(v11 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v6, v11 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  type metadata accessor for SiriEnvironment();
  if (!static SiriEnvironment.forCurrentTask.getter())
  {
LABEL_17:
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_18;
  }
  SiriEnvironment.currentRequest.getter();
  uint64_t v12 = (void *)CurrentRequest.speechPackage.getter();
  swift_release();
  if (!v12 || (id v13 = objc_msgSend(v12, sel_recognition), v12, !v13))
  {
    swift_release();
    goto LABEL_17;
  }
  uint64_t v14 = AFSpeechRecognition.extract(alignment:)((uint64_t)v10);
  if (!v15)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    swift_release();

    goto LABEL_18;
  }
  id v35 = v13;
  v37[0] = v14;
  v37[1] = v15;
  static CharacterSet.whitespaces.getter();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v16 = StringProtocol.trimmingCharacters(in:)();
  uint64_t v17 = v1;
  uint64_t v18 = v16;
  unint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v3, v0);
  swift_bridgeObjectRelease();
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Logger.default);
  swift_bridgeObjectRetain_n();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  uint64_t v24 = v22;
  if (os_log_type_enabled(v22, v23))
  {
    unint64_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    v37[0] = v34;
    *(_DWORD *)unint64_t v25 = 136315138;
    unint64_t v33 = v25 + 4;
    swift_bridgeObjectRetain();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v26 = v24;
    _os_log_impl(&dword_22DD8A000, v24, v23, "UsoEntity_common_AttachmentType: matchingSpan=%s'", v25, 0xCu);
    uint64_t v27 = v34;
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v27, -1, -1);
    MEMORY[0x230F996F0](v25, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  swift_release();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v18;
}

uint64_t Array<A>.firstAppBundleIdentifier.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoIdentifier();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v91 = (char *)v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v88 = (char *)v86 - v7;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  int v90 = (char *)v86 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v89 = (char *)v86 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)v86 - v13;
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v96 = (char *)v86 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)v86 - v17;
  uint64_t v19 = MEMORY[0x263F8EE78];
  uint64_t v100 = MEMORY[0x263F8EE78];
  uint64_t v20 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v97 = v2;
  v86[1] = a1;
  uint64_t v87 = v3;
  v86[0] = v20;
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = v3 + 16;
    os_log_type_t v23 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    unint64_t v24 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v92 = v14;
    unint64_t v93 = (char *)v24;
    unint64_t v25 = a1 + v24;
    uint64_t v26 = *(void *)(v3 + 72);
    os_log_t v94 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v95 = (void (**)(char *, char *, uint64_t))(v3 + 32);
    uint64_t v27 = v21;
    v23(v18, a1 + v24, v2);
    while (1)
    {
      uint64_t v28 = UsoIdentifier.namespace.getter();
      if (!v29) {
        break;
      }
      if (v28 == 0x64695F6D657469 && v29 == 0xE700000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v30 & 1) == 0) {
          break;
        }
      }
      uint64_t v31 = v23;
      uint64_t v32 = v22;
      unint64_t v33 = *v95;
      (*v95)(v96, v18, v2);
      uint64_t v34 = v100;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v34 + 16) + 1, 1);
        uint64_t v34 = v100;
      }
      unint64_t v36 = *(void *)(v34 + 16);
      unint64_t v35 = *(void *)(v34 + 24);
      if (v36 >= v35 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
        uint64_t v34 = v100;
      }
      *(void *)(v34 + 16) = v36 + 1;
      uint64_t v37 = &v93[v34 + v36 * v26];
      uint64_t v2 = v97;
      v33(v37, v96, v97);
      uint64_t v100 = v34;
      uint64_t v22 = v32;
      os_log_type_t v23 = v31;
      uint64_t v14 = v92;
LABEL_4:
      v25 += v26;
      if (!--v27)
      {
        uint64_t v19 = v100;
        uint64_t v3 = v87;
        goto LABEL_17;
      }
      v23(v18, v25, v2);
    }
    (*v94)(v18, v2);
    goto LABEL_4;
  }
LABEL_17:
  swift_bridgeObjectRelease();
  uint64_t v38 = *(void *)(v19 + 16);
  if (v38)
  {
    uint64_t v39 = *(char **)(v3 + 16);
    unint64_t v40 = v19 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v95 = *(void (***)(char *, char *, uint64_t))(v3 + 72);
    uint64_t v96 = v39;
    unint64_t v41 = (void (**)(char *, uint64_t))(v3 + 8);
    os_log_t v94 = (void (**)(char *, uint64_t))v19;
    swift_retain();
    uint64_t v42 = (void *)MEMORY[0x263F8EE78];
    do
    {
      ((void (*)(char *, unint64_t, uint64_t))v96)(v14, v40, v2);
      uint64_t v43 = UsoIdentifier.value.getter();
      uint64_t v45 = v44;
      (*v41)(v14, v2);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42[2] + 1, 1, v42);
      }
      unint64_t v47 = v42[2];
      unint64_t v46 = v42[3];
      if (v47 >= v46 >> 1) {
        uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v46 > 1), v47 + 1, 1, v42);
      }
      v42[2] = v47 + 1;
      uint64_t v48 = &v42[2 * v47];
      v48[4] = v43;
      v48[5] = v45;
      v40 += (unint64_t)v95;
      --v38;
      uint64_t v2 = v97;
    }
    while (v38);
    swift_release_n();
    uint64_t v3 = v87;
  }
  else
  {
    swift_release();
    uint64_t v42 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v49 = v89;
  if (v42[2])
  {
    uint64_t v50 = v42[4];
    swift_bridgeObjectRetain();
    goto LABEL_56;
  }
  swift_bridgeObjectRelease();
  uint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v102 = MEMORY[0x263F8EE78];
  uint64_t v52 = swift_bridgeObjectRetain();
  uint64_t v53 = v86[0];
  if (!v86[0]) {
    goto LABEL_47;
  }
  unint64_t v55 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v56 = *(char **)(v3 + 72);
  uint64_t v95 = *(void (***)(char *, char *, uint64_t))(v3 + 16);
  uint64_t v54 = v95;
  uint64_t v96 = v56;
  uint64_t v92 = (char *)v55;
  unint64_t v57 = v52 + v55;
  uint64_t v58 = (void (**)(char *, uint64_t))(v3 + 8);
  unint64_t v93 = (char *)(v3 + 32);
  os_log_t v94 = (void (**)(char *, uint64_t))((v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
  ((void (*)(char *, unint64_t, uint64_t))v95)(v49, v52 + v55, v2);
  while (1)
  {
    uint64_t v59 = UsoIdentifier.namespace.getter();
    if (!v60)
    {
      uint64_t v61 = v90;
      ((void (*)(char *, char *, uint64_t))v54)(v90, v49, v2);
LABEL_45:
      unsigned int v72 = *v58;
      (*v58)(v61, v2);
      v72(v49, v2);
      goto LABEL_31;
    }
    if (v59 == 0x656D614E707061 && v60 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease();
      uint64_t v61 = v90;
      ((void (*)(char *, char *, uint64_t))v54)(v90, v49, v2);
    }
    else
    {
      char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v61 = v90;
      ((void (*)(char *, char *, uint64_t))v54)(v90, v49, v2);
      if ((v62 & 1) == 0) {
        goto LABEL_45;
      }
    }
    unint64_t v63 = v61;
    uint64_t v100 = UsoIdentifier.value.getter();
    uint64_t v101 = v64;
    uint64_t v98 = 46;
    unint64_t v99 = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    char v65 = StringProtocol.contains<A>(_:)();
    swift_bridgeObjectRelease();
    uint64_t v66 = *v58;
    (*v58)(v63, v2);
    if (v65)
    {
      uint64_t v67 = *(void (**)(char *, char *, uint64_t))v93;
      uint64_t v49 = v89;
      (*(void (**)(char *, char *, uint64_t))v93)(v88, v89, v2);
      uint64_t v68 = v102;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v68 + 16) + 1, 1);
        uint64_t v68 = v102;
      }
      unint64_t v70 = *(void *)(v68 + 16);
      unint64_t v69 = *(void *)(v68 + 24);
      if (v70 >= v69 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v69 > 1, v70 + 1, 1);
        uint64_t v68 = v102;
      }
      *(void *)(v68 + 16) = v70 + 1;
      uint64_t v71 = &v92[v68 + v70 * (void)v96];
      uint64_t v2 = v97;
      v67(v71, v88, v97);
      uint64_t v102 = v68;
    }
    else
    {
      uint64_t v49 = v89;
      v66(v89, v2);
    }
LABEL_31:
    uint64_t v54 = v95;
    v57 += (unint64_t)v96;
    if (!--v53) {
      break;
    }
    ((void (*)(char *, unint64_t, uint64_t))v95)(v49, v57, v2);
  }
  uint64_t v51 = v102;
LABEL_47:
  swift_bridgeObjectRelease();
  uint64_t v73 = *(void *)(v51 + 16);
  if (!v73)
  {
    swift_release();
    int v77 = (void *)MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_55;
    }
    goto LABEL_59;
  }
  int v75 = *(char **)(v3 + 16);
  uint64_t v74 = v3 + 16;
  uint64_t v76 = v51 + ((*(unsigned __int8 *)(v74 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 64));
  uint64_t v95 = *(void (***)(char *, char *, uint64_t))(v74 + 56);
  uint64_t v96 = v75;
  os_log_t v94 = (void (**)(char *, uint64_t))v51;
  swift_retain();
  int v77 = (void *)MEMORY[0x263F8EE78];
  unint64_t v78 = v91;
  do
  {
    ((void (*)(char *, uint64_t, uint64_t))v96)(v78, v76, v2);
    uint64_t v79 = UsoIdentifier.value.getter();
    uint64_t v81 = v80;
    (*(void (**)(char *, uint64_t))(v74 - 8))(v78, v2);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v77[2] + 1, 1, v77);
    }
    unint64_t v83 = v77[2];
    unint64_t v82 = v77[3];
    if (v83 >= v82 >> 1) {
      int v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v82 > 1), v83 + 1, 1, v77);
    }
    v77[2] = v83 + 1;
    unint64_t v84 = &v77[2 * v83];
    v84[4] = v79;
    v84[5] = v81;
    v76 += (uint64_t)v95;
    --v73;
    uint64_t v2 = v97;
  }
  while (v73);
  swift_release_n();
  if (!v77[2])
  {
LABEL_59:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_55:
  uint64_t v50 = v77[4];
  swift_bridgeObjectRetain();
LABEL_56:
  swift_bridgeObjectRelease();
  return v50;
}

uint64_t SharingNLv4Intent.__deallocating_deinit()
{
  outlined destroy of SharingResponse?(v0 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_type, (uint64_t *)&demangling cache variable for type metadata for UsoEntity_common_AttachmentType.DefinedValues?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t ObjC metadata update function for SharingNLv4Intent()
{
  return type metadata accessor for SharingNLv4Intent();
}

uint64_t type metadata accessor for SharingNLv4Intent()
{
  uint64_t result = type metadata singleton initialization cache for SharingNLv4Intent;
  if (!type metadata singleton initialization cache for SharingNLv4Intent) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for SharingNLv4Intent()
{
  type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t protocol witness for SharingIntent.verb.getter in conformance SharingNLv4Intent()
{
  return *(unsigned __int8 *)(*(void *)v0 + 16);
}

uint64_t protocol witness for SharingIntent.type.getter in conformance SharingNLv4Intent@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_type;
  swift_beginAccess();
  return outlined init with copy of UsoEntity_common_AttachmentType.DefinedValues?(v3, a1);
}

uint64_t protocol witness for SharingIntent.type.setter in conformance SharingNLv4Intent(uint64_t a1)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_type;
  swift_beginAccess();
  outlined assign with take of UsoEntity_common_AttachmentType.DefinedValues?(a1, v3);
  return swift_endAccess();
}

uint64_t protocol witness for SharingIntent.containsSharingReference.getter in conformance SharingNLv4Intent()
{
  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_containsSharingReference);
}

uint64_t protocol witness for SharingIntent.containsSharingReference.setter in conformance SharingNLv4Intent(uint64_t result)
{
  *(unsigned char *)(*v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_containsSharingReference) = result;
  return result;
}

uint64_t protocol witness for SharingIntent.appName.getter in conformance SharingNLv4Intent(uint64_t a1, uint64_t a2)
{
  return protocol witness for SharingIntent.appName.getter in conformance SharingNLv4Intent(a1, a2, &OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appName);
}

uint64_t protocol witness for SharingIntent.appName.setter in conformance SharingNLv4Intent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(*v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appName);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for SharingIntent.typeMatchingSpan.getter in conformance SharingNLv4Intent(uint64_t a1, uint64_t a2)
{
  return protocol witness for SharingIntent.appName.getter in conformance SharingNLv4Intent(a1, a2, &OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_typeMatchingSpan);
}

uint64_t protocol witness for SharingIntent.typeMatchingSpan.setter in conformance SharingNLv4Intent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(*v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_typeMatchingSpan);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for SharingIntent.appIdentifier.getter in conformance SharingNLv4Intent(uint64_t a1, uint64_t a2)
{
  return protocol witness for SharingIntent.appName.getter in conformance SharingNLv4Intent(a1, a2, &OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appIdentifier);
}

uint64_t protocol witness for SharingIntent.appIdentifier.setter in conformance SharingNLv4Intent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(*v2 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_appIdentifier);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for SharingIntent.associatedAppIdentifier.getter in conformance SharingNLv4Intent(uint64_t a1, uint64_t a2)
{
  return protocol witness for SharingIntent.appName.getter in conformance SharingNLv4Intent(a1, a2, &OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_associatedAppIdentifier);
}

uint64_t protocol witness for SharingIntent.appName.getter in conformance SharingNLv4Intent(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(*v3 + *a3);
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t protocol witness for SharingIntent.refersToScreen.getter in conformance SharingNLv4Intent()
{
  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToScreen);
}

uint64_t protocol witness for SharingIntent.refersToEverything.getter in conformance SharingNLv4Intent()
{
  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToEverything);
}

uint64_t protocol witness for SharingIntent.refersToDisplayedContent.getter in conformance SharingNLv4Intent()
{
  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_refersToDisplayedContent);
}

uint64_t protocol witness for SharingIntent.recipients.getter in conformance SharingNLv4Intent()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for SharingIntent.confirmationValue.getter in conformance SharingNLv4Intent()
{
  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_confirmationValue);
}

uint64_t protocol witness for SharingIntent.isSharePlayRequest.getter in conformance SharingNLv4Intent()
{
  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_isSharePlayRequest);
}

uint64_t protocol witness for SharingIntent.usoEntity.getter in conformance SharingNLv4Intent()
{
  return swift_retain();
}

uint64_t protocol witness for SharingIntent.isReformed.getter in conformance SharingNLv4Intent()
{
  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_isReformed);
}

uint64_t protocol witness for SharingIntent.isReformed.setter in conformance SharingNLv4Intent(uint64_t result)
{
  *(unsigned char *)(*v1 + OBJC_IVAR____TtC19SiriExpanseInternal17SharingNLv4Intent_isReformed) = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SharingNLv4Intent()
{
  return SharingNLv4Intent.description.getter();
}

unint64_t instantiation function for generic protocol witness table for SharingNLv4Intent(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SharingNLv4Intent and conformance SharingNLv4Intent();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type SharingNLv4Intent and conformance SharingNLv4Intent()
{
  unint64_t result = lazy protocol witness table cache variable for type SharingNLv4Intent and conformance SharingNLv4Intent;
  if (!lazy protocol witness table cache variable for type SharingNLv4Intent and conformance SharingNLv4Intent)
  {
    type metadata accessor for SharingNLv4Intent();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingNLv4Intent and conformance SharingNLv4Intent);
  }
  return result;
}

uint64_t AFSpeechRecognition.extract(alignment:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UtteranceAlignment();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UtteranceSpan?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UtteranceSpan();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v42 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v41 - v14;
  uint64_t v16 = UtteranceAlignment.spans.getter();
  if (*(void *)(v16 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v9, v16 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)), v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of SharingResponse?((uint64_t)v9, &demangling cache variable for type metadata for UtteranceSpan?);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v9, v10);
  id v17 = objc_msgSend(v1, sel_nBestTranscripts);
  if (!v17)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
    return (uint64_t)v17;
  }
  uint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unsigned int v19 = UtteranceAlignment.asrHypothesisIndex.getter();
  unint64_t v20 = *(void *)(v18 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  uint64_t v21 = (void (**)(char *, uint64_t))(v4 + 8);
  if (v20 <= v19)
  {
    swift_bridgeObjectRelease();
    (*v21)(v6, v3);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
    return 0;
  }
  UtteranceAlignment.asrHypothesisIndex.getter();
  (*v21)(v6, v3);
  uint64_t result = UtteranceAlignment.asrHypothesisIndex.getter();
  if (*(void *)(v18 + 16) <= (unint64_t)result)
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = v18 + 16 * result;
    uint64_t v25 = *(void *)(v23 + 32);
    uint64_t v24 = *(void *)(v23 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    UtteranceSpan.startIndex.getter();
    unsigned int v26 = UtteranceSpan.startIndex.getter();
    unsigned int v27 = UtteranceSpan.endIndex.getter();
    uint64_t v28 = v42;
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v42, v15, v10);
    if (v26 >= v27)
    {
      swift_bridgeObjectRelease();
      uint64_t v31 = *(void (**)(char *, uint64_t))(v11 + 8);
      v31(v28, v10);
      goto LABEL_15;
    }
    unsigned int v29 = UtteranceSpan.endIndex.getter();
    swift_bridgeObjectRetain();
    uint64_t v30 = String.UTF16View.count.getter();
    swift_bridgeObjectRelease();
    uint64_t v31 = *(void (**)(char *, uint64_t))(v11 + 8);
    v31(v28, v10);
    if (v30 < v29)
    {
      swift_bridgeObjectRelease();
LABEL_15:
      v31(v15, v10);
      return 0;
    }
    swift_bridgeObjectRetain();
    UtteranceSpan.startIndex.getter();
    unint64_t v32 = String.UTF16View.index(_:offsetBy:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    UtteranceSpan.endIndex.getter();
    unint64_t v33 = String.UTF16View.index(_:offsetBy:)();
    uint64_t result = swift_bridgeObjectRelease();
    if (v33 >> 14 >= v32 >> 14)
    {
      uint64_t v34 = MEMORY[0x230F98CA0](v32, v33, v25, v24);
      uint64_t v36 = v35;
      uint64_t v38 = v37;
      uint64_t v40 = v39;
      swift_bridgeObjectRelease();
      id v17 = (id)MEMORY[0x230F98CB0](v34, v36, v38, v40);
      v31(v15, v10);
      return (uint64_t)v17;
    }
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      id v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #2 in SharingNLv4Intent.processCommonMessage(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return closure #2 in SharingNLv4Intent.processCommonMessage(_:)(a1, a2);
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UsoIdentifier>, MEMORY[0x263F72710]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Contact]>, &demangling cache variable for type metadata for [Contact]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[String]>, &demangling cache variable for type metadata for [String]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>, MEMORY[0x263F6D310]);
  *uint64_t v3 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationParticipant>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    id v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationParticipant);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    unint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = _swift_stdlib_malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    unint64_t v13 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, a3, &demangling cache variable for type metadata for Loggable<String>);
}

uint64_t destroy for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1, uint64_t a2)
{
  return destroy for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, &demangling cache variable for type metadata for Loggable<String>);
}

uint64_t initializeWithCopy for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, a3, &demangling cache variable for type metadata for Loggable<String>);
}

uint64_t assignWithCopy for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, a3, &demangling cache variable for type metadata for Loggable<String>);
}

uint64_t initializeWithTake for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, a3, &demangling cache variable for type metadata for Loggable<String>);
}

uint64_t assignWithTake for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, a3, &demangling cache variable for type metadata for Loggable<String>);
}

uint64_t getEnumTagSinglePayload for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22DDC4338);
}

uint64_t sub_22DDC4338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_0(a1, a2, a3, &demangling cache variable for type metadata for Loggable<String>);
}

uint64_t storeEnumTagSinglePayload for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22DDC4358);
}

uint64_t sub_22DDC4358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_0(a1, a2, a3, a4, &demangling cache variable for type metadata for Loggable<String>);
}

uint64_t type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for ExpanseUIModel.AppStorePunchoutSnippetModel);
}

void type metadata completion function for ExpanseUIModel.AppStorePunchoutSnippetModel()
{
  type metadata accessor for Loggable<String>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Loggable<String>()
{
  if (!lazy cache variable for type metadata for Loggable<String>)
  {
    unint64_t v0 = type metadata accessor for Loggable();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Loggable<String>);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ExpanseUIModel.BinaryButtonSnippetModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, a3, &demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
}

uint64_t *initializeBufferWithCopyOfBuffer for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a4);
    unint64_t v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16);
    v9(a1, a2, v8);
    v9((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v8);
  }
  return a1;
}

uint64_t destroy for ExpanseUIModel.BinaryButtonSnippetModel(uint64_t a1, uint64_t a2)
{
  return destroy for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, &demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
}

uint64_t destroy for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v8)((void *)(v5 - 8), a1, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 20);

  return v8(v6, v5);
}

uint64_t initializeWithCopy for ExpanseUIModel.BinaryButtonSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, a3, &demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
}

uint64_t initializeWithCopy for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  v8(a1, a2, v7);
  v8(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v7);
  return a1;
}

uint64_t assignWithCopy for ExpanseUIModel.BinaryButtonSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, a3, &demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
}

uint64_t assignWithCopy for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24);
  v8(a1, a2, v7);
  v8(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v7);
  return a1;
}

uint64_t initializeWithTake for ExpanseUIModel.BinaryButtonSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, a3, &demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
}

uint64_t initializeWithTake for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32);
  v8(a1, a2, v7);
  v8(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v7);
  return a1;
}

uint64_t assignWithTake for ExpanseUIModel.BinaryButtonSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for ExpanseUIModel.AppStorePunchoutSnippetModel(a1, a2, a3, &demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
}

uint64_t assignWithTake for ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40);
  v8(a1, a2, v7);
  v8(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpanseUIModel.BinaryButtonSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22DDC48AC);
}

uint64_t sub_22DDC48AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_0(a1, a2, a3, &demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);

  return v7(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for ExpanseUIModel.BinaryButtonSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22DDC4938);
}

uint64_t sub_22DDC4938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_0(a1, a2, a3, a4, &demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
}

uint64_t __swift_store_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(a1, a2, a2, v7);
}

uint64_t type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for ExpanseUIModel.BinaryButtonSnippetModel);
}

void type metadata completion function for ExpanseUIModel.BinaryButtonSnippetModel()
{
  type metadata accessor for Loggable<ExpanseUIModel.ButtonModel>(319, &lazy cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>, type metadata accessor for ExpanseUIModel.ButtonModel, MEMORY[0x263F77230]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata accessor for ExpanseUIModel.ButtonModel(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for ExpanseUIModel.ButtonModel);
}

uint64_t *initializeBufferWithCopyOfBuffer for ExpanseUIModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
      uint64_t v7 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16);
      v7(a1, a2, v6);
      uint64_t v8 = type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(0);
    }
    else
    {
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      uint64_t v7 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16);
      v7(a1, a2, v6);
      uint64_t v8 = type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(0);
    }
    v7((uint64_t *)((char *)a1 + *(int *)(v8 + 20)), (uint64_t *)((char *)a2 + *(int *)(v8 + 20)), v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ExpanseUIModel(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v6)((void *)(v2 - 8), a1, v2);
    uint64_t v3 = type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(0);
  }
  else
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v6)((void *)(v2 - 8), a1, v2);
    uint64_t v3 = type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(0);
  }
  uint64_t v4 = a1 + *(int *)(v3 + 20);

  return v6(v4, v2);
}

uint64_t initializeWithCopy for ExpanseUIModel(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
    int v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
    v5(a1, a2, v4);
    uint64_t v6 = type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(0);
  }
  else
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    int v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
    v5(a1, a2, v4);
    uint64_t v6 = type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(0);
  }
  v5(a1 + *(int *)(v6 + 20), a2 + *(int *)(v6 + 20), v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for ExpanseUIModel(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s19SiriExpanseInternal0B7UIModelOWOhTm_0(a1, type metadata accessor for ExpanseUIModel);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
      int v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
      v5(a1, a2, v4);
      uint64_t v6 = type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(0);
    }
    else
    {
      uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      int v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
      v5(a1, a2, v4);
      uint64_t v6 = type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(0);
    }
    v5(a1 + *(int *)(v6 + 20), a2 + *(int *)(v6 + 20), v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for ExpanseUIModel(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for ExpanseUIModel);
}

uint64_t initializeWithTake for ExpanseUIModel(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
    int v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);
    v5(a1, a2, v4);
    uint64_t v6 = type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(0);
  }
  else
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    int v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);
    v5(a1, a2, v4);
    uint64_t v6 = type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(0);
  }
  v5(a1 + *(int *)(v6 + 20), a2 + *(int *)(v6 + 20), v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for ExpanseUIModel(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s19SiriExpanseInternal0B7UIModelOWOhTm_0(a1, type metadata accessor for ExpanseUIModel);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
      int v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);
      v5(a1, a2, v4);
      uint64_t v6 = type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(0);
    }
    else
    {
      uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      int v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);
      v5(a1, a2, v4);
      uint64_t v6 = type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(0);
    }
    v5(a1 + *(int *)(v6 + 20), a2 + *(int *)(v6 + 20), v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for ExpanseUIModel()
{
  uint64_t result = type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ExpanseUIModel.ButtonModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    swift_bridgeObjectRetain();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return a1;
}

uint64_t destroy for ExpanseUIModel.ButtonModel(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for ExpanseUIModel.ButtonModel(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  swift_bridgeObjectRetain();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

void *assignWithCopy for ExpanseUIModel.ButtonModel(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for ExpanseUIModel.ButtonModel(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for ExpanseUIModel.ButtonModel(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpanseUIModel.ButtonModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22DDC56E4);
}

uint64_t sub_22DDC56E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ExpanseUIModel.ButtonModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22DDC57AC);
}

uint64_t sub_22DDC57AC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for ExpanseUIModel.ButtonModel()
{
  type metadata accessor for Loggable<ExpanseUIModel.ButtonModel>(319, &lazy cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>, (uint64_t (*)(uint64_t))type metadata accessor for SAIntentGroupRunSiriKitExecutor, MEMORY[0x263F76C68]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Loggable<ExpanseUIModel.ButtonModel>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t type metadata accessor for SAIntentGroupRunSiriKitExecutor()
{
  unint64_t result = lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor;
  if (!lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor);
  }
  return result;
}

uint64_t ExpanseUIModel.AppStorePunchoutSnippetModel.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  lazy protocol witness table accessor for type Loggable<String> and conformance <A> Loggable<A>(&lazy protocol witness table cache variable for type Loggable<String> and conformance <A> Loggable<A>);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(0);
    v8[14] = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ExpanseUIModel.AppStorePunchoutSnippetModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v27 = *(void *)(v30 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v30);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v28 = (char *)&v21 - v7;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys>);
  uint64_t v26 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v22 = v10;
  uint64_t v23 = v6;
  uint64_t v14 = v26;
  uint64_t v13 = v27;
  uint64_t v24 = v12;
  char v32 = 0;
  uint64_t v15 = lazy protocol witness table accessor for type Loggable<String> and conformance <A> Loggable<A>(&lazy protocol witness table cache variable for type Loggable<String> and conformance <A> Loggable<A>);
  unint64_t v16 = v28;
  uint64_t v17 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v21 = v15;
  uint64_t v28 = *(char **)(v13 + 32);
  ((void (*)(char *, char *, uint64_t))v28)(v24, v16, v30);
  char v31 = 1;
  uint64_t v18 = v23;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v17);
  uint64_t v19 = (uint64_t)v24;
  ((void (*)(char *, char *, uint64_t))v28)(&v24[*(int *)(v22 + 20)], v18, v30);
  outlined init with copy of ExpanseUIModel.AppStorePunchoutSnippetModel(v19, v25, type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return _s19SiriExpanseInternal0B7UIModelOWOhTm_0(v19, type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel);
}

uint64_t ExpanseUIModel.BinaryButtonSnippetModel.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
  lazy protocol witness table accessor for type Loggable<ExpanseUIModel.ButtonModel> and conformance <A> Loggable<A>(&lazy protocol witness table cache variable for type Loggable<ExpanseUIModel.ButtonModel> and conformance <A> Loggable<A>);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(0);
    v8[14] = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ExpanseUIModel.BinaryButtonSnippetModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
  uint64_t v27 = *(void *)(v30 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v30);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v28 = (char *)&v21 - v7;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys>);
  uint64_t v26 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v22 = v10;
  uint64_t v23 = v6;
  uint64_t v14 = v26;
  uint64_t v13 = v27;
  uint64_t v24 = v12;
  char v32 = 0;
  uint64_t v15 = lazy protocol witness table accessor for type Loggable<ExpanseUIModel.ButtonModel> and conformance <A> Loggable<A>(&lazy protocol witness table cache variable for type Loggable<ExpanseUIModel.ButtonModel> and conformance <A> Loggable<A>);
  unint64_t v16 = v28;
  uint64_t v17 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v21 = v15;
  uint64_t v28 = *(char **)(v13 + 32);
  ((void (*)(char *, char *, uint64_t))v28)(v24, v16, v30);
  char v31 = 1;
  uint64_t v18 = v23;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v17);
  uint64_t v19 = (uint64_t)v24;
  ((void (*)(char *, char *, uint64_t))v28)(&v24[*(int *)(v22 + 20)], v18, v30);
  outlined init with copy of ExpanseUIModel.AppStorePunchoutSnippetModel(v19, v25, type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return _s19SiriExpanseInternal0B7UIModelOWOhTm_0(v19, type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel);
}

uint64_t ExpanseUIModel.ButtonModel.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ExpanseUIModel.ButtonModel.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for ExpanseUIModel.ButtonModel(0);
    v8[14] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>(&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ExpanseUIModel.ButtonModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v17 = a2;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v16 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ExpanseUIModel.ButtonModel.CodingKeys>);
  uint64_t v18 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ExpanseUIModel.ButtonModel(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t *)((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v15 = v8;
  uint64_t v12 = v18;
  uint64_t v11 = v19;
  char v22 = 0;
  *uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  v10[1] = v13;
  char v21 = 1;
  lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>(&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v20);
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))((char *)v10 + *(int *)(v15 + 20), v5, v11);
  outlined init with copy of ExpanseUIModel.AppStorePunchoutSnippetModel((uint64_t)v10, v17, type metadata accessor for ExpanseUIModel.ButtonModel);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return _s19SiriExpanseInternal0B7UIModelOWOhTm_0((uint64_t)v10, type metadata accessor for ExpanseUIModel.ButtonModel);
}

uint64_t ExpanseUIModel.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ExpanseUIModel.BinaryButtonCodingKeys>);
  uint64_t v32 = *(void *)(v2 - 8);
  uint64_t v33 = v2;
  MEMORY[0x270FA5388](v2);
  char v31 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(0);
  MEMORY[0x270FA5388](v29);
  uint64_t v30 = (uint64_t)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ExpanseUIModel.AppStorePunchoutCodingKeys>);
  uint64_t v27 = *(void *)(v5 - 8);
  uint64_t v28 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(0);
  MEMORY[0x270FA5388](v26);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ExpanseUIModel(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ExpanseUIModel.CodingKeys>);
  uint64_t v13 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of ExpanseUIModel.AppStorePunchoutSnippetModel(v35, (uint64_t)v12, type metadata accessor for ExpanseUIModel);
  uint64_t v16 = (uint64_t (**)(char *, uint64_t))(v13 + 8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = v30;
    outlined init with take of ExpanseUIModel((uint64_t)v12, v30, type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel);
    char v37 = 1;
    lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys();
    uint64_t v18 = v31;
    uint64_t v19 = v34;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonSnippetModel and conformance ExpanseUIModel.BinaryButtonSnippetModel(&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel and conformance ExpanseUIModel.BinaryButtonSnippetModel, (void (*)(uint64_t))type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel);
    uint64_t v20 = v33;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v18, v20);
    char v21 = type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel;
    uint64_t v22 = v17;
  }
  else
  {
    outlined init with take of ExpanseUIModel((uint64_t)v12, (uint64_t)v9, type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel);
    char v36 = 0;
    lazy protocol witness table accessor for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys();
    uint64_t v19 = v34;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonSnippetModel and conformance ExpanseUIModel.BinaryButtonSnippetModel(&lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel and conformance ExpanseUIModel.AppStorePunchoutSnippetModel, (void (*)(uint64_t))type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel);
    uint64_t v23 = v28;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v23);
    char v21 = type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel;
    uint64_t v22 = (uint64_t)v9;
  }
  _s19SiriExpanseInternal0B7UIModelOWOhTm_0(v22, v21);
  return (*v16)(v15, v19);
}

uint64_t ExpanseUIModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ExpanseUIModel.BinaryButtonCodingKeys>);
  uint64_t v41 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v44 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ExpanseUIModel.AppStorePunchoutCodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  uint64_t v40 = v5;
  MEMORY[0x270FA5388](v4);
  uint64_t v43 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ExpanseUIModel.CodingKeys>);
  uint64_t v42 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ExpanseUIModel(0);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v35 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v35 - v17;
  uint64_t v19 = a1[3];
  uint64_t v45 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  lazy protocol witness table accessor for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys();
  uint64_t v20 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20) {
    goto LABEL_7;
  }
  uint64_t v35 = v18;
  char v36 = v13;
  char v21 = v16;
  uint64_t v22 = v43;
  uint64_t v23 = v44;
  uint64_t v46 = v10;
  uint64_t v24 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v25 = v9;
  if (*(void *)(v24 + 16) != 1)
  {
    uint64_t v29 = type metadata accessor for DecodingError();
    swift_allocError();
    char v31 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *char v31 = v46;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v29 - 8) + 104))(v31, *MEMORY[0x263F8DCB0], v29);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v7);
LABEL_7:
    uint64_t v27 = (uint64_t)v45;
    return __swift_destroy_boxed_opaque_existential_1(v27);
  }
  if (*(unsigned char *)(v24 + 32))
  {
    char v48 = 1;
    lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel(0);
    lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonSnippetModel and conformance ExpanseUIModel.BinaryButtonSnippetModel(&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel and conformance ExpanseUIModel.BinaryButtonSnippetModel, (void (*)(uint64_t))type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel);
    uint64_t v26 = v38;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v23, v26);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v7);
    uint64_t v27 = (uint64_t)v45;
    uint64_t v28 = (uint64_t)v36;
  }
  else
  {
    char v47 = 0;
    lazy protocol witness table accessor for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel(0);
    lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonSnippetModel and conformance ExpanseUIModel.BinaryButtonSnippetModel(&lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel and conformance ExpanseUIModel.AppStorePunchoutSnippetModel, (void (*)(uint64_t))type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel);
    uint64_t v28 = (uint64_t)v21;
    uint64_t v33 = v39;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v22, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v25, v7);
    uint64_t v27 = (uint64_t)v45;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v34 = (uint64_t)v35;
  outlined init with take of ExpanseUIModel(v28, (uint64_t)v35, type metadata accessor for ExpanseUIModel);
  outlined init with take of ExpanseUIModel(v34, v37, type metadata accessor for ExpanseUIModel);
  return __swift_destroy_boxed_opaque_existential_1(v27);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys()
{
  if (*v0) {
    return 0x656D614E707061;
  }
  else {
    return 0x614C6E6F74747562;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ExpanseUIModel.AppStorePunchoutSnippetModel()
{
  if ((static Loggable<A>.== infix(_:_:)() & 1) == 0) {
    return 0;
  }

  return static Loggable<A>.== infix(_:_:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ExpanseUIModel.AppStorePunchoutSnippetModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ExpanseUIModel.AppStorePunchoutSnippetModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ExpanseUIModel.AppStorePunchoutSnippetModel(void *a1)
{
  return ExpanseUIModel.AppStorePunchoutSnippetModel.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys()
{
  if (*v0) {
    return 0x7261646E6F636573;
  }
  else {
    return 0x427972616D697270;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ExpanseUIModel.BinaryButtonSnippetModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ExpanseUIModel.BinaryButtonSnippetModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ExpanseUIModel.BinaryButtonSnippetModel(void *a1)
{
  return ExpanseUIModel.BinaryButtonSnippetModel.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ExpanseUIModel.ButtonModel.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000010;
  }
  else {
    return 0x6C6562616CLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ExpanseUIModel.ButtonModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ExpanseUIModel.ButtonModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ExpanseUIModel.ButtonModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ExpanseUIModel.ButtonModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ExpanseUIModel.ButtonModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ExpanseUIModel.ButtonModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ExpanseUIModel.ButtonModel(void *a1)
{
  return ExpanseUIModel.ButtonModel.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ExpanseUIModel.AppStorePunchoutCodingKeys()
{
  return 12383;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ExpanseUIModel.AppStorePunchoutCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ExpanseUIModel.AppStorePunchoutCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ExpanseUIModel.AppStorePunchoutCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ExpanseUIModel.BinaryButtonCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ExpanseUIModel.BinaryButtonCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ExpanseUIModel.CodingKeys()
{
  if (*v0) {
    return 0x75427972616E6962;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ExpanseUIModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ExpanseUIModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ExpanseUIModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ExpanseUIModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

unint64_t protocol witness for static SnippetPluginModel.bundleName.getter in conformance ExpanseUIModel()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for SnippetPluginModel.snippetHidden(for:idiom:) in conformance ExpanseUIModel()
{
  return MEMORY[0x270F739D8]();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ExpanseUIModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ExpanseUIModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ExpanseUIModel(void *a1)
{
  return ExpanseUIModel.encode(to:)(a1);
}

uint64_t base witness table accessor for Decodable in ExpanseUIModel.BinaryButtonSnippetModel()
{
  return lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonSnippetModel and conformance ExpanseUIModel.BinaryButtonSnippetModel(&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel and conformance ExpanseUIModel.BinaryButtonSnippetModel, (void (*)(uint64_t))type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel);
}

uint64_t base witness table accessor for Encodable in ExpanseUIModel.BinaryButtonSnippetModel()
{
  return lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonSnippetModel and conformance ExpanseUIModel.BinaryButtonSnippetModel(&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel and conformance ExpanseUIModel.BinaryButtonSnippetModel, (void (*)(uint64_t))type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel);
}

uint64_t lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonSnippetModel and conformance ExpanseUIModel.BinaryButtonSnippetModel(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Decodable in ExpanseUIModel.AppStorePunchoutSnippetModel()
{
  return lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonSnippetModel and conformance ExpanseUIModel.BinaryButtonSnippetModel(&lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel and conformance ExpanseUIModel.AppStorePunchoutSnippetModel, (void (*)(uint64_t))type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel);
}

uint64_t base witness table accessor for Encodable in ExpanseUIModel.AppStorePunchoutSnippetModel()
{
  return lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonSnippetModel and conformance ExpanseUIModel.BinaryButtonSnippetModel(&lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel and conformance ExpanseUIModel.AppStorePunchoutSnippetModel, (void (*)(uint64_t))type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel);
}

uint64_t base witness table accessor for Decodable in ExpanseUIModel()
{
  return lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonSnippetModel and conformance ExpanseUIModel.BinaryButtonSnippetModel(&lazy protocol witness table cache variable for type ExpanseUIModel and conformance ExpanseUIModel, (void (*)(uint64_t))type metadata accessor for ExpanseUIModel);
}

uint64_t base witness table accessor for Encodable in ExpanseUIModel()
{
  return lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonSnippetModel and conformance ExpanseUIModel.BinaryButtonSnippetModel(&lazy protocol witness table cache variable for type ExpanseUIModel and conformance ExpanseUIModel, (void (*)(uint64_t))type metadata accessor for ExpanseUIModel);
}

unint64_t lazy protocol witness table accessor for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys and conformance ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys);
  }
  return result;
}

uint64_t _s19SiriExpanseInternal0B7UIModelOWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t lazy protocol witness table accessor for type Loggable<String> and conformance <A> Loggable<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Loggable<String>);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys and conformance ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys);
  }
  return result;
}

uint64_t outlined init with copy of ExpanseUIModel.AppStorePunchoutSnippetModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t lazy protocol witness table accessor for type Loggable<ExpanseUIModel.ButtonModel> and conformance <A> Loggable<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Loggable<ExpanseUIModel.ButtonModel>);
    lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonSnippetModel and conformance ExpanseUIModel.BinaryButtonSnippetModel(&lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel and conformance ExpanseUIModel.ButtonModel, (void (*)(uint64_t))type metadata accessor for ExpanseUIModel.ButtonModel);
    lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonSnippetModel and conformance ExpanseUIModel.BinaryButtonSnippetModel(&lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel and conformance ExpanseUIModel.ButtonModel, (void (*)(uint64_t))type metadata accessor for ExpanseUIModel.ButtonModel);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.CodingKeys and conformance ExpanseUIModel.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.BinaryButtonCodingKeys and conformance ExpanseUIModel.BinaryButtonCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.AppStorePunchoutCodingKeys and conformance ExpanseUIModel.AppStorePunchoutCodingKeys);
  }
  return result;
}

uint64_t outlined init with take of ExpanseUIModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpanseUIModel.ButtonModel.CodingKeys and conformance ExpanseUIModel.ButtonModel.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *type metadata accessor for ExpanseUIModel.ButtonModel.CodingKeys()
{
  return &unk_26E1D08C0;
}

void *type metadata accessor for ExpanseUIModel.CodingKeys()
{
  return &unk_26E1D0950;
}

void *type metadata accessor for ExpanseUIModel.AppStorePunchoutCodingKeys()
{
  return &unk_26E1D09E0;
}

unsigned char *storeEnumTagSinglePayload for ExpanseUIModel.AppStorePunchoutCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22DDC8250);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for ExpanseUIModel.BinaryButtonCodingKeys()
{
  return &unk_26E1D0A70;
}

void *type metadata accessor for ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys()
{
  return &unk_26E1D0B00;
}

unsigned char *storeEnumTagSinglePayload for ExpanseUIModel.ButtonModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22DDC8364);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys()
{
  return &unk_26E1D0B90;
}

uint64_t specialized ExpanseUIModel.AppStorePunchoutSnippetModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x614C6E6F74747562 && a2 == 0xEB000000006C6562;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D614E707061 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized ExpanseUIModel.BinaryButtonSnippetModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x427972616D697270 && a2 == 0xED00006E6F747475;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7261646E6F636573 && a2 == 0xEF6E6F7474754279)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized ExpanseUIModel.ButtonModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C6562616CLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000022DDEB950)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized ExpanseUIModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x800000022DDEB930
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x75427972616E6962 && a2 == 0xEC0000006E6F7474)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t ScreenShareAvailability.description.getter(unsigned __int8 a1)
{
  if (a1 == 5) {
    return 0xD00000000000001FLL;
  }
  int v2 = a1;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  unint64_t v3 = 0xD000000000000018;
  unint64_t v4 = 0x800000022DDEA5C0;
  switch(v2)
  {
    case 0:
      goto LABEL_10;
    case 1:
      unint64_t v4 = 0xEA0000000000646CLL;
      unint64_t v3 = 0x6F486E4F6C6C6163;
      goto LABEL_10;
    case 2:
      unint64_t v4 = 0x800000022DDEA5F0;
      unint64_t v3 = 0xD000000000000010;
      goto LABEL_10;
    case 3:
      unint64_t v3 = 0xD000000000000013;
      unint64_t v4 = 0x800000022DDEA610;
LABEL_10:
      unint64_t v5 = v4;
      String.append(_:)(*(Swift::String *)&v3);
      swift_bridgeObjectRelease();
      v6._countAndFlagsBits = 41;
      v6._object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      unint64_t result = 0xD00000000000002CLL;
      break;
    default:
      unint64_t result = 0xD000000000000021;
      break;
  }
  return result;
}

unint64_t ScreenShareAvailability.UnavailabilityReason.description.getter(char a1)
{
  unint64_t result = 0xD000000000000018;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6F486E4F6C6C6163;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t ScreenShareAvailability.UnavailabilityReason.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000018;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6F486E4F6C6C6163;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ScreenShareAvailability.UnavailabilityReason()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ScreenShareAvailability.UnavailabilityReason()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ScreenShareAvailability.UnavailabilityReason()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ScreenShareAvailability.UnavailabilityReason@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized ScreenShareAvailability.UnavailabilityReason.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ScreenShareAvailability.UnavailabilityReason@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = ScreenShareAvailability.UnavailabilityReason.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ScreenShareAvailability.UnavailabilityReason(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ScreenShareAvailability.UnavailabilityReason()
{
  return ScreenShareAvailability.UnavailabilityReason.description.getter(*v0);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ScreenShareAvailability(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 5) {
    return v3 == 5;
  }
  if (v2 == 4) {
    return v3 == 4;
  }
  if ((v3 & 0xFE) == 4) {
    return 0;
  }
  return specialized == infix<A>(_:_:)(v2, v3);
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ScreenShareAvailability()
{
  return ScreenShareAvailability.description.getter(*v0);
}

uint64_t getEnumTagSinglePayload for ScreenShareAvailability(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB)
  {
    unsigned int v2 = a2 + 5;
    if (a2 + 5 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 5;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 5;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x22DDC9614);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 5;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 4) {
    unsigned int v8 = v7 - 3;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 3) {
    return v8 - 2;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for ScreenShareAvailability(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 5;
  if (a3 + 5 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFB) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v7 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x22DDC96FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScreenShareAvailability()
{
  return &type metadata for ScreenShareAvailability;
}

unsigned char *storeEnumTagSinglePayload for ScreenShareAvailability.UnavailabilityReason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22DDC9800);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScreenShareAvailability.UnavailabilityReason()
{
  return &type metadata for ScreenShareAvailability.UnavailabilityReason;
}

unint64_t lazy protocol witness table accessor for type ScreenShareAvailability.UnavailabilityReason and conformance ScreenShareAvailability.UnavailabilityReason()
{
  unint64_t result = lazy protocol witness table cache variable for type ScreenShareAvailability.UnavailabilityReason and conformance ScreenShareAvailability.UnavailabilityReason;
  if (!lazy protocol witness table cache variable for type ScreenShareAvailability.UnavailabilityReason and conformance ScreenShareAvailability.UnavailabilityReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScreenShareAvailability.UnavailabilityReason and conformance ScreenShareAvailability.UnavailabilityReason);
  }
  return result;
}

unint64_t specialized ScreenShareAvailability.UnavailabilityReason.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ScreenShareAvailability.UnavailabilityReason.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t Call.isFaceTimeCall.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = MEMORY[0x270FA5388]();
  unsigned int v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = (*(uint64_t (**)(uint64_t))(v9 + 24))(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
  if (v10) {
    char v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  }
  else {
    char v11 = 0;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
  return v11 & 1;
}

uint64_t Call.allowsScreenSharing.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = MEMORY[0x270FA5388]();
  unsigned int v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = (*(uint64_t (**)(uint64_t))(v9 + 16))(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
  if (v10) {
    char v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  }
  else {
    char v11 = 0;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
  return v11 & 1;
}

uint64_t Call.activeShareSession.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  (*(void (**)(long long *__return_ptr))(a2 + 40))(&v23);
  if (!v24)
  {
    outlined destroy of SharingResponse?((uint64_t)&v23, &demangling cache variable for type metadata for Conversation?);
    return 0;
  }
  outlined init with take of SharingIntent(&v23, (uint64_t)v26);
  uint64_t v4 = v27;
  uint64_t v5 = v28;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v5 + 16))(&v21, v4, v5);
  if (!v22)
  {
    outlined destroy of SharingResponse?((uint64_t)&v21, &demangling cache variable for type metadata for ActivitySession?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    return 0;
  }
  outlined init with take of SharingIntent(&v21, (uint64_t)&v23);
  uint64_t v6 = v24;
  uint64_t v7 = v25;
  __swift_project_boxed_opaque_existential_1(&v23, v24);
  LOBYTE(v7) = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(v6, v7);
  uint64_t v8 = v24;
  uint64_t v9 = v25;
  __swift_project_boxed_opaque_existential_1(&v23, v24);
  char v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 32))(v8, v9);
  if (v7)
  {
    if (v10)
    {
      char v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 104))(a1, v2);
      if (v11)
      {
        uint64_t v12 = v11;
        if (!objc_msgSend(v11, sel_isWindowed))
        {

          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
          return 0;
        }
        lazy protocol witness table accessor for type ExpanseError and conformance ExpanseError();
        swift_allocError();
        swift_willThrow();
      }
      else
      {
        if (one-time initialization token for default != -1) {
          swift_once();
        }
        uint64_t v17 = type metadata accessor for Logger();
        __swift_project_value_buffer(v17, (uint64_t)static Logger.default);
        uint64_t v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v2 = swift_slowAlloc();
          *(_WORD *)uint64_t v2 = 0;
          _os_log_impl(&dword_22DD8A000, v18, v19, "Malformed call - screen sharing activity session is local, yet no screen share attributes are present. File a bug on TU?", (uint8_t *)v2, 2u);
          MEMORY[0x230F996F0](v2, -1, -1);
        }

        lazy protocol witness table accessor for type ExpanseError and conformance ExpanseError();
        swift_allocError();
        swift_willThrow();
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    }
    else
    {
      uint64_t v13 = v24;
      uint64_t v14 = v25;
      __swift_project_boxed_opaque_existential_1(&v23, v24);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
      uint64_t v15 = v24;
      uint64_t v16 = v25;
      __swift_project_boxed_opaque_existential_1(&v23, v24);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    }
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    return 0;
  }
  return v2;
}

uint64_t Call.isGroupCall.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 40))(v6);
  uint64_t v2 = v7;
  if (v7)
  {
    uint64_t v3 = v8;
    __swift_project_boxed_opaque_existential_1(v6, v7);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3) & 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  else
  {
    outlined destroy of SharingResponse?((uint64_t)v6, &demangling cache variable for type metadata for Conversation?);
    return 2;
  }
  return v4;
}

uint64_t Call.screenShareAvailability.getter(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(a2 + 8))();
  switch(v4)
  {
    case 3:
      if ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2))
      {
        char v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 144))(a1, a2);
        if (v6) {
          unsigned int v7 = 4;
        }
        else {
          unsigned int v7 = 2;
        }
        if (v6 == 2) {
          return 5;
        }
        else {
          return v7;
        }
      }
      else
      {
        return 0;
      }
    case 2:
      return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2) & 1;
    case 1:
      if ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2)) {
        return 4;
      }
      else {
        return 0;
      }
    default:
      return 3;
  }
}

BOOL Call.isScreenShareSalient.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  uint64_t v22 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  char v10 = (char *)&v20 - v9;
  uint64_t v12 = *(uint64_t (**)(uint64_t))(v11 + 8);
  int v13 = v12(v8);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v23 = v2;
  v14(v10, v2, a1);
  uint64_t v20 = v12;
  uint64_t v21 = a2;
  BOOL v15 = v13 == 1 || ((unsigned int (*)(uint64_t, uint64_t))v12)(a1, a2) == 3;
  uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v10, a1);
  uint64_t v17 = v22;
  v14(v22, v23, a1);
  BOOL v18 = v15 || ((unsigned int (*)(uint64_t, uint64_t))v20)(a1, v21) == 2;
  v16(v17, a1);
  return v18;
}

void TUCall.setLocalScreenShareAttributes(_:)(void *a1)
{
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = a1;
  int v4 = self;
  id v5 = v1;
  id v6 = a1;
  id v7 = v5;
  id v8 = v6;
  if (objc_msgSend(v4, sel_isMainThread))
  {
    objc_msgSend(v7, sel_setScreenShareAttributes_, v8);

    swift_release();
  }
  else
  {
    type metadata accessor for LSBundleRecord(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    uint64_t v9 = (void *)static OS_dispatch_queue.main.getter();
    MEMORY[0x270FA5388](v9);
    OS_dispatch_queue.sync<A>(execute:)();

    swift_release();
  }
}

void TUCall.enableScreenSharing(with:)(void *a1)
{
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = a1;
  int v4 = self;
  id v5 = v1;
  id v6 = a1;
  id v7 = v5;
  id v8 = v6;
  if (objc_msgSend(v4, sel_isMainThread))
  {
    objc_msgSend(v7, sel_setSharingScreen_attributes_, 1, v8);

    swift_release();
  }
  else
  {
    type metadata accessor for LSBundleRecord(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    uint64_t v9 = (void *)static OS_dispatch_queue.main.getter();
    MEMORY[0x270FA5388](v9);
    OS_dispatch_queue.sync<A>(execute:)();

    swift_release();
  }
}

Swift::Void __swiftcall TUCall.disableScreenSharing()()
{
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = v0;
  *(unsigned char *)(v1 + 24) = 0;
  uint64_t v2 = self;
  id v3 = v0;
  if (objc_msgSend(v2, sel_isMainThread))
  {
    objc_msgSend(v3, sel_setSharingScreen_, 0);

    swift_release();
  }
  else
  {
    type metadata accessor for LSBundleRecord(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    int v4 = (void *)static OS_dispatch_queue.main.getter();
    MEMORY[0x270FA5388](v4);
    OS_dispatch_queue.sync<A>(execute:)();

    swift_release();
  }
}

id protocol witness for Call.status.getter in conformance TUCall()
{
  return objc_msgSend(*v0, sel_status);
}

id protocol witness for Call.providerIsFaceTime.getter in conformance TUCall()
{
  id v1 = objc_msgSend(*v0, sel_provider);
  id v2 = objc_msgSend(v1, sel_isFaceTimeProvider);

  return v2;
}

id protocol witness for Call.isConversation.getter in conformance TUCall()
{
  return objc_msgSend(*v0, sel_isConversation);
}

double protocol witness for Call.conversation.getter in conformance TUCall@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  id v4 = objc_msgSend(self, sel_sharedInstance);
  id v5 = objc_msgSend(v4, sel_activeConversationForCall_, v3);

  if (v5)
  {
    *(void *)(a1 + 24) = type metadata accessor for LSBundleRecord(0, &lazy cache variable for type metadata for TUConversation);
    *(void *)(a1 + 32) = &protocol witness table for TUConversation;
    *(void *)a1 = v5;
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

id protocol witness for Call.isScreenSharingCapable.getter in conformance TUCall()
{
  if (!objc_msgSend(self, sel_allowsScreenSharing)) {
    return 0;
  }
  id v0 = objc_msgSend(self, sel_sharedInstance);
  id v1 = objc_msgSend(v0, sel_conversationManager);

  id v2 = objc_msgSend(v1, sel_isScreenSharingAvailable);
  return v2;
}

uint64_t protocol witness for Call.activeShareSession.getter in conformance TUCall(uint64_t a1, uint64_t a2)
{
  uint64_t result = Call.activeShareSession.getter(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

id protocol witness for Call.isLocalParticipantSharingScreen.getter in conformance TUCall()
{
  return objc_msgSend(*v0, sel_isSharingScreen);
}

id protocol witness for Call.localScreenShareAttributes.getter in conformance TUCall()
{
  id v1 = *v0;
  if (objc_msgSend(*v0, sel_isSharingScreen)) {
    return objc_msgSend(v1, sel_screenShareAttributes);
  }
  else {
    return 0;
  }
}

void protocol witness for Call.setLocalScreenShareAttributes(_:) in conformance TUCall(void *a1)
{
}

void protocol witness for Call.enableScreenSharing(with:) in conformance TUCall(void *a1)
{
}

void protocol witness for Call.disableScreenSharing() in conformance TUCall()
{
}

uint64_t dispatch thunk of Call.status.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Call.isFaceTimeCall.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Call.providerIsFaceTime.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Call.isConversation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of Call.conversation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of Call.isScreenSharingCapable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of Call.allowsScreenSharing.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of Call.activeShareSession.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of Call.isLocalParticipantSharingScreen.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of Call.isLocalParticipantSharingScreen.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of Call.isLocalParticipantSharingScreen.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of Call.isRemoteParticipantSharingScreen.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of Call.localScreenShareAttributes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of Call.setLocalScreenShareAttributes(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of Call.screenSharingActivitySession.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of Call.enableScreenSharing(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t dispatch thunk of Call.disableScreenSharing()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of Call.isGroupCall.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t dispatch thunk of Call.screenShareAvailability.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of Call.isScreenShareSalient.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t sub_22DDCAB44()
{
  return MEMORY[0x270FA0238](v0, 25, 7);
}

id partial apply for closure #1 in TUCall.isLocalParticipantSharingScreen.setter()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_setSharingScreen_, *(unsigned __int8 *)(v0 + 24));
}

uint64_t partial apply for specialized closure #1 in static OS_dispatch_queue.executeOnMain<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_22DDCABC0()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

id partial apply for closure #1 in TUCall.enableScreenSharing(with:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_setSharingScreen_attributes_, 1, *(void *)(v0 + 24));
}

id partial apply for closure #1 in TUCall.setLocalScreenShareAttributes(_:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_setScreenShareAttributes_, *(void *)(v0 + 24));
}

uint64_t closure #1 in static OS_dispatch_queue.executeOnMain<A>(_:)specialized partial apply()
{
  return partial apply for specialized closure #1 in static OS_dispatch_queue.executeOnMain<A>(_:)();
}

unsigned char *storeEnumTagSinglePayload for ExpanseError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22DDCACDCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExpanseError()
{
  return &type metadata for ExpanseError;
}

uint64_t dispatch thunk of DialogExecuting.execute(catId:parameters:globals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 8) + **(int **)(a5 + 8));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  void *v11 = v5;
  v11[1] = dispatch thunk of DialogExecuting.execute(catId:parameters:globals:);
  return v13(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of DialogExecuting.execute(catId:parameters:globals:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  int v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t dispatch thunk of DialogExecuting.executeAsLabel(catId:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 16) + **(int **)(a4 + 16));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = dispatch thunk of DialogExecuting.executeAsLabel(catId:parameters:);
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of DialogExecuting.executeAsLabel(catId:parameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(a1, a2);
}

unint64_t AppBundleID.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0xD000000000000019;
      break;
    case 5:
    case 7:
      unint64_t result = 0xD000000000000012;
      break;
    case 6:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t specialized Array<A>.containsAtLeastOneOf<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v25 = a2 + 32;
  uint64_t v4 = a1 + 56;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  for (uint64_t i = 0; i != v2; ++i)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * i);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v9 = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(a1 + 32);
      unint64_t v11 = v9 & ~v10;
      if ((*(void *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
      {
        uint64_t v12 = *(void *)(a1 + 48);
        int v13 = (void *)(v12 + 16 * v11);
        BOOL v14 = *v13 == v8 && v13[1] == v7;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_26:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v23 = 1;
          goto LABEL_27;
        }
        uint64_t v15 = ~v10;
        unint64_t v16 = (v11 + 1) & ~v10;
        if ((*(void *)(v4 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16))
        {
          uint64_t v17 = (void *)(v12 + 16 * v16);
          BOOL v18 = *v17 == v8 && v17[1] == v7;
          if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_26;
          }
          for (unint64_t j = v16 + 1; ; unint64_t j = v20 + 1)
          {
            unint64_t v20 = j & v15;
            if (((*(void *)(v4 + (((j & v15) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (j & v15)) & 1) == 0) {
              break;
            }
            uint64_t v21 = (void *)(v12 + 16 * v20);
            BOOL v22 = *v21 == v8 && v21[1] == v7;
            if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              goto LABEL_26;
            }
          }
        }
      }
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v23 = 0;
LABEL_27:
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  uint64_t result = specialized Set.startIndex.getter(a1);
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  uint64_t v5 = specialized Set.subscript.getter(result, v3, 0, a1);
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t RecipientsResolver.resolve(persons:)(unint64_t a1)
{
  uint64_t v91 = type metadata accessor for ContactHandle();
  uint64_t v82 = *(void *)(v91 - 8);
  MEMORY[0x270FA5388](v91);
  int v90 = (char *)v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for ContactQuery();
  uint64_t v4 = *(void *)(v89 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v89);
  uint64_t v7 = (char *)v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  Swift::Int v9 = (char *)v74 - v8;
  if (!a1) {
    return 0;
  }
  uint64_t v79 = v1;
  unint64_t v81 = a1;
  if (!(a1 >> 62))
  {
    uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v10) {
      goto LABEL_22;
    }
    goto LABEL_4;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v10)
  {
LABEL_4:
    v93[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10 & ~(v10 >> 63), 0);
    if (v10 < 0) {
      goto LABEL_91;
    }
    uint64_t v11 = v93[0];
    if ((v81 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        MEMORY[0x230F98F30](i, v81);
        INPerson.toContactQuery()();
        swift_unknownObjectRelease();
        v93[0] = v11;
        unint64_t v14 = *(void *)(v11 + 16);
        unint64_t v13 = *(void *)(v11 + 24);
        if (v14 >= v13 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
          uint64_t v11 = v93[0];
        }
        *(void *)(v11 + 16) = v14 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v11+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v14, v9, v89);
      }
    }
    else
    {
      unint64_t v16 = (id *)(v81 + 32);
      do
      {
        id v17 = *v16;
        INPerson.toContactQuery()();

        v93[0] = v11;
        unint64_t v19 = *(void *)(v11 + 16);
        unint64_t v18 = *(void *)(v11 + 24);
        if (v19 >= v18 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
          uint64_t v11 = v93[0];
        }
        *(void *)(v11 + 16) = v19 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v11+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v19, v7, v89);
        ++v16;
        --v10;
      }
      while (v10);
    }
    goto LABEL_20;
  }
  uint64_t v11 = MEMORY[0x263F8EE78];
LABEL_20:
  __swift_project_boxed_opaque_existential_1(v80, v80[3]);
  uint64_t v20 = v79;
  uint64_t v21 = ContactResolver.findMatches(queries:)(v11);
  if (v20)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  BOOL v22 = v21;
  swift_bridgeObjectRelease();
  int64_t v23 = *((void *)v22 + 2);
  if (!v23)
  {
    uint64_t v79 = 0;
    swift_bridgeObjectRelease();
    uint64_t v61 = MEMORY[0x263F8EE78];
    uint64_t v29 = v80;
    goto LABEL_73;
  }
  uint64_t v24 = *((void *)v22 + 4);
  int v75 = v22 + 32;
  if (!*(void *)(v24 + 16)) {
    goto LABEL_72;
  }
  if (v23 != 1)
  {
    uint64_t v25 = 5;
    while (1)
    {
      uint64_t v26 = v25 - 3;
      if (__OFADD__(v25 - 4, 1)) {
        goto LABEL_90;
      }
      if (!*(void *)(*(void *)&v22[8 * v25] + 16)) {
        break;
      }
      ++v25;
      if (v26 == v23) {
        goto LABEL_30;
      }
    }
LABEL_72:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 1;
  }
LABEL_30:
  v74[1] = v22;
  uint64_t v79 = 0;
  uint64_t v96 = MEMORY[0x263F8EE78];
  int64_t v76 = v23;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0);
  int64_t v27 = v76;
  uint64_t v28 = 0;
  uint64_t v88 = (void (**)(char *, uint64_t))(v82 + 8);
  uint64_t v89 = v82 + 16;
  uint64_t v29 = v80;
  while (1)
  {
    if (v28 == v27) {
      goto LABEL_89;
    }
    uint64_t v78 = v28;
    uint64_t v30 = *(void *)&v75[8 * v28];
    uint64_t v84 = *(void *)(v30 + 16);
    if (v84) {
      break;
    }
    uint64_t v32 = (void *)MEMORY[0x263F8EE78];
LABEL_65:
    uint64_t v61 = v96;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v61 + 16) + 1, 1);
      uint64_t v29 = v80;
      uint64_t v61 = v96;
    }
    int64_t v27 = v76;
    uint64_t v62 = v78;
    unint64_t v64 = *(void *)(v61 + 16);
    unint64_t v63 = *(void *)(v61 + 24);
    if (v64 >= v63 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1);
      uint64_t v62 = v78;
      int64_t v27 = v76;
      uint64_t v29 = v80;
      uint64_t v61 = v96;
    }
    uint64_t v28 = v62 + 1;
    *(void *)(v61 + 16) = v64 + 1;
    *(void *)(v61 + 8 * v64 + 32) = v32;
    if (v28 == v27)
    {
      swift_bridgeObjectRelease();
LABEL_73:
      __swift_project_boxed_opaque_existential_1(v29 + 5, v29[8]);
      uint64_t v65 = ScreenSharingCallManager.getRemoteCallParticipantHandles()();
      uint64_t v66 = *(void *)(v61 + 16);
      if (v66)
      {
        swift_bridgeObjectRetain();
        for (uint64_t j = 0; j != v66; ++j)
        {
          uint64_t v68 = *(void *)(v61 + 8 * j + 32);
          swift_bridgeObjectRetain();
          char v69 = specialized Array<A>.containsAtLeastOneOf<A>(_:)(v65, v68);
          swift_bridgeObjectRelease();
          if ((v69 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            return 1;
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v70 = *(void *)(v61 + 16);
        v93[0] = MEMORY[0x263F8EE78];
        if (v70)
        {
          swift_bridgeObjectRetain();
          for (uint64_t k = 0; k != v70; ++k)
          {
            uint64_t v72 = swift_bridgeObjectRetain();
            specialized Array.append<A>(contentsOf:)(v72);
          }
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        v93[0] = MEMORY[0x263F8EE78];
      }
      swift_bridgeObjectRelease();
      char v73 = specialized Set.isSubset<A>(of:)(v93[0], v65);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v73 & 1) == 0) {
        return v81;
      }
LABEL_22:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  uint64_t v83 = v30 + 32;
  uint64_t v77 = v30;
  swift_bridgeObjectRetain_n();
  uint64_t v31 = 0;
  uint64_t v32 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    outlined init with copy of ResponseExecuting(v83 + 40 * v31, (uint64_t)v93);
    uint64_t v33 = v94;
    uint64_t v34 = v95;
    __swift_project_boxed_opaque_existential_1(v93, v94);
    uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v33, v34);
    int64_t v36 = *(void *)(v35 + 16);
    if (v36)
    {
      uint64_t v86 = v31;
      uint64_t v87 = v32;
      uint64_t v92 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36, 0);
      uint64_t v37 = *(unsigned __int8 *)(v82 + 80);
      uint64_t v85 = v35;
      uint64_t v38 = v35 + ((v37 + 32) & ~v37);
      uint64_t v39 = *(void *)(v82 + 72);
      uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v82 + 16);
      do
      {
        uint64_t v41 = v90;
        uint64_t v42 = v91;
        v40(v90, v38, v91);
        uint64_t v43 = ContactHandle.value.getter();
        uint64_t v45 = v44;
        (*v88)(v41, v42);
        uint64_t v46 = v92;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v46 + 16) + 1, 1);
          uint64_t v46 = v92;
        }
        unint64_t v48 = *(void *)(v46 + 16);
        unint64_t v47 = *(void *)(v46 + 24);
        if (v48 >= v47 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1);
          uint64_t v46 = v92;
        }
        *(void *)(v46 + 16) = v48 + 1;
        uint64_t v49 = v46 + 16 * v48;
        *(void *)(v49 + 32) = v43;
        *(void *)(v49 + 40) = v45;
        v38 += v39;
        --v36;
      }
      while (v36);
      swift_bridgeObjectRelease();
      uint64_t v31 = v86;
      uint64_t v32 = v87;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v46 = MEMORY[0x263F8EE78];
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
    uint64_t v50 = *(void *)(v46 + 16);
    int64_t v51 = v32[2];
    int64_t v52 = v51 + v50;
    if (__OFADD__(v51, v50)) {
      break;
    }
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v52 <= v32[3] >> 1)
    {
      if (*(void *)(v46 + 16)) {
        goto LABEL_54;
      }
    }
    else
    {
      if (v51 <= v52) {
        int64_t v54 = v51 + v50;
      }
      else {
        int64_t v54 = v51;
      }
      uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)isUniquelyReferenced_nonNull_native, v54, 1, v32);
      if (*(void *)(v46 + 16))
      {
LABEL_54:
        uint64_t v55 = v32[2];
        if ((v32[3] >> 1) - v55 < v50) {
          goto LABEL_87;
        }
        unint64_t v56 = (unint64_t)&v32[2 * v55 + 4];
        if (v46 + 32 < v56 + 16 * v50 && v56 < v46 + 32 + 16 * v50) {
          goto LABEL_92;
        }
        swift_arrayInitWithCopy();
        if (v50)
        {
          uint64_t v58 = v32[2];
          BOOL v59 = __OFADD__(v58, v50);
          uint64_t v60 = v58 + v50;
          if (v59) {
            goto LABEL_88;
          }
          v32[2] = v60;
        }
        goto LABEL_35;
      }
    }
    if (v50) {
      goto LABEL_86;
    }
LABEL_35:
    ++v31;
    swift_bridgeObjectRelease();
    if (v31 == v84)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v29 = v80;
      goto LABEL_65;
    }
  }
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Set.isSubset<A>(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2)
  {
    char v12 = 1;
    return v12 & 1;
  }
  if (v2 != 1)
  {
    swift_bridgeObjectRetain();
    char v12 = specialized _NativeSet.isSubset<A>(of:)(a1, a2);
LABEL_16:
    swift_bridgeObjectRelease();
    return v12 & 1;
  }
  uint64_t result = specialized Collection.first.getter(a2);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8)
    {
      uint64_t v9 = result;
      uint64_t v10 = (void *)(a1 + 40);
      while (1)
      {
        BOOL v11 = *(v10 - 1) == v9 && v7 == *v10;
        if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        v10 += 2;
        if (!--v8) {
          goto LABEL_12;
        }
      }
      char v12 = 1;
    }
    else
    {
LABEL_12:
      char v12 = 0;
    }
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.isSubset<A>(of:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  v9[1] = *MEMORY[0x263EF8340];
  char v4 = *(unsigned char *)(a2 + 32);
  size_t v5 = ((unint64_t)((1 << v4) + 63) >> 3) & 0x1FFFFFFFFFFFFFF8;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    char v6 = specialized closure #1 in _NativeSet.isSubset<A>(of:)((uint64_t)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v3, a2);
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    char v6 = specialized closure #1 in _NativeSet.isSubset<A>(of:)((uint64_t)v7, v3, a2);
    MEMORY[0x230F996F0](v7, -1, -1);
  }
  return v6 & 1;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t specialized Set.subscript.getter(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 48) + 16 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in _NativeSet.isSubset<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *(void *)(a2 + 16);
  if (v27)
  {
    uint64_t v28 = a3 + 56;
    uint64_t v26 = a2 + 32;
    swift_bridgeObjectRetain();
    uint64_t v25 = 0;
    uint64_t v4 = 0;
    while (1)
    {
      char v5 = (uint64_t *)(v26 + 16 * v4);
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v8 = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(a3 + 32);
      unint64_t v10 = v8 & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = 1 << v10;
      if (((1 << v10) & *(void *)(v28 + 8 * (v10 >> 6))) == 0) {
        goto LABEL_3;
      }
      uint64_t v13 = *(void *)(a3 + 48);
      int64_t v14 = (void *)(v13 + 16 * v10);
      BOOL v15 = *v14 == v7 && v14[1] == v6;
      if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_12:
      uint64_t v17 = *(void *)(a1 + 8 * v11);
      *(void *)(a1 + 8 * v11) = v12 | v17;
      if ((v12 & v17) == 0)
      {
        if (__OFADD__(v25, 1))
        {
          __break(1u);
          return result;
        }
        if (++v25 == *(void *)(a3 + 16))
        {
          uint64_t v23 = 1;
LABEL_26:
          swift_bridgeObjectRelease();
          return v23;
        }
      }
LABEL_4:
      if (++v4 == v27)
      {
        uint64_t v23 = 0;
        goto LABEL_26;
      }
    }
    uint64_t v18 = ~v9;
    for (unint64_t i = v10 + 1; ; unint64_t i = v20 + 1)
    {
      unint64_t v20 = i & v18;
      if (((*(void *)(v28 + (((i & v18) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v18)) & 1) == 0) {
        break;
      }
      uint64_t v21 = (void *)(v13 + 16 * v20);
      BOOL v22 = *v21 == v7 && v21[1] == v6;
      if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v20 >> 6;
        uint64_t v12 = 1 << v20;
        goto LABEL_12;
      }
    }
LABEL_3:
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  return 0;
}

ValueMetadata *type metadata accessor for RecipientsResolver()
{
  return &type metadata for RecipientsResolver;
}

id one-time initialization function for fullScreenAttributes()
{
  id result = closure #1 in variable initialization expression of static TUCallScreenShareAttributes.fullScreenAttributes();
  static TUCallScreenShareAttributes.fullScreenAttributes = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static TUCallScreenShareAttributes.fullScreenAttributes()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F7E1B8]), sel_init);
  objc_msgSend(v4, sel_setStyle_, 1);
  objc_msgSend(v4, sel_setDeviceFamily_, objc_msgSend(self, sel_currentDeviceFamily));
  id v5 = objc_msgSend(self, sel_mainConfiguration);
  objc_msgSend(v5, sel_pointScale);
  double v7 = v6;

  id v8 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v7);
  objc_msgSend(v4, sel_setDisplayScale_, v8);

  type metadata accessor for NSNumber();
  Class isa = NSNumber.init(floatLiteral:)(1.0).super.super.isa;
  objc_msgSend(v4, sel_setScaleFactor_, isa);

  objc_msgSend(v4, sel_setWindowed_, 0);
  UUID.init()();
  Class v10 = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v4, sel_setWindowUUID_, v10);

  return v4;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

uint64_t one-time initialization function for default()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.default);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.default);
  return Logger.init(subsystem:category:)();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void static OS_dispatch_queue.executeOnMain<A>(_:)(void (*a1)(void))
{
  if (objc_msgSend(self, sel_isMainThread))
  {
    a1();
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    uint64_t v2 = (void *)static OS_dispatch_queue.main.getter();
    MEMORY[0x270FA5388](v2);
    OS_dispatch_queue.sync<A>(execute:)();
  }
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t partial apply for closure #1 in static OS_dispatch_queue.executeOnMain<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t dispatch thunk of static PromptFlowState.initialized.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static PromptFlowState.completeSilently.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static PromptFlowState.failedWithUnknownError(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of PromptManaging.state.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of PromptManaging.state.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of PromptManaging.state.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of PromptManaging.responseExecutor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of PromptManaging.outputPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of PromptManaging.executeYesNoConfirmationFlow(withPrompt:confirmationRejectedDialog:flowCancelledDialog:onYes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 64))();
}

uint64_t dispatch thunk of PromptManaging.processPromptFlowExitValue<A>(_:onValueReceived:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 72))();
}

uint64_t specialized closure #1 in closure #1 in PromptManaging.executeYesNoConfirmationFlow(withPrompt:confirmationRejectedDialog:flowCancelledDialog:onYes:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for SimpleConfirmationResponseProvider();
  uint64_t v64 = *(void *)(v7 - 8);
  uint64_t v65 = v7;
  MEMORY[0x270FA5388](v7);
  unint64_t v63 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v58 - v12;
  MEMORY[0x270FA5388](v11);
  BOOL v15 = (char *)&v58 - v14;
  SimpleConfirmationResponseProvider.confirmationResponse.getter();
  uint64_t v16 = type metadata accessor for ConfirmationResponse();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.default);
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    uint64_t v21 = (uint64_t)v15;
    if (!os_log_type_enabled(v19, v20)) {
      goto LABEL_19;
    }
    BOOL v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v22 = 0;
    _os_log_impl(&dword_22DD8A000, v19, v20, "PromptGiving: Confirmation response has no value - this should never happen", v22, 2u);
    uint64_t v23 = v22;
    goto LABEL_18;
  }
  uint64_t v62 = v15;
  outlined init with copy of ConfirmationResponse?((uint64_t)v15, (uint64_t)v13);
  int v24 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v13, v16);
  if (v24 != *MEMORY[0x263F6FC98])
  {
    if (v24 == *MEMORY[0x263F6FC90])
    {
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Logger.default);
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      BOOL v28 = os_log_type_enabled(v26, v27);
      uint64_t v21 = (uint64_t)v62;
      if (v28)
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v29 = 0;
        _os_log_impl(&dword_22DD8A000, v26, v27, "PromptGiving: User answered negatively to prompt - completing flow", v29, 2u);
        MEMORY[0x230F996F0](v29, -1, -1);
      }

      outlined init with take of StartSharingConfirmationFlow.State((long long *)(a4 + 16), (uint64_t)v67);
      uint64_t v30 = *(void *)(a4 + 16);
      uint64_t v31 = *(void *)(a4 + 24);
      uint64_t v32 = *(void *)(a4 + 32);
      uint64_t v33 = *(void *)(a4 + 40);
      uint64_t v34 = *(void *)(a4 + 48);
      uint64_t v35 = *(void *)(a4 + 56);
      *(void *)(a4 + 16) = 4;
      *(_OWORD *)(a4 + 24) = 0u;
      *(_OWORD *)(a4 + 40) = 0u;
      *(void *)(a4 + 56) = 0;
      unsigned int v36 = *(unsigned __int8 *)(a4 + 64);
      *(unsigned char *)(a4 + 64) = 32;
      outlined retain of StartSharingConfirmationFlow.State((uint64_t)v67, (void (*)(void, void, void, void, void, void, void))outlined copy of StartSharingConfirmationFlow.State);
      outlined consume of StartSharingConfirmationFlow.State(v30, v31, v32, v33, v34, v35, v36);
      StartSharingConfirmationFlow.state.didset((uint64_t)v67);
      goto LABEL_20;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v13, v16);
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.default);
    uint64_t v38 = v63;
    uint64_t v39 = v64;
    uint64_t v40 = v65;
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v63, a1, v65);
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    BOOL v42 = os_log_type_enabled(v19, v41);
    uint64_t v21 = (uint64_t)v62;
    if (!v42)
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v38, v40);
      goto LABEL_19;
    }
    os_log_t v61 = v19;
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    uint64_t v60 = swift_slowAlloc();
    v67[0] = v60;
    BOOL v59 = v43;
    *(_DWORD *)uint64_t v43 = 136315138;
    uint64_t v58 = v43 + 4;
    SimpleConfirmationResponseProvider.confirmationResponse.getter();
    uint64_t v44 = String.init<A>(describing:)();
    uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v38, v40);
    unint64_t v19 = v61;
    uint64_t v46 = v59;
    _os_log_impl(&dword_22DD8A000, v61, v41, "PromptGiving: Confirmation response has unknown value %s - add support for it!", v59, 0xCu);
    uint64_t v47 = v60;
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v47, -1, -1);
    uint64_t v23 = v46;
LABEL_18:
    MEMORY[0x230F996F0](v23, -1, -1);
LABEL_19:

    lazy protocol witness table accessor for type ExpanseError and conformance ExpanseError();
    unint64_t v48 = (void *)swift_allocError();
    outlined init with take of StartSharingConfirmationFlow.State((long long *)(a4 + 16), (uint64_t)v67);
    uint64_t v49 = *(void *)(a4 + 16);
    uint64_t v50 = *(void *)(a4 + 24);
    uint64_t v51 = *(void *)(a4 + 32);
    uint64_t v52 = *(void *)(a4 + 40);
    uint64_t v53 = *(void *)(a4 + 48);
    uint64_t v54 = *(void *)(a4 + 56);
    *(void *)(a4 + 16) = v48;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(void *)(a4 + 56) = 0;
    unsigned int v55 = *(unsigned __int8 *)(a4 + 64);
    *(unsigned char *)(a4 + 64) = 16;
    outlined retain of StartSharingConfirmationFlow.State((uint64_t)v67, (void (*)(void, void, void, void, void, void, void))outlined copy of StartSharingConfirmationFlow.State);
    id v56 = v48;
    outlined consume of StartSharingConfirmationFlow.State(v49, v50, v51, v52, v53, v54, v55);
    StartSharingConfirmationFlow.state.didset((uint64_t)v67);

LABEL_20:
    outlined retain of StartSharingConfirmationFlow.State((uint64_t)v67, (void (*)(void, void, void, void, void, void, void))outlined consume of StartSharingConfirmationFlow.State);
    return outlined destroy of SharingResponse?(v21, &demangling cache variable for type metadata for ConfirmationResponse?);
  }
  a2();
  uint64_t v21 = (uint64_t)v62;
  return outlined destroy of SharingResponse?(v21, &demangling cache variable for type metadata for ConfirmationResponse?);
}

void specialized PromptManaging.processPromptFlowExitValue<A>(_:onValueReceived:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, void (*a5)(char *, uint64_t))
{
  uint64_t v94 = a4;
  uint64_t v95 = a5;
  unint64_t v93 = a3;
  uint64_t v96 = a2;
  uint64_t v6 = type metadata accessor for SimpleConfirmationResponseProvider();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<SimpleConfirmationResponseProvider>);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v92 = (char *)v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v90 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)v90 - v17;
  unint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v19((char *)v90 - v17, a1, v10);
  int v20 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v18, v10);
  if (v20 == *MEMORY[0x263F6FA10])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v18, v10);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v18, v6);
    specialized closure #1 in closure #1 in PromptManaging.executeYesNoConfirmationFlow(withPrompt:confirmationRejectedDialog:flowCancelledDialog:onYes:)((uint64_t)v9, v93, v94, (uint64_t)v95);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return;
  }
  if (v20 == *MEMORY[0x263F6FA08])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v18, v10);
    uint64_t v21 = *(void **)v18;
    int v22 = v18[8];
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.default);
    id v24 = v21;
    id v25 = v21;
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      BOOL v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = (void *)swift_slowAlloc();
      *(_DWORD *)BOOL v28 = 138412290;
      id v30 = v21;
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      v98[0] = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v29 = v31;

      _os_log_impl(&dword_22DD8A000, v26, v27, "PromptGiving: Error during execution of prompt flow: %@", v28, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v29, -1, -1);
      MEMORY[0x230F996F0](v28, -1, -1);
    }
    else
    {
    }
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    BOOL v39 = os_log_type_enabled(v37, v38);
    if (v22)
    {
      if (v39)
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v40 = 0;
        _os_log_impl(&dword_22DD8A000, v37, v38, "PromptGiving: Error already handled - completing flow", v40, 2u);
        MEMORY[0x230F996F0](v40, -1, -1);
      }

      uint64_t v41 = v96;
      outlined init with take of StartSharingConfirmationFlow.State((long long *)(v96 + 16), (uint64_t)v98);
      uint64_t v42 = *(void *)(v41 + 16);
      uint64_t v43 = *(void *)(v41 + 24);
      uint64_t v44 = *(void *)(v41 + 32);
      uint64_t v45 = *(void *)(v41 + 40);
      uint64_t v46 = *(void *)(v41 + 48);
      uint64_t v47 = *(void *)(v41 + 56);
      *(void *)(v41 + 16) = 4;
      *(_OWORD *)(v41 + 24) = 0u;
      *(_OWORD *)(v41 + 40) = 0u;
      *(void *)(v41 + 56) = 0;
      unsigned int v48 = *(unsigned __int8 *)(v41 + 64);
      *(unsigned char *)(v41 + 64) = 32;
      outlined retain of StartSharingConfirmationFlow.State((uint64_t)v98, (void (*)(void, void, void, void, void, void, void))outlined copy of StartSharingConfirmationFlow.State);
      outlined consume of StartSharingConfirmationFlow.State(v42, v43, v44, v45, v46, v47, v48);
      StartSharingConfirmationFlow.state.didset((uint64_t)v98);
    }
    else
    {
      if (v39)
      {
        uint64_t v58 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v58 = 0;
        _os_log_impl(&dword_22DD8A000, v37, v38, "PromptGiving: Error not already handled - transitioning to .failedWithUnknownError state", v58, 2u);
        MEMORY[0x230F996F0](v58, -1, -1);
      }

      uint64_t v59 = v96;
      outlined init with take of StartSharingConfirmationFlow.State((long long *)(v96 + 16), (uint64_t)v98);
      uint64_t v60 = *(void *)(v59 + 16);
      uint64_t v61 = *(void *)(v59 + 24);
      uint64_t v62 = *(void *)(v59 + 32);
      uint64_t v63 = *(void *)(v59 + 40);
      uint64_t v64 = *(void *)(v59 + 48);
      uint64_t v65 = *(void *)(v59 + 56);
      *(void *)(v59 + 16) = v21;
      *(_OWORD *)(v59 + 24) = 0u;
      *(_OWORD *)(v59 + 40) = 0u;
      *(void *)(v59 + 56) = 0;
      unsigned int v66 = *(unsigned __int8 *)(v59 + 64);
      *(unsigned char *)(v59 + 64) = 16;
      id v67 = v21;
      id v68 = v21;
      outlined retain of StartSharingConfirmationFlow.State((uint64_t)v98, (void (*)(void, void, void, void, void, void, void))outlined copy of StartSharingConfirmationFlow.State);
      outlined consume of StartSharingConfirmationFlow.State(v60, v61, v62, v63, v64, v65, v66);
      StartSharingConfirmationFlow.state.didset((uint64_t)v98);
    }
    outlined retain of StartSharingConfirmationFlow.State((uint64_t)v98, (void (*)(void, void, void, void, void, void, void))outlined consume of StartSharingConfirmationFlow.State);

    return;
  }
  if (v20 == *MEMORY[0x263F6FA18])
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.default);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v33, v34)) {
      goto LABEL_24;
    }
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v35 = 0;
    unsigned int v36 = "PromptGiving: User responded to prompt with 'cancel' - completing flow";
LABEL_23:
    _os_log_impl(&dword_22DD8A000, v33, v34, v36, v35, 2u);
    MEMORY[0x230F996F0](v35, -1, -1);
LABEL_24:

    uint64_t v50 = v96;
    outlined init with take of StartSharingConfirmationFlow.State((long long *)(v96 + 16), (uint64_t)v98);
    uint64_t v51 = *(void *)(v50 + 16);
    uint64_t v52 = *(void *)(v50 + 24);
    uint64_t v53 = *(void *)(v50 + 32);
    uint64_t v54 = *(void *)(v50 + 40);
    uint64_t v55 = *(void *)(v50 + 48);
    uint64_t v56 = *(void *)(v50 + 56);
    *(void *)(v50 + 16) = 4;
    *(_OWORD *)(v50 + 24) = 0u;
    *(_OWORD *)(v50 + 40) = 0u;
    *(void *)(v50 + 56) = 0;
    unsigned int v57 = *(unsigned __int8 *)(v50 + 64);
    *(unsigned char *)(v50 + 64) = 32;
    outlined retain of StartSharingConfirmationFlow.State((uint64_t)v98, (void (*)(void, void, void, void, void, void, void))outlined copy of StartSharingConfirmationFlow.State);
    outlined consume of StartSharingConfirmationFlow.State(v51, v52, v53, v54, v55, v56, v57);
    StartSharingConfirmationFlow.state.didset((uint64_t)v98);
    outlined retain of StartSharingConfirmationFlow.State((uint64_t)v98, (void (*)(void, void, void, void, void, void, void))outlined consume of StartSharingConfirmationFlow.State);
    return;
  }
  if (v20 == *MEMORY[0x263F6FA00])
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    __swift_project_value_buffer(v49, (uint64_t)static Logger.default);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v33, v34)) {
      goto LABEL_24;
    }
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v35 = 0;
    unsigned int v36 = "PromptGiving: User provided no answer to the prompt - completing flow";
    goto LABEL_23;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v69 = type metadata accessor for Logger();
  __swift_project_value_buffer(v69, (uint64_t)static Logger.default);
  v19(v16, a1, v10);
  uint64_t v70 = Logger.logObject.getter();
  os_log_type_t v71 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v70, v71))
  {
    uint64_t v72 = (uint8_t *)swift_slowAlloc();
    unint64_t v93 = (void (*)(void))swift_slowAlloc();
    v98[0] = (uint64_t)v93;
    uint64_t v91 = v72;
    *(_DWORD *)uint64_t v72 = 136315138;
    v90[1] = v72 + 4;
    char v73 = v92;
    v19(v92, (uint64_t)v16, v10);
    uint64_t v74 = *(void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v94 = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v74(v16, v10);
    lazy protocol witness table accessor for type PromptResult<SharingIntent?> and conformance PromptResult<A>(&lazy protocol witness table cache variable for type PromptResult<SimpleConfirmationResponseProvider> and conformance PromptResult<A>, &demangling cache variable for type metadata for PromptResult<SimpleConfirmationResponseProvider>);
    uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v77 = v76;
    uint64_t v95 = v74;
    v74(v73, v10);
    uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v77, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v78 = v91;
    _os_log_impl(&dword_22DD8A000, v70, v71, "PromptGiving: PromptForValueFlow exitValue has unknown value %s - add support for it!", v91, 0xCu);
    uint64_t v79 = v93;
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v79, -1, -1);
    MEMORY[0x230F996F0](v78, -1, -1);
  }
  else
  {
    uint64_t v80 = *(void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v94 = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v95 = v80;
    v80(v16, v10);
  }

  lazy protocol witness table accessor for type ExpanseError and conformance ExpanseError();
  unint64_t v81 = (void *)swift_allocError();
  uint64_t v82 = v96;
  outlined init with take of StartSharingConfirmationFlow.State((long long *)(v96 + 16), (uint64_t)v98);
  uint64_t v83 = *(void *)(v82 + 24);
  unint64_t v93 = *(void (**)(void))(v82 + 16);
  uint64_t v84 = *(void *)(v82 + 32);
  uint64_t v85 = *(void *)(v82 + 40);
  uint64_t v86 = *(void *)(v82 + 48);
  uint64_t v87 = *(void *)(v82 + 56);
  *(void *)(v82 + 16) = v81;
  *(_OWORD *)(v82 + 24) = 0u;
  *(_OWORD *)(v82 + 40) = 0u;
  *(void *)(v82 + 56) = 0;
  unsigned int v88 = *(unsigned __int8 *)(v82 + 64);
  *(unsigned char *)(v82 + 64) = 16;
  outlined retain of StartSharingConfirmationFlow.State((uint64_t)v98, (void (*)(void, void, void, void, void, void, void))outlined copy of StartSharingConfirmationFlow.State);
  id v89 = v81;
  outlined consume of StartSharingConfirmationFlow.State((uint64_t)v93, v83, v84, v85, v86, v87, v88);
  StartSharingConfirmationFlow.state.didset((uint64_t)v98);

  outlined retain of StartSharingConfirmationFlow.State((uint64_t)v98, (void (*)(void, void, void, void, void, void, void))outlined consume of StartSharingConfirmationFlow.State);
  v95(v18, v10);
}

void specialized PromptManaging.processPromptFlowExitValue<A>(_:onValueReceived:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v74 = a2;
  uint64_t started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  uint64_t v9 = MEMORY[0x270FA5388](started);
  uint64_t v75 = (uint64_t)v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  char v73 = (void *)((char *)v67 - v11);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<SharingIntent?>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  os_log_type_t v71 = (char *)v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)v67 - v17;
  MEMORY[0x270FA5388](v16);
  int v20 = (char *)v67 - v19;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v21((char *)v67 - v19, a1, v12);
  int v22 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v20, v12);
  if (v22 == *MEMORY[0x263F6FA10])
  {
    (*(void (**)(char *, uint64_t))(v13 + 96))(v20, v12);
    outlined init with take of SharingIntent?((uint64_t)v20, (uint64_t)v76);
    specialized closure #1 in closure #1 in StartSharingFlow.executeNeedsShareTargetFlow(with:onIntentReceived:)((uint64_t)v76, a3, a4, a5);
    outlined destroy of SharingResponse?((uint64_t)v76, &demangling cache variable for type metadata for SharingIntent?);
    return;
  }
  if (v22 == *MEMORY[0x263F6FA08])
  {
    (*(void (**)(char *, uint64_t))(v13 + 96))(v20, v12);
    uint64_t v23 = *(void **)v20;
    int v24 = v20[8];
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.default);
    id v26 = v23;
    id v27 = v23;
    BOOL v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      id v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = (void *)swift_slowAlloc();
      *(_DWORD *)id v30 = 138412290;
      id v32 = v23;
      uint64_t v33 = _swift_stdlib_bridgeErrorToNSError();
      v76[0] = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v31 = v33;

      _os_log_impl(&dword_22DD8A000, v28, v29, "PromptGiving: Error during execution of prompt flow: %@", v30, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v31, -1, -1);
      MEMORY[0x230F996F0](v30, -1, -1);
    }
    else
    {
    }
    BOOL v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    BOOL v41 = os_log_type_enabled(v39, v40);
    if (v24)
    {
      if (v41)
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v42 = 0;
        _os_log_impl(&dword_22DD8A000, v39, v40, "PromptGiving: Error already handled - completing flow", v42, 2u);
        MEMORY[0x230F996F0](v42, -1, -1);
      }

      uint64_t v43 = (uint64_t)v73;
      swift_storeEnumTagMultiPayload();
      uint64_t v44 = v74 + *(void *)(*(void *)v74 + 104);
      swift_beginAccess();
      uint64_t v45 = v75;
      outlined init with copy of StartSharingFlow.StartSharingFlowState(v44, v75);
      swift_beginAccess();
    }
    else
    {
      if (v41)
      {
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v50 = 0;
        _os_log_impl(&dword_22DD8A000, v39, v40, "PromptGiving: Error not already handled - transitioning to .failedWithUnknownError state", v50, 2u);
        MEMORY[0x230F996F0](v50, -1, -1);
      }

      uint64_t v43 = (uint64_t)v73;
      uint64_t *v73 = (uint64_t)v23;
      swift_storeEnumTagMultiPayload();
      uint64_t v44 = v74 + *(void *)(*(void *)v74 + 104);
      swift_beginAccess();
      uint64_t v45 = v75;
      outlined init with copy of StartSharingFlow.StartSharingFlowState(v44, v75);
      swift_beginAccess();
      id v51 = v23;
    }
    outlined assign with copy of StartSharingFlow.StartSharingFlowState(v43, v44);
    swift_endAccess();
    specialized SharingFlow.state.didset(v45);
    outlined destroy of StartSharingFlow.StartSharingFlowState(v43);
    outlined destroy of StartSharingFlow.StartSharingFlowState(v45);

    return;
  }
  if (v22 == *MEMORY[0x263F6FA18])
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.default);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v35, v36)) {
      goto LABEL_24;
    }
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v37 = 0;
    os_log_type_t v38 = "PromptGiving: User responded to prompt with 'cancel' - completing flow";
LABEL_23:
    _os_log_impl(&dword_22DD8A000, v35, v36, v38, v37, 2u);
    MEMORY[0x230F996F0](v37, -1, -1);
LABEL_24:

    uint64_t v47 = (uint64_t)v73;
    swift_storeEnumTagMultiPayload();
    uint64_t v48 = v74 + *(void *)(*(void *)v74 + 104);
    swift_beginAccess();
    uint64_t v49 = v75;
    outlined init with copy of StartSharingFlow.StartSharingFlowState(v48, v75);
    swift_beginAccess();
    outlined assign with copy of StartSharingFlow.StartSharingFlowState(v47, v48);
    swift_endAccess();
    specialized SharingFlow.state.didset(v49);
    outlined destroy of StartSharingFlow.StartSharingFlowState(v47);
    outlined destroy of StartSharingFlow.StartSharingFlowState(v49);
    return;
  }
  if (v22 == *MEMORY[0x263F6FA00])
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)static Logger.default);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v35, v36)) {
      goto LABEL_24;
    }
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v37 = 0;
    os_log_type_t v38 = "PromptGiving: User provided no answer to the prompt - completing flow";
    goto LABEL_23;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v52 = type metadata accessor for Logger();
  __swift_project_value_buffer(v52, (uint64_t)static Logger.default);
  v21(v18, a1, v12);
  uint64_t v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v53, v54))
  {
    os_log_t v70 = v53;
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    uint64_t v69 = swift_slowAlloc();
    v76[0] = v69;
    id v68 = v55;
    *(_DWORD *)uint64_t v55 = 136315138;
    v67[1] = v55 + 4;
    uint64_t v56 = v71;
    v21(v71, (uint64_t)v18, v12);
    unsigned int v57 = *(void (**)(char *, uint64_t))(v13 + 8);
    v57(v18, v12);
    lazy protocol witness table accessor for type PromptResult<SharingIntent?> and conformance PromptResult<A>(&lazy protocol witness table cache variable for type PromptResult<SharingIntent?> and conformance PromptResult<A>, &demangling cache variable for type metadata for PromptResult<SharingIntent?>);
    uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v60 = v59;
    v57(v56, v12);
    v76[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v60, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v53 = v70;
    uint64_t v61 = v68;
    _os_log_impl(&dword_22DD8A000, v70, v54, "PromptGiving: PromptForValueFlow exitValue has unknown value %s - add support for it!", v68, 0xCu);
    uint64_t v62 = v69;
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v62, -1, -1);
    MEMORY[0x230F996F0](v61, -1, -1);
  }
  else
  {
    unsigned int v57 = *(void (**)(char *, uint64_t))(v13 + 8);
    v57(v18, v12);
  }

  lazy protocol witness table accessor for type ExpanseError and conformance ExpanseError();
  uint64_t v63 = swift_allocError();
  uint64_t v64 = (uint64_t)v73;
  uint64_t *v73 = v63;
  swift_storeEnumTagMultiPayload();
  uint64_t v65 = v74 + *(void *)(*(void *)v74 + 104);
  swift_beginAccess();
  uint64_t v66 = v75;
  outlined init with copy of StartSharingFlow.StartSharingFlowState(v65, v75);
  swift_beginAccess();
  outlined assign with copy of StartSharingFlow.StartSharingFlowState(v64, v65);
  swift_endAccess();
  specialized SharingFlow.state.didset(v66);
  outlined destroy of StartSharingFlow.StartSharingFlowState(v64);
  outlined destroy of StartSharingFlow.StartSharingFlowState(v66);
  v57(v20, v12);
}

uint64_t outlined init with copy of StartSharingFlow.StartSharingFlowState(uint64_t a1, uint64_t a2)
{
  uint64_t started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 16))(a2, a1, started);
  return a2;
}

uint64_t outlined assign with copy of StartSharingFlow.StartSharingFlowState(uint64_t a1, uint64_t a2)
{
  uint64_t started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 24))(a2, a1, started);
  return a2;
}

uint64_t outlined destroy of StartSharingFlow.StartSharingFlowState(uint64_t a1)
{
  uint64_t started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(started - 8) + 8))(a1, started);
  return a1;
}

uint64_t outlined retain of StartSharingConfirmationFlow.State(uint64_t a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t lazy protocol witness table accessor for type PromptResult<SharingIntent?> and conformance PromptResult<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of ConfirmationResponse?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ConfirmScreenShareOrMessageSendFlowStrategy.Decision.description.getter()
{
  outlined init with copy of ConfirmScreenShareOrMessageSendFlowStrategy.Decision(v0, (uint64_t)&v6);
  if (!v7) {
    return 0x436E496572616873;
  }
  if (v7 == 1) {
    return 0x4D616956646E6573;
  }
  outlined init with take of SharingIntent(&v6, (uint64_t)v5);
  _StringGuts.grow(_:)(19);
  v2._object = (void *)0x800000022DDEBA80;
  v2._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v2);
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  uint64_t v1 = 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  return v1;
}

uint64_t ConfirmScreenShareOrMessageSendFlowStrategy.actionForIntent(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v5 + 216))(v4, v5))
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.default);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(void *)&v33[0] = v10;
      *(_DWORD *)uint64_t v9 = 136315138;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v11 = static ConfirmScreenShareOrMessageSendFlowStrategy.typeName;
      unint64_t v12 = *(void *)algn_2685B80A8;
      swift_bridgeObjectRetain();
      v32[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, (uint64_t *)v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v7, v8, "%s: User has opted to send via messages.", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v10, -1, -1);
      MEMORY[0x230F996F0](v9, -1, -1);
    }

    memset(v33, 0, 24);
    *(long long *)((char *)&v33[1] + 8) = xmmword_22DDE9890;
  }
  else
  {
    uint64_t v13 = a1[3];
    uint64_t v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    switch((*(unsigned __int8 (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14))
    {
      case 1u:
      case 2u:
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v15 & 1) == 0) {
          goto LABEL_19;
        }
        goto LABEL_12;
      case 3u:
LABEL_19:
        if (one-time initialization token for default != -1) {
          swift_once();
        }
        uint64_t v23 = type metadata accessor for Logger();
        __swift_project_value_buffer(v23, (uint64_t)static Logger.default);
        int v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v24, v25))
        {
          id v26 = (uint8_t *)swift_slowAlloc();
          uint64_t v27 = swift_slowAlloc();
          *(void *)&v33[0] = v27;
          *(_DWORD *)id v26 = 136315138;
          if (one-time initialization token for typeName != -1) {
            swift_once();
          }
          uint64_t v28 = static ConfirmScreenShareOrMessageSendFlowStrategy.typeName;
          unint64_t v29 = *(void *)algn_2685B80A8;
          swift_bridgeObjectRetain();
          v32[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, (uint64_t *)v33);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_22DD8A000, v24, v25, "%s: The user did not directly answer the prompt, but responded with a new sharing intent.", v26, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x230F996F0](v27, -1, -1);
          MEMORY[0x230F996F0](v26, -1, -1);
        }

        outlined init with copy of ResponseExecuting((uint64_t)a1, (uint64_t)v33);
        break;
      default:
        swift_bridgeObjectRelease();
LABEL_12:
        if (one-time initialization token for default != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        __swift_project_value_buffer(v16, (uint64_t)static Logger.default);
        uint64_t v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v17, v18))
        {
          uint64_t v19 = (uint8_t *)swift_slowAlloc();
          uint64_t v20 = swift_slowAlloc();
          *(void *)&v33[0] = v20;
          *(_DWORD *)uint64_t v19 = 136315138;
          if (one-time initialization token for typeName != -1) {
            swift_once();
          }
          uint64_t v21 = static ConfirmScreenShareOrMessageSendFlowStrategy.typeName;
          unint64_t v22 = *(void *)algn_2685B80A8;
          swift_bridgeObjectRetain();
          v32[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, (uint64_t *)v33);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_22DD8A000, v17, v18, "%s: User has opted to share in call.", v19, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x230F996F0](v20, -1, -1);
          MEMORY[0x230F996F0](v19, -1, -1);
        }

        memset(v33, 0, 40);
        break;
    }
  }
  outlined init with copy of ConfirmScreenShareOrMessageSendFlowStrategy.Decision(v33, (uint64_t)v32);
  outlined init with take of ConfirmScreenShareOrMessageSendFlowStrategy.Decision?((uint64_t)v32, (uint64_t)v31);
  swift_beginAccess();
  outlined assign with take of ConfirmScreenShareOrMessageSendFlowStrategy.Decision?((uint64_t)v31, v2 + 136);
  swift_endAccess();
  static ActionForInput.handle()();
  return outlined destroy of ConfirmScreenShareOrMessageSendFlowStrategy.Decision((uint64_t)v33);
}

uint64_t ConfirmScreenShareOrMessageSendFlowStrategy.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of SharingResponse?(v0 + 56, &demangling cache variable for type metadata for SharingResponse?);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  outlined destroy of SharingResponse?(v0 + 136, &demangling cache variable for type metadata for ConfirmScreenShareOrMessageSendFlowStrategy.Decision?);

  return MEMORY[0x270FA0228](v0, 176, 7);
}

uint64_t type metadata accessor for ConfirmScreenShareOrMessageSendFlowStrategy()
{
  return self;
}

uint64_t destroy for ConfirmScreenShareOrMessageSendFlowStrategy.Decision(uint64_t a1)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for ConfirmScreenShareOrMessageSendFlowStrategy.Decision(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  return a1;
}

uint64_t assignWithCopy for ConfirmScreenShareOrMessageSendFlowStrategy.Decision(uint64_t a1, long long *a2)
{
  unint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t assignWithTake for ConfirmScreenShareOrMessageSendFlowStrategy.Decision(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmScreenShareOrMessageSendFlowStrategy.Decision(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ConfirmScreenShareOrMessageSendFlowStrategy.Decision(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

uint64_t getEnumTag for ConfirmScreenShareOrMessageSendFlowStrategy.Decision(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double destructiveInjectEnumTag for ConfirmScreenShareOrMessageSendFlowStrategy.Decision(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 24) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmScreenShareOrMessageSendFlowStrategy.Decision()
{
  return &type metadata for ConfirmScreenShareOrMessageSendFlowStrategy.Decision;
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.actionForInput(_:) in conformance ConfirmScreenShareOrMessageSendFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return SharingYesNoPromptFlowStrategy.actionForInput(_:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance ConfirmScreenShareOrMessageSendFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized SharingPromptFlowStrategy.parseResponse(input:)
                                                + async function pointer to specialized SharingPromptFlowStrategy.parseResponse(input:));
  unsigned int v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unsigned int v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance NeedsShareTargetFlowStrategy;
  return v7(a1, a2);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makePromptForValue() in conformance ConfirmScreenShareOrMessageSendFlowStrategy(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable();
  *unsigned int v5 = v2;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.parseResponse(input:);
  return SharingYesNoPromptFlowStrategy.makePromptForYesNoResponse()(a1, a2, WitnessTable);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ConfirmScreenShareOrMessageSendFlowStrategy(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable();
  *unsigned int v5 = v2;
  v5[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return SharingYesNoPromptFlowStrategy.makeFlowCancelledResponse()(a1, a2, WitnessTable);
}

uint64_t protocol witness for SharingPromptFlowStrategy.actionForIntent(_:) in conformance ConfirmScreenShareOrMessageSendFlowStrategy(void *a1)
{
  return ConfirmScreenShareOrMessageSendFlowStrategy.actionForIntent(_:)(a1);
}

unint64_t instantiation function for generic protocol witness table for ConfirmScreenShareOrMessageSendFlowStrategy(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ConfirmScreenShareOrMessageSendFlowStrategy and conformance ConfirmScreenShareOrMessageSendFlowStrategy();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ConfirmScreenShareOrMessageSendFlowStrategy and conformance ConfirmScreenShareOrMessageSendFlowStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type ConfirmScreenShareOrMessageSendFlowStrategy and conformance ConfirmScreenShareOrMessageSendFlowStrategy;
  if (!lazy protocol witness table cache variable for type ConfirmScreenShareOrMessageSendFlowStrategy and conformance ConfirmScreenShareOrMessageSendFlowStrategy)
  {
    type metadata accessor for ConfirmScreenShareOrMessageSendFlowStrategy();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmScreenShareOrMessageSendFlowStrategy and conformance ConfirmScreenShareOrMessageSendFlowStrategy);
  }
  return result;
}

uint64_t outlined init with copy of ConfirmScreenShareOrMessageSendFlowStrategy.Decision(long long *a1, uint64_t a2)
{
  unint64_t v3 = *((void *)a1 + 3);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *a1;
    long long v6 = a1[1];
    *(void *)(a2 + 32) = *((void *)a1 + 4);
    *(_OWORD *)a2 = v5;
    *(_OWORD *)(a2 + 16) = v6;
  }
  else
  {
    uint64_t v4 = *((void *)a1 + 4);
    *(void *)(a2 + 24) = v3;
    *(void *)(a2 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a2);
  }
  return a2;
}

uint64_t outlined init with take of ConfirmScreenShareOrMessageSendFlowStrategy.Decision?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmScreenShareOrMessageSendFlowStrategy.Decision?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ConfirmScreenShareOrMessageSendFlowStrategy.Decision?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmScreenShareOrMessageSendFlowStrategy.Decision?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ConfirmScreenShareOrMessageSendFlowStrategy.Decision(uint64_t a1)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t dispatch thunk of ResponseExecuting.execute(response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 8) + **(int **)(a4 + 8));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of ExpanseFlowProviding.findFlowFor(parse:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t type metadata accessor for ButtonLabelsCATsSimple()
{
  uint64_t result = type metadata singleton initialization cache for ButtonLabelsCATsSimple;
  if (!type metadata singleton initialization cache for ButtonLabelsCATsSimple) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ButtonLabelsCATsSimple()
{
  return swift_initClassMetadata2();
}

uint64_t ButtonLabelsCATsSimple.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject();
  outlined init with copy of URL?(a1, (uint64_t)v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v11 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of URL?(a1);
  return v11;
}

uint64_t ButtonLabelsCATsSimple.__allocating_init(useResponseMode:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for CATOption();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a2, v3);
  uint64_t v7 = CATWrapperSimple.init(useResponseMode:options:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a2, v3);
  return v7;
}

uint64_t ObjC metadata update function for ButtonLabelsCATsSimple()
{
  return type metadata accessor for ButtonLabelsCATsSimple();
}

ValueMetadata *type metadata accessor for ShareTargetResolver()
{
  return &type metadata for ShareTargetResolver;
}

uint64_t specialized ShareTargetResolver.resolveShareTargetForStopSharing(target:call:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a2;
  return MEMORY[0x270FA2498](specialized ShareTargetResolver.resolveShareTargetForStopSharing(target:call:), 0, 0);
}

uint64_t specialized ShareTargetResolver.resolveShareTargetForStopSharing(target:call:)()
{
  unint64_t v1 = *(void **)(v0 + 24);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 64))(v2, v3);
  if ((unint64_t)(v5 - 1) >= 4)
  {
    outlined consume of ShareSession?(v4, v5);
    LOBYTE(v6) = 2;
  }
  else
  {
    unsigned int v6 = 0x30101u >> (8 * (v5 - 1));
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7(v6);
}

uint64_t specialized ShareTargetResolver.resolveAppTargetForStartSharing(_:_:errorHandler:)(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(v3 + 40) = a3;
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = a2;
  return MEMORY[0x270FA2498](specialized ShareTargetResolver.resolveAppTargetForStartSharing(_:_:errorHandler:), 0, 0);
}

uint64_t specialized ShareTargetResolver.resolveAppTargetForStartSharing(_:_:errorHandler:)()
{
  uint64_t v31 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.default);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    v30[0] = v27;
    *(_DWORD *)uint64_t v4 = 136315394;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    unint64_t v5 = *(void *)(v0 + 32);
    uint64_t v25 = *(void *)(v0 + 24);
    uint64_t v6 = static ShareTargetResolver.typeName;
    unint64_t v7 = unk_2685B8110;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v5, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_22DD8A000, v2, v3, "%s: Share target is the app: %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v27, -1, -1);
    MEMORY[0x230F996F0](v4, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  uint64_t v9 = *(void *)(v0 + 24);
  uint64_t v8 = *(void *)(v0 + 32);
  objc_allocWithZone(MEMORY[0x263F01878]);
  swift_bridgeObjectRetain();
  id v22 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v9, v8, 0);

  if (v22)
  {
    uint64_t v21 = *(unsigned __int8 *)(v0 + 40);
    unint64_t v13 = *(void *)(v0 + 32);
    swift_bridgeObjectRetain();
    uint64_t v12 = *(void *)(v0 + 24);
  }
  else
  {
    uint64_t v10 = String.localizedAppDisplayName.getter();
    if (v11) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = 0;
    }
    if (v11) {
      unint64_t v13 = v11;
    }
    else {
      unint64_t v13 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      os_log_type_t v28 = v15;
      uint64_t v29 = v12;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      v30[0] = v26;
      *(_DWORD *)uint64_t v16 = 136315650;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v18 = *(void *)(v0 + 24);
      unint64_t v17 = *(void *)(v0 + 32);
      uint64_t v20 = static ShareTargetResolver.typeName;
      unint64_t v19 = unk_2685B8110;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v16 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v12 = v29;
      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v13, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_22DD8A000, v14, v28, "%s: Share target is an uninstalled app appBundleID=%s appName=%s", (uint8_t *)v16, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v26, -1, -1);
      MEMORY[0x230F996F0](v16, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    uint64_t v21 = 256;
  }
  uint64_t v23 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v0 + 8);
  return v23(v12, v13, v21);
}

uint64_t specialized ShareTargetResolver.resolveShareTargetForStartSharing(target:)(uint64_t a1)
{
  v1[8] = a1;
  v1[9] = type metadata accessor for ShareTarget();
  v1[10] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized ShareTargetResolver.resolveShareTargetForStartSharing(target:), 0, 0);
}

uint64_t specialized ShareTargetResolver.resolveShareTargetForStartSharing(target:)()
{
  uint64_t v53 = v0;
  outlined init with copy of ShareTarget(v0[8], v0[10]);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      swift_bridgeObjectRelease();
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Logger.default);
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v9, v10))
      {

        goto LABEL_39;
      }
      unint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v52 = v12;
      *(_DWORD *)unint64_t v11 = 136315138;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v13 = static ShareTargetResolver.typeName;
      unint64_t v14 = unk_2685B8110;
      swift_bridgeObjectRetain();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v9, v10, "%s: Reference resolution is unsupported on the current platform.", v11, 0xCu);
      int v15 = 1;
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v12, -1, -1);
      MEMORY[0x230F996F0](v11, -1, -1);

      uint64_t v16 = 0;
      unint64_t v17 = 0;
      int v18 = 0;
      goto LABEL_42;
    case 2u:
      unint64_t v19 = (uint64_t *)v0[10];
      uint64_t v16 = *v19;
      unint64_t v17 = v19[1];
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Logger.default);
      swift_bridgeObjectRetain_n();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v21, v22))
      {
        log = v21;
        uint64_t v23 = swift_slowAlloc();
        uint64_t v50 = swift_slowAlloc();
        uint64_t v52 = v50;
        *(_DWORD *)uint64_t v23 = 136315394;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v25 = static ShareTargetResolver.typeName;
        unint64_t v24 = unk_2685B8110;
        swift_bridgeObjectRetain();
        v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v23 + 12) = 2080;
        swift_bridgeObjectRetain();
        v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        uint64_t v21 = log;
        _os_log_impl(&dword_22DD8A000, log, v22, "%s: Share target is an uninstalled app '%s' - resolving immediately with unsupported", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v50, -1, -1);
        MEMORY[0x230F996F0](v23, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      int v15 = 0;
      int v18 = 256;
      goto LABEL_42;
    case 3u:
      uint64_t v26 = (uint64_t *)v0[10];
      uint64_t v28 = *v26;
      uint64_t v27 = v26[1];
      v0[11] = v27;
      char v29 = *((unsigned char *)v26 + 16);
      uint64_t v30 = swift_task_alloc();
      v0[12] = v30;
      *(void *)uint64_t v30 = v0;
      *(void *)(v30 + 8) = specialized ShareTargetResolver.resolveShareTargetForStartSharing(target:);
      *(unsigned char *)(v30 + 40) = v29;
      *(void *)(v30 + 24) = v28;
      *(void *)(v30 + 32) = v27;
      return MEMORY[0x270FA2498](specialized ShareTargetResolver.resolveAppTargetForStartSharing(_:_:errorHandler:), 0, 0);
    case 4u:
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      __swift_project_value_buffer(v31, (uint64_t)static Logger.default);
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        uint64_t v35 = swift_slowAlloc();
        uint64_t v52 = v35;
        *(_DWORD *)uint64_t v34 = 136315138;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v36 = static ShareTargetResolver.typeName;
        unint64_t v37 = unk_2685B8110;
        swift_bridgeObjectRetain();
        v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22DD8A000, v32, v33, "%s: Share target is the screen - resolving immediately with success", v34, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v35, -1, -1);
        MEMORY[0x230F996F0](v34, -1, -1);
      }

      uint64_t v16 = 0;
      unint64_t v17 = 0;
      int v18 = 0;
      int v15 = 0;
      goto LABEL_42;
    case 5u:
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      __swift_project_value_buffer(v38, (uint64_t)static Logger.default);
      BOOL v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v39, v40))
      {
        BOOL v41 = (uint8_t *)swift_slowAlloc();
        uint64_t v42 = swift_slowAlloc();
        uint64_t v52 = v42;
        *(_DWORD *)BOOL v41 = 136315138;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v43 = static ShareTargetResolver.typeName;
        unint64_t v44 = unk_2685B8110;
        swift_bridgeObjectRetain();
        v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22DD8A000, v39, v40, "%s: No target provided - resolving with needsValue", v41, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v42, -1, -1);
        MEMORY[0x230F996F0](v41, -1, -1);
      }

      uint64_t v16 = 0;
      unint64_t v17 = 0;
      int v15 = 0;
      int v18 = 512;
      goto LABEL_42;
    default:
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v1 = type metadata accessor for Logger();
      __swift_project_value_buffer(v1, (uint64_t)static Logger.default);
      uint64_t v2 = Logger.logObject.getter();
      os_log_type_t v3 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v2, v3))
      {
        uint64_t v4 = (uint8_t *)swift_slowAlloc();
        uint64_t v5 = swift_slowAlloc();
        uint64_t v52 = v5;
        *(_DWORD *)uint64_t v4 = 136315138;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v7 = static ShareTargetResolver.typeName;
        unint64_t v6 = unk_2685B8110;
        swift_bridgeObjectRetain();
        v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22DD8A000, v2, v3, "%s: Reference resolution is unsupported on the current platform.", v4, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v5, -1, -1);
        MEMORY[0x230F996F0](v4, -1, -1);
      }
      swift_release();

      uint64_t v45 = v0[10];
      uint64_t v46 = v45
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                   + 48);
      uint64_t v47 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v47 - 8) + 8))(v46, v47);
LABEL_39:
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      int v18 = 0;
      int v15 = 1;
LABEL_42:
      swift_task_dealloc();
      uint64_t v48 = (uint64_t (*)(uint64_t, unint64_t, void))v0[1];
      return v48(v16, v17, v18 | (v15 << 16));
  }
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, void);
  uint64_t v6;

  uint64_t v1 = *(_DWORD *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 104);
  os_log_type_t v3 = *(void *)(v0 + 112);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, void))(v0 + 8);
  return v4(v2, v3, v1 & 0x1FFFF);
}

uint64_t specialized ShareTargetResolver.resolveShareTargetForStartSharing(target:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *v3;
  *(void *)(v4 + 104) = a1;
  *(void *)(v4 + 112) = a2;
  *(_DWORD *)(v4 + 120) = a3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](specialized ShareTargetResolver.resolveShareTargetForStartSharing(target:), 0, 0);
}

uint64_t dispatch thunk of ContactFinding.findMatches(queries:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = v9;
    do
    {
      swift_bridgeObjectRetain_n();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Match<Contact, ContactResolver.SignalSet>]);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Contact]);
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v9;
      }
      unint64_t v6 = *(void *)(v2 + 16);
      unint64_t v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v9;
      }
      *(void *)(v2 + 16) = v6 + 1;
      *(void *)(v2 + 8 * v6 + 32) = v8;
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2) {
    return v3;
  }
  uint64_t v17 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = v17;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = MEMORY[0x230F98F30](v5, a1);
        uint64_t v17 = v3;
        unint64_t v8 = *(void *)(v3 + 16);
        unint64_t v7 = *(void *)(v3 + 24);
        if (v8 >= v7 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
          uint64_t v3 = v17;
        }
        ++v5;
        unint64_t v15 = type metadata accessor for TUConversationParticipant();
        uint64_t v16 = &protocol witness table for TUConversationParticipant;
        *(void *)&long long v14 = v6;
        *(void *)(v3 + 16) = v8 + 1;
        outlined init with take of SharingIntent(&v14, v3 + 40 * v8 + 32);
      }
      while (v2 != v5);
    }
    else
    {
      uint64_t v9 = (void **)(a1 + 32);
      do
      {
        os_log_type_t v10 = *v9;
        uint64_t v17 = v3;
        unint64_t v11 = *(void *)(v3 + 16);
        unint64_t v12 = *(void *)(v3 + 24);
        id v13 = v10;
        if (v11 >= v12 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v11 + 1, 1);
          uint64_t v3 = v17;
        }
        unint64_t v15 = type metadata accessor for TUConversationParticipant();
        uint64_t v16 = &protocol witness table for TUConversationParticipant;
        *(void *)&long long v14 = v13;
        *(void *)(v3 + 16) = v11 + 1;
        outlined init with take of SharingIntent(&v14, v3 + 40 * v11 + 32);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

char *ContactResolver.findMatches(queries:)(uint64_t a1)
{
  uint64_t v19 = a1;
  uint64_t v18 = type metadata accessor for RecommenderType();
  uint64_t v1 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SearchSuggestedContacts();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ContactResolverDomain();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v9 = type metadata accessor for Locale();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v17 = type metadata accessor for ContactResolverConfig();
  uint64_t v10 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  unint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Locale.current.getter();
  static ContactResolverDomain.all.getter();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F6D438], v4);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F6D3E0], v18);
  ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:recommender:customGenerator:)();
  uint64_t v13 = v20;
  uint64_t v14 = dispatch thunk of ContactResolver.findMatches(queries:config:)();
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v17);
  }
  else
  {
    uint64_t v15 = v14;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v17);
    unint64_t v12 = (char *)specialized _arrayForceCast<A, B>(_:)(v15);
    swift_bridgeObjectRelease();
  }
  return v12;
}

unint64_t type metadata accessor for TUConversationParticipant()
{
  unint64_t result = lazy cache variable for type metadata for TUConversationParticipant;
  if (!lazy cache variable for type metadata for TUConversationParticipant)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  }
  return result;
}

unint64_t StartSharingFlow.StartSharingFlowState.description.getter()
{
  uint64_t v1 = type metadata accessor for ShareTarget();
  uint64_t v2 = MEMORY[0x270FA5388](v1 - 8);
  uint64_t v4 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v69 - v5;
  uint64_t started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  uint64_t v8 = MEMORY[0x270FA5388](started);
  uint64_t v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v69 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (uint64_t *)((char *)&v69 - v14);
  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v0, (uint64_t)&v69 - v14, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  unint64_t v16 = 0x696C616974696E69;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v25 = *v15;
      unint64_t v71 = 0;
      unint64_t v72 = 0xE000000000000000;
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      uint64_t v26 = "reformingIntent(needsValueCount: ";
      unint64_t v27 = 0xD000000000000021;
      goto LABEL_6;
    case 2u:
      uint64_t v25 = *v15;
      unint64_t v71 = 0;
      unint64_t v72 = 0xE000000000000000;
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      uint64_t v26 = "validatingIntent(needsValueCount: ";
      unint64_t v27 = 0xD000000000000022;
      goto LABEL_6;
    case 3u:
      uint64_t v25 = *v15;
      unint64_t v71 = 0;
      unint64_t v72 = 0xE000000000000000;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      uint64_t v26 = "validatingRecipients(needsValueCount: ";
      unint64_t v27 = 0xD000000000000026;
LABEL_6:
      unint64_t v71 = v27;
      unint64_t v72 = (unint64_t)(v26 - 32) | 0x8000000000000000;
      uint64_t v70 = v25;
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      goto LABEL_29;
    case 4u:
      uint64_t v30 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ShareTarget, recipients: PermittedRecipients, needsValueCount: Int, isShareInCallRequest: Bool));
      uint64_t v31 = *(uint64_t *)((char *)v15 + v30[12]);
      uint64_t v32 = *(uint64_t *)((char *)v15 + v30[16]);
      int v33 = *((unsigned __int8 *)v15 + v30[20]);
      outlined init with take of ShareTarget((uint64_t)v15, (uint64_t)v6);
      unint64_t v71 = 0;
      unint64_t v72 = 0xE000000000000000;
      _StringGuts.grow(_:)(82);
      v34._object = (void *)0x800000022DDEBC50;
      v34._countAndFlagsBits = 0xD000000000000010;
      String.append(_:)(v34);
      v35._countAndFlagsBits = ShareTarget.description.getter();
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      v36._countAndFlagsBits = 0x697069636572202CLL;
      v36._object = (void *)0xEE00203A73746E65;
      String.append(_:)(v36);
      v37._countAndFlagsBits = PermittedRecipients.description.getter(v31);
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v38._countAndFlagsBits = 0xD000000000000013;
      v38._object = (void *)0x800000022DDEBC70;
      String.append(_:)(v38);
      uint64_t v70 = v32;
      v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      v40._countAndFlagsBits = 0xD000000000000018;
      v40._object = (void *)0x800000022DDEBC90;
      String.append(_:)(v40);
      if (v33) {
        uint64_t v41 = 1702195828;
      }
      else {
        uint64_t v41 = 0x65736C6166;
      }
      if (v33) {
        unint64_t v42 = 0xE400000000000000;
      }
      else {
        unint64_t v42 = 0xE500000000000000;
      }
      unint64_t v43 = v42;
      String.append(_:)(*(Swift::String *)&v41);
      swift_bridgeObjectRelease();
      v44._countAndFlagsBits = 41;
      v44._object = (void *)0xE100000000000000;
      String.append(_:)(v44);
      unint64_t v16 = v71;
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ShareTarget);
      return v16;
    case 5u:
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (requestedTarget: ShareTarget, resolvedTarget: ResolvedShareTarget, recipients: PermittedRecipients));
      uint64_t v46 = (char *)v15 + *(int *)(v45 + 48);
      uint64_t v48 = *(void *)v46;
      uint64_t v47 = (void *)*((void *)v46 + 1);
      uint64_t v49 = *(uint64_t *)((char *)v15 + *(int *)(v45 + 64));
      char v50 = v46[16];
      outlined init with take of ShareTarget((uint64_t)v15, (uint64_t)v4);
      unint64_t v71 = 0;
      unint64_t v72 = 0xE000000000000000;
      _StringGuts.grow(_:)(73);
      v51._countAndFlagsBits = 0xD000000000000022;
      v51._object = (void *)0x800000022DDEBC00;
      String.append(_:)(v51);
      v52._countAndFlagsBits = ShareTarget.description.getter();
      String.append(_:)(v52);
      swift_bridgeObjectRelease();
      v53._countAndFlagsBits = 0xD000000000000012;
      v53._object = (void *)0x800000022DDEBC30;
      String.append(_:)(v53);
      v54._countAndFlagsBits = ResolvedShareTarget.description.getter(v48, v47, v50);
      String.append(_:)(v54);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v55._countAndFlagsBits = 0x697069636572202CLL;
      v55._object = (void *)0xEE00203A73746E65;
      String.append(_:)(v55);
      v56._countAndFlagsBits = PermittedRecipients.description.getter(v49);
      String.append(_:)(v56);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v57._countAndFlagsBits = 41;
      v57._object = (void *)0xE100000000000000;
      String.append(_:)(v57);
      unint64_t v16 = v71;
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ShareTarget);
      return v16;
    case 6u:
      uint64_t v58 = *v15;
      unint64_t v59 = (void *)v15[1];
      unint64_t v71 = 0;
      unint64_t v72 = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      unint64_t v71 = 0xD00000000000001CLL;
      unint64_t v72 = 0x800000022DDEBB60;
      v60._countAndFlagsBits = StartSharingFlow.StartSharingFlowError.description.getter(v58, v59);
      String.append(_:)(v60);
      swift_bridgeObjectRelease();
      outlined consume of StartSharingFlow.StartSharingFlowError(v58, (unint64_t)v59);
      goto LABEL_30;
    case 7u:
      uint64_t v61 = *(unsigned __int8 *)v15;
      unint64_t v71 = 0;
      unint64_t v72 = 0xE000000000000000;
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      unint64_t v71 = 0xD000000000000016;
      unint64_t v72 = 0x800000022DDEBB40;
      unint64_t v62 = 0xEA0000000000646CLL;
      uint64_t v28 = 0x6F486E4F6C6C6163;
      switch(v61)
      {
        case 1:
          unint64_t v62 = 0x800000022DDEA5F0;
          uint64_t v28 = 0xD000000000000010;
          break;
        case 2:
          unint64_t v62 = 0xE90000000000006CLL;
          uint64_t v28 = 0x6C61436E49746F6ELL;
          break;
        case 3:
          uint64_t v28 = 0xD000000000000014;
          uint64_t v66 = "sharePlayUnsupported";
          goto LABEL_27;
        case 4:
          uint64_t v28 = 0xD000000000000012;
          uint64_t v66 = "sharingUnsupported";
LABEL_27:
          unint64_t v62 = (unint64_t)(v66 - 32) | 0x8000000000000000;
          break;
        default:
          break;
      }
      unint64_t v29 = v62;
LABEL_29:
      String.append(_:)(*(Swift::String *)&v28);
      swift_bridgeObjectRelease();
LABEL_30:
      v67._countAndFlagsBits = 41;
      v67._object = (void *)0xE100000000000000;
      String.append(_:)(v67);
      goto LABEL_31;
    case 8u:
      uint64_t v63 = (void *)*v15;
      unint64_t v71 = 0;
      unint64_t v72 = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      v64._countAndFlagsBits = 0xD000000000000017;
      v64._object = (void *)0x800000022DDEADB0;
      String.append(_:)(v64);
      uint64_t v70 = (uint64_t)v63;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      _print_unlocked<A, B>(_:_:)();
      v65._countAndFlagsBits = 41;
      v65._object = (void *)0xE100000000000000;
      String.append(_:)(v65);

LABEL_31:
      unint64_t v16 = v71;
      break;
    case 9u:
      return v16;
    case 0xAu:
      unint64_t v71 = 0;
      unint64_t v72 = 0xE000000000000000;
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      unint64_t v16 = 0xD000000000000033;
      break;
    case 0xBu:
      unint64_t v71 = 0;
      unint64_t v72 = 0xE000000000000000;
      _StringGuts.grow(_:)(28);
      swift_bridgeObjectRelease();
      unint64_t v16 = 0xD000000000000036;
      break;
    case 0xCu:
      unint64_t v16 = 0x4D616956646E6573;
      break;
    case 0xDu:
      unint64_t v16 = 0xD000000000000010;
      break;
    default:
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (validationPassState: StartSharingFlow.StartSharingFlowState, validationFailFallbackState: StartSharingFlow.StartSharingFlowState));
      uint64_t v18 = swift_projectBox();
      uint64_t v19 = v18 + *(int *)(v17 + 48);
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v18, (uint64_t)v13, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v19, (uint64_t)v10, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      unint64_t v71 = 0;
      unint64_t v72 = 0xE000000000000000;
      _StringGuts.grow(_:)(78);
      v20._countAndFlagsBits = 0xD00000000000002ALL;
      v20._object = (void *)0x800000022DDEBD40;
      String.append(_:)(v20);
      v21._countAndFlagsBits = StartSharingFlow.StartSharingFlowState.description.getter();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22._countAndFlagsBits = 0xD00000000000001FLL;
      v22._object = (void *)0x800000022DDEBD70;
      String.append(_:)(v22);
      v23._countAndFlagsBits = StartSharingFlow.StartSharingFlowState.description.getter();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24._countAndFlagsBits = 41;
      v24._object = (void *)0xE100000000000000;
      String.append(_:)(v24);
      unint64_t v16 = v71;
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0((uint64_t)v10, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0((uint64_t)v13, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      swift_release();
      break;
  }
  return v16;
}

unint64_t StartSharingFlow.StartSharingFlowError.description.getter(uint64_t a1, void *a2)
{
  if (a2)
  {
    if (a2 == (void *)1)
    {
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      return 0xD000000000000031;
    }
    else if (a2 == (void *)2)
    {
      return 0xD00000000000001ELL;
    }
    else
    {
      _StringGuts.grow(_:)(28);
      swift_bridgeObjectRelease();
      v5._countAndFlagsBits = a1;
      v5._object = a2;
      String.append(_:)(v5);
      v6._countAndFlagsBits = 41;
      v6._object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      return 0xD000000000000019;
    }
  }
  else
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    return 0xD000000000000032;
  }
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance StartSharingFlow.StartSharingFlowError()
{
  return StartSharingFlow.StartSharingFlowError.description.getter(*(void *)v0, *(void **)(v0 + 8));
}

uint64_t StartSharingFlow.exitValue.getter@<X0>(char *a1@<X8>)
{
  uint64_t started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  MEMORY[0x270FA5388](started);
  Swift::String v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1 + *(void *)(*(void *)v1 + 104);
  swift_beginAccess();
  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v6, (uint64_t)v5, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 12)
  {
    char v8 = 1;
  }
  else
  {
    uint64_t result = _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0((uint64_t)v5, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    char v8 = 0;
  }
  *a1 = v8;
  return result;
}

uint64_t StartSharingFlow.on(input:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  Swift::String v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v17 = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v11 = static StartSharingFlow.typeName;
    unint64_t v12 = *(void *)algn_2685B8148;
    swift_bridgeObjectRetain();
    uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    lazy protocol witness table accessor for type StartSharingFlow.StartSharingFlowState and conformance StartSharingFlow.StartSharingFlowState((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, MEMORY[0x263F6FF40]);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    _os_log_impl(&dword_22DD8A000, v7, v8, "%s: received input %s - this flow should never receive input, ignoring it...", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v10, -1, -1);
    MEMORY[0x230F996F0](v9, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  return 0;
}

uint64_t StartSharingFlow.execute()(uint64_t a1)
{
  v2[65] = v1;
  v2[64] = a1;
  v2[66] = *v1;
  type metadata accessor for ShareTarget();
  v2[67] = swift_task_alloc();
  v2[68] = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  v2[69] = swift_task_alloc();
  v2[70] = swift_task_alloc();
  v2[71] = swift_task_alloc();
  return MEMORY[0x270FA2498](StartSharingFlow.execute(), 0, 0);
}

uint64_t StartSharingFlow.execute()()
{
  uint64_t v137 = v0;
  uint64_t v127 = (uint64_t *)(v0 + 56);
  uint64_t v124 = (void *)(v0 + 96);
  v125 = (long long *)(v0 + 176);
  uint64_t v1 = *(void *)(v0 + 568);
  uint64_t v2 = *(void *)(v0 + 520) + *(void *)(**(void **)(v0 + 520) + 104);
  swift_beginAccess();
  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v2, v1, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v8 = **(void **)(v0 + 568);
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.default);
      swift_retain_n();
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v10, v11))
      {
        os_log_type_t v128 = v11;
        uint64_t v130 = v8;
        uint64_t v12 = swift_slowAlloc();
        uint64_t v126 = swift_slowAlloc();
        uint64_t v136 = v126;
        *(_DWORD *)uint64_t v12 = 136315394;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v13 = *(void *)(v0 + 520);
        uint64_t v15 = static StartSharingFlow.typeName;
        unint64_t v14 = *(void *)algn_2685B8148;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 472) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, &v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v12 + 12) = 2080;
        uint64_t v16 = v13 + *(void *)(*(void *)v13 + 112);
        swift_beginAccess();
        outlined init with copy of ResponseExecuting(v16, v0 + 16);
        __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
        uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v19 = v18;
        __swift_destroy_boxed_opaque_existential_1(v0 + 16);
        *(void *)(v0 + 496) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22DD8A000, v10, v128, "%s: Intent before reformation: %s", (uint8_t *)v12, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v126, -1, -1);
        MEMORY[0x230F996F0](v12, -1, -1);

        uint64_t v8 = v130;
      }
      else
      {

        swift_release_n();
      }
      uint64_t v99 = *(void *)(v0 + 520) + *(void *)(**(void **)(v0 + 520) + 112);
      swift_beginAccess();
      uint64_t v100 = *(void *)(v99 + 24);
      uint64_t v101 = *(void *)(v99 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v99, v100);
      LOBYTE(v100) = (*(uint64_t (**)(uint64_t, uint64_t))(v101 + 232))(v100, v101);
      uint64_t v102 = swift_endAccess();
      specialized SharingFlow.intent.didset(v102);
      if (v100)
      {
        swift_retain_n();
        uint64_t v103 = Logger.logObject.getter();
        os_log_type_t v104 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v103, v104))
        {
          uint64_t v132 = v8;
          uint64_t v105 = swift_slowAlloc();
          uint64_t v106 = swift_slowAlloc();
          uint64_t v136 = v106;
          *(_DWORD *)uint64_t v105 = 136315394;
          if (one-time initialization token for typeName != -1) {
            swift_once();
          }
          uint64_t v108 = static StartSharingFlow.typeName;
          unint64_t v107 = *(void *)algn_2685B8148;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 448) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v108, v107, &v136);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v105 + 12) = 2080;
          outlined init with copy of ResponseExecuting(v99, (uint64_t)v124);
          __swift_project_boxed_opaque_existential_1(v124, *(void *)(v0 + 120));
          uint64_t v109 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v111 = v110;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v124);
          *(void *)(v0 + 464) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v111, &v136);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_22DD8A000, v103, v104, "%s: Intent after reformation: %s", (uint8_t *)v105, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x230F996F0](v106, -1, -1);
          MEMORY[0x230F996F0](v105, -1, -1);

          uint64_t v8 = v132;
        }
        else
        {

          swift_release_n();
        }
      }
      else
      {
        v114 = Logger.logObject.getter();
        os_log_type_t v115 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v114, v115))
        {
          os_log_t v116 = (uint8_t *)swift_slowAlloc();
          uint64_t v117 = swift_slowAlloc();
          uint64_t v136 = v117;
          *(_DWORD *)os_log_t v116 = 136315138;
          if (one-time initialization token for typeName != -1) {
            swift_once();
          }
          uint64_t v118 = static StartSharingFlow.typeName;
          unint64_t v119 = *(void *)algn_2685B8148;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 440) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, v119, &v136);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_22DD8A000, v114, v115, "%s: Intent unchanged by reformation", v116, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x230F996F0](v117, -1, -1);
          MEMORY[0x230F996F0](v116, -1, -1);
        }
      }
      uint64_t v120 = *(void **)(v0 + 560);
      uint64_t v121 = *(void *)(v0 + 552);
      *uint64_t v120 = v8;
      swift_storeEnumTagMultiPayload();
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v2, v121, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      swift_beginAccess();
      outlined assign with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v120, v2);
      swift_endAccess();
      specialized SharingFlow.state.didset(v121);
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0((uint64_t)v120, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v121, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      goto LABEL_65;
    case 2u:
      uint64_t v20 = *(void *)(v0 + 528);
      uint64_t v21 = *(void *)(v0 + 520);
      uint64_t v22 = **(void **)(v0 + 568);
      uint64_t v23 = v21 + *(void *)(*(void *)v21 + 112);
      swift_beginAccess();
      outlined init with copy of ResponseExecuting(v23, v0 + 136);
      type metadata accessor for ValidateStartSharingIntentFlow();
      uint64_t v24 = swift_allocObject();
      *(unsigned char *)(v24 + 16) = 2;
      outlined init with take of SharingIntent((long long *)(v0 + 136), v24 + 24);
      *(void *)(v0 + 416) = v24;
      uint64_t v25 = (void *)swift_allocObject();
      v25[2] = v21;
      v25[3] = v22;
      v25[4] = v20;
      lazy protocol witness table accessor for type StartSharingFlow.StartSharingFlowState and conformance StartSharingFlow.StartSharingFlowState(&lazy protocol witness table cache variable for type ValidateStartSharingIntentFlow and conformance ValidateStartSharingIntentFlow, (void (*)(uint64_t))type metadata accessor for ValidateStartSharingIntentFlow);
      swift_retain();
      static ExecuteResponse.ongoing<A>(next:childCompletion:)();
      swift_release();
      swift_release();
      goto LABEL_72;
    case 3u:
      StartSharingFlow.validateRecipientsForIntent(needsValueCount:)(**(void **)(v0 + 568), *(void *)(v0 + 512));
      goto LABEL_72;
    case 4u:
      uint64_t v26 = *(void *)(v0 + 568);
      uint64_t v27 = *(void *)(v0 + 536);
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ShareTarget, recipients: PermittedRecipients, needsValueCount: Int, isShareInCallRequest: Bool));
      uint64_t v29 = *(void *)(v26 + *(int *)(v28 + 48));
      *(void *)(v0 + 576) = v29;
      uint64_t v30 = *(void *)(v26 + *(int *)(v28 + 64));
      outlined init with take of ShareTarget(v26, v27);
      uint64_t v31 = (void *)swift_task_alloc();
      *(void *)(v0 + 584) = v31;
      *uint64_t v31 = v0;
      v31[1] = StartSharingFlow.execute();
      uint64_t v32 = *(void *)(v0 + 536);
      uint64_t v33 = *(void *)(v0 + 512);
      return StartSharingFlow.resolveTarget(_:recipients:needsValueCount:isShareInCallRequest:)(v33, v32, v29, v30);
    case 5u:
      uint64_t v35 = *(void *)(v0 + 568);
      uint64_t v36 = *(void *)(v0 + 536);
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (requestedTarget: ShareTarget, resolvedTarget: ResolvedShareTarget, recipients: PermittedRecipients));
      uint64_t v38 = v35 + *(int *)(v37 + 48);
      uint64_t v39 = *(void *)v38;
      uint64_t v40 = *(void *)(v38 + 8);
      *(void *)(v0 + 592) = v40;
      uint64_t v41 = *(void *)(v35 + *(int *)(v37 + 64));
      char v42 = *(unsigned char *)(v38 + 16);
      *(void *)(v0 + 600) = v41;
      outlined init with take of ShareTarget(v35, v36);
      unint64_t v43 = (void *)swift_task_alloc();
      *(void *)(v0 + 608) = v43;
      *unint64_t v43 = v0;
      v43[1] = StartSharingFlow.execute();
      uint64_t v44 = *(void *)(v0 + 536);
      uint64_t v45 = *(void *)(v0 + 512);
      return StartSharingFlow.confirmTarget(requestedTarget:resolvedTarget:recipients:)(v45, v44, v39, v40, v42, v41);
    case 6u:
      uint64_t v46 = *(uint64_t **)(v0 + 568);
      uint64_t v47 = *v46;
      uint64_t v48 = (void *)v46[1];
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v49 = type metadata accessor for Logger();
      __swift_project_value_buffer(v49, (uint64_t)static Logger.default);
      outlined copy of StartSharingFlow.StartSharingFlowError(v47, (unint64_t)v48);
      outlined copy of StartSharingFlow.StartSharingFlowError(v47, (unint64_t)v48);
      char v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v50, v51))
      {
        os_log_type_t v134 = v51;
        uint64_t v52 = swift_slowAlloc();
        uint64_t v129 = swift_slowAlloc();
        uint64_t v136 = v129;
        *(_DWORD *)uint64_t v52 = 136315650;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v54 = static StartSharingFlow.typeName;
        unint64_t v53 = *(void *)algn_2685B8148;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 424) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v53, &v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v52 + 12) = 2080;
        uint64_t v55 = static StartSharingFlow.typeName;
        unint64_t v56 = *(void *)algn_2685B8148;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 408) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, &v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v52 + 22) = 2080;
        outlined copy of StartSharingFlow.StartSharingFlowError(v47, (unint64_t)v48);
        unint64_t started = StartSharingFlow.StartSharingFlowError.description.getter(v47, v48);
        unint64_t v59 = v58;
        outlined consume of StartSharingFlow.StartSharingFlowError(v47, (unint64_t)v48);
        *(void *)(v0 + 360) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(started, v59, &v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of StartSharingFlow.StartSharingFlowError(v47, (unint64_t)v48);
        outlined consume of StartSharingFlow.StartSharingFlowError(v47, (unint64_t)v48);
        _os_log_impl(&dword_22DD8A000, v50, v134, "%s: %s failed with start sharing error: %s", (uint8_t *)v52, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v129, -1, -1);
        MEMORY[0x230F996F0](v52, -1, -1);
      }
      else
      {
        outlined consume of StartSharingFlow.StartSharingFlowError(v47, (unint64_t)v48);
        outlined consume of StartSharingFlow.StartSharingFlowError(v47, (unint64_t)v48);
      }

      StartSharingFlow.makeResponseForStartSharingError(_:)(v47, (uint64_t)v48);
      outlined consume of StartSharingFlow.StartSharingFlowError(v47, (unint64_t)v48);
      goto LABEL_72;
    case 7u:
      uint64_t v60 = **(unsigned __int8 **)(v0 + 568);
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v61 = type metadata accessor for Logger();
      __swift_project_value_buffer(v61, (uint64_t)static Logger.default);
      unint64_t v62 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v62, v63))
      {
        uint64_t v64 = swift_slowAlloc();
        uint64_t v133 = swift_slowAlloc();
        uint64_t v136 = v133;
        *(_DWORD *)uint64_t v64 = 136315650;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v65 = static StartSharingFlow.typeName;
        unint64_t v66 = *(void *)algn_2685B8148;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 488) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, &v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v64 + 12) = 2080;
        uint64_t v67 = static StartSharingFlow.typeName;
        unint64_t v68 = *(void *)algn_2685B8148;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 480) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, &v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v64 + 22) = 2080;
        unint64_t v69 = 0xEA0000000000646CLL;
        uint64_t v70 = 0x6F486E4F6C6C6163;
        switch(v60)
        {
          case 1:
            unint64_t v69 = 0x800000022DDEA5F0;
            uint64_t v70 = 0xD000000000000010;
            break;
          case 2:
            unint64_t v69 = 0xE90000000000006CLL;
            uint64_t v70 = 0x6C61436E49746F6ELL;
            break;
          case 3:
            uint64_t v70 = 0xD000000000000014;
            uint64_t v122 = "sharePlayUnsupported";
            goto LABEL_69;
          case 4:
            uint64_t v70 = 0xD000000000000012;
            uint64_t v122 = "sharingUnsupported";
LABEL_69:
            unint64_t v69 = (unint64_t)(v122 - 32) | 0x8000000000000000;
            break;
          default:
            break;
        }
        *(void *)(v0 + 432) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v69, &v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22DD8A000, v62, v63, "%s: %s failed with common error: %s", (uint8_t *)v64, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v133, -1, -1);
        MEMORY[0x230F996F0](v64, -1, -1);
      }

      specialized SharingFlow.makeResponseForCommonError(_:)(v60);
      goto LABEL_72;
    case 8u:
      unint64_t v71 = **(void ***)(v0 + 568);
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v72 = type metadata accessor for Logger();
      __swift_project_value_buffer(v72, (uint64_t)static Logger.default);
      id v73 = v71;
      id v74 = v71;
      uint64_t v75 = Logger.logObject.getter();
      os_log_type_t v76 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v75, v76))
      {
        os_log_type_t v135 = v76;
        uint64_t v77 = swift_slowAlloc();
        uint64_t v131 = swift_slowAlloc();
        uint64_t v136 = v131;
        *(_DWORD *)uint64_t v77 = 136315650;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v78 = static StartSharingFlow.typeName;
        unint64_t v79 = *(void *)algn_2685B8148;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 456) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, &v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v77 + 12) = 2080;
        uint64_t v80 = static StartSharingFlow.typeName;
        unint64_t v81 = *(void *)algn_2685B8148;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 400) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, &v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v77 + 22) = 2080;
        *(void *)(v0 + 368) = v71;
        id v82 = v71;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v83 = String.init<A>(describing:)();
        *(void *)(v0 + 392) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, &v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_22DD8A000, v75, v135, "%s: %s failed with unknown/unexpected error: %s", (uint8_t *)v77, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v131, -1, -1);
        MEMORY[0x230F996F0](v77, -1, -1);
      }
      else
      {
      }
      uint64_t v112 = type metadata accessor for Responses.Common.GenericError(0);
      *(void *)(v0 + 80) = v112;
      *(void *)(v0 + 88) = &protocol witness table for Responses.Common.GenericError;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v127);
      static DialogPhase.completion.getter();
      *(unsigned char *)boxed_opaque_existential_1 = -112;
      *((unsigned char *)boxed_opaque_existential_1 + *(int *)(v112 + 24)) = 1;
      specialized SharingFlow.makeOutputDialogAndCompleteFlowResponse(dialogResponse:)(v127);

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v127);
      goto LABEL_72;
    case 9u:
      uint64_t v85 = *(uint64_t **)(v0 + 560);
      uint64_t v86 = *(void *)(v0 + 552);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (validationPassState: StartSharingFlow.StartSharingFlowState, validationFailFallbackState: StartSharingFlow.StartSharingFlowState));
      uint64_t v87 = swift_allocBox();
      *unsigned int v88 = 0;
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      uint64_t *v85 = v87;
      swift_storeEnumTagMultiPayload();
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v2, v86, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      swift_beginAccess();
      outlined assign with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v85, v2);
      swift_endAccess();
      specialized SharingFlow.state.didset(v86);
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0((uint64_t)v85, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v86, type metadata accessor for StartSharingFlow.StartSharingFlowState);
LABEL_65:
      static ExecuteResponse.ongoing(requireInput:)();
      goto LABEL_72;
    case 0xAu:
      id v89 = (void *)swift_task_alloc();
      *(void *)(v0 + 616) = v89;
      *id v89 = v0;
      v89[1] = StartSharingFlow.execute();
      uint64_t v90 = *(void *)(v0 + 512);
      return StartSharingFlow.shareTarget(_:)(v90);
    case 0xBu:
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v91 = type metadata accessor for Logger();
      __swift_project_value_buffer(v91, (uint64_t)static Logger.default);
      uint64_t v92 = Logger.logObject.getter();
      os_log_type_t v93 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v92, v93))
      {
        uint64_t v94 = swift_slowAlloc();
        uint64_t v95 = swift_slowAlloc();
        uint64_t v136 = v95;
        *(_DWORD *)uint64_t v94 = 136315394;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v96 = static StartSharingFlow.typeName;
        unint64_t v97 = *(void *)algn_2685B8148;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 384) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v97, &v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v94 + 12) = 2080;
        *(void *)(v0 + 504) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000022DDEA750, &v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_22DD8A000, v92, v93, "%s: Successfully shared %s; dismissing Siri and completing flow",
          (uint8_t *)v94,
          0x16u);
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v95, -1, -1);
        MEMORY[0x230F996F0](v94, -1, -1);
      }

      outlined init with copy of ResponseExecuting(*(void *)(v0 + 520) + *(void *)(**(void **)(v0 + 520) + 136), (uint64_t)v125);
      type metadata accessor for DismissSiriFlow();
      uint64_t v98 = swift_allocObject();
      outlined init with take of SharingIntent(v125, v98 + 16);
      *(void *)(v0 + 376) = v98;
      lazy protocol witness table accessor for type StartSharingFlow.StartSharingFlowState and conformance StartSharingFlow.StartSharingFlowState(&lazy protocol witness table cache variable for type DismissSiriFlow and conformance DismissSiriFlow, (void (*)(uint64_t))type metadata accessor for DismissSiriFlow);
      static ExecuteResponse.complete<A>(next:)();
      swift_release();
      goto LABEL_72;
    case 0xCu:
    case 0xDu:
      static ExecuteResponse.complete()();
      goto LABEL_72;
    default:
      uint64_t v3 = *(void *)(v0 + 560);
      uint64_t v4 = *(void *)(v0 + 552);
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (validationPassState: StartSharingFlow.StartSharingFlowState, validationFailFallbackState: StartSharingFlow.StartSharingFlowState));
      uint64_t v6 = swift_projectBox();
      uint64_t v7 = v6 + *(int *)(v5 + 48);
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v6, v3, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v7, v4, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      specialized SharingFlow.validateCallStatus(validationPassState:validationFailFallbackState:)(v3, v4);
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v4, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v3, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      swift_release();
LABEL_72:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v123 = *(uint64_t (**)(void))(v0 + 8);
      return v123();
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](StartSharingFlow.execute(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(*(void *)(v0 + 536), (uint64_t (*)(void))type metadata accessor for ShareTarget);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](StartSharingFlow.execute(), 0, 0);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](StartSharingFlow.execute(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in StartSharingFlow.validateIntent(needsValueCount:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  uint64_t v7 = MEMORY[0x270FA5388](started);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  os_log_type_t v11 = (uint64_t *)((char *)&v36 - v10);
  int v12 = *a1;
  if (v12 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.default);
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v36 = a3;
      uint64_t v37 = started;
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      v39[0] = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v18 = static StartSharingFlow.typeName;
      unint64_t v19 = *(void *)algn_2685B8148;
      swift_bridgeObjectRetain();
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v14, v15, "%s: intent to be handled as a screen sharing or app casting intent", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v17, -1, -1);
      MEMORY[0x230F996F0](v16, -1, -1);

      a3 = v36;
    }
    else
    {
    }
    void *v11 = a3;
  }
  else if (v12)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.default);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v37 = started;
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      v39[0] = v31;
      *(_DWORD *)uint64_t v30 = 136315138;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v32 = static StartSharingFlow.typeName;
      unint64_t v33 = *(void *)algn_2685B8148;
      swift_bridgeObjectRetain();
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v28, v29, "%s: intent should be handled via message sending - sending back to SiriMessages", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v31, -1, -1);
      MEMORY[0x230F996F0](v30, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.default);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v37 = started;
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      v39[0] = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v25 = static StartSharingFlow.typeName;
      unint64_t v26 = *(void *)algn_2685B8148;
      swift_bridgeObjectRetain();
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v21, v22, "%s: intent is a SharePlay request, which is unsupported", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v24, -1, -1);
      MEMORY[0x230F996F0](v23, -1, -1);
    }
    else
    {
    }
    *(unsigned char *)os_log_type_t v11 = 3;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v34 = a2 + *(void *)(*(void *)a2 + 104);
  swift_beginAccess();
  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v34, (uint64_t)v9, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  swift_beginAccess();
  outlined assign with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v11, v34);
  swift_endAccess();
  specialized SharingFlow.state.didset((uint64_t)v9);
  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0((uint64_t)v11, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  return _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0((uint64_t)v9, type metadata accessor for StartSharingFlow.StartSharingFlowState);
}

uint64_t StartSharingFlow.validateRecipientsForIntent(needsValueCount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  v23[1] = a2;
  uint64_t v5 = *v2;
  uint64_t v6 = (uint64_t)v2 + *(void *)(*v2 + 112);
  swift_beginAccess();
  outlined init with copy of ResponseExecuting(v6, (uint64_t)v26);
  uint64_t v7 = v27;
  uint64_t v8 = v28;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 176))(v7, v8);
  uint64_t v10 = type metadata accessor for ContactResolver();
  swift_allocObject();
  v25[3] = v10;
  v25[4] = &protocol witness table for ContactResolver;
  v25[0] = ContactResolver.init()();
  v25[8] = &type metadata for ScreenSharingCallManager;
  v25[9] = &protocol witness table for ScreenSharingCallManager;
  os_log_type_t v11 = (void *)swift_allocObject();
  v25[5] = v11;
  id v12 = objc_msgSend(self, sel_sharedInstance);
  v11[5] = type metadata accessor for TUCallCenter();
  v11[6] = &protocol witness table for TUCallCenter;
  v11[2] = v12;
  v24[3] = &type metadata for RecipientsResolver;
  v24[4] = &protocol witness table for RecipientsResolver;
  v24[0] = swift_allocObject();
  outlined init with copy of RecipientsResolver((uint64_t)v25, v24[0] + 16);
  type metadata accessor for ValidateRecipientsFlow();
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v24, (uint64_t)&type metadata for RecipientsResolver);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (_OWORD *)((char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_OWORD *))(v17 + 16))(v16);
  *(void *)(v13 + 64) = &type metadata for RecipientsResolver;
  *(void *)(v13 + 72) = &protocol witness table for RecipientsResolver;
  uint64_t v18 = (_OWORD *)swift_allocObject();
  *(void *)(v13 + 32) = v9;
  *(void *)(v13 + 40) = v18;
  long long v19 = v16[3];
  v18[3] = v16[2];
  v18[4] = v19;
  v18[5] = v16[4];
  long long v20 = v16[1];
  v18[1] = *v16;
  v18[2] = v20;
  *(unsigned char *)(v13 + 16) = 1;
  *(void *)(v13 + 24) = 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  outlined destroy of RecipientsResolver((uint64_t)v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  v25[0] = v13;
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v3;
  v21[3] = v13;
  v21[4] = a1;
  v21[5] = v5;
  lazy protocol witness table accessor for type StartSharingFlow.StartSharingFlowState and conformance StartSharingFlow.StartSharingFlowState(&lazy protocol witness table cache variable for type ValidateRecipientsFlow and conformance ValidateRecipientsFlow, (void (*)(uint64_t))type metadata accessor for ValidateRecipientsFlow);
  swift_retain();
  swift_retain();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in StartSharingFlow.validateRecipientsForIntent(needsValueCount:)(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  uint64_t v9 = MEMORY[0x270FA5388](started);
  os_log_type_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v42 - v12;
  if (*a1)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.default);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v45 = started;
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      v49[0] = v18;
      *(_DWORD *)uint64_t v17 = 136315138;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v19 = static StartSharingFlow.typeName;
      unint64_t v20 = *(void *)algn_2685B8148;
      swift_bridgeObjectRetain();
      v46[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v15, v16, "%s: recipients validation failed - falling back on SiriMessages sharing", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v18, -1, -1);
      MEMORY[0x230F996F0](v17, -1, -1);
    }
    else
    {
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v41 = a2 + *(void *)(*(void *)a2 + 104);
    swift_beginAccess();
    _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v41, (uint64_t)v11, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    swift_beginAccess();
    outlined assign with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v13, v41);
    swift_endAccess();
    specialized SharingFlow.state.didset((uint64_t)v11);
    _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0((uint64_t)v13, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    return _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0((uint64_t)v11, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v44 = a4;
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.default);
    os_log_type_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    BOOL v24 = os_log_type_enabled(v22, v23);
    uint64_t v45 = started;
    uint64_t v43 = a3;
    if (v24)
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      v49[0] = v26;
      *(_DWORD *)uint64_t v25 = 136315138;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v28 = static StartSharingFlow.typeName;
      unint64_t v27 = *(void *)algn_2685B8148;
      swift_bridgeObjectRetain();
      v46[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v22, v23, "%s: recipients validation passed", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v26, -1, -1);
      MEMORY[0x230F996F0](v25, -1, -1);
    }

    os_log_type_t v29 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ShareTarget, recipients: PermittedRecipients, needsValueCount: Int, isShareInCallRequest: Bool));
    uint64_t v30 = v29[12];
    uint64_t v31 = v29[16];
    uint64_t v32 = v29[20];
    uint64_t v33 = a2 + *(void *)(*(void *)a2 + 112);
    swift_beginAccess();
    outlined init with copy of ResponseExecuting(v33, (uint64_t)v49);
    uint64_t v34 = v50;
    uint64_t v35 = v51;
    __swift_project_boxed_opaque_existential_1(v49, v50);
    (*(void (**)(uint64_t, uint64_t))(v35 + 192))(v34, v35);
    *(void *)&v13[v30] = *(void *)(v43 + 24);
    *(void *)&v13[v31] = v44;
    outlined init with copy of ResponseExecuting(v33, (uint64_t)v46);
    uint64_t v36 = v47;
    uint64_t v37 = v48;
    __swift_project_boxed_opaque_existential_1(v46, v47);
    uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 224);
    swift_bridgeObjectRetain();
    v13[v32] = v38(v36, v37) & 1;
    swift_storeEnumTagMultiPayload();
    uint64_t v39 = a2 + *(void *)(*(void *)a2 + 104);
    swift_beginAccess();
    _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v39, (uint64_t)v11, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    swift_beginAccess();
    outlined assign with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v13, v39);
    swift_endAccess();
    specialized SharingFlow.state.didset((uint64_t)v11);
    _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0((uint64_t)v13, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0((uint64_t)v11, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  }
}

uint64_t StartSharingFlow.resolveTarget(_:recipients:needsValueCount:isShareInCallRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[37] = a4;
  v5[38] = v4;
  v5[35] = a2;
  v5[36] = a3;
  v5[34] = a1;
  v5[39] = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  unsigned char v5[40] = swift_task_alloc();
  v5[41] = swift_task_alloc();
  v5[42] = type metadata accessor for Responses.StartSharing.NeedsTarget(0);
  v5[43] = swift_task_alloc();
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized ShareTargetResolver.resolveShareTargetForStartSharing(target:)
                                       + async function pointer to specialized ShareTargetResolver.resolveShareTargetForStartSharing(target:));
  uint64_t v7 = (void *)swift_task_alloc();
  v5[44] = v7;
  *uint64_t v7 = v5;
  v7[1] = StartSharingFlow.resolveTarget(_:recipients:needsValueCount:isShareInCallRequest:);
  return v9(a2);
}

uint64_t StartSharingFlow.resolveTarget(_:recipients:needsValueCount:isShareInCallRequest:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *v3;
  *(void *)(v4 + 360) = a1;
  *(void *)(v4 + 368) = a2;
  *(_DWORD *)(v4 + 376) = a3;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](StartSharingFlow.resolveTarget(_:recipients:needsValueCount:isShareInCallRequest:), 0, 0);
}

uint64_t StartSharingFlow.resolveTarget(_:recipients:needsValueCount:isShareInCallRequest:)()
{
  uint64_t v61 = v0;
  uint64_t v1 = *(unsigned int *)(v0 + 376);
  if ((v1 & 0x10000) != 0)
  {
    uint64_t v8 = *(void *)(v0 + 360) & 1;
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.default);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v60 = v13;
      *(_DWORD *)uint64_t v12 = 136315394;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v14 = static StartSharingFlow.typeName;
      unint64_t v15 = *(void *)algn_2685B8148;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2080;
      *(unsigned char *)(v0 + 380) = v8;
      uint64_t v16 = String.init<A>(describing:)();
      *(void *)(v0 + 248) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v10, v11, "%s: Target resolution failed with error %s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v13, -1, -1);
      MEMORY[0x230F996F0](v12, -1, -1);
    }

    uint64_t v18 = *(void *)(v0 + 320);
    uint64_t v19 = *(uint64_t **)(v0 + 328);
    uint64_t v20 = *(void *)(v0 + 304);
    if (v8)
    {
      lazy protocol witness table accessor for type StartSharingTargetResolutionError and conformance StartSharingTargetResolutionError();
      uint64_t v27 = swift_allocError();
      unsigned char *v28 = 1;
      *uint64_t v19 = v27;
      swift_storeEnumTagMultiPayload();
      uint64_t v26 = v20 + *(void *)(*(void *)v20 + 104);
      swift_beginAccess();
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v26, v18, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      swift_beginAccess();
    }
    else
    {
      uint64_t v22 = *(void *)(v0 + 280);
      uint64_t v21 = *(void *)(v0 + 288);
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (requestedTarget: ShareTarget, resolvedTarget: ResolvedShareTarget, recipients: PermittedRecipients));
      BOOL v24 = (char *)v19 + *(int *)(v23 + 48);
      uint64_t v25 = *(int *)(v23 + 64);
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v22, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ShareTarget);
      *(_OWORD *)BOOL v24 = xmmword_22DDE9B30;
      v24[16] = 2;
      *(uint64_t *)((char *)v19 + v25) = v21;
      swift_storeEnumTagMultiPayload();
      uint64_t v26 = v20 + *(void *)(*(void *)v20 + 104);
      swift_beginAccess();
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v26, v18, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      swift_beginAccess();
      swift_bridgeObjectRetain();
    }
    outlined assign with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v19, v26);
    swift_endAccess();
    specialized SharingFlow.state.didset(v18);
    _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0((uint64_t)v19, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v18, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    static ExecuteResponse.ongoing(requireInput:)();
  }
  else
  {
    if (!BYTE1(v1))
    {
      uint64_t v3 = *(void *)(v0 + 360);
      uint64_t v2 = *(void *)(v0 + 368);
      uint64_t v29 = *(void *)(v0 + 328);
      uint64_t v58 = *(void *)(v0 + 320);
      uint64_t v30 = *(void *)(v0 + 304);
      uint64_t v31 = *(void *)(v0 + 280);
      uint64_t v32 = *(void *)(v0 + 288);
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (requestedTarget: ShareTarget, resolvedTarget: ResolvedShareTarget, recipients: PermittedRecipients));
      uint64_t v34 = v29 + *(int *)(v33 + 48);
      uint64_t v35 = *(int *)(v33 + 64);
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v31, v29, (uint64_t (*)(void))type metadata accessor for ShareTarget);
      *(void *)uint64_t v34 = v3;
      *(void *)(v34 + 8) = v2;
      *(unsigned char *)(v34 + 16) = v1;
      *(void *)(v29 + v35) = v32;
      swift_storeEnumTagMultiPayload();
      uint64_t v36 = v30 + *(void *)(*(void *)v30 + 104);
      swift_beginAccess();
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v36, v58, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      swift_beginAccess();
      outlined copy of Result<StartSharingTargetResolution, StartSharingTargetResolutionError>(v3, v2, v1, 0);
      outlined copy of Result<StartSharingTargetResolution, StartSharingTargetResolutionError>(v3, v2, v1, 0);
      swift_bridgeObjectRetain();
      outlined assign with copy of StartSharingFlow.StartSharingFlowState(v29, v36);
      swift_endAccess();
      specialized SharingFlow.state.didset(v58);
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v29, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v58, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      static ExecuteResponse.ongoing(requireInput:)();
      outlined consume of Result<StartSharingTargetResolution, StartSharingTargetResolutionError>(v3, v2, v1, 0);
      goto LABEL_16;
    }
    if (BYTE1(v1) == 1)
    {
      uint64_t v3 = *(void *)(v0 + 360);
      uint64_t v2 = *(void *)(v0 + 368);
      uint64_t v4 = *(void *)(v0 + 320);
      uint64_t v5 = *(uint64_t **)(v0 + 328);
      uint64_t v6 = *(void *)(v0 + 304);
      *uint64_t v5 = v3;
      v5[1] = v2;
      swift_storeEnumTagMultiPayload();
      uint64_t v7 = v6 + *(void *)(*(void *)v6 + 104);
      swift_beginAccess();
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v7, v4, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      swift_beginAccess();
      outlined copy of StartSharingTargetResolution(v3, v2, v1, 1u);
      outlined assign with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v5, v7);
      swift_endAccess();
      specialized SharingFlow.state.didset(v4);
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0((uint64_t)v5, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v4, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      static ExecuteResponse.ongoing(requireInput:)();
LABEL_16:
      outlined consume of Result<StartSharingTargetResolution, StartSharingTargetResolutionError>(v3, v2, v1, 0);
      goto LABEL_24;
    }
    unint64_t v59 = (uint64_t *)(v0 + 16);
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.default);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      uint64_t v60 = v41;
      *(_DWORD *)uint64_t v40 = 136315138;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v42 = static StartSharingFlow.typeName;
      unint64_t v43 = *(void *)algn_2685B8148;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v38, v39, "%s: Resolved needs value -> pushing needs value flow", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v41, -1, -1);
      MEMORY[0x230F996F0](v40, -1, -1);
    }

    uint64_t v44 = *(unsigned int *)(v0 + 376);
    uint64_t v46 = *(void *)(v0 + 360);
    uint64_t v45 = *(void *)(v0 + 368);
    uint64_t v47 = *(void *)(v0 + 336);
    uint64_t v48 = *(unsigned char **)(v0 + 344);
    uint64_t v50 = *(void *)(v0 + 296);
    uint64_t v49 = *(void *)(v0 + 304);
    uint64_t v51 = *(void *)(v0 + 272);
    *uint64_t v48 = -109;
    static DialogPhase.clarification.getter();
    uint64_t v52 = &v48[*(int *)(v47 + 24)];
    static SharingNLContextProvider.makeNLContextUpdateForShareTargetPrompt()();
    uint64_t v53 = type metadata accessor for NLContextUpdate();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v52, 0, 1, v53);
    *(void *)(v0 + 40) = v47;
    *(void *)(v0 + 48) = &protocol witness table for Responses.StartSharing.NeedsTarget;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v59);
    _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0((uint64_t)v48, (uint64_t)boxed_opaque_existential_1, type metadata accessor for Responses.StartSharing.NeedsTarget);
    uint64_t v55 = swift_allocObject();
    *(void *)(v55 + 16) = v49;
    *(void *)(v55 + 24) = v50;
    swift_retain();
    StartSharingFlow.executeNeedsShareTargetFlow(with:onIntentReceived:)((uint64_t)v59, (uint64_t)partial apply for closure #1 in StartSharingFlow.resolveTarget(_:recipients:needsValueCount:isShareInCallRequest:), v55, v51);
    swift_release();
    _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0((uint64_t)v48, type metadata accessor for Responses.StartSharing.NeedsTarget);
    outlined consume of Result<StartSharingTargetResolution, StartSharingTargetResolutionError>(v46, v45, v44, 0);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
  }
LABEL_24:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v56 = *(uint64_t (**)(void))(v0 + 8);
  return v56();
}

uint64_t closure #1 in StartSharingFlow.resolveTarget(_:recipients:needsValueCount:isShareInCallRequest:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  uint64_t v7 = MEMORY[0x270FA5388](started);
  uint64_t v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v7);
  os_log_type_t v11 = &v16[-v10];
  outlined init with copy of ResponseExecuting(a1, (uint64_t)v17);
  uint64_t v12 = (uint64_t *)(a2 + *(void *)(*(void *)a2 + 112));
  swift_beginAccess();
  __swift_assign_boxed_opaque_existential_1(v12, v17);
  uint64_t v13 = swift_endAccess();
  specialized SharingFlow.intent.didset(v13);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  if (__OFADD__(a3, 1))
  {
    __break(1u);
  }
  else
  {
    void *v11 = a3 + 1;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = a2 + *(void *)(*(void *)a2 + 104);
    swift_beginAccess();
    _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v15, (uint64_t)v9, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    swift_beginAccess();
    outlined assign with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v11, v15);
    swift_endAccess();
    specialized SharingFlow.state.didset((uint64_t)v9);
    _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0((uint64_t)v11, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    return _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0((uint64_t)v9, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  }
  return result;
}

uint64_t StartSharingFlow.confirmTarget(requestedTarget:resolvedTarget:recipients:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(v7 + 280) = a6;
  *(void *)(v7 + 288) = v6;
  *(unsigned char *)(v7 + 304) = a5;
  *(void *)(v7 + 264) = a3;
  *(void *)(v7 + 272) = a4;
  *(void *)(v7 + 248) = a1;
  *(void *)(v7 + 256) = a2;
  type metadata accessor for ShareTarget();
  *(void *)(v7 + 296) = swift_task_alloc();
  return MEMORY[0x270FA2498](StartSharingFlow.confirmTarget(requestedTarget:resolvedTarget:recipients:), 0, 0);
}

uint64_t StartSharingFlow.confirmTarget(requestedTarget:resolvedTarget:recipients:)()
{
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v20 = v2;
  char v23 = *(unsigned char *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v21 = *(void *)(v0 + 264);
  uint64_t v22 = *(void *)(v0 + 272);
  uint64_t v24 = *(void *)(v0 + 280);
  uint64_t v4 = v1 + *(void *)(*(void *)v1 + 112);
  swift_beginAccess();
  outlined init with copy of ResponseExecuting(v4, v0 + 16);
  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v3, v2, (uint64_t (*)(void))type metadata accessor for ShareTarget);
  outlined init with copy of ResponseExecuting(v1 + *(void *)(*(void *)v1 + 120), v0 + 96);
  outlined init with copy of ResponseExecuting(v1 + *(void *)(*(void *)v1 + 128), v0 + 136);
  outlined init with copy of ResponseExecuting(v1 + *(void *)(*(void *)v1 + 136), v0 + 176);
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v6 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 136, v5);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = (uint64_t *)swift_task_alloc();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(v8, v6, v5);
  uint64_t v9 = *v8;
  uint64_t v10 = type metadata accessor for ResponseExecutor();
  *(void *)(v0 + 80) = v10;
  *(void *)(v0 + 88) = &protocol witness table for ResponseExecutor;
  *(void *)(v0 + 56) = v9;
  type metadata accessor for StartSharingConfirmationFlow();
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 56, v10);
  uint64_t v13 = *(void *)(v10 - 8);
  uint64_t v14 = (uint64_t *)swift_task_alloc();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 16))(v14, v12, v10);
  uint64_t v15 = *v14;
  uint64_t v16 = (void *)(v11 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_responseExecutor);
  v16[3] = v10;
  v16[4] = &protocol witness table for ResponseExecutor;
  *uint64_t v16 = v15;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(unsigned char *)(v11 + 64) = 32;
  outlined init with take of SharingIntent((long long *)(v0 + 16), v11 + 72);
  outlined init with take of ShareTarget(v20, v11 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_requestedTarget);
  uint64_t v17 = v11 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_resolvedTarget;
  *(void *)uint64_t v17 = v21;
  *(void *)(v17 + 8) = v22;
  *(unsigned char *)(v17 + 16) = v23;
  *(void *)(v11 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_recipients) = v24;
  outlined init with take of SharingIntent((long long *)(v0 + 96), v11 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_call);
  outlined init with take of SharingIntent((long long *)(v0 + 176), v11 + OBJC_IVAR____TtC19SiriExpanseInternal28StartSharingConfirmationFlow_outputPublisher);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  swift_task_dealloc();
  *(void *)(v0 + 240) = v11;
  lazy protocol witness table accessor for type StartSharingFlow.StartSharingFlowState and conformance StartSharingFlow.StartSharingFlowState(&lazy protocol witness table cache variable for type StartSharingConfirmationFlow and conformance StartSharingConfirmationFlow, (void (*)(uint64_t))type metadata accessor for StartSharingConfirmationFlow);
  swift_retain();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t closure #1 in StartSharingFlow.confirmTarget(requestedTarget:resolvedTarget:recipients:)(void **a1, uint64_t a2)
{
  uint64_t started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  uint64_t v5 = MEMORY[0x270FA5388](started);
  uint64_t v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (uint64_t *)&v18[-v8];
  uint64_t v10 = *a1;
  switch((unint64_t)v10)
  {
    case 0uLL:
      *uint64_t v9 = 0;
      v9[1] = 0;
      goto LABEL_6;
    case 1uLL:
    case 3uLL:
      goto LABEL_6;
    case 2uLL:
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (validationPassState: StartSharingFlow.StartSharingFlowState, validationFailFallbackState: StartSharingFlow.StartSharingFlowState));
      uint64_t v14 = swift_allocBox();
      uint64_t v16 = (unsigned char *)(v15 + *(int *)(v13 + 48));
      swift_storeEnumTagMultiPayload();
      *uint64_t v16 = 2;
      swift_storeEnumTagMultiPayload();
      *uint64_t v9 = v14;
      goto LABEL_6;
    case 4uLL:
      *(_OWORD *)uint64_t v9 = xmmword_22DDE9B40;
LABEL_6:
      swift_storeEnumTagMultiPayload();
      uint64_t v11 = a2 + *(void *)(*(void *)a2 + 104);
      swift_beginAccess();
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v11, (uint64_t)v7, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      swift_beginAccess();
      break;
    default:
      *uint64_t v9 = (uint64_t)v10;
      swift_storeEnumTagMultiPayload();
      uint64_t v11 = a2 + *(void *)(*(void *)a2 + 104);
      swift_beginAccess();
      _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v11, (uint64_t)v7, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      swift_beginAccess();
      id v12 = v10;
      break;
  }
  outlined assign with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v9, v11);
  swift_endAccess();
  specialized SharingFlow.state.didset((uint64_t)v7);
  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0((uint64_t)v9, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  return _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0((uint64_t)v7, type metadata accessor for StartSharingFlow.StartSharingFlowState);
}

uint64_t StartSharingFlow.shareTarget(_:)(uint64_t a1)
{
  unsigned char v2[24] = a1;
  v2[25] = v1;
  v2[26] = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  v2[29] = type metadata accessor for Responses.StartSharing.InterstitialStartingScreenSharing(0);
  v2[30] = swift_task_alloc();
  return MEMORY[0x270FA2498](StartSharingFlow.shareTarget(_:), 0, 0);
}

uint64_t StartSharingFlow.shareTarget(_:)()
{
  uint64_t v15 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[31] = __swift_project_value_buffer(v1, (uint64_t)static Logger.default);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v14 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v6 = static StartSharingFlow.typeName;
    unint64_t v7 = *(void *)algn_2685B8148;
    swift_bridgeObjectRetain();
    v0[23] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22DD8A000, v2, v3, "%s: Informing user that screen sharing is starting...", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v5, -1, -1);
    MEMORY[0x230F996F0](v4, -1, -1);
  }

  uint64_t v8 = v0[29];
  uint64_t v9 = (unsigned char *)v0[30];
  uint64_t v10 = v0[25];
  *uint64_t v9 = -110;
  static DialogPhase.confirmed.getter();
  __swift_project_boxed_opaque_existential_1((void *)(v10 + *(void *)(*(void *)v10 + 128)), *(void *)(v10 + *(void *)(*(void *)v10 + 128) + 24));
  v0[10] = v8;
  v0[11] = (uint64_t)&protocol witness table for Responses.StartSharing.InterstitialStartingScreenSharing;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 7);
  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0((uint64_t)v9, (uint64_t)boxed_opaque_existential_1, type metadata accessor for Responses.StartSharing.InterstitialStartingScreenSharing);
  id v12 = (void *)swift_task_alloc();
  v0[32] = (uint64_t)v12;
  void *v12 = v0;
  v12[1] = StartSharingFlow.shareTarget(_:);
  return ResponseExecutor.execute(response:)((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 264) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v3 = StartSharingFlow.shareTarget(_:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(v2 + 56);
    os_log_type_t v3 = StartSharingFlow.shareTarget(_:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  uint64_t v1 = (void *)(*(void *)(v0 + 200) + *(void *)(**(void **)(v0 + 200) + 136));
  uint64_t v2 = v1[3];
  os_log_type_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v4;
  *uint64_t v4 = v0;
  v4[1] = StartSharingFlow.shareTarget(_:);
  return MEMORY[0x270F67C10](v0 + 16, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = StartSharingFlow.shareTarget(_:);
  }
  else {
    uint64_t v2 = StartSharingFlow.shareTarget(_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  Swift::Int (__swiftcall *v6)(Swift::OpaquePointer, Swift::String);
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;

  uint64_t v36 = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  uint64_t v1 = (void *)v0[33];
  uint64_t v2 = v1;
  os_log_type_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  uint64_t v6 = _findStringSwitchCase(cases:string:);
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v7 = swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v35 = v33;
    *(_DWORD *)unint64_t v7 = 136315394;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v34 = v0[30];
    uint64_t v9 = static StartSharingFlow.typeName;
    uint64_t v10 = *(void *)algn_2685B8148;
    swift_bridgeObjectRetain();
    v0[21] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2112;
    uint64_t v11 = v1;
    id v12 = _swift_stdlib_bridgeErrorToNSError();
    v0[22] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v12;

    _os_log_impl(&dword_22DD8A000, v4, v5, "%s: Error producing or outputting InterstitialStartingScreenSharing dialog: %@", (uint8_t *)v7, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v8, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v33, -1, -1);
    MEMORY[0x230F996F0](v7, -1, -1);

    _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v34, type metadata accessor for Responses.StartSharing.InterstitialStartingScreenSharing);
    uint64_t v6 = _findStringSwitchCase(cases:string:);
  }
  else
  {
    uint64_t v13 = v0[30];

    _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v13, type metadata accessor for Responses.StartSharing.InterstitialStartingScreenSharing);
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.default);
  uint64_t v15 = Logger.logObject.getter();
  uint64_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v35 = v18;
    *(_DWORD *)uint64_t v17 = *((void *)v6 + 498);
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v19 = static StartSharingFlow.typeName;
    uint64_t v20 = *(void *)algn_2685B8148;
    swift_bridgeObjectRetain();
    v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    v0[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000022DDEA750, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_22DD8A000, v15, v16, "%s: Starting sharing target %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v18, -1, -1);
    MEMORY[0x230F996F0](v17, -1, -1);
  }

  specialized Sharer.setScreenSharingEnabled(_:for:in:)(1, (void *)(v0[25] + *(void *)(*(void *)v0[25] + 120)));
  uint64_t v21 = Logger.logObject.getter();
  uint64_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    char v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v35 = v24;
    *(_DWORD *)char v23 = 136315138;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v25 = static StartSharingFlow.typeName;
    uint64_t v26 = *(void *)algn_2685B8148;
    swift_bridgeObjectRetain();
    v0[19] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22DD8A000, v21, v22, "%s: Successfully shared target", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v24, -1, -1);
    MEMORY[0x230F996F0](v23, -1, -1);
  }

  uint64_t v27 = v0[27];
  uint64_t v28 = v0[28];
  uint64_t v29 = v0[25];
  swift_storeEnumTagMultiPayload();
  uint64_t v30 = v29 + *(void *)(*(void *)v29 + 104);
  swift_beginAccess();
  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v30, v27, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  swift_beginAccess();
  outlined assign with copy of StartSharingFlow.StartSharingFlowState(v28, v30);
  swift_endAccess();
  specialized SharingFlow.state.didset(v27);
  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v28, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v27, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = (uint64_t (*)(void))v0[1];
  return v31();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 288) = v1;
  *uint64_t v1 = v0;
  v1[1] = StartSharingFlow.shareTarget(_:);
  return MEMORY[0x270FA1FF0](3000000000);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 296) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = StartSharingFlow.shareTarget(_:);
  }
  else {
    uint64_t v2 = StartSharingFlow.shareTarget(_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v23;
  void *v24;
  uint64_t v25;

  uint64_t v24 = v0;
  uint64_t v1 = v0[30];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v1, type metadata accessor for Responses.StartSharing.InterstitialStartingScreenSharing);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = v0 + 19;
  os_log_type_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.default);
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.debug.getter();
  uint64_t v6 = 0x2685B6000uLL;
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    char v23 = v8;
    *(_DWORD *)unint64_t v7 = 136315394;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v9 = static StartSharingFlow.typeName;
    uint64_t v10 = *(void *)algn_2685B8148;
    swift_bridgeObjectRetain();
    v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    v0[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000022DDEA750, &v23);
    uint64_t v2 = v0 + 19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_22DD8A000, v4, v5, "%s: Starting sharing target %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v8, -1, -1);
    MEMORY[0x230F996F0](v7, -1, -1);

    uint64_t v6 = 0x2685B6000;
  }
  else
  {
  }
  specialized Sharer.setScreenSharingEnabled(_:for:in:)(1, (void *)(v0[25] + *(void *)(*(void *)v0[25] + 120)));
  uint64_t v11 = Logger.logObject.getter();
  id v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    char v23 = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    if (*(void *)(v6 + 3856) != -1) {
      swift_once();
    }
    uint64_t v15 = static StartSharingFlow.typeName;
    uint64_t v16 = *(void *)algn_2685B8148;
    swift_bridgeObjectRetain();
    *uint64_t v2 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22DD8A000, v11, v12, "%s: Successfully shared target", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v14, -1, -1);
    MEMORY[0x230F996F0](v13, -1, -1);
  }

  uint64_t v17 = v0[27];
  uint64_t v18 = v0[28];
  uint64_t v19 = v0[25];
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = v19 + *(void *)(*(void *)v19 + 104);
  swift_beginAccess();
  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v20, v17, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  swift_beginAccess();
  outlined assign with copy of StartSharingFlow.StartSharingFlowState(v18, v20);
  swift_endAccess();
  specialized SharingFlow.state.didset(v17);
  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v18, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v17, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  Swift::Int (__swiftcall *v6)(Swift::OpaquePointer, Swift::String);
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;

  uint64_t v36 = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  uint64_t v1 = (void *)v0[35];
  uint64_t v2 = v1;
  os_log_type_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  uint64_t v6 = _findStringSwitchCase(cases:string:);
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v7 = swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v35 = v33;
    *(_DWORD *)unint64_t v7 = 136315394;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v34 = v0[30];
    uint64_t v9 = static StartSharingFlow.typeName;
    uint64_t v10 = *(void *)algn_2685B8148;
    swift_bridgeObjectRetain();
    v0[21] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2112;
    uint64_t v11 = v1;
    id v12 = _swift_stdlib_bridgeErrorToNSError();
    v0[22] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v12;

    _os_log_impl(&dword_22DD8A000, v4, v5, "%s: Error producing or outputting InterstitialStartingScreenSharing dialog: %@", (uint8_t *)v7, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v8, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v33, -1, -1);
    MEMORY[0x230F996F0](v7, -1, -1);

    _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v34, type metadata accessor for Responses.StartSharing.InterstitialStartingScreenSharing);
    uint64_t v6 = _findStringSwitchCase(cases:string:);
  }
  else
  {
    uint64_t v13 = v0[30];

    _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v13, type metadata accessor for Responses.StartSharing.InterstitialStartingScreenSharing);
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.default);
  uint64_t v15 = Logger.logObject.getter();
  uint64_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v35 = v18;
    *(_DWORD *)uint64_t v17 = *((void *)v6 + 498);
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v19 = static StartSharingFlow.typeName;
    uint64_t v20 = *(void *)algn_2685B8148;
    swift_bridgeObjectRetain();
    v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    v0[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000022DDEA750, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_22DD8A000, v15, v16, "%s: Starting sharing target %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v18, -1, -1);
    MEMORY[0x230F996F0](v17, -1, -1);
  }

  specialized Sharer.setScreenSharingEnabled(_:for:in:)(1, (void *)(v0[25] + *(void *)(*(void *)v0[25] + 120)));
  uint64_t v21 = Logger.logObject.getter();
  uint64_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    char v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v35 = v24;
    *(_DWORD *)char v23 = 136315138;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v25 = static StartSharingFlow.typeName;
    uint64_t v26 = *(void *)algn_2685B8148;
    swift_bridgeObjectRetain();
    v0[19] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22DD8A000, v21, v22, "%s: Successfully shared target", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v24, -1, -1);
    MEMORY[0x230F996F0](v23, -1, -1);
  }

  uint64_t v27 = v0[27];
  uint64_t v28 = v0[28];
  uint64_t v29 = v0[25];
  swift_storeEnumTagMultiPayload();
  uint64_t v30 = v29 + *(void *)(*(void *)v29 + 104);
  swift_beginAccess();
  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v30, v27, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  swift_beginAccess();
  outlined assign with copy of StartSharingFlow.StartSharingFlowState(v28, v30);
  swift_endAccess();
  specialized SharingFlow.state.didset(v27);
  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v28, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v27, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = (uint64_t (*)(void))v0[1];
  return v31();
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  Swift::Int (__swiftcall *v6)(Swift::OpaquePointer, Swift::String);
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;

  uint64_t v36 = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  uint64_t v1 = (void *)v0[37];
  uint64_t v2 = v1;
  os_log_type_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  uint64_t v6 = _findStringSwitchCase(cases:string:);
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v7 = swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v35 = v33;
    *(_DWORD *)unint64_t v7 = 136315394;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v34 = v0[30];
    uint64_t v9 = static StartSharingFlow.typeName;
    uint64_t v10 = *(void *)algn_2685B8148;
    swift_bridgeObjectRetain();
    v0[21] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2112;
    uint64_t v11 = v1;
    id v12 = _swift_stdlib_bridgeErrorToNSError();
    v0[22] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v12;

    _os_log_impl(&dword_22DD8A000, v4, v5, "%s: Error producing or outputting InterstitialStartingScreenSharing dialog: %@", (uint8_t *)v7, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v8, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v33, -1, -1);
    MEMORY[0x230F996F0](v7, -1, -1);

    _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v34, type metadata accessor for Responses.StartSharing.InterstitialStartingScreenSharing);
    uint64_t v6 = _findStringSwitchCase(cases:string:);
  }
  else
  {
    uint64_t v13 = v0[30];

    _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v13, type metadata accessor for Responses.StartSharing.InterstitialStartingScreenSharing);
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.default);
  uint64_t v15 = Logger.logObject.getter();
  uint64_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v35 = v18;
    *(_DWORD *)uint64_t v17 = *((void *)v6 + 498);
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v19 = static StartSharingFlow.typeName;
    uint64_t v20 = *(void *)algn_2685B8148;
    swift_bridgeObjectRetain();
    v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    v0[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000022DDEA750, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_22DD8A000, v15, v16, "%s: Starting sharing target %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v18, -1, -1);
    MEMORY[0x230F996F0](v17, -1, -1);
  }

  specialized Sharer.setScreenSharingEnabled(_:for:in:)(1, (void *)(v0[25] + *(void *)(*(void *)v0[25] + 120)));
  uint64_t v21 = Logger.logObject.getter();
  uint64_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    char v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v35 = v24;
    *(_DWORD *)char v23 = 136315138;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v25 = static StartSharingFlow.typeName;
    uint64_t v26 = *(void *)algn_2685B8148;
    swift_bridgeObjectRetain();
    v0[19] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22DD8A000, v21, v22, "%s: Successfully shared target", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v24, -1, -1);
    MEMORY[0x230F996F0](v23, -1, -1);
  }

  uint64_t v27 = v0[27];
  uint64_t v28 = v0[28];
  uint64_t v29 = v0[25];
  swift_storeEnumTagMultiPayload();
  uint64_t v30 = v29 + *(void *)(*(void *)v29 + 104);
  swift_beginAccess();
  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v30, v27, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  swift_beginAccess();
  outlined assign with copy of StartSharingFlow.StartSharingFlowState(v28, v30);
  swift_endAccess();
  specialized SharingFlow.state.didset(v27);
  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v28, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v27, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = (uint64_t (*)(void))v0[1];
  return v31();
}

uint64_t StartSharingFlow.makeResponseForStartSharingError(_:)(uint64_t a1, uint64_t a2)
{
  switch(a2)
  {
    case 0:
      uint64_t started = type metadata accessor for Responses.StartSharing.AlreadySharingTarget(0);
      uint64_t v13 = started;
      uint64_t v14 = &protocol witness table for Responses.StartSharing.AlreadySharingTarget;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v12);
      *(unsigned char *)boxed_opaque_existential_1 = 0x80;
      static DialogPhase.completion.getter();
LABEL_7:
      uint64_t v5 = (char *)boxed_opaque_existential_1 + *(int *)(started + 24);
      *uint64_t v5 = 1;
      *((void *)v5 + 2) = 0;
      *((void *)v5 + 3) = 0;
      *((void *)v5 + 1) = 0;
      break;
    case 1:
      uint64_t started = type metadata accessor for Responses.StartSharing.UnableToStartSharingTarget(0);
      uint64_t v13 = started;
      uint64_t v14 = &protocol witness table for Responses.StartSharing.UnableToStartSharingTarget;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v12);
      *(unsigned char *)boxed_opaque_existential_1 = -99;
      static DialogPhase.error.getter();
      goto LABEL_7;
    case 2:
      uint64_t v13 = type metadata accessor for Responses.StartSharing.SingleWindowSharingUnsupported(0);
      uint64_t v14 = &protocol witness table for Responses.StartSharing.SingleWindowSharingUnsupported;
      *(unsigned char *)__swift_allocate_boxed_opaque_existential_1(v12) = -100;
      static DialogPhase.completion.getter();
      break;
    default:
      uint64_t v7 = type metadata accessor for Responses.StartSharing.AppNotInstalled(0);
      uint64_t v13 = v7;
      uint64_t v14 = &protocol witness table for Responses.StartSharing.AppNotInstalled;
      uint64_t v8 = __swift_allocate_boxed_opaque_existential_1(v12);
      *(unsigned char *)uint64_t v8 = -126;
      swift_bridgeObjectRetain();
      static DialogPhase.completion.getter();
      uint64_t v9 = (uint64_t *)((char *)v8 + *(int *)(v7 + 24));
      *uint64_t v9 = a1;
      v9[1] = a2;
      uint64_t v10 = (char *)v8 + *(int *)(v7 + 28);
      *uint64_t v10 = 0;
      *((void *)v10 + 1) = a1;
      *((void *)v10 + 2) = a2;
      *((void *)v10 + 3) = 0;
      swift_bridgeObjectRetain();
      break;
  }
  specialized SharingFlow.makeOutputDialogAndCompleteFlowResponse(dialogResponse:)(v12);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

uint64_t StartSharingFlow.executeNeedsShareTargetFlow(with:onIntentReceived:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v31 = a2;
  uint64_t v32 = a4;
  uint64_t v8 = *v5;
  uint64_t started = type metadata accessor for Responses.StartSharing.ShareRequestCancelled(0);
  MEMORY[0x270FA5388](started);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned char *v11 = -101;
  static DialogPhase.canceled.getter();
  outlined init with copy of ResponseExecuting(a1, (uint64_t)v37);
  void v36[3] = started;
  v36[4] = (uint64_t)&protocol witness table for Responses.StartSharing.ShareRequestCancelled;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v36);
  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0((uint64_t)v11, (uint64_t)boxed_opaque_existential_1, type metadata accessor for Responses.StartSharing.ShareRequestCancelled);
  outlined init with copy of ResponseExecuting((uint64_t)v5 + *(void *)(*v5 + 128), (uint64_t)v34);
  uint64_t v13 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v34, v35);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (uint64_t *)((char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v17 = *v15;
  uint64_t v18 = type metadata accessor for ResponseExecutor();
  long long v33[3] = v18;
  v33[4] = &protocol witness table for ResponseExecutor;
  v33[0] = v17;
  type metadata accessor for NeedsShareTargetFlowStrategy();
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v33, v18);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (uint64_t *)((char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v23 + 16))(v22);
  uint64_t v24 = *v22;
  *(void *)(v19 + 120) = v18;
  *(void *)(v19 + 128) = &protocol witness table for ResponseExecutor;
  *(void *)(v19 + 96) = v24;
  *(_OWORD *)(v19 + 136) = 0u;
  *(_OWORD *)(v19 + 152) = 0u;
  *(void *)(v19 + 168) = 0;
  outlined init with take of SharingIntent(v37, v19 + 16);
  outlined init with take of SharingResponse?((uint64_t)v36, v19 + 56);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  outlined init with copy of ResponseExecuting((uint64_t)v5 + *(void *)(*v5 + 136), (uint64_t)v37);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForValueFlowWrapper<NeedsShareTargetFlowStrategy>);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v19;
  outlined init with copy of ResponseExecuting((uint64_t)v37, (uint64_t)v36);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForValueFlowAsync<SharingIntent?>);
  swift_allocObject();
  lazy protocol witness table accessor for type StartSharingFlow.StartSharingFlowState and conformance StartSharingFlow.StartSharingFlowState((unint64_t *)&lazy protocol witness table cache variable for type NeedsShareTargetFlowStrategy and conformance NeedsShareTargetFlowStrategy, (void (*)(uint64_t))type metadata accessor for NeedsShareTargetFlowStrategy);
  swift_retain();
  uint64_t v26 = PromptForValueFlowAsync.init<A>(strategy:outputPublisher:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  *(void *)(v25 + 24) = v26;
  *(void *)&v37[0] = v25;
  uint64_t v27 = (void *)swift_allocObject();
  uint64_t v28 = v31;
  v27[2] = v5;
  void v27[3] = v28;
  v27[4] = a3;
  v27[5] = v8;
  lazy protocol witness table accessor for type PromptForValueFlowWrapper<NeedsShareTargetFlowStrategy> and conformance PromptForValueFlowWrapper<A>();
  swift_retain();
  swift_retain();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  swift_release();
  return _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0((uint64_t)v11, type metadata accessor for Responses.StartSharing.ShareRequestCancelled);
}

uint64_t closure #1 in StartSharingFlow.executeNeedsShareTargetFlow(with:onIntentReceived:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  swift_retain();
  swift_retain();
  specialized PromptManaging.processPromptFlowExitValue<A>(_:onValueReceived:)(a1, a2, a2, a3, a4);
  swift_release();

  return swift_release();
}

uint64_t StartSharingFlow.__ivar_destroyer()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StartSharingFlow.shareTargetResolver);
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StartSharingFlow.sharer);
  uint64_t v1 = v0 + direct field offset for StartSharingFlow.sharePlayHelper;

  return __swift_destroy_boxed_opaque_existential_1(v1);
}

uint64_t StartSharingFlow.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v0 + *(void *)(*(void *)v0 + 104), type metadata accessor for StartSharingFlow.StartSharingFlowState);
  __swift_destroy_boxed_opaque_existential_1(v0 + *(void *)(*(void *)v0 + 112));
  __swift_destroy_boxed_opaque_existential_1(v0 + *(void *)(*(void *)v0 + 120));
  __swift_destroy_boxed_opaque_existential_1(v0 + *(void *)(*(void *)v0 + 128));
  __swift_destroy_boxed_opaque_existential_1(v0 + *(void *)(*(void *)v0 + 136));
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StartSharingFlow.shareTargetResolver);
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StartSharingFlow.sharer);
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StartSharingFlow.sharePlayHelper);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t type metadata accessor for StartSharingFlow(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for StartSharingFlow);
}

uint64_t type metadata completion function for StartSharingFlow()
{
  return swift_initClassMetadata2();
}

char *initializeBufferWithCopyOfBuffer for StartSharingFlow.StartSharingFlowState(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *(void *)a1 = *a2;
    a1 = &v7[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(void *)a1 = *a2;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        uint64_t v9 = type metadata accessor for ShareTarget();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            *(void *)a1 = *a2;
            swift_retain();
            uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                         + 48);
            uint64_t v11 = &a1[v10];
            uint64_t v12 = (uint64_t)a2 + v10;
            uint64_t v13 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
            goto LABEL_19;
          case 1u:
          case 2u:
            uint64_t v22 = a2[1];
            *(void *)a1 = *a2;
            *((void *)a1 + 1) = v22;
            swift_bridgeObjectRetain();
            goto LABEL_19;
          case 3u:
            uint64_t v23 = a2[1];
            *(void *)a1 = *a2;
            *((void *)a1 + 1) = v23;
            a1[16] = *((unsigned char *)a2 + 16);
            swift_bridgeObjectRetain();
LABEL_19:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
            break;
        }
        uint64_t v24 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ShareTarget, recipients: PermittedRecipients, needsValueCount: Int, isShareInCallRequest: Bool));
        *(void *)&a1[v24[12]] = *(char **)((char *)a2 + v24[12]);
        *(void *)&a1[v24[16]] = *(char **)((char *)a2 + v24[16]);
        a1[v24[20]] = *((unsigned char *)a2 + v24[20]);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        uint64_t v14 = type metadata accessor for ShareTarget();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            *(void *)a1 = *a2;
            swift_retain();
            uint64_t v15 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                         + 48);
            uint64_t v16 = &a1[v15];
            uint64_t v17 = (uint64_t)a2 + v15;
            uint64_t v18 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
            goto LABEL_24;
          case 1u:
          case 2u:
            uint64_t v25 = a2[1];
            *(void *)a1 = *a2;
            *((void *)a1 + 1) = v25;
            swift_bridgeObjectRetain();
            goto LABEL_24;
          case 3u:
            uint64_t v26 = a2[1];
            *(void *)a1 = *a2;
            *((void *)a1 + 1) = v26;
            a1[16] = *((unsigned char *)a2 + 16);
            swift_bridgeObjectRetain();
LABEL_24:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64));
            break;
        }
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (requestedTarget: ShareTarget, resolvedTarget: ResolvedShareTarget, recipients: PermittedRecipients));
        uint64_t v28 = *(int *)(v27 + 48);
        uint64_t v29 = &a1[v28];
        uint64_t v30 = (uint64_t)a2 + v28;
        uint64_t v32 = *(uint64_t *)((char *)a2 + v28);
        uint64_t v31 = *(uint64_t *)((char *)a2 + v28 + 8);
        *(void *)uint64_t v29 = v32;
        *((void *)v29 + 1) = v31;
        v29[16] = *(unsigned char *)(v30 + 16);
        *(void *)&a1[*(int *)(v27 + 64)] = *(char **)((char *)a2 + *(int *)(v27 + 64));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
        unint64_t v19 = (unint64_t)a2[1];
        if (v19 >= 3)
        {
          *(void *)a1 = *a2;
          *((void *)a1 + 1) = v19;
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        uint64_t v20 = *a2;
        id v21 = v20;
        *(void *)a1 = v20;
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void destroy for StartSharingFlow.StartSharingFlowState(uint64_t a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_release();
      return;
    case 4u:
      type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          swift_release();
          uint64_t v5 = a1
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                      + 48);
          uint64_t v6 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
          break;
        case 1u:
        case 2u:
        case 3u:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ShareTarget, recipients: PermittedRecipients, needsValueCount: Int, isShareInCallRequest: Bool));
      goto LABEL_18;
    case 5u:
      type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          swift_release();
          uint64_t v3 = a1
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                      + 48);
          uint64_t v4 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
          break;
        case 1u:
        case 2u:
        case 3u:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (requestedTarget: ShareTarget, resolvedTarget: ResolvedShareTarget, recipients: PermittedRecipients));
      swift_bridgeObjectRelease();
      goto LABEL_18;
    case 6u:
      if (*(void *)(a1 + 8) < 3uLL) {
        return;
      }
LABEL_18:
      swift_bridgeObjectRelease();
      break;
    case 8u:
      uint64_t v2 = *(void **)a1;

      break;
    default:
      return;
  }
}

uint64_t initializeWithCopy for StartSharingFlow.StartSharingFlowState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      *(void *)a1 = *(void *)a2;
      swift_retain();
      goto LABEL_22;
    case 4u:
      uint64_t v6 = type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          *(void *)a1 = *(void *)a2;
          swift_retain();
          uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                      + 48);
          uint64_t v8 = a1 + v7;
          uint64_t v9 = a2 + v7;
          uint64_t v10 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
          goto LABEL_15;
        case 1u:
        case 2u:
          uint64_t v19 = *(void *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = v19;
          swift_bridgeObjectRetain();
          goto LABEL_15;
        case 3u:
          uint64_t v20 = *(void *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = v20;
          *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
          swift_bridgeObjectRetain();
LABEL_15:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v6 - 8) + 64));
          break;
      }
      id v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ShareTarget, recipients: PermittedRecipients, needsValueCount: Int, isShareInCallRequest: Bool));
      *(void *)(a1 + v21[12]) = *(void *)(a2 + v21[12]);
      *(void *)(a1 + v21[16]) = *(void *)(a2 + v21[16]);
      *(unsigned char *)(a1 + v21[20]) = *(unsigned char *)(a2 + v21[20]);
      swift_bridgeObjectRetain();
      goto LABEL_22;
    case 5u:
      uint64_t v11 = type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          *(void *)a1 = *(void *)a2;
          swift_retain();
          uint64_t v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                       + 48);
          uint64_t v13 = a1 + v12;
          uint64_t v14 = a2 + v12;
          uint64_t v15 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
          goto LABEL_20;
        case 1u:
        case 2u:
          uint64_t v22 = *(void *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = v22;
          swift_bridgeObjectRetain();
          goto LABEL_20;
        case 3u:
          uint64_t v23 = *(void *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = v23;
          *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
          swift_bridgeObjectRetain();
LABEL_20:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v11 - 8) + 64));
          break;
      }
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (requestedTarget: ShareTarget, resolvedTarget: ResolvedShareTarget, recipients: PermittedRecipients));
      uint64_t v25 = *(int *)(v24 + 48);
      uint64_t v26 = a1 + v25;
      uint64_t v27 = a2 + v25;
      uint64_t v29 = *(void *)(a2 + v25);
      uint64_t v28 = *(void *)(a2 + v25 + 8);
      *(void *)uint64_t v26 = v29;
      *(void *)(v26 + 8) = v28;
      *(unsigned char *)(v26 + 16) = *(unsigned char *)(v27 + 16);
      *(void *)(a1 + *(int *)(v24 + 64)) = *(void *)(a2 + *(int *)(v24 + 64));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_22;
    case 6u:
      unint64_t v16 = *(void *)(a2 + 8);
      if (v16 >= 3)
      {
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v16;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      goto LABEL_22;
    case 8u:
      uint64_t v17 = *(void **)a2;
      id v18 = v17;
      *(void *)a1 = v17;
LABEL_22:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t assignWithCopy for StartSharingFlow.StartSharingFlowState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(a1, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(void *)a1 = *(void *)a2;
        swift_retain();
        goto LABEL_23;
      case 4u:
        uint64_t v6 = type metadata accessor for ShareTarget();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            *(void *)a1 = *(void *)a2;
            swift_retain();
            uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                        + 48);
            uint64_t v8 = a1 + v7;
            uint64_t v9 = a2 + v7;
            uint64_t v10 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
            goto LABEL_16;
          case 1u:
          case 2u:
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = *(void *)(a2 + 8);
            swift_bridgeObjectRetain();
            goto LABEL_16;
          case 3u:
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = *(void *)(a2 + 8);
            *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
            swift_bridgeObjectRetain();
LABEL_16:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v6 - 8) + 64));
            break;
        }
        id v18 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ShareTarget, recipients: PermittedRecipients, needsValueCount: Int, isShareInCallRequest: Bool));
        *(void *)(a1 + v18[12]) = *(void *)(a2 + v18[12]);
        *(void *)(a1 + v18[16]) = *(void *)(a2 + v18[16]);
        *(unsigned char *)(a1 + v18[20]) = *(unsigned char *)(a2 + v18[20]);
        swift_bridgeObjectRetain();
        goto LABEL_23;
      case 5u:
        uint64_t v11 = type metadata accessor for ShareTarget();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            *(void *)a1 = *(void *)a2;
            swift_retain();
            uint64_t v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                         + 48);
            uint64_t v13 = a1 + v12;
            uint64_t v14 = a2 + v12;
            uint64_t v15 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
            goto LABEL_21;
          case 1u:
          case 2u:
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = *(void *)(a2 + 8);
            swift_bridgeObjectRetain();
            goto LABEL_21;
          case 3u:
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = *(void *)(a2 + 8);
            *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
            swift_bridgeObjectRetain();
LABEL_21:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v11 - 8) + 64));
            break;
        }
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (requestedTarget: ShareTarget, resolvedTarget: ResolvedShareTarget, recipients: PermittedRecipients));
        uint64_t v20 = *(int *)(v19 + 48);
        uint64_t v21 = a1 + v20;
        *(void *)uint64_t v21 = *(void *)(a2 + v20);
        *(void *)(v21 + 8) = *(void *)(a2 + v20 + 8);
        *(unsigned char *)(v21 + 16) = *(unsigned char *)(a2 + v20 + 16);
        *(void *)(a1 + *(int *)(v19 + 64)) = *(void *)(a2 + *(int *)(v19 + 64));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_23;
      case 6u:
        if (*(void *)(a2 + 8) >= 3uLL)
        {
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        goto LABEL_23;
      case 8u:
        unint64_t v16 = *(void **)a2;
        id v17 = v16;
        *(void *)a1 = v16;
LABEL_23:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata accessor for StartSharingFlow.StartSharingFlowState(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for StartSharingFlow.StartSharingFlowState);
}

void *initializeWithTake for StartSharingFlow.StartSharingFlowState(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 5)
  {
    uint64_t v8 = type metadata accessor for ShareTarget();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                   + 48);
      uint64_t v15 = (char *)a1 + v14;
      unint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
      swift_storeEnumTagMultiPayload();
    }
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (requestedTarget: ShareTarget, resolvedTarget: ResolvedShareTarget, recipients: PermittedRecipients));
    uint64_t v19 = *(int *)(v18 + 48);
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    v20[16] = v21[16];
    *(void *)((char *)a1 + *(int *)(v18 + 64)) = *(void *)((char *)a2 + *(int *)(v18 + 64));
    goto LABEL_12;
  }
  if (EnumCaseMultiPayload == 4)
  {
    uint64_t v7 = type metadata accessor for ShareTarget();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                  + 48);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
      swift_storeEnumTagMultiPayload();
    }
    uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ShareTarget, recipients: PermittedRecipients, needsValueCount: Int, isShareInCallRequest: Bool));
    *(void *)((char *)a1 + v13[12]) = *(void *)((char *)a2 + v13[12]);
    *(void *)((char *)a1 + v13[16]) = *(void *)((char *)a2 + v13[16]);
    *((unsigned char *)a1 + v13[20]) = *((unsigned char *)a2 + v13[20]);
LABEL_12:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *assignWithTake for StartSharingFlow.StartSharingFlowState(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0((uint64_t)a1, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 5)
    {
      uint64_t v8 = type metadata accessor for ShareTarget();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        *a1 = *a2;
        uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                     + 48);
        uint64_t v15 = (char *)a1 + v14;
        unint64_t v16 = (char *)a2 + v14;
        uint64_t v17 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (requestedTarget: ShareTarget, resolvedTarget: ResolvedShareTarget, recipients: PermittedRecipients));
      uint64_t v19 = *(int *)(v18 + 48);
      uint64_t v20 = (char *)a1 + v19;
      uint64_t v21 = (char *)a2 + v19;
      *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
      v20[16] = v21[16];
      *(void *)((char *)a1 + *(int *)(v18 + 64)) = *(void *)((char *)a2 + *(int *)(v18 + 64));
      goto LABEL_13;
    }
    if (EnumCaseMultiPayload == 4)
    {
      uint64_t v7 = type metadata accessor for ShareTarget();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        *a1 = *a2;
        uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                    + 48);
        uint64_t v10 = (char *)a1 + v9;
        uint64_t v11 = (char *)a2 + v9;
        uint64_t v12 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ShareTarget, recipients: PermittedRecipients, needsValueCount: Int, isShareInCallRequest: Bool));
      *(void *)((char *)a1 + v13[12]) = *(void *)((char *)a2 + v13[12]);
      *(void *)((char *)a1 + v13[16]) = *(void *)((char *)a2 + v13[16]);
      *((unsigned char *)a1 + v13[20]) = *((unsigned char *)a2 + v13[20]);
LABEL_13:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata completion function for StartSharingFlow.StartSharingFlowState()
{
  uint64_t v0 = MEMORY[0x263F8CF70] + 64;
  uint64_t v9 = "\b";
  uint64_t v10 = MEMORY[0x263F8CF70] + 64;
  uint64_t v11 = MEMORY[0x263F8CF70] + 64;
  uint64_t v12 = MEMORY[0x263F8CF70] + 64;
  uint64_t result = type metadata accessor for ShareTarget();
  if (v2 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64;
    uint64_t v5 = &unk_22DDE9BD0;
    uint64_t v6 = v0;
    uint64_t v7 = &unk_22DDE9BE8;
    swift_getTupleTypeLayout();
    uint64_t v13 = &v8;
    swift_getTupleTypeLayout3();
    uint64_t v14 = &v3;
    uint64_t v15 = &unk_22DDE9C18;
    unint64_t v16 = &unk_22DDE9C30;
    uint64_t v17 = "\b";
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for StartSharingFlow.StartSharingFlowState(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type StartSharingFlow.StartSharingFlowState and conformance StartSharingFlow.StartSharingFlowState(&lazy protocol witness table cache variable for type StartSharingFlow.StartSharingFlowState and conformance StartSharingFlow.StartSharingFlowState, (void (*)(uint64_t))type metadata accessor for StartSharingFlow.StartSharingFlowState);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type StartSharingFlow.StartSharingFlowState and conformance StartSharingFlow.StartSharingFlowState(&lazy protocol witness table cache variable for type StartSharingFlow.StartSharingFlowState and conformance StartSharingFlow.StartSharingFlowState, (void (*)(uint64_t))type metadata accessor for StartSharingFlow.StartSharingFlowState);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type StartSharingFlow.StartSharingFlowState and conformance StartSharingFlow.StartSharingFlowState(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined consume of StartSharingFlow.StartSharingFlowError(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined init with take of ShareTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShareTarget();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined copy of StartSharingFlow.StartSharingFlowError(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_22DDDAC0C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in StartSharingFlow.validateIntent(needsValueCount:)(unsigned __int8 *a1)
{
  return closure #1 in StartSharingFlow.validateIntent(needsValueCount:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_22DDDACB8()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in StartSharingFlow.executeNeedsShareTargetFlow(with:onIntentReceived:)(uint64_t a1)
{
  return closure #1 in StartSharingFlow.executeNeedsShareTargetFlow(with:onIntentReceived:)(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

unint64_t lazy protocol witness table accessor for type PromptForValueFlowWrapper<NeedsShareTargetFlowStrategy> and conformance PromptForValueFlowWrapper<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptForValueFlowWrapper<NeedsShareTargetFlowStrategy> and conformance PromptForValueFlowWrapper<A>;
  if (!lazy protocol witness table cache variable for type PromptForValueFlowWrapper<NeedsShareTargetFlowStrategy> and conformance PromptForValueFlowWrapper<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PromptForValueFlowWrapper<NeedsShareTargetFlowStrategy>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptForValueFlowWrapper<NeedsShareTargetFlowStrategy> and conformance PromptForValueFlowWrapper<A>);
  }
  return result;
}

uint64_t specialized closure #1 in closure #1 in StartSharingFlow.executeNeedsShareTargetFlow(with:onIntentReceived:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  uint64_t v8 = MEMORY[0x270FA5388](started);
  uint64_t v34 = (uint64_t)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (uint64_t *)((char *)&v30 - v10);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.default);
  outlined init with copy of SharingIntent?(a1, (uint64_t)v38);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v30 = a4;
    uint64_t v31 = a3;
    uint64_t v32 = a2;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v35 = v16;
    *(_DWORD *)uint64_t v15 = 136315394;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v18 = static StartSharingFlow.typeName;
    unint64_t v17 = *(void *)algn_2685B8148;
    swift_bridgeObjectRetain();
    *(void *)&long long v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    outlined init with copy of SharingIntent?((uint64_t)v38, (uint64_t)&v36);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingIntent?);
    uint64_t v19 = String.init<A>(describing:)();
    *(void *)&long long v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of SharingIntent?((uint64_t)v38);
    _os_log_impl(&dword_22DD8A000, v13, v14, "%s: needs value flow succeeded with intent %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v16, -1, -1);
    MEMORY[0x230F996F0](v15, -1, -1);

    a3 = v31;
    a2 = v32;
  }
  else
  {
    outlined destroy of SharingIntent?((uint64_t)v38);
  }
  outlined init with copy of SharingIntent?(a1, (uint64_t)&v36);
  if (v37)
  {
    outlined init with take of SharingIntent(&v36, (uint64_t)v38);
    a3(v38);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  }
  else
  {
    outlined destroy of SharingIntent?((uint64_t)&v36);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      v38[0] = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v26 = static StartSharingFlow.typeName;
      unint64_t v27 = *(void *)algn_2685B8148;
      swift_bridgeObjectRetain();
      *(void *)&long long v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v22, v23, "%s: Encountered a nil intent - this should never happen", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v25, -1, -1);
      MEMORY[0x230F996F0](v24, -1, -1);
    }

    lazy protocol witness table accessor for type ExpanseError and conformance ExpanseError();
    uint64_t *v11 = swift_allocError();
    swift_storeEnumTagMultiPayload();
    uint64_t v28 = a2 + *(void *)(*(void *)a2 + 104);
    swift_beginAccess();
    uint64_t v29 = v34;
    _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOcTm_0(v28, v34, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    swift_beginAccess();
    outlined assign with copy of StartSharingFlow.StartSharingFlowState((uint64_t)v11, v28);
    swift_endAccess();
    specialized SharingFlow.state.didset(v29);
    _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0((uint64_t)v11, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    return _s19SiriExpanseInternal16StartSharingFlowC0deF5StateOWOhTm_0(v29, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  }
}

uint64_t outlined init with copy of SharingIntent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingIntent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SharingIntent?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharingIntent?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in StartSharingFlow.confirmTarget(requestedTarget:resolvedTarget:recipients:)(void **a1)
{
  return closure #1 in StartSharingFlow.confirmTarget(requestedTarget:resolvedTarget:recipients:)(a1, v1);
}

uint64_t outlined copy of StartSharingTargetResolution(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 1u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of Result<StartSharingTargetResolution, StartSharingTargetResolutionError>(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0) {
    return outlined consume of StartSharingTargetResolution(result, a2, a3, BYTE1(a3));
  }
  return result;
}

uint64_t outlined consume of StartSharingTargetResolution(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 1u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of Result<StartSharingTargetResolution, StartSharingTargetResolutionError>(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0) {
    return outlined copy of StartSharingTargetResolution(result, a2, a3, BYTE1(a3));
  }
  return result;
}

uint64_t sub_22DDDB3F0()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in StartSharingFlow.resolveTarget(_:recipients:needsValueCount:isShareInCallRequest:)(uint64_t a1)
{
  return closure #1 in StartSharingFlow.resolveTarget(_:recipients:needsValueCount:isShareInCallRequest:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_22DDDB430()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_22DDDB468()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);

  return MEMORY[0x270FA0238](v0, 96, 7);
}

uint64_t outlined init with copy of RecipientsResolver(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of RecipientsResolver(uint64_t a1)
{
  return a1;
}

uint64_t sub_22DDDB558()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in StartSharingFlow.validateRecipientsForIntent(needsValueCount:)(unsigned char *a1)
{
  return closure #1 in StartSharingFlow.validateRecipientsForIntent(needsValueCount:)(a1, v1[2], v1[3], v1[4]);
}

unint64_t destroy for StartSharingFlow.StartSharingFlowError(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for StartSharingFlow.StartSharingFlowError(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for StartSharingFlow.StartSharingFlowError(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for StartSharingFlow.StartSharingFlowError(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for StartSharingFlow.StartSharingFlowError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for StartSharingFlow.StartSharingFlowError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 2;
    }
  }
  return result;
}

void *destructiveInjectEnumTag for StartSharingFlow.StartSharingFlowError(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for StartSharingFlow.StartSharingFlowError()
{
  return &type metadata for StartSharingFlow.StartSharingFlowError;
}

uint64_t UsoEntity_common_AttachmentType.DefinedValues.preferSharingInCall.getter()
{
  uint64_t v1 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
  uint64_t v2 = *(void **)(v1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  uint64_t v25 = &v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v28 = &v23[-v6];
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  unint64_t v27 = &v23[-v8];
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = &v23[-v10];
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = &v23[-v12];
  uint64_t v14 = *MEMORY[0x263F73198];
  uint64_t v26 = (void (*)(unsigned char *, uint64_t, uint64_t))v2[13];
  v26(&v23[-v12], v14, v1);
  lazy protocol witness table accessor for type UsoEntity_common_AttachmentType.DefinedValues and conformance UsoEntity_common_AttachmentType.DefinedValues();
  uint64_t v29 = v0;
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v32 == v30 && v33 == v31) {
    char v15 = 1;
  }
  else {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = (void (*)(unsigned char *, uint64_t))v2[1];
  v16(v13, v1);
  unint64_t v17 = (void (*)(unsigned char *, uint64_t, uint64_t))v2[2];
  uint64_t v18 = v29;
  v17(v11, v29, v1);
  if (v15) {
    goto LABEL_9;
  }
  v26(v27, *MEMORY[0x263F731A0], v1);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v32 == v30 && v33 == v31)
  {
    swift_bridgeObjectRelease_n();
    v16(v27, v1);
    uint64_t v18 = v29;
LABEL_9:
    v16(v11, v1);
    uint64_t v19 = v28;
    v17(v28, v18, v1);
LABEL_10:
    char v20 = 1;
    goto LABEL_11;
  }
  int v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16(v27, v1);
  v16(v11, v1);
  uint64_t v19 = v28;
  v17(v28, v29, v1);
  if (v24) {
    goto LABEL_10;
  }
  uint64_t v22 = v25;
  v26(v25, *MEMORY[0x263F731E0], v1);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v32 == v30 && v33 == v31) {
    char v20 = 1;
  }
  else {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16(v22, v1);
LABEL_11:
  v16(v19, v1);
  return v20 & 1;
}

unint64_t ValidateStartSharingIntentFlow.ValidationResult.description.getter(char a1)
{
  if (a1 == 2) {
    return 0xD000000000000015;
  }
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  if (a1) {
    unint64_t v3 = 0x4D616956646E6573;
  }
  else {
    unint64_t v3 = 0xD000000000000014;
  }
  if (a1) {
    unint64_t v4 = 0xEF73656761737365;
  }
  else {
    unint64_t v4 = 0x800000022DDEA630;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0xD00000000000001ELL;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xD000000000000014;
  if (*v1) {
    unint64_t v2 = 0x4D616956646E6573;
  }
  unint64_t v3 = 0x800000022DDEA630;
  if (*v1) {
    unint64_t v3 = 0xEF73656761737365;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason()
{
  if (*v0) {
    return 0x4D616956646E6573;
  }
  else {
    return 0xD000000000000014;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ValidateStartSharingIntentFlow.ValidationResult(char *a1, char *a2)
{
  return specialized static ValidateStartSharingIntentFlow.ValidationResult.== infix(_:_:)(*a1, *a2);
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ValidateStartSharingIntentFlow.ValidationResult()
{
  return ValidateStartSharingIntentFlow.ValidationResult.description.getter(*v0);
}

uint64_t ValidateStartSharingIntentFlow.execute()(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  v2[7] = type metadata accessor for ShareTarget();
  void v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](ValidateStartSharingIntentFlow.execute(), 0, 0);
}

uint64_t ValidateStartSharingIntentFlow.execute()()
{
  long long v36 = v0;
  uint64_t v1 = (void *)v0[6];
  uint64_t v2 = v1[6];
  uint64_t v3 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v2);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 200))(v2, v3) & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v5 = v0[8];
  uint64_t v4 = v0[9];
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 192))(v6, v7);
  swift_storeEnumTagMultiPayload();
  char v8 = specialized static ShareTarget.== infix(_:_:)(v4, v5);
  outlined destroy of ShareTarget(v5);
  outlined destroy of ShareTarget(v4);
  if (v8)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.default);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v35 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v14 = static ValidateStartSharingIntentFlow.typeName;
      unint64_t v15 = unk_2685B8230;
      swift_bridgeObjectRetain();
      v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v10, v11, "%s: intent cannot be handled as a screen sharing or app casting intent because it is a SharePlay request with no target", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v13, -1, -1);
      MEMORY[0x230F996F0](v12, -1, -1);
    }

    char v16 = 0;
  }
  else
  {
LABEL_10:
    uint64_t v17 = v1[6];
    uint64_t v18 = v1[7];
    __swift_project_boxed_opaque_existential_1(v1 + 3, v17);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v18 + 216))(v17, v18))
    {
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.default);
      char v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        uint64_t v23 = swift_slowAlloc();
        uint64_t v35 = v23;
        *(_DWORD *)uint64_t v22 = 136315138;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v24 = static ValidateStartSharingIntentFlow.typeName;
        unint64_t v25 = unk_2685B8230;
        swift_bridgeObjectRetain();
        v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22DD8A000, v20, v21, "%s: intent cannot be handled as a screen sharing or app casting intent because it should use message sending", v22, 0xCu);
        char v16 = 1;
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v23, -1, -1);
        MEMORY[0x230F996F0](v22, -1, -1);
      }
      else
      {

        char v16 = 1;
      }
    }
    else
    {
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      __swift_project_value_buffer(v26, (uint64_t)static Logger.default);
      unint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        uint64_t v30 = swift_slowAlloc();
        uint64_t v35 = v30;
        *(_DWORD *)uint64_t v29 = 136315138;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v31 = static ValidateStartSharingIntentFlow.typeName;
        unint64_t v32 = unk_2685B8230;
        swift_bridgeObjectRetain();
        v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22DD8A000, v27, v28, "%s: intent to be handled as a screen sharing or app casting intent", v29, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v30, -1, -1);
        MEMORY[0x230F996F0](v29, -1, -1);
      }

      char v16 = 2;
    }
  }
  *(unsigned char *)(v0[6] + 16) = v16;
  static ExecuteResponse.complete()();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v33 = (uint64_t (*)(void))v0[1];
  return v33();
}

uint64_t type metadata accessor for ValidateStartSharingIntentFlow()
{
  return self;
}

uint64_t getEnumTagSinglePayload for ValidateStartSharingIntentFlow.ValidationResult(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE)
  {
    unsigned int v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 2;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x22DDDC768);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  BOOL v8 = v7 >= 2;
  unsigned int v9 = v7 - 2;
  if (!v8) {
    unsigned int v9 = -1;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for ValidateStartSharingIntentFlow.ValidationResult(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFE) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v7 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x22DDDC850);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ValidateStartSharingIntentFlow.ValidationResult()
{
  return &type metadata for ValidateStartSharingIntentFlow.ValidationResult;
}

uint64_t protocol witness for Flow.execute() in conformance ValidateStartSharingIntentFlow(uint64_t a1)
{
  unsigned int v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unsigned int v3 = v1;
  v3[1] = dispatch thunk of SharingPromptFlowStrategy.makePrompt();
  return ValidateStartSharingIntentFlow.execute()(a1);
}

uint64_t specialized static ValidateStartSharingIntentFlow.ValidationResult.== infix(_:_:)(char a1, char a2)
{
  char v3 = a2 == 2 && a1 == 2;
  if (a1 != 2 && a2 != 2)
  {
    if (a1) {
      unint64_t v4 = 0x4D616956646E6573;
    }
    else {
      unint64_t v4 = 0xD000000000000014;
    }
    if (a1) {
      unint64_t v5 = 0xEF73656761737365;
    }
    else {
      unint64_t v5 = 0x800000022DDEA630;
    }
    if (a2) {
      unint64_t v6 = 0x4D616956646E6573;
    }
    else {
      unint64_t v6 = 0xD000000000000014;
    }
    if (a2) {
      unint64_t v7 = 0xEF73656761737365;
    }
    else {
      unint64_t v7 = 0x800000022DDEA630;
    }
    if (v4 == v6 && v5 == v7) {
      char v3 = 1;
    }
    else {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v3 & 1;
}

uint64_t specialized ValidateStartSharingIntentFlow.on(input:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v17 = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v11 = static ValidateStartSharingIntentFlow.typeName;
    unint64_t v12 = unk_2685B8230;
    swift_bridgeObjectRetain();
    uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    lazy protocol witness table accessor for type Input and conformance Input();
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    _os_log_impl(&dword_22DD8A000, v7, v8, "%s: received input %s - this flow should never receive input, ignoring it...", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v10, -1, -1);
    MEMORY[0x230F996F0](v9, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  return 0;
}

unsigned char *storeEnumTagSinglePayload for ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22DDDCDB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason()
{
  return &type metadata for ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason;
}

unint64_t lazy protocol witness table accessor for type ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason and conformance ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason()
{
  unint64_t result = lazy protocol witness table cache variable for type ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason and conformance ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason;
  if (!lazy protocol witness table cache variable for type ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason and conformance ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason and conformance ValidateStartSharingIntentFlow.ValidationResult.ValidationFailureReason);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for PermittedRecipients(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PermittedRecipients(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for PermittedRecipients(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PermittedRecipients(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PermittedRecipients(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PermittedRecipients()
{
  return &type metadata for PermittedRecipients;
}

unint64_t PermittedRecipients.description.getter(uint64_t a1)
{
  unint64_t v1 = 0xD000000000000013;
  if (a1)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v3 = type metadata accessor for INPerson();
    v4._countAndFlagsBits = MEMORY[0x230F98CF0](a1, v3);
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = 41;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    return 0xD00000000000001ELL;
  }
  return v1;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance PermittedRecipients()
{
  return PermittedRecipients.description.getter(*v0);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PermittedRecipients(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 | v3) == 0;
  }
  else {
    return specialized static Array<A>.== infix(_:_:)(v2, v3);
  }
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  Swift::String v5 = (void *)((unint64_t)a1 >> 62);
  if ((unint64_t)a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6 == v22) {
      goto LABEL_5;
    }
    return 0;
  }
  if (v6 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    return 0;
  }
LABEL_5:
  if (!v6) {
    return 1;
  }
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a1 < 0) {
    uint64_t v7 = a1;
  }
  if (v5) {
    uint64_t v8 = v7;
  }
  uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v10 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v10 = v9;
  }
  if (v8 == v10) {
    return 1;
  }
  if (v6 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  unint64_t v23 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_42:
    uint64_t result = MEMORY[0x230F98F30](0, a1);
    goto LABEL_19;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_44;
  }
  uint64_t result = (uint64_t)*(id *)(a1 + 32);
LABEL_19:
  Swift::String v5 = (void *)result;
  unint64_t v2 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_44:
    id v12 = (id)MEMORY[0x230F98F30](0, a2);
LABEL_22:
    uint64_t v13 = v12;
    type metadata accessor for INPerson();
    char v14 = static NSObject.== infix(_:_:)();

    if (v14)
    {
      uint64_t v15 = 1 - v6;
      for (uint64_t i = 5; ; ++i)
      {
        uint64_t v6 = v15 + i == 5;
        if (v15 + i == 5) {
          return v6;
        }
        unint64_t v20 = i - 4;
        if (v23)
        {
          id v21 = (id)MEMORY[0x230F98F30](i - 4, a1);
          if (v2) {
            goto LABEL_24;
          }
        }
        else
        {
          if (v20 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_40:
            __break(1u);
            goto LABEL_41;
          }
          id v21 = *(id *)(a1 + 8 * i);
          if (v2)
          {
LABEL_24:
            id v17 = (id)MEMORY[0x230F98F30](i - 4, a2);
            goto LABEL_25;
          }
        }
        if (v20 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_40;
        }
        id v17 = *(id *)(a2 + 8 * i);
LABEL_25:
        uint64_t v18 = v17;
        char v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) == 0) {
          return v6;
        }
      }
    }
    return 0;
  }
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v12 = *(id *)(a2 + 32);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t specialized logIfThrows<A>(message:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  *(unsigned char *)(v7 + 96) = a6;
  *(void *)(v7 + 64) = a5;
  *(void *)(v7 + 72) = a7;
  *(void *)(v7 + 48) = a3;
  *(void *)(v7 + 56) = a4;
  *(void *)(v7 + 32) = a1;
  *(void *)(v7 + 40) = a2;
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v7 + 80) = v13;
  *uint64_t v13 = v7;
  v13[1] = specialized logIfThrows<A>(message:_:);
  return closure #1 in implicit closure #2 in ResponseExecutor.execute(response:)(a1, a4, a5, a6, a7);
}

uint64_t specialized logIfThrows<A>(message:_:)()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = specialized logIfThrows<A>(message:_:);
  }
  else {
    unint64_t v2 = specialized logIfThrows<A>(message:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = *(void *)(v0 + 56);
  unint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(unsigned char *)(v0 + 96);
  Swift::String v5 = type metadata accessor for ExpanseUIModel(0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 0, 1, v5);
  outlined consume of ExpanseUIModelConverter(v1, v2, v4);
  swift_release();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v24 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 88);
  unint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.default);
  swift_bridgeObjectRetain();
  uint64_t v3 = v1;
  swift_bridgeObjectRetain();
  uint64_t v4 = v1;
  Swift::String v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void **)(v0 + 88);
  uint64_t v9 = *(void *)(v0 + 48);
  if (v7)
  {
    uint64_t v22 = *(void *)(v0 + 40);
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    id v12 = swift_slowAlloc();
    unint64_t v23 = v12;
    *(_DWORD *)uint64_t v10 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v9, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 12) = 2112;
    uint64_t v13 = v8;
    char v14 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unsigned char *v11 = v14;

    _os_log_impl(&dword_22DD8A000, v5, v6, "%s: %@", (uint8_t *)v10, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v11, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v12, -1, -1);
    MEMORY[0x230F996F0](v10, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v15 = *(void *)(v0 + 56);
  uint64_t v16 = *(void *)(v0 + 64);
  id v17 = *(void *)(v0 + 32);
  uint64_t v18 = *(unsigned char *)(v0 + 96);
  char v19 = type metadata accessor for ExpanseUIModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v17, 1, 1, v19);
  outlined consume of ExpanseUIModelConverter(v15, v16, v18);
  swift_release();
  unint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

void specialized SharingFlow.state.didset(uint64_t a1)
{
}

void specialized SharingFlow.state.didset(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t))
{
  uint64_t v9 = v5;
  uint64_t v11 = a2(0);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  char v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v37 - v15;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.default);
  outlined init with copy of StopSharingFlow.StopSharingFlowState(a1, (uint64_t)v16, a3);
  swift_retain_n();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  int v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v38 = a3;
    os_log_t v39 = v18;
    uint64_t v22 = a5;
    uint64_t v23 = v21;
    uint64_t v41 = swift_slowAlloc();
    uint64_t v44 = v41;
    *(_DWORD *)uint64_t v23 = 136315650;
    int v40 = v20;
    uint64_t v25 = v9[2];
    unint64_t v24 = v9[3];
    swift_bridgeObjectRetain();
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    outlined init with copy of StopSharingFlow.StopSharingFlowState((uint64_t)v16, (uint64_t)v14, a3);
    uint64_t v26 = outlined destroy of StopSharingFlow.StopSharingFlowState((uint64_t)v16, a4);
    uint64_t v27 = v22(v26);
    unint64_t v29 = v28;
    outlined destroy of StopSharingFlow.StopSharingFlowState((uint64_t)v14, a4);
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 22) = 2080;
    uint64_t v30 = (uint64_t)v9 + *(void *)(*v9 + 104);
    swift_beginAccess();
    outlined init with copy of StopSharingFlow.StopSharingFlowState(v30, (uint64_t)v14, v38);
    uint64_t v31 = swift_release();
    uint64_t v32 = v22(v31);
    unint64_t v34 = v33;
    outlined destroy of StopSharingFlow.StopSharingFlowState((uint64_t)v14, a4);
    uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    os_log_t v35 = v39;
    _os_log_impl(&dword_22DD8A000, v39, (os_log_type_t)v40, "%s: transitioned from state %s to %s", (uint8_t *)v23, 0x20u);
    uint64_t v36 = v41;
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v36, -1, -1);
    MEMORY[0x230F996F0](v23, -1, -1);
  }
  else
  {
    outlined destroy of StopSharingFlow.StopSharingFlowState((uint64_t)v16, a4);

    swift_release_n();
  }
}

void specialized SharingFlow.intent.didset()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.default);
  swift_retain_n();
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v21 = v18;
    *(_DWORD *)uint64_t v4 = 136315394;
    uint64_t v5 = v0[2];
    unint64_t v6 = v0[3];
    swift_bridgeObjectRetain();
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    v17[1] = v4 + 14;
    uint64_t v7 = (void *)((char *)v0 + *(void *)(*v0 + 112));
    swift_beginAccess();
    uint64_t v8 = v7[3];
    uint64_t v9 = __swift_project_boxed_opaque_existential_1(v7, v8);
    uint64_t v10 = *(void *)(v8 - 8);
    MEMORY[0x270FA5388](v9);
    uint64_t v12 = (char *)v17 - v11;
    (*(void (**)(char *))(v10 + 16))((char *)v17 - v11);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v15 = v14;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v8);
    uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22DD8A000, v2, v3, "%s: intent set to: %s", (uint8_t *)v4, 0x16u);
    uint64_t v16 = v18;
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v16, -1, -1);
    MEMORY[0x230F996F0](v4, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t specialized SharingFlow.validateCallStatus(validationPassState:validationFailFallbackState:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for StopSharingFlow.StopSharingFlowState(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v9 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v18 - v10;
  outlined init with copy of ResponseExecuting(v2 + *(void *)(*(void *)v2 + 120), (uint64_t)v19);
  type metadata accessor for ValidateCallStatusFlow();
  uint64_t v12 = swift_allocObject();
  *(unsigned char *)(v12 + 16) = 5;
  outlined init with take of SharingIntent(v19, v12 + 24);
  *(void *)&v19[0] = v12;
  outlined init with copy of StopSharingFlow.StopSharingFlowState(a1, (uint64_t)v11, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  outlined init with copy of StopSharingFlow.StopSharingFlowState(a2, (uint64_t)v9, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  uint64_t v13 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = (v13 + 24) & ~v13;
  uint64_t v15 = (v7 + v13 + v14) & ~v13;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v2;
  outlined init with take of ShareTarget((uint64_t)v11, v16 + v14, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  outlined init with take of ShareTarget((uint64_t)v9, v16 + v15, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  lazy protocol witness table accessor for type StopSharingFlow.StopSharingFlowState and conformance StopSharingFlow.StopSharingFlowState(&lazy protocol witness table cache variable for type ValidateCallStatusFlow and conformance ValidateCallStatusFlow, (void (*)(uint64_t))type metadata accessor for ValidateCallStatusFlow);
  swift_retain();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  return swift_release();
}

{
  uint64_t v2;
  uint64_t started;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  long long v19[2];

  uint64_t started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  uint64_t v6 = *(void *)(started - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = MEMORY[0x270FA5388](started - 8);
  uint64_t v9 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v18 - v10;
  outlined init with copy of ResponseExecuting(v2 + *(void *)(*(void *)v2 + 120), (uint64_t)v19);
  type metadata accessor for ValidateCallStatusFlow();
  uint64_t v12 = swift_allocObject();
  *(unsigned char *)(v12 + 16) = 5;
  outlined init with take of SharingIntent(v19, v12 + 24);
  *(void *)&v19[0] = v12;
  outlined init with copy of StopSharingFlow.StopSharingFlowState(a1, (uint64_t)v11, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  outlined init with copy of StopSharingFlow.StopSharingFlowState(a2, (uint64_t)v9, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  uint64_t v13 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = (v13 + 24) & ~v13;
  uint64_t v15 = (v7 + v13 + v14) & ~v13;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v2;
  outlined init with take of ShareTarget((uint64_t)v11, v16 + v14, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  outlined init with take of ShareTarget((uint64_t)v9, v16 + v15, type metadata accessor for StartSharingFlow.StartSharingFlowState);
  lazy protocol witness table accessor for type StopSharingFlow.StopSharingFlowState and conformance StopSharingFlow.StopSharingFlowState(&lazy protocol witness table cache variable for type ValidateCallStatusFlow and conformance ValidateCallStatusFlow, (void (*)(uint64_t))type metadata accessor for ValidateCallStatusFlow);
  swift_retain();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  return swift_release();
}

uint64_t specialized closure #1 in SharingFlow.validateCallStatus(validationPassState:validationFailFallbackState:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for StopSharingFlow.StopSharingFlowState(0);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v32 - v12 + 16;
  switch(a1)
  {
    case 1:
      *uint64_t v13 = 0;
      goto LABEL_7;
    case 2:
      char v14 = 1;
      goto LABEL_4;
    case 3:
      uint64_t v19 = a2 + *(void *)(*(void *)a2 + 112);
      swift_beginAccess();
      outlined init with copy of ResponseExecuting(v19, (uint64_t)v32);
      uint64_t v20 = v33;
      uint64_t v21 = v34;
      __swift_project_boxed_opaque_existential_1(v32, v33);
      char v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 200))(v20, v21);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
      if (v22)
      {
        char v23 = 3;
LABEL_15:
        *uint64_t v13 = v23;
        swift_storeEnumTagMultiPayload();
        uint64_t v27 = a2 + *(void *)(*(void *)a2 + 104);
        swift_beginAccess();
        outlined init with copy of StopSharingFlow.StopSharingFlowState(v27, (uint64_t)v11, type metadata accessor for StopSharingFlow.StopSharingFlowState);
        swift_beginAccess();
        uint64_t v28 = (uint64_t)v13;
        uint64_t v29 = v27;
        goto LABEL_17;
      }
      outlined init with copy of ResponseExecuting(v19, (uint64_t)v32);
      uint64_t v24 = v33;
      uint64_t v25 = v34;
      __swift_project_boxed_opaque_existential_1(v32, v33);
      char v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 224))(v24, v25);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
      if (v26)
      {
        char v23 = 2;
        goto LABEL_15;
      }
      outlined init with copy of StopSharingFlow.StopSharingFlowState(a4, (uint64_t)v13, type metadata accessor for StopSharingFlow.StopSharingFlowState);
      uint64_t v30 = a2 + *(void *)(*(void *)a2 + 104);
      swift_beginAccess();
      outlined init with copy of StopSharingFlow.StopSharingFlowState(v30, (uint64_t)v11, type metadata accessor for StopSharingFlow.StopSharingFlowState);
      swift_beginAccess();
      uint64_t v28 = (uint64_t)v13;
      uint64_t v29 = v30;
LABEL_17:
      outlined assign with copy of StopSharingFlow.StopSharingFlowState(v28, v29, type metadata accessor for StopSharingFlow.StopSharingFlowState);
LABEL_9:
      swift_endAccess();
      specialized SharingFlow.state.didset((uint64_t)v11, type metadata accessor for StopSharingFlow.StopSharingFlowState, type metadata accessor for StopSharingFlow.StopSharingFlowState, type metadata accessor for StopSharingFlow.StopSharingFlowState, (uint64_t (*)(uint64_t))StopSharingFlow.StopSharingFlowState.description.getter);
      outlined destroy of StopSharingFlow.StopSharingFlowState((uint64_t)v13, type metadata accessor for StopSharingFlow.StopSharingFlowState);
      return outlined destroy of StopSharingFlow.StopSharingFlowState((uint64_t)v11, type metadata accessor for StopSharingFlow.StopSharingFlowState);
    case 4:
      lazy protocol witness table accessor for type ExpanseError and conformance ExpanseError();
      *(void *)uint64_t v13 = swift_allocError();
      goto LABEL_7;
    case 5:
      outlined init with copy of StopSharingFlow.StopSharingFlowState(a3, (uint64_t)v32 - v12 + 16, type metadata accessor for StopSharingFlow.StopSharingFlowState);
      uint64_t v15 = a2 + *(void *)(*(void *)a2 + 104);
      swift_beginAccess();
      uint64_t v16 = v15;
      uint64_t v17 = (uint64_t)v11;
      goto LABEL_8;
    default:
      char v14 = 4;
LABEL_4:
      *uint64_t v13 = v14;
LABEL_7:
      swift_storeEnumTagMultiPayload();
      uint64_t v15 = a2 + *(void *)(*(void *)a2 + 104);
      swift_beginAccess();
      uint64_t v16 = v15;
      uint64_t v17 = (uint64_t)v11;
LABEL_8:
      outlined init with copy of StopSharingFlow.StopSharingFlowState(v16, v17, type metadata accessor for StopSharingFlow.StopSharingFlowState);
      swift_beginAccess();
      outlined assign with copy of StopSharingFlow.StopSharingFlowState((uint64_t)v13, v15, type metadata accessor for StopSharingFlow.StopSharingFlowState);
      goto LABEL_9;
  }
}

{
  uint64_t started;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void v32[3];
  uint64_t v33;
  uint64_t v34;

  uint64_t started = type metadata accessor for StartSharingFlow.StartSharingFlowState(0);
  uint64_t v9 = MEMORY[0x270FA5388](started);
  uint64_t v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v32 - v12 + 16;
  switch(a1)
  {
    case 1:
      *uint64_t v13 = 0;
      goto LABEL_7;
    case 2:
      char v14 = 1;
      goto LABEL_4;
    case 3:
      uint64_t v19 = a2 + *(void *)(*(void *)a2 + 112);
      swift_beginAccess();
      outlined init with copy of ResponseExecuting(v19, (uint64_t)v32);
      uint64_t v20 = v33;
      uint64_t v21 = v34;
      __swift_project_boxed_opaque_existential_1(v32, v33);
      char v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 200))(v20, v21);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
      if (v22)
      {
        char v23 = 3;
LABEL_15:
        *uint64_t v13 = v23;
        swift_storeEnumTagMultiPayload();
        uint64_t v27 = a2 + *(void *)(*(void *)a2 + 104);
        swift_beginAccess();
        outlined init with copy of StopSharingFlow.StopSharingFlowState(v27, (uint64_t)v11, type metadata accessor for StartSharingFlow.StartSharingFlowState);
        swift_beginAccess();
        uint64_t v28 = (uint64_t)v13;
        uint64_t v29 = v27;
        goto LABEL_17;
      }
      outlined init with copy of ResponseExecuting(v19, (uint64_t)v32);
      uint64_t v24 = v33;
      uint64_t v25 = v34;
      __swift_project_boxed_opaque_existential_1(v32, v33);
      char v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 224))(v24, v25);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
      if (v26)
      {
        char v23 = 2;
        goto LABEL_15;
      }
      outlined init with copy of StopSharingFlow.StopSharingFlowState(a4, (uint64_t)v13, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      uint64_t v30 = a2 + *(void *)(*(void *)a2 + 104);
      swift_beginAccess();
      outlined init with copy of StopSharingFlow.StopSharingFlowState(v30, (uint64_t)v11, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      swift_beginAccess();
      uint64_t v28 = (uint64_t)v13;
      uint64_t v29 = v30;
LABEL_17:
      outlined assign with copy of StopSharingFlow.StopSharingFlowState(v28, v29, type metadata accessor for StartSharingFlow.StartSharingFlowState);
LABEL_9:
      swift_endAccess();
      specialized SharingFlow.state.didset((uint64_t)v11, type metadata accessor for StartSharingFlow.StartSharingFlowState, type metadata accessor for StartSharingFlow.StartSharingFlowState, type metadata accessor for StartSharingFlow.StartSharingFlowState, (uint64_t (*)(uint64_t))StartSharingFlow.StartSharingFlowState.description.getter);
      outlined destroy of StopSharingFlow.StopSharingFlowState((uint64_t)v13, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      return outlined destroy of StopSharingFlow.StopSharingFlowState((uint64_t)v11, type metadata accessor for StartSharingFlow.StartSharingFlowState);
    case 4:
      lazy protocol witness table accessor for type ExpanseError and conformance ExpanseError();
      *(void *)uint64_t v13 = swift_allocError();
      goto LABEL_7;
    case 5:
      outlined init with copy of StopSharingFlow.StopSharingFlowState(a3, (uint64_t)v32 - v12 + 16, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      uint64_t v15 = a2 + *(void *)(*(void *)a2 + 104);
      swift_beginAccess();
      uint64_t v16 = v15;
      uint64_t v17 = (uint64_t)v11;
      goto LABEL_8;
    default:
      char v14 = 4;
LABEL_4:
      *uint64_t v13 = v14;
LABEL_7:
      swift_storeEnumTagMultiPayload();
      uint64_t v15 = a2 + *(void *)(*(void *)a2 + 104);
      swift_beginAccess();
      uint64_t v16 = v15;
      uint64_t v17 = (uint64_t)v11;
LABEL_8:
      outlined init with copy of StopSharingFlow.StopSharingFlowState(v16, v17, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      swift_beginAccess();
      outlined assign with copy of StopSharingFlow.StopSharingFlowState((uint64_t)v13, v15, type metadata accessor for StartSharingFlow.StartSharingFlowState);
      goto LABEL_9;
  }
}

uint64_t specialized SharingFlow.makeResponseForCommonError(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
      uint64_t v7 = type metadata accessor for Responses.Common.CallOutgoing1on1(0);
      uint64_t v8 = (char **)&protocol witness table for Responses.Common.CallOutgoing1on1;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v6);
      char v4 = -124;
      break;
    case 2:
      uint64_t v7 = type metadata accessor for Responses.Common.NotInCall(0);
      uint64_t v8 = &protocol witness table for Responses.Common.NotInCall;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v6);
      char v4 = -107;
      break;
    case 3:
      uint64_t v7 = type metadata accessor for Responses.Common.SharePlayUnsupported(0);
      uint64_t v8 = (char **)&protocol witness table for Responses.Common.SharePlayUnsupported;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v6);
      char v4 = -102;
      break;
    case 4:
      uint64_t v7 = type metadata accessor for Responses.Common.ScreenSharingUnsupported(0);
      uint64_t v8 = (char **)&protocol witness table for Responses.Common.ScreenSharingUnsupported;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v6);
      char v4 = -103;
      break;
    default:
      uint64_t v7 = type metadata accessor for Responses.Common.CallOnHold(0);
      uint64_t v8 = (char **)&protocol witness table for Responses.Common.CallOnHold;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v6);
      char v4 = -125;
      break;
  }
  *(unsigned char *)boxed_opaque_existential_1 = v4;
  static DialogPhase.completion.getter();
  specialized SharingFlow.makeOutputDialogAndCompleteFlowResponse(dialogResponse:)((uint64_t)v6, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t specialized SharingFlow.makeOutputDialogAndCompleteFlowResponse(dialogResponse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.default);
  outlined init with copy of ResponseExecuting(a1, (uint64_t)&v36);
  swift_retain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v32 = a2;
    uint64_t v31 = swift_slowAlloc();
    v35[0] = v31;
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v9 = v2[2];
    unint64_t v10 = v2[3];
    swift_bridgeObjectRetain();
    *(void *)&v34[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    uint64_t v11 = a1;
    uint64_t v12 = v37;
    uint64_t v13 = v38;
    __swift_project_boxed_opaque_existential_1(&v36, v37);
    char v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
    uint64_t v15 = CATIdentifier.stringValue.getter(v14);
    *(void *)&v34[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a1 = v11;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
    _os_log_impl(&dword_22DD8A000, v6, v7, "%s: Outputting %s dialog and completing flow", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v31, -1, -1);
    MEMORY[0x230F996F0](v8, -1, -1);
  }
  else
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
  }

  outlined init with copy of ResponseExecuting(a1, (uint64_t)&v36);
  outlined init with copy of ResponseExecuting((uint64_t)v2 + *(void *)(*v2 + 128), (uint64_t)v35);
  outlined init with copy of ResponseExecuting((uint64_t)v2 + *(void *)(*v2 + 136), (uint64_t)v34);
  uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v35, v35[3]);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (uint64_t *)((char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  uint64_t v21 = *v19;
  uint64_t v22 = type metadata accessor for ResponseExecutor();
  long long v33[3] = v22;
  v33[4] = &protocol witness table for ResponseExecutor;
  v33[0] = v21;
  type metadata accessor for OutputDialogFlow();
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v33, v22);
  MEMORY[0x270FA5388](v24);
  char v26 = (uint64_t *)((char *)&v30 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v27 + 16))(v26);
  uint64_t v28 = *v26;
  *(void *)(v23 + 88) = v22;
  *(void *)(v23 + 96) = &protocol witness table for ResponseExecutor;
  *(void *)(v23 + 64) = v28;
  *(unsigned char *)(v23 + 16) = 0;
  outlined init with take of SharingIntent(&v36, v23 + 24);
  outlined init with take of SharingIntent(v34, v23 + 104);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  *(void *)&long long v36 = v23;
  lazy protocol witness table accessor for type StopSharingFlow.StopSharingFlowState and conformance StopSharingFlow.StopSharingFlowState((unint64_t *)&lazy protocol witness table cache variable for type OutputDialogFlow and conformance OutputDialogFlow, (void (*)(uint64_t))type metadata accessor for OutputDialogFlow);
  static ExecuteResponse.complete<A>(next:)();
  return swift_release();
}

unint64_t StopSharingFlow.StopSharingFlowState.description.getter()
{
  uint64_t v1 = type metadata accessor for ShareTarget();
  MEMORY[0x270FA5388](v1 - 8);
  os_log_type_t v3 = (char *)v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for StopSharingFlow.StopSharingFlowState(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  os_log_type_t v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  unint64_t v10 = (char *)v35 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (unsigned __int8 *)v35 - v11;
  outlined init with copy of StopSharingFlow.StopSharingFlowState(v0, (uint64_t)v35 - v11, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  unint64_t v13 = 0x696C616974696E69;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of ShareTarget((uint64_t)v12, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ShareTarget);
      unint64_t v36 = 0;
      unint64_t v37 = 0xE000000000000000;
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      unint64_t v36 = 0xD000000000000010;
      unint64_t v37 = 0x800000022DDEBC50;
      v25._countAndFlagsBits = ShareTarget.description.getter();
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      v26._countAndFlagsBits = 41;
      v26._object = (void *)0xE100000000000000;
      String.append(_:)(v26);
      unint64_t v13 = v36;
      outlined destroy of StopSharingFlow.StopSharingFlowState((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ShareTarget);
      return v13;
    case 2u:
      int v27 = *v12;
      unint64_t v36 = 0;
      unint64_t v37 = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      unint64_t v36 = 0xD00000000000001BLL;
      unint64_t v37 = 0x800000022DDEBEE0;
      if (v27) {
        unint64_t v24 = 0xD000000000000012;
      }
      else {
        unint64_t v24 = 0xD000000000000020;
      }
      if (v27) {
        unint64_t v23 = 0x800000022DDEBF00;
      }
      else {
        unint64_t v23 = 0x800000022DDEBF20;
      }
      goto LABEL_22;
    case 3u:
      uint64_t v22 = *v12;
      unint64_t v36 = 0;
      unint64_t v37 = 0xE000000000000000;
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      unint64_t v36 = 0xD000000000000016;
      unint64_t v37 = 0x800000022DDEBB40;
      unint64_t v23 = 0xEA0000000000646CLL;
      unint64_t v24 = 0x6F486E4F6C6C6163;
      switch(v22)
      {
        case 1:
          unint64_t v23 = 0x800000022DDEA5F0;
          unint64_t v24 = 0xD000000000000010;
          break;
        case 2:
          unint64_t v23 = 0xE90000000000006CLL;
          unint64_t v24 = 0x6C61436E49746F6ELL;
          break;
        case 3:
          unint64_t v24 = 0xD000000000000014;
          uint64_t v31 = "sharePlayUnsupported";
          goto LABEL_21;
        case 4:
          unint64_t v24 = 0xD000000000000012;
          uint64_t v31 = "sharingUnsupported";
LABEL_21:
          unint64_t v23 = (unint64_t)(v31 - 32) | 0x8000000000000000;
          break;
        default:
          break;
      }
LABEL_22:
      unint64_t v32 = v23;
      String.append(_:)(*(Swift::String *)&v24);
      swift_bridgeObjectRelease();
      v33._countAndFlagsBits = 41;
      v33._object = (void *)0xE100000000000000;
      String.append(_:)(v33);
      goto LABEL_23;
    case 4u:
      uint64_t v28 = *(void **)v12;
      unint64_t v36 = 0;
      unint64_t v37 = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      v29._countAndFlagsBits = 0xD000000000000017;
      v29._object = (void *)0x800000022DDEADB0;
      String.append(_:)(v29);
      v35[1] = v28;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      _print_unlocked<A, B>(_:_:)();
      v30._countAndFlagsBits = 41;
      v30._object = (void *)0xE100000000000000;
      String.append(_:)(v30);

LABEL_23:
      unint64_t v13 = v36;
      break;
    case 5u:
      return v13;
    case 6u:
      unint64_t v13 = 0x6E696D726F666572;
      break;
    case 7u:
      unint64_t v36 = 0;
      unint64_t v37 = 0xE000000000000000;
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      unint64_t v13 = 0xD000000000000033;
      break;
    case 8u:
      unint64_t v36 = 0;
      unint64_t v37 = 0xE000000000000000;
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      unint64_t v13 = 0xD00000000000003ELL;
      break;
    case 9u:
      unint64_t v13 = 0xD000000000000010;
      break;
    default:
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (validationPassState: StopSharingFlow.StopSharingFlowState, validationFailFallbackState: StopSharingFlow.StopSharingFlowState));
      uint64_t v15 = swift_projectBox();
      uint64_t v16 = v15 + *(int *)(v14 + 48);
      outlined init with copy of StopSharingFlow.StopSharingFlowState(v15, (uint64_t)v10, type metadata accessor for StopSharingFlow.StopSharingFlowState);
      outlined init with copy of StopSharingFlow.StopSharingFlowState(v16, (uint64_t)v7, type metadata accessor for StopSharingFlow.StopSharingFlowState);
      unint64_t v36 = 0;
      unint64_t v37 = 0xE000000000000000;
      _StringGuts.grow(_:)(78);
      v17._countAndFlagsBits = 0xD00000000000002ALL;
      v17._object = (void *)0x800000022DDEBD40;
      String.append(_:)(v17);
      v18._countAndFlagsBits = StopSharingFlow.StopSharingFlowState.description.getter();
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19._countAndFlagsBits = 0xD00000000000001FLL;
      v19._object = (void *)0x800000022DDEBD70;
      String.append(_:)(v19);
      v20._countAndFlagsBits = StopSharingFlow.StopSharingFlowState.description.getter();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      v21._countAndFlagsBits = 41;
      v21._object = (void *)0xE100000000000000;
      String.append(_:)(v21);
      unint64_t v13 = v36;
      outlined destroy of StopSharingFlow.StopSharingFlowState((uint64_t)v7, type metadata accessor for StopSharingFlow.StopSharingFlowState);
      outlined destroy of StopSharingFlow.StopSharingFlowState((uint64_t)v10, type metadata accessor for StopSharingFlow.StopSharingFlowState);
      swift_release();
      break;
  }
  return v13;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance StopSharingFlow.StopSharingFlowError()
{
  if (*v0) {
    return 0xD000000000000012;
  }
  else {
    return 0xD000000000000020;
  }
}

void StopSharingFlow.exitValue.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t StopSharingFlow.on(input:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  os_log_type_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v17 = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v11 = static StopSharingFlow.typeName;
    unint64_t v12 = qword_2685B8270;
    swift_bridgeObjectRetain();
    uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    lazy protocol witness table accessor for type StopSharingFlow.StopSharingFlowState and conformance StopSharingFlow.StopSharingFlowState((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, MEMORY[0x263F6FF40]);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    _os_log_impl(&dword_22DD8A000, v7, v8, "%s: received input %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v10, -1, -1);
    MEMORY[0x230F996F0](v9, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  return 0;
}

uint64_t StopSharingFlow.execute()(uint64_t a1)
{
  v2[66] = v1;
  v2[65] = a1;
  type metadata accessor for ShareTarget();
  v2[67] = swift_task_alloc();
  v2[68] = type metadata accessor for StopSharingFlow.StopSharingFlowState(0);
  v2[69] = swift_task_alloc();
  v2[70] = swift_task_alloc();
  v2[71] = swift_task_alloc();
  return MEMORY[0x270FA2498](StopSharingFlow.execute(), 0, 0);
}

uint64_t StopSharingFlow.execute()()
{
  uint64_t v117 = v0;
  uint64_t v105 = v0 + 2;
  unint64_t v110 = v0 + 7;
  os_log_type_t v104 = v0 + 12;
  unint64_t v111 = v0 + 17;
  uint64_t v106 = (long long *)(v0 + 22);
  uint64_t v108 = v0 + 27;
  uint64_t v1 = v0[71];
  uint64_t v2 = v0[66] + *(void *)(*(void *)v0[66] + 104);
  swift_beginAccess();
  outlined init with copy of StopSharingFlow.StopSharingFlowState(v2, v1, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of ShareTarget(v0[71], v0[67], (uint64_t (*)(void))type metadata accessor for ShareTarget);
      os_log_type_t v8 = (void *)swift_task_alloc();
      v0[72] = v8;
      *os_log_type_t v8 = v0;
      v8[1] = StopSharingFlow.execute();
      uint64_t v9 = v0[67];
      uint64_t v10 = v0[65];
      return StopSharingFlow.resolveTarget(_:)(v10, v9);
    case 2u:
      LODWORD(v12) = *(unsigned __int8 *)v0[71];
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static Logger.default);
      unint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v14, v15))
      {
        int v114 = v12;
        uint64_t v16 = swift_slowAlloc();
        uint64_t v112 = swift_slowAlloc();
        v116[0] = v112;
        *(_DWORD *)uint64_t v16 = 136315650;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v17 = static StopSharingFlow.typeName;
        unint64_t v18 = qword_2685B8270;
        swift_bridgeObjectRetain();
        v0[53] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v16 + 12) = 2080;
        uint64_t v19 = static StopSharingFlow.typeName;
        unint64_t v12 = qword_2685B8270;
        swift_bridgeObjectRetain();
        v0[47] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v12, v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v16 + 22) = 2080;
        LOBYTE(v12) = v114;
        if (v114) {
          uint64_t v20 = 0xD000000000000012;
        }
        else {
          uint64_t v20 = 0xD000000000000020;
        }
        if (v114) {
          unint64_t v21 = 0x800000022DDEBF00;
        }
        else {
          unint64_t v21 = 0x800000022DDEBF20;
        }
        v0[48] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22DD8A000, v14, v15, "%s: %s failed with stop sharing error: %s", (uint8_t *)v16, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v112, -1, -1);
        MEMORY[0x230F996F0](v16, -1, -1);
      }

      if (v12)
      {
        uint64_t v22 = type metadata accessor for Responses.StopSharing.NothingBeingShared(0);
        char v23 = -106;
        unint64_t v24 = &protocol witness table for Responses.StopSharing.NothingBeingShared;
      }
      else
      {
        uint64_t v22 = type metadata accessor for Responses.StopSharing.CannotUnshareRemotelyOwnedTarget(0);
        char v23 = -120;
        unint64_t v24 = &protocol witness table for Responses.StopSharing.CannotUnshareRemotelyOwnedTarget;
      }
      uint64_t v77 = v0[65];
      v0[30] = v22;
      v0[31] = v24;
      *(unsigned char *)__swift_allocate_boxed_opaque_existential_1(v108) = v23;
      static DialogPhase.completion.getter();
      specialized SharingFlow.makeOutputDialogAndCompleteFlowResponse(dialogResponse:)((uint64_t)v108, v77);
      uint64_t v78 = (uint64_t)(v0 + 27);
      goto LABEL_53;
    case 3u:
      uint64_t v25 = *(unsigned __int8 *)v0[71];
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      __swift_project_value_buffer(v26, (uint64_t)static Logger.default);
      int v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = swift_slowAlloc();
        uint64_t v30 = swift_slowAlloc();
        v116[0] = v30;
        *(_DWORD *)uint64_t v29 = 136315650;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v31 = static StopSharingFlow.typeName;
        unint64_t v32 = qword_2685B8270;
        swift_bridgeObjectRetain();
        v0[50] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v29 + 12) = 2080;
        uint64_t v33 = static StopSharingFlow.typeName;
        unint64_t v34 = qword_2685B8270;
        swift_bridgeObjectRetain();
        v0[62] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v29 + 22) = 2080;
        unint64_t v35 = 0xEA0000000000646CLL;
        uint64_t v36 = 0x6F486E4F6C6C6163;
        switch(v25)
        {
          case 1:
            uint64_t v36 = 0xD000000000000010;
            unint64_t v37 = "callOutgoing1on1";
            goto LABEL_71;
          case 2:
            unint64_t v35 = 0xE90000000000006CLL;
            uint64_t v36 = 0x6C61436E49746F6ELL;
            break;
          case 3:
            uint64_t v36 = 0xD000000000000014;
            unint64_t v37 = "sharePlayUnsupported";
LABEL_71:
            unint64_t v35 = (unint64_t)(v37 - 32) | 0x8000000000000000;
            break;
          case 4:
            unint64_t v35 = 0x800000022DDEABA0;
            uint64_t v36 = 0xD000000000000012;
            break;
          default:
            break;
        }
        v0[61] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v35, v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22DD8A000, v27, v28, "%s: %s failed with common error: %s", (uint8_t *)v29, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v30, -1, -1);
        MEMORY[0x230F996F0](v29, -1, -1);
      }

      specialized SharingFlow.makeResponseForCommonError(_:)(v25, v0[65]);
      break;
    case 4u:
      uint64_t v38 = *(void **)v0[71];
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      __swift_project_value_buffer(v39, (uint64_t)static Logger.default);
      id v40 = v38;
      id v41 = v38;
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = swift_slowAlloc();
        uint64_t v113 = swift_slowAlloc();
        v116[0] = v113;
        *(_DWORD *)uint64_t v44 = 136315650;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v45 = static StopSharingFlow.typeName;
        unint64_t v46 = qword_2685B8270;
        swift_bridgeObjectRetain();
        v0[58] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v44 + 12) = 2080;
        uint64_t v47 = static StopSharingFlow.typeName;
        unint64_t v48 = qword_2685B8270;
        swift_bridgeObjectRetain();
        v0[54] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v44 + 22) = 2080;
        v0[49] = v38;
        id v49 = v38;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v50 = String.init<A>(describing:)();
        v0[55] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_22DD8A000, v42, v43, "%s: %s failed with unknown/unexpected error: %s", (uint8_t *)v44, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v113, -1, -1);
        MEMORY[0x230F996F0](v44, -1, -1);
      }
      else
      {
      }
      uint64_t v79 = v0[65];
      uint64_t v80 = type metadata accessor for Responses.Common.GenericError(0);
      v0[10] = v80;
      v0[11] = &protocol witness table for Responses.Common.GenericError;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v110);
      static DialogPhase.completion.getter();
      *(unsigned char *)boxed_opaque_existential_1 = -112;
      *((unsigned char *)boxed_opaque_existential_1 + *(int *)(v80 + 24)) = 0;
      specialized SharingFlow.makeOutputDialogAndCompleteFlowResponse(dialogResponse:)((uint64_t)v110, v79);

      uint64_t v78 = (uint64_t)(v0 + 7);
LABEL_53:
      __swift_destroy_boxed_opaque_existential_1(v78);
      break;
    case 5u:
      uint64_t v52 = (uint64_t *)v0[70];
      uint64_t v53 = v0[69];
      uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (validationPassState: StopSharingFlow.StopSharingFlowState, validationFailFallbackState: StopSharingFlow.StopSharingFlowState));
      uint64_t v55 = swift_allocBox();
      Swift::String v57 = (uint64_t *)(v56 + *(int *)(v54 + 48));
      swift_storeEnumTagMultiPayload();
      lazy protocol witness table accessor for type ExpanseError and conformance ExpanseError();
      *Swift::String v57 = swift_allocError();
      swift_storeEnumTagMultiPayload();
      *uint64_t v52 = v55;
      swift_storeEnumTagMultiPayload();
      outlined init with copy of StopSharingFlow.StopSharingFlowState(v2, v53, type metadata accessor for StopSharingFlow.StopSharingFlowState);
      swift_beginAccess();
      outlined assign with copy of StopSharingFlow.StopSharingFlowState((uint64_t)v52, v2, type metadata accessor for StopSharingFlow.StopSharingFlowState);
      swift_endAccess();
      specialized SharingFlow.state.didset(v53, type metadata accessor for StopSharingFlow.StopSharingFlowState, type metadata accessor for StopSharingFlow.StopSharingFlowState, type metadata accessor for StopSharingFlow.StopSharingFlowState, (uint64_t (*)(uint64_t))StopSharingFlow.StopSharingFlowState.description.getter);
      outlined destroy of StopSharingFlow.StopSharingFlowState((uint64_t)v52, type metadata accessor for StopSharingFlow.StopSharingFlowState);
      outlined destroy of StopSharingFlow.StopSharingFlowState(v53, type metadata accessor for StopSharingFlow.StopSharingFlowState);
      goto LABEL_68;
    case 6u:
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v58 = type metadata accessor for Logger();
      __swift_project_value_buffer(v58, (uint64_t)static Logger.default);
      swift_retain_n();
      unint64_t v59 = Logger.logObject.getter();
      os_log_type_t v60 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v59, v60))
      {
        os_log_type_t v109 = v60;
        uint64_t v61 = swift_slowAlloc();
        uint64_t v107 = swift_slowAlloc();
        v116[0] = v107;
        *(_DWORD *)uint64_t v61 = 136315394;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v62 = v0[66];
        uint64_t v64 = static StopSharingFlow.typeName;
        unint64_t v63 = qword_2685B8270;
        swift_bridgeObjectRetain();
        v0[60] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v63, v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v61 + 12) = 2080;
        uint64_t v65 = v62 + *(void *)(*(void *)v62 + 112);
        swift_beginAccess();
        outlined init with copy of ResponseExecuting(v65, (uint64_t)v105);
        __swift_project_boxed_opaque_existential_1(v105, v0[5]);
        uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v68 = v67;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v105);
        v0[63] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v68, v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_22DD8A000, v59, v109, "%s: Intent before reformation: %s", (uint8_t *)v61, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v107, -1, -1);
        MEMORY[0x230F996F0](v61, -1, -1);
      }
      else
      {
        swift_release_n();
      }
      uint64_t v82 = v0[66] + *(void *)(*(void *)v0[66] + 112);
      swift_beginAccess();
      uint64_t v83 = *(void *)(v82 + 24);
      uint64_t v84 = *(void *)(v82 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v82, v83);
      LOBYTE(v83) = (*(uint64_t (**)(uint64_t, uint64_t))(v84 + 232))(v83, v84);
      swift_endAccess();
      specialized SharingFlow.intent.didset();
      if (v83)
      {
        swift_retain_n();
        uint64_t v85 = Logger.logObject.getter();
        os_log_type_t v86 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v85, v86))
        {
          uint64_t v87 = swift_slowAlloc();
          uint64_t v115 = swift_slowAlloc();
          v116[0] = v115;
          *(_DWORD *)uint64_t v87 = 136315394;
          if (one-time initialization token for typeName != -1) {
            swift_once();
          }
          uint64_t v89 = static StopSharingFlow.typeName;
          unint64_t v88 = qword_2685B8270;
          swift_bridgeObjectRetain();
          v0[57] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v88, v116);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v87 + 12) = 2080;
          outlined init with copy of ResponseExecuting(v82, (uint64_t)v104);
          __swift_project_boxed_opaque_existential_1(v104, v0[15]);
          uint64_t v90 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v92 = v91;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v104);
          v0[59] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v92, v116);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_release_n();
          _os_log_impl(&dword_22DD8A000, v85, v86, "%s: Intent after reformation: %s", (uint8_t *)v87, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x230F996F0](v115, -1, -1);
          MEMORY[0x230F996F0](v87, -1, -1);
        }
        else
        {
          swift_release_n();
        }
      }
      else
      {
        os_log_type_t v93 = Logger.logObject.getter();
        os_log_type_t v94 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v93, v94))
        {
          uint64_t v95 = (uint8_t *)swift_slowAlloc();
          uint64_t v96 = swift_slowAlloc();
          v116[0] = v96;
          *(_DWORD *)uint64_t v95 = 136315138;
          if (one-time initialization token for typeName != -1) {
            swift_once();
          }
          uint64_t v97 = static StopSharingFlow.typeName;
          unint64_t v98 = qword_2685B8270;
          swift_bridgeObjectRetain();
          v0[56] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v98, v116);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_22DD8A000, v93, v94, "%s: Intent unchanged by reformation", v95, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x230F996F0](v96, -1, -1);
          MEMORY[0x230F996F0](v95, -1, -1);
        }
      }
      uint64_t v99 = v0[70];
      uint64_t v100 = v0[69];
      outlined init with copy of ResponseExecuting(v82, (uint64_t)v111);
      uint64_t v101 = v0[20];
      uint64_t v102 = v0[21];
      __swift_project_boxed_opaque_existential_1(v111, v101);
      (*(void (**)(uint64_t, uint64_t))(v102 + 192))(v101, v102);
      swift_storeEnumTagMultiPayload();
      outlined init with copy of StopSharingFlow.StopSharingFlowState(v2, v100, type metadata accessor for StopSharingFlow.StopSharingFlowState);
      swift_beginAccess();
      outlined assign with copy of StopSharingFlow.StopSharingFlowState(v99, v2, type metadata accessor for StopSharingFlow.StopSharingFlowState);
      swift_endAccess();
      specialized SharingFlow.state.didset(v100, type metadata accessor for StopSharingFlow.StopSharingFlowState, type metadata accessor for StopSharingFlow.StopSharingFlowState, type metadata accessor for StopSharingFlow.StopSharingFlowState, (uint64_t (*)(uint64_t))StopSharingFlow.StopSharingFlowState.description.getter);
      outlined destroy of StopSharingFlow.StopSharingFlowState(v99, type metadata accessor for StopSharingFlow.StopSharingFlowState);
      outlined destroy of StopSharingFlow.StopSharingFlowState(v100, type metadata accessor for StopSharingFlow.StopSharingFlowState);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v111);
LABEL_68:
      static ExecuteResponse.ongoing(requireInput:)();
      break;
    case 7u:
      StopSharingFlow.stopSharingTarget(_:)(v0[65]);
      break;
    case 8u:
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v69 = type metadata accessor for Logger();
      __swift_project_value_buffer(v69, (uint64_t)static Logger.default);
      uint64_t v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v70, v71))
      {
        uint64_t v72 = swift_slowAlloc();
        uint64_t v73 = swift_slowAlloc();
        v116[0] = v73;
        *(_DWORD *)uint64_t v72 = 136315394;
        if (one-time initialization token for typeName != -1) {
          swift_once();
        }
        uint64_t v74 = static StopSharingFlow.typeName;
        unint64_t v75 = qword_2685B8270;
        swift_bridgeObjectRetain();
        v0[51] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v72 + 12) = 2080;
        v0[52] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000022DDEA750, v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_22DD8A000, v70, v71, "%s: Successfully stopped sharing %s; dismissing Siri and completing flow",
          (uint8_t *)v72,
          0x16u);
        swift_arrayDestroy();
        MEMORY[0x230F996F0](v73, -1, -1);
        MEMORY[0x230F996F0](v72, -1, -1);
      }

      outlined init with copy of ResponseExecuting(v0[66] + *(void *)(*(void *)v0[66] + 136), (uint64_t)v106);
      type metadata accessor for DismissSiriFlow();
      uint64_t v76 = swift_allocObject();
      outlined init with take of SharingIntent(v106, v76 + 16);
      v0[64] = v76;
      lazy protocol witness table accessor for type StopSharingFlow.StopSharingFlowState and conformance StopSharingFlow.StopSharingFlowState(&lazy protocol witness table cache variable for type DismissSiriFlow and conformance DismissSiriFlow, (void (*)(uint64_t))type metadata accessor for DismissSiriFlow);
      static ExecuteResponse.complete<A>(next:)();
      swift_release();
      break;
    case 9u:
      static ExecuteResponse.complete()();
      break;
    default:
      uint64_t v3 = v0[70];
      uint64_t v4 = v0[69];
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (validationPassState: StopSharingFlow.StopSharingFlowState, validationFailFallbackState: StopSharingFlow.StopSharingFlowState));
      uint64_t v6 = swift_projectBox();
      uint64_t v7 = v6 + *(int *)(v5 + 48);
      outlined init with copy of StopSharingFlow.StopSharingFlowState(v6, v3, type metadata accessor for StopSharingFlow.StopSharingFlowState);
      outlined init with copy of StopSharingFlow.StopSharingFlowState(v7, v4, type metadata accessor for StopSharingFlow.StopSharingFlowState);
      specialized SharingFlow.validateCallStatus(validationPassState:validationFailFallbackState:)(v3, v4);
      outlined destroy of StopSharingFlow.StopSharingFlowState(v4, type metadata accessor for StopSharingFlow.StopSharingFlowState);
      outlined destroy of StopSharingFlow.StopSharingFlowState(v3, type metadata accessor for StopSharingFlow.StopSharingFlowState);
      swift_release();
      break;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v103 = (uint64_t (*)(void))v0[1];
  return v103();
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](StopSharingFlow.execute(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of StopSharingFlow.StopSharingFlowState(*(void *)(v0 + 536), (uint64_t (*)(void))type metadata accessor for ShareTarget);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t StopSharingFlow.resolveTarget(_:)(uint64_t a1, uint64_t a2)
{
  v3[34] = a1;
  v3[35] = v2;
  v3[36] = type metadata accessor for StopSharingFlow.StopSharingFlowState(0);
  v3[37] = swift_task_alloc();
  v3[38] = swift_task_alloc();
  uint64_t v5 = v2 + *(void *)(*(void *)v2 + 120);
  os_log_type_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized ShareTargetResolver.resolveShareTargetForStopSharing(target:call:)
                                                + async function pointer to specialized ShareTargetResolver.resolveShareTargetForStopSharing(target:call:));
  uint64_t v6 = (void *)swift_task_alloc();
  v3[39] = v6;
  *uint64_t v6 = v3;
  v6[1] = StopSharingFlow.resolveTarget(_:);
  return v8(a2, v5);
}

uint64_t StopSharingFlow.resolveTarget(_:)(__int16 a1)
{
  *(_WORD *)(*(void *)v1 + 320) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](StopSharingFlow.resolveTarget(_:), 0, 0);
}

uint64_t StopSharingFlow.resolveTarget(_:)()
{
  uint64_t v35 = v0;
  __int16 v1 = *(_WORD *)(v0 + 320);
  if ((v1 & 0x100) != 0)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.default);
    os_log_type_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v34 = v11;
      *(_DWORD *)uint64_t v10 = 136315394;
      if (one-time initialization token for typeName != -1) {
        swift_once();
      }
      uint64_t v12 = static StopSharingFlow.typeName;
      unint64_t v13 = qword_2685B8270;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2080;
      uint64_t v14 = String.init<A>(describing:)();
      *(void *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22DD8A000, v8, v9, "%s: Target resolution failed with error %s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x230F996F0](v11, -1, -1);
      MEMORY[0x230F996F0](v10, -1, -1);
    }
    else
    {
    }
    uint64_t v16 = *(void *)(v0 + 296);
    uint64_t v2 = *(uint64_t **)(v0 + 304);
    uint64_t v17 = *(void *)(v0 + 280);
    lazy protocol witness table accessor for type StopSharingTargetResolutionError and conformance StopSharingTargetResolutionError();
    *uint64_t v2 = swift_allocError();
    swift_storeEnumTagMultiPayload();
    uint64_t v18 = v17 + *(void *)(*(void *)v17 + 104);
    swift_beginAccess();
    outlined init with copy of StopSharingFlow.StopSharingFlowState(v18, v16, type metadata accessor for StopSharingFlow.StopSharingFlowState);
    swift_beginAccess();
    outlined assign with copy of StopSharingFlow.StopSharingFlowState((uint64_t)v2, v18, type metadata accessor for StopSharingFlow.StopSharingFlowState);
    swift_endAccess();
    uint64_t v6 = v16;
  }
  else
  {
    switch((char)v1)
    {
      case 1:
        uint64_t v19 = *(void *)(v0 + 296);
        uint64_t v2 = *(uint64_t **)(v0 + 304);
        uint64_t v20 = *(void *)(v0 + 280);
        *(unsigned char *)uint64_t v2 = 0;
        swift_storeEnumTagMultiPayload();
        uint64_t v21 = v20 + *(void *)(*(void *)v20 + 104);
        swift_beginAccess();
        outlined init with copy of StopSharingFlow.StopSharingFlowState(v21, v19, type metadata accessor for StopSharingFlow.StopSharingFlowState);
        swift_beginAccess();
        outlined assign with copy of StopSharingFlow.StopSharingFlowState((uint64_t)v2, v21, type metadata accessor for StopSharingFlow.StopSharingFlowState);
        swift_endAccess();
        uint64_t v6 = v19;
        break;
      case 2:
        uint64_t v22 = *(void *)(v0 + 296);
        uint64_t v2 = *(uint64_t **)(v0 + 304);
        uint64_t v23 = *(void *)(v0 + 280);
        *(unsigned char *)uint64_t v2 = 3;
        swift_storeEnumTagMultiPayload();
        uint64_t v24 = v23 + *(void *)(*(void *)v23 + 104);
        swift_beginAccess();
        outlined init with copy of StopSharingFlow.StopSharingFlowState(v24, v22, type metadata accessor for StopSharingFlow.StopSharingFlowState);
        swift_beginAccess();
        outlined assign with copy of StopSharingFlow.StopSharingFlowState((uint64_t)v2, v24, type metadata accessor for StopSharingFlow.StopSharingFlowState);
        swift_endAccess();
        uint64_t v6 = v22;
        break;
      case 3:
        uint64_t v25 = *(void *)(v0 + 296);
        uint64_t v2 = *(uint64_t **)(v0 + 304);
        uint64_t v26 = *(void *)(v0 + 280);
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (validationPassState: StopSharingFlow.StopSharingFlowState, validationFailFallbackState: StopSharingFlow.StopSharingFlowState));
        uint64_t v28 = swift_allocBox();
        uint64_t v30 = (unsigned char *)(v29 + *(int *)(v27 + 48));
        swift_storeEnumTagMultiPayload();
        *uint64_t v30 = 2;
        swift_storeEnumTagMultiPayload();
        *uint64_t v2 = v28;
        swift_storeEnumTagMultiPayload();
        uint64_t v31 = v26 + *(void *)(*(void *)v26 + 104);
        swift_beginAccess();
        outlined init with copy of StopSharingFlow.StopSharingFlowState(v31, v25, type metadata accessor for StopSharingFlow.StopSharingFlowState);
        swift_beginAccess();
        outlined assign with copy of StopSharingFlow.StopSharingFlowState((uint64_t)v2, v31, type metadata accessor for StopSharingFlow.StopSharingFlowState);
        swift_endAccess();
        uint64_t v6 = v25;
        break;
      default:
        uint64_t v3 = *(void *)(v0 + 296);
        uint64_t v2 = *(uint64_t **)(v0 + 304);
        uint64_t v4 = *(void *)(v0 + 280);
        *(unsigned char *)uint64_t v2 = 1;
        swift_storeEnumTagMultiPayload();
        uint64_t v5 = v4 + *(void *)(*(void *)v4 + 104);
        swift_beginAccess();
        outlined init with copy of StopSharingFlow.StopSharingFlowState(v5, v3, type metadata accessor for StopSharingFlow.StopSharingFlowState);
        swift_beginAccess();
        outlined assign with copy of StopSharingFlow.StopSharingFlowState((uint64_t)v2, v5, type metadata accessor for StopSharingFlow.StopSharingFlowState);
        swift_endAccess();
        uint64_t v6 = v3;
        break;
    }
  }
  specialized SharingFlow.state.didset(v6, type metadata accessor for StopSharingFlow.StopSharingFlowState, type metadata accessor for StopSharingFlow.StopSharingFlowState, type metadata accessor for StopSharingFlow.StopSharingFlowState, (uint64_t (*)(uint64_t))StopSharingFlow.StopSharingFlowState.description.getter);
  outlined destroy of StopSharingFlow.StopSharingFlowState((uint64_t)v2, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  outlined destroy of StopSharingFlow.StopSharingFlowState(*(void *)(v0 + 296), type metadata accessor for StopSharingFlow.StopSharingFlowState);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
  return v32();
}

uint64_t StopSharingFlow.stopSharingTarget(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v26 = type metadata accessor for StopSharingFlow.StopSharingFlowState(0);
  uint64_t v4 = MEMORY[0x270FA5388](v26);
  uint64_t v27 = (uint64_t)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v25 - v6;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.default);
  os_log_type_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  unint64_t v11 = 0x2685B6000uLL;
  if (os_log_type_enabled(v9, v10))
  {
    v25[1] = a1;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    v29[0] = v13;
    *(_DWORD *)uint64_t v12 = 136315394;
    if (one-time initialization token for typeName != -1) {
      swift_once();
    }
    uint64_t v14 = static StopSharingFlow.typeName;
    unint64_t v15 = qword_2685B8270;
    swift_bridgeObjectRetain();
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000022DDEA750, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_22DD8A000, v9, v10, "%s: Stopping sharing of target %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v13, -1, -1);
    MEMORY[0x230F996F0](v12, -1, -1);

    unint64_t v11 = 0x2685B6000;
  }
  else
  {
  }
  specialized Sharer.setScreenSharingEnabled(_:for:in:)(0, (void *)(v1 + *(void *)(*(void *)v1 + 120)));
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    v29[0] = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    if (*(void *)(v11 + 3872) != -1) {
      swift_once();
    }
    uint64_t v20 = static StopSharingFlow.typeName;
    unint64_t v21 = qword_2685B8270;
    swift_bridgeObjectRetain();
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22DD8A000, v16, v17, "%s: Successfully stopped sharing target", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F996F0](v19, -1, -1);
    MEMORY[0x230F996F0](v18, -1, -1);
  }

  swift_storeEnumTagMultiPayload();
  uint64_t v22 = v2 + *(void *)(*(void *)v2 + 104);
  swift_beginAccess();
  uint64_t v23 = v27;
  outlined init with copy of StopSharingFlow.StopSharingFlowState(v22, v27, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  swift_beginAccess();
  outlined assign with copy of StopSharingFlow.StopSharingFlowState((uint64_t)v7, v22, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  swift_endAccess();
  specialized SharingFlow.state.didset(v23, type metadata accessor for StopSharingFlow.StopSharingFlowState, type metadata accessor for StopSharingFlow.StopSharingFlowState, type metadata accessor for StopSharingFlow.StopSharingFlowState, (uint64_t (*)(uint64_t))StopSharingFlow.StopSharingFlowState.description.getter);
  outlined destroy of StopSharingFlow.StopSharingFlowState((uint64_t)v7, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  outlined destroy of StopSharingFlow.StopSharingFlowState(v23, type metadata accessor for StopSharingFlow.StopSharingFlowState);
  return static ExecuteResponse.ongoing(requireInput:)();
}

uint64_t StopSharingFlow.__ivar_destroyer()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StopSharingFlow.shareTargetResolver);
  uint64_t v1 = v0 + direct field offset for StopSharingFlow.sharer;

  return __swift_destroy_boxed_opaque_existential_1(v1);
}

uint64_t StopSharingFlow.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of StopSharingFlow.StopSharingFlowState(v0 + *(void *)(*(void *)v0 + 104), type metadata accessor for StopSharingFlow.StopSharingFlowState);
  __swift_destroy_boxed_opaque_existential_1(v0 + *(void *)(*(void *)v0 + 112));
  __swift_destroy_boxed_opaque_existential_1(v0 + *(void *)(*(void *)v0 + 120));
  __swift_destroy_boxed_opaque_existential_1(v0 + *(void *)(*(void *)v0 + 128));
  __swift_destroy_boxed_opaque_existential_1(v0 + *(void *)(*(void *)v0 + 136));
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StopSharingFlow.shareTargetResolver);
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StopSharingFlow.sharer);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t type metadata accessor for StopSharingFlow(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for StopSharingFlow);
}

uint64_t type metadata completion function for StopSharingFlow()
{
  return swift_initClassMetadata2();
}

char *initializeBufferWithCopyOfBuffer for StopSharingFlow.StopSharingFlowState(char *a1, id *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = (char *)*a2;
    *(void *)a1 = *a2;
    a1 = &v8[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      os_log_type_t v10 = (char *)*a2;
      unint64_t v11 = (char *)*a2;
      *(void *)a1 = v10;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v12 = type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          *(void *)a1 = *a2;
          swift_retain();
          uint64_t v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                       + 48);
          uint64_t v14 = &a1[v13];
          uint64_t v15 = (uint64_t)a2 + v13;
          uint64_t v16 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
          goto LABEL_15;
        case 1u:
        case 2u:
          os_log_type_t v17 = (char *)a2[1];
          *(void *)a1 = *a2;
          *((void *)a1 + 1) = v17;
          swift_bridgeObjectRetain();
          goto LABEL_15;
        case 3u:
          uint64_t v18 = (char *)a2[1];
          *(void *)a1 = *a2;
          *((void *)a1 + 1) = v18;
          a1[16] = *((unsigned char *)a2 + 16);
          swift_bridgeObjectRetain();
LABEL_15:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      *(void *)a1 = *a2;
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void destroy for StopSharingFlow.StopSharingFlowState(void **a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 4:
      uint64_t v3 = *a1;

      break;
    case 1:
      type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          swift_release();
          uint64_t v4 = (char *)a1
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                      + 48);
          uint64_t v5 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          uint64_t v6 = *(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);
          v6(v4, v5);
          break;
        case 1u:
        case 2u:
        case 3u:
          swift_bridgeObjectRelease();
          break;
        default:
          return;
      }
      break;
    case 0:
      swift_release();
      break;
  }
}

void *initializeWithCopy for StopSharingFlow.StopSharingFlowState(void *a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 4:
      id v7 = *(id *)a2;
      id v8 = *(id *)a2;
      *a1 = v7;
      goto LABEL_13;
    case 1:
      uint64_t v9 = type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          *a1 = *(void *)a2;
          swift_retain();
          uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                       + 48);
          unint64_t v11 = (char *)a1 + v10;
          uint64_t v12 = a2 + v10;
          uint64_t v13 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
          goto LABEL_12;
        case 1u:
        case 2u:
          uint64_t v14 = *(void *)(a2 + 8);
          *a1 = *(void *)a2;
          a1[1] = v14;
          swift_bridgeObjectRetain();
          goto LABEL_12;
        case 3u:
          uint64_t v15 = *(void *)(a2 + 8);
          *a1 = *(void *)a2;
          a1[1] = v15;
          *((unsigned char *)a1 + 16) = *(unsigned char *)(a2 + 16);
          swift_bridgeObjectRetain();
LABEL_12:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, (const void *)a2, *(void *)(*(void *)(v9 - 8) + 64));
          break;
      }
      goto LABEL_13;
    case 0:
      *a1 = *(void *)a2;
      swift_retain();
LABEL_13:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *assignWithCopy for StopSharingFlow.StopSharingFlowState(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of StopSharingFlow.StopSharingFlowState((uint64_t)a1, type metadata accessor for StopSharingFlow.StopSharingFlowState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 4:
        id v7 = (void *)*a2;
        id v8 = v7;
        *a1 = v7;
        goto LABEL_14;
      case 1:
        uint64_t v9 = type metadata accessor for ShareTarget();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            *a1 = *a2;
            swift_retain();
            uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                         + 48);
            unint64_t v11 = (char *)a1 + v10;
            uint64_t v12 = (char *)a2 + v10;
            uint64_t v13 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
            goto LABEL_13;
          case 1u:
          case 2u:
            *a1 = *a2;
            a1[1] = a2[1];
            swift_bridgeObjectRetain();
            goto LABEL_13;
          case 3u:
            *a1 = *a2;
            a1[1] = a2[1];
            *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
            swift_bridgeObjectRetain();
LABEL_13:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
            break;
        }
        goto LABEL_14;
      case 0:
        *a1 = *a2;
        swift_retain();
LABEL_14:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata accessor for StopSharingFlow.StopSharingFlowState(uint64_t a1)
{
  return type metadata accessor for ExpanseUIModelConverter.ShareScreenConfirmationSnippetModelConverter(a1, (uint64_t *)&type metadata singleton initialization cache for StopSharingFlow.StopSharingFlowState);
}

void *initializeWithTake for StopSharingFlow.StopSharingFlowState(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ShareTarget();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                  + 48);
      id v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for StopSharingFlow.StopSharingFlowState(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of StopSharingFlow.StopSharingFlowState((uint64_t)a1, type metadata accessor for StopSharingFlow.StopSharingFlowState);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ShareTarget();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      else
      {
        *a1 = *a2;
        uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                    + 48);
        id v8 = (char *)a1 + v7;
        uint64_t v9 = (char *)a2 + v7;
        uint64_t v10 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for StopSharingFlow.StopSharingFlowState()
{
  uint64_t result = type metadata accessor for ShareTarget();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for StopSharingFlow.StopSharingFlowState(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type StopSharingFlow.StopSharingFlowState and conformance StopSharingFlow.StopSharingFlowState(&lazy protocol witness table cache variable for type StopSharingFlow.StopSharingFlowState and conformance StopSharingFlow.StopSharingFlowState, (void (*)(uint64_t))type metadata accessor for StopSharingFlow.StopSharingFlowState);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type StopSharingFlow.StopSharingFlowState and conformance StopSharingFlow.StopSharingFlowState(&lazy protocol witness table cache variable for type StopSharingFlow.StopSharingFlowState and conformance StopSharingFlow.StopSharingFlowState, (void (*)(uint64_t))type metadata accessor for StopSharingFlow.StopSharingFlowState);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type StopSharingFlow.StopSharingFlowState and conformance StopSharingFlow.StopSharingFlowState(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of StopSharingFlow.StopSharingFlowState(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_22DDE3298()
{
  uint64_t v1 = *(void *)(type metadata accessor for StopSharingFlow.StopSharingFlowState(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = (v4 + v2 + v3) & ~v2;
  swift_release();
  uint64_t v6 = (id *)(v0 + v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 4:

      break;
    case 1:
      type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          swift_release();
          id v8 = (char *)v6
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                      + 48);
          uint64_t v9 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
          break;
        case 1u:
        case 2u:
        case 3u:
          swift_bridgeObjectRelease();
          break;
        default:
          goto LABEL_9;
      }
      break;
    case 0:
      swift_release();
      break;
  }
LABEL_9:
  uint64_t v10 = (id *)(v0 + v5);
  int v11 = swift_getEnumCaseMultiPayload();
  switch(v11)
  {
    case 4:

      break;
    case 1:
      type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          swift_release();
          uint64_t v12 = (char *)v10
              + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                       + 48);
          uint64_t v13 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
          break;
        case 1u:
        case 2u:
        case 3u:
          swift_bridgeObjectRelease();
          break;
        default:
          goto LABEL_17;
      }
      break;
    case 0:
      swift_release();
      break;
  }
LABEL_17:

  return MEMORY[0x270FA0238](v0, v5 + v4, v2 | 7);
}

uint64_t outlined init with take of ShareTarget(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for specialized closure #1 in SharingFlow.validateCallStatus(validationPassState:validationFailFallbackState:)(unsigned __int8 *a1)
{
  return partial apply for specialized closure #1 in SharingFlow.validateCallStatus(validationPassState:validationFailFallbackState:)(a1, type metadata accessor for StopSharingFlow.StopSharingFlowState, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in SharingFlow.validateCallStatus(validationPassState:validationFailFallbackState:));
}

{
  return partial apply for specialized closure #1 in SharingFlow.validateCallStatus(validationPassState:validationFailFallbackState:)(a1, type metadata accessor for StartSharingFlow.StartSharingFlowState, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in SharingFlow.validateCallStatus(validationPassState:validationFailFallbackState:));
}

uint64_t outlined init with copy of StopSharingFlow.StopSharingFlowState(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_22DDE3678()
{
  uint64_t v1 = *(void *)(type metadata accessor for StartSharingFlow.StartSharingFlowState(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = (v4 + v2 + v3) & ~v2;
  swift_release();
  uint64_t v6 = v0 + v3;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_release();
      break;
    case 4u:
      type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          swift_release();
          uint64_t v9 = v6
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                      + 48);
          uint64_t v10 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
          break;
        case 1u:
        case 2u:
        case 3u:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ShareTarget, recipients: PermittedRecipients, needsValueCount: Int, isShareInCallRequest: Bool));
      goto LABEL_14;
    case 5u:
      type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          swift_release();
          uint64_t v7 = v6
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                      + 48);
          uint64_t v8 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
          break;
        case 1u:
        case 2u:
        case 3u:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (requestedTarget: ShareTarget, resolvedTarget: ResolvedShareTarget, recipients: PermittedRecipients));
      swift_bridgeObjectRelease();
      goto LABEL_14;
    case 6u:
      if (*(void *)(v6 + 8) < 3uLL) {
        break;
      }
LABEL_14:
      swift_bridgeObjectRelease();
      break;
    case 8u:

      break;
    default:
      break;
  }
  uint64_t v11 = v0 + v5;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_release();
      break;
    case 4u:
      type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          swift_release();
          uint64_t v14 = v11
              + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                       + 48);
          uint64_t v15 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
          break;
        case 1u:
        case 2u:
        case 3u:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ShareTarget, recipients: PermittedRecipients, needsValueCount: Int, isShareInCallRequest: Bool));
      goto LABEL_28;
    case 5u:
      type metadata accessor for ShareTarget();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          swift_release();
          uint64_t v12 = v11
              + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity, type: UsoEntity_common_AttachmentType.DefinedValues))
                       + 48);
          uint64_t v13 = type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
          break;
        case 1u:
        case 2u:
        case 3u:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (requestedTarget: ShareTarget, resolvedTarget: ResolvedShareTarget, recipients: PermittedRecipients));
      swift_bridgeObjectRelease();
      goto LABEL_28;
    case 6u:
      if (*(void *)(v11 + 8) < 3uLL) {
        break;
      }
LABEL_28:
      swift_bridgeObjectRelease();
      break;
    case 8u:

      break;
    default:
      break;
  }

  return MEMORY[0x270FA0238](v0, v5 + v4, v2 | 7);
}

uint64_t partial apply for specialized closure #1 in SharingFlow.validateCallStatus(validationPassState:validationFailFallbackState:)(unsigned __int8 *a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 + 24) & ~v6;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = v3 + ((*(void *)(v5 + 64) + v6 + v7) & ~v6);
  uint64_t v10 = *a1;

  return a3(v10, v8, v3 + v7, v9);
}

uint64_t outlined assign with copy of StopSharingFlow.StopSharingFlowState(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for StopSharingFlow.StopSharingFlowError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22DDE3DA0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StopSharingFlow.StopSharingFlowError()
{
  return &type metadata for StopSharingFlow.StopSharingFlowError;
}

unint64_t lazy protocol witness table accessor for type StopSharingFlow.StopSharingFlowError and conformance StopSharingFlow.StopSharingFlowError()
{
  unint64_t result = lazy protocol witness table cache variable for type StopSharingFlow.StopSharingFlowError and conformance StopSharingFlow.StopSharingFlowError;
  if (!lazy protocol witness table cache variable for type StopSharingFlow.StopSharingFlowError and conformance StopSharingFlow.StopSharingFlowError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StopSharingFlow.StopSharingFlowError and conformance StopSharingFlow.StopSharingFlowError);
  }
  return result;
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return MEMORY[0x270EEDEE8]();
}

uint64_t JSONEncoder.init()()
{
  return MEMORY[0x270EEDF30]();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return MEMORY[0x270EEDF38]();
}

uint64_t static CharacterSet.whitespaces.getter()
{
  return MEMORY[0x270EEE098]();
}

uint64_t type metadata accessor for CharacterSet()
{
  return MEMORY[0x270EEE258]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x270EEF840]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x270EF0120]();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)MEMORY[0x270EF0C88]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x270EF0D08]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x270EF0D18]();
}

uint64_t static Locale.current.getter()
{
  return MEMORY[0x270EF0FA0]();
}

uint64_t type metadata accessor for Locale()
{
  return MEMORY[0x270EF10A8]();
}

uint64_t CodableAceObject.init(wrappedValue:)()
{
  return MEMORY[0x270F74438]();
}

uint64_t Loggable.init(wrappedValue:)()
{
  return MEMORY[0x270F756A0]();
}

uint64_t static Loggable<A>.== infix(_:_:)()
{
  return MEMORY[0x270F756C0]();
}

uint64_t type metadata accessor for Loggable()
{
  return MEMORY[0x270F756C8]();
}

uint64_t SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)()
{
  return MEMORY[0x270F663D8]();
}

uint64_t type metadata accessor for SimpleOutputFlowAsync()
{
  return MEMORY[0x270F663E0]();
}

uint64_t PromptForValueFlowAsync.exitValue.getter()
{
  return MEMORY[0x270F66460]();
}

uint64_t PromptForValueFlowAsync.on(input:)()
{
  return MEMORY[0x270F66468]();
}

uint64_t PromptForValueFlowAsync.init<A>(strategy:outputPublisher:)()
{
  return MEMORY[0x270F66478]();
}

uint64_t PromptForConfirmationFlowAsync.init<A>(itemToConfirm:strategy:outputPublisher:)()
{
  return MEMORY[0x270F66710]();
}

uint64_t PromptForConfirmationFlowAsync.on(input:)()
{
  return MEMORY[0x270F66718]();
}

uint64_t PromptForConfirmationFlowAsync.exitValue.getter()
{
  return MEMORY[0x270F66728]();
}

uint64_t Flow.eraseToAnyFlow()()
{
  return MEMORY[0x270F66CA8]();
}

uint64_t static FlowSearchResult.noFlow.getter()
{
  return MEMORY[0x270F66CF8]();
}

uint64_t static FlowSearchResult.flow(_:)()
{
  return MEMORY[0x270F66D18]();
}

uint64_t dispatch thunk of DeviceState.siriLocale.getter()
{
  return MEMORY[0x270F671A8]();
}

uint64_t DeviceState.asInvocationContext.getter()
{
  return MEMORY[0x270F672B0]();
}

uint64_t static DialogPhase.completion.getter()
{
  return MEMORY[0x270F672E8]();
}

uint64_t static DialogPhase.reflection.getter()
{
  return MEMORY[0x270F672F0]();
}

uint64_t static DialogPhase.confirmation.getter()
{
  return MEMORY[0x270F672F8]();
}

uint64_t static DialogPhase.clarification.getter()
{
  return MEMORY[0x270F67300]();
}

uint64_t static DialogPhase.acknowledgement.getter()
{
  return MEMORY[0x270F67308]();
}

uint64_t static DialogPhase.error.getter()
{
  return MEMORY[0x270F67310]();
}

uint64_t static DialogPhase.status.getter()
{
  return MEMORY[0x270F67318]();
}

uint64_t static DialogPhase.summary.getter()
{
  return MEMORY[0x270F67320]();
}

uint64_t static DialogPhase.canceled.getter()
{
  return MEMORY[0x270F67330]();
}

uint64_t static DialogPhase.confirmed.getter()
{
  return MEMORY[0x270F67338]();
}

uint64_t type metadata accessor for DialogPhase()
{
  return MEMORY[0x270F67340]();
}

uint64_t static EmptyOutput.instance.getter()
{
  return MEMORY[0x270F67368]();
}

uint64_t type metadata accessor for EmptyOutput()
{
  return MEMORY[0x270F67370]();
}

uint64_t static ActionForInput.cancel()()
{
  return MEMORY[0x270F67500]();
}

uint64_t static ActionForInput.handle()()
{
  return MEMORY[0x270F67508]();
}

uint64_t static ActionForInput.ignore()()
{
  return MEMORY[0x270F67510]();
}

uint64_t static ExecuteResponse.ongoing(requireInput:)()
{
  return MEMORY[0x270F676D8]();
}

uint64_t static ExecuteResponse.ongoing<A>(next:childCompletion:)()
{
  return MEMORY[0x270F676E0]();
}

uint64_t static ExecuteResponse.complete<A>(next:childCompletion:)()
{
  return MEMORY[0x270F67708]();
}

uint64_t static ExecuteResponse.complete<A>(next:)()
{
  return MEMORY[0x270F67718]();
}

uint64_t static ExecuteResponse.complete()()
{
  return MEMORY[0x270F67730]();
}

uint64_t type metadata accessor for ExecuteResponse()
{
  return MEMORY[0x270F67750]();
}

uint64_t NLContextUpdate.nluSystemDialogActs.setter()
{
  return MEMORY[0x270F67798]();
}

uint64_t NLContextUpdate.weightedPromptStrict.setter()
{
  return MEMORY[0x270F677B0]();
}

uint64_t NLContextUpdate.weightedPromptTargetDomain.setter()
{
  return MEMORY[0x270F677D8]();
}

uint64_t NLContextUpdate.weightedPromptResponseOptions.setter()
{
  return MEMORY[0x270F677F0]();
}

uint64_t NLContextUpdate.weightedPromptResponseTargets.setter()
{
  return MEMORY[0x270F67800]();
}

uint64_t NLContextUpdate.init()()
{
  return MEMORY[0x270F67820]();
}

uint64_t type metadata accessor for NLContextUpdate()
{
  return MEMORY[0x270F67828]();
}

uint64_t ResponseFactory.init()()
{
  return MEMORY[0x270F67888]();
}

uint64_t type metadata accessor for ResponseFactory()
{
  return MEMORY[0x270F67890]();
}

uint64_t type metadata accessor for ConfirmationResponse()
{
  return MEMORY[0x270F67BC0]();
}

uint64_t dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)()
{
  return MEMORY[0x270F67CF8]();
}

uint64_t AppInformationResolver.init(app:)()
{
  return MEMORY[0x270F67D08]();
}

uint64_t type metadata accessor for AppInformationResolver()
{
  return MEMORY[0x270F67D10]();
}

uint64_t static OutputPublisherFactory.makeOutputPublisherAsync()()
{
  return MEMORY[0x270F67D58]();
}

uint64_t OutputGenerationManifest.init(dialogPhase:_:)()
{
  return MEMORY[0x270F67E40]();
}

uint64_t OutputGenerationManifest.canUseServerTTS.setter()
{
  return MEMORY[0x270F67E90]();
}

uint64_t OutputGenerationManifest.nlContextUpdate.setter()
{
  return MEMORY[0x270F67EA0]();
}

uint64_t OutputGenerationManifest.listenAfterSpeaking.setter()
{
  return MEMORY[0x270F67ED0]();
}

uint64_t OutputGenerationManifest.printSupportingDialogInDisplayModes.setter()
{
  return MEMORY[0x270F67F08]();
}

uint64_t type metadata accessor for OutputGenerationManifest()
{
  return MEMORY[0x270F67F18]();
}

uint64_t SimpleConfirmationResponseProvider.confirmationResponse.getter()
{
  return MEMORY[0x270F681A8]();
}

uint64_t type metadata accessor for SimpleConfirmationResponseProvider()
{
  return MEMORY[0x270F681B0]();
}

uint64_t SimpleConfirmationResponseProvider.init(_:)()
{
  return MEMORY[0x270F681B8]();
}

uint64_t Input.parse.getter()
{
  return MEMORY[0x270F68220]();
}

uint64_t type metadata accessor for Input()
{
  return MEMORY[0x270F68230]();
}

uint64_t Parse.DirectInvocation.identifier.getter()
{
  return MEMORY[0x270F68258]();
}

uint64_t Parse.DirectInvocation.userData.getter()
{
  return MEMORY[0x270F68260]();
}

uint64_t type metadata accessor for Parse.DirectInvocation()
{
  return MEMORY[0x270F68268]();
}

uint64_t type metadata accessor for Parse()
{
  return MEMORY[0x270F682A0]();
}

uint64_t static Device.current.getter()
{
  return MEMORY[0x270F682B8]();
}

uint64_t USOParse.userParse.getter()
{
  return MEMORY[0x270F68378]();
}

uint64_t type metadata accessor for USOParse()
{
  return MEMORY[0x270F68388]();
}

uint64_t AceOutput.init(commands:flowActivity:)()
{
  return MEMORY[0x270F683A8]();
}

uint64_t type metadata accessor for AceOutput()
{
  return MEMORY[0x270F683B8]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UsoGraph()
{
  return MEMORY[0x270F6A370]();
}

uint64_t Siri_Nlu_External_UserParse.userDialogActs.getter()
{
  return MEMORY[0x270F6A498]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserParse()
{
  return MEMORY[0x270F6A4F8]();
}

uint64_t Siri_Nlu_External_SystemOffered.offeredAct.setter()
{
  return MEMORY[0x270F6A718]();
}

uint64_t Siri_Nlu_External_SystemOffered.init()()
{
  return MEMORY[0x270F6A720]();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemOffered()
{
  return MEMORY[0x270F6A728]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter()
{
  return MEMORY[0x270F6A758]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasAccepted.getter()
{
  return MEMORY[0x270F6A768]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasRejected.getter()
{
  return MEMORY[0x270F6A770]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasCancelled.getter()
{
  return MEMORY[0x270F6A788]();
}

uint64_t Siri_Nlu_External_UserDialogAct.userStatedTask.getter()
{
  return MEMORY[0x270F6A7B0]();
}

uint64_t Siri_Nlu_External_UserDialogAct.wantedToProceed.setter()
{
  return MEMORY[0x270F6A7E8]();
}

uint64_t Siri_Nlu_External_UserDialogAct.init()()
{
  return MEMORY[0x270F6A860]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserDialogAct()
{
  return MEMORY[0x270F6A868]();
}

uint64_t Siri_Nlu_External_SystemPrompted.target.setter()
{
  return MEMORY[0x270F6AA80]();
}

uint64_t Siri_Nlu_External_SystemPrompted.init()()
{
  return MEMORY[0x270F6AA90]();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemPrompted()
{
  return MEMORY[0x270F6AA98]();
}

uint64_t Siri_Nlu_External_UserStatedTask.task.getter()
{
  return MEMORY[0x270F6AAB0]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserStatedTask()
{
  return MEMORY[0x270F6AAC8]();
}

uint64_t Siri_Nlu_External_SystemDialogAct.offered.setter()
{
  return MEMORY[0x270F6AC88]();
}

uint64_t Siri_Nlu_External_SystemDialogAct.prompted.setter()
{
  return MEMORY[0x270F6ACA0]();
}

uint64_t Siri_Nlu_External_SystemDialogAct.init()()
{
  return MEMORY[0x270F6ACB0]();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemDialogAct()
{
  return MEMORY[0x270F6ACB8]();
}

uint64_t Siri_Nlu_External_UserWantedToProceed.reference.setter()
{
  return MEMORY[0x270F6AF68]();
}

uint64_t Siri_Nlu_External_UserWantedToProceed.init()()
{
  return MEMORY[0x270F6AF70]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserWantedToProceed()
{
  return MEMORY[0x270F6AF78]();
}

uint64_t static ConversionUtils.toUserParse(from:)()
{
  return MEMORY[0x270F6BB08]();
}

uint64_t static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)()
{
  return MEMORY[0x270F6BB28]();
}

uint64_t static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)()
{
  return MEMORY[0x270F6BB38]();
}

uint64_t dispatch thunk of CodeGenBase.getUtteranceAlignmentsHelper(attributeName:)()
{
  return MEMORY[0x270F6C840]();
}

uint64_t CodeGenBase.entity.getter()
{
  return MEMORY[0x270F6C848]();
}

uint64_t UsoIdentifier.value.getter()
{
  return MEMORY[0x270F6C9C8]();
}

uint64_t UsoIdentifier.namespace.getter()
{
  return MEMORY[0x270F6C9D0]();
}

uint64_t type metadata accessor for UsoIdentifier()
{
  return MEMORY[0x270F6C9D8]();
}

uint64_t UtteranceSpan.startIndex.getter()
{
  return MEMORY[0x270F6C9F0]();
}

uint64_t UtteranceSpan.endIndex.getter()
{
  return MEMORY[0x270F6CA08]();
}

uint64_t type metadata accessor for UtteranceSpan()
{
  return MEMORY[0x270F6CA10]();
}

uint64_t static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)()
{
  return MEMORY[0x270F6CCA0]();
}

uint64_t dispatch thunk of CodeGenListEntry.entry.getter()
{
  return MEMORY[0x270F6CCB0]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter()
{
  return MEMORY[0x270F6CD28]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter()
{
  return MEMORY[0x270F6CD38]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter()
{
  return MEMORY[0x270F6CD40]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)()
{
  return MEMORY[0x270F6CD60]();
}

uint64_t type metadata accessor for UsoBuilderOptions()
{
  return MEMORY[0x270F6CD70]();
}

uint64_t static UsoConversionUtils.convertGraphToTasks(graph:)()
{
  return MEMORY[0x270F6CDA8]();
}

uint64_t UtteranceAlignment.asrHypothesisIndex.getter()
{
  return MEMORY[0x270F6CDF0]();
}

uint64_t UtteranceAlignment.spans.getter()
{
  return MEMORY[0x270F6CDF8]();
}

uint64_t type metadata accessor for UtteranceAlignment()
{
  return MEMORY[0x270F6CE00]();
}

uint64_t dispatch thunk of UsoEntity_common_App.name.getter()
{
  return MEMORY[0x270F6CE38]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_Target.target.getter()
{
  return MEMORY[0x270F6D0D8]();
}

uint64_t dispatch thunk of UsoEntity_common_Message.recipients.getter()
{
  return MEMORY[0x270F6D138]();
}

uint64_t dispatch thunk of UsoEntity_common_Message.attachments.getter()
{
  return MEMORY[0x270F6D140]();
}

uint64_t static UsoTask_CodegenConverter.convert(task:)()
{
  return MEMORY[0x270F6D200]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_Reference.reference.getter()
{
  return MEMORY[0x270F6D510]();
}

uint64_t dispatch thunk of UsoEntity_common_Attachment.collaborationMode.getter()
{
  return MEMORY[0x270F6D558]();
}

uint64_t dispatch thunk of UsoEntity_common_Attachment.type.getter()
{
  return MEMORY[0x270F6D560]();
}

uint64_t dispatch thunk of UsoEntity_common_Attachment.sharedApp.getter()
{
  return MEMORY[0x270F6D568]();
}

uint64_t dispatch thunk of UsoEntity_common_Quantifier.definedValue.getter()
{
  return MEMORY[0x270F6D5B8]();
}

uint64_t type metadata accessor for UsoEntity_common_Quantifier.DefinedValues()
{
  return MEMORY[0x270F6D5C0]();
}

uint64_t type metadata accessor for UsoTask_send_common_Message()
{
  return MEMORY[0x270F6D670]();
}

uint64_t type metadata accessor for UsoTask_share_common_Message()
{
  return MEMORY[0x270F6D830]();
}

uint64_t type metadata accessor for UsoTask_unshare_common_Message()
{
  return MEMORY[0x270F6DD38]();
}

uint64_t dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)()
{
  return MEMORY[0x270F6DD48]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.addAttachments(value:)()
{
  return MEMORY[0x270F6DDA8]();
}

uint64_t UsoEntityBuilder_common_Message.init()()
{
  return MEMORY[0x270F6DDC8]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Message()
{
  return MEMORY[0x270F6DDD0]();
}

uint64_t dispatch thunk of UsoEntity_common_AttachmentType.definedValue.getter()
{
  return MEMORY[0x270F6DE68]();
}

uint64_t UsoEntity_common_AttachmentType.DefinedValues.rawValue.getter()
{
  return MEMORY[0x270F6DE70]();
}

uint64_t type metadata accessor for UsoEntity_common_AttachmentType.DefinedValues()
{
  return MEMORY[0x270F6DE78]();
}

uint64_t UsoEntityBuilder_common_Attachment.init()()
{
  return MEMORY[0x270F6E430]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Attachment()
{
  return MEMORY[0x270F6E438]();
}

uint64_t dispatch thunk of UsoEntity_common_CollaborationMode.definedValue.getter()
{
  return MEMORY[0x270F6E4C8]();
}

uint64_t type metadata accessor for UsoEntity_common_CollaborationMode.DefinedValues()
{
  return MEMORY[0x270F6E4D0]();
}

uint64_t UsoTaskBuilder_share_common_Message.init()()
{
  return MEMORY[0x270F6E6E0]();
}

uint64_t type metadata accessor for UsoTaskBuilder_share_common_Message()
{
  return MEMORY[0x270F6E6E8]();
}

uint64_t UsoTaskBuilder_unshare_common_Message.init()()
{
  return MEMORY[0x270F6EB60]();
}

uint64_t type metadata accessor for UsoTaskBuilder_unshare_common_Message()
{
  return MEMORY[0x270F6EB68]();
}

uint64_t UsoEntity.isEquivalentTo(_:)()
{
  return MEMORY[0x270F6F4B8]();
}

uint64_t type metadata accessor for UsoEntity()
{
  return MEMORY[0x270F6F4D0]();
}

uint64_t type metadata accessor for ContactQuery()
{
  return MEMORY[0x270F656A8]();
}

uint64_t ContactHandle.value.getter()
{
  return MEMORY[0x270F65740]();
}

uint64_t type metadata accessor for ContactHandle()
{
  return MEMORY[0x270F65748]();
}

uint64_t dispatch thunk of ContactResolver.findMatches(queries:config:)()
{
  return MEMORY[0x270F65798]();
}

uint64_t ContactResolver.init()()
{
  return MEMORY[0x270F657C8]();
}

uint64_t type metadata accessor for ContactResolver()
{
  return MEMORY[0x270F657D0]();
}

uint64_t type metadata accessor for RecommenderType()
{
  return MEMORY[0x270F65830]();
}

uint64_t ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:recommender:customGenerator:)()
{
  return MEMORY[0x270F658F0]();
}

uint64_t type metadata accessor for ContactResolverConfig()
{
  return MEMORY[0x270F65900]();
}

uint64_t static ContactResolverDomain.all.getter()
{
  return MEMORY[0x270F65908]();
}

uint64_t type metadata accessor for ContactResolverDomain()
{
  return MEMORY[0x270F65910]();
}

uint64_t type metadata accessor for SearchSuggestedContacts()
{
  return MEMORY[0x270F65990]();
}

uint64_t Match.value.getter()
{
  return MEMORY[0x270F65A58]();
}

uint64_t Contact.handles.getter()
{
  return MEMORY[0x270F65BA8]();
}

uint64_t SiriEnvironment.currentRequest.getter()
{
  return MEMORY[0x270F652C0]();
}

uint64_t static SiriEnvironment.forCurrentTask.getter()
{
  return MEMORY[0x270F728F8]();
}

uint64_t type metadata accessor for SiriEnvironment()
{
  return MEMORY[0x270F72918]();
}

uint64_t static Transformer<>.transformer.getter()
{
  return MEMORY[0x270F68408]();
}

uint64_t Transformer.transform.getter()
{
  return MEMORY[0x270F72A28]();
}

uint64_t static ResponseMode.displayOnly.getter()
{
  return MEMORY[0x270F72A40]();
}

uint64_t type metadata accessor for ResponseMode()
{
  return MEMORY[0x270F72A70]();
}

uint64_t Entitlement.rawValue.getter()
{
  return MEMORY[0x270F18910]();
}

uint64_t type metadata accessor for Entitlement()
{
  return MEMORY[0x270F18918]();
}

uint64_t DialogPerson.__allocating_init(person:locale:useConversationalName:)()
{
  return MEMORY[0x270F64B58]();
}

uint64_t type metadata accessor for DialogPerson()
{
  return MEMORY[0x270F64C48]();
}

uint64_t static CATGlobals.defaultBuilder()()
{
  return MEMORY[0x270F64E40]();
}

uint64_t dispatch thunk of CATGlobals.Builder.withResponseMode(_:)()
{
  return MEMORY[0x270F64E60]();
}

uint64_t CATGlobals.init(builder:)()
{
  return MEMORY[0x270F64E90]();
}

uint64_t CATGlobals.__allocating_init()()
{
  return MEMORY[0x270F64E98]();
}

uint64_t type metadata accessor for CATGlobals()
{
  return MEMORY[0x270F64EA0]();
}

uint64_t CATWrapperSimple.init(templateDir:options:globals:)()
{
  return MEMORY[0x270F64FC8]();
}

uint64_t CATWrapperSimple.init(useResponseMode:options:)()
{
  return MEMORY[0x270F64FD0]();
}

uint64_t CATWrapperSimple.deinit()
{
  return MEMORY[0x270F64FE8]();
}

uint64_t type metadata accessor for CATDialog()
{
  return MEMORY[0x270F65150]();
}

uint64_t static CATOption.defaultMode.getter()
{
  return MEMORY[0x270F65158]();
}

uint64_t type metadata accessor for CATOption()
{
  return MEMORY[0x270F65180]();
}

uint64_t App.__allocating_init(appIdentifier:)()
{
  return MEMORY[0x270F63AE0]();
}

uint64_t type metadata accessor for App()
{
  return MEMORY[0x270F63B10]();
}

uint64_t CurrentRequest.speechPackage.getter()
{
  return MEMORY[0x270F65310]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x270FA2E08]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x270FA2E20]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x270EF1818]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x270F9D598]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x270EF19B0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x270F9D5E0]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x270F9D708]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t String.UTF16View.count.getter()
{
  return MEMORY[0x270F9D850]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x270F9D860]();
}

uint64_t String.UTF16View.subscript.getter()
{
  return MEMORY[0x270F9D870]();
}

uint64_t String.init(_:)()
{
  return MEMORY[0x270F9D8C0]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x270F9DA70]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x270F9DBA0]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x270F9DBB0]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9DBF0]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9DC50]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x270FA1DF8]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x270FA1F08]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x270FA1F10]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1CC0]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x270F9DEF0]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x270F9DF80]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x270FA2E40]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x270FA2E58]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x270FA2E80]();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return MEMORY[0x270FA0D70]();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return MEMORY[0x270FA0D88]();
}

uint64_t INPerson.toContactQuery()()
{
  return MEMORY[0x270F65EB0]();
}

NSNumber __swiftcall NSNumber.init(floatLiteral:)(Swift::Double floatLiteral)
{
  return (NSNumber)MEMORY[0x270EF2170](floatLiteral);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x270FA1180]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x270F9E530]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x270F9E560]();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return MEMORY[0x270EF2478]();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return MEMORY[0x270EF25B0]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x270F9E670]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x270F9E818]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x270F9E848]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x270F9E870]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x270F9E8C0](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x270F9E8C8]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x270F9E8E8]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x270F9E958]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9E960]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x270F9EA78]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x270F9EA98]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x270F9ED70]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9EFE8]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x270F9F080]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9F0C0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x270F9F230](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x270F9F250]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x270F9F258]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x270F9F2E8]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F318]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x270F9F360]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x270F9F390]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x270F9F3B0]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x270F9F3E0]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x270F9F428]();
}

{
  return MEMORY[0x270F9F430]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F458]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return MEMORY[0x270F9F778]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return MEMORY[0x270F9FA40]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB10]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x270F9FC48]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD98]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x270FA0158]();
}

void bzero(void *a1, size_t a2)
{
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_asyncLet_begin()
{
  return MEMORY[0x270FA23D0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x270FA0208]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x270FA02F8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x270FA0300]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x270FA0338]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTupleTypeLayout()
{
  return MEMORY[0x270FA0408]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x270FA0410]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x270FA0418]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x270FA0458]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x270FA0460]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x270FA04D8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x270FA04F8]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x270FA0568]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x270FA0578]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x270FA2458]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x270FA0598]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x270FA05A8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}