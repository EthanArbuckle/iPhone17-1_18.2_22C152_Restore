void sub_1A461170C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4611EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose((const void *)(v40 - 248), 8);
  _Block_object_dispose((const void *)(v40 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t FCUpdateAssetURLHostIfNeeded(void *a1)
{
  id v1 = a1;
  if (qword_1EB5D1B20 != -1)
  {
    id v4 = v1;
    dispatch_once(&qword_1EB5D1B20, &__block_literal_global_170);
    id v1 = v4;
  }
  if (_MergedGlobals_219)
  {
    v3 = v1;
    if (FCAllowedToRewriteAssetURLComponents(v1)) {
      [v3 setHost:@"cvws.icloud-content.com"];
    }
  }
  return MEMORY[0x1F41817F8]();
}

uint64_t FCProcessIsMemoryConstrained()
{
  if (qword_1EB5D1018 != -1) {
    dispatch_once(&qword_1EB5D1018, &__block_literal_global_4);
  }
  return _MergedGlobals_140;
}

void FCDeconstructHexStringWithBlock(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v4 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    v15 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "block");
    *(_DWORD *)buf = 136315906;
    *(void *)&buf[4] = "void FCDeconstructHexStringWithBlock(NSString * _Nullable __strong, void (^__strong _Nonnull)(C"
                         "GFloat, CGFloat, CGFloat, CGFloat))";
    __int16 v17 = 2080;
    v18 = "FCColor.m";
    __int16 v19 = 1024;
    int v20 = 17;
    __int16 v21 = 2114;
    v22 = v15;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
  if ([v3 length] == 9)
  {
    uint64_t v5 = [v3 substringFromIndex:1];

    id v3 = (id)v5;
  }
  double v6 = 0.0;
  double v7 = 0.0;
  double v8 = 0.0;
  double v9 = 0.0;
  if ([v3 length] == 8)
  {
    *(void *)buf = 0;
    v10 = [MEMORY[0x1E4F28FE8] scannerWithString:v3];
    [v10 scanHexLongLong:buf];
    double v9 = (double)buf[3] / 255.0;
    double v6 = (double)buf[2] / 255.0;
    double v7 = (double)buf[1] / 255.0;
    double v8 = (double)buf[0] / 255.0;
  }
  if ([v3 length] == 7)
  {
    uint64_t v11 = [v3 substringFromIndex:1];

    id v3 = (id)v11;
  }
  if ([v3 length] == 6)
  {
    *(void *)buf = 0;
    v12 = [MEMORY[0x1E4F28FE8] scannerWithString:v3];
    [v12 scanHexLongLong:buf];
    double v9 = (double)buf[2] / 255.0;
    double v6 = (double)buf[1] / 255.0;
    double v7 = (double)buf[0] / 255.0;

    double v8 = 1.0;
  }
  if ([v3 length] == 4)
  {
    uint64_t v13 = [v3 substringFromIndex:1];

    id v3 = (id)v13;
  }
  if ([v3 length] == 3)
  {
    *(void *)buf = 0;
    v14 = [MEMORY[0x1E4F28FE8] scannerWithString:v3];
    [v14 scanHexLongLong:buf];
    double v9 = (double)((*(void *)buf >> 8) & 0xFLL) / 15.0;
    double v6 = (double)(buf[0] >> 4) / 15.0;
    double v7 = (double)(buf[0] & 0xF) / 15.0;

    double v8 = 1.0;
  }
  v4[2](v4, v9, v6, v7, v8);
}

id FCAppConfigurationStringValue(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  double v6 = v5;
  if (a1)
  {
    double v7 = [a1 objectForKeyedSubscript:a2];
    if (!v7
      || ([MEMORY[0x1E4F1CA98] null],
          double v8 = objc_claimAutoreleasedReturnValue(),
          v8,
          double v9 = v7,
          v7 == v8))
    {
      double v9 = v6;
    }
    id v10 = v9;
  }
  else
  {
    id v10 = v5;
  }

  return v10;
}

double FCAppConfigurationDoubleValue(void *a1, uint64_t a2, double a3)
{
  if (a1)
  {
    id v4 = [a1 objectForKeyedSubscript:a2];
    if (v4)
    {
      id v5 = [MEMORY[0x1E4F1CA98] null];

      if (v4 != v5)
      {
        [v4 doubleValue];
        a3 = v6;
      }
    }
  }
  return a3;
}

id FCAppConfigurationDictionaryValueWithDefaultValue(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  double v6 = v5;
  if (a1)
  {
    double v7 = [a1 objectForKeyedSubscript:a2];
    if (!v7
      || ([MEMORY[0x1E4F1CA98] null],
          double v8 = objc_claimAutoreleasedReturnValue(),
          v8,
          double v9 = v7,
          v7 == v8))
    {
      double v9 = v6;
    }
    id v10 = v9;
  }
  else
  {
    id v10 = v5;
  }

  return v10;
}

uint64_t FCAppConfigurationBoolValue(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    id v4 = [a1 objectForKeyedSubscript:a2];
    if (v4)
    {
      id v5 = [MEMORY[0x1E4F1CA98] null];

      if (v4 != v5) {
        a3 = [v4 BOOLValue];
      }
    }
  }
  return a3;
}

uint64_t FCAppConfigurationIntegerValue(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    id v4 = [a1 objectForKeyedSubscript:a2];
    if (v4)
    {
      id v5 = [MEMORY[0x1E4F1CA98] null];

      if (v4 != v5) {
        a3 = [v4 longLongValue];
      }
    }
  }
  return a3;
}

void sub_1A461A3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A461A5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
}

void __Block_byref_object_dispose__20(uint64_t a1)
{
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
}

void __Block_byref_object_dispose__22(uint64_t a1)
{
}

void __Block_byref_object_dispose__23(uint64_t a1)
{
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
}

void __Block_byref_object_dispose__25(uint64_t a1)
{
}

void __Block_byref_object_dispose__26(uint64_t a1)
{
}

void __Block_byref_object_dispose__27(uint64_t a1)
{
}

void __Block_byref_object_dispose__28(uint64_t a1)
{
}

void __Block_byref_object_dispose__29(uint64_t a1)
{
}

void __Block_byref_object_dispose__30(uint64_t a1)
{
}

void __Block_byref_object_dispose__31(uint64_t a1)
{
}

void __Block_byref_object_dispose__32(uint64_t a1)
{
}

void __Block_byref_object_dispose__33(uint64_t a1)
{
}

void __Block_byref_object_dispose__34(uint64_t a1)
{
}

void __Block_byref_object_dispose__35(uint64_t a1)
{
}

void __Block_byref_object_dispose__36(uint64_t a1)
{
}

void __Block_byref_object_dispose__37(uint64_t a1)
{
}

void __Block_byref_object_dispose__38(uint64_t a1)
{
}

{
}

void __Block_byref_object_dispose__39(uint64_t a1)
{
}

void __Block_byref_object_dispose__40(uint64_t a1)
{
}

void __Block_byref_object_dispose__41(uint64_t a1)
{
}

void __Block_byref_object_dispose__42(uint64_t a1)
{
}

void __Block_byref_object_dispose__43(uint64_t a1)
{
}

void __Block_byref_object_dispose__44(uint64_t a1)
{
}

void __Block_byref_object_dispose__45(uint64_t a1)
{
}

void __Block_byref_object_dispose__46(uint64_t a1)
{
}

void __Block_byref_object_dispose__47(uint64_t a1)
{
}

void __Block_byref_object_dispose__48(uint64_t a1)
{
}

void __Block_byref_object_dispose__49(uint64_t a1)
{
}

void __Block_byref_object_dispose__50(uint64_t a1)
{
}

void __Block_byref_object_dispose__51(uint64_t a1)
{
}

void __Block_byref_object_dispose__52(uint64_t a1)
{
}

void __Block_byref_object_dispose__53(uint64_t a1)
{
}

void __Block_byref_object_dispose__54(uint64_t a1)
{
}

void __Block_byref_object_dispose__55(uint64_t a1)
{
}

void __Block_byref_object_dispose__56(uint64_t a1)
{
}

void __Block_byref_object_dispose__57(uint64_t a1)
{
}

void __Block_byref_object_dispose__58(uint64_t a1)
{
}

void __Block_byref_object_dispose__59(uint64_t a1)
{
}

void __Block_byref_object_dispose__60(uint64_t a1)
{
}

void __Block_byref_object_dispose__61(uint64_t a1)
{
}

void __Block_byref_object_dispose__62(uint64_t a1)
{
}

void __Block_byref_object_dispose__63(uint64_t a1)
{
}

void __Block_byref_object_dispose__64(uint64_t a1)
{
}

void __Block_byref_object_dispose__65(uint64_t a1)
{
}

void __Block_byref_object_dispose__66(uint64_t a1)
{
}

void __Block_byref_object_dispose__67(uint64_t a1)
{
}

void __Block_byref_object_dispose__68(uint64_t a1)
{
}

void __Block_byref_object_dispose__69(uint64_t a1)
{
}

void __Block_byref_object_dispose__70(uint64_t a1)
{
}

void __Block_byref_object_dispose__71(uint64_t a1)
{
}

void __Block_byref_object_dispose__72(uint64_t a1)
{
}

void __Block_byref_object_dispose__73(uint64_t a1)
{
}

void __Block_byref_object_dispose__74(uint64_t a1)
{
}

void __Block_byref_object_dispose__75(uint64_t a1)
{
}

void __Block_byref_object_dispose__76(uint64_t a1)
{
}

void __Block_byref_object_dispose__77(uint64_t a1)
{
}

void __Block_byref_object_dispose__78(uint64_t a1)
{
}

void __Block_byref_object_dispose__79(uint64_t a1)
{
}

void __Block_byref_object_dispose__80(uint64_t a1)
{
}

void __Block_byref_object_dispose__81(uint64_t a1)
{
}

void __Block_byref_object_dispose__82(uint64_t a1)
{
}

void __Block_byref_object_dispose__83(uint64_t a1)
{
}

void __Block_byref_object_dispose__84(uint64_t a1)
{
}

void __Block_byref_object_dispose__85(uint64_t a1)
{
}

void __Block_byref_object_dispose__86(uint64_t a1)
{
}

void __Block_byref_object_dispose__87(uint64_t a1)
{
}

void __Block_byref_object_dispose__88(uint64_t a1)
{
}

void __Block_byref_object_dispose__89(uint64_t a1)
{
}

void __Block_byref_object_dispose__90(uint64_t a1)
{
}

void __Block_byref_object_dispose__91(uint64_t a1)
{
}

void __Block_byref_object_dispose__92(uint64_t a1)
{
}

id FCThumbnailForHeadlineMinimumSize(void *a1, double a2, double a3, double a4)
{
  return FCThumbnailForHeadlineMinimumSizeInPixels(a1, a2 * a4, a3 * a4);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__24(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__26(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__27(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__28(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__29(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__30(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__31(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void *__Block_byref_object_copy__32(uint64_t a1, uint64_t a2)
{
  result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t __Block_byref_object_copy__33(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__34(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__35(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__36(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__37(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__38(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__39(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__40(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__41(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__42(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__43(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__44(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__45(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__46(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__47(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__48(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__49(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__50(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__51(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__52(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__53(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__54(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__55(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__56(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__57(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__58(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__59(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__60(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__61(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__62(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__63(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__64(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__65(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__66(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__67(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__68(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__69(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__70(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void *__Block_byref_object_copy__71(uint64_t a1, uint64_t a2)
{
  result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t __Block_byref_object_copy__72(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__73(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__74(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__75(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__76(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__77(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__78(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__79(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__80(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__81(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__82(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__83(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__84(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__85(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__86(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__87(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__88(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__89(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__90(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__91(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__92(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __FCDispatchGroupWrap_block_invoke(uint64_t a1)
{
}

uint64_t FCContentModeFromString(void *a1)
{
  id v1 = a1;
  if (v1
    && ([&unk_1EF8D9718 objectForKeyedSubscript:v1],
        v2 = objc_claimAutoreleasedReturnValue(),
        v2,
        v2))
  {
    id v3 = [&unk_1EF8D9718 objectForKeyedSubscript:v1];
    uint64_t v4 = [v3 integerValue];
  }
  else
  {
    uint64_t v4 = 1;
  }

  return v4;
}

id FCTagAdjustName(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  if (a2)
  {
    id v5 = FCBundle();
    id v6 = [v5 localizedStringForKey:@"Sports" value:&stru_1EF8299B8 table:0];
  }
  else
  {
    id v6 = v3;
  }

  return v6;
}

uint64_t FCCheckedDynamicCast(objc_class *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a2 && (objc_opt_isKindOfClass() & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      id v5 = [NSString alloc];
      id v6 = NSStringFromClass(a1);
      double v7 = (objc_class *)objc_opt_class();
      *(_DWORD *)buf = 136315906;
      double v9 = "id FCCheckedDynamicCast(Class, id<NSObject>)";
      __int16 v10 = 2080;
      uint64_t v11 = "FCCast.m";
      __int16 v12 = 1024;
      int v13 = 98;
      __int16 v14 = 2114;
      uint64_t v15 = [v5 initWithFormat:@"Unexpected object type in checked dynamic cast - Expected %@, Got %@", v6, NSStringFromClass(v7)];
      _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
    }
    return 0;
  }
  return v2;
}

uint64_t __FCURLForContainerizedUserAccountDocumentDirectory_block_invoke()
{
  qword_1EB5D1398 = FCURLForDirectoryInDomain(NSDocumentDirectory, 1uLL);
  return MEMORY[0x1F41817F8]();
}

void __FCURLForContainerizedUserAccountCachesDirectory_block_invoke()
{
  uint64_t v0 = FCURLForDirectoryInDomain(NSCachesDirectory, 1uLL);
  id v1 = (void *)_MergedGlobals_165;
  _MergedGlobals_165 = v0;

  uint64_t v2 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v3 = 0;
  [v2 createDirectoryAtURL:_MergedGlobals_165 withIntermediateDirectories:1 attributes:0 error:&v3];
}

void sub_1A4628208(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

id FCCachedThumbnailForHeadline(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 thumbnailUltraHQ];
  uint64_t v3 = [v2 thumbnailAssetHandle];
  uint64_t v4 = [v3 filePath];

  if (v4)
  {
    uint64_t v5 = [v1 thumbnailUltraHQ];
LABEL_11:
    v18 = (void *)v5;
    goto LABEL_12;
  }
  id v6 = [v1 thumbnailHQ];
  double v7 = [v6 thumbnailAssetHandle];
  double v8 = [v7 filePath];

  if (v8)
  {
    uint64_t v5 = [v1 thumbnailHQ];
    goto LABEL_11;
  }
  double v9 = [v1 thumbnailMedium];
  __int16 v10 = [v9 thumbnailAssetHandle];
  uint64_t v11 = [v10 filePath];

  if (v11)
  {
    uint64_t v5 = [v1 thumbnailMedium];
    goto LABEL_11;
  }
  __int16 v12 = [v1 thumbnail];
  int v13 = [v12 thumbnailAssetHandle];
  __int16 v14 = [v13 filePath];

  if (v14)
  {
    uint64_t v5 = [v1 thumbnail];
    goto LABEL_11;
  }
  uint64_t v15 = [v1 thumbnailLQ];
  uint64_t v16 = [v15 thumbnailAssetHandle];
  __int16 v17 = [v16 filePath];

  if (v17)
  {
    uint64_t v5 = [v1 thumbnailLQ];
    goto LABEL_11;
  }
  v18 = 0;
LABEL_12:

  return v18;
}

id FCThumbnailForHeadlineMinimumSizeInPixels(void *a1, double a2, double a3)
{
  id v5 = a1;
  id v6 = v5;
  if (a2 == *MEMORY[0x1E4F1DB30] && a3 == *(double *)(MEMORY[0x1E4F1DB30] + 8))
  {
    id v23 = 0;
    goto LABEL_40;
  }
  uint64_t v8 = [v5 thumbnailLQ];
  if (v8)
  {
    double v9 = (void *)v8;
    __int16 v10 = [v6 thumbnailLQ];
    [v10 thumbnailSize];
    double v12 = v11;
    double v14 = v13;

    if (v12 >= a2 && v14 >= a3)
    {
      uint64_t v38 = [v6 thumbnailLQ];
      goto LABEL_26;
    }
  }
  uint64_t v16 = [v6 thumbnail];
  if (v16)
  {
    __int16 v17 = (void *)v16;
    v18 = [v6 thumbnail];
    [v18 thumbnailSize];
    double v20 = v19;
    double v22 = v21;

    if (v20 >= a2 && v22 >= a3)
    {
      uint64_t v38 = [v6 thumbnail];
      goto LABEL_26;
    }
  }
  uint64_t v24 = [v6 thumbnailMedium];
  if (v24)
  {
    v25 = (void *)v24;
    v26 = [v6 thumbnailMedium];
    [v26 thumbnailSize];
    double v28 = v27;
    double v30 = v29;

    if (v28 >= a2 && v30 >= a3)
    {
      uint64_t v38 = [v6 thumbnailMedium];
      goto LABEL_26;
    }
  }
  uint64_t v31 = [v6 thumbnailHQ];
  if (v31)
  {
    v32 = (void *)v31;
    v33 = [v6 thumbnailHQ];
    [v33 thumbnailSize];
    double v35 = v34;
    double v37 = v36;

    if (v35 >= a2 && v37 >= a3)
    {
      uint64_t v38 = [v6 thumbnailHQ];
      goto LABEL_26;
    }
  }
  v39 = [v6 thumbnailUltraHQ];

  if (v39)
  {
    uint64_t v38 = [v6 thumbnailUltraHQ];
LABEL_26:
    id v23 = (id)v38;
    if (v38) {
      goto LABEL_40;
    }
  }
  uint64_t v40 = [v6 thumbnailUltraHQ];
  v41 = v40;
  if (v40)
  {
    id v23 = v40;
  }
  else
  {
    v42 = [v6 thumbnailHQ];
    v43 = v42;
    if (v42)
    {
      id v23 = v42;
    }
    else
    {
      v44 = [v6 thumbnailMedium];
      v45 = v44;
      if (v44)
      {
        id v23 = v44;
      }
      else
      {
        v46 = [v6 thumbnail];
        v47 = v46;
        if (v46)
        {
          id v48 = v46;
        }
        else
        {
          id v48 = [v6 thumbnailLQ];
        }
        id v23 = v48;
      }
    }
  }
LABEL_40:

  return v23;
}

double FCThumbnailAspectRatioForHeadline(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 thumbnailUltraHQ];

  if (v2)
  {
    uint64_t v3 = [v1 thumbnailUltraHQ];
LABEL_11:
    uint64_t v8 = v3;
    [v3 thumbnailSize];
    double v10 = v9;
    double v12 = v11;

    goto LABEL_12;
  }
  uint64_t v4 = [v1 thumbnailHQ];

  if (v4)
  {
    uint64_t v3 = [v1 thumbnailHQ];
    goto LABEL_11;
  }
  id v5 = [v1 thumbnailMedium];

  if (v5)
  {
    uint64_t v3 = [v1 thumbnailMedium];
    goto LABEL_11;
  }
  id v6 = [v1 thumbnail];

  if (v6)
  {
    uint64_t v3 = [v1 thumbnail];
    goto LABEL_11;
  }
  double v7 = [v1 thumbnailLQ];

  if (v7)
  {
    uint64_t v3 = [v1 thumbnailLQ];
    goto LABEL_11;
  }
  double v10 = *MEMORY[0x1E4F1DB30];
  double v12 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
LABEL_12:
  if (v12 == 0.0) {
    double v13 = 0.0;
  }
  else {
    double v13 = v10 / v12;
  }

  return v13;
}

id FCURLForDirectoryInDomain(NSSearchPathDirectory a1, NSSearchPathDomainMask a2)
{
  uint64_t v2 = NSSearchPathForDirectoriesInDomains(a1, a2, 1);
  uint64_t v3 = objc_msgSend(v2, "fc_onlyObject");
  if (v3)
  {
    uint64_t v4 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v3 isDirectory:1];
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_1A462A760(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 232));
  _Unwind_Resume(a1);
}

uint64_t FCReadWriteDictionaryWithAccessor(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  double v13 = a5;
  if (!v9 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v15 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "readingURL");
    *(_DWORD *)buf = 136315906;
    v26 = "BOOL FCReadWriteDictionaryWithAccessor(NSURL *__strong, NSSet<Class> *__strong, NSURL *__strong, NSError *__st"
          "rong, void (^__strong)(NSMutableDictionary *__strong))";
    __int16 v27 = 2080;
    double v28 = "FCFileCoordinatedDictionaryUtilities.m";
    __int16 v29 = 1024;
    int v30 = 47;
    __int16 v31 = 2114;
    v32 = v15;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

    if (v11) {
      goto LABEL_6;
    }
  }
  else if (v11)
  {
    goto LABEL_6;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v16 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "writingURL");
    *(_DWORD *)buf = 136315906;
    v26 = "BOOL FCReadWriteDictionaryWithAccessor(NSURL *__strong, NSSet<Class> *__strong, NSURL *__strong, NSError *__st"
          "rong, void (^__strong)(NSMutableDictionary *__strong))";
    __int16 v27 = 2080;
    double v28 = "FCFileCoordinatedDictionaryUtilities.m";
    __int16 v29 = 1024;
    int v30 = 48;
    __int16 v31 = 2114;
    v32 = v16;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
LABEL_6:
  if (!v13 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    __int16 v17 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "accessor");
    *(_DWORD *)buf = 136315906;
    v26 = "BOOL FCReadWriteDictionaryWithAccessor(NSURL *__strong, NSSet<Class> *__strong, NSURL *__strong, NSError *__st"
          "rong, void (^__strong)(NSMutableDictionary *__strong))";
    __int16 v27 = 2080;
    double v28 = "FCFileCoordinatedDictionaryUtilities.m";
    __int16 v29 = 1024;
    int v30 = 49;
    __int16 v31 = 2114;
    v32 = v17;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

    if (v12) {
      goto LABEL_9;
    }
  }
  else if (v12)
  {
LABEL_9:
    v13[2](v13, 0);
    uint64_t v14 = 0;
    goto LABEL_19;
  }
  uint64_t v18 = FCReadDictionary(v9, v10);
  double v19 = (void *)v18;
  double v20 = (void *)MEMORY[0x1E4F1CC08];
  if (v18) {
    double v20 = (void *)v18;
  }
  id v21 = v20;

  double v22 = (void *)[v21 mutableCopy];
  ((void (**)(id, void *))v13)[2](v13, v22);
  char v23 = [v21 isEqualToDictionary:v22];

  if (v23) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = FCWriteDictionary(v22, v11);
  }

LABEL_19:
  return v14;
}

id FCReadDictionary(void *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    id v10 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "fileURL");
    *(_DWORD *)buf = 136315906;
    __int16 v17 = "NSDictionary *FCReadDictionary(NSURL *__strong, NSSet<Class> *__strong)";
    __int16 v18 = 2080;
    double v19 = "FCFileCoordinatedDictionaryUtilities.m";
    __int16 v20 = 1024;
    int v21 = 17;
    __int16 v22 = 2114;
    char v23 = v10;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

    if (v4) {
      goto LABEL_6;
    }
  }
  else if (v4)
  {
    goto LABEL_6;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    id v11 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "allowedClasses");
    *(_DWORD *)buf = 136315906;
    __int16 v17 = "NSDictionary *FCReadDictionary(NSURL *__strong, NSSet<Class> *__strong)";
    __int16 v18 = 2080;
    double v19 = "FCFileCoordinatedDictionaryUtilities.m";
    __int16 v20 = 1024;
    int v21 = 18;
    __int16 v22 = 2114;
    char v23 = v11;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
LABEL_6:
  id v5 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfURL:v3];
  if (v5)
  {
    id v15 = 0;
    id v6 = [MEMORY[0x1E4F28DC0] unarchivedObjectOfClasses:v4 fromData:v5 error:&v15];
    id v7 = v15;
    uint64_t v8 = v7;
    if ((!v6 || v7) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      id v12 = [NSString alloc];
      double v13 = [v3 absoluteString];
      uint64_t v14 = (void *)[v12 initWithFormat:@"Failed to unarchive dictionary from '%@' with error: %@", v13, v8];
      *(_DWORD *)buf = 136315906;
      __int16 v17 = "NSDictionary *FCReadDictionary(NSURL *__strong, NSSet<Class> *__strong)";
      __int16 v18 = 2080;
      double v19 = "FCFileCoordinatedDictionaryUtilities.m";
      __int16 v20 = 1024;
      int v21 = 28;
      __int16 v22 = 2114;
      char v23 = v14;
      _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
    }
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

id FCPersistenceQueue()
{
  if (qword_1EB5D1AC0 != -1) {
    dispatch_once(&qword_1EB5D1AC0, &__block_literal_global_162);
  }
  uint64_t v0 = (void *)_MergedGlobals_214;
  return v0;
}

dispatch_queue_global_t FCDispatchQueueForQualityOfService(uint64_t a1)
{
  if (a1 == 33) {
    uint64_t v1 = 33;
  }
  else {
    uint64_t v1 = 0;
  }
  if (a1 == 25) {
    uint64_t v1 = 25;
  }
  if (a1 == 17) {
    uint64_t v1 = 17;
  }
  uint64_t v2 = 21;
  if (a1 == 9) {
    uint64_t v3 = 9;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1 != -1) {
    uint64_t v2 = v3;
  }
  if (a1 <= 16) {
    intptr_t v4 = v2;
  }
  else {
    intptr_t v4 = v1;
  }
  return dispatch_get_global_queue(v4, 0);
}

id FCHandleOperationTimeout(dispatch_time_t a1, void *a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (!v5 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    id v12 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "timeoutQueue");
    *(_DWORD *)buf = 136315906;
    uint64_t v16 = "FCOperationCancelledTest  _Nonnull FCHandleOperationTimeout(dispatch_time_t, __strong dispatch_queue_t _Nonnul"
          "l, __strong dispatch_block_t _Nonnull)";
    __int16 v17 = 2080;
    __int16 v18 = "FCBlockUtilities.m";
    __int16 v19 = 1024;
    int v20 = 243;
    __int16 v21 = 2114;
    __int16 v22 = v12;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

    if (v6) {
      goto LABEL_6;
    }
  }
  else if (v6)
  {
    goto LABEL_6;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    double v13 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "timeoutHandler");
    *(_DWORD *)buf = 136315906;
    uint64_t v16 = "FCOperationCancelledTest  _Nonnull FCHandleOperationTimeout(dispatch_time_t, __strong dispatch_queue_t _Nonnul"
          "l, __strong dispatch_block_t _Nonnull)";
    __int16 v17 = 2080;
    __int16 v18 = "FCBlockUtilities.m";
    __int16 v19 = 1024;
    int v20 = 244;
    __int16 v21 = 2114;
    __int16 v22 = v13;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
LABEL_6:
  if (a1 == -1)
  {
    id v9 = &__block_literal_global_15_0;
  }
  else
  {
    id v14 = 0;
    id v7 = FCHandleOperationCancellation(&v14, v6);
    id v8 = v14;
    dispatch_after(a1, v5, v8);
    id v9 = _Block_copy(v7);
  }
  id v10 = _Block_copy(v9);

  return v10;
}

void sub_1A462D398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void FCPerformBlockOnMainThread(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  if (!v1 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v2 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "block");
    *(_DWORD *)buf = 136315906;
    intptr_t v4 = "void FCPerformBlockOnMainThread(dispatch_block_t  _Nonnull __strong)";
    __int16 v5 = 2080;
    id v6 = "FCBlockUtilities.m";
    __int16 v7 = 1024;
    int v8 = 23;
    __int16 v9 = 2114;
    id v10 = v2;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
  if ([MEMORY[0x1E4F29060] isMainThread]) {
    v1[2](v1);
  }
  else {
    dispatch_async(MEMORY[0x1E4F14428], v1);
  }
}

__CFString *FCStringFromQueuePriority(uint64_t a1)
{
  *((void *)&v1 + 1) = a1;
  *(void *)&long long v1 = a1 + 8;
  unint64_t v2 = (v1 >> 2) - 1;
  if (v2 > 3) {
    return @"VeryLow";
  }
  else {
    return off_1E5B57608[v2];
  }
}

__CFString *FCStringFromQualityOfService(uint64_t a1)
{
  long long v1 = @"UserInteractive";
  unint64_t v2 = @"Utility";
  uint64_t v3 = @"UserInitiated";
  if (a1 != 25) {
    uint64_t v3 = @"UserInteractive";
  }
  if (a1 != 17) {
    unint64_t v2 = v3;
  }
  if (a1 == 9) {
    long long v1 = @"Background";
  }
  if (a1 == -1) {
    long long v1 = @"Default";
  }
  if (a1 <= 16) {
    return v1;
  }
  else {
    return v2;
  }
}

uint64_t FCCurrentQoSOrUtilityIfMain()
{
  if ([MEMORY[0x1E4F29060] isMainThread]) {
    return 17;
  }
  return FCCurrentQoS();
}

id FCGenerateOperationID()
{
  uint64_t v0 = 0;
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  do
    v3[v0++] = aAbcdef01234567[arc4random_uniform(0x10u)];
  while (v0 != 16);
  v3[16] = 0;
  long long v1 = [NSString stringWithUTF8String:v3];
  return v1;
}

uint64_t FCCurrentQoS()
{
  HIDWORD(v0) = qos_class_self() - 9;
  LODWORD(v0) = HIDWORD(v0);
  uint64_t v1 = 8 * (v0 >> 3) + 9;
  if ((v0 >> 3) >= 4) {
    return -1;
  }
  else {
    return v1;
  }
}

void sub_1A462E8D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t FCHistoryItemIDFromArticleID(uint64_t a1)
{
  return [NSString stringWithFormat:@"art-%@", a1];
}

void sub_1A46312D8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

double FCCGRectFromBuffer(unint64_t a1)
{
  if (a1) {
    return (double)HIWORD(a1) / 65535.0;
  }
  else {
    return *MEMORY[0x1E4F1DB28];
  }
}

FCArticleHeadline *__FCHeadlinesByArticleIDFromHeldRecords_block_invoke(uint64_t a1, void *a2)
{
  return FCHeadlineWithHeldRecords(*(void **)(a1 + 32), *(void **)(a1 + 40), a2, *(void **)(a1 + 48), *(void **)(a1 + 56), *(void *)(a1 + 80) != 0, *(void **)(a1 + 64), *(void **)(a1 + 72));
}

FCArticleHeadline *FCHeadlineWithHeldRecords(void *a1, void *a2, void *a3, void *a4, void *a5, char a6, void *a7, void *a8)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  id v14 = a1;
  id v15 = a2;
  id v16 = a3;
  id v17 = a4;
  id v18 = a5;
  id v19 = a7;
  id v47 = a8;
  if (!v14 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v38 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "configuration");
    *(_DWORD *)buf = 136315906;
    v50 = "id<FCHeadlineProviding> FCHeadlineWithHeldRecords(__strong id<FCCoreConfiguration>, FCAssetManager *__strong, "
          "NSString *__strong, FCHeldRecords<NTPBArticleRecord *> *__strong, NSDictionary<NSString *,id<FCChannelProvidin"
          "g>> *__strong, BOOL, NSDictionary<NSString *,FCIssue *> *__strong, FCHeadlineExperimentalTitleProvider *__strong)";
    __int16 v51 = 2080;
    v52 = "FCArticleHeadlineUtilities.m";
    __int16 v53 = 1024;
    int v54 = 26;
    __int16 v55 = 2114;
    v56 = v38;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

    if (v15) {
      goto LABEL_6;
    }
  }
  else if (v15)
  {
    goto LABEL_6;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    v39 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "assetManager");
    *(_DWORD *)buf = 136315906;
    v50 = "id<FCHeadlineProviding> FCHeadlineWithHeldRecords(__strong id<FCCoreConfiguration>, FCAssetManager *__strong, "
          "NSString *__strong, FCHeldRecords<NTPBArticleRecord *> *__strong, NSDictionary<NSString *,id<FCChannelProvidin"
          "g>> *__strong, BOOL, NSDictionary<NSString *,FCIssue *> *__strong, FCHeadlineExperimentalTitleProvider *__strong)";
    __int16 v51 = 2080;
    v52 = "FCArticleHeadlineUtilities.m";
    __int16 v53 = 1024;
    int v54 = 27;
    __int16 v55 = 2114;
    v56 = v39;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
LABEL_6:
  if (!v16 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v40 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "articleID");
    *(_DWORD *)buf = 136315906;
    v50 = "id<FCHeadlineProviding> FCHeadlineWithHeldRecords(__strong id<FCCoreConfiguration>, FCAssetManager *__strong, "
          "NSString *__strong, FCHeldRecords<NTPBArticleRecord *> *__strong, NSDictionary<NSString *,id<FCChannelProvidin"
          "g>> *__strong, BOOL, NSDictionary<NSString *,FCIssue *> *__strong, FCHeadlineExperimentalTitleProvider *__strong)";
    __int16 v51 = 2080;
    v52 = "FCArticleHeadlineUtilities.m";
    __int16 v53 = 1024;
    int v54 = 28;
    __int16 v55 = 2114;
    v56 = v40;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
  v43 = [v17 recordsByID];
  int v20 = [v43 objectForKeyedSubscript:v16];
  id v48 = [v17 interestTokenForID:v16];
  __int16 v21 = [v20 sourceChannelTagID];

  if (v21)
  {
    __int16 v22 = [v20 sourceChannelTagID];
    uint64_t v23 = [v18 objectForKeyedSubscript:v22];
  }
  else
  {
    uint64_t v23 = 0;
  }
  v46 = v18;
  uint64_t v24 = [v20 parentIssueID];
  if (v24
    && (v25 = (void *)v24,
        [v14 paidBundleConfig],
        v26 = objc_claimAutoreleasedReturnValue(),
        int v27 = [v26 areMagazinesEnabled],
        v26,
        v25,
        v27))
  {
    double v28 = [v20 parentIssueID];
    __int16 v29 = [v19 objectForKeyedSubscript:v28];
  }
  else
  {
    __int16 v29 = 0;
  }
  int v30 = 0;
  char v31 = a6;
  if (v23) {
    char v31 = 0;
  }
  if (v20 && v48 && (v31 & 1) == 0)
  {
    v41 = [FCArticleHeadline alloc];
    [v14 topStoriesConfig];
    v32 = id v45 = v17;
    [v32 styleConfigurations];
    id v42 = v19;
    double v34 = v33 = v15;
    [v14 topStoriesConfig];
    v36 = id v35 = v16;
    int v30 = -[FCArticleHeadline initWithArticleRecord:articleInterestToken:sourceChannel:parentIssue:storyStyleConfigs:storyTypeTimeout:rapidUpdatesTimeout:assetManager:experimentalTitleProvider:](v41, "initWithArticleRecord:articleInterestToken:sourceChannel:parentIssue:storyStyleConfigs:storyTypeTimeout:rapidUpdatesTimeout:assetManager:experimentalTitleProvider:", v20, v48, v23, v29, v34, [v36 storyTypeTimeout], objc_msgSend(v14, "articleRapidUpdatesTimeout"), v33, v47);

    id v16 = v35;
    id v15 = v33;
    id v19 = v42;

    id v17 = v45;
  }

  return v30;
}

__CFString *FCCKLocalizedArticleArticleRecirculationConfigurationKey()
{
  unint64_t v0 = +[FCAppleAccount sharedAccount];
  int v1 = [v0 isContentStoreFrontSupported];

  unint64_t v2 = @"articleRecirculationConfiguration";
  if (v1)
  {
    uint64_t v3 = +[FCAppleAccount sharedAccount];
    uint64_t v4 = [v3 contentStoreFrontID];
    unint64_t v2 = [NSString stringWithFormat:@"%@_%@", @"articleRecirculationConfiguration", v4];
  }
  return v2;
}

void sub_1A46366D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

FCIssue *__FCIssuesWithHeldRecords_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int16 v7 = *(void **)(a1 + 32);
  int v8 = [v5 channelTagID];
  __int16 v9 = objc_msgSend(v7, "fc_safeObjectForKey:", v8);

  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = [[FCIssue alloc] initWithIssueRecord:v5 assetManager:*(void *)(a1 + 40) interestToken:v6 sourceChannel:v10];
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

void sub_1A463AA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FCDynamicCast(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (objc_opt_isKindOfClass()) {
    return a2;
  }
  return 0;
}

BOOL FCDispatchGroupIsEmpty(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v1 = a1;
  if (!v1 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "group");
    *(_DWORD *)buf = 136315906;
    id v6 = "BOOL FCDispatchGroupIsEmpty(dispatch_group_t  _Nonnull __strong)";
    __int16 v7 = 2080;
    int v8 = "FCBlockUtilities.m";
    __int16 v9 = 1024;
    int v10 = 168;
    __int16 v11 = 2114;
    id v12 = v4;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
  BOOL v2 = dispatch_group_wait(v1, 0) == 0;

  return v2;
}

void sub_1A463D284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A463D6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  operator delete(v10);
  _Unwind_Resume(a1);
}

void sub_1A463EE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t FCArticleStoryTypeForStoryTypeString(void *a1)
{
  id v1 = a1;
  if ([v1 caseInsensitiveCompare:@"top"]
    && [v1 caseInsensitiveCompare:@"topStory"])
  {
    if ([v1 caseInsensitiveCompare:@"breaking"])
    {
      if ([v1 caseInsensitiveCompare:@"updated"])
      {
        if ([v1 caseInsensitiveCompare:@"developing"])
        {
          if ([v1 caseInsensitiveCompare:@"local"]) {
            uint64_t v2 = 0;
          }
          else {
            uint64_t v2 = 5;
          }
        }
        else
        {
          uint64_t v2 = 3;
        }
      }
      else
      {
        uint64_t v2 = 4;
      }
    }
    else
    {
      uint64_t v2 = 2;
    }
  }
  else
  {
    uint64_t v2 = 1;
  }

  return v2;
}

id FCAppConfigurationArrayValueWithDefaultValue(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a1)
  {
    __int16 v7 = [a1 objectForKeyedSubscript:a2];
    if (!v7
      || ([MEMORY[0x1E4F1CA98] null],
          int v8 = objc_claimAutoreleasedReturnValue(),
          v8,
          uint64_t v9 = v7,
          v7 == v8))
    {
      uint64_t v9 = v6;
    }
    id v10 = v9;
  }
  else
  {
    id v10 = v5;
  }

  return v10;
}

uint64_t FCChannelUpsellTriggerMethodForValue(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if ([v1 caseInsensitiveCompare:@"TriggerMethodHardFollow"])
    {
      if ([v2 caseInsensitiveCompare:@"TriggerMethodChannelFeedEntry"])
      {
        if ([v2 caseInsensitiveCompare:@"TriggerMethodArticleOpenDaily"])
        {
          if ([v2 caseInsensitiveCompare:@"TriggerMethodArticleOpenWeekly"])
          {
            if ([v2 caseInsensitiveCompare:@"TriggerMethodArticleOpenMonthly"]) {
              uint64_t v3 = 0;
            }
            else {
              uint64_t v3 = 5;
            }
          }
          else
          {
            uint64_t v3 = 4;
          }
        }
        else
        {
          uint64_t v3 = 3;
        }
      }
      else
      {
        uint64_t v3 = 2;
      }
    }
    else
    {
      uint64_t v3 = 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t FCEmailSignupStyleForValue(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if ([v1 caseInsensitiveCompare:@"EmailSignupStyleLandingPage"]) {
      uint64_t v3 = 2 * ([v2 caseInsensitiveCompare:@"EmailSignupStyleAlert"] == 0);
    }
    else {
      uint64_t v3 = 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t FCEndpointEnvironmentForEnvironment(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"PRODUCTION"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"STAGING"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"QA"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"TEST"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"DEVEL"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"SANDBOX"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"DEMO1"])
  {
    uint64_t v2 = 8;
  }
  else if ([v1 isEqualToString:@"DEMO2"])
  {
    uint64_t v2 = 9;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id FCAnalyticsEnvelopeContentTypeConfigsByContentType(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = objc_opt_new();
  id v20 = 0;
  id v6 = objc_msgSend(MEMORY[0x1E4F1C9E8], "fc_dictionaryFromJSON:error:", v4, &v20);

  id v7 = v20;
  int v8 = v7;
  if (v4 && !v7)
  {
    id v19 = 0;
    uint64_t v9 = objc_msgSend(MEMORY[0x1E4F1C9E8], "fc_dictionaryFromJSON:error:", v3, &v19);
    id v10 = v19;
    int v8 = v10;
    if (v3 && !v10)
    {
      uint64_t v11 = [v9 objectForKeyedSubscript:@"config"];
      if (v11)
      {
        id v12 = [v6 objectForKeyedSubscript:@"urls"];
        v16[0] = MEMORY[0x1E4F143A8];
        v16[1] = 3221225472;
        v16[2] = __FCAnalyticsEnvelopeContentTypeConfigsByContentType_block_invoke;
        v16[3] = &unk_1E5B53E10;
        id v17 = v12;
        id v18 = v5;
        id v13 = v12;
        [v11 enumerateObjectsUsingBlock:v16];
      }
    }
  }
  id v14 = v5;

  return v14;
}

id FCAppConfigurationDictionaryValueWithOverride(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  id v9 = a4;
  id v10 = a3;
  uint64_t v11 = NewsCoreUserDefaults();
  int v12 = [v11 BOOLForKey:v10];

  if (!NFInternalBuild() || !v12) {
    goto LABEL_9;
  }
  id v13 = NewsCoreUserDefaults();
  id v14 = [v13 stringForKey:v9];

  if (![v14 length])
  {
LABEL_8:

LABEL_9:
    uint64_t v16 = FCAppConfigurationDictionaryValueWithDefaultValue(v7, (uint64_t)v8, 0);
    goto LABEL_10;
  }
  uint64_t v15 = [v14 dataUsingEncoding:4];
  id v21 = 0;
  uint64_t v16 = [MEMORY[0x1E4F28D90] JSONObjectWithData:v15 options:0 error:&v21];
  id v17 = v21;
  if (v17)
  {
    id v18 = v17;
    id v19 = FCAppConfigurationLog;
    if (os_log_type_enabled((os_log_t)FCAppConfigurationLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      id v23 = v9;
      __int16 v24 = 2112;
      v25 = v18;
      _os_log_error_impl(&dword_1A460D000, v19, OS_LOG_TYPE_ERROR, "Failed to parse debug override value for %@ error: %@", buf, 0x16u);
    }

    goto LABEL_8;
  }

LABEL_10:
  return v16;
}

uint64_t FCAppConfigurationIntegerValueWithDefaultValueIfMissing(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    id v5 = [a1 objectForKeyedSubscript:a2];
    if (v5)
    {
      id v6 = [MEMORY[0x1E4F1CA98] null];

      if (v5 != v6) {
        a4 = [v5 longLongValue];
      }
    }

    return a4;
  }
  return a3;
}

uint64_t FCCKLocalizedRecordKey(uint64_t a1, uint64_t a2)
{
  return [NSString stringWithFormat:@"%@_%@", a1, a2];
}

id FCSupportedStoreFrontIDs()
{
  if (qword_1EB5D1850 != -1) {
    dispatch_once(&qword_1EB5D1850, &__block_literal_global_511);
  }
  unint64_t v0 = (void *)qword_1EB5D1848;
  return v0;
}

id __FCArticleRecordSourceLocalizableKeysFromDesiredFieldOptions_block_invoke()
{
  if (qword_1EB5D0F50 != -1) {
    dispatch_once(&qword_1EB5D0F50, &__block_literal_global_61_0);
  }
  unint64_t v0 = (void *)_MergedGlobals_12;
  return v0;
}

id FCArticleRecordSourceAlwaysLocalizedKeysFromDesiredFieldOptions(int a1)
{
  v5[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = objc_opt_new();
  [v2 addObject:@"articleRecirculationConfigurationAsset"];
  [v2 addObject:@"engagementCohortsBaseline"];
  [v2 addObject:@"conversionCohortsBaseline"];
  if ((a1 & 0x100000) != 0)
  {
    v5[0] = @"stocksMetadata";
    v5[1] = @"stocksScores";
    id v3 = [MEMORY[0x1E4F1C978] arrayWithObjects:v5 count:2];
    [v2 addObjectsFromArray:v3];
  }
  return v2;
}

void sub_1A4647318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id FCArticleRecordSourceDesiredKeysFromDesiredFieldOptions(int a1, void *a2, void *a3)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a2;
  id v7 = objc_opt_new();
  int HasExtendedColorDisplay = NFDeviceHasExtendedColorDisplay();
  if ((a1 & 2) != 0)
  {
    [v7 addObject:@"thumbnailWidgetLQ"];
    if (HasExtendedColorDisplay) {
      [v7 addObject:@"thumbnailWidgetLQ2"];
    }
    [v7 addObject:@"thumbnailWidgetLQMetadata"];
    if ((a1 & 4) == 0)
    {
LABEL_3:
      if ((a1 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_39;
    }
  }
  else if ((a1 & 4) == 0)
  {
    goto LABEL_3;
  }
  [v7 addObject:@"thumbnailWidget"];
  if (HasExtendedColorDisplay) {
    [v7 addObject:@"thumbnailWidget2"];
  }
  [v7 addObject:@"thumbnailWidgetMetadata"];
  if ((a1 & 8) == 0)
  {
LABEL_4:
    if ((a1 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_42;
  }
LABEL_39:
  [v7 addObject:@"thumbnailWidgetHQ"];
  if (HasExtendedColorDisplay) {
    [v7 addObject:@"thumbnailWidgetHQ2"];
  }
  [v7 addObject:@"thumbnailWidgetHQMetadata"];
  if ((a1 & 0x10) == 0)
  {
LABEL_5:
    if ((a1 & 0x200000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_43;
  }
LABEL_42:
  [v7 addObject:@"title"];
  if ((a1 & 0x200000) == 0)
  {
LABEL_6:
    if ((a1 & 0x40000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_44;
  }
LABEL_43:
  [v7 addObject:@"titlesExperimental"];
  if ((a1 & 0x40000) == 0)
  {
LABEL_7:
    if ((a1 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_45;
  }
LABEL_44:
  [v7 addObject:@"titleCompact"];
  if ((a1 & 0x20) == 0)
  {
LABEL_8:
    if ((a1 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }
LABEL_45:
  [v7 addObject:@"storyType"];
  if ((a1 & 0x40) == 0)
  {
LABEL_9:
    if ((a1 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_49;
  }
LABEL_46:
  [v7 addObject:@"thumbnailLQ"];
  if (HasExtendedColorDisplay) {
    [v7 addObject:@"thumbnailLQ2"];
  }
  [v7 addObject:@"thumbnailLQMetadata"];
  if ((a1 & 0x80) == 0)
  {
LABEL_10:
    if ((a1 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_52;
  }
LABEL_49:
  [v7 addObject:@"thumbnail"];
  if (HasExtendedColorDisplay) {
    [v7 addObject:@"thumbnail2"];
  }
  [v7 addObject:@"thumbnailMetadata"];
  if ((a1 & 0x100) == 0)
  {
LABEL_11:
    if ((a1 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_55;
  }
LABEL_52:
  [v7 addObject:@"thumbnailMedium"];
  if (HasExtendedColorDisplay) {
    [v7 addObject:@"thumbnailMedium2"];
  }
  [v7 addObject:@"thumbnailMediumMetadata"];
  if ((a1 & 0x200) == 0)
  {
LABEL_12:
    if ((a1 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_58;
  }
LABEL_55:
  [v7 addObject:@"thumbnailHQ"];
  if (HasExtendedColorDisplay) {
    [v7 addObject:@"thumbnailHQ2"];
  }
  [v7 addObject:@"thumbnailHQMetadata"];
  if ((a1 & 0x400) == 0)
  {
LABEL_13:
    if ((a1 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_61;
  }
LABEL_58:
  [v7 addObject:@"thumbnailUltraHQ"];
  if (HasExtendedColorDisplay) {
    [v7 addObject:@"thumbnailUltraHQ2"];
  }
  [v7 addObject:@"thumbnailUltraHQMetadata"];
  if ((a1 & 0x800) == 0)
  {
LABEL_14:
    if ((a1 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_62;
  }
LABEL_61:
  [v7 addObject:@"shortExcerpt"];
  if ((a1 & 0x1000) == 0)
  {
LABEL_15:
    if ((a1 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_63;
  }
LABEL_62:
  [v7 addObject:@"videoURL"];
  [v7 addObject:@"videoStillImage"];
  [v7 addObject:@"videoDuration"];
  [v7 addObject:@"videoType"];
  [v7 addObject:@"sportsEventIDs"];
  if ((a1 & 0x2000) == 0)
  {
LABEL_16:
    if ((a1 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_64;
  }
LABEL_63:
  [v7 addObject:@"isSponsored"];
  if ((a1 & 0x4000) == 0)
  {
LABEL_17:
    if ((a1 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_65;
  }
LABEL_64:
  [v7 addObject:@"isDraft"];
  if ((a1 & 0x8000) == 0)
  {
LABEL_18:
    if ((a1 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_66;
  }
LABEL_65:
  [v7 addObject:@"iAdCategories"];
  if ((a1 & 0x10000) == 0)
  {
LABEL_19:
    if ((a1 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_66:
  [v7 addObject:@"iAdKeywords"];
  if ((a1 & 0x20000) != 0) {
LABEL_20:
  }
    [v7 addObject:@"iAdSectionTagIDs"];
LABEL_21:
  if ((a1 & 0x80000) != 0)
  {
    v17[0] = @"videoCallToActionTitle";
    v17[1] = @"videoCallToActionURL";
    uint64_t v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v17 count:2];
    [v7 addObjectsFromArray:v11];

    if ((a1 & 0x100000) == 0)
    {
LABEL_23:
      if ((a1 & 0x4000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_70;
    }
  }
  else if ((a1 & 0x100000) == 0)
  {
    goto LABEL_23;
  }
  [v7 addObject:@"clusterIDStocks"];
  if ((a1 & 0x4000000) == 0)
  {
LABEL_24:
    if ((a1 & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_71;
  }
LABEL_70:
  [v7 addObject:@"accessoryText"];
  if ((a1 & 1) == 0)
  {
LABEL_25:
    if ((a1 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_72;
  }
LABEL_71:
  v16[0] = @"referencedArticleID";
  v16[1] = @"coverArt";
  int v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v16 count:2];
  [v7 addObjectsFromArray:v12];

  if ((a1 & 0x1000000) == 0)
  {
LABEL_26:
    if ((a1 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_73;
  }
LABEL_72:
  [v7 addObject:@"layeredCover"];
  [v7 addObject:@"layeredCoverAspectRatio"];
  if ((a1 & 0x2000000) == 0)
  {
LABEL_27:
    if ((a1 & 0x10000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_74;
  }
LABEL_73:
  v15[0] = @"narrativeTrackMetadata";
  v15[1] = @"narrativeTrackFullURL";
  v15[2] = @"narrativeTrackSampleURL";
  v15[3] = @"narrativeTrackTextRanges";
  id v13 = [MEMORY[0x1E4F1C978] arrayWithObjects:v15 count:4];
  [v7 addObjectsFromArray:v13];

  if ((a1 & 0x10000000) == 0)
  {
LABEL_28:
    if ((a1 & 0x20000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
LABEL_74:
  [v7 addObject:@"float16TitleEncoding"];
  if ((a1 & 0x20000000) != 0) {
LABEL_29:
  }
    [v7 addObject:@"float16FullBodyEncoding"];
LABEL_30:
  v14[0] = @"thumbnailFocalFrame";
  v14[1] = @"thumbnailPerceptualHash";
  v14[2] = @"publishDate";
  v14[3] = @"isPaid";
  v14[4] = @"isBundlePaid";
  v14[5] = @"isFeature";
  v14[6] = @"sourceChannelTagID";
  v14[7] = @"publisherArticleVersion";
  v14[8] = @"backendArticleVersion";
  v14[9] = @"contentType";
  v14[10] = @"contentURL";
  v14[11] = @"clusterID";
  v14[12] = @"blockedStorefrontIDs";
  v14[13] = @"allowedStorefrontIDs";
  v14[14] = @"primaryAudience";
  v14[15] = @"behaviorFlags";
  v14[16] = @"minNewsVersion";
  v14[17] = @"topicTagIDs";
  v14[18] = @"scoresTopicTagIDs";
  v14[19] = @"relatedArticleIDs2";
  v14[20] = @"moreFromPublisherArticleIDs";
  v14[21] = @"articleID";
  v14[22] = @"articleETag";
  v14[23] = @"articleModDate";
  v14[24] = @"flintDocument";
  v14[25] = @"flintFontResourceIDs";
  v14[26] = @"publisherSpecifiedArticleIDs";
  v14[27] = @"parentIssueID";
  v14[28] = @"language";
  v14[29] = @"role";
  v14[30] = @"halfLifeMillis";
  v14[31] = @"halfLifeMillisOverride";
  v14[32] = @"linkedArticleIDs";
  v14[33] = @"linkedIssueIDs";
  v14[34] = @"isIssueOnly";
  v14[35] = @"bodyTextLength";
  v14[36] = @"thumbnailPrimaryColor";
  v14[37] = @"thumbnailBackgroundColor";
  v14[38] = @"thumbnailTextColor";
  v14[39] = @"thumbnailAccentColor";
  v14[40] = @"authors";
  v14[41] = @"expirationData";
  v14[42] = @"routeURL";
  v14[43] = @"schemaFlags";
  id v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:44];
  [v7 addObjectsFromArray:v9];

  objc_msgSend(v7, "fc_safelyAddObject:", v6);
  objc_msgSend(v7, "fc_safelyAddObject:", v5);

  return v7;
}

void sub_1A4648474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A464A8DC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 240));
  _Unwind_Resume(a1);
}

void sub_1A464B7A4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 248));
  _Unwind_Resume(a1);
}

void __FCUpdateAssetURLHostIfNeeded_block_invoke()
{
  NewsCoreUserDefaults();
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  _MergedGlobals_219 = [v0 BOOLForKey:@"replace_cdn_with_cvws"];
}

id FCURLForAppConfigurationMirror()
{
  id v0 = +[FCContextConfiguration defaultConfiguration];
  id v1 = [v0 privateDataContainerCombinationIdentifier];
  uint64_t v2 = FCURLForGroupContainerForEnvironment(@"group.com.apple.news", v1);

  id v3 = [v2 URLByAppendingPathComponent:@"appConfigurationMirror" isDirectory:0];

  return v3;
}

id FCURLForTodayPrivateDataTransactionQueue()
{
  id v0 = +[FCContextConfiguration defaultConfiguration];
  id v1 = [v0 privateDataContainerCombinationIdentifier];
  uint64_t v2 = FCURLForFeldsparUserAccountHomeDirectoryForEnvironment(v1);

  id v3 = [v2 URLByAppendingPathComponent:@"todayPrivateDataTransactionQueue" isDirectory:0];

  return v3;
}

id FCURLForTodayPersonalizationUpdateStore()
{
  id v0 = +[FCContextConfiguration defaultConfiguration];
  id v1 = [v0 privateDataContainerCombinationIdentifier];
  uint64_t v2 = FCURLForFeldsparUserAccountHomeDirectoryForEnvironment(v1);

  id v3 = [v2 URLByAppendingPathComponent:@"todayPersonalizationUpdateStore" isDirectory:0];

  return v3;
}

id FCURLForSharedTabiResources()
{
  id v0 = +[FCContextConfiguration defaultConfiguration];
  id v1 = [v0 privateDataContainerCombinationIdentifier];
  uint64_t v2 = FCURLForGroupContainerForEnvironment(@"group.com.apple.news", v1);

  id v3 = [v2 URLByAppendingPathComponent:@"tabi" isDirectory:0];
  id v4 = [v3 URLByResolvingSymlinksInPath];

  return v4;
}

id FCURLForTodayDropbox()
{
  id v0 = +[FCContextConfiguration defaultConfiguration];
  id v1 = [v0 privateDataContainerCombinationIdentifier];
  uint64_t v2 = FCURLForFeldsparUserAccountHomeDirectoryForEnvironment(v1);

  id v3 = [v2 URLByAppendingPathComponent:@"todayWidgetDropboxData" isDirectory:0];

  return v3;
}

uint64_t FCCurrentContextEnvironment()
{
  if (!NFInternalBuild()) {
    return 0;
  }
  id v0 = NewsCoreUserDefaults();
  id v1 = [v0 stringForKey:@"content_environment"];
  if ([v1 isEqualToString:@"staging"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"devel"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"qa"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"test"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"icloud1"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"sandbox"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"demo1"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"demo2"])
  {
    uint64_t v2 = 8;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

__CFString *FCOfflineModePingHostName(unint64_t a1)
{
  if (a1)
  {
    FCNewsAssetServerHostNameForEnvironment(a1);
    uint64_t v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v2 = @"gateway.icloud.com";
  }
  return v2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

id FCURLForNotificationHistory()
{
  id v0 = +[FCContextConfiguration defaultConfiguration];
  uint64_t v1 = [v0 privateDataContainerCombinationIdentifier];
  uint64_t v2 = FCURLForGroupContainerForEnvironment(@"group.com.apple.news", v1);

  uint64_t v3 = [v2 URLByAppendingPathComponent:@"notification_history" isDirectory:0];
  id v4 = [v3 URLByResolvingSymlinksInPath];

  return v4;
}

void FCDispatchGroupWrap(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  if (!v3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    id v7 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "group");
    *(_DWORD *)buf = 136315906;
    int v12 = "void FCDispatchGroupWrap(__strong dispatch_group_t _Nonnull, void (^__strong _Nonnull)(__strong dispatch_block_t))";
    __int16 v13 = 2080;
    id v14 = "FCBlockUtilities.m";
    __int16 v15 = 1024;
    int v16 = 270;
    __int16 v17 = 2114;
    id v18 = v7;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

    if (v4) {
      goto LABEL_6;
    }
  }
  else if (v4)
  {
    goto LABEL_6;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    id v8 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "block");
    *(_DWORD *)buf = 136315906;
    int v12 = "void FCDispatchGroupWrap(__strong dispatch_group_t _Nonnull, void (^__strong _Nonnull)(__strong dispatch_block_t))";
    __int16 v13 = 2080;
    id v14 = "FCBlockUtilities.m";
    __int16 v15 = 1024;
    int v16 = 271;
    __int16 v17 = 2114;
    id v18 = v8;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
LABEL_6:
  dispatch_group_enter(v3);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __FCDispatchGroupWrap_block_invoke;
  v9[3] = &unk_1E5B4C018;
  id v10 = v3;
  id v5 = (void (*)(void *, void *))v4[2];
  id v6 = v3;
  v5(v4, v9);
}

id NewsCoreSensitiveUserDefaults()
{
  if (qword_1EB5D1840 != -1) {
    dispatch_once(&qword_1EB5D1840, &__block_literal_global_6_2);
  }
  id v0 = (void *)qword_1EB5D1838;
  return v0;
}

uint64_t FCIntegerRepresentationOfBundleShortVersionString(void *a1)
{
  uint64_t v1 = [a1 componentsSeparatedByString:@"."];
  uint64_t v2 = [v1 count];
  if (v2)
  {
    unint64_t v3 = v2;
    id v4 = [v1 objectAtIndexedSubscript:0];
    uint64_t v5 = 1000000 * [v4 integerValue];

    if (v3 != 1)
    {
      id v6 = [v1 objectAtIndexedSubscript:1];
      v5 += 1000 * [v6 integerValue];

      if (v3 >= 3)
      {
        id v7 = [v1 objectAtIndexedSubscript:2];
        v5 += [v7 integerValue];
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void __FCAnalyticsEnvelopeContentTypeConfigsByContentType_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v31 = a2;
  id v4 = objc_opt_new();
  uint64_t v5 = [v31 objectForKeyedSubscript:@"url_key"];
  int v30 = v5;
  if (v5 && (unint64_t v6 = [v5 unsignedIntegerValue], v6 < objc_msgSend(*(id *)(a1 + 32), "count")))
  {
    id v7 = [*(id *)(a1 + 32) objectAtIndexedSubscript:v6];
    [v4 setEndpointURLString:v7];

    [v4 setGroupingTag:v6];
    int v8 = 1;
  }
  else
  {
    int v8 = 0;
  }
  id v9 = [v31 objectForKeyedSubscript:@"seed_time"];
  id v10 = v9;
  if (v9) {
    int v11 = v8;
  }
  else {
    int v11 = 0;
  }
  int v29 = v11;
  if (v9) {
    objc_msgSend(v4, "setSeedTime:", objc_msgSend(v9, "unsignedIntegerValue"));
  }
  int v12 = [v31 objectForKeyedSubscript:@"content_header_name"];
  __int16 v13 = [v31 objectForKeyedSubscript:@"content_header_value"];
  int v14 = v12 != 0;
  int v15 = v13 == 0;
  if (v14 != v15)
  {
    [v4 setContentHeaderName:v12];
    [v4 setContentHeaderValue:v13];
  }
  uint64_t v16 = [v31 objectForKeyedSubscript:@"sampling_floor"];
  __int16 v17 = (void *)v16;
  id v18 = &unk_1EF8D8238;
  if (v16) {
    id v18 = (void *)v16;
  }
  id v19 = v18;

  uint64_t v20 = [v19 unsignedIntegerValue];
  uint64_t v21 = [v31 objectForKeyedSubscript:@"sampling_ceil"];
  __int16 v22 = (void *)v21;
  id v23 = &unk_1EF8D8250;
  if (v21) {
    id v23 = (void *)v21;
  }
  id v24 = v23;

  uint64_t v25 = [v24 unsignedIntegerValue];
  if (v20 <= 0x64uLL && v25 <= 0x64uLL && v20 <= v25)
  {
    [v4 setSamplingFloor:v20];
    [v4 setSamplingCeiling:v25];
    if ((v29 & (v14 ^ v15)) != 0)
    {
      uint64_t v26 = *(void **)(a1 + 40);
      int v27 = [NSNumber numberWithInt:a3];
      [v26 setObject:v4 forKeyedSubscript:v27];
    }
  }
}

void sub_1A4655424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A465586C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1A46571F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __FCBundle_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
  uint64_t v1 = _MergedGlobals_139;
  _MergedGlobals_139 = v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

void sub_1A4657340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A46581CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void FCOperationFlagsApplyToURLRequest(char a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    [v3 setAllowsCellularAccess:0];
    id v3 = v4;
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  [v4 setAllowsExpensiveNetworkAccess:0];
  id v3 = v4;
  if ((a1 & 4) != 0)
  {
LABEL_4:
    [v4 setAllowsConstrainedNetworkAccess:0];
    id v3 = v4;
  }
LABEL_5:
}

id FCClientInfoHeaderValue()
{
  if (qword_1EB5D19F0 != -1) {
    dispatch_once(&qword_1EB5D19F0, &__block_literal_global_151);
  }
  uint64_t v0 = (void *)_MergedGlobals_205;
  return v0;
}

id FCUserAgentHeaderValue()
{
  if (qword_1EB5D1A00 != -1) {
    dispatch_once(&qword_1EB5D1A00, &__block_literal_global_29_1);
  }
  uint64_t v0 = (void *)qword_1EB5D19F8;
  return v0;
}

void sub_1A465883C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4658928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4658A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4659894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id FCPermanentURLForRecordID(void *a1, unint64_t a2, void *a3, int a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a3;
  char v24 = 2;
  char v23 = 0;
  char v22 = 0;
  if ([v8 isEqualToString:@"com.apple.news.public"])
  {
    char v9 = 1;
LABEL_11:
    char v22 = v9;
    goto LABEL_12;
  }
  if ([v8 isEqualToString:@"com.apple.news.public.staging"])
  {
    char v9 = 2;
    goto LABEL_11;
  }
  if ([v8 isEqualToString:@"com.apple.news.public.qa"])
  {
    char v9 = 3;
    goto LABEL_11;
  }
  if ([v8 isEqualToString:@"com.apple.news.public.demo1"])
  {
    char v9 = 12;
    goto LABEL_11;
  }
  if ([v8 isEqualToString:@"com.apple.news.public.demo2"])
  {
    char v9 = 13;
    goto LABEL_11;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v21 = (void *)[[NSString alloc] initWithFormat:@"unknown container identifier for permanent URLs: %@", v8];
    *(_DWORD *)buf = 136315906;
    uint64_t v26 = "NSURL *FCPermanentURLForRecordID(NSString *__strong, FCCKRecordAssetField, NSString *__strong, BOOL)";
    __int16 v27 = 2080;
    double v28 = "FCAssetURLUtilities.m";
    __int16 v29 = 1024;
    int v30 = 64;
    __int16 v31 = 2114;
    v32 = v21;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
LABEL_12:
  if (a2 >= 4)
  {
    [v7 length];
    id v19 = 0;
  }
  else
  {
    id v10 = off_1E5B5AF50[a2];
    buf[0] = [v7 length];
    int v11 = [MEMORY[0x1E4F1CA58] data];
    [v11 appendBytes:&v24 length:1];
    [v11 appendBytes:&v22 length:1];
    [v11 appendBytes:buf length:1];
    int v12 = [v7 dataUsingEncoding:4];
    [v11 appendData:v12];

    [v11 appendBytes:&v23 length:1];
    [v11 appendBytes:v10 length:strlen(v10)];
    __int16 v13 = objc_msgSend(v11, "fc_URLSafeBase64EncodedStringWithOptions:", 0);
    id v14 = objc_alloc_init(MEMORY[0x1E4F29088]);
    int v15 = v14;
    if (a4) {
      uint64_t v16 = @"https";
    }
    else {
      uint64_t v16 = @"http";
    }
    [v14 setScheme:v16];
    __int16 v17 = FCPermanentURLHostForContainerIdentifier(v8);
    [v15 setHost:v17];

    id v18 = [NSString stringWithFormat:@"/%@", v13];
    [v15 setPath:v18];

    id v19 = [v15 URL];
  }
  return v19;
}

uint64_t FCAllowedToRewriteAssetURLComponents(void *a1)
{
  id v1 = a1;
  if (+[FCRecordFieldURLProtocol canHandleURLWithComponents:](FCRecordFieldURLProtocol, "canHandleURLWithComponents:", v1)|| +[FCExcerptURLProtocol canHandleURLWithComponents:v1])
  {
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = +[FCPuzzleThumbnailURLProtocol canHandleURLWithComponents:v1] ^ 1;
  }

  return v2;
}

void __FCClientInfoHeaderValue_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  CKProductType();
  id v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = @"UNKNOWN";
  if (!v1) {
    id v1 = @"UNKNOWN";
  }
  __int16 v29 = v1;
  uint64_t v25 = v0;
  [v0 appendFormat:@"<%@>", v1];
  id v3 = [MEMORY[0x1E4F19E98] sharedOptions];
  uint64_t v4 = [v3 productName];

  uint64_t v5 = [MEMORY[0x1E4F19E98] sharedOptions];
  unint64_t v6 = [v5 productVersion];

  id v7 = [MEMORY[0x1E4F19E98] sharedOptions];
  uint64_t v8 = [v7 buildVersion];

  double v28 = (void *)v4;
  if (v4) {
    char v9 = (__CFString *)v4;
  }
  else {
    char v9 = @"UNKNOWN";
  }
  if (v6) {
    id v10 = v6;
  }
  else {
    id v10 = @"UNKNOWN";
  }
  __int16 v27 = (void *)v8;
  if (v8) {
    int v11 = (__CFString *)v8;
  }
  else {
    int v11 = @"UNKNOWN";
  }
  [v0 appendFormat:@" <%@;%@;%@>", v9, v10, v11];
  uint64_t v26 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.newscore"];
  int v12 = [v26 infoDictionary];
  __int16 v13 = [v12 objectForKeyedSubscript:*MEMORY[0x1E4F1CFF8]];
  uint64_t v14 = *MEMORY[0x1E4F1CC70];
  int v15 = [v12 objectForKeyedSubscript:*MEMORY[0x1E4F1CC70]];
  char v24 = [MEMORY[0x1E4F28B50] mainBundle];
  uint64_t v16 = [v24 infoDictionary];
  __int16 v17 = [MEMORY[0x1E4F28B50] mainBundle];
  id v18 = [v17 bundleIdentifier];

  id v19 = [v16 objectForKeyedSubscript:v14];
  if ([(__CFString *)v13 length]) {
    uint64_t v20 = v13;
  }
  else {
    uint64_t v20 = @"UNKNOWN";
  }
  if ([(__CFString *)v15 length]) {
    uint64_t v21 = v15;
  }
  else {
    uint64_t v21 = @"1.0";
  }
  if ([(__CFString *)v18 length]) {
    uint64_t v2 = v18;
  }
  if ([(__CFString *)v19 length]) {
    char v22 = v19;
  }
  else {
    char v22 = @"1.0";
  }
  [v25 appendFormat:@" <%@/%@ (%@/%@)>", v20, v21, v2, v22];
  char v23 = (void *)_MergedGlobals_205;
  _MergedGlobals_205 = (uint64_t)v25;
}

uint64_t FCPaywallTypeForValue(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if ([v1 caseInsensitiveCompare:@"PaywallTypeArticleHardPaywall"])
    {
      if ([v2 caseInsensitiveCompare:@"PaywallTypeArticleSharedHardPaywall"])
      {
        if ([v2 caseInsensitiveCompare:@"PaywallTypeArticleSoftPaywall"])
        {
          if ([v2 caseInsensitiveCompare:@"PaywallTypeArticleSharedSoftPaywall"])
          {
            if ([v2 caseInsensitiveCompare:@"PaywallTypeChannelSoftPaywall"])
            {
              if ([v2 caseInsensitiveCompare:@"PaywallTypeMagazineFeedSoftPaywallSmall"])
              {
                if ([v2 caseInsensitiveCompare:@"PaywallTypeMagazineFeedSoftPaywallMedium"])
                {
                  if ([v2 caseInsensitiveCompare:@"PaywallTypeMagazineFeedSoftPaywallLarge"])
                  {
                    if ([v2 caseInsensitiveCompare:@"PaywallTypeMagazineFeedVideoSoftPaywallSmall"])
                    {
                      if ([v2 caseInsensitiveCompare:@"PaywallTypeMagazineFeedVideoSoftPaywallLarge"])
                      {
                        if ([v2 caseInsensitiveCompare:@"PaywallTypePDFHardPaywall"])
                        {
                          if ([v2 caseInsensitiveCompare:@"PaywallTypeAudioFeedSoftPaywallSmall"])
                          {
                            if ([v2 caseInsensitiveCompare:@"PaywallTypeAudioFeedSoftPaywallLarge"])
                            {
                              if ([v2 caseInsensitiveCompare:@"PaywallTypeAudioFeedVideoSoftPaywallSmall"])
                              {
                                if ([v2 caseInsensitiveCompare:@"PaywallTypeAudioFeedVideoSoftPaywallLarge"])
                                {
                                  uint64_t v3 = 0;
                                }
                                else
                                {
                                  uint64_t v3 = 15;
                                }
                              }
                              else
                              {
                                uint64_t v3 = 14;
                              }
                            }
                            else
                            {
                              uint64_t v3 = 13;
                            }
                          }
                          else
                          {
                            uint64_t v3 = 12;
                          }
                        }
                        else
                        {
                          uint64_t v3 = 11;
                        }
                      }
                      else
                      {
                        uint64_t v3 = 10;
                      }
                    }
                    else
                    {
                      uint64_t v3 = 9;
                    }
                  }
                  else
                  {
                    uint64_t v3 = 8;
                  }
                }
                else
                {
                  uint64_t v3 = 7;
                }
              }
              else
              {
                uint64_t v3 = 6;
              }
            }
            else
            {
              uint64_t v3 = 5;
            }
          }
          else
          {
            uint64_t v3 = 4;
          }
        }
        else
        {
          uint64_t v3 = 3;
        }
      }
      else
      {
        uint64_t v3 = 2;
      }
    }
    else
    {
      uint64_t v3 = 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t FCPaywallOffersLinkTargetTypeForValue(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if ([v1 caseInsensitiveCompare:@"OffersLinkTargetTypeURL"]) {
      uint64_t v3 = 2 * ([v2 caseInsensitiveCompare:@"OffersLinkTargetTypeAMSURL"] == 0);
    }
    else {
      uint64_t v3 = 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t FCTargetTypeWithValue(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if ([v1 caseInsensitiveCompare:@"SubscriptionButtonTargetTypeLandingPage"])
    {
      if ([v2 caseInsensitiveCompare:@"SubscriptionButtonTargetTypeOsloSheet"])
      {
        if ([v2 caseInsensitiveCompare:@"SubscriptionButtonTargetTypeAMSSheet"]) {
          uint64_t v3 = 0;
        }
        else {
          uint64_t v3 = 3;
        }
      }
      else
      {
        uint64_t v3 = 2;
      }
    }
    else
    {
      uint64_t v3 = 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t FCSubscriptionButtonTypeWithValue(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if ([v1 caseInsensitiveCompare:@"SubscriptionButtonTypeArticle"])
    {
      if ([v2 caseInsensitiveCompare:@"SubscriptionButtonTypeLandingPage"])
      {
        if ([v2 caseInsensitiveCompare:@"SubscriptionButtonTypeIssueCover"]) {
          uint64_t v3 = 0;
        }
        else {
          uint64_t v3 = 3;
        }
      }
      else
      {
        uint64_t v3 = 2;
      }
    }
    else
    {
      uint64_t v3 = 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

BOOL FCPostPurchaseActionTypeWithValue(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  BOOL v3 = v1
    && [v1 caseInsensitiveCompare:@"SubscriptionButtonPostPurchaseActionTypeNone"]
    && [v2 caseInsensitiveCompare:@"SubscriptionButtonPostPurchaseActionTypeURL"] == 0;

  return v3;
}

id FCAppConfigurationURLValue(void *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = [a1 objectForKeyedSubscript:a2];
    if (!v2
      || ([MEMORY[0x1E4F1CA98] null],
          BOOL v3 = objc_claimAutoreleasedReturnValue(),
          v3,
          v2 == v3))
    {
      id v7 = 0;
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v4 = v2;
      }
      else {
        uint64_t v4 = 0;
      }
      id v5 = v4;
      unint64_t v6 = v5;
      if (v5 && [v5 length])
      {
        id v7 = [MEMORY[0x1E4F1CB10] URLWithString:v2];
      }
      else
      {
        id v7 = 0;
      }
    }
  }
  else
  {
    id v7 = 0;
  }
  return v7;
}

void sub_1A465DA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A465DB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A465EDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A465F310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A465F9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A465FB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4661AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4661CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A46626AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4662C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose((const void *)(v45 - 240), 8);
  _Unwind_Resume(a1);
}

void sub_1A4664774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4664C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4664DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4664EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4665324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose((const void *)(v40 - 248), 8);
  _Block_object_dispose((const void *)(v40 - 200), 8);
  _Unwind_Resume(a1);
}

void sub_1A46659B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t __FCHandleOperationTimeout_block_invoke()
{
  return 0;
}

uint64_t FCCKPResponseOperationResultReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v23 = objc_alloc_init(FCCKPResponseOperationResultError);
        objc_storeStrong((id *)(a1 + 16), v23);
        if (!PBReaderPlaceMark()
          || (FCCKPResponseOperationResultErrorReadFrom((uint64_t)v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_35:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t FCCKPOperationReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          unsigned int v18 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v17;

          continue;
        case 2u:
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 24) |= 1u;
          while (2)
          {
            uint64_t v23 = *v3;
            unint64_t v24 = *(void *)(a2 + v23);
            if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
              *(void *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                BOOL v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_46;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_46:
          *(_DWORD *)(a1 + 16) = v22;
          continue;
        case 3u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v28 = 0;
          *(unsigned char *)(a1 + 24) |= 4u;
          while (2)
          {
            uint64_t v29 = *v3;
            unint64_t v30 = *(void *)(a2 + v29);
            if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
              *(void *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                BOOL v14 = v27++ >= 9;
                if (v14)
                {
                  uint64_t v28 = 0;
                  goto LABEL_50;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v28 = 0;
          }
LABEL_50:
          BOOL v38 = v28 != 0;
          uint64_t v39 = 21;
          goto LABEL_55;
        case 4u:
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0;
          *(unsigned char *)(a1 + 24) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v35 = *v3;
        unint64_t v36 = *(void *)(a2 + v35);
        if (v36 == -1 || v36 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v36);
        *(void *)(a2 + v35) = v36 + 1;
        v34 |= (unint64_t)(v37 & 0x7F) << v32;
        if ((v37 & 0x80) == 0) {
          goto LABEL_52;
        }
        v32 += 7;
        BOOL v14 = v33++ >= 9;
        if (v14)
        {
          uint64_t v34 = 0;
          goto LABEL_54;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_52:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v34 = 0;
      }
LABEL_54:
      BOOL v38 = v34 != 0;
      uint64_t v39 = 20;
LABEL_55:
      *(unsigned char *)(a1 + v39) = v38;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t FCCKPResponseOperationResultErrorReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = objc_alloc_init(FCCKPResponseOperationResultErrorClient);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (PBReaderPlaceMark()
          && (FCCKPResponseOperationResultErrorClientReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
          goto LABEL_39;
        }
        goto LABEL_46;
      case 2u:
        uint64_t v17 = objc_alloc_init(FCCKPResponseOperationResultErrorServer);
        objc_storeStrong((id *)(a1 + 48), v17);
        if (!PBReaderPlaceMark()
          || (FCCKPResponseOperationResultErrorServerReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_46;
        }
        goto LABEL_39;
      case 3u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 56) |= 1u;
        while (2)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if (v23 < 0)
            {
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_43;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v20) = 0;
        }
LABEL_43:
        *(_DWORD *)(a1 + 40) = v20;
        goto LABEL_44;
      case 4u:
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 16;
        goto LABEL_34;
      case 5u:
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 24;
LABEL_34:
        char v26 = *(void **)(a1 + v25);
        *(void *)(a1 + v25) = v24;

        goto LABEL_44;
      case 7u:
        uint64_t v17 = objc_alloc_init(FCCKPResponseOperationResultErrorExtension);
        objc_storeStrong((id *)(a1 + 32), v17);
        if (PBReaderPlaceMark()
          && (FCCKPResponseOperationResultErrorExtensionReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_39:
          PBReaderRecallMark();

LABEL_44:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_46:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_44;
    }
  }
}

uint64_t FCCKPResponseOperationResultErrorServerReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 12) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_29;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_29:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_31:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t FCCKPRecordRetrieveResponseReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_33;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_35:
        *(unsigned char *)(a1 + 16) = v20 != 0;
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(FCCKPRecord);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || !FCCKPRecordReadFrom((id *)&v17->super.super.isa, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL FCCKPRecordReadFrom(id *a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 3;
        goto LABEL_42;
      case 2u:
        unsigned int v19 = objc_alloc_init(FCCKPRecordIdentifier);
        objc_storeStrong(a1 + 7, v19);
        if (!PBReaderPlaceMark() || !FCCKPRecordIdentifierReadFrom((uint64_t)v19, a2)) {
          goto LABEL_47;
        }
        goto LABEL_38;
      case 3u:
        unsigned int v19 = objc_alloc_init(FCCKPRecordType);
        objc_storeStrong(a1 + 9, v19);
        if (!PBReaderPlaceMark() || (FCCKPRecordTypeReadFrom((uint64_t)v19, a2) & 1) == 0) {
          goto LABEL_47;
        }
        goto LABEL_38;
      case 4u:
        unsigned int v19 = objc_alloc_init(FCCKPIdentifier);
        uint64_t v20 = 2;
        goto LABEL_36;
      case 5u:
        unsigned int v19 = objc_alloc_init(FCCKPDateStatistics);
        objc_storeStrong(a1 + 8, v19);
        if (!PBReaderPlaceMark() || !FCCKPDateStatisticsReadFrom((uint64_t)v19, a2)) {
          goto LABEL_47;
        }
        goto LABEL_38;
      case 7u:
        unsigned int v19 = objc_alloc_init(FCCKPRecordField);
        [a1 addFields:v19];
        if (!PBReaderPlaceMark() || !FCCKPRecordFieldReadFrom((uint64_t)v19, a2)) {
          goto LABEL_47;
        }
        goto LABEL_38;
      case 9u:
        unsigned int v19 = objc_alloc_init(FCCKPIdentifier);
        uint64_t v20 = 5;
LABEL_36:
        objc_storeStrong(&a1[v20], v19);
        if PBReaderPlaceMark() && (FCCKPIdentifierReadFrom((uint64_t)v19, a2))
        {
LABEL_38:
          PBReaderRecallMark();
LABEL_43:

LABEL_44:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_47:

        return 0;
      case 0xAu:
        PBReaderReadString();
        unsigned int v19 = (FCCKPRecordIdentifier *)objc_claimAutoreleasedReturnValue();
        if (v19) {
          [a1 addConflictLoserEtags:v19];
        }
        goto LABEL_43;
      case 0xBu:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 6;
LABEL_42:
        unsigned int v19 = (FCCKPRecordIdentifier *)a1[v18];
        a1[v18] = (id)v17;
        goto LABEL_43;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_44;
    }
  }
}

BOOL FCCKPRecordFieldReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(FCCKPRecordFieldIdentifier);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (FCCKPRecordFieldIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = objc_alloc_init(FCCKPRecordFieldValue);
    objc_storeStrong((id *)(a1 + 16), v17);
    if (!PBReaderPlaceMark() || (FCCKPRecordFieldValueReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t FCCKPRecordFieldValueReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 68) |= 4u;
        while (1)
        {
          uint64_t v21 = *v3;
          uint64_t v22 = *(void *)(a2 + v21);
          unint64_t v23 = v22 + 1;
          if (v22 == -1 || v23 > *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0) {
            goto LABEL_51;
          }
          v18 += 7;
          BOOL v15 = v19++ >= 9;
          if (v15)
          {
            LODWORD(v20) = 0;
            goto LABEL_53;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_51:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v20) = 0;
        }
LABEL_53:
        *(_DWORD *)(a1 + 64) = v20;
        goto LABEL_60;
      case 2u:
        uint64_t v25 = PBReaderReadData();
        uint64_t v26 = 24;
        goto LABEL_43;
      case 4u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        *(unsigned char *)(a1 + 68) |= 2u;
        while (2)
        {
          uint64_t v31 = *v3;
          uint64_t v32 = *(void *)(a2 + v31);
          unint64_t v33 = v32 + 1;
          if (v32 == -1 || v33 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
            *(void *)(a2 + v31) = v33;
            v30 |= (unint64_t)(v34 & 0x7F) << v28;
            if (v34 < 0)
            {
              v28 += 7;
              BOOL v15 = v29++ >= 9;
              if (v15)
              {
                uint64_t v30 = 0;
                goto LABEL_57;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v30 = 0;
        }
LABEL_57:
        *(void *)(a1 + 16) = v30;
        goto LABEL_60;
      case 5u:
        *(unsigned char *)(a1 + 68) |= 1u;
        uint64_t v35 = *v3;
        unint64_t v36 = *(void *)(a2 + v35);
        if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v37 = *(void *)(*(void *)(a2 + *v7) + v36);
          *(void *)(a2 + v35) = v36 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v37 = 0;
        }
        *(void *)(a1 + 8) = v37;
        goto LABEL_60;
      case 6u:
        BOOL v38 = objc_alloc_init(FCCKPDate);
        objc_storeStrong((id *)(a1 + 32), v38);
        if (!PBReaderPlaceMark() || (FCCKPDateReadFrom((uint64_t)v38, a2) & 1) == 0) {
          goto LABEL_62;
        }
        goto LABEL_49;
      case 7u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 56;
LABEL_43:
        uint64_t v39 = *(void **)(a1 + v26);
        *(void *)(a1 + v26) = v25;

        goto LABEL_60;
      case 9u:
        BOOL v38 = objc_alloc_init(FCCKPRecordReference);
        objc_storeStrong((id *)(a1 + 48), v38);
        if (!PBReaderPlaceMark() || (FCCKPRecordReferenceReadFrom((uint64_t)v38, a2) & 1) == 0) {
          goto LABEL_62;
        }
        goto LABEL_49;
      case 0xBu:
        BOOL v38 = objc_alloc_init(FCCKPRecordFieldValue);
        [(id)a1 addListValue:v38];
        if PBReaderPlaceMark() && (FCCKPRecordFieldValueReadFrom(v38, a2))
        {
LABEL_49:
          PBReaderRecallMark();

LABEL_60:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_62:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_60;
    }
  }
}

uint64_t FCCKPRecordFieldIdentifierReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        char v18 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL FCCKPRecordIdentifierReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(FCCKPIdentifier);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (FCCKPIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = objc_alloc_init(FCCKPRecordZoneIdentifier);
    objc_storeStrong((id *)(a1 + 16), v17);
    if (!PBReaderPlaceMark() || !FCCKPRecordZoneIdentifierReadFrom((uint64_t)v17, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL FCCKPRecordZoneIdentifierReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v17 = objc_alloc_init(FCCKPIdentifier);
        uint64_t v18 = 8;
      }
      else
      {
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
          continue;
        }
        uint64_t v17 = objc_alloc_init(FCCKPIdentifier);
        uint64_t v18 = 16;
      }
      objc_storeStrong((id *)(a1 + v18), v17);
      if (!PBReaderPlaceMark() || (FCCKPIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t FCCKPIdentifierReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_31;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_33:
        *(_DWORD *)(a1 + 16) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t FCCKPRecordTypeReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL FCCKPDateStatisticsReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v17 = objc_alloc_init(FCCKPDate);
        uint64_t v18 = 16;
      }
      else
      {
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
          continue;
        }
        uint64_t v17 = objc_alloc_init(FCCKPDate);
        uint64_t v18 = 8;
      }
      objc_storeStrong((id *)(a1 + v18), v17);
      if (!PBReaderPlaceMark() || (FCCKPDateReadFrom((uint64_t)v17, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t FCCKPDateReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 16) |= 1u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        *(void *)(a1 + 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL FCCKPQueryRetrieveResponseReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(FCCKPQueryRetrieveResponseQueryResult);
        -[FCCKPQueryRetrieveResponse addQueryResults:](a1, v17);
        if (!PBReaderPlaceMark()
          || (FCCKPQueryRetrieveResponseQueryResultReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = PBReaderReadData();
    uint64_t v17 = *(FCCKPQueryRetrieveResponseQueryResult **)(a1 + 8);
    *(void *)(a1 + 8) = v18;
LABEL_24:

    goto LABEL_26;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t FCCKPQueryRetrieveResponseQueryResultReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = objc_alloc_init(FCCKPRecordIdentifier);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (PBReaderPlaceMark() && FCCKPRecordIdentifierReadFrom((uint64_t)v17, a2)) {
          goto LABEL_34;
        }
        goto LABEL_41;
      case 2u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v19;

        goto LABEL_39;
      case 3u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        while (2)
        {
          uint64_t v24 = *v3;
          unint64_t v25 = *(void *)(a2 + v24);
          if (v25 == -1 || v25 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              BOOL v14 = v22++ >= 9;
              if (v14)
              {
                LODWORD(v23) = 0;
                goto LABEL_38;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v23) = 0;
        }
LABEL_38:
        *(_DWORD *)(a1 + 32) = v23;
        goto LABEL_39;
      case 4u:
        uint64_t v17 = objc_alloc_init(FCCKPRecord);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (PBReaderPlaceMark() && FCCKPRecordReadFrom((id *)&v17->super.super.isa, a2))
        {
LABEL_34:
          PBReaderRecallMark();

LABEL_39:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_41:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_39;
    }
  }
}

uint64_t FCAppConfigurationPositiveIntegerValue(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = [a1 objectForKeyedSubscript:a2];
    if (v4)
    {
      id v5 = [MEMORY[0x1E4F1CA98] null];

      if (v4 != v5 && ([v4 longLongValue] & 0x8000000000000000) == 0) {
        a3 = [v4 longLongValue];
      }
    }
  }
  return a3;
}

FCTopStoriesStyleConfiguration *__FCStoryStyleConfigurationsFromStoryStyleConfigDicts_block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  BOOL v3 = [[FCTopStoriesStyleConfiguration alloc] initWithConfigDictionary:v2];

  return v3;
}

uint64_t __FCStoryStyleConfigurationsFromStoryStyleConfigDicts_block_invoke(uint64_t a1, void *a2)
{
  id v2 = FCAppConfigurationStringValue(a2, @"type", 0);
  uint64_t v3 = FCArticleStoryTypeForStoryTypeString(v2);

  uint64_t v4 = NSNumber;
  return [v4 numberWithUnsignedInteger:v3];
}

id FCAppConfigurationNumberValue(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  unint64_t v6 = v5;
  if (a1)
  {
    id v7 = [a1 objectForKeyedSubscript:a2];
    if (!v7
      || ([MEMORY[0x1E4F1CA98] null],
          char v8 = objc_claimAutoreleasedReturnValue(),
          v8,
          unsigned int v9 = v7,
          v7 == v8))
    {
      unsigned int v9 = v6;
    }
    id v10 = v9;
  }
  else
  {
    id v10 = v5;
  }

  return v10;
}

void sub_1A4675E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A467610C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A46782F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4678E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void FCVisitLocallyPrunableHistoryItems(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x1E4F1C9C8];
  id v5 = a1;
  unint64_t v6 = [v4 date];
  id v7 = objc_msgSend(v6, "fc_dateBySubtractingTimeInterval:", 7776000.0);
  char v8 = objc_msgSend(v6, "fc_dateBySubtractingTimeInterval:", 864000.0);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __FCVisitLocallyPrunableHistoryItems_block_invoke;
  aBlock[3] = &unk_1E5B4BE28;
  id v18 = v7;
  id v19 = v8;
  id v9 = v8;
  id v10 = v7;
  uint64_t v11 = _Block_copy(aBlock);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __FCVisitLocallyPrunableHistoryItems_block_invoke_2;
  v14[3] = &unk_1E5B56C18;
  id v15 = v11;
  id v16 = v3;
  id v12 = v3;
  id v13 = v11;
  [v5 enumerateObjectsUsingBlock:v14];
}

void sub_1A46797AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A467A060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id FCBundle()
{
  if (qword_1EB5D1008 != -1) {
    dispatch_once(&qword_1EB5D1008, &__block_literal_global_2);
  }
  id v0 = (void *)_MergedGlobals_139;
  return v0;
}

void __FCUserAgentHeaderValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4F28B50] mainBundle];
  id v1 = [v0 bundleIdentifier];
  int v2 = [v1 isEqualToString:@"com.apple.news.widget"];

  if (v2)
  {
    id v3 = NSString;
    id v14 = [MEMORY[0x1E4F28B50] mainBundle];
    uint64_t v4 = [v14 objectForInfoDictionaryKey:*MEMORY[0x1E4F1D020]];
    id v5 = [MEMORY[0x1E4F28B50] mainBundle];
    unint64_t v6 = [v5 objectForInfoDictionaryKey:@"CFBundleShortVersionString"];
    [v3 stringWithFormat:@"AppleNewsWidget/%@ Version/%@", v4, v6];
  }
  else
  {
    id v7 = [MEMORY[0x1E4F28B50] mainBundle];
    char v8 = [v7 bundleIdentifier];
    int v9 = [v8 isEqualToString:@"com.apple.newsd"];

    id v10 = NSString;
    id v14 = [MEMORY[0x1E4F28B50] mainBundle];
    uint64_t v4 = [v14 objectForInfoDictionaryKey:*MEMORY[0x1E4F1D020]];
    id v5 = [MEMORY[0x1E4F28B50] mainBundle];
    uint64_t v11 = [v5 objectForInfoDictionaryKey:@"CFBundleShortVersionString"];
    unint64_t v6 = (void *)v11;
    if (v9) {
      [v10 stringWithFormat:@"AppleNewsAgent/%@ Version/%@", v4, v11];
    }
    else {
      [v10 stringWithFormat:@"AppleNews/%@ Version/%@", v4, v11];
    }
  uint64_t v12 = };
  id v13 = (void *)qword_1EB5D19F8;
  qword_1EB5D19F8 = v12;
}

__CFString *FCStringFromNetworkEventType(int a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  switch(a1)
  {
    case 0:
      uint64_t result = @"Unknown";
      break;
    case 1:
      uint64_t result = @"CloudKit (Private) - Fetch Records";
      break;
    case 2:
      uint64_t result = @"CloudKit (Private) - Modify Records";
      break;
    case 3:
      uint64_t result = @"CloudKit (Private) - Fetch Zones";
      break;
    case 4:
      uint64_t result = @"CloudKit (Private) - Modify Zones";
      break;
    case 5:
      uint64_t result = @"CloudKit (Private) - Fetch Subscriptions";
      break;
    case 6:
      uint64_t result = @"CloudKit (Private) - Modify Subscriptions";
      break;
    case 7:
      uint64_t result = @"CloudKit (Private) - Fetch Zone Changes";
      break;
    case 8:
      uint64_t result = @"CloudKit (Private) - Fetch Database Changes";
      break;
    case 9:
      uint64_t result = @"CloudKit (Public) - Fetch";
      break;
    case 10:
      uint64_t result = @"CloudKit (Public) - OrderFeed";
      break;
    case 11:
      uint64_t result = @"CloudKit (Public) - MultiFeed";
      break;
    case 12:
      uint64_t result = @"CloudKit (Public) - MultiFetch";
      break;
    case 13:
      uint64_t result = @"CloudKit (Public) - TagSearch";
      break;
    case 14:
      uint64_t result = @"CloudKit (Public) - Today Config";
      break;
    case 15:
      uint64_t result = @"CDN";
      break;
    case 16:
      uint64_t result = @"CDN - App Config";
      break;
    case 17:
      uint64_t result = @"CVWS";
      break;
    case 18:
      uint64_t result = @"News Edge - App Config";
      break;
    case 19:
      uint64_t result = @"News Edge - Search";
      break;
    case 20:
      uint64_t result = @"News Edge - Today Config";
      break;
    case 21:
      uint64_t result = @"News Edge - Puzzle Archive";
      break;
    case 22:
      uint64_t result = @"News Edge - Widget Config";
      break;
    case 23:
      uint64_t result = @"News Edge - Widget Config & Today Config Lite";
      break;
    case 24:
      uint64_t result = @"Auth Token Service";
      break;
    case 25:
      uint64_t result = @"Sports Data Service";
      break;
    case 26:
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v2 = (void *)[[NSString alloc] initWithFormat:@"Case unsupported"];
        int v3 = 136315906;
        uint64_t v4 = "NSString * _Nonnull FCStringFromNetworkEventType(FCNetworkEventType)";
        __int16 v5 = 2080;
        unint64_t v6 = "FCNetworkEvent.m";
        __int16 v7 = 1024;
        int v8 = 439;
        __int16 v9 = 2114;
        id v10 = v2;
        _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v3, 0x26u);
      }
      goto LABEL_30;
    default:
LABEL_30:
      uint64_t result = 0;
      break;
  }
  return result;
}

void sub_1A467FF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4680954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4680DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

FCProxyHeadline *FCAssignSingleHeadlineMetadata(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v6)
  {
    int v8 = [[FCProxyHeadline alloc] initWithHeadline:v5 overrideMetadata:v6 configuration:v7];
  }
  else
  {
    int v8 = (FCProxyHeadline *)v5;
  }
  return v8;
}

void sub_1A46831C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A468358C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FCPersonalizationDataMaxAggregates()
{
  id v0 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  if ([v0 BOOLForKey:@"personalization_low_aggregate_cap"]) {
    uint64_t v1 = 100;
  }
  else {
    uint64_t v1 = 6000;
  }

  return v1;
}

void sub_1A4685268(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A46859A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1A4685B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id NewsCoreUserDefaults()
{
  if (qword_1EB5D1830 != -1) {
    dispatch_once(&qword_1EB5D1830, &__block_literal_global_120);
  }
  id v0 = (void *)_MergedGlobals_193;
  return v0;
}

void FCAppleAccountDetermineContentStoreFrontID(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v24 = v11;
  id v15 = v13;
  id v16 = v15;
  if (!v15
    || (id v17 = v15, v18 = v24, v12)
    && (id v17 = v15, v18 = v24, (objc_msgSend(MEMORY[0x1E4FBA8A8], "nf_object:isEqualToObject:", v24, v12) & 1) == 0))
  {
    id v17 = v14;

    id v18 = v12;
  }
  id v19 = v18;
  *a5 = v19;
  uint64_t v20 = NewsCoreUserDefaults();
  char v21 = [v20 objectForKey:@"storefront"];

  if (NFInternalBuild()
    && v21
    && ([v21 isEqualToString:@"default-storefront"] & 1) == 0)
  {
    id v22 = v21;

    id v17 = v22;
  }
  id v23 = v17;
  *a6 = v23;
}

uint64_t FCDefaultsReadEndpointEnvironment()
{
  if (!NFInternalBuild()) {
    return 1;
  }
  id v0 = NewsCoreUserDefaults();
  uint64_t v1 = [v0 stringForKey:@"content_environment"];

  if ([v1 isEqualToString:@"staging"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"qa"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"test"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"icloud1"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"devel"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"sandbox"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"demo1"])
  {
    uint64_t v2 = 8;
  }
  else if ([v1 isEqualToString:@"demo2"])
  {
    uint64_t v2 = 9;
  }
  else
  {
    uint64_t v2 = 1;
  }

  return v2;
}

__CFString *FCDefaultClientAPIBaseURLStringForEnvironment(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5) {
    return 0;
  }
  else {
    return off_1E5B5BC50[a1 - 1];
  }
}

unint64_t FCDesiredTagRecordFieldOptionsWithHeadlineFieldOptions(unint64_t a1)
{
  uint64x2_t v1 = (uint64x2_t)vdupq_n_s64(a1);
  int8x16_t v2 = (int8x16_t)vshlq_u64(v1, (uint64x2_t)xmmword_1A4973BA0);
  int8x16_t v3 = (int8x16_t)vshlq_u64(v1, (uint64x2_t)xmmword_1A4973BB0);
  uint64_t v4 = v3.i8[0] & 2;
  int8x16_t v5 = vorrq_s8(vandq_s8(v2, (int8x16_t)xmmword_1A4973BD0), vandq_s8(v3, (int8x16_t)xmmword_1A4973BC0));
  int8x8_t v6 = vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL));
  if ((*(void *)&v6 & 0xFFFFFFFFFFFFFF7FLL) != 0) {
    return (a1 >> 18) & 0x200 | (a1 >> 24) & 0x400 | v4 & 0xFFFFFFFFFFFFFF9ELL | (32 * ((a1 >> 4) & 3)) | a1 & 1 | *(void *)&v6 | 0x11C;
  }
  else {
    return (a1 >> 18) & 0x200 | (a1 >> 24) & 0x400 | v4 & 0xFFFFFFFFFFFFFF9ELL | (32 * ((a1 >> 4) & 3)) | a1 & 1 | *(void *)&v6;
  }
}

__CFString *FCDefaultFairPlayBaseURLStringForEnvironment(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5) {
    return 0;
  }
  else {
    return off_1E5B5BBC0[a1 - 1];
  }
}

uint64_t FCDefaultCKFetchURLStringForEnvironment()
{
  return [@"https://gateway.icloud.com:443/ckdatabase" stringByAppendingPathComponent:@"api/client/record/retrieve"];
}

id FCTagRecordSourceDesiredKeysFromDesiredFieldOptions(unint64_t a1)
{
  v11[28] = *MEMORY[0x1E4F143B8];
  int8x16_t v2 = objc_opt_new();
  int8x16_t v3 = v2;
  uint64_t v4 = (a1 >> 2) & 1;
  if ((a1 & 4) != 0)
  {
    [v2 addObject:@"nameImage"];
    if ((a1 & 8) == 0)
    {
LABEL_3:
      if ((a1 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_3;
  }
  [v3 addObject:@"nameImageForDarkBackground"];
  LODWORD(v4) = 1;
  if ((a1 & 0x10) == 0)
  {
LABEL_4:
    if ((a1 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  [v3 addObject:@"nameImageMask"];
  [v3 addObject:@"nameImageMetadata"];
  LODWORD(v4) = 1;
  if ((a1 & 0x20) == 0)
  {
LABEL_5:
    if ((a1 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  [v3 addObject:@"nameImageMaskWidgetSmall"];
  if ((a1 & 0x40) == 0)
  {
LABEL_6:
    if ((a1 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_20:
  [v3 addObject:@"nameImageMaskWidgetLarge"];
  if ((a1 & 0x80) != 0) {
LABEL_7:
  }
    [v3 addObject:@"nameCompact"];
LABEL_8:
  if ((a1 & 0x100) != 0)
  {
    [v3 addObject:@"nameImageCompact"];
    [v3 addObject:@"nameImageCompactMetadata"];
    if ((a1 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (a1)
  {
LABEL_23:
    v11[0] = @"hideAccessoryText";
    v11[1] = @"publisherPaidAuthorizationURL";
    v11[2] = @"publisherPaidVerificationURL";
    v11[3] = @"publisherPaidWebAccessURL";
    v11[4] = @"publisherPaidLeakyPaywallOptOut";
    v11[5] = @"publisherPaidFeldsparablePurchaseIDs";
    v11[6] = @"publisherPaidBundlePurchaseIDs";
    v11[7] = @"logoImage";
    v11[8] = @"sectionTagIDs";
    v11[9] = @"iAdCategories";
    v11[10] = @"iAdKeywords";
    v11[11] = @"coverImage";
    v11[12] = @"feedNavImage";
    v11[13] = @"feedNavImageHQ";
    v11[14] = @"sportsTheme";
    v11[15] = @"sportsLogoImage";
    v11[16] = @"sportsLogoImageCompact";
    v11[17] = @"sportsLogoImageLarge";
    v11[18] = @"nameImageLarge";
    v11[19] = @"navigationChromeBackgroundImage";
    v11[20] = @"navigationChromeBackgroundDarkModeImage";
    v11[21] = @"navigationChromeBackgroundImageCompact";
    v11[22] = @"navigationChromeBackgroundDarkModeImageCompact";
    v11[23] = @"navigationChromeBackgroundImageLarge";
    v11[24] = @"navigationChromeBackgroundDarkModeImageLarge";
    v11[25] = @"sportsLogoAltImage";
    v11[26] = @"sportsLogoAltImageCompact";
    v11[27] = @"sportsLogoAltImageLarge";
    id v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:28];
    [v3 addObjectsFromArray:v7];

    goto LABEL_24;
  }
  if (!v4)
  {
    if ((a1 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_24:
  v10[0] = @"nameImageScaleFactor";
  v10[1] = @"nameImageBaselineShift";
  int v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v10 count:2];
  [v3 addObjectsFromArray:v8];

  if ((a1 & 0x400) != 0) {
LABEL_12:
  }
    [v3 addObject:@"template"];
LABEL_13:
  v9[0] = @"type";
  v9[1] = @"contentProvider";
  v9[2] = @"isPublic";
  v9[3] = @"isDeprecated";
  void v9[4] = @"replacementID";
  v9[5] = @"parent";
  v9[6] = @"defaultSectionTagID";
  v9[7] = @"blockedStorefrontIDs";
  v9[8] = @"allowedStorefrontIDs";
  v9[9] = @"minNewsVersion";
  v9[10] = @"isNotificationEnabled";
  v9[11] = @"score";
  v9[12] = @"primaryAudience";
  v9[13] = @"behaviorFlags";
  v9[14] = @"propertyFlags";
  v9[15] = @"subtitle";
  v9[16] = @"latestIssueIDs";
  v9[17] = @"archiveIssueListID";
  v9[18] = @"language";
  v9[19] = @"magazineGenre";
  v9[20] = @"publisherSpecifiedArticleIDsModifiedDate";
  v9[21] = @"publisherSpecifiedArticles";
  v9[22] = @"superGroupKnobs";
  v9[23] = @"superGroupConfig";
  v9[24] = @"recentIssueIDs";
  v9[25] = @"highlightsArticleListID";
  v9[26] = @"subscriptionRate";
  v9[27] = @"adTargetingKeywords";
  int8x16_t v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v9 count:28];
  [v3 addObjectsFromArray:v5];

  return v3;
}

__CFString *FCDefaultNotificationsBaseURLStringForEnvironment(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5) {
    return 0;
  }
  else {
    return off_1E5B5BC50[a1 - 1];
  }
}

__CFString *FCDefaultNewsletterAPIBaseURLStringForEnvironment(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5) {
    return 0;
  }
  else {
    return off_1E5B5BBF0[a1 - 1];
  }
}

__CFString *FCDefaultCKEdgeCacheURLStringForEnvironment()
{
  return @"https://gateway.icloud.com:443/ckdatabase";
}

void sub_1A4690504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  objc_destroyWeak(v55);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose((const void *)(v56 - 256), 8);
  _Unwind_Resume(a1);
}

__CFString *FCStringFromBundleSubscriptionCachePolicy(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"CachedIfNotThenNetwork";
  }
  else {
    return off_1E5B55838[a1 - 1];
  }
}

void sub_1A46906FC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1A4690808(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void FCCoreConfigurationFetch(void *a1, void *a2)
{
  id v7 = a1;
  int8x16_t v3 = a2;
  uint64_t v4 = [v7 configuration];
  if ((objc_opt_respondsToSelector() & 1) != 0 && ([v4 isDefaultConfiguration] & 1) == 0)
  {
    if (v3) {
      v3[2](v3, v4, 0);
    }
  }
  else
  {
    uint64_t v5 = FCCurrentQoSOrUtilityIfMain();
    int8x8_t v6 = FCDispatchQueueForQualityOfService(v5);
    [v7 fetchConfigurationIfNeededWithCompletionQueue:v6 completion:v3];
  }
}

void sub_1A4692390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A46924D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4692700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id AppBundleID()
{
  id v0 = [MEMORY[0x1E4F28B50] mainBundle];
  uint64x2_t v1 = [v0 bundleIdentifier];

  return v1;
}

void sub_1A46935F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1A469386C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A46939EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A4693BB8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1A4694628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __FCSupportedStoreFrontIDs_block_invoke()
{
  v4[4] = *MEMORY[0x1E4F143B8];
  id v0 = (void *)MEMORY[0x1E4F1CAD0];
  v4[0] = @"143441";
  v4[1] = @"143444";
  v4[2] = @"143460";
  v4[3] = @"143455";
  uint64x2_t v1 = [MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:4];
  uint64_t v2 = [v0 setWithArray:v1];
  int8x16_t v3 = (void *)qword_1EB5D1848;
  qword_1EB5D1848 = v2;
}

void sub_1A469BB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id FCURLForNotificationDropbox()
{
  id v0 = +[FCContextConfiguration defaultConfiguration];
  uint64x2_t v1 = [v0 privateDataContainerCombinationIdentifier];
  uint64_t v2 = FCURLForFeldsparUserAccountHomeDirectoryForEnvironment(v1);

  int8x16_t v3 = [v2 URLByAppendingPathComponent:@"notificationDropboxData" isDirectory:0];

  return v3;
}

id FCURLForGroupContainerForEnvironment(void *a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "groupIdentifier");
    *(_DWORD *)buf = 136315906;
    uint64_t v13 = "NSURL *FCURLForGroupContainerForEnvironment(NSString *__strong, NSString *__strong)";
    __int16 v14 = 2080;
    uint64_t v15 = "FCFileURLs.m";
    __int16 v16 = 1024;
    int v17 = 228;
    __int16 v18 = 2114;
    id v19 = v9;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

    if (v4) {
      goto LABEL_6;
    }
  }
  else if (v4)
  {
    goto LABEL_6;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "environmentIdentifier");
    *(_DWORD *)buf = 136315906;
    uint64_t v13 = "NSURL *FCURLForGroupContainerForEnvironment(NSString *__strong, NSString *__strong)";
    __int16 v14 = 2080;
    uint64_t v15 = "FCFileURLs.m";
    __int16 v16 = 1024;
    int v17 = 229;
    __int16 v18 = 2114;
    id v19 = v10;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
LABEL_6:
  uint64_t v5 = FCURLForGroupIdentifier(v3);
  int8x8_t v6 = [v5 URLByAppendingPathComponent:v4 isDirectory:1];

  id v7 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v11 = 0;
  [v7 createDirectoryAtURL:v6 withIntermediateDirectories:1 attributes:0 error:&v11];

  return v6;
}

id FCURLForGroupIdentifier(void *a1)
{
  uint64x2_t v1 = (void *)MEMORY[0x1E4F28CB8];
  id v2 = a1;
  id v3 = [v1 defaultManager];
  id v4 = [v3 containerURLForSecurityApplicationGroupIdentifier:v2];

  return v4;
}

id FCURLForFeldsparUserAccountHomeDirectoryForEnvironment(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (!v1 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int8x8_t v6 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "environmentIdentifier");
    *(_DWORD *)buf = 136315906;
    uint64_t v9 = "NSURL *FCURLForFeldsparUserAccountHomeDirectoryForEnvironment(NSString *__strong)";
    __int16 v10 = 2080;
    uint64_t v11 = "FCFileURLs.m";
    __int16 v12 = 1024;
    int v13 = 126;
    __int16 v14 = 2114;
    uint64_t v15 = v6;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
  id v2 = FCURLForFeldsparUserAccountHomeDirectory();
  id v3 = [v2 URLByAppendingPathComponent:v1 isDirectory:1];

  id v4 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v7 = 0;
  [v4 createDirectoryAtURL:v3 withIntermediateDirectories:1 attributes:0 error:&v7];

  return v3;
}

id FCURLForFeldsparUserAccountHomeDirectory()
{
  id v0 = FCSystemDirectoryDirectoryPath();
  id v1 = FCURLForSystemDirectoriesPath(v0);
  id v2 = [v1 URLByAppendingPathComponent:@"News" isDirectory:1];

  id v3 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v5 = 0;
  [v3 createDirectoryAtURL:v2 withIntermediateDirectories:1 attributes:0 error:&v5];

  return v2;
}

id FCURLForSystemDirectoriesPath(id a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = [NSString stringWithCString:a1 encoding:4];
    free(v1);
    id v1 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v2 isDirectory:1];
  }
  return v1;
}

void *FCSystemDirectoryDirectoryPath()
{
  id v0 = malloc_type_malloc(0x400uLL, 0x67B5ED4BuLL);
  if (v0)
  {
    uint64_t started = sysdir_start_search_path_enumeration_private();
    MEMORY[0x1A6261B10](started, v0);
  }
  return v0;
}

void sub_1A46A711C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A46A7954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1A46A853C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A46AB1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void FCPerformIfNonNil(void *a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v4 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "block");
    *(_DWORD *)buf = 136315906;
    uint64_t v7 = "void FCPerformIfNonNil(id  _Nullable __strong, FCidBlock  _Nonnull __strong)";
    __int16 v8 = 2080;
    uint64_t v9 = "FCBlockUtilities.m";
    __int16 v10 = 1024;
    int v11 = 37;
    __int16 v12 = 2114;
    int v13 = v5;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  if (v3) {
LABEL_4:
  }
    v4[2](v4, v3);
LABEL_5:
}

void sub_1A46AB6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void FCDispatchAsyncWithQualityOfService(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a1;
  FCBlockWithQualityOfService(a2, a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  dispatch_async(v5, v6);
}

id FCBlockWithQualityOfService(uint64_t a1, dispatch_block_t block)
{
  if (a1 == 33) {
    int v3 = 33;
  }
  else {
    int v3 = 0;
  }
  if (a1 == 25) {
    int v4 = 25;
  }
  else {
    int v4 = v3;
  }
  if (a1 == 17) {
    int v5 = 17;
  }
  else {
    int v5 = v4;
  }
  if (a1 == 9) {
    int v6 = 9;
  }
  else {
    int v6 = 0;
  }
  if (a1 == -1) {
    int v7 = 21;
  }
  else {
    int v7 = v6;
  }
  if (a1 <= 16) {
    dispatch_qos_class_t v8 = v7;
  }
  else {
    dispatch_qos_class_t v8 = v5;
  }
  dispatch_block_t v9 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v8, 0, block);
  __int16 v10 = _Block_copy(v9);

  return v10;
}

uint64_t FCHigherQualityOfService(uint64_t result, uint64_t a2)
{
  uint64_t v2 = -1;
  uint64_t v3 = 2;
  uint64_t v4 = 3;
  uint64_t v5 = 4;
  if (result != 33) {
    uint64_t v5 = -1;
  }
  if (result != 25) {
    uint64_t v4 = v5;
  }
  if (result != 17) {
    uint64_t v3 = v4;
  }
  if (result == 9) {
    uint64_t v2 = 1;
  }
  if (result == -1) {
    uint64_t v2 = 0;
  }
  if (result > 16) {
    uint64_t v2 = v3;
  }
  uint64_t v6 = -1;
  uint64_t v7 = 2;
  uint64_t v8 = 3;
  uint64_t v9 = 4;
  if (a2 != 33) {
    uint64_t v9 = -1;
  }
  if (a2 != 25) {
    uint64_t v8 = v9;
  }
  if (a2 != 17) {
    uint64_t v7 = v8;
  }
  if (a2 == 9) {
    uint64_t v6 = 1;
  }
  if (a2 == -1) {
    uint64_t v6 = 0;
  }
  if (a2 > 16) {
    uint64_t v6 = v7;
  }
  if (v2 <= v6) {
    return a2;
  }
  return result;
}

void sub_1A46AC6FC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A46AE08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A46AEB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose((const void *)(v38 - 248), 8);
  _Unwind_Resume(a1);
}

void sub_1A46AED74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A46AF428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2 == 1)
  {
    id v10 = objc_begin_catch(exception_object);
    if ([v10 errorCode] == 1006 || objc_msgSend(v10, "errorCode") == 1009)
    {
      int v11 = (void *)MEMORY[0x1E4F1A130];
      __int16 v12 = [v10 reason];
      int v13 = [v11 errorWithCode:1009 format:@"Invalid predicate: %@"];
    }
    else
    {
      int v13 = [MEMORY[0x1E4F1A130] errorWithCode:1000 format:@"Unknown error %@"];
      __int16 v12 = 0;
    }

    if (v9) {
      *uint64_t v9 = v13;
    }

    objc_end_catch();
    JUMPOUT(0x1A46AF240);
  }
  _Unwind_Resume(exception_object);
}

id CKVerifyFilters(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v1 = a1;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v14;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v14 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        if (v6) {
          uint64_t v6 = (void *)v6[1];
        }
        uint64_t v7 = v6;
        uint64_t v8 = objc_msgSend(v7, "name", (void)v13);

        uint64_t v9 = CKAllowedSystemFieldNames();
        char v10 = [v9 containsObject:v8];

        if ((v10 & 1) != 0 || !v8)
        {

          goto LABEL_15;
        }
        int v11 = CKValidateKeyName();

        if (v11) {
          goto LABEL_16;
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v13 objects:v17 count:16];
      int v11 = 0;
      if (v3) {
        continue;
      }
      break;
    }
  }
  else
  {
LABEL_15:
    int v11 = 0;
  }
LABEL_16:

  return v11;
}

id CKAllowedSystemFieldNames()
{
  if (qword_1EB5D1620 != -1) {
    dispatch_once(&qword_1EB5D1620, &__block_literal_global_84);
  }
  id v0 = (void *)_MergedGlobals_174;
  return v0;
}

id FCCKPRecordFieldIdentifierForUserFieldName(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *MEMORY[0x1E4F19BE8];
  id v2 = a1;
  if ([v2 isEqualToString:v1]
    && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = (void *)[[NSString alloc] initWithFormat:@"Unsupported operation for special key-path allTokens"];
    int v10 = 136315906;
    int v11 = "FCCKPRecordFieldIdentifier *FCCKPRecordFieldIdentifierForUserFieldName(NSString *__strong)";
    __int16 v12 = 2080;
    long long v13 = "FCCKPredicateConversion.m";
    __int16 v14 = 1024;
    int v15 = 94;
    __int16 v16 = 2114;
    int v17 = v9;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v10, 0x26u);
  }
  uint64_t v3 = CKServerFieldNameForUserFieldName(v2);
  uint64_t v4 = (void *)v3;
  if (v3) {
    uint64_t v5 = (void *)v3;
  }
  else {
    uint64_t v5 = v2;
  }
  id v6 = v5;

  uint64_t v7 = objc_opt_new();
  [v7 setName:v6];

  return v7;
}

id CKServerFieldNameForUserFieldName(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (qword_1EB5D1630 == -1)
  {
    if (v1)
    {
LABEL_3:
      uint64_t v3 = [(id)qword_1EB5D1628 objectForKeyedSubscript:v2];
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once(&qword_1EB5D1630, &__block_literal_global_5_0);
    if (v2) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
LABEL_6:

  return v3;
}

id CKNSArrayFromCollection(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = [v1 allValues];
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v2 = [v1 allObjects];
    }
    else
    {
      id v2 = v1;
    }
  }
  uint64_t v3 = v2;

  return v3;
}

void CKValidateRecordArrayValue(void *a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 count])
  {
    uint64_t v2 = [v1 objectAtIndexedSubscript:0];
    objc_getProtocol("CKRecordValue");
    uint64_t v3 = (Protocol *)objc_claimAutoreleasedReturnValue();
    for (uint64_t i = (objc_class *)objc_opt_class(); i != (objc_class *)objc_opt_class(); uint64_t i = class_getSuperclass(i))
    {
      if (class_conformsToProtocol(i, v3))
      {
        if (i) {
          goto LABEL_10;
        }
        break;
      }
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      id v16 = [NSString alloc];
      int v17 = (objc_class *)objc_opt_class();
      uint64_t v18 = NSStringFromClass(v17);
      id v19 = (void *)[v16 initWithFormat:@"Array members must conform to CKRecordValue: %@ (%@)", v1, v18];
      *(_DWORD *)buf = 136315906;
      unsigned int v29 = "void CKValidateRecordArrayValue(NSArray<__kindof id<CKRecordValue>> *__strong)";
      __int16 v30 = 2080;
      uint64_t v31 = "FCCKRecordFieldConversion.m";
      __int16 v32 = 1024;
      int v33 = 39;
      __int16 v34 = 2114;
      uint64_t v35 = v19;
      _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
    }
    uint64_t i = 0;
LABEL_10:
    uint64_t v20 = v3;
    char v21 = (void *)v2;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    id v22 = v1;
    id v5 = v1;
    uint64_t v6 = [v5 countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = MEMORY[0x1E4F14500];
      uint64_t v9 = *(void *)v24;
      do
      {
        uint64_t v10 = 0;
        do
        {
          if (*(void *)v24 != v9) {
            objc_enumerationMutation(v5);
          }
          if ((objc_opt_isKindOfClass() & 1) == 0 && os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            id v11 = [NSString alloc];
            __int16 v12 = (objc_class *)objc_opt_class();
            long long v13 = NSStringFromClass(v12);
            __int16 v14 = NSStringFromClass(i);
            int v15 = (void *)[v11 initWithFormat:@"Array members can't be mixed class: %@ (%@ != %@)", v5, v13, v14, v20, v21];
            *(_DWORD *)buf = 136315906;
            unsigned int v29 = "void CKValidateRecordArrayValue(NSArray<__kindof id<CKRecordValue>> *__strong)";
            __int16 v30 = 2080;
            uint64_t v31 = "FCCKRecordFieldConversion.m";
            __int16 v32 = 1024;
            int v33 = 44;
            __int16 v34 = 2114;
            uint64_t v35 = v15;
            _os_log_error_impl(&dword_1A460D000, v8, OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
          }
          ++v10;
        }
        while (v7 != v10);
        uint64_t v7 = [v5 countByEnumeratingWithState:&v23 objects:v27 count:16];
      }
      while (v7);
    }

    id v1 = v22;
  }
}

uint64_t FCCKPQueryFilterTypeForNSPredicateOperatorType(unint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1 < 0xB && ((0x53Fu >> a1) & 1) != 0) {
    return dword_1A4973C78[a1];
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v2 = (void *)[[NSString alloc] initWithFormat:@"Unexpected operator for predicate"];
    int v3 = 136315906;
    uint64_t v4 = "FCCKPQueryFilter_Type FCCKPQueryFilterTypeForNSPredicateOperatorType(NSPredicateOperatorType)";
    __int16 v5 = 2080;
    uint64_t v6 = "FCCKPredicateConversion.m";
    __int16 v7 = 1024;
    int v8 = 132;
    __int16 v9 = 2114;
    uint64_t v10 = v2;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v3, 0x26u);
  }
  return 1;
}

void sub_1A46B3700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A46B45D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,id location)
{
  objc_destroyWeak(v31);
  _Block_object_dispose(&a27, 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id FCHeadlinesByArticleIDFromHeldRecords(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  id v15 = a1;
  id v16 = a2;
  id v17 = a3;
  id v18 = a4;
  id v19 = a5;
  uint64_t v20 = FCIssuesWithHeldRecords(v16, a6, v19);
  if (a8) {
    char v21 = -[FCHeadlineExperimentalTitleProvider initWithShouldShowAlternateHeadlines:]([FCHeadlineExperimentalTitleProvider alloc], "initWithShouldShowAlternateHeadlines:", [v15 shouldShowAlternateHeadlines]);
  }
  else {
    char v21 = 0;
  }
  id v22 = (void *)MEMORY[0x1E4F1C9E8];
  long long v23 = [v17 allObjects];
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  v32[2] = __FCHeadlinesByArticleIDFromHeldRecords_block_invoke;
  v32[3] = &unk_1E5B55530;
  id v33 = v15;
  id v34 = v16;
  id v35 = v18;
  id v36 = v19;
  uint64_t v38 = v21;
  uint64_t v39 = a7;
  id v37 = v20;
  long long v24 = v21;
  id v25 = v20;
  id v26 = v19;
  id v27 = v18;
  id v28 = v16;
  id v29 = v15;
  __int16 v30 = objc_msgSend(v22, "fc_dictionaryWithKeys:allowingNil:valueBlock:", v23, 1, v32);

  return v30;
}

id FCIssuesWithHeldRecords(void *a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (!v5 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    long long v13 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "assetManager");
    *(_DWORD *)buf = 136315906;
    id v18 = "NSDictionary<NSString *,FCIssue *> *FCIssuesWithHeldRecords(FCAssetManager *__strong, FCHeldRecords<NTPBIssueR"
          "ecord *> *__strong, NSDictionary<NSString *,id<FCChannelProviding>> *__strong)";
    __int16 v19 = 2080;
    uint64_t v20 = "FCArticleHeadlineUtilities.m";
    __int16 v21 = 1024;
    int v22 = 81;
    __int16 v23 = 2114;
    long long v24 = v13;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __FCIssuesWithHeldRecords_block_invoke;
  v14[3] = &unk_1E5B50240;
  id v15 = v7;
  id v16 = v5;
  id v8 = v5;
  id v9 = v7;
  uint64_t v10 = [v6 transformRecordsWithBlock:v14];
  uint64_t v11 = objc_msgSend(v10, "fc_dictionaryWithKeySelector:", sel_identifier);

  return v11;
}

void sub_1A46B6138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id FCURLForContainerizedUserAccountCachesDirectory(char a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if ((a1 & 1) == 0 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v3 = (void *)[[NSString alloc] initWithFormat:@"this function is only supported for containerized processes"];
    int v4 = 136315906;
    id v5 = "NSURL *FCURLForContainerizedUserAccountCachesDirectory(BOOL)";
    __int16 v6 = 2080;
    id v7 = "FCFileURLs.m";
    __int16 v8 = 1024;
    int v9 = 61;
    __int16 v10 = 2114;
    uint64_t v11 = v3;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v4, 0x26u);
  }
  if (qword_1EB5D1390 != -1) {
    dispatch_once(&qword_1EB5D1390, &__block_literal_global_61);
  }
  id v1 = (void *)_MergedGlobals_165;
  return v1;
}

void sub_1A46B8204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1A46B86E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1A46B939C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A46BB334(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 248));
  _Unwind_Resume(a1);
}

uint64_t __NewsCoreUserDefaults_block_invoke()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F1CB18]) initWithSuiteName:@"com.apple.newscore"];
  uint64_t v1 = _MergedGlobals_193;
  _MergedGlobals_193 = v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t __NewsCoreSensitiveUserDefaults_block_invoke()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F1CB18]) initWithSuiteName:@"com.apple.newscore2"];
  uint64_t v1 = (void *)qword_1EB5D1838;
  qword_1EB5D1838 = v0;

  uint64_t v2 = *MEMORY[0x1E4F1D3F0];
  uint64_t v3 = *MEMORY[0x1E4F1D3C8];
  return MEMORY[0x1F40D8FB8](@"com.apple.newscore2", v2, v3, 0, 1);
}

void sub_1A46BCFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __FCKeyValueStoreMaxBufferSize_block_invoke()
{
  uint64_t result = FCProcessIsMemoryConstrained();
  uint64_t v1 = 3000000;
  if (result) {
    uint64_t v1 = 1024;
  }
  qword_1EB5D1988 = v1;
  return result;
}

uint64_t adStatusConditionTypeForType(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"BundleSubscription"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"sBundleSubscription"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

void sub_1A46C22BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __FCArticleRecordSourceLocalizableKeysFromDesiredFieldOptions_block_invoke_2()
{
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"tagMetadata", @"topicFlags", @"scores", 0);
  uint64_t v1 = _MergedGlobals_12;
  _MergedGlobals_12 = v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

void sub_1A46C296C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

__CFString *NSStringFromFCScoringType(unint64_t a1)
{
  if (a1 > 4) {
    return @"Legacy";
  }
  else {
    return off_1E5B58FF8[a1];
  }
}

void sub_1A46C317C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A46C3284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id FCDefaultScheduledMicroUpdateTimes()
{
  if (qword_1EB5D19B0 != -1) {
    dispatch_once(&qword_1EB5D19B0, &__block_literal_global_144);
  }
  uint64_t v0 = (void *)_MergedGlobals_202;
  return v0;
}

void sub_1A46CCCE0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void __FCProcessIsMemoryConstrained_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F28B50] mainBundle];
  id v1 = [v0 bundleIdentifier];

  _MergedGlobals_140 = [&unk_1EF8D8820 containsObject:v1];
}

void __FCPersistenceQueue_block_invoke()
{
  long long v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v0 = dispatch_queue_attr_make_with_qos_class(v3, QOS_CLASS_BACKGROUND, 0);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.newscore.persistence", v0);
  uint64_t v2 = (void *)_MergedGlobals_214;
  _MergedGlobals_214 = (uint64_t)v1;
}

void sub_1A46CE9D8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1A46CEC1C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1A46CEE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A46CF2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void FCSwizzleClassMethods(objc_class *a1, const char *a2, const char *a3)
{
  if (a1)
  {
    ClassMethod = class_getClassMethod(a1, a2);
    __int16 v6 = class_getClassMethod(a1, a3);
    if (ClassMethod)
    {
      if (v6)
      {
        method_exchangeImplementations(ClassMethod, v6);
      }
    }
  }
}

id FCURLForContainerizedUserAccountDocumentDirectory(char a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if ((a1 & 1) == 0 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    long long v3 = (void *)[[NSString alloc] initWithFormat:@"this function is only supported for containerized processes"];
    int v4 = 136315906;
    id v5 = "NSURL *FCURLForContainerizedUserAccountDocumentDirectory(BOOL)";
    __int16 v6 = 2080;
    id v7 = "FCFileURLs.m";
    __int16 v8 = 1024;
    int v9 = 78;
    __int16 v10 = 2114;
    uint64_t v11 = v3;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v4, 0x26u);
  }
  if (qword_1EB5D13A0 != -1) {
    dispatch_once(&qword_1EB5D13A0, &__block_literal_global_6_1);
  }
  uint64_t v1 = (void *)qword_1EB5D1398;
  return v1;
}

void FCFlattenArrayToArray(void *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v3);
        }
        uint64_t v9 = *(void *)(*((void *)&v10 + 1) + 8 * v8);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          FCFlattenArrayToArray(v9, v4);
        }
        else {
          [v4 addObject:v9];
        }
        ++v8;
      }
      while (v6 != v8);
      uint64_t v6 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }
}

void sub_1A46D0690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A46D0A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id FCURLForAccountActionQueue()
{
  uint64_t v0 = FCURLForFeldsparUserAccountHomeDirectory();
  uint64_t v1 = [v0 URLByAppendingPathComponent:@"actionQueue" isDirectory:0];

  return v1;
}

void sub_1A46D3C74(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

void sub_1A46D403C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void __FCDefaultScheduledMicroUpdateTimes_block_invoke()
{
  uint64_t v0 = +[FCAppleAccount sharedAccount];
  uint64_t v1 = [v0 contentStoreFrontID];
  int v2 = [v1 isEqualToString:@"143441"];

  id v3 = (void *)MEMORY[0x1E4F1CC08];
  id v4 = (void *)_MergedGlobals_202;
  if (v2) {
    id v3 = &unk_1EF8D98F8;
  }
  _MergedGlobals_202 = (uint64_t)v3;
}

void __CKAllowedSystemFieldNames_block_invoke()
{
  v5[7] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *MEMORY[0x1E4F19D20];
  v5[0] = *MEMORY[0x1E4F19D58];
  v5[1] = v0;
  uint64_t v1 = *MEMORY[0x1E4F19D18];
  v5[2] = *MEMORY[0x1E4F19D30];
  void v5[3] = v1;
  uint64_t v2 = *MEMORY[0x1E4F19D28];
  v5[4] = *MEMORY[0x1E4F19D38];
  v5[5] = v2;
  v5[6] = *MEMORY[0x1E4F19D70];
  uint64_t v3 = [MEMORY[0x1E4F1C978] arrayWithObjects:v5 count:7];
  id v4 = (void *)_MergedGlobals_174;
  _MergedGlobals_174 = v3;
}

id FCURLForContainerizedUserAccountHomeDirectory(char a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if ((a1 & 1) == 0 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = (void *)[[NSString alloc] initWithFormat:@"this function is only supported for containerized processes"];
    int v4 = 136315906;
    uint64_t v5 = "NSURL *FCURLForContainerizedUserAccountHomeDirectory(BOOL)";
    __int16 v6 = 2080;
    uint64_t v7 = "FCFileURLs.m";
    __int16 v8 = 1024;
    int v9 = 54;
    __int16 v10 = 2114;
    long long v11 = v3;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v4, 0x26u);
  }
  uint64_t v1 = FCURLForDirectoryInDomain(NSLibraryDirectory, 1uLL);
  return v1;
}

void __CKServerFieldNameForUserFieldName_block_invoke()
{
  v9[7] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *MEMORY[0x1E4F19D58];
  v8[0] = @"recordID";
  v8[1] = @"creationDate";
  uint64_t v1 = *MEMORY[0x1E4F19D18];
  v9[0] = v0;
  v9[1] = v1;
  uint64_t v2 = *MEMORY[0x1E4F19D38];
  v8[2] = @"modificationDate";
  v8[3] = @"creatorUserRecordID";
  uint64_t v3 = *MEMORY[0x1E4F19D20];
  v9[2] = v2;
  v9[3] = v3;
  uint64_t v4 = *MEMORY[0x1E4F19D30];
  v8[4] = @"lastModifiedUserRecordID";
  v8[5] = @"recordChangeTag";
  uint64_t v5 = *MEMORY[0x1E4F19D28];
  void v9[4] = v4;
  v9[5] = v5;
  v8[6] = @"shareID";
  v9[6] = *MEMORY[0x1E4F19D70];
  uint64_t v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:v8 count:7];
  uint64_t v7 = (void *)qword_1EB5D1628;
  qword_1EB5D1628 = v6;
}

void sub_1A46D9344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A46D9474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A46D96B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1A46D9964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A46DAE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __FCSetupLogging_block_invoke()
{
  os_log_t v0 = os_log_create((const char *)FCLogSubsystemIdentifier, "Default");
  uint64_t v1 = (void *)FCDefaultLog;
  FCDefaultLog = (uint64_t)v0;

  os_log_t v2 = os_log_create((const char *)FCLogSubsystemIdentifier, "AlternateUniversalLinks");
  uint64_t v3 = (void *)FCAlternateUniversalLinksLog;
  FCAlternateUniversalLinksLog = (uint64_t)v2;

  os_log_t v4 = os_log_create((const char *)FCLogSubsystemIdentifier, "Analytics");
  uint64_t v5 = (void *)FCAnalyticsLog;
  FCAnalyticsLog = (uint64_t)v4;

  os_log_t v6 = os_log_create((const char *)FCLogSubsystemIdentifier, "AppConfiguration");
  uint64_t v7 = (void *)FCAppConfigurationLog;
  FCAppConfigurationLog = (uint64_t)v6;

  os_log_t v8 = os_log_create((const char *)FCLogSubsystemIdentifier, "Audio");
  uint64_t v9 = (void *)FCAudioLog;
  FCAudioLog = (uint64_t)v8;

  os_log_t v10 = os_log_create((const char *)FCLogSubsystemIdentifier, "AutoFavorites");
  uint64_t v11 = (void *)FCAutoFavoritesLog;
  FCAutoFavoritesLog = (uint64_t)v10;

  os_log_t v12 = os_log_create((const char *)FCLogSubsystemIdentifier, "AutoFavoritesService");
  uint64_t v13 = (void *)FCAutoFavoritesServiceLog;
  FCAutoFavoritesServiceLog = (uint64_t)v12;

  os_log_t v14 = os_log_create((const char *)FCLogSubsystemIdentifier, "AVAsset");
  uint64_t v15 = (void *)FCAVAssetLog;
  FCAVAssetLog = (uint64_t)v14;

  os_log_t v16 = os_log_create((const char *)FCLogSubsystemIdentifier, "Biome");
  uint64_t v17 = (void *)FCBiomeLog;
  FCBiomeLog = (uint64_t)v16;

  os_log_t v18 = os_log_create((const char *)FCLogSubsystemIdentifier, "ChannelPicker");
  __int16 v19 = (void *)FCChannelPickerLog;
  FCChannelPickerLog = (uint64_t)v18;

  os_log_t v20 = os_log_create((const char *)FCLogSubsystemIdentifier, "CloudKit");
  __int16 v21 = (void *)FCCloudKitLog;
  FCCloudKitLog = (uint64_t)v20;

  os_log_t v22 = os_log_create((const char *)FCLogSubsystemIdentifier, "CommandQueue");
  __int16 v23 = (void *)FCCommandQueueLog;
  FCCommandQueueLog = (uint64_t)v22;

  os_log_t v24 = os_log_create((const char *)FCLogSubsystemIdentifier, "CurrentIssuesChecker");
  uint64_t v25 = (void *)FCCurrentIssuesCheckerLog;
  FCCurrentIssuesCheckerLog = (uint64_t)v24;

  os_log_t v26 = os_log_create((const char *)FCLogSubsystemIdentifier, "DES");
  id v27 = (void *)FCDESLog;
  FCDESLog = (uint64_t)v26;

  os_log_t v28 = os_log_create((const char *)FCLogSubsystemIdentifier, "Diagnostics");
  id v29 = (void *)FCDiagnosticsLog;
  FCDiagnosticsLog = (uint64_t)v28;

  os_log_t v30 = os_log_create((const char *)FCLogSubsystemIdentifier, "ESLInventory");
  uint64_t v31 = (void *)FCESLInventoryLog;
  FCESLInventoryLog = (uint64_t)v30;

  os_log_t v32 = os_log_create((const char *)FCLogSubsystemIdentifier, "FeedItemInventory");
  id v33 = (void *)FCFeedItemInventoryLog;
  FCFeedItemInventoryLog = (uint64_t)v32;

  os_log_t v34 = os_log_create((const char *)FCLogSubsystemIdentifier, "FeedDatabase");
  id v35 = (void *)FCFeedDatabaseLog;
  FCFeedDatabaseLog = (uint64_t)v34;

  os_log_t v36 = os_log_create((const char *)FCLogSubsystemIdentifier, "FeedTransform");
  id v37 = (void *)FCFeedItemTransformationLog;
  FCFeedItemTransformationLog = (uint64_t)v36;

  os_log_t v38 = os_log_create((const char *)FCLogSubsystemIdentifier, "FeedPrewarm");
  uint64_t v39 = (void *)FCFeedPrewarmLog;
  FCFeedPrewarmLog = (uint64_t)v38;

  os_log_t v40 = os_log_create((const char *)FCLogSubsystemIdentifier, "FeedViewport");
  v41 = (void *)FCFeedViewportLog;
  FCFeedViewportLog = (uint64_t)v40;

  os_log_t v42 = os_log_create((const char *)FCLogSubsystemIdentifier, "LocalAreas");
  v43 = (void *)FCLocalAreasLog;
  FCLocalAreasLog = (uint64_t)v42;

  os_log_t v44 = os_log_create((const char *)FCLogSubsystemIdentifier, "Network");
  uint64_t v45 = (void *)FCNetworkLog;
  FCNetworkLog = (uint64_t)v44;

  os_log_t v46 = os_log_create((const char *)FCLogSubsystemIdentifier, "Newsletter");
  id v47 = (void *)FCNewsletterLog;
  FCNewsletterLog = (uint64_t)v46;

  os_log_t v48 = os_log_create((const char *)FCLogSubsystemIdentifier, "Notifications");
  v49 = (void *)FCNotificationsLog;
  FCNotificationsLog = (uint64_t)v48;

  os_log_t v50 = os_log_create((const char *)FCLogSubsystemIdentifier, "OfflineDownloads");
  __int16 v51 = (void *)FCOfflineDownloadsLog;
  FCOfflineDownloadsLog = (uint64_t)v50;

  os_log_t v52 = os_log_create((const char *)FCLogSubsystemIdentifier, "OpenInNews");
  __int16 v53 = (void *)FCOpenInNewsLog;
  FCOpenInNewsLog = (uint64_t)v52;

  os_log_t v54 = os_log_create((const char *)FCLogSubsystemIdentifier, "Operations");
  __int16 v55 = (void *)FCOperationLog;
  FCOperationLog = (uint64_t)v54;

  os_log_t v56 = os_log_create((const char *)FCLogSubsystemIdentifier, "Paywall");
  uint64_t v57 = (void *)FCPaywallLog;
  FCPaywallLog = (uint64_t)v56;

  os_log_t v58 = os_log_create((const char *)FCLogSubsystemIdentifier, "Personalization");
  v59 = (void *)FCPersonalizationLog;
  FCPersonalizationLog = (uint64_t)v58;

  os_log_t v60 = os_log_create((const char *)FCLogSubsystemIdentifier, "PPT");
  v61 = (void *)FCPPTLog;
  FCPPTLog = (uint64_t)v60;

  os_log_t v62 = os_log_create((const char *)FCLogSubsystemIdentifier, "PrivateDataEncryptionCrash");
  v63 = (void *)FCPrivateDataEncryptionCrashLog;
  FCPrivateDataEncryptionCrashLog = (uint64_t)v62;

  os_log_t v64 = os_log_create((const char *)FCLogSubsystemIdentifier, "PrivateDataEncryption");
  v65 = (void *)FCPrivateDataEncryptionLog;
  FCPrivateDataEncryptionLog = (uint64_t)v64;

  os_log_t v66 = os_log_create((const char *)FCLogSubsystemIdentifier, "PrivateData");
  v67 = (void *)FCPrivateDataLog;
  FCPrivateDataLog = (uint64_t)v66;

  os_log_t v68 = os_log_create((const char *)FCLogSubsystemIdentifier, "ProgressivePersonalization");
  v69 = (void *)FCProgressivePersonalizationLog;
  FCProgressivePersonalizationLog = (uint64_t)v68;

  os_log_t v70 = os_log_create((const char *)FCLogSubsystemIdentifier, "Purchase");
  v71 = (void *)FCPurchaseLog;
  FCPurchaseLog = (uint64_t)v70;

  os_log_t v72 = os_log_create((const char *)FCLogSubsystemIdentifier, "PushNotifications");
  v73 = (void *)FCPushNotificationsLog;
  FCPushNotificationsLog = (uint64_t)v72;

  os_log_t v74 = os_log_create((const char *)FCLogSubsystemIdentifier, "Puzzle");
  v75 = (void *)FCPuzzleLog;
  FCPuzzleLog = (uint64_t)v74;

  os_log_t v76 = os_log_create((const char *)FCLogSubsystemIdentifier, "Reachability");
  v77 = (void *)FCReachabilityLog;
  FCReachabilityLog = (uint64_t)v76;

  os_log_t v78 = os_log_create((const char *)FCLogSubsystemIdentifier, "ReadonlyPersonalizationAggregateStore");
  v79 = (void *)FCReadonlyPersonalizationAggregateStoreLog;
  FCReadonlyPersonalizationAggregateStoreLog = (uint64_t)v78;

  os_log_t v80 = os_log_create((const char *)FCLogSubsystemIdentifier, "RecordSource");
  v81 = (void *)FCRecordSourceLog;
  FCRecordSourceLog = (uint64_t)v80;

  os_log_t v82 = os_log_create((const char *)FCLogSubsystemIdentifier, "FavoriteList");
  v83 = (void *)FCShortcutListLog;
  FCShortcutListLog = (uint64_t)v82;

  os_log_t v84 = os_log_create((const char *)FCLogSubsystemIdentifier, "ShortcutCategoryList");
  v85 = (void *)FCShortcutCategoryListLog;
  FCShortcutCategoryListLog = (uint64_t)v84;

  os_log_t v86 = os_log_create((const char *)FCLogSubsystemIdentifier, "StatelessPersonalization");
  v87 = (void *)FCStatelessPersonalizationLog;
  FCStatelessPersonalizationLog = (uint64_t)v86;

  os_log_t v88 = os_log_create((const char *)FCLogSubsystemIdentifier, "SubscriptionList");
  v89 = (void *)FCSubscriptionListLog;
  FCSubscriptionListLog = (uint64_t)v88;

  os_log_t v90 = os_log_create((const char *)FCLogSubsystemIdentifier, "TabiConfiguration");
  v91 = (void *)FCTabiConfigurationLog;
  FCTabiConfigurationLog = (uint64_t)v90;

  os_log_t v92 = os_log_create((const char *)FCLogSubsystemIdentifier, "TagRecommendation");
  v93 = (void *)FCTagRecommendationLog;
  FCTagRecommendationLog = (uint64_t)v92;

  os_log_t v94 = os_log_create((const char *)FCLogSubsystemIdentifier, "TopStories");
  v95 = (void *)FCTopStoriesLog;
  FCTopStoriesLog = (uint64_t)v94;

  os_log_t v96 = os_log_create((const char *)FCLogSubsystemIdentifier, "Translation");
  v97 = (void *)FCTranslationLog;
  FCTranslationLog = (uint64_t)v96;

  os_log_t v98 = os_log_create((const char *)FCLogSubsystemIdentifier, "UserEvents");
  v99 = (void *)FCUserEventsLog;
  FCUserEventsLog = (uint64_t)v98;

  os_log_t v100 = os_log_create((const char *)FCLogSubsystemIdentifier, "UserEventsStorage");
  v101 = (void *)FCUserEventsStorageLog;
  FCUserEventsStorageLog = (uint64_t)v100;

  os_log_t v102 = os_log_create((const char *)FCLogSubsystemIdentifier, "UserInfo");
  v103 = (void *)FCUserInfoLog;
  FCUserInfoLog = (uint64_t)v102;

  os_log_t v104 = os_log_create((const char *)FCLogSubsystemIdentifier, "VanityURL");
  v105 = (void *)FCVanityURLLog;
  FCVanityURLLog = (uint64_t)v104;

  os_log_t v106 = os_log_create((const char *)FCLogSubsystemIdentifier, "WebURLResolution");
  uint64_t v107 = FCWebURLResolutionLog;
  FCWebURLResolutionLog = (uint64_t)v106;
  return MEMORY[0x1F41817F8](v106, v107);
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

Class __getSKProductsRequestClass_block_invoke(uint64_t a1)
{
  StoreKitLibrary_1();
  Class result = objc_getClass("SKProductsRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    _MergedGlobals_220 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = abort_report_np();
    return (Class)__getSKPaymentQueueClientClass_block_invoke(v3);
  }
  return result;
}

Class __getSKPaymentQueueClientClass_block_invoke(uint64_t a1)
{
  StoreKitLibrary();
  Class result = objc_getClass("SKPaymentQueueClient");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSKPaymentQueueClientClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = abort_report_np();
    return (Class)__getSKPaymentQueueClientClass_block_invoke_0(v3);
  }
  return result;
}

void __getSKPaymentQueueClientClass_block_invoke_0(uint64_t a1)
{
  StoreKitLibrary_0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SKPaymentQueueClient");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB5D1720 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = abort_report_np();
    __getSKPaymentQueueClientClass_block_invoke_1(v2);
  }
}

void __getSKPaymentQueueClientClass_block_invoke_1(uint64_t a1)
{
  StoreKitLibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SKPaymentQueueClient");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB5D1B38 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = abort_report_np();
    __93__FCConfigurationManager__refreshAppConfigurationWithConfigurationSettings_force_completion___block_invoke_127(v2, v3, v4, v5, v6);
  }
}

void StoreKitLibrary()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v1[0] = 0;
  if (!StoreKitLibraryCore_frameworkLibrary)
  {
    v1[1] = MEMORY[0x1E4F143A8];
    v1[2] = 3221225472;
    v1[3] = __StoreKitLibraryCore_block_invoke_0;
    v1[4] = &__block_descriptor_40_e5_v8__0l;
    v1[5] = v1;
    long long v2 = xmmword_1E5B55740;
    uint64_t v3 = 0;
    StoreKitLibraryCore_frameworkLibrary = _sl_dlopen();
    os_log_t v0 = (void *)v1[0];
    if (StoreKitLibraryCore_frameworkLibrary)
    {
      if (!v1[0]) {
        return;
      }
    }
    else
    {
      os_log_t v0 = (void *)abort_report_np();
    }
    free(v0);
  }
}

void StoreKitLibrary_0()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v1[0] = 0;
  if (!StoreKitLibraryCore_frameworkLibrary_0)
  {
    v1[1] = MEMORY[0x1E4F143A8];
    v1[2] = 3221225472;
    v1[3] = __StoreKitLibraryCore_block_invoke_1;
    v1[4] = &__block_descriptor_40_e5_v8__0l;
    v1[5] = v1;
    long long v2 = xmmword_1E5B56008;
    uint64_t v3 = 0;
    StoreKitLibraryCore_frameworkLibrary_0 = _sl_dlopen();
    os_log_t v0 = (void *)v1[0];
    if (StoreKitLibraryCore_frameworkLibrary_0)
    {
      if (!v1[0]) {
        return;
      }
    }
    else
    {
      os_log_t v0 = (void *)abort_report_np();
    }
    free(v0);
  }
}

void StoreKitLibrary_1()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v1[0] = 0;
  if (!StoreKitLibraryCore_frameworkLibrary_1)
  {
    v1[1] = MEMORY[0x1E4F143A8];
    v1[2] = 3221225472;
    v1[3] = __StoreKitLibraryCore_block_invoke_2;
    v1[4] = &__block_descriptor_40_e5_v8__0l;
    v1[5] = v1;
    long long v2 = xmmword_1E5B5AF98;
    uint64_t v3 = 0;
    StoreKitLibraryCore_frameworkLibrary_1 = _sl_dlopen();
    os_log_t v0 = (void *)v1[0];
    if (StoreKitLibraryCore_frameworkLibrary_1)
    {
      if (!v1[0]) {
        return;
      }
    }
    else
    {
      os_log_t v0 = (void *)abort_report_np();
    }
    free(v0);
  }
}

void sub_1A46DC934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1A46DDC80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v54 = sub_1A4943170();
  uint64_t v53 = *(void *)(v54 - 8);
  MEMORY[0x1F4188790](v54);
  __int16 v55 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF570);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A4942410();
  sub_1A49422D0();
  v65[0] = a1;
  v65[1] = a2;
  sub_1A4942520();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  id v68 = a3;
  id v16 = objc_msgSend(a3, sel_modificationDate);
  if (v16)
  {
    uint64_t v17 = v16;
    sub_1A4942180();

    uint64_t v18 = sub_1A49421A0();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v15, 0, 1, v18);
  }
  else
  {
    uint64_t v19 = sub_1A49421A0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v15, 1, 1, v19);
  }
  sub_1A4942520();
  swift_release();
  v66[1] = a4;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v65);
  uint64_t v50 = *(void *)(a4 - 8);
  __int16 v21 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v50 + 16);
  uint64_t v51 = a6;
  uint64_t v52 = a4;
  v21(boxed_opaque_existential_0, a6, a4);
  sub_1A4943150();
  sub_1A4943160();
  uint64_t v22 = sub_1A4942EF0();
  swift_release();
  swift_retain();
  sub_1A4942FC0();
  sub_1A46DE368((uint64_t)v62, (uint64_t)v65);
  if (v67)
  {
    __int16 v23 = v66;
    os_log_t v24 = (uint64_t *)&unk_1E9651988;
    uint64_t v25 = MEMORY[0x1E4FBC840] + 8;
    os_log_t v26 = (uint64_t *)&unk_1E96519A0;
    do
    {
      swift_bridgeObjectRelease();
      sub_1A46DE3D0(v23, v59);
      __swift_instantiateConcreteTypeFromMangledName(v24);
      if (swift_dynamicCast())
      {
        sub_1A46DE538(v60, (uint64_t)v62);
        uint64_t v27 = v63;
        uint64_t v28 = v64;
        __swift_project_boxed_opaque_existential_1(v62, v63);
        if ((*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v27, v28))
        {
          objc_msgSend(v68, sel_encryptedValues);
          uint64_t ObjectType = swift_getObjectType();
          uint64_t v29 = v25;
          os_log_t v30 = v23;
          uint64_t v31 = v22;
          os_log_t v32 = v24;
          id v33 = v26;
          uint64_t v35 = v63;
          uint64_t v34 = v64;
          __swift_project_boxed_opaque_existential_1(v62, v63);
          uint64_t v36 = v35;
          os_log_t v26 = v33;
          os_log_t v24 = v32;
          uint64_t v22 = v31;
          __int16 v23 = v30;
          uint64_t v25 = v29;
          (*(void (**)(uint64_t, uint64_t))(v34 + 24))(v36, v34);
          sub_1A4942D10();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
        }
        else
        {
          uint64_t v37 = v63;
          uint64_t v38 = v64;
          __swift_project_boxed_opaque_existential_1(v62, v63);
          (*(void (**)(uint64_t, uint64_t))(v38 + 24))(v37, v38);
          sub_1A46DE3E0();
          sub_1A4942D10();
          swift_bridgeObjectRelease();
        }
        sub_1A46DE420((uint64_t)v60, (uint64_t)&v57);
        if (v58)
        {
          sub_1A46DE538(&v57, (uint64_t)v59);
          sub_1A46DE550((uint64_t)v59, (uint64_t)&v57);
          uint64_t v39 = v63;
          uint64_t v40 = v64;
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v62, v63);
          (*(void (**)(long long *, uint64_t, uint64_t))(v40 + 40))(&v57, v39, v40);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
        }
        else
        {
          sub_1A46DE488((uint64_t)&v57, v26);
          uint64_t v41 = v63;
          uint64_t v42 = v64;
          __swift_project_boxed_opaque_existential_1(v62, v63);
          if ((*(uint64_t (**)(uint64_t, uint64_t))(v42 + 16))(v41, v42))
          {
            swift_release();
            uint64_t v44 = v63;
            uint64_t v45 = v64;
            __swift_project_boxed_opaque_existential_1(v62, v63);
            uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 24))(v44, v45);
            uint64_t v48 = v47;
            sub_1A46DE4E4();
            swift_allocError();
            uint64_t *v49 = v46;
            v49[1] = v48;
            swift_willThrow();

            swift_release();
            sub_1A46DE488((uint64_t)v60, (uint64_t *)&unk_1E96519A0);
            (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v54);
            (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v51, v52);
            return __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
          }
        }
        sub_1A46DE488((uint64_t)v60, v26);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
      }
      else
      {
        uint64_t v61 = 0;
        memset(v60, 0, sizeof(v60));
        sub_1A46DE488((uint64_t)v60, &qword_1E9651990);
      }
      sub_1A4942FC0();
      sub_1A46DE368((uint64_t)v62, (uint64_t)v65);
    }
    while (v67);
  }
  swift_release_n();

  return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v55, v54);
}

uint64_t sub_1A46DE368(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651980);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_OWORD *sub_1A46DE3D0(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_1A46DE3E0()
{
  unint64_t result = qword_1E9651998;
  if (!qword_1E9651998)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9651998);
  }
  return result;
}

uint64_t sub_1A46DE420(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E96519A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A46DE488(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1A46DE4E4()
{
  unint64_t result = qword_1E96574C0[0];
  if (!qword_1E96574C0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E96574C0);
  }
  return result;
}

uint64_t sub_1A46DE538(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1A46DE550(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1A46DE604(void *a1, uint64_t a2)
{
  uint64_t v39 = sub_1A4943170();
  uint64_t v38 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  os_log_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48[1] = a2;
  uint64_t v7 = __swift_allocate_boxed_opaque_existential_0(&v47);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v7, v2, a2);
  sub_1A4943150();
  uint64_t v37 = v6;
  sub_1A4943160();
  uint64_t v8 = sub_1A4942EF0();
  swift_release();
  swift_retain();
  sub_1A4942FC0();
  sub_1A46DE368((uint64_t)v44, (uint64_t)&v47);
  if (v49)
  {
    uint64_t v9 = v48;
    os_log_t v10 = (uint64_t *)&unk_1E9651988;
    uint64_t v11 = MEMORY[0x1E4FBC840] + 8;
    do
    {
      swift_bridgeObjectRelease();
      sub_1A46DE3D0(v9, &v40);
      __swift_instantiateConcreteTypeFromMangledName(v10);
      if (swift_dynamicCast())
      {
        sub_1A46DE538(v42, (uint64_t)v44);
        uint64_t v12 = v45;
        uint64_t v13 = v46;
        __swift_project_boxed_opaque_existential_1(v44, v45);
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v13 + 32))(&v40, v12, v13);
        if (v41)
        {
          sub_1A46DE538(&v40, (uint64_t)v42);
          uint64_t v14 = v45;
          uint64_t v15 = v46;
          __swift_project_boxed_opaque_existential_1(v44, v45);
          if ((*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15))
          {
            objc_msgSend(a1, sel_encryptedValues);
            uint64_t ObjectType = swift_getObjectType();
            uint64_t v16 = v11;
            uint64_t v17 = v9;
            uint64_t v18 = v8;
            uint64_t v19 = v10;
            os_log_t v20 = a1;
            uint64_t v21 = v45;
            uint64_t v22 = v46;
            __swift_project_boxed_opaque_existential_1(v44, v45);
            __int16 v23 = *(void (**)(uint64_t, uint64_t))(v22 + 24);
            uint64_t v24 = v22;
            a1 = v20;
            os_log_t v10 = v19;
            uint64_t v8 = v18;
            uint64_t v9 = v17;
            uint64_t v11 = v16;
            v23(v21, v24);
            sub_1A46DE550((uint64_t)v42, (uint64_t)&v40);
            sub_1A4942D20();
            swift_unknownObjectRelease();
          }
          else
          {
            uint64_t v27 = v45;
            uint64_t v28 = v46;
            __swift_project_boxed_opaque_existential_1(v44, v45);
            (*(void (**)(uint64_t, uint64_t))(v28 + 24))(v27, v28);
            sub_1A46DE550((uint64_t)v42, (uint64_t)&v40);
            sub_1A46DE3E0();
            sub_1A4942D20();
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
        }
        else
        {
          sub_1A46DE488((uint64_t)&v40, (uint64_t *)&unk_1E96519A0);
          uint64_t v25 = v45;
          uint64_t v26 = v46;
          __swift_project_boxed_opaque_existential_1(v44, v45);
          if ((*(uint64_t (**)(uint64_t, uint64_t))(v26 + 16))(v25, v26))
          {
            swift_release();
            uint64_t v29 = v45;
            uint64_t v30 = v46;
            __swift_project_boxed_opaque_existential_1(v44, v45);
            uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 24))(v29, v30);
            uint64_t v33 = v32;
            sub_1A46DE4E4();
            swift_allocError();
            *uint64_t v34 = v31;
            v34[1] = v33;
            swift_willThrow();
            swift_release();
            (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v39);
            return __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
          }
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
      }
      else
      {
        uint64_t v43 = 0;
        memset(v42, 0, sizeof(v42));
        sub_1A46DE488((uint64_t)v42, &qword_1E9651990);
      }
      sub_1A4942FC0();
      sub_1A46DE368((uint64_t)v44, (uint64_t)&v47);
    }
    while (v49);
  }
  swift_release_n();
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v37, v39);
}

void *initializeBufferWithCopyOfBuffer for PrivateZoneModelCKErrors(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for PrivateZoneModelCKErrors()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for PrivateZoneModelCKErrors(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for PrivateZoneModelCKErrors(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PrivateZoneModelCKErrors(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PrivateZoneModelCKErrors(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1A46DEC24()
{
  return 0;
}

ValueMetadata *type metadata accessor for PrivateZoneModelCKErrors()
{
  return &type metadata for PrivateZoneModelCKErrors;
}

id static CKContainer.defaultPrivate.getter()
{
  return sub_1A46DEC5C((SEL *)&selRef_privateDataContainerIdentifier);
}

id static CKContainer.defaultPrivateSecure.getter()
{
  return sub_1A46DEC5C((SEL *)&selRef_privateDataSecureContainerIdentifier);
}

id sub_1A46DEC5C(SEL *a1)
{
  id v2 = objc_msgSend(self, sel_defaultConfiguration);
  id v3 = [v2 *a1];
  sub_1A4942AE0();

  if (objc_msgSend(v2, sel_environment)) {
    uint64_t v4 = 2;
  }
  else {
    uint64_t v4 = 1;
  }
  id v5 = objc_allocWithZone(MEMORY[0x1E4F19ED8]);
  os_log_t v6 = (void *)sub_1A4942AD0();
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v5, sel_initWithContainerIdentifier_environment_, v6, v4);

  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F19EC8]), sel_initWithContainerID_, v7);
  return v8;
}

uint64_t sub_1A46DED64()
{
  uint64_t v0 = sub_1A49421B0();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790]();
  id v3 = &v5[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1A49421C0();
  MEMORY[0x1F4188790]();
  sub_1A46E28F4();
  swift_retain();
  sub_1A49421F0();
  swift_release();
  (*(void (**)(unsigned char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4FAB3F8], v0);
  v5[15] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF580);
  swift_allocObject();
  uint64_t result = sub_1A49421D0();
  qword_1EB5D0610 = result;
  return result;
}

uint64_t static Settings.WidgetBanner.shouldResetState.getter()
{
  if (qword_1EB5CFBB0 != -1) {
    swift_once();
  }
  return swift_retain();
}

ValueMetadata *type metadata accessor for Settings.WidgetBanner()
{
  return &type metadata for Settings.WidgetBanner;
}

uint64_t FCFeedPersonalizing.score(items:options:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (a1 >> 62)
  {
LABEL_50:
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF7F0);
    uint64_t v43 = sub_1A4942F60();
    swift_bridgeObjectRelease();
    uint64_t v3 = v43;
  }
  else
  {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    sub_1A4943090();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF7F0);
    if (!swift_dynamicCastMetatype())
    {
      uint64_t v41 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v41)
      {
        uint64_t v42 = v4 + 32;
        while (1)
        {
          __int16 v55 = &unk_1EF8E2BC0;
          if (!swift_dynamicCastObjCProtocolConditional()) {
            break;
          }
          v42 += 8;
          if (!--v41) {
            goto LABEL_3;
          }
        }
        uint64_t v3 = v4 | 1;
      }
    }
  }
LABEL_3:
  id v5 = FCFeedPersonalizing.sort(items:options:)(v3, a2);
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v5, sel_scoreProfiles);

  id v7 = objc_msgSend(v6, sel_dictionaryRepresentation);
  sub_1A46DF964();
  uint64_t v8 = MEMORY[0x1E4FBB960];
  a2 = sub_1A4942A60();

  uint64_t v45 = a2 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(a2 + 64);
  int64_t v46 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v12 = 0;
  uint64_t v13 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v44 = a2;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v12 << 6);
    }
    else
    {
      int64_t v17 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_47;
      }
      if (v17 >= v46)
      {
LABEL_39:
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v13;
      }
      unint64_t v18 = *(void *)(v45 + 8 * v17);
      ++v12;
      if (!v18)
      {
        int64_t v12 = v17 + 1;
        if (v17 + 1 >= v46) {
          goto LABEL_39;
        }
        unint64_t v18 = *(void *)(v45 + 8 * v12);
        if (!v18)
        {
          int64_t v12 = v17 + 2;
          if (v17 + 2 >= v46) {
            goto LABEL_39;
          }
          unint64_t v18 = *(void *)(v45 + 8 * v12);
          if (!v18)
          {
            int64_t v12 = v17 + 3;
            if (v17 + 3 >= v46) {
              goto LABEL_39;
            }
            unint64_t v18 = *(void *)(v45 + 8 * v12);
            if (!v18)
            {
              int64_t v19 = v17 + 4;
              if (v19 >= v46) {
                goto LABEL_39;
              }
              unint64_t v18 = *(void *)(v45 + 8 * v19);
              if (!v18)
              {
                while (1)
                {
                  int64_t v12 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_49;
                  }
                  if (v12 >= v46) {
                    goto LABEL_39;
                  }
                  unint64_t v18 = *(void *)(v45 + 8 * v12);
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v12 = v19;
            }
          }
        }
      }
LABEL_26:
      unint64_t v11 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
    }
    sub_1A46DF9A4(*(void *)(a2 + 48) + 40 * v16, (uint64_t)v53);
    os_log_t v20 = *(void **)(*(void *)(a2 + 56) + 8 * v16);
    *((void *)&v54 + 1) = v20;
    v51[0] = v53[0];
    v51[1] = v53[1];
    long long v52 = v54;
    sub_1A46DF9A4((uint64_t)v51, (uint64_t)v49);
    uint64_t v50 = *((void *)&v52 + 1);
    id v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF7F0);
    if (swift_dynamicCast()) {
      break;
    }
LABEL_8:
    sub_1A46DFA00((uint64_t)v51);
  }
  int64_t v47 = v12;
  a2 = v8;
  id v22 = objc_msgSend(v48, sel_itemID);
  uint64_t v23 = sub_1A4942AE0();
  uint64_t v25 = v24;

  sub_1A46DF9A4((uint64_t)v51, (uint64_t)v49);
  uint64_t v50 = *((void *)&v52 + 1);
  id v26 = *((id *)&v52 + 1);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  id v48 = v13;
  unint64_t v29 = sub_1A46DFA60(v23, v25);
  uint64_t v30 = v13[2];
  BOOL v31 = (v28 & 1) == 0;
  uint64_t v32 = v30 + v31;
  if (__OFADD__(v30, v31))
  {
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  char v33 = v28;
  if (v13[3] >= v32)
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      if ((v28 & 1) == 0)
      {
LABEL_35:
        v13[(v29 >> 6) + 8] |= 1 << v29;
        uint64_t v36 = (uint64_t *)(v13[6] + 16 * v29);
        *uint64_t v36 = v23;
        v36[1] = v25;
        *(void *)(v13[7] + 8 * v29) = v26;
        uint64_t v37 = v13[2];
        BOOL v38 = __OFADD__(v37, 1);
        uint64_t v39 = v37 + 1;
        if (v38) {
          goto LABEL_48;
        }
        v13[2] = v39;
        swift_bridgeObjectRetain();
        goto LABEL_7;
      }
    }
    else
    {
      sub_1A46DFECC();
      if ((v33 & 1) == 0) {
        goto LABEL_35;
      }
    }
LABEL_6:
    uint64_t v14 = v13[7];

    *(void *)(v14 + 8 * v29) = v26;
LABEL_7:
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1A46E0080((uint64_t)v49);
    a2 = v44;
    int64_t v12 = v47;
    goto LABEL_8;
  }
  sub_1A46DFAD8(v32, isUniquelyReferenced_nonNull_native);
  unint64_t v34 = sub_1A46DFA60(v23, v25);
  if ((v33 & 1) == (v35 & 1))
  {
    unint64_t v29 = v34;
    if ((v33 & 1) == 0) {
      goto LABEL_35;
    }
    goto LABEL_6;
  }
  uint64_t result = sub_1A49430A0();
  __break(1u);
  return result;
}

id FCFeedPersonalizing.sort(items:options:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF7F0);
  uint64_t v4 = (void *)sub_1A4942B40();
  id v5 = objc_msgSend(v2, sel_sortItems_options_configurationSet_, v4, a2, 0);

  return v5;
}

uint64_t FCFeedPersonalizing.score(items:options:configurationSet:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF7F0);
  id v7 = (void *)sub_1A4942B40();
  id v8 = objc_msgSend(v3, sel_sortItems_options_configurationSet_, v7, a2, a3);

  id v9 = objc_msgSend(v8, sel_scoreProfiles);
  id v10 = objc_msgSend(v9, sel_dictionaryRepresentation);

  sub_1A46DF964();
  uint64_t v11 = sub_1A4942A60();

  uint64_t v46 = v11 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v11 + 64);
  int64_t v47 = (unint64_t)(v12 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v15 = 0;
  unint64_t v16 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v45 = v11;
  while (1)
  {
    if (v14)
    {
      unint64_t v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v19 = v18 | (v15 << 6);
      goto LABEL_25;
    }
    int64_t v20 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      goto LABEL_39;
    }
    if (v20 >= v47)
    {
LABEL_37:
      swift_release();
      swift_bridgeObjectRelease();
      return (uint64_t)v16;
    }
    unint64_t v21 = *(void *)(v46 + 8 * v20);
    ++v15;
    if (!v21)
    {
      int64_t v15 = v20 + 1;
      if (v20 + 1 >= v47) {
        goto LABEL_37;
      }
      unint64_t v21 = *(void *)(v46 + 8 * v15);
      if (!v21)
      {
        int64_t v15 = v20 + 2;
        if (v20 + 2 >= v47) {
          goto LABEL_37;
        }
        unint64_t v21 = *(void *)(v46 + 8 * v15);
        if (!v21)
        {
          int64_t v15 = v20 + 3;
          if (v20 + 3 >= v47) {
            goto LABEL_37;
          }
          unint64_t v21 = *(void *)(v46 + 8 * v15);
          if (!v21) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_25:
    sub_1A46DF9A4(*(void *)(v11 + 48) + 40 * v19, (uint64_t)v54);
    uint64_t v23 = *(void **)(*(void *)(v11 + 56) + 8 * v19);
    *((void *)&v55 + 1) = v23;
    v52[0] = v54[0];
    v52[1] = v54[1];
    long long v53 = v55;
    sub_1A46DF9A4((uint64_t)v52, (uint64_t)v50);
    uint64_t v51 = *((void *)&v53 + 1);
    id v24 = v23;
    if (swift_dynamicCast())
    {
      int64_t v48 = v15;
      uint64_t v25 = v6;
      id v26 = objc_msgSend(v49, sel_itemID);
      uint64_t v27 = sub_1A4942AE0();
      uint64_t v29 = v28;

      sub_1A46DF9A4((uint64_t)v52, (uint64_t)v50);
      uint64_t v51 = *((void *)&v53 + 1);
      id v30 = *((id *)&v53 + 1);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      id v49 = v16;
      unint64_t v33 = sub_1A46DFA60(v27, v29);
      uint64_t v34 = v16[2];
      BOOL v35 = (v32 & 1) == 0;
      uint64_t v36 = v34 + v35;
      if (__OFADD__(v34, v35))
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      char v37 = v32;
      if (v16[3] < v36)
      {
        sub_1A46DFAD8(v36, isUniquelyReferenced_nonNull_native);
        unint64_t v38 = sub_1A46DFA60(v27, v29);
        if ((v37 & 1) != (v39 & 1)) {
          goto LABEL_42;
        }
        unint64_t v33 = v38;
        if ((v37 & 1) == 0) {
          goto LABEL_33;
        }
LABEL_4:
        uint64_t v17 = v16[7];

        *(void *)(v17 + 8 * v33) = v30;
LABEL_5:
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1A46E0080((uint64_t)v50);
        uint64_t v6 = v25;
        uint64_t v11 = v45;
        int64_t v15 = v48;
        goto LABEL_6;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v32) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_1A46DFECC();
        if (v37) {
          goto LABEL_4;
        }
      }
LABEL_33:
      v16[(v33 >> 6) + 8] |= 1 << v33;
      long long v40 = (uint64_t *)(v16[6] + 16 * v33);
      *long long v40 = v27;
      v40[1] = v29;
      *(void *)(v16[7] + 8 * v33) = v30;
      uint64_t v41 = v16[2];
      BOOL v42 = __OFADD__(v41, 1);
      uint64_t v43 = v41 + 1;
      if (v42) {
        goto LABEL_40;
      }
      void v16[2] = v43;
      swift_bridgeObjectRetain();
      goto LABEL_5;
    }
LABEL_6:
    sub_1A46DFA00((uint64_t)v52);
  }
  int64_t v22 = v20 + 4;
  if (v22 >= v47) {
    goto LABEL_37;
  }
  unint64_t v21 = *(void *)(v46 + 8 * v22);
  if (v21)
  {
    int64_t v15 = v22;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v15 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v15 >= v47) {
      goto LABEL_37;
    }
    unint64_t v21 = *(void *)(v46 + 8 * v15);
    ++v22;
    if (v21) {
      goto LABEL_24;
    }
  }
LABEL_41:
  __break(1u);
LABEL_42:
  uint64_t result = sub_1A49430A0();
  __break(1u);
  return result;
}

unint64_t sub_1A46DF964()
{
  unint64_t result = qword_1EB5CF7F8;
  if (!qword_1EB5CF7F8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB5CF7F8);
  }
  return result;
}

uint64_t sub_1A46DF9A4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1A46DFA00(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF800);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1A46DFA60(uint64_t a1, uint64_t a2)
{
  sub_1A4943120();
  sub_1A4942AF0();
  uint64_t v4 = sub_1A4943140();
  return sub_1A46DFDE8(a1, a2, v4);
}

uint64_t sub_1A46DFAD8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF808);
  char v38 = a2;
  uint64_t v6 = sub_1A4942F90();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  BOOL v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    char v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    sub_1A4943120();
    sub_1A4942AF0();
    uint64_t result = sub_1A4943140();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  int64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

unint64_t sub_1A46DFDE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1A4943080() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        int64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1A4943080() & 1) == 0);
    }
  }
  return v6;
}

id sub_1A46DFECC()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF808);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1A4942F80();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    unint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1A46E0080(uint64_t a1)
{
  return a1;
}

uint64_t lazily<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a3;
  v8[3] = a1;
  v8[4] = a2;
  swift_retain();
  return AsyncLazy.init(_:)((uint64_t)&unk_1E9651A78, (uint64_t)v8, a3, a4);
}

uint64_t sub_1A46E0168(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1A46E0244;
  return v6(a1);
}

uint64_t sub_1A46E0244()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1A46E033C()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1A46E0374(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 24);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1A46E2898;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1E9651A70 + dword_1E9651A70);
  return v6(a1, v4);
}

uint64_t AsyncLazy.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = sub_1A4942DB0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v11 = (char *)v15 - v10;
  v15[1] = 0;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EB5CFB00);
  sub_1A4942C30();
  sub_1A4942DB0();
  uint64_t v12 = sub_1A46E1E20();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v11, 1, 1, a3);
  uint64_t v13 = sub_1A46E1E20();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *a4 = a1;
  a4[1] = a2;
  a4[2] = v12;
  a4[3] = v13;
  return result;
}

uint64_t sub_1A46E05AC()
{
  return 1;
}

uint64_t sub_1A46E05B4()
{
  return sub_1A4943140();
}

uint64_t sub_1A46E05F8()
{
  return sub_1A4943130();
}

uint64_t sub_1A46E0620()
{
  return sub_1A4943140();
}

uint64_t AsyncLazy.value.getter(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = a2;
  long long v4 = v2[1];
  *(_OWORD *)(v3 + 40) = *v2;
  *(_OWORD *)(v3 + 56) = v4;
  return MEMORY[0x1F4188298](sub_1A46E068C, 0, 0);
}

uint64_t sub_1A46E068C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = *(void *)(v1 + 16);
  long long v4 = *(_OWORD *)(v0 + 40);
  long long v13 = *(_OWORD *)(v0 + 56);
  *(void *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 24) = v4;
  *(_OWORD *)(v2 + 40) = v13;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EB5CFB00);
  uint64_t v6 = MEMORY[0x1E4FBC0F0];
  sub_1A4942C30();
  sub_1A4942DB0();
  uint64_t v7 = (uint64_t *)(v13 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v13 + 16));
  uint64_t v8 = (os_unfair_lock_s *)(v13 + ((*(unsigned int *)(*(void *)v13 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v8);
  sub_1A46E1E9C(v7, (uint64_t *)(v0 + 16));
  os_unfair_lock_unlock(v8);
  swift_task_dealloc();
  uint64_t v9 = *(void *)(v0 + 16);
  *(void *)(v0 + 72) = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v10;
  void *v10 = v0;
  v10[1] = sub_1A46E0838;
  uint64_t v11 = *(void *)(v0 + 24);
  return MEMORY[0x1F4187D90](v11, v9, v3, v5, v6);
}

uint64_t sub_1A46E0838()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1A46E09B0;
  }
  else {
    uint64_t v2 = sub_1A46E094C;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1A46E094C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1A46E09B0()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1A46E0A14@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5CF768);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1)
  {
    uint64_t v17 = *a1;
  }
  else
  {
    uint64_t v18 = sub_1A4942C10();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v16, 1, 1, v18);
    uint64_t v19 = (void *)swift_allocObject();
    v19[2] = 0;
    v19[3] = 0;
    v19[4] = a6;
    v19[5] = a2;
    v19[6] = a3;
    v19[7] = a4;
    v19[8] = a5;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v17 = sub_1A46E1484((uint64_t)v16, (uint64_t)&unk_1E9651AA8, (uint64_t)v19);
    *a1 = v17;
    swift_retain();
  }
  *a7 = v17;
  return swift_retain();
}

uint64_t sub_1A46E0B80(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 16) = a7;
  uint64_t v10 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v8;
  *uint64_t v8 = v7;
  v8[1] = sub_1A46E0C50;
  return v10();
}

uint64_t sub_1A46E0C50()
{
  *(void *)(*(void *)v1 + 32) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1A46E0E28;
  }
  else {
    uint64_t v2 = sub_1A46E0D64;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

void sub_1A46E0D64()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = (os_unfair_lock_s *)v0[2];
  swift_task_alloc();
  uint64_t v3 = v2 + 4;
  v2 += 5;
  os_unfair_lock_lock(v2);
  sub_1A46E24E0(v3);
  os_unfair_lock_unlock(v2);
  if (!v1)
  {
    swift_task_dealloc();
    uint64_t v4 = (void (*)(void))v0[1];
    v4();
  }
}

uint64_t sub_1A46E0E28()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A46E0E40(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[3] = a7;
  v8[4] = a8;
  v8[2] = a1;
  uint64_t v12 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v10 = (void *)swift_task_alloc();
  v8[5] = v10;
  void *v10 = v8;
  v10[1] = sub_1A46E0F24;
  return v12(a1);
}

uint64_t sub_1A46E0F24()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return MEMORY[0x1F4188298](sub_1A46E1058, 0, 0);
  }
}

uint64_t sub_1A46E1058()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v3;
  sub_1A4942DB0();
  uint64_t v5 = (char *)(v2 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v2 + 16));
  uint64_t v6 = (os_unfair_lock_s *)(v2 + ((*(unsigned int *)(*(void *)v2 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  sub_1A46E277C(v5);
  os_unfair_lock_unlock(v6);
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1A46E115C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1A4942DB0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v9 = (char *)&v14 - v8;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)&v14 - v8, a1, v6);
  uint64_t v10 = *(void *)(a3 - 8);
  int v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, a3);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  uint64_t result = v12(v9, v6);
  if (v11 == 1)
  {
    v12(a1, v6);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(a1, a2, a3);
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, a3);
  }
  return result;
}

uint64_t sub_1A46E1304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1A4942C10();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_1A4942C00();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_1A46E2480(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1A4942BF0();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_1A46E1484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1A4942C10();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_1A4942C00();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_1A46E2480(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1A4942BF0();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

void AsyncLazy.valueIfLoaded.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 24);
  sub_1A4942DB0();
  uint64_t v4 = v3 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_1A46E1ED0(v4, a1);
  os_unfair_lock_unlock(v5);
}

uint64_t AsyncLazy.loadedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = sub_1A4942DB0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v14[-v7];
  uint64_t v9 = *(void *)(v2 + 24);
  uint64_t v15 = v4;
  uint64_t v10 = v9 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v9 + 16);
  int v11 = (os_unfair_lock_s *)(v9 + ((*(unsigned int *)(*(void *)v9 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v11);
  sub_1A46E1ED0(v10, (uint64_t)v8);
  os_unfair_lock_unlock(v11);
  uint64_t v12 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v4) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v12 + 32))(a2, v8, v4);
  }
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  type metadata accessor for AsyncLazy.Errors();
  swift_getWitnessTable();
  swift_allocError();
  return swift_willThrow();
}

uint64_t AsyncLazy<>.callAsFunction()()
{
  uint64_t v2 = v0[1];
  v1[2] = *v0;
  v1[3] = v2;
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  v1[4] = v3;
  v1[5] = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return MEMORY[0x1F4188298](sub_1A46E1964, 0, 0);
}

uint64_t sub_1A46E1964()
{
  uint64_t v12 = v0;
  uint64_t v1 = swift_task_alloc();
  long long v2 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 32) = v2;
  uint64_t v3 = (uint64_t *)(v2 + 16);
  uint64_t v4 = (os_unfair_lock_s *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 24));
  sub_1A46E1F74(v3, &v11);
  os_unfair_lock_unlock(v4);
  uint64_t v5 = v11;
  *(void *)(v0 + 48) = v11;
  swift_task_dealloc();
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CFB00);
  *uint64_t v6 = v0;
  v6[1] = sub_1A46E1A9C;
  uint64_t v8 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v9 = MEMORY[0x1E4FBC0F0];
  return MEMORY[0x1F4187D90](v7, v5, v8, v7, v9);
}

uint64_t sub_1A46E1A9C()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    long long v2 = sub_1A46E1C38;
  }
  else {
    long long v2 = sub_1A46E1BB0;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1A46E1BB0()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1A46E1C38()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1A46E1CC0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5CF768);
  MEMORY[0x1F4188790]();
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1)
  {
    uint64_t v14 = *a1;
  }
  else
  {
    uint64_t v15 = sub_1A4942C10();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v13, 1, 1, v15);
    uint64_t v16 = (void *)swift_allocObject();
    void v16[2] = 0;
    v16[3] = 0;
    void v16[4] = a2;
    v16[5] = a3;
    v16[6] = a4;
    v16[7] = a5;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v14 = sub_1A46E1304((uint64_t)v13, (uint64_t)&unk_1E9651A98, (uint64_t)v16);
    *a1 = v14;
    swift_retain();
  }
  *a6 = v14;
  return swift_retain();
}

uint64_t sub_1A46E1E20()
{
  return sub_1A4942E30();
}

uint64_t sub_1A46E1E9C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1A46E0A14(a1, v2[3], v2[4], v2[5], v2[6], v2[2], a2);
}

uint64_t sub_1A46E1ED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1A46E1EE8(a1, a2);
}

uint64_t sub_1A46E1EE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1A4942DB0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t type metadata accessor for AsyncLazy.Errors()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1A46E1F74@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1A46E1CC0(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_1A46E1F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

uint64_t initializeBufferWithCopyOfBuffer for NotificationHistoryItem(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_1A46E1FD0()
{
  swift_release();
  swift_release();
  return swift_release();
}

void *sub_1A46E2014(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_1A46E2064(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_1A46E20DC(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t sub_1A46E212C(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1A46E2174(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for AsyncLazy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1A46E21CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 8);
}

uint64_t getEnumTagSinglePayload for PingBasedOnlineNetworkTransitionOperation.Errors(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *sub_1A46E222C(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        __CFString *result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      __CFString *result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1A46E22C8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1A46E22F0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1A46E230C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t sub_1A46E235C()
{
  int v2 = *(int **)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 56);
  unsigned int v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *unsigned int v4 = v1;
  v4[1] = sub_1A46E2898;
  v4[2] = v3;
  uint64_t v7 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v5 = (void *)swift_task_alloc();
  v4[3] = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_1A46E0C50;
  return v7();
}

uint64_t sub_1A46E2480(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5CF768);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *sub_1A46E24E0(unsigned char *result)
{
  if (*result == 1) {
    __CFString *result = 0;
  }
  return result;
}

uint64_t sub_1A46E24F4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t sub_1A46E2544(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v6 = v1[4];
  uint64_t v5 = (int *)v1[5];
  uint64_t v7 = v1[8];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[3] = v7;
  v8[4] = v6;
  v8[1] = sub_1A46E2688;
  v8[2] = a1;
  uint64_t v11 = (uint64_t (*)(uint64_t))((char *)v5 + *v5);
  uint64_t v9 = (void *)swift_task_alloc();
  v8[5] = v9;
  *uint64_t v9 = v8;
  v9[1] = sub_1A46E0F24;
  return v11(a1);
}

uint64_t sub_1A46E2688()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1A46E277C(char *a1)
{
  return sub_1A46E115C(a1, *(void *)(v1 + 24), *(void *)(v1 + 16));
}

void type metadata accessor for os_unfair_lock_s()
{
  if (!qword_1EB5CF7E8)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EB5CF7E8);
    }
  }
}

uint64_t sub_1A46E2800@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *a1;
  *(_DWORD *)((char *)a1 + ((*(unsigned int *)(v4 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v4 + *MEMORY[0x1E4FBBAB0]) - 8) + 16))(a2, v3);
}

uint64_t sub_1A46E289C()
{
  sub_1A4942200();
  swift_allocObject();
  uint64_t result = sub_1A49421E0();
  qword_1EB5D0618 = result;
  return result;
}

uint64_t *sub_1A46E28F4()
{
  if (qword_1EB5D0620 != -1) {
    swift_once();
  }
  return &qword_1EB5D0618;
}

uint64_t static AppGroup.newsCore.getter()
{
  if (qword_1EB5D0620 != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t sub_1A46E299C(uint64_t a1)
{
  return sub_1A46E29C4(a1, qword_1EB5D1CB0);
}

uint64_t sub_1A46E29C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1A49422C0();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_1A49422B0();
}

uint64_t sub_1A46E2A44()
{
  return sub_1A46E2A68(qword_1EB5D07D0, (uint64_t)qword_1EB5D1CB0);
}

uint64_t sub_1A46E2A68(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = sub_1A49422C0();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t sub_1A46E2ABC()
{
  uint64_t result = sub_1A4942AE0();
  qword_1E9659838 = result;
  unk_1E9659840 = v1;
  return result;
}

uint64_t sub_1A46E2AEC()
{
  uint64_t result = sub_1A4942AE0();
  qword_1E9659848 = result;
  unk_1E9659850 = v1;
  return result;
}

uint64_t sub_1A46E2B1C(uint64_t a1, uint64_t a2)
{
  return sub_1A46E2B6C(a1, a2, &qword_1E9657750, &qword_1E9659838);
}

uint64_t sub_1A46E2B44(uint64_t a1, uint64_t a2)
{
  return sub_1A46E2B6C(a1, a2, qword_1E9657758, &qword_1E9659848);
}

uint64_t sub_1A46E2B6C(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

ValueMetadata *type metadata accessor for NotificationHistoryZone()
{
  return &type metadata for NotificationHistoryZone;
}

uint64_t sub_1A46E2BD4(int a1, int a2, id a3)
{
  id v3 = objc_msgSend(a3, sel_recordName);
  uint64_t v4 = sub_1A4942AE0();

  return v4;
}

uint64_t sub_1A46E2C2C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_bridgeObjectRetain();
  sub_1A4702174(a1, a2, a3, a4, a5, a7);
  sub_1A46E2CD0(a3, a4);
  swift_bridgeObjectRelease();
  if (v7) {
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_1A46E2CD0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1A46E2D28(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1A46E30F4(a1, a2, a3, a4, a5, a6);
  if (!v7) {
    uint64_t v6 = v10;
  }
  sub_1A46E2CD0(a2, a3);
  return v6;
}

uint64_t sub_1A46E2DA0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1A46E3134(0, &qword_1E9651AB0);
  sub_1A4701F10(a5, a7);
  uint64_t v13 = (void *)sub_1A4942CA0();
  sub_1A46E30F4(v13, a3, a4, a5, a6, a7);
  if (!v16) {
    a1 = v14;
  }
  sub_1A46E2CD0(a3, a4);
  return a1;
}

void sub_1A46E2EA4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  swift_bridgeObjectRetain();
  sub_1A4942AF0();
  swift_bridgeObjectRelease();
  id v5 = a4;
  sub_1A4942D70();
}

uint64_t sub_1A46E2F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((a1 != a4 || a2 != a5) && (sub_1A4943080() & 1) == 0) {
    return 0;
  }
  sub_1A46E3134(0, &qword_1E9651AB8);
  return sub_1A4942D60() & 1;
}

uint64_t sub_1A46E2FAC(uint64_t a1, uint64_t a2, void *a3)
{
  sub_1A4943120();
  sub_1A46E2EA4((uint64_t)v7, a1, a2, a3);
  return sub_1A4943140();
}

uint64_t sub_1A46E300C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = nullsub_1(*v2, v2[1], v2[2], a1[2], a1[3], a1[4], a1[5]);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A46E305C()
{
  return sub_1A46E2FAC(*(void *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16));
}

void sub_1A46E3068(uint64_t a1)
{
  sub_1A46E2EA4(a1, *(void *)v1, *(void *)(v1 + 8), *(void **)(v1 + 16));
}

uint64_t sub_1A46E3074()
{
  sub_1A4943120();
  sub_1A46E2EA4((uint64_t)v2, *(void *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16));
  return sub_1A4943140();
}

uint64_t sub_1A46E30B8(uint64_t *a1, uint64_t *a2)
{
  return sub_1A46E2F2C(*a1, a1[1], a1[2], *a2, a2[1]) & 1;
}

void sub_1A46E30F4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1A4701FA4(a1, a2, a3, a4, a6);
  if (v6) {
}
  }

uint64_t sub_1A46E3134(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1A46E3170()
{
  return MEMORY[0x1E4FBB1B0];
}

uint64_t sub_1A46E317C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1A46E3198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 40);
}

void sub_1A46E31A4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 16);
}

void *sub_1A46E31E0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

void *sub_1A46E321C(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[2];
  id v5 = (void *)a1[2];
  a1[2] = v4;
  id v6 = v4;

  return a1;
}

uint64_t sub_1A46E3280(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t sub_1A46E32C8(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1A46E3310(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t _s14descr1EF8234B1V2IDVMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1A46E3368()
{
  uint64_t result = sub_1A4942AE0();
  qword_1EB5D1C60 = result;
  *(void *)algn_1EB5D1C68 = v1;
  return result;
}

uint64_t *sub_1A46E3398()
{
  if (qword_1EB5D03D0 != -1) {
    swift_once();
  }
  return &qword_1EB5D1C60;
}

uint64_t sub_1A46E33E4()
{
  uint64_t result = sub_1A4942AE0();
  qword_1EB5D1C80 = result;
  *(void *)algn_1EB5D1C88 = v1;
  return result;
}

uint64_t sub_1A46E3414()
{
  uint64_t result = sub_1A4942AE0();
  qword_1EB5D1CA0 = result;
  *(void *)algn_1EB5D1CA8 = v1;
  return result;
}

uint64_t sub_1A46E3444()
{
  uint64_t result = sub_1A4942AE0();
  qword_1EB5D1C90 = result;
  *(void *)algn_1EB5D1C98 = v1;
  return result;
}

uint64_t sub_1A46E3474()
{
  uint64_t result = sub_1A4942AE0();
  qword_1EB5D1C70 = result;
  *(void *)algn_1EB5D1C78 = v1;
  return result;
}

uint64_t sub_1A46E34A4()
{
  uint64_t result = sub_1A4942AE0();
  qword_1EB5D1C50 = result;
  *(void *)algn_1EB5D1C58 = v1;
  return result;
}

uint64_t *sub_1A46E34D4()
{
  if (qword_1EB5D03C8 != -1) {
    swift_once();
  }
  return &qword_1EB5D1C50;
}

uint64_t NotificationHistoryItem.notificationID.getter()
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1A4942370();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1A4942510();
  uint64_t result = swift_release();
  if (v2) {
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t NotificationHistoryItem.id.getter()
{
  return sub_1A4942370();
}

uint64_t sub_1A46E3658@<X0>(uint64_t *a1@<X8>)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v1 = sub_1A4942370();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v1;
  return result;
}

uint64_t sub_1A46E3754()
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1A4942380();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t NotificationHistoryItem.$id.getter()
{
  return sub_1A4942390();
}

uint64_t NotificationHistoryItem.canonicalID.getter()
{
  swift_retain();
  sub_1A4942510();
  uint64_t result = swift_release();
  if (v2) {
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t NotificationHistoryItem.articleID.getter()
{
  swift_retain();
  sub_1A4942510();
  uint64_t result = swift_release();
  if (v2) {
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t NotificationHistoryItem.clusterID.getter()
{
  swift_retain();
  sub_1A4942510();
  uint64_t result = swift_release();
  if (v2) {
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t NotificationHistoryItem.channelID.getter()
{
  swift_retain();
  sub_1A4942510();
  uint64_t result = swift_release();
  if (v2) {
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t NotificationHistoryItem.source.getter()
{
  swift_retain();
  sub_1A4942510();
  swift_release();
  if (v2) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = v1;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (result > 0x7FFFFFFF) {
LABEL_8:
  }
    __break(1u);
  return result;
}

uint64_t NotificationHistoryItem.notifiedAt.getter@<X0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF570);
  MEMORY[0x1F4188790]();
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  sub_1A4942510();
  swift_release();
  uint64_t v4 = sub_1A49421A0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v3, v4);
  }
  __break(1u);
  return result;
}

unint64_t sub_1A46E3B50()
{
  unint64_t result = qword_1EB5CF588;
  if (!qword_1EB5CF588)
  {
    sub_1A49421A0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CF588);
  }
  return result;
}

uint64_t NotificationHistoryItem.modifiedAt.getter()
{
  return sub_1A4942370();
}

uint64_t sub_1A46E3BCC@<X0>(uint64_t *a1@<X8>)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v1 = sub_1A4942370();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v1;
  return result;
}

uint64_t sub_1A46E3CC8()
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1A4942380();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t NotificationHistoryItem.$modifiedAt.getter()
{
  return sub_1A4942390();
}

uint64_t NotificationHistoryItem.originatedLocally.getter()
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1A4942370();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1A4942510();
  uint64_t result = swift_release();
  if (v1 != 2) {
    return v1 & 1;
  }
  __break(1u);
  return result;
}

uint64_t NotificationHistoryItem._originatedLocally.getter()
{
  return sub_1A4942370();
}

uint64_t sub_1A46E3F2C@<X0>(uint64_t *a1@<X8>)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v1 = sub_1A4942370();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v1;
  return result;
}

uint64_t sub_1A46E4028()
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1A4942380();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t NotificationHistoryItem.$_originatedLocally.getter()
{
  return sub_1A4942390();
}

uint64_t NotificationHistoryItem.init(notificationID:canonicalID:articleID:clusterID:channelID:source:notifiedAt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, unsigned int a12, uint64_t a13)
{
  uint64_t v116 = a7;
  uint64_t v117 = a8;
  uint64_t v114 = a5;
  uint64_t v115 = a6;
  uint64_t v112 = a3;
  uint64_t v113 = a4;
  uint64_t v110 = a1;
  uint64_t v111 = a2;
  v119 = a9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF570);
  ((void (*)(void))MEMORY[0x1F4188790])();
  v118 = (char *)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF630);
  uint64_t v14 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  v121 = (char *)&v101 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v108 = (char *)&v101 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF600);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  v120 = (char *)&v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v101 - v20;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF640);
  uint64_t v23 = MEMORY[0x1F4188790](v22 - 8);
  v122 = (char *)&v101 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  os_log_t v106 = (char *)&v101 - v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF610);
  uint64_t v27 = MEMORY[0x1F4188790](v26 - 8);
  uint64_t v29 = (char *)&v101 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v31 = (char *)&v101 - v30;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF608);
  id v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56);
  v33(v31, 1, 1, v32);
  v33(v29, 1, 1, v32);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF660);
  swift_allocObject();
  sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5B0);
  swift_allocObject();
  uint64_t v34 = sub_1A4942360();
  v33(v31, 1, 1, v32);
  v33(v29, 1, 1, v32);
  swift_allocObject();
  uint64_t v126 = v34;
  swift_retain();
  uint64_t v35 = sub_1A4942500();
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF720);
  if (qword_1EB5D03D0 != -1) {
    swift_once();
  }
  uint64_t v107 = v21;
  uint64_t v37 = qword_1EB5D1C60;
  uint64_t v38 = *(void *)algn_1EB5D1C68;
  swift_bridgeObjectRetain();
  char v39 = sub_1A46E05AC();
  uint64_t v40 = CKColumn.__allocating_init(wrappedValue:name:encrypted:)(v35, v37, v38, v39 & 1);
  v33(v31, 1, 1, v32);
  v33(v29, 1, 1, v32);
  swift_allocObject();
  uint64_t v125 = v40;
  swift_retain();
  uint64_t v41 = sub_1A4942500();
  uint64_t v42 = v36;
  uint64_t v43 = v29;
  if (qword_1EB5D03E8 != -1) {
    swift_once();
  }
  uint64_t v44 = qword_1EB5D1C80;
  uint64_t v45 = *(void *)algn_1EB5D1C88;
  swift_bridgeObjectRetain();
  char v46 = sub_1A46E05AC();
  uint64_t v47 = CKColumn.__allocating_init(wrappedValue:name:encrypted:)(v41, v44, v45, v46 & 1);
  uint64_t v127 = v42;
  uint64_t v48 = v47;
  v33(v31, 1, 1, v32);
  v33(v43, 1, 1, v32);
  swift_allocObject();
  uint64_t v124 = v48;
  swift_retain();
  uint64_t v49 = sub_1A4942500();
  uint64_t v50 = v43;
  if (qword_1EB5D0400 != -1) {
    swift_once();
  }
  uint64_t v51 = qword_1EB5D1CA0;
  uint64_t v52 = *(void *)algn_1EB5D1CA8;
  swift_bridgeObjectRetain();
  char v53 = sub_1A46E05AC();
  uint64_t v54 = CKColumn.__allocating_init(wrappedValue:name:encrypted:)(v49, v51, v52, v53 & 1);
  v33(v31, 1, 1, v32);
  v33(v50, 1, 1, v32);
  swift_allocObject();
  uint64_t v109 = v54;
  swift_retain();
  uint64_t v55 = sub_1A4942500();
  os_log_t v56 = v107;
  if (qword_1EB5D03F8 != -1) {
    swift_once();
  }
  uint64_t v123 = a13;
  uint64_t v57 = qword_1EB5D1C90;
  uint64_t v58 = *(void *)algn_1EB5D1C98;
  swift_bridgeObjectRetain();
  char v59 = sub_1A46E05AC();
  uint64_t v60 = CKColumn.__allocating_init(wrappedValue:name:encrypted:)(v55, v57, v58, v59 & 1);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF638);
  os_log_t v62 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56);
  v62(v106, 1, 1, v61);
  v62(v122, 1, 1, v61);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF678);
  swift_allocObject();
  uint64_t v127 = v60;
  swift_retain();
  uint64_t v63 = sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5CF728);
  if (qword_1EB5D03E0 != -1) {
    swift_once();
  }
  uint64_t v105 = a12;
  uint64_t v104 = a11;
  uint64_t v103 = a10;
  uint64_t v64 = qword_1EB5D1C70;
  uint64_t v65 = *(void *)algn_1EB5D1C78;
  swift_bridgeObjectRetain();
  char v66 = sub_1A46E05AC();
  uint64_t v67 = CKColumn.__allocating_init(wrappedValue:name:encrypted:)(v63, v64, v65, v66 & 1);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5F8);
  v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56);
  v69(v56, 1, 1, v68);
  os_log_t v70 = v120;
  v69(v120, 1, 1, v68);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF650);
  swift_allocObject();
  os_log_t v106 = (char *)v67;
  swift_retain();
  uint64_t v102 = sub_1A4942500();
  uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF718);
  v71 = v56;
  if (qword_1EB5D03C8 != -1) {
    swift_once();
  }
  uint64_t v72 = qword_1EB5D1C50;
  uint64_t v73 = *(void *)algn_1EB5D1C58;
  v122 = (char *)sub_1A49421A0();
  sub_1A46E3B50();
  swift_bridgeObjectRetain();
  char v74 = sub_1A46E05AC();
  uint64_t v75 = CKColumn.__allocating_init(wrappedValue:name:encrypted:)(v102, v72, v73, v74 & 1);
  v69(v71, 1, 1, v68);
  v69(v70, 1, 1, v68);
  swift_allocObject();
  swift_retain();
  sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5A0);
  swift_allocObject();
  uint64_t v76 = sub_1A4942360();
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF628);
  os_log_t v78 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56);
  v78(v108, 1, 1, v77);
  v78(v121, 1, 1, v77);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF668);
  swift_allocObject();
  swift_retain();
  sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5B8);
  swift_allocObject();
  uint64_t v79 = sub_1A4942360();
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v80 = v109;
  swift_retain();
  swift_retain();
  v81 = v106;
  swift_retain();
  swift_retain();
  v120 = (char *)v76;
  swift_retain();
  sub_1A4942370();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v128 = v110;
  uint64_t v129 = v111;
  sub_1A4942520();
  swift_release();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v102 = v75;
  swift_retain();
  swift_retain();
  v121 = (char *)v79;
  swift_retain();
  sub_1A4942370();
  swift_release();
  swift_release();
  swift_release();
  os_log_t v82 = v81;
  swift_release();
  swift_release();
  uint64_t v83 = v80;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  os_log_t v84 = v118;
  sub_1A4942190();
  uint64_t v85 = *((void *)v122 - 1);
  uint64_t v111 = v85;
  os_log_t v86 = *(void (**)(char *, void, uint64_t))(v85 + 56);
  v87 = v122;
  v86(v84, 0, 1);
  sub_1A4942520();
  swift_release();
  uint64_t v128 = v112;
  uint64_t v129 = v113;
  swift_retain();
  sub_1A4942520();
  swift_release();
  uint64_t v128 = v114;
  uint64_t v129 = v115;
  swift_retain();
  sub_1A4942520();
  swift_release();
  uint64_t v128 = v116;
  uint64_t v129 = v117;
  swift_retain();
  sub_1A4942520();
  swift_release();
  uint64_t v128 = v103;
  uint64_t v129 = v104;
  swift_retain();
  sub_1A4942520();
  swift_release();
  uint64_t v128 = (int)v105;
  LOBYTE(v129) = 0;
  swift_retain();
  sub_1A4942520();
  swift_release();
  uint64_t v88 = v102;
  (*(void (**)(char *, uint64_t, char *))(v85 + 16))(v84, v123, v87);
  ((void (*)(char *, void, uint64_t, char *))v86)(v84, 0, 1, v87);
  swift_retain();
  sub_1A4942520();
  swift_release();
  uint64_t v89 = v126;
  swift_retain();
  uint64_t v90 = v125;
  swift_retain();
  uint64_t v91 = v124;
  swift_retain();
  swift_retain();
  uint64_t v92 = v127;
  swift_retain();
  v93 = v82;
  swift_retain();
  uint64_t v94 = v88;
  swift_retain();
  v95 = v120;
  swift_retain();
  swift_retain();
  sub_1A4942370();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v96 = v91;
  swift_release();
  uint64_t v97 = v90;
  swift_release();
  swift_release();
  LOBYTE(v128) = 1;
  sub_1A4942520();
  swift_release();
  (*(void (**)(uint64_t, char *))(v111 + 8))(v123, v122);
  os_log_t v98 = v121;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  os_log_t v100 = v119;
  uint64_t *v119 = v89;
  v100[1] = v97;
  v100[2] = v96;
  v100[3] = v83;
  v100[4] = v92;
  v100[5] = (uint64_t)v93;
  v100[6] = v94;
  v100[7] = (uint64_t)v95;
  v100[8] = (uint64_t)v98;
  return result;
}

id NotificationHistoryItem.init(_:notifiedAt:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_1A49421A0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = objc_msgSend(a1, sel_identifier);
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v11 = result;
  uint64_t v12 = sub_1A4942AE0();
  uint64_t v14 = v13;

  id result = objc_msgSend(a1, sel_canonicalID);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v15 = result;
  uint64_t v41 = v14;
  uint64_t v42 = v12;
  uint64_t v43 = v6;
  uint64_t v16 = a2;
  uint64_t v17 = sub_1A4942AE0();
  uint64_t v39 = v18;
  uint64_t v40 = v17;

  id v19 = objc_msgSend(a1, sel_articleID);
  uint64_t v20 = sub_1A4942AE0();
  uint64_t v37 = v21;
  uint64_t v38 = v20;

  id result = objc_msgSend(a1, sel_clusterID);
  if (result)
  {
    uint64_t v22 = result;
    uint64_t v23 = sub_1A4942AE0();
    uint64_t v36 = v24;

    id v25 = objc_msgSend(a1, sel_channelID);
    uint64_t v26 = sub_1A4942AE0();
    uint64_t v28 = v27;

    LODWORD(v25) = objc_msgSend(a1, sel_source);
    uint64_t v29 = v7;
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v31 = v43;
    v30(v9, v16, v43);
    NotificationHistoryItem.init(notificationID:canonicalID:articleID:clusterID:channelID:source:notifiedAt:)(v42, v41, v40, v39, v38, v37, v23, v36, (uint64_t *)v44, v26, v28, v25, (uint64_t)v9);

    id result = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v16, v31);
    uint64_t v32 = v45;
    long long v33 = v44[1];
    long long v34 = v44[2];
    long long v35 = v44[3];
    *(_OWORD *)a3 = v44[0];
    *(_OWORD *)(a3 + 16) = v33;
    *(_OWORD *)(a3 + 32) = v34;
    *(_OWORD *)(a3 + 48) = v35;
    *(void *)(a3 + 64) = v32;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static NotificationHistoryItem.version.getter()
{
  return 0x332E302E31;
}

uint64_t NotificationHistoryItem.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v83 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF630);
  uint64_t v2 = MEMORY[0x1F4188790](v1 - 8);
  os_log_t v82 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  v81 = (char *)&v72 - v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF600);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  os_log_t v84 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v77 = (char *)&v72 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF640);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v79 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  char v74 = (char *)&v72 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF610);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v72 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF608);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
  v20(v18, 1, 1, v19);
  v20(v16, 1, 1, v19);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF660);
  swift_allocObject();
  sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5B0);
  swift_allocObject();
  uint64_t v21 = sub_1A4942360();
  v20(v18, 1, 1, v19);
  v20(v16, 1, 1, v19);
  swift_allocObject();
  uint64_t v80 = v21;
  swift_retain();
  uint64_t v22 = sub_1A4942500();
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF720);
  if (qword_1EB5D03D0 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_1EB5D1C60;
  uint64_t v25 = *(void *)algn_1EB5D1C68;
  swift_bridgeObjectRetain();
  char v26 = sub_1A46E05AC();
  uint64_t v27 = CKColumn.__allocating_init(wrappedValue:name:encrypted:)(v22, v24, v25, v26 & 1);
  uint64_t v73 = v23;
  uint64_t v28 = v27;
  v20(v18, 1, 1, v19);
  v20(v16, 1, 1, v19);
  swift_allocObject();
  uint64_t v78 = v28;
  swift_retain();
  uint64_t v29 = sub_1A4942500();
  if (qword_1EB5D03E8 != -1) {
    swift_once();
  }
  uint64_t v30 = qword_1EB5D1C80;
  uint64_t v31 = *(void *)algn_1EB5D1C88;
  swift_bridgeObjectRetain();
  char v32 = sub_1A46E05AC();
  uint64_t v33 = CKColumn.__allocating_init(wrappedValue:name:encrypted:)(v29, v30, v31, v32 & 1);
  v20(v18, 1, 1, v19);
  v20(v16, 1, 1, v19);
  swift_allocObject();
  uint64_t v76 = v33;
  swift_retain();
  uint64_t v34 = sub_1A4942500();
  if (qword_1EB5D0400 != -1) {
    swift_once();
  }
  uint64_t v36 = qword_1EB5D1CA0;
  uint64_t v35 = *(void *)algn_1EB5D1CA8;
  swift_bridgeObjectRetain();
  char v37 = sub_1A46E05AC();
  uint64_t v38 = CKColumn.__allocating_init(wrappedValue:name:encrypted:)(v34, v36, v35, v37 & 1);
  v20(v18, 1, 1, v19);
  v20(v16, 1, 1, v19);
  swift_allocObject();
  uint64_t v75 = v38;
  swift_retain();
  uint64_t v39 = sub_1A4942500();
  if (qword_1EB5D03F8 != -1) {
    swift_once();
  }
  uint64_t v40 = qword_1EB5D1C90;
  uint64_t v41 = *(void *)algn_1EB5D1C98;
  swift_bridgeObjectRetain();
  char v42 = sub_1A46E05AC();
  uint64_t v43 = CKColumn.__allocating_init(wrappedValue:name:encrypted:)(v39, v40, v41, v42 & 1);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF638);
  uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56);
  v45(v74, 1, 1, v44);
  v45(v79, 1, 1, v44);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF678);
  swift_allocObject();
  uint64_t v73 = v43;
  swift_retain();
  uint64_t v46 = sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5CF728);
  uint64_t v47 = v84;
  uint64_t v48 = v77;
  if (qword_1EB5D03E0 != -1) {
    swift_once();
  }
  uint64_t v49 = qword_1EB5D1C70;
  uint64_t v50 = *(void *)algn_1EB5D1C78;
  swift_bridgeObjectRetain();
  char v51 = sub_1A46E05AC();
  uint64_t v52 = CKColumn.__allocating_init(wrappedValue:name:encrypted:)(v46, v49, v50, v51 & 1);
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5F8);
  uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56);
  v54(v48, 1, 1, v53);
  v54(v47, 1, 1, v53);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF650);
  swift_allocObject();
  char v74 = (char *)v52;
  swift_retain();
  uint64_t v79 = (char *)sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF718);
  uint64_t v55 = v48;
  if (qword_1EB5D03C8 != -1) {
    swift_once();
  }
  uint64_t v56 = qword_1EB5D1C50;
  uint64_t v57 = *(void *)algn_1EB5D1C58;
  sub_1A49421A0();
  sub_1A46E3B50();
  swift_bridgeObjectRetain();
  char v58 = sub_1A46E05AC();
  uint64_t v59 = CKColumn.__allocating_init(wrappedValue:name:encrypted:)((uint64_t)v79, v56, v57, v58 & 1);
  v54(v55, 1, 1, v53);
  v54(v84, 1, 1, v53);
  swift_allocObject();
  swift_retain();
  sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5A0);
  swift_allocObject();
  uint64_t v60 = sub_1A4942360();
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF628);
  os_log_t v62 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56);
  v62(v81, 1, 1, v61);
  v62(v82, 1, 1, v61);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF668);
  swift_allocObject();
  swift_retain();
  sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5B8);
  swift_allocObject();
  uint64_t v63 = sub_1A4942360();
  uint64_t v64 = v80;
  swift_retain();
  uint64_t v65 = v78;
  swift_retain();
  uint64_t v66 = v76;
  swift_retain();
  uint64_t v67 = v75;
  swift_retain();
  uint64_t v68 = v73;
  swift_retain();
  v69 = v74;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1A4942370();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  char v85 = 0;
  sub_1A4942520();
  uint64_t result = swift_release();
  v71 = v83;
  uint64_t *v83 = v64;
  v71[1] = v65;
  v71[2] = v66;
  v71[3] = v67;
  v71[4] = v68;
  v71[5] = (uint64_t)v69;
  v71[6] = v59;
  v71[7] = v60;
  v71[8] = v63;
  return result;
}

uint64_t NotificationHistoryItem.fastEntity.getter()
{
  return sub_1A49423C0();
}

unint64_t sub_1A46E610C(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x63696E6F6E61635FLL;
      break;
    case 2:
      unint64_t result = 0x656C63697472615FLL;
      break;
    case 3:
      unint64_t result = 0x72657473756C635FLL;
      break;
    case 4:
      unint64_t result = 0x6C656E6E6168635FLL;
      break;
    case 5:
      unint64_t result = 0x656372756F735FLL;
      break;
    case 6:
      unint64_t result = 0x65696669746F6E5FLL;
      break;
    case 7:
      unint64_t result = 0x6465696669646F6DLL;
      break;
    case 8:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_1A46E6234(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1A46E6248()
{
  return sub_1A4943140();
}

uint64_t sub_1A46E6290()
{
  return sub_1A4943130();
}

uint64_t sub_1A46E62BC()
{
  return sub_1A4943140();
}

unint64_t sub_1A46E6300()
{
  return sub_1A46E610C(*v0);
}

uint64_t sub_1A46E6308@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1A46E8908(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A46E6330()
{
  return 0;
}

void sub_1A46E633C(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_1A46E6348(uint64_t a1)
{
  unint64_t v2 = sub_1A46E6848();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1A46E6384(uint64_t a1)
{
  unint64_t v2 = sub_1A46E6848();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t NotificationHistoryItem.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651AC0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v1;
  uint64_t v8 = v1[1];
  uint64_t v24 = v1[2];
  uint64_t v25 = v8;
  uint64_t v10 = v1[3];
  uint64_t v22 = v1[4];
  uint64_t v23 = v10;
  uint64_t v11 = v1[5];
  uint64_t v20 = v1[6];
  uint64_t v21 = v11;
  uint64_t v12 = v1[7];
  uint64_t v18 = v1[8];
  uint64_t v19 = v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A46E6848();
  sub_1A4943190();
  uint64_t v27 = v9;
  uint64_t v13 = v7;
  char v26 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5B0);
  sub_1A46E7B38(&qword_1E9651AC8, &qword_1EB5CF5B0);
  sub_1A4943030();
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v16 = v23;
  uint64_t v15 = v24;
  uint64_t v27 = v25;
  char v26 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF720);
  sub_1A46E7B38(&qword_1E9651AD0, &qword_1EB5CF720);
  sub_1A4943030();
  uint64_t v27 = v15;
  char v26 = 2;
  sub_1A4943030();
  uint64_t v27 = v16;
  char v26 = 3;
  sub_1A4943030();
  uint64_t v27 = v22;
  char v26 = 4;
  sub_1A4943030();
  uint64_t v27 = v21;
  char v26 = 5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5CF728);
  sub_1A46E7B38(&qword_1E9651AD8, (uint64_t *)&unk_1EB5CF728);
  sub_1A4943030();
  uint64_t v27 = v20;
  char v26 = 6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF718);
  sub_1A46E7B38(&qword_1E9651AE0, &qword_1EB5CF718);
  sub_1A4943030();
  uint64_t v27 = v19;
  char v26 = 7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5A0);
  sub_1A46E7B38(&qword_1E9651AE8, &qword_1EB5CF5A0);
  sub_1A4943030();
  uint64_t v27 = v18;
  char v26 = 8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5B8);
  sub_1A46E7B38(&qword_1E9651AF0, &qword_1EB5CF5B8);
  sub_1A4943030();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v13, v4);
}

unint64_t sub_1A46E6848()
{
  unint64_t result = qword_1E9657960[0];
  if (!qword_1E9657960[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9657960);
  }
  return result;
}

uint64_t NotificationHistoryItem.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v94 = a1;
  uint64_t v77 = a2;
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651AF8);
  uint64_t v79 = *(void *)(v81 - 8);
  MEMORY[0x1F4188790](v81);
  uint64_t v92 = (char *)&v76 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF630);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v90 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v89 = (char *)&v76 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF600);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v96 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v88 = (char *)&v76 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF640);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  v95 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  v93 = (char *)&v76 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF610);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v76 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF608);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56);
  v22(v20, 1, 1, v21);
  v22(v18, 1, 1, v21);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF660);
  swift_allocObject();
  sub_1A4942500();
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5B0);
  swift_allocObject();
  uint64_t v86 = sub_1A4942360();
  v22(v20, 1, 1, v21);
  v22(v18, 1, 1, v21);
  swift_allocObject();
  uint64_t v23 = sub_1A4942500();
  uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF720);
  if (qword_1EB5D03D0 != -1) {
    swift_once();
  }
  uint64_t v25 = qword_1EB5D1C60;
  uint64_t v24 = *(void *)algn_1EB5D1C68;
  swift_bridgeObjectRetain();
  char v26 = sub_1A46E05AC();
  uint64_t v87 = CKColumn.__allocating_init(wrappedValue:name:encrypted:)(v23, v25, v24, v26 & 1);
  v22(v20, 1, 1, v21);
  v22(v18, 1, 1, v21);
  swift_allocObject();
  uint64_t v27 = sub_1A4942500();
  if (qword_1EB5D03E8 != -1) {
    swift_once();
  }
  uint64_t v28 = qword_1EB5D1C80;
  uint64_t v29 = *(void *)algn_1EB5D1C88;
  swift_bridgeObjectRetain();
  char v30 = sub_1A46E05AC();
  uint64_t v85 = CKColumn.__allocating_init(wrappedValue:name:encrypted:)(v27, v28, v29, v30 & 1);
  v22(v20, 1, 1, v21);
  v22(v18, 1, 1, v21);
  swift_allocObject();
  uint64_t v31 = sub_1A4942500();
  if (qword_1EB5D0400 != -1) {
    swift_once();
  }
  uint64_t v32 = qword_1EB5D1CA0;
  uint64_t v33 = *(void *)algn_1EB5D1CA8;
  swift_bridgeObjectRetain();
  char v34 = sub_1A46E05AC();
  uint64_t v84 = CKColumn.__allocating_init(wrappedValue:name:encrypted:)(v31, v32, v33, v34 & 1);
  v22(v20, 1, 1, v21);
  v22(v18, 1, 1, v21);
  swift_allocObject();
  uint64_t v35 = sub_1A4942500();
  if (qword_1EB5D03F8 != -1) {
    swift_once();
  }
  uint64_t v36 = qword_1EB5D1C90;
  uint64_t v37 = *(void *)algn_1EB5D1C98;
  swift_bridgeObjectRetain();
  char v38 = sub_1A46E05AC();
  uint64_t v83 = CKColumn.__allocating_init(wrappedValue:name:encrypted:)(v35, v36, v37, v38 & 1);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF638);
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56);
  v40(v93, 1, 1, v39);
  v40(v95, 1, 1, v39);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF678);
  swift_allocObject();
  uint64_t v41 = sub_1A4942500();
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5CF728);
  uint64_t v43 = v96;
  uint64_t v44 = v88;
  if (qword_1EB5D03E0 != -1) {
    swift_once();
  }
  uint64_t v45 = qword_1EB5D1C70;
  uint64_t v46 = *(void *)algn_1EB5D1C78;
  swift_bridgeObjectRetain();
  char v47 = sub_1A46E05AC();
  uint64_t v78 = v42;
  uint64_t v82 = CKColumn.__allocating_init(wrappedValue:name:encrypted:)(v41, v45, v46, v47 & 1);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5F8);
  uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56);
  v49(v44, 1, 1, v48);
  v49(v43, 1, 1, v48);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF650);
  swift_allocObject();
  uint64_t v50 = sub_1A4942500();
  v95 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF718);
  char v51 = v44;
  if (qword_1EB5D03C8 != -1) {
    swift_once();
  }
  uint64_t v52 = qword_1EB5D1C50;
  uint64_t v53 = *(void *)algn_1EB5D1C58;
  sub_1A49421A0();
  sub_1A46E3B50();
  swift_bridgeObjectRetain();
  char v54 = sub_1A46E05AC();
  v93 = (char *)CKColumn.__allocating_init(wrappedValue:name:encrypted:)(v50, v52, v53, v54 & 1);
  v49(v51, 1, 1, v48);
  v49(v96, 1, 1, v48);
  swift_allocObject();
  sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5A0);
  swift_allocObject();
  uint64_t v55 = sub_1A4942360();
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF628);
  uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56);
  v57(v89, 1, 1, v56);
  v57(v90, 1, 1, v56);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF668);
  swift_allocObject();
  sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5B8);
  swift_allocObject();
  sub_1A4942360();
  char v58 = v94;
  __swift_project_boxed_opaque_existential_1(v94, v94[3]);
  sub_1A46E6848();
  uint64_t v59 = v91;
  uint64_t v60 = v92;
  sub_1A4943180();
  uint64_t v96 = (char *)v55;
  if (v59)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  }
  else
  {
    char v98 = 0;
    sub_1A46E7B38(&qword_1E9651B00, &qword_1EB5CF5B0);
    sub_1A4942FF0();
    os_log_t v62 = v99;
    swift_retain();
    swift_release();
    char v98 = 1;
    sub_1A46E7B38(&qword_1E9651B08, &qword_1EB5CF720);
    sub_1A4942FF0();
    uint64_t v91 = v62;
    uint64_t v63 = v99;
    swift_retain();
    swift_release();
    char v98 = 2;
    sub_1A4942FF0();
    uint64_t v90 = v63;
    uint64_t v64 = v99;
    swift_retain();
    swift_release();
    char v98 = 3;
    sub_1A4942FF0();
    uint64_t v89 = v64;
    uint64_t v65 = (uint64_t)v99;
    swift_retain();
    swift_release();
    char v98 = 4;
    sub_1A4942FF0();
    uint64_t v97 = v65;
    uint64_t v66 = v99;
    swift_retain();
    swift_release();
    char v98 = 5;
    sub_1A46E7B38(&qword_1E9651B10, (uint64_t *)&unk_1EB5CF728);
    sub_1A4942FF0();
    uint64_t v67 = v99;
    swift_retain();
    swift_release();
    char v98 = 6;
    sub_1A46E7B38(&qword_1E9651B18, &qword_1EB5CF718);
    sub_1A4942FF0();
    uint64_t v68 = v99;
    swift_retain();
    swift_release();
    char v98 = 7;
    sub_1A46E7B38(&qword_1E9651B20, &qword_1EB5CF5A0);
    sub_1A4942FF0();
    v93 = v66;
    v95 = v68;
    uint64_t v88 = v99;
    swift_retain();
    swift_release();
    char v98 = 8;
    sub_1A46E7B38(&qword_1E9651B28, &qword_1EB5CF5B8);
    uint64_t v69 = v81;
    sub_1A4942FF0();
    (*(void (**)(char *, uint64_t))(v79 + 8))(v60, v69);
    os_log_t v70 = v99;
    swift_retain();
    swift_release();
    v71 = v77;
    uint64_t v72 = v90;
    void *v77 = v91;
    v71[1] = v72;
    uint64_t v73 = v88;
    uint64_t v74 = v97;
    v71[2] = v89;
    v71[3] = v74;
    uint64_t v75 = v94;
    v71[4] = v93;
    v71[5] = v67;
    v71[6] = v95;
    v71[7] = v73;
    v71[8] = v70;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1A46E7B38(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A46E7B7C()
{
  return sub_1A4942370();
}

unint64_t sub_1A46E7BA0(uint64_t a1)
{
  unint64_t result = sub_1A46E7BC8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1A46E7BC8()
{
  unint64_t result = qword_1EB5CFAB8;
  if (!qword_1EB5CFAB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CFAB8);
  }
  return result;
}

uint64_t sub_1A46E7C1C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return NotificationHistoryItem.init(from:)(a1, a2);
}

uint64_t sub_1A46E7C34(void *a1)
{
  return NotificationHistoryItem.encode(to:)(a1);
}

unint64_t sub_1A46E7C50()
{
  unint64_t result = qword_1EB5CFAA8;
  if (!qword_1EB5CFAA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CFAA8);
  }
  return result;
}

unint64_t sub_1A46E7CA8()
{
  unint64_t result = qword_1EB5CFAC8;
  if (!qword_1EB5CFAC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CFAC8);
  }
  return result;
}

unint64_t sub_1A46E7D00()
{
  unint64_t result = qword_1EB5CFAD0;
  if (!qword_1EB5CFAD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CFAD0);
  }
  return result;
}

unint64_t sub_1A46E7D58()
{
  unint64_t result = qword_1EB5CFAA0;
  if (!qword_1EB5CFAA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CFAA0);
  }
  return result;
}

uint64_t sub_1A46E7DAC()
{
  return sub_1A4942370();
}

uint64_t sub_1A46E7DD0()
{
  return sub_1A49423C0();
}

unint64_t sub_1A46E7F5C()
{
  unint64_t result = qword_1EB5CFAE0;
  if (!qword_1EB5CFAE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CFAE0);
  }
  return result;
}

unint64_t sub_1A46E7FB4()
{
  unint64_t result = qword_1EB5CFAD8;
  if (!qword_1EB5CFAD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CFAD8);
  }
  return result;
}

unint64_t sub_1A46E800C()
{
  unint64_t result = qword_1EB5CFAB0;
  if (!qword_1EB5CFAB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CFAB0);
  }
  return result;
}

uint64_t sub_1A46E8064()
{
  return 0x332E302E31;
}

unint64_t sub_1A46E807C()
{
  unint64_t result = qword_1EB5CFAC0;
  if (!qword_1EB5CFAC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CFAC0);
  }
  return result;
}

uint64_t sub_1A46E80D0(uint64_t a1)
{
  unint64_t v2 = sub_1A46E7C50();
  return MEMORY[0x1F415D4C8](a1, v2);
}

uint64_t sub_1A46E811C(uint64_t a1)
{
  unint64_t v2 = sub_1A46E7C50();
  return MEMORY[0x1F415D4D8](a1, v2);
}

uint64_t sub_1A46E8168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1A46E7C50();
  return MEMORY[0x1F415D4D0](a1, a2, a3, v6);
}

uint64_t sub_1A46E81D0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1A46E7C50();
  return MEMORY[0x1F415D4F0](a1, a2, v4);
}

uint64_t sub_1A46E821C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1A46E7C50();
  return MEMORY[0x1F415D4E8](a1, a2, a3, v6);
}

uint64_t sub_1A46E8270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_1A46E7C50();
  return MEMORY[0x1F415D4E0](a1, a2, a3, a4, v8);
}

uint64_t destroy for NotificationHistoryItem()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void *initializeWithCopy for NotificationHistoryItem(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  a1[8] = a2[8];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for NotificationHistoryItem(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for NotificationHistoryItem(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NotificationHistoryItem(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NotificationHistoryItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NotificationHistoryItem()
{
  return &type metadata for NotificationHistoryItem;
}

ValueMetadata *type metadata accessor for NotificationHistoryItem.Columns()
{
  return &type metadata for NotificationHistoryItem.Columns;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  __CFString *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NotificationHistoryItem.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NotificationHistoryItem.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    __CFString *result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A46E87B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          __CFString *result = a2 + 8;
        break;
    }
  }
  return result;
}

uint64_t sub_1A46E87E0(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1A46E87E8(unsigned char *result, char a2)
{
  __CFString *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for NotificationHistoryItem.CodingKeys()
{
  return &type metadata for NotificationHistoryItem.CodingKeys;
}

unint64_t sub_1A46E8804()
{
  unint64_t result = qword_1E9657A70[0];
  if (!qword_1E9657A70[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9657A70);
  }
  return result;
}

unint64_t sub_1A46E885C()
{
  unint64_t result = qword_1E9657B80;
  if (!qword_1E9657B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9657B80);
  }
  return result;
}

unint64_t sub_1A46E88B4()
{
  unint64_t result = qword_1E9657B88[0];
  if (!qword_1E9657B88[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9657B88);
  }
  return result;
}

uint64_t sub_1A46E8908(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_1A4943080() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x63696E6F6E61635FLL && a2 == 0xEC00000044496C61 || (sub_1A4943080() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C63697472615FLL && a2 == 0xEA00000000004449 || (sub_1A4943080() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x72657473756C635FLL && a2 == 0xEA00000000004449 || (sub_1A4943080() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6C656E6E6168635FLL && a2 == 0xEA00000000004449 || (sub_1A4943080() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656372756F735FLL && a2 == 0xE700000000000000 || (sub_1A4943080() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x65696669746F6E5FLL && a2 == 0xEB00000000744164 || (sub_1A4943080() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6465696669646F6DLL && a2 == 0xEA00000000007441 || (sub_1A4943080() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001A49763C0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = sub_1A4943080();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t NotificationHistoryType.add(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 56) = v5;
  long long v6 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a1 + 32);
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = v3;
  *(void *)(v4 + 16) = a2;
  *(_OWORD *)(v4 + 88) = v6;
  *(void *)(v4 + 104) = *(void *)(a1 + 64);
  return MEMORY[0x1F4188298](sub_1A46E8D38, 0, 0);
}

uint64_t sub_1A46E8D38()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v4 = v0[10];
  uint64_t v3 = v0[11];
  uint64_t v6 = v0[8];
  uint64_t v5 = v0[9];
  uint64_t v7 = v0[6];
  uint64_t v8 = v0[7];
  uint64_t v14 = v0[5];
  uint64_t v16 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651B38);
  uint64_t v9 = swift_allocObject();
  v0[14] = v9;
  *(_OWORD *)(v9 + 16) = xmmword_1A4972120;
  *(void *)(v9 + 32) = v14;
  *(void *)(v9 + 40) = v7;
  *(void *)(v9 + 48) = v8;
  *(void *)(v9 + 56) = v6;
  *(void *)(v9 + 64) = v5;
  *(void *)(v9 + 72) = v4;
  *(void *)(v9 + 80) = v3;
  *(void *)(v9 + 88) = v2;
  *(void *)(v9 + 96) = v1;
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 + 24) + **(int **)(v16 + 24));
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[15] = v10;
  void *v10 = v0;
  v10[1] = sub_1A46E8EF0;
  uint64_t v11 = v0[3];
  uint64_t v12 = v0[2];
  return v15(v9, v12, v11);
}

uint64_t sub_1A46E8EF0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](sub_1A46E902C, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1A46E902C()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1A46E9090(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1A49422C0();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PrivateZoneLocation();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CFA90);
  sub_1A46E91D4(a2, (uint64_t)v9);
  sub_1A46E9238();
  sub_1A46EF798((uint64_t)v6);
  uint64_t v11 = sub_1A46EF808(a1, (uint64_t)v9, (uint64_t)v6);
  sub_1A46E928C(a2);
  *(void *)(v10 + 16) = v11;
  return v10;
}

uint64_t sub_1A46E91D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PrivateZoneLocation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1A46E9238()
{
  unint64_t result = qword_1EB5CFAE8;
  if (!qword_1EB5CFAE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CFAE8);
  }
  return result;
}

uint64_t sub_1A46E928C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PrivateZoneLocation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A46E92E8(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  v2[7] = *v1;
  return MEMORY[0x1F4188298](sub_1A46E9330, 0, 0);
}

uint64_t sub_1A46E9330()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[5];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5CF780);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1A4972120;
  *(void *)(v3 + 32) = *(void *)sub_1A46EF550();
  v0[3] = v3;
  sub_1A46E96C8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF758);
  sub_1A46E7B38(&qword_1EB5CF760, &qword_1EB5CF758);
  sub_1A4942DF0();
  v0[4] = v0[2];
  uint64_t v4 = swift_task_alloc();
  v0[8] = v4;
  *(void *)(v4 + 16) = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF748);
  *(void *)(v2 + 24) = v5;
  *(void *)(v2 + 32) = sub_1A46E7B38(&qword_1EB5CF750, &qword_1EB5CF748);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[9] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1A46E9514;
  uint64_t v7 = v0[5];
  return PrivateZone.query<A>(options:executor:)(v7, v0 + 4, (uint64_t)sub_1A46E9A34, v4, v5);
}

uint64_t sub_1A46E9514()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](sub_1A46E9664, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1A46E9664()
{
  __swift_deallocate_boxed_opaque_existential_1(*(void *)(v0 + 40));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_1A46E96C8()
{
  unint64_t result = qword_1EB5CF708;
  if (!qword_1EB5CF708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CF708);
  }
  return result;
}

uint64_t sub_1A46E971C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v23 = a1;
  uint64_t v21 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5CF680);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (uint64_t *)((char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_1A49421A0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_1A4942340();
  uint64_t v9 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1A46E34D4();
  swift_bridgeObjectRetain();
  sub_1A4942190();
  v24[3] = v5;
  v24[4] = MEMORY[0x1E4FAA600];
  __swift_allocate_boxed_opaque_existential_0(v24);
  sub_1A4942170();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_1A4942460();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  uint64_t v13 = v12[1];
  *uint64_t v4 = *v12;
  v4[1] = v13;
  uint64_t v14 = *MEMORY[0x1E4FAA6D8];
  uint64_t v15 = sub_1A4942570();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 104))(v4, v14, v15);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v16 + 56))(v4, 0, 1, v15);
  swift_bridgeObjectRetain();
  uint64_t v17 = v24[6];
  uint64_t v18 = sub_1A49424A0();
  if (v17)
  {
    sub_1A46EA718((uint64_t)v4);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v22);
  }
  else
  {
    uint64_t v20 = v18;
    sub_1A46EA718((uint64_t)v4);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v22);
    *uint64_t v21 = v20;
  }
  return result;
}

uint64_t sub_1A46E9A34@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1A46E971C(a1, a2);
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    JUMPOUT(0x1A6261A10);
  }
  return result;
}

uint64_t sub_1A46E9AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  void v4[5] = a1;
  v4[6] = a2;
  return MEMORY[0x1F4188298](sub_1A46E9AC4, 0, 0);
}

uint64_t sub_1A46E9AC4()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[6];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5CF780);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1A4972120;
  *(void *)(v3 + 32) = *(void *)sub_1A46EF550();
  v0[3] = v3;
  sub_1A46E96C8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF758);
  sub_1A46E7B38(&qword_1EB5CF760, &qword_1EB5CF758);
  sub_1A4942DF0();
  v0[4] = v0[2];
  uint64_t v4 = swift_task_alloc();
  v0[9] = v4;
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[10] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651B50);
  *uint64_t v5 = v0;
  v5[1] = sub_1A46E9C74;
  uint64_t v7 = v0[5];
  return PrivateZone.query<A>(options:executor:)(v7, v0 + 4, (uint64_t)sub_1A46EA020, v4, v6);
}

uint64_t sub_1A46E9C74()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 88) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](sub_1A46E9DC4, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1A46E9DC4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A46E9DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5CF680);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (void *)((char *)&v19[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_1A4942340();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v19[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A46E3398();
  v19[3] = MEMORY[0x1E4FBB1A0];
  v19[4] = MEMORY[0x1E4FAA778];
  v19[0] = a2;
  v19[1] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1A4942440();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  uint64_t v12 = sub_1A46E34D4();
  uint64_t v13 = v12[1];
  *uint64_t v7 = *v12;
  v7[1] = v13;
  uint64_t v14 = *MEMORY[0x1E4FAA6D8];
  uint64_t v15 = sub_1A4942570();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 104))(v7, v14, v15);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v16 + 56))(v7, 0, 1, v15);
  swift_bridgeObjectRetain();
  sub_1A4942490();
  sub_1A46EA718((uint64_t)v7);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1A46EA020(uint64_t a1)
{
  return sub_1A46E9DDC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1A46EA03C()
{
  swift_release();
  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t sub_1A46EA074(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1A46E2688;
  v5[5] = a1;
  v5[6] = v4;
  v5[7] = *v4;
  return MEMORY[0x1F4188298](sub_1A46E9330, 0, 0);
}

uint64_t sub_1A46EA14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1A46E2898;
  v9[7] = a3;
  void v9[8] = v8;
  v9[5] = a1;
  v9[6] = a2;
  return MEMORY[0x1F4188298](sub_1A46E9AC4, 0, 0);
}

uint64_t sub_1A46EA210(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return MEMORY[0x1F4188298](sub_1A46EA234, 0, 0);
}

uint64_t sub_1A46EA234()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1A46EA2D4;
  uint64_t v2 = *(void *)(v0 + 16);
  return PrivateZone.add(_:)(v2);
}

uint64_t sub_1A46EA2D4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t dispatch thunk of NotificationHistoryType.recentHistoryItems()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + **(int **)(a3 + 8));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1A46E2688;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of NotificationHistoryType.historyItem(canonicalID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 16) + **(int **)(a5 + 16));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_1A46E2898;
  return v13(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of NotificationHistoryType.add(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 24) + **(int **)(a3 + 24));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1A46E2898;
  return v9(a1, a2, a3);
}

uint64_t type metadata accessor for NotificationHistory()
{
  return self;
}

uint64_t sub_1A46EA718(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5CF680);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A46EA778(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF570);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A46EA7E0(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF570);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id PingBasedOnlineNetworkTransitionMonitor.__allocating_init(configurationManager:hostName:port:)(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  id v9 = objc_allocWithZone(v4);
  id v10 = sub_1A46ECBC8(a1, a2, a3, a4);
  swift_unknownObjectRelease();
  return v10;
}

id PingBasedOnlineNetworkTransitionMonitor.init(configurationManager:hostName:port:)(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  id v4 = sub_1A46ECBC8(a1, a2, a3, a4);
  swift_unknownObjectRelease();
  return v4;
}

id sub_1A46EA950(void *a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_msgSend(*(id *)&v3[OBJC_IVAR___FCPingBasedOnlineNetworkTransitionMonitor_configurationManager], sel_possiblyUnfetchedAppConfiguration);
  double v8 = 1.0;
  if (objc_msgSend(v7, sel_respondsToSelector_, sel_offlineModeDetectionPingInterval))
  {
    objc_msgSend(v7, sel_offlineModeDetectionPingInterval);
    double v8 = v9;
  }
  double v10 = 5.0;
  if (objc_msgSend(v7, sel_respondsToSelector_, sel_offlineModeDetectionPingTimeoutInterval))
  {
    objc_msgSend(v7, sel_offlineModeDetectionPingTimeoutInterval);
    double v10 = v11;
  }
  uint64_t v12 = *(void *)&v3[OBJC_IVAR___FCPingBasedOnlineNetworkTransitionMonitor_hostName];
  uint64_t v13 = *(void *)&v3[OBJC_IVAR___FCPingBasedOnlineNetworkTransitionMonitor_hostName + 8];
  __int16 v14 = *(_WORD *)&v3[OBJC_IVAR___FCPingBasedOnlineNetworkTransitionMonitor_port];
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = a1;
  v15[3] = a2;
  void v15[4] = a3;
  v15[5] = v3;
  id v16 = objc_allocWithZone((Class)type metadata accessor for PingBasedOnlineNetworkTransitionOperation());
  swift_bridgeObjectRetain();
  id v17 = a1;
  swift_retain();
  uint64_t v18 = v3;
  id v19 = sub_1A46ECE28(v12, v13, v14, (uint64_t)sub_1A46ECDF8, (uint64_t)v15, v8, v10);
  swift_release();
  objc_msgSend(v19, sel_start);
  swift_unknownObjectRelease();
  return v19;
}

void sub_1A46EAAD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_1A49429D0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  double v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1A49429F0();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  void aBlock[4] = a2;
  aBlock[5] = a3;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A46EADCC;
  aBlock[3] = &block_descriptor_50;
  __int16 v14 = _Block_copy(aBlock);
  swift_retain();
  sub_1A49429E0();
  uint64_t v20 = MEMORY[0x1E4FBC860];
  sub_1A46ED65C((unint64_t *)&unk_1EB5CF518, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF530);
  sub_1A46ED260();
  sub_1A4942DF0();
  MEMORY[0x1A625FE60](0, v13, v9, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_release();
  uint64_t v15 = *(void *)(v19 + OBJC_IVAR___FCPingBasedOnlineNetworkTransitionMonitor_dateOfLastTransitionLock);
  uint64_t v16 = v15 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v15 + 16);
  id v17 = (os_unfair_lock_s *)(v15 + ((*(unsigned int *)(*(void *)v15 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v17);
  sub_1A46EADD0(v16);
  os_unfair_lock_unlock(v17);
}

uint64_t sub_1A46EADD0(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF570);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v16 - v6;
  sub_1A46ED8F8(a1, (uint64_t)&v16 - v6);
  uint64_t v8 = sub_1A49421A0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
  {
    uint64_t v10 = (void *)sub_1A4942150();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  }
  uint64_t v11 = self;
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_init);
  id v13 = objc_msgSend(v11, sel_fc_laterDateAllowingNilWithDate_andDate_, v10, v12);

  if (v13)
  {
    sub_1A4942180();

    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, v14, 1, v8);
  return sub_1A46ED8F8((uint64_t)v5, a1);
}

id PingBasedOnlineNetworkTransitionOperation.__allocating_init(pingInterval:pingTimeoutInterval:hostName:port:notificationBlock:)(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  id v15 = objc_allocWithZone(v7);
  id v16 = sub_1A46ECE28(a1, a2, a3, a4, a5, a6, a7);
  swift_release();
  return v16;
}

void sub_1A46EB28C(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___FCPingBasedOnlineNetworkTransitionMonitor_dateOfLastTransitionLock);
  uint64_t v4 = v3 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_1A46EB344(v4, a1);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_1A46EB344@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1A46EA778(a1, a2);
}

id PingBasedOnlineNetworkTransitionMonitor.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void PingBasedOnlineNetworkTransitionMonitor.init()()
{
}

id PingBasedOnlineNetworkTransitionMonitor.__deallocating_deinit()
{
  return sub_1A46ECB0C(type metadata accessor for PingBasedOnlineNetworkTransitionMonitor);
}

uint64_t sub_1A46EB47C()
{
  return swift_retain();
}

uint64_t sub_1A46EB4C8(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC8NewsCore41PingBasedOnlineNetworkTransitionOperation_probe);
  swift_beginAccess();
  void *v3 = a1;
  return swift_release();
}

uint64_t (*sub_1A46EB51C())()
{
  return j__swift_endAccess;
}

id PingBasedOnlineNetworkTransitionOperation.init(pingInterval:pingTimeoutInterval:hostName:port:notificationBlock:)(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  id v7 = sub_1A46ECE28(a1, a2, a3, a4, a5, a6, a7);
  swift_release();
  return v7;
}

uint64_t sub_1A46EB5B0()
{
  uint64_t v1 = v0;
  uint64_t v60 = sub_1A49429D0();
  uint64_t v63 = *(void *)(v60 - 8);
  MEMORY[0x1F4188790](v60);
  uint64_t v59 = (char *)v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_1A49429F0();
  uint64_t v61 = *(void *)(v3 - 8);
  uint64_t v62 = v3;
  MEMORY[0x1F4188790](v3);
  char v58 = (char *)v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1A4942A10();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v67 = v5;
  uint64_t v68 = v6;
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v56 = (char *)v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v57 = (char *)v51 - v9;
  uint64_t v10 = sub_1A4942650();
  uint64_t v65 = *(void *)(v10 - 8);
  uint64_t v66 = v10;
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  id v13 = (char *)v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v64 = (char *)v51 - v14;
  uint64_t v15 = sub_1A4942620();
  uint64_t v54 = v15;
  uint64_t v55 = *(void *)(v15 - 8);
  uint64_t v16 = v55;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)v51 - v20;
  uint64_t v53 = (char *)v51 - v20;
  id v22 = objc_msgSend(v0, sel_operationID);
  uint64_t v23 = sub_1A4942AE0();
  uint64_t v52 = (void (*)(char *, uint64_t))v23;
  uint64_t v25 = v24;

  char v26 = *(void **)&v1[OBJC_IVAR____TtC8NewsCore41PingBasedOnlineNetworkTransitionOperation_log];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5CF560);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1A4972120;
  *(void *)(v27 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v27 + 64) = sub_1A46ECFC8();
  *(void *)(v27 + 32) = v23;
  *(void *)(v27 + 40) = v25;
  swift_bridgeObjectRetain();
  sub_1A4942CC0();
  sub_1A4942290();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1A4942630();
  uint64_t v28 = v64;
  sub_1A4942640();
  sub_1A49426B0();
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, v15);
  (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v13, v28, v66);
  sub_1A49426D0();
  sub_1A49426C0();
  uint64_t v29 = sub_1A4942680();
  id v30 = objc_msgSend(v1, sel_retryCount);
  id v31 = objc_msgSend(objc_allocWithZone((Class)FCOnce), sel_init);
  uint64_t v32 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v33 = (void *)swift_allocObject();
  v33[2] = v32;
  v33[3] = v26;
  v33[4] = v52;
  v33[5] = v25;
  v33[6] = v30;
  v33[7] = v31;
  swift_retain();
  id v34 = v26;
  id v35 = v31;
  sub_1A46ED0B4((uint64_t)sub_1A46ED0A4);
  sub_1A4942670();
  swift_release();
  swift_release();
  uint64_t v36 = *(os_unfair_lock_s **)&v1[OBJC_IVAR____TtC8NewsCore41PingBasedOnlineNetworkTransitionOperation_probeLock];
  uint64_t v37 = v36 + 4;
  char v38 = v36 + 6;
  os_unfair_lock_lock(v36 + 6);
  v51[1] = v29;
  sub_1A46ED0C4(v37);
  os_unfair_lock_unlock(v38);
  sub_1A46E3134(0, (unint64_t *)&unk_1EB5CF548);
  uint64_t v39 = (void *)sub_1A4942D00();
  sub_1A49426A0();
  uint64_t v40 = v56;
  sub_1A4942A00();
  uint64_t v41 = v57;
  MEMORY[0x1A625FB90](v40, *(double *)&v1[OBJC_IVAR____TtC8NewsCore41PingBasedOnlineNetworkTransitionOperation_pingTimeoutInterval]);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v68 + 8);
  v68 += 8;
  uint64_t v52 = v42;
  v42(v40, v67);
  uint64_t v43 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = v43;
  *(void *)(v44 + 24) = v35;
  void aBlock[4] = sub_1A46ED140;
  aBlock[5] = v44;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A46EADCC;
  aBlock[3] = &block_descriptor_0;
  uint64_t v45 = _Block_copy(aBlock);
  id v46 = v35;
  swift_retain();
  char v47 = v58;
  sub_1A49429E0();
  uint64_t v69 = MEMORY[0x1E4FBC860];
  sub_1A46ED65C((unint64_t *)&unk_1EB5CF518, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF530);
  sub_1A46ED260();
  uint64_t v49 = v59;
  uint64_t v48 = v60;
  sub_1A4942DF0();
  MEMORY[0x1A625FE50](v41, v47, v49, v45);
  swift_release();
  _Block_release(v45);

  (*(void (**)(char *, uint64_t))(v63 + 8))(v49, v48);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v47, v62);
  v52(v41, v67);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v64, v66);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v53, v54);
  swift_release();
  return swift_release();
}

void sub_1A46EBDD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v67 = a7;
  uint64_t v68 = a4;
  uint64_t v69 = a6;
  uint64_t v70 = a5;
  uint64_t v71 = a3;
  uint64_t v9 = sub_1A49426E0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  id v13 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v65 - v14;
  uint64_t v16 = sub_1A4942690();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v20 = MEMORY[0x1A6261AB0](a2 + 16);
  if (v20)
  {
    uint64_t v21 = (void *)v20;
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a1, v16);
    int v22 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v19, v16);
    if (v22 == *MEMORY[0x1E4F38A18])
    {
      (*(void (**)(char *, uint64_t))(v17 + 96))(v19, v16);
      uint64_t v66 = v21;
      uint64_t v65 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v65(v15, v19, v9);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5CF560);
      uint64_t v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = xmmword_1A4972190;
      *(void *)(v23 + 56) = MEMORY[0x1E4FBB1A0];
      unint64_t v24 = sub_1A46ECFC8();
      uint64_t v25 = v70;
      *(void *)(v23 + 32) = v68;
      *(void *)(v23 + 40) = v25;
      uint64_t v26 = MEMORY[0x1E4FBB868];
      *(void *)(v23 + 96) = MEMORY[0x1E4FBB808];
      *(void *)(v23 + 104) = v26;
      uint64_t v27 = v69;
      *(void *)(v23 + 64) = v24;
      *(void *)(v23 + 72) = v27;
      sub_1A46ED65C(&qword_1E9651CD8, MEMORY[0x1E4F38B50]);
      swift_bridgeObjectRetain();
      uint64_t v28 = sub_1A49430D0();
      *(void *)(v23 + 136) = MEMORY[0x1E4FBB1A0];
      *(void *)(v23 + 144) = v24;
      *(void *)(v23 + 112) = v28;
      *(void *)(v23 + 120) = v29;
      sub_1A4942CC0();
      sub_1A4942290();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
      unint64_t v30 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      uint64_t v31 = swift_allocObject();
      uint64_t v32 = (void (*)(unint64_t, char *, uint64_t))v65;
      uint64_t v33 = v66;
      *(void *)(v31 + 16) = v66;
      v32(v31 + v30, v13, v9);
      uint64_t v76 = (id (*)())sub_1A46ED6A8;
      uint64_t v77 = v31;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v73 = 1107296256;
      id v34 = &block_descriptor_47;
LABEL_6:
      uint64_t v74 = sub_1A46EADCC;
      uint64_t v75 = v34;
      uint64_t v45 = _Block_copy(&aBlock);
      id v46 = v33;
      swift_release();
      objc_msgSend(v67, sel_executeOnce_, v45);
      _Block_release(v45);

      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
      return;
    }
    if (v22 == *MEMORY[0x1E4F38A08])
    {
      (*(void (**)(char *, uint64_t))(v17 + 96))(v19, v16);
      uint64_t v66 = v21;
      uint64_t v65 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v65(v15, v19, v9);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5CF560);
      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = xmmword_1A4972190;
      *(void *)(v35 + 56) = MEMORY[0x1E4FBB1A0];
      unint64_t v36 = sub_1A46ECFC8();
      uint64_t v37 = v70;
      *(void *)(v35 + 32) = v68;
      *(void *)(v35 + 40) = v37;
      uint64_t v38 = MEMORY[0x1E4FBB868];
      *(void *)(v35 + 96) = MEMORY[0x1E4FBB808];
      *(void *)(v35 + 104) = v38;
      uint64_t v39 = v69;
      *(void *)(v35 + 64) = v36;
      *(void *)(v35 + 72) = v39;
      sub_1A46ED65C(&qword_1E9651CD8, MEMORY[0x1E4F38B50]);
      swift_bridgeObjectRetain();
      uint64_t v40 = sub_1A49430D0();
      *(void *)(v35 + 136) = MEMORY[0x1E4FBB1A0];
      *(void *)(v35 + 144) = v36;
      *(void *)(v35 + 112) = v40;
      *(void *)(v35 + 120) = v41;
      sub_1A4942CC0();
      sub_1A4942290();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
      unint64_t v42 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      uint64_t v43 = swift_allocObject();
      uint64_t v44 = (void (*)(unint64_t, char *, uint64_t))v65;
      uint64_t v33 = v66;
      *(void *)(v43 + 16) = v66;
      v44(v43 + v42, v13, v9);
      uint64_t v76 = (id (*)())sub_1A46ED6A8;
      uint64_t v77 = v43;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v73 = 1107296256;
      id v34 = &block_descriptor_35;
      goto LABEL_6;
    }
    if (v22 == *MEMORY[0x1E4F38A00] || v22 == *MEMORY[0x1E4F38A38]) {
      goto LABEL_13;
    }
    if (v22 == *MEMORY[0x1E4F389E8])
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5CF560);
      uint64_t v47 = swift_allocObject();
      *(_OWORD *)(v47 + 16) = xmmword_1A4972180;
      *(void *)(v47 + 56) = MEMORY[0x1E4FBB1A0];
      unint64_t v48 = sub_1A46ECFC8();
      uint64_t v49 = v70;
      *(void *)(v47 + 32) = v68;
      *(void *)(v47 + 40) = v49;
      uint64_t v50 = MEMORY[0x1E4FBB868];
      *(void *)(v47 + 96) = MEMORY[0x1E4FBB808];
      *(void *)(v47 + 104) = v50;
      uint64_t v51 = v69;
      *(void *)(v47 + 64) = v48;
      *(void *)(v47 + 72) = v51;
      swift_bridgeObjectRetain();
      sub_1A4942CC0();
      sub_1A4942290();
      swift_bridgeObjectRelease();
      uint64_t v52 = swift_allocObject();
      *(void *)(v52 + 16) = v21;
      uint64_t v76 = sub_1A46ED6AC;
      uint64_t v77 = v52;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v73 = 1107296256;
      uint64_t v74 = sub_1A46EADCC;
      uint64_t v75 = &block_descriptor_41;
      uint64_t v53 = _Block_copy(&aBlock);
      id v54 = v21;
      swift_release();
      objc_msgSend(v67, sel_executeOnce_, v53);

      _Block_release(v53);
      return;
    }
    if (v22 == *MEMORY[0x1E4F38A30])
    {
LABEL_13:
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5CF560);
      uint64_t v55 = swift_allocObject();
      *(_OWORD *)(v55 + 16) = xmmword_1A4972180;
      *(void *)(v55 + 56) = MEMORY[0x1E4FBB1A0];
      unint64_t v56 = sub_1A46ECFC8();
      uint64_t v57 = v70;
      *(void *)(v55 + 32) = v68;
      *(void *)(v55 + 40) = v57;
      uint64_t v58 = MEMORY[0x1E4FBB868];
      *(void *)(v55 + 96) = MEMORY[0x1E4FBB808];
      *(void *)(v55 + 104) = v58;
      uint64_t v59 = v69;
      *(void *)(v55 + 64) = v56;
      *(void *)(v55 + 72) = v59;
      swift_bridgeObjectRetain();
      sub_1A4942CC0();
      sub_1A4942290();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1A4942CB0();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5CF560);
      uint64_t v60 = swift_allocObject();
      *(_OWORD *)(v60 + 16) = xmmword_1A4972180;
      *(void *)(v60 + 56) = MEMORY[0x1E4FBB1A0];
      unint64_t v61 = sub_1A46ECFC8();
      uint64_t v62 = v70;
      *(void *)(v60 + 32) = v68;
      *(void *)(v60 + 40) = v62;
      uint64_t v63 = MEMORY[0x1E4FBB868];
      *(void *)(v60 + 96) = MEMORY[0x1E4FBB808];
      *(void *)(v60 + 104) = v63;
      uint64_t v64 = v69;
      *(void *)(v60 + 64) = v61;
      *(void *)(v60 + 72) = v64;
      swift_bridgeObjectRetain();
      sub_1A4942290();
      swift_bridgeObjectRelease();

      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    }
  }
}

uint64_t sub_1A46EC810(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

void *sub_1A46EC8F0(void *result)
{
  uint64_t v1 = result;
  if (*result)
  {
    sub_1A4942660();
    uint64_t result = (void *)swift_release();
  }
  *uint64_t v1 = 0;
  return result;
}

uint64_t *sub_1A46EC9BC@<X0>(uint64_t *result@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result) {
    uint64_t result = (uint64_t *)sub_1A4942660();
  }
  *a2 = v3 == 0;
  return result;
}

void PingBasedOnlineNetworkTransitionOperation.init()()
{
}

id PingBasedOnlineNetworkTransitionOperation.__deallocating_deinit()
{
  return sub_1A46ECB0C(type metadata accessor for PingBasedOnlineNetworkTransitionOperation);
}

id sub_1A46ECB0C(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

id sub_1A46ECBC8(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF570);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = OBJC_IVAR___FCPingBasedOnlineNetworkTransitionMonitor_dateOfLastTransitionLock;
  uint64_t v13 = sub_1A49421A0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v11, 1, 1, v13);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF578);
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + ((*(unsigned int *)(*(void *)v14 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_1A46EA778((uint64_t)v11, v14 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v14 + 16));
  uint64_t v15 = v4;
  sub_1A46EA7E0((uint64_t)v11);
  *(void *)&v4[v12] = v14;
  *(void *)&v15[OBJC_IVAR___FCPingBasedOnlineNetworkTransitionMonitor_configurationManager] = a1;
  uint64_t v16 = &v15[OBJC_IVAR___FCPingBasedOnlineNetworkTransitionMonitor_hostName];
  *(void *)uint64_t v16 = a2;
  *((void *)v16 + 1) = a3;
  *(_WORD *)&v15[OBJC_IVAR___FCPingBasedOnlineNetworkTransitionMonitor_port] = a4;
  swift_unknownObjectRetain();

  uint64_t v17 = (objc_class *)type metadata accessor for PingBasedOnlineNetworkTransitionMonitor();
  v19.receiver = v15;
  v19.super_class = v17;
  return objc_msgSendSuper2(&v19, sel_init);
}

uint64_t sub_1A46ECDB0()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

void sub_1A46ECDF8()
{
  sub_1A46EAAD8(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t type metadata accessor for PingBasedOnlineNetworkTransitionOperation()
{
  return self;
}

id sub_1A46ECE28(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  uint64_t v15 = OBJC_IVAR____TtC8NewsCore41PingBasedOnlineNetworkTransitionOperation_log;
  sub_1A46E3134(0, &qword_1EB5CF510);
  uint64_t v16 = v7;
  *(void *)&v7[v15] = sub_1A4942D90();
  uint64_t v17 = OBJC_IVAR____TtC8NewsCore41PingBasedOnlineNetworkTransitionOperation_probeLock;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF558);
  uint64_t v18 = swift_allocObject();
  *(_DWORD *)(v18 + 24) = 0;
  *(void *)(v18 + 16) = 0;
  *(void *)&v16[v17] = v18;
  *(void *)&v16[OBJC_IVAR____TtC8NewsCore41PingBasedOnlineNetworkTransitionOperation_probe] = 0;
  *(double *)&v16[OBJC_IVAR____TtC8NewsCore41PingBasedOnlineNetworkTransitionOperation_pingInterval] = a6;
  *(double *)&v16[OBJC_IVAR____TtC8NewsCore41PingBasedOnlineNetworkTransitionOperation_pingTimeoutInterval] = a7;
  objc_super v19 = &v16[OBJC_IVAR____TtC8NewsCore41PingBasedOnlineNetworkTransitionOperation_hostName];
  *(void *)objc_super v19 = a1;
  *((void *)v19 + 1) = a2;
  *(_WORD *)&v16[OBJC_IVAR____TtC8NewsCore41PingBasedOnlineNetworkTransitionOperation_port] = a3;
  uint64_t v20 = &v16[OBJC_IVAR____TtC8NewsCore41PingBasedOnlineNetworkTransitionOperation_notificationBlock];
  *(void *)uint64_t v20 = a4;
  *((void *)v20 + 1) = a5;
  swift_retain();

  v22.receiver = v16;
  v22.super_class = (Class)type metadata accessor for PingBasedOnlineNetworkTransitionOperation();
  return objc_msgSendSuper2(&v22, sel_init);
}

uint64_t type metadata accessor for PingBasedOnlineNetworkTransitionMonitor()
{
  return self;
}

unint64_t sub_1A46ECFC8()
{
  unint64_t result = qword_1EB5CF528;
  if (!qword_1EB5CF528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CF528);
  }
  return result;
}

uint64_t sub_1A46ED01C()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1A46ED054()
{
  swift_release();

  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 64, 7);
}

void sub_1A46ED0A4(uint64_t a1)
{
  sub_1A46EBDD4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void **)(v1 + 56));
}

uint64_t sub_1A46ED0B4(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1A46ED0C4(void *a1)
{
  swift_release();
  *a1 = v1;
  return swift_retain();
}

uint64_t sub_1A46ED100()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_1A46ED140()
{
  uint64_t v1 = *(void **)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 16) + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x1A6261AB0](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v4;
    void aBlock[4] = sub_1A46ED588;
    aBlock[5] = v5;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A46EADCC;
    aBlock[3] = &block_descriptor_29;
    uint64_t v6 = _Block_copy(aBlock);
    id v7 = v4;
    swift_release();
    objc_msgSend(v1, sel_executeOnce_, v6);
    _Block_release(v6);
  }
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

unint64_t sub_1A46ED260()
{
  unint64_t result = qword_1EB5CF538;
  if (!qword_1EB5CF538)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EB5CF530);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CF538);
  }
  return result;
}

uint64_t sub_1A46ED2BC(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone((Class)FCOperationDelayedRetrySignal), sel_initWithDelay_, *(double *)(v1 + OBJC_IVAR____TtC8NewsCore41PingBasedOnlineNetworkTransitionOperation_pingInterval));
  id v4 = v3;
  *a1 = v3;
  return 1;
}

unint64_t sub_1A46ED320()
{
  unint64_t result = qword_1E9651BF8;
  if (!qword_1E9651BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9651BF8);
  }
  return result;
}

uint64_t method lookup function for PingBasedOnlineNetworkTransitionMonitor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PingBasedOnlineNetworkTransitionMonitor);
}

uint64_t dispatch thunk of PingBasedOnlineNetworkTransitionMonitor.__allocating_init(configurationManager:hostName:port:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of PingBasedOnlineNetworkTransitionMonitor.notifyWhenTransitionOccurs(on:with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of PingBasedOnlineNetworkTransitionMonitor.dateOfLastTransition.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t method lookup function for PingBasedOnlineNetworkTransitionOperation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PingBasedOnlineNetworkTransitionOperation);
}

uint64_t dispatch thunk of PingBasedOnlineNetworkTransitionOperation.__allocating_init(pingInterval:pingTimeoutInterval:hostName:port:notificationBlock:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

unsigned char *storeEnumTagSinglePayload for PingBasedOnlineNetworkTransitionOperation.Errors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        __CFString *result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      __CFString *result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1A46ED4D0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PingBasedOnlineNetworkTransitionOperation.Errors()
{
  return &type metadata for PingBasedOnlineNetworkTransitionOperation.Errors;
}

uint64_t sub_1A46ED508()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1A46ED540()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_1A46ED550()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_1A46ED588()
{
  uint64_t v1 = *(void **)(v0 + 16);
  sub_1A46ED608();
  uint64_t v2 = (void *)swift_allocError();
  id v3 = (id)sub_1A49420F0();

  objc_msgSend(v1, sel_finishedPerformingOperationWithError_, v3);
}

unint64_t sub_1A46ED608()
{
  unint64_t result = qword_1E9651CD0;
  if (!qword_1E9651CD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9651CD0);
  }
  return result;
}

uint64_t sub_1A46ED65C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_1A46ED6AC()
{
  uint64_t v1 = *(char **)(v0 + 16);
  (*(void (**)(void))&v1[OBJC_IVAR____TtC8NewsCore41PingBasedOnlineNetworkTransitionOperation_notificationBlock])();
  return objc_msgSend(v1, sel_finishedPerformingOperationWithError_, 0);
}

uint64_t objectdestroy_31Tm()
{
  uint64_t v1 = sub_1A49426E0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

void sub_1A46ED7D4()
{
  uint64_t v1 = sub_1A49426E0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void **)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  sub_1A46ED65C(&qword_1E9651CD8, MEMORY[0x1E4F38B50]);
  uint64_t v5 = (void *)swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v6, v4, v1);
  id v7 = (id)sub_1A49420F0();

  objc_msgSend(v3, sel_finishedPerformingOperationWithError_, v7);
}

uint64_t sub_1A46ED8F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF570);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1A46ED990()
{
  unint64_t result = qword_1EB5CFA98;
  if (!qword_1EB5CFA98)
  {
    type metadata accessor for PrivateDataAssembly();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CFA98);
  }
  return result;
}

uint64_t Assembly.assemblies.getter()
{
  return swift_bridgeObjectRetain();
}

id Assembly.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id Assembly.init()()
{
  id v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = OBJC_IVAR___FCAssembly_assemblies;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5CF838);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1A4972120;
  uint64_t v5 = type metadata accessor for PrivateDataAssembly();
  uint64_t v6 = v1;
  uint64_t v7 = sub_1A470AF54();
  *(void *)(v4 + 56) = v5;
  *(void *)(v4 + 64) = sub_1A46ED990();
  *(void *)(v4 + 32) = v7;
  *(void *)&v1[v3] = v4;

  v9.receiver = v6;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, sel_init);
}

id Assembly.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A46EDBF8()
{
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for Assembly()
{
  return self;
}

uint64_t FCHeadlineProviding.newsArticleURL.getter@<X0>(uint64_t a1@<X8>)
{
  objc_super v2 = v1;
  uint64_t v4 = sub_1A4942130();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CFB08);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = objc_msgSend(v2, sel_articleID);
  if (!v11)
  {
    sub_1A4942AE0();
    id v11 = (id)sub_1A4942AD0();
    swift_bridgeObjectRelease();
  }
  id v12 = objc_msgSend(v2, sel_routeURL);
  if (v12)
  {
    uint64_t v13 = v12;
    sub_1A4942110();

    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v7, v4);
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v14(v10, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
    {
      uint64_t v15 = 0;
    }
    else
    {
      uint64_t v15 = (void *)sub_1A4942100();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    }
  }
  else
  {
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v14(v10, 1, 1, v4);
    uint64_t v15 = 0;
  }
  id v16 = objc_msgSend(self, sel_fc_NewsURLForArticleID_routeURL_, v11, v15);

  if (v16)
  {
    sub_1A4942110();

    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = 1;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v14)(a1, v17, 1, v4);
}

uint64_t sub_1A46EDEC8()
{
  return swift_release();
}

uint64_t sub_1A46EDF58()
{
  objc_super v2 = *(void (**)(void))(v0 + 56);
  uint64_t result = sub_1A46EDFEC(*(void *)(v0 + 72));
  if (!v1)
  {
    v2();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1A46EDFEC(uint64_t a1)
{
  swift_retain();
  uint64_t v3 = sub_1A49425D0();
  if (v1)
  {
    uint64_t v4 = a1;
  }
  else
  {
    uint64_t v4 = v3;
    sub_1A46EEDAC();
    sub_1A49425D0();
    sub_1A46EEE00();
    sub_1A49425D0();
  }
  swift_release();
  return v4;
}

uint64_t sub_1A46EE0D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v33 = a8;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v14 = sub_1A4942400();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a6 & 0x3000000000000000) != 0)
  {
    v24[1] = v24;
    MEMORY[0x1F4188790](v16);
    v24[0] = v10;
    uint64_t v19 = v33;
    v24[-10] = a7;
    v24[-9] = v19;
    v24[-8] = a9;
    v24[-7] = a10;
    uint64_t v20 = v26;
    v24[-6] = v25;
    v24[-5] = v20;
    uint64_t v21 = v27;
    v24[-4] = a3;
    v24[-3] = v21;
    v24[-2] = v28;
    v24[-1] = a6;
    (*(void (**)(char *, void, uint64_t))(v15 + 104))(v18, *MEMORY[0x1E4FAA638], v14);
    swift_retain();
    sub_1A49425E0();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    return swift_release();
  }
  else
  {
    uint64_t v29 = a7;
    uint64_t v30 = v33;
    uint64_t v31 = a9;
    uint64_t v32 = a10;
    _s14descr1EF8234B1V11AccessModelO6ErrorsOMa();
    swift_getWitnessTable();
    swift_allocError();
    *uint64_t v23 = 0;
    return swift_willThrow();
  }
}

uint64_t sub_1A46EE2EC()
{
  objc_super v2 = *(void (**)(void))(v0 + 48);
  uint64_t result = sub_1A46EDFEC(*(void *)(v0 + 64));
  if (!v1)
  {
    v2();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t _s14descr1EF8234B1V11AccessModelO6ErrorsOMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1A46EE388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    unint64_t v9 = a6 & 0xCFFFFFFFFFFFFFFFLL;
    MEMORY[0x1F4188790](a1);
    swift_retain();
    swift_retain();
    sub_1A46EE638(a5, v9);
    sub_1A49425B0();
    swift_release();
    sub_1A46E2CD0(a5, v9);
    return swift_release();
  }
  else
  {
    _s14descr1EF8234B1V11AccessModelO6ErrorsOMa();
    swift_getWitnessTable();
    swift_allocError();
    *uint64_t v6 = 0;
    return swift_willThrow();
  }
}

uint64_t sub_1A46EE4DC()
{
  return swift_release();
}

BOOL sub_1A46EE514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (a4 & 0x3000000000000000) == 0x2000000000000000;
}

BOOL sub_1A46EE528(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_1A46EE538()
{
  return sub_1A4943130();
}

uint64_t sub_1A46EE560()
{
  return sub_1A4943140();
}

BOOL sub_1A46EE5A8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1A46EE528(*a1, *a2);
}

uint64_t sub_1A46EE5B4()
{
  return sub_1A46EE560();
}

uint64_t sub_1A46EE5BC()
{
  return sub_1A46EE538();
}

uint64_t sub_1A46EE5C4()
{
  return sub_1A4943140();
}

uint64_t sub_1A46EE604()
{
  return (*(uint64_t (**)(void, void, void))(v0 + 16))(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_1A46EE638(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_1A46EE690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 32);
}

void sub_1A46EE698(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = (a4 >> 60) & 3;
  if (v5 == 2)
  {
    unint64_t v7 = a4 & 0xCFFFFFFFFFFFFFFFLL;
    swift_retain();
    swift_retain();
    sub_1A46EE638(a3, v7);
  }
  else if (v5 <= 1)
  {
    swift_retain();
  }
}

void sub_1A46EE718(uint64_t a1)
{
}

void sub_1A46EE728(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = (a4 >> 60) & 3;
  if (v5 == 2)
  {
    unint64_t v7 = a4 & 0xCFFFFFFFFFFFFFFFLL;
    swift_release();
    swift_release();
    sub_1A46E2CD0(a3, v7);
  }
  else if (v5 <= 1)
  {
    swift_release();
  }
}

uint64_t *sub_1A46EE7A8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  sub_1A46EE698(*a2, v4, v5, v6);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *sub_1A46EE800(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  sub_1A46EE698(*a2, v4, v5, v6);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  unint64_t v10 = a1[3];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  sub_1A46EE728(v7, v8, v9, v10);
  return a1;
}

uint64_t *sub_1A46EE864(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  unint64_t v6 = a1[3];
  long long v7 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v7;
  sub_1A46EE728(v3, v5, v4, v6);
  return a1;
}

uint64_t sub_1A46EE8A4(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFFFE && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 65534);
  }
  unsigned int v3 = ((*(void *)(a1 + 24) >> 60) & 3 | (4
                                          * ((*(void *)(a1 + 8) >> 50) & 0x3C00 | ((*(void *)(a1 + 8) & 7) << 7) | (*(void *)a1 >> 57) & 0x78 | *(void *)a1 & 7))) ^ 0xFFFF;
  if (v3 >= 0xFFFD) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t sub_1A46EE920(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFFFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 65534;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFFFE) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFFFE) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      unint64_t v3 = ((unsigned __int16)-(__int16)a2 >> 2) & 0x3FFF | ((unsigned __int16)-(__int16)a2 << 14);
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(void *)(result + 8) = ((v3 >> 7) | (v3 << 50)) & 0xF000000000000007;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = (v3 << 46) & 0x3000000000000000;
    }
  }
  return result;
}

uint64_t sub_1A46EE99C(uint64_t a1)
{
  return (*(void *)(a1 + 24) >> 60) & 3;
}

uint64_t sub_1A46EE9A8(uint64_t result)
{
  *(void *)(result + 24) &= 0xCFFFFFFFFFFFFFFFLL;
  return result;
}

int8x16_t sub_1A46EE9B8(int8x16_t *a1, char a2)
{
  unint64_t v2 = a1[1].i64[1] & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 3) << 60);
  int8x16_t result = vandq_s8(*a1, (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFF8uLL));
  *a1 = result;
  a1[1].i64[1] = v2;
  return result;
}

uint64_t _s14descr1EF8234B1V11AccessModelOMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1A46EE9F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 48);
}

uint64_t destroy for RecordEntity()
{
  swift_release();
  swift_release();
  return swift_release();
}

void *_s8NewsCore12RecordEntityVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for RecordEntity(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for RecordEntity(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RecordEntity(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RecordEntity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)int8x16_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)int8x16_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t _s14descr1EF8234B1V11AccessModelO6TablesVMa()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for PrivateZoneSchemaErrors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *sub_1A46EEC90(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    __CFString *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A46EED5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          __CFString *result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_1A46EED84(unsigned char *result, char a2)
{
  __CFString *result = a2 & 1;
  return result;
}

uint64_t sub_1A46EED90()
{
  return swift_getWitnessTable();
}

unint64_t sub_1A46EEDAC()
{
  unint64_t result = qword_1EB5CF6C8;
  if (!qword_1EB5CF6C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CF6C8);
  }
  return result;
}

unint64_t sub_1A46EEE00()
{
  unint64_t result = qword_1EB5CF690;
  if (!qword_1EB5CF690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CF690);
  }
  return result;
}

uint64_t PrivateZoneModel.identifier.getter()
{
  sub_1A49422D0();
  sub_1A4942510();
  uint64_t result = swift_release();
  if (v2) {
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t dispatch thunk of PrivateZoneModel.modifiedAt.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t PrivateZoneType.add(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  void v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x1F4188298](sub_1A46EEEE0, 0, 0);
}

uint64_t sub_1A46EEEE0()
{
  uint64_t v11 = v0[4];
  uint64_t v1 = v0[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_1A46FBF08(AssociatedTypeWitness, AssociatedTypeWitness);
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  swift_allocObject();
  uint64_t v4 = sub_1A4942B70();
  v0[6] = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v5, v1, AssociatedTypeWitness);
  sub_1A4942BE0();
  unint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 + 56) + **(int **)(v11 + 56));
  unsigned int v6 = (void *)swift_task_alloc();
  v0[7] = v6;
  *unsigned int v6 = v0;
  v6[1] = sub_1A46EF0A0;
  uint64_t v7 = v0[4];
  uint64_t v8 = v0[3];
  return v10(v4, v8, v7);
}

uint64_t sub_1A46EF0A0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](sub_1A46EF1DC, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1A46EF1DC()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t PrivateZoneType.remove(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  void v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return MEMORY[0x1F4188298](sub_1A46EF268, 0, 0);
}

uint64_t sub_1A46EF268()
{
  uint64_t v9 = v0[5];
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651CF8);
  uint64_t v3 = swift_allocObject();
  v0[7] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_1A4972120;
  *(void *)(v3 + 32) = v2;
  *(void *)(v3 + 40) = v1;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 + 64) + **(int **)(v9 + 64));
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[8] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1A46EF3A0;
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[4];
  return v8(v3, v6, v5);
}

uint64_t sub_1A46EF3A0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](sub_1A46EF4DC, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1A46EF4DC()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t PrivateZoneQueryOptions.rawValue.getter()
{
  return *(void *)v0;
}

NewsCore::PrivateZoneQueryOptions __swiftcall PrivateZoneQueryOptions.init(rawValue:)(NewsCore::PrivateZoneQueryOptions rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void *sub_1A46EF550()
{
  return &unk_1A49724B0;
}

void static PrivateZoneQueryOptions.syncIfNeeded.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static PrivateZoneQueryOptions.forceSync.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void *sub_1A46EF574@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1A46EF580(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_1A46EF588@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_1A46EF59C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_1A46EF5B0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1A46EF5C4(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_1A46EF5F4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1A46EF620@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_1A46EF644(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_1A46EF658(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_1A46EF66C(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_1A46EF680@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1A46EF694(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1A46EF6A8(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1A46EF6BC(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1A46EF6D0()
{
  return *v0 == 0;
}

uint64_t sub_1A46EF6E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184B08](a1, a4, a2, a5, a3);
}

void *sub_1A46EF6F8(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *sub_1A46EF70C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_1A46EF71C(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_1A46EF728(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1A46EF740@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_1A46EF798@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1A46E2A44();
  uint64_t v3 = sub_1A49422C0();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v2, v3);
}

uint64_t sub_1A46EF808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  sub_1A46EF860(a1, a2, a3);
  return v6;
}

uint64_t sub_1A46EF860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a3;
  uint64_t v27 = a1;
  uint64_t v24 = a2;
  uint64_t v6 = *(void **)v3;
  uint64_t v7 = type metadata accessor for PrivateZoneLocation();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  uint64_t v11 = v3 + qword_1EB5D0860;
  uint64_t v25 = sub_1A49422C0();
  uint64_t v12 = *(void *)(v25 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, a3, v25);
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  sub_1A46E91D4(a2, (uint64_t)v10);
  unint64_t v14 = (*(unsigned __int8 *)(v8 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = (void *)swift_allocObject();
  uint64_t v16 = v6[10];
  void v15[2] = v16;
  uint64_t v17 = v6[11];
  v15[3] = v17;
  uint64_t v18 = v6[12];
  void v15[4] = v18;
  uint64_t v19 = v6[13];
  v15[5] = v19;
  v15[6] = v13;
  v15[7] = v27;
  sub_1A46FC128((uint64_t)v10, (uint64_t)v15 + v14);
  *(void *)&long long v28 = v16;
  *((void *)&v28 + 1) = v17;
  *(void *)&long long v29 = v18;
  *((void *)&v29 + 1) = v19;
  uint64_t v20 = _s14descr1EF8234B1V11AccessModelOMa();
  AsyncLazy.init(_:)((uint64_t)&unk_1E9651D08, (uint64_t)v15, v20, &v28);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v26, v25);
  sub_1A46E928C(v24);
  uint64_t v21 = *(void *)(v3 + 16);
  long long v22 = v29;
  *(_OWORD *)(v3 + 16) = v28;
  *(_OWORD *)(v3 + 32) = v22;
  sub_1A46FC294(v21);
  return v3;
}

uint64_t sub_1A46EFAC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[15] = a7;
  v8[16] = a8;
  v8[13] = a5;
  v8[14] = a6;
  v8[11] = a3;
  v8[12] = a4;
  v8[9] = a1;
  v8[10] = a2;
  return MEMORY[0x1F4188298](sub_1A46EFAF4, 0, 0);
}

uint64_t sub_1A46EFAF4()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 136) = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)Strong;
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v3;
    void *v3 = v0;
    v3[1] = sub_1A46EFC58;
    uint64_t v4 = *(void *)(v0 + 96);
    return sub_1A47086E8(v2, v4);
  }
  else
  {
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v0 + 32) = *(_OWORD *)(v0 + 120);
    type metadata accessor for PrivateZone.Errors();
    swift_getWitnessTable();
    swift_allocError();
    *uint64_t v6 = 1;
    swift_willThrow();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_1A46EFC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(void **)v5;
  *(void *)(*(void *)v5 + 152) = v4;
  swift_task_dealloc();
  if (v4)
  {
    uint64_t v11 = sub_1A46EFE28;
  }
  else
  {
    v10[20] = a4;
    v10[21] = a3;
    v10[22] = a2;
    v10[23] = a1;
    uint64_t v11 = sub_1A46EFDA0;
  }
  return MEMORY[0x1F4188298](v11, 0, 0);
}

uint64_t sub_1A46EFDA0()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[23];
  uint64_t v4 = v0[20];
  uint64_t v3 = v0[21];
  uint64_t v5 = (void *)v0[9];
  swift_release();
  *uint64_t v5 = v2;
  v5[1] = v1;
  v5[2] = v3;
  void v5[3] = v4;
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1A46EFE28()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void PrivateZone.deinit()
{
  uint64_t v1 = (void *)*v0;
  if (v0[2])
  {
    uint64_t v2 = v0;
    uint64_t v3 = v1[11];
    uint64_t v4 = v1[12];
    unint64_t v5 = v1[13];
    uint64_t v12 = v1[10];
    uint64_t v13 = v3;
    uint64_t v14 = v4;
    unint64_t v15 = v5;
    _s14descr1EF8234B1V11AccessModelOMa();
    type metadata accessor for AsyncLazy();
    AsyncLazy.valueIfLoaded.getter((uint64_t)&v12);
    uint64_t v6 = v12;
    uint64_t v7 = v13;
    uint64_t v8 = v14;
    unint64_t v9 = v15;
    if ((~(v12 & v13) & 0xF000000000000007) != 0 || (v15 & 0x3000000000000000) != 0x3000000000000000)
    {
      sub_1A46EE4DC();
      sub_1A46FC2E4(v6, v7, v8, v9);
    }
    sub_1A46FC294(v2[2]);
    uint64_t v10 = (char *)v2 + qword_1EB5D0860;
    uint64_t v11 = sub_1A49422C0();
    (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    __break(1u);
  }
}

uint64_t PrivateZone.__deallocating_deinit()
{
  PrivateZone.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t PrivateZone.query<A>(options:executor:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[5] = a5;
  v6[6] = v5;
  v6[3] = a3;
  v6[4] = a4;
  v6[2] = a1;
  uint64_t v7 = *a2;
  v6[7] = *v5;
  v6[8] = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  v6[9] = v8;
  *uint64_t v8 = v6;
  v8[1] = sub_1A46F0170;
  v8[15] = v5;
  v8[16] = *v5;
  return MEMORY[0x1F4188298](sub_1A46F0A7C, 0, 0);
}

uint64_t sub_1A46F0170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)*v5;
  v6[10] = a1;
  v6[11] = a2;
  v6[12] = a3;
  v6[13] = a4;
  v6[14] = v4;
  swift_task_dealloc();
  if (v4)
  {
    uint64_t v7 = (uint64_t (*)(void))v6[1];
    return v7();
  }
  else
  {
    return MEMORY[0x1F4188298](sub_1A46F02AC, 0, 0);
  }
}

uint64_t sub_1A46F02AC()
{
  uint64_t v1 = *(void *)(v0 + 64);
  if ((v1 & 2) != 0)
  {
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1A46F04EC;
    return sub_1A46F0EB8();
  }
  else if (v1)
  {
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_1A46F0728;
    v13[7] = *(void *)(v0 + 48);
    return MEMORY[0x1F4188298](sub_1A46F1798, 0, 0);
  }
  else
  {
    unint64_t v2 = *(void *)(v0 + 104);
    uint64_t v4 = *(void *)(v0 + 88);
    uint64_t v3 = *(void *)(v0 + 96);
    uint64_t v5 = *(void *)(v0 + 80);
    uint64_t v6 = *(void **)(v0 + 56);
    uint64_t v7 = *(void *)(v0 + 40);
    uint64_t v8 = swift_task_alloc();
    long long v9 = *(_OWORD *)(v0 + 24);
    *(void *)(v8 + 16) = v6[10];
    *(void *)(v8 + 24) = v6[11];
    *(void *)(v8 + 32) = v7;
    *(void *)(v8 + 40) = v6[12];
    *(void *)(v8 + 48) = v6[13];
    *(_OWORD *)(v8 + 56) = v9;
    sub_1A46EDEC8();
    sub_1A46EE728(v5, v4, v3, v2);
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

uint64_t sub_1A46F04EC()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = sub_1A46F0964;
  }
  else {
    unint64_t v2 = sub_1A46F0600;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1A46F0600()
{
  uint64_t v1 = *(void *)(v0 + 96);
  unint64_t v2 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v5 = *(void **)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = swift_task_alloc();
  long long v8 = *(_OWORD *)(v0 + 24);
  *(void *)(v7 + 16) = v5[10];
  *(void *)(v7 + 24) = v5[11];
  *(void *)(v7 + 32) = v6;
  *(void *)(v7 + 40) = v5[12];
  *(void *)(v7 + 48) = v5[13];
  *(_OWORD *)(v7 + 56) = v8;
  sub_1A46EDEC8();
  sub_1A46EE728(v4, v3, v1, v2);
  swift_task_dealloc();
  long long v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1A46F0728()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = sub_1A46F09CC;
  }
  else {
    unint64_t v2 = sub_1A46F083C;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1A46F083C()
{
  uint64_t v1 = *(void *)(v0 + 96);
  unint64_t v2 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v5 = *(void **)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = swift_task_alloc();
  long long v8 = *(_OWORD *)(v0 + 24);
  *(void *)(v7 + 16) = v5[10];
  *(void *)(v7 + 24) = v5[11];
  *(void *)(v7 + 32) = v6;
  *(void *)(v7 + 40) = v5[12];
  *(void *)(v7 + 48) = v5[13];
  *(_OWORD *)(v7 + 56) = v8;
  sub_1A46EDEC8();
  sub_1A46EE728(v4, v3, v1, v2);
  swift_task_dealloc();
  long long v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1A46F0964()
{
  sub_1A46EE728(v0[10], v0[11], v0[12], v0[13]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1A46F09CC()
{
  sub_1A46EE728(v0[10], v0[11], v0[12], v0[13]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1A46F0A34()
{
  *(void *)(v1 + 120) = v0;
  *(void *)(v1 + 128) = *v0;
  return MEMORY[0x1F4188298](sub_1A46F0A7C, 0, 0);
}

void sub_1A46F0A7C()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 40);
    long long v4 = *(_OWORD *)(v1 + 24);
    *(void *)(v0 + 48) = v2;
    uint64_t v5 = *(void *)(v0 + 128);
    *(_OWORD *)(v0 + 56) = v4;
    *(void *)(v0 + 72) = v3;
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v6;
    long long v7 = *(_OWORD *)(v5 + 96);
    *(_OWORD *)(v0 + 80) = *(_OWORD *)(v5 + 80);
    *(_OWORD *)(v0 + 96) = v7;
    _s14descr1EF8234B1V11AccessModelOMa();
    uint64_t v8 = type metadata accessor for AsyncLazy();
    *uint64_t v6 = v0;
    v6[1] = sub_1A46F0B74;
    AsyncLazy.value.getter(v0 + 16, v8);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1A46F0B74()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1A46F0EA0;
  }
  else {
    uint64_t v2 = sub_1A46F0C88;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1A46F0C88()
{
  uint64_t v1 = (void *)v0[18];
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  sub_1A46F94D0();
  if (v1)
  {
    id v6 = v1;
    id v7 = v1;
    uint64_t v8 = sub_1A49422A0();
    os_log_type_t v9 = sub_1A4942CB0();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v18 = v2;
      uint64_t v17 = v4;
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138543362;
      id v11 = v1;
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
      v0[14] = v12;
      sub_1A4942DC0();
      *uint64_t v16 = v12;
      uint64_t v2 = v18;

      _os_log_impl(&dword_1A460D000, v8, v9, "Failed to reconcile with sync engine, error=%{public}@", v10, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651F50);
      swift_arrayDestroy();
      MEMORY[0x1A6261A10](v16, -1, -1);
      uint64_t v13 = v10;
      uint64_t v4 = v17;
      MEMORY[0x1A6261A10](v13, -1, -1);
    }
    else
    {
    }
  }
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[1];
  return v14(v2, v3, v4, v5);
}

uint64_t sub_1A46F0EA0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A46F0EB8()
{
  v1[10] = v0;
  v1[11] = *v0;
  uint64_t v2 = sub_1A49427A0();
  v1[12] = v2;
  v1[13] = *(void *)(v2 - 8);
  v1[14] = swift_task_alloc();
  uint64_t v3 = sub_1A49427C0();
  v1[15] = v3;
  v1[16] = *(void *)(v3 - 8);
  v1[17] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1A46F0FFC, 0, 0);
}

void sub_1A46F0FFC()
{
  if (*(void *)(v0[10] + 16))
  {
    uint64_t v1 = (void *)v0[11];
    uint64_t v2 = v1[10];
    v0[6] = v2;
    v0[18] = v2;
    uint64_t v3 = v1[11];
    uint64_t v4 = v1[12];
    v0[19] = v4;
    uint64_t v5 = v1[13];
    v0[7] = v3;
    v0[8] = v4;
    v0[9] = v5;
    _s14descr1EF8234B1V11AccessModelOMa();
    uint64_t v6 = type metadata accessor for AsyncLazy();
    AsyncLazy.loadedValue.getter(v6, (uint64_t)(v0 + 2));
    uint64_t v7 = v0[2];
    uint64_t v8 = v0[3];
    v0[20] = v7;
    v0[21] = v8;
    uint64_t v10 = v0[4];
    unint64_t v9 = v0[5];
    v0[22] = v10;
    v0[23] = v9;
    if ((v9 & 0x3000000000000000) == 0x2000000000000000)
    {
      unint64_t v11 = v9 & 0xCFFFFFFFFFFFFFFFLL;
      swift_retain();
      swift_retain();
      sub_1A46EE638(v10, v11);
      sub_1A46E2CD0(v10, v11);
      swift_release();
      uint64_t v12 = (void *)swift_task_alloc();
      v0[24] = v12;
      void *v12 = v0;
      v12[1] = sub_1A46F11F4;
      sub_1A46F984C(1);
    }
    else
    {
      sub_1A46EE728(v7, v8, v10, v9);
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v13 = (void (*)(void))v0[1];
      v13();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1A46F11F4()
{
  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1A46F1654;
  }
  else {
    uint64_t v2 = sub_1A46F1308;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1A46F1308()
{
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v4 = v0[13];
  uint64_t v3 = (uint64_t *)v0[14];
  uint64_t v5 = v0[12];
  sub_1A4942810();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651D60);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1A4972470;
  *(void *)(v6 + 32) = sub_1A4701F10(v2, v1);
  sub_1A4942B60();
  uint64_t *v3 = v6;
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v3, *MEMORY[0x1E4F19B30], v5);
  sub_1A49427B0();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[26] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1A46F1464;
  uint64_t v8 = v0[17];
  return MEMORY[0x1F40D6010](v8);
}

uint64_t sub_1A46F1464()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[16] + 8))(v2[17], v2[15]);
  if (v0) {
    uint64_t v3 = sub_1A46F16F0;
  }
  else {
    uint64_t v3 = sub_1A46F15CC;
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

uint64_t sub_1A46F15CC()
{
  swift_release();
  sub_1A46EE728(v0[20], v0[21], v0[22], v0[23]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1A46F1654()
{
  uint64_t v1 = v0[22];
  unint64_t v2 = v0[23];
  uint64_t v4 = v0[20];
  uint64_t v3 = v0[21];
  swift_release();
  sub_1A46EE728(v4, v3, v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1A46F16F0()
{
  sub_1A46EE728(v0[20], v0[21], v0[22], v0[23]);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1A46F1778()
{
  *(void *)(v1 + 56) = v0;
  return MEMORY[0x1F4188298](sub_1A46F1798, 0, 0);
}

uint64_t sub_1A46F1798()
{
  sub_1A46F96B4((_OWORD *)(v0 + 16));
  BOOL v1 = sub_1A4702868();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (v1)
  {
    unint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v2;
    void *v2 = v0;
    v2[1] = sub_1A46F18C8;
    return sub_1A46F0EB8();
  }
  else
  {
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

uint64_t sub_1A46F18C8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  BOOL v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t PrivateZone.querySome<A, B>(options:executor:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v8[7] = a7;
  v8[8] = v7;
  v8[5] = a5;
  v8[6] = a6;
  v8[3] = a3;
  v8[4] = a4;
  v8[2] = a1;
  uint64_t v9 = *a2;
  v8[9] = *v7;
  v8[10] = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  v8[11] = v10;
  void *v10 = v8;
  v10[1] = sub_1A46F1AC8;
  v10[15] = v7;
  v10[16] = *v7;
  return MEMORY[0x1F4188298](sub_1A46F0A7C, 0, 0);
}

uint64_t sub_1A46F1AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)*v5;
  v6[12] = a1;
  v6[13] = a2;
  v6[14] = a3;
  v6[15] = a4;
  v6[16] = v4;
  swift_task_dealloc();
  if (v4)
  {
    uint64_t v7 = (uint64_t (*)(void))v6[1];
    return v7();
  }
  else
  {
    return MEMORY[0x1F4188298](sub_1A46F1C04, 0, 0);
  }
}

uint64_t sub_1A46F1C04()
{
  uint64_t v1 = *(void *)(v0 + 80);
  if ((v1 & 2) != 0)
  {
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v12;
    void *v12 = v0;
    v12[1] = sub_1A46F1E4C;
    return sub_1A46F0EB8();
  }
  else if (v1)
  {
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v14;
    void *v14 = v0;
    v14[1] = sub_1A46F2090;
    v14[7] = *(void *)(v0 + 64);
    return MEMORY[0x1F4188298](sub_1A46F1798, 0, 0);
  }
  else
  {
    unint64_t v2 = *(void *)(v0 + 120);
    uint64_t v4 = *(void *)(v0 + 104);
    uint64_t v3 = *(void *)(v0 + 112);
    uint64_t v5 = *(void *)(v0 + 96);
    uint64_t v6 = *(void **)(v0 + 72);
    uint64_t v7 = *(void *)(v0 + 56);
    uint64_t v8 = swift_task_alloc();
    long long v9 = *(_OWORD *)(v0 + 40);
    long long v10 = *(_OWORD *)(v0 + 24);
    *(void *)(v8 + 16) = v6[10];
    *(void *)(v8 + 24) = v6[11];
    *(_OWORD *)(v8 + 32) = v9;
    *(void *)(v8 + 48) = v6[12];
    *(void *)(v8 + 56) = v6[13];
    *(void *)(v8 + 64) = v7;
    *(_OWORD *)(v8 + 72) = v10;
    sub_1A46EDEC8();
    sub_1A46EE728(v5, v4, v3, v2);
    swift_task_dealloc();
    unint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
}

uint64_t sub_1A46F1E4C()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = sub_1A46F22D4;
  }
  else {
    unint64_t v2 = sub_1A46F1F60;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1A46F1F60()
{
  uint64_t v1 = *(void *)(v0 + 112);
  unint64_t v2 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v5 = *(void **)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v7 = swift_task_alloc();
  long long v8 = *(_OWORD *)(v0 + 40);
  long long v9 = *(_OWORD *)(v0 + 24);
  *(void *)(v7 + 16) = v5[10];
  *(void *)(v7 + 24) = v5[11];
  *(_OWORD *)(v7 + 32) = v8;
  *(void *)(v7 + 48) = v5[12];
  *(void *)(v7 + 56) = v5[13];
  *(void *)(v7 + 64) = v6;
  *(_OWORD *)(v7 + 72) = v9;
  sub_1A46EDEC8();
  sub_1A46EE728(v4, v3, v1, v2);
  swift_task_dealloc();
  long long v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_1A46F2090()
{
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = sub_1A46F233C;
  }
  else {
    unint64_t v2 = sub_1A46F21A4;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1A46F21A4()
{
  uint64_t v1 = *(void *)(v0 + 112);
  unint64_t v2 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v5 = *(void **)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v7 = swift_task_alloc();
  long long v8 = *(_OWORD *)(v0 + 40);
  long long v9 = *(_OWORD *)(v0 + 24);
  *(void *)(v7 + 16) = v5[10];
  *(void *)(v7 + 24) = v5[11];
  *(_OWORD *)(v7 + 32) = v8;
  *(void *)(v7 + 48) = v5[12];
  *(void *)(v7 + 56) = v5[13];
  *(void *)(v7 + 64) = v6;
  *(_OWORD *)(v7 + 72) = v9;
  sub_1A46EDEC8();
  sub_1A46EE728(v4, v3, v1, v2);
  swift_task_dealloc();
  long long v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_1A46F22D4()
{
  sub_1A46EE728(v0[12], v0[13], v0[14], v0[15]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1A46F233C()
{
  sub_1A46EE728(v0[12], v0[13], v0[14], v0[15]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t PrivateZone.add(_:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = *v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  void *v3 = v2;
  v3[1] = sub_1A46F24A0;
  v3[15] = v1;
  v3[16] = *v1;
  return MEMORY[0x1F4188298](sub_1A46F0A7C, 0, 0);
}

uint64_t sub_1A46F24A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)*v5;
  v6[5] = a1;
  v6[6] = a2;
  v6[7] = a3;
  v6[8] = a4;
  v6[9] = v4;
  swift_task_dealloc();
  if (v4)
  {
    uint64_t v7 = (uint64_t (*)(void))v6[1];
    return v7();
  }
  else
  {
    return MEMORY[0x1F4188298](sub_1A46F25DC, 0, 0);
  }
}

uint64_t sub_1A46F25DC()
{
  uint64_t v1 = v0;
  uint64_t v21 = *(void *)(v0 + 64);
  uint64_t v22 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void **)(v0 + 24);
  uint64_t v20 = *(void *)(v0 + 16);
  uint64_t v6 = v5[10];
  uint64_t v7 = v5[11];
  uint64_t v8 = v5[12];
  uint64_t v9 = v5[13];
  *(unsigned char *)(v0 + 80) = sub_1A46EE514(v4, v3, v2, v21);
  long long v10 = (void *)swift_task_alloc();
  void v10[2] = v6;
  v10[3] = v7;
  v10[4] = v8;
  v10[5] = v9;
  v10[6] = v20;
  v10[7] = v0 + 80;
  uint64_t v11 = v7;
  uint64_t v12 = v9;
  sub_1A46EE0D0((uint64_t)sub_1A46FC3EC, (uint64_t)v10, v4, v3, v2, v21, v6, v11, v8, v9);
  if (v22)
  {
    sub_1A46EE728(*(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v1 + 8);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v15 = *(void *)(v1 + 56);
    uint64_t v14 = *(void *)(v1 + 64);
    uint64_t v17 = *(void *)(v1 + 40);
    uint64_t v16 = *(void *)(v1 + 48);
    if (*(unsigned char *)(v1 + 80) == 1)
    {
      uint64_t v23 = *(void *)(v1 + 16);
      uint64_t v18 = (void *)swift_task_alloc();
      v18[2] = v6;
      v18[3] = v11;
      v18[4] = v8;
      v18[5] = v12;
      v18[6] = v23;
      sub_1A46EE388((uint64_t)sub_1A46FC410, (uint64_t)v18, v17, v16, v15, v14);
      sub_1A46EE728(*(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
      swift_task_dealloc();
    }
    else
    {
      sub_1A46EE728(*(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
    }
    uint64_t v13 = *(uint64_t (**)(void))(v1 + 8);
  }
  return v13();
}

uint64_t sub_1A46F27D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v44 = a1;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF570);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v43 = (char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a5 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  unint64_t v42 = (char *)v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v45 = (char *)v35 - v19;
  uint64_t v20 = swift_bridgeObjectRetain();
  if (!MEMORY[0x1A625FD40](v20, a5))
  {
LABEL_12:
    uint64_t result = swift_bridgeObjectRelease();
    if (*(unsigned char *)a4) {
      return result;
    }
    goto LABEL_16;
  }
  v35[0] = a4;
  v35[1] = a2;
  uint64_t v53 = v6;
  uint64_t v21 = 0;
  uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 16);
  uint64_t v39 = a6 + 16;
  uint64_t v41 = (void (**)(char *, long long *, uint64_t))(v16 + 16);
  uint64_t v37 = (void (**)(char *, char *, uint64_t))(v16 + 32);
  uint64_t v40 = (void (**)(char *, uint64_t))(v16 + 8);
  do
  {
    a4 = sub_1A4942BB0();
    sub_1A4942B80();
    if (a4)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v45, a3+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v21, a5);
      uint64_t v22 = v21 + 1;
      if (__OFADD__(v21, 1)) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t result = sub_1A4942E10();
      if (v36 != 8)
      {
        __break(1u);
        return result;
      }
      a4 = result;
      *(void *)&long long v50 = result;
      (*v41)(v45, &v50, a5);
      swift_unknownObjectRelease();
      uint64_t v22 = v21 + 1;
      if (__OFADD__(v21, 1))
      {
LABEL_11:
        __break(1u);
        goto LABEL_12;
      }
    }
    uint64_t v23 = v16;
    uint64_t v24 = v42;
    (*v37)(v42, v45, a5);
    uint64_t v7 = v38(a5, a6);
    uint64_t v25 = v43;
    sub_1A4942190();
    uint64_t v26 = sub_1A49421A0();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 0, 1, v26);
    sub_1A4942520();
    swift_release();
    sub_1A49424B0();
    uint64_t v27 = v53;
    sub_1A4942470();
    uint64_t v53 = v27;
    if (v27)
    {
      swift_release();
      (*v40)(v24, a5);
      return swift_bridgeObjectRelease();
    }
    (*v40)(v24, a5);
    swift_release();
    ++v21;
    uint64_t v16 = v23;
  }
  while (v22 != MEMORY[0x1A625FD40](a3, a5));
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v7 = v53;
  if ((*(unsigned char *)v35[0] & 1) == 0)
  {
LABEL_16:
    sub_1A49424C0();
    long long v29 = (void *)sub_1A4942480();
    if (v7)
    {
      return swift_release();
    }
    else
    {
      if (v29[2])
      {
        uint64_t v31 = v29[4];
        uint64_t v30 = v29[5];
        uint64_t v33 = v29[6];
        uint64_t v32 = v29[7];
        uint64_t v34 = v29[8];
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_1A47024BC((uint64_t)v49);
        swift_release();
        uint64_t v32 = v49[3];
        uint64_t v34 = v49[4];
        uint64_t v30 = v49[1];
        uint64_t v33 = v49[2];
        uint64_t v31 = v49[0];
      }
      *(void *)&long long v50 = v31;
      *((void *)&v50 + 1) = v30;
      *(void *)&long long v51 = v33;
      *((void *)&v51 + 1) = v32;
      uint64_t v52 = v34;
      sub_1A47027A8();
      LOBYTE(v46) = 1;
      sub_1A4942520();
      swift_release();
      sub_1A49424B0();
      long long v46 = v50;
      long long v47 = v51;
      uint64_t v48 = v52;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1A4942470();
      swift_release();
      swift_release_n();
      swift_release_n();
      swift_release_n();
      swift_release_n();
      return swift_release_n();
    }
  }
  return result;
}

uint64_t sub_1A46F2D3C(void (*a1)(void *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v17 = sub_1A4942820();
  uint64_t v6 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = MEMORY[0x1E4FBC860];
  if (v9)
  {
    uint64_t v22 = MEMORY[0x1E4FBC860];
    sub_1A46FD0D0(0, v9, 0);
    uint64_t v10 = v22;
    v16[1] = v6 + 32;
    uint64_t v11 = (uint64_t *)(a3 + 40);
    while (1)
    {
      uint64_t v12 = *v11;
      v21[0] = *(v11 - 1);
      v21[1] = v12;
      swift_bridgeObjectRetain();
      v18(v21, &v20);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      swift_bridgeObjectRelease();
      uint64_t v22 = v10;
      unint64_t v14 = *(void *)(v10 + 16);
      unint64_t v13 = *(void *)(v10 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_1A46FD0D0(v13 > 1, v14 + 1, 1);
        uint64_t v10 = v22;
      }
      v11 += 2;
      *(void *)(v10 + 16) = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v14, v8, v17);
      if (!--v9) {
        return v10;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v10;
}

uint64_t sub_1A46F2F0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), void (*a4)(void))
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v5)
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
    sub_1A4942E90();
    uint64_t v9 = *(void *)(a3(0) - 8);
    uint64_t v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    do
    {
      a4();
      sub_1A4942E60();
      sub_1A4942EA0();
      sub_1A4942EB0();
      sub_1A4942E70();
      v10 += v11;
      --v5;
    }
    while (v5);
    return v12;
  }
  return result;
}

uint64_t sub_1A46F302C(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v28 = a5;
  uint64_t v29 = a8;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v27 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v40 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v26 - v11;
  MEMORY[0x1F4188790](v10);
  unint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(v15 - 8);
  uint64_t v31 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v26 - v16;
  uint64_t v18 = sub_1A4942C50();
  if (!v18) {
    return sub_1A4942BA0();
  }
  uint64_t v19 = v18;
  uint64_t v43 = sub_1A4942ED0();
  uint64_t v32 = sub_1A4942EE0();
  sub_1A4942E80();
  uint64_t v36 = v8;
  uint64_t result = sub_1A4942C40();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v34 = (void (**)(char *))(v33 + 2);
    uint64_t v35 = v14;
    ++v33;
    while (1)
    {
      uint64_t v21 = (void (*)(char *, void))sub_1A4942C70();
      uint64_t v22 = v12;
      uint64_t v23 = v12;
      uint64_t v24 = AssociatedTypeWitness;
      (*v34)(v22);
      v21(v42, 0);
      uint64_t v25 = v41;
      v38(v23, v40);
      if (v25) {
        break;
      }
      uint64_t v41 = 0;
      (*v33)(v23, v24);
      sub_1A4942EC0();
      sub_1A4942C60();
      --v19;
      uint64_t v12 = v23;
      if (!v19)
      {
        (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
        return v43;
      }
    }
    (*v33)(v23, v24);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(v29, v40, v28);
  }
  return result;
}

uint64_t PrivateZone.remove(_:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = *v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  void *v3 = v2;
  v3[1] = sub_1A46F3528;
  v3[15] = v1;
  v3[16] = *v1;
  return MEMORY[0x1F4188298](sub_1A46F0A7C, 0, 0);
}

uint64_t sub_1A46F3528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)*v5;
  v6[5] = a1;
  v6[6] = a2;
  v6[7] = a3;
  v6[8] = a4;
  v6[9] = v4;
  swift_task_dealloc();
  if (v4)
  {
    uint64_t v7 = (uint64_t (*)(void))v6[1];
    return v7();
  }
  else
  {
    return MEMORY[0x1F4188298](sub_1A46F3664, 0, 0);
  }
}

uint64_t sub_1A46F3664()
{
  uint64_t v1 = v0;
  uint64_t v21 = *(void *)(v0 + 64);
  uint64_t v22 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void **)(v0 + 24);
  uint64_t v20 = *(void *)(v0 + 16);
  uint64_t v6 = v5[10];
  uint64_t v7 = v5[11];
  uint64_t v8 = v5[12];
  uint64_t v9 = v5[13];
  *(unsigned char *)(v0 + 80) = sub_1A46EE514(v4, v3, v2, v21);
  uint64_t v10 = (void *)swift_task_alloc();
  void v10[2] = v6;
  v10[3] = v7;
  v10[4] = v8;
  v10[5] = v9;
  v10[6] = v20;
  v10[7] = v0 + 80;
  uint64_t v11 = v7;
  uint64_t v12 = v9;
  sub_1A46EE0D0((uint64_t)sub_1A46FC530, (uint64_t)v10, v4, v3, v2, v21, v6, v11, v8, v9);
  if (v22)
  {
    sub_1A46EE728(*(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v1 + 8);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v15 = *(void *)(v1 + 56);
    uint64_t v14 = *(void *)(v1 + 64);
    uint64_t v17 = *(void *)(v1 + 40);
    uint64_t v16 = *(void *)(v1 + 48);
    if (*(unsigned char *)(v1 + 80) == 1)
    {
      uint64_t v23 = *(void *)(v1 + 16);
      uint64_t v18 = (void *)swift_task_alloc();
      v18[2] = v6;
      v18[3] = v11;
      v18[4] = v8;
      v18[5] = v12;
      v18[6] = v23;
      sub_1A46EE388((uint64_t)sub_1A46FC77C, (uint64_t)v18, v17, v16, v15, v14);
      sub_1A46EE728(*(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
      swift_task_dealloc();
    }
    else
    {
      sub_1A46EE728(*(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
    }
    uint64_t v13 = *(uint64_t (**)(void))(v1 + 8);
  }
  return v13();
}

uint64_t sub_1A46F3860(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_1A46E2898;
  return PrivateZone.query<A>(options:executor:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1A46F392C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v15;
  void *v15 = v7;
  v15[1] = sub_1A46E2898;
  return PrivateZone.querySome<A, B>(options:executor:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1A46F3A14(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_1A46E2688;
  return PrivateZone.add(_:)(a1);
}

uint64_t sub_1A46F3AAC(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_1A46E2898;
  return PrivateZone.remove(_:)(a1);
}

uint64_t PrivateZone.handleEvent(_:syncEngine:)(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&dword_1E9651D50 + dword_1E9651D50);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_1A46E2688;
  return v5(a1);
}

uint64_t sub_1A46F3BF0(uint64_t a1)
{
  v2[24] = a1;
  v2[25] = v1;
  v2[26] = *v1;
  uint64_t v3 = sub_1A4942850();
  v2[27] = v3;
  v2[28] = *(void *)(v3 - 8);
  v2[29] = swift_task_alloc();
  uint64_t v4 = sub_1A4942870();
  v2[30] = v4;
  v2[31] = *(void *)(v4 - 8);
  v2[32] = swift_task_alloc();
  uint64_t v5 = sub_1A49428A0();
  v2[33] = v5;
  v2[34] = *(void *)(v5 - 8);
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  uint64_t v6 = sub_1A49428D0();
  v2[38] = v6;
  v2[39] = *(void *)(v6 - 8);
  v2[40] = swift_task_alloc();
  uint64_t v7 = sub_1A4942920();
  v2[41] = v7;
  v2[42] = *(void *)(v7 - 8);
  v2[43] = swift_task_alloc();
  uint64_t v8 = sub_1A4942C90();
  v2[44] = v8;
  v2[45] = *(void *)(v8 - 8);
  v2[46] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651E58);
  v2[47] = swift_task_alloc();
  uint64_t v9 = sub_1A49428F0();
  v2[48] = v9;
  v2[49] = *(void *)(v9 - 8);
  v2[50] = swift_task_alloc();
  uint64_t v10 = sub_1A4942840();
  v2[51] = v10;
  v2[52] = *(void *)(v10 - 8);
  v2[53] = swift_task_alloc();
  uint64_t v11 = sub_1A4942930();
  v2[54] = v11;
  v2[55] = *(void *)(v11 - 8);
  v2[56] = swift_task_alloc();
  v2[57] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1A46F4014, 0, 0);
}

void sub_1A46F4014()
{
  v181 = v0;
  uint64_t v1 = v0[25];
  if (!*(void *)(v1 + 16))
  {
    __break(1u);
    return;
  }
  uint64_t v2 = v0;
  uint64_t v3 = (uint64_t)(v0 + 7);
  uint64_t v4 = (void *)v0[26];
  uint64_t v5 = *(void *)(v1 + 40);
  long long v6 = *(_OWORD *)(v1 + 24);
  uint64_t v178 = *(void *)(v1 + 16);
  long long v179 = v6;
  uint64_t v180 = v5;
  uint64_t v7 = v4[10];
  uint64_t v8 = v4[11];
  uint64_t v9 = v4[12];
  uint64_t v10 = v4[13];
  v2[11] = v7;
  v2[12] = v8;
  v2[13] = v9;
  v2[14] = v10;
  _s14descr1EF8234B1V11AccessModelOMa();
  uint64_t v11 = type metadata accessor for AsyncLazy();
  AsyncLazy.loadedValue.getter(v11, v3);
  uint64_t v173 = v10;
  uint64_t v174 = v8;
  uint64_t v13 = v2[7];
  uint64_t v12 = v2[8];
  uint64_t v14 = v2[9];
  unint64_t v15 = v2[10];
  if ((v15 & 0x3000000000000000) == 0x2000000000000000)
  {
    uint64_t v167 = v7;
    uint64_t v16 = v2[57];
    uint64_t v17 = v2[9];
    uint64_t v18 = v2[54];
    uint64_t v19 = v2[55];
    unint64_t v172 = v2[10];
    unint64_t v20 = v15 & 0xCFFFFFFFFFFFFFFFLL;
    uint64_t v21 = v2[24];
    swift_retain();
    uint64_t v171 = v12;
    swift_retain();
    sub_1A46EE638(v17, v20);
    sub_1A46E2CD0(v17, v20);
    swift_release();
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
    v22(v16, v21, v18);
    int v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 88))(v16, v18);
    if (v23 == *MEMORY[0x1E4F19B50])
    {
      uint64_t v24 = v2[57];
      uint64_t v25 = v2[52];
      uint64_t v26 = v2[53];
      uint64_t v27 = v2[51];
      (*(void (**)(uint64_t, void))(v2[55] + 96))(v24, v2[54]);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v26, v24, v27);
      *(void *)(swift_task_alloc() + 16) = v26;
      sub_1A46F57E0();
      uint64_t v29 = v2[52];
      uint64_t v28 = v2[53];
      uint64_t v30 = v2[51];
      sub_1A46EE728(v13, v171, v17, v172);
      swift_release();
      swift_task_dealloc();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
LABEL_39:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v32 = (void (*)(void))v2[1];
      goto LABEL_6;
    }
    uint64_t v168 = v17;
    uint64_t v169 = v13;
    v170 = v2;
    if (v23 == *MEMORY[0x1E4F19B70])
    {
      uint64_t v33 = v2[57];
      uint64_t v35 = v2[31];
      uint64_t v34 = v2[32];
      uint64_t v36 = v2[30];
      (*(void (**)(uint64_t, void))(v2[55] + 96))(v33, v2[54]);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v34, v33, v36);
      uint64_t v37 = (void *)swift_task_alloc();
      v37[2] = v167;
      v37[3] = v174;
      v37[4] = v9;
      v37[5] = v173;
      sub_1A46EE0D0((uint64_t)sub_1A4700138, (uint64_t)v37, v13, v171, v17, v172, v167, v174, v9, v173);
      uint64_t v71 = v2[28];
      uint64_t v72 = v2[29];
      uint64_t v73 = v2[27];
      swift_task_dealloc();
      sub_1A4942860();
      int v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 88))(v72, v73);
      if (v74 != *MEMORY[0x1E4F19B60])
      {
        if (v74 == *MEMORY[0x1E4F19B68])
        {
          uint64_t v83 = (id *)v2[29];
          uint64_t v84 = v2[27];
          uint64_t v85 = v2[28];
          (*(void (**)(void, void))(v2[31] + 8))(v2[32], v2[30]);
          sub_1A46EE728(v13, v171, v168, v172);
          swift_release();
          (*(void (**)(id *, uint64_t))(v85 + 96))(v83, v84);
        }
        else
        {
          if (v74 != *MEMORY[0x1E4F19B58])
          {
            sub_1A4942F50();
            return;
          }
          uint64_t v95 = v2[29];
          uint64_t v96 = v2[27];
          uint64_t v97 = v2[28];
          (*(void (**)(void, void))(v2[31] + 8))(v2[32], v2[30]);
          sub_1A46EE728(v13, v171, v168, v172);
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v97 + 96))(v95, v96);
          char v98 = *(void **)v95;
          v99 = *(void **)(v95 + 8);
        }
        goto LABEL_39;
      }
      uint64_t v75 = (id *)v2[29];
      (*(void (**)(id *, void))(v2[28] + 96))(v75, v2[27]);

      sub_1A46F5CD4();
      (*(void (**)(void, void))(v2[31] + 8))(v2[32], v2[30]);
      sub_1A46EE728(v13, v171, v168, v172);
      goto LABEL_40;
    }
    uint64_t v38 = v22;
    uint64_t v39 = v13;
    if (v23 == *MEMORY[0x1E4F19B80])
    {
      uint64_t v40 = v2[57];
      uint64_t v42 = v2[49];
      uint64_t v41 = v2[50];
      uint64_t v43 = v2[48];
      (*(void (**)(uint64_t, void))(v2[55] + 96))(v40, v2[54]);
      uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v41, v40, v43);
      uint64_t v45 = MEMORY[0x1A625FA50](v44);
      uint64_t v46 = *(void *)(v45 + 16);
      uint64_t v47 = v2[45];
      if (v46)
      {
        uint64_t v49 = *(void (**)(uint64_t, unint64_t, uint64_t))(v47 + 16);
        uint64_t v48 = v47 + 16;
        v176 = v49;
        unint64_t v50 = v45 + ((*(unsigned __int8 *)(v48 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 64));
        uint64_t v158 = *(void *)(v48 + 56);
        v159 = (void (**)(void, void))(v48 - 8);
        v165 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 40);
        while (1)
        {
          uint64_t v51 = v2[47];
          uint64_t v52 = v2[44];
          v176(v51, v50, v52);
          uint64_t v53 = *v165;
          (*v165)(v51, 0, 1, v52);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 32))(v51, 1, v52) == 1) {
            goto LABEL_37;
          }
          uint64_t v54 = (*(uint64_t (**)(void, void, void))(v48 + 16))(v2[46], v2[47], v2[44]);
          uint64_t v55 = (void *)MEMORY[0x1A625FDF0](v54);
          id v56 = objc_msgSend(v55, sel_zoneName);

          uint64_t v57 = sub_1A4942AE0();
          uint64_t v59 = v58;

          if (v57 == (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v167, v9) && v59 == v60) {
            break;
          }
          char v62 = sub_1A4943080();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v62) {
            goto LABEL_24;
          }
          uint64_t v2 = v170;
          (*v159)(v170[46], v170[44]);
LABEL_15:
          v50 += v158;
          if (!--v46)
          {
            v53(v2[47], 1, 1, v2[44]);
            goto LABEL_37;
          }
        }
        swift_bridgeObjectRelease_n();
LABEL_24:
        uint64_t v63 = (void *)swift_task_alloc();
        v63[2] = v167;
        v63[3] = v174;
        v63[4] = v9;
        v63[5] = v173;
        sub_1A46EE0D0((uint64_t)sub_1A4700300, (uint64_t)v63, v169, v171, v17, v172, v167, v174, v9, v173);
        uint64_t v2 = v170;
        (*v159)(v170[46], v170[44]);
        swift_task_dealloc();
        goto LABEL_15;
      }
      (*(void (**)(void, uint64_t, uint64_t, void))(v47 + 56))(v2[47], 1, 1, v2[44]);
LABEL_37:
      uint64_t v90 = v2[49];
      uint64_t v89 = v2[50];
      uint64_t v91 = v2[48];
      swift_release();
      sub_1A46EE728(v169, v171, v168, v172);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v23 == *MEMORY[0x1E4F19B88])
      {
        uint64_t v64 = v2[57];
        uint64_t v66 = v2[42];
        uint64_t v65 = v2[43];
        uint64_t v67 = v2[41];
        (*(void (**)(uint64_t, void))(v2[55] + 96))(v64, v2[54]);
        uint64_t v68 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v65, v64, v67);
        uint64_t v69 = MEMORY[0x1A625FA70](v68);
        uint64_t v70 = sub_1A46F2F0C(v69, (uint64_t)(v2 + 22), MEMORY[0x1E4F19BC8], MEMORY[0x1E4F19BC0]);
        swift_bridgeObjectRelease();
        sub_1A46F5958(v70, (uint64_t)sub_1A4700A5C);
        uint64_t v92 = swift_bridgeObjectRelease();
        uint64_t v93 = MEMORY[0x1A625FA80](v92);
        uint64_t v94 = sub_1A46F2F0C(v93, (uint64_t)(v2 + 23), MEMORY[0x1E4F19BD8], MEMORY[0x1E4F19BD0]);
        swift_bridgeObjectRelease();
        sub_1A46F5958(v94, (uint64_t)sub_1A4700390);
        (*(void (**)(void, void))(v2[42] + 8))(v2[43], v2[41]);
        sub_1A46EE728(v13, v171, v168, v172);
        swift_bridgeObjectRelease();
LABEL_40:
        swift_release();
        goto LABEL_39;
      }
      if (v23 != *MEMORY[0x1E4F19B78])
      {
        if (v23 == *MEMORY[0x1E4F19B90])
        {
          sub_1A46F57E0();
          uint64_t v86 = v2[57];
          uint64_t v87 = v2[54];
          uint64_t v88 = v2[55];
          sub_1A46EE728(v13, v171, v168, v172);
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v86, v87);
        }
        else
        {
          v38(v2[56], v2[24], v2[54]);
          os_log_t v100 = sub_1A49422A0();
          os_log_type_t v101 = sub_1A4942CC0();
          BOOL v102 = os_log_type_enabled(v100, v101);
          uint64_t v104 = v2[55];
          uint64_t v103 = v2[56];
          uint64_t v105 = v2[54];
          if (v102)
          {
            os_log_t v106 = (uint8_t *)swift_slowAlloc();
            uint64_t v177 = swift_slowAlloc();
            uint64_t v178 = v177;
            *(_DWORD *)os_log_t v106 = 136446210;
            sub_1A47000F0(&qword_1E9651E50, MEMORY[0x1E4F19B98]);
            uint64_t v107 = sub_1A4943050();
            v170[21] = sub_1A46FCA78(v107, v108, &v178);
            sub_1A4942DC0();
            swift_bridgeObjectRelease();
            uint64_t v109 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
            v109(v103, v105);
            _os_log_impl(&dword_1A460D000, v100, v101, "Will ignore sync engine event, event=%{public}s", v106, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1A6261A10](v177, -1, -1);
            uint64_t v110 = v106;
            uint64_t v2 = v170;
            MEMORY[0x1A6261A10](v110, -1, -1);
            sub_1A46EE728(v13, v171, v168, v172);
            swift_release();
          }
          else
          {
            sub_1A46EE728(v13, v171, v168, v172);
            swift_release();

            uint64_t v109 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
            v109(v103, v105);
          }
          v109(v2[57], v2[54]);
        }
        goto LABEL_39;
      }
      uint64_t v76 = v2[57];
      uint64_t v78 = v2[39];
      uint64_t v77 = v2[40];
      uint64_t v79 = v2[38];
      (*(void (**)(uint64_t, void))(v2[55] + 96))(v76, v2[54]);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 32))(v77, v76, v79);
      uint64_t v80 = (void *)swift_task_alloc();
      v80[2] = v167;
      v80[3] = v174;
      v80[4] = v9;
      v80[5] = v173;
      v80[6] = v77;
      uint64_t v81 = v171;
      unint64_t v82 = v172;
      sub_1A46EE0D0((uint64_t)sub_1A470017C, (uint64_t)v80, v13, v171, v17, v172, v167, v174, v9, v173);
      uint64_t v111 = swift_task_dealloc();
      uint64_t v112 = MEMORY[0x1A625FA20](v111);
      uint64_t v113 = *(void *)(v112 + 16);
      if (v113)
      {
        uint64_t v114 = v2[34];
        uint64_t v115 = *(void (**)(void, uint64_t, uint64_t))(v114 + 16);
        v114 += 16;
        v175 = v115;
        unint64_t v116 = v112 + ((*(unsigned __int8 *)(v114 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v114 + 64));
        uint64_t v117 = (void (**)(os_log_type_t *, os_log_t))(v114 - 8);
        unsigned int v157 = *MEMORY[0x1E4F19B38];
        uint64_t v166 = *(void *)(v114 + 56);
        v115(v2[37], v116, v2[33]);
        while (1)
        {
          v122 = (void *)sub_1A4942880();
          v2[20] = v122;
          type metadata accessor for CKError(0);
          sub_1A47000F0((unint64_t *)&unk_1E9651FF0, type metadata accessor for CKError);
          sub_1A49420C0();

          uint64_t v123 = v2[19];
          if (v123 == 26)
          {
            *(void *)type = v2[37];
            os_log_t log = (os_log_t)v2[33];
            uint64_t v128 = (void *)MEMORY[0x1A625FA00]();
            id v160 = objc_msgSend(v128, sel_recordID);

            sub_1A49429A0();
            __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651E60);
            uint64_t v129 = sub_1A49427D0();
            uint64_t v130 = *(void *)(v129 - 8);
            unint64_t v131 = (*(unsigned __int8 *)(v130 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v130 + 80);
            uint64_t v132 = swift_allocObject();
            *(_OWORD *)(v132 + 16) = xmmword_1A4972120;
            v133 = v117;
            v134 = (void *)(v132 + v131);
            id v135 = objc_msgSend(v160, sel_zoneID);
            id v136 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1A310]), sel_initWithZoneID_, v135);

            void *v134 = v136;
            v137 = v134;
            uint64_t v117 = v133;
            (*(void (**)(void *, void, uint64_t))(v130 + 104))(v137, v157, v129);
            sub_1A4942970();
            swift_bridgeObjectRelease();
            swift_release();
            sub_1A49429A0();
            __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651E18);
            uint64_t v138 = *(void *)(sub_1A4942820() - 8);
            unint64_t v139 = (*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80);
            uint64_t v140 = swift_allocObject();
            *(_OWORD *)(v140 + 16) = xmmword_1A4972120;
            v141 = (void *)(v140 + v139);
            uint64_t v2 = v170;
            void *v141 = v160;
            (*(void (**)(void))(v138 + 104))();
            uint64_t v81 = v171;
            unint64_t v82 = v172;
            id v142 = v160;
            sub_1A4942980();
            swift_bridgeObjectRelease();
            swift_release();

            (*v117)(*(os_log_type_t **)type, log);
          }
          else if (v123 == 14)
          {
            uint64_t v124 = (void *)sub_1A4942880();
            uint64_t v125 = (void *)sub_1A4942A40();

            if (v125)
            {
              __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651D60);
              uint64_t inited = swift_initStackObject();
              *(_OWORD *)(inited + 16) = xmmword_1A4972470;
              *(void *)(inited + 32) = v125;
              uint64_t v178 = inited;
              sub_1A4942B60();
              id v127 = v125;
              sub_1A46F5958(v178, (uint64_t)sub_1A4700A5C);
              (*v117)((os_log_type_t *)v2[37], (os_log_t)v2[33]);
              swift_bridgeObjectRelease();

              unint64_t v82 = v172;
            }
            else
            {
              (*v117)((os_log_type_t *)v2[37], (os_log_t)v2[33]);
            }
          }
          else
          {
            uint64_t v143 = v2[37];
            uint64_t v144 = v2[35];
            uint64_t v145 = v2[33];
            v175(v2[36], v143, v145);
            v175(v144, v143, v145);
            v146 = sub_1A49422A0();
            os_log_type_t v147 = sub_1A4942CB0();
            BOOL v148 = os_log_type_enabled(v146, v147);
            v150 = (os_log_type_t *)v2[35];
            v149 = (os_log_type_t *)v2[36];
            v151 = v2[33];
            if (v148)
            {
              loga = v146;
              uint64_t v152 = swift_slowAlloc();
              v153 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v152 = 138543618;
              uint64_t v154 = MEMORY[0x1A625FA00]();
              *(void *)(v152 + 4) = v154;
              void *v153 = v154;
              os_log_type_t typea = v147;
              v118 = *v117;
              (*v117)(v149, v151);
              *(_WORD *)(v152 + 12) = 2112;
              sub_1A4942880();
              uint64_t v155 = _swift_stdlib_bridgeErrorToNSError();
              *(void *)(v152 + 14) = v155;
              v153[1] = v155;
              v118(v150, v151);
              _os_log_impl(&dword_1A460D000, loga, typea, "Failed to save record to cloud, record=%{public}@, error=%@", (uint8_t *)v152, 0x16u);
              __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651F50);
              swift_arrayDestroy();
              v156 = v153;
              uint64_t v2 = v170;
              MEMORY[0x1A6261A10](v156, -1, -1);
              MEMORY[0x1A6261A10](v152, -1, -1);
              unint64_t v82 = v172;
              v119 = loga;
            }
            else
            {
              v118 = *v117;
              (*v117)((os_log_type_t *)v2[36], (os_log_t)v2[33]);
              v118(v150, v151);
              unint64_t v82 = v172;
              v119 = v146;
            }
            v120 = (os_log_type_t *)v2[37];
            v121 = v2[33];

            v118(v120, v121);
            uint64_t v81 = v171;
          }
          v116 += v166;
          if (!--v113) {
            break;
          }
          v175(v2[37], v116, v2[33]);
        }
        swift_bridgeObjectRelease();
        uint64_t v39 = v169;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v90 = v2[39];
      uint64_t v89 = v2[40];
      uint64_t v91 = v2[38];
      sub_1A46EE728(v39, v81, v168, v82);
      swift_release();
    }
    (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v89, v91);
    goto LABEL_39;
  }
  v2[15] = v7;
  v2[16] = v174;
  v2[17] = v9;
  v2[18] = v173;
  type metadata accessor for PrivateZone.Errors();
  swift_getWitnessTable();
  swift_allocError();
  *uint64_t v31 = 0;
  swift_willThrow();
  sub_1A46EE728(v13, v12, v14, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v32 = (void (*)(void))v2[1];
LABEL_6:
  v32();
}

uint64_t sub_1A46F56E0(uint64_t a1)
{
  uint64_t v2 = sub_1A4942940();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  uint64_t v9 = *(void *)(a1 + 32);
  sub_1A4942830();
  sub_1A47026BC();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_1A46F57E0()
{
  uint64_t v2 = *(void **)v0;
  uint64_t v3 = *(void *)(v0 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + 40);
    long long v19 = *(_OWORD *)(v0 + 24);
    uint64_t v20 = v4;
    uint64_t v5 = v2[10];
    uint64_t v6 = v2[11];
    uint64_t v7 = v2[12];
    uint64_t v8 = v2[13];
    v18[0] = v5;
    v18[1] = v6;
    v18[2] = v7;
    v18[3] = v8;
    v18[4] = v3;
    _s14descr1EF8234B1V11AccessModelOMa();
    uint64_t v9 = type metadata accessor for AsyncLazy();
    uint64_t v10 = AsyncLazy.loadedValue.getter(v9, (uint64_t)v21);
    if (!v1)
    {
      v21[5] = v18;
      uint64_t v11 = v21[0];
      uint64_t v12 = v21[1];
      uint64_t v13 = v21[2];
      unint64_t v14 = v21[3];
      MEMORY[0x1F4188790](v10);
      v17[2] = v5;
      void v17[3] = v6;
      v17[4] = v7;
      v17[5] = v8;
      v17[6] = v16;
      v17[7] = v15;
      sub_1A46EE0D0((uint64_t)sub_1A4700878, (uint64_t)v17, v11, v12, v13, v14, v5, v6, v7, v8);
      sub_1A46EE728(v11, v12, v13, v14);
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1A46F5958(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(v2 + 16);
  if (v5)
  {
    uint64_t v7 = v2;
    uint64_t v9 = *(void *)(v2 + 40);
    long long v33 = *(_OWORD *)(v2 + 24);
    uint64_t v34 = v9;
    uint64_t v10 = v4[10];
    uint64_t v11 = v4[11];
    uint64_t v13 = v4[12];
    uint64_t v12 = v4[13];
    uint64_t v28 = v10;
    uint64_t v29 = v11;
    uint64_t v30 = v13;
    uint64_t v31 = v12;
    uint64_t v32 = v5;
    _s14descr1EF8234B1V11AccessModelOMa();
    uint64_t v14 = type metadata accessor for AsyncLazy();
    AsyncLazy.loadedValue.getter(v14, (uint64_t)&v35);
    if (!v3)
    {
      uint64_t v27 = a1;
      uint64_t v39 = a2;
      uint64_t v16 = v35;
      uint64_t v15 = v36;
      uint64_t v18 = v37;
      unint64_t v17 = v38;
      if ((v38 & 0x3000000000000000) == 0x2000000000000000)
      {
        uint64_t v25 = v38;
        unint64_t v24 = v38 & 0xCFFFFFFFFFFFFFFFLL;
        swift_retain();
        swift_retain();
        sub_1A46EE638(v18, v17 & 0xCFFFFFFFFFFFFFFFLL);
        swift_release();
        uint64_t v19 = swift_release();
        uint64_t v26 = &v24;
        MEMORY[0x1F4188790](v19);
        v23[2] = v27;
        v23[3] = v7;
        unint64_t v20 = v24;
        v23[4] = v18;
        v23[5] = v24;
        unint64_t v21 = v25;
        sub_1A46EE0D0(v39, (uint64_t)v23, v16, v15, v18, v25, v10, v11, v13, v12);
        sub_1A46E2CD0(v18, v20);
        sub_1A46EE728(v16, v15, v18, v21);
      }
      else
      {
        uint64_t v35 = v10;
        uint64_t v36 = v11;
        uint64_t v37 = v13;
        uint64_t v38 = v12;
        type metadata accessor for PrivateZone.Errors();
        swift_getWitnessTable();
        swift_allocError();
        unsigned char *v22 = 0;
        swift_willThrow();
        sub_1A46EE728(v16, v15, v18, v17);
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1A46F5B9C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF590);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v5 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v5;
  uint64_t v10 = *(void *)(a1 + 32);
  sub_1A47027CC();
  sub_1A4942190();
  uint64_t v6 = sub_1A49421A0();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 0, 1, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF570);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v4, 0, 1, v7);
  sub_1A4942520();
  return swift_release();
}

void sub_1A46F5CD4()
{
  uint64_t v2 = *(void **)v0;
  uint64_t v3 = *((void *)v0 + 2);
  if (v3)
  {
    uint64_t v4 = v0;
    uint64_t v5 = *((void *)v0 + 5);
    long long v109 = *(_OWORD *)((char *)v0 + 24);
    uint64_t v110 = v5;
    uint64_t v6 = v2[10];
    unint64_t v7 = v2[11];
    uint64_t v9 = (BOOL (*)(uint64_t, uint64_t, void *))v2[12];
    uint64_t v8 = (unsigned char *)v2[13];
    uint64_t v104 = v6;
    unint64_t v105 = v7;
    os_log_t v106 = v9;
    uint64_t v107 = v8;
    uint64_t v108 = v3;
    _s14descr1EF8234B1V11AccessModelOMa();
    uint64_t v10 = type metadata accessor for AsyncLazy();
    AsyncLazy.loadedValue.getter(v10, (uint64_t)&v111);
    if (!v1)
    {
      uint64_t v103 = v9;
      uint64_t v11 = (uint64_t)v111;
      uint64_t v115 = v112;
      uint64_t v13 = v113;
      unint64_t v12 = v114;
      if ((v114 & 0x3000000000000000) == 0x2000000000000000)
      {
        swift_retain();
        swift_retain();
        unint64_t v101 = v12 & 0xCFFFFFFFFFFFFFFFLL;
        sub_1A46EE638(v13, v12 & 0xCFFFFFFFFFFFFFFFLL);
        uint64_t v14 = swift_release();
        uint64_t v102 = v13;
        v99 = &v85;
        MEMORY[0x1F4188790](v14);
        uint64_t v81 = v6;
        unint64_t v82 = v7;
        uint64_t v15 = v103;
        uint64_t v83 = v103;
        uint64_t v84 = v8;
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651E68);
        char v98 = (BOOL (*)(uint64_t, uint64_t, void *))v8;
        uint64_t v78 = (BOOL (*)(uint64_t, uint64_t, void *))v8;
        uint64_t v17 = v102;
        uint64_t v76 = v16;
        uint64_t v77 = v15;
        sub_1A46EDEC8();
        uint64_t v92 = v11;
        unint64_t v93 = v12;
        uint64_t v95 = v111;
        v99 = (uint64_t *)v112;
        uint64_t v108 = (uint64_t)v111;
        uint64_t v111 = (unsigned char *)v6;
        uint64_t v112 = v7;
        unint64_t v91 = v7;
        uint64_t v113 = (uint64_t)v15;
        unint64_t v114 = (unint64_t)v98;
        uint64_t v19 = _s14descr1EF8234B1V2IDVMa();
        uint64_t WitnessTable = swift_getWitnessTable();
        uint64_t v21 = sub_1A4942A30();
        uint64_t v94 = &v85;
        uint64_t v104 = v21;
        MEMORY[0x1F4188790](v21);
        uint64_t v100 = v6;
        uint64_t v81 = v17;
        unint64_t v82 = v101;
        uint64_t v83 = v4;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651E70);
        uint64_t v96 = v19;
        uint64_t v97 = WitnessTable;
        sub_1A4942A90();
        sub_1A4700B80(&qword_1E9651E78, &qword_1E9651E70);
        sub_1A4942B20();
        uint64_t v89 = 0;
        swift_bridgeObjectRelease();
        uint64_t v90 = (uint64_t)v111;
        uint64_t v108 = (uint64_t)v99;
        uint64_t v104 = sub_1A4942A30();
        MEMORY[0x1F4188790](v104);
        uint64_t v22 = v89;
        sub_1A4942B20();
        uint64_t v23 = swift_bridgeObjectRelease();
        uint64_t v95 = v80;
        v99 = (uint64_t *)v111;
        uint64_t v24 = MEMORY[0x1F4188790](v23);
        uint64_t v25 = (BOOL (*)(uint64_t, uint64_t, void *))v91;
        *(void *)&v80[-48] = v100;
        *(void *)&v80[-40] = v25;
        uint64_t v26 = v103;
        uint64_t v27 = v98;
        MEMORY[0x1F4188790](v24);
        *(void *)&v80[-48] = v100;
        *(void *)&v80[-40] = v25;
        swift_bridgeObjectRetain();
        uint64_t v28 = sub_1A4942A80();
        uint64_t v29 = MEMORY[0x1F4188790](v28);
        *(void *)&v80[-48] = v30;
        *(void *)&v80[-40] = v25;
        MEMORY[0x1F4188790](v29);
        *(void *)&v80[-48] = v31;
        *(void *)&v80[-40] = v25;
        uint64_t v76 = (uint64_t)v26;
        uint64_t v77 = v27;
        uint64_t v78 = sub_1A4700F70;
        uint64_t v79 = v32;
        uint64_t v33 = sub_1A4942A80();
        uint64_t v94 = v22;
        swift_bridgeObjectRelease();
        v99 = (uint64_t *)v28;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v34 = sub_1A49422A0();
        os_log_type_t v35 = sub_1A4942CC0();
        int v36 = v35;
        BOOL v37 = os_log_type_enabled(v34, v35);
        uint64_t v38 = v27;
        uint64_t v95 = (unsigned char *)v33;
        if (v37)
        {
          uint64_t v39 = swift_slowAlloc();
          uint64_t v40 = swift_slowAlloc();
          uint64_t v90 = v40;
          LODWORD(v89) = v36;
          uint64_t v111 = (unsigned char *)v40;
          *(_DWORD *)uint64_t v39 = 136446466;
          uint64_t v87 = v39 + 4;
          uint64_t v108 = (uint64_t)v99;
          MEMORY[0x1F4188790](v40);
          uint64_t KeyPath = swift_getKeyPath();
          os_log_t v88 = v34;
          uint64_t v42 = KeyPath;
          uint64_t v43 = sub_1A4942A70();
          uint64_t v86 = swift_getWitnessTable();
          uint64_t v44 = MEMORY[0x1E4FBB1A0];
          uint64_t v45 = v94;
          uint64_t v47 = sub_1A46F302C((void (*)(char *, char *))sub_1A4701140, v42, v43, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBC248], v86, MEMORY[0x1E4FBC278], v46);
          uint64_t v94 = v45;
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v48 = MEMORY[0x1A625FCC0](v47, v44);
          unint64_t v50 = v49;
          swift_bridgeObjectRelease();
          uint64_t v108 = sub_1A46FCA78(v48, v50, (uint64_t *)&v111);
          sub_1A4942DC0();
          swift_bridgeObjectRelease();
          uint64_t v51 = swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2082;
          uint64_t v87 = v39 + 14;
          uint64_t v108 = v33;
          MEMORY[0x1F4188790](v51);
          uint64_t v76 = v100;
          uint64_t v77 = v25;
          uint64_t v78 = v103;
          uint64_t v79 = v38;
          uint64_t v52 = swift_getKeyPath();
          uint64_t v53 = v43;
          uint64_t v54 = MEMORY[0x1E4FBB1A0];
          uint64_t v55 = v94;
          uint64_t v57 = sub_1A46F302C((void (*)(char *, char *))sub_1A4701140, v52, v53, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBC248], v86, MEMORY[0x1E4FBC278], v56);
          uint64_t v94 = v55;
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v58 = MEMORY[0x1A625FCC0](v57, v54);
          unint64_t v60 = v59;
          swift_bridgeObjectRelease();
          uint64_t v61 = v100;
          uint64_t v108 = sub_1A46FCA78(v58, v60, (uint64_t *)&v111);
          sub_1A4942DC0();
          char v62 = v25;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          os_log_t v63 = v88;
          _os_log_impl(&dword_1A460D000, v88, (os_log_type_t)v89, "Will merge local data to cloud, idsToSave=%{public}s, idsToDelete=%{public}s", (uint8_t *)v39, 0x16u);
          uint64_t v64 = v90;
          swift_arrayDestroy();
          MEMORY[0x1A6261A10](v64, -1, -1);
          MEMORY[0x1A6261A10](v39, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          char v62 = v25;
          uint64_t v65 = swift_bridgeObjectRelease_n();
          uint64_t v61 = v100;
        }
        char v98 = (BOOL (*)(uint64_t, uint64_t, void *))v80;
        uint64_t v111 = (unsigned char *)MEMORY[0x1E4FBC860];
        uint64_t v108 = (uint64_t)v99;
        MEMORY[0x1F4188790](v65);
        uint64_t v66 = sub_1A4942A70();
        uint64_t v67 = sub_1A4942820();
        uint64_t v68 = swift_getWitnessTable();
        uint64_t v70 = sub_1A46F302C((void (*)(char *, char *))sub_1A4701084, (uint64_t)&v80[-48], v66, v67, MEMORY[0x1E4FBC248], v68, MEMORY[0x1E4FBC278], v69);
        uint64_t v71 = sub_1A46FB5F4(v70);
        uint64_t v108 = (uint64_t)v95;
        MEMORY[0x1F4188790](v71);
        uint64_t v76 = v61;
        uint64_t v77 = v62;
        uint64_t v78 = v103;
        uint64_t v79 = v38;
        uint64_t v73 = sub_1A46F302C((void (*)(char *, char *))sub_1A47010A4, (uint64_t)&v80[-48], v66, v67, MEMORY[0x1E4FBC248], v68, MEMORY[0x1E4FBC278], v72);
        sub_1A46FB5F4(v73);
        uint64_t v74 = v115;
        sub_1A49429A0();
        sub_1A4942980();
        uint64_t v75 = v102;
        sub_1A46EE728(v92, v74, v102, v93);
        sub_1A46E2CD0(v75, v101);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v111 = (unsigned char *)v6;
        uint64_t v112 = v7;
        uint64_t v113 = (uint64_t)v103;
        unint64_t v114 = (unint64_t)v8;
        type metadata accessor for PrivateZone.Errors();
        swift_getWitnessTable();
        swift_allocError();
        unsigned char *v18 = 0;
        swift_willThrow();
        sub_1A46EE728(v11, v115, v13, v12);
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t PrivateZone.nextFetchChangesOptions(_:syncEngine:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = *v1;
  uint64_t v3 = sub_1A49427A0();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1A46F6968, 0, 0);
}

uint64_t sub_1A46F6968()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = (uint64_t *)v0[6];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651D60);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1A4972470;
  *(void *)(v5 + 32) = sub_1A4701F10(*(void *)(v3 + 80), *(void *)(v3 + 96));
  sub_1A4942B60();
  *uint64_t v1 = v5;
  (*(void (**)(uint64_t *, void, uint64_t))(v2 + 104))(v1, *MEMORY[0x1E4F19B30], v4);
  sub_1A49427B0();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t PrivateZone.nextRecordZoneChangeBatch(_:syncEngine:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a1;
  v3[4] = v2;
  uint64_t v6 = (void *)swift_task_alloc();
  v3[5] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_1A46F6B1C;
  return sub_1A46F6E54(a1, a2);
}

uint64_t sub_1A46F6B1C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](sub_1A46F6C50, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1A46F6C50()
{
  uint64_t v1 = (void *)v0[6];
  id v2 = v1;
  id v3 = v1;
  uint64_t v4 = sub_1A49422A0();
  os_log_type_t v5 = sub_1A4942CB0();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (void *)v0[6];
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v7 = 138543362;
    id v9 = v6;
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v10;
    sub_1A4942DC0();
    *uint64_t v8 = v10;

    _os_log_impl(&dword_1A460D000, v4, v5, "Failed to produce next change batch for sync engine, error=%{public}@", v7, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651F50);
    swift_arrayDestroy();
    MEMORY[0x1A6261A10](v8, -1, -1);
    MEMORY[0x1A6261A10](v7, -1, -1);
  }
  else
  {
    uint64_t v11 = (void *)v0[6];
  }
  uint64_t v12 = v0[3];
  uint64_t v13 = sub_1A4942800();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_1A46F6E54(uint64_t a1, uint64_t a2)
{
  v3[27] = a2;
  v3[28] = v2;
  v3[26] = a1;
  v3[29] = *v2;
  uint64_t v4 = sub_1A4942820();
  v3[30] = v4;
  v3[31] = *(void *)(v4 - 8);
  v3[32] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1A46F6F40, 0, 0);
}

void sub_1A46F6F40()
{
  if (!*(void *)(v0[28] + 16)) {
    goto LABEL_46;
  }
  uint64_t v1 = (void *)v0[29];
  uint64_t v3 = v1[10];
  uint64_t v2 = v1[11];
  uint64_t v4 = v1[12];
  uint64_t v5 = v1[13];
  v0[6] = v3;
  v0[7] = v2;
  v0[8] = v4;
  v0[9] = v5;
  _s14descr1EF8234B1V11AccessModelOMa();
  uint64_t v6 = type metadata accessor for AsyncLazy();
  AsyncLazy.loadedValue.getter(v6, (uint64_t)(v0 + 2));
  uint64_t v7 = v0[2];
  uint64_t v68 = v0[3];
  uint64_t v8 = v0[4];
  unint64_t v9 = v0[5];
  if ((v9 & 0x3000000000000000) == 0x2000000000000000)
  {
    uint64_t v65 = v5;
    uint64_t v63 = v4;
    uint64_t v64 = v3;
    uint64_t v10 = v0[27];
    unint64_t v11 = v9 & 0xCFFFFFFFFFFFFFFFLL;
    swift_retain();
    swift_retain();
    sub_1A46EE638(v8, v9 & 0xCFFFFFFFFFFFFFFFLL);
    swift_release();
    uint64_t v60 = v7;
    sub_1A49429A0();
    uint64_t v12 = v8;
    uint64_t v13 = sub_1A4942960();
    swift_release();
    uint64_t v14 = swift_task_alloc();
    *(void *)(v14 + 16) = v10;
    uint64_t v15 = sub_1A46F7B2C((uint64_t (*)(char *))sub_1A46FF9CC, v14, v13);
    swift_task_dealloc();
    uint64_t v16 = sub_1A49427E0();
    sub_1A46F7DD0(v16, v15);
    unint64_t v74 = v19;
    unint64_t v61 = v9;
    unint64_t v20 = MEMORY[0x1E4FBC860];
    unint64_t v76 = MEMORY[0x1E4FBC860];
    uint64_t v75 = MEMORY[0x1E4FBC860];
    int64_t v21 = v18 >> 1;
    unint64_t v67 = v11;
    uint64_t v62 = v12;
    if (v17 == v18 >> 1)
    {
LABEL_19:
      uint64_t v33 = v0[28];
      v0[20] = v20;
      uint64_t v34 = (void *)swift_task_alloc();
      v34[2] = v12;
      v34[3] = v11;
      v34[4] = v33;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651E00);
      v0[14] = v64;
      v0[15] = v2;
      v0[16] = v63;
      v0[17] = v65;
      _s14descr1EF8234B1V2IDVMa();
      sub_1A4700B80(&qword_1E9651E08, &qword_1E9651E00);
      uint64_t v35 = sub_1A4942B10();
      swift_task_dealloc();
      swift_bridgeObjectRelease();
      int v36 = (void *)swift_task_alloc();
      v36[2] = v64;
      v36[3] = v2;
      v36[4] = v63;
      v36[5] = v65;
      v36[6] = v35;
      swift_getWitnessTable();
      sub_1A4942A90();
      sub_1A4942A90();
      swift_getTupleTypeMetadata2();
      sub_1A46EDEC8();
      uint64_t v38 = v0[28];
      swift_task_dealloc();
      uint64_t v39 = v0[18];
      uint64_t v40 = v0[19];
      uint64_t v41 = MEMORY[0x1E4FBC868];
      v0[22] = v35;
      v0[23] = v41;
      uint64_t v42 = (void *)swift_task_alloc();
      long long v42[2] = v39;
      v42[3] = v38;
      v42[4] = v40;
      sub_1A4942BE0();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651E10);
      swift_getWitnessTable();
      sub_1A4942B20();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      unint64_t v72 = v0[21];
      unint64_t v74 = v76;
      if (!(v76 >> 62))
      {
        uint64_t v43 = *(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10);
        unint64_t v44 = v67;
        if (!v43)
        {
LABEL_44:
          uint64_t v58 = v0[26];
          swift_bridgeObjectRelease();
          sub_1A46FD720(v72);
          swift_bridgeObjectRelease();
          sub_1A49427F0();
          sub_1A46EE728(v60, v68, v62, v61);
          swift_unknownObjectRelease();
          sub_1A46E2CD0(v62, v44);
          swift_release();
          uint64_t v59 = sub_1A4942800();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v58, 0, 1, v59);
          swift_task_dealloc();
          BOOL v37 = (void (*)(void))v0[1];
          goto LABEL_20;
        }
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v22 = v17;
      uint64_t v23 = v0[31];
      unint64_t v72 = v23 + 88;
      int v70 = *MEMORY[0x1E4F19B40];
      int v66 = *MEMORY[0x1E4F19B48];
      uint64_t v24 = (void (**)(id *, void))(v23 + 96);
      if (v17 <= v21) {
        unint64_t v25 = v18 >> 1;
      }
      else {
        unint64_t v25 = v17;
      }
      unint64_t v73 = v25;
      while (v73 != v22)
      {
        uint64_t v28 = v0[32];
        uint64_t v29 = v0[30];
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v23 + 16))(v28, v74 + *(void *)(v23 + 72) * v22, v29);
        int v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 88))(v28, v29);
        if (v30 == v70)
        {
          uint64_t v26 = (id *)v0[32];
          (*v24)(v26, v0[30]);
          id v27 = *v26;
          MEMORY[0x1A625FCA0]();
          if (*(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_1A4942B90();
          }
        }
        else
        {
          if (v30 != v66)
          {
            sub_1A4942F50();
            return;
          }
          uint64_t v31 = (id *)v0[32];
          (*v24)(v31, v0[30]);
          id v27 = *v31;
          MEMORY[0x1A625FCA0]();
          if (*(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_1A4942B90();
          }
        }
        sub_1A4942BC0();
        ++v22;
        sub_1A4942B60();

        if (v21 == v22)
        {
          unint64_t v20 = v76;
          uint64_t v12 = v62;
          goto LABEL_19;
        }
      }
      __break(1u);
    }
    swift_bridgeObjectRetain();
    uint64_t v43 = sub_1A4942F70();
    swift_bridgeObjectRelease();
    unint64_t v44 = v67;
    if (!v43) {
      goto LABEL_44;
    }
LABEL_25:
    if (v43 >= 1)
    {
      uint64_t v45 = 0;
      unsigned int v69 = *MEMORY[0x1E4F19B40];
      uint64_t v71 = v0[31];
      while (1)
      {
        if ((v74 & 0xC000000000000001) != 0) {
          id v51 = (id)MEMORY[0x1A625FF90](v45, v74);
        }
        else {
          id v51 = *(id *)(v74 + 8 * v45 + 32);
        }
        uint64_t v52 = v51;
        if ((v72 & 0xC000000000000001) != 0)
        {
          id v53 = v51;
          uint64_t v54 = sub_1A4942F20();
          if (v54)
          {
            v0[25] = v54;
            sub_1A46E3134(0, (unint64_t *)&qword_1E9651998);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            id v55 = (id)v0[24];
            swift_unknownObjectRelease();
            goto LABEL_39;
          }
        }
        else
        {
          if (!*(void *)(v72 + 16)) {
            goto LABEL_28;
          }
          unint64_t v56 = sub_1A46FD81C((uint64_t)v51);
          if (v57)
          {
            id v55 = *(id *)(*(void *)(v72 + 56) + 8 * v56);
LABEL_39:

            if (v55) {
              goto LABEL_29;
            }
            goto LABEL_28;
          }
        }

LABEL_28:
        uint64_t v46 = v0[30];
        sub_1A49429A0();
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651E18);
        unint64_t v47 = (*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
        uint64_t v48 = swift_allocObject();
        *(_OWORD *)(v48 + 16) = xmmword_1A4972120;
        unint64_t v49 = (void *)(v48 + v47);
        unint64_t v44 = v67;
        void *v49 = v52;
        (*(void (**)(void *, void, uint64_t))(v71 + 104))(v49, v69, v46);
        id v50 = v52;
        sub_1A4942990();
        swift_bridgeObjectRelease();
        swift_release();
LABEL_29:
        ++v45;

        if (v43 == v45) {
          goto LABEL_44;
        }
      }
    }
    __break(1u);
LABEL_46:
    __break(1u);
    return;
  }
  v0[10] = v3;
  v0[11] = v2;
  v0[12] = v4;
  v0[13] = v5;
  type metadata accessor for PrivateZone.Errors();
  swift_getWitnessTable();
  swift_allocError();
  unsigned char *v32 = 0;
  swift_willThrow();
  sub_1A46EE728(v7, v68, v8, v9);
  swift_task_dealloc();
  BOOL v37 = (void (*)(void))v0[1];
LABEL_20:
  v37();
}

uint64_t sub_1A46F79A4()
{
  uint64_t v0 = sub_1A4942760();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1A4942790();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1A4942740();
  MEMORY[0x1A625F8F0](v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  char v9 = sub_1A4942750();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v9 & 1;
}

uint64_t sub_1A46F7B2C(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v28 = sub_1A4942820();
  uint64_t v7 = *(void *)(v28 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v28);
  id v27 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v20 - v11;
  uint64_t v13 = MEMORY[0x1E4FBC860];
  uint64_t v29 = MEMORY[0x1E4FBC860];
  uint64_t v26 = *(void *)(a3 + 16);
  if (v26)
  {
    unint64_t v14 = 0;
    uint64_t v21 = a3;
    uint64_t v22 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v24 = (void (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t v25 = v7 + 16;
    v20[0] = a1;
    v20[1] = a2;
    while (v14 < *(void *)(a3 + 16))
    {
      unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v13 = *(void *)(v7 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, a3 + v15 + v13 * v14, v28);
      char v16 = a1(v12);
      if (v3)
      {
        (*v22)(v12, v28);
        swift_bridgeObjectRelease();
        swift_release();
        return v13;
      }
      if (v16)
      {
        uint64_t v23 = *v24;
        v23(v27, v12, v28);
        uint64_t v17 = v29;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1A46FD0D0(0, *(void *)(v17 + 16) + 1, 1);
          uint64_t v17 = v29;
        }
        unint64_t v19 = *(void *)(v17 + 16);
        unint64_t v18 = *(void *)(v17 + 24);
        if (v19 >= v18 >> 1)
        {
          sub_1A46FD0D0(v18 > 1, v19 + 1, 1);
          uint64_t v17 = v29;
        }
        *(void *)(v17 + 16) = v19 + 1;
        uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v23)(v17 + v15 + v19 * v13, v27, v28);
        uint64_t v29 = v17;
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))*v22)(v12, v28);
      }
      if (v26 == ++v14)
      {
        uint64_t v13 = v29;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

uint64_t sub_1A46F7DD0(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v3 = *(void *)(a2 + 16);
    if ((uint64_t)v3 >= result) {
      unint64_t v4 = result;
    }
    else {
      unint64_t v4 = *(void *)(a2 + 16);
    }
    if (result) {
      unint64_t v5 = v4;
    }
    else {
      unint64_t v5 = 0;
    }
    if (v3 >= v5)
    {
      sub_1A4942820();
      return a2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A46F7E64@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v29 = a4;
  uint64_t v25 = a1;
  uint64_t v32 = a7;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5CF680);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v26 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unint64_t v15 = (char *)&v25 - v14;
  sub_1A49424C0();
  uint64_t v16 = sub_1A4942570();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  v17(v15, 1, 1, v16);
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v18 = v33;
  uint64_t v19 = sub_1A46F8054(a2, (uint64_t)v15, a3, a6, a5);
  sub_1A46EA718((uint64_t)v15);
  uint64_t result = swift_release();
  if (!v18)
  {
    uint64_t v21 = v32;
    uint64_t *v32 = v19;
    uint64_t v22 = v21;
    sub_1A49424C0();
    uint64_t v23 = (uint64_t)v26;
    v17(v26, 1, 1, v16);
    uint64_t v24 = sub_1A46F8510(v27, v23, v28, v29, v30, v31);
    sub_1A46EA718(v23);
    uint64_t result = swift_release();
    v22[1] = v24;
  }
  return result;
}

uint64_t sub_1A46F8054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = a2;
  uint64_t v30 = a1;
  uint64_t v10 = *v5;
  uint64_t v34 = sub_1A4942340();
  uint64_t v33 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = a1;
  uint64_t v13 = *(void *)(v10 + *MEMORY[0x1E4FAA6A0]);
  uint64_t v51 = a3;
  uint64_t v52 = v13;
  uint64_t v53 = a5;
  uint64_t v54 = a4;
  uint64_t v14 = _s14descr1EF8234B1V2IDVMa();
  uint64_t v15 = sub_1A4942A30();
  uint64_t v49 = a5;
  uint64_t v50 = v15;
  uint64_t v46 = v13;
  uint64_t v47 = a3;
  uint64_t v48 = a4;
  uint64_t v16 = sub_1A4942BE0();
  v27[1] = v14;
  sub_1A4942A90();
  swift_getWitnessTable();
  uint64_t v17 = v32;
  sub_1A4942B20();
  uint64_t v32 = v51;
  uint64_t v55 = v30;
  uint64_t v42 = v13;
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  uint64_t v45 = a5;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v36 = v13;
  uint64_t v37 = a3;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v30 = a5;
  uint64_t v40 = sub_1A46FFDD0;
  uint64_t v41 = KeyPath;
  swift_retain();
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651E30);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1A46F302C((void (*)(char *, char *))sub_1A46FFDD4, (uint64_t)v35, v16, v19, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v21);
  swift_release_n();
  sub_1A4942450();
  swift_bridgeObjectRelease();
  uint64_t v22 = sub_1A49424A0();
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v34);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v24 = v22;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v34);
    uint64_t v55 = v24;
    swift_getWitnessTable();
    uint64_t v50 = sub_1A4942A30();
    MEMORY[0x1F4188790](v50);
    uint64_t v25 = v28;
    v27[-6] = v13;
    v27[-5] = v25;
    uint64_t v26 = v30;
    v27[-4] = v29;
    v27[-3] = v26;
    v27[-2] = v32;
    sub_1A4942BE0();
    sub_1A4942A90();
    swift_getWitnessTable();
    sub_1A4942B20();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v51;
  }
}

uint64_t sub_1A46F8510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v33 = a2;
  uint64_t v35 = sub_1A4942340();
  uint64_t v34 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v31 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = a1;
  uint64_t v52 = a3;
  uint64_t v53 = a4;
  uint64_t v54 = a5;
  uint64_t v55 = a6;
  uint64_t v12 = _s14descr1EF8234B1V2IDVMa();
  uint64_t v13 = sub_1A4942A30();
  uint64_t v50 = a6;
  uint64_t v51 = v13;
  uint64_t v47 = a3;
  uint64_t v48 = a4;
  uint64_t v49 = a5;
  uint64_t v14 = sub_1A4942BE0();
  uint64_t v27 = v12;
  sub_1A4942A90();
  swift_getWitnessTable();
  uint64_t v15 = v32;
  sub_1A4942B20();
  uint64_t v16 = v52;
  uint64_t v56 = a1;
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  uint64_t v45 = a5;
  uint64_t v46 = a6;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v28 = a3;
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v18 = v31;
  uint64_t v32 = a6;
  uint64_t v41 = sub_1A46FFDD0;
  uint64_t v42 = KeyPath;
  swift_retain();
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651E30);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1A46F302C((void (*)(char *, char *))sub_1A46FFDD4, (uint64_t)v36, v14, v19, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v21);
  swift_release_n();
  sub_1A4942450();
  swift_bridgeObjectRelease();
  uint64_t v22 = sub_1A49424A0();
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v18, v35);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v24 = v22;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v18, v35);
    uint64_t v56 = v24;
    swift_getWitnessTable();
    uint64_t v51 = sub_1A4942A30();
    MEMORY[0x1F4188790](v51);
    uint64_t v25 = v29;
    *(&v27 - 6) = v28;
    *(&v27 - 5) = v25;
    uint64_t v26 = v32;
    *(&v27 - 4) = v30;
    *(&v27 - 3) = v26;
    *(&v27 - 2) = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651E38);
    sub_1A4942A90();
    sub_1A4700B80(&qword_1E9651E40, &qword_1E9651E38);
    sub_1A4942B20();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v52;
  }
}

void sub_1A46F8994(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v66 = a3;
  uint64_t v63 = a5;
  uint64_t v58 = a1;
  uint64_t v6 = *(void **)a4;
  unint64_t v7 = *(void *)(*(void *)a4 + 88);
  uint64_t v8 = sub_1A4942DB0();
  uint64_t v61 = *(void *)(v8 - 8);
  uint64_t v62 = v8;
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v58 - v10;
  uint64_t v12 = *(void *)(v7 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v9);
  uint64_t v59 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v64 = (char *)&v58 - v15;
  unint64_t v16 = *(void *)(a2 + 8);
  uint64_t v17 = *(void **)(a2 + 16);
  id v74 = *(id *)a2;
  uint64_t v71 = (uint64_t)v74;
  unint64_t v72 = v16;
  id v73 = v17;
  uint64_t v18 = v6[10];
  uint64_t v19 = v6[12];
  uint64_t v20 = v6[13];
  swift_bridgeObjectRetain();
  id v21 = v17;
  unint64_t v67 = (void *)v18;
  unint64_t v68 = v7;
  uint64_t v69 = v19;
  uint64_t v70 = v20;
  uint64_t v60 = v20;
  uint64_t v22 = _s14descr1EF8234B1V2IDVMa();
  uint64_t WitnessTable = swift_getWitnessTable();
  id v24 = v66;
  id v66 = (id)WitnessTable;
  MEMORY[0x1A625FC10](&v71, v24, v22, v7);

  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v12 + 48))(v11, 1, v7) == 1)
  {
    uint64_t v25 = (uint64_t)v74;
    (*(void (**)(char *, uint64_t))(v61 + 8))(v11, v62);
    swift_bridgeObjectRetain_n();
    id v26 = v21;
    uint64_t v27 = sub_1A49422A0();
    os_log_type_t v28 = sub_1A4942CB0();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      unint64_t v67 = (void *)v30;
      *(_DWORD *)uint64_t v29 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v71 = sub_1A46FCA78(v25, v16, (uint64_t *)&v67);
      sub_1A4942DC0();

      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1A460D000, v27, v28, "Failed to lookup model for record save, modelID=%{public}s", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A6261A10](v30, -1, -1);
      MEMORY[0x1A6261A10](v29, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    uint64_t v61 = v12;
    uint64_t v62 = v7;
    uint64_t v31 = *(void (**)(char *, char *, unint64_t))(v12 + 32);
    uint64_t v32 = v64;
    v31(v64, v11, v7);
    sub_1A46E3134(0, (unint64_t *)&qword_1E9651998);
    (*(void (**)(uint64_t, uint64_t))(v19 + 16))(v18, v19);
    id v33 = v21;
    uint64_t v34 = (void *)sub_1A4942D30();
    uint64_t v71 = (uint64_t)v74;
    unint64_t v72 = v16;
    id v73 = v33;
    swift_bridgeObjectRetain();
    id v35 = v33;
    MEMORY[0x1A625FC10](&v67, &v71, v63, v22, &type metadata for RecordEntity, v66);

    swift_bridgeObjectRelease();
    uint64_t v36 = v67;
    if (v67)
    {
      sub_1A4706ED8();
      swift_release();
      swift_release();
      swift_release();
      sub_1A4942510();
      swift_release();
      if (v72)
      {
        uint64_t v36 = (void *)sub_1A4942AD0();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v36 = 0;
      }
    }
    os_log_t v37 = v65;
    uint64_t v38 = v62;
    objc_msgSend(v34, sel_setEtag_, v36, v58);

    os_log_t v39 = v37;
    sub_1A46DE604(v34, v38);
    if (v37)
    {
      id v74 = v34;
      uint64_t v40 = v61;
      uint64_t v41 = v59;
      (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v59, v32, v38);
      uint64_t v42 = v37;
      uint64_t v43 = v37;
      uint64_t v44 = sub_1A49422A0();
      uint64_t v45 = v32;
      os_log_type_t v46 = sub_1A4942CB0();
      if (os_log_type_enabled(v44, v46))
      {
        uint64_t v47 = swift_slowAlloc();
        os_log_t v65 = v44;
        uint64_t v48 = v47;
        uint64_t v63 = (void *)swift_slowAlloc();
        id v66 = (id)swift_slowAlloc();
        unint64_t v67 = 0;
        uint64_t v71 = (uint64_t)v66;
        *(_DWORD *)uint64_t v48 = 136446466;
        unint64_t v68 = 0xE000000000000000;
        sub_1A4943070();
        unint64_t v67 = (void *)sub_1A46FCA78((uint64_t)v67, v68, &v71);
        sub_1A4942DC0();
        swift_bridgeObjectRelease();
        uint64_t v49 = *(void (**)(char *, uint64_t))(v40 + 8);
        v49(v41, v38);
        *(_WORD *)(v48 + 12) = 2114;
        uint64_t v50 = v37;
        uint64_t v51 = _swift_stdlib_bridgeErrorToNSError();
        unint64_t v67 = (void *)v51;
        sub_1A4942DC0();
        uint64_t v52 = v63;
        void *v63 = v51;

        os_log_t v53 = v65;
        _os_log_impl(&dword_1A460D000, v65, v46, "Failed to convert model to record, model=%{public}s, error=%{public}@", (uint8_t *)v48, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651F50);
        swift_arrayDestroy();
        MEMORY[0x1A6261A10](v52, -1, -1);
        id v54 = v66;
        swift_arrayDestroy();
        MEMORY[0x1A6261A10](v54, -1, -1);
        MEMORY[0x1A6261A10](v48, -1, -1);

        v49(v64, v38);
      }
      else
      {

        char v57 = *(void (**)(char *, uint64_t))(v40 + 8);
        v57(v41, v38);

        v57(v45, v38);
      }
    }
    else
    {
      id v55 = v35;
      id v56 = v34;
      sub_1A46FD860((uint64_t)v56, v55);

      (*(void (**)(char *, uint64_t))(v61 + 8))(v32, v38);
    }
  }
}

uint64_t PrivateZone.shouldFetchChanges(zoneID:syncEngine:)()
{
  return sub_1A46FE984(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 1);
}

uint64_t PrivateZone.relatedApplicationBundleIdentifiers(zoneIDs:recordIDs:syncEngine:)()
{
  return MEMORY[0x1F4188298](sub_1A46F9204, 0, 0);
}

uint64_t sub_1A46F9204()
{
  unint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v1 = swift_bridgeObjectRetain();
  return v3(v1);
}

uint64_t sub_1A46F9270(uint64_t a1)
{
  unint64_t v5 = (uint64_t (*)(uint64_t))((char *)&dword_1E9651D50 + dword_1E9651D50);
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_1A46E2898;
  return v5(a1);
}

uint64_t sub_1A46F931C(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = sub_1A46E2898;
  return PrivateZone.nextRecordZoneChangeBatch(_:syncEngine:)(a1, a2);
}

uint64_t sub_1A46F93C4(uint64_t a1)
{
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_1A46E2898;
  return PrivateZone.nextFetchChangesOptions(_:syncEngine:)(a1);
}

uint64_t sub_1A46F945C()
{
  return sub_1A46FE984(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 1);
}

uint64_t sub_1A46F9494()
{
  return sub_1A46FE984(*(uint64_t (**)(uint64_t))(v0 + 8), v0, (uint64_t)&unk_1EF828AF8);
}

void sub_1A46F94D0()
{
  if (!*(void *)(v0 + 16))
  {
    __break(1u);
    return;
  }
  _s14descr1EF8234B1V11AccessModelOMa();
  uint64_t v2 = type metadata accessor for AsyncLazy();
  AsyncLazy.loadedValue.getter(v2, (uint64_t)&v10);
  if (!v1)
  {
    uint64_t v4 = v10;
    uint64_t v3 = v11;
    uint64_t v5 = v13;
    uint64_t v15 = v12;
    if (sub_1A46EE514(v10, v11, v12, v13))
    {
      sub_1A46F96B4(&v14);
      if (sub_1A47027F0())
      {
        sub_1A46F5CD4();
        sub_1A46F57E0();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        uint64_t v6 = v4;
        uint64_t v7 = v3;
        uint64_t v8 = v15;
        unint64_t v9 = v5;
LABEL_8:
        sub_1A46EE728(v6, v7, v8, v9);
        return;
      }
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v6 = v4;
    uint64_t v7 = v3;
    uint64_t v8 = v15;
    unint64_t v9 = v5;
    goto LABEL_8;
  }
}

void sub_1A46F96B4(_OWORD *a1@<X8>)
{
  uint64_t v4 = *(void **)v1;
  uint64_t v5 = *(void *)(v1 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(v1 + 40);
    long long v27 = *(_OWORD *)(v1 + 24);
    uint64_t v28 = v6;
    uint64_t v7 = v4[11];
    uint64_t v9 = v4[12];
    uint64_t v8 = v4[13];
    uint64_t v22 = v4[10];
    uint64_t v23 = v7;
    uint64_t v24 = v9;
    uint64_t v25 = v8;
    uint64_t v26 = v5;
    _s14descr1EF8234B1V11AccessModelOMa();
    uint64_t v10 = type metadata accessor for AsyncLazy();
    uint64_t v11 = AsyncLazy.loadedValue.getter(v10, (uint64_t)&v19);
    if (!v2)
    {
      uint64_t v18 = a1;
      uint64_t v29 = &v17;
      long long v12 = v19;
      long long v13 = v20;
      MEMORY[0x1F4188790](v11);
      sub_1A46EDEC8();
      sub_1A46EE728(v12, *((uint64_t *)&v12 + 1), v13, *((unint64_t *)&v13 + 1));
      uint64_t v14 = v21;
      long long v15 = v20;
      unint64_t v16 = v18;
      _OWORD *v18 = v19;
      v16[1] = v15;
      *((void *)v16 + 4) = v14;
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1A46F984C(char a1)
{
  *(void *)(v2 + 72) = v1;
  *(unsigned char *)(v2 + 216) = a1;
  *(void *)(v2 + 80) = *v1;
  uint64_t v3 = sub_1A4942760();
  *(void *)(v2 + 88) = v3;
  *(void *)(v2 + 96) = *(void *)(v3 - 8);
  *(void *)(v2 + 104) = swift_task_alloc();
  uint64_t v4 = sub_1A4942790();
  *(void *)(v2 + 112) = v4;
  *(void *)(v2 + 120) = *(void *)(v4 - 8);
  *(void *)(v2 + 128) = swift_task_alloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 136) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1A46F9A04;
  v5[15] = v1;
  unsigned char v5[16] = *v1;
  return MEMORY[0x1F4188298](sub_1A46F0A7C, 0, 0);
}

uint64_t sub_1A46F9A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)*v5;
  v6[18] = a1;
  v6[19] = a2;
  v6[20] = a3;
  v6[21] = a4;
  swift_task_dealloc();
  if (v4)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v6[1];
    return v7();
  }
  else
  {
    return MEMORY[0x1F4188298](sub_1A46F9B50, 0, 0);
  }
}

uint64_t sub_1A46F9B50()
{
  unint64_t v1 = *(void *)(v0 + 168);
  if ((v1 & 0x3000000000000000) == 0x2000000000000000)
  {
    uint64_t v2 = *(void *)(v0 + 160);
    uint64_t v4 = *(void *)(v0 + 96);
    uint64_t v3 = *(void *)(v0 + 104);
    unint64_t v5 = v1 & 0xCFFFFFFFFFFFFFFFLL;
    uint64_t v6 = *(void *)(v0 + 88);
    swift_retain();
    swift_retain();
    sub_1A46EE638(v2, v5);
    sub_1A46E2CD0(v2, v5);
    swift_release();
    (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, *MEMORY[0x1E4F19B28], v6);
    sub_1A4942770();
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1A46F9D6C;
    uint64_t v8 = *(void *)(v0 + 128);
    return MEMORY[0x1F40D6008](v8);
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 152);
    uint64_t v9 = *(void *)(v0 + 160);
    uint64_t v11 = *(void *)(v0 + 144);
    uint64_t v12 = *(void *)(v0 + 80);
    long long v13 = *(_OWORD *)(v12 + 96);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v12 + 80);
    *(_OWORD *)(v0 + 32) = v13;
    type metadata accessor for PrivateZone.Errors();
    swift_getWitnessTable();
    swift_allocError();
    unsigned char *v14 = 0;
    swift_willThrow();
    sub_1A46EE728(v11, v10, v9, v1);
    swift_task_dealloc();
    swift_task_dealloc();
    long long v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
}

uint64_t sub_1A46F9D6C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[15] + 8))(v2[16], v2[14]);
  if (v0) {
    uint64_t v3 = sub_1A46F9F5C;
  }
  else {
    uint64_t v3 = sub_1A46F9ED4;
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

uint64_t sub_1A46F9ED4()
{
  sub_1A46EE728(v0[18], v0[19], v0[20], v0[21]);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1A46F9F5C()
{
  uint64_t v1 = *(void **)(v0 + 184);
  *(void *)(v0 + 48) = v1;
  id v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CFB00);
  type metadata accessor for CKError(0);
  if (swift_dynamicCast())
  {
    uint64_t v3 = *(void **)(v0 + 56);
    *(void *)(v0 + 192) = v3;
    sub_1A46FA4F0();
    if (v4)
    {
      int v5 = *(unsigned __int8 *)(v0 + 216);
      sub_1A49429A0();
      uint64_t v6 = sub_1A4942950();
      swift_release();
      uint64_t v7 = *(void *)(v6 + 16);
      swift_bridgeObjectRelease();
      if (v7 && v5 != 0)
      {

        uint64_t v23 = (void *)swift_task_alloc();
        *(void *)(v0 + 200) = v23;
        *uint64_t v23 = v0;
        v23[1] = sub_1A46FA2AC;
        return sub_1A46F984C(0);
      }
    }
  }
  uint64_t v9 = *(void **)(v0 + 184);

  id v10 = v9;
  id v11 = v9;
  uint64_t v12 = sub_1A49422A0();
  os_log_type_t v13 = sub_1A4942CB0();
  BOOL v14 = os_log_type_enabled(v12, v13);
  long long v15 = *(void **)(v0 + 184);
  uint64_t v16 = *(void *)(v0 + 152);
  if (v14)
  {
    uint64_t v26 = *(void *)(v0 + 160);
    unint64_t v27 = *(void *)(v0 + 168);
    uint64_t v25 = *(void *)(v0 + 144);
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 138412290;
    id v19 = v15;
    uint64_t v24 = v16;
    uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 64) = v20;
    sub_1A4942DC0();
    void *v18 = v20;

    _os_log_impl(&dword_1A460D000, v12, v13, "Failed to send changes via sync engine, error=%@", v17, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651F50);
    swift_arrayDestroy();
    MEMORY[0x1A6261A10](v18, -1, -1);
    MEMORY[0x1A6261A10](v17, -1, -1);
    sub_1A46EE728(v25, v24, v26, v27);
    swift_release();
  }
  else
  {
    sub_1A46EE728(*(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160), *(void *)(v0 + 168));
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
  return v21();
}

uint64_t sub_1A46FA2AC()
{
  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = sub_1A46FA458;
  }
  else {
    id v2 = sub_1A46FA3C0;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1A46FA3C0()
{
  uint64_t v1 = *(void **)(v0 + 192);
  sub_1A46EE728(*(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160), *(void *)(v0 + 168));
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1A46FA458()
{
  uint64_t v1 = *(void **)(v0 + 192);
  sub_1A46EE728(*(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160), *(void *)(v0 + 168));
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_1A46FA4F0()
{
  type metadata accessor for CKError(0);
  sub_1A47000F0((unint64_t *)&unk_1E9651FF0, type metadata accessor for CKError);
  sub_1A49420C0();
  if (v16 != 2) {
    return;
  }
  uint64_t v0 = sub_1A4942A50();
  if (!v0) {
    return;
  }
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v0 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(v0 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_26;
    }
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v10 >= v6) {
      goto LABEL_30;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v10);
    ++v7;
    if (!v11)
    {
      int64_t v7 = v10 + 1;
      if (v10 + 1 >= v6) {
        goto LABEL_30;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v7);
      if (!v11)
      {
        int64_t v7 = v10 + 2;
        if (v10 + 2 >= v6) {
          goto LABEL_30;
        }
        unint64_t v11 = *(void *)(v2 + 8 * v7);
        if (!v11)
        {
          int64_t v7 = v10 + 3;
          if (v10 + 3 >= v6) {
            goto LABEL_30;
          }
          unint64_t v11 = *(void *)(v2 + 8 * v7);
          if (!v11)
          {
            int64_t v7 = v10 + 4;
            if (v10 + 4 >= v6) {
              goto LABEL_30;
            }
            unint64_t v11 = *(void *)(v2 + 8 * v7);
            if (!v11) {
              break;
            }
          }
        }
      }
    }
LABEL_25:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_26:
    id v13 = *(id *)(*(void *)(v1 + 56) + 8 * v9);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CFB00);
    if (swift_dynamicCast())
    {
      char v14 = ((uint64_t (*)())sub_1A46FA4F0)();

      if (v14)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return;
      }
    }
  }
  int64_t v12 = v10 + 5;
  if (v12 >= v6)
  {
LABEL_30:
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v12);
  if (v11)
  {
    int64_t v7 = v12;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_30;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_25;
    }
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_1A46FA748(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, unint64_t a6)
{
  int64_t v7 = v6;
  uint64_t v92 = a5;
  unint64_t v93 = a6;
  uint64_t v96 = a2;
  uint64_t v85 = a1;
  uint64_t v94 = (void *)*a4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF570);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v84 = (char *)v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = v94[11];
  uint64_t v13 = *(void *)(v91 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  id v19 = (char *)v76 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)v76 - v20;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = sub_1A4942F70();
    uint64_t v22 = result;
    if (result) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  uint64_t v22 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v22) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  uint64_t v89 = v22;
  if (v22 >= 1)
  {
    uint64_t v87 = v21;
    uint64_t v86 = v19;
    uint64_t v81 = v16;
    uint64_t v25 = 0;
    uint64_t v103 = v94[12];
    v99 = *(uint64_t (**)(void))(v103 + 16);
    uint64_t v100 = v103 + 16;
    uint64_t v97 = (char *)a4 + qword_1EB5D0860;
    unint64_t v98 = a3 & 0xC000000000000001;
    uint64_t v80 = (void (**)(char *, uint64_t, uint64_t))(v13 + 32);
    uint64_t v102 = v94[10];
    uint64_t v79 = (void (**)(char *, char *, uint64_t))(v13 + 16);
    uint64_t v83 = (void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v78 = v105;
    *(void *)&long long v24 = 136446466;
    long long v77 = v24;
    v76[3] = MEMORY[0x1E4FBC840] + 8;
    *(void *)&long long v24 = 138543618;
    long long v95 = v24;
    *(void *)&long long v24 = 136446210;
    long long v88 = v24;
    unint64_t v101 = a3;
    uint64_t v26 = v89;
    while (1)
    {
      if (v98) {
        id v27 = (id)MEMORY[0x1A625FF90](v25, a3);
      }
      else {
        id v27 = *(id *)(a3 + 8 * v25 + 32);
      }
      uint64_t v28 = v27;
      uint64_t v29 = sub_1A4942D40();
      uint64_t v31 = v30;
      if (v29 == v99() && v31 == v32)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v33 = sub_1A4943080();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v33 & 1) == 0)
        {
          id v55 = v28;
          id v56 = sub_1A49422A0();
          os_log_type_t v57 = sub_1A4942CB0();
          if (os_log_type_enabled(v56, v57))
          {
            uint64_t v58 = swift_slowAlloc();
            uint64_t v59 = swift_slowAlloc();
            uint64_t v104 = v59;
            *(_DWORD *)uint64_t v58 = v88;
            uint64_t v60 = sub_1A4942D40();
            *(void *)(v58 + 4) = sub_1A46FCA78(v60, v61, &v104);

            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1A460D000, v56, v57, "Ignoring unknown record type, recordType=%{public}s", (uint8_t *)v58, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1A6261A10](v59, -1, -1);
            MEMORY[0x1A6261A10](v58, -1, -1);
          }
          else
          {
          }
          goto LABEL_6;
        }
      }
      sub_1A49424B0();
      id v34 = v28;
      uint64_t v104 = sub_1A47068A0(v34);
      v105[0] = v35;
      v105[1] = v36;
      os_log_t v37 = v7;
      sub_1A4942470();
      uint64_t v38 = v7;
      if (v7)
      {
        int64_t v7 = 0;
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        id v39 = v34;
        id v40 = v37;
        id v41 = v39;
        id v42 = v37;
        uint64_t v43 = sub_1A49422A0();
        os_log_type_t v44 = sub_1A4942CB0();
        if (os_log_type_enabled(v43, v44))
        {
          uint64_t v45 = swift_slowAlloc();
          os_log_type_t v46 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v45 = v95;
          *(void *)(v45 + 4) = v41;
          void *v46 = v41;

          *(_WORD *)(v45 + 12) = 2114;
          id v47 = v37;
          uint64_t v48 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v45 + 14) = v48;
          v46[1] = v48;

          _os_log_impl(&dword_1A460D000, v43, v44, "Failed to save record metadata to database, record=%{public}@, error=%{public}@", (uint8_t *)v45, 0x16u);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651F50);
          swift_arrayDestroy();
          MEMORY[0x1A6261A10](v46, -1, -1);
          MEMORY[0x1A6261A10](v45, -1, -1);
        }
        else
        {
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        id v49 = objc_msgSend(v34, sel_recordID);
        uint64_t v51 = v92;
        unint64_t v50 = v93;
        sub_1A46EE638(v92, v93);
        uint64_t v52 = v94[13];
        uint64_t v53 = v51;
        uint64_t v54 = v91;
        uint64_t v62 = sub_1A46E2D28(v49, v53, v50, v102, v91, v103);
        uint64_t v64 = v63;
        id v90 = v65;
        id v66 = v34;
        swift_bridgeObjectRetain();
        uint64_t v67 = (uint64_t)v86;
        sub_1A46DDC80(v62, v64, v66, v54, v52, (uint64_t)v86);
        (*v80)(v87, v67, v54);
        swift_beginAccess();
        (*(void (**)(uint64_t, uint64_t))(v52 + 16))(v54, v52);
        id v68 = objc_msgSend(v66, sel_modificationDate);
        id v82 = v66;
        if (v68)
        {
          uint64_t v69 = v68;
          uint64_t v70 = v84;
          sub_1A4942180();

          uint64_t v71 = sub_1A49421A0();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56))(v70, 0, 1, v71);
        }
        else
        {
          uint64_t v72 = sub_1A49421A0();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56))(v84, 1, 1, v72);
        }
        sub_1A4942520();
        swift_release();

        swift_bridgeObjectRelease();
        sub_1A49424B0();
        id v73 = v81;
        id v74 = v87;
        (*v79)(v81, v87, v54);
        sub_1A4942470();
        int64_t v7 = 0;
        uint64_t v75 = *v83;
        (*v83)(v73, v54);
        swift_release();

        v75(v74, v54);
        uint64_t v26 = v89;
      }
LABEL_6:
      ++v25;
      a3 = v101;
      if (v26 == v25) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A46FB388(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v31[0] = a4;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF570);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  id v19 = (char *)v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)v31 - v20;
  v32[0] = a1;
  v32[1] = a2;
  v32[2] = a3;
  swift_bridgeObjectRetain();
  id v22 = a3;
  v31[1] = a6;
  v31[2] = a7;
  v31[3] = a8;
  v31[4] = a9;
  uint64_t v23 = _s14descr1EF8234B1V2IDVMa();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x1A625FC10](&v33, v32, a5, v23, &type metadata for IDAndModEntity, WitnessTable);

  swift_bridgeObjectRelease();
  if (!v33)
  {
    char v29 = 1;
    return v29 & 1;
  }
  sub_1A4942370();
  sub_1A4942510();
  swift_release();
  uint64_t v25 = sub_1A49421A0();
  uint64_t v26 = *(void *)(v25 - 8);
  id v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  uint64_t result = v27(v21, 1, v25);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_1A4942370();
    sub_1A4942510();
    swift_release();
    uint64_t result = v27(v19, 1, v25);
    if (result != 1)
    {
      char v29 = sub_1A4942160();
      swift_release();
      swift_release();
      uint64_t v30 = *(void (**)(char *, uint64_t))(v26 + 8);
      v30(v19, v25);
      v30(v21, v25);
      return v29 & 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A46FB5F4(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v23 = v4 + v2;
  }
  else {
    int64_t v23 = v4;
  }
  unint64_t v3 = sub_1A46FC810(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(sub_1A4942820() - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = v3 + v13 + v12 * v9;
  unint64_t v15 = a1 + v13;
  uint64_t v16 = v12 * v8;
  unint64_t v17 = v14 + v16;
  unint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  BOOL v21 = __OFADD__(v20, v8);
  uint64_t v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_1A4942FB0();
  __break(1u);
  return result;
}

uint64_t sub_1A46FB7A4()
{
  return swift_release();
}

uint64_t sub_1A46FB800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = sub_1A4942DB0();
  MEMORY[0x1F4188790](v13 - 8);
  unint64_t v15 = (char *)&v23 - v14;
  v28[0] = PrivateZoneModel.identifier.getter();
  v28[1] = v16;
  uint64_t v24 = a5;
  uint64_t v25 = a4;
  uint64_t v26 = a7;
  uint64_t v27 = a6;
  uint64_t v17 = _s14descr1EF8234B1V2IDVMa();
  MEMORY[0x1A625FC10](&v29, v28, a3, MEMORY[0x1E4FBB1A0], v17, MEMORY[0x1E4FBB1B0]);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v19 = v30;
  if (v30)
  {
    uint64_t v20 = v31;
    uint64_t v21 = v29;
    uint64_t v22 = *(void *)(a4 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v15, a2, a4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v15, 0, 1, a4);
    uint64_t v24 = v21;
    uint64_t v25 = v19;
    uint64_t v26 = v20;
    swift_getWitnessTable();
    sub_1A4942A90();
    return sub_1A4942AB0();
  }
  return result;
}

uint64_t sub_1A46FB9D8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1A46E2BD4(*(void *)a1, *(void *)(a1 + 8), *(id *)(a1 + 16));
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A46FBA18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1A4701C38();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1A46FBA40()
{
  return sub_1A49423F0();
}

uint64_t sub_1A46FBAA4(uint64_t a1)
{
  uint64_t v2 = sub_1A47000F0(&qword_1E9651E88, type metadata accessor for CKError);
  return MEMORY[0x1F40E6E20](a1, v2);
}

uint64_t sub_1A46FBB10(uint64_t a1)
{
  uint64_t v2 = sub_1A47000F0(&qword_1E9651E88, type metadata accessor for CKError);
  return MEMORY[0x1F40E6E10](a1, v2);
}

uint64_t sub_1A46FBB7C(uint64_t a1)
{
  uint64_t v2 = sub_1A47000F0((unint64_t *)&unk_1E9651FF0, type metadata accessor for CKError);
  return MEMORY[0x1F40E4480](a1, v2);
}

id sub_1A46FBBE8()
{
  return *v0;
}

uint64_t sub_1A46FBBF0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_1A46FBBF8()
{
  return sub_1A4942AE0();
}

uint64_t sub_1A46FBC08(uint64_t a1)
{
  uint64_t v2 = sub_1A47000F0((unint64_t *)&unk_1E9651FF0, type metadata accessor for CKError);
  return MEMORY[0x1F40E44F0](a1, v2);
}

uint64_t sub_1A46FBC74(uint64_t a1)
{
  uint64_t v2 = sub_1A47000F0((unint64_t *)&unk_1E9651FF0, type metadata accessor for CKError);
  return MEMORY[0x1F40E44A8](a1, v2);
}

uint64_t sub_1A46FBCE0(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1A47000F0((unint64_t *)&unk_1E9651FF0, type metadata accessor for CKError);
  id v5 = a1;
  return MEMORY[0x1F40E4498](v5, a2, v4);
}

uint64_t sub_1A46FBD70()
{
  id v1 = *v0;
  uint64_t v2 = sub_1A4942D80();

  return v2;
}

uint64_t sub_1A46FBDA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1A47000F0((unint64_t *)&unk_1E9651FF0, type metadata accessor for CKError);
  return MEMORY[0x1F40E44D8](a1, a2, v4);
}

uint64_t sub_1A46FBE24()
{
  return sub_1A4943140();
}

uint64_t sub_1A46FBE84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1A47000F0((unint64_t *)&unk_1E9651FF0, type metadata accessor for CKError);
  return MEMORY[0x1F40E44B8](a1, a2, a3, v6);
}

uint64_t sub_1A46FBF08(uint64_t a1, uint64_t a2)
{
  if (swift_isClassType()) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    return __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651D60);
  }
  else
  {
    return MEMORY[0x1F4185768](0, a2);
  }
}

uint64_t type metadata accessor for PrivateZoneLocation()
{
  uint64_t result = qword_1EB5D08F0;
  if (!qword_1EB5D08F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1A46FBFC4()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1A46FBFFC()
{
  uint64_t v1 = *(void *)(type metadata accessor for PrivateZoneLocation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 64) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  swift_release();
  uint64_t v5 = sub_1A4942130();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }
  return MEMORY[0x1F4186498](v0, v3 + v4, v2 | 7);
}

uint64_t sub_1A46FC128(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PrivateZoneLocation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A46FC18C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for PrivateZoneLocation() - 8);
  uint64_t v5 = (char *)v1 + ((*(unsigned __int8 *)(v4 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = swift_task_alloc();
  long long v8 = v1[2];
  long long v7 = v1[3];
  long long v9 = v1[1];
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = sub_1A46E2688;
  *(_OWORD *)(v6 + 120) = v8;
  *(_OWORD *)(v6 + 104) = v9;
  *(void *)(v6 + 96) = v5;
  *(_OWORD *)(v6 + 80) = v7;
  *(void *)(v6 + 72) = a1;
  return MEMORY[0x1F4188298](sub_1A46EFAF4, 0, 0);
}

uint64_t sub_1A46FC294(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_1A46FC2E4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((~(a1 & a2) & 0xF000000000000007) != 0 || (a4 & 0x3000000000000000) != 0x3000000000000000) {
    sub_1A46EE728(a1, a2, a3, a4);
  }
}

uint64_t sub_1A46FC30C()
{
  uint64_t v1 = *(void (**)(void))(v0 + 56);
  sub_1A49424C0();
  v1();
  return swift_release();
}

uint64_t sub_1A46FC374()
{
  uint64_t v1 = *(void (**)(void))(v0 + 72);
  sub_1A49424F0();
  v1();
  return swift_release();
}

uint64_t sub_1A46FC3EC(uint64_t a1, uint64_t a2)
{
  return sub_1A46F27D8(a1, a2, v2[6], v2[7], v2[3], v2[5]);
}

uint64_t sub_1A46FC410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 40);
  v17[1] = *(void *)(v3 + 48);
  v12[2] = v5;
  long long v13 = *(_OWORD *)(v3 + 24);
  uint64_t v14 = v6;
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v7 = sub_1A4942BE0();
  uint64_t v8 = sub_1A4942820();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CFB00);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = sub_1A46F302C((void (*)(char *, char *))sub_1A4701370, (uint64_t)v12, v7, v8, v9, WitnessTable, MEMORY[0x1E4FBC0F0], (uint64_t)v17);
  if (!v4)
  {
    sub_1A49429A0();
    sub_1A4942980();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1A46FC530(uint64_t result, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + 48);
  uint64_t v5 = *(unsigned char **)(v2 + 56);
  uint64_t v6 = *(void *)(v4 + 16);
  if (v6)
  {
    v14[11] = a2;
    swift_bridgeObjectRetain();
    uint64_t v7 = v4 + 40;
    while (1)
    {
      swift_bridgeObjectRetain();
      sub_1A49424E0();
      sub_1A4942550();
      if (v3) {
        break;
      }
      v7 += 16;
      swift_release();
      swift_bridgeObjectRelease();
      if (!--v6)
      {
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_6:
    if ((*v5 & 1) == 0)
    {
      sub_1A49424C0();
      uint64_t v8 = (void *)sub_1A4942480();
      if (!v3)
      {
        if (v8[2])
        {
          uint64_t v9 = v8[4];
          uint64_t v10 = v8[5];
          uint64_t v11 = v8[6];
          uint64_t v12 = v8[7];
          uint64_t v13 = v8[8];
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          sub_1A47024BC((uint64_t)v14);
          swift_release();
          uint64_t v12 = v14[3];
          uint64_t v13 = v14[4];
          uint64_t v10 = v14[1];
          uint64_t v11 = v14[2];
          uint64_t v9 = v14[0];
        }
        v14[5] = v9;
        v14[6] = v10;
        v14[7] = v11;
        v14[8] = v12;
        v14[9] = v13;
        sub_1A47027A8();
        sub_1A4942520();
        swift_release();
        sub_1A49424B0();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        sub_1A4942470();
        swift_release_n();
        swift_release_n();
        swift_release_n();
        swift_release_n();
        swift_release_n();
      }
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1A46FC77C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(v3 + 48);
  long long v6 = *(_OWORD *)(v3 + 32);
  v8[1] = *(_OWORD *)(v3 + 16);
  _OWORD v8[2] = v6;
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  uint64_t result = sub_1A46F2D3C((void (*)(void *, uint64_t *))sub_1A4701260, (uint64_t)v8, v5);
  if (!v4)
  {
    sub_1A49429A0();
    sub_1A4942980();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1A46FC810(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651E18);
  uint64_t v10 = *(void *)(sub_1A4942820() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = sub_1A4942F40();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_1A4942820() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1A46FE158(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_1A46FCA78(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1A46FCB4C(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1A46FFC80((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1A46FFC80((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_1A46FCB4C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1A4942DD0();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1A46FCD08(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_1A4942E50();
  if (!v8)
  {
    sub_1A4942F40();
    __break(1u);
LABEL_17:
    uint64_t result = sub_1A4942FB0();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1A46FCD08(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_1A46FCDA0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1A46FCF80(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1A46FCF80(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1A46FCDA0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1A46FCF18(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_1A4942E00();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_1A4942F40();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_1A4942B00();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    sub_1A4942FB0();
    __break(1u);
LABEL_14:
    uint64_t result = sub_1A4942F40();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

void *sub_1A46FCF18(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651E28);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1A46FCF80(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651E28);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1A4942FB0();
  __break(1u);
  return result;
}

uint64_t sub_1A46FD0D0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1A46FD0F0(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1A46FD0F0(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651E18);
  uint64_t v10 = *(void *)(sub_1A4942820() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_1A4942820() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (char *)v13 + v17;
  uint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = sub_1A4942FB0();
  __break(1u);
  return result;
}

uint64_t sub_1A46FD330(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651E20);
  uint64_t v6 = sub_1A4942F90();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          unint64_t v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      id v34 = v32;
    }
    uint64_t result = sub_1A4942D50();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v36;
  uint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

unint64_t sub_1A46FD604(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_1A46E3134(0, &qword_1E9651AB0);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = sub_1A4942D60();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = sub_1A4942D60();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

uint64_t sub_1A46FD720(unint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = sub_1A4942F10();
    if (v2) {
      goto LABEL_3;
    }
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return MEMORY[0x1E4FBC860];
  }
LABEL_3:
  if (v2 <= 0)
  {
    uint64_t v3 = (uint64_t *)MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651D60);
    uint64_t v3 = (uint64_t *)swift_allocObject();
    int64_t v4 = _swift_stdlib_malloc_size(v3);
    uint64_t v5 = v4 - 32;
    if (v4 < 32) {
      uint64_t v5 = v4 - 25;
    }
    v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1A46FDE84((uint64_t)&v8, v3 + 4, v2, a1);
  uint64_t result = sub_1A46FFC74();
  if (v6 == v2) {
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

unint64_t sub_1A46FD81C(uint64_t a1)
{
  uint64_t v2 = sub_1A4942D50();
  return sub_1A46FD604(a1, v2);
}

uint64_t sub_1A46FD860(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t result = sub_1A4942F10();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t *v3 = sub_1A46FD914(v7, result + 1);
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  sub_1A46FDB68(a1, a2, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v10;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A46FD914(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651E20);
    uint64_t v2 = sub_1A4942FA0();
    uint64_t v18 = v2;
    sub_1A4942F00();
    uint64_t v3 = sub_1A4942F30();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_1A46E3134(0, &qword_1E9651AB0);
      do
      {
        swift_dynamicCast();
        sub_1A46E3134(0, (unint64_t *)&qword_1E9651998);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_1A46FD330(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        uint64_t result = sub_1A4942D50();
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = sub_1A4942F30();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC868];
  }
  return v2;
}

void sub_1A46FDB68(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_1A46FD81C((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1A46FDCDC();
LABEL_7:
    BOOL v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_1A46FD330(v12, a3 & 1);
  unint64_t v17 = sub_1A46FD81C((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    sub_1A46E3134(0, &qword_1E9651AB0);
    sub_1A49430A0();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  BOOL v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v15[2] = v22;
  id v23 = a2;
}

id sub_1A46FDCDC()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651E20);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1A4942F80();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    char v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1A46FDE84(uint64_t result, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v6 = a2;
  unint64_t v7 = (void *)result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    id result = sub_1A4942F00();
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    unint64_t v4 = result | 0x8000000000000000;
    if (v6) {
      goto LABEL_3;
    }
LABEL_36:
    int64_t v11 = 0;
    a3 = 0;
LABEL_45:
    *unint64_t v7 = v4;
    v7[1] = v8;
    v7[2] = v9;
    v7[3] = v11;
    v7[4] = v10;
    return a3;
  }
  uint64_t v19 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v8 = a4 + 64;
  uint64_t v20 = ~v19;
  uint64_t v21 = -v19;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  else {
    uint64_t v22 = -1;
  }
  unint64_t v10 = v22 & *(void *)(a4 + 64);
  uint64_t v9 = v20;
  if (!a2) {
    goto LABEL_36;
  }
LABEL_3:
  if (!a3)
  {
    int64_t v11 = 0;
    goto LABEL_45;
  }
  if (a3 < 0)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v23 = v9;
  int64_t v11 = 0;
  uint64_t v12 = 0;
  int64_t v24 = (unint64_t)(v9 + 64) >> 6;
  while ((v4 & 0x8000000000000000) != 0)
  {
    if (!sub_1A4942F30())
    {
      a3 = v12;
LABEL_44:
      uint64_t v9 = v23;
      goto LABEL_45;
    }
    swift_unknownObjectRelease();
    sub_1A46E3134(0, (unint64_t *)&qword_1E9651998);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v15 = v25;
    id result = swift_unknownObjectRelease();
    if (!v25) {
      goto LABEL_43;
    }
LABEL_8:
    ++v12;
    *v6++ = v15;
    if (v12 == a3) {
      goto LABEL_44;
    }
  }
  if (v10)
  {
    unint64_t v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v14 = v13 | (v11 << 6);
    goto LABEL_7;
  }
  int64_t v16 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_47;
  }
  if (v16 >= v24) {
    goto LABEL_39;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v16);
  if (v17) {
    goto LABEL_23;
  }
  v11 += 2;
  if (v16 + 1 >= v24)
  {
    unint64_t v10 = 0;
    int64_t v11 = v16;
    goto LABEL_43;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v11);
  if (v17)
  {
LABEL_16:
    int64_t v16 = v11;
LABEL_23:
    unint64_t v10 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v11 = v16;
LABEL_7:
    id result = (uint64_t)*(id *)(*(void *)(v4 + 56) + 8 * v14);
    uint64_t v15 = result;
    if (!result) {
      goto LABEL_43;
    }
    goto LABEL_8;
  }
  int64_t v18 = v16 + 2;
  if (v16 + 2 >= v24) {
    goto LABEL_39;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
LABEL_22:
    int64_t v16 = v18;
    goto LABEL_23;
  }
  int64_t v11 = v16 + 3;
  if (v16 + 3 >= v24)
  {
    unint64_t v10 = 0;
    int64_t v11 = v16 + 2;
    goto LABEL_43;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v11);
  if (v17) {
    goto LABEL_16;
  }
  int64_t v18 = v16 + 4;
  if (v16 + 4 >= v24)
  {
LABEL_39:
    unint64_t v10 = 0;
LABEL_43:
    a3 = v12;
    goto LABEL_44;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17) {
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v16 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v16 >= v24)
    {
      unint64_t v10 = 0;
      int64_t v11 = v24 - 1;
      goto LABEL_43;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_1A46FE158(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(sub_1A4942820() - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = sub_1A4942FB0();
  __break(1u);
  return result;
}

uint64_t sub_1A46FE2B0(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = sub_1A4942930();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1A46FE370, 0, 0);
}

uint64_t sub_1A46FE370()
{
  uint64_t v21 = v0;
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[6];
  v0[9] = qword_1EB5D0860;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v5 = sub_1A49422A0();
  os_log_type_t v6 = sub_1A4942CC0();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = v0[7];
    uint64_t v19 = v0[8];
    uint64_t v8 = v0[6];
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446210;
    uint64_t v20 = v10;
    sub_1A47000F0(&qword_1E9651E50, MEMORY[0x1E4F19B98]);
    uint64_t v11 = sub_1A4943050();
    v0[3] = sub_1A46FCA78(v11, v12, &v20);
    sub_1A4942DC0();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v19, v8);
    _os_log_impl(&dword_1A460D000, v5, v6, "Will handle event from sync engine, event=%{public}s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A6261A10](v10, -1, -1);
    MEMORY[0x1A6261A10](v9, -1, -1);
  }
  else
  {
    uint64_t v14 = v0[7];
    uint64_t v13 = v0[8];
    uint64_t v15 = v0[6];

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }
  int64_t v16 = (void *)swift_task_alloc();
  v0[10] = v16;
  *int64_t v16 = v0;
  v16[1] = sub_1A46FE5CC;
  uint64_t v17 = v0[4];
  return sub_1A46F3BF0(v17);
}

uint64_t sub_1A46FE5CC()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1A46FE7C0;
  }
  else {
    uint64_t v2 = sub_1A46FE6E0;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1A46FE6E0()
{
  uint64_t v1 = sub_1A49422A0();
  os_log_type_t v2 = sub_1A4942CC0();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1A460D000, v1, v2, "Did handle event from sync engine", v3, 2u);
    MEMORY[0x1A6261A10](v3, -1, -1);
  }

  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1A46FE7C0()
{
  uint64_t v1 = (void *)v0[11];
  id v2 = v1;
  id v3 = v1;
  uint64_t v4 = sub_1A49422A0();
  os_log_type_t v5 = sub_1A4942CB0();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (void *)v0[11];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138543362;
    id v9 = v6;
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v10;
    sub_1A4942DC0();
    *uint64_t v8 = v10;

    _os_log_impl(&dword_1A460D000, v4, v5, "Failed to handle event from sync engine, error=%{public}@", v7, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651F50);
    swift_arrayDestroy();
    MEMORY[0x1A6261A10](v8, -1, -1);
    MEMORY[0x1A6261A10](v7, -1, -1);
  }
  else
  {
    uint64_t v11 = (void *)v0[11];
  }
  swift_task_dealloc();
  unint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1A46FE984(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

unint64_t sub_1A46FE998()
{
  unint64_t result = qword_1E9651D90[0];
  if (!qword_1E9651D90[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9651D90);
  }
  return result;
}

unint64_t sub_1A46FE9F4()
{
  unint64_t result = qword_1EB5CF700;
  if (!qword_1EB5CF700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CF700);
  }
  return result;
}

unint64_t sub_1A46FEA4C()
{
  unint64_t result = qword_1EB5CF710;
  if (!qword_1EB5CF710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CF710);
  }
  return result;
}

uint64_t sub_1A46FEAA0(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 104);
}

uint64_t sub_1A46FEAA8(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 96);
}

uint64_t dispatch thunk of PrivateZoneType.query<A>(options:executor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a7 + 40)
                                                                                              + **(int **)(a7 + 40));
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v15;
  void *v15 = v7;
  v15[1] = sub_1A46E2898;
  return v17(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t dispatch thunk of PrivateZoneType.querySome<A, B>(options:executor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a9 + 48) + **(int **)(a9 + 48));
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v9 + 16) = v17;
  *uint64_t v17 = v9;
  v17[1] = sub_1A46E2898;
  return v19(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t dispatch thunk of PrivateZoneType.add(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 56) + **(int **)(a3 + 56));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1A46E2898;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of PrivateZoneType.remove(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 64) + **(int **)(a3 + 64));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1A46E2898;
  return v9(a1, a2, a3);
}

ValueMetadata *type metadata accessor for PrivateZoneQueryOptions()
{
  return &type metadata for PrivateZoneQueryOptions;
}

uint64_t *initializeBufferWithCopyOfBuffer for PrivateZoneLocation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = sub_1A4942130();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for PrivateZoneLocation(uint64_t a1)
{
  uint64_t v2 = sub_1A4942130();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for PrivateZoneLocation(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1A4942130();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithCopy for PrivateZoneLocation(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1A4942130();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *initializeWithTake for PrivateZoneLocation(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1A4942130();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithTake for PrivateZoneLocation(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1A4942130();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for PrivateZoneLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1A46FF680);
}

uint64_t sub_1A46FF680(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1A4942130();
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PrivateZoneLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1A46FF700);
}

uint64_t sub_1A46FF700(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = sub_1A4942130();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(a1, v5, a3, v6);
}

uint64_t sub_1A46FF780(uint64_t a1)
{
  uint64_t v2 = sub_1A4942130();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);
  return v3(a1, 1, v2);
}

uint64_t sub_1A46FF7E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1A4942130();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, 1, v4);
}

uint64_t sub_1A46FF858()
{
  uint64_t result = sub_1A4942130();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t sub_1A46FF8D4()
{
  uint64_t result = sub_1A49422C0();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for PrivateZone()
{
  return swift_getGenericMetadata();
}

uint64_t method lookup function for PrivateZone(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PrivateZone);
}

uint64_t type metadata accessor for PrivateZone.Errors()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for CKError(uint64_t a1)
{
}

uint64_t sub_1A46FF9CC()
{
  return sub_1A46F79A4() & 1;
}

void sub_1A46FF9FC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  unint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = **(uint64_t ***)(v2 + 32);
  id v8 = *a1;
  sub_1A46EE638(v5, v6);
  uint64_t v9 = sub_1A46E2D28(v8, v5, v6, v7[10], v7[11], v7[12]);
  if (v3)
  {
    id v12 = v8;
    uint64_t v13 = sub_1A49422A0();
    os_log_type_t v14 = sub_1A4942CB0();
    if (os_log_type_enabled(v13, v14))
    {
      os_log_t log = v13;
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 138543362;
      id v16 = v12;
      sub_1A4942DC0();
      *uint64_t v17 = v12;

      _os_log_impl(&dword_1A460D000, log, v14, "Failed to convert record ID to model ID, recordID=%{public}@", v15, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651F50);
      swift_arrayDestroy();
      MEMORY[0x1A6261A10](v17, -1, -1);
      MEMORY[0x1A6261A10](v15, -1, -1);
    }
    else
    {
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    *a2 = v9;
    a2[1] = v10;
    a2[2] = v11;
  }
}

uint64_t sub_1A46FFC2C@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  return sub_1A46F7E64(a1, v2[6], v2[2], v2[3], v2[4], v2[5], a2);
}

void sub_1A46FFC54(uint64_t a1, uint64_t a2)
{
  sub_1A46F8994(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t sub_1A46FFC74()
{
  return swift_release();
}

uint64_t sub_1A46FFC80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1A46FFCDC(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)a2[2];
  sub_1A46E2BD4(*a2, a2[1], v4);
  swift_bridgeObjectRetain();
  id v2 = v4;
  _s14descr1EF8234B1V2IDVMa();
  sub_1A4942A90();
  return sub_1A4942AB0();
}

uint64_t sub_1A46FFDB8()
{
  return 32;
}

__n128 sub_1A46FFDC4(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1A46FFDD4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1A470005C(a1, a2);
}

uint64_t sub_1A46FFDEC()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_1A4706EB4();
  sub_1A4942510();
  uint64_t result = swift_release();
  if (v6)
  {
    v4[0] = v5[3];
    v4[1] = v6;
    uint64_t v3 = _s14descr1EF8234B1V2IDVMa();
    MEMORY[0x1A625FC10](v5, v4, v1, MEMORY[0x1E4FBB1A0], v3, MEMORY[0x1E4FBB1B0]);
    uint64_t result = swift_bridgeObjectRelease();
    if (v5[1])
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_getWitnessTable();
      sub_1A4942A90();
      return sub_1A4942AB0();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A46FFF4C(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a2 + 16);
  swift_bridgeObjectRetain_n();
  id v3 = v2;
  _s14descr1EF8234B1V2IDVMa();
  sub_1A4942A90();
  return sub_1A4942AB0();
}

uint64_t sub_1A46FFFF0(uint64_t a1, uint64_t a2, void *a3)
{
  swift_bridgeObjectRetain();
  id v4 = a3;
  swift_getAtKeyPath();
  swift_bridgeObjectRelease();

  return v6;
}

uint64_t sub_1A470005C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void, void))(v2 + 48))(*a1, a1[1], a1[2]);
  uint64_t v5 = MEMORY[0x1E4FAA778];
  a2[3] = MEMORY[0x1E4FBB1A0];
  a2[4] = v5;
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_1A47000BC(uint64_t a1, uint64_t a2)
{
  return sub_1A46FB800(a1, a2, v2[6], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_1A47000F0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A4700138()
{
  return swift_release();
}

uint64_t sub_1A470017C()
{
  uint64_t v1 = v0;
  unint64_t v2 = MEMORY[0x1A625FA30]();
  unint64_t v3 = v2;
  if (v2 >> 62) {
    goto LABEL_13;
  }
  for (uint64_t i = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = sub_1A4942F70())
  {
    uint64_t v11 = v1;
    for (uint64_t j = 4; ; ++j)
    {
      id v6 = (v3 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1A625FF90](j - 4, v3) : *(id *)(v3 + 8 * j);
      uint64_t v7 = v6;
      uint64_t v8 = j - 3;
      if (__OFADD__(j - 4, 1)) {
        break;
      }
      uint64_t v1 = i;
      sub_1A49424B0();
      id v9 = v7;
      sub_1A47068A0(v9);
      sub_1A4942470();
      if (v11)
      {
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        return swift_bridgeObjectRelease();
      }
      swift_release();
      swift_release();
      swift_release();

      swift_release();
      if (v8 == i) {
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_13:
    ;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A4700300()
{
  sub_1A49424E0();
  sub_1A4942560();
  uint64_t result = swift_release();
  if (!v0)
  {
    sub_1A49424E0();
    sub_1A4942560();
    return swift_release();
  }
  return result;
}

uint64_t sub_1A4700374(uint64_t a1)
{
  return sub_1A46F56E0(a1);
}

uint64_t sub_1A4700390()
{
  unint64_t v2 = v1;
  unint64_t v3 = *(void *)(v0 + 16);
  unint64_t v27 = *(void *)(v0 + 40);
  uint64_t v28 = *(void *)(v0 + 32);
  id v4 = **(uint64_t ***)(v0 + 24);
  if (!(v3 >> 62))
  {
    uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v5) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_1A4942F70();
  uint64_t v5 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  if (v5 >= 1)
  {
    uint64_t v7 = 0;
    unint64_t v26 = v3 & 0xC000000000000001;
    unint64_t v25 = v3;
    do
    {
      if (v26) {
        id v8 = (id)MEMORY[0x1A625FF90](v7, v3);
      }
      else {
        id v8 = *(id *)(v3 + 8 * v7 + 32);
      }
      id v9 = v8;
      sub_1A49424E0();
      id v10 = objc_msgSend(v9, sel_recordName);
      sub_1A4942AE0();

      sub_1A4942550();
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_release();
        id v11 = v9;
        id v12 = v2;
        id v13 = v11;
        id v14 = v2;
        uint64_t v15 = sub_1A49422A0();
        os_log_type_t v16 = sub_1A4942CB0();
        if (os_log_type_enabled(v15, v16))
        {
          uint64_t v17 = swift_slowAlloc();
          uint64_t v18 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v17 = 138543618;
          *(void *)(v17 + 4) = v13;
          void *v18 = v13;

          *(_WORD *)(v17 + 12) = 2114;
          id v19 = v2;
          uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v17 + 14) = v20;
          v18[1] = v20;

          _os_log_impl(&dword_1A460D000, v15, v16, "Failed to delete record metadata from database, recordID=%{public}@, error=%{public}@", (uint8_t *)v17, 0x16u);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651F50);
          swift_arrayDestroy();
          uint64_t v21 = v18;
          unint64_t v3 = v25;
          MEMORY[0x1A6261A10](v21, -1, -1);
          MEMORY[0x1A6261A10](v17, -1, -1);
        }
        else
        {
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
      }
      id v22 = v9;
      sub_1A46EE638(v28, v27);
      sub_1A46E2D28(v22, v28, v27, v4[10], v4[11], v4[12]);
      int64_t v24 = v23;
      sub_1A49424E0();
      sub_1A4942550();
      unint64_t v2 = 0;

      swift_release();
      swift_bridgeObjectRelease();

      ++v7;
    }
    while (v5 != v7);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1A4700878()
{
  unint64_t v2 = *(void (**)(void *))(v0 + 48);
  sub_1A49424C0();
  unint64_t v3 = (void *)sub_1A4942480();
  if (!v1)
  {
    id v12 = v2;
    if (v3[2])
    {
      uint64_t v5 = v3[4];
      uint64_t v4 = v3[5];
      uint64_t v7 = v3[6];
      uint64_t v6 = v3[7];
      uint64_t v8 = v3[8];
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1A47024BC((uint64_t)v11);
      swift_release();
      uint64_t v6 = v11[3];
      uint64_t v8 = v11[4];
      uint64_t v4 = v11[1];
      uint64_t v7 = v11[2];
      uint64_t v5 = v11[0];
    }
    v10[0] = v5;
    v10[1] = v4;
    void v10[2] = v7;
    v10[3] = v6;
    v10[4] = v8;
    v12(v10);
    sub_1A49424B0();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1A4942470();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
  }
  return swift_release();
}

uint64_t sub_1A4700A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A46FA748(a1, a3, *(void *)(v3 + 16), *(void **)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40));
}

uint64_t sub_1A4700A80@<X0>(uint64_t *a1@<X8>)
{
  sub_1A470120C();
  sub_1A49424F0();
  uint64_t v3 = sub_1A4942610();
  uint64_t result = swift_release();
  if (!v1)
  {
    *a1 = v3;
    sub_1A49424F0();
    uint64_t v5 = sub_1A4942610();
    uint64_t result = swift_release();
    a1[1] = v5;
  }
  return result;
}

void sub_1A4700B4C(uint64_t a1, uint64_t *a2)
{
  sub_1A4700C04(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, unint64_t, void, void, void, void))sub_1A46E2C2C, "Failed to convert model entity ID to normalized ID, entityID=%{public}s");
}

uint64_t sub_1A4700B80(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1A4700BD0(uint64_t a1, uint64_t *a2)
{
  sub_1A4700C04(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, unint64_t, void, void, void, void))sub_1A46E2DA0, "Failed to convert record entity ID to normalized ID, entityID=%{public}s");
}

void sub_1A4700C04(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, unint64_t, uint64_t, unint64_t, void, void, void, void), const char *a4)
{
  uint64_t v5 = *(void *)(v4 + 16);
  unint64_t v6 = *(void *)(v4 + 24);
  uint64_t v7 = **(void ***)(v4 + 32);
  uint64_t v8 = *a2;
  uint64_t v22 = a2[1];
  sub_1A4942370();
  sub_1A4942510();
  swift_release();
  if (v20)
  {
    sub_1A46EE638(v5, v6);
    uint64_t v9 = a3(v19, v20, v5, v6, v7[10], v7[11], v7[12], v7[13]);
    if (v17)
    {
      swift_retain_n();
      swift_retain_n();
      id v12 = sub_1A49422A0();
      os_log_type_t v13 = sub_1A4942CB0();
      if (os_log_type_enabled(v12, v13))
      {
        id v14 = (uint8_t *)swift_slowAlloc();
        uint64_t v15 = swift_slowAlloc();
        v21[0] = v15;
        *(_DWORD *)id v14 = 136446210;
        sub_1A4942370();
        sub_1A4942510();
        swift_release();
        sub_1A46FCA78(v19, v20, v21);
        sub_1A4942DC0();
        swift_bridgeObjectRelease();
        swift_release_n();
        swift_release_n();
        _os_log_impl(&dword_1A460D000, v12, v13, a4, v14, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A6261A10](v15, -1, -1);
        MEMORY[0x1A6261A10](v14, -1, -1);
      }
      else
      {

        swift_release_n();
        swift_release_n();
      }
    }
    else
    {
      v21[3] = v8;
      v21[4] = v22;
      v21[0] = v9;
      v21[1] = v10;
      void v21[2] = v11;
      swift_retain();
      swift_retain();
      _s14descr1EF8234B1V2IDVMa();
      swift_getWitnessTable();
      sub_1A4942A90();
      sub_1A4942AB0();
    }
  }
  else
  {
    __break(1u);
    swift_release();
    swift_release();
    __break(1u);
  }
}

uint64_t sub_1A4700F1C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  return sub_1A46FB388(a1, a2, a3, a5, v5[6], v5[2], v5[3], v5[4], v5[5]) & 1;
}

uint64_t sub_1A4700F54(void *a1, void *a2)
{
  return sub_1A470103C(a1, a2) & 1;
}

BOOL sub_1A4700F70(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(v3 + 48);
  v13[0] = a1;
  v13[1] = a2;
  v13[2] = a3;
  swift_bridgeObjectRetain();
  id v6 = a3;
  long long v7 = *(_OWORD *)(v3 + 32);
  v12[0] = *(_OWORD *)(v3 + 16);
  v12[1] = v7;
  uint64_t v8 = _s14descr1EF8234B1V2IDVMa();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x1A625FC10](v12, v13, v5, v8, &type metadata for IDAndModEntity, WitnessTable);
  swift_bridgeObjectRelease();

  uint64_t v10 = *(void *)&v12[0];
  if (*(void *)&v12[0]) {
    sub_1A47011CC(*(uint64_t *)&v12[0]);
  }
  return v10 == 0;
}

uint64_t sub_1A470103C(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void, void, void, void))(v2 + 48))(*a1, a1[1], a1[2], *a2, a2[1]) & 1;
}

id sub_1A4701084@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1A47010C4(a1, MEMORY[0x1E4F19B40], a2);
}

id sub_1A47010A4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1A47010C4(a1, MEMORY[0x1E4F19B48], a2);
}

id sub_1A47010C4@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X2>, void *a3@<X8>)
{
  uint64_t v4 = *(void **)(a1 + 16);
  *a3 = v4;
  uint64_t v5 = *a2;
  uint64_t v6 = sub_1A4942820();
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(a3, v5, v6);
  return v4;
}

void sub_1A4701140(uint64_t a1)
{
}

void sub_1A4701158(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  swift_bridgeObjectRetain();
  id v2 = v1;
  swift_getAtKeyPath();
  swift_bridgeObjectRelease();
}

uint64_t sub_1A47011CC(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t sub_1A470120C()
{
  unint64_t result = qword_1E9658210[0];
  if (!qword_1E9658210[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9658210);
  }
  return result;
}

uint64_t sub_1A4701260@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = v3[2];
  uint64_t v6 = v3[3];
  uint64_t v7 = v3[4];
  uint64_t v9 = v3[6];
  unint64_t v8 = v3[7];
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  swift_bridgeObjectRetain();
  sub_1A46EE638(v9, v8);
  uint64_t result = sub_1A46E2C2C(v10, v11, v9, v8, v5, v6, v7);
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    *a3 = v14;
    uint64_t v15 = *MEMORY[0x1E4F19B48];
    uint64_t v16 = sub_1A4942820();
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104))(a3, v15, v16);
  }
  return result;
}

uint64_t sub_1A4701370@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = v2[2];
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  uint64_t v8 = v2[6];
  unint64_t v7 = v2[7];
  uint64_t v9 = PrivateZoneModel.identifier.getter();
  uint64_t v11 = v10;
  sub_1A46EE638(v8, v7);
  uint64_t result = sub_1A46E2C2C(v9, v11, v8, v7, v4, v5, v6);
  if (v3)
  {
    *a1 = v3;
  }
  else
  {
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    *a2 = v14;
    uint64_t v15 = *MEMORY[0x1E4F19B40];
    uint64_t v16 = sub_1A4942820();
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104))(a2, v15, v16);
  }
  return result;
}

uint64_t sub_1A4701490@<X0>(void *a1@<X8>)
{
  sub_1A49424C0();
  uint64_t v3 = (void *)sub_1A4942480();
  if (v1) {
    return swift_release();
  }
  if (v3[2])
  {
    uint64_t v6 = v3[4];
    uint64_t v5 = v3[5];
    uint64_t v8 = v3[6];
    uint64_t v7 = v3[7];
    uint64_t v9 = v3[8];
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1A47024BC((uint64_t)v10);
    uint64_t result = swift_release();
    uint64_t v7 = v10[3];
    uint64_t v9 = v10[4];
    uint64_t v5 = v10[1];
    uint64_t v8 = v10[2];
    uint64_t v6 = v10[0];
  }
  *a1 = v6;
  a1[1] = v5;
  a1[2] = v8;
  a1[3] = v7;
  a1[4] = v9;
  return result;
}

uint64_t destroy for IDAndModEntity()
{
  swift_release();
  return swift_release();
}

void *_s8NewsCore14IDAndModEntityVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for IDAndModEntity(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for IDAndModEntity(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for IDAndModEntity(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IDAndModEntity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDAndModEntity()
{
  return &type metadata for IDAndModEntity;
}

unsigned char *sub_1A470173C(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    __CFString *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A4701808);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          __CFString *result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1A4701830()
{
  return swift_getWitnessTable();
}

uint64_t sub_1A470184C()
{
  return sub_1A47000F0((unint64_t *)&unk_1E9652020, type metadata accessor for CKError);
}

uint64_t sub_1A4701894()
{
  return sub_1A47000F0(&qword_1E9651E80, type metadata accessor for CKError);
}

unint64_t sub_1A47018E0()
{
  unint64_t result = qword_1E96585A0;
  if (!qword_1E96585A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E96585A0);
  }
  return result;
}

unint64_t sub_1A4701938()
{
  unint64_t result = qword_1E96585A8[0];
  if (!qword_1E96585A8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E96585A8);
  }
  return result;
}

uint64_t sub_1A470198C()
{
  return sub_1A47000F0(&qword_1E9651E88, type metadata accessor for CKError);
}

uint64_t sub_1A47019D4()
{
  return sub_1A47000F0((unint64_t *)&unk_1E9652000, type metadata accessor for CKError);
}

uint64_t sub_1A4701A1C()
{
  return sub_1A47000F0(&qword_1E9651E90, type metadata accessor for CKError);
}

uint64_t sub_1A4701A64()
{
  return sub_1A47000F0((unint64_t *)&unk_1E9651FD0, type metadata accessor for Code);
}

void type metadata accessor for Code(uint64_t a1)
{
}

void sub_1A4701AC0(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_1A4701B08()
{
  return sub_1A47000F0((unint64_t *)&unk_1E9652010, type metadata accessor for Code);
}

unint64_t sub_1A4701B54()
{
  unint64_t result = qword_1E9651E98;
  if (!qword_1E9651E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9651E98);
  }
  return result;
}

uint64_t sub_1A4701BA8()
{
  return sub_1A47000F0(&qword_1E9651EA0, type metadata accessor for Code);
}

uint64_t sub_1A4701BF0()
{
  return sub_1A47000F0((unint64_t *)&unk_1E9651FF0, type metadata accessor for CKError);
}

uint64_t sub_1A4701C38()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF600);
  uint64_t v1 = MEMORY[0x1F4188790](v0 - 8);
  int v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)&v18 - v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF610);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF608);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  v13(v11, 1, 1, v12);
  v13(v9, 1, 1, v12);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF660);
  swift_allocObject();
  sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5B0);
  swift_allocObject();
  uint64_t v14 = sub_1A4942360();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5F8);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  v16(v5, 1, 1, v15);
  v16(v3, 1, 1, v15);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF650);
  swift_allocObject();
  sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5A0);
  swift_allocObject();
  sub_1A4942360();
  return v14;
}

BOOL sub_1A4701EF8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1A4701F10(uint64_t a1, uint64_t a2)
{
  return sub_1A4942CD0();
}

uint64_t sub_1A4701FA4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5))
  {
    id v6 = objc_msgSend(objc_allocWithZone((Class)FCCKAESSIVRecordNameCipher), sel_init);
    id v7 = objc_msgSend(a1, sel_recordName);
    if (!v7)
    {
      sub_1A4942AE0();
      id v7 = (id)sub_1A4942AD0();
      swift_bridgeObjectRelease();
    }
    uint64_t v8 = (void *)sub_1A4942140();
    id v9 = objc_msgSend(v6, sel_decryptRecordName_withKey_, v7, v8);

    if (v9)
    {
      uint64_t v10 = sub_1A4942AE0();

      return v10;
    }
    else
    {
      sub_1A4702120();
      swift_allocError();
      unsigned char *v14 = 1;
      return swift_willThrow();
    }
  }
  else
  {
    id v12 = objc_msgSend(a1, sel_recordName);
    uint64_t v13 = sub_1A4942AE0();

    return v13;
  }
}

unint64_t sub_1A4702120()
{
  unint64_t result = qword_1E9658830;
  if (!qword_1E9658830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9658830);
  }
  return result;
}

uint64_t sub_1A4702174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a5, a6) & 1) == 0)
  {
    sub_1A46E3134(0, &qword_1E9651AB0);
    swift_bridgeObjectRetain();
    sub_1A4701F10(a5, a6);
    return sub_1A4942CA0();
  }
  id v8 = objc_msgSend(objc_allocWithZone((Class)FCCKAESSIVRecordNameCipher), sel_init);
  id v9 = (void *)sub_1A4942AD0();
  uint64_t v10 = (void *)sub_1A4942140();
  id v11 = objc_msgSend(v8, sel_encryptRecordName_withKey_, v9, v10);

  if (v11)
  {
    sub_1A4942AE0();

    sub_1A46E3134(0, &qword_1E9651AB0);
    sub_1A4701F10(a5, a6);
    return sub_1A4942CA0();
  }
  sub_1A4702120();
  swift_allocError();
  *uint64_t v13 = 0;
  return swift_willThrow();
}

uint64_t dispatch thunk of static PrivateZoneSchema.zoneName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static PrivateZoneSchema.recordType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static PrivateZoneSchema.encryptsRecordNames.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

unsigned char *storeEnumTagSinglePayload for PrivateZoneSchemaErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    __CFString *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A470242CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          __CFString *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PrivateZoneSchemaErrors()
{
  return &type metadata for PrivateZoneSchemaErrors;
}

unint64_t sub_1A4702468()
{
  unint64_t result = qword_1E9658838[0];
  if (!qword_1E9658838[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9658838);
  }
  return result;
}

double sub_1A47024BC@<D0>(uint64_t a1@<X8>)
{
  sub_1A4703050((uint64_t *)v4);
  double result = *(double *)v4;
  long long v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = v5;
  return result;
}

uint64_t sub_1A4702500@<X0>(uint64_t a1@<X8>)
{
  sub_1A4942370();
  sub_1A4942510();
  swift_release();
  if (v9 >> 60 == 11
    || (__swift_instantiateConcreteTypeFromMangledName(&qword_1E9651EB0),
        sub_1A4942DA0(),
        sub_1A4703748(v8, v9),
        v7 >> 60 == 15))
  {
    uint64_t v3 = sub_1A4942940();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(a1, 1, 1, v3);
  }
  else
  {
    sub_1A4942030();
    swift_allocObject();
    sub_1A4942020();
    uint64_t v5 = sub_1A4942940();
    sub_1A4703770(&qword_1E9651EB8);
    sub_1A4942010();
    if (v1)
    {
      swift_release();
      return sub_1A470375C(v6, v7);
    }
    else
    {
      sub_1A470375C(v6, v7);
      swift_release();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a1, 0, 1, v5);
    }
  }
}

uint64_t sub_1A47026BC()
{
  sub_1A4942370();
  sub_1A4942060();
  swift_allocObject();
  sub_1A4942050();
  sub_1A4942940();
  sub_1A4703770(&qword_1E9651EC0);
  sub_1A4942040();
  swift_release();
  if (!v0) {
    sub_1A4942520();
  }
  return swift_release();
}

uint64_t sub_1A47027A8()
{
  return sub_1A4942370();
}

uint64_t sub_1A47027CC()
{
  return sub_1A4942370();
}

uint64_t sub_1A47027F0()
{
  sub_1A4942370();
  sub_1A4942510();
  swift_release();
  if (v2 == 3) {
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651EC8);
  sub_1A4942DA0();
  return v1 & 1;
}

BOOL sub_1A4702868()
{
  return (sub_1A47037B4(*(void *)(v0 + 24)) & 1) == 0;
}

unint64_t sub_1A470288C(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000016;
      break;
    case 2:
      unint64_t result = 0xD000000000000018;
      break;
    case 3:
      unint64_t result = 0x747269447473616CLL;
      break;
    case 4:
      unint64_t result = 0x61656C437473616CLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1A4702958()
{
  return sub_1A470288C(*v0);
}

uint64_t sub_1A4702960@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1A4703C9C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A4702988(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1A4702994(uint64_t a1)
{
  unint64_t v2 = sub_1A4703C48();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1A47029D0(uint64_t a1)
{
  unint64_t v2 = sub_1A4703C48();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1A4702A0C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651ED0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A4703C48();
  sub_1A4943190();
  uint64_t v11 = *v3;
  HIBYTE(v10) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5B0);
  sub_1A46E7B38(&qword_1E9651AC8, &qword_1EB5CF5B0);
  sub_1A4943030();
  if (!v2)
  {
    uint64_t v11 = v3[1];
    HIBYTE(v10) = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF598);
    sub_1A46E7B38(&qword_1E9651ED8, &qword_1EB5CF598);
    sub_1A4943030();
    uint64_t v11 = v3[2];
    HIBYTE(v10) = 2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5CF5C0);
    sub_1A46E7B38(&qword_1E9651EE0, (uint64_t *)&unk_1EB5CF5C0);
    sub_1A4943030();
    uint64_t v11 = v3[3];
    HIBYTE(v10) = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5A8);
    sub_1A46E7B38(&qword_1E9651EE8, &qword_1EB5CF5A8);
    sub_1A4943030();
    uint64_t v11 = v3[4];
    HIBYTE(v10) = 4;
    sub_1A4943030();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1A4702D18()
{
  return sub_1A49423D0();
}

uint64_t sub_1A4702DC0()
{
  return 0x6174735F636E7973;
}

uint64_t sub_1A4702DDC()
{
  return 0x312E302E31;
}

uint64_t sub_1A4702DF0(uint64_t a1)
{
  unint64_t v2 = sub_1A46EEDAC();
  return MEMORY[0x1F415D4C8](a1, v2);
}

uint64_t sub_1A4702E3C(uint64_t a1)
{
  unint64_t v2 = sub_1A46EEDAC();
  return MEMORY[0x1F415D4D8](a1, v2);
}

uint64_t sub_1A4702E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1A46EEDAC();
  return MEMORY[0x1F415D4D0](a1, a2, a3, v6);
}

double sub_1A4702EEC@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1A4703EB8(a1, (uint64_t *)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1A4702F34(void *a1)
{
  return sub_1A4702A0C(a1);
}

uint64_t sub_1A4702F4C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1A46EEDAC();
  return MEMORY[0x1F415D4F0](a1, a2, v4);
}

uint64_t sub_1A4702F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1A46EEDAC();
  return MEMORY[0x1F415D4E8](a1, a2, a3, v6);
}

uint64_t sub_1A4702FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_1A46EEDAC();
  return MEMORY[0x1F415D4E0](a1, a2, a3, a4, v8);
}

uint64_t sub_1A4703050@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v43 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5F0);
  uint64_t v2 = MEMORY[0x1F4188790](v1 - 8);
  id v42 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  long long v5 = (char *)&v40 - v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF620);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  unint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v40 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5E0);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v40 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF610);
  uint64_t v19 = MEMORY[0x1F4188790](v18 - 8);
  uint64_t v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v40 - v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF608);
  unint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
  v25(v23, 1, 1, v24);
  v25(v21, 1, 1, v24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF660);
  swift_allocObject();
  sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5B0);
  swift_allocObject();
  uint64_t v41 = sub_1A4942360();
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5D8);
  unint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56);
  v27(v17, 1, 1, v26);
  v27(v15, 1, 1, v26);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF648);
  swift_allocObject();
  swift_retain();
  sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF598);
  swift_allocObject();
  uint64_t v40 = sub_1A4942360();
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF618);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56);
  v29(v11, 1, 1, v28);
  v29(v9, 1, 1, v28);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF670);
  swift_allocObject();
  swift_retain();
  sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5CF5C0);
  swift_allocObject();
  uint64_t v30 = sub_1A4942360();
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5E8);
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56);
  v32(v5, 1, 1, v31);
  id v33 = v42;
  v32(v42, 1, 1, v31);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF658);
  swift_allocObject();
  swift_retain();
  sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5A8);
  swift_allocObject();
  uint64_t v34 = sub_1A4942360();
  v32(v5, 1, 1, v31);
  v32(v33, 1, 1, v31);
  swift_allocObject();
  swift_retain();
  sub_1A4942500();
  swift_allocObject();
  uint64_t v35 = sub_1A4942360();
  uint64_t v36 = v41;
  swift_retain();
  uint64_t v37 = v40;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1A4942370();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  long long v44 = xmmword_1A4972BD0;
  sub_1A4942520();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  id v39 = v43;
  uint64_t *v43 = v36;
  v39[1] = v37;
  v39[2] = v30;
  v39[3] = v34;
  v39[4] = v35;
  return result;
}

uint64_t sub_1A4703748(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 11) {
    return sub_1A470375C(a1, a2);
  }
  return a1;
}

uint64_t sub_1A470375C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1A46E2CD0(a1, a2);
  }
  return a1;
}

uint64_t sub_1A4703770(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1A4942940();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A47037B4(uint64_t a1)
{
  uint64_t v39 = a1;
  uint64_t v42 = sub_1A49421A0();
  uint64_t v40 = *(void *)(v42 - 8);
  uint64_t v1 = MEMORY[0x1F4188790](v42);
  uint64_t v38 = (char *)v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v1);
  uint64_t v41 = (char *)v36 - v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF590);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  unint64_t v9 = (char *)v36 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF570);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)v36 - v16;
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)v36 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)v36 - v21;
  sub_1A4942370();
  sub_1A4942510();
  swift_release();
  uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v23(v9, 1, v10) == 1)
  {
    uint64_t v24 = &qword_1EB5CF590;
    uint64_t v25 = (uint64_t)v9;
LABEL_5:
    sub_1A46DE488(v25, v24);
    char v27 = 0;
    return v27 & 1;
  }
  sub_1A46ED8F8((uint64_t)v9, (uint64_t)v22);
  sub_1A46EA778((uint64_t)v22, (uint64_t)v20);
  uint64_t v26 = v40;
  uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
  if (v37(v20, 1, v42) == 1)
  {
    sub_1A46DE488((uint64_t)v22, &qword_1EB5CF570);
    uint64_t v25 = (uint64_t)v20;
    uint64_t v24 = &qword_1EB5CF570;
    goto LABEL_5;
  }
  v36[0] = *(void *)(v26 + 32);
  v36[1] = v26 + 32;
  ((void (*)(char *, char *, uint64_t))v36[0])(v41, v20, v42);
  sub_1A4942370();
  sub_1A4942510();
  swift_release();
  if (v23(v7, 1, v10) == 1)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v41, v42);
    sub_1A46DE488((uint64_t)v22, &qword_1EB5CF570);
    uint64_t v28 = &qword_1EB5CF590;
    uint64_t v29 = (uint64_t)v7;
  }
  else
  {
    uint64_t v30 = v26;
    sub_1A46ED8F8((uint64_t)v7, (uint64_t)v17);
    sub_1A46EA778((uint64_t)v17, (uint64_t)v14);
    if (v37(v14, 1, v42) != 1)
    {
      uint64_t v31 = v38;
      uint64_t v32 = v42;
      ((void (*)(char *, char *, uint64_t))v36[0])(v38, v14, v42);
      id v33 = v41;
      char v27 = sub_1A4942160();
      uint64_t v34 = *(void (**)(char *, uint64_t))(v30 + 8);
      v34(v31, v32);
      sub_1A46DE488((uint64_t)v17, &qword_1EB5CF570);
      v34(v33, v32);
      sub_1A46DE488((uint64_t)v22, &qword_1EB5CF570);
      return v27 & 1;
    }
    sub_1A46DE488((uint64_t)v17, &qword_1EB5CF570);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v41, v42);
    sub_1A46DE488((uint64_t)v22, &qword_1EB5CF570);
    uint64_t v29 = (uint64_t)v14;
    uint64_t v28 = &qword_1EB5CF570;
  }
  sub_1A46DE488(v29, v28);
  char v27 = 1;
  return v27 & 1;
}

unint64_t sub_1A4703C48()
{
  unint64_t result = qword_1E96589C0[0];
  if (!qword_1E96589C0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E96589C0);
  }
  return result;
}

uint64_t sub_1A4703C9C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_1A4943080() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001A4976B40 || (sub_1A4943080() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001A4976B20 || (sub_1A4943080() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x747269447473616CLL && a2 == 0xED00006574614479 || (sub_1A4943080() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x61656C437473616CLL && a2 == 0xED0000657461446ELL)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = sub_1A4943080();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_1A4703EB8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v61 = a1;
  uint64_t v52 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651EF8);
  uint64_t v55 = *(void *)(v2 - 8);
  uint64_t v56 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v62 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5F0);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v60 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v59 = (char *)&v51 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF620);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v51 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5E0);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v51 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF610);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v25 = (char *)&v51 - v24;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF608);
  char v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56);
  v27(v25, 1, 1, v26);
  v27(v23, 1, 1, v26);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF660);
  swift_allocObject();
  sub_1A4942500();
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5B0);
  swift_allocObject();
  uint64_t v65 = sub_1A4942360();
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5D8);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56);
  v29(v19, 1, 1, v28);
  v29(v17, 1, 1, v28);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF648);
  swift_allocObject();
  sub_1A4942500();
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF598);
  swift_allocObject();
  uint64_t v58 = sub_1A4942360();
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF618);
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56);
  v31(v13, 1, 1, v30);
  v31(v11, 1, 1, v30);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF670);
  swift_allocObject();
  sub_1A4942500();
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB5CF5C0);
  swift_allocObject();
  uint64_t v57 = sub_1A4942360();
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5E8);
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56);
  uint64_t v35 = v59;
  v34(v59, 1, 1, v33);
  uint64_t v36 = v60;
  v34(v60, 1, 1, v33);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF658);
  swift_allocObject();
  sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5A8);
  swift_allocObject();
  uint64_t v64 = sub_1A4942360();
  v34(v35, 1, 1, v33);
  v34(v36, 1, 1, v33);
  uint64_t v37 = v61;
  swift_allocObject();
  sub_1A4942500();
  swift_allocObject();
  uint64_t v38 = sub_1A4942360();
  __swift_project_boxed_opaque_existential_1(v37, v37[3]);
  sub_1A4703C48();
  uint64_t v39 = v63;
  uint64_t v40 = v62;
  sub_1A4943180();
  if (v39)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t v60 = (char *)v32;
    uint64_t v63 = v38;
    uint64_t v41 = v55;
    char v66 = 0;
    sub_1A46E7B38(&qword_1E9651B00, &qword_1EB5CF5B0);
    sub_1A4942FF0();
    swift_release();
    uint64_t v42 = v67;
    char v66 = 1;
    sub_1A46E7B38(&qword_1E9651F00, &qword_1EB5CF598);
    swift_retain();
    sub_1A4942FF0();
    uint64_t v65 = v42;
    swift_release();
    uint64_t v43 = v67;
    char v66 = 2;
    sub_1A46E7B38(&qword_1E9651F08, (uint64_t *)&unk_1EB5CF5C0);
    swift_retain();
    sub_1A4942FF0();
    swift_release();
    uint64_t v44 = v67;
    char v66 = 3;
    sub_1A46E7B38(&qword_1E9651F10, &qword_1EB5CF5A8);
    swift_retain();
    sub_1A4942FF0();
    swift_release();
    char v66 = 4;
    uint64_t v64 = v67;
    swift_retain();
    sub_1A4942FF0();
    swift_release();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v56);
    uint64_t v45 = v67;
    swift_retain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    swift_release();
    uint64_t v46 = v64;
    swift_release();
    swift_release();
    uint64_t v47 = v43;
    swift_release();
    uint64_t v48 = v65;
    uint64_t result = swift_release();
    unint64_t v50 = v52;
    uint64_t *v52 = v48;
    v50[1] = v47;
    v50[2] = v44;
    v50[3] = v46;
    v50[4] = v45;
  }
  return result;
}

unint64_t sub_1A470498C()
{
  unint64_t result = qword_1E9651EF0;
  if (!qword_1E9651EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9651EF0);
  }
  return result;
}

unint64_t sub_1A47049E4()
{
  unint64_t result = qword_1EB5CF6E8;
  if (!qword_1EB5CF6E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CF6E8);
  }
  return result;
}

unint64_t sub_1A4704A3C()
{
  unint64_t result = qword_1EB5CF6D0;
  if (!qword_1EB5CF6D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CF6D0);
  }
  return result;
}

unint64_t sub_1A4704A94()
{
  unint64_t result = qword_1EB5CF6F8;
  if (!qword_1EB5CF6F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CF6F8);
  }
  return result;
}

unint64_t sub_1A4704AEC()
{
  unint64_t result = qword_1EB5CF6F0;
  if (!qword_1EB5CF6F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CF6F0);
  }
  return result;
}

unint64_t sub_1A4704B44()
{
  unint64_t result = qword_1EB5CF6D8;
  if (!qword_1EB5CF6D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CF6D8);
  }
  return result;
}

unint64_t sub_1A4704B9C()
{
  unint64_t result = qword_1EB5CF6E0;
  if (!qword_1EB5CF6E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CF6E0);
  }
  return result;
}

uint64_t destroy for SyncStateEntity()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void *initializeWithCopy for SyncStateEntity(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for SyncStateEntity(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SyncStateEntity(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SyncStateEntity(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SyncStateEntity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SyncStateEntity()
{
  return &type metadata for SyncStateEntity;
}

uint64_t getEnumTagSinglePayload for SyncStateEntity.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SyncStateEntity.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    __CFString *result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A4704FC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          __CFString *result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SyncStateEntity.CodingKeys()
{
  return &type metadata for SyncStateEntity.CodingKeys;
}

unint64_t sub_1A4704FFC()
{
  unint64_t result = qword_1E9658B50[0];
  if (!qword_1E9658B50[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9658B50);
  }
  return result;
}

unint64_t sub_1A4705054()
{
  unint64_t result = qword_1E9658C60;
  if (!qword_1E9658C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9658C60);
  }
  return result;
}

unint64_t sub_1A47050AC()
{
  unint64_t result = qword_1E9658C68[0];
  if (!qword_1E9658C68[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9658C68);
  }
  return result;
}

uint64_t CKColumn.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CKColumn.wrappedValue.getter()
{
  return swift_retain();
}

uint64_t CKColumn.projectedValue.getter()
{
  return sub_1A4942350();
}

uint64_t sub_1A47051C0()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t sub_1A47051C8()
{
  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t CKColumn.__allocating_init(wrappedValue:name:encrypted:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 24) = a3;
  *(void *)(result + 32) = a1;
  *(void *)(result + 16) = a2;
  *(unsigned char *)(result + 40) = a4;
  *(unsigned char *)(result + 41) = 0;
  return result;
}

uint64_t CKColumn.init(wrappedValue:name:encrypted:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = a1;
  *(void *)(v4 + 16) = a2;
  *(unsigned char *)(v4 + 40) = a4;
  *(unsigned char *)(v4 + 41) = 0;
  return v4;
}

BOOL sub_1A4705244(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_1A4705254()
{
  return sub_1A4943130();
}

uint64_t sub_1A470527C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_1A4943080() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5664657070617277 && a2 == 0xEC00000065756C61 || (sub_1A4943080() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x707972636E456B63 && a2 == 0xEB00000000646574 || (sub_1A4943080() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7269757165526B63 && a2 == 0xEA00000000006465)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_1A4943080();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1A4705464()
{
  return sub_1A4943140();
}

uint64_t sub_1A47054AC(char a1)
{
  uint64_t result = 1701667182;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x5664657070617277;
      break;
    case 2:
      uint64_t result = 0x707972636E456B63;
      break;
    case 3:
      uint64_t result = 0x7269757165526B63;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_1A470554C(char *a1, char *a2)
{
  return sub_1A4705244(*a1, *a2);
}

uint64_t sub_1A4705558()
{
  return sub_1A4705464();
}

uint64_t sub_1A4705560()
{
  return sub_1A4705254();
}

uint64_t sub_1A4705568()
{
  return sub_1A4943140();
}

uint64_t sub_1A47055A8()
{
  return sub_1A47054AC(*v0);
}

uint64_t sub_1A47055B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1A470527C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A47055D8(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1A47055E4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t sub_1A4705638(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t CKColumn.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t CKColumn.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4186488](v0, 42, 7);
}

uint64_t CKColumn.encode(to:)(void *a1)
{
  BOOL v2 = v1;
  uint64_t v4 = *(void *)(*v2 + 80);
  v11[0] = *(void *)(*v2 + 88);
  v11[1] = v4;
  type metadata accessor for CKColumn.CodingKeys();
  swift_getWitnessTable();
  uint64_t v5 = sub_1A4943040();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v8 = (char *)v11 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A4943190();
  char v15 = 0;
  uint64_t v9 = v11[2];
  sub_1A4943010();
  if (!v9)
  {
    v11[3] = v2[4];
    char v14 = 1;
    sub_1A4942530();
    swift_getWitnessTable();
    sub_1A4943030();
    char v13 = 2;
    sub_1A4943020();
    char v12 = 3;
    sub_1A4943020();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t type metadata accessor for CKColumn.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t CKColumn.__allocating_init(from:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  CKColumn.init(from:)(a1);
  return v2;
}

uint64_t *CKColumn.init(from:)(void *a1)
{
  uint64_t v18 = *v1;
  uint64_t v19 = v2;
  type metadata accessor for CKColumn.CodingKeys();
  swift_getWitnessTable();
  uint64_t v4 = sub_1A4943000();
  uint64_t v15 = *(void *)(v4 - 8);
  uint64_t v16 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v15 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v17 = v6;
  uint64_t v7 = v1;
  uint64_t v8 = v19;
  uint64_t v9 = (uint64_t)a1;
  sub_1A4943180();
  if (v8)
  {
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v11 = v15;
    uint64_t v10 = v16;
    char v24 = 0;
    v1[2] = sub_1A4942FD0();
    v1[3] = v12;
    sub_1A4942530();
    char v23 = 1;
    swift_getWitnessTable();
    sub_1A4942FF0();
    v1[4] = v20;
    char v22 = 2;
    *((unsigned char *)v1 + 40) = sub_1A4942FE0() & 1;
    char v21 = 3;
    char v14 = sub_1A4942FE0();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    *((unsigned char *)v7 + 41) = v14 & 1;
  }
  __swift_destroy_boxed_opaque_existential_1(v9);
  return v7;
}

uint64_t sub_1A4705CDC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = CKColumn.__allocating_init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1A4705D08(void *a1)
{
  return CKColumn.encode(to:)(a1);
}

uint64_t CKColumn.ckRecordKey.getter()
{
  uint64_t v0 = sub_1A4706550();
  swift_bridgeObjectRetain();
  return v0;
}

double sub_1A4705D64@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t v4 = sub_1A4942DB0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v9 - v6;
  sub_1A4942510();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v7, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651F18);
    if (swift_dynamicCast()) {
      return result;
    }
  }
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_1A4705EBC(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t v4 = sub_1A4942DB0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v31 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  char v13 = (char *)&v28 - v12;
  uint64_t v14 = *(void *)(v3 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v11);
  uint64_t v30 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v28 - v17;
  sub_1A46DE420(a1, (uint64_t)v33);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E96519A0);
  int v19 = swift_dynamicCast();
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (v19)
  {
    char v21 = *(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56);
    v20(v13, 0, 1, v3);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v13, v3);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v10, v18, v3);
    v21(v10, 0, 1, v3);
    sub_1A4942520();
    sub_1A4706558(a1);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v3);
  }
  uint64_t v29 = *(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56);
  v20(v13, 1, 1, v3);
  char v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  v23(v13, v4);
  sub_1A46DE420(a1, (uint64_t)v33);
  if (!v33[3])
  {
    sub_1A4706558((uint64_t)v33);
    return sub_1A4706558(a1);
  }
  uint64_t v28 = (uint64_t (*)(char *, uint64_t))v23;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651F18);
  sub_1A47065B8();
  if ((swift_dynamicCast() & 1) == 0) {
    return sub_1A4706558(a1);
  }
  v33[0] = v32;
  id v24 = v32;
  uint64_t v25 = v31;
  if (swift_dynamicCast())
  {
    uint64_t v26 = v29;
    v29(v25, 0, 1, v3);
    char v27 = v30;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v30, v25, v3);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v10, v27, v3);
    v26(v10, 0, 1, v3);
    sub_1A4942520();

    sub_1A4706558(a1);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v27, v3);
  }
  else
  {
    v29(v25, 1, 1, v3);

    sub_1A4706558(a1);
    return v28(v25, v4);
  }
}

void (*sub_1A4706304(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_1A4705D64((uint64_t)v3);
  return sub_1A4706364;
}

void sub_1A4706364(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  if (a2)
  {
    sub_1A46DE420(*a1, (uint64_t)v2 + 40);
    sub_1A4705EBC((uint64_t)v2 + 40);
    sub_1A4706558((uint64_t)v2);
  }
  else
  {
    sub_1A4705EBC(*a1);
  }
  free(v2);
}

uint64_t sub_1A47063D8()
{
  return sub_1A47051C0() & 1;
}

uint64_t sub_1A4706400()
{
  return sub_1A47051C8() & 1;
}

uint64_t sub_1A4706428()
{
  uint64_t v0 = sub_1A4706550();
  swift_bridgeObjectRetain();
  return v0;
}

double sub_1A4706464@<D0>(uint64_t a1@<X8>)
{
  return sub_1A4705D64(a1);
}

uint64_t sub_1A4706488(uint64_t a1)
{
  return sub_1A4705EBC(a1);
}

void (*sub_1A47064AC(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_1A4706304(v2);
  return sub_1A4706508;
}

void sub_1A4706508(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_1A4706550()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_1A4706558(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E96519A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1A47065B8()
{
  unint64_t result = qword_1E9651F20;
  if (!qword_1E9651F20)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9651F20);
  }
  return result;
}

uint64_t sub_1A47065F8()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for CKColumn()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for CKColumn(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CKColumn);
}

uint64_t dispatch thunk of CKColumn.__allocating_init(wrappedValue:name:encrypted:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of CKColumn.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t sub_1A47066C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

uint64_t getEnumTagSinglePayload for PrivateDataContext.Errors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *sub_1A4706758(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    __CFString *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A4706824);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          __CFString *result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_1A470684C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1A4706868()
{
  return swift_getWitnessTable();
}

uint64_t sub_1A4706884()
{
  return swift_getWitnessTable();
}

uint64_t sub_1A47068A0(void *a1)
{
  uint64_t v38 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF570);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v39 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF600);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v37 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  BOOL v7 = (char *)&v36 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF610);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  char v13 = (char *)&v36 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF608);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  v15(v13, 1, 1, v14);
  v15(v11, 1, 1, v14);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF660);
  swift_allocObject();
  sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5B0);
  swift_allocObject();
  uint64_t v16 = sub_1A4942360();
  v15(v13, 1, 1, v14);
  v15(v11, 1, 1, v14);
  swift_allocObject();
  swift_retain();
  sub_1A4942500();
  swift_allocObject();
  sub_1A4942360();
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5F8);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  v18(v7, 1, 1, v17);
  v18(v37, 1, 1, v17);
  int v19 = v38;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF650);
  swift_allocObject();
  swift_retain();
  sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5A0);
  swift_allocObject();
  sub_1A4942360();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1A4942370();
  swift_release();
  swift_release();
  id v20 = objc_msgSend(v19, sel_recordID);
  id v21 = objc_msgSend(v20, sel_recordName);

  uint64_t v22 = sub_1A4942AE0();
  uint64_t v24 = v23;

  uint64_t v40 = v22;
  uint64_t v41 = v24;
  sub_1A4942520();
  swift_release();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1A4942370();
  swift_release();
  swift_release();
  swift_release();
  id v25 = objc_msgSend(v19, sel_recordChangeTag);
  if (v25)
  {
    uint64_t v26 = v25;
    uint64_t v27 = sub_1A4942AE0();
    uint64_t v29 = v28;
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t v29 = 0;
  }
  uint64_t v40 = v27;
  uint64_t v41 = v29;
  sub_1A4942520();
  swift_release();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1A4942370();
  swift_release();
  swift_release();
  swift_release();
  id v30 = objc_msgSend(v19, sel_modificationDate);
  if (v30)
  {
    uint64_t v31 = v30;
    id v32 = v39;
    sub_1A4942180();

    uint64_t v33 = sub_1A49421A0();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 0, 1, v33);
  }
  else
  {
    uint64_t v34 = sub_1A49421A0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v39, 1, 1, v34);
  }
  sub_1A4942520();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return v16;
}

uint64_t sub_1A4706EB4()
{
  return sub_1A4942370();
}

uint64_t sub_1A4706ED8()
{
  return sub_1A4942370();
}

uint64_t sub_1A4706EFC()
{
  uint64_t v1 = 0x615465676E616863;
  if (*v0 != 1) {
    uint64_t v1 = 0x6465696669646F6DLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 25705;
  }
}

uint64_t sub_1A4706F54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1A470790C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A4706F7C(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1A4706F88(uint64_t a1)
{
  unint64_t v2 = sub_1A47078B8();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1A4706FC4(uint64_t a1)
{
  unint64_t v2 = sub_1A47078B8();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1A4707000(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651F28);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A47078B8();
  sub_1A4943190();
  uint64_t v15 = a2;
  char v14 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5B0);
  sub_1A46E7B38(&qword_1E9651AC8, &qword_1EB5CF5B0);
  sub_1A4943030();
  if (!v4)
  {
    uint64_t v15 = v13;
    char v14 = 1;
    sub_1A4943030();
    uint64_t v15 = a4;
    char v14 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5A0);
    sub_1A46E7B38(&qword_1E9651AE8, &qword_1EB5CF5A0);
    sub_1A4943030();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1A4707234()
{
  return sub_1A49423E0();
}

uint64_t sub_1A47072B0()
{
  return 0x7364726F636572;
}

uint64_t sub_1A47072C8(uint64_t a1)
{
  unint64_t v2 = sub_1A46EEE00();
  return MEMORY[0x1F415D4C8](a1, v2);
}

uint64_t sub_1A4707314(uint64_t a1)
{
  unint64_t v2 = sub_1A46EEE00();
  return MEMORY[0x1F415D4D8](a1, v2);
}

uint64_t sub_1A4707360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1A46EEE00();
  return MEMORY[0x1F415D4D0](a1, a2, a3, v6);
}

uint64_t sub_1A47073C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1A4707544();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

void *sub_1A47073F0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1A4707A64(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1A4707420(void *a1)
{
  return sub_1A4707000(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_1A4707440(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1A46EEE00();
  return MEMORY[0x1F415D4F0](a1, a2, v4);
}

uint64_t sub_1A470748C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1A46EEE00();
  return MEMORY[0x1F415D4E8](a1, a2, a3, v6);
}

uint64_t sub_1A47074E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_1A46EEE00();
  return MEMORY[0x1F415D4E0](a1, a2, a3, a4, v8);
}

uint64_t sub_1A4707544()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF600);
  uint64_t v1 = MEMORY[0x1F4188790](v0 - 8);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)&v17 - v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF610);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v17 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF608);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  v13(v11, 1, 1, v12);
  v13(v9, 1, 1, v12);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF660);
  swift_allocObject();
  sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5B0);
  swift_allocObject();
  uint64_t v18 = sub_1A4942360();
  v13(v11, 1, 1, v12);
  v13(v9, 1, 1, v12);
  swift_allocObject();
  sub_1A4942500();
  swift_allocObject();
  sub_1A4942360();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5F8);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  v15(v5, 1, 1, v14);
  v15(v3, 1, 1, v14);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF650);
  swift_allocObject();
  sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5A0);
  swift_allocObject();
  sub_1A4942360();
  return v18;
}

unint64_t sub_1A47078B8()
{
  unint64_t result = qword_1E96590F0[0];
  if (!qword_1E96590F0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E96590F0);
  }
  return result;
}

uint64_t sub_1A470790C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_1A4943080() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x615465676E616863 && a2 == 0xE900000000000067 || (sub_1A4943080() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6465696669646F6DLL && a2 == 0xEA00000000007441)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_1A4943080();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void *sub_1A4707A64(void *a1)
{
  id v30 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651F38);
  uint64_t v26 = *(void *)(v1 - 8);
  uint64_t v27 = v1;
  MEMORY[0x1F4188790](v1);
  uint64_t v31 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF600);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v29 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v25 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF610);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF608);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  v15(v13, 1, 1, v14);
  v15(v11, 1, 1, v14);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF660);
  swift_allocObject();
  sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5B0);
  swift_allocObject();
  uint64_t v33 = sub_1A4942360();
  v15(v13, 1, 1, v14);
  v15(v11, 1, 1, v14);
  swift_allocObject();
  sub_1A4942500();
  swift_allocObject();
  uint64_t v28 = sub_1A4942360();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5F8);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  v17(v7, 1, 1, v16);
  v17(v29, 1, 1, v16);
  uint64_t v18 = v30;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF650);
  swift_allocObject();
  sub_1A4942500();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF5A0);
  swift_allocObject();
  sub_1A4942360();
  __swift_project_boxed_opaque_existential_1(v18, v18[3]);
  sub_1A47078B8();
  uint64_t v19 = v32;
  id v20 = v31;
  sub_1A4943180();
  if (v19)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    swift_release();
    swift_release();
  }
  else
  {
    char v34 = 0;
    sub_1A46E7B38(&qword_1E9651B00, &qword_1EB5CF5B0);
    uint64_t v21 = v27;
    sub_1A4942FF0();
    swift_release();
    char v34 = 1;
    uint64_t v33 = v35;
    swift_retain();
    sub_1A4942FF0();
    uint64_t v23 = (void *)v33;
    swift_release();
    char v34 = 2;
    sub_1A46E7B38(&qword_1E9651B20, &qword_1EB5CF5A0);
    swift_retain();
    sub_1A4942FF0();
    uint64_t v24 = v26;
    swift_release();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v20, v21);
    swift_retain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    swift_release();
    swift_release();
    uint64_t v18 = v23;
  }
  swift_release();
  return v18;
}

unint64_t sub_1A47080DC()
{
  unint64_t result = qword_1E9651F30;
  if (!qword_1E9651F30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9651F30);
  }
  return result;
}

unint64_t sub_1A4708134()
{
  unint64_t result = qword_1EB5CF6B0;
  if (!qword_1EB5CF6B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CF6B0);
  }
  return result;
}

unint64_t sub_1A470818C()
{
  unint64_t result = qword_1EB5CF698;
  if (!qword_1EB5CF698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CF698);
  }
  return result;
}

unint64_t sub_1A47081E4()
{
  unint64_t result = qword_1EB5CF6C0;
  if (!qword_1EB5CF6C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CF6C0);
  }
  return result;
}

unint64_t sub_1A470823C()
{
  unint64_t result = qword_1EB5CF6B8;
  if (!qword_1EB5CF6B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CF6B8);
  }
  return result;
}

unint64_t sub_1A4708294()
{
  unint64_t result = qword_1EB5CF6A0;
  if (!qword_1EB5CF6A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CF6A0);
  }
  return result;
}

unint64_t sub_1A47082EC()
{
  unint64_t result = qword_1EB5CF6A8;
  if (!qword_1EB5CF6A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CF6A8);
  }
  return result;
}

ValueMetadata *type metadata accessor for RecordEntity()
{
  return &type metadata for RecordEntity;
}

uint64_t getEnumTagSinglePayload for RecordEntity.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RecordEntity.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    void *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A47084ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RecordEntity.CodingKeys()
{
  return &type metadata for RecordEntity.CodingKeys;
}

unint64_t sub_1A47084E8()
{
  unint64_t result = qword_1E9659280[0];
  if (!qword_1E9659280[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9659280);
  }
  return result;
}

unint64_t sub_1A4708540()
{
  unint64_t result = qword_1E9659390;
  if (!qword_1E9659390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9659390);
  }
  return result;
}

unint64_t sub_1A4708598()
{
  unint64_t result = qword_1E9659398[0];
  if (!qword_1E9659398[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9659398);
  }
  return result;
}

void *static PrivateDataContext.readOnlyLocal.getter()
{
  unint64_t result = (void *)swift_allocObject();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

void *static PrivateDataContext.readWriteLocal.getter()
{
  unint64_t result = (void *)swift_allocObject();
  result[3] = 0;
  result[4] = 0;
  result[2] = 1;
  return result;
}

void *static PrivateDataContext.readWriteCloud(container:apsMachServiceName:)(void *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = (void *)swift_allocObject();
  _OWORD v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  id v7 = a1;
  return v6;
}

void *static PrivateDataContext.testing(_:)(void *a1)
{
  int v2 = (void *)swift_allocObject();
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = a1;
  id v3 = a1;
  return v2;
}

uint64_t sub_1A47086E8(void *a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v3[7] = *a1;
  uint64_t v4 = sub_1A49422C0();
  v3[8] = v4;
  v3[9] = *(void *)(v4 - 8);
  v3[10] = swift_task_alloc();
  uint64_t v5 = sub_1A4942400();
  v3[11] = v5;
  v3[12] = *(void *)(v5 - 8);
  v3[13] = swift_task_alloc();
  uint64_t v6 = sub_1A4942590();
  v3[14] = v6;
  v3[15] = *(void *)(v6 - 8);
  v3[16] = swift_task_alloc();
  uint64_t v7 = sub_1A4942430();
  unsigned char v3[17] = v7;
  v3[18] = *(void *)(v7 - 8);
  v3[19] = swift_task_alloc();
  uint64_t v8 = sub_1A4942130();
  v3[20] = v8;
  v3[21] = *(void *)(v8 - 8);
  v3[22] = swift_task_alloc();
  type metadata accessor for PrivateZoneLocation();
  v3[23] = swift_task_alloc();
  uint64_t v9 = sub_1A49425F0();
  v3[24] = v9;
  v3[25] = *(void *)(v9 - 8);
  v3[26] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1A47089CC, 0, 0);
}

uint64_t sub_1A47089CC()
{
  uint64_t v1 = v0[23];
  uint64_t v3 = v0[20];
  uint64_t v2 = v0[21];
  sub_1A46E91D4(v0[5], v1);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3);
  uint64_t v5 = v0[25];
  uint64_t v6 = (uint64_t *)v0[26];
  uint64_t v7 = v0[24];
  if (v4 == 1)
  {
    uint64_t v8 = (unsigned int *)MEMORY[0x1E4FAA730];
  }
  else
  {
    uint64_t v9 = v0[22];
    uint64_t v10 = v0[20];
    uint64_t v11 = v0[21];
    (*(void (**)(uint64_t, void, uint64_t))(v11 + 32))(v9, v0[23], v10);
    uint64_t v12 = sub_1A4942120();
    uint64_t v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    *uint64_t v6 = v12;
    v6[1] = v14;
    uint64_t v8 = (unsigned int *)MEMORY[0x1E4FAA728];
  }
  (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v6, *v8, v7);
  uint64_t v15 = v0[16];
  uint64_t v17 = v0[14];
  uint64_t v16 = v0[15];
  uint64_t v18 = v0[7];
  sub_1A4942600();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF778);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1A4972120;
  sub_1A4942420();
  v0[2] = v19;
  sub_1A470AA04(&qword_1EB5CF5D0, MEMORY[0x1E4FAA678]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CF738);
  sub_1A4709468();
  sub_1A4942DF0();
  (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v15, *MEMORY[0x1E4FAA710], v17);
  uint64_t v20 = sub_1A49425A0();
  v0[27] = v20;
  uint64_t v21 = *(void *)(v18 + 104);
  uint64_t v22 = sub_1A49425D0();
  v0[28] = v22;
  uint64_t v23 = v22;
  sub_1A46EEDAC();
  uint64_t v24 = sub_1A49425D0();
  v0[29] = v24;
  uint64_t v25 = v24;
  sub_1A46EEE00();
  uint64_t v26 = sub_1A49425D0();
  v0[30] = v26;
  uint64_t v27 = v26;
  uint64_t v28 = v0[12];
  uint64_t v41 = v0[13];
  uint64_t v42 = v0[11];
  uint64_t v29 = v0[7];
  id v30 = (void *)swift_task_alloc();
  v30[2] = *(void *)(v29 + 80);
  v30[3] = *(void *)(v29 + 96);
  v30[4] = v21;
  v30[5] = v23;
  v30[6] = v25;
  v30[7] = v27;
  (*(void (**)(uint64_t, void, uint64_t))(v28 + 104))(v41, *MEMORY[0x1E4FAA638], v42);
  sub_1A49425E0();
  uint64_t v31 = v0[6];
  (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
  swift_task_dealloc();
  uint64_t v32 = *(void *)(v31 + 16);
  v0[31] = v32;
  if (!v32)
  {
LABEL_7:
    swift_release();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v33 = (uint64_t (*)(uint64_t, void, void, uint64_t))v0[1];
    return v33(v20, 0, 0, v32);
  }
  if (v32 == 1)
  {
    uint64_t v32 = 0x1000000000000000;
    goto LABEL_7;
  }
  uint64_t v35 = v0[6];
  uint64_t v36 = *(void *)(v35 + 32);
  v0[32] = v36;
  uint64_t v37 = *(void *)(v35 + 24);
  id v38 = (id)v32;
  swift_bridgeObjectRetain();
  uint64_t v39 = (void *)swift_task_alloc();
  v0[33] = v39;
  void *v39 = v0;
  v39[1] = sub_1A4708F4C;
  uint64_t v40 = (void *)v0[4];
  return sub_1A4709DC0(v40, v20, (uint64_t)v38, v37, v36);
}

uint64_t sub_1A4708F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(void **)v5;
  *(void *)(*(void *)v5 + 272) = v4;
  swift_task_dealloc();
  if (v4)
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = sub_1A47091B4;
  }
  else
  {
    v10[35] = a4;
    v10[36] = a3;
    v10[37] = a2;
    v10[38] = a1;
    uint64_t v11 = sub_1A470909C;
  }
  return MEMORY[0x1F4188298](v11, 0, 0);
}

uint64_t sub_1A470909C()
{
  uint64_t v1 = (void *)v0[31];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v2 = v0[37];
  uint64_t v7 = v0[38];
  uint64_t v4 = v0[35];
  uint64_t v3 = v0[36];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[1];
  return v5(v7, v2, v3, v4);
}

uint64_t sub_1A47091B4()
{
  uint64_t v1 = (void *)v0[34];
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v4 = v0[8];
  uint64_t v5 = sub_1A46E2A44();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  id v6 = v1;
  id v7 = v1;
  uint64_t v8 = sub_1A49422A0();
  os_log_type_t v9 = sub_1A4942CB0();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (void *)v0[34];
    uint64_t v20 = (void *)v0[31];
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138543362;
    id v13 = v10;
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v14;
    sub_1A4942DC0();
    void *v12 = v14;

    _os_log_impl(&dword_1A460D000, v8, v9, "Failed to bring up cloud syncing support, error=%{public}@", v11, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651F50);
    swift_arrayDestroy();
    MEMORY[0x1A6261A10](v12, -1, -1);
    MEMORY[0x1A6261A10](v11, -1, -1);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v15 = (void *)v0[34];
    uint64_t v16 = (void *)v0[31];
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v17 = v0[27];
  (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(uint64_t, void, void, uint64_t))v0[1];
  return v18(v17, 0, 0, 0x1000000000000000);
}

unint64_t sub_1A4709468()
{
  unint64_t result = qword_1EB5CF740;
  if (!qword_1EB5CF740)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EB5CF738);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5CF740);
  }
  return result;
}

uint64_t sub_1A47094C4()
{
  sub_1A49424D0();
  sub_1A4942540();
  uint64_t result = swift_release();
  if (!v0)
  {
    sub_1A49424D0();
    sub_1A4942540();
    swift_release();
    sub_1A49424D0();
    sub_1A4942540();
    return swift_release();
  }
  return result;
}

uint64_t sub_1A4709578(uint64_t a1)
{
  *(void *)(v1 + 128) = a1;
  return MEMORY[0x1F4188298](sub_1A4709598, 0, 0);
}

uint64_t sub_1A4709598()
{
  id v1 = objc_msgSend(*(id *)(v0 + 128), sel_privateCloudDatabase);
  *(void *)(v0 + 136) = v1;
  sub_1A4942AE0();
  id v2 = objc_allocWithZone(MEMORY[0x1E4F1A2F8]);
  uint64_t v3 = (void *)sub_1A4942AD0();
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v2, sel_initWithRecordName_, v3);
  *(void *)(v0 + 144) = v4;

  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 120;
  *(void *)(v0 + 24) = sub_1A4709728;
  uint64_t v5 = swift_continuation_init();
  *(void *)(v0 + 80) = MEMORY[0x1E4F143A8];
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_1A47099DC;
  *(void *)(v0 + 104) = &block_descriptor;
  *(void *)(v0 + 112) = v5;
  objc_msgSend(v1, sel_fetchRecordWithID_completionHandler_, v4, v0 + 80);
  return MEMORY[0x1F41881E8](v0 + 16);
}

uint64_t sub_1A4709728()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 152) = v1;
  if (v1) {
    id v2 = sub_1A47098A8;
  }
  else {
    id v2 = sub_1A4709838;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1A4709838()
{
  uint64_t v1 = *(void **)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 120);

  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_1A47098A8()
{
  uint64_t v2 = *(void **)(v0 + 144);
  uint64_t v1 = *(void **)(v0 + 152);
  uint64_t v3 = *(void **)(v0 + 136);
  swift_willThrow();

  type metadata accessor for Code(0);
  *(void *)(v0 + 80) = 11;
  id v4 = v1;
  sub_1A470AA04((unint64_t *)&unk_1E9651FD0, type metadata accessor for Code);
  char v5 = sub_1A4942070();

  if (v5)
  {

    sub_1A470A754();
    swift_allocError();
    *id v6 = 2;
    swift_willThrow();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1A47099DC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CFB00);
    uint64_t v5 = swift_allocError();
    *id v6 = a3;
    id v7 = a3;
    return MEMORY[0x1F4188208](v3, v5);
  }
  else
  {
    if (a2)
    {
      **(void **)(*(void *)(v3 + 64) + 40) = a2;
      id v8 = a2;
      a1 = v3;
    }
    else
    {
      __break(1u);
    }
    return MEMORY[0x1F4188200](a1);
  }
}

uint64_t sub_1A4709A9C()
{
  uint64_t v0 = sub_1A49422C0();
  MEMORY[0x1F4188790](v0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651F58);
  return sub_1A49425B0();
}

uint64_t PrivateDataContext.deinit()
{
  sub_1A470A3D4(*(void **)(v0 + 16));
  return v0;
}

uint64_t PrivateDataContext.__deallocating_deinit()
{
  sub_1A470A3D4(*(void **)(v0 + 16));
  return MEMORY[0x1F4186488](v0, 40, 7);
}

uint64_t sub_1A4709DC0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[12] = a4;
  v5[13] = a5;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  v5[14] = *a1;
  uint64_t v7 = sub_1A4942730();
  v5[15] = v7;
  unsigned char v5[16] = *(void *)(v7 - 8);
  v5[17] = swift_task_alloc();
  v5[18] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651F58);
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  id v8 = (void *)swift_task_alloc();
  v5[21] = v8;
  *id v8 = v5;
  v8[1] = sub_1A4709F4C;
  v8[16] = a3;
  return MEMORY[0x1F4188298](sub_1A4709598, 0, 0);
}

uint64_t sub_1A4709F4C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 176) = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    return MEMORY[0x1F4188298](sub_1A470A0B0, 0, 0);
  }
}

uint64_t sub_1A470A0B0()
{
  id v1 = objc_msgSend(objc_msgSend(*(id *)(v0 + 176), sel_encryptedValues), sel_objectForKeyedSubscript_, @"encryptionKey");
  swift_unknownObjectRelease();
  if (v1
    && (*(void *)(v0 + 64) = v1,
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651FC8),
        (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v2 = *(void *)(v0 + 152);
    uint64_t v3 = *(void *)(v0 + 160);
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v5 = *(void *)(v0 + 128);
    uint64_t v17 = *(void *)(v0 + 120);
    uint64_t v18 = *(void *)(v0 + 136);
    uint64_t v6 = *(void *)(v0 + 112);
    uint64_t v7 = *(void **)(v0 + 88);
    uint64_t v8 = *(void *)(v0 + 80);
    uint64_t v20 = *(void **)(v0 + 176);
    uint64_t v21 = *(void *)(v0 + 48);
    uint64_t v19 = *(void *)(v0 + 56);
    sub_1A4709A9C();
    id v9 = objc_msgSend(v7, sel_privateCloudDatabase);
    sub_1A470A7A8(v3, v2);
    long long v10 = *(_OWORD *)(v6 + 96);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(v0 + 32) = v10;
    type metadata accessor for PrivateZone();
    swift_getWitnessTable();
    swift_unknownObjectRetain();
    sub_1A4942720();
    swift_bridgeObjectRetain();
    sub_1A4942710();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v18, v4, v17);
    sub_1A49429B0();
    swift_allocObject();
    uint64_t v11 = sub_1A49429C0();

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v17);
    sub_1A470A810(v3);
    swift_retain();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8);
    return v12(v8, v11, v21, v19 | 0x2000000000000000);
  }
  else
  {
    uint64_t v14 = *(void **)(v0 + 176);
    sub_1A470A754();
    swift_allocError();
    unsigned char *v15 = 3;
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
}

void *sub_1A470A3D4(void *result)
{
  if ((unint64_t)result >= 2)
  {

    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for PrivateDataContext()
{
  return self;
}

uint64_t method lookup function for PrivateDataContext(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PrivateDataContext);
}

id *destroy for PrivateDataContext.AccessModel(id *result)
{
  if ((unint64_t)*result >= 0xFFFFFFFF)
  {

    return (id *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s8NewsCore18PrivateDataContextC11AccessModelOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    id v6 = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for PrivateDataContext.AccessModel(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  if (*(void *)a1 < 0xFFFFFFFFuLL)
  {
    if ((unint64_t)v5 >= 0xFFFFFFFF)
    {
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      id v7 = v5;
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v8 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v8;
    return a1;
  }
  if ((unint64_t)v5 < 0xFFFFFFFF)
  {

    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *(void *)a1 = v5;
  id v6 = v5;

  *(void *)(a1 + 8) = *((void *)a2 + 1);
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PrivateDataContext.AccessModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {

    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    return a1;
  }
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PrivateDataContext.AccessModel(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 24)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PrivateDataContext.AccessModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_1A470A70C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1A470A724(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  void *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for PrivateDataContext.AccessModel()
{
  return &type metadata for PrivateDataContext.AccessModel;
}

unint64_t sub_1A470A754()
{
  unint64_t result = qword_1E9659420;
  if (!qword_1E9659420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9659420);
  }
  return result;
}

uint64_t sub_1A470A7A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651F58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A470A810(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9651F58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A470A870@<X0>(uint64_t a1@<X8>)
{
  sub_1A46EEDAC();
  uint64_t result = sub_1A49425D0();
  if (!v1)
  {
    sub_1A49424C0();
    uint64_t v4 = sub_1A4942480();
    swift_release();
    if (*(void *)(v4 + 16))
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      sub_1A4702500(a1);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      return swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v5 = sub_1A4942940();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a1, 1, 1, v5);
    }
  }
  return result;
}

uint64_t sub_1A470AA04(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PrivateDataContext.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    void *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A470AB18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PrivateDataContext.Errors()
{
  return &type metadata for PrivateDataContext.Errors;
}

unint64_t sub_1A470AB54()
{
  unint64_t result = qword_1E9659428[0];
  if (!qword_1E9659428[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9659428);
  }
  return result;
}

id sub_1A470ABA8()
{
  id v0 = objc_msgSend(self, sel_defaultAvailability);
  return v0;
}

uint64_t sub_1A470ABE8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_1A4942130();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CFB08);
  MEMORY[0x1F4188790](v8 - 8);
  long long v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PrivateZoneLocation();
  MEMORY[0x1F4188790](v11 - 8);
  id v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for PrivateDataContext();
  uint64_t v14 = sub_1A4942220();
  if (!v14)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v15 = v14;
  uint64_t v24 = a2;
  id v16 = FCURLForNotificationHistory();
  if (!v16)
  {
LABEL_6:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
    goto LABEL_7;
  }
  uint64_t v17 = v16;
  sub_1A4942110();

  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v18(v10, v7, v4);
  uint64_t v19 = *(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56);
  v19(v10, 0, 1, v4);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4);
  if (result != 1)
  {
    uint64_t v21 = type metadata accessor for NotificationHistory();
    v18(v13, v10, v4);
    v19(v13, 0, 1, v4);
    uint64_t result = sub_1A46E9090(v15, (uint64_t)v13);
    uint64_t v22 = v24;
    v24[3] = v21;
    v22[4] = (uint64_t)&off_1EF828838;
    uint64_t *v22 = result;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

void *sub_1A470AE84(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CFAF8);
  uint64_t result = (void *)sub_1A4942220();
  if (result)
  {
    unsigned int v2 = objc_msgSend(result, sel_isPrivateDataSyncingAllowed);
    swift_unknownObjectRelease();
    type metadata accessor for PrivateDataContext();
    if (v2)
    {
      sub_1A470B1F8();
      id v3 = static CKContainer.defaultPrivateSecure.getter();
      uint64_t v4 = static PrivateDataContext.readWriteCloud(container:apsMachServiceName:)(v3, 0, 0);

      return v4;
    }
    else
    {
      return static PrivateDataContext.readWriteLocal.getter();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A470AF44()
{
  return MEMORY[0x1F4186488](v0, 16, 7);
}

uint64_t sub_1A470AF54()
{
  return swift_allocObject();
}

uint64_t sub_1A470AF68()
{
  uint64_t v0 = sub_1A4942280();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  id v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A4942230();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CFAF8);
  sub_1A4942260();
  swift_release();
  swift_release();
  sub_1A4942230();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB5CFAF0);
  sub_1A4942270();
  swift_release();
  uint64_t v4 = *MEMORY[0x1E4FAB040];
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v5(v3, v4, v0);
  sub_1A4942210();
  swift_release();
  swift_release();
  uint64_t v6 = *(void (**)(char *, uint64_t))(v1 + 8);
  v6(v3, v0);
  sub_1A4942230();
  type metadata accessor for PrivateDataContext();
  sub_1A4942260();
  swift_release();
  v5(v3, v4, v0);
  sub_1A4942210();
  swift_release();
  swift_release();
  v6(v3, v0);
  sub_1A4942240();
  sub_1A4942250();
  return swift_release();
}

uint64_t type metadata accessor for PrivateDataAssembly()
{
  return self;
}

unint64_t sub_1A470B1F8()
{
  unint64_t result = qword_1E96520A0;
  if (!qword_1E96520A0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E96520A0);
  }
  return result;
}

uint64_t compatibilityInitializeAvailabilityCheck()
{
  return _initializeAvailabilityCheck(1);
}

uint64_t __isPlatformVersionAtLeast(uint64_t a1, int a2, int a3, int a4)
{
  if (qword_1EB5D0FF0 == -1)
  {
    if (qword_1EB5D0FF8) {
      return _availability_version_check();
    }
  }
  else
  {
    dispatch_once_f(&qword_1EB5D0FF0, 0, (dispatch_function_t)initializeAvailabilityCheck);
    if (qword_1EB5D0FF8) {
      return _availability_version_check();
    }
  }
  if (qword_1EB5D0FE8 == -1)
  {
    BOOL v8 = _MergedGlobals_138 < a2;
    if (_MergedGlobals_138 > a2) {
      return 1;
    }
  }
  else
  {
    dispatch_once_f(&qword_1EB5D0FE8, 0, (dispatch_function_t)compatibilityInitializeAvailabilityCheck);
    BOOL v8 = _MergedGlobals_138 < a2;
    if (_MergedGlobals_138 > a2) {
      return 1;
    }
  }
  if (v8) {
    return 0;
  }
  if (dword_1EB5D0FDC > a3) {
    return 1;
  }
  return dword_1EB5D0FDC >= a3 && dword_1EB5D0FE0 >= a4;
}

uint64_t initializeAvailabilityCheck()
{
  return _initializeAvailabilityCheck(0);
}

uint64_t _initializeAvailabilityCheck(uint64_t result)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = qword_1EB5D0FF8;
  if (qword_1EB5D0FF8) {
    BOOL v2 = result == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2)
  {
    if (MEMORY[0x1E4F143E8])
    {
      uint64_t v1 = MEMORY[0x1F4188798];
      qword_1EB5D0FF8 = MEMORY[0x1F4188798];
    }
    if (!v1 || result != 0)
    {
      unint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "kCFAllocatorNull");
      if (result)
      {
        uint64_t v4 = *(unsigned __int8 **)result;
        unint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDataCreateWithBytesNoCopy");
        if (result)
        {
          uint64_t v5 = (uint64_t (*)(void))result;
          unint64_t v6 = (unint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateWithData");
          unint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateFromXMLData");
          if (v6 | result)
          {
            id v7 = (uint64_t (*)(void, uint64_t, void, void))result;
            unint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringCreateWithCStringNoCopy");
            if (result)
            {
              BOOL v8 = (uint64_t (*)(void, const char *, uint64_t, unsigned __int8 *))result;
              unint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDictionaryGetValue");
              if (result)
              {
                uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))result;
                unint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFGetTypeID");
                if (result)
                {
                  long long v10 = (uint64_t (*)(uint64_t))result;
                  unint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetTypeID");
                  if (result)
                  {
                    uint64_t v11 = (uint64_t (*)(void))result;
                    unint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetCString");
                    uint64_t v28 = (unsigned int (*)(uint64_t, char *, uint64_t, uint64_t))result;
                    if (result)
                    {
                      unint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRelease");
                      if (result)
                      {
                        uint64_t v12 = (FILE *)result;
                        unint64_t result = (uint64_t)fopen("/System/Library/CoreServices/SystemVersion.plist", "r");
                        if (result)
                        {
                          id v13 = (FILE *)result;
                          uint64_t v27 = v12;
                          fseek((FILE *)result, 0, 2);
                          uint64_t v14 = MEMORY[0x1A6260E00](v13);
                          if (v14 < 0)
                          {
                            id v16 = 0;
                          }
                          else
                          {
                            size_t v15 = v14;
                            rewind(v13);
                            id v16 = malloc(v15);
                            if (v16)
                            {
                              uint64_t v26 = v16;
                              if (fread(v16, 1uLL, v15, v13) == v15)
                              {
                                uint64_t v17 = v5(0);
                                if (v17)
                                {
                                  uint64_t v18 = v17;
                                  uint64_t v19 = v13;
                                  if (v6) {
                                    uint64_t v20 = ((uint64_t (*)(void, uint64_t, void, void, void))v6)(0, v17, 0, 0, 0);
                                  }
                                  else {
                                    uint64_t v20 = v7(0, v17, 0, 0);
                                  }
                                  uint64_t v21 = v20;
                                  if (v20)
                                  {
                                    uint64_t v22 = v8(0, "ProductVersion", 1536, v4);
                                    if (v22)
                                    {
                                      uint64_t v23 = v22;
                                      uint64_t v24 = v9(v21, v22);
                                      ((void (*)(uint64_t))v27)(v23);
                                      if (v24)
                                      {
                                        uint64_t v25 = v10(v24);
                                        if (v25 == v11())
                                        {
                                          if (v28(v24, v29, 32, 134217984)) {
                                            sscanf(v29, "%d.%d.%d", &_MergedGlobals_138, &dword_1EB5D0FDC, &dword_1EB5D0FE0);
                                          }
                                        }
                                      }
                                    }
                                    ((void (*)(uint64_t))v27)(v21);
                                    uint64_t v19 = v13;
                                  }
                                  ((void (*)(uint64_t))v27)(v18);
                                }
                                else
                                {
                                  uint64_t v19 = v13;
                                }
                                id v16 = v26;
                              }
                              else
                              {
                                id v16 = v26;
                                uint64_t v19 = v13;
                              }
                              goto LABEL_41;
                            }
                          }
                          uint64_t v19 = v13;
LABEL_41:
                          free(v16);
                          return fclose(v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1A470CE38(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

void sub_1A470E5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A471085C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A47118D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4718194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4719054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A471B2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4728344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4728548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A472A0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A472BFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_1A472CA74(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1A472D514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1A472DFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1A472EAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1A472F5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1A47300FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

void sub_1A4730BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1A47314D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4731E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_1A47327BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1A4732E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1A4733274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1A473380C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1A4734298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *NSStringFromShortcutCategoryType(__CFString *a1)
{
  if (a1)
  {
    if (a1 != (__CFString *)1) {
      goto LABEL_6;
    }
    uint64_t v2 = FCCKShortcutCategoryTypeUnknown;
  }
  else
  {
    uint64_t v2 = FCCKShortcutCategoryTypeCurated;
  }
  a1 = *v2;
LABEL_6:
  return a1;
}

__CFString *NSStringFromShortcutCategoryStatus(__CFString *a1)
{
  if (a1)
  {
    if (a1 != (__CFString *)1) {
      goto LABEL_6;
    }
    uint64_t v2 = FCCKShortcutCategoryStatusUnknown;
  }
  else
  {
    uint64_t v2 = FCCKShortcutCategoryStatusBlocked;
  }
  a1 = *v2;
LABEL_6:
  return a1;
}

uint64_t FCShortcutCategoryTypeFromString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"curated"])
  {
    uint64_t v2 = 0;
  }
  else
  {
    [v1 isEqualToString:@"unknown"];
    uint64_t v2 = 1;
  }

  return v2;
}

uint64_t FCShortcutCategoryStatusFromString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"blocked"])
  {
    uint64_t v2 = 0;
  }
  else
  {
    [v1 isEqualToString:@"unknown"];
    uint64_t v2 = 1;
  }

  return v2;
}

void sub_1A4736C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t PBArticleContentTypeFromString(void *a1)
{
  id v1 = a1;
  if ([v1 caseInsensitiveCompare:@"web"])
  {
    if ([v1 caseInsensitiveCompare:@"flint"])
    {
      if ([v1 caseInsensitiveCompare:@"video"]) {
        uint64_t v2 = 0;
      }
      else {
        uint64_t v2 = 3;
      }
    }
    else
    {
      uint64_t v2 = 2;
    }
  }
  else
  {
    uint64_t v2 = 1;
  }

  return v2;
}

uint64_t FCArticleContentTypeFromPBContentType(int a1)
{
  uint64_t v1 = (a1 - 1);
  if (v1 < 3) {
    return v1 + 1;
  }
  else {
    return 0;
  }
}

uint64_t PBArticleStoryTypeFromString(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if ([v1 caseInsensitiveCompare:@"topStory"])
    {
      if ([v2 caseInsensitiveCompare:@"breaking"])
      {
        if ([v2 caseInsensitiveCompare:@"developing"])
        {
          if ([v2 caseInsensitiveCompare:@"updated"])
          {
            if ([v2 caseInsensitiveCompare:@"local"]) {
              uint64_t v3 = 0;
            }
            else {
              uint64_t v3 = 5;
            }
          }
          else
          {
            uint64_t v3 = 4;
          }
        }
        else
        {
          uint64_t v3 = 3;
        }
      }
      else
      {
        uint64_t v3 = 2;
      }
    }
    else
    {
      uint64_t v3 = 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t FCArticleStoryTypeFromPBStoryType(int a1)
{
  uint64_t v1 = (a1 - 1);
  if (v1 < 5) {
    return v1 + 1;
  }
  else {
    return 0;
  }
}

uint64_t PBArticleStoryTypeFromFCStoryType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 5) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t PBArticleRoleFromString(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1 && [v1 length] && objc_msgSend(v2, "caseInsensitiveCompare:", @"article"))
  {
    if ([v2 caseInsensitiveCompare:@"cover"])
    {
      if ([v2 caseInsensitiveCompare:@"campaign_landing_page"])
      {
        if ([v2 caseInsensitiveCompare:@"end-of-issue"])
        {
          if ([v2 caseInsensitiveCompare:@"replica-advertisement"])
          {
            if ([v2 caseInsensitiveCompare:@"spotlight"])
            {
              if ([v2 caseInsensitiveCompare:@"feature"]) {
                uint64_t v3 = 8 * ([v2 caseInsensitiveCompare:@"audio-daily-briefing"] == 0);
              }
              else {
                uint64_t v3 = 6;
              }
            }
            else
            {
              uint64_t v3 = 5;
            }
          }
          else
          {
            uint64_t v3 = 4;
          }
        }
        else
        {
          uint64_t v3 = 7;
        }
      }
      else
      {
        uint64_t v3 = 3;
      }
    }
    else
    {
      uint64_t v3 = 2;
    }
  }
  else
  {
    uint64_t v3 = 1;
  }

  return v3;
}

uint64_t FCArticleRoleFromPBRole(int a1)
{
  uint64_t v1 = (a1 - 1);
  if (v1 < 8) {
    return v1 + 1;
  }
  else {
    return 0;
  }
}

uint64_t PBArticleRoleFromFCRole(uint64_t result)
{
  if ((unint64_t)(result - 1) < 8) {
    return result;
  }
  else {
    return 0;
  }
}

void sub_1A47386BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4738C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id FCTopicallyOrderGroups(void *a1, void *a2, void *a3, void *a4, double a5, double a6, double a7, double a8)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  id v15 = a1;
  id v16 = a2;
  id v17 = a3;
  id v18 = a4;
  uint64_t v19 = FCPersonalizationLog;
  if (os_log_type_enabled((os_log_t)FCPersonalizationLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218752;
    v120 = *(char **)&a5;
    __int16 v121 = 2048;
    v122 = *(char **)&a6;
    __int16 v123 = 2048;
    *(double *)uint64_t v124 = a7;
    *(_WORD *)&v124[8] = 2048;
    *(double *)&v124[10] = a8;
    _os_log_impl(&dword_1A460D000, v19, OS_LOG_TYPE_DEFAULT, "Topically ordering groups with relatednessThreshold=%f relatednessKWeight=%f topicScoreWeight=%f highestScoringRelativeScoreMultiplier=%f", buf, 0x2Au);
  }
  if (v17) {
    uint64_t v20 = v17;
  }
  else {
    uint64_t v20 = &__block_literal_global_144;
  }
  uint64_t v21 = _Block_copy(v20);

  if (v18) {
    uint64_t v22 = v18;
  }
  else {
    uint64_t v22 = &__block_literal_global_147;
  }
  uint64_t v23 = _Block_copy(v22);

  uint64_t v24 = (void *)MEMORY[0x1E4F1C978];
  v117[0] = MEMORY[0x1E4F143A8];
  v117[1] = 3221225472;
  v117[2] = __FCTopicallyOrderGroups_block_invoke_3;
  v117[3] = &unk_1E5B4BF30;
  id v25 = v15;
  id v118 = v25;
  uint64_t v26 = objc_msgSend(v24, "fc_array:", v117);
  uint64_t v27 = [v16 arrayByAddingObjectsFromArray:v26];

  v113[0] = (id)MEMORY[0x1E4F143A8];
  v113[1] = (id)3221225472;
  v113[2] = __FCTopicallyOrderGroups_block_invoke_5;
  v113[3] = &unk_1E5B4D3D0;
  id v28 = v25;
  id v114 = v28;
  id v29 = v27;
  id v115 = v29;
  id v79 = v16;
  id v116 = v79;
  if (!__FCTopicallyOrderGroups_block_invoke_5(v113) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    id v73 = (void *)[[NSString alloc] initWithFormat:@"Expected allArticleTopicData to be size of groups.allValues.count + extraData.count"];
    *(_DWORD *)buf = 136315906;
    v120 = "NSOrderedSet<NSString *> * _Nonnull FCTopicallyOrderGroups(NSDictionary<NSString *,NSSet<FCTopicalNodeElement"
           " *> *> * _Nonnull __strong, NSArray<NSSet<NSString *> *> * _Nonnull __strong, double (^ _Nullable __strong)(N"
           "SSet<NSString *> * _Nonnull __strong), NSString * _Nonnull (^ _Nullable __strong)(NSString * _Nonnull __stron"
           "g), double, double, double, double)";
    __int16 v121 = 2080;
    v122 = "FCHeadlineClusterOrdering.m";
    __int16 v123 = 1024;
    *(_DWORD *)uint64_t v124 = 564;
    *(_WORD *)&v124[4] = 2114;
    *(void *)&v124[6] = v73;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
  uint64_t v30 = (void *)MEMORY[0x1E4F1C9E8];
  v110[0] = MEMORY[0x1E4F143A8];
  v110[1] = 3221225472;
  v110[2] = __FCTopicallyOrderGroups_block_invoke_163;
  v110[3] = &unk_1E5B4CDC0;
  id v31 = v28;
  id v111 = v31;
  id v75 = v29;
  id v112 = v75;
  uint64_t v78 = objc_msgSend(v30, "fc_dictionary:", v110);
  uint64_t v32 = objc_msgSend(v78, "fc_dictionaryBySwappingValuesAndKeys");
  uint64_t v33 = (void *)MEMORY[0x1E4F1CAD0];
  v103[0] = MEMORY[0x1E4F143A8];
  v103[1] = 3221225472;
  v103[2] = __FCTopicallyOrderGroups_block_invoke_4_172;
  v103[3] = &unk_1E5B4D470;
  id v77 = v32;
  id v104 = v77;
  id v34 = v31;
  id v105 = v34;
  double v106 = a5;
  double v107 = a6;
  double v108 = a7;
  double v109 = a8;
  uint64_t v35 = objc_msgSend(v33, "fc_set:", v103);
  v100[0] = MEMORY[0x1E4F143A8];
  v100[1] = 3221225472;
  v100[2] = __FCTopicallyOrderGroups_block_invoke_179;
  v100[3] = &unk_1E5B4C0B8;
  id v36 = v35;
  id v101 = v36;
  id v76 = v34;
  id v102 = v76;
  if ((__FCTopicallyOrderGroups_block_invoke_179((uint64_t)v100) & 1) == 0
    && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    id v74 = (void *)[[NSString alloc] initWithFormat:@"Expected each group to have exactly 1 node containing it's identifier"];
    *(_DWORD *)buf = 136315906;
    v120 = "NSOrderedSet<NSString *> * _Nonnull FCTopicallyOrderGroups(NSDictionary<NSString *,NSSet<FCTopicalNodeElement"
           " *> *> * _Nonnull __strong, NSArray<NSSet<NSString *> *> * _Nonnull __strong, double (^ _Nullable __strong)(N"
           "SSet<NSString *> * _Nonnull __strong), NSString * _Nonnull (^ _Nullable __strong)(NSString * _Nonnull __stron"
           "g), double, double, double, double)";
    __int16 v121 = 2080;
    v122 = "FCHeadlineClusterOrdering.m";
    __int16 v123 = 1024;
    *(_DWORD *)uint64_t v124 = 625;
    *(_WORD *)&v124[4] = 2114;
    *(void *)&v124[6] = v74;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
  uint64_t v37 = (void *)MEMORY[0x1E4F1CAD0];
  v98[0] = MEMORY[0x1E4F143A8];
  v98[1] = 3221225472;
  v98[2] = __FCTopicallyOrderGroups_block_invoke_189;
  v98[3] = &unk_1E5B4C2F0;
  id v99 = v36;
  id v38 = v36;
  uint64_t v39 = objc_msgSend(v37, "fc_set:", v98);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __FCTopicallyOrderGroups_block_invoke_4_193;
  aBlock[3] = &unk_1E5B4D4C0;
  id v40 = v21;
  id v97 = v40;
  uint64_t v41 = _Block_copy(aBlock);
  v94[0] = MEMORY[0x1E4F143A8];
  v94[1] = 3221225472;
  v94[2] = __FCTopicallyOrderGroups_block_invoke_5_195;
  v94[3] = &unk_1E5B4D4E8;
  id v42 = v41;
  id v95 = v42;
  uint64_t v80 = v39;
  [v39 enumerateObjectsUsingBlock:v94];
  uint64_t v43 = [FCTopicalNode alloc];
  uint64_t v44 = [MEMORY[0x1E4F1CAD0] setWithObject:@"root"];
  uint64_t v45 = objc_opt_new();
  uint64_t v46 = objc_opt_new();
  uint64_t v47 = -[FCTopicalNode initWithIdentifier:displayedElements:allTopicCollections:relatednessThreshold:relatednessKWeight:topicScoreWeight:highestScoringRelativeScoreMultiplier:]((id *)&v43->super.isa, v44, v45, v46, a5, a6, a7, a8);

  v92[0] = MEMORY[0x1E4F143A8];
  v92[1] = 3221225472;
  v92[2] = __FCTopicallyOrderGroups_block_invoke_6_200;
  v92[3] = &unk_1E5B4D268;
  uint64_t v48 = v47;
  unint64_t v93 = v48;
  [v38 enumerateObjectsUsingBlock:v92];
  id v49 = [v38 setByAddingObject:v48];

  unint64_t v50 = (void *)MEMORY[0x1E4F1C9E8];
  v90[0] = MEMORY[0x1E4F143A8];
  v90[1] = 3221225472;
  v90[2] = __FCTopicallyOrderGroups_block_invoke_7;
  v90[3] = &unk_1E5B4BF78;
  id v51 = v49;
  id v91 = v51;
  uint64_t v52 = objc_msgSend(v50, "fc_dictionary:", v90);
  [v52 enumerateKeysAndObjectsUsingBlock:&__block_literal_global_203];
  id v53 = v40;
  if (v48)
  {
    uint64_t v54 = -[FCTopicalNode calculateLeafScoresWithTopicScoreProvider:]((double *)v48, v53);
    uint64_t v55 = (void *)v54;
    uint64_t v56 = v23;
    if (v54) {
      uint64_t v57 = *(void **)(v54 + 8);
    }
    else {
      uint64_t v57 = 0;
    }
    uint64_t v58 = v57;
    uint64_t v59 = v58;
    if (v58 != v48)
    {
      uint64_t v60 = v58;
      do
      {
        if (v60)
        {
          v60[9] = v48[16];
          WeakRetained = (id *)objc_loadWeakRetained(v60 + 7);
        }
        else
        {
          WeakRetained = 0;
        }

        uint64_t v60 = WeakRetained;
      }
      while (WeakRetained != v48);
    }
    -[FCTopicalNode calculateNonLeafScoresWithTopicProvider:]((uint64_t)v48, v53);

    uint64_t v23 = v56;
  }

  v86[0] = MEMORY[0x1E4F143A8];
  v86[1] = 3221225472;
  v86[2] = __FCTopicallyOrderGroups_block_invoke_12;
  v86[3] = &unk_1E5B4D620;
  id v62 = v53;
  id v88 = v62;
  id v89 = &__block_literal_global_205;
  uint64_t v63 = v48;
  uint64_t v87 = v63;
  uint64_t v64 = __FCTopicallyOrderGroups_block_invoke_12((uint64_t)v86);
  uint64_t v65 = FCPersonalizationLog;
  if (os_log_type_enabled((os_log_t)FCPersonalizationLog, OS_LOG_TYPE_DEBUG))
  {
    v83[0] = MEMORY[0x1E4F143A8];
    v83[1] = 3221225472;
    v83[2] = __FCTopicallyOrderGroups_block_invoke_18;
    v83[3] = &unk_1E5B4D698;
    id v84 = v23;
    id v85 = v62;
    uint64_t v69 = v65;
    objc_msgSend(v51, "fc_arrayByTransformingWithBlock:", v83);
    uint64_t v70 = (char *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v120 = v70;
    _os_log_debug_impl(&dword_1A460D000, v69, OS_LOG_TYPE_DEBUG, "Ordered clusters with nodes %@", buf, 0xCu);

    uint64_t v65 = FCPersonalizationLog;
  }
  if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
  {
    v81[0] = MEMORY[0x1E4F143A8];
    v81[1] = 3221225472;
    v81[2] = __FCTopicallyOrderGroups_block_invoke_220;
    v81[3] = &unk_1E5B4D6C0;
    id v82 = v23;
    uint64_t v71 = v65;
    objc_msgSend(v80, "fc_arrayByTransformingWithBlock:", v81);
    uint64_t v72 = (char *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v120 = v72;
    _os_log_debug_impl(&dword_1A460D000, v71, OS_LOG_TYPE_DEBUG, "Ordered clusters with edges %@", buf, 0xCu);
  }
  if (v64) {
    char v66 = v64;
  }
  else {
    char v66 = (void *)MEMORY[0x1E4F1CBF0];
  }
  uint64_t v67 = [MEMORY[0x1E4F1CAA0] orderedSetWithArray:v66];

  return v67;
}

double __FCTopicallyOrderGroups_block_invoke()
{
  return 0.0;
}

id __FCTopicallyOrderGroups_block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  return v2;
}

void __FCTopicallyOrderGroups_block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) allValues];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  _OWORD v6[2] = __FCTopicallyOrderGroups_block_invoke_4;
  v6[3] = &unk_1E5B4D388;
  id v7 = v3;
  id v5 = v3;
  [v4 enumerateObjectsUsingBlock:v6];
}

void __FCTopicallyOrderGroups_block_invoke_4(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v4 = [a2 allObjects];
  id v3 = [v4 valueForKeyPath:@"topics"];
  [v2 addObjectsFromArray:v3];
}

BOOL __FCTopicallyOrderGroups_block_invoke_5(id *a1)
{
  id v2 = [a1[4] allValues];
  id v3 = objc_msgSend(v2, "fc_arrayByTransformingWithBlock:", &__block_literal_global_155);
  id v4 = [v3 valueForKeyPath:@"@unionOfArrays.self"];

  uint64_t v5 = [v4 count];
  uint64_t v6 = [a1[5] count];
  BOOL v7 = v6 == [a1[6] count] + v5;

  return v7;
}

uint64_t __FCTopicallyOrderGroups_block_invoke_6(uint64_t a1, void *a2)
{
  return [a2 allObjects];
}

void __FCTopicallyOrderGroups_block_invoke_163(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  _OWORD v6[2] = __FCTopicallyOrderGroups_block_invoke_2_164;
  v6[3] = &unk_1E5B4D420;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 enumerateKeysAndObjectsUsingBlock:v6];
}

void __FCTopicallyOrderGroups_block_invoke_2_164(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc(MEMORY[0x1E4F28BD0]);
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = (void *)MEMORY[0x1E4F28F60];
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __FCTopicallyOrderGroups_block_invoke_3_167;
  v14[3] = &unk_1E5B4D3F8;
  id v7 = v3;
  id v15 = v7;
  id v8 = [v6 predicateWithBlock:v14];
  uint64_t v9 = [v5 filteredArrayUsingPredicate:v8];
  long long v10 = (void *)[v4 initWithArray:v9];

  objc_opt_class();
  uint64_t v11 = [*(id *)(a1 + 40) objectForKeyedSubscript:v10];
  if (v11 && (objc_opt_isKindOfClass() & 1) != 0)
  {
    id v12 = v11;
    id v13 = v12;
  }
  else
  {
    id v13 = objc_opt_new();
    id v12 = 0;
  }

  [v13 addObject:v7];
  [*(id *)(a1 + 40) setObject:v13 forKeyedSubscript:v10];
}

uint64_t __FCTopicallyOrderGroups_block_invoke_3_167(uint64_t a1, void *a2)
{
  return [a2 containsObject:*(void *)(a1 + 32)];
}

void __FCTopicallyOrderGroups_block_invoke_4_172(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __FCTopicallyOrderGroups_block_invoke_5_173;
  v7[3] = &unk_1E5B4D448;
  id v4 = *(void **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  long long v5 = *(_OWORD *)(a1 + 64);
  long long v10 = *(_OWORD *)(a1 + 48);
  long long v11 = v5;
  id v6 = v3;
  [v4 enumerateKeysAndObjectsUsingBlock:v7];
}

void __FCTopicallyOrderGroups_block_invoke_5_173(uint64_t a1, void *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = *(void **)(a1 + 32);
  id v7 = a3;
  id v8 = [v5 anyObject];
  id v9 = [v6 objectForKeyedSubscript:v8];

  if (![v9 count] && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    id v12 = (void *)[[NSString alloc] initWithFormat:@"Expected to find some displayed elements for %@ in %@", v5, *(void *)(a1 + 32)];
    *(_DWORD *)buf = 136315906;
    uint64_t v14 = "NSOrderedSet<NSString *> * _Nonnull FCTopicallyOrderGroups(NSDictionary<NSString *,NSSet<FCTopicalNodeElement "
          "*> *> * _Nonnull __strong, NSArray<NSSet<NSString *> *> * _Nonnull __strong, double (^ _Nullable __strong)(NSS"
          "et<NSString *> * _Nonnull __strong), NSString * _Nonnull (^ _Nullable __strong)(NSString * _Nonnull __strong),"
          " double, double, double, double)_block_invoke_5";
    __int16 v15 = 2080;
    id v16 = "FCHeadlineClusterOrdering.m";
    __int16 v17 = 1024;
    int v18 = 601;
    __int16 v19 = 2114;
    uint64_t v20 = v12;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
  long long v10 = *(void **)(a1 + 40);
  long long v11 = -[FCTopicalNode initWithIdentifier:displayedElements:allTopicCollections:relatednessThreshold:relatednessKWeight:topicScoreWeight:highestScoringRelativeScoreMultiplier:]((id *)[FCTopicalNode alloc], v5, v9, v7, *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72));

  [v10 addObject:v11];
}

uint64_t __FCTopicallyOrderGroups_block_invoke_179(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) valueForKeyPath:@"identifiers"];
  id v3 = objc_msgSend(v2, "fc_arrayByTransformingWithBlock:", &__block_literal_global_185);
  id v4 = [v3 valueForKeyPath:@"@unionOfArrays.self"];

  id v5 = [MEMORY[0x1E4F1CAD0] setWithArray:v4];
  uint64_t v6 = [v4 count];
  if (v6 == [v5 count])
  {
    id v7 = (void *)MEMORY[0x1E4F1CAD0];
    id v8 = [*(id *)(a1 + 40) allKeys];
    id v9 = [v7 setWithArray:v8];
    uint64_t v10 = [v9 isEqualToSet:v5];
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

uint64_t __FCTopicallyOrderGroups_block_invoke_2_183(uint64_t a1, void *a2)
{
  return [a2 allObjects];
}

void __FCTopicallyOrderGroups_block_invoke_189(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_opt_new();
  id v5 = *(void **)(a1 + 32);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _OWORD v8[2] = __FCTopicallyOrderGroups_block_invoke_2_190;
  _OWORD v8[3] = &unk_1E5B4D498;
  id v9 = v5;
  id v10 = v3;
  id v11 = v4;
  id v6 = v4;
  id v7 = v3;
  [v9 enumerateObjectsUsingBlock:v8];
}

void __FCTopicallyOrderGroups_block_invoke_2_190(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  _OWORD v6[2] = __FCTopicallyOrderGroups_block_invoke_3_191;
  v6[3] = &unk_1E5B4D498;
  id v7 = v3;
  id v4 = *(void **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v5 = v3;
  [v4 enumerateObjectsUsingBlock:v6];
}

void __FCTopicallyOrderGroups_block_invoke_3_191(id *a1, id a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a1[4] == a2) {
    return;
  }
  id v3 = a2;
  id v4 = [FCTopicalEdge alloc];
  id v5 = a1[4];
  id v6 = v3;
  if (!v4) {
    goto LABEL_13;
  }
  if (!v5 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v18 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "node1");
    *(_DWORD *)uint64_t v22 = 136315906;
    *(void *)&v22[4] = "-[FCTopicalEdge initWithNode:andNode:]";
    *(_WORD *)&v22[12] = 2080;
    *(void *)&v22[14] = "FCHeadlineClusterOrdering.m";
    __int16 v23 = 1024;
    int v24 = 431;
    __int16 v25 = 2114;
    uint64_t v26 = v18;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v22, 0x26u);

    if (v6) {
      goto LABEL_8;
    }
  }
  else if (v6)
  {
    goto LABEL_8;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    __int16 v19 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "node2");
    *(_DWORD *)uint64_t v22 = 136315906;
    *(void *)&v22[4] = "-[FCTopicalEdge initWithNode:andNode:]";
    *(_WORD *)&v22[12] = 2080;
    *(void *)&v22[14] = "FCHeadlineClusterOrdering.m";
    __int16 v23 = 1024;
    int v24 = 432;
    __int16 v25 = 2114;
    uint64_t v26 = v19;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v22, 0x26u);
  }
LABEL_8:
  *(void *)uint64_t v22 = v4;
  *(void *)&v22[8] = FCTopicalEdge;
  id v7 = objc_msgSendSuper2((objc_super *)v22, sel_init);
  if (v7)
  {
    if (v6 && v5)
    {
      v21[0] = v5;
      v21[1] = v6;
      uint64_t v20 = v7;
      id v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v21 count:2];
      id v9 = [v8 sortedArrayUsingComparator:&__block_literal_global_100];

      uint64_t v10 = [v9 objectAtIndexedSubscript:0];
      id v11 = (void *)v20[2];
      void v20[2] = v10;

      uint64_t v12 = [v9 objectAtIndexedSubscript:1];
      id v13 = (void *)v20[3];
      v20[3] = v12;
    }
    else
    {
      id v9 = v7;
      uint64_t v20 = 0;
    }

    goto LABEL_16;
  }
LABEL_13:
  uint64_t v20 = 0;
LABEL_16:

  uint64_t v14 = a1 + 5;
  if (([a1[5] containsObject:v20] & 1) == 0)
  {
    id v16 = a1[6];
    __int16 v15 = a1 + 6;
    if (([v16 containsObject:v20] & 1) == 0)
    {
      -[FCTopicalEdge calculateRelatedness](v20);
      __int16 v17 = v20;
      if (v20)
      {
        if (([v20 relatednessCalculated] & 1) == 0) {
          -[FCTopicalEdge calculateRelatedness](v20);
        }
        __int16 v17 = v20;
        if (v20[5] && v20[4] + v20[6]) {
          __int16 v15 = v14;
        }
      }
      uint64_t v20 = v17;
      [*v15 addObject:v17];
    }
  }
}

uint64_t __FCTopicallyOrderGroups_block_invoke_4_193(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2) {
    a2 = *(void *)(a2 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v2, a2);
}

void __FCTopicallyOrderGroups_block_invoke_5_195(uint64_t a1, void *a2)
{
  if (a2) {
    id v4 = (double *)a2[2];
  }
  else {
    id v4 = 0;
  }
  id v5 = *(void **)(a1 + 32);
  id v8 = a2;
  -[FCTopicalNode considerEdge:withNodeScorer:](v4, v8, v5);
  if (a2)
  {
    id v6 = v8;
    id v7 = (double *)v8[3];
  }
  else
  {
    id v7 = 0;
    id v6 = v8;
  }
  -[FCTopicalNode considerEdge:withNodeScorer:](v7, v6, *(void **)(a1 + 32));
}

void __FCTopicallyOrderGroups_block_invoke_6_200(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = v3 + 7;
    id v6 = v3;
    id WeakRetained = objc_loadWeakRetained(v3 + 7);

    id v3 = v6;
    if (!WeakRetained)
    {
      objc_storeWeak(v4, *(id *)(a1 + 32));
      id v3 = v6;
    }
  }
}

void __FCTopicallyOrderGroups_block_invoke_7(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  _OWORD v6[2] = __FCTopicallyOrderGroups_block_invoke_8;
  v6[3] = &unk_1E5B4D510;
  id v7 = v4;
  id v8 = v3;
  id v5 = v3;
  [v7 enumerateObjectsUsingBlock:v6];
}

void __FCTopicallyOrderGroups_block_invoke_8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  _OWORD v6[2] = __FCTopicallyOrderGroups_block_invoke_9;
  v6[3] = &unk_1E5B4D510;
  id v7 = v3;
  id v4 = *(void **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v5 = v3;
  [v4 enumerateObjectsUsingBlock:v6];
}

void __FCTopicallyOrderGroups_block_invoke_9(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(id **)(a1 + 32);
  if (v4 != v3)
  {
    id v9 = v3;
    if (v3)
    {
      id WeakRetained = (id *)objc_loadWeakRetained(v3 + 7);
      id v4 = *(id **)(a1 + 32);
    }
    else
    {
      id WeakRetained = 0;
    }

    id v3 = v9;
    if (WeakRetained == v4)
    {
      objc_opt_class();
      id v6 = [*(id *)(a1 + 40) objectForKeyedSubscript:*(void *)(a1 + 32)];
      if (v6 && (objc_opt_isKindOfClass() & 1) != 0)
      {
        id v7 = v6;
        id v8 = v7;
      }
      else
      {
        id v8 = [MEMORY[0x1E4F1CA80] set];
        id v7 = 0;
      }

      [v8 addObject:v9];
      [*(id *)(a1 + 40) setObject:v8 forKeyedSubscript:*(void *)(a1 + 32)];

      id v3 = v9;
    }
  }
}

void __FCTopicallyOrderGroups_block_invoke_10(int a1, uint64_t a2, id obj)
{
  if (a2) {
    objc_storeStrong((id *)(a2 + 64), obj);
  }
}

uint64_t __FCTopicallyOrderGroups_block_invoke_11(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  double v5 = 0.0;
  double v6 = 0.0;
  if (a3) {
    double v6 = *(double *)(a3 + 8) * *(double *)(a3 + 72);
  }
  if (v4) {
    double v5 = v4[1] * v4[9];
  }
  if (v6 < v5) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6 > v5;
  }

  return v7;
}

id __FCTopicallyOrderGroups_block_invoke_12(uint64_t a1)
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __FCTopicallyOrderGroups_block_invoke_13;
  aBlock[3] = &unk_1E5B4D580;
  id v16 = *(id *)(a1 + 40);
  uint64_t v2 = _Block_copy(aBlock);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  _OWORD v12[2] = __FCTopicallyOrderGroups_block_invoke_15;
  uint64_t v12[3] = &unk_1E5B4D5F8;
  id v13 = *(id *)(a1 + 48);
  id v3 = v2;
  id v14 = v3;
  id v4 = _Block_copy(v12);
  double v5 = _Block_copy(v4);
  double v6 = *(void **)(a1 + 32);
  if (v6) {
    double v6 = (void *)v6[8];
  }
  uint64_t v7 = v6;
  id v8 = [v7 allObjects];
  id v9 = [v8 sortedArrayUsingComparator:*(void *)(a1 + 48)];

  uint64_t v10 = (*((void (**)(void *, void *, void *))v4 + 2))(v4, v5, v9);

  return v10;
}

id __FCTopicallyOrderGroups_block_invoke_13(uint64_t a1, uint64_t a2)
{
  if (a2) {
    id v3 = *(void **)(a2 + 24);
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;
  double v5 = [v4 allObjects];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _OWORD v8[2] = __FCTopicallyOrderGroups_block_invoke_14;
  _OWORD v8[3] = &unk_1E5B4D558;
  id v9 = *(id *)(a1 + 32);
  double v6 = [v5 sortedArrayUsingComparator:v8];

  return v6;
}

uint64_t __FCTopicallyOrderGroups_block_invoke_14(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  double v6 = (void *)MEMORY[0x1E4F1CAD0];
  id v7 = a2;
  id v8 = [v6 setWithObject:a3];
  double v9 = (*(double (**)(uint64_t, void *))(v5 + 16))(v5, v8);
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = [MEMORY[0x1E4F1CAD0] setWithObject:v7];

  double v12 = (*(double (**)(uint64_t, void *))(v10 + 16))(v10, v11);
  if (v9 < v12) {
    uint64_t v13 = -1;
  }
  else {
    uint64_t v13 = v9 > v12;
  }

  return v13;
}

id __FCTopicallyOrderGroups_block_invoke_15(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)MEMORY[0x1E4F1C978];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  _OWORD v12[2] = __FCTopicallyOrderGroups_block_invoke_16;
  uint64_t v12[3] = &unk_1E5B4D5D0;
  id v13 = v6;
  id v14 = v5;
  id v15 = *(id *)(a1 + 32);
  id v16 = *(id *)(a1 + 40);
  id v8 = v5;
  id v9 = v6;
  uint64_t v10 = objc_msgSend(v7, "fc_array:", v12);

  return v10;
}

void __FCTopicallyOrderGroups_block_invoke_16(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  _OWORD v6[2] = __FCTopicallyOrderGroups_block_invoke_17;
  v6[3] = &unk_1E5B4D5A8;
  id v7 = v3;
  id v4 = *(void **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  id v5 = v3;
  [v4 enumerateObjectsUsingBlock:v6];
}

void __FCTopicallyOrderGroups_block_invoke_17(void *a1, void *a2)
{
  double v12 = a2;
  if (v12 && v12[8])
  {
    id v3 = (void *)a1[4];
    id v4 = (void (**)(void, void, void))a1[5];
    id v5 = _Block_copy(v4);
    id v6 = v12[8];
    id v7 = [v6 allObjects];
    id v8 = [v7 sortedArrayUsingComparator:a1[6]];
    id v9 = ((void (**)(void, void *, void *))v4)[2](v4, v5, v8);
    [v3 addObjectsFromArray:v9];
  }
  id v10 = (void *)a1[4];
  id v11 = (*(void (**)(void))(a1[7] + 16))();
  [v10 addObjectsFromArray:v11];
}

id __FCTopicallyOrderGroups_block_invoke_18(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = (uint64_t)v4;
  uint64_t v26 = NSString;
  if (v4) {
    id v6 = (void *)v4[3];
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 3221225472;
  void v35[2] = __FCTopicallyOrderGroups_block_invoke_19;
  v35[3] = &unk_1E5B4D648;
  id v36 = *(id *)(a1 + 32);
  id v8 = objc_msgSend(v7, "fc_arrayByTransformingWithBlock:", v35);
  uint64_t v30 = [v8 componentsJoinedByString:@","];
  objc_msgSend(NSNumber, "numberWithDouble:", -[FCTopicalNode individualScoreWithTopicScoreProvider:](v5, *(void *)(a1 + 40)));
  v29 = id v28 = v7;
  uint64_t v27 = v8;
  if (v5)
  {
    id v9 = [NSNumber numberWithDouble:*(double *)(v5 + 8) * *(double *)(v5 + 72)];
    id WeakRetained = objc_loadWeakRetained((id *)(v5 + 56));
    BOOL v25 = WeakRetained == 0;
    if (WeakRetained)
    {
      id v11 = objc_loadWeakRetained((id *)(v5 + 56));
      uint64_t v2 = v11;
      if (v11) {
        double v12 = (void *)*((void *)v11 + 3);
      }
      else {
        double v12 = 0;
      }
      id v13 = v12;
      v33[0] = MEMORY[0x1E4F143A8];
      v33[1] = 3221225472;
      v33[2] = __FCTopicallyOrderGroups_block_invoke_20;
      v33[3] = &unk_1E5B4D648;
      __int16 v23 = &v34;
      id v34 = *(id *)(a1 + 32);
      int v24 = v13;
      uint64_t v22 = objc_msgSend(v13, "fc_arrayByTransformingWithBlock:", v33);
      id v14 = [v22 componentsJoinedByString:@","];
    }
    else
    {
      id v14 = @"nil";
    }
    id v15 = *(void **)(v5 + 64);
  }
  else
  {
    id v9 = [NSNumber numberWithDouble:0.0];
    id WeakRetained = 0;
    id v15 = 0;
    BOOL v25 = 1;
    id v14 = @"nil";
  }
  id v16 = v15;
  __int16 v17 = [v16 allObjects];
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 3221225472;
  v31[2] = __FCTopicallyOrderGroups_block_invoke_21;
  v31[3] = &unk_1E5B4D670;
  id v32 = *(id *)(a1 + 32);
  int v18 = objc_msgSend(v17, "fc_arrayByTransformingWithBlock:", v31);
  __int16 v19 = [v18 componentsJoinedByString:@","];
  uint64_t v20 = [v26 stringWithFormat:@"Node : %@ (Individual Score : %@ Final Score : %@) Parent : %@ Children : %@", v30, v29, v9, v14, v19];

  if (!v25)
  {
  }
  return v20;
}

id __FCTopicallyOrderGroups_block_invoke_19(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isEqualToString:@"root"])
  {
    id v4 = v3;
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v5 = v4;

  return v5;
}

id __FCTopicallyOrderGroups_block_invoke_20(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isEqualToString:@"root"])
  {
    id v4 = v3;
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v5 = v4;

  return v5;
}

id __FCTopicallyOrderGroups_block_invoke_21(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v2 = *(void **)(a2 + 24);
  }
  else {
    uint64_t v2 = 0;
  }
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __FCTopicallyOrderGroups_block_invoke_22;
  v7[3] = &unk_1E5B4D648;
  id v8 = *(id *)(a1 + 32);
  id v3 = v2;
  id v4 = objc_msgSend(v3, "fc_arrayByTransformingWithBlock:", v7);
  uint64_t v5 = [v4 componentsJoinedByString:@","];

  return v5;
}

id __FCTopicallyOrderGroups_block_invoke_22(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isEqualToString:@"root"])
  {
    id v4 = v3;
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v5 = v4;

  return v5;
}

id __FCTopicallyOrderGroups_block_invoke_220(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = NSString;
  if (v3 && (id v6 = v3[2]) != 0)
  {
    id v28 = v6;
    id v7 = (void *)*((void *)v6 + 3);
  }
  else
  {
    id v28 = 0;
    id v7 = 0;
  }
  id v8 = v7;
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 3221225472;
  v31[2] = __FCTopicallyOrderGroups_block_invoke_2_221;
  v31[3] = &unk_1E5B4D648;
  id v32 = *(id *)(a1 + 32);
  id v9 = objc_msgSend(v8, "fc_arrayByTransformingWithBlock:", v31);
  uint64_t v26 = [v9 componentsJoinedByString:@","];
  uint64_t v27 = v8;
  if (v4)
  {
    id v10 = v4[3];
    id v11 = v10;
    if (v10)
    {
      double v12 = (void *)*((void *)v10 + 3);
      goto LABEL_7;
    }
  }
  else
  {
    id v11 = 0;
  }
  double v12 = 0;
LABEL_7:
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = __FCTopicallyOrderGroups_block_invoke_3_222;
  v29[3] = &unk_1E5B4D648;
  id v30 = *(id *)(a1 + 32);
  id v13 = v12;
  id v14 = objc_msgSend(v13, "fc_arrayByTransformingWithBlock:", v29);
  id v15 = [v14 componentsJoinedByString:@","];
  if (v4) {
    id v16 = v4[4];
  }
  else {
    id v16 = 0;
  }
  __int16 v17 = v5;
  int v18 = [NSNumber numberWithUnsignedInteger:v16];
  BOOL v25 = v9;
  if (v4) {
    id v19 = v4[5];
  }
  else {
    id v19 = 0;
  }
  uint64_t v20 = [NSNumber numberWithUnsignedInteger:v19];
  if (v4) {
    id v21 = v4[6];
  }
  else {
    id v21 = 0;
  }
  uint64_t v22 = [NSNumber numberWithUnsignedInteger:v21];
  __int16 v23 = [v17 stringWithFormat:@"Edge from %@ to %@ with { %@ -- %@ -- %@ }", v26, v15, v18, v20, v22];

  return v23;
}

id __FCTopicallyOrderGroups_block_invoke_2_221(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isEqualToString:@"root"])
  {
    id v4 = v3;
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v5 = v4;

  return v5;
}

id __FCTopicallyOrderGroups_block_invoke_3_222(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isEqualToString:@"root"])
  {
    id v4 = v3;
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_1A473C964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FCPostPurchaseOnboardingStepWithValue(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if ([v1 caseInsensitiveCompare:@"landingPage"])
    {
      if ([v2 caseInsensitiveCompare:@"channelPicker"])
      {
        if ([v2 caseInsensitiveCompare:@"channelPickerNewsPlus"]) {
          uint64_t v3 = 4 * ([v2 caseInsensitiveCompare:@"deepLink"] == 0);
        }
        else {
          uint64_t v3 = 3;
        }
      }
      else
      {
        uint64_t v3 = 2;
      }
    }
    else
    {
      uint64_t v3 = 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t FCPostPurchaseOnboardingConfigurationTypeWithValue(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if ([v1 caseInsensitiveCompare:@"postPurchaseFromOslo"])
    {
      if ([v2 caseInsensitiveCompare:@"postPurchaseFromLandingPage"])
      {
        if ([v2 caseInsensitiveCompare:@"postPurchaseFromPuzzle"])
        {
          if ([v2 caseInsensitiveCompare:@"detectionAsFamilyMember"])
          {
            if ([v2 caseInsensitiveCompare:@"detectionAsAppleOneUser"])
            {
              if ([v2 caseInsensitiveCompare:@"detectionAsAmplifyUser"])
              {
                if ([v2 caseInsensitiveCompare:@"detectionAsPaidBundleViaOfferUser"]) {
                  uint64_t v3 = 8
                }
                     * ([v2 caseInsensitiveCompare:@"postPurchaseFromPaidBundleViaOffer"] == 0);
                else {
                  uint64_t v3 = 7;
                }
              }
              else
              {
                uint64_t v3 = 6;
              }
            }
            else
            {
              uint64_t v3 = 5;
            }
          }
          else
          {
            uint64_t v3 = 4;
          }
        }
        else
        {
          uint64_t v3 = 3;
        }
      }
      else
      {
        uint64_t v3 = 2;
      }
    }
    else
    {
      uint64_t v3 = 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

__CFString *FCDescriptionForVerticalAlignment(unint64_t a1)
{
  if (a1 > 2) {
    return 0;
  }
  else {
    return off_1E5B4D8E0[a1];
  }
}

BOOL FCRelativeOrderOppositeOrder(uint64_t a1)
{
  return a1 != 1;
}

BOOL FCSizeIsLargerThanEqualToSize(double a1, double a2, double a3, double a4)
{
  return a2 >= a4 && a1 >= a3;
}

BOOL FCCGRectAlmostEqual(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  return vabdd_f64(a1, a5) < 0.00999999978
      && vabdd_f64(a2, a6) < 0.00999999978
      && vabdd_f64(a3, a7) < 0.00999999978
      && vabdd_f64(a4, a8) < 0.00999999978;
}

uint64_t FCCKPResponseOperationResultErrorClientReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 101)
      {
        int v24 = objc_alloc_init(FCCKPUniqueFieldFailure);
        objc_storeStrong((id *)(a1 + 24), v24);
        if (!PBReaderPlaceMark() || (FCCKPUniqueFieldFailureReadFrom((uint64_t)v24, a2) & 1) == 0)
        {
LABEL_42:

          return 0;
        }
      }
      else
      {
        if (v17 != 100)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 32) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_37;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_39;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v20) = 0;
            }
LABEL_39:
            *(_DWORD *)(a1 + 16) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        int v24 = objc_alloc_init(FCCKPOplockFailure);
        objc_storeStrong((id *)(a1 + 8), v24);
        if (!PBReaderPlaceMark() || (FCCKPOplockFailureReadFrom((uint64_t)v24, a2) & 1) == 0) {
          goto LABEL_42;
        }
      }
      PBReaderRecallMark();
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1A473EF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4740234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FRAccountQueueIsSupportedActionType(unint64_t a1)
{
  return (a1 < 7) & (0x6Eu >> a1);
}

BOOL FCAccountQueueIsDestructiveActionType(uint64_t a1)
{
  return a1 == 3 || a1 == 6;
}

void sub_1A4744FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A47457E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A474983C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A474A028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A474A1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A474A59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A474B31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  _Block_object_dispose(&a44, 8);
  _Block_object_dispose(&a50, 8);
  _Block_object_dispose(&a56, 8);
  _Block_object_dispose((const void *)(v56 - 208), 8);
  _Block_object_dispose((const void *)(v56 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1A474E434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
}

void sub_1A474FBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *location, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
}

void sub_1A475037C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1A4751550(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 120));
  _Unwind_Resume(a1);
}

void sub_1A4756ABC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_1A475812C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 200), 8);
  _Block_object_dispose((const void *)(v34 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1A475BA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A475BEEC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1A475C2C0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

__CFString *FCDebugFetchOperationDescriptionForStatus(unint64_t a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return off_1E5B4EDA8[a1];
  }
}

uint64_t PBTagTypeFromString(void *a1)
{
  id v1 = a1;
  if ([v1 caseInsensitiveCompare:@"topic"])
  {
    if ([v1 caseInsensitiveCompare:@"channel"])
    {
      if ([v1 caseInsensitiveCompare:@"section"])
      {
        if ([v1 caseInsensitiveCompare:@"list"])
        {
          if ([v1 caseInsensitiveCompare:@"issue"]) {
            uint64_t v2 = 0;
          }
          else {
            uint64_t v2 = 5;
          }
        }
        else
        {
          uint64_t v2 = 4;
        }
      }
      else
      {
        uint64_t v2 = 3;
      }
    }
    else
    {
      uint64_t v2 = 2;
    }
  }
  else
  {
    uint64_t v2 = 1;
  }

  return v2;
}

uint64_t FCTagTypeFromPBTagType(int a1)
{
  uint64_t v1 = (a1 - 1);
  if (v1 < 5) {
    return v1 + 1;
  }
  else {
    return 0;
  }
}

uint64_t FCTagEligibilityForGroupingFromNTPBTagRecord_GroupingAvailability(int a1)
{
  uint64_t v1 = (a1 - 1);
  if (v1 < 3) {
    return v1 + 1;
  }
  else {
    return 0;
  }
}

uint64_t NTPBTagRecord_GroupingAvailabilityFromFCTagEligibilityForGrouping(uint64_t result)
{
  if ((unint64_t)(result - 1) < 3) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t FCSportsLeagueTypeFromString(uint64_t a1)
{
  uint64_t v1 = [&unk_1EF8D96C8 objectForKeyedSubscript:a1];
  uint64_t v2 = [v1 integerValue];

  return v2;
}

uint64_t FCSportsTypeFromString(uint64_t a1)
{
  uint64_t v1 = [&unk_1EF8D96F0 objectForKeyedSubscript:a1];
  uint64_t v2 = [v1 integerValue];

  return v2;
}

void *FCMastheadLogoVisibilityFromString(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = [&unk_1EF8D9740 objectForKeyedSubscript:v1];

    if (v2)
    {
      uint64_t v3 = [&unk_1EF8D9740 objectForKeyedSubscript:v1];
      uint64_t v2 = (void *)[v3 integerValue];
    }
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t FCPaidAccessCheckerHasBundleSubscriptionToChannelInline(void *a1, void *a2, char a3)
{
  id v5 = a1;
  id v6 = a2;
  if (!v6) {
    goto LABEL_3;
  }
  uint64_t v7 = [v5 bundleSubscription];
  char v8 = objc_getAssociatedObject((id)v7, (const void *)(v7 + 1));
  uint64_t v9 = [v8 unsignedIntegerValue];
  char v10 = v9;
  uint64_t v11 = objc_getAssociatedObject((id)v7, (const void *)~v9);
  char v12 = ([v11 unsignedIntegerValue] - a3) ^ (v10 + a3);

  if (v12)
  {
    BOOL v14 = [v5 bundleSubscription];
    int v15 = [v14 bundleChannelIDs];
    uint64_t v13 = [v15 containsObject:v6];
  }
  else
  {
LABEL_3:
    uint64_t v13 = 0;
  }

  return v13;
}

void sub_1A47623F8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

__CFString *NSStringFromFCFeedDescriptorConfiguration(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xA) {
    return @"Default";
  }
  else {
    return off_1E5B4F1F0[a1 - 1];
  }
}

uint64_t FCAssetHandleQoSFromPriority(uint64_t a1)
{
  if (a1 <= 0) {
    return -1;
  }
  else {
    return 25;
  }
}

void sub_1A4766628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v24 - 112));
  _Unwind_Resume(a1);
}

void sub_1A47667BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A476687C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A47673D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4767DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4769264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A476AEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FCCKPResponseOperationResultErrorExtensionReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 16;
      }
      else
      {
        if (v17 == 2)
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v24 = *v3;
            unint64_t v25 = *(void *)(a2 + v24);
            if (v25 == -1 || v25 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if ((v26 & 0x80) == 0) {
              goto LABEL_34;
            }
            v21 += 7;
            BOOL v14 = v22++ >= 9;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_36;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_34:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v23) = 0;
          }
LABEL_36:
          *(_DWORD *)(a1 + 24) = v23;
          continue;
        }
        if (v17 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
        }
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 8;
      }
      uint64_t v20 = *(void **)(a1 + v19);
      *(void *)(a1 + v19) = v18;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

FCBundleSubscription *FCBundleSubscriptionMakeInline(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, char a7, char a8, void *a9)
{
  id v29 = a9;
  id v17 = a6;
  id v18 = a3;
  id v19 = a2;
  id v20 = a1;
  LOBYTE(v28) = a8;
  LOBYTE(v27) = a7;
  char v21 = [[FCBundleSubscription alloc] initWithBundlePurchaseID:v20 bundleChannelIDs:v19 bundleChannelIDsVersion:v18 inTrialPeriod:a4 isPurchaser:a5 servicesBundlePurchaseID:v17 isAmplifyUser:v27 initialPurchaseTimestamp:v29 isPaidBundleViaOfferActivated:v28];
  unsigned int v22 = NSNumber;
  uint64_t v23 = v21;
  uint64_t v24 = [v22 numberWithUnsignedInteger:(char *)&v21[5]._bundleChannelIDsVersion + 3];
  unint64_t v25 = [NSNumber numberWithUnsignedInteger:-356 - (void)v21];
  objc_setAssociatedObject(v23, (char *)&v21->super.isa + 1, v24, (void *)1);
  objc_setAssociatedObject(v23, (const void *)(-356 - (void)v21), v25, (void *)1);

  return v23;
}

void sub_1A477996C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A477A2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A477A470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A477AD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A477B67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A477C4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *FCStringFromFeedPersonalizationConfigurationSet(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x26) {
    return @"Default";
  }
  else {
    return off_1E5B4FB78[a1 - 1];
  }
}

uint64_t ArticleContentTypeFromString(void *a1)
{
  id v1 = a1;
  if ([v1 caseInsensitiveCompare:@"web"])
  {
    if ([v1 caseInsensitiveCompare:@"flint"])
    {
      if ([v1 caseInsensitiveCompare:@"video"]) {
        uint64_t v2 = 0;
      }
      else {
        uint64_t v2 = 3;
      }
    }
    else
    {
      uint64_t v2 = 2;
    }
  }
  else
  {
    uint64_t v2 = 1;
  }

  return v2;
}

uint64_t FCCKPUniqueFieldFailureReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(FCCKPIdentifier);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (FCCKPIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t FCSortOptionForNTPBSortOption(int a1)
{
  if (a1 == 2) {
    return 2;
  }
  else {
    return a1 == 1;
  }
}

uint64_t FCSortOptionForStringSortOption(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"VideoGroupSortOptionDate"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"VideoGroupSortOptionPersonalization"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

BOOL FCFilterOptionForNTPBFilterOption(int a1)
{
  return a1 != 0;
}

uint64_t FCFilterOptionForStringFilterOption(void *a1)
{
  return [a1 isEqualToString:@"VideoGroupFilterOptionWatched"];
}

void sub_1A4784B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FCTernaryFromBOOL(uint64_t result)
{
  return result;
}

BOOL FCBOOLFromTernary(uint64_t a1)
{
  return a1 == 1;
}

uint64_t FCOSVersionCompare(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 1;
  if (a2 >= a4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = -1;
  }
  if (a1 <= a3) {
    uint64_t v4 = v5;
  }
  if (a1 >= a3) {
    return v4;
  }
  else {
    return -1;
  }
}

__CFString *FCStringFromOSVersion(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"%ld.%ld", a1, a2);
    uint64_t v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v3 = @"<none>";
  }
  return v3;
}

id FCStringFromOSVersions(uint64_t *a1)
{
  uint64_t v2 = NSString;
  uint64_t v3 = FCStringFromOSVersion(*a1, a1[1]);
  uint64_t v4 = FCStringFromOSVersion(a1[2], a1[3]);
  uint64_t v5 = FCStringFromOSVersion(a1[4], a1[5]);
  id v6 = FCStringFromOSVersion(a1[6], a1[7]);
  uint64_t v7 = [v2 stringWithFormat:@"iOS=%@, macOS=%@, watchOS=%@, visionOS=%@", v3, v4, v5, v6];

  return v7;
}

id FCCoreConfigurationPromise(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (!v1 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    id v6 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "configurationManager");
    *(_DWORD *)buf = 136315906;
    unint64_t v10 = "NFPromise<id<FCCoreConfiguration>> *FCCoreConfigurationPromise(__strong id<FCCoreConfigurationManager>)";
    __int16 v11 = 2080;
    unint64_t v12 = "FCCoreConfigurationManager.m";
    __int16 v13 = 1024;
    int v14 = 13;
    __int16 v15 = 2114;
    id v16 = v6;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
  id v2 = objc_alloc(MEMORY[0x1E4F81BF0]);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __FCCoreConfigurationPromise_block_invoke;
  v7[3] = &unk_1E5B4EEF0;
  id v8 = v1;
  id v3 = v1;
  uint64_t v4 = (void *)[v2 initWithResolver:v7];

  return v4;
}

void __FCCoreConfigurationPromise_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 32);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __FCCoreConfigurationPromise_block_invoke_2;
  v10[3] = &unk_1E5B50128;
  id v11 = v5;
  id v12 = v6;
  id v8 = v6;
  id v9 = v5;
  FCCoreConfigurationFetch(v7, v10);
}

uint64_t __FCCoreConfigurationPromise_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_1A478A52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose((const void *)(v41 - 240), 8);
  _Block_object_dispose((const void *)(v41 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1A478CA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A478E8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  objc_destroyWeak(v37);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v38 - 224), 8);
  _Block_object_dispose((const void *)(v38 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t FCIssueHistoryItemIDFromIssueID(uint64_t a1)
{
  return [NSString stringWithFormat:@"iss-%@", a1];
}

void sub_1A47918F0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t FCWriteDictionary(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    id v9 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "dictionary");
    *(_DWORD *)buf = 136315906;
    int v14 = "BOOL FCWriteDictionary(NSDictionary *__strong, NSURL *__strong)";
    __int16 v15 = 2080;
    id v16 = "FCFileCoordinatedDictionaryUtilities.m";
    __int16 v17 = 1024;
    int v18 = 36;
    __int16 v19 = 2114;
    id v20 = v9;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

    if (v4) {
      goto LABEL_6;
    }
  }
  else if (v4)
  {
    goto LABEL_6;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    unint64_t v10 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "fileURL");
    *(_DWORD *)buf = 136315906;
    int v14 = "BOOL FCWriteDictionary(NSDictionary *__strong, NSURL *__strong)";
    __int16 v15 = 2080;
    id v16 = "FCFileCoordinatedDictionaryUtilities.m";
    __int16 v17 = 1024;
    int v18 = 37;
    __int16 v19 = 2114;
    id v20 = v10;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
LABEL_6:
  id v12 = 0;
  id v5 = [MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v3 requiringSecureCoding:1 error:&v12];
  id v6 = v12;
  if (!v5 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    id v11 = objc_msgSend([NSString alloc], "initWithFormat:", @"invalid nil value for '%s'", "afterData");
    *(_DWORD *)buf = 136315906;
    int v14 = "BOOL FCWriteDictionary(NSDictionary *__strong, NSURL *__strong)";
    __int16 v15 = 2080;
    id v16 = "FCFileCoordinatedDictionaryUtilities.m";
    __int16 v17 = 1024;
    int v18 = 41;
    __int16 v19 = 2114;
    id v20 = v11;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
  uint64_t v7 = [v5 writeToURL:v4 atomically:1];

  return v7;
}

long double FCPersonalizationUtilitiesStaticHourlyFlowRate(void *a1, unint64_t a2)
{
  id v3 = a1;
  [v3 hourlyFlowRateDampeningFactor];
  double v4 = 1.0;
  if (v5 != 0.0)
  {
    [v3 hourlyFlowRateDampeningFactor];
    double v4 = 1.0 / v6;
  }
  [v3 hourlyFlowRateMinimum];
  double v8 = v7;
  [v3 hourlyFlowRatePerSubscription];
  double v10 = v9;
  [v3 hourlyFlowRateSubscriptionCountBuffer];
  long double v12 = v8 + pow(v11 + v10 * (double)a2, v4);

  return v12;
}

double FCPersonalizationBaselineClicksMultiplerForTagID(void *a1, void *a2, double a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  double v7 = v6;
  if (v6)
  {
    double v8 = [v6 defaultTags];
    uint64_t v9 = [v8 objectForKeyedSubscript:v5];
    if (v9)
    {
      double v10 = (void *)v9;
    }
    else
    {
      __int16 v13 = [v7 optionalTags];
      double v10 = [v13 objectForKeyedSubscript:v5];

      if (!v10)
      {
        v28[0] = MEMORY[0x1E4F143A8];
        v28[1] = 3221225472;
        void v28[2] = __FCPersonalizationBaselineClicksMultiplerForTagID_block_invoke_2;
        v28[3] = &unk_1E5B50560;
        id v29 = v5;
        __FCPersonalizationBaselineClicksMultiplerForTagID_block_invoke_2((uint64_t)v28);
        double v11 = 1.0;
        id v12 = v29;
        goto LABEL_12;
      }
    }
    id v12 = v10;
    [v12 doubleValue];
    if (a3 <= 0.0 || v14 <= 0.0)
    {
      *(void *)&v24[0] = MEMORY[0x1E4F143A8];
      *(void *)&v24[1] = 3221225472;
      *(void *)&void v24[2] = __FCPersonalizationBaselineClicksMultiplerForTagID_block_invoke_3;
      *(void *)&v24[3] = &unk_1E5B50588;
      id v25 = v12;
      double v27 = a3;
      id v26 = v5;
      double v11 = __FCPersonalizationBaselineClicksMultiplerForTagID_block_invoke_3(v24);
    }
    else
    {
      [v12 doubleValue];
      double v16 = v15 / 100.0;
      double v11 = v15 / 100.0 / a3;
      __int16 v17 = (void *)FCPersonalizationLog;
      if (os_log_type_enabled((os_log_t)FCPersonalizationLog, OS_LOG_TYPE_DEBUG))
      {
        int v18 = NSNumber;
        __int16 v19 = v17;
        id v20 = [v18 numberWithDouble:v16];
        uint64_t v21 = [NSNumber numberWithDouble:a3];
        unsigned int v22 = [NSNumber numberWithDouble:v11];
        *(_DWORD *)buf = 138413058;
        id v33 = v5;
        __int16 v34 = 2112;
        uint64_t v35 = v20;
        __int16 v36 = 2112;
        uint64_t v37 = v21;
        __int16 v38 = 2112;
        uint64_t v39 = v22;
        _os_log_debug_impl(&dword_1A460D000, v19, OS_LOG_TYPE_DEBUG, "Found whitelisted tag prior for %@. Tag prior %@, baseline prior %@, multiplier %@", buf, 0x2Au);
      }
    }
  }
  else
  {
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 3221225472;
    v30[2] = __FCPersonalizationBaselineClicksMultiplerForTagID_block_invoke;
    v30[3] = &unk_1E5B50560;
    id v31 = v5;
    __FCPersonalizationBaselineClicksMultiplerForTagID_block_invoke((uint64_t)v30);
    double v11 = 1.0;
    id v12 = v31;
  }
LABEL_12:

  return v11;
}

double __FCPersonalizationBaselineClicksMultiplerForTagID_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = FCPersonalizationLog;
  if (os_log_type_enabled((os_log_t)FCPersonalizationLog, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v4;
    _os_log_debug_impl(&dword_1A460D000, v2, OS_LOG_TYPE_DEBUG, "No whitelist present for %@", (uint8_t *)&v5, 0xCu);
  }
  return 1.0;
}

double __FCPersonalizationBaselineClicksMultiplerForTagID_block_invoke_2(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = FCPersonalizationLog;
  if (os_log_type_enabled((os_log_t)FCPersonalizationLog, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v4;
    _os_log_debug_impl(&dword_1A460D000, v2, OS_LOG_TYPE_DEBUG, "No whitelisted tag prior specified for %@", (uint8_t *)&v5, 0xCu);
  }
  return 1.0;
}

double __FCPersonalizationBaselineClicksMultiplerForTagID_block_invoke_3(double *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)FCPersonalizationLog;
  if (os_log_type_enabled((os_log_t)FCPersonalizationLog, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *((void *)a1 + 4);
    int v5 = NSNumber;
    double v6 = a1[6];
    uint64_t v7 = v2;
    double v8 = [v5 numberWithDouble:v6];
    uint64_t v9 = *((void *)a1 + 5);
    int v10 = 138412802;
    uint64_t v11 = v4;
    __int16 v12 = 2112;
    __int16 v13 = v8;
    __int16 v14 = 2112;
    uint64_t v15 = v9;
    _os_log_debug_impl(&dword_1A460D000, v7, OS_LOG_TYPE_DEBUG, "tagPriorPercent = %@, baselineRatePrior = %@ for %@", (uint8_t *)&v10, 0x20u);
  }
  return 1.0;
}

void sub_1A4794DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose((const void *)(v53 - 256), 8);
  _Unwind_Resume(a1);
}

void FCResourceArchiveCopyFileFinishedHandler(uint64_t a1, const char *a2)
{
  BOMCopierUserData();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  id v3 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v4 = [v3 stringWithFileSystemRepresentation:a2 length:strlen(a2)];

  [v5 addObject:v4];
}

__CFString *NSStringForFCUserEventHistoryPruningPolicyType(unint64_t a1)
{
  if (a1 > 3) {
    return @"MaxTotalSize";
  }
  else {
    return off_1E5B50918[a1];
  }
}

void *FCSubscriptionTypes()
{
  return &unk_1EF8D8AC0;
}

uint64_t FCCKSubscriptionOriginFromFCSubscriptionOrigin(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t result = 3;
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 6:
    case 7:
    case 8:
    case 9:
      uint64_t result = a1;
      break;
    case 4:
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        id v3 = (void *)[[NSString alloc] initWithFormat:@"WARNING: These values are deprecated and shouldn't be the origin for any subscription"];
        int v6 = 136315906;
        uint64_t v7 = "FCCKSubscriptionOrigin FCCKSubscriptionOriginFromFCSubscriptionOrigin(FCSubscriptionOrigin)";
        __int16 v8 = 2080;
        uint64_t v9 = "FCSubscription.m";
        __int16 v10 = 1024;
        int v11 = 388;
        __int16 v12 = 2114;
        __int16 v13 = v3;
        _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v6, 0x26u);
      }
      uint64_t result = 4;
      break;
    case 5:
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        uint64_t v4 = (void *)[[NSString alloc] initWithFormat:@"WARNING: These values are deprecated and shouldn't be the origin for any subscription"];
        int v6 = 136315906;
        uint64_t v7 = "FCCKSubscriptionOrigin FCCKSubscriptionOriginFromFCSubscriptionOrigin(FCSubscriptionOrigin)";
        __int16 v8 = 2080;
        uint64_t v9 = "FCSubscription.m";
        __int16 v10 = 1024;
        int v11 = 392;
        __int16 v12 = 2114;
        __int16 v13 = v4;
        _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v6, 0x26u);
      }
      uint64_t result = 5;
      break;
    case 10:
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        id v5 = (void *)[[NSString alloc] initWithFormat:@"WARNING: This value should never be persisted as a subscription origin"];
        int v6 = 136315906;
        uint64_t v7 = "FCCKSubscriptionOrigin FCCKSubscriptionOriginFromFCSubscriptionOrigin(FCSubscriptionOrigin)";
        __int16 v8 = 2080;
        uint64_t v9 = "FCSubscription.m";
        __int16 v10 = 1024;
        int v11 = 414;
        __int16 v12 = 2114;
        __int16 v13 = v5;
        _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v6, 0x26u);
      }
      uint64_t result = 10;
      break;
    default:
      return result;
  }
  return result;
}

__CFString *FCDescriptionForSubscriptionType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4) {
    return @"tag";
  }
  else {
    return off_1E5B50938[a1 - 1];
  }
}

uint64_t FCSubscriptionOriginFromFCCKSubscriptionOrigin(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t result = 3;
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 6:
    case 7:
    case 8:
    case 9:
      uint64_t result = a1;
      break;
    case 4:
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        id v3 = (void *)[[NSString alloc] initWithFormat:@"WARNING: These values are deprecated and shouldn't be the origin for any subscription"];
        int v6 = 136315906;
        uint64_t v7 = "FCSubscriptionOrigin FCSubscriptionOriginFromFCCKSubscriptionOrigin(FCCKSubscriptionOrigin)";
        __int16 v8 = 2080;
        uint64_t v9 = "FCSubscription.m";
        __int16 v10 = 1024;
        int v11 = 347;
        __int16 v12 = 2114;
        __int16 v13 = v3;
        _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v6, 0x26u);
      }
      uint64_t result = 4;
      break;
    case 5:
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        uint64_t v4 = (void *)[[NSString alloc] initWithFormat:@"WARNING: These values are deprecated and shouldn't be the origin for any subscription"];
        int v6 = 136315906;
        uint64_t v7 = "FCSubscriptionOrigin FCSubscriptionOriginFromFCCKSubscriptionOrigin(FCCKSubscriptionOrigin)";
        __int16 v8 = 2080;
        uint64_t v9 = "FCSubscription.m";
        __int16 v10 = 1024;
        int v11 = 351;
        __int16 v12 = 2114;
        __int16 v13 = v4;
        _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v6, 0x26u);
      }
      uint64_t result = 5;
      break;
    case 10:
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        id v5 = (void *)[[NSString alloc] initWithFormat:@"WARNING: This value should never be persisted as a subscription origin"];
        int v6 = 136315906;
        uint64_t v7 = "FCSubscriptionOrigin FCSubscriptionOriginFromFCCKSubscriptionOrigin(FCCKSubscriptionOrigin)";
        __int16 v8 = 2080;
        uint64_t v9 = "FCSubscription.m";
        __int16 v10 = 1024;
        int v11 = 373;
        __int16 v12 = 2114;
        __int16 v13 = v5;
        _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v6, 0x26u);
      }
      uint64_t result = 10;
      break;
    default:
      return result;
  }
  return result;
}

__CFString *NSStringFromFCSubscriptionType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4) {
    return @"FCSubscriptionTypeTag";
  }
  else {
    return off_1E5B50960[a1 - 1];
  }
}

__CFString *NSStringFromFCSubscriptionOrigin(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 9) {
    return @"FCSubscriptionOriginUserInitiated";
  }
  else {
    return off_1E5B50988[a1 - 1];
  }
}

uint64_t FCSubscriptionOriginFromNSString(uint64_t a1)
{
  uint64_t v1 = [&unk_1EF8D9790 objectForKeyedSubscript:a1];
  uint64_t v2 = [v1 integerValue];

  return v2;
}

void sub_1A479D2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 240), 8);
  _Block_object_dispose((const void *)(v39 - 192), 8);
  _Block_object_dispose((const void *)(v39 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1A47A54A4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1A47A58B8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1A47A5D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A47A65C4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1A47AA0FC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

void sub_1A47AAED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 248), 8);
  _Block_object_dispose((const void *)(v30 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1A47ABBAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void *FCUserAccountHomeDirectoryPath()
{
  return FCSystemDirectoryDirectoryPath();
}

void *FCContainerizedUserAccountHomeDirectoryPath()
{
  return FCSystemDirectoryDirectoryPath();
}

void *FCContainerizedUserAccountCachesDirectoryPath()
{
  return FCSystemDirectoryDirectoryPath();
}

void *FCAppleInternalLibraryDirectoryPath()
{
  return FCSystemDirectoryDirectoryPath();
}

__CFString *NSStringFromFCOnboardingVersionNumber(unint64_t a1)
{
  if (a1 >= 7)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"Onboarded Post-YukonF with versionNumber %ld", a1);
    uint64_t v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v1 = off_1E5B51348[a1];
  }
  return v1;
}

__CFString *NSStringFromFCSportsOnboardingState(uint64_t a1)
{
  if (a1) {
    return @"Sports Onboarded";
  }
  else {
    return @"Sports Not Onboarded";
  }
}

void *FCOnboardingVersionNumbers()
{
  return &unk_1EF8D8AD8;
}

void sub_1A47AE354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FCReadingListEntryIDFromArticleID(uint64_t a1)
{
  return [NSString stringWithFormat:@"rl-%@", a1];
}

void sub_1A47B687C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A47B94CC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t FCCKPRecordReferenceReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v23 = objc_alloc_init(FCCKPRecordIdentifier);
        objc_storeStrong((id *)(a1 + 8), v23);
        if (!PBReaderPlaceMark() || !FCCKPRecordIdentifierReadFrom((uint64_t)v23, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_35:
        *(_DWORD *)(a1 + 16) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1A47BAEC8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

Class __getSKMutablePaymentClass_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!qword_1EB5D1238)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    _OWORD v4[2] = 3221225472;
    v4[3] = __StoreKitLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E5B516F8;
    uint64_t v6 = 0;
    qword_1EB5D1238 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!qword_1EB5D1238)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("SKMutablePayment");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  qword_1EB5D1230 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __StoreKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB5D1238 = result;
  return result;
}

id FCApplyFeedTransformations(void *a1, void *a2)
{
  return FCApplyFeedTransformationsAndLog(a1, a2, 0);
}

id FCApplyFeedTransformationsAndLog(void *a1, void *a2, int a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = v5;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v8 = [v6 countByEnumeratingWithState:&v22 objects:v32 count:16];
  unint64_t v21 = v7;
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v23;
    do
    {
      uint64_t v11 = 0;
      do
      {
        unint64_t v12 = v7;
        if (*(void *)v23 != v10) {
          objc_enumerationMutation(v6);
        }
        char v13 = *(void **)(*((void *)&v22 + 1) + 8 * v11);
        uint64_t v14 = [v7 count];
        id v7 = [v13 transformFeedItems:v7];

        if (a3)
        {
          int v15 = (void *)FCFeedItemTransformationLog;
          if (os_log_type_enabled((os_log_t)FCFeedItemTransformationLog, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v16 = v15;
            char v17 = (objc_class *)objc_opt_class();
            unsigned int v18 = NSStringFromClass(v17);
            uint64_t v19 = [v7 count];
            *(_DWORD *)buf = 138412802;
            double v27 = v18;
            __int16 v28 = 2048;
            uint64_t v29 = v14;
            __int16 v30 = 2048;
            uint64_t v31 = v19;
            _os_log_debug_impl(&dword_1A460D000, v16, OS_LOG_TYPE_DEBUG, "%@: %lu -> %lu", buf, 0x20u);
          }
        }
        ++v11;
      }
      while (v9 != v11);
      uint64_t v9 = [v6 countByEnumeratingWithState:&v22 objects:v32 count:16];
    }
    while (v9);
  }

  return v7;
}

void sub_1A47BDF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose((const void *)(v53 - 256), 8);
  _Unwind_Resume(a1);
}

id FCPersonalizationActionToIndex()
{
  if (qword_1EB5D0648 != -1) {
    dispatch_once(&qword_1EB5D0648, &__block_literal_global_51);
  }
  uint64_t v0 = (void *)_MergedGlobals_4;
  return v0;
}

void __FCPersonalizationActionToIndex_block_invoke()
{
  uint64_t v0 = objc_opt_new();
  uint64_t v1 = FCPersonalizationActions();
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __FCPersonalizationActionToIndex_block_invoke_3;
  void v5[3] = &unk_1E5B4DAC8;
  id v6 = v0;
  id v2 = v0;
  [v1 enumerateObjectsUsingBlock:v5];

  uint64_t v3 = [v2 copy];
  uint64_t v4 = (void *)_MergedGlobals_4;
  _MergedGlobals_4 = v3;
}

void __FCPersonalizationActionToIndex_block_invoke_3(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = NSNumber;
  id v6 = a2;
  id v7 = [v5 numberWithUnsignedInteger:a3];
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:v6];
}

id FCPersonalizationActionIndexToAction()
{
  if (qword_1EB5D0658 != -1) {
    dispatch_once(&qword_1EB5D0658, &__block_literal_global_50_2);
  }
  uint64_t v0 = (void *)qword_1EB5D0650;
  return v0;
}

void __FCPersonalizationActionIndexToAction_block_invoke()
{
  FCPersonalizationActionToIndex();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v0 = objc_msgSend(v2, "fc_dictionaryBySwappingValuesAndKeys");
  uint64_t v1 = (void *)qword_1EB5D0650;
  qword_1EB5D0650 = v0;
}

uint64_t FCPersonalizationActionIndex(uint64_t a1)
{
  id v2 = FCPersonalizationActionToIndex();
  uint64_t v3 = [NSNumber numberWithUnsignedInteger:a1];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];
  uint64_t v5 = [v4 unsignedIntegerValue];

  return v5;
}

uint64_t FCPersonalizationActionForIndex(uint64_t a1)
{
  id v2 = FCPersonalizationActionIndexToAction();
  uint64_t v3 = [NSNumber numberWithUnsignedInteger:a1];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4) {
    uint64_t v5 = [v4 unsignedIntegerValue];
  }
  else {
    uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  }

  return v5;
}

id FCRankTagsDescending(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_msgSend(a1, "fc_dictionaryWithKeySelector:", sel_identifier);
  uint64_t v5 = [v4 allKeys];
  id v6 = [v3 rankTagIDsDescending:v5];

  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __FCRankTagsDescending_block_invoke;
  v10[3] = &unk_1E5B4DDA8;
  id v11 = v4;
  id v7 = v4;
  uint64_t v8 = objc_msgSend(v6, "fc_arrayByTransformingWithBlock:", v10);

  return v8;
}

uint64_t __FCRankTagsDescending_block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) objectForKeyedSubscript:a2];
}

uint64_t FCCKPConfigurationFieldValueReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 64) |= 4u;
        while (1)
        {
          uint64_t v21 = *v3;
          uint64_t v22 = *(void *)(a2 + v21);
          unint64_t v23 = v22 + 1;
          if (v22 == -1 || v23 > *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0) {
            goto LABEL_55;
          }
          v18 += 7;
          BOOL v15 = v19++ >= 9;
          if (v15)
          {
            LODWORD(v20) = 0;
            goto LABEL_57;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_55:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v20) = 0;
        }
LABEL_57:
        *(_DWORD *)(a1 + 56) = v20;
        goto LABEL_68;
      case 2u:
        uint64_t v26 = PBReaderReadData();
        uint64_t v27 = 24;
        goto LABEL_47;
      case 3u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        *(unsigned char *)(a1 + 64) |= 8u;
        while (2)
        {
          uint64_t v31 = *v3;
          uint64_t v32 = *(void *)(a2 + v31);
          unint64_t v33 = v32 + 1;
          if (v32 == -1 || v33 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
            *(void *)(a2 + v31) = v33;
            v30 |= (unint64_t)(v34 & 0x7F) << v28;
            if (v34 < 0)
            {
              v28 += 7;
              BOOL v15 = v29++ >= 9;
              if (v15)
              {
                uint64_t v30 = 0;
                goto LABEL_61;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v30 = 0;
        }
LABEL_61:
        *(unsigned char *)(a1 + 60) = v30 != 0;
        goto LABEL_68;
      case 4u:
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v37 = 0;
        *(unsigned char *)(a1 + 64) |= 2u;
        while (2)
        {
          uint64_t v38 = *v3;
          uint64_t v39 = *(void *)(a2 + v38);
          unint64_t v40 = v39 + 1;
          if (v39 == -1 || v40 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v41 = *(unsigned char *)(*(void *)(a2 + *v7) + v39);
            *(void *)(a2 + v38) = v40;
            v37 |= (unint64_t)(v41 & 0x7F) << v35;
            if (v41 < 0)
            {
              v35 += 7;
              BOOL v15 = v36++ >= 9;
              if (v15)
              {
                uint64_t v37 = 0;
                goto LABEL_65;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v37 = 0;
        }
LABEL_65:
        *(void *)(a1 + 16) = v37;
        goto LABEL_68;
      case 5u:
        *(unsigned char *)(a1 + 64) |= 1u;
        uint64_t v42 = *v3;
        unint64_t v43 = *(void *)(a2 + v42);
        if (v43 <= 0xFFFFFFFFFFFFFFF7 && v43 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v44 = *(void *)(*(void *)(a2 + *v7) + v43);
          *(void *)(a2 + v42) = v43 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v44 = 0;
        }
        *(void *)(a1 + 8) = v44;
        goto LABEL_68;
      case 6u:
        uint64_t v26 = PBReaderReadString();
        uint64_t v27 = 48;
LABEL_47:
        uint64_t v45 = *(void **)(a1 + v27);
        *(void *)(a1 + v27) = v26;

        goto LABEL_68;
      case 7u:
        uint64_t v46 = objc_alloc_init(FCCKPConfigurationField);
        -[FCCKPConfigurationFieldValue addFieldValues:](a1, v46);
        if (!PBReaderPlaceMark() || !FCCKPConfigurationFieldReadFrom((uint64_t)v46, a2)) {
          goto LABEL_70;
        }
        goto LABEL_53;
      case 8u:
        uint64_t v46 = objc_alloc_init(FCCKPConfigurationFieldValue);
        -[FCCKPConfigurationFieldValue addListValues:](a1, v46);
        if PBReaderPlaceMark() && (FCCKPConfigurationFieldValueReadFrom(v46, a2))
        {
LABEL_53:
          PBReaderRecallMark();

LABEL_68:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_70:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_68;
    }
  }
}

void sub_1A47D1740(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t FCCKPublisherSpecifiedArticleListIDForTagID(uint64_t a1)
{
  return [NSString stringWithFormat:@"L-%@-publisherSpecifiedArticleIDs", a1];
}

uint64_t FCCKExperimentizedRecordKey(uint64_t a1, uint64_t a2)
{
  return [NSString stringWithFormat:@"%@_%@", a1, a2];
}

uint64_t FCCKLocalizedExperimentizedRecordKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [NSString stringWithFormat:@"%@_%@_%@", a1, a2, a3];
}

uint64_t FCCKLocalizedLanguageSpecificRecordKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [NSString stringWithFormat:@"%@_%@_%@", a1, a2, a3];
}

id __FCCKReadingHistoryItemKeys_block_invoke()
{
  if (qword_1EB5D12C0 != -1) {
    dispatch_once(&qword_1EB5D12C0, &__block_literal_global_1841);
  }
  uint64_t v0 = (void *)_MergedGlobals_163;
  return v0;
}

uint64_t __FCCKReadingHistoryItemKeys_block_invoke_2()
{
  objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"articleID", @"sourceChannelTagID", @"deviceID", @"lastVisited", @"articleRead", @"articleSeen", @"completedListening", @"completedReading", @"articleConsumed", @"liked", @"disliked", @"offensive", @"listenedCount", @"listeningProgress", @"listeningProgressLastSaved", @"lastListened", @"readingPosition",
    @"readingPositionLastSaved",
    @"readCount",
    @"removedFromAudio",
    @"pruningDisabled",
  uint64_t v0 = 0);
  uint64_t v1 = _MergedGlobals_163;
  _MergedGlobals_163 = v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __FCCKIssueReadingHistoryItemKeys_block_invoke()
{
  if (qword_1EB5D12D0 != -1) {
    dispatch_once(&qword_1EB5D12D0, &__block_literal_global_1885);
  }
  uint64_t v0 = (void *)qword_1EB5D12C8;
  return v0;
}

uint64_t __FCCKIssueReadingHistoryItemKeys_block_invoke_2()
{
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"issueID", @"lastVisited", @"lastBadged", @"lastEngaged", @"lastSeen", @"lastRemovedFromMyMagazines", @"lastVisitedArticleID", @"lastVisitedPageID", 0);
  uint64_t v1 = qword_1EB5D12C8;
  qword_1EB5D12C8 = v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __FCCKSubscriptionKeys_block_invoke()
{
  if (qword_1EB5D12E0 != -1) {
    dispatch_once(&qword_1EB5D12E0, &__block_literal_global_1955);
  }
  uint64_t v0 = (void *)qword_1EB5D12D8;
  return v0;
}

uint64_t __FCCKSubscriptionKeys_block_invoke_2()
{
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"subscriptionType", @"subscriptionOrder", @"subscriptionOrigin", @"dateAdded", @"tagID", @"notificationsEnabled", @"groupID", 0);
  uint64_t v1 = qword_1EB5D12D8;
  qword_1EB5D12D8 = v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __FCCKReadingListEntryKeys_block_invoke()
{
  if (qword_1EB5D12F0 != -1) {
    dispatch_once(&qword_1EB5D12F0, &__block_literal_global_1980);
  }
  uint64_t v0 = (void *)qword_1EB5D12E8;
  return v0;
}

uint64_t __FCCKReadingListEntryKeys_block_invoke_2()
{
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"articleID", @"dateAdded", @"origin", 0);
  uint64_t v1 = qword_1EB5D12E8;
  qword_1EB5D12E8 = v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __FCCKShortcutKeys_block_invoke()
{
  if (qword_1EB5D1300 != -1) {
    dispatch_once(&qword_1EB5D1300, &__block_literal_global_2005);
  }
  uint64_t v0 = (void *)qword_1EB5D12F8;
  return v0;
}

uint64_t __FCCKShortcutKeys_block_invoke_2()
{
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"dateAdded", @"order", @"type", 0);
  uint64_t v1 = qword_1EB5D12F8;
  qword_1EB5D12F8 = v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __FCCKShortcutCategoryKeys_block_invoke()
{
  if (qword_1EB5D1310 != -1) {
    dispatch_once(&qword_1EB5D1310, &__block_literal_global_2030);
  }
  uint64_t v0 = (void *)qword_1EB5D1308;
  return v0;
}

uint64_t __FCCKShortcutCategoryKeys_block_invoke_2()
{
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"dateAdded", @"type", @"categoryID", @"status", 0);
  uint64_t v1 = qword_1EB5D1308;
  qword_1EB5D1308 = v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __FCCKAudioPlaylistItemKeys_block_invoke()
{
  if (qword_1EB5D1320 != -1) {
    dispatch_once(&qword_1EB5D1320, &__block_literal_global_2052);
  }
  uint64_t v0 = (void *)qword_1EB5D1318;
  return v0;
}

uint64_t __FCCKAudioPlaylistItemKeys_block_invoke_2()
{
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"articleID", @"dateAdded", @"order", 0);
  uint64_t v1 = qword_1EB5D1318;
  qword_1EB5D1318 = v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __FCCKUserEventHistorySessionKeys_block_invoke()
{
  if (qword_1EB5D1330 != -1) {
    dispatch_once(&qword_1EB5D1330, &__block_literal_global_2071);
  }
  uint64_t v0 = (void *)qword_1EB5D1328;
  return v0;
}

uint64_t __FCCKUserEventHistorySessionKeys_block_invoke_2()
{
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"sessionData", 0);
  uint64_t v1 = qword_1EB5D1328;
  qword_1EB5D1328 = v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __FCCKUserInfoKeys_block_invoke()
{
  if (qword_1EB5D1340 != -1) {
    dispatch_once(&qword_1EB5D1340, &__block_literal_global_2219);
  }
  uint64_t v0 = (void *)qword_1EB5D1338;
  return v0;
}

uint64_t __FCCKUserInfoKeys_block_invoke_2()
{
  objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"canonicalLanguage", @"editorialArticleVersion", @"feldsparID", @"finishFirstLaunchVersion", @"lastOpenedDate", @"lastViewedSavedDate", @"monthlyMeteredCount", @"meteredCountLastResetDate", @"monthlyPaidBundleMeteredCount", @"paidBundleMeteredCountLastResetDate", @"upsellAppLaunchCount", @"lastAppLaunchUpsellInstanceID", @"upsellAppLaunchLastSeenDate", @"upsellAppLaunchLastShownCampaignID", @"upsellAppLaunchLastPresenterBundleID", @"newsletterSignupLastSeenDate", @"personalizedNewsletterSignupLastSeenDate",
    @"issuesNewsletterOptinLastSeenDate",
    @"notificationsUserID",
    @"marketingNotificationsEnabled",
    @"newIssueNotificationsEnabled",
    @"endOfAudioNotificationsEnabled",
    @"sportsTopicNotificationsEnabledState2",
    @"totalMeteredCount",
    @"userStartDate",
    @"adsUserID",
    @"adsUserIDCreatedDate",
    @"lastViewedSharedWithYouDate",
    @"postPurchaseOnboardingLastSeenDate",
    @"appReviewRequestLastSeenDate",
    @"sportsOnboardingState",
    @"sportsOnboardingCompletedDate",
    @"sportsSyncState",
    @"sportsSyncStateLastSavedDate",
    @"sportsFavoritesLastModifiedDate",
    @"shortcutsOnboardingState",
    @"shortcutsOnboardingCompletedDate",
    @"sportsUserID",
    @"puzzleNotificationsEnabled2",
    @"puzzleNotificationsLastChangedDate",
    @"puzzleStatsStartDate",
  uint64_t v0 = 0);
  uint64_t v1 = qword_1EB5D1338;
  qword_1EB5D1338 = v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __FCCKTagSettingsKeys_block_invoke()
{
  if (qword_1EB5D1350 != -1) {
    dispatch_once(&qword_1EB5D1350, &__block_literal_global_2250);
  }
  uint64_t v0 = (void *)qword_1EB5D1348;
  return v0;
}

uint64_t __FCCKTagSettingsKeys_block_invoke_2()
{
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"fontMultiplier", @"fontMultiplierMacOS", @"contentScale", @"contentScaleMacOS", @"tagID", @"accessToken", @"webAccessOptIn", 0);
  uint64_t v1 = qword_1EB5D1348;
  qword_1EB5D1348 = v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __FCCKPuzzleHistoryItemKeys_block_invoke()
{
  if (qword_1EB5D1360 != -1) {
    dispatch_once(&qword_1EB5D1360, &__block_literal_global_2356);
  }
  uint64_t v0 = (void *)qword_1EB5D1358;
  return v0;
}

uint64_t __FCCKPuzzleHistoryItemKeys_block_invoke_2()
{
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"puzzleID", @"puzzleTypeID", @"progressData", @"progressLevel", @"score", @"rankID", @"usedReveal", @"playDuration", @"lastPlayedDate", @"completedDate", @"firstCompletedDate", @"firstPlayDuration", @"bestScore", @"difficulty", @"publishDate", @"behaviorFlags", 0);
  uint64_t v1 = qword_1EB5D1358;
  qword_1EB5D1358 = v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __FCCKPuzzleTypeSettingsKeys_block_invoke()
{
  if (qword_1EB5D1370 != -1) {
    dispatch_once(&qword_1EB5D1370, &__block_literal_global_2372);
  }
  uint64_t v0 = (void *)qword_1EB5D1368;
  return v0;
}

uint64_t __FCCKPuzzleTypeSettingsKeys_block_invoke_2()
{
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"puzzleTypeID", @"settingsData", @"lastSeenPuzzleIDs", 0);
  uint64_t v1 = qword_1EB5D1368;
  qword_1EB5D1368 = v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

void FCSetupLogging()
{
  if (FCSetupLogging_onceToken != -1) {
    dispatch_once(&FCSetupLogging_onceToken, &__block_literal_global_57);
  }
}

id FCURLForUserAccountHomePath()
{
  uint64_t v0 = FCSystemDirectoryDirectoryPath();
  return FCURLForSystemDirectoriesPath(v0);
}

id FCURLForAppleInternalLibraryDirectory()
{
  uint64_t v0 = FCSystemDirectoryDirectoryPath();
  if (v0)
  {
    uint64_t v1 = [NSString stringWithCString:v0 encoding:4];
    free(v0);
    if (v1)
    {
      uint64_t v0 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v1 isDirectory:1];
    }
    else
    {
      uint64_t v0 = 0;
    }
  }
  return v0;
}

id FCURLForAppleInternalLibraryBundlesDirectory()
{
  uint64_t v0 = FCURLForAppleInternalLibraryDirectory();
  uint64_t v1 = [v0 URLByAppendingPathComponent:@"Bundles" isDirectory:1];

  return v1;
}

id FCURLForTodayPersonalizationDirectory()
{
  uint64_t v0 = +[FCContextConfiguration defaultConfiguration];
  uint64_t v1 = [v0 privateDataContainerCombinationIdentifier];
  id v2 = FCURLForFeldsparUserAccountHomeDirectoryForEnvironment(v1);
  id v3 = [v2 URLByAppendingPathComponent:@"Personalization_Data" isDirectory:1];

  uint64_t v4 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v6 = 0;
  [v4 createDirectoryAtURL:v3 withIntermediateDirectories:1 attributes:0 error:&v6];

  return v3;
}

id FCURLForLegacyWidgetReferralItems()
{
  uint64_t v0 = +[FCContextConfiguration defaultConfiguration];
  uint64_t v1 = [v0 privateDataContainerCombinationIdentifier];
  id v2 = FCURLForFeldsparUserAccountHomeDirectoryForEnvironment(v1);

  id v3 = [v2 URLByAppendingPathComponent:@"todayWidgetArticleList" isDirectory:1];

  uint64_t v4 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v6 = 0;
  [v4 createDirectoryAtURL:v3 withIntermediateDirectories:1 attributes:0 error:&v6];

  return v3;
}

id FCURLForWidgetReferralItems(void *a1)
{
  id v1 = a1;
  id v2 = +[FCContextConfiguration defaultConfiguration];
  id v3 = [v2 privateDataContainerCombinationIdentifier];
  uint64_t v4 = FCURLForFeldsparUserAccountHomeDirectoryForEnvironment(v3);

  uint64_t v5 = [v4 URLByAppendingPathComponent:@"referralItems" isDirectory:1];

  uint64_t v6 = [v5 URLByAppendingPathComponent:v1 isDirectory:1];

  id v7 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v9 = 0;
  [v7 createDirectoryAtURL:v6 withIntermediateDirectories:1 attributes:0 error:&v9];

  return v6;
}

id FCURLForNewsAnalyticsPayloads()
{
  uint64_t v0 = FCURLForFeldsparUserAccountHomeDirectory();
  id v1 = [v0 URLByAppendingPathComponent:@"Analytics_Payloads" isDirectory:1];

  id v2 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v4 = 0;
  [v2 createDirectoryAtURL:v1 withIntermediateDirectories:1 attributes:0 error:&v4];

  return v1;
}

id FCURLForInternalExtrasBundle()
{
  uint64_t v0 = FCURLForAppleInternalLibraryBundlesDirectory();
  id v1 = [v0 URLByAppendingPathComponent:@"NewsCoreInternalExtras"];
  id v2 = [v1 URLByAppendingPathExtension:@"bundle"];

  return v2;
}

id FCURLsForAppExternalFiles(char a1)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __FCURLsForAppExternalFiles_block_invoke;
  v3[3] = &__block_descriptor_33_e22_v16__0__NSMutableSet_8l;
  char v4 = a1;
  id v1 = objc_msgSend(MEMORY[0x1E4F1CAD0], "fc_set:", v3);
  return v1;
}

void __FCURLsForAppExternalFiles_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  char v4 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v5 = FCURLForFeldsparUserAccountHomeDirectory();
  uint64_t v6 = [v4 contentsOfDirectoryAtURL:v5 includingPropertiesForKeys:0 options:0 error:0];

  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v7 = v6;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v16 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        unint64_t v13 = objc_msgSend(v12, "lastPathComponent", (void)v15);
        if (![v13 isEqualToString:@"actionQueue"] || *(unsigned char *)(a1 + 32)) {
          [v3 addObject:v12];
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v9);
  }

  char v14 = FCURLForNotificationHistory();
  [v3 addObject:v14];
}

id FCPurchaseReceiptDirectoryURL(void *a1)
{
  id v1 = a1;
  id v2 = FCURLForContainerizedUserAccountDocumentDirectory(1);
  id v3 = [v2 URLByAppendingPathComponent:@"receipts" isDirectory:1];
  char v4 = v3;
  if (v1)
  {
    uint64_t v5 = [v3 URLByAppendingPathComponent:v1 isDirectory:1];

    char v4 = (void *)v5;
  }

  return v4;
}

id _FCFeedFilterOptionsAsStrings(uint64_t a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  id v3 = v2;
  if ((a1 & 2) != 0)
  {
    [v2 addObject:@"DuplicateArticles"];
    if ((a1 & 4) == 0)
    {
LABEL_3:
      if ((a1 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_39;
    }
  }
  else if ((a1 & 4) == 0)
  {
    goto LABEL_3;
  }
  [v3 addObject:@"DuplicateClusters"];
  if ((a1 & 8) == 0)
  {
LABEL_4:
    if ((a1 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_40;
  }
LABEL_39:
  [v3 addObject:@"BlockedStorefronts"];
  if ((a1 & 0x10) == 0)
  {
LABEL_5:
    if ((a1 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_41;
  }
LABEL_40:
  [v3 addObject:@"ExplicitContent"];
  if ((a1 & 0x20) == 0)
  {
LABEL_6:
    if ((a1 & 0x4000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_42;
  }
LABEL_41:
  [v3 addObject:@"MutedChannels"];
  if ((a1 & 0x4000000) == 0)
  {
LABEL_7:
    if ((a1 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }
LABEL_42:
  [v3 addObject:@"MutedChannelsExceptDailyBriefing"];
  if ((a1 & 0x40) == 0)
  {
LABEL_8:
    if ((a1 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_44;
  }
LABEL_43:
  [v3 addObject:@"IgnoringLocalArticleDuplicates"];
  if ((a1 & 0x80) == 0)
  {
LABEL_9:
    if ((a1 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_45;
  }
LABEL_44:
  [v3 addObject:@"IgnoringLocalClusterDuplicates"];
  if ((a1 & 0x100) == 0)
  {
LABEL_10:
    if ((a1 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_46;
  }
LABEL_45:
  [v3 addObject:@"MinimumNewsVersion"];
  if ((a1 & 0x200) == 0)
  {
LABEL_11:
    if ((a1 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
LABEL_46:
  [v3 addObject:@"NonFlint"];
  if ((a1 & 0x400) == 0)
  {
LABEL_12:
    if ((a1 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }
LABEL_47:
  [v3 addObject:@"FreeArticles"];
  if ((a1 & 0x800) == 0)
  {
LABEL_13:
    if ((a1 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_49;
  }
LABEL_48:
  [v3 addObject:@"Paywall"];
  if ((a1 & 0x1000) == 0)
  {
LABEL_14:
    if ((a1 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_50;
  }
LABEL_49:
  [v3 addObject:@"BriefingArticles"];
  if ((a1 & 0x2000) == 0)
  {
LABEL_15:
    if ((a1 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_51;
  }
LABEL_50:
  [v3 addObject:@"InaccessiblePaid"];
  if ((a1 & 0x4000) == 0)
  {
LABEL_16:
    if ((a1 & 0x20000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_52;
  }
LABEL_51:
  [v3 addObject:@"NonSubscribedChannels"];
  if ((a1 & 0x20000000) == 0)
  {
LABEL_17:
    if ((a1 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_53;
  }
LABEL_52:
  [v3 addObject:@"NonSubscribedChannelsExceptLocal"];
  if ((a1 & 0x8000) == 0)
  {
LABEL_18:
    if ((a1 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_54;
  }
LABEL_53:
  [v3 addObject:@"NonVideoArticles"];
  if ((a1 & 0x10000) == 0)
  {
LABEL_19:
    if ((a1 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_55;
  }
LABEL_54:
  [v3 addObject:@"PaidBundleArticles"];
  if ((a1 & 0x20000) == 0)
  {
LABEL_20:
    if ((a1 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }
LABEL_55:
  [v3 addObject:@"MutedTopics"];
  if ((a1 & 0x40000) == 0)
  {
LABEL_21:
    if ((a1 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }
LABEL_56:
  [v3 addObject:@"MutedTopicsForSingleTopic"];
  if ((a1 & 0x80000) == 0)
  {
LABEL_22:
    if ((a1 & 0x100000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_58;
  }
LABEL_57:
  [v3 addObject:@"EvergreenArticles"];
  if ((a1 & 0x100000) == 0)
  {
LABEL_23:
    if ((a1 & 0x200000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_59;
  }
LABEL_58:
  [v3 addObject:@"SeenArticles"];
  if ((a1 & 0x200000) == 0)
  {
LABEL_24:
    if ((a1 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_60;
  }
LABEL_59:
  [v3 addObject:@"ReadArticles"];
  if ((a1 & 0x400000) == 0)
  {
LABEL_25:
    if ((a1 & 0x800000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_61;
  }
LABEL_60:
  [v3 addObject:@"CompletedReadingArticles"];
  if ((a1 & 0x800000) == 0)
  {
LABEL_26:
    if ((a1 & 0x1000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_62;
  }
LABEL_61:
  [v3 addObject:@"ListenedArticles"];
  if ((a1 & 0x1000000) == 0)
  {
LABEL_27:
    if ((a1 & 0x2000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_63;
  }
LABEL_62:
  [v3 addObject:@"CompletedListeningArticles"];
  if ((a1 & 0x2000000) == 0)
  {
LABEL_28:
    if ((a1 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_64;
  }
LABEL_63:
  [v3 addObject:@"PlaylistArticles"];
  if ((a1 & 0x8000000) == 0)
  {
LABEL_29:
    if ((a1 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_65;
  }
LABEL_64:
  [v3 addObject:@"RemovedFromAudioArticles"];
  if ((a1 & 0x10000000) == 0)
  {
LABEL_30:
    if ((a1 & 0x40000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_66;
  }
LABEL_65:
  [v3 addObject:@"NonDownloadedArticles"];
  if ((a1 & 0x40000000) == 0)
  {
LABEL_31:
    if ((a1 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_67;
  }
LABEL_66:
  [v3 addObject:@"DislikedArticles"];
  if ((a1 & 0x80000000) == 0)
  {
LABEL_32:
    if ((a1 & 0x100000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_68;
  }
LABEL_67:
  [v3 addObject:@"SponsoredArticles"];
  if ((a1 & 0x100000000) == 0)
  {
LABEL_33:
    if ((a1 & 0x200000000) == 0) {
      goto LABEL_34;
    }
LABEL_69:
    [v3 addObject:@"ReduceVisibilityForNonFollowers"];
    if ((a1 & 0x400000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
LABEL_68:
  [v3 addObject:@"NonBundleArticles"];
  if ((a1 & 0x200000000) != 0) {
    goto LABEL_69;
  }
LABEL_34:
  if ((a1 & 0x400000000) != 0) {
LABEL_35:
  }
    [v3 addObject:@"AlaCarteInaccessiblePaidForBundleSubscribers"];
LABEL_36:
  id v4 = v3;

  return v4;
}

id FCFeedFilterOptionsToNSString(uint64_t a1)
{
  id v1 = _FCFeedFilterOptionsAsStrings(a1);
  id v2 = NSString;
  id v3 = [v1 componentsJoinedByString:@", "];
  id v4 = [v2 stringWithFormat:@"[%@]", v3];

  return v4;
}

id FCFeedFilterOptionToNSString(uint64_t a1)
{
  id v1 = _FCFeedFilterOptionsAsStrings(a1);
  id v2 = [v1 firstObject];

  return v2;
}

id FCInterestTokenByCombiningTokens(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (v3 && v4)
  {
    id v6 = +[FCPair pairWithFirst:v3 second:v4];
  }
  else
  {
    if (v3) {
      id v7 = v3;
    }
    else {
      id v7 = v4;
    }
    id v6 = v7;
  }
  uint64_t v8 = v6;

  return v8;
}

uint64_t FCNotificationSourceFromString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"EIM"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"EFY"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"PIM"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"PFY"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"AIFY"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"SFY"])
  {
    uint64_t v2 = 6;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

__CFString *FCStringFromNotificationSource(unsigned int a1)
{
  if (a1 > 6) {
    return @"EIM";
  }
  else {
    return off_1E5B54200[a1];
  }
}

void sub_1A47E3E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A47E4034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t PBLifetimeFromFCLifetime(uint64_t a1)
{
  if (a1 == 2) {
    return 2;
  }
  else {
    return a1 == 1;
  }
}

uint64_t FCLifetimeFromPBLifetime(int a1)
{
  if (a1 == 2) {
    return 2;
  }
  else {
    return a1 == 1;
  }
}

uint64_t FCArticleContentTypeFromString(void *a1)
{
  id v1 = a1;
  if ([v1 caseInsensitiveCompare:@"web"])
  {
    if ([v1 caseInsensitiveCompare:@"flint"])
    {
      if ([v1 caseInsensitiveCompare:@"video"]) {
        uint64_t v2 = 0;
      }
      else {
        uint64_t v2 = 3;
      }
    }
    else
    {
      uint64_t v2 = 2;
    }
  }
  else
  {
    uint64_t v2 = 1;
  }

  return v2;
}

uint64_t FCRankOfQualityOfService(uint64_t a1)
{
  uint64_t v1 = -1;
  uint64_t v2 = 2;
  uint64_t v3 = 3;
  uint64_t v4 = 4;
  if (a1 != 33) {
    uint64_t v4 = -1;
  }
  if (a1 != 25) {
    uint64_t v3 = v4;
  }
  if (a1 != 17) {
    uint64_t v2 = v3;
  }
  if (a1 == 9) {
    uint64_t v1 = 1;
  }
  if (a1 == -1) {
    uint64_t v1 = 0;
  }
  if (a1 <= 16) {
    return v1;
  }
  else {
    return v2;
  }
}

void sub_1A47E5A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a67);
  _Block_object_dispose((const void *)(v67 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_1A47E6898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t FCCKPOplockFailureReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        long long v17 = objc_alloc_init(FCCKPRecord);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || !FCCKPRecordReadFrom((id *)&v17->super.super.isa, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL FCShortcutTypeIsDeprecated(uint64_t a1)
{
  return a1 != 0;
}

__CFString *NSStringFromShortcutType(__CFString *a1)
{
  if (a1)
  {
    if (a1 != (__CFString *)1) {
      goto LABEL_6;
    }
    uint64_t v2 = FCCKShortcutTypeMySports;
  }
  else
  {
    uint64_t v2 = FCCKShortcutTypeTag;
  }
  a1 = *v2;
LABEL_6:
  return a1;
}

uint64_t FCShortcutTypeFromString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"tag"]) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = [v1 isEqualToString:@"mySports"];
  }

  return v2;
}

void sub_1A4802944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4802AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4803894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4803EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A4805D90(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_1A4809298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  objc_destroyWeak(v37);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v38 - 224), 8);
  _Block_object_dispose((const void *)(v38 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1A480BB10(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

id FCChannelsWithHeldRecords(void *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    char v13 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "assetManager");
    *(_DWORD *)buf = 136315906;
    long long v17 = "NSDictionary<NSString *,id<FCChannelProviding>> *FCChannelsWithHeldRecords(FCAssetManager *__strong, FCHeldRec"
          "ords<NTPBTagRecord *> *__strong)";
    __int16 v18 = 2080;
    unsigned int v19 = "FCArticleHeadlineUtilities.m";
    __int16 v20 = 1024;
    int v21 = 68;
    __int16 v22 = 2114;
    unint64_t v23 = v13;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __FCChannelsWithHeldRecords_block_invoke;
  v14[3] = &unk_1E5B55508;
  id v5 = v3;
  id v15 = v5;
  id v6 = [v4 transformRecordsWithBlock:v14];
  id v7 = objc_msgSend(v6, "fc_dictionaryWithKeySelector:", sel_identifier);

  char v8 = (void *)FCOperationLog;
  if (os_log_type_enabled((os_log_t)FCOperationLog, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v9 = v8;
    uint64_t v10 = [v4 count];
    uint64_t v11 = [v7 count];
    *(_DWORD *)buf = 134218240;
    long long v17 = (const char *)v10;
    __int16 v18 = 2048;
    unsigned int v19 = (char *)v11;
    _os_log_impl(&dword_1A460D000, v9, OS_LOG_TYPE_DEFAULT, "ArticleHeadlineUtilities transformed heldTagRecords:%lu into tags:%lu", buf, 0x16u);
  }
  return v7;
}

FCTag *__FCChannelsWithHeldRecords_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = [[FCTag alloc] initWithTagRecord:v6 assetManager:*(void *)(a1 + 32) interestToken:v5];

  return v7;
}

id FCHeadlinesWithHeldRecords(void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  id v13 = a1;
  id v14 = a2;
  id v15 = a3;
  id v16 = a5;
  long long v17 = FCChannelsWithHeldRecords(v14, a4);
  __int16 v18 = FCIssuesWithHeldRecords(v14, v16, v17);

  if (a7) {
    unsigned int v19 = -[FCHeadlineExperimentalTitleProvider initWithShouldShowAlternateHeadlines:]([FCHeadlineExperimentalTitleProvider alloc], "initWithShouldShowAlternateHeadlines:", [v13 shouldShowAlternateHeadlines]);
  }
  else {
    unsigned int v19 = 0;
  }
  __int16 v20 = (void *)MEMORY[0x1E4F1C9E8];
  int v21 = [v15 allRecordIDs];
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = __FCHeadlinesWithHeldRecords_block_invoke;
  v30[3] = &unk_1E5B55530;
  id v31 = v13;
  id v32 = v14;
  id v33 = v15;
  id v34 = v17;
  unsigned int v36 = v19;
  uint64_t v37 = a6;
  id v35 = v18;
  __int16 v22 = v19;
  id v23 = v18;
  id v24 = v17;
  id v25 = v15;
  id v26 = v14;
  id v27 = v13;
  char v28 = objc_msgSend(v20, "fc_dictionaryWithKeys:allowingNil:valueBlock:", v21, 1, v30);

  return v28;
}

FCArticleHeadline *__FCHeadlinesWithHeldRecords_block_invoke(uint64_t a1, void *a2)
{
  return FCHeadlineWithHeldRecords(*(void **)(a1 + 32), *(void **)(a1 + 40), a2, *(void **)(a1 + 48), *(void **)(a1 + 56), *(void *)(a1 + 80) != 0, *(void **)(a1 + 64), *(void **)(a1 + 72));
}

id FCHeadlinesByArticleListIDFromHeldRecordsAndArticleLists(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7)
{
  id v13 = a1;
  id v14 = a2;
  id v15 = a3;
  id v16 = a6;
  id v17 = a5;
  __int16 v18 = FCChannelsWithHeldRecords(v14, a4);
  unsigned int v19 = FCIssuesWithHeldRecords(v14, v17, v18);

  __int16 v20 = (void *)MEMORY[0x1E4F1C9E8];
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = __FCHeadlinesByArticleListIDFromHeldRecordsAndArticleLists_block_invoke;
  v29[3] = &unk_1E5B55580;
  id v30 = v13;
  id v31 = v16;
  id v32 = v14;
  id v33 = v15;
  id v35 = v19;
  uint64_t v36 = a7;
  id v34 = v18;
  id v21 = v19;
  id v22 = v18;
  id v23 = v15;
  id v24 = v14;
  id v25 = v16;
  id v26 = v13;
  id v27 = objc_msgSend(v20, "fc_dictionary:", v29);

  return v27;
}

void __FCHeadlinesByArticleListIDFromHeldRecordsAndArticleLists_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = -[FCHeadlineExperimentalTitleProvider initWithShouldShowAlternateHeadlines:]([FCHeadlineExperimentalTitleProvider alloc], "initWithShouldShowAlternateHeadlines:", [*(id *)(a1 + 32) shouldShowAlternateHeadlines]);
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  obuint64_t j = *(id *)(a1 + 40);
  uint64_t v5 = [obj countByEnumeratingWithState:&v32 objects:v36 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v33;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v33 != v7) {
          objc_enumerationMutation(obj);
        }
        unsigned int v9 = *(void **)(*((void *)&v32 + 1) + 8 * i);
        uint64_t v10 = [v9 articleIDs];
        v24[0] = MEMORY[0x1E4F143A8];
        v24[1] = 3221225472;
        void v24[2] = __FCHeadlinesByArticleListIDFromHeldRecordsAndArticleLists_block_invoke_2;
        v24[3] = &unk_1E5B55558;
        id v25 = *(id *)(a1 + 32);
        id v26 = *(id *)(a1 + 48);
        id v27 = *(id *)(a1 + 56);
        id v11 = *(id *)(a1 + 64);
        id v13 = *(void **)(a1 + 72);
        uint64_t v12 = *(void *)(a1 + 80);
        id v28 = v11;
        uint64_t v31 = v12;
        id v29 = v13;
        id v30 = v4;
        id v14 = objc_msgSend(v10, "fc_arrayByTransformingWithBlock:", v24);

        if ([v9 type] == 1)
        {
          id v15 = [v9 editorialMetadata];

          if (v15)
          {
            id v16 = [v9 editorialMetadata];
            [v16 articleMetadata];
            uint64_t v17 = v7;
            __int16 v18 = v4;
            v20 = id v19 = v3;

            uint64_t v21 = FCAssignHeadlineMetadata(v14, v20, *(void **)(a1 + 32));

            id v3 = v19;
            id v4 = v18;
            uint64_t v7 = v17;
            id v14 = (void *)v21;
          }
        }
        id v22 = [v9 identifier];
        [v3 setObject:v14 forKeyedSubscript:v22];
      }
      uint64_t v6 = [obj countByEnumeratingWithState:&v32 objects:v36 count:16];
    }
    while (v6);
  }
}

FCArticleHeadline *__FCHeadlinesByArticleListIDFromHeldRecordsAndArticleLists_block_invoke_2(uint64_t a1, void *a2)
{
  return FCHeadlineWithHeldRecords(*(void **)(a1 + 32), *(void **)(a1 + 40), a2, *(void **)(a1 + 48), *(void **)(a1 + 56), *(void *)(a1 + 80) != 0, *(void **)(a1 + 64), *(void **)(a1 + 72));
}

void sub_1A480EBF0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t FCHLSUIntegerFromString(void *a1)
{
  uint64_t v1 = (objc_class *)MEMORY[0x1E4F28FE8];
  id v2 = a1;
  id v3 = (void *)[[v1 alloc] initWithString:v2];

  uint64_t v6 = 0;
  [v3 scanUnsignedLongLong:&v6];
  uint64_t v4 = v6;

  return v4;
}

uint64_t FCTagSettingsEntryIDFromTagID(uint64_t a1)
{
  return [NSString stringWithFormat:@"ts-%@", a1];
}

uint64_t FCIsTagSettingsRecordName(void *a1, const char *a2)
{
  return [a1 hasPrefix:@"ts-"];
}

uint64_t FCPaymentTransactionStateFromSKState(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 4) {
    return 0;
  }
  return result;
}

id getSKPaymentQueueClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getSKPaymentQueueClass_softClass;
  uint64_t v7 = getSKPaymentQueueClass_softClass;
  if (!getSKPaymentQueueClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getSKPaymentQueueClass_block_invoke;
    v3[3] = &unk_1E5B516D8;
    void v3[4] = &v4;
    __getSKPaymentQueueClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1A48134B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4813A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSKPaymentQueueClass_block_invoke(uint64_t a1)
{
  StoreKitLibrary();
  Class result = objc_getClass("SKPaymentQueue");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSKPaymentQueueClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    return (Class)__StoreKitLibraryCore_block_invoke_0();
  }
  return result;
}

uint64_t __StoreKitLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  StoreKitLibraryCore_frameworkLibrary = result;
  return result;
}

uint64_t resolvedPuzzleTypeTraits(void *a1)
{
  id v1 = a1;
  id v2 = [v1 kind];
  uint64_t v3 = [v1 traits];

  if ([v2 isEqualToString:@"SUDOKU"]) {
    uint64_t v4 = v3 | 0x18000;
  }
  else {
    uint64_t v4 = v3;
  }

  return v4;
}

uint64_t resolvedPuzzleTypeBehaviorFlags(void *a1)
{
  id v1 = a1;
  id v2 = [v1 kind];
  uint64_t v3 = [v1 behaviorFlags];

  if ([v2 isEqualToString:@"SUDOKU"]) {
    uint64_t v4 = v3 | 0x18000;
  }
  else {
    uint64_t v4 = v3;
  }

  return v4;
}

id resolvedPuzzleTypeDifficulty(void *a1)
{
  id v1 = a1;
  id v2 = [v1 puzzleType];
  uint64_t v3 = [v1 difficulty];

  uint64_t v4 = resolvedPuzzleTypeDifficultyWithPuzzleType(v2, v3);

  return v4;
}

id resolvedPuzzleTypeDifficultyWithPuzzleType(void *a1, uint64_t a2)
{
  if ((resolvedPuzzleTypeTraits(a1) & 0x8000) != 0)
  {
    uint64_t v3 = [NSNumber numberWithLong:a2];
  }
  else
  {
    uint64_t v3 = 0;
  }
  return v3;
}

id resolvedPuzzleTypeDifficultyWithPuzzleTypeRecord(void *a1, uint64_t a2)
{
  if ((resolvedPuzzleTypeBehaviorFlags(a1) & 0x8000) != 0)
  {
    uint64_t v3 = [NSNumber numberWithLong:a2];
  }
  else
  {
    uint64_t v3 = 0;
  }
  return v3;
}

uint64_t FCDesiredArticleRecordFieldOptionsWithHeadlineFieldOptions(unint64_t a1)
{
  return a1 & 0xF | (16 * ((a1 >> 6) & 1)) | (a1 >> 7) & 0x240000 | (a1 >> 5) & 0x1FE0 | (a1 >> 7) & 0x371BE000 | (a1 >> 24) & 0x400;
}

void sub_1A4819558(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1A481EE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A481F34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CKNSPredicateOperatorTypeForFCCKPQueryFilterType(int a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v1 = a1 - 1;
  if (a1 - 1) < 0x10 && ((0x80F7u >> v1)) {
    return qword_1A4973BF8[v1];
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = (void *)[[NSString alloc] initWithFormat:@"Unexpected filter type"];
    int v4 = 136315906;
    uint64_t v5 = "NSPredicateOperatorType CKNSPredicateOperatorTypeForFCCKPQueryFilterType(FCCKPQueryFilter_Type)";
    __int16 v6 = 2080;
    uint64_t v7 = "FCCKPredicateConversion.m";
    __int16 v8 = 1024;
    int v9 = 68;
    __int16 v10 = 2114;
    id v11 = v3;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v4, 0x26u);
  }
  return 4;
}

uint64_t __CKFiltersBySortingFilters_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  if (v4) {
    __int16 v6 = (void *)*((void *)v4 + 1);
  }
  else {
    __int16 v6 = 0;
  }
  id v7 = v6;
  if (([v7 hasName] & 1) == 0)
  {

LABEL_16:
    uint64_t v17 = 0;
    goto LABEL_17;
  }
  if (v5) {
    __int16 v8 = (void *)*((void *)v5 + 1);
  }
  else {
    __int16 v8 = 0;
  }
  id v9 = v8;
  int v10 = [v9 hasName];

  if (!v10) {
    goto LABEL_16;
  }
  if (v4) {
    id v11 = (void *)*((void *)v4 + 1);
  }
  else {
    id v11 = 0;
  }
  id v12 = v11;
  id v13 = [v12 name];
  if (v5) {
    id v14 = (void *)*((void *)v5 + 1);
  }
  else {
    id v14 = 0;
  }
  id v15 = v14;
  id v16 = [v15 name];
  uint64_t v17 = [v13 compare:v16];

  if (!v17)
  {
    if (v4)
    {
      if (*((unsigned char *)v4 + 28)) {
        int v18 = *((_DWORD *)v4 + 6);
      }
      else {
        int v18 = 1;
      }
    }
    else
    {
      int v18 = 0;
    }
    unsigned int v20 = CKQueryFilterTypeSortedValue(v18);
    if (v5)
    {
      if (*((unsigned char *)v5 + 28)) {
        int v21 = *((_DWORD *)v5 + 6);
      }
      else {
        int v21 = 1;
      }
    }
    else
    {
      int v21 = 0;
    }
    unsigned int v22 = CKQueryFilterTypeSortedValue(v21);
    if (v20 >= v22) {
      uint64_t v23 = 0;
    }
    else {
      uint64_t v23 = -1;
    }
    if (v20 > v22) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v23;
    }
  }
LABEL_17:

  return v17;
}

uint64_t CKQueryFilterTypeSortedValue(int a1)
{
  if ((a1 - 2) > 0x13) {
    return 1;
  }
  else {
    return dword_1A4973CC8[a1 - 2];
  }
}

uint64_t FCNextHigherVolumeFeedBin(uint64_t result)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  switch(result)
  {
    case 0:
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v1 = (void *)[[NSString alloc] initWithFormat:@"can't increase an unknown bin"];
        int v2 = 136315906;
        uint64_t v3 = "FCFeedBin FCNextHigherVolumeFeedBin(FCFeedBin)";
        __int16 v4 = 2080;
        id v5 = "FCFeedBins.m";
        __int16 v6 = 1024;
        int v7 = 26;
        __int16 v8 = 2114;
        id v9 = v1;
        _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v2, 0x26u);
      }
      uint64_t result = 0;
      break;
    case 1:
      uint64_t result = 2;
      break;
    case 2:
    case 3:
      uint64_t result = 3;
      break;
    default:
      return result;
  }
  return result;
}

__CFString *FCStringFromFeedBin(unint64_t a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return off_1E5B55AA8[a1];
  }
}

id FCOfflineThumbnailAssetHandlesForHeadline(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = (void *)MEMORY[0x1E4F1C978];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __FCOfflineThumbnailAssetHandlesForHeadline_block_invoke;
  v10[3] = &unk_1E5B501A0;
  id v11 = v4;
  id v12 = v3;
  id v6 = v3;
  id v7 = v4;
  __int16 v8 = objc_msgSend(v5, "fc_array:", v10);

  return v8;
}

void __FCOfflineThumbnailAssetHandlesForHeadline_block_invoke(uint64_t a1, void *a2)
{
  id v11 = a2;
  if ([*(id *)(a1 + 32) useSmallestArticleThumbnails]
    && ([*(id *)(a1 + 40) thumbnailLQ],
        id v3 = objc_claimAutoreleasedReturnValue(),
        v3,
        v3))
  {
    id v4 = [*(id *)(a1 + 40) thumbnailLQ];
    id v5 = [v4 thumbnailAssetHandle];
    objc_msgSend(v11, "fc_safelyAddObject:", v5);
  }
  else
  {
    id v6 = *(id *)(a1 + 40);
    if (qword_1EB5D1640 != -1) {
      dispatch_once(&qword_1EB5D1640, &__block_literal_global_85);
    }
    if (_MergedGlobals_175
      && ([v6 thumbnailHQ], id v7 = objc_claimAutoreleasedReturnValue(), v7, v7))
    {
      __int16 v8 = [v6 thumbnailHQ];
    }
    else
    {
      __int16 v8 = [v6 thumbnail];
    }
    id v9 = v8;
    id v4 = [v8 thumbnailAssetHandle];

    objc_msgSend(v11, "fc_safelyAddObject:", v4);
  }

  uint64_t v10 = [*(id *)(a1 + 40) videoStillImage];
  objc_msgSend(v11, "fc_safelyAddObject:", v10);
}

id FCOfflineThumbnailAssetHandlesForIssue(void *a1)
{
  id v1 = a1;
  int v2 = (void *)MEMORY[0x1E4F1C978];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  _OWORD v6[2] = __FCOfflineThumbnailAssetHandlesForIssue_block_invoke;
  v6[3] = &unk_1E5B4BF30;
  id v7 = v1;
  id v3 = v1;
  id v4 = objc_msgSend(v2, "fc_array:", v6);

  return v4;
}

void __FCOfflineThumbnailAssetHandlesForIssue_block_invoke(uint64_t a1, void *a2)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 coverImageAssetHandle];
  objc_msgSend(v3, "fc_safelyAddObject:", v4);
}

id FCOfflineThumbnailAssetHandlesForPuzzle(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = (void *)MEMORY[0x1E4F1C978];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __FCOfflineThumbnailAssetHandlesForPuzzle_block_invoke;
  v10[3] = &unk_1E5B501A0;
  id v11 = v3;
  id v12 = v4;
  id v6 = v4;
  id v7 = v3;
  __int16 v8 = objc_msgSend(v5, "fc_array:", v10);

  return v8;
}

void __FCOfflineThumbnailAssetHandlesForPuzzle_block_invoke(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = [*(id *)(a1 + 32) thumbnailSmallImageAssetHandle];
  objc_msgSend(v7, "fc_safelyAddObject:", v3);

  id v4 = [*(id *)(a1 + 32) puzzleType];
  id v5 = [v4 exploreTileImageAssetHandle];
  objc_msgSend(v7, "fc_safelyAddObject:", v5);

  if (([*(id *)(a1 + 40) useSmallestPuzzleThumbnails] & 1) == 0)
  {
    id v6 = [*(id *)(a1 + 32) thumbnailLargeImageAssetHandle];
    objc_msgSend(v7, "fc_safelyAddObject:", v6);
  }
}

id FCOfflineThumbnailAssetHandlesForArticleRecord(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  __int16 v8 = (void *)MEMORY[0x1E4F1C978];
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __FCOfflineThumbnailAssetHandlesForArticleRecord_block_invoke;
  v14[3] = &unk_1E5B50288;
  id v15 = v6;
  id v16 = v5;
  id v17 = v7;
  id v9 = v7;
  id v10 = v5;
  id v11 = v6;
  id v12 = objc_msgSend(v8, "fc_array:", v14);

  return v12;
}

void __FCOfflineThumbnailAssetHandlesForArticleRecord_block_invoke(uint64_t a1, void *a2)
{
  id v16 = a2;
  if ([*(id *)(a1 + 32) useSmallestArticleThumbnails]
    && ([*(id *)(a1 + 40) thumbnailLQURL],
        id v3 = objc_claimAutoreleasedReturnValue(),
        v3,
        v3))
  {
    id v4 = *(void **)(a1 + 40);
    id v5 = [v4 thumbnailLQURL];
    id v6 = [v4 generateThumbnailAssetHandleForURL:v5 withAssetManager:*(void *)(a1 + 48)];
    objc_msgSend(v16, "fc_safelyAddObject:", v6);
  }
  else
  {
    id v7 = *(void **)(a1 + 48);
    id v8 = *(id *)(a1 + 40);
    id v9 = v7;
    if (qword_1EB5D1640 != -1) {
      dispatch_once(&qword_1EB5D1640, &__block_literal_global_85);
    }
    if (_MergedGlobals_175
      && ([v8 thumbnailHQURL], id v10 = objc_claimAutoreleasedReturnValue(), v10, v10))
    {
      uint64_t v11 = [v8 thumbnailHQURL];
    }
    else
    {
      uint64_t v11 = [v8 thumbnailURL];
    }
    id v12 = (void *)v11;
    id v5 = [v8 generateThumbnailAssetHandleForURL:v11 withAssetManager:v9];

    objc_msgSend(v16, "fc_safelyAddObject:", v5);
  }

  id v13 = *(void **)(a1 + 40);
  id v14 = [v13 videoStillImageURL];
  id v15 = [v13 generateThumbnailAssetHandleForURL:v14 withAssetManager:*(void *)(a1 + 48)];
  objc_msgSend(v16, "fc_safelyAddObject:", v15);
}

id FCOfflineThumbnailAssetHandlesForPuzzleRecords(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  uint64_t v11 = (void *)MEMORY[0x1E4F1C978];
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = __FCOfflineThumbnailAssetHandlesForPuzzleRecords_block_invoke;
  v18[3] = &unk_1E5B55AD0;
  id v19 = v8;
  id v20 = v7;
  id v21 = v10;
  id v22 = v9;
  id v12 = v9;
  id v13 = v10;
  id v14 = v7;
  id v15 = v8;
  id v16 = objc_msgSend(v11, "fc_array:", v18);

  return v16;
}

void __FCOfflineThumbnailAssetHandlesForPuzzleRecords_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  id v3 = resolvedPuzzleTypeDifficultyWithPuzzleTypeRecord(*(void **)(a1 + 32), [*(id *)(a1 + 40) difficultyLevel]);
  id v4 = *(void **)(a1 + 32);
  id v5 = [*(id *)(a1 + 40) publishedDate];
  id v6 = [v5 nsDate];
  id v7 = [v4 generateThumbnailImageAssetHandleForDate:v6 difficulty:v3 assetManager:*(void *)(a1 + 48)];
  objc_msgSend(v10, "fc_safelyAddObject:", v7);

  id v8 = [*(id *)(a1 + 32) generateExploreTileImageAssetHandleWithAssetManager:*(void *)(a1 + 48)];
  objc_msgSend(v10, "fc_safelyAddObject:", v8);

  if (([*(id *)(a1 + 56) useSmallestPuzzleThumbnails] & 1) == 0)
  {
    id v9 = [*(id *)(a1 + 40) generateThumbnailLargeImageAssetHandleWithAssetManager:*(void *)(a1 + 48)];
    objc_msgSend(v10, "fc_safelyAddObject:", v9);
  }
}

void sub_1A482314C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t FCCKPQueryReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        id v17 = objc_alloc_init(FCCKPRecordType);
        -[FCCKPQuery addTypes:](a1, v17);
        if PBReaderPlaceMark() && (FCCKPRecordTypeReadFrom((uint64_t)v17, a2)) {
          goto LABEL_29;
        }
        goto LABEL_54;
      case 2u:
        id v17 = objc_alloc_init(FCCKPQueryFilter);
        -[FCCKPQuery addFilters:](a1, v17);
        if (!PBReaderPlaceMark() || (FCCKPQueryFilterReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_54;
        }
        goto LABEL_29;
      case 3u:
        id v17 = objc_alloc_init(FCCKPQuerySort);
        -[FCCKPQuery addSorts:](a1, v17);
        if PBReaderPlaceMark() && (FCCKPQuerySortReadFrom((uint64_t)v17, a2))
        {
LABEL_29:
          PBReaderRecallMark();

LABEL_52:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_54:

        return 0;
      case 4u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 44) |= 2u;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_47:
        *(unsigned char *)(a1 + 40) = v21 != 0;
        goto LABEL_52;
      case 5u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 44) |= 1u;
        while (2)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              BOOL v14 = v26++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_51:
        *(_DWORD *)(a1 + 16) = v27;
        goto LABEL_52;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_52;
    }
  }
}

id FCAssetHandleForArticleAndMinimumSize(void *a1, double a2, double a3, double a4)
{
  id v4 = FCThumbnailForHeadlineMinimumSizeInPixels(a1, a2 * a4, a3 * a4);
  id v5 = [v4 thumbnailAssetHandle];

  return v5;
}

BOOL FCHeadlineHasLocalThumbnail(void *a1)
{
  id v1 = a1;
  int v2 = [v1 thumbnailUltraHQ];
  id v3 = [v2 thumbnailAssetHandle];
  id v4 = [v3 filePath];
  if (v4)
  {
    BOOL v5 = 1;
  }
  else
  {
    id v6 = [v1 thumbnailHQ];
    id v7 = [v6 thumbnailAssetHandle];
    char v8 = [v7 filePath];
    if (v8)
    {
      BOOL v5 = 1;
    }
    else
    {
      int v18 = [v1 thumbnailMedium];
      unsigned int v9 = [v18 thumbnailAssetHandle];
      unint64_t v10 = [v9 filePath];
      if (v10)
      {
        BOOL v5 = 1;
      }
      else
      {
        id v17 = [v1 thumbnail];
        id v16 = [v17 thumbnailAssetHandle];
        uint64_t v11 = [v16 filePath];
        if (v11)
        {
          BOOL v5 = 1;
        }
        else
        {
          int v15 = [v1 thumbnailLQ];
          BOOL v14 = [v15 thumbnailAssetHandle];
          unint64_t v12 = [v14 filePath];
          BOOL v5 = v12 != 0;

          uint64_t v11 = 0;
        }
      }
    }
  }
  return v5;
}

id FCPlaceholderHeadlineThumbnail()
{
  uint64_t v0 = FCBundle();
  id v1 = [v0 pathForResource:@"cellImagePlaceholder" ofType:@"png"];

  int v2 = [[FCRawFileDataProvider alloc] initWithFilePath:v1];
  id v3 = -[FCAssetHandle initWithDataProvider:]([FCAssetHandle alloc], v2);
  id v4 = +[FCHeadlineThumbnail headlineThumbnailWithAssetHandle:thumbnailSize:](FCHeadlineThumbnail, "headlineThumbnailWithAssetHandle:thumbnailSize:", v3, 1.0, 1.0);

  return v4;
}

id FCThumbnailForHeadline(void *a1)
{
  id v1 = FCCachedThumbnailForHeadline(a1);
  int v2 = v1;
  if (v1)
  {
    id v3 = v1;
  }
  else
  {
    FCPlaceholderHeadlineThumbnail();
    id v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  id v4 = v3;

  return v4;
}

id FCFetchThumbnailForHeadlineWithMinimumSize(void *a1, uint64_t a2, void *a3, double a4, double a5, double a6)
{
  id v11 = a3;
  unint64_t v12 = FCAssetHandleForArticleAndMinimumSize(a1, a4, a5, a6);
  char v13 = v12;
  if (v12)
  {
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    void v16[2] = __FCFetchThumbnailForHeadlineWithMinimumSize_block_invoke;
    v16[3] = &unk_1E5B4CC80;
    id v17 = v12;
    id v18 = v11;
    BOOL v14 = [v17 downloadIfNeededWithPriority:a2 completion:v16];
  }
  else
  {
    if (v11) {
      (*((void (**)(id, void, void))v11 + 2))(v11, 0, 0);
    }
    BOOL v14 = 0;
  }

  return v14;
}

uint64_t __FCFetchThumbnailForHeadlineWithMinimumSize_block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) filePath];

  int v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v2();
}

id FCNarrativeTrackForSubscription(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  BOOL v5 = v4;
  if (!v4)
  {
    id v16 = v3;
    BOOL v14 = [v16 narrativeTrackSample];

    goto LABEL_9;
  }
  uint64_t v6 = [v4 cachedSubscription];
  id v7 = objc_getAssociatedObject((id)v6, (const void *)(v6 + 1));
  uint64_t v8 = [v7 unsignedIntegerValue];
  char v9 = v8;
  unint64_t v10 = objc_getAssociatedObject((id)v6, (const void *)~v8);
  char v11 = [v10 unsignedIntegerValue] ^ v9;

  if (v11)
  {

    goto LABEL_7;
  }
  unint64_t v12 = [v3 narrativeTrackSample];

  if (!v12)
  {
LABEL_7:
    uint64_t v13 = [v3 narrativeTrack];
    goto LABEL_8;
  }
  uint64_t v13 = [v3 narrativeTrackSample];
LABEL_8:
  BOOL v14 = (void *)v13;
LABEL_9:

  return v14;
}

uint64_t __FCNarrativeTrackForSubscription_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) narrativeTrackSample];
}

__CFString *FCFDBErrorMessage(sqlite3 *a1)
{
  if (a1)
  {
    int v2 = sqlite3_errmsg(a1);
    if (v2)
    {
      id v3 = [NSString stringWithCString:v2 encoding:4];
    }
    else
    {
      id v3 = @"<unknown>";
    }
  }
  else
  {
    id v3 = @"<unknown>";
  }
  return v3;
}

uint64_t FCFDBInvokeOpen(const char *a1, sqlite3 **a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = sqlite3_open_v2(a1, a2, 32774, 0);
  if (v3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    id v5 = [NSString alloc];
    uint64_t v6 = FCFDBErrorMessage(*a2);
    id v7 = (void *)[v5 initWithFormat:@"sqlite3 open failed with result=%d, error=%@", v3, v6];
    *(_DWORD *)buf = 136315906;
    char v9 = "int FCFDBInvokeOpen(const char *, sqlite3 **, int)";
    __int16 v10 = 2080;
    char v11 = "FCFDBUtilities.m";
    __int16 v12 = 1024;
    int v13 = 20;
    __int16 v14 = 2114;
    int v15 = v7;
    _os_log_fault_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "*** Assertion failure (Identifier: FDBOpenFailed) : %s %s:%d %{public}@", buf, 0x26u);
  }
  return v3;
}

uint64_t FCFDBInvokeClose(sqlite3 *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = sqlite3_close(a1);
  if (v2 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    id v4 = [NSString alloc];
    id v5 = FCFDBErrorMessage(a1);
    uint64_t v6 = (void *)[v4 initWithFormat:@"sqlite3 close failed with result=%d, error=%@", v2, v5];
    *(_DWORD *)buf = 136315906;
    uint64_t v8 = "int FCFDBInvokeClose(sqlite3 *)";
    __int16 v9 = 2080;
    __int16 v10 = "FCFDBUtilities.m";
    __int16 v11 = 1024;
    int v12 = 27;
    __int16 v13 = 2114;
    __int16 v14 = v6;
    _os_log_fault_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "*** Assertion failure (Identifier: FDBCloseFailed) : %s %s:%d %{public}@", buf, 0x26u);
  }
  return v2;
}

uint64_t FCFDBInvokeExec(sqlite3 *a1, const char *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = sqlite3_exec(a1, a2, 0, 0, 0);
  if (v3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    id v5 = [NSString alloc];
    uint64_t v6 = FCFDBErrorMessage(a1);
    id v7 = (void *)[v5 initWithFormat:@"sqlite3 exec failed with result=%d, error=%@", v3, v6];
    *(_DWORD *)buf = 136315906;
    __int16 v9 = "int FCFDBInvokeExec(sqlite3 *, const char *)";
    __int16 v10 = 2080;
    __int16 v11 = "FCFDBUtilities.m";
    __int16 v12 = 1024;
    int v13 = 34;
    __int16 v14 = 2114;
    uint64_t v15 = v7;
    _os_log_fault_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "*** Assertion failure (Identifier: FDBExecFailed) : %s %s:%d %{public}@", buf, 0x26u);
  }
  return v3;
}

uint64_t FCFDBInvokePrepare(sqlite3 *a1, id a2, sqlite3_stmt **a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = sqlite3_prepare_v2(a1, (const char *)[a2 cStringUsingEncoding:4], -1, a3, 0);
  if (v4 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    id v6 = [NSString alloc];
    id v7 = FCFDBErrorMessage(a1);
    uint64_t v8 = (void *)[v6 initWithFormat:@"sqlite3 prepare failed with result=%d, error=%@", v4, v7];
    *(_DWORD *)buf = 136315906;
    __int16 v10 = "int FCFDBInvokePrepare(sqlite3 *, NSString *__strong, sqlite3_stmt **)";
    __int16 v11 = 2080;
    __int16 v12 = "FCFDBUtilities.m";
    __int16 v13 = 1024;
    int v14 = 41;
    __int16 v15 = 2114;
    uint64_t v16 = v8;
    _os_log_fault_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "*** Assertion failure (Identifier: FDBPrepareFailed) : %s %s:%d %{public}@", buf, 0x26u);
  }
  return v4;
}

uint64_t FCFDBInvokeStep(sqlite3 *a1, sqlite3_stmt *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = sqlite3_step(a2);
  if ((v3 & 0xFFFFFFFE) != 0x64 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    id v5 = [NSString alloc];
    id v6 = FCFDBErrorMessage(a1);
    id v7 = (void *)[v5 initWithFormat:@"sqlite3 step failed with result=%d, error=%@", v3, v6];
    *(_DWORD *)buf = 136315906;
    __int16 v9 = "int FCFDBInvokeStep(sqlite3 *, sqlite3_stmt *)";
    __int16 v10 = 2080;
    __int16 v11 = "FCFDBUtilities.m";
    __int16 v12 = 1024;
    int v13 = 48;
    __int16 v14 = 2114;
    __int16 v15 = v7;
    _os_log_fault_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "*** Assertion failure (Identifier: FDBStepFailed) : %s %s:%d %{public}@", buf, 0x26u);
  }
  return v3;
}

uint64_t FCFDBInvokeFinalize(sqlite3 *a1, sqlite3_stmt *pStmt)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = sqlite3_finalize(pStmt);
  if (v3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    id v5 = [NSString alloc];
    id v6 = FCFDBErrorMessage(a1);
    id v7 = (void *)[v5 initWithFormat:@"sqlite3 finalize failed with result=%d, error=%@", v3, v6];
    *(_DWORD *)buf = 136315906;
    __int16 v9 = "int FCFDBInvokeFinalize(sqlite3 *, sqlite3_stmt *)";
    __int16 v10 = 2080;
    __int16 v11 = "FCFDBUtilities.m";
    __int16 v12 = 1024;
    int v13 = 55;
    __int16 v14 = 2114;
    __int16 v15 = v7;
    _os_log_fault_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "*** Assertion failure (Identifier: FDBFinalizeFailed) : %s %s:%d %{public}@", buf, 0x26u);
  }
  return v3;
}

__CFString *NSStringFromFCNewsPersonalizationArticleEmbeddingsFittingConfigurationEmbeddingType(uint64_t a1)
{
  if (a1 == 1) {
    return @"body";
  }
  else {
    return @"title";
  }
}

id FCCloudKitIDFromUUID(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = FCUUIDStringToUUIDBytes(a1);
  id v5 = [v4 base64EncodedStringWithOptions:0];

  id v6 = [v5 stringByReplacingOccurrencesOfString:@"/" withString:@"_"];

  id v7 = [v6 stringByReplacingOccurrencesOfString:@"+" withString:@"-"];

  uint64_t v8 = [v7 substringToIndex:22];
  __int16 v9 = [v3 stringByAppendingString:v8];

  return v9;
}

id FCUUIDFromCloudKitID(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 length] != 23 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    __int16 v9 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "cloudKitID.length == FCLengthOfCloudKitID");
    *(_DWORD *)buf = 136315906;
    __int16 v11 = "NSString *FCUUIDFromCloudKitID(NSString *__strong)";
    __int16 v12 = 2080;
    int v13 = "FCNewsIDUtilities.m";
    __int16 v14 = 1024;
    int v15 = 37;
    __int16 v16 = 2114;
    uint64_t v17 = v9;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
  uint64_t v2 = [v1 substringFromIndex:1];
  id v3 = [v2 stringByReplacingOccurrencesOfString:@"_" withString:@"/"];

  uint64_t v4 = [v3 stringByReplacingOccurrencesOfString:@"-" withString:@"+"];

  id v5 = [v4 stringByAppendingString:@"=="];

  id v6 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBase64EncodedString:v5 options:0];
  id v7 = FCUUIDBytesToUUIDString(v6);

  return v7;
}

id FCTagCloudKitIDFromUUID(void *a1)
{
  return FCCloudKitIDFromUUID(a1, @"T");
}

id FCArticleCloudKitIDFromUUID(void *a1)
{
  return FCCloudKitIDFromUUID(a1, @"A");
}

id FCIssueCloudKitIDFromUUID(void *a1)
{
  return FCCloudKitIDFromUUID(a1, @"I");
}

id FCForYouConfigRecordIDFromUUID(void *a1)
{
  return FCCloudKitIDFromUUID(a1, @"Y-");
}

id FCArticleListRecordIDFromUUID(void *a1)
{
  return FCCloudKitIDFromUUID(a1, @"L");
}

id FCIssueListRecordIDFromUUID(void *a1)
{
  return FCCloudKitIDFromUUID(a1, @"M");
}

id FCNotificationItemRecordIDFromUUID(void *a1)
{
  return FCCloudKitIDFromUUID(a1, @"NI");
}

id FCPuzzleCloudKitIDFromUUID(void *a1)
{
  return FCCloudKitIDFromUUID(a1, @"J");
}

id FCPuzzleTypeCloudKitIDFromUUID(void *a1)
{
  return FCCloudKitIDFromUUID(a1, @"Z");
}

id FCRandomTagCloudKitID()
{
  uint64_t v0 = [MEMORY[0x1E4F29128] UUID];
  id v1 = [v0 UUIDString];
  uint64_t v2 = FCCloudKitIDFromUUID(v1, @"T");

  return v2;
}

id FCRandomArticleCloudKitID()
{
  uint64_t v0 = [MEMORY[0x1E4F29128] UUID];
  id v1 = [v0 UUIDString];
  uint64_t v2 = FCCloudKitIDFromUUID(v1, @"A");

  return v2;
}

id FCRandomIssueCloudKitID()
{
  uint64_t v0 = [MEMORY[0x1E4F29128] UUID];
  id v1 = [v0 UUIDString];
  uint64_t v2 = FCCloudKitIDFromUUID(v1, @"I");

  return v2;
}

id FCRandomForYouConfigCloudKitID()
{
  uint64_t v0 = [MEMORY[0x1E4F29128] UUID];
  id v1 = [v0 UUIDString];
  uint64_t v2 = FCCloudKitIDFromUUID(v1, @"Y-");

  return v2;
}

id FCRandomArticleListCloudKitID()
{
  uint64_t v0 = [MEMORY[0x1E4F29128] UUID];
  id v1 = [v0 UUIDString];
  uint64_t v2 = FCCloudKitIDFromUUID(v1, @"L");

  return v2;
}

id FCRandomIssueListCloudKitID()
{
  uint64_t v0 = [MEMORY[0x1E4F29128] UUID];
  id v1 = [v0 UUIDString];
  uint64_t v2 = FCCloudKitIDFromUUID(v1, @"M");

  return v2;
}

id FCRandomNotificationItemCloudKitID()
{
  uint64_t v0 = [MEMORY[0x1E4F29128] UUID];
  id v1 = [v0 UUIDString];
  uint64_t v2 = FCCloudKitIDFromUUID(v1, @"NI");

  return v2;
}

id FCRandomPuzzleCloudKitID()
{
  uint64_t v0 = [MEMORY[0x1E4F29128] UUID];
  id v1 = [v0 UUIDString];
  uint64_t v2 = FCCloudKitIDFromUUID(v1, @"J");

  return v2;
}

id FCRandomPuzzleTypeCloudKitID()
{
  uint64_t v0 = [MEMORY[0x1E4F29128] UUID];
  id v1 = [v0 UUIDString];
  uint64_t v2 = FCCloudKitIDFromUUID(v1, @"Z");

  return v2;
}

id FCRandomShortcutCategoryCloudKitID()
{
  uint64_t v0 = [MEMORY[0x1E4F29128] UUID];
  id v1 = [v0 UUIDString];
  uint64_t v2 = FCUUIDFromCloudKitID(v1);

  return v2;
}

void sub_1A4831870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSKReceiptRefreshRequestClass_block_invoke(uint64_t a1)
{
  StoreKitLibrary_0();
  Class result = objc_getClass("SKReceiptRefreshRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    _MergedGlobals_180 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    return (Class)__StoreKitLibraryCore_block_invoke_1();
  }
  return result;
}

uint64_t __StoreKitLibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  StoreKitLibraryCore_frameworkLibrary_0 = result;
  return result;
}

void sub_1A4833B8C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1A4835050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A48352F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A483861C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id FCFeedRangeCoveredByFeedItems(void *a1)
{
  id v1 = a1;
  if ([v1 count])
  {
    uint64_t v2 = [v1 firstObject];
    id v3 = +[FCFeedCursor cursorForOrder:](FCFeedCursor, "cursorForOrder:", [v2 order]);

    uint64_t v4 = [v1 lastObject];
    id v5 = +[FCFeedCursor cursorForOrder:](FCFeedCursor, "cursorForOrder:", [v4 order] - 1);

    id v6 = +[FCFeedRange feedRangeWithTop:v3 bottom:v5];
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

uint64_t FCFeedGroupTypeFromNSString(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (([v1 isEqualToString:@"None"] & 1) == 0)
  {
    if ([v1 isEqualToString:@"SingleTag"])
    {
      uint64_t v2 = 1;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"TopStories"])
    {
      uint64_t v2 = 26;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"TrendingStories"])
    {
      uint64_t v2 = 2;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"DailyBriefings"])
    {
      uint64_t v2 = 3;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"SavedStories"])
    {
      uint64_t v2 = 4;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"GreatStoriesYouMissed"])
    {
      uint64_t v2 = 5;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"Editorial"])
    {
      uint64_t v2 = 6;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"Latest"])
    {
      uint64_t v2 = 8;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"Topic"])
    {
      uint64_t v2 = 9;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"MoreForYou"])
    {
      uint64_t v2 = 10;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"NewFavorite"])
    {
      uint64_t v2 = 11;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"PaidSubscription"])
    {
      uint64_t v2 = 12;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"BestOfEdition"])
    {
      uint64_t v2 = 13;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"DraftArticles"])
    {
      uint64_t v2 = 16;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"DraftIssues"])
    {
      uint64_t v2 = 17;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"AutoFavorite"])
    {
      uint64_t v2 = 14;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"MoreFromPublisher"])
    {
      uint64_t v2 = 18;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"RelatedArticles"])
    {
      uint64_t v2 = 19;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"RecommendedReads"])
    {
      uint64_t v2 = 20;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"EndOfArticleUnknown"])
    {
      uint64_t v2 = 21;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"Spotlight"])
    {
      uint64_t v2 = 7;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"Curated"])
    {
      uint64_t v2 = 23;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"Newspaper"])
    {
      uint64_t v2 = 24;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"LocalNews"])
    {
      uint64_t v2 = 25;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"AudioDailyBriefing"])
    {
      uint64_t v2 = 36;
      goto LABEL_55;
    }
    if ([v1 isEqualToString:@"MagazineTrending"])
    {
      uint64_t v2 = 37;
      goto LABEL_55;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = (void *)[[NSString alloc] initWithFormat:@"Don't have a mapping for %@", v1];
      *(_DWORD *)buf = 136315906;
      id v6 = "FCFeedGroupType FCFeedGroupTypeFromNSString(NSString *__strong)";
      __int16 v7 = 2080;
      uint64_t v8 = "FCFeedGroupType.m";
      __int16 v9 = 1024;
      int v10 = 125;
      __int16 v11 = 2114;
      __int16 v12 = v4;
      _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
    }
  }
  uint64_t v2 = 0;
LABEL_55:

  return v2;
}

__CFString *NSStringFromFCFeedGroupType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x25) {
    return @"None";
  }
  else {
    return off_1E5B563C8[a1 - 1];
  }
}

id NSErrorForHTTPStatusCode(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v5 = v4;
  if (v3) {
    [v4 setObject:v3 forKeyedSubscript:*MEMORY[0x1E4F289D0]];
  }
  if (a1 > 399)
  {
    if ((unint64_t)(a1 - 400) <= 0x1D && ((1 << (a1 + 112)) & 0x20002009) != 0) {
      goto LABEL_13;
    }
    if (a1 == 500 || a1 == 503)
    {
      [v5 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"NSErrorFCAdditionsShouldRetry"];
LABEL_13:
      __int16 v7 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v8 = a1;
      goto LABEL_14;
    }
LABEL_21:
    __int16 v7 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v8 = -1000;
    __int16 v9 = 0;
    goto LABEL_15;
  }
  if (a1 <= 199)
  {
    if (a1 == -2000) {
      goto LABEL_13;
    }
    if (!a1)
    {
      uint64_t v6 = MEMORY[0x1E4F1CC38];
      [v5 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"NSErrorFCAdditionsIsNetworkUnavailable"];
      [v5 setObject:v6 forKeyedSubscript:@"NSErrorFCAdditionsShouldRetry"];
      __int16 v7 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v8 = 0;
LABEL_14:
      __int16 v9 = v5;
LABEL_15:
      int v10 = [v7 errorWithDomain:@"FCEndpointConnectionErrorDomain" code:v8 userInfo:v9];
      goto LABEL_16;
    }
    goto LABEL_21;
  }
  int v10 = 0;
  if (a1 != 200 && a1 != 202) {
    goto LABEL_21;
  }
LABEL_16:

  return v10;
}

void sub_1A4843170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id NSErrorByUpdatingRetryStatusForError(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 domain];
  int v3 = [v2 isEqualToString:*MEMORY[0x1E4F289A0]];

  id v4 = v1;
  if (v3)
  {
    uint64_t v5 = [v1 code];
    id v4 = v1;
    if ((unint64_t)(v5 + 1009) <= 8)
    {
      id v4 = v1;
      if (((1 << (v5 - 15)) & 0x131) != 0)
      {
        uint64_t v6 = [v1 userInfo];
        __int16 v7 = (void *)[v6 mutableCopy];
        uint64_t v8 = v7;
        if (v7) {
          id v9 = v7;
        }
        else {
          id v9 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
        }
        int v10 = v9;

        [v10 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"NSErrorFCAdditionsShouldRetry"];
        __int16 v11 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1, "code") == -1009);
        [v10 setObject:v11 forKeyedSubscript:@"NSErrorFCAdditionsIsNetworkUnavailable"];

        __int16 v12 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v13 = [v1 domain];
        id v4 = objc_msgSend(v12, "errorWithDomain:code:userInfo:", v13, objc_msgSend(v1, "code"), v10);
      }
    }
  }

  return v4;
}

BOOL FCArticleStoryTypeIsEligibleForExpiration(uint64_t a1)
{
  return a1 != 5;
}

void sub_1A48480B8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1A4848B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4848DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id FCCKPRecordsOptions()
{
  if (qword_1EB5D1750 != -1) {
    dispatch_once(&qword_1EB5D1750, &__block_literal_global_98);
  }
  uint64_t v0 = (void *)_MergedGlobals_182;
  return v0;
}

void __FCCKPRecordsOptions_block_invoke()
{
  uint64_t v0 = (void *)_MergedGlobals_182;
  _MergedGlobals_182 = (uint64_t)&unk_1EF8D9880;
}

void sub_1A484A358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__37(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_1A484B79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FCCKDatabaseStartUpResultFromError(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    uint64_t v5 = 0;
    goto LABEL_11;
  }
  if (objc_msgSend(v1, "fc_isTemporaryNetworkOrServerError")) {
    goto LABEL_5;
  }
  int v3 = [v2 domain];
  if ([v3 isEqualToString:*MEMORY[0x1E4F281F8]])
  {
    uint64_t v4 = [v2 code];

    if (v4 == 4097)
    {
LABEL_5:
      uint64_t v5 = 1;
      goto LABEL_11;
    }
  }
  else
  {
  }
  if (objc_msgSend(v2, "fc_isOfflineError")) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = 2;
  }
LABEL_11:

  return v5;
}

uint64_t FCCKPQueryRetrieveRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  __int16 v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = objc_alloc_init(FCCKPQuery);
        objc_storeStrong((id *)(a1 + 24), v17);
        if PBReaderPlaceMark() && (FCCKPQueryReadFrom((uint64_t)v17, a2)) {
          goto LABEL_37;
        }
        goto LABEL_44;
      case 2u:
        uint64_t v19 = PBReaderReadData();
        unsigned int v20 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v19;

        goto LABEL_42;
      case 3u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 48) |= 1u;
        while (2)
        {
          uint64_t v24 = *v3;
          unint64_t v25 = *(void *)(a2 + v24);
          if (v25 == -1 || v25 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              BOOL v14 = v22++ >= 9;
              if (v14)
              {
                LODWORD(v23) = 0;
                goto LABEL_41;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v23) = 0;
        }
LABEL_41:
        *(_DWORD *)(a1 + 16) = v23;
        goto LABEL_42;
      case 4u:
        uint64_t v17 = objc_alloc_init(FCCKPRecordZoneIdentifier);
        objc_storeStrong((id *)(a1 + 40), v17);
        if (!PBReaderPlaceMark() || !FCCKPRecordZoneIdentifierReadFrom((uint64_t)v17, a2)) {
          goto LABEL_44;
        }
        goto LABEL_37;
      case 5u:
        uint64_t v17 = objc_alloc_init(FCCKPRequestedFields);
        objc_storeStrong((id *)(a1 + 32), v17);
        if PBReaderPlaceMark() && (FCCKPRequestedFieldsReadFrom((uint64_t)v17, a2))
        {
LABEL_37:
          PBReaderRecallMark();

LABEL_42:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_44:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_42;
    }
  }
}

void sub_1A484CDBC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1A484D7D8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

id FCCKPClientOptions()
{
  if (qword_1EB5D1780 != -1) {
    dispatch_once(&qword_1EB5D1780, &__block_literal_global_102);
  }
  uint64_t v0 = (void *)_MergedGlobals_185;
  return v0;
}

void __FCCKPClientOptions_block_invoke()
{
  uint64_t v0 = (void *)_MergedGlobals_185;
  _MergedGlobals_185 = (uint64_t)&unk_1EF8D98D0;
}

double FCCoverArtImageDimensionsFromJSON(void *a1)
{
  double v1 = *MEMORY[0x1E4F1DB30];
  id v2 = a1;
  int v3 = [v2 objectForKeyedSubscript:@"width"];
  uint64_t v4 = [v2 objectForKeyedSubscript:@"height"];

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      [v3 floatValue];
      double v1 = v5;
      [v4 floatValue];
    }
  }

  return v1;
}

id FCCoverArtImageClassFromJSON(void *a1)
{
  double v1 = [a1 objectForKeyedSubscript:@"type"];
  id v2 = objc_opt_class();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [v1 isEqualToString:@"image2"]) {
    id v2 = objc_opt_class();
  }
  id v3 = v2;

  return v3;
}

id FCCoverArtImageURLFromJSON(void *a1)
{
  double v1 = [a1 objectForKeyedSubscript:@"URL"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = [MEMORY[0x1E4F1CB10] URLWithString:v1];
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id FCCoverArtImagesFromUnprocessedImages(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v1, "count"));
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v18;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v18 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = *(void **)(*((void *)&v17 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            double v9 = FCCoverArtImageDimensionsFromJSON(v8);
            double v11 = v10;
            unint64_t v12 = (objc_class *)FCCoverArtImageClassFromJSON(v8);
            char v13 = FCCoverArtImageURLFromJSON(v8);
            id v14 = [v12 alloc];
            int v15 = objc_msgSend(v14, "initWithDimensions:URL:", v13, v9, v11, (void)v17);
            objc_msgSend(v2, "fc_safelyAddObject:", v15);
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
      }
      while (v5);
    }
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

void FCMergeHistoryItemSeenFields(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v15 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "leftItem");
    *(_DWORD *)buf = 136315906;
    long long v18 = "void FCMergeHistoryItemSeenFields(__strong id<FCMutableReadingHistoryItem>, __strong id<FCReadingHistoryItem>)";
    __int16 v19 = 2080;
    long long v20 = "FCReadingHistoryUtilities.m";
    __int16 v21 = 1024;
    int v22 = 29;
    __int16 v23 = 2114;
    uint64_t v24 = v15;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

    if (v4) {
      goto LABEL_6;
    }
  }
  else if (v4)
  {
    goto LABEL_6;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    __int16 v16 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "rightItem");
    *(_DWORD *)buf = 136315906;
    long long v18 = "void FCMergeHistoryItemSeenFields(__strong id<FCMutableReadingHistoryItem>, __strong id<FCReadingHistoryItem>)";
    __int16 v19 = 2080;
    long long v20 = "FCReadingHistoryUtilities.m";
    __int16 v21 = 1024;
    int v22 = 30;
    __int16 v23 = 2114;
    uint64_t v24 = v16;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
LABEL_6:
  uint64_t v5 = (void *)MEMORY[0x1E4F1C9C8];
  uint64_t v6 = [v3 firstSeenAt];
  __int16 v7 = [v4 firstSeenAt];
  char v8 = objc_msgSend(v5, "fc_earlierDateAllowingNilWithDate:andDate:", v6, v7);
  [v3 setFirstSeenAt:v8];

  unint64_t v9 = [v4 maxVersionSeen];
  unint64_t v10 = [v3 maxVersionSeen];
  if (v10 <= v9)
  {
    if (v10 == v9)
    {
      double v11 = (void *)MEMORY[0x1E4F1C9C8];
      id v14 = [v3 firstSeenAtOfMaxVersionSeen];
      unint64_t v12 = [v4 firstSeenAtOfMaxVersionSeen];
      char v13 = objc_msgSend(v11, "fc_earlierDateAllowingNilWithDate:andDate:", v14, v12);
      [v3 setFirstSeenAtOfMaxVersionSeen:v13];
    }
    else
    {
      [v3 setMaxVersionSeen:v9];
      id v14 = [v4 firstSeenAtOfMaxVersionSeen];
      [v3 setFirstSeenAtOfMaxVersionSeen:v14];
    }
  }
}

id FCPruneHistoryItemsForUpload(void *a1)
{
  return _FCPruneHistoryForUpload(a1, &__block_literal_global_105, &__block_literal_global_11_2);
}

uint64_t __FCPruneHistoryItemsForUpload_block_invoke(uint64_t a1, void *a2)
{
  return [a2 lastVisitedAt];
}

unint64_t __FCPruneHistoryItemsForUpload_block_invoke_2(uint64_t a1, void *a2)
{
  return ((unint64_t)[a2 flags] >> 2) & 1;
}

id _FCPruneHistoryForUpload(void *a1, void *a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = a2;
  __int16 v7 = a3;
  char v8 = [MEMORY[0x1E4F1CA48] array];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  obuint64_t j = v5;
  uint64_t v9 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v19 != v11) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void *)(*((void *)&v18 + 1) + 8 * i);
        id v14 = v6[2](v6, v13);
        if ((unint64_t)[v8 count] < 0x3E8
          || (v7[2](v7, v13) & 1) != 0
          || v14 && (objc_msgSend(v14, "fc_timeIntervalUntilNow"), v15 < 2419200.0))
        {
          [v8 addObject:v13];
        }
      }
      uint64_t v10 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v10);
  }

  return v8;
}

id FCPruneHistoryRecordsForUpload(void *a1)
{
  return _FCPruneHistoryForUpload(a1, &__block_literal_global_14_0, &__block_literal_global_17_0);
}

uint64_t __FCPruneHistoryRecordsForUpload_block_invoke(uint64_t a1, void *a2)
{
  return [a2 objectForKeyedSubscript:@"lastVisited"];
}

uint64_t __FCPruneHistoryRecordsForUpload_block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = [a2 objectForKeyedSubscript:@"offensive"];
  uint64_t v3 = [v2 BOOLValue];

  return v3;
}

uint64_t __FCVisitLocallyPrunableHistoryItems_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([v3 isPruningDisabled] & 1) == 0
    && ([v3 hasArticleBeenMarkedOffensive] & 1) == 0
    && ![v3 articleLikingStatus])
  {
    uint64_t v6 = [v3 lastVisitedAt];

    if (v6)
    {
      uint64_t v7 = [v3 lastVisitedAt];
    }
    else
    {
      char v8 = [v3 lastListenedAt];

      if (!v8)
      {
        uint64_t v11 = [v3 firstSeenAt];

        if (!v11)
        {
          uint64_t v4 = 1;
          goto LABEL_5;
        }
        uint64_t v9 = [v3 firstSeenAt];
        uint64_t v10 = (void *)(a1 + 40);
        goto LABEL_11;
      }
      uint64_t v7 = [v3 lastListenedAt];
    }
    uint64_t v9 = (void *)v7;
    uint64_t v10 = (void *)(a1 + 32);
LABEL_11:
    uint64_t v4 = objc_msgSend(v9, "fc_isEarlierThan:", *v10);

    goto LABEL_5;
  }
  uint64_t v4 = 0;
LABEL_5:

  return v4;
}

void __FCVisitLocallyPrunableHistoryItems_block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))()) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

uint64_t FeldsparCoreInternalExtrasEnabled()
{
  if (qword_1EB5D17B0 != -1) {
    dispatch_once(&qword_1EB5D17B0, &__block_literal_global_2_1);
  }
  return _MergedGlobals_187;
}

void __FeldsparCoreInternalExtrasEnabled_block_invoke()
{
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4F28B50], "fc_feldsparCoreInternalExtrasBundle");
  _MergedGlobals_187 = v0 != 0;
}

void sub_1A4852524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4852F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FCTagRecordDesiredFieldOptionsForNameImageFallback()
{
  return 284;
}

id FCUUIDStringToUUIDBytes(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = (objc_class *)MEMORY[0x1E4F29128];
    id v2 = a1;
    id v3 = (void *)[[v1 alloc] initWithUUIDString:v2];

    if (v3)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = 0;
      [v3 getUUIDBytes:buf];
      uint64_t v4 = [MEMORY[0x1E4F1C9B8] dataWithBytes:buf length:16];
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = objc_msgSend([NSString alloc], "initWithFormat:", @"invalid nil value for '%s'", "UUID");
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "NSData *FCUUIDStringToUUIDBytes(NSString *__strong)";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "FCUUIDUtilities.m";
        __int16 v8 = 1024;
        int v9 = 18;
        __int16 v10 = 2114;
        uint64_t v11 = v6;
        _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
      }
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  return v4;
}

id FCUUIDBytesToUUIDString(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = (objc_class *)MEMORY[0x1E4F29128];
    id v2 = a1;
    id v3 = [v1 alloc];
    id v4 = v2;
    uint64_t v5 = [v4 bytes];

    uint64_t v6 = (void *)[v3 initWithUUIDBytes:v5];
    uint64_t v7 = [v6 UUIDString];
    __int16 v8 = [v7 lowercaseString];

    if (!v8 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      __int16 v10 = objc_msgSend([NSString alloc], "initWithFormat:", @"invalid nil value for '%s'", "result");
      *(_DWORD *)buf = 136315906;
      uint64_t v12 = "NSString *FCUUIDBytesToUUIDString(NSData *__strong)";
      __int16 v13 = 2080;
      id v14 = "FCUUIDUtilities.m";
      __int16 v15 = 1024;
      int v16 = 38;
      __int16 v17 = 2114;
      long long v18 = v10;
      _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
    }
  }
  else
  {
    __int16 v8 = 0;
  }
  return v8;
}

void sub_1A4854900(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1A4855AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A4855F3C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

void sub_1A485861C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A4859678(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 160));
  _Unwind_Resume(a1);
}

void sub_1A485A3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_1A485F9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1A4865E10(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

void sub_1A486AE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A486DFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A486FDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A486FF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A487016C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FCHeadlineTemplateTypeWithJSONValue(void *a1)
{
  return [a1 isEqualToString:@"Image On Top"];
}

void sub_1A48714C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FCCKPQuerySortReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_33;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v20) = 0;
        }
LABEL_35:
        *(_DWORD *)(a1 + 16) = v20;
      }
      else if ((v10 >> 3) == 1)
      {
        __int16 v17 = objc_alloc_init(FCCKPRecordFieldIdentifier);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (FCCKPRecordFieldIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *FCStringFromQoSClass(int a1)
{
  uint64_t v1 = @"UserInteractive";
  uint64_t v2 = @"Utility";
  id v3 = @"Default";
  id v4 = @"UserInitiated";
  if (a1 != 25) {
    id v4 = @"UserInteractive";
  }
  if (a1 != 21) {
    id v3 = v4;
  }
  if (a1 != 17) {
    uint64_t v2 = v3;
  }
  if (a1 == 9) {
    uint64_t v1 = @"Background";
  }
  if (!a1) {
    uint64_t v1 = @"Unspecified";
  }
  if (a1 <= 16) {
    return v1;
  }
  else {
    return v2;
  }
}

uint64_t FCDefaultsDomainiCloudDataDestructionStickyKeys()
{
  return objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", @"show_stories_only_from_favorites", @"FCAppleAccountContentStoreFrontiTunesDSIDKey", @"FCAppleAccountContentStoreFrontIDKey", @"automatic_downloads_enabled", @"automatically_download_feed_stories", @"automatically_download_saved_stories", @"automatically_download_issues", @"automatically_download_puzzles", @"automatically_download_audio", 0);
}

id FCSettingsOverrideEmbedURLTodayWidget()
{
  if (NFInternalBuild())
  {
    uint64_t v0 = NewsCoreUserDefaults();
    if ([v0 BOOLForKey:@"embed_url_override_enabled"])
    {
      uint64_t v1 = NewsCoreUserDefaults();
      uint64_t v2 = [v1 stringForKey:@"embed_url_override_today_widget"];
    }
    else
    {
      uint64_t v2 = 0;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  if ([v2 length])
  {
    id v3 = [MEMORY[0x1E4F1CB10] URLWithString:v2];
  }
  else
  {
    id v3 = 0;
  }
  id v4 = objc_alloc(MEMORY[0x1E4F290C8]);
  uint64_t v5 = [MEMORY[0x1E4F29128] UUID];
  uint64_t v6 = [v5 UUIDString];
  uint64_t v7 = (void *)[v4 initWithName:@"testID" value:v6];

  char v8 = objc_msgSend(v3, "fc_URLByAddingQueryItem:", v7);

  return v8;
}

uint64_t FCZoneLastModifiedExternallySharedPreferenceKey(uint64_t a1)
{
  return [NSString stringWithFormat:@"zone-last-modified-externally-%@", a1];
}

uint64_t FCFeedBinForTopicsInForYou(void *a1)
{
  uint64_t v1 = [a1 subscriptionList];
  uint64_t v2 = [v1 subscribedTagIDs];
  if ((unint64_t)[v2 count] >= 0x64) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = 2;
  }

  return v3;
}

__CFString *FCOperationPurposeFromFeedType(unint64_t a1)
{
  if (a1 > 0x17) {
    return @"todayFeed";
  }
  else {
    return off_1E5B57D08[a1];
  }
}

void applicationStateNotificationCallback(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = [a5 objectForKey:@"com.apple.news"];
  if (v6)
  {
    id v7 = a2;
    char v8 = [v7 queue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __applicationStateNotificationCallback_block_invoke;
    block[3] = &unk_1E5B4C018;
    id v11 = v7;
    id v9 = v7;
    dispatch_async(v8, block);
  }
}

uint64_t __applicationStateNotificationCallback_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateAvailability];
}

void applicationRegisteredAndUnregisteredNotificationCallback(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = [a5 objectForKey:@"bundleIDs"];
  if ([v6 containsObject:@"com.apple.news"])
  {
    id v7 = a2;
    char v8 = [v7 queue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __applicationRegisteredAndUnregisteredNotificationCallback_block_invoke;
    block[3] = &unk_1E5B4C018;
    id v11 = v7;
    id v9 = v7;
    dispatch_async(v8, block);
  }
}

uint64_t __applicationRegisteredAndUnregisteredNotificationCallback_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateAvailability];
}

BOOL FCCKPLocaleReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 24;
          goto LABEL_26;
        case 2u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 32;
          goto LABEL_26;
        case 3u:
          unsigned int v19 = PBReaderReadString();
          if (v19) {
            -[FCCKPLocale addEnabledKeyboards:](a1, v19);
          }
          goto LABEL_27;
        case 4u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 8;
LABEL_26:
          unsigned int v19 = *(void **)(a1 + v18);
          *(void *)(a1 + v18) = v17;
LABEL_27:

          goto LABEL_28;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_28:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t FCDeviceIsA7()
{
  if (qword_1EB5D1870 != -1) {
    dispatch_once(&qword_1EB5D1870, &__block_literal_global_123);
  }
  return _MergedGlobals_195;
}

uint64_t __FCDeviceIsA7_block_invoke()
{
  uint64_t result = MGGetProductType();
  if (_MergedGlobals_195)
  {
    char v1 = 1;
    goto LABEL_3;
  }
  char v1 = 1;
  if (result <= 2048538370)
  {
    if (result <= 344862119)
    {
      if (result == 23433786) {
        goto LABEL_3;
      }
      uint64_t v2 = 173258742;
    }
    else
    {
      if (result == 344862120 || result == 776033019) {
        goto LABEL_3;
      }
      uint64_t v2 = 1701146937;
    }
  }
  else if (result > 3933982783)
  {
    if (result == 3933982784 || result == 4055323051) {
      goto LABEL_3;
    }
    uint64_t v2 = 4232256925;
  }
  else
  {
    if (result == 2048538371 || result == 3637438250) {
      goto LABEL_3;
    }
    uint64_t v2 = 3865922942;
  }
  if (result != v2) {
    char v1 = 0;
  }
LABEL_3:
  _MergedGlobals_195 = v1;
  return result;
}

uint64_t FCDeviceIsA8()
{
  if (qword_1EB5D1878 != -1) {
    dispatch_once(&qword_1EB5D1878, &__block_literal_global_2_2);
  }
  return byte_1EB5D1869;
}

uint64_t __FCDeviceIsA8_block_invoke()
{
  uint64_t result = MGIsDeviceOneOfType();
  byte_1EB5D1869 = result;
  return result;
}

id FCDeviceUUIDForVendor()
{
  if (qword_1EB5D1888 != -1) {
    dispatch_once(&qword_1EB5D1888, &__block_literal_global_9_0);
  }
  uint64_t v0 = (void *)qword_1EB5D1880;
  return v0;
}

void __FCDeviceUUIDForVendor_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x1E4F29128]);
  FCDeviceIdentifierForVendor();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 initWithUUIDString:v3];
  uint64_t v2 = (void *)qword_1EB5D1880;
  qword_1EB5D1880 = v1;
}

id FCDeviceIdentifierForVendor()
{
  if (qword_1EB5D1898 != -1) {
    dispatch_once(&qword_1EB5D1898, &__block_literal_global_11_4);
  }
  id v0 = (void *)qword_1EB5D1890;
  return v0;
}

void __FCDeviceIdentifierForVendor_block_invoke()
{
  id v0 = NewsCoreSensitiveUserDefaults();
  uint64_t v1 = [v0 objectForKey:@"instance_identifier"];
  uint64_t v2 = (void *)qword_1EB5D1890;
  qword_1EB5D1890 = v1;

  if (!qword_1EB5D1890)
  {
    id v3 = [MEMORY[0x1E4F223E0] defaultWorkspace];
    id v4 = [v3 deviceIdentifierForVendor];
    uint64_t v5 = [v4 UUIDString];
    uint64_t v6 = [v5 copy];
    id v7 = (void *)qword_1EB5D1890;
    qword_1EB5D1890 = v6;

    if (!qword_1EB5D1890)
    {
      char v8 = FCDefaultLog;
      if (os_log_type_enabled((os_log_t)FCDefaultLog, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)char v13 = 0;
        _os_log_impl(&dword_1A460D000, v8, OS_LOG_TYPE_DEFAULT, "falling back to custom UUID for device identifier", v13, 2u);
      }
      unsigned int v9 = [MEMORY[0x1E4F29128] UUID];
      uint64_t v10 = [v9 UUIDString];
      uint64_t v11 = (void *)qword_1EB5D1890;
      qword_1EB5D1890 = v10;
    }
    unint64_t v12 = NewsCoreSensitiveUserDefaults();
    [v12 setObject:qword_1EB5D1890 forKey:@"instance_identifier"];
  }
}

void sub_1A4878354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id FCLookupRecordByName(void *a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a2;
  id v3 = (void *)MEMORY[0x1E4F1C978];
  id v4 = a2;
  id v5 = a1;
  uint64_t v6 = [v3 arrayWithObjects:&v10 count:1];

  id v7 = FCLookupRecordByNames(v5, v6);

  char v8 = objc_msgSend(v7, "fc_onlyObject", v10, v11);

  return v8;
}

id FCFeedItemRecordsForArticle(void *a1, void *a2)
{
  v13[2] = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1E4F28F60];
  id v4 = a2;
  id v5 = a1;
  uint64_t v6 = [v3 predicateWithFormat:@"%K == %@", @"recordType", @"FeedItem"];
  id v7 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%@ == %K", v4, @"articleID"];

  char v8 = (void *)MEMORY[0x1E4F28BA0];
  v13[0] = v7;
  v13[1] = v6;
  unsigned int v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v13 count:2];
  uint64_t v10 = [v8 andPredicateWithSubpredicates:v9];
  uint64_t v11 = [v5 filteredArrayUsingPredicate:v10];

  return v11;
}

id FCSortedFeedItemRecordsForFeedID(void *a1, void *a2)
{
  v18[2] = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1E4F28F60];
  id v4 = a2;
  id v5 = a1;
  uint64_t v6 = [v3 predicateWithFormat:@"%K == %@", @"recordType", @"FeedItem"];
  id v7 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%@ == %K", v4, @"tagID"];

  char v8 = (void *)MEMORY[0x1E4F28BA0];
  v18[0] = v7;
  v18[1] = v6;
  unsigned int v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v18 count:2];
  uint64_t v10 = [v8 andPredicateWithSubpredicates:v9];
  uint64_t v11 = [v5 filteredArrayUsingPredicate:v10];

  unint64_t v12 = [MEMORY[0x1E4F29008] sortDescriptorWithKey:@"order" ascending:0];
  char v13 = [MEMORY[0x1E4F29008] sortDescriptorWithKey:@"subOrder" ascending:0];
  v17[0] = v12;
  v17[1] = v13;
  BOOL v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v17 count:2];
  int v15 = [v11 sortedArrayUsingDescriptors:v14];

  return v15;
}

id FCLookupFeedItemRecordByFeedAndArticle(void *a1, void *a2, void *a3)
{
  void v18[3] = *MEMORY[0x1E4F143B8];
  id v5 = (void *)MEMORY[0x1E4F28F60];
  id v6 = a3;
  id v7 = a2;
  id v8 = a1;
  unsigned int v9 = [v5 predicateWithFormat:@"%K == %@", @"recordType", @"FeedItem"];
  uint64_t v10 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%@ == %K", v7, @"tagID"];

  uint64_t v11 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%@ == %K", v6, @"articleID"];

  unint64_t v12 = (void *)MEMORY[0x1E4F28BA0];
  v18[0] = v10;
  v18[1] = v11;
  v18[2] = v9;
  char v13 = [MEMORY[0x1E4F1C978] arrayWithObjects:v18 count:3];
  BOOL v14 = [v12 andPredicateWithSubpredicates:v13];
  int v15 = [v8 filteredArrayUsingPredicate:v14];

  int v16 = objc_msgSend(v15, "fc_onlyObject");

  return v16;
}

id FCLookupRecordByNames(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1E4F1CAD0];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __FCLookupRecordByNames_block_invoke;
  v11[3] = &unk_1E5B4C2F0;
  id v12 = v3;
  id v5 = v3;
  id v6 = a1;
  id v7 = objc_msgSend(v4, "fc_set:", v11);
  id v8 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%@ CONTAINS %K", v7, @"recordID"];
  unsigned int v9 = [v6 filteredArrayUsingPredicate:v8];

  return v9;
}

void __FCLookupRecordByNames_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v12 + 1) + 8 * v8);
        id v10 = objc_alloc(MEMORY[0x1E4F1A2F8]);
        uint64_t v11 = objc_msgSend(v10, "initWithRecordName:", v9, (void)v12);
        [v3 addObject:v11];

        ++v8;
      }
      while (v6 != v8);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }
}

void sub_1A4883378(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1A48841B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A488438C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A488717C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose((const void *)(v38 - 216), 8);
  _Block_object_dispose((const void *)(v38 - 184), 8);
  _Block_object_dispose((const void *)(v38 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1A4888490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2 == 1)
  {
    id v12 = objc_begin_catch(exception_object);
    (*(void (**)(uint64_t))(v11 + 16))(v11);
    objc_claimAutoreleasedReturnValue();

    objc_end_catch();
    JUMPOUT(0x1A488844CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A4889418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

void enumerateOrderedCollectionPairwise(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ((unint64_t)[v3 count] >= 2)
  {
    v8[0] = 0;
    v8[1] = v8;
    _OWORD v8[2] = 0x3032000000;
    _OWORD v8[3] = __Block_byref_object_copy__54;
    void v8[4] = __Block_byref_object_dispose__54;
    id v9 = 0;
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = __enumerateOrderedCollectionPairwise_block_invoke;
    void v5[3] = &unk_1E5B58458;
    id v6 = v4;
    uint64_t v7 = v8;
    [v3 enumerateObjectsUsingBlock:v5];

    _Block_object_dispose(v8, 8);
  }
}

void sub_1A488B8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __enumerateOrderedCollectionPairwise_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

BOOL isOrderedCollectionSorted(void *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v4)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    LOBYTE(v13) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    _OWORD v9[2] = __isOrderedCollectionSorted_block_invoke;
    v9[3] = &unk_1E5B58480;
    id v10 = v4;
    uint64_t v11 = buf;
    enumerateOrderedCollectionPairwise(v3, v9);

    BOOL v6 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "cmptr");
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "BOOL isOrderedCollectionSorted(__strong id<FCOrderedCollection>, __strong NSComparator)";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "FCOrderedCollection.m";
      *(_WORD *)&unsigned char buf[22] = 1024;
      int v13 = 34;
      __int16 v14 = 2114;
      long long v15 = v8;
      _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
    }
    BOOL v6 = 0;
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    LOBYTE(v13) = 0;
  }
  _Block_object_dispose(buf, 8);

  return v6;
}

void sub_1A488BB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __isOrderedCollectionSorted_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (result == 1)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    *a5 = 1;
  }
  return result;
}

id mergeSortedOrderedCollections(void *a1, void *a2, void *a3)
{
  v22[2] = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = v7;
  if (v5)
  {
    if (v7)
    {
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();
      id v10 = [MEMORY[0x1E4F28E60] indexSet];
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      v22[0] = 0;
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      void v15[2] = __mergeSortedOrderedCollections_block_invoke;
      v15[3] = &unk_1E5B584A8;
      id v16 = v6;
      unsigned int v19 = buf;
      id v18 = v8;
      char v20 = isKindOfClass & 1;
      id v11 = v10;
      id v17 = v11;
      [v5 enumerateObjectsUsingBlock:v15];

      _Block_object_dispose(buf, 8);
      goto LABEL_10;
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v13 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "engulfee");
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "NSIndexSet *mergeSortedOrderedCollections(__strong id<FCOrderedCollection>, __strong id<FCOrd"
                           "eredMutableCollection>, __strong NSComparator)";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "FCOrderedCollection.m";
      *(_WORD *)&unsigned char buf[22] = 1024;
      LODWORD(v22[0]) = 59;
      WORD2(v22[0]) = 2114;
      *(void *)((char *)v22 + 6) = v13;
      _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
    }
    if (v8) {
      goto LABEL_9;
    }
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    __int16 v14 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "cmptr");
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "NSIndexSet *mergeSortedOrderedCollections(__strong id<FCOrderedCollection>, __strong id<FCOrder"
                         "edMutableCollection>, __strong NSComparator)";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "FCOrderedCollection.m";
    *(_WORD *)&unsigned char buf[22] = 1024;
    LODWORD(v22[0]) = 60;
    WORD2(v22[0]) = 2114;
    *(void *)((char *)v22 + 6) = v14;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
LABEL_9:
  id v11 = 0;
LABEL_10:

  return v11;
}

void sub_1A488BEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __mergeSortedOrderedCollections_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  unint64_t v4 = [*(id *)(a1 + 32) count];
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  unint64_t v6 = objc_msgSend(*(id *)(a1 + 32), "indexOfObject:inSortedRange:options:usingComparator:", v3, v5, v4 - v5, 1024, *(void *)(a1 + 48));
  unint64_t v7 = v6;
  if (*(unsigned char *)(a1 + 64)) {
    BOOL v8 = v6 >= v4;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8
    || (uint64_t v9 = *(void *)(a1 + 48),
        [*(id *)(a1 + 32) objectAtIndexedSubscript:v6],
        id v10 = objc_claimAutoreleasedReturnValue(),
        uint64_t v11 = (*(uint64_t (**)(uint64_t, void *, id))(v9 + 16))(v9, v10, v3),
        v10,
        v11))
  {
    uint64_t v12 = [*(id *)(a1 + 32) count];
    [*(id *)(a1 + 32) insertObject:v3 atIndex:v7];
    if ([*(id *)(a1 + 32) count] == v12 + 1)
    {
      [*(id *)(a1 + 40) addIndex:v7];
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v13 = (void *)[[NSString alloc] initWithFormat:@"failed to insert %@", v3];
      *(_DWORD *)buf = 136315906;
      long long v15 = "NSIndexSet *mergeSortedOrderedCollections(__strong id<FCOrderedCollection>, __strong id<FCOrderedMutableColl"
            "ection>, __strong NSComparator)_block_invoke";
      __int16 v16 = 2080;
      id v17 = "FCOrderedCollection.m";
      __int16 v18 = 1024;
      int v19 = 93;
      __int16 v20 = 2114;
      uint64_t v21 = v13;
      _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
    }
  }
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v7;
}

id diffSortedOrderedCollections(void *a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  unint64_t v7 = a3;
  if (!v6 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    __int16 v20 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "rightCollection");
    *(_DWORD *)buf = 136315906;
    char v26 = "NSDictionary *diffSortedOrderedCollections(__strong id<FCOrderedCollection>, __strong id<FCOrderedCollection>,"
          " __strong NSComparator)";
    __int16 v27 = 2080;
    uint64_t v28 = "FCOrderedCollection.m";
    __int16 v29 = 1024;
    int v30 = 123;
    __int16 v31 = 2114;
    long long v32 = v20;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

    if (v5) {
      goto LABEL_6;
    }
  }
  else if (v5)
  {
    goto LABEL_6;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v21 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "leftCollection");
    *(_DWORD *)buf = 136315906;
    char v26 = "NSDictionary *diffSortedOrderedCollections(__strong id<FCOrderedCollection>, __strong id<FCOrderedCollection>,"
          " __strong NSComparator)";
    __int16 v27 = 2080;
    uint64_t v28 = "FCOrderedCollection.m";
    __int16 v29 = 1024;
    int v30 = 124;
    __int16 v31 = 2114;
    long long v32 = v21;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
LABEL_6:
  if (v7)
  {
    BOOL v8 = 0;
    if (v5 && v6)
    {
      uint64_t v9 = objc_opt_new();
      id v10 = objc_opt_new();
      if ([v5 count])
      {
        unint64_t v11 = 0;
        unint64_t v12 = 0;
        while (1)
        {
          if (v12 >= [v6 count]) {
            goto LABEL_25;
          }
          int v13 = [v5 objectAtIndexedSubscript:v11];
          __int16 v14 = [v6 objectAtIndexedSubscript:v12];
          uint64_t v15 = v7[2](v7, v13, v14);
          if (v15 == 1)
          {
            [v9 addIndex:v12];
          }
          else
          {
            if (v15)
            {
              if (v15 == -1) {
                [v10 addIndex:v11++];
              }
              goto LABEL_19;
            }
            ++v11;
          }
          ++v12;
LABEL_19:

          if (v11 >= [v5 count]) {
            goto LABEL_25;
          }
        }
      }
      unint64_t v12 = 0;
      unint64_t v11 = 0;
LABEL_25:
      if (v11 >= [v5 count])
      {
        if (v12 >= [v6 count])
        {
LABEL_30:
          v23[0] = @"insertedIndices";
          v23[1] = @"deletedIndices";
          v24[0] = v9;
          v24[1] = v10;
          BOOL v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:v23 count:2];

          goto LABEL_31;
        }
        unint64_t v18 = v11 - [v10 count];
        unint64_t v11 = v18 + [v9 count];
        __int16 v16 = v6;
        id v17 = v9;
      }
      else
      {
        __int16 v16 = v5;
        unint64_t v12 = v11;
        id v17 = v10;
      }
      objc_msgSend(v17, "addIndexesInRange:", v11, objc_msgSend(v16, "count") - v12);
      goto LABEL_30;
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "cmptr");
      *(_DWORD *)buf = 136315906;
      char v26 = "NSDictionary *diffSortedOrderedCollections(__strong id<FCOrderedCollection>, __strong id<FCOrderedCollection"
            ">, __strong NSComparator)";
      __int16 v27 = 2080;
      uint64_t v28 = "FCOrderedCollection.m";
      __int16 v29 = 1024;
      int v30 = 125;
      __int16 v31 = 2114;
      long long v32 = v22;
      _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
    }
    BOOL v8 = 0;
  }
LABEL_31:

  return v8;
}

id findObjectWithFeatureInSortedOrderedCollection(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v18 = a2;
  BOOL v8 = a3;
  uint64_t v9 = a4;
  if ([v7 count])
  {
    uint64_t v10 = [v7 count] - 1;
    if (v10 >= 0)
    {
      uint64_t v11 = 0;
      do
      {
        uint64_t v12 = v11 + v10;
        if (v11 + v10 < 0 != __OFADD__(v11, v10)) {
          ++v12;
        }
        uint64_t v13 = (uint64_t)(double)(v12 >> 1);
        __int16 v14 = [v7 objectAtIndexedSubscript:v13];
        uint64_t v15 = v8[2](v8, v14);
        uint64_t v16 = v9[2](v9, v15, v18);
        switch(v16)
        {
          case -1:
            uint64_t v11 = v13 + 1;
            break;
          case 1:
            uint64_t v10 = v13 - 1;
            break;
          case 0:

            goto LABEL_14;
        }
      }
      while (v11 <= v10);
    }
  }
  __int16 v14 = 0;
LABEL_14:

  return v14;
}

void sub_1A488D6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A488F6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1A488F98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1A4890768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *FCCKPrivateDatabaseVersionString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"Base";
  }
  else {
    return off_1E5B58898[a1 - 1];
  }
}

uint64_t FCCKPrivateDatabaseVersionMin(uint64_t result, uint64_t a2)
{
  if (result >= a2) {
    return a2;
  }
  return result;
}

uint64_t FCCKPrivateDatabaseVersionMin3(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 >= a3) {
    uint64_t v3 = a3;
  }
  else {
    uint64_t v3 = a2;
  }
  if (v3 < result) {
    return v3;
  }
  return result;
}

double FCCKPrivateDatabaseVersionDebutOS@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 0:
      double result = 0.0;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 1:
      *(void *)&double result = 11;
      *(_OWORD *)a2 = xmmword_1A4974870;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      break;
    case 2:
      *(_OWORD *)a2 = xmmword_1A4974860;
      *(void *)(a2 + 16) = 11;
      double result = 0.0;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(void *)(a2 + 56) = 0;
      break;
    case 3:
      *(_OWORD *)a2 = xmmword_1A4974820;
      *(_OWORD *)(a2 + 16) = xmmword_1A4974830;
      *(void *)&double result = 11;
      *(_OWORD *)(a2 + 32) = xmmword_1A4974840;
      *(_OWORD *)(a2 + 48) = xmmword_1A4974850;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t FCCKPrivateDatabaseVersionSupportedByOS(uint64_t *a1)
{
  uint64_t result = 3;
  unint64_t v3 = 3;
  while (1)
  {
    switch(v3)
    {
      case 1uLL:
        uint64_t v10 = 0;
        uint64_t v6 = 0;
        uint64_t v7 = 0;
        char v5 = 1;
        uint64_t v9 = 11;
        uint64_t v4 = 3;
        char v8 = 1;
        break;
      case 3uLL:
        uint64_t v4 = 0;
        char v5 = 0;
        char v8 = 0;
        uint64_t v9 = 18;
        uint64_t v10 = 15;
        uint64_t v6 = 11;
        uint64_t v7 = 2;
        break;
      case 2uLL:
        uint64_t v4 = 0;
        char v5 = 0;
        uint64_t v6 = 0;
        uint64_t v7 = 0;
        char v8 = 1;
        uint64_t v9 = 14;
        uint64_t v10 = 11;
        break;
      default:
        return result;
    }
    uint64_t v11 = *a1;
    if (!*a1 || v11 >= v9 && (v11 <= v9 ? (BOOL v12 = a1[1] < v4) : (BOOL v12 = 0), !v12))
    {
      if ((v5 & 1) != 0 || (uint64_t v13 = a1[2]) == 0 || v13 >= v10 && (v13 > v10 || (a1[3] & 0x8000000000000000) == 0))
      {
        if (v8) {
          break;
        }
        uint64_t v14 = a1[4];
        if (!v14 || v14 >= v6 && (v14 > v6 || (a1[5] & 0x8000000000000000) == 0))
        {
          uint64_t v15 = a1[6];
          if (!v15 || v15 >= v7 && (v15 > v7 || (a1[7] & 0x8000000000000000) == 0)) {
            break;
          }
        }
      }
    }
    BOOL v12 = v3-- > 1;
    if (!v12) {
      return 0;
    }
  }
  return v3;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

id FCErrorForCKError(void *a1)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 code] == 7 || (uint64_t v2 = v1, objc_msgSend(v1, "code") == 6))
  {
    unint64_t v3 = [v1 userInfo];
    uint64_t v4 = [v3 objectForKeyedSubscript:*MEMORY[0x1E4F19C60]];

    if (v4)
    {
      uint64_t v9 = @"FCErrorRetryAfter";
      v10[0] = v4;
      char v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:&v9 count:1];
    }
    else
    {
      char v5 = 0;
    }
    uint64_t v6 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v7 = [v1 localizedDescription];
    uint64_t v2 = objc_msgSend(v6, "fc_errorWithCode:description:additionalUserInfo:", 2, v7, v5);
  }
  return v2;
}

uint64_t FCXPCSuitableError()
{
  return MEMORY[0x1F40D64F8]();
}

uint64_t FCShouldErrorBeExcludedFromSimulatedCrashes(void *a1)
{
  id v1 = a1;
  if (objc_msgSend(v1, "fc_isOfflineError")) {
    goto LABEL_4;
  }
  uint64_t v2 = [v1 domain];
  if ([v2 isEqualToString:*MEMORY[0x1E4F289A0]])
  {
    uint64_t v3 = [v1 code];

    if (v3 == -1202)
    {
LABEL_4:
      uint64_t v4 = 1;
      goto LABEL_10;
    }
  }
  else
  {
  }
  char v5 = [v1 userInfo];
  uint64_t v6 = [v5 objectForKeyedSubscript:*MEMORY[0x1E4F28A50]];

  if (v6) {
    uint64_t v4 = FCShouldErrorBeExcludedFromSimulatedCrashes(v6);
  }
  else {
    uint64_t v4 = 0;
  }

LABEL_10:
  return v4;
}

void sub_1A489B780(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1A489D168(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1A489DDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Block_object_dispose((const void *)(v35 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1A48A1EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL RCRequestFeedTypeFromFCRequestFeedType(BOOL result)
{
  if (result != 2) {
    return result == 1;
  }
  return result;
}

void sub_1A48A532C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A48A73C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FCPaidAccessCheckerHasAccessToItemInline(void *a1, int a2, int a3, void *a4, char a5)
{
  id v9 = a1;
  id v10 = a4;
  uint64_t v11 = [v9 bundleSubscriptionProvider];
  BOOL v12 = [v9 purchaseProvider];
  id v13 = v11;
  id v14 = v12;
  id v15 = v10;
  if ((a2 & 1) != 0 || a3)
  {
    if (!v14
      || !a2
      || ([v14 purchasedTagIDs],
          uint64_t v16 = objc_claimAutoreleasedReturnValue(),
          char v17 = [v16 containsObject:v15],
          v16,
          (v17 & 1) == 0))
    {
      if (!v13 || !a3) {
        goto LABEL_13;
      }
      id v18 = v13;
      id v19 = v15;
      if (!v19) {
        goto LABEL_10;
      }
      uint64_t v20 = [v18 bundleSubscription];
      objc_getAssociatedObject((id)v20, (const void *)(v20 + 1));
      uint64_t v21 = v31 = v18;
      uint64_t v22 = [v21 unsignedIntegerValue];
      char v23 = v22;
      uint64_t v24 = objc_getAssociatedObject((id)v20, (const void *)~v22);
      char v25 = ([v24 unsignedIntegerValue] - a5) ^ (v23 + a5);

      id v18 = v31;
      if ((v25 & 1) == 0)
      {
LABEL_10:

LABEL_13:
        uint64_t v29 = 0;
        goto LABEL_14;
      }
      char v26 = [v31 bundleSubscription];
      __int16 v27 = [v26 bundleChannelIDs];
      char v28 = [v27 containsObject:v19];

      if ((v28 & 1) == 0) {
        goto LABEL_13;
      }
    }
  }
  uint64_t v29 = 1;
LABEL_14:

  return v29;
}

void sub_1A48A8C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t FCPurchaseTypeForpurchaseType(void *a1)
{
  return (int)[a1 intValue];
}

uint64_t FCPurchaseValidationStateForValidationState(void *a1)
{
  return (int)[a1 intValue];
}

void sub_1A48ACE9C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

id FCTagFilterOptionsToNSString(char a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v3 = v2;
  if ((a1 & 2) != 0)
  {
    [v2 addObject:@"Deprecated"];
    if ((a1 & 4) == 0)
    {
LABEL_3:
      if ((a1 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((a1 & 4) == 0)
  {
    goto LABEL_3;
  }
  [v3 addObject:@"BlockedStorefronts"];
  if ((a1 & 8) == 0)
  {
LABEL_4:
    if ((a1 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  [v3 addObject:@"ExplicitContent"];
  if ((a1 & 0x10) == 0)
  {
LABEL_5:
    if ((a1 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  [v3 addObject:@"MinimumNewsVersion"];
  if ((a1 & 0x20) != 0) {
LABEL_6:
  }
    [v3 addObject:@"MutedChannels"];
LABEL_7:
  uint64_t v4 = NSString;
  char v5 = [v3 componentsJoinedByString:@", "];
  uint64_t v6 = [v4 stringWithFormat:@"[%@]", v5];

  return v6;
}

uint64_t FCCKPRequestOperationHeaderReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  char v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 2u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 64;
        goto LABEL_98;
      case 3u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 56;
        goto LABEL_98;
      case 4u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 80;
        goto LABEL_98;
      case 5u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(_WORD *)(a1 + 220) |= 1u;
        while (2)
        {
          uint64_t v23 = *v3;
          uint64_t v24 = *(void *)(a2 + v23);
          unint64_t v25 = v24 + 1;
          if (v24 == -1 || v25 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if (v26 < 0)
            {
              v20 += 7;
              BOOL v15 = v21++ >= 9;
              if (v15)
              {
                uint64_t v22 = 0;
                goto LABEL_118;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_118:
        uint64_t v89 = 8;
        goto LABEL_152;
      case 6u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v22 = 0;
        *(_WORD *)(a1 + 220) |= 0x10u;
        while (2)
        {
          uint64_t v29 = *v3;
          uint64_t v30 = *(void *)(a2 + v29);
          unint64_t v31 = v30 + 1;
          if (v30 == -1 || v31 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v31;
            v22 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              BOOL v15 = v28++ >= 9;
              if (v15)
              {
                uint64_t v22 = 0;
                goto LABEL_122;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_122:
        uint64_t v89 = 40;
        goto LABEL_152;
      case 7u:
        uint64_t v33 = objc_alloc_init(FCCKPIdentifier);
        objc_storeStrong((id *)(a1 + 136), v33);
        if (!PBReaderPlaceMark() || (FCCKPIdentifierReadFrom((uint64_t)v33, a2) & 1) == 0) {
          goto LABEL_162;
        }
        goto LABEL_70;
      case 8u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 160;
        goto LABEL_98;
      case 9u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 128;
        goto LABEL_98;
      case 0xAu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 144;
        goto LABEL_98;
      case 0xBu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 152;
        goto LABEL_98;
      case 0xCu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 104;
        goto LABEL_98;
      case 0xDu:
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v22 = 0;
        *(_WORD *)(a1 + 220) |= 2u;
        while (2)
        {
          uint64_t v36 = *v3;
          uint64_t v37 = *(void *)(a2 + v36);
          unint64_t v38 = v37 + 1;
          if (v37 == -1 || v38 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
            *(void *)(a2 + v36) = v38;
            v22 |= (unint64_t)(v39 & 0x7F) << v34;
            if (v39 < 0)
            {
              v34 += 7;
              BOOL v15 = v35++ >= 9;
              if (v15)
              {
                uint64_t v22 = 0;
                goto LABEL_126;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_126:
        uint64_t v89 = 16;
        goto LABEL_152;
      case 0xEu:
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v22 = 0;
        *(_WORD *)(a1 + 220) |= 4u;
        while (2)
        {
          uint64_t v42 = *v3;
          uint64_t v43 = *(void *)(a2 + v42);
          unint64_t v44 = v43 + 1;
          if (v43 == -1 || v44 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v45 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
            *(void *)(a2 + v42) = v44;
            v22 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              BOOL v15 = v41++ >= 9;
              if (v15)
              {
                uint64_t v22 = 0;
                goto LABEL_130;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_130:
        uint64_t v89 = 24;
        goto LABEL_152;
      case 0xFu:
        *(_WORD *)(a1 + 220) |= 0x80u;
        uint64_t v46 = *v3;
        unint64_t v47 = *(void *)(a2 + v46);
        if (v47 <= 0xFFFFFFFFFFFFFFFBLL && v47 + 4 <= *(void *)(a2 + *v4))
        {
          int v48 = *(_DWORD *)(*(void *)(a2 + *v7) + v47);
          *(void *)(a2 + v46) = v47 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          int v48 = 0;
        }
        *(_DWORD *)(a1 + 112) = v48;
        goto LABEL_153;
      case 0x10u:
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v22 = 0;
        *(_WORD *)(a1 + 220) |= 8u;
        while (2)
        {
          uint64_t v51 = *v3;
          uint64_t v52 = *(void *)(a2 + v51);
          unint64_t v53 = v52 + 1;
          if (v52 == -1 || v53 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v54 = *(unsigned char *)(*(void *)(a2 + *v7) + v52);
            *(void *)(a2 + v51) = v53;
            v22 |= (unint64_t)(v54 & 0x7F) << v49;
            if (v54 < 0)
            {
              v49 += 7;
              BOOL v15 = v50++ >= 9;
              if (v15)
              {
                uint64_t v22 = 0;
                goto LABEL_134;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_134:
        uint64_t v89 = 32;
        goto LABEL_152;
      case 0x11u:
        uint64_t v33 = objc_alloc_init(FCCKPLocale);
        objc_storeStrong((id *)(a1 + 176), v33);
        if (PBReaderPlaceMark() && FCCKPLocaleReadFrom((uint64_t)v33, a2))
        {
LABEL_70:
          PBReaderRecallMark();

LABEL_153:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_162:

        return 0;
      case 0x12u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 184;
        goto LABEL_98;
      case 0x13u:
        char v55 = 0;
        unsigned int v56 = 0;
        uint64_t v57 = 0;
        *(_WORD *)(a1 + 220) |= 0x40u;
        while (2)
        {
          uint64_t v58 = *v3;
          uint64_t v59 = *(void *)(a2 + v58);
          unint64_t v60 = v59 + 1;
          if (v59 == -1 || v60 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v61 = *(unsigned char *)(*(void *)(a2 + *v7) + v59);
            *(void *)(a2 + v58) = v60;
            v57 |= (unint64_t)(v61 & 0x7F) << v55;
            if (v61 < 0)
            {
              v55 += 7;
              BOOL v15 = v56++ >= 9;
              if (v15)
              {
                LODWORD(v57) = 0;
                goto LABEL_138;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v57) = 0;
        }
LABEL_138:
        uint64_t v90 = 72;
        goto LABEL_147;
      case 0x14u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 88;
        goto LABEL_98;
      case 0x15u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 96;
        goto LABEL_98;
      case 0x16u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 120;
        goto LABEL_98;
      case 0x17u:
        char v62 = 0;
        unsigned int v63 = 0;
        uint64_t v57 = 0;
        *(_WORD *)(a1 + 220) |= 0x200u;
        while (2)
        {
          uint64_t v64 = *v3;
          uint64_t v65 = *(void *)(a2 + v64);
          unint64_t v66 = v65 + 1;
          if (v65 == -1 || v66 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v67 = *(unsigned char *)(*(void *)(a2 + *v7) + v65);
            *(void *)(a2 + v64) = v66;
            v57 |= (unint64_t)(v67 & 0x7F) << v62;
            if (v67 < 0)
            {
              v62 += 7;
              BOOL v15 = v63++ >= 9;
              if (v15)
              {
                LODWORD(v57) = 0;
                goto LABEL_142;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v57) = 0;
        }
LABEL_142:
        uint64_t v90 = 200;
        goto LABEL_147;
      case 0x18u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 208;
        goto LABEL_98;
      case 0x19u:
        char v68 = 0;
        unsigned int v69 = 0;
        uint64_t v57 = 0;
        *(_WORD *)(a1 + 220) |= 0x100u;
        while (2)
        {
          uint64_t v70 = *v3;
          uint64_t v71 = *(void *)(a2 + v70);
          unint64_t v72 = v71 + 1;
          if (v71 == -1 || v72 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v73 = *(unsigned char *)(*(void *)(a2 + *v7) + v71);
            *(void *)(a2 + v70) = v72;
            v57 |= (unint64_t)(v73 & 0x7F) << v68;
            if (v73 < 0)
            {
              v68 += 7;
              BOOL v15 = v69++ >= 9;
              if (v15)
              {
                LODWORD(v57) = 0;
                goto LABEL_146;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v57) = 0;
        }
LABEL_146:
        uint64_t v90 = 168;
LABEL_147:
        *(_DWORD *)(a1 + v90) = v57;
        goto LABEL_153;
      case 0x1Au:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 192;
LABEL_98:
        id v74 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_153;
      case 0x1Bu:
        char v75 = 0;
        unsigned int v76 = 0;
        uint64_t v22 = 0;
        *(_WORD *)(a1 + 220) |= 0x20u;
        while (2)
        {
          uint64_t v77 = *v3;
          uint64_t v78 = *(void *)(a2 + v77);
          unint64_t v79 = v78 + 1;
          if (v78 == -1 || v79 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v80 = *(unsigned char *)(*(void *)(a2 + *v7) + v78);
            *(void *)(a2 + v77) = v79;
            v22 |= (unint64_t)(v80 & 0x7F) << v75;
            if (v80 < 0)
            {
              v75 += 7;
              BOOL v15 = v76++ >= 9;
              if (v15)
              {
                uint64_t v22 = 0;
                goto LABEL_151;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_151:
        uint64_t v89 = 48;
LABEL_152:
        *(void *)(a1 + v89) = v22;
        goto LABEL_153;
      case 0x1Du:
        char v82 = 0;
        unsigned int v83 = 0;
        uint64_t v84 = 0;
        *(_WORD *)(a1 + 220) |= 0x400u;
        while (2)
        {
          uint64_t v85 = *v3;
          uint64_t v86 = *(void *)(a2 + v85);
          unint64_t v87 = v86 + 1;
          if (v86 == -1 || v87 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v88 = *(unsigned char *)(*(void *)(a2 + *v7) + v86);
            *(void *)(a2 + v85) = v87;
            v84 |= (unint64_t)(v88 & 0x7F) << v82;
            if (v88 < 0)
            {
              v82 += 7;
              BOOL v15 = v83++ >= 9;
              if (v15)
              {
                uint64_t v84 = 0;
                goto LABEL_158;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v84 = 0;
        }
LABEL_158:
        *(unsigned char *)(a1 + 216) = v84 != 0;
        goto LABEL_153;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_153;
    }
  }
}

void sub_1A48B66A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void FCAppConfigurationFetch(void *a1, void *a2)
{
  id v7 = a1;
  uint64_t v3 = a2;
  uint64_t v4 = [v7 fetchedAppConfiguration];
  if (v4)
  {
    if (v3) {
      v3[2](v3, v4, 0);
    }
  }
  else
  {
    uint64_t v5 = FCCurrentQoSOrUtilityIfMain();
    uint64_t v6 = FCDispatchQueueForQualityOfService(v5);
    [v7 fetchAppConfigurationIfNeededWithCompletionQueue:v6 completion:v3];
  }
}

void sub_1A48B96C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A48B9814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id FCBucketForFeldsparID(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    id v2 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v1, "hash"));
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

unint64_t FCModdedBucketID(void *a1, unint64_t a2)
{
  unint64_t result = 0;
  if (a1)
  {
    if (a2) {
      return [a1 unsignedIntegerValue] % a2;
    }
  }
  return result;
}

BOOL FCIsUserInExperiment(unint64_t a1, double a2, double a3)
{
  return (double)a1 < a3 && (double)a1 >= a2;
}

uint64_t FCEndpointEnvironmentForNTPBEndpointEnvironment(int a1)
{
  if ((a1 - 1) > 5) {
    return 0;
  }
  else {
    return qword_1A49748E0[a1 - 1];
  }
}

id FCAppConfigurationArrayValue(void *a1, uint64_t a2)
{
  return FCAppConfigurationArrayValueWithDefaultValue(a1, a2, 0);
}

uint64_t FCStoryStyleConfigurationsFromStoryStyleConfigDicts(void *a1, const char *a2)
{
  return objc_msgSend(a1, "fc_dictionaryWithKeyBlock:valueBlock:", &__block_literal_global_275, &__block_literal_global_281_0);
}

id FCAppConfigurationDictionaryValue(void *a1, uint64_t a2)
{
  return FCAppConfigurationDictionaryValueWithDefaultValue(a1, a2, 0);
}

uint64_t fc_ensure(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

double fc_ensureGreaterThanZero(double result, double a2)
{
  if (result <= 0.0) {
    return a2;
  }
  return result;
}

double fc_ensureGreaterThanOrEqualToZero(double result, double a2)
{
  if (result < 0.0) {
    return a2;
  }
  return result;
}

double fc_ensureGreaterThanOrEqualToZeroLessThanOne(double result, double a2)
{
  if (result >= 1.0 || result < 0.0) {
    return a2;
  }
  return result;
}

double fc_ensureNormalized(double result, double a2)
{
  if (result > 1.0 || result < 0.0) {
    return a2;
  }
  return result;
}

void sub_1A48BD9F0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1A48C0658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FCArticleListTypeFromPBArticleListType(int a1)
{
  if (a1 == 2) {
    return 2;
  }
  else {
    return a1 == 1;
  }
}

BOOL FCArticleListHasMetadataFromPBArticleListType(int a1)
{
  return (a1 - 1) < 2;
}

uint64_t PBArticleListTypeFromString(uint64_t result)
{
  if (result)
  {
    id v1 = (id)result;
    BOOL v2 = [v1 caseInsensitiveCompare:@"editorial"] == 0;
    uint64_t v3 = [v1 caseInsensitiveCompare:@"people-also-coread"];

    if (v3) {
      return v2;
    }
    else {
      return 2;
    }
  }
  return result;
}

uint64_t cloudKitValueFromEntryOrigin(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 3) {
    return 0;
  }
  return result;
}

uint64_t entryOriginFromCloudKitValue(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 3) {
    return 0;
  }
  return result;
}

void sub_1A48C7E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unint64_t FCSecondsToMilliseconds(double a1)
{
  return (unint64_t)(fmax(a1, 0.0) * 1000.0);
}

double FCMillisecondsToSeconds(unint64_t a1)
{
  return (double)a1 / 1000.0;
}

void sub_1A48CEF10(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

BOOL FCCKPRecordRetrieveRequestReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(FCCKPRecordIdentifier);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (PBReaderPlaceMark() && FCCKPRecordIdentifierReadFrom((uint64_t)v17, a2)) {
          goto LABEL_26;
        }
        goto LABEL_34;
      case 2u:
        char v17 = objc_alloc_init(FCCKPRequestedFields);
        objc_storeStrong((id *)(a1 + 24), v17);
        if PBReaderPlaceMark() && (FCCKPRequestedFieldsReadFrom((uint64_t)v17, a2))
        {
LABEL_26:
          PBReaderRecallMark();
LABEL_30:

LABEL_31:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_34:

        return 0;
      case 3u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 32;
        goto LABEL_29;
      case 4u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 8;
LABEL_29:
        char v17 = *(FCCKPRecordIdentifier **)(a1 + v19);
        *(void *)(a1 + v19) = v18;
        goto LABEL_30;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_31;
    }
  }
}

void sub_1A48D39BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_1A48D5620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A48D675C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1A48D80E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  objc_destroyWeak(v17);
  _Block_object_dispose(&a16, 8);
  objc_destroyWeak(v16);
  objc_destroyWeak((id *)(v18 - 56));
  _Unwind_Resume(a1);
}

void sub_1A48D82F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_1A48D850C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A48D8728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_1A48D9208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL FCCKPConfigurationFieldReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(FCCKPConfigurationFieldValue **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = objc_alloc_init(FCCKPConfigurationFieldValue);
    objc_storeStrong((id *)(a1 + 16), v18);
    if (!PBReaderPlaceMark() || (FCCKPConfigurationFieldValueReadFrom(v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id FCBlockConjunction(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  _OWORD v9[2] = __FCBlockConjunction_block_invoke;
  v9[3] = &unk_1E5B4E128;
  id v10 = v3;
  id v11 = v4;
  id v5 = v4;
  id v6 = v3;
  id v7 = _Block_copy(v9);

  return v7;
}

uint64_t __FCBlockConjunction_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

void FCWaitUntilBlockIsInvoked(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  if (!v1 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    id v5 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "block");
    *(_DWORD *)buf = 136315906;
    unsigned int v9 = "void FCWaitUntilBlockIsInvoked(FCAsyncOperationBlock  _Nonnull __strong)";
    __int16 v10 = 2080;
    id v11 = "FCBlockUtilities.m";
    __int16 v12 = 1024;
    int v13 = 47;
    __int16 v14 = 2114;
    int v15 = v5;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  _OWORD v6[2] = __FCWaitUntilBlockIsInvoked_block_invoke;
  v6[3] = &unk_1E5B4C018;
  dispatch_semaphore_t v7 = v2;
  id v3 = (void (*)(void *, void *))v1[2];
  id v4 = v2;
  v3(v1, v6);
  dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
}

intptr_t __FCWaitUntilBlockIsInvoked_block_invoke(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t FCQoSClassFromQoS(uint64_t a1)
{
  if (a1 == 33) {
    int v1 = 33;
  }
  else {
    int v1 = 0;
  }
  if (a1 == 25) {
    int v2 = 25;
  }
  else {
    int v2 = v1;
  }
  if (a1 == 17) {
    unsigned int v3 = 17;
  }
  else {
    unsigned int v3 = v2;
  }
  if (a1 == 9) {
    int v4 = 9;
  }
  else {
    int v4 = 0;
  }
  if (a1 == -1) {
    unsigned int v5 = 21;
  }
  else {
    unsigned int v5 = v4;
  }
  if (a1 <= 16) {
    return v5;
  }
  else {
    return v3;
  }
}

uint64_t FCQoSFromQoSClass(int a1)
{
  HIDWORD(v1) = a1 - 9;
  LODWORD(v1) = a1 - 9;
  uint64_t v2 = 8 * (v1 >> 3) + 9;
  if ((v1 >> 3) >= 4) {
    return -1;
  }
  else {
    return v2;
  }
}

void FCDispatchAfterWithQualityOfService(dispatch_time_t a1, void *a2, uint64_t a3, void *a4)
{
  dispatch_semaphore_t v7 = a2;
  FCBlockWithQualityOfService(a3, a4);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  dispatch_after(a1, v7, v8);
}

void FCDispatchGroupNotifyWithQualityOfService(void *a1, void *a2, uint64_t a3, void *a4)
{
  dispatch_semaphore_t v7 = a2;
  id v8 = a1;
  FCBlockWithQualityOfService(a3, a4);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  dispatch_group_notify(v8, v7, v9);
}

void FCDispatchAsyncWithQoSPropagation(void *a1, void *a2)
{
  unsigned int v3 = a1;
  id v4 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, a2);
  dispatch_async(v3, v4);
}

void FCDispatchGroupNotifyWithTimeout(void *a1, void *a2, dispatch_time_t a3, void *a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  dispatch_semaphore_t v7 = a1;
  id v8 = a2;
  id v9 = a4;
  if (!v7 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    __int16 v14 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "group");
    *(_DWORD *)buf = 136315906;
    uint64_t v23 = "void FCDispatchGroupNotifyWithTimeout(dispatch_group_t  _Nonnull __strong, dispatch_queue_t  _Nonnull __strong"
          ", dispatch_time_t, FCTimeoutBlock  _Nonnull __strong)";
    __int16 v24 = 2080;
    unint64_t v25 = "FCBlockUtilities.m";
    __int16 v26 = 1024;
    int v27 = 175;
    __int16 v28 = 2114;
    uint64_t v29 = v14;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

    if (v8) {
      goto LABEL_6;
    }
  }
  else if (v8)
  {
    goto LABEL_6;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v15 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "queue");
    *(_DWORD *)buf = 136315906;
    uint64_t v23 = "void FCDispatchGroupNotifyWithTimeout(dispatch_group_t  _Nonnull __strong, dispatch_queue_t  _Nonnull __strong"
          ", dispatch_time_t, FCTimeoutBlock  _Nonnull __strong)";
    __int16 v24 = 2080;
    unint64_t v25 = "FCBlockUtilities.m";
    __int16 v26 = 1024;
    int v27 = 176;
    __int16 v28 = 2114;
    uint64_t v29 = v15;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
LABEL_6:
  if (!v9 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v16 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "block");
    *(_DWORD *)buf = 136315906;
    uint64_t v23 = "void FCDispatchGroupNotifyWithTimeout(dispatch_group_t  _Nonnull __strong, dispatch_queue_t  _Nonnull __strong"
          ", dispatch_time_t, FCTimeoutBlock  _Nonnull __strong)";
    __int16 v24 = 2080;
    unint64_t v25 = "FCBlockUtilities.m";
    __int16 v26 = 1024;
    int v27 = 177;
    __int16 v28 = 2114;
    uint64_t v29 = v16;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  void v20[2] = __FCDispatchGroupNotifyWithTimeout_block_invoke;
  v20[3] = &unk_1E5B4CA88;
  id v10 = v9;
  id v21 = v10;
  id v11 = FCHandleOperationTimeout(a3, v8, v20);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FCDispatchGroupNotifyWithTimeout_block_invoke_2;
  block[3] = &unk_1E5B4E128;
  id v18 = v11;
  id v19 = v10;
  id v12 = v10;
  id v13 = v11;
  dispatch_group_notify(v7, v8, block);
}

uint64_t __FCDispatchGroupNotifyWithTimeout_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __FCDispatchGroupNotifyWithTimeout_block_invoke_2(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if ((result & 1) == 0)
  {
    unsigned int v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
    return v3();
  }
  return result;
}

id FCHandleOperationCancellation(void *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (!a1 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    id v11 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "cancellationTrigger");
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "FCOperationCancelledTest  _Nonnull FCHandleOperationCancellation(__autoreleasing dispatch_block"
                         "_t * _Nonnull, __strong dispatch_block_t _Nonnull)";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "FCBlockUtilities.m";
    *(_WORD *)&unsigned char buf[22] = 1024;
    LODWORD(v25) = 195;
    WORD2(v25) = 2114;
    *(void *)((char *)&v25 + 6) = v11;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
  if (!v3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    id v12 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "cancellationHandler");
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "FCOperationCancelledTest  _Nonnull FCHandleOperationCancellation(__autoreleasing dispatch_block"
                         "_t * _Nonnull, __strong dispatch_block_t _Nonnull)";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "FCBlockUtilities.m";
    *(_WORD *)&unsigned char buf[22] = 1024;
    LODWORD(v25) = 196;
    WORD2(v25) = 2114;
    *(void *)((char *)&v25 + 6) = v12;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x2020000000;
  char v23 = 0;
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  *(void *)&long long v25 = __Block_byref_object_copy__71;
  *((void *)&v25 + 1) = __Block_byref_object_dispose__71;
  id v26 = _Block_copy(v3);
  id v4 = objc_opt_new();
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __FCHandleOperationCancellation_block_invoke;
  aBlock[3] = &unk_1E5B5A3D8;
  id v20 = v4;
  id v21 = v22;
  id v5 = v4;
  id v6 = _Block_copy(aBlock);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FCHandleOperationCancellation_block_invoke_3;
  block[3] = &unk_1E5B4CDE8;
  id v7 = v6;
  id v17 = v7;
  id v18 = buf;
  *a1 = dispatch_block_create((dispatch_block_flags_t)0, block);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = __FCHandleOperationCancellation_block_invoke_4;
  void v13[3] = &unk_1E5B5A400;
  id v14 = v7;
  int v15 = buf;
  id v8 = v7;
  id v9 = _Block_copy(v13);

  _Block_object_dispose(buf, 8);
  _Block_object_dispose(v22, 8);

  return v9;
}

void sub_1A48DBFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t __FCHandleOperationCancellation_block_invoke(uint64_t a1)
{
  uint64_t v5 = 0;
  id v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  _OWORD v4[2] = __FCHandleOperationCancellation_block_invoke_2;
  v4[3] = &unk_1E5B5A3B0;
  unint64_t v1 = *(void **)(a1 + 32);
  v4[4] = *(void *)(a1 + 40);
  void v4[5] = &v5;
  [v1 performWithLockSync:v4];
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1A48DC094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __FCHandleOperationCancellation_block_invoke_2(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 8);
  if (!*(unsigned char *)(v1 + 24))
  {
    *(unsigned char *)(v1 + 24) = 1;
    *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = 1;
  }
  return result;
}

uint64_t __FCHandleOperationCancellation_block_invoke_3(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) + 16);
    return v3();
  }
  return result;
}

uint64_t __FCHandleOperationCancellation_block_invoke_4(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0;

  return v2 ^ 1u;
}

void FCRepeat(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if (v3)
  {
    for (; a1; --a1)
      v3[2](v3);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    id v4 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "block");
    *(_DWORD *)buf = 136315906;
    id v6 = "void FCRepeat(NSUInteger, __strong dispatch_block_t _Nonnull)";
    __int16 v7 = 2080;
    char v8 = "FCBlockUtilities.m";
    __int16 v9 = 1024;
    int v10 = 281;
    __int16 v11 = 2114;
    id v12 = v4;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
}

id FCTestBlockForClass(uint64_t a1)
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __FCTestBlockForClass_block_invoke;
  aBlock[3] = &__block_descriptor_40_e8_B16__0_8lu32l8;
  void aBlock[4] = a1;
  uint64_t v1 = _Block_copy(aBlock);
  return v1;
}

uint64_t __FCTestBlockForClass_block_invoke()
{
  return objc_opt_isKindOfClass() & 1;
}

id FCTestBlockForProtocol(void *a1)
{
  id v1 = a1;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __FCTestBlockForProtocol_block_invoke;
  aBlock[3] = &unk_1E5B54780;
  id v6 = v1;
  id v2 = v1;
  uint64_t v3 = _Block_copy(aBlock);

  return v3;
}

uint64_t __FCTestBlockForProtocol_block_invoke(uint64_t a1, void *a2)
{
  return [a2 conformsToProtocol:*(void *)(a1 + 32)];
}

id FCRecursiveBlock(void *a1)
{
  id v1 = a1;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __FCRecursiveBlock_block_invoke;
  aBlock[3] = &unk_1E5B4CA88;
  id v6 = v1;
  id v2 = v1;
  uint64_t v3 = _Block_copy(aBlock);

  return v3;
}

void __FCRecursiveBlock_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  FCRecursiveBlock(v1);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1A48DCC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *FCSpecificCast(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  if ([a2 isMemberOfClass:a1]) {
    return a2;
  }
  return 0;
}

void *FCProtocolCast(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  if ([a2 conformsToProtocol:a1]) {
    return a2;
  }
  return 0;
}

void *FCClassAndProtocolCast(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __int16 v9 = a1;
  if (a1)
  {
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      return 0;
    }
    uint64_t v13 = &a9;
    if (a3)
    {
      while (1)
      {
        __int16 v11 = v13++;
        if (([v9 conformsToProtocol:*v11] & 1) == 0) {
          break;
        }
        if (!--a3) {
          return v9;
        }
      }
      return 0;
    }
  }
  return v9;
}

CFTypeRef FCCFTypeCast(uint64_t a1, CFTypeRef cf)
{
  if (!cf) {
    return 0;
  }
  if (CFGetTypeID(cf) == a1) {
    return cf;
  }
  return 0;
}

uint64_t FCCheckedStaticCast(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a2 && (objc_opt_isKindOfClass() & 1) == 0 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315906;
    uint64_t v5 = "id FCCheckedStaticCast(Class, id<NSObject>)";
    __int16 v6 = 2080;
    __int16 v7 = "FCCast.m";
    __int16 v8 = 1024;
    int v9 = 109;
    __int16 v10 = 2114;
    uint64_t v11 = [[NSString alloc] initWithFormat:@"Unexpected object type in checked static cast.  This is a serious problem and could lead to a crash, or worse."];
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v4, 0x26u);
  }
  return a2;
}

void *FCCheckedProtocolCast(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a2 && ([a2 conformsToProtocol:a1] & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315906;
      uint64_t v5 = "id FCCheckedProtocolCast(Protocol *, id<NSObject>)";
      __int16 v6 = 2080;
      __int16 v7 = "FCCast.m";
      __int16 v8 = 1024;
      int v9 = 120;
      __int16 v10 = 2114;
      uint64_t v11 = [[NSString alloc] initWithFormat:@"Unexpected object type in checked protocol cast"];
      _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v4, 0x26u);
    }
    return 0;
  }
  return v2;
}

void *FCCheckedStaticProtocolCast(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a2
    && ([a2 conformsToProtocol:a1] & 1) == 0
    && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315906;
    uint64_t v5 = "id FCCheckedStaticProtocolCast(Protocol *, id<NSObject>)";
    __int16 v6 = 2080;
    __int16 v7 = "FCCast.m";
    __int16 v8 = 1024;
    int v9 = 131;
    __int16 v10 = 2114;
    uint64_t v11 = [[NSString alloc] initWithFormat:@"Unexpected object type in checked protocol cast. This is a serious problem and could lead to a crash, or worse."];
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v4, 0x26u);
  }
  return a2;
}

void *FCPersonalizationActions()
{
  return &unk_1EF8D8CB8;
}

__CFString *NSStringFromFCPersonalizationAction(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x21) {
    return @"None";
  }
  else {
    return off_1E5B5A4E0[a1 - 1];
  }
}

uint64_t FCPersonalizationActionFromTodayPersonalizationAction(int a1)
{
  if ((a1 - 2) > 4) {
    return 22;
  }
  else {
    return qword_1A4974A80[a1 - 2];
  }
}

uint64_t FCCFArrayShortDescription(const __CFArray *a1)
{
  uint64_t v1 = +[FCDescription descriptionWithCFType:format:](FCDescription, "descriptionWithCFType:format:", a1, @"; count=%ld",
         CFArrayGetCount(a1));
  return (uint64_t)[(FCDescription *)v1 descriptionString];
}

id FCCFArrayDescription(const __CFArray *a1)
{
  id v2 = objc_retain(+[FCDescription descriptionWithCFType:format:](FCDescription, "descriptionWithCFType:format:", a1, @"; count=%ld",
           CFArrayGetCount(a1)));
  if (CFArrayGetCount(a1) >= 1)
  {
    CFIndex v3 = 0;
    do
    {
      int v4 = objc_msgSend(NSString, "stringWithFormat:", @"[%d]", v3);
      [(FCDescription *)v2 addField:v4, @"%@", CFArrayGetValueAtIndex(a1, v3) format];

      ++v3;
    }
    while (CFArrayGetCount(a1) > v3);
  }
  [(FCDescription *)v2 setFieldOptionCommaSeparated];
  uint64_t v5 = [(FCDescription *)v2 descriptionString];

  return v5;
}

id FCCFDictionaryDescription(const __CFDictionary *a1)
{
  id v2 = +[FCDescription descriptionWithCFType:a1 format:&stru_1EF8299B8];
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)CFDictionaryDescriptionApplierFunction, v2);
  CFIndex v3 = [v2 descriptionString];

  return v3;
}

uint64_t CFDictionaryDescriptionApplierFunction(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 addField:a1, @"%@", a2 format];
}

__CFString *FCObjectReferenceDescription(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    ClassName = object_getClassName(v1);
    int v4 = strcmp(ClassName, "NSCFArray");
    uint64_t v5 = NSString;
    __int16 v6 = object_getClassName(v2);
    if (v4) {
      objc_msgSend(v5, "stringWithFormat:", @"(%s*)%p", v6, v2, v9);
    }
    else {
      objc_msgSend(v5, "stringWithFormat:", @"(%s*)%p; count=%ld", v6, v2, CFArrayGetCount((CFArrayRef)v2));
    }
    __int16 v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    __int16 v7 = @"<nil>";
  }

  return v7;
}

id FCStringArrayFromBitFields(void *a1, unint64_t a2)
{
  id v3 = a1;
  int v4 = [MEMORY[0x1E4F1CA48] array];
  if ([v3 count])
  {
    unint64_t v5 = 0;
    do
    {
      __int16 v6 = [v3 objectAtIndex:v5];
      if ([v6 count])
      {
        if (((a2 >> v5) & 1) >= [v6 count]) {
          objc_msgSend(NSString, "stringWithFormat:", @"<Bad Value: %lu>", (a2 >> v5) & 1);
        }
        else {
        __int16 v7 = [v6 objectAtIndex:(a2 >> v5) & 1];
        }
        if ([v7 length]) {
          [v4 addObject:v7];
        }
      }
      ++v5;
    }
    while (v5 < [v3 count]);
  }

  return v4;
}

id FCAVWorkQueue()
{
  if (qword_1EB5D1AE0 != -1) {
    dispatch_once(&qword_1EB5D1AE0, &__block_literal_global_164);
  }
  id v0 = (void *)_MergedGlobals_216;
  return v0;
}

void __FCAVWorkQueue_block_invoke()
{
  id v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("NewsCore.AV.work", v2);
  id v1 = (void *)_MergedGlobals_216;
  _MergedGlobals_216 = (uint64_t)v0;
}

id FCAVWorkOperationQueue()
{
  if (qword_1EB5D1AF0 != -1) {
    dispatch_once(&qword_1EB5D1AF0, &__block_literal_global_4_12);
  }
  dispatch_queue_t v0 = (void *)qword_1EB5D1AE8;
  return v0;
}

uint64_t __FCAVWorkOperationQueue_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28F08]);
  id v1 = (void *)qword_1EB5D1AE8;
  qword_1EB5D1AE8 = (uint64_t)v0;

  [(id)qword_1EB5D1AE8 setMaxConcurrentOperationCount:1];
  id v2 = FCAVWorkQueue();
  [(id)qword_1EB5D1AE8 setUnderlyingQueue:v2];

  id v3 = (void *)qword_1EB5D1AE8;
  return [v3 setName:@"NewsCore.AV.work"];
}

id FCKeyIdentifiersFromHLSMetadata(void *a1)
{
  if (!a1)
  {
    uint64_t v9 = (void *)MEMORY[0x1E4F1CBF0];
    goto LABEL_15;
  }
  id v1 = (objc_class *)MEMORY[0x1E4F1C9B8];
  id v2 = a1;
  id v3 = (void *)[[v1 alloc] initWithBase64EncodedString:v2 options:0];

  if (v3)
  {
    int v4 = [MEMORY[0x1E4F28D90] JSONObjectWithData:v3 options:0 error:0];
    unint64_t v5 = v4;
    if (!v4)
    {
      uint64_t v9 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_13:

      goto LABEL_14;
    }
    id v6 = v4;
    __int16 v7 = [MEMORY[0x1E4F1CA80] set];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      __int16 v8 = [v6 objectForKey:@"uri"];
      objc_msgSend(v7, "fc_safelyAddObject:", v8);
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
LABEL_12:
        uint64_t v9 = [v7 allObjects];

        goto LABEL_13;
      }
      __int16 v8 = objc_msgSend(v6, "fc_arrayByTransformingWithBlock:", &__block_literal_global_25_2);
      objc_msgSend(v7, "fc_safelyAddObjects:", v8);
    }

    goto LABEL_12;
  }
  uint64_t v9 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_14:

LABEL_15:
  return v9;
}

uint64_t __FCKeyIdentifiersFromHLSMetadata_block_invoke_4(uint64_t a1, void *a2)
{
  return [a2 objectForKeyedSubscript:@"uri"];
}

void sub_1A48DEDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FCPuzzleTypeSettingsEntryIDFromPuzzleTypeID(uint64_t a1)
{
  return [NSString stringWithFormat:@"ps-%@", a1];
}

void sub_1A48DFB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FCIsPuzzleTypeSettingsRecordName(void *a1, const char *a2)
{
  return [a1 hasPrefix:@"ps-"];
}

void sub_1A48E1738(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 248), 8);
  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1A48E4B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1A48E81E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A48E8738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1A48E8C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void sub_1A48E9154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1A48E9700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak((id *)(v19 - 112));
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A48EA44C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A48EAD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A48EB0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A48EB1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A48EB2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double FCRound(double a1)
{
  return round(a1);
}

double FCFractionalPart(double a1)
{
  BOOL v1 = a1 <= 0.0;
  double v2 = -(-a1 - floor(-a1));
  double result = a1 - floor(a1);
  if (v1) {
    return v2;
  }
  return result;
}

void FCClamp(double a1, double a2, double a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a3 < a2 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    id v3 = objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid parameter not satisfying %s", "max >= min");
    *(_DWORD *)buf = 136315906;
    unint64_t v5 = "CGFloat FCClamp(CGFloat, CGFloat, CGFloat)";
    __int16 v6 = 2080;
    __int16 v7 = "FCMath.m";
    __int16 v8 = 1024;
    int v9 = 43;
    __int16 v10 = 2114;
    uint64_t v11 = v3;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
}

unint64_t FCClampUInt64s(unint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a1 >= a3) {
    unint64_t v3 = a3;
  }
  else {
    unint64_t v3 = a1;
  }
  if (a1 >= a2) {
    return v3;
  }
  else {
    return a2;
  }
}

double FCMix(double a1, double a2, double a3)
{
  return a1 + (a2 - a1) * a3;
}

double FCRandom()
{
  return (double)random() / 2147483650.0;
}

double FCRandomBetween(double a1, double a2)
{
  return a1 + (a2 - a1) * ((double)random() / 2147483650.0);
}

double FCReverseSquare(double a1)
{
  return 1.0 - (1.0 - a1) * (1.0 - a1);
}

long double FCSineMap(double a1)
{
  return (sin(a1 * 3.14159265 + -1.57079633) + 1.0) * 0.5;
}

uint64_t FCAudioUpsellPlayPositionForValue(void *a1)
{
  id v1 = a1;
  double v2 = v1;
  if (v1 && [v1 caseInsensitiveCompare:@"beginning"])
  {
    if ([v2 caseInsensitiveCompare:@"middle"]) {
      uint64_t v3 = 2 * ([v2 caseInsensitiveCompare:@"end"] == 0);
    }
    else {
      uint64_t v3 = 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_1A48F0210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 136), 8);
  _Unwind_Resume(a1);
}

BOOL FCMIMETypeIsPlainText(void *a1)
{
  return [a1 caseInsensitiveCompare:@"text/plain"] == 0;
}

BOOL FCMIMETypeIsHTML(void *a1)
{
  return [a1 caseInsensitiveCompare:@"text/html"] == 0;
}

BOOL FCMIMETypeIsAudioOrVideo(void *a1)
{
  id v1 = a1;
  if ([v1 caseInsensitiveCompare:@"audio/mpeg"]) {
    BOOL v2 = [v1 caseInsensitiveCompare:@"video/mp4"] == 0;
  }
  else {
    BOOL v2 = 1;
  }

  return v2;
}

BOOL FCMIMETypeIsFont(void *a1)
{
  return [a1 caseInsensitiveCompare:@"application/font-sfnt"] == 0;
}

BOOL FCMIMETypeIsGZip(void *a1)
{
  id v1 = a1;
  if ([v1 caseInsensitiveCompare:@"application/gzip"]) {
    BOOL v2 = [v1 caseInsensitiveCompare:@"application/x-gzip"] == 0;
  }
  else {
    BOOL v2 = 1;
  }

  return v2;
}

BOOL FCMIMETypeIsBinary(void *a1)
{
  return [a1 caseInsensitiveCompare:@"application/octet-stream"] == 0;
}

uint64_t FCMIMETypeIsANEF(void *a1, const char *a2)
{
  return [a1 hasPrefix:@"application/vnd.apple-anef"];
}

id FCPermanentURLForResourceRecordID(void *a1, void *a2)
{
  return FCPermanentURLForRecordID(a1, 3uLL, a2, 1);
}

__CFString *FCPermanentURLHostForContainerIdentifier(void *a1)
{
  id v1 = a1;
  if (qword_1EB5D1B28 != -1) {
    dispatch_once(&qword_1EB5D1B28, &__block_literal_global_37_0);
  }
  if (byte_1EB5D1B19 || ([v1 isEqualToString:@"com.apple.news.public"] & 1) == 0) {
    BOOL v2 = @"cvws.icloud-content.com";
  }
  else {
    BOOL v2 = @"c.apple.news";
  }

  return v2;
}

uint64_t FCNewsAssetServerHostName()
{
  unint64_t v0 = FCCurrentContextEnvironment();
  if (v0 > 4) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E5B5AF70 + v0);
  }
}

uint64_t FCNewsAssetServerHostNameForEnvironment(unint64_t a1)
{
  if (a1 > 4) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E5B5AF70 + a1);
  }
}

void __FCPermanentURLHostForContainerIdentifier_block_invoke()
{
  NewsCoreUserDefaults();
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  byte_1EB5D1B19 = [v0 BOOLForKey:@"replace_cdn_with_cvws"];
}

void sub_1A48F3F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose((const void *)(v41 - 240), 8);
  _Block_object_dispose((const void *)(v41 - 192), 8);
  _Block_object_dispose((const void *)(v41 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t __StoreKitLibraryCore_block_invoke_2()
{
  uint64_t result = _sl_dlopen();
  StoreKitLibraryCore_frameworkLibrary_1 = result;
  return result;
}

id FCMutateHeadlineWithBlock(void *a1, void *a2)
{
  uint64_t v3 = a2;
  id v4 = a1;
  unint64_t v5 = (objc_class *)objc_opt_class();
  __int16 v6 = FCCheckedDynamicCast(v5, (uint64_t)v4);

  v3[2](v3, v6);
  return v6;
}

id FCHeadlinePromotedToImageOnTop(void *a1)
{
  return FCMutateHeadlineWithBlock(a1, &__block_literal_global_171);
}

uint64_t __FCHeadlinePromotedToImageOnTop_block_invoke(uint64_t a1, void *a2)
{
  return [a2 setUsesImageOnTopLayout:1];
}

double FCScoreForHeadline(void *a1, int a2)
{
  id v3 = a1;
  [v3 tileProminenceScore];
  double v5 = v4;
  if (a2)
  {
    if ([v3 isFeatureCandidate])
    {
      __int16 v6 = [v3 publishDate];
      objc_msgSend(v6, "fc_timeIntervalUntilNow");
      double v8 = v7;

      if (v8 <= 86400.0) {
        double v5 = v5 + 100.0;
      }
    }
  }

  return v5;
}

uint64_t FCIndexOfHighestScoringHeadline(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  void v27[2] = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a4;
  id v11 = a5;
  if (!v10 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v15 = (void *)[[NSString alloc] initWithFormat:@"must have a test block"];
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "NSUInteger FCIndexOfHighestScoringHeadline(NSArray<id<FCHeadlineProviding>> *__strong, NSRange,"
                         " BOOL (^__strong)(__strong id<FCHeadlineProviding>), double (^__strong)(__strong id<FCHeadlineProviding>))";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "FCFeedBuildingUtilities.m";
    *(_WORD *)&unsigned char buf[22] = 1024;
    LODWORD(v27[0]) = 50;
    WORD2(v27[0]) = 2114;
    *(void *)((char *)v27 + 6) = v15;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
  if (!v11 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v16 = (void *)[[NSString alloc] initWithFormat:@"must have a score block"];
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "NSUInteger FCIndexOfHighestScoringHeadline(NSArray<id<FCHeadlineProviding>> *__strong, NSRange,"
                         " BOOL (^__strong)(__strong id<FCHeadlineProviding>), double (^__strong)(__strong id<FCHeadlineProviding>))";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "FCFeedBuildingUtilities.m";
    *(_WORD *)&unsigned char buf[22] = 1024;
    LODWORD(v27[0]) = 51;
    WORD2(v27[0]) = 2114;
    *(void *)((char *)v27 + 6) = v16;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000;
  v27[0] = 0xBFF0000000000000;
  uint64_t v22 = 0;
  char v23 = &v22;
  uint64_t v24 = 0x2020000000;
  uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
  if (v10 && v11)
  {
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4F28D60], "indexSetWithIndexesInRange:", a2, a3);
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    void v17[2] = __FCIndexOfHighestScoringHeadline_block_invoke;
    void v17[3] = &unk_1E5B5B000;
    id v18 = v11;
    id v20 = buf;
    id v19 = v10;
    id v21 = &v22;
    [v9 enumerateObjectsAtIndexes:v13 options:0 usingBlock:v17];

    uint64_t v12 = v23[3];
  }
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(buf, 8);

  return v12;
}

void sub_1A48F65E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void __FCIndexOfHighestScoringHeadline_block_invoke(void *a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  double v5 = (*(double (**)(void))(a1[4] + 16))();
  if (v5 > *(double *)(*(void *)(a1[6] + 8) + 24) && (*(unsigned int (**)(void))(a1[5] + 16))())
  {
    *(double *)(*(void *)(a1[6] + 8) + 24) = v5;
    *(void *)(*(void *)(a1[7] + 8) + 24) = a3;
  }
}

id FCPromoteHeadlines(void *a1, char a2, void *a3, void *a4, uint64_t a5)
{
  id v8 = a1;
  id v9 = a3;
  id v35 = a4;
  uint64_t v10 = [MEMORY[0x1E4F1CA48] arrayWithArray:v8];
  if (a5 <= 1) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = a5;
  }
  if (v9
    && (uint64_t v12 = [v9 indexOfObjectWithOptions:2 passingTest:&__block_literal_global_12_0],
        v12 != 0x7FFFFFFFFFFFFFFFLL))
  {
    uint64_t v14 = v12;
    uint64_t v15 = [v9 count];
    int64_t v13 = (v14 + v11 - v15) & ~((v14 + v11 - v15) >> 63);
  }
  else
  {
    int64_t v13 = 0;
  }
  uint64_t v36 = v8;
  if (v13 < (unint64_t)[v8 count])
  {
    if (v35
      && (uint64_t v16 = [v35 indexOfObjectPassingTest:&__block_literal_global_12_0], v16 != 0x7FFFFFFFFFFFFFFFLL))
    {
      uint64_t v32 = v11 - v16;
      if (v11 - v16 <= (unint64_t)[v36 count])
      {
        uint64_t v33 = [v36 count];
        uint64_t v34 = v32 <= 1 ? 1 : v32;
        uint64_t v17 = v33 - v34;
      }
      else
      {
        uint64_t v17 = -1;
      }
    }
    else
    {
      uint64_t v17 = [v8 count] - 1;
    }
    if (v13 <= v17)
    {
      if (v13) {
        char v18 = 0;
      }
      else {
        char v18 = a2;
      }
      uint64_t v19 = v17 + 1;
      while (1)
      {
        int64_t v20 = v13 + v11;
        if (v13 + v11 >= (unint64_t)(v19 - v13)) {
          int64_t v20 = v19 - v13;
        }
        uint64_t v21 = (v18 & 1) != 0 ? v19 - v13 : v20;
        uint64_t v22 = (v18 & 1) != 0 ? &__block_literal_global_15_1 : &__block_literal_global_20_1;
        char v23 = (v18 & 1) != 0 ? &__block_literal_global_18_1 : &__block_literal_global_22_1;
        uint64_t v24 = FCIndexOfHighestScoringHeadline(v10, v13, v21, v22, v23);
        if (!v13 && (a2 & 1) == 0 && ![v9 count])
        {
          uint64_t v25 = [v10 firstObject];
          char v26 = [v25 hasThumbnail];

          if (v26) {
            break;
          }
        }
        if (v18)
        {
          if (v24 != 0x7FFFFFFFFFFFFFFFLL) {
            goto LABEL_36;
          }
        }
        else
        {
          if (v24 != 0x7FFFFFFFFFFFFFFFLL)
          {
LABEL_39:
            uint64_t v29 = [v10 objectAtIndexedSubscript:v24];
            uint64_t v30 = FCMutateHeadlineWithBlock(v29, &__block_literal_global_171);

            [v10 replaceObjectAtIndex:v24 withObject:v30];
            int64_t v13 = v24 + v11;

            goto LABEL_40;
          }
          v13 += v11;
        }
LABEL_40:
        char v18 = 0;
        if (v13 > v17) {
          goto LABEL_41;
        }
      }
      uint64_t v24 = 0;
      if ((v18 & 1) == 0) {
        goto LABEL_39;
      }
LABEL_36:
      uint64_t v27 = [v10 objectAtIndexedSubscript:v24];
      __int16 v28 = FCMutateHeadlineWithBlock(v27, &__block_literal_global_171);

      [v10 removeObjectAtIndex:v24];
      [v10 insertObject:v28 atIndex:0];
      v13 += v11;

      goto LABEL_40;
    }
  }
LABEL_41:

  return v10;
}

uint64_t __FCPromoteHeadlines_block_invoke(uint64_t a1, void *a2)
{
  return [a2 usesImageOnTopLayout];
}

BOOL __FCPromoteHeadlines_block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 hasThumbnail])
  {
    id v3 = [v2 publishDate];
    objc_msgSend(v3, "fc_timeIntervalUntilNow");
    BOOL v5 = v4 <= 86400.0;
  }
  else
  {
    BOOL v5 = 0;
  }

  return v5;
}

double __FCPromoteHeadlines_block_invoke_3(uint64_t a1, void *a2)
{
  return FCScoreForHeadline(a2, 1);
}

uint64_t __FCPromoteHeadlines_block_invoke_4(uint64_t a1, void *a2)
{
  return [a2 hasThumbnail];
}

uint64_t __FCPromoteHeadlines_block_invoke_5(uint64_t a1, void *a2)
{
  return [a2 tileProminenceScore];
}

BOOL __FCPromoteOneHeadline(void *a1, int a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  if (a2
    && [v5 count]
    && ([v5 firstObject],
        double v7 = objc_claimAutoreleasedReturnValue(),
        char v8 = v6[2](v6, v7),
        v7,
        (v8 & 1) != 0))
  {
    BOOL v9 = 1;
  }
  else
  {
    uint64_t v10 = objc_msgSend(v5, "fc_arrayOfObjectsPassingTest:", v6);
    uint64_t v11 = [v10 count];
    BOOL v9 = v11 != 0;
    if (v11)
    {
      uint64_t v12 = [v10 sortedArrayUsingComparator:&__block_literal_global_25_3];
      int64_t v13 = [v12 firstObject];
      uint64_t v14 = FCMutateHeadlineWithBlock(v13, &__block_literal_global_171);
      [v5 removeObjectIdenticalTo:v13];
      [v5 insertObject:v14 atIndex:0];
    }
  }

  return v9;
}

id _FCPromoteOneHeadline(uint64_t a1, int a2)
{
  id v3 = [MEMORY[0x1E4F1CA48] arrayWithArray:a1];
  __FCPromoteOneHeadline(v3, a2, &__block_literal_global_28_7);
  return v3;
}

id FCPromoteOneHeadline(uint64_t a1)
{
  return _FCPromoteOneHeadline(a1, 0);
}

id FCPromoteOneHeadlineIgnoringProminence(uint64_t a1)
{
  return _FCPromoteOneHeadline(a1, 1);
}

id _FCPromoteAccessibleHeadline(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = [MEMORY[0x1E4F1CA48] arrayWithArray:a1];
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___FCPromoteAccessibleHeadline_block_invoke_2;
  aBlock[3] = &unk_1E5B50300;
  id v11 = v5;
  id v7 = v5;
  char v8 = _Block_copy(aBlock);
  if (!__FCPromoteOneHeadline(v6, a3, v8)) {
    __FCPromoteOneHeadline(v6, a3, &__block_literal_global_30_3);
  }

  return v6;
}

id FCPromoteAccessibleHeadline(uint64_t a1, void *a2)
{
  return _FCPromoteAccessibleHeadline(a1, a2, 0);
}

id FCPromoteAccessibleHeadlineIgnoringProminence(uint64_t a1, void *a2)
{
  return _FCPromoteAccessibleHeadline(a1, a2, 1);
}

void FCAssignPersonalizationScoresToHeadlines(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = [a2 sortItems:v5 options:1 configurationSet:a3];
  id v7 = [v6 scoreProfiles];

  FCAssignPersonalizationScoresFromProfiles(v5, v7);
}

void FCAssignPersonalizationScoresFromProfiles(void *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v3);
        }
        BOOL v9 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        uint64_t v10 = [v4 objectForKey:v9];
        [v9 setScoreProfile:v10];
        [v10 sortingScore];
        objc_msgSend(v9, "setTileProminenceScore:");
      }
      uint64_t v6 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v6);
  }
}

id __FCAssignSingleHeadlineMetadata_block_invoke(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id FCAssignHeadlineMetadata(void *a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v19 = a3;
  if (v6)
  {
    id v7 = [MEMORY[0x1E4F1CA48] array];
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v8 = v5;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v23 objects:v32 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      id v18 = v5;
      uint64_t v11 = *(void *)v24;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v24 != v11) {
            objc_enumerationMutation(v8);
          }
          long long v13 = *(void **)(*((void *)&v23 + 1) + 8 * i);
          long long v14 = objc_msgSend(v13, "identifier", v18);
          uint64_t v15 = [v6 objectForKeyedSubscript:v14];

          if (v15)
          {
            v20[0] = MEMORY[0x1E4F143A8];
            v20[1] = 3221225472;
            void v20[2] = __FCAssignHeadlineMetadata_block_invoke_2;
            v20[3] = &unk_1E5B5B0B0;
            id v21 = v15;
            id v22 = v19;
            uint64_t v16 = FCMutateHeadlineWithBlock(v13, v20);
            [v7 addObject:v16];
          }
          else
          {
            [v7 addObject:v13];
          }
        }
        uint64_t v10 = [v8 countByEnumeratingWithState:&v23 objects:v32 count:16];
      }
      while (v10);
      id v5 = v18;
    }
  }
  else
  {
    uint64_t v27 = MEMORY[0x1E4F143A8];
    uint64_t v28 = 3221225472;
    uint64_t v29 = __FCAssignHeadlineMetadata_block_invoke;
    uint64_t v30 = &unk_1E5B505B0;
    id v31 = v5;
    id v7 = v31;
  }

  return v7;
}

id __FCAssignHeadlineMetadata_block_invoke(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

uint64_t __FCAssignHeadlineMetadata_block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 applyHeadlineMetadata:*(void *)(a1 + 32) configuration:*(void *)(a1 + 40)];
}

id FCFeedItemsCoveredByRange(void *a1, void *a2)
{
  id v3 = a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __FCFeedItemsCoveredByRange_block_invoke;
  v7[3] = &unk_1E5B56FB8;
  id v8 = v3;
  id v4 = v3;
  id v5 = objc_msgSend(a1, "fc_arrayOfObjectsPassingTest:", v7);

  return v5;
}

uint64_t __FCFeedItemsCoveredByRange_block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [a2 order];
  return [v2 containsOrder:v3];
}

void sub_1A48F8828(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1A48FBDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A48FC894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A48FDE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double FCPersonalizationExponentialSumForValue(long double a1, long double a2)
{
  double v3 = a1;
  if (a2 != 1.0) {
    return (1.0 - pow(a2, a1)) / (1.0 - a2);
  }
  return v3;
}

long double FCPersonalizationExponentiallyDecayValue(double a1, long double a2, long double a3, long double a4)
{
  double v6 = a2;
  if (a4 != 1.0) {
    double v6 = (1.0 - pow(a4, a2)) / (1.0 - a4);
  }
  return v6 + a1 * pow(a4, a3);
}

double FCPersonalizationLinearImpressionCount(double a1, long double a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a2 == 0.0)
  {
    double v4 = 0.0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = (void *)[[NSString alloc] initWithFormat:@"Cannot get a linear impression with a decay rate of 0"];
      int v12 = 136315906;
      long long v13 = "double FCPersonalizationLinearImpressionCount(double, double)";
      __int16 v14 = 2080;
      uint64_t v15 = "FCPersonalizationData.m";
      __int16 v16 = 1024;
      int v17 = 923;
      __int16 v18 = 2114;
      id v19 = v10;
      _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v12, 0x26u);
    }
  }
  else
  {
    double v4 = 555.0;
    double v5 = (1.0 - pow(a2, 555.0)) / (1.0 - a2);
    if (v5 > a1) {
      double v5 = a1;
    }
    double v6 = log(1.0 - v5 * (1.0 - a2));
    double v7 = v6 / log(a2);
    double v8 = fabs(v7);
    if (v8 >= INFINITY && v8 <= INFINITY && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = (void *)[[NSString alloc] initWithFormat:@"Found a NaN or Inf linear impression count result"];
      int v12 = 136315906;
      long long v13 = "double FCPersonalizationLinearImpressionCount(double, double)";
      __int16 v14 = 2080;
      uint64_t v15 = "FCPersonalizationData.m";
      __int16 v16 = 1024;
      int v17 = 927;
      __int16 v18 = 2114;
      id v19 = v11;
      _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v12, 0x26u);
    }
    if (v8 != INFINITY) {
      return v7;
    }
  }
  return v4;
}

long double FCPersonalizationApplyPrior(double a1, double a2, double a3, long double a4)
{
  double v7 = FCPersonalizationLinearImpressionCount(a3, a4);
  return a1 + pow(a4, v7) * a2;
}

void sub_1A4900CD4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A4902218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id obj)
{
}

__CFString *FCCommandStatusDescription(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"success";
  }
  else {
    return off_1E5B5B5B8[a1 - 1];
  }
}

BOOL FCPBFeedItemInventoryReadFrom(uint64_t a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    double v7 = (int *)MEMORY[0x1E4F940B8];
    while (!*(unsigned char *)(a2 + *v5))
    {
      double v8 = (void *)MEMORY[0x1A6260FD0](a1, a2);
      uint64_t v9 = v8;
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0;
      while (1)
      {
        uint64_t v13 = *v3;
        unint64_t v14 = *(void *)(a2 + v13);
        if (v14 == -1 || v14 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v15 = *(unsigned char *)(*(void *)(a2 + *v7) + v14);
        *(void *)(a2 + v13) = v14 + 1;
        v12 |= (unint64_t)(v15 & 0x7F) << v10;
        if ((v15 & 0x80) == 0) {
          goto LABEL_12;
        }
        v10 += 7;
        BOOL v16 = v11++ >= 9;
        if (v16)
        {
          unint64_t v12 = 0;
          int v17 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v17 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v12 = 0;
      }
LABEL_14:
      if (v17) {
        BOOL v18 = 1;
      }
      else {
        BOOL v18 = (v12 & 7) == 4;
      }
      if (v18)
      {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v12 >> 3))
      {
        case 1u:
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 40) |= 2u;
          while (1)
          {
            uint64_t v22 = *v3;
            unint64_t v23 = *(void *)(a2 + v22);
            if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0) {
              goto LABEL_42;
            }
            v19 += 7;
            BOOL v16 = v20++ >= 9;
            if (v16)
            {
              LODWORD(v21) = 0;
              goto LABEL_44;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_42:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v21) = 0;
          }
LABEL_44:
          uint64_t v32 = 24;
          goto LABEL_49;
        case 2u:
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 40) |= 1u;
          break;
        case 3u:
          id v30 = objc_alloc_init(MEMORY[0x1E4F82A18]);

          *(void *)(a1 + 32) = v30;
          if (!PBReaderPlaceMark() || (NTPBDateReadFrom() & 1) == 0) {
            goto LABEL_55;
          }
          goto LABEL_40;
        case 4u:
          id v31 = objc_alloc_init(MEMORY[0x1E4F82A50]);
          [(id)a1 addFeedItems:v31];

          if (!PBReaderPlaceMark() || (NTPBFeedItemReadFrom() & 1) == 0) {
            goto LABEL_55;
          }
LABEL_40:
          PBReaderRecallMark();
          goto LABEL_50;
        default:
          if (PBReaderSkipValueWithTag()) {
            goto LABEL_50;
          }
LABEL_55:
          return 0;
      }
      while (1)
      {
        uint64_t v27 = *v3;
        unint64_t v28 = *(void *)(a2 + v27);
        if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
        *(void *)(a2 + v27) = v28 + 1;
        v21 |= (unint64_t)(v29 & 0x7F) << v25;
        if ((v29 & 0x80) == 0) {
          goto LABEL_46;
        }
        v25 += 7;
        BOOL v16 = v26++ >= 9;
        if (v16)
        {
          LODWORD(v21) = 0;
          goto LABEL_48;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_46:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v21) = 0;
      }
LABEL_48:
      uint64_t v32 = 8;
LABEL_49:
      *(_DWORD *)(a1 + v32) = v21;
LABEL_50:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id __FCJSONValidValueClasses_block_invoke()
{
  if (qword_1EB5D1BB8 != -1) {
    dispatch_once(&qword_1EB5D1BB8, &__block_literal_global_3_1);
  }
  id v0 = (void *)_MergedGlobals_225;
  return v0;
}

uint64_t __FCJSONValidValueClasses_block_invoke_2()
{
  id v0 = (void *)MEMORY[0x1E4F1C978];
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_msgSend(v0, "arrayWithObjects:", v1, v2, objc_opt_class(), 0);
  uint64_t v4 = _MergedGlobals_225;
  _MergedGlobals_225 = v3;
  return MEMORY[0x1F41817F8](v3, v4);
}

BOOL _fc_isValidJSONValueObject(void *a1)
{
  id v1 = a1;
  uint64_t v2 = __FCJSONValidValueClasses_block_invoke();
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _OWORD v8[2] = ___fc_isValidJSONValueObject_block_invoke;
  _OWORD v8[3] = &unk_1E5B5B5D8;
  id v3 = v1;
  id v9 = v3;
  if (objc_msgSend(v2, "fc_containsObjectPassingTest:", v8))
  {
    objc_opt_class();
    if (v3 && (objc_opt_isKindOfClass() & 1) != 0)
    {
      id v4 = v3;
      [v4 floatValue];
      [v4 floatValue];
      BOOL v6 = fabsf(v5) != INFINITY;
    }
    else
    {
      id v4 = 0;
      BOOL v6 = 1;
    }
  }
  else
  {
    BOOL v6 = 0;
  }

  return v6;
}

uint64_t ___fc_isValidJSONValueObject_block_invoke()
{
  return objc_opt_isKindOfClass() & 1;
}

uint64_t _fc_isValidJSONContainerObject(void *a1)
{
  id v1 = a1;
  if (qword_1EB5D1BC8 != -1) {
    dispatch_once(&qword_1EB5D1BC8, &__block_literal_global_68_0);
  }
  id v2 = (id)qword_1EB5D1BC0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  _OWORD v6[2] = ___fc_isValidJSONContainerObject_block_invoke;
  v6[3] = &unk_1E5B5B5D8;
  id v7 = v1;
  id v3 = v1;
  uint64_t v4 = objc_msgSend(v2, "fc_containsObjectPassingTest:", v6);

  return v4;
}

uint64_t ___fc_isValidJSONContainerObject_block_invoke()
{
  return objc_opt_isKindOfClass() & 1;
}

id _fc_JSONEncodableObjectWithObjectHandlers(void *a1, void *a2, void *a3, void *a4, void *a5, int a6)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  unint64_t v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  BOOL v16 = v15;
  if (!v11)
  {
    id v27 = 0;
    id v22 = v15;
    id v24 = v14;
    id v20 = v13;
    BOOL v18 = v12;
    goto LABEL_42;
  }
  if (v12) {
    int v17 = v12;
  }
  else {
    int v17 = (void (**)(id, id))&__block_literal_global_13_3;
  }
  BOOL v18 = (void (**)(id, id))_Block_copy(v17);

  if (v13) {
    char v19 = v13;
  }
  else {
    char v19 = &__block_literal_global_16_2;
  }
  id v20 = _Block_copy(v19);

  if (v16) {
    uint64_t v21 = v16;
  }
  else {
    uint64_t v21 = &__block_literal_global_18_2;
  }
  id v22 = _Block_copy(v21);

  if (v14) {
    unint64_t v23 = v14;
  }
  else {
    unint64_t v23 = &__block_literal_global_10_2;
  }
  id v24 = _Block_copy(v23);

  if ((_fc_isValidJSONContainerObject(v11) & 1) == 0)
  {
    if (a6)
    {
      if (_fc_isValidJSONValueObject(v11)) {
        char v29 = v11;
      }
      else {
        char v29 = 0;
      }
      id v27 = v29;
      goto LABEL_42;
    }
    uint64_t v32 = v18[2](v18, v11);
    id v26 = (id)v32;
    if (!v32
      || (_fc_JSONEncodableObjectWithObjectHandlers(v32, v18, v20, v24, v22, 1),
          (id v27 = (id)objc_claimAutoreleasedReturnValue()) == 0))
    {
      _fc_JSONEncodableObjectWithObjectHandlers(v11, v18, v20, v24, v22, 1);
      id v27 = (id)objc_claimAutoreleasedReturnValue();
    }
    goto LABEL_41;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      char v25 = v11;
    }
    else {
      char v25 = 0;
    }
    id v26 = v25;
    v55[0] = MEMORY[0x1E4F143A8];
    v55[1] = 3221225472;
    v55[2] = ___fc_JSONEncodableObjectWithObjectHandlers_block_invoke_5;
    v55[3] = &unk_1E5B5B640;
    id v20 = v20;
    id v56 = v20;
    BOOL v18 = v18;
    uint64_t v57 = v18;
    id v24 = v24;
    id v58 = v24;
    id v22 = v22;
    id v59 = v22;
    char v60 = a6;
    objc_msgSend(v26, "fc_arrayByTransformingWithBlockWithIndex:", v55);
    id v27 = (id)objc_claimAutoreleasedReturnValue();

    unint64_t v28 = v56;
LABEL_20:

LABEL_41:
    goto LABEL_42;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v30 = v11;
    }
    else {
      id v30 = 0;
    }
    id v26 = v30;
    uint64_t v31 = [v26 allObjects];
LABEL_40:
    uint64_t v34 = (void *)v31;
    _fc_JSONEncodableObjectWithObjectHandlers(v31, v18, v20, v24, v22, 0);
    id v27 = (id)objc_claimAutoreleasedReturnValue();

    goto LABEL_41;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v33 = v11;
    }
    else {
      uint64_t v33 = 0;
    }
    id v26 = v33;
    uint64_t v31 = [v26 array];
    goto LABEL_40;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v36 = v11;
    }
    else {
      uint64_t v36 = 0;
    }
    id v26 = v36;
    v49[0] = MEMORY[0x1E4F143A8];
    v49[1] = 3221225472;
    v49[2] = ___fc_JSONEncodableObjectWithObjectHandlers_block_invoke_6;
    v49[3] = &unk_1E5B5B668;
    unsigned int v50 = &__block_literal_global_10_2;
    id v37 = v24;
    id v51 = v37;
    unint64_t v38 = v18;
    uint64_t v52 = v38;
    id v39 = v20;
    id v53 = v39;
    id v40 = v22;
    id v54 = v40;
    uint64_t v41 = objc_msgSend(v26, "fc_dictionaryByTransformingKeysWithKeyAndValueBlock:", v49);
    v43[0] = MEMORY[0x1E4F143A8];
    v43[1] = 3221225472;
    v43[2] = ___fc_JSONEncodableObjectWithObjectHandlers_block_invoke_7;
    v43[3] = &unk_1E5B5B690;
    id v22 = v40;
    id v44 = v22;
    BOOL v18 = v38;
    char v45 = v18;
    id v20 = v39;
    id v46 = v20;
    id v24 = v37;
    id v47 = v24;
    char v48 = a6;
    objc_msgSend(v41, "fc_dictionaryByTransformingValuesWithKeyAndValueBlock:", v43);
    id v27 = (id)objc_claimAutoreleasedReturnValue();

    unint64_t v28 = v50;
    goto LABEL_20;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v42 = (void *)[[NSString alloc] initWithFormat:@"This condition shouldn't be possible, the object %@ was a container type, but not handled.", v11];
    *(_DWORD *)buf = 136315906;
    char v62 = "id _fc_JSONEncodableObjectWithObjectHandlers(__strong id, __strong FCJSONEncodingObjectHandler, __strong FCJSO"
          "NEncodingArrayObjectHandler, __strong FCJSONEncodingDictionaryKeyHandler, __strong FCJSONEncodingDictionaryVal"
          "ueHandler, BOOL)";
    __int16 v63 = 2080;
    uint64_t v64 = "FCJSONUtilities.m";
    __int16 v65 = 1024;
    int v66 = 127;
    __int16 v67 = 2114;
    char v68 = v42;
    _os_log_error_impl(&dword_1A460D000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
  }
  id v27 = 0;
LABEL_42:

  return v27;
}

void *fc_NSObjectDescriptionObjectHandler()
{
  return &__block_literal_global_25_4;
}

id fc_JSONEncodableObjectWithObjectHandlers(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  if (v9)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            v17[0] = v9;
            uint64_t v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v17 count:1];

            id v9 = (id)v14;
          }
        }
      }
    }
    id v15 = _fc_JSONEncodableObjectWithObjectHandlers(v9, v10, v11, v12, v13, 0);
  }
  else
  {
    id v15 = (void *)MEMORY[0x1E4F1CBF0];
  }

  return v15;
}

id fc_JSONEncodableObject(void *a1)
{
  return fc_JSONEncodableObjectWithObjectHandlers(a1, 0, 0, 0, 0);
}

uint64_t __FCJSONValidContainerClasses_block_invoke_2()
{
  id v0 = (void *)MEMORY[0x1E4F1C978];
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_msgSend(v0, "arrayWithObjects:", v1, v2, v3, objc_opt_class(), 0);
  uint64_t v5 = qword_1EB5D1BC0;
  qword_1EB5D1BC0 = v4;
  return MEMORY[0x1F41817F8](v4, v5);
}

void sub_1A490A630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A490B59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FCCKPRequestedFieldsReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        int v17 = objc_alloc_init(FCCKPRecordFieldIdentifier);
        -[FCCKPRequestedFields addFields:](a1, v17);
        if (!PBReaderPlaceMark() || (FCCKPRecordFieldIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t FCCompareRelativePriority(uint64_t a1, uint64_t a2)
{
  if (a1 < a2) {
    return -1;
  }
  else {
    return a1 > a2;
  }
}

uint64_t FCHigherRelativePriority(uint64_t result, uint64_t a2)
{
  if (result <= a2) {
    return a2;
  }
  return result;
}

uint64_t FCNextHighestRelativePriority(uint64_t result)
{
  if ((unint64_t)(result + 1) <= 3) {
    return qword_1A4974B20[result + 1];
  }
  return result;
}

BOOL FCRelativePriorityIsHigh(uint64_t a1)
{
  return a1 > 0;
}

uint64_t FCInferRelativePriorityFromQualityOfService(uint64_t a1)
{
  if (a1 == 9) {
    return -1;
  }
  return a1 == 33 || a1 == 25;
}

uint64_t FCInferQualityOfServiceFromRelativePriority(uint64_t a1)
{
  uint64_t v1 = 25;
  if (!a1) {
    uint64_t v1 = 17;
  }
  if (a1 == -1) {
    return 9;
  }
  else {
    return v1;
  }
}

uint64_t FCQueuePriorityFromRelativePriority(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) >= 4) {
    return 0;
  }
  else {
    return 4 * (a1 + 1) - 4;
  }
}

float FCInferTaskPriorityFromRelativePriority(unint64_t a1)
{
  float result = 0.25;
  if (a1 <= 2) {
    return flt_1A4974B40[a1];
  }
  return result;
}

dispatch_queue_global_t FCDispatchQueueForRelativePriority(uint64_t a1)
{
  uint64_t v1 = 25;
  if (!a1) {
    uint64_t v1 = 17;
  }
  if (a1 == -1) {
    return FCDispatchQueueForQualityOfService(9);
  }
  else {
    return FCDispatchQueueForQualityOfService(v1);
  }
}

uint64_t FCCKQueryPriorityFromRelativePriority(uint64_t a1)
{
  uint64_t v1 = 300;
  if (!a1) {
    uint64_t v1 = 200;
  }
  if (a1 == -1) {
    return 100;
  }
  else {
    return v1;
  }
}

__CFString *FCStringFromRelativePriority(unint64_t a1)
{
  if (a1 > 2) {
    return @"low";
  }
  else {
    return off_1E5B5B878[a1];
  }
}

uint64_t FCBundleSubscriptionValidationStateForValidationState(void *a1)
{
  return (int)[a1 intValue];
}

void FCSwizzleInstanceMethods(objc_class *a1, const char *a2, const char *a3)
{
  if (a1)
  {
    InstanceMethod = class_getInstanceMethod(a1, a2);
    id v7 = class_getInstanceMethod(a1, a3);
    if (InstanceMethod)
    {
      char v8 = v7;
      if (v7)
      {
        Implementation = method_getImplementation(v7);
        TypeEncoding = method_getTypeEncoding(v8);
        if (class_addMethod(a1, a2, Implementation, TypeEncoding))
        {
          uint64_t v11 = method_getImplementation(InstanceMethod);
          unint64_t v12 = method_getTypeEncoding(InstanceMethod);
          class_replaceMethod(a1, a3, v11, v12);
        }
        else
        {
          method_exchangeImplementations(InstanceMethod, v8);
        }
      }
    }
  }
}

id FCPersonalizationAggregateDefaultBaselineAggregateWithConfigurableValues(void *a1)
{
  uint64_t v1 = (objc_class *)MEMORY[0x1E4F82B00];
  id v2 = a1;
  id v3 = objc_alloc_init(v1);
  uint64_t v4 = +[FCBaselineFeature baselineFeature];
  uint64_t v5 = [v4 personalizationIdentifier];
  [v3 setFeatureKey:v5];

  [v2 baselineImpressionPrior];
  double v7 = v6;
  char v8 = [v2 defaultScoringConfig];
  [v8 baselineRatePrior];
  [v3 setClicks:v7 * v9];

  [v2 baselineImpressionPrior];
  double v11 = v10;

  [v3 setImpressions:v11];
  [v3 setEventCount:0];
  unint64_t v12 = [MEMORY[0x1E4F1C9C8] date];
  objc_msgSend(v3, "setTimestamp:", objc_msgSend(v12, "fc_millisecondTimeIntervalSince1970"));

  return v3;
}

id FCPersonalizationAggregateBaselineAggregateWithConfigurableValues(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = +[FCBaselineFeature baselineFeature];
  double v6 = [v5 personalizationIdentifier];
  double v7 = [v4 aggregateForFeatureKey:v6];

  if (!v7)
  {
    double v7 = FCPersonalizationAggregateDefaultBaselineAggregateWithConfigurableValues(v3);
  }

  return v7;
}

id FCPersonalizationAggregateAggregatesForFeatures(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = objc_msgSend(v4, "fc_arrayByTransformingWithBlock:", &__block_literal_global_181);
  int v17 = v3;
  double v6 = [v3 aggregatesForFeatureKeys:v5];
  double v7 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v6, "count"));
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v8 = v4;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v19 != v11) {
          objc_enumerationMutation(v8);
        }
        char v13 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        uint64_t v14 = [v13 personalizationIdentifier];
        int v15 = [v6 objectForKey:v14];

        if (v15) {
          [v7 setObject:v15 forKey:v13];
        }
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v10);
  }

  return v7;
}

uint64_t __FCPersonalizationAggregateAggregatesForFeatures_block_invoke(uint64_t a1, void *a2)
{
  return [a2 personalizationIdentifier];
}

double FCPersonalizationAggregateImpressionBiasForAction(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  id v8 = v7;
  if (a1 == 22 || (double v9 = 1.0, a1 == 1))
  {
    [v7 indexImpressionBiasCorrectionFactor];
    long double v11 = v10;
    [v8 groupImpressionBiasCorrectionFactor];
    long double v13 = v12;
    double v14 = pow(v11, (double)a2);
    double v9 = v14 * pow(v13, (double)a3);
    int v15 = (void *)FCPersonalizationLog;
    if (os_log_type_enabled((os_log_t)FCPersonalizationLog, OS_LOG_TYPE_DEBUG))
    {
      int v17 = NSNumber;
      long long v18 = v15;
      long long v19 = [v17 numberWithDouble:v9];
      int v20 = 138412290;
      long long v21 = v19;
      _os_log_debug_impl(&dword_1A460D000, v18, OS_LOG_TYPE_DEBUG, "Impression bias for the headline seen event: %@", (uint8_t *)&v20, 0xCu);
    }
  }

  return v9;
}

double FCPersonalizationAggregateGroupBiasForGroupType(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1 == 2)
  {
    [v3 trendingGroupAggregatesGroupBias];
    goto LABEL_5;
  }
  double v5 = 1.0;
  if (a1 == 1)
  {
    [v3 topStoriesGroupAggregatesGroupBias];
LABEL_5:
    double v5 = v6;
  }

  return v5;
}

uint64_t FCHashForAggregate(void *a1)
{
  id v1 = a1;
  [v1 clicks];
  unint64_t v3 = vcvtmd_u64_f64(v2 * 10000.0);
  [v1 impressions];
  unint64_t v5 = vcvtmd_u64_f64(v4 * 10000.0);
  uint64_t v6 = [v1 eventCount];
  id v7 = [v1 lastModified];

  uint64_t v8 = v6 ^ v3 ^ v5 ^ [v7 hash];
  return v8;
}

id FCDebugJSONForAggregate(void *a1)
{
  void v13[4] = *MEMORY[0x1E4F143B8];
  v12[0] = @"Clicks";
  id v1 = NSNumber;
  id v2 = a1;
  [v2 clicks];
  unint64_t v3 = objc_msgSend(v1, "numberWithDouble:");
  v13[0] = v3;
  v12[1] = @"Impressions";
  double v4 = NSNumber;
  [v2 impressions];
  unint64_t v5 = objc_msgSend(v4, "numberWithDouble:");
  v13[1] = v5;
  _OWORD v12[2] = @"Event Count";
  uint64_t v6 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v2, "eventCount"));
  v13[2] = v6;
  uint64_t v12[3] = @"Last Modified";
  id v7 = NSNumber;
  uint64_t v8 = [v2 lastModified];

  [v8 timeIntervalSince1970];
  double v9 = objc_msgSend(v7, "numberWithDouble:");
  void v13[3] = v9;
  double v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v13 forKeys:v12 count:4];

  return v10;
}

id FCDebugAggregateWithJSONDictionary(void *a1)
{
  id v1 = (objc_class *)MEMORY[0x1E4F82B00];
  id v2 = a1;
  id v3 = objc_alloc_init(v1);
  objc_opt_class();
  double v4 = [v2 objectForKeyedSubscript:@"Clicks"];
  if (v4)
  {
    if (objc_opt_isKindOfClass()) {
      unint64_t v5 = v4;
    }
    else {
      unint64_t v5 = 0;
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
  id v6 = v5;
  id v7 = v6;
  if (!v6) {
    id v6 = &unk_1EF8D87A8;
  }
  [v6 doubleValue];
  objc_msgSend(v3, "setClicks:");

  objc_opt_class();
  uint64_t v8 = [v2 objectForKeyedSubscript:@"Impressions"];
  if (v8)
  {
    if (objc_opt_isKindOfClass()) {
      double v9 = v8;
    }
    else {
      double v9 = 0;
    }
  }
  else
  {
    double v9 = 0;
  }
  id v10 = v9;
  long double v11 = v10;
  if (!v10) {
    id v10 = &unk_1EF8D87A8;
  }
  [v10 doubleValue];
  objc_msgSend(v3, "setImpressions:");

  objc_opt_class();
  double v12 = [v2 objectForKeyedSubscript:@"EventCount"];
  if (v12)
  {
    if (objc_opt_isKindOfClass()) {
      long double v13 = v12;
    }
    else {
      long double v13 = 0;
    }
  }
  else
  {
    long double v13 = 0;
  }
  id v14 = v13;
  int v15 = v14;
  if (!v14) {
    id v14 = &unk_1EF8D87A8;
  }
  [v14 doubleValue];
  [v3 setEventCount:(unint64_t)v16];

  objc_opt_class();
  int v17 = [v2 objectForKeyedSubscript:@"LastModified"];

  if (v17)
  {
    if (objc_opt_isKindOfClass()) {
      long long v18 = v17;
    }
    else {
      long long v18 = 0;
    }
  }
  else
  {
    long long v18 = 0;
  }
  id v19 = v18;
  int v20 = v19;
  if (!v19) {
    id v19 = &unk_1EF8D87A8;
  }
  [v19 doubleValue];
  [v3 setTimestamp:(unint64_t)v21];

  return v3;
}

id FCDebugJSONDictionaryFromAggregate(void *a1)
{
  void v13[4] = *MEMORY[0x1E4F143B8];
  v12[0] = @"Clicks";
  id v1 = NSNumber;
  id v2 = a1;
  [v2 clicks];
  id v3 = objc_msgSend(v1, "numberWithDouble:");
  v13[0] = v3;
  v12[1] = @"Impressions";
  double v4 = NSNumber;
  [v2 impressions];
  unint64_t v5 = objc_msgSend(v4, "numberWithDouble:");
  v13[1] = v5;
  _OWORD v12[2] = @"EventCount";
  id v6 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v2, "eventCount"));
  v13[2] = v6;
  uint64_t v12[3] = @"LastModified";
  id v7 = NSNumber;
  uint64_t v8 = [v2 lastModified];

  [v8 timeIntervalSince1970];
  double v9 = objc_msgSend(v7, "numberWithDouble:");
  void v13[3] = v9;
  id v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v13 forKeys:v12 count:4];

  return v10;
}

__CFString *FCDefaultSearchBaseURLStringForEnvironment(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5) {
    return 0;
  }
  else {
    return off_1E5B5BC20[a1 - 1];
  }
}

__CFString *FCDefaultPuzzlesArchiveBaseURLStringForEnvironment(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5) {
    return 0;
  }
  else {
    return off_1E5B5BC20[a1 - 1];
  }
}

__CFString *FCDefaultAuthTokenAPIBaseURLStringForEnvironment(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5) {
    return 0;
  }
  else {
    return off_1E5B5BC50[a1 - 1];
  }
}

__CFString *FCDefaultSportsDataVisualizationAPIBaseURLStringForEnvironment(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5) {
    return 0;
  }
  else {
    return off_1E5B5BC80[a1 - 1];
  }
}

__CFString *FCDefaultAppAnalyticsSportsEventsBaseURLStringForEnvironment(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5) {
    return 0;
  }
  else {
    return off_1E5B5BCB0[a1 - 1];
  }
}

__CFString *FCDefaultFineGrainedNewsletterSubscriptionBaseURLStringForEnvironment(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5) {
    return 0;
  }
  else {
    return off_1E5B5BCE0[a1 - 1];
  }
}

uint64_t FCDefaultCKQueryURLStringForEnvironment()
{
  return [@"https://gateway.icloud.com:443/ckdatabase" stringByAppendingPathComponent:@"api/client/query/retrieve"];
}

void sub_1A4917F74(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_1A491F654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A491F7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A491FA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4920AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4920C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A49213FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A49215E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A49217B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4922090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FCAggregateFetchResultWithFetchResults(void *a1)
{
  id v1 = a1;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __FCAggregateFetchResultWithFetchResults_block_invoke;
  aBlock[3] = &unk_1E5B5BF58;
  id v7 = v1;
  id v2 = v1;
  id v3 = (unsigned int (**)(void *, uint64_t))_Block_copy(aBlock);
  uint64_t v4 = 0;
  if ((((uint64_t (*)(void *, void))v3[2])(v3, 0) & 1) == 0)
  {
    if (v3[2](v3, 2)) {
      uint64_t v4 = 2;
    }
    else {
      uint64_t v4 = 1;
    }
  }

  return v4;
}

uint64_t __FCAggregateFetchResultWithFetchResults_block_invoke(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  _OWORD v4[2] = __FCAggregateFetchResultWithFetchResults_block_invoke_2;
  v4[3] = &__block_descriptor_40_e18_B16__0__NSNumber_8l;
  v4[4] = a2;
  return objc_msgSend(v2, "fc_containsObjectPassingTest:", v4);
}

uint64_t __FCAggregateFetchResultWithFetchResults_block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = NSNumber;
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  unint64_t v5 = [v2 numberWithUnsignedInteger:v3];
  uint64_t v6 = [v4 isEqualToNumber:v5];

  return v6;
}

void sub_1A492332C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FCPuzzleHistoryItemIDFromPuzzleID(uint64_t a1)
{
  return [NSString stringWithFormat:@"ph-%@", a1];
}

void sub_1A4929770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A492A590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A492A70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A492AD50(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1A492B068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A492B428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A492B8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A492BC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A492BD38(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1A492C058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A492C404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A492CDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A492D9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FCCKPQueryFilterReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 4)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 28) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_37;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_39;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_39:
        *(_DWORD *)(a1 + 24) = v21;
      }
      else
      {
        if (v17 == 2)
        {
          long long v18 = objc_alloc_init(FCCKPRecordFieldValue);
          objc_storeStrong((id *)(a1 + 16), v18);
          if (!PBReaderPlaceMark() || (FCCKPRecordFieldValueReadFrom((uint64_t)v18, a2) & 1) == 0)
          {
LABEL_42:

            return 0;
          }
        }
        else
        {
          if (v17 != 1)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          long long v18 = objc_alloc_init(FCCKPRecordFieldIdentifier);
          objc_storeStrong((id *)(a1 + 8), v18);
          if (!PBReaderPlaceMark() || (FCCKPRecordFieldIdentifierReadFrom((uint64_t)v18, a2) & 1) == 0) {
            goto LABEL_42;
          }
        }
        PBReaderRecallMark();
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL NTPBMarketingSubscriptionRequest_SubscriptionTypeFrom(int a1)
{
  return a1 != 0;
}

uint64_t NTPBMarketingSubscriptionRequest_SubscriptionActionFrom(int a1)
{
  if (a1 == 2) {
    return 2;
  }
  else {
    return a1 == 1;
  }
}

void sub_1A4933890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_1A4935288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

double FCFloatFromUnsignedShort(unsigned int a1)
{
  return (double)a1 / 65535.0;
}

double FCCGSizeFromMetadataBuffer(unint64_t a1)
{
  if (a1) {
    return (double)(a1 >> 36);
  }
  else {
    return *MEMORY[0x1E4F1DB30];
  }
}

void sub_1A4937948(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id FCPlaceholderIssueThumbnail()
{
  id v0 = FCBundle();
  uint64_t v1 = [v0 pathForResource:@"cellImagePlaceholder" ofType:@"png"];

  uint64_t v2 = [[FCRawFileDataProvider alloc] initWithFilePath:v1];
  uint64_t v3 = -[FCAssetHandle initWithDataProvider:]([FCAssetHandle alloc], v2);
  id v4 = +[FCIssueThumbnail issueThumbnailWithAssetHandle:thumbnailSize:](FCIssueThumbnail, "issueThumbnailWithAssetHandle:thumbnailSize:", v3, 1.0, 1.0);

  return v4;
}

id FCThumbnailForIssue(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 coverImageAssetHandle];
  uint64_t v3 = [v2 filePath];

  if (v3)
  {
    id v4 = [v1 coverImageAssetHandle];
    unint64_t v5 = +[FCIssueThumbnail issueThumbnailWithAssetHandle:thumbnailSize:](FCIssueThumbnail, "issueThumbnailWithAssetHandle:thumbnailSize:", v4, 1.79769313e308, 1.79769313e308);
  }
  else
  {
    unint64_t v5 = FCPlaceholderIssueThumbnail();
  }

  return v5;
}

id FCFetchThumbnailForIssue(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = [a1 coverImageAssetHandle];
  id v7 = v6;
  if (v6)
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    void v10[2] = __FCFetchThumbnailForIssue_block_invoke;
    v10[3] = &unk_1E5B4CC80;
    id v11 = v6;
    id v12 = v5;
    char v8 = [v11 downloadIfNeededWithPriority:a2 completion:v10];
  }
  else
  {
    if (v5) {
      (*((void (**)(id, void, void))v5 + 2))(v5, 0, 0);
    }
    char v8 = 0;
  }

  return v8;
}

uint64_t __FCFetchThumbnailForIssue_block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) filePath];

  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v2();
}

void sub_1A493DC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A493DDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id FCCKDatabaseZoneIDsToMigrate(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  if (v4)
  {
    uint64_t v5 = v4[4];
    uint64_t v6 = v4[5];
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }

  id v7 = [v3 databaseMigrationZoneNamesFromVersion:v5 toVersion:v6];

  char v8 = objc_msgSend(v7, "fc_arrayByTransformingWithBlock:", &__block_literal_global_197);

  return v8;
}

id __FCCKDatabaseZoneIDsToMigrate_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = (objc_class *)MEMORY[0x1E4F1A320];
  id v3 = a2;
  id v4 = [v2 alloc];
  uint64_t v5 = (void *)[v4 initWithZoneName:v3 ownerName:*MEMORY[0x1E4F19C08]];

  return v5;
}

id FCCKDatabaseZoneIDsToDeleteAfterMigration(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = [MEMORY[0x1E4F1CA80] set];
  if (a1 < a2)
  {
    do
    {
      long long v18 = 0u;
      long long v19 = 0u;
      uint64_t v7 = a1 + 1;
      long long v16 = 0u;
      long long v17 = 0u;
      char v8 = objc_msgSend(v5, "databaseMigrationZoneNamesFromVersion:toVersion:", a1, a1 + 1, 0);
      uint64_t v9 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v11 = *(void *)v17;
        do
        {
          for (uint64_t i = 0; i != v10; ++i)
          {
            if (*(void *)v17 != v11) {
              objc_enumerationMutation(v8);
            }
            uint64_t v13 = *(void *)(*((void *)&v16 + 1) + 8 * i);
            if ([v5 databaseMigrationShouldMigrateEntireZone:v13]) {
              [v6 addObject:v13];
            }
          }
          uint64_t v10 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
        }
        while (v10);
      }

      a1 = v7;
    }
    while (v7 != a2);
  }
  BOOL v14 = objc_msgSend(v6, "fc_arrayByTransformingWithBlock:", &__block_literal_global_3_3);

  return v14;
}

id __FCCKDatabaseZoneIDsToDeleteAfterMigration_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = (objc_class *)MEMORY[0x1E4F1A320];
  id v3 = a2;
  id v4 = [v2 alloc];
  id v5 = (void *)[v4 initWithZoneName:v3 ownerName:*MEMORY[0x1E4F19C08]];

  return v5;
}

id FCCKDatabaseRecordIDsToDeleteAfterMigration(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = [MEMORY[0x1E4F1CA80] set];
  uint64_t v24 = a2;
  if (a1 < a2)
  {
    uint64_t v7 = *MEMORY[0x1E4F19C08];
    id v25 = v5;
    do
    {
      uint64_t v28 = a1 + 1;
      char v8 = [v5 databaseMigrationZoneNamesFromVersion:a1 toVersion:v24];
      long long v36 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      obuint64_t j = v8;
      uint64_t v9 = [v8 countByEnumeratingWithState:&v36 objects:v41 count:16];
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v11 = *(void *)v37;
        uint64_t v26 = *(void *)v37;
        uint64_t v27 = a1;
        do
        {
          uint64_t v12 = 0;
          uint64_t v29 = v10;
          do
          {
            if (*(void *)v37 != v11) {
              objc_enumerationMutation(obj);
            }
            uint64_t v13 = *(void *)(*((void *)&v36 + 1) + 8 * v12);
            if (([v5 databaseMigrationShouldMigrateEntireZone:v13] & 1) == 0)
            {
              uint64_t v31 = v12;
              BOOL v14 = [v5 databaseMigrationRecordNamesToMigrateInZone:v13 fromVersion:a1 toVersion:v28];
              long long v32 = 0u;
              long long v33 = 0u;
              long long v34 = 0u;
              long long v35 = 0u;
              uint64_t v15 = [v14 countByEnumeratingWithState:&v32 objects:v40 count:16];
              if (v15)
              {
                uint64_t v16 = v15;
                uint64_t v17 = *(void *)v33;
                do
                {
                  for (uint64_t i = 0; i != v16; ++i)
                  {
                    if (*(void *)v33 != v17) {
                      objc_enumerationMutation(v14);
                    }
                    uint64_t v19 = *(void *)(*((void *)&v32 + 1) + 8 * i);
                    unsigned int v20 = (void *)[objc_alloc(MEMORY[0x1E4F1A320]) initWithZoneName:v13 ownerName:v7];
                    uint64_t v21 = (void *)[objc_alloc(MEMORY[0x1E4F1A2F8]) initWithRecordName:v19 zoneID:v20];
                    [v6 addObject:v21];
                  }
                  uint64_t v16 = [v14 countByEnumeratingWithState:&v32 objects:v40 count:16];
                }
                while (v16);
              }

              id v5 = v25;
              uint64_t v11 = v26;
              a1 = v27;
              uint64_t v10 = v29;
              uint64_t v12 = v31;
            }
            ++v12;
          }
          while (v12 != v10);
          uint64_t v10 = [obj countByEnumeratingWithState:&v36 objects:v41 count:16];
        }
        while (v10);
      }

      a1 = v28;
    }
    while (v28 != v24);
  }
  uint64_t v22 = objc_msgSend(v6, "allObjects", v24);

  return v22;
}

uint64_t sub_1A4942010()
{
  return MEMORY[0x1F40E3038]();
}

uint64_t sub_1A4942020()
{
  return MEMORY[0x1F40E3060]();
}

uint64_t sub_1A4942030()
{
  return MEMORY[0x1F40E3070]();
}

uint64_t sub_1A4942040()
{
  return MEMORY[0x1F40E3128]();
}

uint64_t sub_1A4942050()
{
  return MEMORY[0x1F40E3150]();
}

uint64_t sub_1A4942060()
{
  return MEMORY[0x1F40E3160]();
}

uint64_t sub_1A4942070()
{
  return MEMORY[0x1F40E4138]();
}

uint64_t sub_1A49420C0()
{
  return MEMORY[0x1F40E44C8]();
}

uint64_t sub_1A49420F0()
{
  return MEMORY[0x1F40E4540]();
}

uint64_t sub_1A4942100()
{
  return MEMORY[0x1F40E49A0]();
}

uint64_t sub_1A4942110()
{
  return MEMORY[0x1F40E4A70]();
}

uint64_t sub_1A4942120()
{
  return MEMORY[0x1F40E4AC0]();
}

uint64_t sub_1A4942130()
{
  return MEMORY[0x1F40E4B80]();
}

uint64_t sub_1A4942140()
{
  return MEMORY[0x1F40E4D48]();
}

uint64_t sub_1A4942150()
{
  return MEMORY[0x1F40E5188]();
}

uint64_t sub_1A4942160()
{
  return MEMORY[0x1F40E5198]();
}

uint64_t sub_1A4942170()
{
  return MEMORY[0x1F40E51D0]();
}

uint64_t sub_1A4942180()
{
  return MEMORY[0x1F40E52E0]();
}

uint64_t sub_1A4942190()
{
  return MEMORY[0x1F40E5378]();
}

uint64_t sub_1A49421A0()
{
  return MEMORY[0x1F40E5388]();
}

uint64_t sub_1A49421B0()
{
  return MEMORY[0x1F415F3E8]();
}

uint64_t sub_1A49421C0()
{
  return MEMORY[0x1F415F3F0]();
}

uint64_t sub_1A49421D0()
{
  return MEMORY[0x1F415F450]();
}

uint64_t sub_1A49421E0()
{
  return MEMORY[0x1F415F458]();
}

uint64_t sub_1A49421F0()
{
  return MEMORY[0x1F415F478]();
}

uint64_t sub_1A4942200()
{
  return MEMORY[0x1F415F488]();
}

uint64_t sub_1A4942210()
{
  return MEMORY[0x1F415D9F8]();
}

uint64_t sub_1A4942220()
{
  return MEMORY[0x1F415DD68]();
}

uint64_t sub_1A4942230()
{
  return MEMORY[0x1F415DF90]();
}

uint64_t sub_1A4942240()
{
  return MEMORY[0x1F415DF98]();
}

uint64_t sub_1A4942250()
{
  return MEMORY[0x1F415E6A0]();
}

uint64_t sub_1A4942260()
{
  return MEMORY[0x1F415E6A8]();
}

uint64_t sub_1A4942270()
{
  return MEMORY[0x1F415E6B0]();
}

uint64_t sub_1A4942280()
{
  return MEMORY[0x1F415EAA8]();
}

uint64_t sub_1A4942290()
{
  return MEMORY[0x1F41884F0]();
}

uint64_t sub_1A49422A0()
{
  return MEMORY[0x1F4188670]();
}

uint64_t sub_1A49422B0()
{
  return MEMORY[0x1F4188680]();
}

uint64_t sub_1A49422C0()
{
  return MEMORY[0x1F41886A0]();
}

uint64_t sub_1A49422D0()
{
  return MEMORY[0x1F415D4C0]();
}

uint64_t sub_1A4942340()
{
  return MEMORY[0x1F415D4F8]();
}

uint64_t sub_1A4942350()
{
  return MEMORY[0x1F415D500]();
}

uint64_t sub_1A4942360()
{
  return MEMORY[0x1F415D508]();
}

uint64_t sub_1A4942370()
{
  return MEMORY[0x1F415D510]();
}

uint64_t sub_1A4942380()
{
  return MEMORY[0x1F415D518]();
}

uint64_t sub_1A4942390()
{
  return MEMORY[0x1F415D520]();
}

uint64_t sub_1A49423A0()
{
  return MEMORY[0x1F415D528]();
}

uint64_t sub_1A49423B0()
{
  return MEMORY[0x1F415D530]();
}

uint64_t sub_1A49423C0()
{
  return MEMORY[0x1F415D548]();
}

uint64_t sub_1A49423D0()
{
  return MEMORY[0x1F415D560]();
}

uint64_t sub_1A49423E0()
{
  return MEMORY[0x1F415D568]();
}

uint64_t sub_1A49423F0()
{
  return MEMORY[0x1F415D570]();
}

uint64_t sub_1A4942400()
{
  return MEMORY[0x1F415D598]();
}

uint64_t sub_1A4942410()
{
  return MEMORY[0x1F415D5A0]();
}

uint64_t sub_1A4942420()
{
  return MEMORY[0x1F415D640]();
}

uint64_t sub_1A4942430()
{
  return MEMORY[0x1F415D668]();
}

uint64_t sub_1A4942440()
{
  return MEMORY[0x1F415D6C8]();
}

uint64_t sub_1A4942450()
{
  return MEMORY[0x1F415D6D0]();
}

uint64_t sub_1A4942460()
{
  return MEMORY[0x1F415D6D8]();
}

uint64_t sub_1A4942470()
{
  return MEMORY[0x1F415D718]();
}

uint64_t sub_1A4942480()
{
  return MEMORY[0x1F415D720]();
}

uint64_t sub_1A4942490()
{
  return MEMORY[0x1F415D730]();
}

uint64_t sub_1A49424A0()
{
  return MEMORY[0x1F415D738]();
}

uint64_t sub_1A49424B0()
{
  return MEMORY[0x1F415D768]();
}

uint64_t sub_1A49424C0()
{
  return MEMORY[0x1F415D770]();
}

uint64_t sub_1A49424D0()
{
  return MEMORY[0x1F415D778]();
}

uint64_t sub_1A49424E0()
{
  return MEMORY[0x1F415D780]();
}

uint64_t sub_1A49424F0()
{
  return MEMORY[0x1F415D788]();
}

uint64_t sub_1A4942500()
{
  return MEMORY[0x1F415D790]();
}

uint64_t sub_1A4942510()
{
  return MEMORY[0x1F415D7A0]();
}

uint64_t sub_1A4942520()
{
  return MEMORY[0x1F415D7A8]();
}

uint64_t sub_1A4942530()
{
  return MEMORY[0x1F415D7B0]();
}

uint64_t sub_1A4942540()
{
  return MEMORY[0x1F415D7B8]();
}

uint64_t sub_1A4942550()
{
  return MEMORY[0x1F415D7D8]();
}

uint64_t sub_1A4942560()
{
  return MEMORY[0x1F415D7E0]();
}

uint64_t sub_1A4942570()
{
  return MEMORY[0x1F415D7F8]();
}

uint64_t sub_1A4942580()
{
  return MEMORY[0x1F415D810]();
}

uint64_t sub_1A4942590()
{
  return MEMORY[0x1F415D838]();
}

uint64_t sub_1A49425A0()
{
  return MEMORY[0x1F415D840]();
}

uint64_t sub_1A49425B0()
{
  return MEMORY[0x1F415D868]();
}

uint64_t sub_1A49425C0()
{
  return MEMORY[0x1F415D870]();
}

uint64_t sub_1A49425D0()
{
  return MEMORY[0x1F415D878]();
}

uint64_t sub_1A49425E0()
{
  return MEMORY[0x1F415D880]();
}

uint64_t sub_1A49425F0()
{
  return MEMORY[0x1F415D888]();
}

uint64_t sub_1A4942600()
{
  return MEMORY[0x1F415D8A8]();
}

uint64_t sub_1A4942610()
{
  return MEMORY[0x1F415D8E8]();
}

uint64_t sub_1A4942620()
{
  return MEMORY[0x1F40F1F00]();
}

uint64_t sub_1A4942630()
{
  return MEMORY[0x1F40F1F10]();
}

uint64_t sub_1A4942640()
{
  return MEMORY[0x1F40F1F18]();
}

uint64_t sub_1A4942650()
{
  return MEMORY[0x1F40F1F48]();
}

uint64_t sub_1A4942660()
{
  return MEMORY[0x1F40F20A0]();
}

uint64_t sub_1A4942670()
{
  return MEMORY[0x1F40F2180]();
}

uint64_t sub_1A4942680()
{
  return MEMORY[0x1F40F2220]();
}

uint64_t sub_1A4942690()
{
  return MEMORY[0x1F40F2250]();
}

uint64_t sub_1A49426A0()
{
  return MEMORY[0x1F40F2260]();
}

uint64_t sub_1A49426B0()
{
  return MEMORY[0x1F40F22C8]();
}

uint64_t sub_1A49426C0()
{
  return MEMORY[0x1F40F2350]();
}

uint64_t sub_1A49426D0()
{
  return MEMORY[0x1F40F2370]();
}

uint64_t sub_1A49426E0()
{
  return MEMORY[0x1F40F2730]();
}

uint64_t sub_1A4942710()
{
  return MEMORY[0x1F40D6018]();
}

uint64_t sub_1A4942720()
{
  return MEMORY[0x1F40D6020]();
}

uint64_t sub_1A4942730()
{
  return MEMORY[0x1F40D6028]();
}

uint64_t sub_1A4942740()
{
  return MEMORY[0x1F40D6030]();
}

uint64_t sub_1A4942750()
{
  return MEMORY[0x1F40D6038]();
}

uint64_t sub_1A4942760()
{
  return MEMORY[0x1F40D6040]();
}

uint64_t sub_1A4942770()
{
  return MEMORY[0x1F40D6048]();
}

uint64_t sub_1A4942780()
{
  return MEMORY[0x1F40D6050]();
}

uint64_t sub_1A4942790()
{
  return MEMORY[0x1F40D6058]();
}

uint64_t sub_1A49427A0()
{
  return MEMORY[0x1F40D6060]();
}

uint64_t sub_1A49427B0()
{
  return MEMORY[0x1F40D6068]();
}

uint64_t sub_1A49427C0()
{
  return MEMORY[0x1F40D6070]();
}

uint64_t sub_1A49427D0()
{
  return MEMORY[0x1F40D6078]();
}

uint64_t sub_1A49427E0()
{
  return MEMORY[0x1F40D6080]();
}

uint64_t sub_1A49427F0()
{
  return MEMORY[0x1F40D6088]();
}

uint64_t sub_1A4942800()
{
  return MEMORY[0x1F40D6090]();
}

uint64_t sub_1A4942810()
{
  return MEMORY[0x1F40D6098]();
}

uint64_t sub_1A4942820()
{
  return MEMORY[0x1F40D60A0]();
}

uint64_t sub_1A4942830()
{
  return MEMORY[0x1F40D60A8]();
}

uint64_t sub_1A4942840()
{
  return MEMORY[0x1F40D60B0]();
}

uint64_t sub_1A4942850()
{
  return MEMORY[0x1F40D60B8]();
}

uint64_t sub_1A4942860()
{
  return MEMORY[0x1F40D60C0]();
}

uint64_t sub_1A4942870()
{
  return MEMORY[0x1F40D60C8]();
}

uint64_t sub_1A4942880()
{
  return MEMORY[0x1F40D60D0]();
}

uint64_t sub_1A4942890()
{
  return MEMORY[0x1F40D60D8]();
}

uint64_t sub_1A49428A0()
{
  return MEMORY[0x1F40D60E0]();
}

uint64_t sub_1A49428B0()
{
  return MEMORY[0x1F40D60E8]();
}

uint64_t sub_1A49428C0()
{
  return MEMORY[0x1F40D60F0]();
}

uint64_t sub_1A49428D0()
{
  return MEMORY[0x1F40D60F8]();
}

uint64_t sub_1A49428E0()
{
  return MEMORY[0x1F40D6100]();
}

uint64_t sub_1A49428F0()
{
  return MEMORY[0x1F40D6108]();
}

uint64_t sub_1A4942900()
{
  return MEMORY[0x1F40D6110]();
}

uint64_t sub_1A4942910()
{
  return MEMORY[0x1F40D6118]();
}

uint64_t sub_1A4942920()
{
  return MEMORY[0x1F40D6120]();
}

uint64_t sub_1A4942930()
{
  return MEMORY[0x1F40D6128]();
}

uint64_t sub_1A4942940()
{
  return MEMORY[0x1F40D6130]();
}

uint64_t sub_1A4942950()
{
  return MEMORY[0x1F40D6138]();
}

uint64_t sub_1A4942960()
{
  return MEMORY[0x1F40D6140]();
}

uint64_t sub_1A4942970()
{
  return MEMORY[0x1F40D6148]();
}

uint64_t sub_1A4942980()
{
  return MEMORY[0x1F40D6150]();
}

uint64_t sub_1A4942990()
{
  return MEMORY[0x1F40D6158]();
}

uint64_t sub_1A49429A0()
{
  return MEMORY[0x1F40D6160]();
}

uint64_t sub_1A49429B0()
{
  return MEMORY[0x1F40D6168]();
}

uint64_t sub_1A49429C0()
{
  return MEMORY[0x1F40D6170]();
}

uint64_t sub_1A49429D0()
{
  return MEMORY[0x1F4186CB0]();
}

uint64_t sub_1A49429E0()
{
  return MEMORY[0x1F4186CF8]();
}

uint64_t sub_1A49429F0()
{
  return MEMORY[0x1F4186D60]();
}

uint64_t sub_1A4942A00()
{
  return MEMORY[0x1F4186E28]();
}

uint64_t sub_1A4942A10()
{
  return MEMORY[0x1F4186E60]();
}

uint64_t sub_1A4942A20()
{
  return MEMORY[0x1F4186F18]();
}

uint64_t sub_1A4942A30()
{
  return MEMORY[0x1F4183270]();
}

uint64_t sub_1A4942A40()
{
  return MEMORY[0x1F40D61A0]();
}

uint64_t sub_1A4942A50()
{
  return MEMORY[0x1F40D61B0]();
}

uint64_t sub_1A4942A60()
{
  return MEMORY[0x1F40E6030]();
}

uint64_t sub_1A4942A70()
{
  return MEMORY[0x1F4183398]();
}

uint64_t sub_1A4942A80()
{
  return MEMORY[0x1F4183420]();
}

uint64_t sub_1A4942A90()
{
  return MEMORY[0x1F41834A8]();
}

uint64_t sub_1A4942AA0()
{
  return MEMORY[0x1F41834F8]();
}

uint64_t sub_1A4942AB0()
{
  return MEMORY[0x1F4183500]();
}

uint64_t sub_1A4942AC0()
{
  return MEMORY[0x1F41835C8]();
}

uint64_t sub_1A4942AD0()
{
  return MEMORY[0x1F40E6190]();
}

uint64_t sub_1A4942AE0()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t sub_1A4942AF0()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t sub_1A4942B00()
{
  return MEMORY[0x1F4183A80]();
}

uint64_t sub_1A4942B10()
{
  return MEMORY[0x1F4183BE8]();
}

uint64_t sub_1A4942B20()
{
  return MEMORY[0x1F4183C60]();
}

uint64_t sub_1A4942B30()
{
  return MEMORY[0x1F4183E80]();
}

uint64_t sub_1A4942B40()
{
  return MEMORY[0x1F40E6338]();
}

uint64_t sub_1A4942B50()
{
  return MEMORY[0x1F4183E90]();
}

uint64_t sub_1A4942B60()
{
  return MEMORY[0x1F4183E98]();
}

uint64_t sub_1A4942B70()
{
  return MEMORY[0x1F4183EA0]();
}

uint64_t sub_1A4942B80()
{
  return MEMORY[0x1F4183EA8]();
}

uint64_t sub_1A4942B90()
{
  return MEMORY[0x1F4183EC8]();
}

uint64_t sub_1A4942BA0()
{
  return MEMORY[0x1F4183EF0]();
}

uint64_t sub_1A4942BB0()
{
  return MEMORY[0x1F4183F18]();
}

uint64_t sub_1A4942BC0()
{
  return MEMORY[0x1F4183F38]();
}

uint64_t sub_1A4942BD0()
{
  return MEMORY[0x1F4183F78]();
}

uint64_t sub_1A4942BE0()
{
  return MEMORY[0x1F4183FA8]();
}

uint64_t sub_1A4942BF0()
{
  return MEMORY[0x1F4187BF0]();
}

uint64_t sub_1A4942C00()
{
  return MEMORY[0x1F4187CF8]();
}

uint64_t sub_1A4942C10()
{
  return MEMORY[0x1F4187D00]();
}

uint64_t sub_1A4942C30()
{
  return MEMORY[0x1F4187DB0]();
}

uint64_t sub_1A4942C40()
{
  return MEMORY[0x1F41842D0]();
}

uint64_t sub_1A4942C50()
{
  return MEMORY[0x1F41842F8]();
}

uint64_t sub_1A4942C60()
{
  return MEMORY[0x1F4184338]();
}

uint64_t sub_1A4942C70()
{
  return MEMORY[0x1F4184440]();
}

uint64_t sub_1A4942C80()
{
  return MEMORY[0x1F40D61C0]();
}

uint64_t sub_1A4942C90()
{
  return MEMORY[0x1F40D61C8]();
}

uint64_t sub_1A4942CA0()
{
  return MEMORY[0x1F40D61D0]();
}

uint64_t sub_1A4942CB0()
{
  return MEMORY[0x1F41886E0]();
}

uint64_t sub_1A4942CC0()
{
  return MEMORY[0x1F4188700]();
}

uint64_t sub_1A4942CD0()
{
  return MEMORY[0x1F40D61D8]();
}

uint64_t sub_1A4942CE0()
{
  return MEMORY[0x1F4186FF0]();
}

uint64_t sub_1A4942CF0()
{
  return MEMORY[0x1F4187010]();
}

uint64_t sub_1A4942D00()
{
  return MEMORY[0x1F41870B8]();
}

uint64_t sub_1A4942D10()
{
  return MEMORY[0x1F40D61F0]();
}

uint64_t sub_1A4942D20()
{
  return MEMORY[0x1F40D61F8]();
}

uint64_t sub_1A4942D30()
{
  return MEMORY[0x1F40D6220]();
}

uint64_t sub_1A4942D40()
{
  return MEMORY[0x1F40D6228]();
}

uint64_t sub_1A4942D50()
{
  return MEMORY[0x1F41874A8]();
}

uint64_t sub_1A4942D60()
{
  return MEMORY[0x1F41874C0]();
}

uint64_t sub_1A4942D70()
{
  return MEMORY[0x1F41874D0]();
}

uint64_t sub_1A4942D80()
{
  return MEMORY[0x1F41874E0]();
}

uint64_t sub_1A4942D90()
{
  return MEMORY[0x1F4188758]();
}

uint64_t sub_1A4942DA0()
{
  return MEMORY[0x1F415F180]();
}

uint64_t sub_1A4942DB0()
{
  return MEMORY[0x1F4184640]();
}

uint64_t sub_1A4942DC0()
{
  return MEMORY[0x1F41847C0]();
}

uint64_t sub_1A4942DD0()
{
  return MEMORY[0x1F4184820]();
}

uint64_t sub_1A4942DF0()
{
  return MEMORY[0x1F4184B18]();
}

uint64_t sub_1A4942E00()
{
  return MEMORY[0x1F4184CF0]();
}

uint64_t sub_1A4942E10()
{
  return MEMORY[0x1F4184D78]();
}

uint64_t sub_1A4942E20()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t sub_1A4942E30()
{
  return MEMORY[0x1F4184E28]();
}

uint64_t sub_1A4942E40()
{
  return MEMORY[0x1F4184E38]();
}

uint64_t sub_1A4942E50()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t sub_1A4942E60()
{
  return MEMORY[0x1F4184EC8]();
}

uint64_t sub_1A4942E70()
{
  return MEMORY[0x1F4184ED8]();
}

uint64_t sub_1A4942E80()
{
  return MEMORY[0x1F4184EE8]();
}

uint64_t sub_1A4942E90()
{
  return MEMORY[0x1F4184EF0]();
}

uint64_t sub_1A4942EA0()
{
  return MEMORY[0x1F4184F28]();
}

uint64_t sub_1A4942EB0()
{
  return MEMORY[0x1F4184F30]();
}

uint64_t sub_1A4942EC0()
{
  return MEMORY[0x1F4184F48]();
}

uint64_t sub_1A4942ED0()
{
  return MEMORY[0x1F4184F68]();
}

uint64_t sub_1A4942EE0()
{
  return MEMORY[0x1F4184F70]();
}

uint64_t sub_1A4942EF0()
{
  return MEMORY[0x1F4184FF8]();
}

uint64_t sub_1A4942F00()
{
  return MEMORY[0x1F41851F8]();
}

uint64_t sub_1A4942F10()
{
  return MEMORY[0x1F4185238]();
}

uint64_t sub_1A4942F20()
{
  return MEMORY[0x1F4185260]();
}

uint64_t sub_1A4942F30()
{
  return MEMORY[0x1F4185270]();
}

uint64_t sub_1A4942F40()
{
  return MEMORY[0x1F4185298]();
}

uint64_t sub_1A4942F50()
{
  return MEMORY[0x1F41852A0]();
}

uint64_t sub_1A4942F60()
{
  return MEMORY[0x1F41852B0]();
}

uint64_t sub_1A4942F70()
{
  return MEMORY[0x1F4185350]();
}

uint64_t sub_1A4942F80()
{
  return MEMORY[0x1F4185368]();
}

uint64_t sub_1A4942F90()
{
  return MEMORY[0x1F4185370]();
}

uint64_t sub_1A4942FA0()
{
  return MEMORY[0x1F4185378]();
}

uint64_t sub_1A4942FB0()
{
  return MEMORY[0x1F4185398]();
}

uint64_t sub_1A4942FC0()
{
  return MEMORY[0x1F41853A8]();
}

uint64_t sub_1A4942FD0()
{
  return MEMORY[0x1F4185568]();
}

uint64_t sub_1A4942FE0()
{
  return MEMORY[0x1F4185570]();
}

uint64_t sub_1A4942FF0()
{
  return MEMORY[0x1F4185598]();
}

uint64_t sub_1A4943000()
{
  return MEMORY[0x1F41855F0]();
}

uint64_t sub_1A4943010()
{
  return MEMORY[0x1F4185690]();
}

uint64_t sub_1A4943020()
{
  return MEMORY[0x1F4185698]();
}

uint64_t sub_1A4943030()
{
  return MEMORY[0x1F41856C0]();
}

uint64_t sub_1A4943040()
{
  return MEMORY[0x1F4185710]();
}

uint64_t sub_1A4943050()
{
  return MEMORY[0x1F4185758]();
}

uint64_t sub_1A4943070()
{
  return MEMORY[0x1F41859E8]();
}

uint64_t sub_1A4943080()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t sub_1A4943090()
{
  return MEMORY[0x1F4185B90]();
}

uint64_t sub_1A49430A0()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t sub_1A49430D0()
{
  return MEMORY[0x1F40E6E30]();
}

uint64_t sub_1A49430E0()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t sub_1A49430F0()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t sub_1A4943100()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t sub_1A4943110()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t sub_1A4943120()
{
  return MEMORY[0x1F4185EB0]();
}

uint64_t sub_1A4943130()
{
  return MEMORY[0x1F4185EC8]();
}

uint64_t sub_1A4943140()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t sub_1A4943150()
{
  return MEMORY[0x1F4185F10]();
}

uint64_t sub_1A4943160()
{
  return MEMORY[0x1F4185F40]();
}

uint64_t sub_1A4943170()
{
  return MEMORY[0x1F4185F48]();
}

uint64_t sub_1A4943180()
{
  return MEMORY[0x1F4185FC8]();
}

uint64_t sub_1A4943190()
{
  return MEMORY[0x1F4185FF0]();
}

uint64_t BOMCopierCopyWithOptions()
{
  return MEMORY[0x1F410CFC8]();
}

uint64_t BOMCopierFree()
{
  return MEMORY[0x1F410CFD8]();
}

uint64_t BOMCopierNew()
{
  return MEMORY[0x1F410CFE0]();
}

uint64_t BOMCopierSetCopyFileFinishedHandler()
{
  return MEMORY[0x1F410CFF0]();
}

uint64_t BOMCopierSetUserData()
{
  return MEMORY[0x1F410D028]();
}

uint64_t BOMCopierUserData()
{
  return MEMORY[0x1F410D030]();
}

uint64_t BiomeLibrary()
{
  return MEMORY[0x1F410C8D0]();
}

uint64_t CCCryptorGCMOneshotDecrypt()
{
  return MEMORY[0x1F40C94F8]();
}

uint64_t CCCryptorGCMOneshotEncrypt()
{
  return MEMORY[0x1F40C9500]();
}

CCRNGStatus CCRandomGenerateBytes(void *bytes, size_t count)
{
  return MEMORY[0x1F40C96C8](bytes, count);
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9730](data, *(void *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9770](data, *(void *)&len, md);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

CFMutableBitVectorRef CFBitVectorCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableBitVectorRef)MEMORY[0x1F40D73B8](allocator, capacity);
}

void CFBitVectorGetBits(CFBitVectorRef bv, CFRange range, UInt8 *bytes)
{
}

CFIndex CFBitVectorGetCount(CFBitVectorRef bv)
{
  return MEMORY[0x1F40D73D8](bv);
}

void CFBitVectorSetBitAtIndex(CFMutableBitVectorRef bv, CFIndex idx, CFBit value)
{
}

void CFBitVectorSetCount(CFMutableBitVectorRef bv, CFIndex count)
{
}

CFStringRef CFCopyTypeIDDescription(CFTypeID type_id)
{
  return (CFStringRef)MEMORY[0x1F40D77D0](type_id);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDistributedCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D18]();
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E30](number);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

void CFRelease(CFTypeRef cf)
{
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB230]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x1F40DB280]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x1F40DB288]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1F40DB2D8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

uint64_t CKCreateGUID()
{
  return MEMORY[0x1F40D62A8]();
}

uint64_t CKProductType()
{
  return MEMORY[0x1F40D6418]();
}

uint64_t CKProductVersion()
{
  return MEMORY[0x1F40D6420]();
}

uint64_t CKRetryAfterSecondsForError()
{
  return MEMORY[0x1F40D6448]();
}

uint64_t CKValidateKeyName()
{
  return MEMORY[0x1F40D64E8]();
}

uint64_t CKValueIsAcceptablePredicateClass()
{
  return MEMORY[0x1F40D64F0]();
}

CLLocationCoordinate2D CLLocationCoordinate2DMake(CLLocationDegrees latitude, CLLocationDegrees longitude)
{
  MEMORY[0x1F40DB5A0](latitude, longitude);
  result.longitude = v3;
  result.latitude = v2;
  return result;
}

uint64_t CacheManagementEnumerateAssets()
{
  return MEMORY[0x1F410DD20]();
}

uint64_t MGGetProductType()
{
  return MEMORY[0x1F417CE18]();
}

uint64_t MGIsDeviceOneOfType()
{
  return MEMORY[0x1F417CE48]();
}

uint64_t NFDeviceHasExtendedColorDisplay()
{
  return MEMORY[0x1F41389A0]();
}

uint64_t NFDeviceOSVersion()
{
  return MEMORY[0x1F41389A8]();
}

uint64_t NFGeneralDeviceString()
{
  return MEMORY[0x1F41389B8]();
}

uint64_t NFInternalBuild()
{
  return MEMORY[0x1F41389C0]();
}

uint64_t NFSeedBuild()
{
  return MEMORY[0x1F41389C8]();
}

uint64_t NFStoreDemoMode()
{
  return MEMORY[0x1F41389D0]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

void NSEndMapTableEnumeration(NSMapEnumerator *enumerator)
{
}

NSMapEnumerator *__cdecl NSEnumerateMapTable(NSMapEnumerator *__return_ptr retstr, NSMapTable *table)
{
  return (NSMapEnumerator *)MEMORY[0x1F40E70B0](retstr, table);
}

BOOL NSNextMapEnumeratorPair(NSMapEnumerator *enumerator, void **key, void **value)
{
  return MEMORY[0x1F40E71B0](enumerator, key, value);
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1F40E7248](directory, domainMask, expandTilde);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1F40E7258](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E72C8]();
}

uint64_t NTPBDateReadFrom()
{
  return MEMORY[0x1F41396D0]();
}

uint64_t NTPBFeedItemReadFrom()
{
  return MEMORY[0x1F41396D8]();
}

uint64_t NTPBReadBaseFromRecordData()
{
  return MEMORY[0x1F41396E0]();
}

uint64_t PBDataWriterPlaceMark()
{
  return MEMORY[0x1F4147180]();
}

uint64_t PBDataWriterRecallMark()
{
  return MEMORY[0x1F4147188]();
}

uint64_t PBDataWriterWriteBOOLField()
{
  return MEMORY[0x1F4147190]();
}

uint64_t PBDataWriterWriteBareVarint()
{
  return MEMORY[0x1F41471A0]();
}

uint64_t PBDataWriterWriteDataField()
{
  return MEMORY[0x1F41471B0]();
}

uint64_t PBDataWriterWriteDoubleField()
{
  return MEMORY[0x1F41471C0]();
}

uint64_t PBDataWriterWriteFloatField()
{
  return MEMORY[0x1F41471D8]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x1F41471E0]();
}

uint64_t PBDataWriterWriteInt64Field()
{
  return MEMORY[0x1F41471F0]();
}

uint64_t PBDataWriterWriteStringField()
{
  return MEMORY[0x1F4147220]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x1F4147230]();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return MEMORY[0x1F4147240]();
}

uint64_t PBDataWriterWriteUint64Field()
{
  return MEMORY[0x1F4147248]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x1F4147268]();
}

uint64_t PBReaderReadData()
{
  return MEMORY[0x1F4147278]();
}

uint64_t PBReaderReadString()
{
  return MEMORY[0x1F4147280]();
}

uint64_t PBReaderReadVarIntBuf()
{
  return MEMORY[0x1F4147290]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x1F41472A0]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x1F41472A8]();
}

uint64_t PBRepeatedUInt32Add()
{
  return MEMORY[0x1F41473D0]();
}

CFStringRef UTTypeCreatePreferredIdentifierForTag(CFStringRef inTagClass, CFStringRef inTag, CFStringRef inConformingToUTI)
{
  return (CFStringRef)MEMORY[0x1F40DEE60](inTagClass, inTag, inConformingToUTI);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

uint64_t _availability_version_check()
{
  return MEMORY[0x1F40C9D48]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1F4186370]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1F4186388]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1F40CA1E8]();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1F40CA3C0](*(void *)&__upper_bound);
}

void bzero(void *a1, size_t a2)
{
}

uint64_t ccaes_siv_decrypt_mode()
{
  return MEMORY[0x1F40CA6F8]();
}

uint64_t ccaes_siv_encrypt_mode()
{
  return MEMORY[0x1F40CA700]();
}

uint64_t cchkdf()
{
  return MEMORY[0x1F40CAE28]();
}

uint64_t ccsha512_di()
{
  return MEMORY[0x1F40CB158]();
}

uint64_t ccsiv_ciphertext_size()
{
  return MEMORY[0x1F40CB170]();
}

uint64_t ccsiv_one_shot()
{
  return MEMORY[0x1F40CB188]();
}

uint64_t ccsiv_plaintext_size()
{
  return MEMORY[0x1F40CB190]();
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x1F41814C8](cls, name, imp, types);
}

BOOL class_conformsToProtocol(Class cls, Protocol *protocol)
{
  return MEMORY[0x1F41814E0](cls, protocol);
}

Method class_getClassMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1F4181518](cls, name);
}

Method class_getInstanceMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1F4181528](cls, name);
}

const char *__cdecl class_getName(Class cls)
{
  return (const char *)MEMORY[0x1F4181548](cls);
}

Class class_getSuperclass(Class cls)
{
  return (Class)MEMORY[0x1F4181558](cls);
}

IMP class_replaceMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return (IMP)MEMORY[0x1F4181578](cls, name, imp, types);
}

uint64_t container_error_copy_unlocalized_description()
{
  return MEMORY[0x1F40CB5D0]();
}

uint64_t container_query_count_results()
{
  return MEMORY[0x1F40CB718]();
}

uint64_t container_query_create()
{
  return MEMORY[0x1F40CB720]();
}

uint64_t container_query_free()
{
  return MEMORY[0x1F40CB730]();
}

uint64_t container_query_get_last_error()
{
  return MEMORY[0x1F40CB738]();
}

uint64_t container_query_operation_set_flags()
{
  return MEMORY[0x1F40CB750]();
}

uint64_t container_query_set_class()
{
  return MEMORY[0x1F40CB760]();
}

uint64_t container_query_set_persona_unique_string()
{
  return MEMORY[0x1F40CB780]();
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x1F4182BD0](strm, *(void *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x1F4182BE0](strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return MEMORY[0x1F4182BE8](strm, *(void *)&level, *(void *)&method, *(void *)&windowBits, *(void *)&memLevel, *(void *)&strategy, version, *(void *)&stream_size);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C0](flags, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C8](flags, *(void *)&qos_class, *(void *)&relative_priority, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x1F40CBA68](key);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_merge_data(dispatch_source_t source, uintptr_t value)
{
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

long double exp2(long double __x)
{
  MEMORY[0x1F40CBFE8](__x);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x1F40CC1A0](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  MEMORY[0x1F40CC1A8](a1, a2);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC200](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1F40CC290](a1, a2, *(void *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1F40CC2E0](a1);
}

ssize_t getxattr(const char *path, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1F40CC590](path, name, value, size, *(void *)&position, *(void *)&options);
}

IMP imp_implementationWithBlock(id block)
{
  return (IMP)MEMORY[0x1F4181598](block);
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x1F4182CB0](strm, *(void *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x1F4182CB8](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x1F4182CC8](strm, *(void *)&windowBits, version, *(void *)&stream_size);
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CC900](a1, a2);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void method_exchangeImplementations(Method m1, Method m2)
{
}

IMP method_getImplementation(Method m)
{
  return (IMP)MEMORY[0x1F41815F8](m);
}

const char *__cdecl method_getTypeEncoding(Method m)
{
  return (const char *)MEMORY[0x1F4181618](m);
}

IMP method_setImplementation(Method m, IMP imp)
{
  return (IMP)MEMORY[0x1F4181628](m, imp);
}

uint64_t nw_activity_create()
{
  return MEMORY[0x1F40F2898]();
}

uint64_t nw_activity_get_token()
{
  return MEMORY[0x1F40F28C0]();
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1F4181718](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

Protocol *__cdecl objc_getProtocol(const char *name)
{
  return (Protocol *)MEMORY[0x1F4181750](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1F4181A58](a1);
}

const char *__cdecl object_getClassName(id a1)
{
  return (const char *)MEMORY[0x1F4181A60](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

uint64_t os_unfair_lock_lock_with_options()
{
  return MEMORY[0x1F40CD5E8]();
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1F40CDBD8]();
}

uint64_t random(void)
{
  return MEMORY[0x1F40CDC18]();
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

void rewind(FILE *a1)
{
}

int setxattr(const char *path, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1F40CDFD8](path, name, value, size, *(void *)&position, *(void *)&options);
}

long double sin(long double __x)
{
  MEMORY[0x1F40CE058](__x);
  return result;
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181F90](a1, *(void *)&a2, a3, *(void *)&n, a5);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x1F4181FB8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181FE8](a1, *(void *)&a2, a3, *(void *)&a4, a5);
}

int sqlite3_busy_timeout(sqlite3 *a1, int ms)
{
  return MEMORY[0x1F4182048](a1, *(void *)&ms);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1F4182060](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1F4182070](a1, *(void *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F4182078](a1, *(void *)&iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820A8](a1, *(void *)&iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1F41820C8](a1, *(void *)&iCol);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1F4182198](a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x1F41821A8](a1, sql, callback, a4, errmsg);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41821D8](pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1F4182280](filename, ppDb, *(void *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1F4182290](db, zSql, *(void *)&nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41822C0](pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1F41823B0](a1);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0D0](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1F41863E0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1F41863F0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1F4186420]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1F4186428]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1F4186458]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1F41881F0]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1F41864A0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x1F41864D0]();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return MEMORY[0x1F41864F0]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1F4186518]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1F4186540]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1F4186550]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1F41865E0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1F41865E8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1F4186650]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1F4186688]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x1F41866A0]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1F41866A8]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x1F41866C0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1F4186710]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1F4188250]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1F4188258]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1F4188260]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1F4186858]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1F4186860]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1F4186868]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1F41868B8]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1F41868C0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1F41868C8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1F40CE3C0](a1, *(void *)&a2, a3, a4, a5, a6);
}

sysdir_search_path_enumeration_state sysdir_get_next_search_path_enumeration(sysdir_search_path_enumeration_state state, char *path)
{
  return MEMORY[0x1F40CE3E8](*(void *)&state, path);
}

uint64_t sysdir_start_search_path_enumeration_private()
{
  return MEMORY[0x1F40CE3F8]();
}

time_t time(time_t *a1)
{
  return MEMORY[0x1F40CE588](a1);
}

uint64_t zalgo()
{
  return MEMORY[0x1F41389D8]();
}

uint64_t zalgoIfMain()
{
  return MEMORY[0x1F41389E0]();
}