void ToolDescriptionEnvelope.ToolTypeEnvelope.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;

  v1 = v0;
  v2 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
  v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
  MEMORY[0x270FA5388](v6 - 8);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentResourceEnvelope(v1, (uint64_t)v8, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 2, v2);
  if (v9)
  {
    Hasher._combine(_:)(v9 != 1);
  }
  else
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v8, (uint64_t)v5, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
    Hasher._combine(_:)(2uLL);
    String.hash(into:)();
    String.hash(into:)();
    type metadata accessor for GenerationSchema();
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema, MEMORY[0x263F40C58]);
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of DocumentResourceEnvelope((uint64_t)v5, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
  }
}

uint64_t ToolDescriptionEnvelope.ToolTypeEnvelope.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys>);
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  MEMORY[0x270FA5388](v2);
  v32 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v31 = (uint64_t)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys>);
  uint64_t v29 = *(void *)(v7 - 8);
  uint64_t v30 = v7;
  MEMORY[0x270FA5388](v7);
  v28 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys>);
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  MEMORY[0x270FA5388](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
  MEMORY[0x270FA5388](v12 - 8);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys>);
  uint64_t v15 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of DocumentResourceEnvelope(v35, (uint64_t)v14, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
  int v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v14, 2, v4);
  if (v18)
  {
    if (v18 == 1)
    {
      char v37 = 0;
      lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys();
      uint64_t v19 = v36;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v27);
    }
    else
    {
      char v38 = 1;
      lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys();
      v25 = v28;
      uint64_t v19 = v36;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v25, v30);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v19);
  }
  else
  {
    uint64_t v20 = v31;
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v14, v31, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
    char v39 = 2;
    lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys();
    v21 = v32;
    uint64_t v22 = v36;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope, (void (*)(uint64_t))type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
    uint64_t v23 = v34;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v23);
    outlined destroy of DocumentResourceEnvelope(v20, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v22);
  }
}

uint64_t ToolDescriptionEnvelope.ToolTypeEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v46 = v3;
  uint64_t v47 = v4;
  MEMORY[0x270FA5388](v3);
  v50 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys>);
  uint64_t v42 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  v49 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v43 = v7;
  uint64_t v44 = v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys>);
  uint64_t v48 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v20 = a1[3];
  v52 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v20);
  lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys();
  uint64_t v21 = (uint64_t)v53;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v21)
  {
    v41 = v17;
    uint64_t v22 = v49;
    uint64_t v23 = v50;
    v53 = v19;
    uint64_t v24 = v51;
    uint64_t v25 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v25 + 16) == 1)
    {
      if (*(unsigned char *)(v25 + 32))
      {
        if (*(unsigned char *)(v25 + 32) != 1)
        {
          char v56 = 2;
          lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys();
          uint64_t v30 = v23;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v35 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
          lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope, (void (*)(uint64_t))type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
          uint64_t v36 = (uint64_t)v41;
          uint64_t v37 = v46;
          v49 = (char *)v35;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v47 + 8))(v30, v37);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v48 + 8))(v13, v11);
          uint64_t v38 = (uint64_t)v52;
          (*(void (**)(uint64_t, void, uint64_t))(*((void *)v49 - 1) + 56))(v36, 0, 2);
          uint64_t v33 = (uint64_t)v53;
          outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v36, (uint64_t)v53, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
          uint64_t v39 = v51;
LABEL_12:
          outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v33, v39, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
          return __swift_destroy_boxed_opaque_existential_1Tm(v38);
        }
        char v55 = 1;
        lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v42 + 8))(v22, v45);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v48 + 8))(v13, v11);
        uint64_t v32 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
        uint64_t v33 = (uint64_t)v53;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v53, 2, 2, v32);
      }
      else
      {
        char v54 = 0;
        lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v44 + 8))(v10, v43);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v48 + 8))(v13, v11);
        uint64_t v34 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
        uint64_t v33 = (uint64_t)v53;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v53, 1, 2, v34);
      }
      uint64_t v38 = (uint64_t)v52;
      uint64_t v39 = v24;
      goto LABEL_12;
    }
    uint64_t v26 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v27 = v13;
    uint64_t v29 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v29 = v14;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v29, *MEMORY[0x263F8DCB0], v26);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v27, v11);
  }
  uint64_t v38 = (uint64_t)v52;
  return __swift_destroy_boxed_opaque_existential_1Tm(v38);
}

uint64_t ToolDescriptionEnvelope.FunctionDescriptionEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
    v8[13] = 2;
    type metadata accessor for SchemaEnvelope(0);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type SchemaEnvelope and conformance SchemaEnvelope, (void (*)(uint64_t))type metadata accessor for SchemaEnvelope);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ToolDescriptionEnvelope.FunctionDescriptionEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v4 = type metadata accessor for SchemaEnvelope(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys>);
  uint64_t v22 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (void *)((char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = a1[3];
  uint64_t v25 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  lazy protocol witness table accessor for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
  }
  v21[1] = v4;
  uint64_t v13 = (uint64_t)v6;
  uint64_t v14 = v22;
  uint64_t v15 = v23;
  char v28 = 0;
  uint64_t v16 = (uint64_t)v11;
  uint64_t *v11 = KeyedDecodingContainer.decode(_:forKey:)();
  v11[1] = v17;
  char v27 = 1;
  v11[2] = KeyedDecodingContainer.decode(_:forKey:)();
  v11[3] = v18;
  char v26 = 2;
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type SchemaEnvelope and conformance SchemaEnvelope, (void (*)(uint64_t))type metadata accessor for SchemaEnvelope);
  uint64_t v19 = v24;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v19);
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v13, v16 + *(int *)(v9 + 24), type metadata accessor for SchemaEnvelope);
  outlined init with copy of DocumentResourceEnvelope(v16, v15, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
  return outlined destroy of DocumentResourceEnvelope(v16, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys()
{
  uint64_t v1 = 0x6E65476567616D69;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E6F6974636E7566;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x72657773776F7262;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ToolDescriptionEnvelope.ToolTypeEnvelope(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance StreamingRequest(a1, a2, (void (*)(unsigned char *))ToolDescriptionEnvelope.ToolTypeEnvelope.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolDescriptionEnvelope.ToolTypeEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest(a1, a2, a3, (void (*)(unsigned char *))ToolDescriptionEnvelope.ToolTypeEnvelope.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance ToolDescriptionEnvelope.ToolTypeEnvelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ToolDescriptionEnvelope.ToolTypeEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ToolDescriptionEnvelope.ToolTypeEnvelope(void *a1)
{
  return ToolDescriptionEnvelope.ToolTypeEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys()
{
  unint64_t v1 = 0xD000000000000010;
  if (*v0 != 1) {
    unint64_t v1 = 0x746E656D75677261;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701667182;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ToolDescriptionEnvelope.FunctionDescriptionEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope(void *a1)
{
  return ToolDescriptionEnvelope.FunctionDescriptionEnvelope.encode(to:)(a1);
}

void ToolDescriptionEnvelope.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentResourceEnvelope(v1, (uint64_t)v8, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
  int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 2, v2);
  if (v9)
  {
    Hasher._combine(_:)(v9 != 1);
  }
  else
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v8, (uint64_t)v5, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
    Hasher._combine(_:)(2uLL);
    String.hash(into:)();
    String.hash(into:)();
    type metadata accessor for GenerationSchema();
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema, MEMORY[0x263F40C58]);
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of DocumentResourceEnvelope((uint64_t)v5, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ToolDescriptionEnvelope.CodingKeys()
{
  return 1701869940;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ToolDescriptionEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolDescriptionEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolDescriptionEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ToolDescriptionEnvelope.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolDescriptionEnvelope.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope and conformance ToolDescriptionEnvelope.ToolTypeEnvelope, (void (*)(uint64_t))type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int ToolDescriptionEnvelope.hashValue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  outlined init with copy of DocumentResourceEnvelope(v1, (uint64_t)v8, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
  int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 2, v2);
  if (v9)
  {
    Hasher._combine(_:)(v9 != 1);
  }
  else
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v8, (uint64_t)v5, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
    Hasher._combine(_:)(2uLL);
    String.hash(into:)();
    String.hash(into:)();
    type metadata accessor for GenerationSchema();
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema, MEMORY[0x263F40C58]);
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of DocumentResourceEnvelope((uint64_t)v5, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
  }
  return Hasher._finalize()();
}

uint64_t ToolDescriptionEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v4 = type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolDescriptionEnvelope.CodingKeys>);
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ToolDescriptionEnvelope(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope and conformance ToolDescriptionEnvelope.ToolTypeEnvelope, (void (*)(uint64_t))type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v15, (uint64_t)v11, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v11, v13, type metadata accessor for ToolDescriptionEnvelope);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolDescriptionEnvelope()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  outlined init with copy of DocumentResourceEnvelope(v1, (uint64_t)v8, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
  int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 2, v2);
  if (v9)
  {
    Hasher._combine(_:)(v9 != 1);
  }
  else
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v8, (uint64_t)v5, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
    Hasher._combine(_:)(2uLL);
    String.hash(into:)();
    String.hash(into:)();
    type metadata accessor for GenerationSchema();
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema, MEMORY[0x263F40C58]);
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of DocumentResourceEnvelope((uint64_t)v5, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ToolDescriptionEnvelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ToolDescriptionEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ToolDescriptionEnvelope(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolDescriptionEnvelope.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope and conformance ToolDescriptionEnvelope.ToolTypeEnvelope, (void (*)(uint64_t))type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ToolCallEnvelope.KindEnvelope.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolCallEnvelope.KindEnvelope.FunctionCodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  int v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolCallEnvelope.KindEnvelope.CodingKeys>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  uint64_t v19 = v15;
  uint64_t v20 = v16;
  uint64_t v21 = v17;
  uint64_t v22 = v18;
  lazy protocol witness table accessor for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t PromptRenderingEnvelope.SourceEnvelope.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, void (*a7)(void *, uint64_t, uint64_t))
{
  v18[2] = a3;
  v18[0] = a4;
  v18[1] = a5;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a6);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a7(v13, v14, v15);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v20 = 0;
  uint64_t v16 = v18[3];
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v16)
  {
    char v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t ToolCallEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolCallEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    outlined init with take of Any((_OWORD *)(v3 + 16), v14);
    outlined init with take of Any(v14, v12);
    char v11 = 1;
    lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    outlined init with take of Locale?(v3 + 48, (uint64_t)v13, &demangling cache variable for type metadata for Data?);
    outlined init with take of Locale?((uint64_t)v13, (uint64_t)v12, &demangling cache variable for type metadata for Data?);
    char v11 = 2;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int ToolCallEnvelope.hashValue.getter()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(0);
  String.hash(into:)();
  String.hash(into:)();
  unint64_t v1 = *(void *)(v0 + 56);
  if (v1 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 48);
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v2, v1);
    Data.hash(into:)();
    outlined consume of Data?(v2, v1);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ToolCallEnvelope.KindEnvelope.CodingKeys()
{
  return 0x6E6F6974636E7566;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ToolCallEnvelope.KindEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6E6F6974636E7566 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolCallEnvelope.KindEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolCallEnvelope.KindEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void *protocol witness for Decodable.init(from:) in conformance ToolCallEnvelope.KindEnvelope@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = specialized ToolCallEnvelope.KindEnvelope.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ToolCallEnvelope.KindEnvelope(void *a1)
{
  return ToolCallEnvelope.KindEnvelope.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ToolCallEnvelope.FunctionEnvelope@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for Decodable.init(from:) in conformance PromptRenderingEnvelope.SourceEnvelope(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<ToolCallEnvelope.FunctionEnvelope.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PromptRenderingEnvelope.SourceEnvelope@<X0>(void *a1@<X0>, uint64_t *a2@<X3>, void (*a3)(void)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t result = specialized PromptRenderingEnvelope.SourceEnvelope.init(from:)(a1, a2, a3);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ToolCallEnvelope.FunctionEnvelope(void *a1)
{
  return PromptRenderingEnvelope.SourceEnvelope.encode(to:)(a1, *v1, v1[1], v1[2], v1[3], &demangling cache variable for type metadata for KeyedEncodingContainer<ToolCallEnvelope.FunctionEnvelope.CodingKeys>, (void (*)(void *, uint64_t, uint64_t))lazy protocol witness table accessor for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ToolCallEnvelope.CodingKeys()
{
  uint64_t v1 = 1684957547;
  if (*v0 != 1) {
    uint64_t v1 = 0x6F666E4972657375;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 25705;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ToolCallEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ToolCallEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolCallEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolCallEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ToolCallEnvelope()
{
  return ToolCallEnvelope.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance ToolCallEnvelope()
{
  uint64_t v1 = *(void *)(v0 + 48);
  unint64_t v2 = *(void *)(v0 + 56);
  String.hash(into:)();
  Hasher._combine(_:)(0);
  String.hash(into:)();
  String.hash(into:)();
  if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v1, v2);
    Data.hash(into:)();
    outlined consume of Data?(v1, v2);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolCallEnvelope()
{
  uint64_t v1 = *(void *)(v0 + 48);
  unint64_t v2 = *(void *)(v0 + 56);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(0);
  String.hash(into:)();
  String.hash(into:)();
  if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v1, v2);
    Data.hash(into:)();
    outlined consume of Data?(v1, v2);
  }
  return Hasher._finalize()();
}

double protocol witness for Decodable.init(from:) in conformance ToolCallEnvelope@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  specialized ToolCallEnvelope.init(from:)(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ToolCallEnvelope(void *a1)
{
  return ToolCallEnvelope.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ToolCallEnvelope(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = a1[3];
  _OWORD v7[2] = a1[2];
  v7[3] = v3;
  long long v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  long long v5 = a2[3];
  v8[2] = a2[2];
  v8[3] = v5;
  return specialized static ToolCallEnvelope.== infix(_:_:)(v7, v8);
}

uint64_t RequestPayload.hash(into:)(uint64_t a1)
{
  return OneShotRequest.hash(into:)(a1, type metadata accessor for RequestPayload, type metadata accessor for RequestPayload);
}

uint64_t OneShotRequest.hash(into:)(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = type metadata accessor for CompletePromptTemplateRequest(0);
  MEMORY[0x270FA5388](v7 - 8);
  long long v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CompletePromptRequest(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CountTokensPromptTemplateRequest(0);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a2(0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (uint64_t *)((char *)&v31 - v17);
  outlined init with copy of DocumentResourceEnvelope(v3, (uint64_t)&v31 - v17, a3);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v18, (uint64_t)v15, type metadata accessor for CountTokensPromptTemplateRequest);
      Hasher._combine(_:)(1uLL);
      CountTokensPromptTemplateRequest.hash(into:)(a1);
      uint64_t v29 = type metadata accessor for CountTokensPromptTemplateRequest;
      uint64_t v30 = (uint64_t)v15;
      goto LABEL_6;
    case 2u:
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v18, (uint64_t)v12, type metadata accessor for CompletePromptRequest);
      Hasher._combine(_:)(2uLL);
      CompletePromptRequest.hash(into:)(a1);
      uint64_t v29 = type metadata accessor for CompletePromptRequest;
      uint64_t v30 = (uint64_t)v12;
      goto LABEL_6;
    case 3u:
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v18, (uint64_t)v9, type metadata accessor for CompletePromptTemplateRequest);
      Hasher._combine(_:)(3uLL);
      CompletePromptTemplateRequest.hash(into:)(a1);
      uint64_t v29 = type metadata accessor for CompletePromptTemplateRequest;
      uint64_t v30 = (uint64_t)v9;
LABEL_6:
      uint64_t result = outlined destroy of DocumentResourceEnvelope(v30, v29);
      break;
    default:
      uint64_t v19 = v18[1];
      uint64_t v34 = *v18;
      uint64_t v35 = v19;
      uint64_t v21 = v18[2];
      uint64_t v20 = v18[3];
      uint64_t v22 = v18[4];
      uint64_t v23 = v18[5];
      uint64_t v25 = v18[6];
      uint64_t v24 = v18[7];
      uint64_t v26 = v18[9];
      uint64_t v32 = v18[8];
      uint64_t v33 = v22;
      uint64_t v27 = v18[10];
      Hasher._combine(_:)(0);
      uint64_t v36 = v34;
      uint64_t v37 = v19;
      uint64_t v38 = v21;
      uint64_t v39 = v20;
      uint64_t v40 = v33;
      uint64_t v41 = v23;
      uint64_t v42 = v25;
      uint64_t v43 = v24;
      uint64_t v44 = v32;
      uint64_t v45 = v26;
      uint64_t v46 = v27;
      CountTokensRequest.hash(into:)(a1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      break;
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RequestPayload.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RequestPayload.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RequestPayload.CompletePromptCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RequestPayload.CompletePromptCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RequestPayload.CompletePromptTemplateCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RequestPayload.CompletePromptTemplateCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RequestPayload.CountTokensCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RequestPayload.CountTokensCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RequestPayload.CountTokensPromptTemplateCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RequestPayload.CountTokensPromptTemplateCodingKeys and conformance RequestPayload.CountTokensPromptTemplateCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RequestPayload.CountTokensPromptTemplateCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RequestPayload.CountTokensPromptTemplateCodingKeys and conformance RequestPayload.CountTokensPromptTemplateCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t RequestPayload.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RequestPayload.CompletePromptTemplateCodingKeys>);
  char v55 = *(char **)(v2 - 8);
  uint64_t v56 = v2;
  MEMORY[0x270FA5388](v2);
  char v54 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for CompletePromptTemplateRequest(0);
  MEMORY[0x270FA5388](v51);
  uint64_t v53 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RequestPayload.CompletePromptCodingKeys>);
  v50 = *(char **)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  v49 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for CompletePromptRequest(0);
  MEMORY[0x270FA5388](v47);
  uint64_t v48 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RequestPayload.CountTokensPromptTemplateCodingKeys>);
  uint64_t v45 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v44 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for CountTokensPromptTemplateRequest(0);
  MEMORY[0x270FA5388](v43);
  long long v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RequestPayload.CountTokensCodingKeys>);
  uint64_t v41 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for RequestPayload(0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char **)((char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RequestPayload.CodingKeys>);
  uint64_t v57 = *(void *)(v15 - 8);
  uint64_t v58 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys();
  uint64_t v18 = v17;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of DocumentResourceEnvelope((uint64_t)v70, (uint64_t)v14, type metadata accessor for RequestPayload);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v14, (uint64_t)v9, type metadata accessor for CountTokensPromptTemplateRequest);
      LOBYTE(v59) = 1;
      lazy protocol witness table accessor for type RequestPayload.CountTokensPromptTemplateCodingKeys and conformance RequestPayload.CountTokensPromptTemplateCodingKeys();
      uint64_t v38 = v44;
      uint64_t v31 = v58;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CountTokensPromptTemplateRequest and conformance CountTokensPromptTemplateRequest, (void (*)(uint64_t))type metadata accessor for CountTokensPromptTemplateRequest);
      uint64_t v39 = v46;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v38, v39);
      uint64_t v36 = type metadata accessor for CountTokensPromptTemplateRequest;
      uint64_t v37 = (uint64_t)v9;
      goto LABEL_7;
    case 2u:
      uint64_t v29 = (uint64_t)v48;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v14, (uint64_t)v48, type metadata accessor for CompletePromptRequest);
      LOBYTE(v59) = 2;
      lazy protocol witness table accessor for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys();
      uint64_t v30 = v49;
      uint64_t v31 = v58;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CompletePromptRequest and conformance CompletePromptRequest, (void (*)(uint64_t))type metadata accessor for CompletePromptRequest);
      uint64_t v32 = v52;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*((void (**)(char *, uint64_t))v50 + 1))(v30, v32);
      uint64_t v33 = type metadata accessor for CompletePromptRequest;
      goto LABEL_5;
    case 3u:
      uint64_t v29 = v53;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v14, v53, type metadata accessor for CompletePromptTemplateRequest);
      LOBYTE(v59) = 3;
      lazy protocol witness table accessor for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys();
      uint64_t v34 = v54;
      uint64_t v31 = v58;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CompletePromptTemplateRequest and conformance CompletePromptTemplateRequest, (void (*)(uint64_t))type metadata accessor for CompletePromptTemplateRequest);
      uint64_t v35 = v56;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*((void (**)(char *, uint64_t))v55 + 1))(v34, v35);
      uint64_t v33 = type metadata accessor for CompletePromptTemplateRequest;
LABEL_5:
      uint64_t v36 = v33;
      uint64_t v37 = v29;
LABEL_7:
      outlined destroy of DocumentResourceEnvelope(v37, v36);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v18, v31);
      break;
    default:
      uint64_t v19 = *v14;
      v70 = v14[1];
      uint64_t v20 = (uint64_t)v70;
      uint64_t v21 = v14[2];
      char v54 = v19;
      char v55 = v21;
      v50 = v14[3];
      uint64_t v22 = (uint64_t)v14[4];
      uint64_t v23 = v14[5];
      uint64_t v52 = (uint64_t)v14[6];
      uint64_t v53 = v22;
      uint64_t v48 = v14[7];
      uint64_t v24 = (uint64_t)v14[9];
      uint64_t v51 = (uint64_t)v14[8];
      uint64_t v56 = v24;
      v49 = v14[10];
      LOBYTE(v59) = 0;
      lazy protocol witness table accessor for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys();
      uint64_t v25 = v58;
      uint64_t v26 = v18;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v59 = v54;
      uint64_t v60 = v20;
      v61 = v21;
      v62 = v50;
      uint64_t v63 = v53;
      v64 = v23;
      uint64_t v65 = v52;
      uint64_t v66 = (uint64_t)v48;
      uint64_t v67 = v51;
      uint64_t v68 = v24;
      v69 = v49;
      lazy protocol witness table accessor for type CountTokensRequest and conformance CountTokensRequest();
      uint64_t v27 = v42;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v11, v27);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v26, v25);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      break;
  }
  return result;
}

Swift::Int RequestPayload.hashValue.getter()
{
  return CountTokensPromptTemplateRequest.hashValue.getter((void (*)(unsigned char *))RequestPayload.hash(into:));
}

uint64_t RequestPayload.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v66 = a2;
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RequestPayload.CompletePromptTemplateCodingKeys>);
  uint64_t v65 = *(void *)(v63 - 8);
  MEMORY[0x270FA5388](v63);
  uint64_t v67 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RequestPayload.CompletePromptCodingKeys>);
  uint64_t v64 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  v72 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RequestPayload.CountTokensPromptTemplateCodingKeys>);
  uint64_t v60 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  v71 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RequestPayload.CountTokensCodingKeys>);
  uint64_t v58 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  v69 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RequestPayload.CodingKeys>);
  uint64_t v68 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = type metadata accessor for RequestPayload(0);
  uint64_t v9 = MEMORY[0x270FA5388](v73);
  uint64_t v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v55 - v13;
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v55 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v55 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v55 - v21;
  uint64_t v23 = a1[3];
  v74 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v23);
  lazy protocol witness table accessor for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys();
  uint64_t v24 = (uint64_t)v82;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v24) {
    goto LABEL_6;
  }
  char v55 = v20;
  uint64_t v56 = v17;
  uint64_t v25 = v14;
  uint64_t v57 = v11;
  uint64_t v27 = v69;
  uint64_t v26 = v70;
  char v28 = v71;
  uint64_t v29 = v72;
  v82 = v22;
  uint64_t v30 = v73;
  uint64_t v31 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v31 + 16) != 1)
  {
    uint64_t v32 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v34 = v33;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v34 = v30;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v32 - 8) + 104))(v34, *MEMORY[0x263F8DCB0], v32);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v8, v26);
LABEL_6:
    uint64_t v35 = (uint64_t)v74;
    return __swift_destroy_boxed_opaque_existential_1Tm(v35);
  }
  switch(*(unsigned char *)(v31 + 32))
  {
    case 1:
      LOBYTE(v75) = 1;
      lazy protocol witness table accessor for type RequestPayload.CountTokensPromptTemplateCodingKeys and conformance RequestPayload.CountTokensPromptTemplateCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for CountTokensPromptTemplateRequest(0);
      lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CountTokensPromptTemplateRequest and conformance CountTokensPromptTemplateRequest, (void (*)(uint64_t))type metadata accessor for CountTokensPromptTemplateRequest);
      uint64_t v46 = (uint64_t)v56;
      uint64_t v47 = v61;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v28, v47);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v8, v26);
      uint64_t v35 = (uint64_t)v74;
      swift_storeEnumTagMultiPayload();
      uint64_t v48 = (uint64_t)v82;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v46, (uint64_t)v82, type metadata accessor for RequestPayload);
      goto LABEL_12;
    case 2:
      v71 = (char *)v31;
      LOBYTE(v75) = 2;
      lazy protocol witness table accessor for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v49 = v26;
      type metadata accessor for CompletePromptRequest(0);
      lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CompletePromptRequest and conformance CompletePromptRequest, (void (*)(uint64_t))type metadata accessor for CompletePromptRequest);
      uint64_t v50 = v62;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v51 = v68;
      (*(void (**)(char *, uint64_t))(v64 + 8))(v29, v50);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v8, v49);
      swift_storeEnumTagMultiPayload();
      uint64_t v45 = (uint64_t)v25;
      goto LABEL_11;
    case 3:
      LOBYTE(v75) = 3;
      lazy protocol witness table accessor for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys();
      uint64_t v37 = v67;
      uint64_t v38 = v26;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for CompletePromptTemplateRequest(0);
      lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CompletePromptTemplateRequest and conformance CompletePromptTemplateRequest, (void (*)(uint64_t))type metadata accessor for CompletePromptTemplateRequest);
      uint64_t v52 = (uint64_t)v57;
      uint64_t v53 = v63;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v54 = v68;
      (*(void (**)(char *, uint64_t))(v65 + 8))(v37, v53);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v8, v38);
      swift_storeEnumTagMultiPayload();
      uint64_t v45 = v52;
      goto LABEL_11;
    default:
      LOBYTE(v75) = 0;
      lazy protocol witness table accessor for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type CountTokensRequest and conformance CountTokensRequest();
      uint64_t v39 = v59;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v27, v39);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v8, v26);
      long long v40 = v77;
      long long v41 = v78;
      uint64_t v42 = v79;
      uint64_t v43 = v81;
      uint64_t v44 = v55;
      *char v55 = v75;
      *(_OWORD *)(v44 + 1) = v76;
      *(_OWORD *)(v44 + 3) = v40;
      *(_OWORD *)(v44 + 5) = v41;
      v44[7] = v42;
      *((_OWORD *)v44 + 4) = v80;
      v44[10] = v43;
      swift_storeEnumTagMultiPayload();
      uint64_t v45 = (uint64_t)v44;
LABEL_11:
      uint64_t v48 = (uint64_t)v82;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v45, (uint64_t)v82, type metadata accessor for RequestPayload);
      uint64_t v35 = (uint64_t)v74;
LABEL_12:
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v48, v66, type metadata accessor for RequestPayload);
      break;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v35);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RequestPayload(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance StreamingRequest(a1, a2, (void (*)(unsigned char *))RequestPayload.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RequestPayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest(a1, a2, a3, (void (*)(unsigned char *))RequestPayload.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance RequestPayload@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return RequestPayload.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RequestPayload(void *a1)
{
  return RequestPayload.encode(to:)(a1);
}

uint64_t StreamingRequestPayload.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CompletePromptTemplateRequest(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CompletePromptRequest(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for StreamingRequestPayload(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentResourceEnvelope(v2, (uint64_t)v12, type metadata accessor for StreamingRequestPayload);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v12, (uint64_t)v6, type metadata accessor for CompletePromptTemplateRequest);
    Hasher._combine(_:)(1uLL);
    CompletePromptTemplateRequest.hash(into:)(a1);
    uint64_t v13 = type metadata accessor for CompletePromptTemplateRequest;
    uint64_t v14 = (uint64_t)v6;
  }
  else
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v12, (uint64_t)v9, type metadata accessor for CompletePromptRequest);
    Hasher._combine(_:)(0);
    CompletePromptRequest.hash(into:)(a1);
    uint64_t v13 = type metadata accessor for CompletePromptRequest;
    uint64_t v14 = (uint64_t)v9;
  }
  return outlined destroy of DocumentResourceEnvelope(v14, v13);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance StreamingRequestPayload.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000016;
  }
  else {
    return 0x6574656C706D6F63;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance StreamingRequestPayload.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized StreamingRequestPayload.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StreamingRequestPayload.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StreamingRequestPayload.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StreamingRequestPayload.CompletePromptCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StreamingRequestPayload.CompletePromptCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StreamingRequest.CompletePromptCodingKeys()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest.CompletePromptCodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance StreamingRequest.CompletePromptCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t StreamingRequestPayload.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StreamingRequestPayload.CompletePromptTemplateCodingKeys>);
  uint64_t v32 = *(void *)(v2 - 8);
  uint64_t v33 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v31 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for CompletePromptTemplateRequest(0);
  MEMORY[0x270FA5388](v29);
  uint64_t v30 = (uint64_t)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StreamingRequestPayload.CompletePromptCodingKeys>);
  uint64_t v27 = *(void *)(v5 - 8);
  uint64_t v28 = v5;
  MEMORY[0x270FA5388](v5);
  char v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for CompletePromptRequest(0);
  MEMORY[0x270FA5388](v26);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for StreamingRequestPayload(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StreamingRequestPayload.CodingKeys>);
  uint64_t v13 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of DocumentResourceEnvelope(v35, (uint64_t)v12, type metadata accessor for StreamingRequestPayload);
  uint64_t v16 = (uint64_t (**)(char *, uint64_t))(v13 + 8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = v30;
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v12, v30, type metadata accessor for CompletePromptTemplateRequest);
    char v37 = 1;
    lazy protocol witness table accessor for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys();
    uint64_t v18 = v31;
    uint64_t v19 = v34;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CompletePromptTemplateRequest and conformance CompletePromptTemplateRequest, (void (*)(uint64_t))type metadata accessor for CompletePromptTemplateRequest);
    uint64_t v20 = v33;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v18, v20);
    uint64_t v21 = type metadata accessor for CompletePromptTemplateRequest;
    uint64_t v22 = v17;
  }
  else
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v12, (uint64_t)v9, type metadata accessor for CompletePromptRequest);
    char v36 = 0;
    lazy protocol witness table accessor for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys();
    uint64_t v19 = v34;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CompletePromptRequest and conformance CompletePromptRequest, (void (*)(uint64_t))type metadata accessor for CompletePromptRequest);
    uint64_t v23 = v28;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v23);
    uint64_t v21 = type metadata accessor for CompletePromptRequest;
    uint64_t v22 = (uint64_t)v9;
  }
  outlined destroy of DocumentResourceEnvelope(v22, v21);
  return (*v16)(v15, v19);
}

Swift::Int StreamingRequestPayload.hashValue.getter()
{
  uint64_t v1 = type metadata accessor for CompletePromptTemplateRequest(0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = &v14[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v4 = type metadata accessor for CompletePromptRequest(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v7 = type metadata accessor for StreamingRequestPayload(0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  Hasher.init(_seed:)();
  outlined init with copy of DocumentResourceEnvelope(v0, (uint64_t)v9, type metadata accessor for StreamingRequestPayload);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v9, (uint64_t)v3, type metadata accessor for CompletePromptTemplateRequest);
    Hasher._combine(_:)(1uLL);
    CompletePromptTemplateRequest.hash(into:)((uint64_t)v14);
    uint64_t v10 = type metadata accessor for CompletePromptTemplateRequest;
    uint64_t v11 = (uint64_t)v3;
  }
  else
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v9, (uint64_t)v6, type metadata accessor for CompletePromptRequest);
    Hasher._combine(_:)(0);
    CompletePromptRequest.hash(into:)((uint64_t)v14);
    uint64_t v10 = type metadata accessor for CompletePromptRequest;
    uint64_t v11 = (uint64_t)v6;
  }
  outlined destroy of DocumentResourceEnvelope(v11, v10);
  return Hasher._finalize()();
}

uint64_t StreamingRequestPayload.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StreamingRequestPayload.CompletePromptTemplateCodingKeys>);
  uint64_t v41 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v44 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StreamingRequestPayload.CompletePromptCodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  uint64_t v40 = v5;
  MEMORY[0x270FA5388](v4);
  uint64_t v43 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StreamingRequestPayload.CodingKeys>);
  uint64_t v42 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for StreamingRequestPayload(0);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v35 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v35 - v17;
  uint64_t v19 = a1[3];
  uint64_t v45 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  lazy protocol witness table accessor for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys();
  uint64_t v20 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20) {
    goto LABEL_7;
  }
  uint64_t v35 = v18;
  char v36 = v13;
  uint64_t v21 = v16;
  uint64_t v22 = v43;
  uint64_t v23 = v44;
  uint64_t v46 = v10;
  uint64_t v24 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v25 = v9;
  if (*(void *)(v24 + 16) != 1)
  {
    uint64_t v29 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v31 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v31 = v46;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v29 - 8) + 104))(v31, *MEMORY[0x263F8DCB0], v29);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v7);
LABEL_7:
    uint64_t v27 = (uint64_t)v45;
    return __swift_destroy_boxed_opaque_existential_1Tm(v27);
  }
  if (*(unsigned char *)(v24 + 32))
  {
    char v48 = 1;
    lazy protocol witness table accessor for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for CompletePromptTemplateRequest(0);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CompletePromptTemplateRequest and conformance CompletePromptTemplateRequest, (void (*)(uint64_t))type metadata accessor for CompletePromptTemplateRequest);
    uint64_t v26 = v38;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v23, v26);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v7);
    uint64_t v27 = (uint64_t)v45;
    uint64_t v28 = (uint64_t)v36;
  }
  else
  {
    char v47 = 0;
    lazy protocol witness table accessor for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for CompletePromptRequest(0);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CompletePromptRequest and conformance CompletePromptRequest, (void (*)(uint64_t))type metadata accessor for CompletePromptRequest);
    uint64_t v28 = (uint64_t)v21;
    uint64_t v33 = v39;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v22, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v25, v7);
    uint64_t v27 = (uint64_t)v45;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v34 = (uint64_t)v35;
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v28, (uint64_t)v35, type metadata accessor for StreamingRequestPayload);
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v34, v37, type metadata accessor for StreamingRequestPayload);
  return __swift_destroy_boxed_opaque_existential_1Tm(v27);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequestPayload()
{
  uint64_t v1 = type metadata accessor for CompletePromptTemplateRequest(0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = &v14[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v4 = type metadata accessor for CompletePromptRequest(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  Hasher.init(_seed:)();
  outlined init with copy of DocumentResourceEnvelope(v0, (uint64_t)v9, type metadata accessor for StreamingRequestPayload);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v9, (uint64_t)v3, type metadata accessor for CompletePromptTemplateRequest);
    Hasher._combine(_:)(1uLL);
    CompletePromptTemplateRequest.hash(into:)((uint64_t)v14);
    uint64_t v10 = type metadata accessor for CompletePromptTemplateRequest;
    uint64_t v11 = (uint64_t)v3;
  }
  else
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v9, (uint64_t)v7, type metadata accessor for CompletePromptRequest);
    Hasher._combine(_:)(0);
    CompletePromptRequest.hash(into:)((uint64_t)v14);
    uint64_t v10 = type metadata accessor for CompletePromptRequest;
    uint64_t v11 = (uint64_t)v7;
  }
  outlined destroy of DocumentResourceEnvelope(v11, v10);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance StreamingRequestPayload@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return StreamingRequestPayload.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance StreamingRequestPayload(void *a1)
{
  return StreamingRequestPayload.encode(to:)(a1);
}

uint64_t closure #1 in static Data.== infix(_:_:)@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      outlined copy of Data._Representation(a2, a3);
      uint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x25F83D44CLL);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = outlined consume of Data._Representation(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for PromptCompletionStreamElementEnvelope.Envelope);
}

uint64_t type metadata accessor for PromptCompletionStreamElementEnvelope(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for PromptCompletionStreamElementEnvelope);
}

uint64_t sub_25F83D49C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v0 + 80);
  if (v1 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(v0 + 72), v1);
  }
  return MEMORY[0x270FA0238](v0, 88, 7);
}

uint64_t outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  char v43 = *(unsigned char *)(a1 + 48);
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)*a3;
  swift_bridgeObjectRetain();
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v15) {
        goto LABEL_10;
      }
    }
LABEL_13:
    BOOL v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    int64_t v20 = (uint64_t *)(v19[6] + 16 * v11);
    *int64_t v20 = v8;
    v20[1] = v7;
    *(unsigned char *)(v19[7] + v11) = v43;
    uint64_t v21 = v19[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v19[2] = v23;
    uint64_t v24 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v25 = (unsigned char *)(a1 + 72);
    while (1)
    {
      uint64_t v27 = *((void *)v25 - 2);
      uint64_t v26 = *((void *)v25 - 1);
      char v28 = *v25;
      char v29 = (void *)*a3;
      swift_bridgeObjectRetain();
      unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v26);
      uint64_t v32 = v29[2];
      BOOL v33 = (v31 & 1) == 0;
      BOOL v22 = __OFADD__(v32, v33);
      uint64_t v34 = v32 + v33;
      if (v22) {
        break;
      }
      char v35 = v31;
      if (v29[3] < v34)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, 1);
        unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v26);
        if ((v35 & 1) != (v36 & 1)) {
          goto LABEL_25;
        }
      }
      if (v35) {
        goto LABEL_10;
      }
      uint64_t v37 = (void *)*a3;
      *(void *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      uint64_t v38 = (uint64_t *)(v37[6] + 16 * v30);
      *uint64_t v38 = v27;
      v38[1] = v26;
      *(unsigned char *)(v37[7] + v30) = v28;
      uint64_t v39 = v37[2];
      BOOL v22 = __OFADD__(v39, 1);
      uint64_t v40 = v39 + 1;
      if (v22) {
        goto LABEL_24;
      }
      v25 += 24;
      v37[2] = v40;
      if (!--v24) {
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
  if ((v15 & 1) == (v17 & 1))
  {
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v18 = (void *)swift_allocError();
    swift_willThrow();
    MEMORY[0x261201A80](v18);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v41._object = (void *)0x800000025F92CCB0;
  v41._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v41);
  _print_unlocked<A, B>(_:_:)();
  v42._countAndFlagsBits = 39;
  v42._object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  unsigned char *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  void *v19;
  unint64_t v20;
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void *v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  char v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  Swift::String v38;

  LOBYTE(v4) = a2;
  uint64_t v6 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_23;
  }
  LOBYTE(v7) = *(unsigned char *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_23;
  }
  char v10 = (void *)*a3;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
  BOOL v13 = v10[2];
  uint64_t v14 = (v12 & 1) == 0;
  char v15 = __OFADD__(v13, v14);
  unint64_t v16 = v13 + v14;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char v17 = v12;
  if (v10[3] < v16)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, v4 & 1);
    unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
    if ((v17 & 1) == (v18 & 1)) {
      goto LABEL_8;
    }
LABEL_6:
    unint64_t v11 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  if (v4)
  {
LABEL_8:
    if (v17) {
      goto LABEL_9;
    }
    goto LABEL_12;
  }
  int64_t v20 = v11;
  specialized _NativeDictionary.copy()();
  unint64_t v11 = v20;
  if (v17)
  {
LABEL_9:
    BOOL v19 = (void *)swift_allocError();
    swift_willThrow();
    MEMORY[0x261201A80](v19);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_28;
  }
LABEL_12:
  uint64_t v21 = (void *)*a3;
  *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
  BOOL v22 = (uint64_t *)(v21[6] + 16 * v11);
  *BOOL v22 = v9;
  v22[1] = v8;
  *(unsigned char *)(v21[7] + v11) = v7;
  uint64_t v23 = v21[2];
  char v15 = __OFADD__(v23, 1);
  uint64_t v24 = v23 + 1;
  if (v15)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    _StringGuts.grow(_:)(30);
    v37._object = (void *)0x800000025F92CCB0;
    v37._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v37);
    _print_unlocked<A, B>(_:_:)();
    v38._countAndFlagsBits = 39;
    v38._object = (void *)0xE100000000000000;
    String.append(_:)(v38);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  void v21[2] = v24;
  if (v6 != 1)
  {
    uint64_t v4 = (unsigned char *)(a1 + 72);
    uint64_t v7 = 1;
    while (v7 < *(void *)(a1 + 16))
    {
      uint64_t v25 = *v4;
      uint64_t v9 = *((void *)v4 - 2);
      uint64_t v8 = *((void *)v4 - 1);
      swift_bridgeObjectRetain();
      if (!v8) {
        goto LABEL_23;
      }
      uint64_t v26 = (void *)*a3;
      uint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
      char v29 = v26[2];
      unint64_t v30 = (v28 & 1) == 0;
      char v15 = __OFADD__(v29, v30);
      char v31 = v29 + v30;
      if (v15) {
        goto LABEL_25;
      }
      char v17 = v28;
      if (v26[3] < v31)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v31, 1);
        uint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
        if ((v17 & 1) != (v32 & 1)) {
          goto LABEL_6;
        }
      }
      if (v17) {
        goto LABEL_9;
      }
      BOOL v33 = (void *)*a3;
      *(void *)(*a3 + 8 * (v27 >> 6) + 64) |= 1 << v27;
      uint64_t v34 = (uint64_t *)(v33[6] + 16 * v27);
      *uint64_t v34 = v9;
      v34[1] = v8;
      *(unsigned char *)(v33[7] + v27) = v25;
      char v35 = v33[2];
      char v15 = __OFADD__(v35, 1);
      char v36 = v35 + 1;
      if (v15) {
        goto LABEL_26;
      }
      ++v7;
      v33[2] = v36;
      v4 += 24;
      if (v6 == v7) {
        goto LABEL_23;
      }
    }
    goto LABEL_27;
  }
LABEL_23:
  swift_bridgeObjectRelease_n();
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  uint64_t v63 = type metadata accessor for PromptTemplateInfo.RichVariableBinding.Component.Content();
  uint64_t v2 = *(void *)(v63 - 8);
  MEMORY[0x270FA5388](v63);
  uint64_t v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for PromptTemplateInfo.RichVariableBinding.Component();
  uint64_t v5 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for PromptTemplateInfo.RichVariableBinding();
  uint64_t v8 = *(void *)(v51 - 8);
  MEMORY[0x270FA5388](v51);
  uint64_t v49 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, PromptTemplateInfo.RichVariableBinding>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  unint64_t v11 = (void *)result;
  int64_t v12 = 0;
  uint64_t v52 = a1;
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v14 = a1 + 64;
  uint64_t v13 = v15;
  uint64_t v16 = 1 << *(unsigned char *)(v14 - 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v13;
  uint64_t v45 = v14;
  int64_t v46 = (unint64_t)(v16 + 63) >> 6;
  unsigned int v61 = *MEMORY[0x263F7FC18];
  uint64_t v59 = v5 + 32;
  uint64_t v60 = (void (**)(char *, void, uint64_t))(v2 + 104);
  uint64_t v50 = v8;
  uint64_t v19 = v8 + 32;
  unint64_t v20 = v18;
  uint64_t v47 = v19;
  uint64_t v48 = result + 64;
  uint64_t v44 = (void *)result;
  if (!v18) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v21 = __clz(__rbit64(v20));
  v20 &= v20 - 1;
  for (unint64_t i = v21 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v24)) + (v12 << 6))
  {
    uint64_t v26 = *(void *)(v52 + 56);
    uint64_t v27 = (uint64_t *)(*(void *)(v52 + 48) + 16 * i);
    uint64_t v28 = v27[1];
    uint64_t v57 = *v27;
    unint64_t v58 = i;
    uint64_t v29 = *(void *)(v26 + 8 * i);
    int64_t v30 = *(void *)(v29 + 16);
    int64_t v56 = v12;
    if (v30)
    {
      unint64_t v55 = v20;
      uint64_t v64 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain_n();
      uint64_t v54 = v28;
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30, 0);
      uint64_t v31 = v64;
      uint64_t v53 = v29;
      uint64_t v32 = v29 + 48;
      do
      {
        swift_bridgeObjectRetain_n();
        PromptTemplateInfo.RichVariableBinding.Component.Content.Text.init(string:isSelfAttention:)();
        (*v60)(v4, v61, v63);
        PromptTemplateInfo.RichVariableBinding.Component.init(content:)();
        swift_bridgeObjectRelease();
        uint64_t v64 = v31;
        unint64_t v34 = *(void *)(v31 + 16);
        unint64_t v33 = *(void *)(v31 + 24);
        if (v34 >= v33 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
          uint64_t v31 = v64;
        }
        v32 += 24;
        *(void *)(v31 + 16) = v34 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v31+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v34, v7, v62);
        --v30;
      }
      while (v30);
      swift_bridgeObjectRelease();
      char v35 = v44;
      uint64_t v36 = v54;
      unint64_t v20 = v55;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v35 = v11;
      uint64_t v36 = v28;
    }
    uint64_t v37 = v49;
    PromptTemplateInfo.RichVariableBinding.init(components:)();
    swift_bridgeObjectRelease();
    unint64_t v38 = v58;
    *(void *)(v48 + ((v58 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v58;
    uint64_t v39 = (void *)(v35[6] + 16 * v38);
    *uint64_t v39 = v57;
    v39[1] = v36;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v50 + 32))(v35[7] + *(void *)(v50 + 72) * v38, v37, v51);
    uint64_t v40 = v35[2];
    BOOL v41 = __OFADD__(v40, 1);
    uint64_t v42 = v40 + 1;
    if (v41)
    {
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    unint64_t v11 = v35;
    v35[2] = v42;
    int64_t v12 = v56;
    if (v20) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v23 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_31;
    }
    if (v23 >= v46) {
      return (uint64_t)v11;
    }
    unint64_t v24 = *(void *)(v45 + 8 * v23);
    ++v12;
    if (!v24)
    {
      int64_t v12 = v23 + 1;
      if (v23 + 1 >= v46) {
        return (uint64_t)v11;
      }
      unint64_t v24 = *(void *)(v45 + 8 * v12);
      if (!v24)
      {
        int64_t v12 = v23 + 2;
        if (v23 + 2 >= v46) {
          return (uint64_t)v11;
        }
        unint64_t v24 = *(void *)(v45 + 8 * v12);
        if (!v24) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v20 = (v24 - 1) & v24;
  }
  int64_t v25 = v23 + 3;
  if (v25 >= v46) {
    return (uint64_t)v11;
  }
  unint64_t v24 = *(void *)(v45 + 8 * v25);
  if (v24)
  {
    int64_t v12 = v25;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v12 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v12 >= v46) {
      return (uint64_t)v11;
    }
    unint64_t v24 = *(void *)(v45 + 8 * v12);
    ++v25;
    if (v24) {
      goto LABEL_18;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  void *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;

  uint64_t v42 = type metadata accessor for PromptTemplateInfo.RichVariableBinding();
  uint64_t v2 = *(void *)(v42 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v42);
  uint64_t v40 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v39 = (char *)&v32 - v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PromptTemplateInfoEnvelope.RichVariableBindingEnvelope>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = 0;
  uint64_t v43 = a1;
  char v10 = *(void *)(a1 + 64);
  uint64_t v9 = a1 + 64;
  uint64_t v8 = v10;
  unint64_t v11 = 1 << *(unsigned char *)(v9 - 32);
  int64_t v12 = -1;
  if (v11 < 64) {
    int64_t v12 = ~(-1 << v11);
  }
  uint64_t v13 = v12 & v8;
  unint64_t v33 = v9;
  unint64_t v34 = (unint64_t)(v11 + 63) >> 6;
  BOOL v41 = v2;
  uint64_t v36 = v2 + 8;
  uint64_t v37 = v2 + 16;
  char v35 = result + 64;
  unint64_t v38 = result;
  uint64_t v14 = v2;
  uint64_t v16 = v39;
  uint64_t v15 = (uint64_t)v40;
  uint64_t v17 = v42;
  if (!v13) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v44 = (v13 - 1) & v13;
  uint64_t v45 = v7;
  for (unint64_t i = __clz(__rbit64(v13)) | (v7 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v21 << 6))
  {
    int64_t v23 = *(void *)(v43 + 56);
    unint64_t v24 = (uint64_t *)(*(void *)(v43 + 48) + 16 * i);
    int64_t v25 = v24[1];
    int64_t v46 = *v24;
    uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
    v26(v16, v23 + *(void *)(v14 + 72) * i, v17);
    v26((char *)v15, (unint64_t)v16, v17);
    swift_bridgeObjectRetain();
    uint64_t v27 = specialized PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.init(sealing:)(v15);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v17);
    *(void *)(v35 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t result = v38;
    uint64_t v28 = (void *)(*(void *)(v38 + 48) + 16 * i);
    char *v28 = v46;
    v28[1] = v25;
    *(void *)(*(void *)(result + 56) + 8 * i) = v27;
    uint64_t v29 = *(void *)(result + 16);
    int64_t v30 = __OFADD__(v29, 1);
    uint64_t v31 = v29 + 1;
    if (v30)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    *(void *)(result + 16) = v31;
    uint64_t v13 = v44;
    uint64_t v7 = v45;
    if (v44) {
      goto LABEL_4;
    }
LABEL_5:
    uint64_t v19 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_24;
    }
    if (v19 >= v34) {
      return result;
    }
    unint64_t v20 = *(void *)(v33 + 8 * v19);
    unint64_t v21 = v7 + 1;
    if (!v20)
    {
      unint64_t v21 = v7 + 2;
      if (v7 + 2 >= v34) {
        return result;
      }
      unint64_t v20 = *(void *)(v33 + 8 * v21);
      if (!v20)
      {
        unint64_t v21 = v7 + 3;
        if (v7 + 3 >= v34) {
          return result;
        }
        unint64_t v20 = *(void *)(v33 + 8 * v21);
        if (!v20) {
          break;
        }
      }
    }
LABEL_18:
    uint64_t v44 = (v20 - 1) & v20;
    uint64_t v45 = v21;
  }
  BOOL v22 = v7 + 4;
  if (v7 + 4 >= v34) {
    return result;
  }
  unint64_t v20 = *(void *)(v33 + 8 * v22);
  if (v20)
  {
    unint64_t v21 = v7 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    unint64_t v21 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v21 >= v34) {
      return result;
    }
    unint64_t v20 = *(void *)(v33 + 8 * v21);
    ++v22;
    if (v20) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void specialized Set.hash(into:)(uint64_t a1, uint64_t a2)
{
  Hasher._finalize()();
  uint64_t v3 = a2 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  uint64_t v6 = v5 & *(void *)(a2 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v8 = 0;
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_5;
    }
    if (__OFADD__(v9++, 1)) {
      goto LABEL_19;
    }
    if (v9 >= v7)
    {
LABEL_17:
      swift_release();
      Hasher._combine(_:)(v8);
      return;
    }
    uint64_t v12 = *(void *)(v3 + 8 * v9);
    if (!v12) {
      break;
    }
LABEL_16:
    uint64_t v6 = (v12 - 1) & v12;
LABEL_5:
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v10 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    v8 ^= v10;
  }
  int64_t v13 = v9 + 1;
  if (v9 + 1 >= v7) {
    goto LABEL_17;
  }
  uint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
    ++v9;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v9 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_17;
    }
    uint64_t v12 = *(void *)(v3 + 8 * v9);
    ++v13;
    if (v12) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  int64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t specialized static Constraints.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a2;
  uint64_t v3 = type metadata accessor for GenerationSchema();
  uint64_t v30 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Constraints(0);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  int64_t v9 = (uint64_t *)((char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (uint64_t *)((char *)&v30 - v11);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v30 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Constraints, Constraints));
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  unint64_t v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = &v18[*(int *)(v16 + 56)];
  outlined init with copy of DocumentResourceEnvelope(a1, (uint64_t)v18, type metadata accessor for Constraints);
  outlined init with copy of DocumentResourceEnvelope(v31, (uint64_t)v19, type metadata accessor for Constraints);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    int64_t v25 = v5;
    uint64_t v26 = v30;
    outlined init with copy of DocumentResourceEnvelope((uint64_t)v18, (uint64_t)v14, type metadata accessor for Constraints);
    if (!swift_getEnumCaseMultiPayload())
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v25, v19, v3);
      char v27 = static GenerationSchema.== infix(_:_:)();
      uint64_t v28 = *(void (**)(char *, uint64_t))(v26 + 8);
      v28(v25, v3);
      v28(v14, v3);
      outlined destroy of DocumentResourceEnvelope((uint64_t)v18, type metadata accessor for Constraints);
      return v27 & 1;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v3);
    goto LABEL_14;
  }
  if (EnumCaseMultiPayload == 1)
  {
    outlined init with copy of DocumentResourceEnvelope((uint64_t)v18, (uint64_t)v12, type metadata accessor for Constraints);
    uint64_t v22 = *v12;
    uint64_t v21 = v12[1];
    if (swift_getEnumCaseMultiPayload() == 1) {
      goto LABEL_4;
    }
    goto LABEL_13;
  }
  outlined init with copy of DocumentResourceEnvelope((uint64_t)v18, (uint64_t)v9, type metadata accessor for Constraints);
  uint64_t v22 = *v9;
  uint64_t v21 = v9[1];
  if (swift_getEnumCaseMultiPayload() != 2)
  {
LABEL_13:
    swift_bridgeObjectRelease();
LABEL_14:
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v18, &demangling cache variable for type metadata for (Constraints, Constraints));
    goto LABEL_15;
  }
LABEL_4:
  if (v22 == *(void *)v19 && v21 == *((void *)v19 + 1))
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_17;
  }
  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v24)
  {
LABEL_17:
    outlined destroy of DocumentResourceEnvelope((uint64_t)v18, type metadata accessor for Constraints);
    char v27 = 1;
    return v27 & 1;
  }
  outlined destroy of DocumentResourceEnvelope((uint64_t)v18, type metadata accessor for Constraints);
LABEL_15:
  char v27 = 0;
  return v27 & 1;
}

BOOL specialized static PromptEnvelope.AttachmentEnvelope.== infix(_:_:)(void *a1, void *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  uint64_t v5 = a2[1];
  unint64_t v4 = a2[2];
  uint64_t v7 = a1[1];
  unint64_t v6 = a1[2];
  outlined retain of PromptEnvelope.AttachmentEnvelope((uint64_t)a1);
  outlined retain of PromptEnvelope.AttachmentEnvelope((uint64_t)a2);
  LOBYTE(v4) = specialized static Data.== infix(_:_:)(v7, v6, v5, v4);
  outlined release of PromptEnvelope.AttachmentEnvelope((uint64_t)a2);
  outlined release of PromptEnvelope.AttachmentEnvelope((uint64_t)a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  return a1[3] == a2[3] && a1[4] == a2[4];
}

uint64_t specialized static RequestMetadata.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v5 = a1[6];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v11 = a2[6];
  if ((*a1 != *a2 || a1[1] != a2[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (v2 != v7 || v4 != v8) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    return 0;
  }
  if (v6)
  {
    if (v9 && (v3 == v10 && v6 == v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
      goto LABEL_12;
    }
    return 0;
  }
  if (v9) {
    return 0;
  }
LABEL_12:
  return specialized static Dictionary<>.== infix(_:_:)(v5, v11);
}

uint64_t specialized static ToolType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FunctionDescription(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (uint64_t *)((char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for ToolType(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ToolType, ToolType));
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of DocumentResourceEnvelope(a1, (uint64_t)v14, type metadata accessor for ToolType);
  outlined init with copy of DocumentResourceEnvelope(a2, v15, type metadata accessor for ToolType);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  int v17 = v16(v14, 2, v4);
  if (v17)
  {
    if (v17 == 1)
    {
      if (v16((char *)v15, 2, v4) != 1) {
        goto LABEL_9;
      }
LABEL_8:
      outlined destroy of DocumentResourceEnvelope((uint64_t)v14, type metadata accessor for ToolType);
      return 1;
    }
    if (v16((char *)v15, 2, v4) == 2) {
      goto LABEL_8;
    }
  }
  else
  {
    outlined init with copy of DocumentResourceEnvelope((uint64_t)v14, (uint64_t)v10, type metadata accessor for ToolType);
    if (!v16((char *)v15, 2, v4))
    {
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v15, (uint64_t)v7, type metadata accessor for FunctionDescription);
      BOOL v19 = *v10 == *v7 && v10[1] == v7[1];
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        || (v10[2] == v7[2] ? (BOOL v20 = v10[3] == v7[3]) : (BOOL v20 = 0),
            !v20 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
         || (static Schema.== infix(_:_:)() & 1) == 0))
      {
        outlined destroy of DocumentResourceEnvelope((uint64_t)v7, type metadata accessor for FunctionDescription);
        outlined destroy of DocumentResourceEnvelope((uint64_t)v10, type metadata accessor for FunctionDescription);
        outlined destroy of DocumentResourceEnvelope((uint64_t)v14, type metadata accessor for ToolType);
        return 0;
      }
      outlined destroy of DocumentResourceEnvelope((uint64_t)v7, type metadata accessor for FunctionDescription);
      outlined destroy of DocumentResourceEnvelope((uint64_t)v10, type metadata accessor for FunctionDescription);
      goto LABEL_8;
    }
    outlined destroy of DocumentResourceEnvelope((uint64_t)v10, type metadata accessor for FunctionDescription);
  }
LABEL_9:
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v14, &demangling cache variable for type metadata for (ToolType, ToolType));
  return 0;
}

uint64_t specialized static SamplingParametersEnvelope.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 8);
  double v5 = *(double *)(a1 + 16);
  char v6 = *(unsigned char *)(a1 + 24);
  double v7 = *(double *)(a1 + 32);
  char v8 = *(unsigned char *)(a1 + 40);
  double v9 = *(double *)(a1 + 48);
  char v10 = *(unsigned char *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  char v12 = *(unsigned char *)(a1 + 72);
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v14 = *(void *)(a1 + 88);
  char v15 = *(unsigned char *)(a1 + 96);
  double v16 = *(double *)(a1 + 104);
  char v17 = *(unsigned char *)(a1 + 112);
  uint64_t v18 = *(void *)(a1 + 120);
  char v19 = *(unsigned char *)(a1 + 128);
  int v20 = *(unsigned __int8 *)(a1 + 129);
  int v21 = *(unsigned __int8 *)(a2 + 8);
  double v22 = *(double *)(a2 + 16);
  int v23 = *(unsigned __int8 *)(a2 + 24);
  double v24 = *(double *)(a2 + 32);
  int v25 = *(unsigned __int8 *)(a2 + 40);
  double v26 = *(double *)(a2 + 48);
  int v27 = *(unsigned __int8 *)(a2 + 56);
  uint64_t v28 = *(void *)(a2 + 64);
  int v29 = *(unsigned __int8 *)(a2 + 72);
  uint64_t v30 = *(void *)(a2 + 80);
  uint64_t v31 = *(void *)(a2 + 88);
  int v32 = *(unsigned __int8 *)(a2 + 96);
  double v33 = *(double *)(a2 + 104);
  int v34 = *(unsigned __int8 *)(a2 + 112);
  uint64_t v35 = *(void *)(a2 + 120);
  int v36 = *(unsigned __int8 *)(a2 + 128);
  int v37 = *(unsigned __int8 *)(a2 + 129);
  if (v4 == 255)
  {
    if (v21 != 255) {
      return 0;
    }
  }
  else
  {
    if (v21 == 255) {
      return 0;
    }
    double v38 = *(double *)a1;
    double v39 = *(double *)a2;
    if (v4)
    {
      if (v4 == 1)
      {
        uint64_t v40 = 0;
        if (v21 != 1 || *(void *)&v38 != *(void *)&v39) {
          return v40;
        }
      }
      else
      {
        uint64_t v40 = 0;
        if (v21 != 2 || v39 != 0.0) {
          return v40;
        }
      }
    }
    else
    {
      uint64_t v40 = 0;
      if (v21 || v38 != v39) {
        return v40;
      }
    }
  }
  if (v6)
  {
    if (!v23) {
      return 0;
    }
  }
  else
  {
    if (v5 == v22) {
      char v41 = v23;
    }
    else {
      char v41 = 1;
    }
    if (v41) {
      return 0;
    }
  }
  if (v8)
  {
    if (!v25) {
      return 0;
    }
  }
  else
  {
    if (v7 == v24) {
      char v42 = v25;
    }
    else {
      char v42 = 1;
    }
    if (v42) {
      return 0;
    }
  }
  if (v10)
  {
    if (!v27) {
      return 0;
    }
  }
  else
  {
    if (v9 == v26) {
      char v43 = v27;
    }
    else {
      char v43 = 1;
    }
    if (v43) {
      return 0;
    }
  }
  if (v12)
  {
    if (!v29) {
      return 0;
    }
  }
  else
  {
    if (v11 == v28) {
      char v44 = v29;
    }
    else {
      char v44 = 1;
    }
    if (v44) {
      return 0;
    }
  }
  int v50 = v20;
  if ((specialized static Set.== infix(_:_:)(v13, v30) & 1) == 0) {
    return 0;
  }
  if (v15)
  {
    int v45 = v50;
    if (!v32) {
      return 0;
    }
  }
  else
  {
    if (v14 == v31) {
      char v46 = v32;
    }
    else {
      char v46 = 1;
    }
    int v45 = v50;
    if (v46) {
      return 0;
    }
  }
  if (v17)
  {
    if (!v34) {
      return 0;
    }
  }
  else
  {
    if (v16 == v33) {
      char v47 = v34;
    }
    else {
      char v47 = 1;
    }
    if (v47) {
      return 0;
    }
  }
  if (v19)
  {
    if (!v36) {
      return 0;
    }
  }
  else
  {
    if (v18 == v35) {
      char v48 = v36;
    }
    else {
      char v48 = 1;
    }
    if (v48) {
      return 0;
    }
  }
  if (v45 == 2)
  {
    if (v37 != 2) {
      return 0;
    }
  }
  else if (v37 == 2 || ((((v45 & 1) == 0) ^ v37) & 1) == 0)
  {
    return 0;
  }
  return 1;
}

BOOL specialized static ToolCallEnvelope.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    if ((uint64_t v7 = a1[4], v8 = a1[5], v9 = a2[4], v10 = a2[5], a1[2] == a2[2]) && a1[3] == a2[3]
      || (char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v11 & 1) != 0))
    {
      if (v7 == v9 && v8 == v10 || (char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v12 & 1) != 0))
      {
        uint64_t v14 = a1[6];
        unint64_t v13 = a1[7];
        uint64_t v16 = a2[6];
        unint64_t v15 = a2[7];
        if (v13 >> 60 == 15)
        {
          if (v15 >> 60 == 15) {
            return 1;
          }
        }
        else if (v15 >> 60 != 15)
        {
          outlined copy of Data?(v14, v13);
          outlined copy of Data?(v16, v15);
          char v17 = specialized static Data.== infix(_:_:)(v14, v13, v16, v15);
          outlined consume of Data?(v16, v15);
          outlined consume of Data?(v14, v13);
          return (v17 & 1) != 0;
        }
        outlined copy of Data?(v14, v13);
        outlined copy of Data?(v16, v15);
        outlined consume of Data?(v14, v13);
        outlined consume of Data?(v16, v15);
        return 0;
      }
    }
  }
  return result;
}

uint64_t specialized static AnnotationEnvelope.CitationTypeEnvelope.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a2;
  uint64_t v3 = type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope(0);
  MEMORY[0x270FA5388](v3 - 8);
  char v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (uint64_t *)((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  char v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (uint64_t *)((char *)&v25 - v13);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnnotationEnvelope.CitationTypeEnvelope, AnnotationEnvelope.CitationTypeEnvelope));
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (uint64_t)&v18[*(int *)(v16 + 56)];
  outlined init with copy of DocumentResourceEnvelope(a1, (uint64_t)v18, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
  outlined init with copy of DocumentResourceEnvelope(v26, v19, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of DocumentResourceEnvelope((uint64_t)v18, (uint64_t)v14, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v19, (uint64_t)v8, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
      BOOL v23 = *v14 == *v8 && v14[1] == v8[1];
      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)())
        && (MEMORY[0x2611FEFF0]((char *)v14 + *(int *)(v6 + 20), (char *)v8 + *(int *)(v6 + 20)) & 1) != 0)
      {
        outlined destroy of DocumentResourceEnvelope((uint64_t)v8, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
        outlined destroy of DocumentResourceEnvelope((uint64_t)v14, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
        outlined destroy of DocumentResourceEnvelope((uint64_t)v18, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
        char v20 = 1;
        return v20 & 1;
      }
      outlined destroy of DocumentResourceEnvelope((uint64_t)v8, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
      outlined destroy of DocumentResourceEnvelope((uint64_t)v14, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
      outlined destroy of DocumentResourceEnvelope((uint64_t)v18, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
LABEL_16:
      char v20 = 0;
      return v20 & 1;
    }
    int v21 = type metadata accessor for AnnotationEnvelope.URLCitationEnvelope;
    uint64_t v22 = (uint64_t)v14;
LABEL_7:
    outlined destroy of DocumentResourceEnvelope(v22, v21);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v18, &demangling cache variable for type metadata for (AnnotationEnvelope.CitationTypeEnvelope, AnnotationEnvelope.CitationTypeEnvelope));
    goto LABEL_16;
  }
  outlined init with copy of DocumentResourceEnvelope((uint64_t)v18, (uint64_t)v12, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    int v21 = type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope;
    uint64_t v22 = (uint64_t)v12;
    goto LABEL_7;
  }
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v19, (uint64_t)v5, type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope);
  char v20 = static DocumentResourceIdentifier.== infix(_:_:)();
  outlined destroy of DocumentResourceEnvelope((uint64_t)v5, type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope);
  outlined destroy of DocumentResourceEnvelope((uint64_t)v12, type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope);
  outlined destroy of DocumentResourceEnvelope((uint64_t)v18, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
  return v20 & 1;
}

uint64_t specialized static RequestMetadataEnvelope.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  BOOL v5 = a1[2] == a2[2] && a1[3] == a2[3];
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v6 = a1[5];
  uint64_t v7 = a2[5];
  if (v6)
  {
    if (v7 && (a1[4] == a2[4] && v6 == v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
      goto LABEL_16;
    }
    return 0;
  }
  if (v7) {
    return 0;
  }
LABEL_16:
  uint64_t v8 = a1[6];
  uint64_t v9 = a2[6];
  return specialized static Dictionary<>.== infix(_:_:)(v8, v9);
}

uint64_t specialized static PromptRenderingEnvelope.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  BOOL v8 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v8 || (char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v9 & 1) != 0))
  {
    BOOL v11 = v4 == v6 && v5 == v7;
    if (v11 || (char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v12 & 1) != 0))
    {
      if ((specialized static Array<A>.== infix(_:_:)(*(void **)(a1 + 32), *(void **)(a2 + 32)) & 1) == 0) {
        return 0;
      }
      if (*(void *)(a1 + 40) == *(void *)(a2 + 40) && *(void *)(a1 + 48) == *(void *)(a2 + 48)
        || (char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v13 & 1) != 0))
      {
        if (*(void *)(a1 + 56) == *(void *)(a2 + 56) && *(void *)(a1 + 64) == *(void *)(a2 + 64)
          || (char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v14 & 1) != 0))
        {
          if (specialized static Array<A>.== infix(_:_:)(*(void **)(a1 + 72), *(void **)(a2 + 72))
            && (specialized static Dictionary<>.== infix(_:_:)(*(void *)(a1 + 80), *(void *)(a2 + 80)) & 1) != 0)
          {
            uint64_t v15 = *(void *)(a1 + 96);
            uint64_t v16 = *(void *)(a2 + 96);
            if (v15)
            {
              if (v16
                && (*(void *)(a1 + 88) == *(void *)(a2 + 88) && v15 == v16
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
              {
                return 1;
              }
            }
            else if (!v16)
            {
              return 1;
            }
          }
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL specialized static CountTokensResponse.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v8 = a1[7];
  uint64_t v9 = a1[8];
  uint64_t v10 = a1[9];
  uint64_t v11 = a1[10];
  uint64_t v12 = a1[11];
  uint64_t v13 = a1[12];
  uint64_t v14 = a1[13];
  uint64_t v15 = a2[1];
  uint64_t v16 = a2[2];
  uint64_t v18 = a2[3];
  uint64_t v17 = a2[4];
  uint64_t v20 = a2[5];
  uint64_t v19 = a2[6];
  uint64_t v22 = a2[7];
  uint64_t v21 = a2[8];
  uint64_t v23 = a2[9];
  uint64_t v24 = a2[10];
  uint64_t v26 = a2[11];
  uint64_t v25 = a2[12];
  uint64_t v27 = a2[13];
  if (!v3)
  {
    if (!v16) {
      return 1;
    }
    goto LABEL_7;
  }
  if (!v16)
  {
LABEL_7:
    uint64_t v31 = a1[1];
    uint64_t v32 = v3;
    uint64_t v33 = v4;
    uint64_t v34 = v5;
    uint64_t v35 = v6;
    uint64_t v36 = v7;
    uint64_t v37 = v8;
    uint64_t v38 = v9;
    uint64_t v39 = v10;
    uint64_t v40 = v11;
    uint64_t v41 = v12;
    uint64_t v42 = v13;
    uint64_t v43 = v14;
    uint64_t v44 = v15;
    uint64_t v45 = v16;
    uint64_t v46 = v18;
    uint64_t v47 = v17;
    uint64_t v48 = v20;
    uint64_t v49 = v19;
    uint64_t v50 = v22;
    uint64_t v51 = v21;
    uint64_t v52 = v23;
    uint64_t v53 = v24;
    uint64_t v54 = v26;
    uint64_t v55 = v25;
    uint64_t v56 = v27;
    outlined copy of PromptRenderingEnvelope?(v2, v3);
    outlined copy of PromptRenderingEnvelope?(v15, v16);
    outlined release of (PromptRenderingEnvelope?, PromptRenderingEnvelope?)(&v31);
    return 0;
  }
  v57[0] = a1[1];
  v57[1] = v3;
  v57[2] = v4;
  v57[3] = v5;
  v57[4] = v6;
  v57[5] = v7;
  v57[6] = v8;
  v57[7] = v9;
  v57[8] = v10;
  v57[9] = v11;
  v57[10] = v12;
  v57[11] = v13;
  v57[12] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v18;
  uint64_t v34 = v17;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v37 = v22;
  uint64_t v38 = v21;
  uint64_t v39 = v23;
  uint64_t v40 = v24;
  uint64_t v30 = v2;
  uint64_t v41 = v26;
  uint64_t v42 = v25;
  uint64_t v43 = v27;
  outlined copy of PromptRenderingEnvelope?(v2, v3);
  outlined copy of PromptRenderingEnvelope?(v15, v16);
  char v29 = specialized static PromptRenderingEnvelope.== infix(_:_:)((uint64_t)v57, (uint64_t)&v31);
  outlined consume of PromptRenderingEnvelope?(v15, v16);
  outlined consume of PromptRenderingEnvelope?(v30, v3);
  return (v29 & 1) != 0;
}

uint64_t specialized static FunctionDescription.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  BOOL v5 = a1[2] == a2[2] && a1[3] == a2[3];
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  type metadata accessor for FunctionDescription(0);
  return static Schema.== infix(_:_:)();
}

BOOL specialized static TextContentEnvelope.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    if (specialized static Array<A>.== infix(_:_:)(a1[2], a2[2]))
    {
      uint64_t v7 = a1[3];
      unint64_t v8 = a1[4];
      uint64_t v9 = a2[3];
      unint64_t v10 = a2[4];
      if (v8 >> 60 == 15)
      {
        if (v10 >> 60 == 15) {
          return 1;
        }
      }
      else if (v10 >> 60 != 15)
      {
        outlined copy of Data?(v7, v8);
        outlined copy of Data?(v9, v10);
        char v11 = specialized static Data.== infix(_:_:)(v7, v8, v9, v10);
        outlined consume of Data?(v9, v10);
        outlined consume of Data?(v7, v8);
        return (v11 & 1) != 0;
      }
      outlined copy of Data?(v7, v8);
      outlined copy of Data?(v9, v10);
      outlined consume of Data?(v7, v8);
      outlined consume of Data?(v9, v10);
    }
    return 0;
  }
  return result;
}

BOOL specialized static PromptCompletionEnvelope.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v82 = a1[1];
  uint64_t v83 = a1[2];
  uint64_t v77 = a1[3];
  uint64_t v78 = a1[4];
  uint64_t v79 = a1[5];
  uint64_t v73 = a1[6];
  unint64_t v70 = a1[8];
  uint64_t v71 = a1[7];
  uint64_t v59 = a1[9];
  uint64_t v60 = a1[10];
  uint64_t v61 = a1[11];
  uint64_t v62 = a1[12];
  uint64_t v63 = a1[13];
  uint64_t v64 = a1[14];
  uint64_t v65 = a1[15];
  uint64_t v66 = a1[16];
  uint64_t v57 = a1[18];
  uint64_t v58 = a1[17];
  uint64_t v55 = a1[20];
  uint64_t v56 = a1[19];
  uint64_t v81 = a2[1];
  uint64_t v80 = a2[2];
  uint64_t v74 = a2[3];
  uint64_t v75 = a2[4];
  uint64_t v76 = a2[5];
  uint64_t v72 = a2[6];
  uint64_t v69 = a2[7];
  unint64_t v68 = a2[8];
  uint64_t v52 = a2[9];
  uint64_t v53 = a1[21];
  uint64_t v54 = a2[10];
  uint64_t v2 = a2[12];
  uint64_t v67 = a2[11];
  uint64_t v4 = a2[13];
  uint64_t v3 = a2[14];
  uint64_t v5 = a2[15];
  uint64_t v6 = a2[16];
  uint64_t v8 = a2[17];
  uint64_t v7 = a2[18];
  uint64_t v10 = a2[19];
  uint64_t v9 = a2[20];
  uint64_t v11 = a2[21];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    return 0;
  }
  uint64_t v42 = v11;
  uint64_t v43 = v9;
  uint64_t v46 = v10;
  uint64_t v47 = v7;
  uint64_t v50 = v3;
  uint64_t v51 = v8;
  uint64_t v48 = v2;
  uint64_t v49 = v4;
  uint64_t v44 = v5;
  uint64_t v45 = v6;
  if (!v83)
  {
    if (v80) {
      return 0;
    }
LABEL_9:
    if (v77)
    {
      if (!v74) {
        return 0;
      }
      swift_bridgeObjectRetain();
      uint64_t v14 = swift_bridgeObjectRetain();
      char v15 = specialized static Dictionary<>.== infix(_:_:)(v14, v74);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL result = 0;
      if ((v15 & 1) == 0 || v78 != v75 || v79 != v76) {
        return result;
      }
    }
    else
    {
      if (v74) {
        return 0;
      }
      BOOL result = 0;
      if (v78 != v75 || v79 != v76) {
        return result;
      }
    }
    if ((specialized static Array<A>.== infix(_:_:)(v73, v72) & 1) == 0
      || (specialized static Data.== infix(_:_:)(v71, v70, v69, v68) & 1) == 0)
    {
      return 0;
    }
    if (v60)
    {
      uint64_t v16 = v65;
      uint64_t v17 = v66;
      uint64_t v18 = v63;
      uint64_t v19 = v64;
      uint64_t v20 = v61;
      uint64_t v21 = v62;
      uint64_t v23 = v58;
      uint64_t v22 = v59;
      uint64_t v25 = v56;
      uint64_t v24 = v57;
      uint64_t v27 = v5;
      uint64_t v26 = v45;
      uint64_t v29 = v49;
      uint64_t v28 = v3;
      uint64_t v31 = v54;
      uint64_t v30 = v55;
      uint64_t v32 = v7;
      uint64_t v33 = v2;
      uint64_t v34 = v67;
      uint64_t v36 = v52;
      uint64_t v35 = v53;
      uint64_t v37 = v51;
      uint64_t v38 = v10;
      uint64_t v40 = v42;
      uint64_t v39 = v43;
      if (v54)
      {
        v111[0] = v59;
        v111[1] = v60;
        v111[2] = v61;
        v111[3] = v62;
        v111[4] = v63;
        v111[5] = v64;
        v111[6] = v65;
        v111[7] = v66;
        v111[8] = v58;
        v111[9] = v57;
        v111[10] = v56;
        v111[11] = v55;
        v111[12] = v53;
        uint64_t v85 = v52;
        uint64_t v86 = v54;
        uint64_t v87 = v67;
        uint64_t v88 = v48;
        uint64_t v89 = v49;
        uint64_t v90 = v50;
        uint64_t v91 = v44;
        uint64_t v92 = v45;
        uint64_t v93 = v51;
        uint64_t v94 = v47;
        uint64_t v95 = v46;
        uint64_t v96 = v43;
        uint64_t v97 = v42;
        outlined copy of PromptRenderingEnvelope?(v59, v60);
        outlined copy of PromptRenderingEnvelope?(v52, v54);
        char v84 = specialized static PromptRenderingEnvelope.== infix(_:_:)((uint64_t)v111, (uint64_t)&v85);
        outlined consume of PromptRenderingEnvelope?(v52, v54);
        outlined consume of PromptRenderingEnvelope?(v59, v60);
        return (v84 & 1) != 0;
      }
    }
    else
    {
      uint64_t v16 = v65;
      uint64_t v17 = v66;
      uint64_t v18 = v63;
      uint64_t v19 = v64;
      uint64_t v20 = v61;
      uint64_t v21 = v62;
      uint64_t v23 = v58;
      uint64_t v22 = v59;
      uint64_t v25 = v56;
      uint64_t v24 = v57;
      uint64_t v27 = v5;
      uint64_t v26 = v45;
      uint64_t v29 = v49;
      uint64_t v28 = v3;
      uint64_t v31 = v54;
      uint64_t v30 = v55;
      uint64_t v32 = v7;
      uint64_t v33 = v2;
      uint64_t v34 = v67;
      uint64_t v36 = v52;
      uint64_t v35 = v53;
      uint64_t v37 = v51;
      uint64_t v38 = v10;
      uint64_t v40 = v42;
      uint64_t v39 = v43;
      if (!v54) {
        return 1;
      }
    }
    uint64_t v85 = v22;
    uint64_t v86 = v60;
    uint64_t v87 = v20;
    uint64_t v88 = v21;
    uint64_t v89 = v18;
    uint64_t v90 = v19;
    uint64_t v91 = v16;
    uint64_t v92 = v17;
    uint64_t v93 = v23;
    uint64_t v94 = v24;
    uint64_t v95 = v25;
    uint64_t v96 = v30;
    uint64_t v97 = v35;
    uint64_t v98 = v36;
    uint64_t v99 = v31;
    uint64_t v100 = v34;
    uint64_t v101 = v33;
    uint64_t v102 = v29;
    uint64_t v103 = v28;
    uint64_t v104 = v27;
    uint64_t v105 = v26;
    uint64_t v106 = v37;
    uint64_t v107 = v32;
    uint64_t v108 = v38;
    uint64_t v109 = v39;
    uint64_t v110 = v40;
    uint64_t v41 = v36;
    outlined copy of PromptRenderingEnvelope?(v22, v60);
    outlined copy of PromptRenderingEnvelope?(v41, v31);
    outlined release of (PromptRenderingEnvelope?, PromptRenderingEnvelope?)(&v85);
    return 0;
  }
  if (!v80) {
    return 0;
  }
  if (v82 == v81 && v83 == v80) {
    goto LABEL_9;
  }
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v12) {
    goto LABEL_9;
  }
  return result;
}

BOOL specialized static RegisterDocumentRequest.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[2];
  uint64_t v3 = a1[6];
  uint64_t v13 = a1[5];
  uint64_t v14 = a1[4];
  uint64_t v4 = a1[7];
  uint64_t v5 = a2[1];
  uint64_t v7 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v11 = a2[6];
  uint64_t v10 = a2[7];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0
    || (v2 != v5 || v16 != v7) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (v15 != v6 || v14 != v8) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    return 0;
  }
  if (v3)
  {
    if (!v11 || (v13 != v9 || v3 != v11) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return 0;
    }
  }
  else if (v11)
  {
    return 0;
  }
  return (specialized static Dictionary<>.== infix(_:_:)(v4, v10) & 1) != 0;
}

unint64_t lazy protocol witness table accessor for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DocumentResourceEnvelope] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DocumentResourceEnvelope] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [DocumentResourceEnvelope] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DocumentResourceEnvelope]);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope, (void (*)(uint64_t))type metadata accessor for DocumentResourceEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DocumentResourceEnvelope] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [DocumentResourceEnvelope] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [DocumentResourceEnvelope] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DocumentResourceEnvelope]);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope, (void (*)(uint64_t))type metadata accessor for DocumentResourceEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DocumentResourceEnvelope] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope;
  if (!lazy protocol witness table cache variable for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope;
  if (!lazy protocol witness table cache variable for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope;
  if (!lazy protocol witness table cache variable for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for DocumentRegistrationStatusEnvelope(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for DocumentRegistrationStatusEnvelope);
}

uint64_t outlined init with copy of DocumentResourceEnvelope(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for DocumentRegistrationEnvelope(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for DocumentRegistrationEnvelope);
}

uint64_t specialized static ToolDescriptionEnvelope.FunctionDescriptionEnvelope.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  BOOL v5 = a1[2] == a2[2] && a1[3] == a2[3];
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
  return static GenerationSchema.== infix(_:_:)();
}

uint64_t specialized static ToolDescriptionEnvelope.ToolTypeEnvelope.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (uint64_t *)((char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ToolDescriptionEnvelope.ToolTypeEnvelope, ToolDescriptionEnvelope.ToolTypeEnvelope));
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of DocumentResourceEnvelope(a1, (uint64_t)v14, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
  outlined init with copy of DocumentResourceEnvelope(a2, v15, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  int v17 = v16(v14, 2, v4);
  if (v17)
  {
    if (v17 == 1)
    {
      if (v16((char *)v15, 2, v4) != 1) {
        goto LABEL_9;
      }
LABEL_8:
      outlined destroy of DocumentResourceEnvelope((uint64_t)v14, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
      return 1;
    }
    if (v16((char *)v15, 2, v4) == 2) {
      goto LABEL_8;
    }
  }
  else
  {
    outlined init with copy of DocumentResourceEnvelope((uint64_t)v14, (uint64_t)v10, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
    if (!v16((char *)v15, 2, v4))
    {
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v15, (uint64_t)v7, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
      BOOL v19 = *v10 == *v7 && v10[1] == v7[1];
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        || (v10[2] == v7[2] ? (BOOL v20 = v10[3] == v7[3]) : (BOOL v20 = 0),
            !v20 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
         || (static GenerationSchema.== infix(_:_:)() & 1) == 0))
      {
        outlined destroy of DocumentResourceEnvelope((uint64_t)v7, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
        outlined destroy of DocumentResourceEnvelope((uint64_t)v10, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
        outlined destroy of DocumentResourceEnvelope((uint64_t)v14, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
        return 0;
      }
      outlined destroy of DocumentResourceEnvelope((uint64_t)v7, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
      outlined destroy of DocumentResourceEnvelope((uint64_t)v10, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
      goto LABEL_8;
    }
    outlined destroy of DocumentResourceEnvelope((uint64_t)v10, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
  }
LABEL_9:
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v14, &demangling cache variable for type metadata for (ToolDescriptionEnvelope.ToolTypeEnvelope, ToolDescriptionEnvelope.ToolTypeEnvelope));
  return 0;
}

uint64_t specialized static ModelInformationEnvelope.AssetEnvelope.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v5 = a1[3];
  uint64_t v6 = a2[3];
  if (v5)
  {
    if (v6)
    {
      BOOL v7 = a1[2] == a2[2] && v5 == v6;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_13;
      }
    }
    return 0;
  }
  if (v6) {
    return 0;
  }
LABEL_13:
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[5];
  return specialized static Data.== infix(_:_:)(v8, v9, v10, v11);
}

uint64_t specialized static PromptCompletionEnvelope.SegmentEnvelope.== infix(_:_:)(long long *a1, long long *a2)
{
  outlined init with take of PromptCompletionEnvelope.SegmentEnvelope(a1, &v22);
  uint64_t v4 = v22;
  if ((v26 & 1) == 0)
  {
    unint64_t v9 = *((void *)&v22 + 1);
    uint64_t v8 = v23;
    uint64_t v11 = v24;
    unint64_t v10 = v25;
    outlined init with take of PromptCompletionEnvelope.SegmentEnvelope(a2, &v17);
    if ((v21 & 1) == 0)
    {
      uint64_t v13 = v18;
      uint64_t v12 = v19;
      unint64_t v14 = v20;
      if (__PAIR128__(v9, v4) == v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        outlined release of PromptCompletionEnvelope.SegmentEnvelope((uint64_t)a1, (void (*)(void, void, void, void, void, void))outlined copy of PromptCompletion.Content);
        outlined release of PromptCompletionEnvelope.SegmentEnvelope((uint64_t)a2, (void (*)(void, void, void, void, void, void))outlined copy of PromptCompletion.Content);
        if (specialized static Array<A>.== infix(_:_:)(v8, v13))
        {
          if (v10 >> 60 == 15)
          {
            if (v14 >> 60 == 15)
            {
              outlined release of PromptCompletionEnvelope.SegmentEnvelope((uint64_t)a2, (void (*)(void, void, void, void, void, void))outlined consume of PromptCompletionEnvelope.SegmentEnvelope);
              outlined release of PromptCompletionEnvelope.SegmentEnvelope((uint64_t)a1, (void (*)(void, void, void, void, void, void))outlined consume of PromptCompletionEnvelope.SegmentEnvelope);
              char v7 = 1;
              return v7 & 1;
            }
          }
          else if (v14 >> 60 != 15)
          {
            outlined copy of Data?(v11, v10);
            outlined copy of Data?(v12, v14);
            char v16 = specialized static Data.== infix(_:_:)(v11, v10, v12, v14);
            outlined consume of Data?(v12, v14);
            outlined consume of Data?(v11, v10);
            outlined release of PromptCompletionEnvelope.SegmentEnvelope((uint64_t)a2, (void (*)(void, void, void, void, void, void))outlined consume of PromptCompletionEnvelope.SegmentEnvelope);
            outlined release of PromptCompletionEnvelope.SegmentEnvelope((uint64_t)a1, (void (*)(void, void, void, void, void, void))outlined consume of PromptCompletionEnvelope.SegmentEnvelope);
            if (v16)
            {
              char v7 = 1;
              return v7 & 1;
            }
            goto LABEL_14;
          }
          outlined copy of Data?(v11, v10);
          outlined copy of Data?(v12, v14);
          outlined consume of Data?(v11, v10);
          outlined consume of Data?(v12, v14);
        }
        outlined release of PromptCompletionEnvelope.SegmentEnvelope((uint64_t)a2, (void (*)(void, void, void, void, void, void))outlined consume of PromptCompletionEnvelope.SegmentEnvelope);
        outlined release of PromptCompletionEnvelope.SegmentEnvelope((uint64_t)a1, (void (*)(void, void, void, void, void, void))outlined consume of PromptCompletionEnvelope.SegmentEnvelope);
      }
    }
LABEL_14:
    char v7 = 0;
    return v7 & 1;
  }
  unint64_t v5 = *((void *)&v22 + 1);
  outlined init with take of PromptCompletionEnvelope.SegmentEnvelope(a2, &v17);
  if (v21 != 1) {
    goto LABEL_14;
  }
  long long v6 = v17;
  outlined release of PromptCompletionEnvelope.SegmentEnvelope((uint64_t)a1, (void (*)(void, void, void, void, void, void))outlined copy of PromptCompletion.Content);
  outlined release of PromptCompletionEnvelope.SegmentEnvelope((uint64_t)a2, (void (*)(void, void, void, void, void, void))outlined copy of PromptCompletion.Content);
  char v7 = specialized static Data.== infix(_:_:)(v4, v5, v6, *((unint64_t *)&v6 + 1));
  outlined release of PromptCompletionEnvelope.SegmentEnvelope((uint64_t)a2, (void (*)(void, void, void, void, void, void))outlined consume of PromptCompletionEnvelope.SegmentEnvelope);
  outlined release of PromptCompletionEnvelope.SegmentEnvelope((uint64_t)a1, (void (*)(void, void, void, void, void, void))outlined consume of PromptCompletionEnvelope.SegmentEnvelope);
  return v7 & 1;
}

uint64_t specialized static PromptCompletionEnvelope.CandidateEnvelope.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 8), *(void *)(a2 + 8)) & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16))
  {
    if (!v4) {
      goto LABEL_8;
    }
    swift_bridgeObjectRetain();
    uint64_t v5 = swift_bridgeObjectRetain();
    char v6 = specialized static Dictionary<>.== infix(_:_:)(v5, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (v4)
  {
    goto LABEL_8;
  }
  outlined init with take of FinishReasonEnvelope((_OWORD *)(a1 + 24), &v13);
  outlined init with take of FinishReasonEnvelope((_OWORD *)(a2 + 24), &v12);
  outlined init with take of FinishReasonEnvelope(&v13, &v14);
  uint64_t v9 = *((void *)&v14 + 1);
  switch(*((void *)&v14 + 1))
  {
    case 2:
      outlined init with take of FinishReasonEnvelope(&v12, &v15);
      if (*((void *)&v15 + 1) == 2) {
        goto LABEL_23;
      }
      goto LABEL_8;
    case 1:
      outlined init with take of FinishReasonEnvelope(&v12, &v15);
      if (*((void *)&v15 + 1) == 1) {
        goto LABEL_23;
      }
      goto LABEL_8;
    case 0:
      outlined init with take of FinishReasonEnvelope(&v12, &v15);
      if (!*((void *)&v15 + 1))
      {
LABEL_23:
        char v7 = specialized static Data.== infix(_:_:)(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a2 + 40), *(void *)(a2 + 48));
        return v7 & 1;
      }
LABEL_8:
      char v7 = 0;
      return v7 & 1;
  }
  uint64_t v10 = v14;
  outlined init with take of FinishReasonEnvelope(&v12, &v15);
  if (*((void *)&v15 + 1) < 3uLL) {
    goto LABEL_8;
  }
  if (v10 == (void)v15 && v9 == *((void *)&v15 + 1)) {
    goto LABEL_23;
  }
  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  char v7 = 0;
  if (v11) {
    goto LABEL_23;
  }
  return v7 & 1;
}

uint64_t specialized static DocumentRegistrationStatusEnvelope.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DocumentResourceIdentifier();
  uint64_t v34 = *(void *)(v4 - 8);
  uint64_t v35 = v4;
  MEMORY[0x270FA5388](v4);
  char v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (uint64_t *)((char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  long long v13 = (char *)&v34 - v12;
  MEMORY[0x270FA5388](v11);
  long long v15 = (char *)&v34 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentRegistrationStatusEnvelope, DocumentRegistrationStatusEnvelope));
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (uint64_t)&v19[*(int *)(v17 + 56)];
  outlined init with copy of DocumentResourceEnvelope(a1, (uint64_t)v19, type metadata accessor for DocumentRegistrationStatusEnvelope);
  outlined init with copy of DocumentResourceEnvelope(a2, v20, type metadata accessor for DocumentRegistrationStatusEnvelope);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with copy of DocumentResourceEnvelope((uint64_t)v19, (uint64_t)v15, type metadata accessor for DocumentRegistrationStatusEnvelope);
    if (!swift_getEnumCaseMultiPayload())
    {
      char v25 = *(float *)v15 == *(float *)v20
         && *((void *)v15 + 1) == *(void *)(v20 + 8)
         && *((void *)v15 + 2) == *(void *)(v20 + 16);
      goto LABEL_15;
    }
    goto LABEL_25;
  }
  if (EnumCaseMultiPayload != 1)
  {
    outlined init with copy of DocumentResourceEnvelope((uint64_t)v19, (uint64_t)v10, type metadata accessor for DocumentRegistrationStatusEnvelope);
    uint64_t v30 = *v10;
    uint64_t v29 = v10[1];
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      if (v30 == *(void *)v20 && v29 == *(void *)(v20 + 8))
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v32 & 1) == 0)
        {
          outlined destroy of DocumentResourceEnvelope((uint64_t)v19, type metadata accessor for DocumentRegistrationStatusEnvelope);
LABEL_26:
          char v25 = 0;
          return v25 & 1;
        }
      }
      outlined destroy of DocumentResourceEnvelope((uint64_t)v19, type metadata accessor for DocumentRegistrationStatusEnvelope);
      char v25 = 1;
      return v25 & 1;
    }
    swift_bridgeObjectRelease();
LABEL_25:
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v19, &demangling cache variable for type metadata for (DocumentRegistrationStatusEnvelope, DocumentRegistrationStatusEnvelope));
    goto LABEL_26;
  }
  outlined init with copy of DocumentResourceEnvelope((uint64_t)v19, (uint64_t)v13, type metadata accessor for DocumentRegistrationStatusEnvelope);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v35);
    goto LABEL_25;
  }
  uint64_t v22 = v34;
  uint64_t v23 = v20;
  uint64_t v24 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v6, v23, v35);
  char v25 = static DocumentResourceIdentifier.== infix(_:_:)();
  char v26 = *(void (**)(char *, uint64_t))(v22 + 8);
  v26(v6, v24);
  v26(v13, v24);
LABEL_15:
  outlined destroy of DocumentResourceEnvelope((uint64_t)v19, type metadata accessor for DocumentRegistrationStatusEnvelope);
  return v25 & 1;
}

unint64_t lazy protocol witness table accessor for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for RegisterDocumentResponseElement(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for RegisterDocumentResponseElement);
}

BOOL specialized static PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    BOOL v7 = a1[2] == a2[2] && a1[3] == a2[3];
    if (v7 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v8 & 1) != 0))
    {
      if (a1[4] != a2[4]) {
        return 0;
      }
      if (a1[5] == a2[5] && a1[6] == a2[6]
        || (char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v9 & 1) != 0))
      {
        uint64_t v11 = a1[7];
        unint64_t v10 = a1[8];
        uint64_t v13 = a2[7];
        unint64_t v12 = a2[8];
        if (v10 >> 60 == 15)
        {
          if (v12 >> 60 == 15) {
            return 1;
          }
        }
        else if (v12 >> 60 != 15)
        {
          outlined copy of Data?(v11, v10);
          outlined copy of Data?(v13, v12);
          char v14 = specialized static Data.== infix(_:_:)(v11, v10, v13, v12);
          outlined consume of Data?(v13, v12);
          outlined consume of Data?(v11, v10);
          return (v14 & 1) != 0;
        }
        outlined copy of Data?(v11, v10);
        outlined copy of Data?(v13, v12);
        outlined consume of Data?(v11, v10);
        outlined consume of Data?(v13, v12);
        return 0;
      }
    }
  }
  return result;
}

BOOL specialized static PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    BOOL v7 = a1[2] == a2[2] && a1[3] == a2[3];
    if (v7 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v8 & 1) != 0))
    {
      if (a1[4] == a2[4] && a1[5] == a2[5]
        || (char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v9 & 1) != 0))
      {
        if (a1[6] == a2[6] && a1[7] == a2[7]
          || (char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v10 & 1) != 0))
        {
          if (a1[8] == a2[8] && a1[9] == a2[9]
            || (char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v11 & 1) != 0))
          {
            uint64_t v13 = a1[10];
            unint64_t v12 = a1[11];
            uint64_t v15 = a2[10];
            unint64_t v14 = a2[11];
            if (v12 >> 60 == 15)
            {
              if (v14 >> 60 == 15) {
                return 1;
              }
            }
            else if (v14 >> 60 != 15)
            {
              outlined copy of Data?(v13, v12);
              outlined copy of Data?(v15, v14);
              char v16 = specialized static Data.== infix(_:_:)(v13, v12, v15, v14);
              outlined consume of Data?(v15, v14);
              outlined consume of Data?(v13, v12);
              return (v16 & 1) != 0;
            }
            outlined copy of Data?(v13, v12);
            outlined copy of Data?(v15, v14);
            outlined consume of Data?(v13, v12);
            outlined consume of Data?(v15, v14);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

BOOL specialized static PromptCompletionStreamElementEnvelope.Envelope.== infix(_:_:)(uint64_t a1, unint64_t a2)
{
  v222 = (uint64_t *)a2;
  v221 = (char *)a1;
  uint64_t v214 = type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(0);
  MEMORY[0x270FA5388](v214);
  v215 = (uint64_t *)((char *)&v203 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope(0);
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v219 = (uint64_t)&v203 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  v218 = (uint64_t *)((char *)&v203 - v7);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  v217 = (uint64_t *)((char *)&v203 - v9);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  v216 = (uint64_t *)((char *)&v203 - v11);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  unint64_t v14 = (long long *)((char *)&v203 - v13);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  unint64_t v220 = (unint64_t)&v203 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v203 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v22 = (uint64_t *)((char *)&v203 - v21);
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  char v25 = (uint64_t *)((char *)&v203 - v24);
  uint64_t v26 = MEMORY[0x270FA5388](v23);
  uint64_t v28 = (uint64_t *)((char *)&v203 - v27);
  MEMORY[0x270FA5388](v26);
  uint64_t v30 = (uint64_t *)((char *)&v203 - v29);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PromptCompletionStreamElementEnvelope.Envelope, PromptCompletionStreamElementEnvelope.Envelope));
  uint64_t v32 = MEMORY[0x270FA5388](v31 - 8);
  uint64_t v34 = (char *)&v203 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = (uint64_t)&v34[*(int *)(v32 + 56)];
  outlined init with copy of DocumentResourceEnvelope((uint64_t)v221, (uint64_t)v34, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
  uint64_t v36 = (uint64_t)v222;
  v222 = (uint64_t *)v35;
  outlined init with copy of DocumentResourceEnvelope(v36, v35, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      v221 = v34;
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v34, (uint64_t)v28, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
      uint64_t v44 = *v28;
      unint64_t v220 = v28[1];
      uint64_t v45 = v28[3];
      uint64_t v219 = v28[2];
      uint64_t v46 = v28[5];
      v218 = (uint64_t *)v28[4];
      uint64_t v47 = v28[6];
      v217 = (uint64_t *)v28[7];
      uint64_t v48 = v28[8];
      v216 = (uint64_t *)v28[9];
      uint64_t v49 = v28[10];
      uint64_t v50 = v28[11];
      uint64_t v51 = v28[12];
      v215 = (void *)v28[13];
      uint64_t v52 = v28[14];
      uint64_t v53 = v222;
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_103;
      }
      uint64_t v207 = v51;
      uint64_t v208 = v50;
      uint64_t v209 = v49;
      uint64_t v210 = v48;
      uint64_t v211 = v47;
      uint64_t v212 = v46;
      uint64_t v213 = v45;
      uint64_t v214 = v52;
      uint64_t v54 = *v53;
      uint64_t v55 = v53[1];
      uint64_t v56 = v53[2];
      uint64_t v205 = v53[3];
      uint64_t v57 = v53[4];
      uint64_t v204 = v53[5];
      uint64_t v58 = v53[7];
      uint64_t v203 = v53[6];
      uint64_t v60 = v53[8];
      uint64_t v59 = v53[9];
      uint64_t v61 = v53[11];
      uint64_t v206 = v53[10];
      uint64_t v63 = v53[12];
      uint64_t v62 = v53[13];
      v222 = (uint64_t *)v53[14];
      if (v44 != v54 || v220 != v55)
      {
        uint64_t v64 = v56;
        uint64_t v65 = v57;
        uint64_t v66 = v58;
        uint64_t v67 = v59;
        uint64_t v68 = v62;
        char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v62 = v68;
        uint64_t v59 = v67;
        uint64_t v58 = v66;
        uint64_t v57 = v65;
        uint64_t v56 = v64;
        if ((v69 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_141;
        }
      }
      *(void *)&long long v223 = v219;
      *((void *)&v223 + 1) = v213;
      *(void *)&long long v224 = v218;
      v218 = (uint64_t *)v55;
      *((void *)&v224 + 1) = v212;
      *(void *)&long long v225 = v211;
      *((void *)&v225 + 1) = v217;
      *(void *)&long long v226 = v210;
      *((void *)&v226 + 1) = v216;
      *(void *)&long long v227 = v209;
      *((void *)&v227 + 1) = v208;
      *(void *)&long long v228 = v207;
      *((void *)&v228 + 1) = v215;
      uint64_t v229 = v214;
      *(void *)&long long v230 = v56;
      *((void *)&v230 + 1) = v205;
      *(void *)&long long v231 = v57;
      *((void *)&v231 + 1) = v204;
      *(void *)&long long v232 = v203;
      *((void *)&v232 + 1) = v58;
      *(void *)&long long v233 = v60;
      *((void *)&v233 + 1) = v59;
      *(void *)&long long v234 = v206;
      *((void *)&v234 + 1) = v61;
      *(void *)&long long v235 = v63;
      *((void *)&v235 + 1) = v62;
      unint64_t v236 = (unint64_t)v222;
      LODWORD(v219) = specialized static PromptRenderingEnvelope.== infix(_:_:)((uint64_t)&v223, (uint64_t)&v230);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v219 & 1) == 0) {
        goto LABEL_141;
      }
      goto LABEL_155;
    case 2u:
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v34, (uint64_t)v25, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
      uint64_t v71 = *v25;
      uint64_t v70 = v25[1];
      uint64_t v72 = v25[2];
      uint64_t v73 = v222;
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        swift_bridgeObjectRelease();
LABEL_95:
        swift_bridgeObjectRelease();
        goto LABEL_105;
      }
      uint64_t v74 = *v73;
      uint64_t v75 = v73[1];
      uint64_t v76 = v73[2];
      BOOL v77 = v71 == v74 && v70 == v75;
      if (!v77 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_145;
      }
      char v78 = specialized static Dictionary<>.== infix(_:_:)(v72, v76);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v78) {
        goto LABEL_124;
      }
      goto LABEL_146;
    case 3u:
      uint64_t v37 = v34;
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v34, (uint64_t)v22, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
      uint64_t v80 = *v22;
      uint64_t v79 = v22[1];
      uint64_t v82 = v22[2];
      uint64_t v81 = v22[3];
      uint64_t v83 = v22[4];
      char v84 = v222;
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_96;
      }
      uint64_t v85 = *v84;
      uint64_t v86 = v84[1];
      uint64_t v87 = v84;
      uint64_t v89 = v84[2];
      uint64_t v88 = v84[3];
      uint64_t v90 = v87[4];
      BOOL v91 = v80 == v85 && v79 == v86;
      if (v91 || (_stringCompareWithSmolCheck(_:_:expecting:)())
        && (v82 == v89 ? (BOOL v92 = v81 == v88) : (BOOL v92 = 0), v92 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        char v93 = specialized static Dictionary<>.== infix(_:_:)(v83, v90);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v93)
        {
          uint64_t v94 = (uint64_t)v37;
          goto LABEL_156;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v199 = (uint64_t)v37;
      goto LABEL_147;
    case 4u:
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v34, (uint64_t)v19, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
      long long v95 = *((_OWORD *)v19 + 3);
      long long v225 = *((_OWORD *)v19 + 2);
      long long v226 = v95;
      *(void *)&long long v227 = *((void *)v19 + 8);
      long long v96 = *(_OWORD *)v19;
      long long v224 = *((_OWORD *)v19 + 1);
      long long v223 = v96;
      unint64_t v97 = (unint64_t)v222;
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        long long v98 = *(_OWORD *)(v97 + 48);
        long long v232 = *(_OWORD *)(v97 + 32);
        long long v233 = v98;
        *(void *)&long long v234 = *(void *)(v97 + 64);
        long long v99 = *(_OWORD *)(v97 + 16);
        long long v230 = *(_OWORD *)v97;
        long long v231 = v99;
        BOOL v100 = specialized static PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.== infix(_:_:)(&v223, &v230);
        outlined release of PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope((uint64_t)&v230);
        outlined release of PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope((uint64_t)&v223);
        goto LABEL_46;
      }
      outlined release of PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope((uint64_t)&v223);
      goto LABEL_105;
    case 5u:
      uint64_t v101 = (void *)v220;
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v34, v220, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
      uint64_t v102 = (uint64_t)v222;
      if (swift_getEnumCaseMultiPayload() != 5)
      {
        outlined destroy of DocumentResourceEnvelope((uint64_t)v101, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope);
        goto LABEL_105;
      }
      uint64_t v103 = v215;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v102, (uint64_t)v215, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope);
      if (*v101 == *v103 && v101[1] == v103[1] || (_stringCompareWithSmolCheck(_:_:expecting:)())
        && (v101[2] == v103[2] && v101[3] == v103[3] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && v101[4] == v103[4])
      {
        uint64_t v104 = *(int *)(v214 + 28);
        uint64_t v105 = (char *)v101 + v104;
        uint64_t v106 = (char *)v103 + v104;
        if (*(void *)((char *)v101 + v104) == *(void *)((char *)v103 + v104))
        {
          uint64_t v107 = type metadata accessor for AnnotationEnvelope(0);
          if (specialized static AnnotationEnvelope.CitationTypeEnvelope.== infix(_:_:)((uint64_t)&v105[*(int *)(v107 + 20)], (uint64_t)&v106[*(int *)(v107 + 20)]))
          {
            outlined destroy of DocumentResourceEnvelope((uint64_t)v103, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope);
            outlined destroy of DocumentResourceEnvelope((uint64_t)v101, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope);
            goto LABEL_124;
          }
        }
      }
      outlined destroy of DocumentResourceEnvelope((uint64_t)v103, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope);
      outlined destroy of DocumentResourceEnvelope((uint64_t)v101, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope);
      goto LABEL_146;
    case 6u:
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v34, (uint64_t)v14, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
      long long v108 = v14[3];
      long long v225 = v14[2];
      long long v109 = v14[4];
      long long v110 = v14[5];
      long long v226 = v108;
      long long v227 = v109;
      long long v228 = v110;
      long long v111 = v14[1];
      long long v223 = *v14;
      long long v224 = v111;
      v112 = (long long *)v222;
      if (swift_getEnumCaseMultiPayload() != 6)
      {
        outlined release of PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope((uint64_t)&v223);
        goto LABEL_105;
      }
      long long v113 = v112[3];
      long long v232 = v112[2];
      long long v233 = v113;
      long long v114 = v112[5];
      long long v234 = v112[4];
      long long v235 = v114;
      long long v115 = v112[1];
      long long v230 = *v112;
      long long v231 = v115;
      BOOL v100 = specialized static PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.== infix(_:_:)(&v223, &v230);
      outlined release of PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope((uint64_t)&v230);
      outlined release of PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope((uint64_t)&v223);
LABEL_46:
      outlined destroy of DocumentResourceEnvelope((uint64_t)v34, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
      return v100;
    case 7u:
      v221 = v34;
      v116 = v216;
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v34, (uint64_t)v216, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
      uint64_t v118 = *v116;
      uint64_t v117 = v116[1];
      uint64_t v120 = v116[2];
      uint64_t v119 = v116[3];
      uint64_t v122 = v116[4];
      uint64_t v121 = v116[5];
      unint64_t v123 = v116[6];
      v124 = v222;
      if (swift_getEnumCaseMultiPayload() != 7)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v189 = v121;
        unint64_t v190 = v123;
        goto LABEL_102;
      }
      uint64_t v125 = *v124;
      uint64_t v126 = v124[1];
      v127 = v124;
      uint64_t v128 = v124[2];
      uint64_t v129 = v124[3];
      uint64_t v219 = v127[4];
      unint64_t v131 = v127[5];
      unint64_t v130 = v127[6];
      unint64_t v220 = v131;
      v222 = (uint64_t *)v130;
      BOOL v132 = v118 == v125 && v117 == v126;
      if (v132 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        BOOL v133 = v120 == v128 && v119 == v129;
        if (v133 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && v122 == v219)
        {
          uint64_t v134 = v220;
          unint64_t v135 = (unint64_t)v222;
          char v136 = specialized static Data.== infix(_:_:)(v121, v123, v220, (unint64_t)v222);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(v134, v135);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_154;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v220, (unint64_t)v222);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v197 = v121;
      goto LABEL_140;
    case 8u:
      v221 = v34;
      v137 = v217;
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v34, (uint64_t)v217, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
      uint64_t v139 = *v137;
      uint64_t v138 = v137[1];
      uint64_t v140 = v137[2];
      uint64_t v141 = v137[3];
      uint64_t v142 = v137[4];
      unint64_t v143 = v137[5];
      uint64_t v145 = v137[6];
      uint64_t v144 = v137[7];
      v146 = v222;
      if (swift_getEnumCaseMultiPayload() != 8)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of FinishReason(v142, v143);
        uint64_t v189 = v145;
        unint64_t v190 = v144;
LABEL_102:
        outlined consume of Data._Representation(v189, v190);
LABEL_103:
        uint64_t v34 = v221;
LABEL_105:
        outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v34, &demangling cache variable for type metadata for (PromptCompletionStreamElementEnvelope.Envelope, PromptCompletionStreamElementEnvelope.Envelope));
        return 0;
      }
      unint64_t v220 = v143;
      uint64_t v147 = v141;
      uint64_t v219 = v142;
      v218 = (uint64_t *)v145;
      v217 = (uint64_t *)v144;
      uint64_t v148 = *v146;
      uint64_t v149 = v146[1];
      uint64_t v151 = v146[2];
      uint64_t v150 = v146[3];
      uint64_t v153 = v146[4];
      unint64_t v152 = v146[5];
      uint64_t v155 = v146[6];
      unint64_t v154 = v146[7];
      BOOL v156 = v139 == v148 && v138 == v149;
      v216 = (uint64_t *)v138;
      if (!v156)
      {
        uint64_t v157 = v150;
        char v158 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v150 = v157;
        if ((v158 & 1) == 0)
        {
          unint64_t v160 = v154;
          unint64_t v123 = (unint64_t)v217;
          uint64_t v161 = v155;
          uint64_t v162 = v153;
          unint64_t v163 = v152;
LABEL_138:
          unint64_t v164 = v220;
          goto LABEL_139;
        }
      }
      BOOL v159 = v140 == v151 && v147 == v150;
      if (!v159 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        unint64_t v160 = v154;
        unint64_t v123 = (unint64_t)v217;
        uint64_t v161 = v155;
        uint64_t v162 = v153;
        unint64_t v163 = v152;
        goto LABEL_138;
      }
      unint64_t v160 = v154;
      if (!v220)
      {
        unint64_t v123 = (unint64_t)v217;
        uint64_t v161 = v155;
        uint64_t v162 = v153;
        unint64_t v163 = v152;
        if (!v152) {
          goto LABEL_153;
        }
        unint64_t v164 = 0;
        goto LABEL_139;
      }
      unint64_t v123 = (unint64_t)v217;
      uint64_t v161 = v155;
      uint64_t v162 = v153;
      if (v220 == 1)
      {
        unint64_t v163 = v152;
        if (v152 == 1) {
          goto LABEL_153;
        }
        unint64_t v164 = 1;
LABEL_139:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of FinishReason(v162, v163);
        outlined consume of Data._Representation(v161, v160);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of FinishReason(v219, v164);
        uint64_t v197 = (uint64_t)v218;
LABEL_140:
        outlined consume of Data._Representation(v197, v123);
        goto LABEL_141;
      }
      unint64_t v163 = v152;
      if (v220 == 2)
      {
        if (v152 != 2)
        {
          unint64_t v164 = 2;
          goto LABEL_139;
        }
        goto LABEL_153;
      }
      if (v152 < 3 || (v219 != v162 || v220 != v152) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_138;
      }
LABEL_153:
      uint64_t v121 = (uint64_t)v218;
      unint64_t v201 = v160;
      char v136 = specialized static Data.== infix(_:_:)((uint64_t)v218, v123, v161, v160);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of FinishReason(v162, v163);
      outlined consume of Data._Representation(v161, v201);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of FinishReason(v219, v220);
LABEL_154:
      outlined consume of Data._Representation(v121, v123);
      if ((v136 & 1) == 0)
      {
LABEL_141:
        uint64_t v199 = (uint64_t)v221;
        goto LABEL_147;
      }
LABEL_155:
      uint64_t v94 = (uint64_t)v221;
LABEL_156:
      outlined destroy of DocumentResourceEnvelope(v94, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
      return 1;
    case 9u:
      v165 = v218;
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v34, (uint64_t)v218, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
      uint64_t v167 = *v165;
      uint64_t v166 = v165[1];
      uint64_t v169 = v165[2];
      uint64_t v168 = v165[3];
      v170 = v222;
      if (swift_getEnumCaseMultiPayload() != 9) {
        goto LABEL_95;
      }
      uint64_t v171 = *v170;
      uint64_t v172 = v170[1];
      uint64_t v174 = v170[2];
      uint64_t v173 = v170[3];
      if (v167 == v171 && v166 == v172)
      {
        swift_bridgeObjectRelease_n();
        if (v169 == v174 && v168 == v173) {
          goto LABEL_124;
        }
      }
      else
      {
        char v176 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v176 & 1) != 0 && v169 == v174 && v168 == v173) {
          goto LABEL_124;
        }
      }
      goto LABEL_146;
    case 0xAu:
      v177 = (uint64_t *)v219;
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v34, v219, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
      uint64_t v179 = *v177;
      uint64_t v178 = v177[1];
      uint64_t v181 = v177[2];
      unint64_t v180 = v177[3];
      v182 = v222;
      if (swift_getEnumCaseMultiPayload() != 10)
      {
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v181, v180);
        goto LABEL_105;
      }
      uint64_t v183 = *v182;
      uint64_t v184 = v182[1];
      uint64_t v185 = v182[2];
      unint64_t v186 = v182[3];
      BOOL v187 = v179 == v183 && v178 == v184;
      if (v187 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        char v188 = specialized static Data.== infix(_:_:)(v181, v180, v185, v186);
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v185, v186);
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v181, v180);
        if (v188) {
          goto LABEL_124;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v185, v186);
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v181, v180);
      }
      goto LABEL_146;
    default:
      uint64_t v37 = v34;
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v34, (uint64_t)v30, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
      uint64_t v39 = *v30;
      uint64_t v38 = v30[1];
      uint64_t v40 = v30[2];
      uint64_t v41 = v30[3];
      uint64_t v42 = v30[4];
      uint64_t v43 = v222;
      if (swift_getEnumCaseMultiPayload())
      {
LABEL_96:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v34 = v37;
        goto LABEL_105;
      }
      uint64_t v191 = *v43;
      uint64_t v192 = v43[1];
      uint64_t v194 = v43[2];
      uint64_t v193 = v43[3];
      uint64_t v195 = v43[4];
      BOOL v196 = v39 == v191 && v38 == v192;
      if (!v196 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        || (specialized static Array<A>.== infix(_:_:)(v40, v194) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v34 = v37;
        goto LABEL_146;
      }
      uint64_t v34 = v37;
      if (v42)
      {
        if (v195)
        {
          if (v41 == v193 && v42 == v195)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_124:
            uint64_t v94 = (uint64_t)v34;
            goto LABEL_156;
          }
          char v202 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v202) {
            goto LABEL_124;
          }
LABEL_146:
          uint64_t v199 = (uint64_t)v34;
LABEL_147:
          outlined destroy of DocumentResourceEnvelope(v199, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
          return 0;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!v195) {
          goto LABEL_124;
        }
      }
LABEL_145:
      swift_bridgeObjectRelease();
      goto LABEL_146;
  }
}

BOOL specialized static PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    BOOL v7 = a1[2] == a2[2] && a1[3] == a2[3];
    if (v7 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v8 & 1) != 0))
    {
      BOOL result = 0;
      if (a1[4] == a2[4])
      {
        uint64_t v9 = *(int *)(type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(0)
                    + 28);
        uint64_t v10 = (void *)((char *)a1 + v9);
        uint64_t v11 = (void *)((char *)a2 + v9);
        if (*v10 == *v11)
        {
          uint64_t v12 = type metadata accessor for AnnotationEnvelope(0);
          if (specialized static AnnotationEnvelope.CitationTypeEnvelope.== infix(_:_:)((uint64_t)v10 + *(int *)(v12 + 20), (uint64_t)v11 + *(int *)(v12 + 20)))return 1; {
        }
          }
      }
    }
  }
  return result;
}

uint64_t specialized static PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), v6 = 0, (v5 & 1) != 0))
  {
    BOOL v7 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
    if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v6 = 0, (v8 & 1) != 0))
    {
      outlined init with take of FinishReasonEnvelope((_OWORD *)(a1 + 32), &v14);
      outlined init with take of FinishReasonEnvelope((_OWORD *)(a2 + 32), &v13);
      outlined init with take of FinishReasonEnvelope(&v14, &v15);
      uint64_t v9 = *((void *)&v15 + 1);
      switch(*((void *)&v15 + 1))
      {
        case 2:
          outlined init with take of FinishReasonEnvelope(&v13, &v16);
          if (*((void *)&v16 + 1) == 2) {
            goto LABEL_25;
          }
          goto LABEL_21;
        case 1:
          outlined init with take of FinishReasonEnvelope(&v13, &v16);
          if (*((void *)&v16 + 1) == 1) {
            goto LABEL_25;
          }
          goto LABEL_21;
        case 0:
          outlined init with take of FinishReasonEnvelope(&v13, &v16);
          if (!*((void *)&v16 + 1))
          {
LABEL_25:
            char v6 = specialized static Data.== infix(_:_:)(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a2 + 48), *(void *)(a2 + 56));
            return v6 & 1;
          }
          goto LABEL_21;
      }
      uint64_t v10 = v15;
      outlined init with take of FinishReasonEnvelope(&v13, &v16);
      if (*((void *)&v16 + 1) < 3uLL)
      {
LABEL_21:
        char v6 = 0;
        return v6 & 1;
      }
      if (v10 == (void)v16 && v9 == *((void *)&v16 + 1)) {
        goto LABEL_25;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      char v6 = 0;
      if (v11) {
        goto LABEL_25;
      }
    }
  }
  return v6 & 1;
}

uint64_t specialized static PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  BOOL v5 = a1[2] == a2[2] && a1[3] == a2[3];
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || a1[4] != a2[4]) {
    return 0;
  }
  uint64_t v6 = a1[5];
  unint64_t v7 = a1[6];
  uint64_t v8 = a2[5];
  unint64_t v9 = a2[6];
  return specialized static Data.== infix(_:_:)(v6, v7, v8, v9);
}

uint64_t specialized static CompletePromptTemplateRequest.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Constraints(0);
  uint64_t v66 = *(void *)(v4 - 8);
  uint64_t v67 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v64 = (uint64_t)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Constraints?, Constraints?));
  MEMORY[0x270FA5388](v65);
  uint64_t v68 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  MEMORY[0x270FA5388](v9);
  long long v13 = (char *)&v60 - v10;
  uint64_t v15 = *a1;
  uint64_t v14 = a1[1];
  uint64_t v17 = a1[2];
  uint64_t v16 = a1[3];
  uint64_t v18 = *a2;
  uint64_t v19 = a2[1];
  char v69 = a2;
  uint64_t v20 = a2[2];
  uint64_t v21 = a2[3];
  if (!v14)
  {
    if (!v19) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (!v19)
  {
LABEL_10:
    outlined copy of PromptEnvelope?(v15, v14);
    outlined copy of PromptEnvelope?(v18, v19);
    outlined consume of PromptEnvelope?(v15, v14);
    uint64_t v23 = v18;
    uint64_t v24 = v19;
LABEL_19:
    outlined consume of PromptEnvelope?(v23, v24);
    goto LABEL_20;
  }
  uint64_t v61 = v12;
  uint64_t v62 = (int *)v11;
  uint64_t v63 = (char *)&v60 - v10;
  if ((v15 != v18 || v14 != v19) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    outlined copy of PromptEnvelope?(v15, v14);
    outlined copy of PromptEnvelope?(v15, v14);
    outlined copy of PromptEnvelope?(v18, v19);
    goto LABEL_18;
  }
  outlined copy of PromptEnvelope?(v15, v14);
  outlined copy of PromptEnvelope?(v15, v14);
  outlined copy of PromptEnvelope?(v18, v19);
  if ((specialized static Array<A>.== infix(_:_:)(v17, v20) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v23 = v15;
    uint64_t v24 = v14;
    goto LABEL_19;
  }
  char v22 = specialized static Array<A>.== infix(_:_:)(v16, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of PromptEnvelope?(v15, v14);
  uint64_t v11 = (uint64_t)v62;
  long long v13 = v63;
  uint64_t v12 = v61;
  if ((v22 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_11:
  uint64_t v25 = v12;
  uint64_t v26 = (uint64_t)v13;
  uint64_t v27 = v11;
  uint64_t v28 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
  uint64_t v29 = v69;
  if (!specialized static PromptTemplateInfoEnvelope.== infix(_:_:)((uint64_t *)((char *)a1 + v28[5]), (uint64_t *)((char *)v69 + v28[5])))goto LABEL_20; {
  uint64_t v30 = (char *)a1 + v28[6];
  }
  long long v31 = *((_OWORD *)v30 + 7);
  long long v85 = *((_OWORD *)v30 + 6);
  long long v86 = v31;
  __int16 v87 = *((_WORD *)v30 + 64);
  long long v32 = *((_OWORD *)v30 + 3);
  long long v81 = *((_OWORD *)v30 + 2);
  long long v82 = v32;
  long long v33 = *((_OWORD *)v30 + 5);
  long long v83 = *((_OWORD *)v30 + 4);
  long long v84 = v33;
  long long v34 = *((_OWORD *)v30 + 1);
  long long v79 = *(_OWORD *)v30;
  long long v80 = v34;
  uint64_t v35 = (long long *)((char *)v29 + v28[6]);
  long long v36 = v35[7];
  long long v76 = v35[6];
  long long v77 = v36;
  __int16 v78 = *((_WORD *)v35 + 64);
  long long v37 = v35[3];
  long long v72 = v35[2];
  long long v73 = v37;
  long long v38 = v35[5];
  long long v74 = v35[4];
  long long v75 = v38;
  long long v39 = v35[1];
  long long v70 = *v35;
  long long v71 = v39;
  if ((specialized static SamplingParametersEnvelope.== infix(_:_:)((uint64_t)&v79, (uint64_t)&v70) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*(uint64_t *)((char *)a1 + v28[7]), *(uint64_t *)((char *)v29 + v28[7])) & 1) == 0)
  {
    goto LABEL_20;
  }
  uint64_t v62 = v28;
  uint64_t v40 = v28[8];
  uint64_t v42 = *(uint64_t *)((char *)a1 + v40);
  unint64_t v41 = *(uint64_t *)((char *)a1 + v40 + 8);
  uint64_t v43 = (uint64_t *)((char *)v29 + v40);
  uint64_t v45 = *v43;
  unint64_t v44 = v43[1];
  if (v41 != 3)
  {
    *(void *)&long long v79 = v42;
    *((void *)&v79 + 1) = v41;
    if (v44 != 3)
    {
      *(void *)&long long v70 = v45;
      *((void *)&v70 + 1) = v44;
      outlined copy of FinishReason?(v42, v41);
      outlined copy of FinishReason(v42, v41);
      char v48 = specialized static FinishReason.== infix(_:_:)((uint64_t *)&v79, (uint64_t *)&v70);
      outlined consume of FinishReason(v79, *((unint64_t *)&v79 + 1));
      outlined consume of FinishReason?(v42, v41);
      if ((v48 & 1) == 0) {
        goto LABEL_20;
      }
      goto LABEL_26;
    }
    outlined copy of FinishReason(v42, v41);
    outlined copy of FinishReason(v42, v41);
    outlined consume of FinishReason(v42, v41);
LABEL_24:
    outlined copy of FinishReason?(v45, v44);
    outlined consume of FinishReason?(v42, v41);
    outlined consume of FinishReason?(v45, v44);
    goto LABEL_20;
  }
  if (v44 != 3) {
    goto LABEL_24;
  }
LABEL_26:
  uint64_t v49 = v62;
  if (specialized static Array<A>.== infix(_:_:)(*(uint64_t *)((char *)a1 + v62[9]), *(uint64_t *)((char *)v29 + v62[9])))
  {
    outlined init with copy of Prompt.Rendering?((uint64_t)a1 + v49[10], v26, &demangling cache variable for type metadata for Constraints?);
    outlined init with copy of Prompt.Rendering?((uint64_t)v29 + v49[10], v25, &demangling cache variable for type metadata for Constraints?);
    uint64_t v50 = v68;
    uint64_t v51 = v68 + *(int *)(v65 + 48);
    uint64_t v63 = (char *)v26;
    outlined init with copy of Prompt.Rendering?(v26, v68, &demangling cache variable for type metadata for Constraints?);
    uint64_t v65 = v51;
    outlined init with copy of Prompt.Rendering?(v25, v51, &demangling cache variable for type metadata for Constraints?);
    uint64_t v52 = v67;
    uint64_t v66 = *(void *)(v66 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v66)(v50, 1, v67) == 1)
    {
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(v25, &demangling cache variable for type metadata for Constraints?);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v63, &demangling cache variable for type metadata for Constraints?);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v66)(v65, 1, v52) == 1)
      {
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(v50, &demangling cache variable for type metadata for Constraints?);
LABEL_34:
        uint64_t v56 = (char *)a1 + v62[11];
        long long v57 = *((_OWORD *)v56 + 2);
        long long v71 = *((_OWORD *)v56 + 1);
        long long v72 = v57;
        *(void *)&long long v73 = *((void *)v56 + 6);
        long long v70 = *(_OWORD *)v56;
        uint64_t v58 = (long long *)((char *)v29 + v62[11]);
        *(void *)&long long v82 = *((void *)v58 + 6);
        long long v59 = v58[2];
        long long v80 = v58[1];
        long long v81 = v59;
        long long v79 = *v58;
        char v46 = specialized static RequestMetadataEnvelope.== infix(_:_:)(&v70, &v79);
        return v46 & 1;
      }
      goto LABEL_32;
    }
    outlined init with copy of Prompt.Rendering?(v50, v27, &demangling cache variable for type metadata for Constraints?);
    uint64_t v53 = v65;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v66)(v65, 1, v52) == 1)
    {
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(v25, &demangling cache variable for type metadata for Constraints?);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(v26, &demangling cache variable for type metadata for Constraints?);
      outlined destroy of DocumentResourceEnvelope(v27, type metadata accessor for Constraints);
LABEL_32:
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(v50, &demangling cache variable for type metadata for (Constraints?, Constraints?));
      goto LABEL_20;
    }
    uint64_t v54 = v64;
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v53, v64, type metadata accessor for Constraints);
    char v55 = specialized static Constraints.== infix(_:_:)(v27, v54);
    outlined destroy of DocumentResourceEnvelope(v54, type metadata accessor for Constraints);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v25, &demangling cache variable for type metadata for Constraints?);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v26, &demangling cache variable for type metadata for Constraints?);
    outlined destroy of DocumentResourceEnvelope(v27, type metadata accessor for Constraints);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v50, &demangling cache variable for type metadata for Constraints?);
    if (v55) {
      goto LABEL_34;
    }
  }
LABEL_20:
  char v46 = 0;
  return v46 & 1;
}

uint64_t specialized static StreamingRequestPayload.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CompletePromptTemplateRequest(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for CompletePromptRequest(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for StreamingRequestPayload(0);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  long long v13 = (uint64_t *)((char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v27 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (StreamingRequestPayload, StreamingRequestPayload));
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (uint64_t)&v19[*(int *)(v17 + 56)];
  outlined init with copy of DocumentResourceEnvelope(a1, (uint64_t)v19, type metadata accessor for StreamingRequestPayload);
  outlined init with copy of DocumentResourceEnvelope(a2, v20, type metadata accessor for StreamingRequestPayload);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of DocumentResourceEnvelope((uint64_t)v19, (uint64_t)v13, type metadata accessor for StreamingRequestPayload);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v20, (uint64_t)v6, type metadata accessor for CompletePromptTemplateRequest);
      char v21 = specialized static CompletePromptTemplateRequest.== infix(_:_:)(v13, v6);
      outlined destroy of DocumentResourceEnvelope((uint64_t)v6, type metadata accessor for CompletePromptTemplateRequest);
      uint64_t v22 = (uint64_t)v13;
      uint64_t v23 = type metadata accessor for CompletePromptTemplateRequest;
LABEL_9:
      outlined destroy of DocumentResourceEnvelope(v22, v23);
      outlined destroy of DocumentResourceEnvelope((uint64_t)v19, type metadata accessor for StreamingRequestPayload);
      return v21 & 1;
    }
    uint64_t v24 = type metadata accessor for CompletePromptTemplateRequest;
    uint64_t v25 = (uint64_t)v13;
  }
  else
  {
    outlined init with copy of DocumentResourceEnvelope((uint64_t)v19, (uint64_t)v15, type metadata accessor for StreamingRequestPayload);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v20, (uint64_t)v9, type metadata accessor for CompletePromptRequest);
      char v21 = specialized static CompletePromptRequest.== infix(_:_:)((uint64_t)v15, (uint64_t)v9);
      outlined destroy of DocumentResourceEnvelope((uint64_t)v9, type metadata accessor for CompletePromptRequest);
      uint64_t v22 = (uint64_t)v15;
      uint64_t v23 = type metadata accessor for CompletePromptRequest;
      goto LABEL_9;
    }
    uint64_t v24 = type metadata accessor for CompletePromptRequest;
    uint64_t v25 = (uint64_t)v15;
  }
  outlined destroy of DocumentResourceEnvelope(v25, v24);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v19, &demangling cache variable for type metadata for (StreamingRequestPayload, StreamingRequestPayload));
  char v21 = 0;
  return v21 & 1;
}

BOOL specialized static CompletePromptRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Constraints(0);
  uint64_t v62 = *(void *)(v4 - 8);
  uint64_t v63 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v60 = (uint64_t)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Constraints?, Constraints?));
  MEMORY[0x270FA5388](v6);
  uint64_t v64 = (uint64_t)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v61 = (uint64_t)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  long long v13 = (char *)&v59 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v59 - v14;
  uint64_t v17 = *(void *)(a1 + 16);
  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a2 + 16);
  uint64_t v18 = *(void *)(a2 + 24);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    || (char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v20 & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(v17, v19) & 1) == 0) {
      return 0;
    }
    if ((specialized static Array<A>.== infix(_:_:)(v16, v18) & 1) == 0) {
      return 0;
    }
    long long v22 = *(_OWORD *)(a1 + 144);
    v67[6] = *(_OWORD *)(a1 + 128);
    v67[7] = v22;
    __int16 v68 = *(_WORD *)(a1 + 160);
    long long v23 = *(_OWORD *)(a1 + 80);
    v67[2] = *(_OWORD *)(a1 + 64);
    v67[3] = v23;
    long long v24 = *(_OWORD *)(a1 + 112);
    v67[4] = *(_OWORD *)(a1 + 96);
    v67[5] = v24;
    long long v25 = *(_OWORD *)(a1 + 48);
    v67[0] = *(_OWORD *)(a1 + 32);
    v67[1] = v25;
    long long v26 = *(_OWORD *)(a2 + 144);
    v65[6] = *(_OWORD *)(a2 + 128);
    v65[7] = v26;
    __int16 v66 = *(_WORD *)(a2 + 160);
    long long v27 = *(_OWORD *)(a2 + 80);
    v65[2] = *(_OWORD *)(a2 + 64);
    v65[3] = v27;
    long long v28 = *(_OWORD *)(a2 + 112);
    v65[4] = *(_OWORD *)(a2 + 96);
    v65[5] = v28;
    long long v29 = *(_OWORD *)(a2 + 48);
    v65[0] = *(_OWORD *)(a2 + 32);
    v65[1] = v29;
    if ((specialized static SamplingParametersEnvelope.== infix(_:_:)((uint64_t)v67, (uint64_t)v65) & 1) == 0) {
      return 0;
    }
    uint64_t v30 = type metadata accessor for CompletePromptRequest(0);
    outlined init with copy of Prompt.Rendering?(a1 + *(int *)(v30 + 24), (uint64_t)v15, &demangling cache variable for type metadata for Constraints?);
    long long v59 = (int *)v30;
    outlined init with copy of Prompt.Rendering?(a2 + *(int *)(v30 + 24), (uint64_t)v13, &demangling cache variable for type metadata for Constraints?);
    uint64_t v31 = v64;
    uint64_t v32 = v64 + *(int *)(v6 + 48);
    outlined init with copy of Prompt.Rendering?((uint64_t)v15, v64, &demangling cache variable for type metadata for Constraints?);
    outlined init with copy of Prompt.Rendering?((uint64_t)v13, v32, &demangling cache variable for type metadata for Constraints?);
    uint64_t v33 = v63;
    long long v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
    if (v34(v31, 1, v63) == 1)
    {
      outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v13, &demangling cache variable for type metadata for Constraints?);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v15, &demangling cache variable for type metadata for Constraints?);
      if (v34(v32, 1, v33) == 1)
      {
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(v31, &demangling cache variable for type metadata for Constraints?);
        goto LABEL_14;
      }
    }
    else
    {
      outlined init with copy of Prompt.Rendering?(v31, v61, &demangling cache variable for type metadata for Constraints?);
      if (v34(v32, 1, v33) != 1)
      {
        uint64_t v35 = v60;
        outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v32, v60, type metadata accessor for Constraints);
        uint64_t v36 = v61;
        char v37 = specialized static Constraints.== infix(_:_:)(v61, v35);
        outlined destroy of DocumentResourceEnvelope(v35, type metadata accessor for Constraints);
        outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v13, &demangling cache variable for type metadata for Constraints?);
        outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v15, &demangling cache variable for type metadata for Constraints?);
        outlined destroy of DocumentResourceEnvelope(v36, type metadata accessor for Constraints);
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(v31, &demangling cache variable for type metadata for Constraints?);
        if ((v37 & 1) == 0) {
          return 0;
        }
LABEL_14:
        long long v38 = v59;
        if ((specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + v59[7]), *(void *)(a2 + v59[7])) & 1) == 0) {
          return 0;
        }
        uint64_t v39 = v38[8];
        uint64_t v41 = *(void *)(a1 + v39);
        unint64_t v40 = *(void *)(a1 + v39 + 8);
        uint64_t v42 = (uint64_t *)(a2 + v39);
        uint64_t v44 = *v42;
        unint64_t v43 = v42[1];
        if (v40 == 3)
        {
          if (v43 == 3)
          {
LABEL_22:
            if ((specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + v38[9]), *(void *)(a2 + v38[9])) & 1) == 0) {
              return 0;
            }
            uint64_t v46 = v38[10];
            uint64_t v47 = *(void *)(a1 + v46);
            uint64_t v48 = *(void *)(a1 + v46 + 8);
            uint64_t v49 = *(void *)(a1 + v46 + 16);
            uint64_t v50 = *(void *)(a1 + v46 + 24);
            uint64_t v52 = *(void *)(a1 + v46 + 32);
            uint64_t v51 = *(void *)(a1 + v46 + 40);
            uint64_t v64 = *(void *)(a1 + v46 + 48);
            uint64_t v53 = (void *)(a2 + v46);
            uint64_t v55 = v53[2];
            uint64_t v54 = v53[3];
            uint64_t v57 = v53[4];
            uint64_t v56 = v53[5];
            uint64_t v58 = v53[6];
            if ((v47 != *v53 || v48 != v53[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              return 0;
            }
            if ((v49 != v55 || v50 != v54) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              return 0;
            }
            if (v51)
            {
              if (!v56 || (v52 != v57 || v51 != v56) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                return 0;
              }
              return (specialized static Dictionary<>.== infix(_:_:)(v64, v58) & 1) != 0;
            }
            if (!v56) {
              return (specialized static Dictionary<>.== infix(_:_:)(v64, v58) & 1) != 0;
            }
            return 0;
          }
        }
        else
        {
          *(void *)&v67[0] = v41;
          *((void *)&v67[0] + 1) = v40;
          if (v43 != 3)
          {
            *(void *)&v65[0] = v44;
            *((void *)&v65[0] + 1) = v43;
            outlined copy of FinishReason?(v41, v40);
            outlined copy of FinishReason(v41, v40);
            char v45 = specialized static FinishReason.== infix(_:_:)((uint64_t *)v67, (uint64_t *)v65);
            outlined consume of FinishReason(*(uint64_t *)&v67[0], *((unint64_t *)&v67[0] + 1));
            outlined consume of FinishReason?(v41, v40);
            if ((v45 & 1) == 0) {
              return 0;
            }
            goto LABEL_22;
          }
          outlined copy of FinishReason(v41, v40);
          outlined copy of FinishReason(v41, v40);
          outlined consume of FinishReason(v41, v40);
        }
        outlined copy of FinishReason?(v44, v43);
        outlined consume of FinishReason?(v41, v40);
        outlined consume of FinishReason?(v44, v43);
        return 0;
      }
      outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v13, &demangling cache variable for type metadata for Constraints?);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v15, &demangling cache variable for type metadata for Constraints?);
      outlined destroy of DocumentResourceEnvelope(v61, type metadata accessor for Constraints);
    }
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v31, &demangling cache variable for type metadata for (Constraints?, Constraints?));
    return 0;
  }
  return result;
}

uint64_t specialized static StreamingRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CompletePromptTemplateRequest(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v46 = (uint64_t *)((char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for CompletePromptRequest(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for StreamingRequest(0);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (uint64_t *)((char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (uint64_t *)((char *)&v45 - v14);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v45 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (StreamingRequest, StreamingRequest));
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  char v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v22 = (uint64_t *)&v21[*(int *)(v19 + 56)];
  outlined init with copy of DocumentResourceEnvelope(a1, (uint64_t)v21, type metadata accessor for StreamingRequest);
  outlined init with copy of DocumentResourceEnvelope(a2, (uint64_t)v22, type metadata accessor for StreamingRequest);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v21, (uint64_t)v15, type metadata accessor for StreamingRequest);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        long long v24 = v46;
        outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v22, (uint64_t)v46, type metadata accessor for CompletePromptTemplateRequest);
        char v25 = specialized static CompletePromptTemplateRequest.== infix(_:_:)(v15, v24);
        long long v26 = type metadata accessor for CompletePromptTemplateRequest;
        outlined destroy of DocumentResourceEnvelope((uint64_t)v24, type metadata accessor for CompletePromptTemplateRequest);
        uint64_t v27 = (uint64_t)v15;
LABEL_13:
        outlined destroy of DocumentResourceEnvelope(v27, v26);
        goto LABEL_14;
      }
      outlined destroy of DocumentResourceEnvelope((uint64_t)v15, type metadata accessor for CompletePromptTemplateRequest);
    }
    else
    {
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v21, (uint64_t)v12, type metadata accessor for StreamingRequest);
      uint64_t v28 = *v12;
      uint64_t v29 = v12[2];
      uint64_t v30 = v12[4];
      uint64_t v31 = v12[6];
      uint64_t v32 = v12[7];
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v33 = v12[5];
        uint64_t v34 = v12[3];
        uint64_t v35 = v12[1];
        uint64_t v37 = *v22;
        uint64_t v36 = v22[1];
        uint64_t v39 = v22[2];
        uint64_t v38 = v22[3];
        uint64_t v41 = v22[4];
        uint64_t v40 = v22[5];
        uint64_t v42 = v22[6];
        uint64_t v43 = v22[7];
        uint64_t v45 = v42;
        uint64_t v46 = (uint64_t *)v37;
        v48[0] = v28;
        v48[1] = v35;
        v48[2] = v29;
        v48[3] = v34;
        v48[4] = v30;
        v48[5] = v33;
        v48[6] = v31;
        v48[7] = v32;
        v47[0] = v37;
        v47[1] = v36;
        v47[2] = v39;
        v47[3] = v38;
        v47[4] = v41;
        v47[5] = v40;
        v47[6] = v42;
        v47[7] = v43;
        char v25 = specialized static RegisterDocumentRequest.== infix(_:_:)(v48, v47);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_14:
        outlined destroy of DocumentResourceEnvelope((uint64_t)v21, type metadata accessor for StreamingRequest);
        return v25 & 1;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    outlined init with copy of DocumentResourceEnvelope((uint64_t)v21, (uint64_t)v17, type metadata accessor for StreamingRequest);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v22, (uint64_t)v8, type metadata accessor for CompletePromptRequest);
      char v25 = specialized static CompletePromptRequest.== infix(_:_:)((uint64_t)v17, (uint64_t)v8);
      long long v26 = type metadata accessor for CompletePromptRequest;
      outlined destroy of DocumentResourceEnvelope((uint64_t)v8, type metadata accessor for CompletePromptRequest);
      uint64_t v27 = (uint64_t)v17;
      goto LABEL_13;
    }
    outlined destroy of DocumentResourceEnvelope((uint64_t)v17, type metadata accessor for CompletePromptRequest);
  }
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v21, &demangling cache variable for type metadata for (StreamingRequest, StreamingRequest));
  char v25 = 0;
  return v25 & 1;
}

BOOL specialized static PromptTemplateInfoEnvelope.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Locale?, Locale?));
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v32 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v32 - v18;
  if (*a1 == *a2 && a1[1] == a2[1]
    || (char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v20 & 1) != 0))
  {
    if (specialized static Dictionary<>.== infix(_:_:)(a1[2], a2[2]))
    {
      uint64_t v33 = v7;
      uint64_t v22 = v5;
      uint64_t v23 = type metadata accessor for PromptTemplateInfoEnvelope(0);
      outlined init with copy of Prompt.Rendering?((uint64_t)a1 + *(int *)(v23 + 24), (uint64_t)v19, &demangling cache variable for type metadata for Locale?);
      uint64_t v24 = *(int *)(v23 + 24);
      uint64_t v25 = v22;
      outlined init with copy of Prompt.Rendering?((uint64_t)a2 + v24, (uint64_t)v17, &demangling cache variable for type metadata for Locale?);
      uint64_t v26 = (uint64_t)&v10[*(int *)(v8 + 48)];
      outlined init with copy of Prompt.Rendering?((uint64_t)v19, (uint64_t)v10, &demangling cache variable for type metadata for Locale?);
      outlined init with copy of Prompt.Rendering?((uint64_t)v17, v26, &demangling cache variable for type metadata for Locale?);
      uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
      if (v27((uint64_t)v10, 1, v4) == 1)
      {
        outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v17, &demangling cache variable for type metadata for Locale?);
        outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v19, &demangling cache variable for type metadata for Locale?);
        if (v27(v26, 1, v4) == 1)
        {
          outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v10, &demangling cache variable for type metadata for Locale?);
          return 1;
        }
      }
      else
      {
        outlined init with copy of Prompt.Rendering?((uint64_t)v10, (uint64_t)v14, &demangling cache variable for type metadata for Locale?);
        if (v27(v26, 1, v4) != 1)
        {
          uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 32);
          uint64_t v29 = v33;
          v28(v33, v26, v4);
          lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
          char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v31 = *(void (**)(char *, uint64_t))(v25 + 8);
          v31(v29, v4);
          outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v17, &demangling cache variable for type metadata for Locale?);
          outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v19, &demangling cache variable for type metadata for Locale?);
          v31(v14, v4);
          outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v10, &demangling cache variable for type metadata for Locale?);
          return (v30 & 1) != 0;
        }
        outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v17, &demangling cache variable for type metadata for Locale?);
        outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v19, &demangling cache variable for type metadata for Locale?);
        (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v4);
      }
      outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v10, &demangling cache variable for type metadata for (Locale?, Locale?));
    }
    return 0;
  }
  return result;
}

BOOL specialized static CountTokensPromptTemplateRequest.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v10 = a2[2];
  uint64_t v11 = a2[3];
  if (!v4)
  {
    if (!v8) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (!v8)
  {
LABEL_12:
    outlined copy of PromptEnvelope?(*a1, v4);
    outlined copy of PromptEnvelope?(v9, v8);
    outlined consume of PromptEnvelope?(v5, v4);
    uint64_t v14 = v9;
    uint64_t v15 = v8;
LABEL_28:
    outlined consume of PromptEnvelope?(v14, v15);
    return 0;
  }
  BOOL v12 = v5 == v9 && v4 == v8;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    outlined copy of PromptEnvelope?(v5, v4);
    outlined copy of PromptEnvelope?(v5, v4);
    outlined copy of PromptEnvelope?(v9, v8);
    goto LABEL_27;
  }
  outlined copy of PromptEnvelope?(v5, v4);
  outlined copy of PromptEnvelope?(v5, v4);
  outlined copy of PromptEnvelope?(v9, v8);
  if ((specialized static Array<A>.== infix(_:_:)(v7, v10) & 1) == 0)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = v5;
    uint64_t v15 = v4;
    goto LABEL_28;
  }
  char v13 = specialized static Array<A>.== infix(_:_:)(v6, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of PromptEnvelope?(v5, v4);
  if ((v13 & 1) == 0) {
    return 0;
  }
LABEL_13:
  uint64_t v16 = type metadata accessor for CountTokensPromptTemplateRequest(0);
  if (!specialized static PromptTemplateInfoEnvelope.== infix(_:_:)((uint64_t *)((char *)a1 + *(int *)(v16 + 20)), (uint64_t *)((char *)a2 + *(int *)(v16 + 20))))return 0; {
  uint64_t v17 = *(int *)(v16 + 24);
  }
  uint64_t v18 = (uint64_t *)((char *)a1 + v17);
  uint64_t v19 = *(uint64_t *)((char *)a1 + v17);
  uint64_t v20 = *(uint64_t *)((char *)a1 + v17 + 8);
  uint64_t v21 = *(uint64_t *)((char *)a1 + v17 + 16);
  uint64_t v22 = *(uint64_t *)((char *)a1 + v17 + 24);
  uint64_t v24 = v18[4];
  uint64_t v23 = v18[5];
  uint64_t v25 = v18[6];
  uint64_t v26 = (uint64_t *)((char *)a2 + v17);
  uint64_t v27 = v26[2];
  uint64_t v28 = v26[3];
  uint64_t v30 = v26[4];
  uint64_t v29 = v26[5];
  uint64_t v31 = v26[6];
  if ((v19 != *v26 || v20 != v26[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  if ((v21 != v27 || v22 != v28) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  if (!v23)
  {
    if (!v29) {
      return (specialized static Dictionary<>.== infix(_:_:)(v25, v31) & 1) != 0;
    }
    return 0;
  }
  if (!v29 || (v24 != v30 || v23 != v29) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  return (specialized static Dictionary<>.== infix(_:_:)(v25, v31) & 1) != 0;
}

uint64_t specialized static RequestPayload.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v74 = a2;
  uint64_t v3 = type metadata accessor for CompletePromptTemplateRequest(0);
  MEMORY[0x270FA5388](v3 - 8);
  long long v73 = (void *)((char *)v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for CompletePromptRequest(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CountTokensPromptTemplateRequest(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (void *)((char *)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for RequestPayload(0);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (void *)((char *)v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)v60 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (void *)((char *)v60 - v19);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (void *)((char *)v60 - v21);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RequestPayload, RequestPayload));
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v26 = (void *)((char *)v60 + *(int *)(v24 + 56) - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = a1;
  uint64_t v28 = (char *)v60 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentResourceEnvelope(v27, (uint64_t)v28, type metadata accessor for RequestPayload);
  outlined init with copy of DocumentResourceEnvelope(v74, (uint64_t)v26, type metadata accessor for RequestPayload);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v28, (uint64_t)v20, type metadata accessor for RequestPayload);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v26, (uint64_t)v10, type metadata accessor for CountTokensPromptTemplateRequest);
        char v38 = specialized static CountTokensPromptTemplateRequest.== infix(_:_:)(v20, v10);
        outlined destroy of DocumentResourceEnvelope((uint64_t)v10, type metadata accessor for CountTokensPromptTemplateRequest);
        uint64_t v39 = (uint64_t)v20;
        uint64_t v40 = type metadata accessor for CountTokensPromptTemplateRequest;
        goto LABEL_11;
      }
      uint64_t v43 = type metadata accessor for CountTokensPromptTemplateRequest;
      uint64_t v44 = (uint64_t)v20;
      goto LABEL_15;
    case 2u:
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v28, (uint64_t)v17, type metadata accessor for RequestPayload);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v26, (uint64_t)v7, type metadata accessor for CompletePromptRequest);
        char v38 = specialized static CompletePromptRequest.== infix(_:_:)((uint64_t)v17, (uint64_t)v7);
        uint64_t v41 = type metadata accessor for CompletePromptRequest;
        outlined destroy of DocumentResourceEnvelope((uint64_t)v7, type metadata accessor for CompletePromptRequest);
        uint64_t v39 = (uint64_t)v17;
        goto LABEL_10;
      }
      uint64_t v43 = type metadata accessor for CompletePromptRequest;
      uint64_t v44 = (uint64_t)v17;
      goto LABEL_15;
    case 3u:
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v28, (uint64_t)v14, type metadata accessor for RequestPayload);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v42 = v73;
        outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v26, (uint64_t)v73, type metadata accessor for CompletePromptTemplateRequest);
        char v38 = specialized static CompletePromptTemplateRequest.== infix(_:_:)(v14, v42);
        uint64_t v41 = type metadata accessor for CompletePromptTemplateRequest;
        outlined destroy of DocumentResourceEnvelope((uint64_t)v42, type metadata accessor for CompletePromptTemplateRequest);
        uint64_t v39 = (uint64_t)v14;
LABEL_10:
        uint64_t v40 = v41;
LABEL_11:
        outlined destroy of DocumentResourceEnvelope(v39, v40);
        outlined destroy of DocumentResourceEnvelope((uint64_t)v28, type metadata accessor for RequestPayload);
        return v38 & 1;
      }
      uint64_t v43 = type metadata accessor for CompletePromptTemplateRequest;
      uint64_t v44 = (uint64_t)v14;
LABEL_15:
      outlined destroy of DocumentResourceEnvelope(v44, v43);
      goto LABEL_16;
    default:
      long long v72 = v28;
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v28, (uint64_t)v22, type metadata accessor for RequestPayload);
      uint64_t v71 = *v22;
      uint64_t v29 = v22[1];
      uint64_t v30 = v22[3];
      long long v73 = (uint64_t *)v22[2];
      uint64_t v74 = v29;
      uint64_t v32 = v22[4];
      uint64_t v31 = v22[5];
      uint64_t v34 = v22[6];
      uint64_t v33 = v22[7];
      uint64_t v35 = v22[8];
      uint64_t v36 = v22[9];
      uint64_t v37 = v22[10];
      if (swift_getEnumCaseMultiPayload())
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v28 = v72;
LABEL_16:
        outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v28, &demangling cache variable for type metadata for (RequestPayload, RequestPayload));
        goto LABEL_17;
      }
      uint64_t v62 = v34;
      uint64_t v63 = v32;
      uint64_t v61 = v35;
      uint64_t v67 = v33;
      uint64_t v68 = v31;
      uint64_t v46 = (uint64_t)v73;
      uint64_t v65 = v36;
      uint64_t v47 = *v26;
      uint64_t v48 = v26[1];
      uint64_t v50 = v26[2];
      uint64_t v49 = v26[3];
      uint64_t v51 = v26[4];
      uint64_t v69 = v26[5];
      uint64_t v70 = v49;
      uint64_t v52 = v26[6];
      uint64_t v66 = v26[7];
      uint64_t v53 = v26[8];
      uint64_t v64 = v26[9];
      uint64_t v54 = v26[10];
      BOOL v55 = v71 == v47 && v74 == v48;
      if (!v55 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_37;
      }
      uint64_t v71 = v48;
      if ((specialized static Array<A>.== infix(_:_:)(v46, v50) & 1) == 0) {
        goto LABEL_37;
      }
      v60[1] = v50;
      char v56 = specialized static Array<A>.== infix(_:_:)(v30, v70);
      uint64_t v57 = v67;
      if ((v56 & 1) == 0) {
        goto LABEL_37;
      }
      if ((v63 != v51 || v68 != v69) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_37;
      }
      uint64_t v63 = v53;
      if ((v62 != v52 || v57 != v66) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_37;
      }
      if (v65)
      {
        if (!v64 || (v61 != v63 || v65 != v64) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_37;
        }
      }
      else if (v64)
      {
LABEL_37:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v58 = (uint64_t)v72;
LABEL_38:
        outlined destroy of DocumentResourceEnvelope(v58, type metadata accessor for RequestPayload);
LABEL_17:
        char v38 = 0;
        return v38 & 1;
      }
      char v59 = specialized static Dictionary<>.== infix(_:_:)(v37, v54);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v58 = (uint64_t)v72;
      if ((v59 & 1) == 0) {
        goto LABEL_38;
      }
      outlined destroy of DocumentResourceEnvelope((uint64_t)v72, type metadata accessor for RequestPayload);
      char v38 = 1;
      return v38 & 1;
  }
}

BOOL specialized static PromptEnvelope.DelimiterEnvelope.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Locale?, Locale?));
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v33 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v33 - v18;
  if (*a1 == *a2 && a1[1] == a2[1]
    || (char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v20 & 1) != 0))
  {
    uint64_t v22 = a1[3];
    uint64_t v23 = a2[3];
    if (v22)
    {
      if (!v23) {
        return 0;
      }
      if (a1[2] != a2[2] || v22 != v23)
      {
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL result = 0;
        if ((v24 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v23)
    {
      return 0;
    }
    if (a1[4] != a2[4] || a1[5] != a2[5]) {
      return 0;
    }
    uint64_t v25 = type metadata accessor for PromptEnvelope.DelimiterEnvelope(0);
    uint64_t v34 = v5;
    uint64_t v26 = v25;
    outlined init with copy of Prompt.Rendering?((uint64_t)a1 + *(int *)(v25 + 32), (uint64_t)v19, &demangling cache variable for type metadata for Locale?);
    uint64_t v27 = *(int *)(v26 + 32);
    uint64_t v28 = v34;
    outlined init with copy of Prompt.Rendering?((uint64_t)a2 + v27, (uint64_t)v17, &demangling cache variable for type metadata for Locale?);
    uint64_t v29 = (uint64_t)&v10[*(int *)(v8 + 48)];
    outlined init with copy of Prompt.Rendering?((uint64_t)v19, (uint64_t)v10, &demangling cache variable for type metadata for Locale?);
    outlined init with copy of Prompt.Rendering?((uint64_t)v17, v29, &demangling cache variable for type metadata for Locale?);
    uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
    if (v30((uint64_t)v10, 1, v4) == 1)
    {
      outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v17, &demangling cache variable for type metadata for Locale?);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v19, &demangling cache variable for type metadata for Locale?);
      if (v30(v29, 1, v4) == 1)
      {
        outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v10, &demangling cache variable for type metadata for Locale?);
        return 1;
      }
      goto LABEL_18;
    }
    outlined init with copy of Prompt.Rendering?((uint64_t)v10, (uint64_t)v14, &demangling cache variable for type metadata for Locale?);
    if (v30(v29, 1, v4) == 1)
    {
      outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v17, &demangling cache variable for type metadata for Locale?);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v19, &demangling cache variable for type metadata for Locale?);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v4);
LABEL_18:
      outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v10, &demangling cache variable for type metadata for (Locale?, Locale?));
      return 0;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(v7, v29, v4);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v32 = *(void (**)(char *, uint64_t))(v28 + 8);
    v32(v7, v4);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v17, &demangling cache variable for type metadata for Locale?);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v19, &demangling cache variable for type metadata for Locale?);
    v32(v14, v4);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v10, &demangling cache variable for type metadata for Locale?);
    return (v31 & 1) != 0;
  }
  return result;
}

BOOL specialized static CountTokensRequest.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  uint64_t v17 = a1[8];
  uint64_t v15 = a1[10];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v11 = a2[6];
  uint64_t v20 = a2[7];
  uint64_t v21 = a1[7];
  uint64_t v16 = a2[8];
  uint64_t v18 = a1[9];
  uint64_t v19 = a2[9];
  uint64_t v14 = a2[10];
  if (*a1 == *a2 && a1[1] == a2[1]
    || (char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v12 & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(v2, v7) & 1) == 0
      || (specialized static Array<A>.== infix(_:_:)(v4, v8) & 1) == 0
      || (v3 != v9 || v5 != v10) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      || (v6 != v11 || v21 != v20) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      return 0;
    }
    if (v18)
    {
      if (!v19 || (v17 != v16 || v18 != v19) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        return 0;
      }
    }
    else if (v19)
    {
      return 0;
    }
    return (specialized static Dictionary<>.== infix(_:_:)(v15, v14) & 1) != 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptEnvelope and conformance PromptEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope and conformance PromptEnvelope;
  if (!lazy protocol witness table cache variable for type PromptEnvelope and conformance PromptEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope and conformance PromptEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope and conformance PromptEnvelope;
  if (!lazy protocol witness table cache variable for type PromptEnvelope and conformance PromptEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope and conformance PromptEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope and conformance PromptEnvelope;
  if (!lazy protocol witness table cache variable for type PromptEnvelope and conformance PromptEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope and conformance PromptEnvelope);
  }
  return result;
}

uint64_t specialized static OneShotRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v58 = a2;
  uint64_t v57 = a1;
  uint64_t v2 = type metadata accessor for CompletePromptTemplateRequest(0);
  MEMORY[0x270FA5388](v2 - 8);
  char v56 = (uint64_t *)((char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = type metadata accessor for CompletePromptRequest(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CountTokensPromptTemplateRequest(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (uint64_t *)((char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for OneShotRequest(0);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (uint64_t *)((char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v52 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (uint64_t *)((char *)&v52 - v18);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (uint64_t *)((char *)&v52 - v20);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (OneShotRequest, OneShotRequest));
  uint64_t v23 = MEMORY[0x270FA5388](v22 - 8);
  uint64_t v25 = (char *)&v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = &v25[*(int *)(v23 + 56)];
  outlined init with copy of DocumentResourceEnvelope(v57, (uint64_t)v25, type metadata accessor for OneShotRequest);
  outlined init with copy of DocumentResourceEnvelope(v58, (uint64_t)v26, type metadata accessor for OneShotRequest);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v25, (uint64_t)v19, type metadata accessor for OneShotRequest);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v26, (uint64_t)v9, type metadata accessor for CountTokensPromptTemplateRequest);
        char v33 = specialized static CountTokensPromptTemplateRequest.== infix(_:_:)(v19, v9);
        outlined destroy of DocumentResourceEnvelope((uint64_t)v9, type metadata accessor for CountTokensPromptTemplateRequest);
        uint64_t v34 = (uint64_t)v19;
        uint64_t v35 = type metadata accessor for CountTokensPromptTemplateRequest;
        goto LABEL_11;
      }
      char v38 = type metadata accessor for CountTokensPromptTemplateRequest;
      uint64_t v39 = (uint64_t)v19;
      goto LABEL_15;
    case 2u:
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v25, (uint64_t)v16, type metadata accessor for OneShotRequest);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v26, (uint64_t)v6, type metadata accessor for CompletePromptRequest);
        char v33 = specialized static CompletePromptRequest.== infix(_:_:)((uint64_t)v16, (uint64_t)v6);
        uint64_t v36 = type metadata accessor for CompletePromptRequest;
        outlined destroy of DocumentResourceEnvelope((uint64_t)v6, type metadata accessor for CompletePromptRequest);
        uint64_t v34 = (uint64_t)v16;
        goto LABEL_10;
      }
      char v38 = type metadata accessor for CompletePromptRequest;
      uint64_t v39 = (uint64_t)v16;
      goto LABEL_15;
    case 3u:
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v25, (uint64_t)v13, type metadata accessor for OneShotRequest);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v37 = v56;
        outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v26, (uint64_t)v56, type metadata accessor for CompletePromptTemplateRequest);
        char v33 = specialized static CompletePromptTemplateRequest.== infix(_:_:)(v13, v37);
        uint64_t v36 = type metadata accessor for CompletePromptTemplateRequest;
        outlined destroy of DocumentResourceEnvelope((uint64_t)v37, type metadata accessor for CompletePromptTemplateRequest);
        uint64_t v34 = (uint64_t)v13;
LABEL_10:
        uint64_t v35 = v36;
LABEL_11:
        outlined destroy of DocumentResourceEnvelope(v34, v35);
        goto LABEL_18;
      }
      char v38 = type metadata accessor for CompletePromptTemplateRequest;
      uint64_t v39 = (uint64_t)v13;
LABEL_15:
      outlined destroy of DocumentResourceEnvelope(v39, v38);
      goto LABEL_16;
    default:
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v25, (uint64_t)v21, type metadata accessor for OneShotRequest);
      uint64_t v28 = v21[1];
      uint64_t v27 = v21[2];
      uint64_t v29 = v21[3];
      uint64_t v30 = v21[5];
      uint64_t v31 = v21[7];
      uint64_t v32 = v21[10];
      uint64_t v58 = v21[9];
      if (swift_getEnumCaseMultiPayload())
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_16:
        outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v25, &demangling cache variable for type metadata for (OneShotRequest, OneShotRequest));
        char v33 = 0;
      }
      else
      {
        uint64_t v40 = v21[8];
        uint64_t v41 = v21[6];
        uint64_t v42 = v21[4];
        uint64_t v43 = *v21;
        uint64_t v44 = *(void *)v26;
        uint64_t v57 = *((void *)v26 + 1);
        uint64_t v45 = *((void *)v26 + 3);
        uint64_t v55 = *((void *)v26 + 2);
        uint64_t v54 = v45;
        uint64_t v46 = *((void *)v26 + 4);
        uint64_t v53 = *((void *)v26 + 5);
        uint64_t v47 = *((void *)v26 + 6);
        uint64_t v48 = *((void *)v26 + 7);
        uint64_t v49 = *((void *)v26 + 8);
        char v56 = (uint64_t *)*((void *)v26 + 9);
        uint64_t v50 = *((void *)v26 + 10);
        v60[0] = v43;
        v60[1] = v28;
        void v60[2] = v27;
        v60[3] = v29;
        v60[4] = v42;
        v60[5] = v30;
        v60[6] = v41;
        v60[7] = v31;
        v60[8] = v40;
        v60[9] = v58;
        v60[10] = v32;
        v59[0] = v44;
        v59[1] = v57;
        v59[2] = v55;
        v59[3] = v45;
        v59[4] = v46;
        v59[5] = v53;
        v59[6] = v47;
        v59[7] = v48;
        v59[8] = v49;
        v59[9] = v56;
        v59[10] = v50;
        char v33 = specialized static CountTokensRequest.== infix(_:_:)(v60, v59);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_18:
        outlined destroy of DocumentResourceEnvelope((uint64_t)v25, type metadata accessor for OneShotRequest);
      }
      return v33 & 1;
  }
}

uint64_t specialized ModelInformationEnvelope.init(sealing:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  int64_t v2 = *(void *)(*a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v15 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v15;
    uint64_t v4 = (unint64_t *)(v1 + 72);
    do
    {
      uint64_t v5 = *(v4 - 5);
      uint64_t v6 = *(v4 - 4);
      uint64_t v7 = *(v4 - 2);
      uint64_t v14 = *(v4 - 3);
      uint64_t v8 = *(v4 - 1);
      unint64_t v9 = *v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v8, v9);
      unint64_t v11 = *(void *)(v15 + 16);
      unint64_t v10 = *(void *)(v15 + 24);
      if (v11 >= v10 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      }
      v4 += 6;
      *(void *)(v15 + 16) = v11 + 1;
      uint64_t v12 = (void *)(v15 + 48 * v11);
      v12[4] = v5;
      v12[5] = v6;
      v12[6] = v14;
      v12[7] = v7;
      v12[8] = v8;
      v12[9] = v9;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t specialized PromptRenderingEnvelope.init(sealing:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Prompt.Rendering.Source();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Prompt.Rendering.source.getter();
  uint64_t v31 = Prompt.string.getter();
  uint64_t v9 = v8;
  uint64_t v30 = Prompt.Rendering.Source.version.getter();
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = Prompt.Rendering.segments.getter();
  swift_bridgeObjectRetain();
  uint64_t v29 = Prompt.Rendering.renderedString.getter();
  uint64_t v14 = v13;
  swift_bridgeObjectRetain();
  uint64_t v28 = Prompt.Rendering.originalPrompt.getter();
  uint64_t v16 = v15;
  swift_bridgeObjectRetain();
  uint64_t v17 = Prompt.Rendering.tokenIDs.getter();
  swift_bridgeObjectRetain();
  uint64_t v18 = Prompt.Rendering.userInfo.getter();
  swift_bridgeObjectRetain();
  uint64_t v27 = Prompt.Rendering.detokenizedString.getter();
  uint64_t v20 = v19;
  uint64_t v21 = type metadata accessor for Prompt.Rendering();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(a1, v21);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease_n();
  *a2 = v31;
  a2[1] = v9;
  a2[2] = v30;
  a2[3] = v11;
  uint64_t v23 = v29;
  a2[4] = v12;
  a2[5] = v23;
  uint64_t v24 = v28;
  a2[6] = v14;
  a2[7] = v24;
  a2[8] = v16;
  a2[9] = v17;
  uint64_t v25 = v27;
  a2[10] = v18;
  a2[11] = v25;
  a2[12] = v20;
  return result;
}

unint64_t lazy protocol witness table accessor for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope);
  }
  return result;
}

uint64_t type metadata accessor for CountTokensPromptTemplateRequest(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for CountTokensPromptTemplateRequest);
}

uint64_t type metadata accessor for PromptTemplateInfoEnvelope(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for PromptTemplateInfoEnvelope);
}

uint64_t outlined copy of PromptEnvelope?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of PromptEnvelope?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CountTokensPromptTemplateRequest.CodingKeys and conformance CountTokensPromptTemplateRequest.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CountTokensPromptTemplateRequest.CodingKeys and conformance CountTokensPromptTemplateRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CountTokensPromptTemplateRequest.CodingKeys and conformance CountTokensPromptTemplateRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensPromptTemplateRequest.CodingKeys and conformance CountTokensPromptTemplateRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CountTokensPromptTemplateRequest.CodingKeys and conformance CountTokensPromptTemplateRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CountTokensPromptTemplateRequest.CodingKeys and conformance CountTokensPromptTemplateRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensPromptTemplateRequest.CodingKeys and conformance CountTokensPromptTemplateRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CountTokensPromptTemplateRequest.CodingKeys and conformance CountTokensPromptTemplateRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CountTokensPromptTemplateRequest.CodingKeys and conformance CountTokensPromptTemplateRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensPromptTemplateRequest.CodingKeys and conformance CountTokensPromptTemplateRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CountTokensPromptTemplateRequest.CodingKeys and conformance CountTokensPromptTemplateRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CountTokensPromptTemplateRequest.CodingKeys and conformance CountTokensPromptTemplateRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensPromptTemplateRequest.CodingKeys and conformance CountTokensPromptTemplateRequest.CodingKeys);
  }
  return result;
}

uint64_t outlined destroy of DocumentResourceEnvelope(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t specialized StreamingRequest.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6574656C706D6F63 && a2 == 0xEE0074706D6F7250;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000025F92C860 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000025F92C8A0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized RegisterDocumentRequest.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E656D75636F645FLL && a2 == 0xEA00000000007374;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7461646174656D5FLL && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized PromptEnvelope.init(sealing:)(uint64_t a1)
{
  uint64_t v132 = type metadata accessor for Prompt.ImageAttachment.Format();
  uint64_t v2 = *(void *)(v132 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v132);
  uint64_t v107 = (char *)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  unint64_t v131 = (char *)&v105 - v6;
  MEMORY[0x270FA5388](v5);
  unint64_t v130 = (char *)&v105 - v7;
  uint64_t v144 = type metadata accessor for Prompt.ImageAttachment();
  uint64_t v8 = *(char **)(v144 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v144);
  unint64_t v143 = (char *)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v142 = (char *)&v105 - v11;
  uint64_t v12 = type metadata accessor for Prompt.AttachmentContent();
  uint64_t v110 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v106 = (char *)&v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v129 = (char *)&v105 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v141 = (char *)&v105 - v17;
  uint64_t v140 = type metadata accessor for Prompt.Attachment();
  uint64_t v134 = *(void *)(v140 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v140);
  uint64_t v139 = (char *)&v105 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v138 = (char *)&v105 - v20;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v128 = (char *)&v105 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = type metadata accessor for Prompt.SpecialToken();
  uint64_t v23 = *(void *)(v127 - 8);
  MEMORY[0x270FA5388](v127);
  uint64_t v122 = (void (**)(char *, char *, uint64_t))((char *)&v105 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v126 = (uint64_t (**)(void, void))type metadata accessor for Prompt.Delimiter();
  uint64_t v25 = (uint64_t)*(v126 - 1);
  uint64_t v26 = MEMORY[0x270FA5388](v126);
  uint64_t v125 = (char *)&v105 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  v137 = (char *)&v105 - v28;
  uint64_t v124 = type metadata accessor for PromptEnvelope.DelimiterEnvelope(0);
  uint64_t v123 = *(void *)(v124 - 8);
  uint64_t v29 = MEMORY[0x270FA5388](v124);
  uint64_t v121 = (uint64_t *)((char *)&v105 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)&v105 - v31;
  uint64_t v112 = Prompt.string.getter();
  uint64_t v111 = v33;
  uint64_t v34 = Prompt.delimiters.getter();
  int64_t v35 = *(void *)(v34 + 16);
  uint64_t v113 = a1;
  uint64_t v133 = v12;
  if (v35)
  {
    uint64_t v109 = (uint64_t)v8;
    uint64_t v114 = v2;
    uint64_t v145 = MEMORY[0x263F8EE78];
    uint64_t v36 = v34;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35, 0);
    char v38 = *(void (**)(void))(v25 + 16);
    uint64_t v37 = v25 + 16;
    uint64_t v118 = v38;
    unint64_t v39 = (*(unsigned __int8 *)(v37 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 64);
    uint64_t v108 = v36;
    uint64_t v40 = (char *)(v36 + v39);
    uint64_t v117 = *(char **)(v37 + 56);
    v116 = (void (**)(char *, uint64_t))(v23 + 8);
    uint64_t v120 = (uint64_t (**)(char *, uint64_t))v37;
    long long v115 = (void (**)(char *, uint64_t))(v37 - 8);
    uint64_t v119 = v32;
    uint64_t v41 = v126;
    uint64_t v42 = v121;
    uint64_t v43 = (void (**)(char *, uint64_t))(v23 + 8);
    do
    {
      unint64_t v135 = v40;
      int64_t v136 = v35;
      uint64_t v44 = v137;
      uint64_t v45 = (void (*)(char *, char *, uint64_t (**)(void, void)))v118;
      v118(v137);
      uint64_t v46 = v125;
      v45(v125, v44, v41);
      v42[4] = Prompt.Delimiter.position.getter();
      uint64_t v47 = (char *)v122;
      Prompt.Delimiter.token.getter();
      uint64_t v48 = Prompt.SpecialToken.identifier.getter();
      uint64_t v50 = v49;
      uint64_t v51 = *v43;
      uint64_t v52 = v127;
      (*v43)(v47, v127);
      *uint64_t v42 = v48;
      v42[1] = v50;
      Prompt.Delimiter.token.getter();
      uint64_t v53 = Prompt.SpecialToken.instance.getter();
      uint64_t v55 = v54;
      v51(v47, v52);
      v42[2] = v53;
      v42[3] = v55;
      v42[5] = Prompt.Delimiter.priority.getter();
      Prompt.Delimiter.token.getter();
      uint64_t v56 = (uint64_t)v128;
      Prompt.SpecialToken.locale.getter();
      uint64_t v57 = *v115;
      uint64_t v58 = v46;
      uint64_t v59 = (uint64_t)v119;
      (*v115)(v58, (uint64_t)v41);
      v51(v47, v52);
      outlined init with take of Locale?(v56, (uint64_t)v42 + *(int *)(v124 + 32), &demangling cache variable for type metadata for Locale?);
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v42, v59, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
      v57(v137, (uint64_t)v41);
      uint64_t v60 = v145;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v60 + 16) + 1, 1);
        uint64_t v60 = v145;
      }
      unint64_t v62 = *(void *)(v60 + 16);
      unint64_t v61 = *(void *)(v60 + 24);
      int64_t v63 = v136;
      if (v62 >= v61 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1);
        uint64_t v60 = v145;
      }
      *(void *)(v60 + 16) = v62 + 1;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v59, v60+ ((*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80))+ *(void *)(v123 + 72) * v62, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
      uint64_t v40 = &v117[(void)v135];
      int64_t v35 = v63 - 1;
    }
    while (v35);
    swift_bridgeObjectRelease();
    a1 = v113;
    uint64_t v12 = v133;
    uint64_t v2 = v114;
    uint64_t v8 = (char *)v109;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v64 = Prompt.attachments.getter();
  int64_t v65 = *(void *)(v64 + 16);
  if (v65)
  {
    uint64_t v147 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v65, 0);
    unint64_t v135 = *(char **)(v134 + 16);
    unint64_t v66 = (*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80);
    uint64_t v109 = v64;
    unint64_t v67 = v64 + v66;
    uint64_t v127 = *(void *)(v134 + 72);
    uint64_t v128 = (char *)(v110 + 16);
    uint64_t v126 = (uint64_t (**)(void, void))(v110 + 88);
    LODWORD(v125) = *MEMORY[0x263F7FB68];
    uint64_t v123 = v110 + 96;
    uint64_t v122 = (void (**)(char *, char *, uint64_t))(v8 + 32);
    uint64_t v121 = (uint64_t *)(v8 + 16);
    uint64_t v124 = v2 + 16;
    uint64_t v120 = (uint64_t (**)(char *, uint64_t))(v2 + 88);
    int v68 = *MEMORY[0x263F7FB50];
    uint64_t v118 = (void (*)(void))(v2 + 8);
    LODWORD(v114) = *MEMORY[0x263F7FB48];
    uint64_t v117 = v8 + 8;
    v116 = (void (**)(char *, uint64_t))(v110 + 8);
    v134 += 16;
    long long v115 = (void (**)(char *, uint64_t))(v134 - 8);
    LODWORD(v119) = v68;
    while (1)
    {
      uint64_t v69 = v138;
      uint64_t v70 = v140;
      uint64_t v71 = v135;
      ((void (*)(char *, unint64_t, uint64_t))v135)(v138, v67, v140);
      ((void (*)(char *, char *, uint64_t))v71)(v139, v69, v70);
      long long v72 = v141;
      Prompt.Attachment.content.getter();
      long long v73 = v129;
      uint64_t v74 = *(void (**)(char *, char *, uint64_t))v128;
      (*(void (**)(char *, char *, uint64_t))v128)(v129, v72, v12);
      int v75 = (*v126)(v73, v12);
      if (v75 != v125)
      {
        v74(v106, v141, v12);
        uint64_t v145 = 0;
        unint64_t v146 = 0xE000000000000000;
        _StringGuts.grow(_:)(30);
        v103._countAndFlagsBits = 0xD00000000000001CLL;
        v103._object = (void *)0x800000025F92CDB0;
        String.append(_:)(v103);
        _print_unlocked<A, B>(_:_:)();
        goto LABEL_24;
      }
      (*(void (**)(char *, uint64_t))v123)(v73, v12);
      long long v76 = v142;
      uint64_t v77 = v144;
      (*v122)(v142, v73, v144);
      ((void (*)(char *, char *, uint64_t))*v121)(v143, v76, v77);
      __int16 v78 = v130;
      Prompt.ImageAttachment.format.getter();
      long long v79 = *(void (**)(char *, char *, uint64_t))v124;
      long long v80 = v131;
      uint64_t v81 = v132;
      (*(void (**)(char *, char *, uint64_t))v124)(v131, v78, v132);
      int v82 = (*v120)(v80, v81);
      if (v82 != v68 && v82 != v114) {
        break;
      }
      BOOL v83 = v82 != v68;
      (*(void (**)(char *, uint64_t))v118)(v78, v81);
      LOBYTE(v145) = v83;
      long long v84 = v143;
      uint64_t v85 = Prompt.ImageAttachment.data.getter();
      int64_t v136 = v86;
      v137 = (char *)v85;
      __int16 v87 = *(void (**)(char *, uint64_t))v117;
      uint64_t v88 = v144;
      (*(void (**)(char *, uint64_t))v117)(v84, v144);
      LOBYTE(v84) = v145;
      (*v116)(v141, v12);
      v87(v142, v88);
      LOBYTE(v145) = (_BYTE)v84;
      uint64_t v89 = v139;
      uint64_t v90 = Prompt.Attachment.position.getter();
      uint64_t v91 = Prompt.Attachment.priority.getter();
      BOOL v92 = *v115;
      char v93 = v89;
      uint64_t v94 = v140;
      (*v115)(v93, v140);
      char v95 = v145;
      v92(v138, v94);
      uint64_t v96 = v147;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v96 + 16) + 1, 1);
        uint64_t v96 = v147;
      }
      unint64_t v98 = *(void *)(v96 + 16);
      unint64_t v97 = *(void *)(v96 + 24);
      if (v98 >= v97 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v97 > 1, v98 + 1, 1);
        uint64_t v96 = v147;
      }
      *(void *)(v96 + 16) = v98 + 1;
      uint64_t v99 = v96 + 40 * v98;
      *(unsigned char *)(v99 + 32) = v95;
      int64_t v100 = v136;
      *(void *)(v99 + 40) = v137;
      *(void *)(v99 + 48) = v100;
      *(void *)(v99 + 56) = v90;
      *(void *)(v99 + 64) = v91;
      v67 += v127;
      --v65;
      uint64_t v12 = v133;
      int v68 = (int)v119;
      if (!v65)
      {
        a1 = v113;
        goto LABEL_21;
      }
    }
    v79(v107, v78, v81);
    uint64_t v145 = 0;
    unint64_t v146 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    v104._object = (void *)0x800000025F92CDD0;
    v104._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v104);
    _print_unlocked<A, B>(_:_:)();
LABEL_24:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_21:
    uint64_t v101 = type metadata accessor for Prompt();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v101 - 8) + 8))(a1, v101);
    swift_bridgeObjectRelease();
    return v112;
  }
  return result;
}

uint64_t type metadata accessor for CompletePromptTemplateRequest(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for CompletePromptTemplateRequest);
}

uint64_t type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
}

uint64_t type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for ToolDescriptionEnvelope.ToolTypeEnvelope);
}

uint64_t type metadata accessor for ToolType(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for ToolType);
}

uint64_t type metadata accessor for ToolDescriptionEnvelope(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for ToolDescriptionEnvelope);
}

uint64_t type metadata accessor for ToolDescription(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for ToolDescription);
}

uint64_t type metadata accessor for FunctionDescription(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for FunctionDescription);
}

uint64_t type metadata accessor for Constraints(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for Constraints);
}

unint64_t lazy protocol witness table accessor for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope;
  if (!lazy protocol witness table cache variable for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope;
  if (!lazy protocol witness table cache variable for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope;
  if (!lazy protocol witness table cache variable for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ToolDescriptionEnvelope] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ToolDescriptionEnvelope] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [ToolDescriptionEnvelope] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ToolDescriptionEnvelope]);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type ToolDescriptionEnvelope and conformance ToolDescriptionEnvelope, (void (*)(uint64_t))type metadata accessor for ToolDescriptionEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ToolDescriptionEnvelope] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [ToolDescriptionEnvelope] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [ToolDescriptionEnvelope] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ToolDescriptionEnvelope]);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type ToolDescriptionEnvelope and conformance ToolDescriptionEnvelope, (void (*)(uint64_t))type metadata accessor for ToolDescriptionEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ToolDescriptionEnvelope] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DocumentResourceIdentifier] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DocumentResourceIdentifier] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [DocumentResourceIdentifier] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DocumentResourceIdentifier]);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier, MEMORY[0x263F415B0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DocumentResourceIdentifier] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [DocumentResourceIdentifier] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [DocumentResourceIdentifier] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DocumentResourceIdentifier]);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier, MEMORY[0x263F415B0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DocumentResourceIdentifier] and conformance <A> [A]);
  }
  return result;
}

uint64_t outlined release of SamplingParametersEnvelope(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for CompletePromptRequest(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for CompletePromptRequest);
}

unint64_t lazy protocol witness table accessor for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys);
  }
  return result;
}

uint64_t outlined assign with take of PromptTemplateInfoEnvelope(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for AnnotationEnvelope.DocumentCitationEnvelope);
}

uint64_t type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for AnnotationEnvelope.URLCitationEnvelope);
}

uint64_t type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for AnnotationEnvelope.CitationTypeEnvelope);
}

uint64_t type metadata accessor for AnnotationEnvelope(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for AnnotationEnvelope);
}

unint64_t lazy protocol witness table accessor for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope);
  }
  return result;
}

void outlined consume of PromptCompletionEventCandidateTextDelta?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data?(a8, a9);
  }
}

unint64_t lazy protocol witness table accessor for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for CompletePromptResponseElement(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for CompletePromptResponseElement);
}

unint64_t lazy protocol witness table accessor for type Constraints.CodingKeys and conformance Constraints.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModelInformationEnvelope and conformance ModelInformationEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type ModelInformationEnvelope and conformance ModelInformationEnvelope;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope and conformance ModelInformationEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope and conformance ModelInformationEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModelInformationEnvelope and conformance ModelInformationEnvelope;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope and conformance ModelInformationEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope and conformance ModelInformationEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModelInformationEnvelope and conformance ModelInformationEnvelope;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope and conformance ModelInformationEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope and conformance ModelInformationEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModerationEnvelope and conformance ModerationEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope and conformance ModerationEnvelope;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope and conformance ModerationEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope and conformance ModerationEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope and conformance ModerationEnvelope;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope and conformance ModerationEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope and conformance ModerationEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope and conformance ModerationEnvelope;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope and conformance ModerationEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope and conformance ModerationEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UsageEnvelope and conformance UsageEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type UsageEnvelope and conformance UsageEnvelope;
  if (!lazy protocol witness table cache variable for type UsageEnvelope and conformance UsageEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsageEnvelope and conformance UsageEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UsageEnvelope and conformance UsageEnvelope;
  if (!lazy protocol witness table cache variable for type UsageEnvelope and conformance UsageEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsageEnvelope and conformance UsageEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UsageEnvelope and conformance UsageEnvelope;
  if (!lazy protocol witness table cache variable for type UsageEnvelope and conformance UsageEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsageEnvelope and conformance UsageEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEnvelope.CandidateEnvelope and conformance PromptCompletionEnvelope.CandidateEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope and conformance PromptCompletionEnvelope.CandidateEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope and conformance PromptCompletionEnvelope.CandidateEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope and conformance PromptCompletionEnvelope.CandidateEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope and conformance PromptCompletionEnvelope.CandidateEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope and conformance PromptCompletionEnvelope.CandidateEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope and conformance PromptCompletionEnvelope.CandidateEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope and conformance PromptCompletionEnvelope.CandidateEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope and conformance PromptCompletionEnvelope.CandidateEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope and conformance PromptCompletionEnvelope.CandidateEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

void *outlined retain of PromptCompletionEnvelope(void *a1)
{
  uint64_t v2 = a1[7];
  unint64_t v3 = a1[8];
  uint64_t v4 = a1[10];
  uint64_t v6 = a1[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v2, v3);
  outlined copy of PromptRenderingEnvelope?(v6, v4);
  return a1;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for RequestPayload(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for RequestPayload);
}

unint64_t lazy protocol witness table accessor for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RequestPayload.CountTokensPromptTemplateCodingKeys and conformance RequestPayload.CountTokensPromptTemplateCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RequestPayload.CountTokensPromptTemplateCodingKeys and conformance RequestPayload.CountTokensPromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CountTokensPromptTemplateCodingKeys and conformance RequestPayload.CountTokensPromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CountTokensPromptTemplateCodingKeys and conformance RequestPayload.CountTokensPromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RequestPayload.CountTokensPromptTemplateCodingKeys and conformance RequestPayload.CountTokensPromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CountTokensPromptTemplateCodingKeys and conformance RequestPayload.CountTokensPromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CountTokensPromptTemplateCodingKeys and conformance RequestPayload.CountTokensPromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RequestPayload.CountTokensPromptTemplateCodingKeys and conformance RequestPayload.CountTokensPromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CountTokensPromptTemplateCodingKeys and conformance RequestPayload.CountTokensPromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CountTokensPromptTemplateCodingKeys and conformance RequestPayload.CountTokensPromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RequestPayload.CountTokensPromptTemplateCodingKeys and conformance RequestPayload.CountTokensPromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CountTokensPromptTemplateCodingKeys and conformance RequestPayload.CountTokensPromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CountTokensPromptTemplateCodingKeys and conformance RequestPayload.CountTokensPromptTemplateCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CountTokensRequest and conformance CountTokensRequest()
{
  unint64_t result = lazy protocol witness table cache variable for type CountTokensRequest and conformance CountTokensRequest;
  if (!lazy protocol witness table cache variable for type CountTokensRequest and conformance CountTokensRequest)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensRequest and conformance CountTokensRequest);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CountTokensRequest and conformance CountTokensRequest;
  if (!lazy protocol witness table cache variable for type CountTokensRequest and conformance CountTokensRequest)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensRequest and conformance CountTokensRequest);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CountTokensRequest and conformance CountTokensRequest;
  if (!lazy protocol witness table cache variable for type CountTokensRequest and conformance CountTokensRequest)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensRequest and conformance CountTokensRequest);
  }
  return result;
}

uint64_t type metadata accessor for StreamingRequestPayload(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for StreamingRequestPayload);
}

unint64_t lazy protocol witness table accessor for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RegisterDocumentRequest and conformance RegisterDocumentRequest()
{
  unint64_t result = lazy protocol witness table cache variable for type RegisterDocumentRequest and conformance RegisterDocumentRequest;
  if (!lazy protocol witness table cache variable for type RegisterDocumentRequest and conformance RegisterDocumentRequest)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegisterDocumentRequest and conformance RegisterDocumentRequest);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RegisterDocumentRequest and conformance RegisterDocumentRequest;
  if (!lazy protocol witness table cache variable for type RegisterDocumentRequest and conformance RegisterDocumentRequest)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegisterDocumentRequest and conformance RegisterDocumentRequest);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RegisterDocumentRequest and conformance RegisterDocumentRequest;
  if (!lazy protocol witness table cache variable for type RegisterDocumentRequest and conformance RegisterDocumentRequest)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegisterDocumentRequest and conformance RegisterDocumentRequest);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in RegisterDocumentResponseElement()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type RegisterDocumentResponseElement and conformance RegisterDocumentResponseElement, (void (*)(uint64_t))type metadata accessor for RegisterDocumentResponseElement);
}

uint64_t base witness table accessor for Equatable in CountTokensPromptTemplateRequest()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CountTokensPromptTemplateRequest and conformance CountTokensPromptTemplateRequest, (void (*)(uint64_t))type metadata accessor for CountTokensPromptTemplateRequest);
}

uint64_t base witness table accessor for Equatable in CompletePromptTemplateRequest()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CompletePromptTemplateRequest and conformance CompletePromptTemplateRequest, (void (*)(uint64_t))type metadata accessor for CompletePromptTemplateRequest);
}

uint64_t base witness table accessor for Equatable in CompletePromptRequest()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CompletePromptRequest and conformance CompletePromptRequest, (void (*)(uint64_t))type metadata accessor for CompletePromptRequest);
}

uint64_t base witness table accessor for Equatable in ToolDescription()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type ToolDescription and conformance ToolDescription, (void (*)(uint64_t))type metadata accessor for ToolDescription);
}

uint64_t base witness table accessor for Equatable in ToolType()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type ToolType and conformance ToolType, (void (*)(uint64_t))type metadata accessor for ToolType);
}

uint64_t base witness table accessor for Equatable in FunctionDescription()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type FunctionDescription and conformance FunctionDescription, (void (*)(uint64_t))type metadata accessor for FunctionDescription);
}

uint64_t base witness table accessor for Equatable in CompletePromptResponseElement()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CompletePromptResponseElement and conformance CompletePromptResponseElement, (void (*)(uint64_t))type metadata accessor for CompletePromptResponseElement);
}

uint64_t base witness table accessor for Equatable in Constraints()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type Constraints and conformance Constraints, (void (*)(uint64_t))type metadata accessor for Constraints);
}

unint64_t lazy protocol witness table accessor for type RequestMetadata and conformance RequestMetadata()
{
  unint64_t result = lazy protocol witness table cache variable for type RequestMetadata and conformance RequestMetadata;
  if (!lazy protocol witness table cache variable for type RequestMetadata and conformance RequestMetadata)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestMetadata and conformance RequestMetadata);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in PromptCompletionStreamElementEnvelope()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope and conformance PromptCompletionStreamElementEnvelope, (void (*)(uint64_t))type metadata accessor for PromptCompletionStreamElementEnvelope);
}

uint64_t base witness table accessor for Equatable in DocumentRegistrationEnvelope()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type DocumentRegistrationEnvelope and conformance DocumentRegistrationEnvelope, (void (*)(uint64_t))type metadata accessor for DocumentRegistrationEnvelope);
}

uint64_t base witness table accessor for Equatable in ToolDescriptionEnvelope()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type ToolDescriptionEnvelope and conformance ToolDescriptionEnvelope, (void (*)(uint64_t))type metadata accessor for ToolDescriptionEnvelope);
}

uint64_t base witness table accessor for Equatable in RequestPayload()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type RequestPayload and conformance RequestPayload, (void (*)(uint64_t))type metadata accessor for RequestPayload);
}

uint64_t base witness table accessor for Equatable in StreamingRequestPayload()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type StreamingRequestPayload and conformance StreamingRequestPayload, (void (*)(uint64_t))type metadata accessor for StreamingRequestPayload);
}

uint64_t sub_25F8498F0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return PromptEnvelope.unseal()(*a1, a1[1], a1[2], a1[3], a2);
}

uint64_t destroy for RegisterDocumentRequest()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for RegisterDocumentRequest(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RegisterDocumentRequest(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RegisterDocumentRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RegisterDocumentRequest(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RegisterDocumentRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RegisterDocumentRequest()
{
  return &type metadata for RegisterDocumentRequest;
}

uint64_t *initializeBufferWithCopyOfBuffer for RegisterDocumentResponseElement(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for DocumentRegistrationEnvelope(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    uint64_t v12 = *(int *)(v6 + 20);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for RegisterDocumentResponseElement(uint64_t a1)
{
  type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_bridgeObjectRelease();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v3 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  }
  uint64_t v4 = a1 + *(int *)(type metadata accessor for DocumentRegistrationEnvelope(0) + 20);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for RegisterDocumentResponseElement(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  uint64_t v8 = *(int *)(type metadata accessor for DocumentRegistrationEnvelope(0) + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

void *assignWithCopy for RegisterDocumentResponseElement(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of DocumentResourceEnvelope((uint64_t)a1, type metadata accessor for DocumentRegistrationStatusEnvelope);
    uint64_t v4 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v6 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
  }
  uint64_t v7 = *(int *)(type metadata accessor for DocumentRegistrationEnvelope(0) + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

char *initializeWithTake for RegisterDocumentResponseElement(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  uint64_t v6 = *(int *)(type metadata accessor for DocumentRegistrationEnvelope(0) + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

char *assignWithTake for RegisterDocumentResponseElement(char *a1, char *a2)
{
  if (a1 != a2)
  {
    outlined destroy of DocumentResourceEnvelope((uint64_t)a1, type metadata accessor for DocumentRegistrationStatusEnvelope);
    uint64_t v4 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
  }
  uint64_t v6 = *(int *)(type metadata accessor for DocumentRegistrationEnvelope(0) + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for RegisterDocumentResponseElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F84A30C);
}

uint64_t sub_25F84A30C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for DocumentRegistrationEnvelope);
}

uint64_t storeEnumTagSinglePayload for RegisterDocumentResponseElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F84A338);
}

uint64_t sub_25F84A338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for DocumentRegistrationEnvelope);
}

uint64_t type metadata completion function for RegisterDocumentResponseElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for RegisterDocumentResponseElement(a1, a2, a3, type metadata accessor for DocumentRegistrationEnvelope);
}

uint64_t destroy for CountTokensRequest()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for CountTokensRequest(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CountTokensRequest(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for CountTokensRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CountTokensRequest(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CountTokensRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CountTokensRequest()
{
  return &type metadata for CountTokensRequest;
}

uint64_t destroy for CountTokensResponse(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for CountTokensResponse(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a1 + 1;
  uint64_t v4 = a2[2];
  if (v4)
  {
    a1[1] = a2[1];
    a1[2] = v4;
    uint64_t v5 = a2[4];
    a1[3] = a2[3];
    a1[4] = v5;
    uint64_t v6 = a2[6];
    a1[5] = a2[5];
    a1[6] = v6;
    uint64_t v7 = a2[8];
    a1[7] = a2[7];
    a1[8] = v7;
    uint64_t v8 = a2[10];
    a1[9] = a2[9];
    a1[10] = v8;
    uint64_t v9 = a2[12];
    a1[11] = a2[11];
    a1[12] = v9;
    a1[13] = a2[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 11);
    *((_OWORD *)v3 + 4) = *(_OWORD *)(a2 + 9);
    *((_OWORD *)v3 + 5) = v10;
    v3[12] = a2[13];
    long long v11 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)uint64_t v3 = *(_OWORD *)(a2 + 1);
    *((_OWORD *)v3 + 1) = v11;
    long long v12 = *(_OWORD *)(a2 + 7);
    *((_OWORD *)v3 + 2) = *(_OWORD *)(a2 + 5);
    *((_OWORD *)v3 + 3) = v12;
  }
  return a1;
}

void *assignWithCopy for CountTokensResponse(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a1 + 1;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[2];
  if (a1[2])
  {
    if (v6)
    {
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[6] = a2[6];
      a1[7] = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[8] = a2[8];
      a1[9] = a2[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[10] = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[11] = a2[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[12] = a2[12];
      a1[13] = a2[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of PromptRenderingEnvelope((uint64_t)(a1 + 1));
      long long v8 = *((_OWORD *)v5 + 1);
      long long v7 = *((_OWORD *)v5 + 2);
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
      *((_OWORD *)v4 + 1) = v8;
      *((_OWORD *)v4 + 2) = v7;
      long long v10 = *((_OWORD *)v5 + 4);
      long long v9 = *((_OWORD *)v5 + 5);
      long long v11 = *((_OWORD *)v5 + 3);
      v4[12] = v5[12];
      *((_OWORD *)v4 + 4) = v10;
      *((_OWORD *)v4 + 5) = v9;
      *((_OWORD *)v4 + 3) = v11;
    }
  }
  else if (v6)
  {
    a1[1] = a2[1];
    a1[2] = a2[2];
    a1[3] = a2[3];
    a1[4] = a2[4];
    a1[5] = a2[5];
    a1[6] = a2[6];
    a1[7] = a2[7];
    a1[8] = a2[8];
    a1[9] = a2[9];
    a1[10] = a2[10];
    a1[11] = a2[11];
    a1[12] = a2[12];
    a1[13] = a2[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v12 = *(_OWORD *)v5;
    long long v13 = *(_OWORD *)(a2 + 5);
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 5) = v13;
    *(_OWORD *)uint64_t v4 = v12;
    long long v14 = *(_OWORD *)(a2 + 7);
    long long v15 = *(_OWORD *)(a2 + 9);
    long long v16 = *(_OWORD *)(a2 + 11);
    a1[13] = a2[13];
    *(_OWORD *)(a1 + 9) = v15;
    *(_OWORD *)(a1 + 11) = v16;
    *(_OWORD *)(a1 + 7) = v14;
  }
  return a1;
}

uint64_t outlined destroy of PromptRenderingEnvelope(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy112_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

void *assignWithTake for CountTokensResponse(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (uint64_t)(a1 + 1);
  uint64_t v4 = a2 + 1;
  if (!a1[2]) {
    goto LABEL_5;
  }
  uint64_t v6 = a2[2];
  if (!v6)
  {
    outlined destroy of PromptRenderingEnvelope(v3);
LABEL_5:
    long long v11 = *((_OWORD *)v4 + 5);
    *(_OWORD *)(v3 + 64) = *((_OWORD *)v4 + 4);
    *(_OWORD *)(v3 + 80) = v11;
    *(void *)(v3 + 96) = v4[12];
    long long v12 = *((_OWORD *)v4 + 1);
    *(_OWORD *)uint64_t v3 = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 16) = v12;
    long long v13 = *((_OWORD *)v4 + 3);
    *(_OWORD *)(v3 + 32) = *((_OWORD *)v4 + 2);
    *(_OWORD *)(v3 + 48) = v13;
    return a1;
  }
  a1[1] = a2[1];
  a1[2] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[9];
  a1[8] = a2[8];
  a1[9] = v9;
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRelease();
  uint64_t v10 = a2[13];
  a1[12] = a2[12];
  a1[13] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CountTokensResponse(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 112)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CountTokensResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CountTokensResponse()
{
  return &type metadata for CountTokensResponse;
}

void *initializeBufferWithCopyOfBuffer for CountTokensPromptTemplateRequest(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    if (v7)
    {
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = a2[3];
      a1[2] = a2[2];
      a1[3] = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v10 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v10;
    }
    uint64_t v11 = *(int *)(a3 + 20);
    long long v12 = (void *)((char *)a1 + v11);
    long long v13 = (char *)a2 + v11;
    uint64_t v14 = *(void *)((char *)a2 + v11 + 8);
    *long long v12 = *(void *)((char *)a2 + v11);
    v12[1] = v14;
    _OWORD v12[2] = *(void *)((char *)a2 + v11 + 16);
    uint64_t v15 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
    __dst = (char *)v12 + v15;
    long long v16 = &v13[v15];
    uint64_t v17 = type metadata accessor for Locale();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v19(v16, 1, v17))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(__dst, v16, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(__dst, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
    }
    uint64_t v21 = *(int *)(a3 + 24);
    uint64_t v22 = (void *)((char *)a1 + v21);
    uint64_t v23 = (void *)((char *)a2 + v21);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    uint64_t v25 = v23[3];
    v22[2] = v23[2];
    v22[3] = v25;
    uint64_t v26 = v23[5];
    v22[4] = v23[4];
    v22[5] = v26;
    v22[6] = v23[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CountTokensPromptTemplateRequest(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
  uint64_t v6 = type metadata accessor for Locale();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for CountTokensPromptTemplateRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  if (v6)
  {
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v8;
  }
  uint64_t v27 = a3;
  uint64_t v9 = *(int *)(a3 + 20);
  long long v10 = (void *)((char *)a1 + v9);
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = *(void *)((char *)a2 + v9 + 8);
  *long long v10 = *(void *)((char *)a2 + v9);
  v10[1] = v12;
  v10[2] = *(void *)((char *)a2 + v9 + 16);
  uint64_t v13 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
  uint64_t v14 = (char *)v10 + v13;
  uint64_t v15 = &v11[v13];
  uint64_t v16 = type metadata accessor for Locale();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v18(v15, 1, v16))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v20 = *(int *)(v27 + 24);
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v23 = v22[1];
  void *v21 = *v22;
  v21[1] = v23;
  uint64_t v24 = v22[3];
  void v21[2] = v22[2];
  v21[3] = v24;
  uint64_t v25 = v22[5];
  v21[4] = v22[4];
  v21[5] = v25;
  v21[6] = v22[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CountTokensPromptTemplateRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  if (a1[1])
  {
    if (v6)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of PromptEnvelope((uint64_t)a1);
      long long v7 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v7;
    }
  }
  else if (v6)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    a1[3] = a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v8;
  }
  uint64_t v9 = *(int *)(a3 + 20);
  long long v10 = (void *)((char *)a1 + v9);
  uint64_t v11 = (char *)a2 + v9;
  *long long v10 = *(void *)((char *)a2 + v9);
  v10[1] = *(void *)((char *)a2 + v9 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10[2] = *((void *)v11 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
  uint64_t v13 = (char *)v10 + v12;
  uint64_t v14 = &v11[v12];
  uint64_t v15 = type metadata accessor for Locale();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_13;
  }
  if (v19)
  {
LABEL_13:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_14:
  uint64_t v21 = *(int *)(a3 + 24);
  uint64_t v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = (void *)((char *)a2 + v21);
  *uint64_t v22 = *(void *)((char *)a2 + v21);
  v22[1] = *(void *)((char *)a2 + v21 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22[2] = v23[2];
  v22[3] = v23[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22[4] = v23[4];
  v22[5] = v23[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22[6] = v23[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of PromptEnvelope(uint64_t a1)
{
  return a1;
}

_OWORD *initializeWithTake for CountTokensPromptTemplateRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  long long v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *(_OWORD *)long long v8 = *(_OWORD *)((char *)a2 + v7);
  *((void *)v8 + 2) = *(void *)((char *)a2 + v7 + 16);
  uint64_t v10 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
  uint64_t v11 = &v8[v10];
  uint64_t v12 = &v9[v10];
  uint64_t v13 = type metadata accessor for Locale();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = (char *)a1 + v16;
  int v18 = (char *)a2 + v16;
  long long v19 = *((_OWORD *)v18 + 1);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v19;
  *((_OWORD *)v17 + 2) = *((_OWORD *)v18 + 2);
  *((void *)v17 + 6) = *((void *)v18 + 6);
  return a1;
}

void *assignWithTake for CountTokensPromptTemplateRequest(void *a1, void *a2, uint64_t a3)
{
  if (a1[1])
  {
    uint64_t v6 = a2[1];
    if (v6)
    {
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of PromptEnvelope((uint64_t)a1);
  }
  long long v7 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v7;
LABEL_6:
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)((char *)a1 + v8);
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = *(void *)((char *)a2 + v8 + 8);
  *uint64_t v9 = *(void *)((char *)a2 + v8);
  v9[1] = v11;
  swift_bridgeObjectRelease();
  v9[2] = *((void *)v10 + 2);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
  uint64_t v13 = (char *)v9 + v12;
  uint64_t v14 = &v10[v12];
  uint64_t v15 = type metadata accessor for Locale();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_11;
  }
  if (v19)
  {
LABEL_11:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_12:
  uint64_t v21 = *(int *)(a3 + 24);
  uint64_t v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = (void *)((char *)a2 + v21);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  uint64_t v25 = v23[3];
  v22[2] = v23[2];
  v22[3] = v25;
  swift_bridgeObjectRelease();
  uint64_t v26 = v23[5];
  v22[4] = v23[4];
  v22[5] = v26;
  swift_bridgeObjectRelease();
  v22[6] = v23[6];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CountTokensPromptTemplateRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F84B8F4);
}

uint64_t sub_25F84B8F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PromptTemplateInfoEnvelope(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for CountTokensPromptTemplateRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F84B9D0);
}

uint64_t sub_25F84B9D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for PromptTemplateInfoEnvelope(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for CountTokensPromptTemplateRequest()
{
  uint64_t result = type metadata accessor for PromptTemplateInfoEnvelope(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for CompletePromptTemplateRequest(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    if (v7)
    {
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = a2[3];
      a1[2] = a2[2];
      a1[3] = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v10 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v10;
    }
    uint64_t v11 = a3[5];
    unint64_t v12 = (void *)((char *)a1 + v11);
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = *(void *)((char *)a2 + v11 + 8);
    *unint64_t v12 = *(void *)((char *)a2 + v11);
    v12[1] = v14;
    _OWORD v12[2] = *(void *)((char *)a2 + v11 + 16);
    uint64_t v15 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
    __dst = (char *)v12 + v15;
    uint64_t v16 = &v13[v15];
    uint64_t v17 = type metadata accessor for Locale();
    uint64_t v18 = *(void *)(v17 - 8);
    int v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v19(v16, 1, v17))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(__dst, v16, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(__dst, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
    }
    uint64_t v21 = a3[6];
    uint64_t v22 = a3[7];
    uint64_t v23 = (char *)a1 + v21;
    uint64_t v24 = (char *)a2 + v21;
    *(void *)uint64_t v23 = *(void *)v24;
    v23[8] = v24[8];
    *((void *)v23 + 2) = *((void *)v24 + 2);
    v23[24] = v24[24];
    *((void *)v23 + 4) = *((void *)v24 + 4);
    v23[40] = v24[40];
    v23[56] = v24[56];
    *((void *)v23 + 6) = *((void *)v24 + 6);
    uint64_t v25 = *((void *)v24 + 8);
    v23[72] = v24[72];
    *((void *)v23 + 8) = v25;
    uint64_t v26 = *((void *)v24 + 11);
    *((void *)v23 + 10) = *((void *)v24 + 10);
    *((void *)v23 + 11) = v26;
    v23[96] = v24[96];
    *((void *)v23 + 13) = *((void *)v24 + 13);
    v23[112] = v24[112];
    *((void *)v23 + 15) = *((void *)v24 + 15);
    *((_WORD *)v23 + 64) = *((_WORD *)v24 + 64);
    *(void *)((char *)a1 + v22) = *(void *)((char *)a2 + v22);
    uint64_t v27 = a3[8];
    uint64_t v28 = (char *)a1 + v27;
    uint64_t v29 = (_OWORD *)((char *)a2 + v27);
    unint64_t v30 = *(void *)((char *)a2 + v27 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v30 < 4)
    {
      *(_OWORD *)uint64_t v28 = *v29;
    }
    else
    {
      *(void *)uint64_t v28 = *(void *)v29;
      *((void *)v28 + 1) = v30;
      swift_bridgeObjectRetain();
    }
    uint64_t v31 = a3[10];
    *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
    uint64_t v32 = (void *)((char *)a1 + v31);
    uint64_t v33 = (void *)((char *)a2 + v31);
    uint64_t v34 = type metadata accessor for Constraints(0);
    uint64_t v35 = *(void *)(v34 - 8);
    uint64_t v36 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v35 + 48);
    swift_bridgeObjectRetain();
    if (v36(v33, 1, v34))
    {
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      memcpy(v32, v33, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        uint64_t v39 = v33[1];
        void *v32 = *v33;
        v32[1] = v39;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v40 = type metadata accessor for GenerationSchema();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v40 - 8) + 16))(v32, v33, v40);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    uint64_t v41 = a3[11];
    uint64_t v42 = (void *)((char *)a1 + v41);
    uint64_t v43 = (void *)((char *)a2 + v41);
    uint64_t v44 = v43[1];
    *uint64_t v42 = *v43;
    v42[1] = v44;
    uint64_t v45 = v43[3];
    v42[2] = v43[2];
    v42[3] = v45;
    uint64_t v46 = v43[5];
    v42[4] = v43[4];
    v42[5] = v46;
    v42[6] = v43[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CompletePromptTemplateRequest(uint64_t a1, int *a2)
{
  if (*(void *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + a2[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
  uint64_t v6 = type metadata accessor for Locale();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[8] + 8) >= 4uLL) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + a2[10];
  uint64_t v9 = type metadata accessor for Constraints(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
    }
    else if (!EnumCaseMultiPayload)
    {
      uint64_t v11 = type metadata accessor for GenerationSchema();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v8, v11);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for CompletePromptTemplateRequest(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  if (v6)
  {
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v8;
  }
  uint64_t v47 = a3;
  uint64_t v9 = a3[5];
  long long v10 = (void *)((char *)a1 + v9);
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = *(void *)((char *)a2 + v9 + 8);
  *long long v10 = *(void *)((char *)a2 + v9);
  v10[1] = v12;
  v10[2] = *(void *)((char *)a2 + v9 + 16);
  uint64_t v13 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
  uint64_t v14 = (char *)v10 + v13;
  uint64_t v15 = &v11[v13];
  uint64_t v16 = type metadata accessor for Locale();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v18(v15, 1, v16))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v20 = v47[6];
  uint64_t v21 = v47[7];
  uint64_t v22 = (char *)a1 + v20;
  uint64_t v23 = (char *)a2 + v20;
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  *((void *)v22 + 2) = *((void *)v23 + 2);
  v22[24] = v23[24];
  *((void *)v22 + 4) = *((void *)v23 + 4);
  v22[40] = v23[40];
  v22[56] = v23[56];
  *((void *)v22 + 6) = *((void *)v23 + 6);
  uint64_t v24 = *((void *)v23 + 8);
  v22[72] = v23[72];
  *((void *)v22 + 8) = v24;
  uint64_t v25 = *((void *)v23 + 11);
  *((void *)v22 + 10) = *((void *)v23 + 10);
  *((void *)v22 + 11) = v25;
  v22[96] = v23[96];
  *((void *)v22 + 13) = *((void *)v23 + 13);
  v22[112] = v23[112];
  *((void *)v22 + 15) = *((void *)v23 + 15);
  *((_WORD *)v22 + 64) = *((_WORD *)v23 + 64);
  *(void *)((char *)a1 + v21) = *(void *)((char *)a2 + v21);
  uint64_t v26 = v47[8];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (_OWORD *)((char *)a2 + v26);
  unint64_t v29 = *(void *)((char *)a2 + v26 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v29 < 4)
  {
    *(_OWORD *)uint64_t v27 = *v28;
  }
  else
  {
    *(void *)uint64_t v27 = *(void *)v28;
    *((void *)v27 + 1) = v29;
    swift_bridgeObjectRetain();
  }
  uint64_t v30 = v47[10];
  *(void *)((char *)a1 + v47[9]) = *(void *)((char *)a2 + v47[9]);
  uint64_t v31 = (void *)((char *)a1 + v30);
  uint64_t v32 = (void *)((char *)a2 + v30);
  uint64_t v33 = type metadata accessor for Constraints(0);
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v34 + 48);
  swift_bridgeObjectRetain();
  if (v35(v32, 1, v33))
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
    memcpy(v31, v32, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      uint64_t v38 = v32[1];
      *uint64_t v31 = *v32;
      v31[1] = v38;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v39 = type metadata accessor for GenerationSchema();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v39 - 8) + 16))(v31, v32, v39);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  uint64_t v40 = v47[11];
  uint64_t v41 = (void *)((char *)a1 + v40);
  uint64_t v42 = (void *)((char *)a2 + v40);
  uint64_t v43 = v42[1];
  void *v41 = *v42;
  v41[1] = v43;
  uint64_t v44 = v42[3];
  v41[2] = v42[2];
  v41[3] = v44;
  uint64_t v45 = v42[5];
  v41[4] = v42[4];
  v41[5] = v45;
  v41[6] = v42[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CompletePromptTemplateRequest(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  if (a1[1])
  {
    if (v6)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of PromptEnvelope((uint64_t)a1);
      long long v7 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v7;
    }
  }
  else if (v6)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    a1[3] = a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v8;
  }
  uint64_t v9 = a3[5];
  long long v10 = (void *)((char *)a1 + v9);
  uint64_t v11 = (char *)a2 + v9;
  *long long v10 = *(void *)((char *)a2 + v9);
  v10[1] = *(void *)((char *)a2 + v9 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10[2] = *((void *)v11 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
  uint64_t v13 = (char *)v10 + v12;
  uint64_t v14 = &v11[v12];
  uint64_t v15 = type metadata accessor for Locale();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_13:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_14:
  uint64_t v21 = a3[6];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = *(void *)((char *)a2 + v21);
  v22[8] = v23[8];
  *(void *)uint64_t v22 = v24;
  uint64_t v25 = *((void *)v23 + 2);
  v22[24] = v23[24];
  *((void *)v22 + 2) = v25;
  uint64_t v26 = *((void *)v23 + 4);
  v22[40] = v23[40];
  *((void *)v22 + 4) = v26;
  uint64_t v27 = *((void *)v23 + 6);
  v22[56] = v23[56];
  *((void *)v22 + 6) = v27;
  uint64_t v28 = *((void *)v23 + 8);
  v22[72] = v23[72];
  *((void *)v22 + 8) = v28;
  *((void *)v22 + 10) = *((void *)v23 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = *((void *)v23 + 11);
  v22[96] = v23[96];
  *((void *)v22 + 11) = v29;
  uint64_t v30 = *((void *)v23 + 13);
  v22[112] = v23[112];
  *((void *)v22 + 13) = v30;
  uint64_t v31 = *((void *)v23 + 15);
  v22[128] = v23[128];
  *((void *)v22 + 15) = v31;
  v22[129] = v23[129];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[8];
  uint64_t v33 = (uint64_t)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  unint64_t v35 = *(void *)((char *)a1 + v32 + 8);
  unint64_t v36 = *(void *)((char *)a2 + v32 + 8);
  if (v35 == 3)
  {
    if (v36 >= 4) {
      goto LABEL_21;
    }
    goto LABEL_25;
  }
  if (v36 == 3)
  {
    outlined destroy of FinishReason(v33);
LABEL_25:
    *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
    goto LABEL_26;
  }
  if (v35 < 3)
  {
    if (v36 >= 3)
    {
LABEL_21:
      *(void *)uint64_t v33 = *(void *)v34;
      *(void *)(v33 + 8) = *((void *)v34 + 1);
      swift_bridgeObjectRetain();
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v36 < 3)
  {
    outlined destroy of String(v33);
    goto LABEL_25;
  }
  *(void *)uint64_t v33 = *(void *)v34;
  *(void *)(v33 + 8) = *((void *)v34 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_26:
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v37 = a3[10];
  uint64_t v38 = (void *)((char *)a1 + v37);
  uint64_t v39 = (void *)((char *)a2 + v37);
  uint64_t v40 = type metadata accessor for Constraints(0);
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v41 + 48);
  int v43 = v42(v38, 1, v40);
  int v44 = v42(v39, 1, v40);
  if (v43)
  {
    if (!v44)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        *uint64_t v38 = *v39;
        v38[1] = v39[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v48 = type metadata accessor for GenerationSchema();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v48 - 8) + 16))(v38, v39, v48);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      goto LABEL_41;
    }
LABEL_33:
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
    memcpy(v38, v39, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_41;
  }
  if (v44)
  {
    outlined destroy of DocumentResourceEnvelope((uint64_t)v38, type metadata accessor for Constraints);
    goto LABEL_33;
  }
  if (a1 != a2)
  {
    outlined destroy of DocumentResourceEnvelope((uint64_t)v38, type metadata accessor for Constraints);
    int v47 = swift_getEnumCaseMultiPayload();
    if (v47 == 2)
    {
      *uint64_t v38 = *v39;
      v38[1] = v39[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (v47 == 1)
      {
        *uint64_t v38 = *v39;
        v38[1] = v39[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v53 = type metadata accessor for GenerationSchema();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v53 - 8) + 16))(v38, v39, v53);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_41:
  uint64_t v49 = a3[11];
  uint64_t v50 = (void *)((char *)a1 + v49);
  uint64_t v51 = (void *)((char *)a2 + v49);
  void *v50 = *(void *)((char *)a2 + v49);
  v50[1] = *(void *)((char *)a2 + v49 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v50[2] = v51[2];
  v50[3] = v51[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v50[4] = v51[4];
  v50[5] = v51[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v50[6] = v51[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for CompletePromptTemplateRequest(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  long long v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *(_OWORD *)long long v8 = *(_OWORD *)((char *)a2 + v7);
  *((void *)v8 + 2) = *(void *)((char *)a2 + v7 + 16);
  uint64_t v10 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
  uint64_t v11 = &v8[v10];
  uint64_t v12 = &v9[v10];
  uint64_t v13 = type metadata accessor for Locale();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v16 = a3[6];
  uint64_t v17 = a3[7];
  int v18 = (char *)a1 + v16;
  int v19 = (char *)a2 + v16;
  *((_WORD *)v18 + 64) = *((_WORD *)v19 + 64);
  long long v20 = *((_OWORD *)v19 + 3);
  *((_OWORD *)v18 + 2) = *((_OWORD *)v19 + 2);
  *((_OWORD *)v18 + 3) = v20;
  long long v21 = *((_OWORD *)v19 + 7);
  *((_OWORD *)v18 + 6) = *((_OWORD *)v19 + 6);
  *((_OWORD *)v18 + 7) = v21;
  long long v22 = *((_OWORD *)v19 + 5);
  *((_OWORD *)v18 + 4) = *((_OWORD *)v19 + 4);
  *((_OWORD *)v18 + 5) = v22;
  long long v23 = *((_OWORD *)v19 + 1);
  *(_OWORD *)int v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v23;
  *(void *)((char *)a1 + v17) = *(void *)((char *)a2 + v17);
  uint64_t v24 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v24) = *(void *)((char *)a2 + v24);
  uint64_t v25 = a3[10];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = type metadata accessor for Constraints(0);
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v26, v27, *(void *)(v29 + 64));
    }
    else
    {
      uint64_t v31 = type metadata accessor for GenerationSchema();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32))(v26, v27, v31);
      swift_storeEnumTagMultiPayload();
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  uint64_t v32 = a3[11];
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  long long v35 = *((_OWORD *)v34 + 1);
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  *((_OWORD *)v33 + 1) = v35;
  *((_OWORD *)v33 + 2) = *((_OWORD *)v34 + 2);
  *((void *)v33 + 6) = *((void *)v34 + 6);
  return a1;
}

void *assignWithTake for CompletePromptTemplateRequest(void *a1, void *a2, int *a3)
{
  if (a1[1])
  {
    uint64_t v6 = a2[1];
    if (v6)
    {
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of PromptEnvelope((uint64_t)a1);
  }
  long long v7 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v7;
LABEL_6:
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)((char *)a1 + v8);
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = *(void *)((char *)a2 + v8 + 8);
  *uint64_t v9 = *(void *)((char *)a2 + v8);
  v9[1] = v11;
  swift_bridgeObjectRelease();
  v9[2] = *((void *)v10 + 2);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
  uint64_t v13 = (char *)v9 + v12;
  uint64_t v14 = &v10[v12];
  uint64_t v15 = type metadata accessor for Locale();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_11:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_12:
  uint64_t v21 = a3[6];
  long long v22 = (char *)a1 + v21;
  long long v23 = (char *)a2 + v21;
  *(void *)long long v22 = *(void *)((char *)a2 + v21);
  v22[8] = *((unsigned char *)a2 + v21 + 8);
  *((void *)v22 + 2) = *(void *)((char *)a2 + v21 + 16);
  v22[24] = *((unsigned char *)a2 + v21 + 24);
  *((void *)v22 + 4) = *(void *)((char *)a2 + v21 + 32);
  v22[40] = *((unsigned char *)a2 + v21 + 40);
  v22[56] = *((unsigned char *)a2 + v21 + 56);
  *((void *)v22 + 6) = *(void *)((char *)a2 + v21 + 48);
  uint64_t v24 = *(void *)((char *)a2 + v21 + 64);
  v22[72] = v23[72];
  *((void *)v22 + 8) = v24;
  *((void *)v22 + 10) = *((void *)v23 + 10);
  swift_bridgeObjectRelease();
  *((void *)v22 + 11) = *((void *)v23 + 11);
  v22[96] = v23[96];
  *((void *)v22 + 13) = *((void *)v23 + 13);
  v22[112] = v23[112];
  *((_WORD *)v22 + 64) = *((_WORD *)v23 + 64);
  *((void *)v22 + 15) = *((void *)v23 + 15);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[8];
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = (_OWORD *)((char *)a2 + v25);
  unint64_t v28 = *(void *)((char *)a1 + v25 + 8);
  unint64_t v29 = *(void *)((char *)a2 + v25 + 8);
  if (v28 == 3)
  {
LABEL_18:
    *(_OWORD *)uint64_t v26 = *v27;
    goto LABEL_19;
  }
  if (v29 == 3)
  {
    outlined destroy of FinishReason(v26);
    goto LABEL_18;
  }
  if (v28 < 3) {
    goto LABEL_18;
  }
  if (v29 < 3)
  {
    outlined destroy of String(v26);
    goto LABEL_18;
  }
  *(void *)uint64_t v26 = *(void *)v27;
  *(void *)(v26 + 8) = v29;
  swift_bridgeObjectRelease();
LABEL_19:
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[10];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  uint64_t v33 = type metadata accessor for Constraints(0);
  uint64_t v34 = *(void *)(v33 - 8);
  long long v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v31, 1, v33);
  int v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (!v37)
    {
      if (a1 == a2) {
        goto LABEL_33;
      }
      outlined destroy of DocumentResourceEnvelope((uint64_t)v31, type metadata accessor for Constraints);
      if (!swift_getEnumCaseMultiPayload())
      {
        uint64_t v47 = type metadata accessor for GenerationSchema();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 32))(v31, v32, v47);
        swift_storeEnumTagMultiPayload();
        goto LABEL_33;
      }
      size_t v38 = *(void *)(v34 + 64);
      goto LABEL_26;
    }
    outlined destroy of DocumentResourceEnvelope((uint64_t)v31, type metadata accessor for Constraints);
LABEL_25:
    size_t v38 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?)
                                - 8)
                    + 64);
LABEL_26:
    memcpy(v31, v32, v38);
    goto LABEL_33;
  }
  if (v37) {
    goto LABEL_25;
  }
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v31, v32, *(void *)(v34 + 64));
  }
  else
  {
    uint64_t v39 = type metadata accessor for GenerationSchema();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32))(v31, v32, v39);
    swift_storeEnumTagMultiPayload();
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_33:
  uint64_t v40 = a3[11];
  uint64_t v41 = (void *)((char *)a1 + v40);
  uint64_t v42 = (void *)((char *)a2 + v40);
  uint64_t v43 = v42[1];
  void *v41 = *v42;
  v41[1] = v43;
  swift_bridgeObjectRelease();
  uint64_t v44 = v42[3];
  v41[2] = v42[2];
  v41[3] = v44;
  swift_bridgeObjectRelease();
  uint64_t v45 = v42[5];
  v41[4] = v42[4];
  v41[5] = v45;
  swift_bridgeObjectRelease();
  v41[6] = v42[6];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CompletePromptTemplateRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F84D4EC);
}

uint64_t sub_25F84D4EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for PromptTemplateInfoEnvelope(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + a3[5];
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v12 = *(void *)(a1 + a3[6] + 80);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + a3[10];
    return v14(v16, a2, v15);
  }
}

uint64_t storeEnumTagSinglePayload for CompletePromptTemplateRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F84D638);
}

uint64_t sub_25F84D638(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for PromptTemplateInfoEnvelope(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + a4[5];
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[6] + 80) = (a2 - 1);
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + a4[10];
    return v14(v16, a2, a2, v15);
  }
  return result;
}

void type metadata completion function for CompletePromptTemplateRequest()
{
  type metadata accessor for PromptTemplateInfoEnvelope(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Constraints?(319, &lazy cache variable for type metadata for Constraints?, (void (*)(uint64_t))type metadata accessor for Constraints);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *initializeBufferWithCopyOfBuffer for CompletePromptRequest(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = a2[2];
    uint64_t v8 = a2[3];
    *(void *)(a1 + 32) = a2[4];
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    *(void *)(a1 + 48) = a2[6];
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    uint64_t v9 = a2[8];
    *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
    *(void *)(a1 + 64) = v9;
    *(void *)(a1 + 80) = a2[10];
    *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
    *(void *)(a1 + 96) = a2[12];
    *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
    *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
    uint64_t v10 = a2[15];
    *(void *)(a1 + 112) = a2[14];
    *(void *)(a1 + 120) = v10;
    uint64_t v11 = a2[17];
    *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 144);
    *(void *)(a1 + 136) = v11;
    *(void *)(a1 + 152) = a2[19];
    *(_WORD *)(a1 + 160) = *((_WORD *)a2 + 80);
    uint64_t v12 = a3[6];
    __dst = (void *)(a1 + v12);
    uint64_t v13 = (uint64_t *)((char *)a2 + v12);
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v8;
    uint64_t v14 = type metadata accessor for Constraints(0);
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v14))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64));
      int v18 = a3;
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        uint64_t v21 = v13[1];
        void *__dst = *v13;
        __dst[1] = v21;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v22 = type metadata accessor for GenerationSchema();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(__dst, v13, v22);
      }
      int v18 = a3;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v23 = v18[8];
    *(void *)((char *)v4 + v18[7]) = *(uint64_t *)((char *)a2 + v18[7]);
    uint64_t v24 = (char *)v4 + v23;
    uint64_t v25 = (_OWORD *)((char *)a2 + v23);
    unint64_t v26 = *(uint64_t *)((char *)a2 + v23 + 8);
    swift_bridgeObjectRetain();
    if (v26 < 4)
    {
      *(_OWORD *)uint64_t v24 = *v25;
    }
    else
    {
      *(void *)uint64_t v24 = *(void *)v25;
      *((void *)v24 + 1) = v26;
      swift_bridgeObjectRetain();
    }
    uint64_t v27 = v18[10];
    *(void *)((char *)v4 + v18[9]) = *(uint64_t *)((char *)a2 + v18[9]);
    unint64_t v28 = (void *)((char *)v4 + v27);
    unint64_t v29 = (uint64_t *)((char *)a2 + v27);
    uint64_t v30 = v29[1];
    void *v28 = *v29;
    v28[1] = v30;
    uint64_t v31 = v29[3];
    v28[2] = v29[2];
    v28[3] = v31;
    uint64_t v32 = v29[5];
    v28[4] = v29[4];
    v28[5] = v32;
    v28[6] = v29[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for CompletePromptRequest(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Constraints(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
    }
    else if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = type metadata accessor for GenerationSchema();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v4, v7);
    }
  }
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + *(int *)(a2 + 32) + 8) >= 4uLL) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CompletePromptRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  uint64_t v10 = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 136) = v10;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  uint64_t v11 = a3[6];
  __dst = (void *)(a1 + v11);
  uint64_t v12 = (void *)(a2 + v11);
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v6;
  uint64_t v13 = type metadata accessor for Constraints(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v14 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v15(v12, 1, v13))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
    memcpy(__dst, v12, *(void *)(*(void *)(v16 - 8) + 64));
    uint64_t v17 = a3;
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v20 = v12[1];
      void *__dst = *v12;
      __dst[1] = v20;
      swift_bridgeObjectRetain();
      uint64_t v17 = a3;
    }
    else
    {
      uint64_t v17 = a3;
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v19 = v12[1];
        void *__dst = *v12;
        __dst[1] = v19;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v21 = type metadata accessor for GenerationSchema();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16))(__dst, v12, v21);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
  }
  uint64_t v22 = v17[8];
  *(void *)(a1 + v17[7]) = *(void *)(a2 + v17[7]);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (_OWORD *)(a2 + v22);
  unint64_t v25 = *(void *)(a2 + v22 + 8);
  swift_bridgeObjectRetain();
  if (v25 < 4)
  {
    *(_OWORD *)uint64_t v23 = *v24;
  }
  else
  {
    *(void *)uint64_t v23 = *(void *)v24;
    *(void *)(v23 + 8) = v25;
    swift_bridgeObjectRetain();
  }
  uint64_t v26 = v17[10];
  *(void *)(a1 + v17[9]) = *(void *)(a2 + v17[9]);
  uint64_t v27 = (void *)(a1 + v26);
  unint64_t v28 = (void *)(a2 + v26);
  uint64_t v29 = v28[1];
  *uint64_t v27 = *v28;
  v27[1] = v29;
  uint64_t v30 = v28[3];
  v27[2] = v28[2];
  v27[3] = v30;
  uint64_t v31 = v28[5];
  v27[4] = v28[4];
  v27[5] = v31;
  v27[6] = v28[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CompletePromptRequest(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v8;
  uint64_t v9 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v9;
  uint64_t v10 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v10;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = v11;
  uint64_t v12 = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 136) = v12;
  uint64_t v13 = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 152) = v13;
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = type metadata accessor for Constraints(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        *uint64_t v15 = *v16;
        v15[1] = v16[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v25 = type metadata accessor for GenerationSchema();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v25 - 8) + 16))(v15, v16, v25);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_16;
    }
LABEL_8:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
    memcpy(v15, v16, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_16;
  }
  if (v21)
  {
    outlined destroy of DocumentResourceEnvelope((uint64_t)v15, type metadata accessor for Constraints);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of DocumentResourceEnvelope((uint64_t)v15, type metadata accessor for Constraints);
    int v24 = swift_getEnumCaseMultiPayload();
    if (v24 == 2)
    {
      *uint64_t v15 = *v16;
      v15[1] = v16[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (v24 == 1)
      {
        *uint64_t v15 = *v16;
        v15[1] = v16[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v35 = type metadata accessor for GenerationSchema();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v35 - 8) + 16))(v15, v16, v35);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_16:
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[8];
  uint64_t v27 = (void *)(a1 + v26);
  unint64_t v28 = (void *)(a2 + v26);
  unint64_t v29 = *(void *)(a1 + v26 + 8);
  unint64_t v30 = *(void *)(a2 + v26 + 8);
  if (v29 == 3)
  {
    if (v30 >= 4) {
      goto LABEL_23;
    }
    goto LABEL_26;
  }
  if (v30 == 3)
  {
    outlined destroy of FinishReason((uint64_t)v27);
    goto LABEL_26;
  }
  if (v29 >= 3)
  {
    if (v30 >= 3)
    {
      *uint64_t v27 = *v28;
      v27[1] = v28[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
    outlined destroy of String((uint64_t)v27);
    goto LABEL_26;
  }
  if (v30 < 3)
  {
LABEL_26:
    *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
    goto LABEL_27;
  }
LABEL_23:
  *uint64_t v27 = *v28;
  v27[1] = v28[1];
  swift_bridgeObjectRetain();
LABEL_27:
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[10];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  void *v32 = *(void *)(a2 + v31);
  v32[1] = *(void *)(a2 + v31 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32[2] = v33[2];
  v32[3] = v33[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32[4] = v33[4];
  v32[5] = v33[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32[6] = v33[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CompletePromptRequest(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  long long v10 = *(_OWORD *)(a2 + 48);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
  uint64_t v14 = type metadata accessor for Constraints(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v12, v13, *(void *)(v15 + 64));
    }
    else
    {
      uint64_t v17 = type metadata accessor for GenerationSchema();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v17 - 8) + 32))(v12, v13, v17);
      swift_storeEnumTagMultiPayload();
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v18 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  uint64_t v19 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  long long v22 = *(_OWORD *)(v21 + 16);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  *(_OWORD *)(v20 + 16) = v22;
  *(_OWORD *)(v20 + 32) = *(_OWORD *)(v21 + 32);
  *(void *)(v20 + 48) = *(void *)(v21 + 48);
  return a1;
}

uint64_t assignWithTake for CompletePromptRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v7 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v7;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  uint64_t v8 = a3[6];
  long long v9 = (void *)(a1 + v8);
  long long v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for Constraints(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      if (a1 == a2) {
        goto LABEL_14;
      }
      outlined destroy of DocumentResourceEnvelope((uint64_t)v9, type metadata accessor for Constraints);
      if (!swift_getEnumCaseMultiPayload())
      {
        uint64_t v30 = type metadata accessor for GenerationSchema();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v30 - 8) + 32))(v9, v10, v30);
        swift_storeEnumTagMultiPayload();
        goto LABEL_14;
      }
      size_t v16 = *(void *)(v12 + 64);
LABEL_8:
      memcpy(v9, v10, v16);
      goto LABEL_14;
    }
    outlined destroy of DocumentResourceEnvelope((uint64_t)v9, type metadata accessor for Constraints);
LABEL_7:
    size_t v16 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?)
                                - 8)
                    + 64);
    goto LABEL_8;
  }
  if (v15) {
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v9, v10, *(void *)(v12 + 64));
  }
  else
  {
    uint64_t v17 = type metadata accessor for GenerationSchema();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 32))(v9, v10, v17);
    swift_storeEnumTagMultiPayload();
  }
  (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_14:
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[8];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  unint64_t v21 = *(void *)(a1 + v18 + 8);
  unint64_t v22 = *(void *)(a2 + v18 + 8);
  if (v21 != 3)
  {
    if (v22 == 3)
    {
      outlined destroy of FinishReason((uint64_t)v19);
    }
    else if (v21 >= 3)
    {
      if (v22 >= 3)
      {
        *uint64_t v19 = *v20;
        v19[1] = v22;
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
      outlined destroy of String((uint64_t)v19);
    }
  }
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
LABEL_21:
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[10];
  int v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  uint64_t v26 = v25[1];
  *int v24 = *v25;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  uint64_t v27 = v25[3];
  v24[2] = v25[2];
  v24[3] = v27;
  swift_bridgeObjectRelease();
  uint64_t v28 = v25[5];
  v24[4] = v25[4];
  v24[5] = v28;
  swift_bridgeObjectRelease();
  v24[6] = v25[6];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CompletePromptRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F84EADC);
}

uint64_t sub_25F84EADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_14Tm(a1, a2, a3, &demangling cache variable for type metadata for Constraints?);
}

uint64_t storeEnumTagSinglePayload for CompletePromptRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F84EAFC);
}

uint64_t sub_25F84EAFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_15Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for Constraints?);
}

void type metadata completion function for CompletePromptRequest()
{
  type metadata accessor for Constraints?(319, &lazy cache variable for type metadata for Constraints?, (void (*)(uint64_t))type metadata accessor for Constraints);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolDescription(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for ToolDescription(a1, a2, a3, type metadata accessor for ToolType, type metadata accessor for FunctionDescription, MEMORY[0x263F40DE8]);
}

uint64_t destroy for ToolDescription(uint64_t a1, uint64_t a2)
{
  return destroy for ToolDescription(a1, a2, type metadata accessor for FunctionDescription, MEMORY[0x263F40DE8]);
}

void *initializeWithCopy for ToolDescription(void *a1, void *a2, uint64_t a3)
{
  return initializeWithCopy for ToolDescription(a1, a2, a3, type metadata accessor for FunctionDescription, MEMORY[0x263F40DE8], type metadata accessor for ToolType);
}

void *assignWithCopy for ToolDescription(void *a1, void *a2, uint64_t a3)
{
  return assignWithCopy for ToolDescription(a1, a2, a3, type metadata accessor for FunctionDescription, MEMORY[0x263F40DE8], type metadata accessor for FunctionDescription, type metadata accessor for ToolType);
}

_OWORD *initializeWithTake for ToolDescription(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return initializeWithTake for ToolDescription(a1, a2, a3, type metadata accessor for FunctionDescription, MEMORY[0x263F40DE8], type metadata accessor for ToolType);
}

void *assignWithTake for ToolDescription(void *a1, void *a2, uint64_t a3)
{
  return assignWithTake for ToolDescription(a1, a2, a3, type metadata accessor for FunctionDescription, MEMORY[0x263F40DE8], type metadata accessor for FunctionDescription, type metadata accessor for ToolType);
}

uint64_t getEnumTagSinglePayload for ToolDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F84ED90);
}

uint64_t sub_25F84ED90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for ToolType);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);
  return v7(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for ToolDescription(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F84EE2C);
}

uint64_t sub_25F84EE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for ToolType);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = a5(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(a1, a2, a2, v7);
}

uint64_t type metadata completion function for ToolDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for RegisterDocumentResponseElement(a1, a2, a3, type metadata accessor for ToolType);
}

uint64_t type metadata completion function for RegisterDocumentResponseElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for ToolType(a1, a2, a3, type metadata accessor for FunctionDescription, MEMORY[0x263F40DE8]);
}

void *initializeWithCopy for ToolType(void *a1, void *a2, uint64_t a3)
{
  return initializeWithCopy for ToolType(a1, a2, a3, type metadata accessor for FunctionDescription, MEMORY[0x263F40DE8]);
}

void *assignWithCopy for ToolType(void *a1, void *a2, uint64_t a3)
{
  return assignWithCopy for ToolType(a1, a2, a3, type metadata accessor for FunctionDescription, MEMORY[0x263F40DE8], type metadata accessor for FunctionDescription);
}

_OWORD *initializeWithTake for ToolType(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return initializeWithTake for ToolType(a1, a2, a3, type metadata accessor for FunctionDescription, MEMORY[0x263F40DE8]);
}

void *assignWithTake for ToolType(void *a1, void *a2, uint64_t a3)
{
  return assignWithTake for ToolType(a1, a2, a3, type metadata accessor for FunctionDescription, MEMORY[0x263F40DE8], type metadata accessor for FunctionDescription);
}

uint64_t getEnumTagSinglePayload for ToolType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F84F078);
}

uint64_t sub_25F84F078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_20Tm(a1, a2, a3, type metadata accessor for FunctionDescription);
}

uint64_t storeEnumTagSinglePayload for ToolType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F84F0A4);
}

uint64_t sub_25F84F0A4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_21Tm(a1, a2, a3, a4, type metadata accessor for FunctionDescription);
}

uint64_t getEnumTag for ToolType(uint64_t a1, uint64_t a2)
{
  return getEnumTag for ToolType(a1, a2, type metadata accessor for FunctionDescription);
}

uint64_t destructiveInjectEnumTag for ToolType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return destructiveInjectEnumTag for ToolType(a1, a2, a3, type metadata accessor for FunctionDescription);
}

uint64_t type metadata completion function for ToolType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for ToolType(a1, a2, a3, type metadata accessor for FunctionDescription);
}

uint64_t *initializeBufferWithCopyOfBuffer for FunctionDescription(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for FunctionDescription(a1, a2, a3, MEMORY[0x263F40DE8]);
}

uint64_t destroy for FunctionDescription(uint64_t a1, uint64_t a2)
{
  return destroy for FunctionDescription(a1, a2, MEMORY[0x263F40DE8]);
}

void *initializeWithCopy for FunctionDescription(void *a1, void *a2, uint64_t a3)
{
  return initializeWithCopy for FunctionDescription(a1, a2, a3, MEMORY[0x263F40DE8]);
}

void *assignWithCopy for FunctionDescription(void *a1, void *a2, uint64_t a3)
{
  return assignWithCopy for FunctionDescription(a1, a2, a3, MEMORY[0x263F40DE8]);
}

_OWORD *initializeWithTake for FunctionDescription(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return initializeWithTake for FunctionDescription(a1, a2, a3, MEMORY[0x263F40DE8]);
}

void *assignWithTake for FunctionDescription(void *a1, void *a2, uint64_t a3)
{
  return assignWithTake for FunctionDescription(a1, a2, a3, MEMORY[0x263F40DE8]);
}

uint64_t getEnumTagSinglePayload for FunctionDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F84F1A8);
}

uint64_t sub_25F84F1A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_23Tm(a1, a2, a3, MEMORY[0x263F40DE8]);
}

uint64_t storeEnumTagSinglePayload for FunctionDescription(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F84F1D4);
}

uint64_t sub_25F84F1D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_24Tm(a1, a2, a3, a4, MEMORY[0x263F40DE8]);
}

uint64_t type metadata completion function for FunctionDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for FunctionDescription(a1, a2, a3, MEMORY[0x263F40DE8]);
}

__n128 __swift_memcpy176_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

ValueMetadata *type metadata accessor for CompletePromptResponse()
{
  return &type metadata for CompletePromptResponse;
}

uint64_t type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope);
}

uint64_t getEnumTagSinglePayload for CompletePromptResponseElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F84F2AC);
}

uint64_t sub_25F84F2AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for PromptCompletionStreamElementEnvelope);
}

uint64_t storeEnumTagSinglePayload for CompletePromptResponseElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F84F2D8);
}

uint64_t sub_25F84F2D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for PromptCompletionStreamElementEnvelope);
}

uint64_t type metadata completion function for CompletePromptResponseElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for RegisterDocumentResponseElement(a1, a2, a3, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
}

uint64_t *initializeBufferWithCopyOfBuffer for Constraints(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v9 = type metadata accessor for GenerationSchema();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for Constraints(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2 || result == 1)
  {
    return swift_bridgeObjectRelease();
  }
  else if (!result)
  {
    uint64_t v3 = type metadata accessor for GenerationSchema();
    long long v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *initializeWithCopy for Constraints(void *a1, void *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for GenerationSchema();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for Constraints(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of DocumentResourceEnvelope((uint64_t)a1, type metadata accessor for Constraints);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v5 = type metadata accessor for GenerationSchema();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for Constraints(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for GenerationSchema();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for Constraints(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of DocumentResourceEnvelope((uint64_t)a1, type metadata accessor for Constraints);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for GenerationSchema();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for Constraints()
{
  uint64_t result = type metadata accessor for GenerationSchema();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for RequestMetadata()
{
  return &type metadata for RequestMetadata;
}

uint64_t destroy for CompletePromptResponse(void *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(a1[7], a1[8]);
  uint64_t result = a1[10];
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for CompletePromptResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  unint64_t v7 = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v6, v7);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v7;
  uint64_t v8 = *(void *)(a2 + 80);
  if (v8)
  {
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = v8;
    uint64_t v9 = *(void *)(a2 + 96);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = v9;
    uint64_t v10 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = v10;
    uint64_t v11 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = v11;
    uint64_t v12 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = v12;
    uint64_t v13 = *(void *)(a2 + 160);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = v13;
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v14;
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    long long v15 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v15;
    long long v16 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v16;
  }
  return a1;
}

void *assignWithCopy for CompletePromptResponse(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[7];
  unint64_t v5 = a2[8];
  outlined copy of Data._Representation(v4, v5);
  uint64_t v6 = a1[7];
  unint64_t v7 = a1[8];
  a1[7] = v4;
  a1[8] = v5;
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = a1 + 9;
  uint64_t v9 = a2 + 9;
  uint64_t v10 = a2[10];
  if (a1[10])
  {
    if (v10)
    {
      a1[9] = a2[9];
      a1[10] = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[11] = a2[11];
      a1[12] = a2[12];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[13] = a2[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[14] = a2[14];
      a1[15] = a2[15];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[16] = a2[16];
      a1[17] = a2[17];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[18] = a2[18];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[19] = a2[19];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[20] = a2[20];
      a1[21] = a2[21];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of PromptRenderingEnvelope((uint64_t)(a1 + 9));
      long long v12 = *(_OWORD *)(a2 + 11);
      long long v11 = *(_OWORD *)(a2 + 13);
      *uint64_t v8 = *v9;
      *(_OWORD *)(a1 + 11) = v12;
      *(_OWORD *)(a1 + 13) = v11;
      long long v14 = *(_OWORD *)(a2 + 17);
      long long v13 = *(_OWORD *)(a2 + 19);
      long long v15 = *(_OWORD *)(a2 + 15);
      a1[21] = a2[21];
      *(_OWORD *)(a1 + 17) = v14;
      *(_OWORD *)(a1 + 19) = v13;
      *(_OWORD *)(a1 + 15) = v15;
    }
  }
  else if (v10)
  {
    a1[9] = a2[9];
    a1[10] = a2[10];
    a1[11] = a2[11];
    a1[12] = a2[12];
    a1[13] = a2[13];
    a1[14] = a2[14];
    a1[15] = a2[15];
    a1[16] = a2[16];
    a1[17] = a2[17];
    a1[18] = a2[18];
    a1[19] = a2[19];
    a1[20] = a2[20];
    a1[21] = a2[21];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v16 = *v9;
    long long v17 = *(_OWORD *)(a2 + 13);
    *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(a1 + 13) = v17;
    *uint64_t v8 = v16;
    long long v18 = *(_OWORD *)(a2 + 15);
    long long v19 = *(_OWORD *)(a2 + 17);
    long long v20 = *(_OWORD *)(a2 + 19);
    a1[21] = a2[21];
    *(_OWORD *)(a1 + 17) = v19;
    *(_OWORD *)(a1 + 19) = v20;
    *(_OWORD *)(a1 + 15) = v18;
  }
  return a1;
}

uint64_t assignWithTake for CompletePromptResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a1 + 56);
  unint64_t v6 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  outlined consume of Data._Representation(v5, v6);
  if (!*(void *)(a1 + 80)) {
    goto LABEL_5;
  }
  uint64_t v7 = *(void *)(a2 + 80);
  if (!v7)
  {
    outlined destroy of PromptRenderingEnvelope(a1 + 72);
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v12;
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    long long v13 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v13;
    long long v14 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v14;
    return a1;
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v11;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CompletePromptResponse(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 176)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CompletePromptResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 176) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 176) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PromptCompletionEnvelope()
{
  return &type metadata for PromptCompletionEnvelope;
}

void *initializeBufferWithCopyOfBuffer for CompletePromptResponseElement(void *a1, void *a2)
{
  int v4 = *(_DWORD *)(*(void *)(type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope(0) - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (void *)(v7 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        uint64_t v9 = a2[3];
        a1[2] = a2[2];
        a1[3] = v9;
        uint64_t v10 = a2[5];
        a1[4] = a2[4];
        a1[5] = v10;
        uint64_t v11 = a2[7];
        a1[6] = a2[6];
        a1[7] = v11;
        uint64_t v12 = a2[9];
        a1[8] = a2[8];
        a1[9] = v12;
        uint64_t v13 = a2[11];
        a1[10] = a2[10];
        a1[11] = v13;
        uint64_t v14 = a2[13];
        a1[12] = a2[12];
        a1[13] = v14;
        a1[14] = a2[14];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 2u:
        uint64_t v15 = a2[1];
        *a1 = *a2;
        a1[1] = v15;
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v16 = a2[1];
        *a1 = *a2;
        a1[1] = v16;
        uint64_t v17 = a2[3];
        a1[2] = a2[2];
        a1[3] = v17;
        a1[4] = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v18 = a2[1];
        *a1 = *a2;
        a1[1] = v18;
        uint64_t v19 = a2[3];
        a1[2] = a2[2];
        a1[3] = v19;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        a1[6] = a2[6];
        long long v20 = a2 + 7;
        unint64_t v21 = a2[8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v21 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 7) = *(_OWORD *)v20;
        }
        else
        {
          uint64_t v50 = *v20;
          outlined copy of Data._Representation(*v20, v21);
          a1[7] = v50;
          a1[8] = v21;
        }
        break;
      case 5u:
        uint64_t v22 = a2[1];
        *a1 = *a2;
        a1[1] = v22;
        uint64_t v23 = a2[3];
        a1[2] = a2[2];
        a1[3] = v23;
        a1[4] = a2[4];
        uint64_t v24 = *(int *)(type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(0)
                     + 28);
        uint64_t v25 = (char *)a1 + v24;
        uint64_t v26 = (char *)a2 + v24;
        *(void *)((char *)a1 + v24) = *(void *)((char *)a2 + v24);
        uint64_t v27 = *(int *)(type metadata accessor for AnnotationEnvelope(0) + 20);
        uint64_t v28 = &v25[v27];
        unint64_t v29 = &v26[v27];
        type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v30 = type metadata accessor for DocumentResourceIdentifier();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
        }
        else
        {
          uint64_t v51 = *((void *)v29 + 1);
          *(void *)uint64_t v28 = *(void *)v29;
          *((void *)v28 + 1) = v51;
          uint64_t v52 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
          uint64_t v53 = &v28[v52];
          uint64_t v54 = &v29[v52];
          uint64_t v55 = type metadata accessor for URL();
          uint64_t v56 = *(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 16);
          swift_bridgeObjectRetain();
          v56(v53, v54, v55);
        }
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
        uint64_t v31 = a2[1];
        *a1 = *a2;
        a1[1] = v31;
        uint64_t v32 = a2[3];
        a1[2] = a2[2];
        a1[3] = v32;
        uint64_t v33 = a2[5];
        a1[4] = a2[4];
        a1[5] = v33;
        uint64_t v34 = a2[7];
        a1[6] = a2[6];
        a1[7] = v34;
        uint64_t v35 = a2[9];
        a1[8] = a2[8];
        a1[9] = v35;
        int v36 = a2 + 10;
        unint64_t v37 = a2[11];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v37 >> 60 == 15)
        {
          *((_OWORD *)a1 + 5) = *(_OWORD *)v36;
        }
        else
        {
          uint64_t v57 = *v36;
          outlined copy of Data._Representation(*v36, v37);
          a1[10] = v57;
          a1[11] = v37;
        }
        break;
      case 7u:
        uint64_t v38 = a2[1];
        *a1 = *a2;
        a1[1] = v38;
        uint64_t v39 = a2[3];
        a1[2] = a2[2];
        a1[3] = v39;
        uint64_t v40 = a2[5];
        a1[4] = a2[4];
        unint64_t v41 = a2[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v40, v41);
        a1[5] = v40;
        a1[6] = v41;
        break;
      case 8u:
        uint64_t v46 = a2[1];
        *a1 = *a2;
        a1[1] = v46;
        uint64_t v47 = a2[3];
        a1[2] = a2[2];
        a1[3] = v47;
        uint64_t v48 = a2 + 4;
        unint64_t v49 = a2[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v49 >= 3)
        {
          a1[4] = *v48;
          a1[5] = v49;
          swift_bridgeObjectRetain();
        }
        else
        {
          *((_OWORD *)a1 + 2) = *(_OWORD *)v48;
        }
        uint64_t v59 = a2[6];
        unint64_t v58 = a2[7];
        outlined copy of Data._Representation(v59, v58);
        a1[6] = v59;
        a1[7] = v58;
        break;
      case 9u:
        uint64_t v42 = a2[1];
        *a1 = *a2;
        a1[1] = v42;
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        swift_bridgeObjectRetain();
        break;
      case 0xAu:
        uint64_t v43 = a2[1];
        *a1 = *a2;
        a1[1] = v43;
        uint64_t v45 = a2[2];
        unint64_t v44 = a2[3];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v45, v44);
        a1[2] = v45;
        a1[3] = v44;
        break;
      default:
        uint64_t v5 = a2[1];
        *a1 = *a2;
        a1[1] = v5;
        uint64_t v6 = a2[3];
        a1[2] = a2[2];
        a1[3] = v6;
        a1[4] = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for CompletePromptResponseElement(void *a1)
{
  type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 3:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    case 2:
LABEL_4:
      swift_bridgeObjectRelease();
      goto LABEL_15;
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v3 = a1[8];
      if (v3 >> 60 == 15) {
        return result;
      }
      uint64_t v4 = a1[7];
      goto LABEL_24;
    case 5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v5 = (char *)a1
         + *(int *)(type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(0)
                  + 28);
      uint64_t v6 = &v5[*(int *)(type metadata accessor for AnnotationEnvelope(0) + 20)];
      type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v7 = type metadata accessor for DocumentResourceIdentifier();
      }
      else
      {
        swift_bridgeObjectRelease();
        v6 += *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
        uint64_t v7 = type metadata accessor for URL();
      }
      uint64_t v8 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8);
      return v8(v6, v7);
    case 6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v3 = a1[11];
      if (v3 >> 60 == 15) {
        return result;
      }
      uint64_t v4 = a1[10];
      goto LABEL_24;
    case 7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v4 = a1[5];
      unint64_t v3 = a1[6];
      goto LABEL_24;
    case 8:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a1[5] >= 3uLL) {
        swift_bridgeObjectRelease();
      }
      uint64_t v4 = a1[6];
      unint64_t v3 = a1[7];
      goto LABEL_24;
    case 9:
LABEL_15:
      return swift_bridgeObjectRelease();
    case 10:
      swift_bridgeObjectRelease();
      uint64_t v4 = a1[2];
      unint64_t v3 = a1[3];
LABEL_24:
      uint64_t result = outlined consume of Data._Representation(v4, v3);
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for CompletePromptResponseElement(void *a1, void *a2)
{
  type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      uint64_t v7 = a2[3];
      a1[2] = a2[2];
      a1[3] = v7;
      uint64_t v8 = a2[5];
      a1[4] = a2[4];
      a1[5] = v8;
      uint64_t v9 = a2[7];
      a1[6] = a2[6];
      a1[7] = v9;
      uint64_t v10 = a2[9];
      a1[8] = a2[8];
      a1[9] = v10;
      uint64_t v11 = a2[11];
      a1[10] = a2[10];
      a1[11] = v11;
      uint64_t v12 = a2[13];
      a1[12] = a2[12];
      a1[13] = v12;
      a1[14] = a2[14];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 2u:
      uint64_t v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      a1[2] = a2[2];
      goto LABEL_7;
    case 3u:
      uint64_t v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      uint64_t v15 = a2[3];
      a1[2] = a2[2];
      a1[3] = v15;
      goto LABEL_6;
    case 4u:
      uint64_t v16 = a2[1];
      *a1 = *a2;
      a1[1] = v16;
      uint64_t v17 = a2[3];
      a1[2] = a2[2];
      a1[3] = v17;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      a1[6] = a2[6];
      uint64_t v18 = a2 + 7;
      unint64_t v19 = a2[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v19 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 7) = *(_OWORD *)v18;
      }
      else
      {
        uint64_t v48 = *v18;
        outlined copy of Data._Representation(*v18, v19);
        a1[7] = v48;
        a1[8] = v19;
      }
      goto LABEL_25;
    case 5u:
      uint64_t v20 = a2[1];
      *a1 = *a2;
      a1[1] = v20;
      uint64_t v21 = a2[3];
      a1[2] = a2[2];
      a1[3] = v21;
      a1[4] = a2[4];
      uint64_t v22 = *(int *)(type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(0)
                   + 28);
      uint64_t v23 = (char *)a1 + v22;
      uint64_t v24 = (char *)a2 + v22;
      *(void *)((char *)a1 + v22) = *(void *)((char *)a2 + v22);
      uint64_t v25 = *(int *)(type metadata accessor for AnnotationEnvelope(0) + 20);
      uint64_t v26 = &v23[v25];
      uint64_t v27 = &v24[v25];
      type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v28 = type metadata accessor for DocumentResourceIdentifier();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
      }
      else
      {
        uint64_t v49 = *((void *)v27 + 1);
        *(void *)uint64_t v26 = *(void *)v27;
        *((void *)v26 + 1) = v49;
        uint64_t v50 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
        uint64_t v51 = &v26[v50];
        unint64_t v58 = &v27[v50];
        uint64_t v52 = type metadata accessor for URL();
        uint64_t v53 = *(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16);
        swift_bridgeObjectRetain();
        v53(v51, v58, v52);
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_25;
    case 6u:
      uint64_t v29 = a2[1];
      *a1 = *a2;
      a1[1] = v29;
      uint64_t v30 = a2[3];
      a1[2] = a2[2];
      a1[3] = v30;
      uint64_t v31 = a2[5];
      a1[4] = a2[4];
      a1[5] = v31;
      uint64_t v32 = a2[7];
      a1[6] = a2[6];
      a1[7] = v32;
      uint64_t v33 = a2[9];
      a1[8] = a2[8];
      a1[9] = v33;
      uint64_t v34 = a2 + 10;
      unint64_t v35 = a2[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v35 >> 60 == 15)
      {
        *((_OWORD *)a1 + 5) = *(_OWORD *)v34;
      }
      else
      {
        uint64_t v54 = *v34;
        outlined copy of Data._Representation(*v34, v35);
        a1[10] = v54;
        a1[11] = v35;
      }
      goto LABEL_25;
    case 7u:
      uint64_t v36 = a2[1];
      *a1 = *a2;
      a1[1] = v36;
      uint64_t v37 = a2[3];
      a1[2] = a2[2];
      a1[3] = v37;
      uint64_t v38 = a2[5];
      a1[4] = a2[4];
      unint64_t v39 = a2[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v38, v39);
      a1[5] = v38;
      a1[6] = v39;
      goto LABEL_25;
    case 8u:
      uint64_t v44 = a2[1];
      *a1 = *a2;
      a1[1] = v44;
      uint64_t v45 = a2[3];
      a1[2] = a2[2];
      a1[3] = v45;
      uint64_t v46 = a2 + 4;
      unint64_t v47 = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v47 >= 3)
      {
        a1[4] = *v46;
        a1[5] = v47;
        swift_bridgeObjectRetain();
      }
      else
      {
        *((_OWORD *)a1 + 2) = *(_OWORD *)v46;
      }
      uint64_t v56 = a2[6];
      unint64_t v55 = a2[7];
      outlined copy of Data._Representation(v56, v55);
      a1[6] = v56;
      a1[7] = v55;
      goto LABEL_25;
    case 9u:
      uint64_t v40 = a2[1];
      *a1 = *a2;
      a1[1] = v40;
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      swift_bridgeObjectRetain();
      goto LABEL_25;
    case 0xAu:
      uint64_t v41 = a2[1];
      *a1 = *a2;
      a1[1] = v41;
      uint64_t v43 = a2[2];
      unint64_t v42 = a2[3];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v43, v42);
      a1[2] = v43;
      a1[3] = v42;
      goto LABEL_25;
    default:
      uint64_t v4 = a2[1];
      *a1 = *a2;
      a1[1] = v4;
      uint64_t v5 = a2[3];
      a1[2] = a2[2];
      a1[3] = v5;
LABEL_6:
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
LABEL_7:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_25:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
}

void *assignWithCopy for CompletePromptResponseElement(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of DocumentResourceEnvelope((uint64_t)a1, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
    type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        a1[7] = a2[7];
        a1[8] = a2[8];
        a1[9] = a2[9];
        a1[10] = a2[10];
        a1[11] = a2[11];
        a1[12] = a2[12];
        a1[13] = a2[13];
        a1[14] = a2[14];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        goto LABEL_8;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        goto LABEL_7;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        uint64_t v4 = a2 + 7;
        unint64_t v5 = a2[8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v5 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 7) = *(_OWORD *)v4;
        }
        else
        {
          uint64_t v20 = *v4;
          outlined copy of Data._Representation(*v4, v5);
          a1[7] = v20;
          a1[8] = v5;
        }
        goto LABEL_26;
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        uint64_t v6 = *(int *)(type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(0)
                    + 28);
        uint64_t v7 = (char *)a1 + v6;
        uint64_t v8 = (char *)a2 + v6;
        *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
        uint64_t v9 = *(int *)(type metadata accessor for AnnotationEnvelope(0) + 20);
        uint64_t v10 = &v7[v9];
        uint64_t v11 = &v8[v9];
        type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v12 = type metadata accessor for DocumentResourceIdentifier();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
        }
        else
        {
          *(void *)uint64_t v10 = *(void *)v11;
          *((void *)v10 + 1) = *((void *)v11 + 1);
          uint64_t v21 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
          uint64_t v22 = &v10[v21];
          uint64_t v29 = &v11[v21];
          uint64_t v23 = type metadata accessor for URL();
          uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16);
          swift_bridgeObjectRetain();
          v24(v22, v29, v23);
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_26;
      case 6u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        a1[7] = a2[7];
        a1[8] = a2[8];
        a1[9] = a2[9];
        uint64_t v13 = a2 + 10;
        unint64_t v14 = a2[11];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v14 >> 60 == 15)
        {
          *((_OWORD *)a1 + 5) = *(_OWORD *)v13;
        }
        else
        {
          uint64_t v25 = *v13;
          outlined copy of Data._Representation(*v13, v14);
          a1[10] = v25;
          a1[11] = v14;
        }
        goto LABEL_26;
      case 7u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        uint64_t v16 = a2[5];
        unint64_t v15 = a2[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v16, v15);
        a1[5] = v16;
        a1[6] = v15;
        goto LABEL_26;
      case 8u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        unint64_t v19 = a2[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v19 >= 3)
        {
          a1[4] = a2[4];
          a1[5] = a2[5];
          swift_bridgeObjectRetain();
        }
        else
        {
          *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        }
        uint64_t v27 = a2[6];
        unint64_t v26 = a2[7];
        outlined copy of Data._Representation(v27, v26);
        a1[6] = v27;
        a1[7] = v26;
        goto LABEL_26;
      case 9u:
        *a1 = *a2;
        a1[1] = a2[1];
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_26;
      case 0xAu:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v18 = a2[2];
        unint64_t v17 = a2[3];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v18, v17);
        a1[2] = v18;
        a1[3] = v17;
        goto LABEL_26;
      default:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
LABEL_7:
        a1[4] = a2[4];
        swift_bridgeObjectRetain();
LABEL_8:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_26:
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
  return a1;
}

_OWORD *initializeWithTake for CompletePromptResponseElement(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4 = type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope(0);
  if (swift_getEnumCaseMultiPayload() == 5)
  {
    long long v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    *((void *)a1 + 4) = *((void *)a2 + 4);
    uint64_t v6 = *(int *)(type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(0)
                + 28);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
    uint64_t v9 = *(int *)(type metadata accessor for AnnotationEnvelope(0) + 20);
    uint64_t v10 = &v7[v9];
    uint64_t v11 = &v8[v9];
    type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    }
    else
    {
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
      uint64_t v13 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
      unint64_t v14 = &v10[v13];
      unint64_t v15 = &v11[v13];
      uint64_t v16 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
    }
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for CompletePromptResponseElement(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of DocumentResourceEnvelope((uint64_t)a1, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
    uint64_t v4 = type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope(0);
    if (swift_getEnumCaseMultiPayload() == 5)
    {
      long long v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      uint64_t v6 = *(int *)(type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(0)
                  + 28);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
      uint64_t v9 = *(int *)(type metadata accessor for AnnotationEnvelope(0) + 20);
      uint64_t v10 = &v7[v9];
      uint64_t v11 = &v8[v9];
      type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v12 = type metadata accessor for DocumentResourceIdentifier();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
      }
      else
      {
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
        uint64_t v13 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
        unint64_t v14 = &v10[v13];
        unint64_t v15 = &v11[v13];
        uint64_t v16 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
      }
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletionStreamElementEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F8515EC);
}

uint64_t sub_25F8515EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
}

uint64_t storeEnumTagSinglePayload for PromptCompletionStreamElementEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F851618);
}

uint64_t sub_25F851618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
}

ValueMetadata *type metadata accessor for ToolChoiceEnvelope()
{
  return &type metadata for ToolChoiceEnvelope;
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentRegistrationEnvelope(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    uint64_t v12 = *(int *)(a3 + 20);
    uint64_t v13 = (char *)a1 + v12;
    unint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for DocumentRegistrationEnvelope(uint64_t a1, uint64_t a2)
{
  type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_bridgeObjectRelease();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  return v8(v6, v7);
}

void *initializeWithCopy for DocumentRegistrationEnvelope(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

void *assignWithCopy for DocumentRegistrationEnvelope(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of DocumentResourceEnvelope((uint64_t)a1, type metadata accessor for DocumentRegistrationStatusEnvelope);
    uint64_t v6 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

char *initializeWithTake for DocumentRegistrationEnvelope(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

char *assignWithTake for DocumentRegistrationEnvelope(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of DocumentResourceEnvelope((uint64_t)a1, type metadata accessor for DocumentRegistrationStatusEnvelope);
    uint64_t v6 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentRegistrationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F851D90);
}

uint64_t sub_25F851D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for DocumentRegistrationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F851E9C);
}

uint64_t sub_25F851E9C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for URL();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata completion function for DocumentRegistrationEnvelope()
{
  uint64_t result = type metadata accessor for DocumentRegistrationStatusEnvelope(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t destroy for SamplingParametersEnvelope()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SamplingParametersEnvelope(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v3;
  uint64_t v4 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v4;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SamplingParametersEnvelope(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a2[4];
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = a2[6];
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = a2[8];
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 80) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[11];
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(void *)(a1 + 88) = v9;
  uint64_t v10 = a2[13];
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  *(void *)(a1 + 104) = v10;
  uint64_t v11 = a2[15];
  *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
  *(void *)(a1 + 120) = v11;
  *(unsigned char *)(a1 + 129) = *((unsigned char *)a2 + 129);
  return a1;
}

__n128 __swift_memcpy130_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for SamplingParametersEnvelope(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for SamplingParametersEnvelope(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 130)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SamplingParametersEnvelope(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 128) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 130) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 80) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 130) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SamplingParametersEnvelope()
{
  return &type metadata for SamplingParametersEnvelope;
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolDescriptionEnvelope(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for ToolDescription(a1, a2, a3, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope, MEMORY[0x263F40C58]);
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolDescription(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v10 = *(void *)(a4(0) - 8);
  int v11 = *(_DWORD *)(v10 + 80);
  if ((v11 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v11 + 16) & ~(unint64_t)v11));
    swift_retain();
  }
  else
  {
    uint64_t v12 = v10;
    uint64_t v13 = a5(0);
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v14 + 48))(a2, 2, v13))
    {
      memcpy(a1, a2, *(void *)(v12 + 64));
    }
    else
    {
      uint64_t v16 = a2[1];
      *a1 = *a2;
      a1[1] = v16;
      uint64_t v17 = a2[3];
      a1[2] = a2[2];
      a1[3] = v17;
      uint64_t v18 = *(int *)(v13 + 24);
      unint64_t v19 = (char *)a1 + v18;
      uint64_t v20 = (char *)a2 + v18;
      uint64_t v21 = a6(0);
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v22(v19, v20, v21);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v14 + 56))(a1, 0, 2, v13);
    }
  }
  return a1;
}

uint64_t destroy for ToolDescriptionEnvelope(uint64_t a1, uint64_t a2)
{
  return destroy for ToolDescription(a1, a2, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope, MEMORY[0x263F40C58]);
}

uint64_t destroy for ToolDescription(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v6 = a3(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(a1, 2, v6);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = a1 + *(int *)(v6 + 24);
    uint64_t v9 = a4(0);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
    return v10(v8, v9);
  }
  return result;
}

void *initializeWithCopy for ToolDescriptionEnvelope(void *a1, void *a2, uint64_t a3)
{
  return initializeWithCopy for ToolDescription(a1, a2, a3, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope, MEMORY[0x263F40C58], type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
}

void *initializeWithCopy for ToolDescription(void *a1, void *a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v10 = a4(0);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(a2, 2, v10))
  {
    uint64_t v12 = a6(0);
    memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = a2[1];
    *a1 = *a2;
    a1[1] = v13;
    uint64_t v14 = a2[3];
    a1[2] = a2[2];
    a1[3] = v14;
    uint64_t v15 = *(int *)(v10 + 24);
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = a5(0);
    unint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19(v16, v17, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 2, v10);
  }
  return a1;
}

void *assignWithCopy for ToolDescriptionEnvelope(void *a1, void *a2, uint64_t a3)
{
  return assignWithCopy for ToolDescription(a1, a2, a3, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope, MEMORY[0x263F40C58], type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
}

void *assignWithCopy for ToolDescription(void *a1, void *a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  uint64_t v12 = a4(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(a1, 2, v12);
  int v16 = v14(a2, 2, v12);
  if (!v15)
  {
    if (!v16)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v24 = *(int *)(v12 + 24);
      uint64_t v25 = (char *)a1 + v24;
      unint64_t v26 = (char *)a2 + v24;
      uint64_t v27 = a5(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 24))(v25, v26, v27);
      return a1;
    }
    outlined destroy of DocumentResourceEnvelope((uint64_t)a1, a6);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v22 = a7(0);
    memcpy(a1, a2, *(void *)(*(void *)(v22 - 8) + 64));
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v17 = *(int *)(v12 + 24);
  uint64_t v18 = (char *)a1 + v17;
  unint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = a5(0);
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21(v18, v19, v20);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(a1, 0, 2, v12);
  return a1;
}

_OWORD *initializeWithTake for ToolDescriptionEnvelope(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return initializeWithTake for ToolDescription(a1, a2, a3, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope, MEMORY[0x263F40C58], type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
}

_OWORD *initializeWithTake for ToolDescription(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v10 = a4(0);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48))(a2, 2, v10))
  {
    uint64_t v12 = a6(0);
    memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    long long v13 = a2[1];
    *a1 = *a2;
    a1[1] = v13;
    uint64_t v14 = *(int *)(v10 + 24);
    int v15 = (char *)a1 + v14;
    int v16 = (char *)a2 + v14;
    uint64_t v17 = a5(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 2, v10);
  }
  return a1;
}

void *assignWithTake for ToolDescriptionEnvelope(void *a1, void *a2, uint64_t a3)
{
  return assignWithTake for ToolDescription(a1, a2, a3, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope, MEMORY[0x263F40C58], type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
}

void *assignWithTake for ToolDescription(void *a1, void *a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  uint64_t v12 = a4(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(a1, 2, v12);
  int v16 = v14(a2, 2, v12);
  if (!v15)
  {
    if (!v16)
    {
      uint64_t v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      swift_bridgeObjectRelease();
      uint64_t v25 = a2[3];
      a1[2] = a2[2];
      a1[3] = v25;
      swift_bridgeObjectRelease();
      uint64_t v26 = *(int *)(v12 + 24);
      uint64_t v27 = (char *)a1 + v26;
      uint64_t v28 = (char *)a2 + v26;
      uint64_t v29 = a5(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 40))(v27, v28, v29);
      return a1;
    }
    outlined destroy of DocumentResourceEnvelope((uint64_t)a1, a6);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v22 = a7(0);
    memcpy(a1, a2, *(void *)(*(void *)(v22 - 8) + 64));
    return a1;
  }
  long long v17 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v17;
  uint64_t v18 = *(int *)(v12 + 24);
  unint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = a5(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(a1, 0, 2, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolDescriptionEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F852F20);
}

uint64_t sub_25F852F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
}

uint64_t storeEnumTagSinglePayload for ToolDescriptionEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F852F4C);
}

uint64_t sub_25F852F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
}

uint64_t type metadata completion function for ToolDescriptionEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for RegisterDocumentResponseElement(a1, a2, a3, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
}

uint64_t assignWithCopy for RequestPayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for RequestPayload(a1, a2, a3, type metadata accessor for RequestPayload);
}

_OWORD *assignWithTake for RequestPayload(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for RequestPayload(a1, a2, a3, type metadata accessor for RequestPayload);
}

uint64_t initializeBufferWithCopyOfBuffer for StreamingRequestPayload(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)a1 = *a2;
    a1 = v8 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = a2[1];
      if (v6)
      {
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v6;
        uint64_t v7 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v7;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v22 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v22;
      }
      int v75 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
      uint64_t v23 = v75[5];
      uint64_t v24 = (void *)(a1 + v23);
      uint64_t v25 = (uint64_t)a2 + v23;
      uint64_t v26 = *(uint64_t *)((char *)a2 + v23 + 8);
      *uint64_t v24 = *(uint64_t *)((char *)a2 + v23);
      v24[1] = v26;
      v24[2] = *(uint64_t *)((char *)a2 + v23 + 16);
      uint64_t v27 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      uint64_t v28 = (char *)v24 + v27;
      uint64_t v29 = (const void *)(v25 + v27);
      uint64_t v30 = type metadata accessor for Locale();
      uint64_t v31 = *(void *)(v30 - 8);
      uint64_t v32 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v32(v29, 1, v30))
      {
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v28, v29, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v31 + 16))(v28, v29, v30);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      }
      uint64_t v36 = v75[6];
      uint64_t v37 = a1 + v36;
      uint64_t v38 = (uint64_t)a2 + v36;
      *(void *)uint64_t v37 = *(void *)v38;
      *(unsigned char *)(v37 + 8) = *(unsigned char *)(v38 + 8);
      *(void *)(v37 + 16) = *(void *)(v38 + 16);
      *(unsigned char *)(v37 + 24) = *(unsigned char *)(v38 + 24);
      *(void *)(v37 + 32) = *(void *)(v38 + 32);
      *(unsigned char *)(v37 + 40) = *(unsigned char *)(v38 + 40);
      *(unsigned char *)(v37 + 56) = *(unsigned char *)(v38 + 56);
      *(void *)(v37 + 48) = *(void *)(v38 + 48);
      uint64_t v39 = *(void *)(v38 + 64);
      *(unsigned char *)(v37 + 72) = *(unsigned char *)(v38 + 72);
      *(void *)(v37 + 64) = v39;
      uint64_t v40 = *(void *)(v38 + 88);
      *(void *)(v37 + 80) = *(void *)(v38 + 80);
      *(void *)(v37 + 88) = v40;
      *(unsigned char *)(v37 + 96) = *(unsigned char *)(v38 + 96);
      *(void *)(v37 + 104) = *(void *)(v38 + 104);
      *(unsigned char *)(v37 + 112) = *(unsigned char *)(v38 + 112);
      *(void *)(v37 + 120) = *(void *)(v38 + 120);
      *(_WORD *)(v37 + 128) = *(_WORD *)(v38 + 128);
      *(void *)(a1 + v75[7]) = *(uint64_t *)((char *)a2 + v75[7]);
      uint64_t v41 = v75[8];
      uint64_t v42 = a1 + v41;
      uint64_t v43 = (_OWORD *)((char *)a2 + v41);
      unint64_t v44 = *(uint64_t *)((char *)a2 + v41 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v44 < 4)
      {
        *(_OWORD *)uint64_t v42 = *v43;
      }
      else
      {
        *(void *)uint64_t v42 = *(void *)v43;
        *(void *)(v42 + 8) = v44;
        swift_bridgeObjectRetain();
      }
      *(void *)(a1 + v75[9]) = *(uint64_t *)((char *)a2 + v75[9]);
      uint64_t v45 = v75[10];
      uint64_t v46 = (void *)(a1 + v45);
      unint64_t v47 = (uint64_t *)((char *)a2 + v45);
      uint64_t v48 = type metadata accessor for Constraints(0);
      uint64_t v49 = *(void *)(v48 - 8);
      uint64_t v50 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v49 + 48);
      swift_bridgeObjectRetain();
      if (v50(v47, 1, v48))
      {
        uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v46, v47, *(void *)(*(void *)(v51 - 8) + 64));
      }
      else
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
        {
          uint64_t v53 = v47[1];
          *uint64_t v46 = *v47;
          v46[1] = v53;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v65 = type metadata accessor for GenerationSchema();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v65 - 8) + 16))(v46, v47, v65);
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      }
      uint64_t v66 = v75[11];
      unint64_t v67 = (void *)(a1 + v66);
      int v68 = (uint64_t *)((char *)a2 + v66);
      uint64_t v69 = v68[1];
      *unint64_t v67 = *v68;
      v67[1] = v69;
      uint64_t v70 = v68[3];
      v67[2] = v68[2];
      v67[3] = v70;
      uint64_t v71 = v68[5];
      v67[4] = v68[4];
      v67[5] = v71;
      v67[6] = v68[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v9 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v9;
      uint64_t v10 = a2[3];
      *(void *)(a1 + 16) = a2[2];
      *(void *)(a1 + 24) = v10;
      *(void *)(a1 + 32) = a2[4];
      *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
      *(void *)(a1 + 48) = a2[6];
      *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
      uint64_t v11 = a2[8];
      *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
      *(void *)(a1 + 64) = v11;
      *(void *)(a1 + 80) = a2[10];
      *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
      *(void *)(a1 + 96) = a2[12];
      *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
      *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
      uint64_t v12 = a2[15];
      *(void *)(a1 + 112) = a2[14];
      *(void *)(a1 + 120) = v12;
      uint64_t v13 = a2[17];
      *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 144);
      *(void *)(a1 + 136) = v13;
      *(void *)(a1 + 152) = a2[19];
      *(_WORD *)(a1 + 160) = *((_WORD *)a2 + 80);
      uint64_t v14 = type metadata accessor for CompletePromptRequest(0);
      uint64_t v15 = *(int *)(v14 + 24);
      long long v73 = (int *)v14;
      __dst = (void *)(a1 + v15);
      int v16 = (uint64_t *)((char *)a2 + v15);
      uint64_t v17 = type metadata accessor for Constraints(0);
      uint64_t v18 = *(void *)(v17 - 8);
      unint64_t v19 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v19(v16, 1, v17))
      {
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(__dst, v16, *(void *)(*(void *)(v20 - 8) + 64));
        uint64_t v21 = v73;
      }
      else
      {
        int v34 = swift_getEnumCaseMultiPayload();
        if (v34 == 2 || v34 == 1)
        {
          uint64_t v35 = v16[1];
          void *__dst = *v16;
          __dst[1] = v35;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v54 = type metadata accessor for GenerationSchema();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v54 - 8) + 16))(__dst, v16, v54);
        }
        uint64_t v21 = v73;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
      }
      *(void *)(a1 + v21[7]) = *(uint64_t *)((char *)a2 + v21[7]);
      uint64_t v55 = v21[8];
      uint64_t v56 = a1 + v55;
      uint64_t v57 = (_OWORD *)((char *)a2 + v55);
      unint64_t v58 = *(uint64_t *)((char *)a2 + v55 + 8);
      swift_bridgeObjectRetain();
      if (v58 < 4)
      {
        *(_OWORD *)uint64_t v56 = *v57;
      }
      else
      {
        *(void *)uint64_t v56 = *(void *)v57;
        *(void *)(v56 + 8) = v58;
        swift_bridgeObjectRetain();
      }
      *(void *)(a1 + v21[9]) = *(uint64_t *)((char *)a2 + v21[9]);
      uint64_t v59 = v21[10];
      uint64_t v60 = (void *)(a1 + v59);
      unint64_t v61 = (uint64_t *)((char *)a2 + v59);
      uint64_t v62 = v61[1];
      *uint64_t v60 = *v61;
      v60[1] = v62;
      uint64_t v63 = v61[3];
      void v60[2] = v61[2];
      v60[3] = v63;
      uint64_t v64 = v61[5];
      v60[4] = v61[4];
      v60[5] = v64;
      v60[6] = v61[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for StreamingRequestPayload(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (*(void *)(a1 + 8))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    unint64_t v2 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
    uint64_t v3 = a1 + v2[5];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = v3 + *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
    uint64_t v5 = type metadata accessor for Locale();
    uint64_t v6 = *(void *)(v5 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(a1 + v2[8] + 8) >= 4uLL) {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v7 = a1 + v2[10];
    uint64_t v8 = type metadata accessor for Constraints(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        swift_bridgeObjectRelease();
      }
      else if (!EnumCaseMultiPayload)
      {
        uint64_t v10 = type metadata accessor for GenerationSchema();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v7, v10);
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = type metadata accessor for CompletePromptRequest(0);
    uint64_t v12 = a1 + *(int *)(v11 + 24);
    uint64_t v13 = type metadata accessor for Constraints(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
    {
      int v14 = swift_getEnumCaseMultiPayload();
      if (v14 == 2 || v14 == 1)
      {
        swift_bridgeObjectRelease();
      }
      else if (!v14)
      {
        uint64_t v15 = type metadata accessor for GenerationSchema();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v12, v15);
      }
    }
    swift_bridgeObjectRelease();
    if (*(void *)(a1 + *(int *)(v11 + 32) + 8) >= 4uLL) {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StreamingRequestPayload(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      uint64_t v5 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v19 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v19;
    }
    long long v72 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
    uint64_t v20 = v72[5];
    uint64_t v21 = (void *)(a1 + v20);
    uint64_t v22 = a2 + v20;
    uint64_t v23 = *(void *)(a2 + v20 + 8);
    void *v21 = *(void *)(a2 + v20);
    v21[1] = v23;
    void v21[2] = *(void *)(a2 + v20 + 16);
    uint64_t v24 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
    uint64_t v25 = (char *)v21 + v24;
    uint64_t v26 = (const void *)(v22 + v24);
    uint64_t v27 = type metadata accessor for Locale();
    uint64_t v28 = *(void *)(v27 - 8);
    uint64_t v29 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v29(v26, 1, v27))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    uint64_t v33 = v72[6];
    uint64_t v34 = a1 + v33;
    uint64_t v35 = a2 + v33;
    *(void *)uint64_t v34 = *(void *)v35;
    *(unsigned char *)(v34 + 8) = *(unsigned char *)(v35 + 8);
    *(void *)(v34 + 16) = *(void *)(v35 + 16);
    *(unsigned char *)(v34 + 24) = *(unsigned char *)(v35 + 24);
    *(void *)(v34 + 32) = *(void *)(v35 + 32);
    *(unsigned char *)(v34 + 40) = *(unsigned char *)(v35 + 40);
    *(unsigned char *)(v34 + 56) = *(unsigned char *)(v35 + 56);
    *(void *)(v34 + 48) = *(void *)(v35 + 48);
    uint64_t v36 = *(void *)(v35 + 64);
    *(unsigned char *)(v34 + 72) = *(unsigned char *)(v35 + 72);
    *(void *)(v34 + 64) = v36;
    uint64_t v37 = *(void *)(v35 + 88);
    *(void *)(v34 + 80) = *(void *)(v35 + 80);
    *(void *)(v34 + 88) = v37;
    *(unsigned char *)(v34 + 96) = *(unsigned char *)(v35 + 96);
    *(void *)(v34 + 104) = *(void *)(v35 + 104);
    *(unsigned char *)(v34 + 112) = *(unsigned char *)(v35 + 112);
    *(void *)(v34 + 120) = *(void *)(v35 + 120);
    *(_WORD *)(v34 + 128) = *(_WORD *)(v35 + 128);
    *(void *)(a1 + v72[7]) = *(void *)(a2 + v72[7]);
    uint64_t v38 = v72[8];
    uint64_t v39 = a1 + v38;
    uint64_t v40 = (_OWORD *)(a2 + v38);
    unint64_t v41 = *(void *)(a2 + v38 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v41 < 4)
    {
      *(_OWORD *)uint64_t v39 = *v40;
    }
    else
    {
      *(void *)uint64_t v39 = *(void *)v40;
      *(void *)(v39 + 8) = v41;
      swift_bridgeObjectRetain();
    }
    *(void *)(a1 + v72[9]) = *(void *)(a2 + v72[9]);
    uint64_t v42 = v72[10];
    uint64_t v43 = (void *)(a1 + v42);
    unint64_t v44 = (void *)(a2 + v42);
    uint64_t v45 = type metadata accessor for Constraints(0);
    uint64_t v46 = *(void *)(v45 - 8);
    unint64_t v47 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v46 + 48);
    swift_bridgeObjectRetain();
    if (v47(v44, 1, v45))
    {
      uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      memcpy(v43, v44, *(void *)(*(void *)(v48 - 8) + 64));
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        uint64_t v50 = v44[1];
        *uint64_t v43 = *v44;
        v43[1] = v50;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v62 = type metadata accessor for GenerationSchema();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v62 - 8) + 16))(v43, v44, v62);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
    }
    uint64_t v63 = v72[11];
    uint64_t v64 = (void *)(a1 + v63);
    uint64_t v65 = (void *)(a2 + v63);
    uint64_t v66 = v65[1];
    void *v64 = *v65;
    v64[1] = v66;
    uint64_t v67 = v65[3];
    v64[2] = v65[2];
    v64[3] = v67;
    uint64_t v68 = v65[5];
    v64[4] = v65[4];
    v64[5] = v68;
    v64[6] = v65[6];
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    uint64_t v8 = *(void *)(a2 + 64);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(void *)(a1 + 64) = v8;
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
    uint64_t v9 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = v9;
    uint64_t v10 = *(void *)(a2 + 136);
    *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
    *(void *)(a1 + 136) = v10;
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
    uint64_t v11 = type metadata accessor for CompletePromptRequest(0);
    uint64_t v12 = *(int *)(v11 + 24);
    uint64_t v70 = (int *)v11;
    __dst = (void *)(a1 + v12);
    uint64_t v13 = (void *)(a2 + v12);
    uint64_t v14 = type metadata accessor for Constraints(0);
    uint64_t v15 = *(void *)(v14 - 8);
    int v16 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v14))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64));
      uint64_t v18 = v70;
    }
    else
    {
      int v31 = swift_getEnumCaseMultiPayload();
      if (v31 == 2 || v31 == 1)
      {
        uint64_t v32 = v13[1];
        void *__dst = *v13;
        __dst[1] = v32;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v51 = type metadata accessor for GenerationSchema();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v51 - 8) + 16))(__dst, v13, v51);
      }
      uint64_t v18 = v70;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    *(void *)(a1 + v18[7]) = *(void *)(a2 + v18[7]);
    uint64_t v52 = v18[8];
    uint64_t v53 = a1 + v52;
    uint64_t v54 = (_OWORD *)(a2 + v52);
    unint64_t v55 = *(void *)(a2 + v52 + 8);
    swift_bridgeObjectRetain();
    if (v55 < 4)
    {
      *(_OWORD *)uint64_t v53 = *v54;
    }
    else
    {
      *(void *)uint64_t v53 = *(void *)v54;
      *(void *)(v53 + 8) = v55;
      swift_bridgeObjectRetain();
    }
    *(void *)(a1 + v18[9]) = *(void *)(a2 + v18[9]);
    uint64_t v56 = v18[10];
    uint64_t v57 = (void *)(a1 + v56);
    unint64_t v58 = (void *)(a2 + v56);
    uint64_t v59 = v58[1];
    *uint64_t v57 = *v58;
    v57[1] = v59;
    uint64_t v60 = v58[3];
    v57[2] = v58[2];
    v57[3] = v60;
    uint64_t v61 = v58[5];
    v57[4] = v58[4];
    v57[5] = v61;
    v57[6] = v58[6];
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for StreamingRequestPayload(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of DocumentResourceEnvelope(a1, type metadata accessor for StreamingRequestPayload);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      if (*(void *)(a2 + 8))
      {
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v18 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v18;
      }
      uint64_t v68 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
      uint64_t v19 = v68[5];
      uint64_t v20 = (void *)(a1 + v19);
      uint64_t v21 = a2 + v19;
      *uint64_t v20 = *(void *)(a2 + v19);
      v20[1] = *(void *)(a2 + v19 + 8);
      v20[2] = *(void *)(a2 + v19 + 16);
      uint64_t v22 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      uint64_t v23 = (char *)v20 + v22;
      uint64_t v24 = (const void *)(v21 + v22);
      uint64_t v25 = type metadata accessor for Locale();
      uint64_t v26 = *(void *)(v25 - 8);
      uint64_t v27 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v27(v24, 1, v25))
      {
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v26 + 16))(v23, v24, v25);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      uint64_t v30 = v68[6];
      uint64_t v31 = a1 + v30;
      uint64_t v32 = (uint64_t *)(a2 + v30);
      uint64_t v33 = *v32;
      *(unsigned char *)(v31 + 8) = *((unsigned char *)v32 + 8);
      *(void *)uint64_t v31 = v33;
      uint64_t v34 = v32[2];
      *(unsigned char *)(v31 + 24) = *((unsigned char *)v32 + 24);
      *(void *)(v31 + 16) = v34;
      uint64_t v35 = v32[4];
      *(unsigned char *)(v31 + 40) = *((unsigned char *)v32 + 40);
      *(void *)(v31 + 32) = v35;
      uint64_t v36 = v32[6];
      *(unsigned char *)(v31 + 56) = *((unsigned char *)v32 + 56);
      *(void *)(v31 + 48) = v36;
      uint64_t v37 = v32[8];
      *(unsigned char *)(v31 + 72) = *((unsigned char *)v32 + 72);
      *(void *)(v31 + 64) = v37;
      *(void *)(v31 + 80) = v32[10];
      uint64_t v38 = v32[11];
      *(unsigned char *)(v31 + 96) = *((unsigned char *)v32 + 96);
      *(void *)(v31 + 88) = v38;
      uint64_t v39 = v32[13];
      *(unsigned char *)(v31 + 112) = *((unsigned char *)v32 + 112);
      *(void *)(v31 + 104) = v39;
      uint64_t v40 = v32[15];
      *(unsigned char *)(v31 + 128) = *((unsigned char *)v32 + 128);
      *(void *)(v31 + 120) = v40;
      *(unsigned char *)(v31 + 129) = *((unsigned char *)v32 + 129);
      *(void *)(a1 + v68[7]) = *(void *)(a2 + v68[7]);
      uint64_t v41 = v68[8];
      uint64_t v42 = a1 + v41;
      uint64_t v43 = a2 + v41;
      unint64_t v44 = *(void *)(a2 + v41 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v44 < 4)
      {
        *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
      }
      else
      {
        *(void *)uint64_t v42 = *(void *)v43;
        *(void *)(v42 + 8) = *(void *)(v43 + 8);
        swift_bridgeObjectRetain();
      }
      *(void *)(a1 + v68[9]) = *(void *)(a2 + v68[9]);
      uint64_t v45 = v68[10];
      uint64_t v46 = (void *)(a1 + v45);
      unint64_t v47 = (void *)(a2 + v45);
      uint64_t v48 = type metadata accessor for Constraints(0);
      uint64_t v49 = *(void *)(v48 - 8);
      uint64_t v50 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v49 + 48);
      swift_bridgeObjectRetain();
      if (v50(v47, 1, v48))
      {
        uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v46, v47, *(void *)(*(void *)(v51 - 8) + 64));
      }
      else
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
        {
          *uint64_t v46 = *v47;
          v46[1] = v47[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v61 = type metadata accessor for GenerationSchema();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v61 - 8) + 16))(v46, v47, v61);
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      }
      uint64_t v62 = v68[11];
      uint64_t v63 = (void *)(a1 + v62);
      uint64_t v64 = (void *)(a2 + v62);
      *uint64_t v63 = *v64;
      v63[1] = v64[1];
      v63[2] = v64[2];
      v63[3] = v64[3];
      v63[4] = v64[4];
      v63[5] = v64[5];
      v63[6] = v64[6];
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v4 = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(void *)(a1 + 32) = v4;
      uint64_t v5 = *(void *)(a2 + 48);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      *(void *)(a1 + 48) = v5;
      uint64_t v6 = *(void *)(a2 + 64);
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *(void *)(a1 + 64) = v6;
      uint64_t v7 = *(void *)(a2 + 80);
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      *(void *)(a1 + 80) = v7;
      uint64_t v8 = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      *(void *)(a1 + 96) = v8;
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      uint64_t v9 = *(void *)(a2 + 120);
      *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
      *(void *)(a1 + 120) = v9;
      uint64_t v10 = *(void *)(a2 + 136);
      *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
      *(void *)(a1 + 136) = v10;
      uint64_t v11 = *(void *)(a2 + 152);
      *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
      *(void *)(a1 + 152) = v11;
      *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
      uint64_t v67 = (int *)type metadata accessor for CompletePromptRequest(0);
      uint64_t v12 = v67[6];
      __dst = (void *)(a1 + v12);
      uint64_t v13 = (void *)(a2 + v12);
      uint64_t v14 = type metadata accessor for Constraints(0);
      uint64_t v15 = *(void *)(v14 - 8);
      int v16 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v16(v13, 1, v14))
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        int v29 = swift_getEnumCaseMultiPayload();
        if (v29 == 2 || v29 == 1)
        {
          void *__dst = *v13;
          __dst[1] = v13[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v53 = type metadata accessor for GenerationSchema();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v53 - 8) + 16))(__dst, v13, v53);
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
      }
      *(void *)(a1 + v67[7]) = *(void *)(a2 + v67[7]);
      uint64_t v54 = v67[8];
      uint64_t v55 = a1 + v54;
      uint64_t v56 = a2 + v54;
      unint64_t v57 = *(void *)(a2 + v54 + 8);
      swift_bridgeObjectRetain();
      if (v57 < 4)
      {
        *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
      }
      else
      {
        *(void *)uint64_t v55 = *(void *)v56;
        *(void *)(v55 + 8) = *(void *)(v56 + 8);
        swift_bridgeObjectRetain();
      }
      *(void *)(a1 + v67[9]) = *(void *)(a2 + v67[9]);
      uint64_t v58 = v67[10];
      uint64_t v59 = (void *)(a1 + v58);
      uint64_t v60 = (void *)(a2 + v58);
      void *v59 = *v60;
      v59[1] = v60[1];
      v59[2] = v60[2];
      v59[3] = v60[3];
      v59[4] = v60[4];
      v59[5] = v60[5];
      v59[6] = v60[6];
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for StreamingRequestPayload(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
    uint64_t v7 = v6[5];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = a2 + v7;
    *(_OWORD *)uint64_t v8 = *(_OWORD *)(a2 + v7);
    *(void *)(v8 + 16) = *(void *)(a2 + v7 + 16);
    uint64_t v10 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
    uint64_t v11 = (void *)(v8 + v10);
    uint64_t v12 = (const void *)(v9 + v10);
    uint64_t v13 = type metadata accessor for Locale();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    uint64_t v27 = v6[6];
    uint64_t v28 = a1 + v27;
    uint64_t v29 = a2 + v27;
    long long v30 = *(_OWORD *)(v29 + 48);
    *(_OWORD *)(v28 + 32) = *(_OWORD *)(v29 + 32);
    *(_OWORD *)(v28 + 48) = v30;
    *(_WORD *)(v28 + 128) = *(_WORD *)(v29 + 128);
    long long v31 = *(_OWORD *)(v29 + 112);
    *(_OWORD *)(v28 + 96) = *(_OWORD *)(v29 + 96);
    *(_OWORD *)(v28 + 112) = v31;
    long long v32 = *(_OWORD *)(v29 + 80);
    *(_OWORD *)(v28 + 64) = *(_OWORD *)(v29 + 64);
    *(_OWORD *)(v28 + 80) = v32;
    long long v33 = *(_OWORD *)(v29 + 16);
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
    *(_OWORD *)(v28 + 16) = v33;
    *(void *)(a1 + v6[7]) = *(void *)(a2 + v6[7]);
    *(_OWORD *)(a1 + v6[8]) = *(_OWORD *)(a2 + v6[8]);
    *(void *)(a1 + v6[9]) = *(void *)(a2 + v6[9]);
    uint64_t v34 = v6[10];
    uint64_t v35 = (void *)(a1 + v34);
    uint64_t v36 = (const void *)(a2 + v34);
    uint64_t v37 = type metadata accessor for Constraints(0);
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v35, v36, *(void *)(v38 + 64));
      }
      else
      {
        uint64_t v42 = type metadata accessor for GenerationSchema();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v42 - 8) + 32))(v35, v36, v42);
        swift_storeEnumTagMultiPayload();
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    uint64_t v41 = v6 + 11;
  }
  else
  {
    long long v16 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v16;
    *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
    long long v17 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v17;
    long long v18 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v18;
    long long v19 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v19;
    uint64_t v20 = (int *)type metadata accessor for CompletePromptRequest(0);
    uint64_t v21 = v20[6];
    uint64_t v22 = (void *)(a1 + v21);
    uint64_t v23 = (const void *)(a2 + v21);
    uint64_t v24 = type metadata accessor for Constraints(0);
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v22, v23, *(void *)(v25 + 64));
      }
      else
      {
        uint64_t v40 = type metadata accessor for GenerationSchema();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v40 - 8) + 32))(v22, v23, v40);
        swift_storeEnumTagMultiPayload();
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    *(void *)(a1 + v20[7]) = *(void *)(a2 + v20[7]);
    *(_OWORD *)(a1 + v20[8]) = *(_OWORD *)(a2 + v20[8]);
    *(void *)(a1 + v20[9]) = *(void *)(a2 + v20[9]);
    uint64_t v41 = v20 + 10;
  }
  uint64_t v43 = *v41;
  uint64_t v44 = a1 + v43;
  uint64_t v45 = a2 + v43;
  long long v46 = *(_OWORD *)(v45 + 16);
  *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
  *(_OWORD *)(v44 + 16) = v46;
  *(_OWORD *)(v44 + 32) = *(_OWORD *)(v45 + 32);
  *(void *)(v44 + 48) = *(void *)(v45 + 48);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for StreamingRequestPayload(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of DocumentResourceEnvelope(a1, type metadata accessor for StreamingRequestPayload);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v6 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
      uint64_t v7 = v6[5];
      uint64_t v8 = a1 + v7;
      uint64_t v9 = a2 + v7;
      *(_OWORD *)uint64_t v8 = *(_OWORD *)(a2 + v7);
      *(void *)(v8 + 16) = *(void *)(a2 + v7 + 16);
      uint64_t v10 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      uint64_t v11 = (void *)(v8 + v10);
      uint64_t v12 = (const void *)(v9 + v10);
      uint64_t v13 = type metadata accessor for Locale();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      uint64_t v27 = v6[6];
      uint64_t v28 = a1 + v27;
      uint64_t v29 = a2 + v27;
      long long v30 = *(_OWORD *)(v29 + 48);
      *(_OWORD *)(v28 + 32) = *(_OWORD *)(v29 + 32);
      *(_OWORD *)(v28 + 48) = v30;
      *(_WORD *)(v28 + 128) = *(_WORD *)(v29 + 128);
      long long v31 = *(_OWORD *)(v29 + 112);
      *(_OWORD *)(v28 + 96) = *(_OWORD *)(v29 + 96);
      *(_OWORD *)(v28 + 112) = v31;
      long long v32 = *(_OWORD *)(v29 + 80);
      *(_OWORD *)(v28 + 64) = *(_OWORD *)(v29 + 64);
      *(_OWORD *)(v28 + 80) = v32;
      long long v33 = *(_OWORD *)(v29 + 16);
      *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
      *(_OWORD *)(v28 + 16) = v33;
      *(void *)(a1 + v6[7]) = *(void *)(a2 + v6[7]);
      *(_OWORD *)(a1 + v6[8]) = *(_OWORD *)(a2 + v6[8]);
      *(void *)(a1 + v6[9]) = *(void *)(a2 + v6[9]);
      uint64_t v34 = v6[10];
      uint64_t v35 = (void *)(a1 + v34);
      uint64_t v36 = (const void *)(a2 + v34);
      uint64_t v37 = type metadata accessor for Constraints(0);
      uint64_t v38 = *(void *)(v37 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
      {
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v35, v36, *(void *)(v38 + 64));
        }
        else
        {
          uint64_t v42 = type metadata accessor for GenerationSchema();
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v42 - 8) + 32))(v35, v36, v42);
          swift_storeEnumTagMultiPayload();
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      }
      uint64_t v41 = v6 + 11;
    }
    else
    {
      long long v16 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v16;
      *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
      long long v17 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v17;
      long long v18 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v18;
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v19;
      uint64_t v20 = (int *)type metadata accessor for CompletePromptRequest(0);
      uint64_t v21 = v20[6];
      uint64_t v22 = (void *)(a1 + v21);
      uint64_t v23 = (const void *)(a2 + v21);
      uint64_t v24 = type metadata accessor for Constraints(0);
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v22, v23, *(void *)(v25 + 64));
        }
        else
        {
          uint64_t v40 = type metadata accessor for GenerationSchema();
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v40 - 8) + 32))(v22, v23, v40);
          swift_storeEnumTagMultiPayload();
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      *(void *)(a1 + v20[7]) = *(void *)(a2 + v20[7]);
      *(_OWORD *)(a1 + v20[8]) = *(_OWORD *)(a2 + v20[8]);
      *(void *)(a1 + v20[9]) = *(void *)(a2 + v20[9]);
      uint64_t v41 = v20 + 10;
    }
    uint64_t v43 = *v41;
    uint64_t v44 = a1 + v43;
    uint64_t v45 = a2 + v43;
    long long v46 = *(_OWORD *)(v45 + 16);
    *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
    *(_OWORD *)(v44 + 16) = v46;
    *(_OWORD *)(v44 + 32) = *(_OWORD *)(v45 + 32);
    *(void *)(v44 + 48) = *(void *)(v45 + 48);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for StreamingRequestPayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for StreamingRequestPayload(a1, a2, a3, type metadata accessor for CompletePromptRequest, type metadata accessor for CompletePromptTemplateRequest);
}

uint64_t *initializeBufferWithCopyOfBuffer for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    a1[4] = a2[4];
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    *(uint64_t *)((char *)a1 + v7) = *(uint64_t *)((char *)a2 + v7);
    uint64_t v10 = *(int *)(type metadata accessor for AnnotationEnvelope(0) + 20);
    uint64_t v11 = &v8[v10];
    uint64_t v12 = &v9[v10];
    type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      uint64_t v15 = *((void *)v12 + 1);
      *(void *)uint64_t v11 = *(void *)v12;
      *((void *)v11 + 1) = v15;
      uint64_t v16 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
      long long v17 = &v11[v16];
      long long v18 = &v12[v16];
      uint64_t v19 = type metadata accessor for URL();
      uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
      swift_bridgeObjectRetain();
      v20(v17, v18, v19);
    }
    swift_storeEnumTagMultiPayload();
  }
  return v3;
}

uint64_t destroy for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for AnnotationEnvelope(0) + 20);
  type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DocumentResourceIdentifier();
  }
  else
  {
    swift_bridgeObjectRelease();
    v5 += *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
    uint64_t v6 = type metadata accessor for URL();
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  return v7(v5, v6);
}

void *initializeWithCopy for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  a1[4] = a2[4];
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  uint64_t v9 = *(int *)(type metadata accessor for AnnotationEnvelope(0) + 20);
  uint64_t v10 = &v7[v9];
  uint64_t v11 = &v8[v9];
  type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  else
  {
    uint64_t v13 = *((void *)v11 + 1);
    *(void *)uint64_t v10 = *(void *)v11;
    *((void *)v10 + 1) = v13;
    uint64_t v14 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
    uint64_t v15 = &v10[v14];
    uint64_t v16 = &v11[v14];
    uint64_t v17 = type metadata accessor for URL();
    long long v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
    swift_bridgeObjectRetain();
    v18(v15, v16, v17);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for AnnotationEnvelope(0);
  if (a1 != a2)
  {
    uint64_t v10 = *(int *)(v9 + 20);
    uint64_t v11 = &v7[v10];
    uint64_t v12 = &v8[v10];
    outlined destroy of DocumentResourceEnvelope((uint64_t)v11, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
    type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *(void *)uint64_t v11 = *(void *)v12;
      *((void *)v11 + 1) = *((void *)v12 + 1);
      uint64_t v14 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
      uint64_t v15 = &v11[v14];
      uint64_t v16 = &v12[v14];
      uint64_t v17 = type metadata accessor for URL();
      long long v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
      swift_bridgeObjectRetain();
      v18(v15, v16, v17);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(void *)(a1 + v5) = *(void *)(a2 + v5);
  uint64_t v8 = *(int *)(type metadata accessor for AnnotationEnvelope(0) + 20);
  uint64_t v9 = (_OWORD *)(v6 + v8);
  uint64_t v10 = (_OWORD *)(v7 + v8);
  type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  }
  else
  {
    *uint64_t v9 = *v10;
    uint64_t v12 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
    uint64_t v13 = (char *)v9 + v12;
    uint64_t v14 = (char *)v10 + v12;
    uint64_t v15 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithTake for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  *(void *)((char *)a1 + v8) = *(void *)((char *)a2 + v8);
  uint64_t v11 = type metadata accessor for AnnotationEnvelope(0);
  if (a1 != a2)
  {
    uint64_t v12 = *(int *)(v11 + 20);
    uint64_t v13 = &v9[v12];
    uint64_t v14 = &v10[v12];
    outlined destroy of DocumentResourceEnvelope((uint64_t)v13, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
    type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
    }
    else
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      uint64_t v16 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
      uint64_t v17 = &v13[v16];
      long long v18 = &v14[v16];
      uint64_t v19 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F855ADC);
}

uint64_t sub_25F855ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for AnnotationEnvelope(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F855BA0);
}

uint64_t sub_25F855BA0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for AnnotationEnvelope(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope()
{
  uint64_t result = type metadata accessor for AnnotationEnvelope(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *type metadata accessor for StreamingRequestPayload.CodingKeys()
{
  return &unk_270BC21F8;
}

void *type metadata accessor for StreamingRequestPayload.CompletePromptCodingKeys()
{
  return &unk_270BC2288;
}

void *type metadata accessor for StreamingRequestPayload.CompletePromptTemplateCodingKeys()
{
  return &unk_270BC2318;
}

void *type metadata accessor for RequestPayload.CodingKeys()
{
  return &unk_270BC0020;
}

void *type metadata accessor for RequestPayload.CountTokensCodingKeys()
{
  return &unk_270BC00B0;
}

void *type metadata accessor for RequestPayload.CountTokensPromptTemplateCodingKeys()
{
  return &unk_270BC5958;
}

void *type metadata accessor for RequestPayload.CompletePromptCodingKeys()
{
  return &unk_270BC0140;
}

void *type metadata accessor for RequestPayload.CompletePromptTemplateCodingKeys()
{
  return &unk_270BC01D0;
}

void *type metadata accessor for ToolDescriptionEnvelope.CodingKeys()
{
  return &unk_270BC59E8;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SamplingStrategyEnvelope(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SamplingStrategyEnvelope(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for SamplingStrategyEnvelope(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for SamplingStrategyEnvelope(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

void *type metadata accessor for SamplingStrategyEnvelope()
{
  return &unk_270BC2B90;
}

uint64_t getEnumTagSinglePayload for SamplingParametersEnvelope.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SamplingParametersEnvelope.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F855FD8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SamplingParametersEnvelope.CodingKeys()
{
  return &unk_270BC2D38;
}

void *type metadata accessor for DocumentRegistrationEnvelope.CodingKeys()
{
  return &unk_270BC5A78;
}

void *type metadata accessor for ToolChoiceEnvelope.CodingKeys()
{
  return &unk_270BC1240;
}

void *type metadata accessor for ToolChoiceEnvelope.NoneCodingKeys()
{
  return &unk_270BC12D0;
}

void *type metadata accessor for ToolChoiceEnvelope.AutomaticCodingKeys()
{
  return &unk_270BC13A0;
}

void *type metadata accessor for ToolChoiceEnvelope.RequiredCodingKeys()
{
  return &unk_270BC1380;
}

void *type metadata accessor for ToolChoiceEnvelope.FunctionCodingKeys()
{
  return &unk_270BC12F0;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.CodingKeys()
{
  return &unk_270BC3E00;
}

ValueMetadata *type metadata accessor for PromptCompletionEnvelope.CandidateEnvelope()
{
  return &type metadata for PromptCompletionEnvelope.CandidateEnvelope;
}

void *type metadata accessor for UsageEnvelope()
{
  return &unk_270BBF8F0;
}

void *type metadata accessor for ModelInformationEnvelope()
{
  return &unk_270BC2550;
}

void *type metadata accessor for PromptCompletionEnvelope.CodingKeys()
{
  return &unk_270BC28A0;
}

void *type metadata accessor for Constraints.CodingKeys()
{
  return &unk_270BBF3C0;
}

void *type metadata accessor for Constraints.SchemaCodingKeys()
{
  return &unk_270BBF450;
}

void *type metadata accessor for Constraints.GrammarCodingKeys()
{
  return &unk_270BBF4E0;
}

void *type metadata accessor for Constraints.PartialGrammarCodingKeys()
{
  return &unk_270BBF570;
}

void *type metadata accessor for CompletePromptResponseElement.CodingKeys()
{
  return &unk_270BC2F10;
}

void *type metadata accessor for CompletePromptResponse.CodingKeys()
{
  return &unk_270BC1B40;
}

void *type metadata accessor for ModerationEnvelope()
{
  return &unk_270BC5A98;
}

void *type metadata accessor for ModerationEnvelope.ProbabilityEnvelope()
{
  return &unk_270BC5B30;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnnotationEnvelope(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(a3 + 20);
    unsigned int v6 = (uint64_t *)((char *)a1 + v5);
    BOOL v7 = (uint64_t *)((char *)a2 + v5);
    type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
    }
    else
    {
      uint64_t v10 = v7[1];
      *unsigned int v6 = *v7;
      v6[1] = v10;
      uint64_t v11 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
      uint64_t v12 = (char *)v6 + v11;
      uint64_t v13 = (char *)v7 + v11;
      uint64_t v14 = type metadata accessor for URL();
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
      swift_bridgeObjectRetain();
      v15(v12, v13, v14);
    }
    swift_storeEnumTagMultiPayload();
  }
  return v3;
}

uint64_t destroy for AnnotationEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = type metadata accessor for DocumentResourceIdentifier();
  }
  else
  {
    swift_bridgeObjectRelease();
    v2 += *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
    uint64_t v3 = type metadata accessor for URL();
  }
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

void *initializeWithCopy for AnnotationEnvelope(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (void *)((char *)a1 + v4);
  unsigned int v6 = (void *)((char *)a2 + v4);
  type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  }
  else
  {
    uint64_t v8 = v6[1];
    *uint64_t v5 = *v6;
    v5[1] = v8;
    uint64_t v9 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
    uint64_t v10 = (char *)v5 + v9;
    uint64_t v11 = (char *)v6 + v9;
    uint64_t v12 = type metadata accessor for URL();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for AnnotationEnvelope(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  if (a1 != a2)
  {
    uint64_t v4 = *(int *)(a3 + 20);
    uint64_t v5 = (void *)((char *)a1 + v4);
    unsigned int v6 = (void *)((char *)a2 + v4);
    outlined destroy of DocumentResourceEnvelope((uint64_t)a1 + v4, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
    type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
    }
    else
    {
      *uint64_t v5 = *v6;
      v5[1] = v6[1];
      uint64_t v8 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
      uint64_t v9 = (char *)v5 + v8;
      uint64_t v10 = (char *)v6 + v8;
      uint64_t v11 = type metadata accessor for URL();
      uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
      swift_bridgeObjectRetain();
      v12(v9, v10, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for AnnotationEnvelope(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (_OWORD *)((char *)a1 + v4);
  unsigned int v6 = (_OWORD *)((char *)a2 + v4);
  type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  }
  else
  {
    *uint64_t v5 = *v6;
    uint64_t v8 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
    uint64_t v9 = (char *)v5 + v8;
    uint64_t v10 = (char *)v6 + v8;
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithTake for AnnotationEnvelope(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  if (a1 != a2)
  {
    uint64_t v4 = *(int *)(a3 + 20);
    uint64_t v5 = (_OWORD *)((char *)a1 + v4);
    unsigned int v6 = (_OWORD *)((char *)a2 + v4);
    outlined destroy of DocumentResourceEnvelope((uint64_t)a1 + v4, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
    type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
    }
    else
    {
      *uint64_t v5 = *v6;
      uint64_t v8 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
      uint64_t v9 = (char *)v5 + v8;
      uint64_t v10 = (char *)v6 + v8;
      uint64_t v11 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnnotationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F85686C);
}

uint64_t sub_25F85686C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
  unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for AnnotationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F8568F0);
}

uint64_t sub_25F8568F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, a2, a2, v6);
}

uint64_t type metadata completion function for AnnotationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AnnotationEnvelope(a1, a2, a3, MEMORY[0x263F8CF70] + 64, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
}

uint64_t *initializeBufferWithCopyOfBuffer for AnnotationEnvelope.CitationTypeEnvelope(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      uint64_t v9 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for URL();
      uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      v13(v10, v11, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AnnotationEnvelope.CitationTypeEnvelope(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for DocumentResourceIdentifier();
  }
  else
  {
    swift_bridgeObjectRelease();
    a1 += *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
    uint64_t v2 = type metadata accessor for URL();
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

void *initializeWithCopy for AnnotationEnvelope.CitationTypeEnvelope(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for AnnotationEnvelope.CitationTypeEnvelope(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of DocumentResourceEnvelope((uint64_t)a1, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      uint64_t v5 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
      uint64_t v6 = (char *)a1 + v5;
      uint64_t v7 = (char *)a2 + v5;
      uint64_t v8 = type metadata accessor for URL();
      uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
      swift_bridgeObjectRetain();
      v9(v6, v7, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for AnnotationEnvelope.CitationTypeEnvelope(_OWORD *a1, _OWORD *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for AnnotationEnvelope.CitationTypeEnvelope(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of DocumentResourceEnvelope((uint64_t)a1, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      uint64_t v5 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
      uint64_t v6 = (char *)a1 + v5;
      uint64_t v7 = (char *)a2 + v5;
      uint64_t v8 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AnnotationEnvelope.CitationTypeEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for StreamingRequestPayload(a1, a2, a3, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope, MEMORY[0x263F415B0]);
}

uint64_t type metadata completion function for StreamingRequestPayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t result = a4(319);
  if (v7 <= 0x3F)
  {
    uint64_t result = a5(319);
    if (v8 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AnnotationEnvelope.URLCitationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F8570FC);
}

uint64_t sub_25F8570FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AnnotationEnvelope.URLCitationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F8571C0);
}

uint64_t sub_25F8571C0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AnnotationEnvelope.URLCitationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AnnotationEnvelope(a1, a2, a3, (uint64_t)&unk_25F91F9A8, MEMORY[0x263F06EA8]);
}

uint64_t type metadata completion function for AnnotationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t result = a5(319);
  if (v6 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AnnotationEnvelope.DocumentCitationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for AnnotationEnvelope.DocumentCitationEnvelope(a1, a2, a3, MEMORY[0x263F415B0]);
}

uint64_t destroy for AnnotationEnvelope.DocumentCitationEnvelope(uint64_t a1, uint64_t a2)
{
  return destroy for AnnotationEnvelope.DocumentCitationEnvelope(a1, a2, MEMORY[0x263F415B0]);
}

uint64_t initializeWithCopy for AnnotationEnvelope.DocumentCitationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for AnnotationEnvelope.DocumentCitationEnvelope(a1, a2, a3, MEMORY[0x263F415B0]);
}

uint64_t assignWithCopy for AnnotationEnvelope.DocumentCitationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for AnnotationEnvelope.DocumentCitationEnvelope(a1, a2, a3, MEMORY[0x263F415B0]);
}

uint64_t initializeWithTake for AnnotationEnvelope.DocumentCitationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for AnnotationEnvelope.DocumentCitationEnvelope(a1, a2, a3, MEMORY[0x263F415B0]);
}

uint64_t assignWithTake for AnnotationEnvelope.DocumentCitationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for AnnotationEnvelope.DocumentCitationEnvelope(a1, a2, a3, MEMORY[0x263F415B0]);
}

uint64_t getEnumTagSinglePayload for AnnotationEnvelope.DocumentCitationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F8573C0);
}

uint64_t sub_25F8573C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x263F415B0]);
}

uint64_t storeEnumTagSinglePayload for AnnotationEnvelope.DocumentCitationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F8573EC);
}

uint64_t sub_25F8573EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x263F415B0]);
}

uint64_t type metadata completion function for AnnotationEnvelope.DocumentCitationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for RegisterDocumentResponseElement(a1, a2, a3, MEMORY[0x263F415B0]);
}

void *type metadata accessor for CompletePromptRequest.CodingKeys()
{
  return &unk_270BC19D0;
}

uint64_t getEnumTagSinglePayload for CompletePromptTemplateRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CompletePromptTemplateRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F857590);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

void *type metadata accessor for CompletePromptTemplateRequest.CodingKeys()
{
  return &unk_270BC2FA0;
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolDescriptionEnvelope.ToolTypeEnvelope(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for ToolType(a1, a2, a3, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope, MEMORY[0x263F40C58]);
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolType(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  int v7 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v7 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else
  {
    uint64_t v9 = *(void *)(a3 - 8);
    uint64_t v10 = a4(0);
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v11 + 48))(a2, 2, v10))
    {
      memcpy(a1, a2, *(void *)(v9 + 64));
    }
    else
    {
      uint64_t v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      uint64_t v14 = a2[3];
      a1[2] = a2[2];
      a1[3] = v14;
      uint64_t v15 = *(int *)(v10 + 24);
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = a5(0);
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19(v16, v17, v18);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 2, v10);
    }
  }
  return a1;
}

void *initializeWithCopy for ToolDescriptionEnvelope.ToolTypeEnvelope(void *a1, void *a2, uint64_t a3)
{
  return initializeWithCopy for ToolType(a1, a2, a3, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope, MEMORY[0x263F40C58]);
}

void *initializeWithCopy for ToolType(void *a1, void *a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v9 = a4(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(a2, 2, v9))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    uint64_t v12 = a2[3];
    a1[2] = a2[2];
    a1[3] = v12;
    uint64_t v13 = *(int *)(v9 + 24);
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = a5(0);
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17(v14, v15, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 2, v9);
  }
  return a1;
}

void *assignWithCopy for ToolDescriptionEnvelope.ToolTypeEnvelope(void *a1, void *a2, uint64_t a3)
{
  return assignWithCopy for ToolType(a1, a2, a3, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope, MEMORY[0x263F40C58], type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
}

void *assignWithCopy for ToolType(void *a1, void *a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v11 = a4(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(a1, 2, v11);
  int v15 = v13(a2, 2, v11);
  if (!v14)
  {
    if (!v15)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v22 = *(int *)(v11 + 24);
      uint64_t v23 = (char *)a1 + v22;
      uint64_t v24 = (char *)a2 + v22;
      uint64_t v25 = a5(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 24))(v23, v24, v25);
      return a1;
    }
    outlined destroy of DocumentResourceEnvelope((uint64_t)a1, a6);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v16 = *(int *)(v11 + 24);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = a5(0);
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20(v17, v18, v19);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(a1, 0, 2, v11);
  return a1;
}

_OWORD *initializeWithTake for ToolDescriptionEnvelope.ToolTypeEnvelope(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return initializeWithTake for ToolType(a1, a2, a3, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope, MEMORY[0x263F40C58]);
}

_OWORD *initializeWithTake for ToolType(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v9 = a4(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(a2, 2, v9))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    long long v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    uint64_t v12 = *(int *)(v9 + 24);
    uint64_t v13 = (char *)a1 + v12;
    int v14 = (char *)a2 + v12;
    uint64_t v15 = a5(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 2, v9);
  }
  return a1;
}

void *assignWithTake for ToolDescriptionEnvelope.ToolTypeEnvelope(void *a1, void *a2, uint64_t a3)
{
  return assignWithTake for ToolType(a1, a2, a3, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope, MEMORY[0x263F40C58], type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
}

void *assignWithTake for ToolType(void *a1, void *a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v11 = a4(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(a1, 2, v11);
  int v15 = v13(a2, 2, v11);
  if (!v14)
  {
    if (!v15)
    {
      uint64_t v22 = a2[1];
      *a1 = *a2;
      a1[1] = v22;
      swift_bridgeObjectRelease();
      uint64_t v23 = a2[3];
      a1[2] = a2[2];
      a1[3] = v23;
      swift_bridgeObjectRelease();
      uint64_t v24 = *(int *)(v11 + 24);
      uint64_t v25 = (char *)a1 + v24;
      uint64_t v26 = (char *)a2 + v24;
      uint64_t v27 = a5(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 40))(v25, v26, v27);
      return a1;
    }
    outlined destroy of DocumentResourceEnvelope((uint64_t)a1, a6);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  long long v16 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v16;
  uint64_t v17 = *(int *)(v11 + 24);
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = a5(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(a1, 0, 2, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolDescriptionEnvelope.ToolTypeEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F857FA4);
}

uint64_t sub_25F857FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_20Tm(a1, a2, a3, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
}

uint64_t __swift_get_extra_inhabitant_index_20Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  unsigned int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(a1, a2, v6);
  if (v7 >= 3) {
    return v7 - 2;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ToolDescriptionEnvelope.ToolTypeEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F858040);
}

uint64_t sub_25F858040(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_21Tm(a1, a2, a3, a4, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
}

uint64_t __swift_store_extra_inhabitant_index_21Tm(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  if (a2) {
    uint64_t v7 = (a2 + 2);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = a5(0);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  return v9(a1, v7, a3, v8);
}

uint64_t getEnumTag for ToolDescriptionEnvelope.ToolTypeEnvelope(uint64_t a1, uint64_t a2)
{
  return getEnumTag for ToolType(a1, a2, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
}

uint64_t getEnumTag for ToolType(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = a3(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, 2, v4);
}

uint64_t destructiveInjectEnumTag for ToolDescriptionEnvelope.ToolTypeEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return destructiveInjectEnumTag for ToolType(a1, a2, a3, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
}

uint64_t destructiveInjectEnumTag for ToolType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(a1, a2, 2, v6);
}

uint64_t type metadata completion function for ToolDescriptionEnvelope.ToolTypeEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for ToolType(a1, a2, a3, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
}

uint64_t type metadata completion function for ToolType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for FunctionDescription(a1, a2, a3, MEMORY[0x263F40C58]);
}

uint64_t *initializeBufferWithCopyOfBuffer for FunctionDescription(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = a4(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
  }
  return v4;
}

uint64_t destroy for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(uint64_t a1, uint64_t a2)
{
  return destroy for FunctionDescription(a1, a2, MEMORY[0x263F40C58]);
}

uint64_t destroy for FunctionDescription(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  return v8(v6, v7);
}

void *initializeWithCopy for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(void *a1, void *a2, uint64_t a3)
{
  return initializeWithCopy for FunctionDescription(a1, a2, a3, MEMORY[0x263F40C58]);
}

void *initializeWithCopy for FunctionDescription(void *a1, void *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = a4(0);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  return a1;
}

void *assignWithCopy for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(void *a1, void *a2, uint64_t a3)
{
  return assignWithCopy for FunctionDescription(a1, a2, a3, MEMORY[0x263F40C58]);
}

void *assignWithCopy for FunctionDescription(void *a1, void *a2, uint64_t a3, uint64_t (*a4)(void))
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = a4(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_OWORD *initializeWithTake for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return initializeWithTake for FunctionDescription(a1, a2, a3, MEMORY[0x263F40C58]);
}

_OWORD *initializeWithTake for FunctionDescription(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t (*a4)(void))
{
  long long v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = a4(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

void *assignWithTake for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(void *a1, void *a2, uint64_t a3)
{
  return assignWithTake for FunctionDescription(a1, a2, a3, MEMORY[0x263F40C58]);
}

void *assignWithTake for FunctionDescription(void *a1, void *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v8 = a2[1];
  *a1 = *a2;
  a1[1] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[3];
  a1[2] = a2[2];
  a1[3] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = a4(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F858750);
}

uint64_t sub_25F858750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_23Tm(a1, a2, a3, type metadata accessor for SchemaEnvelope);
}

uint64_t __swift_get_extra_inhabitant_index_23Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 >= 0xFFFFFFFF) {
      LODWORD(v5) = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = a4(0);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 24);
    return v10(v12, a2, v11);
  }
}

uint64_t type metadata accessor for SchemaEnvelope(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for SchemaEnvelope);
}

uint64_t storeEnumTagSinglePayload for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F858850);
}

uint64_t sub_25F858850(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_24Tm(a1, a2, a3, a4, type metadata accessor for SchemaEnvelope);
}

uint64_t __swift_store_extra_inhabitant_index_24Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = a5(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
    uint64_t v10 = v8;
    uint64_t v11 = v6 + *(int *)(a4 + 24);
    return v9(v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata completion function for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for FunctionDescription(a1, a2, a3, MEMORY[0x263F40C58]);
}

uint64_t type metadata completion function for FunctionDescription(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SchemaEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for AnnotationEnvelope.DocumentCitationEnvelope(a1, a2, a3, MEMORY[0x263F40C58]);
}

uint64_t initializeBufferWithCopyOfBuffer for AnnotationEnvelope.DocumentCitationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  uint64_t v7 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  return v7(a1, a2, v6);
}

uint64_t destroy for SchemaEnvelope(uint64_t a1, uint64_t a2)
{
  return destroy for AnnotationEnvelope.DocumentCitationEnvelope(a1, a2, MEMORY[0x263F40C58]);
}

uint64_t destroy for AnnotationEnvelope.DocumentCitationEnvelope(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = a3(0);
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  return v5(a1, v4);
}

uint64_t initializeWithCopy for SchemaEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for AnnotationEnvelope.DocumentCitationEnvelope(a1, a2, a3, MEMORY[0x263F40C58]);
}

uint64_t initializeWithCopy for AnnotationEnvelope.DocumentCitationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  return a1;
}

uint64_t assignWithCopy for SchemaEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for AnnotationEnvelope.DocumentCitationEnvelope(a1, a2, a3, MEMORY[0x263F40C58]);
}

uint64_t assignWithCopy for AnnotationEnvelope.DocumentCitationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  return a1;
}

uint64_t initializeWithTake for SchemaEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for AnnotationEnvelope.DocumentCitationEnvelope(a1, a2, a3, MEMORY[0x263F40C58]);
}

uint64_t initializeWithTake for AnnotationEnvelope.DocumentCitationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  return a1;
}

uint64_t assignWithTake for SchemaEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for AnnotationEnvelope.DocumentCitationEnvelope(a1, a2, a3, MEMORY[0x263F40C58]);
}

uint64_t assignWithTake for AnnotationEnvelope.DocumentCitationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SchemaEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F858CE4);
}

uint64_t sub_25F858CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x263F40C58]);
}

uint64_t storeEnumTagSinglePayload for SchemaEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F858D10);
}

uint64_t sub_25F858D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x263F40C58]);
}

uint64_t type metadata completion function for SchemaEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for RegisterDocumentResponseElement(a1, a2, a3, MEMORY[0x263F40C58]);
}

void *type metadata accessor for CountTokensPromptTemplateRequest.CodingKeys()
{
  return &unk_270BC5BE0;
}

uint64_t destroy for PromptRenderingEnvelope()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PromptRenderingEnvelope(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PromptRenderingEnvelope(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for PromptRenderingEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptRenderingEnvelope(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptRenderingEnvelope(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for PromptRenderingEnvelope()
{
  return &unk_270BC1F38;
}

void *type metadata accessor for CountTokensResponse.CodingKeys()
{
  return &unk_270BC1450;
}

uint64_t destroy for PromptEnvelope()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PromptEnvelope(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PromptEnvelope(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PromptEnvelope(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for PromptEnvelope()
{
  return &unk_270BBFF98;
}

void *type metadata accessor for CountTokensRequest.CodingKeys()
{
  return &unk_270BC1088;
}

void *type metadata accessor for RegisterDocumentResponseElement.CodingKeys()
{
  return &unk_270BC3030;
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentRegistrationStatusEnvelope(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t destroy for DocumentRegistrationStatusEnvelope(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    return swift_bridgeObjectRelease();
  }
  else if (result == 1)
  {
    uint64_t v3 = type metadata accessor for DocumentResourceIdentifier();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *initializeWithCopy for DocumentRegistrationStatusEnvelope(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithCopy for DocumentRegistrationStatusEnvelope(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of DocumentResourceEnvelope((uint64_t)a1, type metadata accessor for DocumentRegistrationStatusEnvelope);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void *initializeWithTake for DocumentRegistrationStatusEnvelope(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for DocumentRegistrationStatusEnvelope(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of DocumentResourceEnvelope((uint64_t)a1, type metadata accessor for DocumentRegistrationStatusEnvelope);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for DocumentRegistrationStatusEnvelope()
{
  uint64_t result = type metadata accessor for DocumentResourceIdentifier();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t destroy for RequestMetadata()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for RequestMetadata(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RequestMetadata(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RequestMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for RequestMetadataEnvelope()
{
  return &unk_270BC2170;
}

void *type metadata accessor for RegisterDocumentRequest.CodingKeys()
{
  return &unk_270BC1FD0;
}

void *initializeBufferWithCopyOfBuffer for PromptCompletionStreamElementEnvelope.Envelope(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v9 = a2[1];
        *a1 = *a2;
        a1[1] = v9;
        uint64_t v10 = a2[3];
        a1[2] = a2[2];
        a1[3] = v10;
        uint64_t v11 = a2[5];
        a1[4] = a2[4];
        a1[5] = v11;
        uint64_t v12 = a2[7];
        a1[6] = a2[6];
        a1[7] = v12;
        uint64_t v13 = a2[9];
        a1[8] = a2[8];
        a1[9] = v13;
        uint64_t v14 = a2[11];
        a1[10] = a2[10];
        a1[11] = v14;
        uint64_t v15 = a2[13];
        a1[12] = a2[12];
        a1[13] = v15;
        a1[14] = a2[14];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 2u:
        uint64_t v16 = a2[1];
        *a1 = *a2;
        a1[1] = v16;
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v17 = a2[1];
        *a1 = *a2;
        a1[1] = v17;
        uint64_t v18 = a2[3];
        a1[2] = a2[2];
        a1[3] = v18;
        a1[4] = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        uint64_t v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        a1[6] = a2[6];
        uint64_t v21 = a2 + 7;
        unint64_t v22 = a2[8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v22 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 7) = *(_OWORD *)v21;
        }
        else
        {
          uint64_t v51 = *v21;
          outlined copy of Data._Representation(*v21, v22);
          a1[7] = v51;
          a1[8] = v22;
        }
        break;
      case 5u:
        uint64_t v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        uint64_t v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        a1[4] = a2[4];
        uint64_t v25 = *(int *)(type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(0)
                     + 28);
        uint64_t v26 = (char *)a1 + v25;
        uint64_t v27 = (char *)a2 + v25;
        *(void *)((char *)a1 + v25) = *(void *)((char *)a2 + v25);
        uint64_t v28 = *(int *)(type metadata accessor for AnnotationEnvelope(0) + 20);
        uint64_t v29 = &v26[v28];
        long long v30 = &v27[v28];
        type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v31 = type metadata accessor for DocumentResourceIdentifier();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
        }
        else
        {
          uint64_t v52 = *((void *)v30 + 1);
          *(void *)uint64_t v29 = *(void *)v30;
          *((void *)v29 + 1) = v52;
          uint64_t v53 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
          uint64_t v54 = &v29[v53];
          uint64_t v55 = &v30[v53];
          uint64_t v56 = type metadata accessor for URL();
          unint64_t v57 = *(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16);
          swift_bridgeObjectRetain();
          v57(v54, v55, v56);
        }
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
        uint64_t v32 = a2[1];
        *a1 = *a2;
        a1[1] = v32;
        uint64_t v33 = a2[3];
        a1[2] = a2[2];
        a1[3] = v33;
        uint64_t v34 = a2[5];
        a1[4] = a2[4];
        a1[5] = v34;
        uint64_t v35 = a2[7];
        a1[6] = a2[6];
        a1[7] = v35;
        uint64_t v36 = a2[9];
        a1[8] = a2[8];
        a1[9] = v36;
        uint64_t v37 = a2 + 10;
        unint64_t v38 = a2[11];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v38 >> 60 == 15)
        {
          *((_OWORD *)a1 + 5) = *(_OWORD *)v37;
        }
        else
        {
          uint64_t v58 = *v37;
          outlined copy of Data._Representation(*v37, v38);
          a1[10] = v58;
          a1[11] = v38;
        }
        break;
      case 7u:
        uint64_t v39 = a2[1];
        *a1 = *a2;
        a1[1] = v39;
        uint64_t v40 = a2[3];
        a1[2] = a2[2];
        a1[3] = v40;
        uint64_t v41 = a2[5];
        a1[4] = a2[4];
        unint64_t v42 = a2[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v41, v42);
        a1[5] = v41;
        a1[6] = v42;
        break;
      case 8u:
        uint64_t v47 = a2[1];
        *a1 = *a2;
        a1[1] = v47;
        uint64_t v48 = a2[3];
        a1[2] = a2[2];
        a1[3] = v48;
        uint64_t v49 = a2 + 4;
        unint64_t v50 = a2[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v50 >= 3)
        {
          a1[4] = *v49;
          a1[5] = v50;
          swift_bridgeObjectRetain();
        }
        else
        {
          *((_OWORD *)a1 + 2) = *(_OWORD *)v49;
        }
        uint64_t v60 = a2[6];
        unint64_t v59 = a2[7];
        outlined copy of Data._Representation(v60, v59);
        a1[6] = v60;
        a1[7] = v59;
        break;
      case 9u:
        uint64_t v43 = a2[1];
        *a1 = *a2;
        a1[1] = v43;
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        swift_bridgeObjectRetain();
        break;
      case 0xAu:
        uint64_t v44 = a2[1];
        *a1 = *a2;
        a1[1] = v44;
        uint64_t v46 = a2[2];
        unint64_t v45 = a2[3];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v46, v45);
        a1[2] = v46;
        a1[3] = v45;
        break;
      default:
        uint64_t v6 = a2[1];
        *a1 = *a2;
        a1[1] = v6;
        uint64_t v7 = a2[3];
        a1[2] = a2[2];
        a1[3] = v7;
        a1[4] = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for PromptCompletionStreamElementEnvelope.Envelope(void *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 3:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    case 2:
LABEL_4:
      swift_bridgeObjectRelease();
      goto LABEL_15;
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v3 = a1[8];
      if (v3 >> 60 == 15) {
        return result;
      }
      uint64_t v4 = a1[7];
      goto LABEL_24;
    case 5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v5 = (char *)a1
         + *(int *)(type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(0)
                  + 28);
      uint64_t v6 = &v5[*(int *)(type metadata accessor for AnnotationEnvelope(0) + 20)];
      type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v7 = type metadata accessor for DocumentResourceIdentifier();
      }
      else
      {
        swift_bridgeObjectRelease();
        v6 += *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
        uint64_t v7 = type metadata accessor for URL();
      }
      uint64_t v8 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8);
      return v8(v6, v7);
    case 6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v3 = a1[11];
      if (v3 >> 60 == 15) {
        return result;
      }
      uint64_t v4 = a1[10];
      goto LABEL_24;
    case 7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v4 = a1[5];
      unint64_t v3 = a1[6];
      goto LABEL_24;
    case 8:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a1[5] >= 3uLL) {
        swift_bridgeObjectRelease();
      }
      uint64_t v4 = a1[6];
      unint64_t v3 = a1[7];
      goto LABEL_24;
    case 9:
LABEL_15:
      return swift_bridgeObjectRelease();
    case 10:
      swift_bridgeObjectRelease();
      uint64_t v4 = a1[2];
      unint64_t v3 = a1[3];
LABEL_24:
      uint64_t result = outlined consume of Data._Representation(v4, v3);
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for PromptCompletionStreamElementEnvelope.Envelope(void *a1, void *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      uint64_t v7 = a2[3];
      a1[2] = a2[2];
      a1[3] = v7;
      uint64_t v8 = a2[5];
      a1[4] = a2[4];
      a1[5] = v8;
      uint64_t v9 = a2[7];
      a1[6] = a2[6];
      a1[7] = v9;
      uint64_t v10 = a2[9];
      a1[8] = a2[8];
      a1[9] = v10;
      uint64_t v11 = a2[11];
      a1[10] = a2[10];
      a1[11] = v11;
      uint64_t v12 = a2[13];
      a1[12] = a2[12];
      a1[13] = v12;
      a1[14] = a2[14];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 2u:
      uint64_t v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      a1[2] = a2[2];
      goto LABEL_7;
    case 3u:
      uint64_t v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      uint64_t v15 = a2[3];
      a1[2] = a2[2];
      a1[3] = v15;
      goto LABEL_6;
    case 4u:
      uint64_t v16 = a2[1];
      *a1 = *a2;
      a1[1] = v16;
      uint64_t v17 = a2[3];
      a1[2] = a2[2];
      a1[3] = v17;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      a1[6] = a2[6];
      uint64_t v18 = a2 + 7;
      unint64_t v19 = a2[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v19 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 7) = *(_OWORD *)v18;
      }
      else
      {
        uint64_t v48 = *v18;
        outlined copy of Data._Representation(*v18, v19);
        a1[7] = v48;
        a1[8] = v19;
      }
      goto LABEL_25;
    case 5u:
      uint64_t v20 = a2[1];
      *a1 = *a2;
      a1[1] = v20;
      uint64_t v21 = a2[3];
      a1[2] = a2[2];
      a1[3] = v21;
      a1[4] = a2[4];
      uint64_t v22 = *(int *)(type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(0)
                   + 28);
      uint64_t v23 = (char *)a1 + v22;
      uint64_t v24 = (char *)a2 + v22;
      *(void *)((char *)a1 + v22) = *(void *)((char *)a2 + v22);
      uint64_t v25 = *(int *)(type metadata accessor for AnnotationEnvelope(0) + 20);
      uint64_t v26 = &v23[v25];
      uint64_t v27 = &v24[v25];
      type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v28 = type metadata accessor for DocumentResourceIdentifier();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
      }
      else
      {
        uint64_t v49 = *((void *)v27 + 1);
        *(void *)uint64_t v26 = *(void *)v27;
        *((void *)v26 + 1) = v49;
        uint64_t v50 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
        uint64_t v51 = &v26[v50];
        uint64_t v58 = &v27[v50];
        uint64_t v52 = type metadata accessor for URL();
        uint64_t v53 = *(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16);
        swift_bridgeObjectRetain();
        v53(v51, v58, v52);
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_25;
    case 6u:
      uint64_t v29 = a2[1];
      *a1 = *a2;
      a1[1] = v29;
      uint64_t v30 = a2[3];
      a1[2] = a2[2];
      a1[3] = v30;
      uint64_t v31 = a2[5];
      a1[4] = a2[4];
      a1[5] = v31;
      uint64_t v32 = a2[7];
      a1[6] = a2[6];
      a1[7] = v32;
      uint64_t v33 = a2[9];
      a1[8] = a2[8];
      a1[9] = v33;
      uint64_t v34 = a2 + 10;
      unint64_t v35 = a2[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v35 >> 60 == 15)
      {
        *((_OWORD *)a1 + 5) = *(_OWORD *)v34;
      }
      else
      {
        uint64_t v54 = *v34;
        outlined copy of Data._Representation(*v34, v35);
        a1[10] = v54;
        a1[11] = v35;
      }
      goto LABEL_25;
    case 7u:
      uint64_t v36 = a2[1];
      *a1 = *a2;
      a1[1] = v36;
      uint64_t v37 = a2[3];
      a1[2] = a2[2];
      a1[3] = v37;
      uint64_t v38 = a2[5];
      a1[4] = a2[4];
      unint64_t v39 = a2[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v38, v39);
      a1[5] = v38;
      a1[6] = v39;
      goto LABEL_25;
    case 8u:
      uint64_t v44 = a2[1];
      *a1 = *a2;
      a1[1] = v44;
      uint64_t v45 = a2[3];
      a1[2] = a2[2];
      a1[3] = v45;
      uint64_t v46 = a2 + 4;
      unint64_t v47 = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v47 >= 3)
      {
        a1[4] = *v46;
        a1[5] = v47;
        swift_bridgeObjectRetain();
      }
      else
      {
        *((_OWORD *)a1 + 2) = *(_OWORD *)v46;
      }
      uint64_t v56 = a2[6];
      unint64_t v55 = a2[7];
      outlined copy of Data._Representation(v56, v55);
      a1[6] = v56;
      a1[7] = v55;
      goto LABEL_25;
    case 9u:
      uint64_t v40 = a2[1];
      *a1 = *a2;
      a1[1] = v40;
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      swift_bridgeObjectRetain();
      goto LABEL_25;
    case 0xAu:
      uint64_t v41 = a2[1];
      *a1 = *a2;
      a1[1] = v41;
      uint64_t v43 = a2[2];
      unint64_t v42 = a2[3];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v43, v42);
      a1[2] = v43;
      a1[3] = v42;
      goto LABEL_25;
    default:
      uint64_t v4 = a2[1];
      *a1 = *a2;
      a1[1] = v4;
      uint64_t v5 = a2[3];
      a1[2] = a2[2];
      a1[3] = v5;
LABEL_6:
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
LABEL_7:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_25:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
}

void *assignWithCopy for PromptCompletionStreamElementEnvelope.Envelope(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of DocumentResourceEnvelope((uint64_t)a1, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        a1[7] = a2[7];
        a1[8] = a2[8];
        a1[9] = a2[9];
        a1[10] = a2[10];
        a1[11] = a2[11];
        a1[12] = a2[12];
        a1[13] = a2[13];
        a1[14] = a2[14];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        goto LABEL_8;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        goto LABEL_7;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        uint64_t v4 = a2 + 7;
        unint64_t v5 = a2[8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v5 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 7) = *(_OWORD *)v4;
        }
        else
        {
          uint64_t v20 = *v4;
          outlined copy of Data._Representation(*v4, v5);
          a1[7] = v20;
          a1[8] = v5;
        }
        goto LABEL_26;
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        uint64_t v6 = *(int *)(type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(0)
                    + 28);
        uint64_t v7 = (char *)a1 + v6;
        uint64_t v8 = (char *)a2 + v6;
        *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
        uint64_t v9 = *(int *)(type metadata accessor for AnnotationEnvelope(0) + 20);
        uint64_t v10 = &v7[v9];
        uint64_t v11 = &v8[v9];
        type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v12 = type metadata accessor for DocumentResourceIdentifier();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
        }
        else
        {
          *(void *)uint64_t v10 = *(void *)v11;
          *((void *)v10 + 1) = *((void *)v11 + 1);
          uint64_t v21 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
          uint64_t v22 = &v10[v21];
          uint64_t v29 = &v11[v21];
          uint64_t v23 = type metadata accessor for URL();
          uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16);
          swift_bridgeObjectRetain();
          v24(v22, v29, v23);
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_26;
      case 6u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        a1[7] = a2[7];
        a1[8] = a2[8];
        a1[9] = a2[9];
        uint64_t v13 = a2 + 10;
        unint64_t v14 = a2[11];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v14 >> 60 == 15)
        {
          *((_OWORD *)a1 + 5) = *(_OWORD *)v13;
        }
        else
        {
          uint64_t v25 = *v13;
          outlined copy of Data._Representation(*v13, v14);
          a1[10] = v25;
          a1[11] = v14;
        }
        goto LABEL_26;
      case 7u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        uint64_t v16 = a2[5];
        unint64_t v15 = a2[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v16, v15);
        a1[5] = v16;
        a1[6] = v15;
        goto LABEL_26;
      case 8u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        unint64_t v19 = a2[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v19 >= 3)
        {
          a1[4] = a2[4];
          a1[5] = a2[5];
          swift_bridgeObjectRetain();
        }
        else
        {
          *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        }
        uint64_t v27 = a2[6];
        unint64_t v26 = a2[7];
        outlined copy of Data._Representation(v27, v26);
        a1[6] = v27;
        a1[7] = v26;
        goto LABEL_26;
      case 9u:
        *a1 = *a2;
        a1[1] = a2[1];
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_26;
      case 0xAu:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v18 = a2[2];
        unint64_t v17 = a2[3];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v18, v17);
        a1[2] = v18;
        a1[3] = v17;
        goto LABEL_26;
      default:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
LABEL_7:
        a1[4] = a2[4];
        swift_bridgeObjectRetain();
LABEL_8:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_26:
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
  return a1;
}

_OWORD *initializeWithTake for PromptCompletionStreamElementEnvelope.Envelope(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 5)
  {
    long long v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    *((void *)a1 + 4) = *((void *)a2 + 4);
    uint64_t v7 = *(int *)(type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(0)
                + 28);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    *(void *)((char *)a1 + v7) = *(void *)((char *)a2 + v7);
    uint64_t v10 = *(int *)(type metadata accessor for AnnotationEnvelope(0) + 20);
    uint64_t v11 = &v8[v10];
    uint64_t v12 = &v9[v10];
    type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
    }
    else
    {
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      uint64_t v14 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
      unint64_t v15 = &v11[v14];
      uint64_t v16 = &v12[v14];
      uint64_t v17 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
    }
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for PromptCompletionStreamElementEnvelope.Envelope(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of DocumentResourceEnvelope((uint64_t)a1, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
    if (swift_getEnumCaseMultiPayload() == 5)
    {
      long long v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      uint64_t v7 = *(int *)(type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(0)
                  + 28);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      *(void *)((char *)a1 + v7) = *(void *)((char *)a2 + v7);
      uint64_t v10 = *(int *)(type metadata accessor for AnnotationEnvelope(0) + 20);
      uint64_t v11 = &v8[v10];
      uint64_t v12 = &v9[v10];
      type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v13 = type metadata accessor for DocumentResourceIdentifier();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
      }
      else
      {
        *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
        uint64_t v14 = *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
        unint64_t v15 = &v11[v14];
        uint64_t v16 = &v12[v14];
        uint64_t v17 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
      }
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for PromptCompletionStreamElementEnvelope.Envelope()
{
  uint64_t result = type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentResourceEnvelope(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(_DWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 20));
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for DocumentResourceEnvelope(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DocumentResourceEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DocumentResourceEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for DocumentResourceEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for DocumentResourceEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentResourceEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F85B4C4);
}

uint64_t sub_25F85B4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for DocumentResourceEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F85B598);
}

uint64_t sub_25F85B598(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URL();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for DocumentResourceEnvelope()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PromptTemplateInfoEnvelope(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    a1[2] = a2[2];
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for Locale();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v11(v8, 1, v9))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v3;
}

uint64_t destroy for PromptTemplateInfoEnvelope(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Locale();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

void *initializeWithCopy for PromptTemplateInfoEnvelope(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Locale();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10(v7, 1, v8))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

void *assignWithCopy for PromptTemplateInfoEnvelope(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Locale();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t initializeWithTake for PromptTemplateInfoEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = type metadata accessor for Locale();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void *assignWithTake for PromptTemplateInfoEnvelope(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Locale();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptTemplateInfoEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F85BF14);
}

uint64_t sub_25F85BF14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_14Tm(a1, a2, a3, &demangling cache variable for type metadata for Locale?);
}

uint64_t __swift_get_extra_inhabitant_index_14Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 >= 0xFFFFFFFF) {
      LODWORD(v5) = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a4);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 24);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for PromptTemplateInfoEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F85BFE4);
}

uint64_t sub_25F85BFE4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_15Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for Locale?);
}

uint64_t __swift_store_extra_inhabitant_index_15Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
    uint64_t v10 = v8;
    uint64_t v11 = v6 + *(int *)(a4 + 24);
    return v9(v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for PromptTemplateInfoEnvelope()
{
  type metadata accessor for Constraints?(319, (unint64_t *)&lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Constraints?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for StreamingRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v10 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v10;
      uint64_t v11 = a2[3];
      *(void *)(a1 + 16) = a2[2];
      *(void *)(a1 + 24) = v11;
      uint64_t v12 = a2[5];
      *(void *)(a1 + 32) = a2[4];
      *(void *)(a1 + 40) = v12;
      uint64_t v14 = a2[6];
      uint64_t v13 = a2[7];
      *(void *)(a1 + 48) = v14;
      *(void *)(a1 + 56) = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = a2[1];
      if (v7)
      {
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v7;
        uint64_t v8 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v8;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v27 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v27;
      }
      uint64_t v81 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
      uint64_t v28 = v81[5];
      uint64_t v29 = (void *)(a1 + v28);
      uint64_t v30 = (uint64_t)a2 + v28;
      uint64_t v31 = *(uint64_t *)((char *)a2 + v28 + 8);
      *uint64_t v29 = *(uint64_t *)((char *)a2 + v28);
      v29[1] = v31;
      v29[2] = *(uint64_t *)((char *)a2 + v28 + 16);
      uint64_t v32 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      uint64_t v33 = (char *)v29 + v32;
      uint64_t v34 = (const void *)(v30 + v32);
      uint64_t v35 = type metadata accessor for Locale();
      uint64_t v36 = *(void *)(v35 - 8);
      uint64_t v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v37(v34, 1, v35))
      {
        uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v36 + 16))(v33, v34, v35);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      uint64_t v41 = v81[6];
      uint64_t v42 = a1 + v41;
      uint64_t v43 = (uint64_t)a2 + v41;
      *(void *)uint64_t v42 = *(void *)v43;
      *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
      *(void *)(v42 + 16) = *(void *)(v43 + 16);
      *(unsigned char *)(v42 + 24) = *(unsigned char *)(v43 + 24);
      *(void *)(v42 + 32) = *(void *)(v43 + 32);
      *(unsigned char *)(v42 + 40) = *(unsigned char *)(v43 + 40);
      *(unsigned char *)(v42 + 56) = *(unsigned char *)(v43 + 56);
      *(void *)(v42 + 48) = *(void *)(v43 + 48);
      uint64_t v44 = *(void *)(v43 + 64);
      *(unsigned char *)(v42 + 72) = *(unsigned char *)(v43 + 72);
      *(void *)(v42 + 64) = v44;
      uint64_t v45 = *(void *)(v43 + 88);
      *(void *)(v42 + 80) = *(void *)(v43 + 80);
      *(void *)(v42 + 88) = v45;
      *(unsigned char *)(v42 + 96) = *(unsigned char *)(v43 + 96);
      *(void *)(v42 + 104) = *(void *)(v43 + 104);
      *(unsigned char *)(v42 + 112) = *(unsigned char *)(v43 + 112);
      *(void *)(v42 + 120) = *(void *)(v43 + 120);
      *(_WORD *)(v42 + 128) = *(_WORD *)(v43 + 128);
      *(void *)(a1 + v81[7]) = *(uint64_t *)((char *)a2 + v81[7]);
      uint64_t v46 = v81[8];
      uint64_t v47 = a1 + v46;
      uint64_t v48 = (_OWORD *)((char *)a2 + v46);
      unint64_t v49 = *(uint64_t *)((char *)a2 + v46 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v49 < 4)
      {
        *(_OWORD *)uint64_t v47 = *v48;
      }
      else
      {
        *(void *)uint64_t v47 = *(void *)v48;
        *(void *)(v47 + 8) = v49;
        swift_bridgeObjectRetain();
      }
      *(void *)(a1 + v81[9]) = *(uint64_t *)((char *)a2 + v81[9]);
      uint64_t v50 = v81[10];
      uint64_t v51 = (void *)(a1 + v50);
      uint64_t v52 = (uint64_t *)((char *)a2 + v50);
      uint64_t v53 = type metadata accessor for Constraints(0);
      uint64_t v54 = *(void *)(v53 - 8);
      unint64_t v55 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v54 + 48);
      swift_bridgeObjectRetain();
      if (v55(v52, 1, v53))
      {
        uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v51, v52, *(void *)(*(void *)(v56 - 8) + 64));
      }
      else
      {
        int v57 = swift_getEnumCaseMultiPayload();
        if (v57 == 2 || v57 == 1)
        {
          uint64_t v58 = v52[1];
          *uint64_t v51 = *v52;
          v51[1] = v58;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v71 = type metadata accessor for GenerationSchema();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v71 - 8) + 16))(v51, v52, v71);
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      }
      uint64_t v72 = v81[11];
      long long v73 = (void *)(a1 + v72);
      uint64_t v74 = (uint64_t *)((char *)a2 + v72);
      uint64_t v75 = v74[1];
      *long long v73 = *v74;
      v73[1] = v75;
      uint64_t v76 = v74[3];
      v73[2] = v74[2];
      v73[3] = v76;
      uint64_t v77 = v74[5];
      v73[4] = v74[4];
      v73[5] = v77;
      v73[6] = v74[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v15 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v15;
      uint64_t v16 = a2[3];
      *(void *)(a1 + 16) = a2[2];
      *(void *)(a1 + 24) = v16;
      *(void *)(a1 + 32) = a2[4];
      *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
      *(void *)(a1 + 48) = a2[6];
      *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
      uint64_t v17 = a2[8];
      *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
      *(void *)(a1 + 64) = v17;
      *(void *)(a1 + 80) = a2[10];
      *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
      *(void *)(a1 + 96) = a2[12];
      *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
      *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
      uint64_t v18 = a2[15];
      *(void *)(a1 + 112) = a2[14];
      *(void *)(a1 + 120) = v18;
      uint64_t v19 = a2[17];
      *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 144);
      *(void *)(a1 + 136) = v19;
      *(void *)(a1 + 152) = a2[19];
      *(_WORD *)(a1 + 160) = *((_WORD *)a2 + 80);
      uint64_t v80 = type metadata accessor for CompletePromptRequest(0);
      uint64_t v20 = *(int *)(v80 + 24);
      __dst = (void *)(a1 + v20);
      uint64_t v21 = (uint64_t *)((char *)a2 + v20);
      uint64_t v22 = type metadata accessor for Constraints(0);
      uint64_t v23 = *(void *)(v22 - 8);
      uint64_t v24 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v23 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v24(v21, 1, v22))
      {
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(__dst, v21, *(void *)(*(void *)(v25 - 8) + 64));
        unint64_t v26 = (int *)v80;
      }
      else
      {
        int v39 = swift_getEnumCaseMultiPayload();
        if (v39 == 2)
        {
          uint64_t v59 = v21[1];
          void *__dst = *v21;
          __dst[1] = v59;
          swift_bridgeObjectRetain();
          unint64_t v26 = (int *)v80;
        }
        else
        {
          unint64_t v26 = (int *)v80;
          if (v39 == 1)
          {
            uint64_t v40 = v21[1];
            void *__dst = *v21;
            __dst[1] = v40;
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v60 = type metadata accessor for GenerationSchema();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v60 - 8) + 16))(__dst, v21, v60);
          }
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v22);
      }
      *(void *)(a1 + v26[7]) = *(uint64_t *)((char *)a2 + v26[7]);
      uint64_t v61 = v26[8];
      uint64_t v62 = a1 + v61;
      uint64_t v63 = (_OWORD *)((char *)a2 + v61);
      unint64_t v64 = *(uint64_t *)((char *)a2 + v61 + 8);
      swift_bridgeObjectRetain();
      if (v64 < 4)
      {
        *(_OWORD *)uint64_t v62 = *v63;
      }
      else
      {
        *(void *)uint64_t v62 = *(void *)v63;
        *(void *)(v62 + 8) = v64;
        swift_bridgeObjectRetain();
      }
      *(void *)(a1 + v26[9]) = *(uint64_t *)((char *)a2 + v26[9]);
      uint64_t v65 = v26[10];
      uint64_t v66 = (void *)(a1 + v65);
      uint64_t v67 = (uint64_t *)((char *)a2 + v65);
      uint64_t v68 = v67[1];
      *uint64_t v66 = *v67;
      v66[1] = v68;
      uint64_t v69 = v67[3];
      v66[2] = v67[2];
      v66[3] = v69;
      uint64_t v70 = v67[5];
      v66[4] = v67[4];
      v66[5] = v70;
      v66[6] = v67[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for StreamingRequest(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result != 2)
  {
    if (result == 1)
    {
      if (*(void *)(a1 + 8))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v8 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
      uint64_t v9 = a1 + v8[5];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v10 = v9 + *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      uint64_t v11 = type metadata accessor for Locale();
      uint64_t v12 = *(void *)(v11 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(a1 + v8[8] + 8) >= 4uLL) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      uint64_t v13 = a1 + v8[10];
      uint64_t v14 = type metadata accessor for Constraints(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14)) {
        goto LABEL_26;
      }
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload != 2 && EnumCaseMultiPayload != 1)
      {
        if (!EnumCaseMultiPayload)
        {
          uint64_t v16 = type metadata accessor for GenerationSchema();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v13, v16);
        }
        goto LABEL_26;
      }
    }
    else
    {
      if (result) {
        return result;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = type metadata accessor for CompletePromptRequest(0);
      uint64_t v4 = a1 + *(int *)(v3 + 24);
      uint64_t v5 = type metadata accessor for Constraints(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
      {
        int v6 = swift_getEnumCaseMultiPayload();
        if (v6 == 2 || v6 == 1)
        {
          swift_bridgeObjectRelease();
        }
        else if (!v6)
        {
          uint64_t v7 = type metadata accessor for GenerationSchema();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v4, v7);
        }
      }
      swift_bridgeObjectRelease();
      if (*(void *)(a1 + *(int *)(v3 + 32) + 8) >= 4uLL) {
        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
LABEL_26:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_27:
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StreamingRequest(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v9;
    uint64_t v10 = *(void *)(a2 + 48);
    uint64_t v11 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v10;
    *(void *)(a1 + 56) = v11;
LABEL_30:
    swift_bridgeObjectRetain();
    goto LABEL_34;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v12 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v12;
    uint64_t v13 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v13;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    uint64_t v14 = *(void *)(a2 + 64);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
    uint64_t v15 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = v15;
    uint64_t v16 = *(void *)(a2 + 136);
    *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
    *(void *)(a1 + 136) = v16;
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
    uint64_t v77 = type metadata accessor for CompletePromptRequest(0);
    uint64_t v17 = *(int *)(v77 + 24);
    __dst = (void *)(a1 + v17);
    uint64_t v18 = (void *)(a2 + v17);
    uint64_t v19 = type metadata accessor for Constraints(0);
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v21 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v20 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v21(v18, 1, v19))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      memcpy(__dst, v18, *(void *)(*(void *)(v22 - 8) + 64));
      uint64_t v23 = (int *)v77;
    }
    else
    {
      int v36 = swift_getEnumCaseMultiPayload();
      if (v36 == 2)
      {
        uint64_t v56 = v18[1];
        void *__dst = *v18;
        __dst[1] = v56;
        swift_bridgeObjectRetain();
        uint64_t v23 = (int *)v77;
      }
      else
      {
        uint64_t v23 = (int *)v77;
        if (v36 == 1)
        {
          uint64_t v37 = v18[1];
          void *__dst = *v18;
          __dst[1] = v37;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v57 = type metadata accessor for GenerationSchema();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v57 - 8) + 16))(__dst, v18, v57);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
    }
    *(void *)(a1 + v23[7]) = *(void *)(a2 + v23[7]);
    uint64_t v58 = v23[8];
    uint64_t v59 = a1 + v58;
    uint64_t v60 = (_OWORD *)(a2 + v58);
    unint64_t v61 = *(void *)(a2 + v58 + 8);
    swift_bridgeObjectRetain();
    if (v61 < 4)
    {
      *(_OWORD *)uint64_t v59 = *v60;
    }
    else
    {
      *(void *)uint64_t v59 = *(void *)v60;
      *(void *)(v59 + 8) = v61;
      swift_bridgeObjectRetain();
    }
    *(void *)(a1 + v23[9]) = *(void *)(a2 + v23[9]);
    uint64_t v62 = v23[10];
    uint64_t v63 = (void *)(a1 + v62);
    unint64_t v64 = (void *)(a2 + v62);
    uint64_t v65 = v64[1];
    *uint64_t v63 = *v64;
    v63[1] = v65;
    uint64_t v66 = v64[3];
    v63[2] = v64[2];
    v63[3] = v66;
    uint64_t v67 = v64[5];
    v63[4] = v64[4];
    v63[5] = v67;
    v63[6] = v64[6];
    goto LABEL_30;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v24 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v24;
  }
  __int16 v78 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
  uint64_t v25 = v78[5];
  unint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = a2 + v25;
  uint64_t v28 = *(void *)(a2 + v25 + 8);
  *unint64_t v26 = *(void *)(a2 + v25);
  v26[1] = v28;
  v26[2] = *(void *)(a2 + v25 + 16);
  uint64_t v29 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
  uint64_t v30 = (char *)v26 + v29;
  uint64_t v31 = (const void *)(v27 + v29);
  uint64_t v32 = type metadata accessor for Locale();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v34(v31, 1, v32))
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v30, v31, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v33 + 16))(v30, v31, v32);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  uint64_t v38 = v78[6];
  uint64_t v39 = a1 + v38;
  uint64_t v40 = a2 + v38;
  *(void *)uint64_t v39 = *(void *)v40;
  *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
  *(void *)(v39 + 16) = *(void *)(v40 + 16);
  *(unsigned char *)(v39 + 24) = *(unsigned char *)(v40 + 24);
  *(void *)(v39 + 32) = *(void *)(v40 + 32);
  *(unsigned char *)(v39 + 40) = *(unsigned char *)(v40 + 40);
  *(unsigned char *)(v39 + 56) = *(unsigned char *)(v40 + 56);
  *(void *)(v39 + 48) = *(void *)(v40 + 48);
  uint64_t v41 = *(void *)(v40 + 64);
  *(unsigned char *)(v39 + 72) = *(unsigned char *)(v40 + 72);
  *(void *)(v39 + 64) = v41;
  uint64_t v42 = *(void *)(v40 + 88);
  *(void *)(v39 + 80) = *(void *)(v40 + 80);
  *(void *)(v39 + 88) = v42;
  *(unsigned char *)(v39 + 96) = *(unsigned char *)(v40 + 96);
  *(void *)(v39 + 104) = *(void *)(v40 + 104);
  *(unsigned char *)(v39 + 112) = *(unsigned char *)(v40 + 112);
  *(void *)(v39 + 120) = *(void *)(v40 + 120);
  *(_WORD *)(v39 + 128) = *(_WORD *)(v40 + 128);
  *(void *)(a1 + v78[7]) = *(void *)(a2 + v78[7]);
  uint64_t v43 = v78[8];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = (_OWORD *)(a2 + v43);
  unint64_t v46 = *(void *)(a2 + v43 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v46 < 4)
  {
    *(_OWORD *)uint64_t v44 = *v45;
  }
  else
  {
    *(void *)uint64_t v44 = *(void *)v45;
    *(void *)(v44 + 8) = v46;
    swift_bridgeObjectRetain();
  }
  *(void *)(a1 + v78[9]) = *(void *)(a2 + v78[9]);
  uint64_t v47 = v78[10];
  uint64_t v48 = (void *)(a1 + v47);
  unint64_t v49 = (void *)(a2 + v47);
  uint64_t v50 = type metadata accessor for Constraints(0);
  uint64_t v51 = *(void *)(v50 - 8);
  uint64_t v52 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v51 + 48);
  swift_bridgeObjectRetain();
  if (v52(v49, 1, v50))
  {
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
    memcpy(v48, v49, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    int v54 = swift_getEnumCaseMultiPayload();
    if (v54 == 2 || v54 == 1)
    {
      uint64_t v55 = v49[1];
      *uint64_t v48 = *v49;
      v48[1] = v55;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v68 = type metadata accessor for GenerationSchema();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v68 - 8) + 16))(v48, v49, v68);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
  }
  uint64_t v69 = v78[11];
  uint64_t v70 = (void *)(a1 + v69);
  uint64_t v71 = (void *)(a2 + v69);
  uint64_t v72 = v71[1];
  void *v70 = *v71;
  v70[1] = v72;
  uint64_t v73 = v71[3];
  v70[2] = v71[2];
  v70[3] = v73;
  uint64_t v74 = v71[5];
  v70[4] = v71[4];
  v70[5] = v74;
  v70[6] = v71[6];
LABEL_34:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for StreamingRequest(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of DocumentResourceEnvelope(a1, type metadata accessor for StreamingRequest);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      if (*(void *)(a2 + 8))
      {
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v19 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v19;
      }
      uint64_t v69 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
      uint64_t v20 = v69[5];
      uint64_t v21 = (void *)(a1 + v20);
      uint64_t v22 = a2 + v20;
      void *v21 = *(void *)(a2 + v20);
      v21[1] = *(void *)(a2 + v20 + 8);
      void v21[2] = *(void *)(a2 + v20 + 16);
      uint64_t v23 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      long long v24 = (char *)v21 + v23;
      uint64_t v25 = (const void *)(v22 + v23);
      uint64_t v26 = type metadata accessor for Locale();
      uint64_t v27 = *(void *)(v26 - 8);
      uint64_t v28 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v28(v25, 1, v26))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v27 + 16))(v24, v25, v26);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      uint64_t v31 = v69[6];
      uint64_t v32 = a1 + v31;
      uint64_t v33 = (uint64_t *)(a2 + v31);
      uint64_t v34 = *v33;
      *(unsigned char *)(v32 + 8) = *((unsigned char *)v33 + 8);
      *(void *)uint64_t v32 = v34;
      uint64_t v35 = v33[2];
      *(unsigned char *)(v32 + 24) = *((unsigned char *)v33 + 24);
      *(void *)(v32 + 16) = v35;
      uint64_t v36 = v33[4];
      *(unsigned char *)(v32 + 40) = *((unsigned char *)v33 + 40);
      *(void *)(v32 + 32) = v36;
      uint64_t v37 = v33[6];
      *(unsigned char *)(v32 + 56) = *((unsigned char *)v33 + 56);
      *(void *)(v32 + 48) = v37;
      uint64_t v38 = v33[8];
      *(unsigned char *)(v32 + 72) = *((unsigned char *)v33 + 72);
      *(void *)(v32 + 64) = v38;
      *(void *)(v32 + 80) = v33[10];
      uint64_t v39 = v33[11];
      *(unsigned char *)(v32 + 96) = *((unsigned char *)v33 + 96);
      *(void *)(v32 + 88) = v39;
      uint64_t v40 = v33[13];
      *(unsigned char *)(v32 + 112) = *((unsigned char *)v33 + 112);
      *(void *)(v32 + 104) = v40;
      uint64_t v41 = v33[15];
      *(unsigned char *)(v32 + 128) = *((unsigned char *)v33 + 128);
      *(void *)(v32 + 120) = v41;
      *(unsigned char *)(v32 + 129) = *((unsigned char *)v33 + 129);
      *(void *)(a1 + v69[7]) = *(void *)(a2 + v69[7]);
      uint64_t v42 = v69[8];
      uint64_t v43 = a1 + v42;
      uint64_t v44 = a2 + v42;
      unint64_t v45 = *(void *)(a2 + v42 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v45 < 4)
      {
        *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
      }
      else
      {
        *(void *)uint64_t v43 = *(void *)v44;
        *(void *)(v43 + 8) = *(void *)(v44 + 8);
        swift_bridgeObjectRetain();
      }
      *(void *)(a1 + v69[9]) = *(void *)(a2 + v69[9]);
      uint64_t v46 = v69[10];
      uint64_t v47 = (void *)(a1 + v46);
      uint64_t v48 = (void *)(a2 + v46);
      uint64_t v49 = type metadata accessor for Constraints(0);
      uint64_t v50 = *(void *)(v49 - 8);
      uint64_t v51 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v50 + 48);
      swift_bridgeObjectRetain();
      if (v51(v48, 1, v49))
      {
        uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v47, v48, *(void *)(*(void *)(v52 - 8) + 64));
      }
      else
      {
        int v53 = swift_getEnumCaseMultiPayload();
        if (v53 == 2 || v53 == 1)
        {
          *uint64_t v47 = *v48;
          v47[1] = v48[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v62 = type metadata accessor for GenerationSchema();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v62 - 8) + 16))(v47, v48, v62);
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
      }
      uint64_t v63 = v69[11];
      unint64_t v64 = (void *)(a1 + v63);
      uint64_t v65 = (void *)(a2 + v63);
      void *v64 = *v65;
      v64[1] = v65[1];
      v64[2] = v65[2];
      v64[3] = v65[3];
      v64[4] = v65[4];
      v64[5] = v65[5];
      v64[6] = v65[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v5 = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(void *)(a1 + 32) = v5;
      uint64_t v6 = *(void *)(a2 + 48);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      *(void *)(a1 + 48) = v6;
      uint64_t v7 = *(void *)(a2 + 64);
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *(void *)(a1 + 64) = v7;
      uint64_t v8 = *(void *)(a2 + 80);
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      *(void *)(a1 + 80) = v8;
      uint64_t v9 = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      *(void *)(a1 + 96) = v9;
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      uint64_t v10 = *(void *)(a2 + 120);
      *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
      *(void *)(a1 + 120) = v10;
      uint64_t v11 = *(void *)(a2 + 136);
      *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
      *(void *)(a1 + 136) = v11;
      uint64_t v12 = *(void *)(a2 + 152);
      *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
      *(void *)(a1 + 152) = v12;
      *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
      uint64_t v68 = (int *)type metadata accessor for CompletePromptRequest(0);
      uint64_t v13 = v68[6];
      __dst = (void *)(a1 + v13);
      uint64_t v14 = (void *)(a2 + v13);
      uint64_t v15 = type metadata accessor for Constraints(0);
      uint64_t v16 = *(void *)(v15 - 8);
      uint64_t v17 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v17(v14, 1, v15))
      {
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(__dst, v14, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        int v30 = swift_getEnumCaseMultiPayload();
        if (v30 == 2 || v30 == 1)
        {
          void *__dst = *v14;
          __dst[1] = v14[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v54 = type metadata accessor for GenerationSchema();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v54 - 8) + 16))(__dst, v14, v54);
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
      }
      *(void *)(a1 + v68[7]) = *(void *)(a2 + v68[7]);
      uint64_t v55 = v68[8];
      uint64_t v56 = a1 + v55;
      uint64_t v57 = a2 + v55;
      unint64_t v58 = *(void *)(a2 + v55 + 8);
      swift_bridgeObjectRetain();
      if (v58 < 4)
      {
        *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
      }
      else
      {
        *(void *)uint64_t v56 = *(void *)v57;
        *(void *)(v56 + 8) = *(void *)(v57 + 8);
        swift_bridgeObjectRetain();
      }
      *(void *)(a1 + v68[9]) = *(void *)(a2 + v68[9]);
      uint64_t v59 = v68[10];
      uint64_t v60 = (void *)(a1 + v59);
      unint64_t v61 = (void *)(a2 + v59);
      *uint64_t v60 = *v61;
      v60[1] = v61[1];
      void v60[2] = v61[2];
      v60[3] = v61[3];
      v60[4] = v61[4];
      v60[5] = v61[5];
      v60[6] = v61[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for StreamingRequest(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for StreamingRequest);
}

_OWORD *initializeWithTake for StreamingRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    long long v19 = a2[1];
    *a1 = *a2;
    a1[1] = v19;
    uint64_t v20 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
    uint64_t v21 = v20[5];
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    *(_OWORD *)uint64_t v22 = *(_OWORD *)((char *)a2 + v21);
    *((void *)v22 + 2) = *(void *)((char *)a2 + v21 + 16);
    uint64_t v24 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
    uint64_t v25 = &v22[v24];
    uint64_t v26 = &v23[v24];
    uint64_t v27 = type metadata accessor for Locale();
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    uint64_t v30 = v20[6];
    uint64_t v31 = (char *)a1 + v30;
    uint64_t v32 = (char *)a2 + v30;
    long long v33 = *((_OWORD *)v32 + 3);
    *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
    *((_OWORD *)v31 + 3) = v33;
    *((_WORD *)v31 + 64) = *((_WORD *)v32 + 64);
    long long v34 = *((_OWORD *)v32 + 7);
    *((_OWORD *)v31 + 6) = *((_OWORD *)v32 + 6);
    *((_OWORD *)v31 + 7) = v34;
    long long v35 = *((_OWORD *)v32 + 5);
    *((_OWORD *)v31 + 4) = *((_OWORD *)v32 + 4);
    *((_OWORD *)v31 + 5) = v35;
    long long v36 = *((_OWORD *)v32 + 1);
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
    *((_OWORD *)v31 + 1) = v36;
    *(void *)((char *)a1 + v20[7]) = *(void *)((char *)a2 + v20[7]);
    *(_OWORD *)((char *)a1 + v20[8]) = *(_OWORD *)((char *)a2 + v20[8]);
    *(void *)((char *)a1 + v20[9]) = *(void *)((char *)a2 + v20[9]);
    uint64_t v37 = v20[10];
    uint64_t v38 = (char *)a1 + v37;
    uint64_t v39 = (char *)a2 + v37;
    uint64_t v40 = type metadata accessor for Constraints(0);
    uint64_t v41 = *(void *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v38, v39, *(void *)(v41 + 64));
      }
      else
      {
        uint64_t v48 = type metadata accessor for GenerationSchema();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 32))(v38, v39, v48);
        swift_storeEnumTagMultiPayload();
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    uint64_t v49 = v20[11];
    uint64_t v50 = (char *)a1 + v49;
    uint64_t v51 = (char *)a2 + v49;
    long long v52 = *((_OWORD *)v51 + 1);
    *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
    *((_OWORD *)v50 + 1) = v52;
    *((_OWORD *)v50 + 2) = *((_OWORD *)v51 + 2);
    *((void *)v50 + 6) = *((void *)v51 + 6);
LABEL_21:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    long long v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    long long v8 = a2[9];
    a1[8] = a2[8];
    a1[9] = v8;
    *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
    long long v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    long long v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    long long v11 = a2[3];
    a1[2] = a2[2];
    a1[3] = v11;
    uint64_t v12 = (int *)type metadata accessor for CompletePromptRequest(0);
    uint64_t v13 = v12[6];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for Constraints(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v14, v15, *(void *)(v17 + 64));
      }
      else
      {
        uint64_t v43 = type metadata accessor for GenerationSchema();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32))(v14, v15, v43);
        swift_storeEnumTagMultiPayload();
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    *(void *)((char *)a1 + v12[7]) = *(void *)((char *)a2 + v12[7]);
    *(_OWORD *)((char *)a1 + v12[8]) = *(_OWORD *)((char *)a2 + v12[8]);
    *(void *)((char *)a1 + v12[9]) = *(void *)((char *)a2 + v12[9]);
    uint64_t v44 = v12[10];
    unint64_t v45 = (char *)a1 + v44;
    uint64_t v46 = (char *)a2 + v44;
    long long v47 = *((_OWORD *)v46 + 1);
    *(_OWORD *)unint64_t v45 = *(_OWORD *)v46;
    *((_OWORD *)v45 + 1) = v47;
    *((_OWORD *)v45 + 2) = *((_OWORD *)v46 + 2);
    *((void *)v45 + 6) = *((void *)v46 + 6);
    goto LABEL_21;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

_OWORD *assignWithTake for StreamingRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of DocumentResourceEnvelope((uint64_t)a1, type metadata accessor for StreamingRequest);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      long long v19 = a2[1];
      *a1 = *a2;
      a1[1] = v19;
      uint64_t v20 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
      uint64_t v21 = v20[5];
      uint64_t v22 = (char *)a1 + v21;
      uint64_t v23 = (char *)a2 + v21;
      *(_OWORD *)uint64_t v22 = *(_OWORD *)((char *)a2 + v21);
      *((void *)v22 + 2) = *(void *)((char *)a2 + v21 + 16);
      uint64_t v24 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      uint64_t v25 = &v22[v24];
      uint64_t v26 = &v23[v24];
      uint64_t v27 = type metadata accessor for Locale();
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      uint64_t v30 = v20[6];
      uint64_t v31 = (char *)a1 + v30;
      uint64_t v32 = (char *)a2 + v30;
      long long v33 = *((_OWORD *)v32 + 3);
      *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
      *((_OWORD *)v31 + 3) = v33;
      *((_WORD *)v31 + 64) = *((_WORD *)v32 + 64);
      long long v34 = *((_OWORD *)v32 + 7);
      *((_OWORD *)v31 + 6) = *((_OWORD *)v32 + 6);
      *((_OWORD *)v31 + 7) = v34;
      long long v35 = *((_OWORD *)v32 + 5);
      *((_OWORD *)v31 + 4) = *((_OWORD *)v32 + 4);
      *((_OWORD *)v31 + 5) = v35;
      long long v36 = *((_OWORD *)v32 + 1);
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
      *((_OWORD *)v31 + 1) = v36;
      *(void *)((char *)a1 + v20[7]) = *(void *)((char *)a2 + v20[7]);
      *(_OWORD *)((char *)a1 + v20[8]) = *(_OWORD *)((char *)a2 + v20[8]);
      *(void *)((char *)a1 + v20[9]) = *(void *)((char *)a2 + v20[9]);
      uint64_t v37 = v20[10];
      uint64_t v38 = (char *)a1 + v37;
      uint64_t v39 = (char *)a2 + v37;
      uint64_t v40 = type metadata accessor for Constraints(0);
      uint64_t v41 = *(void *)(v40 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
      {
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v38, v39, *(void *)(v41 + 64));
        }
        else
        {
          uint64_t v48 = type metadata accessor for GenerationSchema();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 32))(v38, v39, v48);
          swift_storeEnumTagMultiPayload();
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      }
      uint64_t v49 = v20[11];
      uint64_t v50 = (char *)a1 + v49;
      uint64_t v51 = (char *)a2 + v49;
      long long v52 = *((_OWORD *)v51 + 1);
      *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
      *((_OWORD *)v50 + 1) = v52;
      *((_OWORD *)v50 + 2) = *((_OWORD *)v51 + 2);
      *((void *)v50 + 6) = *((void *)v51 + 6);
LABEL_22:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      long long v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      long long v8 = a2[9];
      a1[8] = a2[8];
      a1[9] = v8;
      *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
      long long v9 = a2[5];
      a1[4] = a2[4];
      a1[5] = v9;
      long long v10 = a2[7];
      a1[6] = a2[6];
      a1[7] = v10;
      long long v11 = a2[3];
      a1[2] = a2[2];
      a1[3] = v11;
      uint64_t v12 = (int *)type metadata accessor for CompletePromptRequest(0);
      uint64_t v13 = v12[6];
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = type metadata accessor for Constraints(0);
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v14, v15, *(void *)(v17 + 64));
        }
        else
        {
          uint64_t v43 = type metadata accessor for GenerationSchema();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32))(v14, v15, v43);
          swift_storeEnumTagMultiPayload();
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      *(void *)((char *)a1 + v12[7]) = *(void *)((char *)a2 + v12[7]);
      *(_OWORD *)((char *)a1 + v12[8]) = *(_OWORD *)((char *)a2 + v12[8]);
      *(void *)((char *)a1 + v12[9]) = *(void *)((char *)a2 + v12[9]);
      uint64_t v44 = v12[10];
      unint64_t v45 = (char *)a1 + v44;
      uint64_t v46 = (char *)a2 + v44;
      long long v47 = *((_OWORD *)v46 + 1);
      *(_OWORD *)unint64_t v45 = *(_OWORD *)v46;
      *((_OWORD *)v45 + 1) = v47;
      *((_OWORD *)v45 + 2) = *((_OWORD *)v46 + 2);
      *((void *)v45 + 6) = *((void *)v46 + 6);
      goto LABEL_22;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata completion function for StreamingRequest()
{
  uint64_t result = type metadata accessor for CompletePromptRequest(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for CompletePromptTemplateRequest(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for RequestPayload(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)a1 = *a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v12 = a2[1];
        if (v12)
        {
          *(void *)a1 = *a2;
          *(void *)(a1 + 8) = v12;
          uint64_t v13 = a2[3];
          *(void *)(a1 + 16) = a2[2];
          *(void *)(a1 + 24) = v13;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v28 = *((_OWORD *)a2 + 1);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v28;
        }
        uint64_t v100 = type metadata accessor for CountTokensPromptTemplateRequest(0);
        uint64_t v29 = *(int *)(v100 + 20);
        uint64_t v30 = (void *)(a1 + v29);
        uint64_t v31 = (uint64_t)a2 + v29;
        uint64_t v32 = *(uint64_t *)((char *)a2 + v29 + 8);
        *uint64_t v30 = *(uint64_t *)((char *)a2 + v29);
        v30[1] = v32;
        v30[2] = *(uint64_t *)((char *)a2 + v29 + 16);
        uint64_t v33 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
        long long v34 = (char *)v30 + v33;
        long long v35 = (const void *)(v31 + v33);
        uint64_t v36 = type metadata accessor for Locale();
        uint64_t v37 = *(void *)(v36 - 8);
        uint64_t v38 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v37 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v38(v35, 1, v36))
        {
          uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
          memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, const void *, uint64_t))(v37 + 16))(v34, v35, v36);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
        }
        uint64_t v54 = *(int *)(v100 + 24);
        uint64_t v55 = (void *)(a1 + v54);
        uint64_t v56 = (uint64_t *)((char *)a2 + v54);
        uint64_t v57 = v56[1];
        *uint64_t v55 = *v56;
        v55[1] = v57;
        uint64_t v58 = v56[3];
        v55[2] = v56[2];
        v55[3] = v58;
        uint64_t v59 = v56[5];
        v55[4] = v56[4];
        v55[5] = v59;
        v55[6] = v56[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 2u:
        uint64_t v14 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v14;
        uint64_t v15 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v15;
        *(void *)(a1 + 32) = a2[4];
        *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
        *(void *)(a1 + 48) = a2[6];
        *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
        uint64_t v16 = a2[8];
        *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
        *(void *)(a1 + 64) = v16;
        *(void *)(a1 + 80) = a2[10];
        *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
        *(void *)(a1 + 96) = a2[12];
        *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
        *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
        uint64_t v17 = a2[15];
        *(void *)(a1 + 112) = a2[14];
        *(void *)(a1 + 120) = v17;
        uint64_t v18 = a2[17];
        *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 144);
        *(void *)(a1 + 136) = v18;
        *(void *)(a1 + 152) = a2[19];
        *(_WORD *)(a1 + 160) = *((_WORD *)a2 + 80);
        uint64_t v99 = type metadata accessor for CompletePromptRequest(0);
        uint64_t v19 = *(int *)(v99 + 24);
        __dst = (void *)(a1 + v19);
        uint64_t v20 = (uint64_t *)((char *)a2 + v19);
        uint64_t v21 = type metadata accessor for Constraints(0);
        uint64_t v22 = *(void *)(v21 - 8);
        uint64_t v23 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v22 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v23(v20, 1, v21))
        {
          uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
          memcpy(__dst, v20, *(void *)(*(void *)(v24 - 8) + 64));
          uint64_t v25 = (int *)v99;
        }
        else
        {
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          if (EnumCaseMultiPayload == 2)
          {
            uint64_t v78 = v20[1];
            void *__dst = *v20;
            __dst[1] = v78;
            swift_bridgeObjectRetain();
            uint64_t v25 = (int *)v99;
          }
          else
          {
            uint64_t v25 = (int *)v99;
            if (EnumCaseMultiPayload == 1)
            {
              uint64_t v41 = v20[1];
              void *__dst = *v20;
              __dst[1] = v41;
              swift_bridgeObjectRetain();
            }
            else
            {
              uint64_t v79 = type metadata accessor for GenerationSchema();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v79 - 8) + 16))(__dst, v20, v79);
            }
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
        }
        *(void *)(a1 + v25[7]) = *(uint64_t *)((char *)a2 + v25[7]);
        uint64_t v80 = v25[8];
        uint64_t v81 = a1 + v80;
        int v82 = (_OWORD *)((char *)a2 + v80);
        unint64_t v83 = *(uint64_t *)((char *)a2 + v80 + 8);
        swift_bridgeObjectRetain();
        if (v83 < 4)
        {
          *(_OWORD *)uint64_t v81 = *v82;
        }
        else
        {
          *(void *)uint64_t v81 = *(void *)v82;
          *(void *)(v81 + 8) = v83;
          swift_bridgeObjectRetain();
        }
        *(void *)(a1 + v25[9]) = *(uint64_t *)((char *)a2 + v25[9]);
        uint64_t v84 = v25[10];
        uint64_t v85 = (void *)(a1 + v84);
        int64_t v86 = (uint64_t *)((char *)a2 + v84);
        uint64_t v87 = v86[1];
        *uint64_t v85 = *v86;
        v85[1] = v87;
        uint64_t v88 = v86[3];
        v85[2] = v86[2];
        v85[3] = v88;
        uint64_t v89 = v86[5];
        v85[4] = v86[4];
        v85[5] = v89;
        v85[6] = v86[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v26 = a2[1];
        if (v26)
        {
          *(void *)a1 = *a2;
          *(void *)(a1 + 8) = v26;
          uint64_t v27 = a2[3];
          *(void *)(a1 + 16) = a2[2];
          *(void *)(a1 + 24) = v27;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v42 = *((_OWORD *)a2 + 1);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v42;
        }
        uint64_t v101 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
        uint64_t v43 = v101[5];
        uint64_t v44 = (void *)(a1 + v43);
        uint64_t v45 = (uint64_t)a2 + v43;
        uint64_t v46 = *(uint64_t *)((char *)a2 + v43 + 8);
        *uint64_t v44 = *(uint64_t *)((char *)a2 + v43);
        v44[1] = v46;
        v44[2] = *(uint64_t *)((char *)a2 + v43 + 16);
        uint64_t v47 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
        uint64_t v48 = (char *)v44 + v47;
        uint64_t v49 = (const void *)(v45 + v47);
        uint64_t v50 = type metadata accessor for Locale();
        uint64_t v51 = *(void *)(v50 - 8);
        long long v52 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v51 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v52(v49, 1, v50))
        {
          uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
          memcpy(v48, v49, *(void *)(*(void *)(v53 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, const void *, uint64_t))(v51 + 16))(v48, v49, v50);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
        }
        uint64_t v60 = v101[6];
        uint64_t v61 = a1 + v60;
        uint64_t v62 = (uint64_t)a2 + v60;
        *(void *)uint64_t v61 = *(void *)v62;
        *(unsigned char *)(v61 + 8) = *(unsigned char *)(v62 + 8);
        *(void *)(v61 + 16) = *(void *)(v62 + 16);
        *(unsigned char *)(v61 + 24) = *(unsigned char *)(v62 + 24);
        *(void *)(v61 + 32) = *(void *)(v62 + 32);
        *(unsigned char *)(v61 + 40) = *(unsigned char *)(v62 + 40);
        *(unsigned char *)(v61 + 56) = *(unsigned char *)(v62 + 56);
        *(void *)(v61 + 48) = *(void *)(v62 + 48);
        uint64_t v63 = *(void *)(v62 + 64);
        *(unsigned char *)(v61 + 72) = *(unsigned char *)(v62 + 72);
        *(void *)(v61 + 64) = v63;
        uint64_t v64 = *(void *)(v62 + 88);
        *(void *)(v61 + 80) = *(void *)(v62 + 80);
        *(void *)(v61 + 88) = v64;
        *(unsigned char *)(v61 + 96) = *(unsigned char *)(v62 + 96);
        *(void *)(v61 + 104) = *(void *)(v62 + 104);
        *(unsigned char *)(v61 + 112) = *(unsigned char *)(v62 + 112);
        *(void *)(v61 + 120) = *(void *)(v62 + 120);
        *(_WORD *)(v61 + 128) = *(_WORD *)(v62 + 128);
        *(void *)(a1 + v101[7]) = *(uint64_t *)((char *)a2 + v101[7]);
        uint64_t v65 = v101[8];
        uint64_t v66 = a1 + v65;
        uint64_t v67 = (_OWORD *)((char *)a2 + v65);
        unint64_t v68 = *(uint64_t *)((char *)a2 + v65 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v68 < 4)
        {
          *(_OWORD *)uint64_t v66 = *v67;
        }
        else
        {
          *(void *)uint64_t v66 = *(void *)v67;
          *(void *)(v66 + 8) = v68;
          swift_bridgeObjectRetain();
        }
        *(void *)(a1 + v101[9]) = *(uint64_t *)((char *)a2 + v101[9]);
        uint64_t v69 = v101[10];
        uint64_t v70 = (void *)(a1 + v69);
        uint64_t v71 = (uint64_t *)((char *)a2 + v69);
        uint64_t v72 = type metadata accessor for Constraints(0);
        uint64_t v73 = *(void *)(v72 - 8);
        uint64_t v74 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v73 + 48);
        swift_bridgeObjectRetain();
        if (v74(v71, 1, v72))
        {
          uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
          memcpy(v70, v71, *(void *)(*(void *)(v75 - 8) + 64));
        }
        else
        {
          int v76 = swift_getEnumCaseMultiPayload();
          if (v76 == 2 || v76 == 1)
          {
            uint64_t v77 = v71[1];
            void *v70 = *v71;
            v70[1] = v77;
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v90 = type metadata accessor for GenerationSchema();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v90 - 8) + 16))(v70, v71, v90);
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(void *, void, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
        }
        uint64_t v91 = v101[11];
        BOOL v92 = (void *)(a1 + v91);
        char v93 = (uint64_t *)((char *)a2 + v91);
        uint64_t v94 = v93[1];
        *BOOL v92 = *v93;
        v92[1] = v94;
        uint64_t v95 = v93[3];
        v92[2] = v93[2];
        v92[3] = v95;
        uint64_t v96 = v93[5];
        v92[4] = v93[4];
        v92[5] = v96;
        v92[6] = v93[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v6;
        uint64_t v7 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v7;
        uint64_t v8 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v8;
        uint64_t v9 = a2[7];
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = v9;
        uint64_t v10 = a2[9];
        *(void *)(a1 + 64) = a2[8];
        *(void *)(a1 + 72) = v10;
        *(void *)(a1 + 80) = a2[10];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for RequestPayload(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_29;
    case 1:
      if (*(void *)(a1 + 8))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v3 = a1 + *(int *)(type metadata accessor for CountTokensPromptTemplateRequest(0) + 20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v4 = v3 + *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      uint64_t v5 = type metadata accessor for Locale();
      uint64_t v6 = *(void *)(v5 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
      }
      goto LABEL_28;
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v7 = type metadata accessor for CompletePromptRequest(0);
      uint64_t v8 = a1 + *(int *)(v7 + 24);
      uint64_t v9 = type metadata accessor for Constraints(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
        {
          swift_bridgeObjectRelease();
        }
        else if (!EnumCaseMultiPayload)
        {
          uint64_t v11 = type metadata accessor for GenerationSchema();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v8, v11);
        }
      }
      swift_bridgeObjectRelease();
      if (*(void *)(a1 + *(int *)(v7 + 32) + 8) >= 4uLL) {
        swift_bridgeObjectRelease();
      }
      goto LABEL_27;
    case 3:
      if (*(void *)(a1 + 8))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v12 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
      uint64_t v13 = a1 + v12[5];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = v13 + *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      uint64_t v15 = type metadata accessor for Locale();
      uint64_t v16 = *(void *)(v15 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15)) {
        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(a1 + v12[8] + 8) >= 4uLL) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      uint64_t v17 = a1 + v12[10];
      uint64_t v18 = type metadata accessor for Constraints(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v17, 1, v18)) {
        goto LABEL_28;
      }
      int v19 = swift_getEnumCaseMultiPayload();
      if (v19 == 2 || v19 == 1)
      {
LABEL_27:
        swift_bridgeObjectRelease();
      }
      else if (!v19)
      {
        uint64_t v20 = type metadata accessor for GenerationSchema();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v17, v20);
      }
LABEL_28:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_29:
      return swift_bridgeObjectRelease();
    default:
      return result;
  }
}

uint64_t initializeWithCopy for RequestPayload(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v9 = *(void *)(a2 + 8);
      if (v9)
      {
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v9;
        uint64_t v10 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v25 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v25;
      }
      uint64_t v97 = type metadata accessor for CountTokensPromptTemplateRequest(0);
      uint64_t v26 = *(int *)(v97 + 20);
      uint64_t v27 = (void *)(a1 + v26);
      uint64_t v28 = a2 + v26;
      uint64_t v29 = *(void *)(a2 + v26 + 8);
      *uint64_t v27 = *(void *)(a2 + v26);
      v27[1] = v29;
      v27[2] = *(void *)(a2 + v26 + 16);
      uint64_t v30 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      uint64_t v31 = (char *)v27 + v30;
      uint64_t v32 = (const void *)(v28 + v30);
      uint64_t v33 = type metadata accessor for Locale();
      uint64_t v34 = *(void *)(v33 - 8);
      long long v35 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v35(v32, 1, v33))
      {
        uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v31, v32, *(void *)(*(void *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v34 + 16))(v31, v32, v33);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      uint64_t v51 = *(int *)(v97 + 24);
      long long v52 = (void *)(a1 + v51);
      uint64_t v53 = (void *)(a2 + v51);
      uint64_t v54 = v53[1];
      void *v52 = *v53;
      v52[1] = v54;
      uint64_t v55 = v53[3];
      v52[2] = v53[2];
      v52[3] = v55;
      uint64_t v56 = v53[5];
      v52[4] = v53[4];
      v52[5] = v56;
      v52[6] = v53[6];
      break;
    case 2u:
      uint64_t v11 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v11;
      uint64_t v12 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v12;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      uint64_t v13 = *(void *)(a2 + 64);
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *(void *)(a1 + 64) = v13;
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
      uint64_t v14 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = v14;
      uint64_t v15 = *(void *)(a2 + 136);
      *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
      *(void *)(a1 + 136) = v15;
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
      uint64_t v96 = type metadata accessor for CompletePromptRequest(0);
      uint64_t v16 = *(int *)(v96 + 24);
      __dst = (void *)(a1 + v16);
      uint64_t v17 = (void *)(a2 + v16);
      uint64_t v18 = type metadata accessor for Constraints(0);
      uint64_t v19 = *(void *)(v18 - 8);
      uint64_t v20 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v20(v17, 1, v18))
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(__dst, v17, *(void *)(*(void *)(v21 - 8) + 64));
        uint64_t v22 = (int *)v96;
      }
      else
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2)
        {
          uint64_t v75 = v17[1];
          void *__dst = *v17;
          __dst[1] = v75;
          swift_bridgeObjectRetain();
          uint64_t v22 = (int *)v96;
        }
        else
        {
          uint64_t v22 = (int *)v96;
          if (EnumCaseMultiPayload == 1)
          {
            uint64_t v38 = v17[1];
            void *__dst = *v17;
            __dst[1] = v38;
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v76 = type metadata accessor for GenerationSchema();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v76 - 8) + 16))(__dst, v17, v76);
          }
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
      }
      *(void *)(a1 + v22[7]) = *(void *)(a2 + v22[7]);
      uint64_t v77 = v22[8];
      uint64_t v78 = a1 + v77;
      uint64_t v79 = (_OWORD *)(a2 + v77);
      unint64_t v80 = *(void *)(a2 + v77 + 8);
      swift_bridgeObjectRetain();
      if (v80 < 4)
      {
        *(_OWORD *)uint64_t v78 = *v79;
      }
      else
      {
        *(void *)uint64_t v78 = *(void *)v79;
        *(void *)(v78 + 8) = v80;
        swift_bridgeObjectRetain();
      }
      *(void *)(a1 + v22[9]) = *(void *)(a2 + v22[9]);
      uint64_t v81 = v22[10];
      int v82 = (void *)(a1 + v81);
      unint64_t v83 = (void *)(a2 + v81);
      uint64_t v84 = v83[1];
      void *v82 = *v83;
      v82[1] = v84;
      uint64_t v85 = v83[3];
      v82[2] = v83[2];
      v82[3] = v85;
      uint64_t v86 = v83[5];
      v82[4] = v83[4];
      v82[5] = v86;
      v82[6] = v83[6];
      swift_bridgeObjectRetain();
      break;
    case 3u:
      uint64_t v23 = *(void *)(a2 + 8);
      if (v23)
      {
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v23;
        uint64_t v24 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v24;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v39 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v39;
      }
      unint64_t v98 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
      uint64_t v40 = v98[5];
      uint64_t v41 = (void *)(a1 + v40);
      uint64_t v42 = a2 + v40;
      uint64_t v43 = *(void *)(a2 + v40 + 8);
      void *v41 = *(void *)(a2 + v40);
      v41[1] = v43;
      v41[2] = *(void *)(a2 + v40 + 16);
      uint64_t v44 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      uint64_t v45 = (char *)v41 + v44;
      uint64_t v46 = (const void *)(v42 + v44);
      uint64_t v47 = type metadata accessor for Locale();
      uint64_t v48 = *(void *)(v47 - 8);
      uint64_t v49 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v48 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v49(v46, 1, v47))
      {
        uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v45, v46, *(void *)(*(void *)(v50 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v48 + 16))(v45, v46, v47);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      }
      uint64_t v57 = v98[6];
      uint64_t v58 = a1 + v57;
      uint64_t v59 = a2 + v57;
      *(void *)uint64_t v58 = *(void *)v59;
      *(unsigned char *)(v58 + 8) = *(unsigned char *)(v59 + 8);
      *(void *)(v58 + 16) = *(void *)(v59 + 16);
      *(unsigned char *)(v58 + 24) = *(unsigned char *)(v59 + 24);
      *(void *)(v58 + 32) = *(void *)(v59 + 32);
      *(unsigned char *)(v58 + 40) = *(unsigned char *)(v59 + 40);
      *(unsigned char *)(v58 + 56) = *(unsigned char *)(v59 + 56);
      *(void *)(v58 + 48) = *(void *)(v59 + 48);
      uint64_t v60 = *(void *)(v59 + 64);
      *(unsigned char *)(v58 + 72) = *(unsigned char *)(v59 + 72);
      *(void *)(v58 + 64) = v60;
      uint64_t v61 = *(void *)(v59 + 88);
      *(void *)(v58 + 80) = *(void *)(v59 + 80);
      *(void *)(v58 + 88) = v61;
      *(unsigned char *)(v58 + 96) = *(unsigned char *)(v59 + 96);
      *(void *)(v58 + 104) = *(void *)(v59 + 104);
      *(unsigned char *)(v58 + 112) = *(unsigned char *)(v59 + 112);
      *(void *)(v58 + 120) = *(void *)(v59 + 120);
      *(_WORD *)(v58 + 128) = *(_WORD *)(v59 + 128);
      *(void *)(a1 + v98[7]) = *(void *)(a2 + v98[7]);
      uint64_t v62 = v98[8];
      uint64_t v63 = a1 + v62;
      uint64_t v64 = (_OWORD *)(a2 + v62);
      unint64_t v65 = *(void *)(a2 + v62 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v65 < 4)
      {
        *(_OWORD *)uint64_t v63 = *v64;
      }
      else
      {
        *(void *)uint64_t v63 = *(void *)v64;
        *(void *)(v63 + 8) = v65;
        swift_bridgeObjectRetain();
      }
      *(void *)(a1 + v98[9]) = *(void *)(a2 + v98[9]);
      uint64_t v66 = v98[10];
      uint64_t v67 = (void *)(a1 + v66);
      unint64_t v68 = (void *)(a2 + v66);
      uint64_t v69 = type metadata accessor for Constraints(0);
      uint64_t v70 = *(void *)(v69 - 8);
      uint64_t v71 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v70 + 48);
      swift_bridgeObjectRetain();
      if (v71(v68, 1, v69))
      {
        uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v67, v68, *(void *)(*(void *)(v72 - 8) + 64));
      }
      else
      {
        int v73 = swift_getEnumCaseMultiPayload();
        if (v73 == 2 || v73 == 1)
        {
          uint64_t v74 = v68[1];
          *uint64_t v67 = *v68;
          v67[1] = v74;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v87 = type metadata accessor for GenerationSchema();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v87 - 8) + 16))(v67, v68, v87);
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
      }
      uint64_t v88 = v98[11];
      uint64_t v89 = (void *)(a1 + v88);
      uint64_t v90 = (void *)(a2 + v88);
      uint64_t v91 = v90[1];
      *uint64_t v89 = *v90;
      v89[1] = v91;
      uint64_t v92 = v90[3];
      v89[2] = v90[2];
      v89[3] = v92;
      uint64_t v93 = v90[5];
      v89[4] = v90[4];
      v89[5] = v93;
      v89[6] = v90[6];
      break;
    default:
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      uint64_t v5 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v5;
      uint64_t v6 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v6;
      uint64_t v7 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v7;
      uint64_t v8 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v8;
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for OneShotRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for RequestPayload(a1, a2, a3, type metadata accessor for OneShotRequest);
}

uint64_t assignWithCopy for RequestPayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  if (a1 != a2)
  {
    outlined destroy of DocumentResourceEnvelope(a1, a4);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        if (*(void *)(a2 + 8))
        {
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v21 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v21;
        }
        uint64_t v82 = type metadata accessor for CountTokensPromptTemplateRequest(0);
        uint64_t v22 = *(int *)(v82 + 20);
        uint64_t v23 = (void *)(a1 + v22);
        uint64_t v24 = a2 + v22;
        *uint64_t v23 = *(void *)(a2 + v22);
        v23[1] = *(void *)(a2 + v22 + 8);
        v23[2] = *(void *)(a2 + v22 + 16);
        uint64_t v25 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
        uint64_t v26 = (char *)v23 + v25;
        uint64_t v27 = (const void *)(v24 + v25);
        uint64_t v28 = type metadata accessor for Locale();
        uint64_t v29 = *(void *)(v28 - 8);
        uint64_t v30 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v30(v27, 1, v28))
        {
          uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
          memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, const void *, uint64_t))(v29 + 16))(v26, v27, v28);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
        }
        uint64_t v44 = *(int *)(v82 + 24);
        goto LABEL_40;
      case 2u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        uint64_t v6 = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
        *(void *)(a1 + 32) = v6;
        uint64_t v7 = *(void *)(a2 + 48);
        *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
        *(void *)(a1 + 48) = v7;
        uint64_t v8 = *(void *)(a2 + 64);
        *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
        *(void *)(a1 + 64) = v8;
        uint64_t v9 = *(void *)(a2 + 80);
        *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
        *(void *)(a1 + 80) = v9;
        uint64_t v10 = *(void *)(a2 + 96);
        *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
        *(void *)(a1 + 96) = v10;
        *(void *)(a1 + 112) = *(void *)(a2 + 112);
        uint64_t v11 = *(void *)(a2 + 120);
        *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
        *(void *)(a1 + 120) = v11;
        uint64_t v12 = *(void *)(a2 + 136);
        *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
        *(void *)(a1 + 136) = v12;
        uint64_t v13 = *(void *)(a2 + 152);
        *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
        *(void *)(a1 + 152) = v13;
        *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
        uint64_t v81 = type metadata accessor for CompletePromptRequest(0);
        uint64_t v14 = *(int *)(v81 + 24);
        __dst = (void *)(a1 + v14);
        uint64_t v15 = (void *)(a2 + v14);
        uint64_t v16 = type metadata accessor for Constraints(0);
        uint64_t v17 = *(void *)(v16 - 8);
        uint64_t v18 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v18(v15, 1, v16))
        {
          uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
          memcpy(__dst, v15, *(void *)(*(void *)(v19 - 8) + 64));
          uint64_t v20 = (int *)v81;
        }
        else
        {
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          if (EnumCaseMultiPayload == 2)
          {
            void *__dst = *v15;
            __dst[1] = v15[1];
            swift_bridgeObjectRetain();
            uint64_t v20 = (int *)v81;
          }
          else
          {
            uint64_t v20 = (int *)v81;
            if (EnumCaseMultiPayload == 1)
            {
              void *__dst = *v15;
              __dst[1] = v15[1];
              swift_bridgeObjectRetain();
            }
            else
            {
              uint64_t v68 = type metadata accessor for GenerationSchema();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v68 - 8) + 16))(__dst, v15, v68);
            }
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
        }
        *(void *)(a1 + v20[7]) = *(void *)(a2 + v20[7]);
        uint64_t v69 = v20[8];
        uint64_t v70 = a1 + v69;
        uint64_t v71 = a2 + v69;
        unint64_t v72 = *(void *)(a2 + v69 + 8);
        swift_bridgeObjectRetain();
        if (v72 < 4)
        {
          *(_OWORD *)uint64_t v70 = *(_OWORD *)v71;
        }
        else
        {
          *(void *)uint64_t v70 = *(void *)v71;
          *(void *)(v70 + 8) = *(void *)(v71 + 8);
          swift_bridgeObjectRetain();
        }
        *(void *)(a1 + v20[9]) = *(void *)(a2 + v20[9]);
        uint64_t v73 = v20[10];
        uint64_t v74 = (void *)(a1 + v73);
        uint64_t v75 = (void *)(a2 + v73);
        void *v74 = *v75;
        v74[1] = v75[1];
        v74[2] = v75[2];
        v74[3] = v75[3];
        v74[4] = v75[4];
        v74[5] = v75[5];
        v74[6] = v75[6];
        swift_bridgeObjectRetain();
        break;
      case 3u:
        if (*(void *)(a2 + 8))
        {
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v33 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v33;
        }
        unint64_t v83 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
        uint64_t v34 = v83[5];
        long long v35 = (void *)(a1 + v34);
        uint64_t v36 = a2 + v34;
        *long long v35 = *(void *)(a2 + v34);
        v35[1] = *(void *)(a2 + v34 + 8);
        v35[2] = *(void *)(a2 + v34 + 16);
        uint64_t v37 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
        uint64_t v38 = (char *)v35 + v37;
        long long v39 = (const void *)(v36 + v37);
        uint64_t v40 = type metadata accessor for Locale();
        uint64_t v41 = *(void *)(v40 - 8);
        uint64_t v42 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v42(v39, 1, v40))
        {
          uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
          memcpy(v38, v39, *(void *)(*(void *)(v43 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, const void *, uint64_t))(v41 + 16))(v38, v39, v40);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
        }
        uint64_t v45 = v83[6];
        uint64_t v46 = a1 + v45;
        uint64_t v47 = (uint64_t *)(a2 + v45);
        uint64_t v48 = *v47;
        *(unsigned char *)(v46 + 8) = *((unsigned char *)v47 + 8);
        *(void *)uint64_t v46 = v48;
        uint64_t v49 = v47[2];
        *(unsigned char *)(v46 + 24) = *((unsigned char *)v47 + 24);
        *(void *)(v46 + 16) = v49;
        uint64_t v50 = v47[4];
        *(unsigned char *)(v46 + 40) = *((unsigned char *)v47 + 40);
        *(void *)(v46 + 32) = v50;
        uint64_t v51 = v47[6];
        *(unsigned char *)(v46 + 56) = *((unsigned char *)v47 + 56);
        *(void *)(v46 + 48) = v51;
        uint64_t v52 = v47[8];
        *(unsigned char *)(v46 + 72) = *((unsigned char *)v47 + 72);
        *(void *)(v46 + 64) = v52;
        *(void *)(v46 + 80) = v47[10];
        uint64_t v53 = v47[11];
        *(unsigned char *)(v46 + 96) = *((unsigned char *)v47 + 96);
        *(void *)(v46 + 88) = v53;
        uint64_t v54 = v47[13];
        *(unsigned char *)(v46 + 112) = *((unsigned char *)v47 + 112);
        *(void *)(v46 + 104) = v54;
        uint64_t v55 = v47[15];
        *(unsigned char *)(v46 + 128) = *((unsigned char *)v47 + 128);
        *(void *)(v46 + 120) = v55;
        *(unsigned char *)(v46 + 129) = *((unsigned char *)v47 + 129);
        *(void *)(a1 + v83[7]) = *(void *)(a2 + v83[7]);
        uint64_t v56 = v83[8];
        uint64_t v57 = a1 + v56;
        uint64_t v58 = a2 + v56;
        unint64_t v59 = *(void *)(a2 + v56 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v59 < 4)
        {
          *(_OWORD *)uint64_t v57 = *(_OWORD *)v58;
        }
        else
        {
          *(void *)uint64_t v57 = *(void *)v58;
          *(void *)(v57 + 8) = *(void *)(v58 + 8);
          swift_bridgeObjectRetain();
        }
        *(void *)(a1 + v83[9]) = *(void *)(a2 + v83[9]);
        uint64_t v60 = v83[10];
        uint64_t v61 = (void *)(a1 + v60);
        uint64_t v62 = (void *)(a2 + v60);
        uint64_t v63 = type metadata accessor for Constraints(0);
        uint64_t v64 = *(void *)(v63 - 8);
        unint64_t v65 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v64 + 48);
        swift_bridgeObjectRetain();
        if (v65(v62, 1, v63))
        {
          uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
          memcpy(v61, v62, *(void *)(*(void *)(v66 - 8) + 64));
        }
        else
        {
          int v67 = swift_getEnumCaseMultiPayload();
          if (v67 == 2 || v67 == 1)
          {
            void *v61 = *v62;
            v61[1] = v62[1];
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v76 = type metadata accessor for GenerationSchema();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v76 - 8) + 16))(v61, v62, v76);
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(void *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
        }
        uint64_t v44 = v83[11];
LABEL_40:
        uint64_t v77 = (void *)(a1 + v44);
        uint64_t v78 = (void *)(a2 + v44);
        *uint64_t v77 = *v78;
        v77[1] = v78[1];
        v77[2] = v78[2];
        v77[3] = v78[3];
        v77[4] = v78[4];
        v77[5] = v78[5];
        v77[6] = v78[6];
        break;
      default:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for OneShotRequest(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for OneShotRequest);
}

_OWORD *initializeWithTake for RequestPayload(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
      long long v18 = a2[1];
      *a1 = *a2;
      a1[1] = v18;
      uint64_t v19 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
      uint64_t v20 = v19[5];
      long long v21 = (char *)a1 + v20;
      uint64_t v22 = (char *)a2 + v20;
      *(_OWORD *)long long v21 = *(_OWORD *)((char *)a2 + v20);
      *((void *)v21 + 2) = *(void *)((char *)a2 + v20 + 16);
      uint64_t v23 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      uint64_t v24 = &v21[v23];
      uint64_t v25 = &v22[v23];
      uint64_t v26 = type metadata accessor for Locale();
      uint64_t v27 = *(void *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      uint64_t v45 = v19[6];
      uint64_t v46 = (char *)a1 + v45;
      uint64_t v47 = (char *)a2 + v45;
      long long v48 = *((_OWORD *)v47 + 3);
      *((_OWORD *)v46 + 2) = *((_OWORD *)v47 + 2);
      *((_OWORD *)v46 + 3) = v48;
      *((_WORD *)v46 + 64) = *((_WORD *)v47 + 64);
      long long v49 = *((_OWORD *)v47 + 7);
      *((_OWORD *)v46 + 6) = *((_OWORD *)v47 + 6);
      *((_OWORD *)v46 + 7) = v49;
      long long v50 = *((_OWORD *)v47 + 5);
      *((_OWORD *)v46 + 4) = *((_OWORD *)v47 + 4);
      *((_OWORD *)v46 + 5) = v50;
      long long v51 = *((_OWORD *)v47 + 1);
      *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
      *((_OWORD *)v46 + 1) = v51;
      *(void *)((char *)a1 + v19[7]) = *(void *)((char *)a2 + v19[7]);
      *(_OWORD *)((char *)a1 + v19[8]) = *(_OWORD *)((char *)a2 + v19[8]);
      *(void *)((char *)a1 + v19[9]) = *(void *)((char *)a2 + v19[9]);
      uint64_t v52 = v19[10];
      uint64_t v53 = (char *)a1 + v52;
      uint64_t v54 = (char *)a2 + v52;
      uint64_t v55 = type metadata accessor for Constraints(0);
      uint64_t v56 = *(void *)(v55 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
      {
        uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v53, v54, *(void *)(v56 + 64));
        }
        else
        {
          uint64_t v63 = type metadata accessor for GenerationSchema();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 32))(v53, v54, v63);
          swift_storeEnumTagMultiPayload();
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
      }
      uint64_t v64 = v19[11];
      unint64_t v65 = (char *)a1 + v64;
      uint64_t v66 = (char *)a2 + v64;
      long long v67 = *((_OWORD *)v66 + 1);
      *(_OWORD *)unint64_t v65 = *(_OWORD *)v66;
      *((_OWORD *)v65 + 1) = v67;
      *((_OWORD *)v65 + 2) = *((_OWORD *)v66 + 2);
      *((void *)v65 + 6) = *((void *)v66 + 6);
      goto LABEL_26;
    case 2:
      long long v29 = a2[1];
      *a1 = *a2;
      a1[1] = v29;
      long long v30 = a2[9];
      a1[8] = a2[8];
      a1[9] = v30;
      *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
      long long v31 = a2[5];
      a1[4] = a2[4];
      a1[5] = v31;
      long long v32 = a2[7];
      a1[6] = a2[6];
      a1[7] = v32;
      long long v33 = a2[3];
      a1[2] = a2[2];
      a1[3] = v33;
      uint64_t v34 = (int *)type metadata accessor for CompletePromptRequest(0);
      uint64_t v35 = v34[6];
      uint64_t v36 = (char *)a1 + v35;
      uint64_t v37 = (char *)a2 + v35;
      uint64_t v38 = type metadata accessor for Constraints(0);
      uint64_t v39 = *(void *)(v38 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
      {
        uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v36, v37, *(void *)(v39 + 64));
        }
        else
        {
          uint64_t v58 = type metadata accessor for GenerationSchema();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 32))(v36, v37, v58);
          swift_storeEnumTagMultiPayload();
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      }
      *(void *)((char *)a1 + v34[7]) = *(void *)((char *)a2 + v34[7]);
      *(_OWORD *)((char *)a1 + v34[8]) = *(_OWORD *)((char *)a2 + v34[8]);
      *(void *)((char *)a1 + v34[9]) = *(void *)((char *)a2 + v34[9]);
      uint64_t v59 = v34[10];
      uint64_t v60 = (char *)a1 + v59;
      uint64_t v61 = (char *)a2 + v59;
      long long v62 = *((_OWORD *)v61 + 1);
      *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
      *((_OWORD *)v60 + 1) = v62;
      *((_OWORD *)v60 + 2) = *((_OWORD *)v61 + 2);
      *((void *)v60 + 6) = *((void *)v61 + 6);
      goto LABEL_26;
    case 1:
      long long v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = type metadata accessor for CountTokensPromptTemplateRequest(0);
      uint64_t v9 = *(int *)(v8 + 20);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      *(_OWORD *)uint64_t v10 = *(_OWORD *)((char *)a2 + v9);
      *((void *)v10 + 2) = *(void *)((char *)a2 + v9 + 16);
      uint64_t v12 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      uint64_t v13 = &v10[v12];
      uint64_t v14 = &v11[v12];
      uint64_t v15 = type metadata accessor for Locale();
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
      uint64_t v41 = *(int *)(v8 + 24);
      uint64_t v42 = (char *)a1 + v41;
      uint64_t v43 = (char *)a2 + v41;
      long long v44 = *((_OWORD *)v43 + 1);
      *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
      *((_OWORD *)v42 + 1) = v44;
      *((_OWORD *)v42 + 2) = *((_OWORD *)v43 + 2);
      *((void *)v42 + 6) = *((void *)v43 + 6);
LABEL_26:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

_OWORD *assignWithTake for OneShotRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for RequestPayload(a1, a2, a3, type metadata accessor for OneShotRequest);
}

_OWORD *assignWithTake for RequestPayload(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t (*a4)(void))
{
  if (a1 != a2)
  {
    outlined destroy of DocumentResourceEnvelope((uint64_t)a1, a4);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 3:
        long long v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        uint64_t v20 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
        uint64_t v21 = v20[5];
        uint64_t v22 = (char *)a1 + v21;
        uint64_t v23 = (char *)a2 + v21;
        *(_OWORD *)uint64_t v22 = *(_OWORD *)((char *)a2 + v21);
        *((void *)v22 + 2) = *(void *)((char *)a2 + v21 + 16);
        uint64_t v24 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
        uint64_t v25 = &v22[v24];
        uint64_t v26 = &v23[v24];
        uint64_t v27 = type metadata accessor for Locale();
        uint64_t v28 = *(void *)(v27 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
        {
          uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
          memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
        }
        uint64_t v46 = v20[6];
        uint64_t v47 = (char *)a1 + v46;
        long long v48 = (char *)a2 + v46;
        long long v49 = *((_OWORD *)v48 + 3);
        *((_OWORD *)v47 + 2) = *((_OWORD *)v48 + 2);
        *((_OWORD *)v47 + 3) = v49;
        *((_WORD *)v47 + 64) = *((_WORD *)v48 + 64);
        long long v50 = *((_OWORD *)v48 + 7);
        *((_OWORD *)v47 + 6) = *((_OWORD *)v48 + 6);
        *((_OWORD *)v47 + 7) = v50;
        long long v51 = *((_OWORD *)v48 + 5);
        *((_OWORD *)v47 + 4) = *((_OWORD *)v48 + 4);
        *((_OWORD *)v47 + 5) = v51;
        long long v52 = *((_OWORD *)v48 + 1);
        *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
        *((_OWORD *)v47 + 1) = v52;
        *(void *)((char *)a1 + v20[7]) = *(void *)((char *)a2 + v20[7]);
        *(_OWORD *)((char *)a1 + v20[8]) = *(_OWORD *)((char *)a2 + v20[8]);
        *(void *)((char *)a1 + v20[9]) = *(void *)((char *)a2 + v20[9]);
        uint64_t v53 = v20[10];
        uint64_t v54 = (char *)a1 + v53;
        uint64_t v55 = (char *)a2 + v53;
        uint64_t v56 = type metadata accessor for Constraints(0);
        uint64_t v57 = *(void *)(v56 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
        {
          uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
          memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
        }
        else
        {
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v54, v55, *(void *)(v57 + 64));
          }
          else
          {
            uint64_t v64 = type metadata accessor for GenerationSchema();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 32))(v54, v55, v64);
            swift_storeEnumTagMultiPayload();
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
        }
        uint64_t v65 = v20[11];
        uint64_t v66 = (char *)a1 + v65;
        long long v67 = (char *)a2 + v65;
        long long v68 = *((_OWORD *)v67 + 1);
        *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
        *((_OWORD *)v66 + 1) = v68;
        *((_OWORD *)v66 + 2) = *((_OWORD *)v67 + 2);
        *((void *)v66 + 6) = *((void *)v67 + 6);
        goto LABEL_27;
      case 2:
        long long v30 = a2[1];
        *a1 = *a2;
        a1[1] = v30;
        long long v31 = a2[9];
        a1[8] = a2[8];
        a1[9] = v31;
        *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
        long long v32 = a2[5];
        a1[4] = a2[4];
        a1[5] = v32;
        long long v33 = a2[7];
        a1[6] = a2[6];
        a1[7] = v33;
        long long v34 = a2[3];
        a1[2] = a2[2];
        a1[3] = v34;
        uint64_t v35 = (int *)type metadata accessor for CompletePromptRequest(0);
        uint64_t v36 = v35[6];
        uint64_t v37 = (char *)a1 + v36;
        uint64_t v38 = (char *)a2 + v36;
        uint64_t v39 = type metadata accessor for Constraints(0);
        uint64_t v40 = *(void *)(v39 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
        {
          uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
          memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
        }
        else
        {
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v37, v38, *(void *)(v40 + 64));
          }
          else
          {
            uint64_t v59 = type metadata accessor for GenerationSchema();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 32))(v37, v38, v59);
            swift_storeEnumTagMultiPayload();
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
        }
        *(void *)((char *)a1 + v35[7]) = *(void *)((char *)a2 + v35[7]);
        *(_OWORD *)((char *)a1 + v35[8]) = *(_OWORD *)((char *)a2 + v35[8]);
        *(void *)((char *)a1 + v35[9]) = *(void *)((char *)a2 + v35[9]);
        uint64_t v60 = v35[10];
        uint64_t v61 = (char *)a1 + v60;
        long long v62 = (char *)a2 + v60;
        long long v63 = *((_OWORD *)v62 + 1);
        *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
        *((_OWORD *)v61 + 1) = v63;
        *((_OWORD *)v61 + 2) = *((_OWORD *)v62 + 2);
        *((void *)v61 + 6) = *((void *)v62 + 6);
        goto LABEL_27;
      case 1:
        long long v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        uint64_t v9 = type metadata accessor for CountTokensPromptTemplateRequest(0);
        uint64_t v10 = *(int *)(v9 + 20);
        uint64_t v11 = (char *)a1 + v10;
        uint64_t v12 = (char *)a2 + v10;
        *(_OWORD *)uint64_t v11 = *(_OWORD *)((char *)a2 + v10);
        *((void *)v11 + 2) = *(void *)((char *)a2 + v10 + 16);
        uint64_t v13 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
        uint64_t v14 = &v11[v13];
        uint64_t v15 = &v12[v13];
        uint64_t v16 = type metadata accessor for Locale();
        uint64_t v17 = *(void *)(v16 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
        {
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
          memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
        }
        uint64_t v42 = *(int *)(v9 + 24);
        uint64_t v43 = (char *)a1 + v42;
        long long v44 = (char *)a2 + v42;
        long long v45 = *((_OWORD *)v44 + 1);
        *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
        *((_OWORD *)v43 + 1) = v45;
        *((_OWORD *)v43 + 2) = *((_OWORD *)v44 + 2);
        *((void *)v43 + 6) = *((void *)v44 + 6);
LABEL_27:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata completion function for RequestPayload()
{
  uint64_t result = type metadata accessor for CountTokensPromptTemplateRequest(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for CompletePromptRequest(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for CompletePromptTemplateRequest(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in OneShotRequest()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type OneShotRequest and conformance OneShotRequest, (void (*)(uint64_t))type metadata accessor for OneShotRequest);
}

uint64_t base witness table accessor for Equatable in StreamingRequest()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type StreamingRequest and conformance StreamingRequest, (void (*)(uint64_t))type metadata accessor for StreamingRequest);
}

uint64_t base witness table accessor for Equatable in PromptTemplateInfoEnvelope()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope and conformance PromptTemplateInfoEnvelope, (void (*)(uint64_t))type metadata accessor for PromptTemplateInfoEnvelope);
}

uint64_t base witness table accessor for Equatable in DocumentResourceEnvelope()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope, (void (*)(uint64_t))type metadata accessor for DocumentResourceEnvelope);
}

uint64_t base witness table accessor for Equatable in PromptCompletionStreamElementEnvelope.Envelope()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope and conformance PromptCompletionStreamElementEnvelope.Envelope, (void (*)(uint64_t))type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
}

uint64_t base witness table accessor for Equatable in DocumentRegistrationStatusEnvelope()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope and conformance DocumentRegistrationStatusEnvelope, (void (*)(uint64_t))type metadata accessor for DocumentRegistrationStatusEnvelope);
}

uint64_t base witness table accessor for Equatable in SchemaEnvelope()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type SchemaEnvelope and conformance SchemaEnvelope, (void (*)(uint64_t))type metadata accessor for SchemaEnvelope);
}

uint64_t base witness table accessor for Equatable in ToolDescriptionEnvelope.FunctionDescriptionEnvelope()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope, (void (*)(uint64_t))type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
}

uint64_t base witness table accessor for Equatable in ToolDescriptionEnvelope.ToolTypeEnvelope()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope and conformance ToolDescriptionEnvelope.ToolTypeEnvelope, (void (*)(uint64_t))type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
}

uint64_t base witness table accessor for Equatable in AnnotationEnvelope.DocumentCitationEnvelope()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type AnnotationEnvelope.DocumentCitationEnvelope and conformance AnnotationEnvelope.DocumentCitationEnvelope, (void (*)(uint64_t))type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope);
}

uint64_t base witness table accessor for Equatable in AnnotationEnvelope.URLCitationEnvelope()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type AnnotationEnvelope.URLCitationEnvelope and conformance AnnotationEnvelope.URLCitationEnvelope, (void (*)(uint64_t))type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
}

uint64_t base witness table accessor for Equatable in AnnotationEnvelope.CitationTypeEnvelope()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope and conformance AnnotationEnvelope.CitationTypeEnvelope, (void (*)(uint64_t))type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
}

uint64_t base witness table accessor for Equatable in AnnotationEnvelope()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type AnnotationEnvelope and conformance AnnotationEnvelope, (void (*)(uint64_t))type metadata accessor for AnnotationEnvelope);
}

unint64_t lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope and conformance ModerationEnvelope.ProbabilityEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope and conformance ModerationEnvelope.ProbabilityEnvelope;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope and conformance ModerationEnvelope.ProbabilityEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope and conformance ModerationEnvelope.ProbabilityEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope and conformance ModerationEnvelope.ProbabilityEnvelope;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope and conformance ModerationEnvelope.ProbabilityEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope and conformance ModerationEnvelope.ProbabilityEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope and conformance ModerationEnvelope.ProbabilityEnvelope;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope and conformance ModerationEnvelope.ProbabilityEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope and conformance ModerationEnvelope.ProbabilityEnvelope);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope, (void (*)(uint64_t))type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope);
}

unint64_t lazy protocol witness table accessor for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OneShotRequest.CountTokensPromptTemplateCodingKeys and conformance OneShotRequest.CountTokensPromptTemplateCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type OneShotRequest.CountTokensPromptTemplateCodingKeys and conformance OneShotRequest.CountTokensPromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CountTokensPromptTemplateCodingKeys and conformance OneShotRequest.CountTokensPromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CountTokensPromptTemplateCodingKeys and conformance OneShotRequest.CountTokensPromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OneShotRequest.CountTokensPromptTemplateCodingKeys and conformance OneShotRequest.CountTokensPromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CountTokensPromptTemplateCodingKeys and conformance OneShotRequest.CountTokensPromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CountTokensPromptTemplateCodingKeys and conformance OneShotRequest.CountTokensPromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OneShotRequest.CountTokensPromptTemplateCodingKeys and conformance OneShotRequest.CountTokensPromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CountTokensPromptTemplateCodingKeys and conformance OneShotRequest.CountTokensPromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CountTokensPromptTemplateCodingKeys and conformance OneShotRequest.CountTokensPromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OneShotRequest.CountTokensPromptTemplateCodingKeys and conformance OneShotRequest.CountTokensPromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CountTokensPromptTemplateCodingKeys and conformance OneShotRequest.CountTokensPromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CountTokensPromptTemplateCodingKeys and conformance OneShotRequest.CountTokensPromptTemplateCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DocumentResourceEnvelope.CodingKeys and conformance DocumentResourceEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type DocumentResourceEnvelope.CodingKeys and conformance DocumentResourceEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentResourceEnvelope.CodingKeys and conformance DocumentResourceEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentResourceEnvelope.CodingKeys and conformance DocumentResourceEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DocumentResourceEnvelope.CodingKeys and conformance DocumentResourceEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentResourceEnvelope.CodingKeys and conformance DocumentResourceEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentResourceEnvelope.CodingKeys and conformance DocumentResourceEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DocumentResourceEnvelope.CodingKeys and conformance DocumentResourceEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentResourceEnvelope.CodingKeys and conformance DocumentResourceEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentResourceEnvelope.CodingKeys and conformance DocumentResourceEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DocumentResourceEnvelope.CodingKeys and conformance DocumentResourceEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentResourceEnvelope.CodingKeys and conformance DocumentResourceEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentResourceEnvelope.CodingKeys and conformance DocumentResourceEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys);
  }
  return result;
}

uint64_t specialized CountTokensRequest.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74706D6F72705FLL && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7461646174656D5FLL && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized CountTokensResponse.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746E756F63 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657265646E65725FLL && a2 == 0xEF74706D6F725064)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.init(sealing:)(uint64_t a1)
{
  uint64_t v65 = type metadata accessor for PromptTemplateInfo.RichVariableBinding.Component.Content.Text();
  uint64_t v2 = *(void *)(v65 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v65);
  uint64_t v64 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  long long v63 = (char *)&v47 - v5;
  uint64_t v6 = type metadata accessor for PromptTemplateInfo.RichVariableBinding.Component.Content();
  unint64_t v69 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  long long v62 = (char *)&v47 - v10;
  uint64_t v11 = type metadata accessor for PromptTemplateInfo.RichVariableBinding.Component();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v47 - v16;
  uint64_t v18 = PromptTemplateInfo.RichVariableBinding.components.getter();
  int64_t v19 = *(void *)(v18 + 16);
  uint64_t v20 = MEMORY[0x263F8EE78];
  if (v19)
  {
    uint64_t v48 = a1;
    int64_t v70 = v19;
    uint64_t v71 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    uint64_t v21 = v12 + 16;
    uint64_t v59 = v22;
    unint64_t v23 = (*(unsigned __int8 *)(v21 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 64);
    uint64_t v47 = v18;
    uint64_t v24 = v2;
    unint64_t v25 = v18 + v23;
    uint64_t v26 = *(void *)(v21 + 56);
    uint64_t v57 = (void (**)(char *, char *, uint64_t))(v69 + 16);
    uint64_t v58 = v26;
    uint64_t v56 = (uint64_t (**)(char *, uint64_t))(v69 + 88);
    uint64_t v55 = (void (**)(char *, uint64_t))(v69 + 96);
    uint64_t v54 = (void (**)(char *, char *, uint64_t))(v24 + 32);
    uint64_t v53 = (void (**)(char *, char *, uint64_t))(v24 + 16);
    int v52 = *MEMORY[0x263F7FC18];
    long long v51 = (void (**)(char *, uint64_t))(v24 + 8);
    long long v50 = (void (**)(char *, uint64_t))(v69 + 8);
    long long v49 = (void (**)(char *, uint64_t))(v21 - 8);
    uint64_t v60 = v21;
    uint64_t v61 = v9;
    while (1)
    {
      unint64_t v69 = v25;
      uint64_t v27 = v59;
      v59(v17, (char *)v25, v11);
      v27(v15, v17, v11);
      uint64_t v28 = v62;
      PromptTemplateInfo.RichVariableBinding.Component.content.getter();
      (*v57)(v9, v28, v6);
      int v29 = (*v56)(v9, v6);
      if (v29 != v52) {
        break;
      }
      long long v30 = v15;
      uint64_t v31 = v11;
      (*v55)(v9, v6);
      long long v32 = v63;
      long long v33 = v9;
      uint64_t v34 = v65;
      (*v54)(v63, v33, v65);
      uint64_t v35 = v64;
      (*v53)(v64, v32, v34);
      uint64_t v36 = PromptTemplateInfo.RichVariableBinding.Component.Content.Text.string.getter();
      uint64_t v67 = v37;
      uint64_t v68 = v36;
      int v66 = PromptTemplateInfo.RichVariableBinding.Component.Content.Text.isSelfAttention.getter();
      uint64_t v38 = *v51;
      (*v51)(v35, v34);
      (*v50)(v28, v6);
      v38(v32, v34);
      uint64_t v39 = *v49;
      (*v49)(v30, v31);
      v39(v17, v31);
      uint64_t v20 = v71;
      uint64_t v11 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v20 + 16) + 1, 1);
        uint64_t v20 = v71;
      }
      unint64_t v41 = *(void *)(v20 + 16);
      unint64_t v40 = *(void *)(v20 + 24);
      uint64_t v15 = v30;
      unint64_t v42 = v69;
      if (v41 >= v40 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
        uint64_t v20 = v71;
      }
      *(void *)(v20 + 16) = v41 + 1;
      uint64_t v43 = v20 + 24 * v41;
      uint64_t v44 = v67;
      *(void *)(v43 + 32) = v68;
      *(void *)(v43 + 40) = v44;
      *(unsigned char *)(v43 + 48) = v66 & 1;
      unint64_t v25 = v42 + v58;
      --v70;
      uint64_t v9 = v61;
      if (!v70)
      {
        a1 = v48;
        goto LABEL_10;
      }
    }
    uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
  }
  else
  {
LABEL_10:
    uint64_t v45 = type metadata accessor for PromptTemplateInfo.RichVariableBinding();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v45 - 8) + 8))(a1, v45);
    swift_bridgeObjectRelease();
    return v20;
  }
  return result;
}

uint64_t specialized CountTokensPromptTemplateRequest.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74706D6F72705FLL && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000025F92CD30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7461646174656D5FLL && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized CompletePromptTemplateRequest.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74706D6F72705FLL && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000025F92CD30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74656D617261705FLL && a2 == 0xEB00000000737265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x736C6F6F745FLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6F68436C6F6F745FLL && a2 == 0xEB00000000656369 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x746E656D75636F64 && a2 == 0xE900000000000073 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x69617274736E6F63 && a2 == 0xEB0000000073746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x7461646174656D5FLL && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t specialized CompletePromptRequest.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74706D6F72705FLL && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74656D617261705FLL && a2 == 0xEB00000000737265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x69617274736E6F63 && a2 == 0xEB0000000073746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x736C6F6F745FLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6F68436C6F6F745FLL && a2 == 0xEB00000000656369 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x746E656D75636F64 && a2 == 0xE900000000000073 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7461646174656D5FLL && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t specialized Constraints.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x616D65686373 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x72616D6D617267 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x476C616974726170 && a2 == 0xEE0072616D6D6172)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized PromptCompletionEnvelope.CandidateEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73746E656D676573 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6C61436C6F6F74 && a2 == 0xE900000000000073 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6974617265646F6DLL && a2 == 0xEA00000000006E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65526873696E6966 && a2 == 0xEC0000006E6F7361 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x617461646174656DLL && a2 == 0xEC00000061746144)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t specialized PromptCompletionEnvelope.CandidateEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionEnvelope.CandidateEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PromptCompletionEnvelope.SegmentEnvelope]);
  char v32 = 0;
  lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A](&lazy protocol witness table cache variable for type [PromptCompletionEnvelope.SegmentEnvelope] and conformance <A> [A], &demangling cache variable for type metadata for [PromptCompletionEnvelope.SegmentEnvelope], (void (*)(void))lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope and conformance PromptCompletionEnvelope.SegmentEnvelope);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ToolCallEnvelope]);
  char v32 = 1;
  lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A](&lazy protocol witness table cache variable for type [ToolCallEnvelope] and conformance <A> [A], &demangling cache variable for type metadata for [ToolCallEnvelope], (void (*)(void))lazy protocol witness table accessor for type ToolCallEnvelope and conformance ToolCallEnvelope);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v28 = v9;
  uint64_t v10 = v30;
  char v32 = 2;
  lazy protocol witness table accessor for type ModerationEnvelope and conformance ModerationEnvelope();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v27 = v10;
  uint64_t v11 = v30;
  char v32 = 3;
  lazy protocol witness table accessor for type FinishReasonEnvelope and conformance FinishReasonEnvelope();
  uint64_t v26 = v11;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v32 = 4;
  uint64_t v29 = v30;
  unint64_t v25 = v31;
  outlined copy of FinishReason(v30, v31);
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v12 = v30;
  unint64_t v23 = v31;
  uint64_t v24 = v30;
  uint64_t v13 = v28;
  swift_bridgeObjectRetain();
  uint64_t v14 = v10;
  swift_bridgeObjectRetain();
  uint64_t v15 = v26;
  swift_bridgeObjectRetain();
  uint64_t v16 = v29;
  unint64_t v17 = v25;
  outlined copy of FinishReason(v29, v25);
  uint64_t v18 = v12;
  unint64_t v19 = v23;
  outlined copy of Data._Representation(v18, v23);
  outlined consume of FinishReason(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of FinishReason(v16, v17);
  uint64_t v20 = v24;
  uint64_t result = outlined consume of Data._Representation(v24, v19);
  *a2 = v13;
  a2[1] = v14;
  a2[2] = v15;
  a2[3] = v16;
  a2[4] = v17;
  a2[5] = v20;
  a2[6] = v19;
  return result;
}

uint64_t specialized PromptCompletionEnvelope.SegmentEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1954047348 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6567616D69 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized PromptCompletionEnvelope.SegmentEnvelope.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys>);
  uint64_t v32 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v4 = (char *)v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys>);
  uint64_t v31 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionEnvelope.SegmentEnvelope.CodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  long long v33 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys();
  uint64_t v13 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v33);
  }
  uint64_t v39 = v9;
  uint64_t v14 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v14 + 16) != 1)
  {
    uint64_t v16 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v18 = &type metadata for PromptCompletionEnvelope.SegmentEnvelope;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, *MEMORY[0x263F8DCB0], v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v8);
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v33);
  }
  v28[1] = v14;
  char v15 = *(unsigned char *)(v14 + 32);
  if (v15)
  {
    LOBYTE(v34) = 1;
    lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type ImageContentEnvelope and conformance ImageContentEnvelope();
    uint64_t v20 = v30;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v21 = 0;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v4, v20);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v8);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = v34;
    uint64_t v25 = v35;
  }
  else
  {
    LOBYTE(v34) = 0;
    lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type TextContentEnvelope and conformance TextContentEnvelope();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v26 = v39;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v8);
    uint64_t v24 = v34;
    uint64_t v25 = v35;
    uint64_t v21 = v36;
    uint64_t v22 = v37;
    uint64_t v23 = v38;
  }
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v33);
  uint64_t v27 = v29;
  *uint64_t v29 = v24;
  v27[1] = v25;
  v27[2] = v21;
  v27[3] = v22;
  v27[4] = v23;
  *((unsigned char *)v27 + 40) = v15;
  return result;
}

uint64_t specialized PromptCompletionEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x666E496C65646F6DLL && a2 == 0xE90000000000006FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6974617265646F6DLL && a2 == 0xEA00000000006E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6567617375 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x74616469646E6163 && a2 == 0xEA00000000007365 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x617461646174656DLL && a2 == 0xEC00000061746144 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x64657265646E6572 && a2 == 0xEE0074706D6F7250)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t specialized TextContentEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x697461746F6E6E61 && a2 == 0xEB00000000736E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized TextContentEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TextContentEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TextContentEnvelope.CodingKeys and conformance TextContentEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    return outlined consume of Data?(0, 0xF000000000000000);
  }
  else
  {
    LOBYTE(v20) = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = v10;
    unint64_t v19 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnnotationEnvelope]);
    char v22 = 1;
    lazy protocol witness table accessor for type [AnnotationEnvelope] and conformance <A> [A]();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v12 = v20;
    char v22 = 2;
    lazy protocol witness table accessor for type Data and conformance Data();
    uint64_t v18 = v12;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v13 = v20;
    unint64_t v14 = v21;
    outlined copy of Data?(v20, v21);
    outlined consume of Data?(0, 0xF000000000000000);
    swift_bridgeObjectRetain();
    uint64_t v15 = v18;
    swift_bridgeObjectRetain();
    outlined copy of Data?(v13, v14);
    outlined consume of Data?(v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = outlined consume of Data?(v13, v14);
    unint64_t v17 = v19;
    *unint64_t v19 = v9;
    v17[1] = v11;
    v17[2] = v15;
    v17[3] = v13;
    v17[4] = v14;
  }
  return result;
}

uint64_t specialized AnnotationEnvelope.CitationTypeEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74617469436C7275 && a2 == 0xEB000000006E6F69;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000025F92D010)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized AnnotationEnvelope.URLCitationEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x800000025F92D030)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t specialized AnnotationEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7865646E69 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void *specialized ImageContentEnvelope.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ImageContentEnvelope.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ImageContentEnvelope.CodingKeys and conformance ImageContentEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = v9;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  return v7;
}

uint64_t specialized ModelInformationEnvelope.AssetEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized ModelInformationEnvelope.AssetEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ModelInformationEnvelope.AssetEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  LOBYTE(v23) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v22 = v9;
  LOBYTE(v23) = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v20 = v12;
  char v25 = 2;
  lazy protocol witness table accessor for type Data and conformance Data();
  swift_bridgeObjectRetain();
  uint64_t v21 = v14;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v15 = v23;
  unint64_t v16 = v24;
  swift_bridgeObjectRetain();
  uint64_t v17 = v21;
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = outlined consume of Data._Representation(v15, v16);
  *a2 = v22;
  a2[1] = v11;
  a2[2] = v20;
  a2[3] = v17;
  a2[4] = v15;
  a2[5] = v16;
  return result;
}

uint64_t specialized ModelInformationEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x737465737361 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65566D6574737973 && a2 == 0xED00006E6F697372)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized ModelInformationEnvelope.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ModelInformationEnvelope.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  lazy protocol witness table accessor for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ModelInformationEnvelope.AssetEnvelope]);
    v9[7] = 0;
    lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A](&lazy protocol witness table cache variable for type [ModelInformationEnvelope.AssetEnvelope] and conformance <A> [A], &demangling cache variable for type metadata for [ModelInformationEnvelope.AssetEnvelope], (void (*)(void))lazy protocol witness table accessor for type ModelInformationEnvelope.AssetEnvelope and conformance ModelInformationEnvelope.AssetEnvelope);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v10;
    v9[6] = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x800000025F92CFD0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000025F92CF30)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  LOBYTE(v17) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  char v20 = 1;
  lazy protocol witness table accessor for type ModelInformationEnvelope and conformance ModelInformationEnvelope();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v12 = v17;
  uint64_t v13 = v18;
  uint64_t v14 = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v12;
  a2[3] = v13;
  a2[4] = v14;
  return result;
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x800000025F92CFD0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E697265646E6572 && a2 == 0xE900000000000067)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  LOBYTE(v35) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  char v48 = 1;
  lazy protocol witness table accessor for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v32 = v35;
  uint64_t v26 = v36;
  uint64_t v31 = v37;
  uint64_t v25 = v38;
  uint64_t v27 = v9;
  uint64_t v12 = v39;
  uint64_t v13 = v41;
  uint64_t v29 = v42;
  uint64_t v30 = v40;
  uint64_t v15 = v43;
  uint64_t v14 = v44;
  uint64_t v28 = v46;
  uint64_t v33 = v45;
  uint64_t v34 = v47;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v17 = v13;
  swift_bridgeObjectRelease();
  uint64_t v18 = v16;
  swift_bridgeObjectRelease();
  uint64_t v19 = v25;
  swift_bridgeObjectRelease();
  uint64_t v20 = v26;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v27;
  a2[1] = v11;
  a2[2] = v32;
  a2[3] = v20;
  a2[4] = v31;
  a2[5] = v19;
  uint64_t v22 = v30;
  a2[6] = v18;
  a2[7] = v22;
  uint64_t v23 = v29;
  a2[8] = v17;
  a2[9] = v23;
  a2[10] = v15;
  a2[11] = v14;
  uint64_t v24 = v28;
  a2[12] = v33;
  a2[13] = v24;
  a2[14] = v34;
  return result;
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x800000025F92CFD0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6974617265646F6DLL && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    v9[31] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[15] = 1;
    lazy protocol witness table accessor for type ModerationEnvelope and conformance ModerationEnvelope();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x800000025F92CFD0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000025F92CFF0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6974617265646F6DLL && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  char v24 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v20 = v9;
  char v23 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v18 = v12;
  char v22 = 2;
  lazy protocol witness table accessor for type ModerationEnvelope and conformance ModerationEnvelope();
  swift_bridgeObjectRetain();
  uint64_t v19 = v14;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v15 = v21;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v16 = v19;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v20;
  a2[1] = v11;
  a2[2] = v18;
  a2[3] = v16;
  a2[4] = v15;
  return result;
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x800000025F92CFD0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000025F92CFF0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x49746E656D676573 && a2 == 0xEC0000007865646ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746C654474786574 && a2 == 0xE900000000000061 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    return outlined consume of Data?(0, 0xF000000000000000);
  }
  else
  {
    LOBYTE(v32) = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = v10;
    uint64_t v30 = v9;
    LOBYTE(v32) = 1;
    swift_bridgeObjectRetain();
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v31 = v13;
    uint64_t v28 = v12;
    uint64_t v29 = v11;
    LOBYTE(v32) = 2;
    swift_bridgeObjectRetain();
    uint64_t v27 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v32) = 3;
    uint64_t v25 = KeyedDecodingContainer.decode(_:forKey:)();
    char v34 = 4;
    uint64_t v15 = v14;
    lazy protocol witness table accessor for type Data and conformance Data();
    uint64_t v26 = v15;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v16 = v29;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v17 = v32;
    unint64_t v18 = v33;
    outlined copy of Data?(v32, v33);
    outlined consume of Data?(0, 0xF000000000000000);
    swift_bridgeObjectRetain();
    uint64_t v19 = v16;
    uint64_t v20 = v31;
    swift_bridgeObjectRetain();
    uint64_t v21 = v26;
    swift_bridgeObjectRetain();
    outlined copy of Data?(v17, v18);
    outlined consume of Data?(v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = outlined consume of Data?(v17, v18);
    *a2 = v30;
    a2[1] = v19;
    a2[2] = v28;
    a2[3] = v20;
    uint64_t v23 = v25;
    a2[4] = v27;
    a2[5] = v23;
    a2[6] = v21;
    a2[7] = v17;
    a2[8] = v18;
  }
  return result;
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x800000025F92CFD0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000025F92CFF0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x49746E656D676573 && a2 == 0xEC0000007865646ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x697461746F6E6E61 && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x800000025F92CFD0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000025F92CFF0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000025F92D0D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6F6974636E7566 && a2 == 0xEC000000656D614ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x746E656D75677261 && a2 == 0xEE0061746C654473 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    return outlined consume of Data?(0, 0xF000000000000000);
  }
  else
  {
    LOBYTE(v42) = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = v10;
    LOBYTE(v42) = 1;
    swift_bridgeObjectRetain();
    uint64_t v39 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v40 = v9;
    LOBYTE(v42) = 2;
    uint64_t v13 = v12;
    swift_bridgeObjectRetain();
    uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v41 = v15;
    uint64_t v36 = v14;
    LOBYTE(v42) = 3;
    swift_bridgeObjectRetain();
    uint64_t v37 = 0;
    uint64_t v35 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v42) = 4;
    uint64_t v38 = v16;
    swift_bridgeObjectRetain();
    uint64_t v33 = KeyedDecodingContainer.decode(_:forKey:)();
    char v44 = 5;
    uint64_t v18 = v17;
    lazy protocol witness table accessor for type Data and conformance Data();
    uint64_t v34 = v18;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v19 = v42;
    unint64_t v32 = v43;
    outlined copy of Data?(v42, v43);
    outlined consume of Data?(0, 0xF000000000000000);
    swift_bridgeObjectRetain();
    uint64_t v31 = v13;
    swift_bridgeObjectRetain();
    uint64_t v20 = v41;
    swift_bridgeObjectRetain();
    uint64_t v21 = v38;
    swift_bridgeObjectRetain();
    uint64_t v22 = v34;
    swift_bridgeObjectRetain();
    uint64_t v37 = v19;
    unint64_t v23 = v32;
    outlined copy of Data?(v19, v32);
    uint64_t v24 = v19;
    unint64_t v25 = v23;
    outlined consume of Data?(v24, v23);
    swift_bridgeObjectRelease();
    uint64_t v26 = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v27 = v26;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v28 = v37;
    uint64_t result = outlined consume of Data?(v37, v25);
    *a2 = v40;
    a2[1] = v11;
    a2[2] = v39;
    a2[3] = v27;
    a2[4] = v36;
    a2[5] = v20;
    a2[6] = v35;
    a2[7] = v21;
    a2[8] = v33;
    a2[9] = v22;
    a2[10] = v28;
    a2[11] = v25;
  }
  return result;
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x800000025F92CFD0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000025F92CFF0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x49746E656D676573 && a2 == 0xEC0000007865646ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6567616D69 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  LOBYTE(v23) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v22 = v9;
  LOBYTE(v23) = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v20 = v12;
  LOBYTE(v23) = 2;
  swift_bridgeObjectRetain();
  uint64_t v21 = v14;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  char v25 = 3;
  lazy protocol witness table accessor for type ImageContentEnvelope and conformance ImageContentEnvelope();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v15 = v23;
  unint64_t v16 = v24;
  swift_bridgeObjectRetain();
  uint64_t v17 = v21;
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = outlined consume of Data._Representation(v15, v16);
  *a2 = v22;
  a2[1] = v11;
  a2[2] = v20;
  a2[3] = v17;
  a2[4] = v19;
  a2[5] = v15;
  a2[6] = v16;
  return result;
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x800000025F92CFD0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000025F92CFF0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65526873696E6966 && a2 == 0xEC0000006E6F7361 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x617461646174656DLL && a2 == 0xEC00000061746144)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  LOBYTE(v26) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v24 = v9;
  LOBYTE(v26) = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v25 = v13;
  uint64_t v23 = v12;
  char v28 = 2;
  lazy protocol witness table accessor for type FinishReasonEnvelope and conformance FinishReasonEnvelope();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v28 = 3;
  unint64_t v21 = v27;
  uint64_t v22 = v26;
  outlined copy of FinishReason(v26, v27);
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v14 = v26;
  unint64_t v15 = v27;
  swift_bridgeObjectRetain();
  uint64_t v16 = v25;
  swift_bridgeObjectRetain();
  unint64_t v18 = v21;
  uint64_t v17 = v22;
  outlined copy of FinishReason(v22, v21);
  outlined copy of Data._Representation(v14, v15);
  outlined consume of FinishReason(v17, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of FinishReason(v17, v18);
  uint64_t result = outlined consume of Data._Representation(v14, v15);
  *a2 = v24;
  a2[1] = v11;
  a2[2] = v23;
  a2[3] = v16;
  a2[4] = v17;
  a2[5] = v18;
  a2[6] = v14;
  a2[7] = v15;
  return result;
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x800000025F92CFD0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6567617375 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    v9[16] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[15] = 1;
    lazy protocol witness table accessor for type UsageEnvelope and conformance UsageEnvelope();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x800000025F92CFD0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x617461646174656DLL && a2 == 0xEC00000061746144)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    LOBYTE(v12) = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v11[15] = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = v12;
    unint64_t v10 = v13;
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v9, v10);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v9, v10);
  }
  return v7;
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x800000025F92CF30
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64657265646E6572 && a2 == 0xEE0074706D6F7250 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000025F92CF50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000025F92CF70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x746C654474786574 && a2 == 0xE900000000000061 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x697461746F6E6E61 && a2 == 0xEA00000000006E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6C6C61436C6F6F74 && a2 == 0xED000061746C6544 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6E65476567616D69 && a2 == 0xEF6E6F6974617265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000025F92CF90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6567617375 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000025F92CFB0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 10;
    }
    else {
      return 11;
    }
  }
}

uint64_t specialized ToolChoiceEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701736302 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6974616D6F747561 && a2 == 0xE900000000000063 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6465726975716572 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6F6974636E7566 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized UsageEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x800000025F92CEF0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000025F92CF10)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized UsageEnvelope.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<UsageEnvelope.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  lazy protocol witness table accessor for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v9[15] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[14] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v7;
}

uint64_t specialized ModerationEnvelope.ProbabilityEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x626967696C67656ELL && a2 == 0xEA0000000000656CLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7827308 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D756964656DLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1751607656 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

char *specialized ModerationEnvelope.ProbabilityEnvelope.init(from:)(void *a1)
{
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys>);
  uint64_t v45 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  char v44 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys>);
  uint64_t v42 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  unint64_t v43 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys>);
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  MEMORY[0x270FA5388](v4);
  char v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys>);
  uint64_t v37 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ModerationEnvelope.ProbabilityEnvelope.CodingKeys>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1[3];
  uint64_t v46 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.CodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.CodingKeys();
  uint64_t v15 = v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15) {
    goto LABEL_7;
  }
  uint64_t v35 = v7;
  uint64_t v36 = v9;
  uint64_t v16 = v43;
  uint64_t v17 = v44;
  uint64_t v47 = 0;
  uint64_t v18 = v45;
  uint64_t v19 = v11;
  uint64_t v20 = v13;
  uint64_t v21 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v22 = (char *)v21;
  if (*(void *)(v21 + 16) != 1)
  {
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v13 = v22;
    uint64_t v26 = v10;
    char v28 = v27;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    void *v28 = &unk_270BC5B30;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v28, *MEMORY[0x263F8DCB0], v25);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v26);
LABEL_7:
    uint64_t v29 = (uint64_t)v46;
    goto LABEL_8;
  }
  unint64_t v13 = (char *)*(unsigned __int8 *)(v21 + 32);
  switch(*(unsigned char *)(v21 + 32))
  {
    case 1:
      char v49 = 1;
      lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys();
      uint64_t v31 = v47;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v31) {
        goto LABEL_12;
      }
      (*(void (**)(char *, uint64_t))(v38 + 8))(v6, v39);
      goto LABEL_14;
    case 2:
      char v50 = 2;
      lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys();
      uint64_t v32 = v47;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v32) {
        goto LABEL_12;
      }
      (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v40);
      goto LABEL_14;
    case 3:
      char v51 = 3;
      lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys();
      uint64_t v33 = v47;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v33) {
        goto LABEL_14;
      }
      (*(void (**)(char *, uint64_t))(v18 + 8))(v17, v41);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v10);
      uint64_t v29 = (uint64_t)v46;
      break;
    default:
      char v48 = 0;
      lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys();
      uint64_t v23 = v36;
      uint64_t v24 = v47;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v24)
      {
LABEL_12:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v10);
        goto LABEL_7;
      }
      (*(void (**)(char *, uint64_t))(v37 + 8))(v23, v35);
LABEL_14:
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v10);
      uint64_t v29 = (uint64_t)v46;
      break;
  }
LABEL_8:
  __swift_destroy_boxed_opaque_existential_1Tm(v29);
  return v13;
}

void *specialized ModerationEnvelope.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ModerationEnvelope.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ModerationEnvelope.CodingKeys and conformance ModerationEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : ModerationEnvelope.ProbabilityEnvelope]);
    lazy protocol witness table accessor for type [String : ModerationEnvelope.ProbabilityEnvelope] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : ModerationEnvelope.ProbabilityEnvelope] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope and conformance ModerationEnvelope.ProbabilityEnvelope);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  return v7;
}

uint64_t specialized FinishReasonEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x800000025F92D070
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000025F92D090 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x800000025F92D0B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x5464656B6F766E69 && a2 == 0xEB000000006C6F6FLL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized FinishReasonEnvelope.init(from:)(void *a1)
{
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FinishReasonEnvelope.InvokedToolCodingKeys>);
  uint64_t v34 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v40 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys>);
  uint64_t v35 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v38 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FinishReasonEnvelope.EncounteredStopSequenceCodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  uint64_t v37 = v5;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FinishReasonEnvelope.ProducedStopTokenCodingKeys>);
  uint64_t v33 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FinishReasonEnvelope.CodingKeys>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a1[3];
  uint64_t v42 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  lazy protocol witness table accessor for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys();
  uint64_t v16 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16) {
    goto LABEL_9;
  }
  uint64_t v31 = v8;
  uint64_t v32 = v7;
  uint64_t v18 = v39;
  uint64_t v17 = v40;
  uint64_t v19 = v41;
  uint64_t v43 = v12;
  uint64_t v20 = v14;
  uint64_t v21 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v21 + 16) != 1)
  {
    uint64_t v12 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v23 = &unk_270BC18A8;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v23, *MEMORY[0x263F8DCB0], v12);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v20, v11);
LABEL_9:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v42);
    return v12;
  }
  switch(*(unsigned char *)(v21 + 32))
  {
    case 1:
      char v45 = 1;
      lazy protocol witness table accessor for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys();
      uint64_t v24 = v32;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v27 = v36;
      uint64_t v28 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v29 = v43;
      uint64_t v12 = v28;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v24, v27);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v11);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v42);
      break;
    case 2:
      char v46 = 2;
      lazy protocol witness table accessor for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys();
      uint64_t v25 = v38;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v25, v18);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v14, v11);
      uint64_t v12 = 0;
      goto LABEL_9;
    case 3:
      char v47 = 3;
      lazy protocol witness table accessor for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v19);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v14, v11);
      uint64_t v12 = 0;
      goto LABEL_9;
    default:
      char v44 = 0;
      lazy protocol witness table accessor for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v31);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v14, v11);
      uint64_t v12 = 0;
      goto LABEL_9;
  }
  return v12;
}

uint64_t specialized RequestMetadataEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000014 && a2 == 0x800000025F92CE50
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000025F92CE70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000025F92CE90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized RequestMetadataEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RequestMetadataEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v31 = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = v10;
    uint64_t v26 = v9;
    char v30 = 1;
    swift_bridgeObjectRetain();
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v14 = v13;
    uint64_t v23 = v12;
    uint64_t v24 = a2;
    char v29 = 2;
    swift_bridgeObjectRetain();
    uint64_t v25 = v14;
    uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v17 = v16;
    uint64_t v22 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    char v28 = 3;
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v18 = v27;
    swift_bridgeObjectRetain();
    uint64_t v19 = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v21 = v24;
    *uint64_t v24 = v26;
    v21[1] = v11;
    void v21[2] = v23;
    v21[3] = v19;
    v21[4] = v22;
    v21[5] = v17;
    v21[6] = v18;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [PromptEnvelope.DelimiterEnvelope] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [PromptEnvelope.DelimiterEnvelope] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [PromptEnvelope.DelimiterEnvelope] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PromptEnvelope.DelimiterEnvelope]);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope and conformance PromptEnvelope.DelimiterEnvelope, (void (*)(uint64_t))type metadata accessor for PromptEnvelope.DelimiterEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [PromptEnvelope.DelimiterEnvelope] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [PromptEnvelope.DelimiterEnvelope] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [PromptEnvelope.DelimiterEnvelope] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PromptEnvelope.DelimiterEnvelope]);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope and conformance PromptEnvelope.DelimiterEnvelope, (void (*)(uint64_t))type metadata accessor for PromptEnvelope.DelimiterEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [PromptEnvelope.DelimiterEnvelope] and conformance <A> [A]);
  }
  return result;
}

uint64_t type metadata accessor for PromptEnvelope.DelimiterEnvelope(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for PromptEnvelope.DelimiterEnvelope);
}

unint64_t lazy protocol witness table accessor for type PromptEnvelope.AttachmentEnvelope and conformance PromptEnvelope.AttachmentEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope and conformance PromptEnvelope.AttachmentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope and conformance PromptEnvelope.AttachmentEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope and conformance PromptEnvelope.AttachmentEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope and conformance PromptEnvelope.AttachmentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope and conformance PromptEnvelope.AttachmentEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope and conformance PromptEnvelope.AttachmentEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope and conformance PromptEnvelope.AttachmentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope and conformance PromptEnvelope.AttachmentEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope and conformance PromptEnvelope.AttachmentEnvelope);
  }
  return result;
}

uint64_t specialized PromptEnvelope.DelimiterEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65636E6174736E69 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F697469736F70 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t specialized PromptEnvelope.AttachmentEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697469736F70 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized PromptEnvelope.AttachmentEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptEnvelope.AttachmentEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  char v18 = 0;
  lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v17 = v14;
  uint64_t v9 = v15;
  unint64_t v10 = v16;
  unsigned __int8 v14 = 1;
  outlined copy of Data._Representation(v15, v16);
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  unsigned __int8 v14 = 2;
  uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  uint64_t result = outlined consume of Data._Representation(v9, v10);
  *(unsigned char *)a2 = v17;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = v10;
  *(void *)(a2 + 24) = v13;
  *(void *)(a2 + 32) = v11;
  return result;
}

unint64_t specialized PromptEnvelope.AttachmentContentEnvelope.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys>);
  uint64_t v19 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptEnvelope.AttachmentContentEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = (unint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    goto LABEL_5;
  }
  int v17 = a1;
  uint64_t v18 = v6;
  uint64_t v10 = v21;
  if (*(void *)(KeyedDecodingContainer.allKeys.getter() + 16) != 1)
  {
    uint64_t v12 = v10;
    uint64_t v13 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v15 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v15 = &unk_270BBFDE8;
    unint64_t v9 = (unint64_t)v8;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v15, *MEMORY[0x263F8DCB0], v13);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v12);
    a1 = v17;
LABEL_5:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    return v9;
  }
  lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  uint64_t v11 = v18;
  lazy protocol witness table accessor for type ImageDataEnvelope and conformance ImageDataEnvelope();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v3);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
  unint64_t v9 = v20;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
  return v9;
}

uint64_t specialized PromptEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x676E69727473 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574696D696C6564 && a2 == 0xEA00000000007372 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656D686361747461 && a2 == 0xEB0000000073746ELL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized PromptEnvelope.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptEnvelope.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    LOBYTE(v13) = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PromptEnvelope.DelimiterEnvelope]);
    char v12 = 1;
    lazy protocol witness table accessor for type [PromptEnvelope.DelimiterEnvelope] and conformance <A> [A]();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v11 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PromptEnvelope.AttachmentEnvelope]);
    char v12 = 2;
    lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A](&lazy protocol witness table cache variable for type [PromptEnvelope.AttachmentEnvelope] and conformance <A> [A], &demangling cache variable for type metadata for [PromptEnvelope.AttachmentEnvelope], (void (*)(void))lazy protocol witness table accessor for type PromptEnvelope.AttachmentEnvelope and conformance PromptEnvelope.AttachmentEnvelope);
    swift_bridgeObjectRetain();
    uint64_t v9 = v11;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    if (v9)
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v10 = v11;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
      swift_bridgeObjectRelease();
      if (!v10) {
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return v7;
}

unint64_t lazy protocol witness table accessor for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope);
  }
  return result;
}

uint64_t specialized PromptRenderingEnvelope.SourceEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized PromptRenderingEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656372756F73 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73746E656D676573 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64657265646E6572 && a2 == 0xEE00676E69727453 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C616E696769726FLL && a2 == 0xEE0074706D6F7250 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7344496E656B6F74 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000025F92CEB0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t specialized PromptRenderingEnvelope.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptRenderingEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v47 = 0;
    lazy protocol witness table accessor for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v36 = v43;
    uint64_t v37 = a2;
    uint64_t v9 = v44;
    uint64_t v35 = v45;
    uint64_t v10 = v46;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    char v47 = 1;
    lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(&lazy protocol witness table cache variable for type [String] and conformance <A> [A], &demangling cache variable for type metadata for [String]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v41 = v9;
    uint64_t v42 = v10;
    uint64_t v11 = v43;
    LOBYTE(v43) = 2;
    swift_bridgeObjectRetain();
    uint64_t v34 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v43) = 3;
    uint64_t v39 = v12;
    swift_bridgeObjectRetain();
    uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v40 = v14;
    uint64_t v33 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    char v47 = 4;
    lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], &demangling cache variable for type metadata for [Int]);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v15 = v43;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    char v47 = 5;
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v38 = v15;
    uint64_t v16 = v43;
    LOBYTE(v43) = 6;
    swift_bridgeObjectRetain();
    uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v19 = v18;
    unsigned __int8 v20 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v32 = v17;
    v20(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v21 = v41;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = v38;
    swift_bridgeObjectRelease();
    uint64_t v23 = v40;
    swift_bridgeObjectRelease();
    uint64_t v24 = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v25 = v42;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v27 = v37;
    *uint64_t v37 = v36;
    v27[1] = v21;
    v27[2] = v35;
    v27[3] = v25;
    uint64_t v28 = v34;
    v27[4] = v11;
    v27[5] = v28;
    uint64_t v29 = v33;
    v27[6] = v24;
    v27[7] = v29;
    v27[8] = v23;
    v27[9] = v22;
    uint64_t v30 = v32;
    v27[10] = v16;
    v27[11] = v30;
    v27[12] = v19;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModelInformationEnvelope.AssetEnvelope and conformance ModelInformationEnvelope.AssetEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope and conformance ModelInformationEnvelope.AssetEnvelope;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope and conformance ModelInformationEnvelope.AssetEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope and conformance ModelInformationEnvelope.AssetEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope and conformance ModelInformationEnvelope.AssetEnvelope;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope and conformance ModelInformationEnvelope.AssetEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope and conformance ModelInformationEnvelope.AssetEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope and conformance ModelInformationEnvelope.AssetEnvelope;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope and conformance ModelInformationEnvelope.AssetEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope and conformance ModelInformationEnvelope.AssetEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModerationEnvelope.CodingKeys and conformance ModerationEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope.CodingKeys and conformance ModerationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope.CodingKeys and conformance ModerationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope.CodingKeys and conformance ModerationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope.CodingKeys and conformance ModerationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope.CodingKeys and conformance ModerationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope.CodingKeys and conformance ModerationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope.CodingKeys and conformance ModerationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope.CodingKeys and conformance ModerationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope.CodingKeys and conformance ModerationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope.CodingKeys and conformance ModerationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope.CodingKeys and conformance ModerationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope.CodingKeys and conformance ModerationEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope and conformance PromptCompletionEnvelope.SegmentEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope and conformance PromptCompletionEnvelope.SegmentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope and conformance PromptCompletionEnvelope.SegmentEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope and conformance PromptCompletionEnvelope.SegmentEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope and conformance PromptCompletionEnvelope.SegmentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope and conformance PromptCompletionEnvelope.SegmentEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope and conformance PromptCompletionEnvelope.SegmentEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope and conformance PromptCompletionEnvelope.SegmentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope and conformance PromptCompletionEnvelope.SegmentEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope and conformance PromptCompletionEnvelope.SegmentEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolCallEnvelope and conformance ToolCallEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope and conformance ToolCallEnvelope;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope and conformance ToolCallEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope and conformance ToolCallEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope and conformance ToolCallEnvelope;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope and conformance ToolCallEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope and conformance ToolCallEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope and conformance ToolCallEnvelope;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope and conformance ToolCallEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope and conformance ToolCallEnvelope);
  }
  return result;
}

_OWORD *outlined init with take of FinishReasonEnvelope(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  return a2;
}

unint64_t lazy protocol witness table accessor for type FinishReasonEnvelope and conformance FinishReasonEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type FinishReasonEnvelope and conformance FinishReasonEnvelope;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope and conformance FinishReasonEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope and conformance FinishReasonEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FinishReasonEnvelope and conformance FinishReasonEnvelope;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope and conformance FinishReasonEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope and conformance FinishReasonEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FinishReasonEnvelope and conformance FinishReasonEnvelope;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope and conformance FinishReasonEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope and conformance FinishReasonEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope);
  }
  return result;
}

uint64_t specialized ImageDataEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74616D726F66 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized ImageDataEnvelope.init(from:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ImageDataEnvelope.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  char v9 = 0;
  lazy protocol witness table accessor for type ImageFormatEnvelope and conformance ImageFormatEnvelope();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v6 = v8[8];
  char v9 = 1;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v6;
}

uint64_t specialized ImageFormatEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 6778480 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6778986 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized ImageFormatEnvelope.init(from:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ImageFormatEnvelope.JpgCodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v22 = v2;
  uint64_t v23 = v3;
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ImageFormatEnvelope.PngCodingKeys>);
  uint64_t v25 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ImageFormatEnvelope.CodingKeys>);
  uint64_t v24 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1((void *)a1, *(void *)(a1 + 24));
  lazy protocol witness table accessor for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys();
  uint64_t v12 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    goto LABEL_7;
  }
  uint64_t v13 = v25;
  uint64_t v21 = v6;
  uint64_t v26 = a1;
  uint64_t v14 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v14 + 16) != 1)
  {
    uint64_t v16 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v18 = &unk_270BC1630;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, *MEMORY[0x263F8DCB0], v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
    a1 = v26;
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    return a1;
  }
  a1 = *(unsigned __int8 *)(v14 + 32);
  if (a1)
  {
    LODWORD(v25) = *(unsigned __int8 *)(v14 + 32);
    char v28 = 1;
    lazy protocol witness table accessor for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v15 = v24;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v9);
    a1 = v25;
  }
  else
  {
    char v27 = 0;
    lazy protocol witness table accessor for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v19 = v24;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v26);
  return a1;
}

uint64_t specialized PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x676E69727473 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7441666C65537369 && a2 == 0xEF6E6F69746E6574)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    v9[15] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[14] = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

void *specialized PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys>);
  uint64_t v19 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    goto LABEL_5;
  }
  uint64_t v17 = a1;
  uint64_t v18 = v6;
  uint64_t v10 = v21;
  if (*(void *)(KeyedDecodingContainer.allKeys.getter() + 16) != 1)
  {
    uint64_t v12 = v10;
    uint64_t v13 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v15 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v15 = &unk_270BC6FA0;
    uint64_t v9 = v8;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v15, *MEMORY[0x263F8DCB0], v13);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v12);
    a1 = v17;
LABEL_5:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    return v9;
  }
  lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  uint64_t v11 = v18;
  lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v3);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
  uint64_t v9 = v20;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
  return v9;
}

void *specialized PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  return v7;
}

void *specialized PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope]);
    lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A](&lazy protocol witness table cache variable for type [PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope] and conformance <A> [A], &demangling cache variable for type metadata for [PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope], (void (*)(void))lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  return v7;
}

uint64_t specialized PromptTemplateInfoEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6574616C706D6574 && a2 == 0xEA00000000004449;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000025F92CED0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized DocumentResourceEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7107189 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x63736544656C6966 && a2 == 0xEE00726F74706972 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized DocumentRegistrationEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x737574617473 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ProgressEnvelope and conformance ProgressEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type ProgressEnvelope and conformance ProgressEnvelope;
  if (!lazy protocol witness table cache variable for type ProgressEnvelope and conformance ProgressEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressEnvelope and conformance ProgressEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProgressEnvelope and conformance ProgressEnvelope;
  if (!lazy protocol witness table cache variable for type ProgressEnvelope and conformance ProgressEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressEnvelope and conformance ProgressEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProgressEnvelope and conformance ProgressEnvelope;
  if (!lazy protocol witness table cache variable for type ProgressEnvelope and conformance ProgressEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressEnvelope and conformance ProgressEnvelope);
  }
  return result;
}

uint64_t specialized DocumentRegistrationStatusEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7265747369676572 && a2 == 0xEB00000000676E69;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64656873696E6966 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized ProgressEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73736572676F7270 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7365747962 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7479426C61746F74 && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized ProgressEnvelope.init(from:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ProgressEnvelope.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  char v11 = 0;
  KeyedDecodingContainer.decode(_:forKey:)();
  char v10 = 1;
  uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
  char v9 = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v7;
}

uint64_t specialized SamplingParametersEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7967657461727473 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74617265706D6574 && a2 == 0xEB00000000657275 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000025F92CD50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65506874676E656CLL && a2 == 0xED000079746C616ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x546D756D6978616DLL && a2 == 0xED0000736E656B6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x75716553706F7473 && a2 == 0xED00007365636E65 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x65536D6F646E6172 && a2 == 0xEA00000000006465 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x74756F656D6974 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000025F92CD70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6165486E656B6F74 && a2 == 0xEC000000676E696CLL)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

unint64_t lazy protocol witness table accessor for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys);
  }
  return result;
}

uint64_t specialized SamplingStrategyEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x78616D677261 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x537375656C63756ELL && a2 == 0xEF676E696C706D61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1265659764 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized SamplingStrategyEnvelope.init(from:)(void *a1)
{
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SamplingStrategyEnvelope.TopKCodingKeys>);
  uint64_t v30 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v31 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SamplingStrategyEnvelope.NucleusSamplingCodingKeys>);
  uint64_t v29 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SamplingStrategyEnvelope.ArgmaxCodingKeys>);
  uint64_t v26 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SamplingStrategyEnvelope.CodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  uint64_t v32 = a1;
  uint64_t v13 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, v12);
  lazy protocol witness table accessor for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys();
  uint64_t v14 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    goto LABEL_9;
  }
  uint64_t v33 = v5;
  uint64_t v15 = v31;
  uint64_t v16 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v16 + 16) != 1)
  {
    uint64_t v20 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v22 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v22 = &unk_270BC2B90;
    uint64_t v13 = (uint64_t)v11;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v22, *MEMORY[0x263F8DCB0], v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
LABEL_9:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v32);
    return v13;
  }
  if (*(unsigned char *)(v16 + 32))
  {
    if (*(unsigned char *)(v16 + 32) == 1)
    {
      char v35 = 1;
      lazy protocol witness table accessor for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v17 = v27;
      KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v19 = v18;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v4, v17);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      uint64_t v13 = v19;
    }
    else
    {
      char v36 = 2;
      lazy protocol witness table accessor for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v24 = v28;
      uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v24);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
    goto LABEL_9;
  }
  char v34 = 0;
  lazy protocol witness table accessor for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v33);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v13 = 0;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v32);
  return v13;
}

unint64_t lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys);
  }
  return result;
}

uint64_t specialized ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x72657773776F7262 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E65476567616D69 && a2 == 0xEE00726F74617265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F6974636E7566 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000025F92D050 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E656D75677261 && a2 == 0xEF616D6568635373)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void *specialized ToolCallEnvelope.KindEnvelope.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolCallEnvelope.KindEnvelope.FunctionCodingKeys>);
  uint64_t v20 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolCallEnvelope.KindEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    goto LABEL_5;
  }
  uint64_t v18 = a1;
  uint64_t v19 = v6;
  uint64_t v10 = v22;
  if (*(void *)(KeyedDecodingContainer.allKeys.getter() + 16) != 1)
  {
    uint64_t v12 = v10;
    uint64_t v13 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v15 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v15 = &unk_270BC0CC0;
    uint64_t v9 = v8;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v15, *MEMORY[0x263F8DCB0], v13);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v12);
    a1 = v18;
LABEL_5:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    return v9;
  }
  lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  uint64_t v11 = v19;
  lazy protocol witness table accessor for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
  uint64_t v9 = v21;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
  return v9;
}

uint64_t specialized PromptRenderingEnvelope.SourceEnvelope.init(from:)(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v13 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v3)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    uint64_t v10 = v13;
    char v15 = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    char v14 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v6);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t specialized ToolCallEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1684957547 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized ToolCallEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolCallEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    return outlined consume of Data?(0, 0xF000000000000000);
  }
  else
  {
    LOBYTE(v25) = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = v10;
    uint64_t v24 = v9;
    char v29 = 1;
    lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    unint64_t v12 = v26;
    uint64_t v13 = v28;
    uint64_t v20 = v27;
    uint64_t v21 = v25;
    char v29 = 2;
    lazy protocol witness table accessor for type Data and conformance Data();
    unint64_t v23 = v12;
    swift_bridgeObjectRetain();
    uint64_t v22 = v13;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v14 = v25;
    unint64_t v15 = v26;
    outlined copy of Data?(v25, v26);
    outlined consume of Data?(0, 0xF000000000000000);
    swift_bridgeObjectRetain();
    unint64_t v16 = v23;
    swift_bridgeObjectRetain();
    uint64_t v17 = v22;
    swift_bridgeObjectRetain();
    outlined copy of Data?(v14, v15);
    outlined consume of Data?(v14, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = outlined consume of Data?(v14, v15);
    *a2 = v24;
    a2[1] = v11;
    a2[2] = v21;
    a2[3] = v16;
    a2[4] = v20;
    a2[5] = v17;
    a2[6] = v14;
    a2[7] = v15;
  }
  return result;
}

uint64_t specialized OneShotRequest.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6B6F54746E756F63 && a2 == 0xEB00000000736E65;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000025F92C880 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6574656C706D6F63 && a2 == 0xEE0074706D6F7250 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000025F92C860)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized StreamingRequestPayload.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6574656C706D6F63 && a2 == 0xEE0074706D6F7250;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000025F92C860)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys);
  }
  return result;
}

_OWORD *outlined init with take of PromptCompletionEnvelope.SegmentEnvelope(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(long long *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t outlined retain of TextContentEnvelope(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  unint64_t v3 = *(void *)(a1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v2, v3);
  return a1;
}

uint64_t outlined release of PromptCompletionEnvelope.SegmentEnvelope(uint64_t a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.CodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.CodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.CodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.CodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.CodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.CodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.CodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.CodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.CodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.CodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.CodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.CodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.CodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys;
  if (!lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnnotationEnvelope.CodingKeys and conformance AnnotationEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.CodingKeys and conformance AnnotationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.CodingKeys and conformance AnnotationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.CodingKeys and conformance AnnotationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.CodingKeys and conformance AnnotationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.CodingKeys and conformance AnnotationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.CodingKeys and conformance AnnotationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.CodingKeys and conformance AnnotationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.CodingKeys and conformance AnnotationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.CodingKeys and conformance AnnotationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.CodingKeys and conformance AnnotationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.CodingKeys and conformance AnnotationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.CodingKeys and conformance AnnotationEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnnotationEnvelope.CitationTypeEnvelope.CodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.CodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.CodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.CodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.CodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.CodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.CodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.CodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.CodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.CodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.CodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.CodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.CodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnnotationEnvelope.URLCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.URLCitationEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.URLCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.URLCitationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.URLCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.URLCitationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.URLCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.URLCitationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.URLCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.URLCitationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.URLCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.URLCitationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.URLCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.URLCitationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.URLCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.URLCitationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.URLCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.URLCitationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.URLCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.URLCitationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.URLCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.URLCitationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.URLCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.URLCitationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.URLCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.URLCitationEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys);
  }
  return result;
}

uint64_t outlined retain of PromptEnvelope.AttachmentEnvelope(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of PromptEnvelope.AttachmentEnvelope(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of Prompt.Rendering?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined release of PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  unint64_t v3 = *(void *)(a1 + 88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data?(v2, v3);
  return a1;
}

uint64_t outlined release of PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  unint64_t v3 = *(void *)(a1 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data?(v2, v3);
  return a1;
}

void *outlined release of PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope(void *a1)
{
  uint64_t v2 = a1[4];
  unint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of FinishReason(v2, v3);
  outlined consume of Data._Representation(v4, v5);
  return a1;
}

uint64_t sub_25F8732B4()
{
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(v0 + 32), *(void *)(v0 + 40));
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25F8732F4()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25F87332C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[7] >= 3uLL) {
    swift_bridgeObjectRelease();
  }
  outlined consume of Data._Representation(v0[8], v0[9]);
  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t sub_25F873384()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(v0 + 56), *(void *)(v0 + 64));
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t sub_25F8733CC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v0 + 104);
  if (v1 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(v0 + 96), v1);
  }
  return MEMORY[0x270FA0238](v0, 112, 7);
}

uint64_t sub_25F87343C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t outlined release of String(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ModerationEnvelope(uint64_t a1)
{
  return a1;
}

uint64_t sub_25F8734DC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t outlined retain of ModerationEnvelope(uint64_t a1)
{
  return a1;
}

uint64_t *outlined release of (PromptRenderingEnvelope?, PromptRenderingEnvelope?)(uint64_t *a1)
{
  uint64_t v2 = a1[13];
  uint64_t v3 = a1[14];
  outlined consume of PromptRenderingEnvelope?(*a1, a1[1]);
  outlined consume of PromptRenderingEnvelope?(v2, v3);
  return a1;
}

ValueMetadata *type metadata accessor for PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope()
{
  return &type metadata for PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope;
}

void *type metadata accessor for SchemaEnvelope.CodingKeys()
{
  return &unk_270BC0260;
}

void *type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys()
{
  return &unk_270BC5E08;
}

void *type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys()
{
  return &unk_270BC5E98;
}

void *type metadata accessor for AnnotationEnvelope.URLCitationEnvelope.CodingKeys()
{
  return &unk_270BC5F28;
}

void *type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope.CodingKeys()
{
  return &unk_270BC5FB8;
}

void *type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys()
{
  return &unk_270BC6048;
}

void *type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys()
{
  return &unk_270BC60D8;
}

void *type metadata accessor for AnnotationEnvelope.CodingKeys()
{
  return &unk_270BC6168;
}

void *type metadata accessor for ModerationEnvelope.ProbabilityEnvelope.CodingKeys()
{
  return &unk_270BC61F8;
}

void *type metadata accessor for ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys()
{
  return &unk_270BC6218;
}

void *type metadata accessor for ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys()
{
  return &unk_270BC6238;
}

void *type metadata accessor for ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys()
{
  return &unk_270BC6258;
}

void *type metadata accessor for ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys()
{
  return &unk_270BC6278;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys()
{
  return &unk_270BC6308;
}

void *type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys()
{
  return &unk_270BC6398;
}

void *type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys()
{
  return &unk_270BC63B8;
}

void *type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope.ImageGeneratorCodingKeys()
{
  return &unk_270BC63D8;
}

void *type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys()
{
  return &unk_270BC6468;
}

void *type metadata accessor for SamplingStrategyEnvelope.CodingKeys()
{
  return &unk_270BC2A50;
}

void *type metadata accessor for SamplingStrategyEnvelope.ArgmaxCodingKeys()
{
  return &unk_270BC2B70;
}

void *type metadata accessor for SamplingStrategyEnvelope.NucleusSamplingCodingKeys()
{
  return &unk_270BC29C0;
}

void *type metadata accessor for SamplingStrategyEnvelope.TopKCodingKeys()
{
  return &unk_270BC2AE0;
}

void *type metadata accessor for DocumentRegistrationStatusEnvelope.CodingKeys()
{
  return &unk_270BC30C0;
}

void *type metadata accessor for DocumentRegistrationStatusEnvelope.RegisteringCodingKeys()
{
  return &unk_270BC3270;
}

void *type metadata accessor for DocumentRegistrationStatusEnvelope.FinishedCodingKeys()
{
  return &unk_270BC31E0;
}

void *type metadata accessor for DocumentRegistrationStatusEnvelope.ErrorCodingKeys()
{
  return &unk_270BC3150;
}

uint64_t getEnumTagSinglePayload for PromptCompletionStreamElementEnvelope.Envelope.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PromptCompletionStreamElementEnvelope.Envelope.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F873934);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.CodingKeys()
{
  return &unk_270BC3AA0;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys()
{
  return &unk_270BC3CE0;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys()
{
  return &unk_270BC37E0;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys()
{
  return &unk_270BC64F8;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys()
{
  return &unk_270BC6588;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys()
{
  return &unk_270BC3BC0;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys()
{
  return &unk_270BC6618;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys()
{
  return &unk_270BC3C50;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys()
{
  return &unk_270BC66A8;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys()
{
  return &unk_270BC3D70;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys()
{
  return &unk_270BC3B30;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys()
{
  return &unk_270BC6738;
}

void *type metadata accessor for PromptCompletionEnvelope.CandidateEnvelope.CodingKeys()
{
  return &unk_270BC2780;
}

void *type metadata accessor for UsageEnvelope.CodingKeys()
{
  return &unk_270BBF860;
}

void *type metadata accessor for ModerationEnvelope.CodingKeys()
{
  return &unk_270BC67C8;
}

void *type metadata accessor for ModelInformationEnvelope.CodingKeys()
{
  return &unk_270BC24C0;
}

void *type metadata accessor for PromptTemplateInfoEnvelope.CodingKeys()
{
  return &unk_270BC2CA8;
}

uint64_t getEnumTagSinglePayload for CompletePromptRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CompletePromptRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F873BD0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PromptRenderingEnvelope.CodingKeys()
{
  return &unk_270BC1EA8;
}

void *type metadata accessor for PromptEnvelope.CodingKeys()
{
  return &unk_270BBFF08;
}

void *type metadata accessor for RequestMetadataEnvelope.CodingKeys()
{
  return &unk_270BC20E0;
}

void *type metadata accessor for DocumentResourceEnvelope.CodingKeys()
{
  return &unk_270BC6858;
}

void *type metadata accessor for StreamingRequest.CodingKeys()
{
  return &unk_270BC0960;
}

void *type metadata accessor for StreamingRequest.CompletePromptCodingKeys()
{
  return &unk_270BC09F0;
}

void *type metadata accessor for StreamingRequest.CompletePromptTemplateCodingKeys()
{
  return &unk_270BC0B10;
}

void *type metadata accessor for StreamingRequest.RegisterDocumentCodingKeys()
{
  return &unk_270BC0A80;
}

void *type metadata accessor for OneShotRequest.CodingKeys()
{
  return &unk_270BBF970;
}

void *type metadata accessor for OneShotRequest.CountTokensCodingKeys()
{
  return &unk_270BBFA00;
}

void *type metadata accessor for OneShotRequest.CountTokensPromptTemplateCodingKeys()
{
  return &unk_270BC68E8;
}

void *type metadata accessor for OneShotRequest.CompletePromptCodingKeys()
{
  return &unk_270BBFA90;
}

void *type metadata accessor for OneShotRequest.CompletePromptTemplateCodingKeys()
{
  return &unk_270BBFB20;
}

void *type metadata accessor for FinishReasonEnvelope()
{
  return &unk_270BC18A8;
}

ValueMetadata *type metadata accessor for ToolCallEnvelope()
{
  return &type metadata for ToolCallEnvelope;
}

uint64_t destroy for PromptCompletionEnvelope.SegmentEnvelope(uint64_t a1)
{
  return outlined consume of PromptCompletionEnvelope.SegmentEnvelope(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
}

ValueMetadata *type metadata accessor for PromptCompletionEnvelope.SegmentEnvelope()
{
  return &type metadata for PromptCompletionEnvelope.SegmentEnvelope;
}

ValueMetadata *type metadata accessor for ModelInformationEnvelope.AssetEnvelope()
{
  return &type metadata for ModelInformationEnvelope.AssetEnvelope;
}

void *type metadata accessor for PromptRenderingEnvelope.SourceEnvelope()
{
  return &unk_270BC1E28;
}

uint64_t destroy for PromptEnvelope.AttachmentEnvelope(uint64_t a1)
{
  return outlined consume of Data._Representation(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t initializeWithCopy for PromptEnvelope.AttachmentEnvelope(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  outlined copy of Data._Representation(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for PromptEnvelope.AttachmentEnvelope(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  outlined copy of Data._Representation(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for PromptEnvelope.AttachmentEnvelope(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v4, v5);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptEnvelope.AttachmentEnvelope(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[40]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptEnvelope.AttachmentEnvelope(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PromptEnvelope.AttachmentEnvelope()
{
  return &type metadata for PromptEnvelope.AttachmentEnvelope;
}

void *initializeBufferWithCopyOfBuffer for PromptEnvelope.DelimiterEnvelope(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *unsigned int v3 = *a2;
    unsigned int v3 = (void *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    uint64_t v7 = *(int *)(a3 + 32);
    int v8 = (void *)(a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    uint64_t v10 = type metadata accessor for Locale();
    uint64_t v11 = *(void *)(v10 - 8);
    unint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12(v9, 1, v10))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
  }
  return v3;
}

uint64_t destroy for PromptEnvelope.DelimiterEnvelope(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for Locale();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t initializeWithCopy for PromptEnvelope.DelimiterEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Locale();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  return a1;
}

void *assignWithCopy for PromptEnvelope.DelimiterEnvelope(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Locale();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

_OWORD *initializeWithTake for PromptEnvelope.DelimiterEnvelope(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Locale();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t assignWithTake for PromptEnvelope.DelimiterEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for Locale();
  uint64_t v12 = *(void *)(v11 - 8);
  int v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptEnvelope.DelimiterEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F874744);
}

uint64_t sub_25F874744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PromptEnvelope.DelimiterEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F87480C);
}

uint64_t sub_25F87480C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for PromptEnvelope.DelimiterEnvelope()
{
  type metadata accessor for Constraints?(319, (unint64_t *)&lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for ProgressEnvelope(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ProgressEnvelope(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

void *type metadata accessor for ProgressEnvelope()
{
  return &unk_270BC0510;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope()
{
  return &unk_270BC6960;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope()
{
  return &unk_270BC3760;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope()
{
  return &unk_270BC3648;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope()
{
  return &unk_270BC69E0;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope()
{
  return &unk_270BC3418;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope()
{
  return &unk_270BC3900;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope()
{
  return &unk_270BC6A68;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope()
{
  return &unk_270BC6AF0;
}

uint64_t destroy for PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  uint64_t v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[13] = a2[13];
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope()
{
  return &unk_270BC3A20;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope()
{
  return &unk_270BC3538;
}

void *type metadata accessor for PromptTemplateInfoEnvelope.RichVariableBindingEnvelope()
{
  return &unk_270BC6B18;
}

uint64_t base witness table accessor for Equatable in PromptEnvelope.DelimiterEnvelope()
{
  return lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope and conformance PromptEnvelope.DelimiterEnvelope, (void (*)(uint64_t))type metadata accessor for PromptEnvelope.DelimiterEnvelope);
}

unint64_t lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys);
  }
  return result;
}

uint64_t outlined init with take of PromptEnvelope.AttachmentContentEnvelope(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  *(void *)(a2 + 16) = *((void *)a1 + 2);
  *(_OWORD *)a2 = v2;
  return a2;
}

unint64_t lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A](unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ImageContentEnvelope and conformance ImageContentEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type ImageContentEnvelope and conformance ImageContentEnvelope;
  if (!lazy protocol witness table cache variable for type ImageContentEnvelope and conformance ImageContentEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageContentEnvelope and conformance ImageContentEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageContentEnvelope and conformance ImageContentEnvelope;
  if (!lazy protocol witness table cache variable for type ImageContentEnvelope and conformance ImageContentEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageContentEnvelope and conformance ImageContentEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageContentEnvelope and conformance ImageContentEnvelope;
  if (!lazy protocol witness table cache variable for type ImageContentEnvelope and conformance ImageContentEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageContentEnvelope and conformance ImageContentEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextContentEnvelope and conformance TextContentEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type TextContentEnvelope and conformance TextContentEnvelope;
  if (!lazy protocol witness table cache variable for type TextContentEnvelope and conformance TextContentEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextContentEnvelope and conformance TextContentEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextContentEnvelope and conformance TextContentEnvelope;
  if (!lazy protocol witness table cache variable for type TextContentEnvelope and conformance TextContentEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextContentEnvelope and conformance TextContentEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextContentEnvelope and conformance TextContentEnvelope;
  if (!lazy protocol witness table cache variable for type TextContentEnvelope and conformance TextContentEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextContentEnvelope and conformance TextContentEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope);
  }
  return result;
}

uint64_t outlined init with take of Locale?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope);
  }
  return result;
}

void *type metadata accessor for PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys()
{
  return &unk_270BC6BB0;
}

void *type metadata accessor for ProgressEnvelope.CodingKeys()
{
  return &unk_270BC0480;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys()
{
  return &unk_270BC34A8;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys()
{
  return &unk_270BC3990;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys()
{
  return &unk_270BC6C40;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys()
{
  return &unk_270BC6CD0;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys()
{
  return &unk_270BC3870;
}

uint64_t getEnumTagSinglePayload for PromptCompletionEnvelope.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PromptCompletionEnvelope.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F879BE0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys()
{
  return &unk_270BC3388;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys()
{
  return &unk_270BC6D60;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys()
{
  return &unk_270BC35B8;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys()
{
  return &unk_270BC36D0;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys()
{
  return &unk_270BC6DF0;
}

unsigned char *storeEnumTagSinglePayload for RequestPayload.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F879D24);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for FinishReasonEnvelope.CodingKeys()
{
  return &unk_270BC1748;
}

void *type metadata accessor for FinishReasonEnvelope.ProducedStopTokenCodingKeys()
{
  return &unk_270BC1728;
}

void *type metadata accessor for FinishReasonEnvelope.EncounteredStopSequenceCodingKeys()
{
  return &unk_270BC17F8;
}

void *type metadata accessor for FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys()
{
  return &unk_270BC1888;
}

void *type metadata accessor for FinishReasonEnvelope.InvokedToolCodingKeys()
{
  return &unk_270BC17D8;
}

void *type metadata accessor for ToolCallEnvelope.CodingKeys()
{
  return &unk_270BC0E60;
}

void *type metadata accessor for PromptCompletionEnvelope.SegmentEnvelope.CodingKeys()
{
  return &unk_270BC25D0;
}

void *type metadata accessor for PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys()
{
  return &unk_270BC2660;
}

void *type metadata accessor for PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys()
{
  return &unk_270BC6E80;
}

void *type metadata accessor for ModelInformationEnvelope.AssetEnvelope.CodingKeys()
{
  return &unk_270BC23A8;
}

void *type metadata accessor for PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys()
{
  return &unk_270BC6F10;
}

void *type metadata accessor for PromptRenderingEnvelope.SourceEnvelope.CodingKeys()
{
  return &unk_270BC1D98;
}

void *type metadata accessor for PromptEnvelope.AttachmentEnvelope.CodingKeys()
{
  return &unk_270BBFBB0;
}

uint64_t getEnumTagSinglePayload for PromptCompletionEnvelope.CandidateEnvelope.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PromptCompletionEnvelope.CandidateEnvelope.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F879F78);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PromptEnvelope.DelimiterEnvelope.CodingKeys()
{
  return &unk_270BBFE78;
}

void *type metadata accessor for PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope()
{
  return &unk_270BC6FA0;
}

void *type metadata accessor for ToolCallEnvelope.KindEnvelope()
{
  return &unk_270BC0CC0;
}

void *type metadata accessor for TextContentEnvelope()
{
  return &unk_270BC7018;
}

void *type metadata accessor for PromptEnvelope.AttachmentContentEnvelope()
{
  return &unk_270BBFDE8;
}

void *type metadata accessor for ImageContentEnvelope()
{
  return &unk_270BC70A0;
}

unint64_t lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ImageDataEnvelope and conformance ImageDataEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type ImageDataEnvelope and conformance ImageDataEnvelope;
  if (!lazy protocol witness table cache variable for type ImageDataEnvelope and conformance ImageDataEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageDataEnvelope and conformance ImageDataEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageDataEnvelope and conformance ImageDataEnvelope;
  if (!lazy protocol witness table cache variable for type ImageDataEnvelope and conformance ImageDataEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageDataEnvelope and conformance ImageDataEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageDataEnvelope and conformance ImageDataEnvelope;
  if (!lazy protocol witness table cache variable for type ImageDataEnvelope and conformance ImageDataEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageDataEnvelope and conformance ImageDataEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ImageContentEnvelope.CodingKeys and conformance ImageContentEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ImageContentEnvelope.CodingKeys and conformance ImageContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImageContentEnvelope.CodingKeys and conformance ImageContentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageContentEnvelope.CodingKeys and conformance ImageContentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageContentEnvelope.CodingKeys and conformance ImageContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImageContentEnvelope.CodingKeys and conformance ImageContentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageContentEnvelope.CodingKeys and conformance ImageContentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageContentEnvelope.CodingKeys and conformance ImageContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImageContentEnvelope.CodingKeys and conformance ImageContentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageContentEnvelope.CodingKeys and conformance ImageContentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageContentEnvelope.CodingKeys and conformance ImageContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImageContentEnvelope.CodingKeys and conformance ImageContentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageContentEnvelope.CodingKeys and conformance ImageContentEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextContentEnvelope.CodingKeys and conformance TextContentEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TextContentEnvelope.CodingKeys and conformance TextContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type TextContentEnvelope.CodingKeys and conformance TextContentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextContentEnvelope.CodingKeys and conformance TextContentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextContentEnvelope.CodingKeys and conformance TextContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type TextContentEnvelope.CodingKeys and conformance TextContentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextContentEnvelope.CodingKeys and conformance TextContentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextContentEnvelope.CodingKeys and conformance TextContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type TextContentEnvelope.CodingKeys and conformance TextContentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextContentEnvelope.CodingKeys and conformance TextContentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextContentEnvelope.CodingKeys and conformance TextContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type TextContentEnvelope.CodingKeys and conformance TextContentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextContentEnvelope.CodingKeys and conformance TextContentEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [AnnotationEnvelope] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [AnnotationEnvelope] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [AnnotationEnvelope] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [AnnotationEnvelope]);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type AnnotationEnvelope and conformance AnnotationEnvelope, (void (*)(uint64_t))type metadata accessor for AnnotationEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AnnotationEnvelope] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [AnnotationEnvelope] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [AnnotationEnvelope] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [AnnotationEnvelope]);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type AnnotationEnvelope and conformance AnnotationEnvelope, (void (*)(uint64_t))type metadata accessor for AnnotationEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AnnotationEnvelope] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope);
  }
  return result;
}

void *type metadata accessor for PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys()
{
  return &unk_270BC7138;
}

void *type metadata accessor for PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys()
{
  return &unk_270BC71C8;
}

void *type metadata accessor for ToolCallEnvelope.KindEnvelope.CodingKeys()
{
  return &unk_270BC0BA0;
}

void *type metadata accessor for ToolCallEnvelope.KindEnvelope.FunctionCodingKeys()
{
  return &unk_270BC0C30;
}

uint64_t getEnumTagSinglePayload for Constraints.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Constraints.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F87C310);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TextContentEnvelope.CodingKeys()
{
  return &unk_270BC7258;
}

void *type metadata accessor for ImageContentEnvelope.CodingKeys()
{
  return &unk_270BC72E8;
}

void *type metadata accessor for PromptEnvelope.AttachmentContentEnvelope.CodingKeys()
{
  return &unk_270BBFCC8;
}

uint64_t getEnumTagSinglePayload for StreamingRequestPayload.CompletePromptCodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for StreamingRequestPayload.CompletePromptCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25F87C454);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys()
{
  return &unk_270BBFD58;
}

void *type metadata accessor for PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope()
{
  return &unk_270BC7360;
}

void *type metadata accessor for ToolCallEnvelope.FunctionEnvelope()
{
  return &unk_270BC0DE0;
}

uint64_t initializeBufferWithCopyOfBuffer for PromptEnvelope.AttachmentContentEnvelope(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  outlined copy of Data._Representation(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for PromptEnvelope.AttachmentContentEnvelope(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  outlined copy of Data._Representation(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t assignWithTake for PromptEnvelope.AttachmentContentEnvelope(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptEnvelope.AttachmentContentEnvelope(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[24]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptEnvelope.AttachmentContentEnvelope(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for ImageDataEnvelope()
{
  return &unk_270BC1008;
}

unint64_t lazy protocol witness table accessor for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ImageFormatEnvelope and conformance ImageFormatEnvelope()
{
  unint64_t result = lazy protocol witness table cache variable for type ImageFormatEnvelope and conformance ImageFormatEnvelope;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope and conformance ImageFormatEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope and conformance ImageFormatEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageFormatEnvelope and conformance ImageFormatEnvelope;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope and conformance ImageFormatEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope and conformance ImageFormatEnvelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageFormatEnvelope and conformance ImageFormatEnvelope;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope and conformance ImageFormatEnvelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope and conformance ImageFormatEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys);
  }
  return result;
}

void *type metadata accessor for PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys()
{
  return &unk_270BC73F8;
}

void *type metadata accessor for ToolCallEnvelope.FunctionEnvelope.CodingKeys()
{
  return &unk_270BC0D50;
}

void *type metadata accessor for ImageDataEnvelope.CodingKeys()
{
  return &unk_270BC0F78;
}

void *type metadata accessor for ImageFormatEnvelope()
{
  return &unk_270BC1630;
}

unint64_t lazy protocol witness table accessor for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for StreamingRequestPayload.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F87D684);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ImageFormatEnvelope.CodingKeys()
{
  return &unk_270BC1560;
}

void *type metadata accessor for ImageFormatEnvelope.PngCodingKeys()
{
  return &unk_270BC1610;
}

void *type metadata accessor for ImageFormatEnvelope.JpgCodingKeys()
{
  return &unk_270BC15F0;
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v29 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v30 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v31 = v3;
      unint64_t v9 = v8 | (v3 << 6);
      goto LABEL_24;
    }
    int64_t v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v10 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v10);
    int64_t v12 = v3 + 1;
    if (!v11)
    {
      int64_t v12 = v3 + 2;
      if (v3 + 2 >= v30) {
        return 1;
      }
      unint64_t v11 = *(void *)(v29 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v3 + 3;
        if (v3 + 3 >= v30) {
          return 1;
        }
        unint64_t v11 = *(void *)(v29 + 8 * v12);
        if (!v11) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v11 - 1) & v11;
    int64_t v31 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_24:
    uint64_t v14 = result;
    int v15 = (uint64_t *)(*(void *)(result + 48) + 16 * v9);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v20 = v18 & ~v19;
    if (((*(void *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
      goto LABEL_39;
    }
    uint64_t v21 = *(void *)(a2 + 48);
    uint64_t v22 = (void *)(v21 + 16 * v20);
    BOOL v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v24 = ~v19;
      for (unint64_t i = v20 + 1; ; unint64_t i = v26 + 1)
      {
        uint64_t v26 = i & v24;
        if (((*(void *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0) {
          break;
        }
        uint64_t v27 = (void *)(v21 + 16 * v26);
        BOOL v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_7;
        }
      }
LABEL_39:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    unint64_t result = v14;
    int64_t v3 = v31;
  }
  uint64_t v13 = v3 + 4;
  if (v3 + 4 >= v30) {
    return 1;
  }
  unint64_t v11 = *(void *)(v29 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v3 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_23;
    }
  }
LABEL_43:
  __break(1u);
  return result;
}

void SamplingParameters.strategy.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t SamplingParameters.strategy.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)uint64_t v1 = *(void *)result;
  *(unsigned char *)(v1 + 8) = v2;
  return result;
}

uint64_t (*SamplingParameters.strategy.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SamplingParameters.temperature.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t SamplingParameters.temperature.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*SamplingParameters.temperature.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SamplingParameters.frequencyPenalty.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t SamplingParameters.frequencyPenalty.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 32) = result;
  *(unsigned char *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*SamplingParameters.frequencyPenalty.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SamplingParameters.lengthPenalty.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t SamplingParameters.lengthPenalty.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 48) = result;
  *(unsigned char *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t (*SamplingParameters.lengthPenalty.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SamplingParameters.maximumTokens.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t SamplingParameters.maximumTokens.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 64) = result;
  *(unsigned char *)(v2 + 72) = a2 & 1;
  return result;
}

uint64_t (*SamplingParameters.maximumTokens.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SamplingParameters.stopSequences.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SamplingParameters.stopSequences.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 80) = a1;
  return result;
}

uint64_t (*SamplingParameters.stopSequences.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SamplingParameters.randomSeed.getter()
{
  return *(void *)(v0 + 88);
}

uint64_t SamplingParameters.randomSeed.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 88) = result;
  *(unsigned char *)(v2 + 96) = a2 & 1;
  return result;
}

uint64_t (*SamplingParameters.randomSeed.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SamplingParameters.timeout.getter()
{
  return *(void *)(v0 + 104);
}

uint64_t SamplingParameters.timeout.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 104) = result;
  *(unsigned char *)(v2 + 112) = a2 & 1;
  return result;
}

uint64_t (*SamplingParameters.timeout.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SamplingParameters.promptLookupDraftSteps.getter()
{
  return *(void *)(v0 + 120);
}

uint64_t SamplingParameters.promptLookupDraftSteps.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 120) = result;
  *(unsigned char *)(v2 + 128) = a2 & 1;
  return result;
}

uint64_t (*SamplingParameters.promptLookupDraftSteps.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SamplingParameters.speculativeSampling.getter()
{
  return *(unsigned __int8 *)(v0 + 129);
}

uint64_t SamplingParameters.speculativeSampling.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 129) = result;
  return result;
}

uint64_t (*SamplingParameters.speculativeSampling.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SamplingParameters.tokenHealing.getter()
{
  return *(unsigned __int8 *)(v0 + 130);
}

uint64_t SamplingParameters.tokenHealing.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 130) = result;
  return result;
}

uint64_t (*SamplingParameters.tokenHealing.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SamplingParameters.init(strategy:temperature:frequencyPenalty:lengthPenalty:maximumTokens:stopSequences:randomSeed:timeout:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12, char a13, double a14, char a15)
{
  uint64_t v16 = a6;
  double v20 = a14;
  uint64_t v33 = *a1;
  char v21 = *((unsigned char *)a1 + 8);
  if (a15)
  {
    swift_bridgeObjectRetain();
    char v28 = 1;
  }
  else if (a14 <= 0.0 || a14 > 86400.0)
  {
    uint64_t v23 = one-time initialization token for generation;
    swift_bridgeObjectRetain();
    if (v23 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Log.generation);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t type = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, type))
    {
      uint64_t v30 = a8;
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_25F79F000, v25, type, "Passed in timeout: %f is outside of reasonable bounds (0, 86400]. Ignoring passed in timeout", v26, 0xCu);
      uint64_t v27 = v26;
      a8 = v30;
      MEMORY[0x261201C80](v27, -1, -1);
    }

    double v20 = 0.0;
    char v28 = 1;
    uint64_t v16 = a6;
  }
  else
  {
    swift_bridgeObjectRetain();
    char v28 = 0;
  }
  *(void *)a9 = v33;
  *(unsigned char *)(a9 + 8) = v21;
  *(void *)(a9 + 16) = a2;
  *(unsigned char *)(a9 + 24) = a3 & 1;
  *(void *)(a9 + 32) = a4;
  *(unsigned char *)(a9 + 40) = a5 & 1;
  *(void *)(a9 + 48) = v16;
  *(unsigned char *)(a9 + 56) = a7 & 1;
  *(void *)(a9 + 64) = a8;
  *(unsigned char *)(a9 + 72) = a10 & 1;
  *(void *)(a9 + 80) = a11;
  *(void *)(a9 + 88) = a12;
  *(unsigned char *)(a9 + 96) = a13 & 1;
  *(double *)(a9 + 104) = v20;
  *(unsigned char *)(a9 + 112) = v28;
  *(void *)(a9 + 120) = 0;
  *(unsigned char *)(a9 + 128) = 1;
  *(_WORD *)(a9 + 129) = 514;
  return swift_bridgeObjectRelease();
}

void SamplingParameters.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  int v4 = *(unsigned __int8 *)(v2 + 8);
  Swift::UInt64 v5 = *(void *)(v2 + 16);
  char v6 = *(unsigned char *)(v2 + 24);
  Swift::UInt64 v7 = *(void *)(v2 + 32);
  int v8 = *(unsigned __int8 *)(v2 + 40);
  Swift::UInt64 v25 = *(void *)(v2 + 48);
  Swift::UInt v26 = *(void *)(v2 + 64);
  int v29 = *(unsigned __int8 *)(v2 + 56);
  int v30 = *(unsigned __int8 *)(v2 + 72);
  uint64_t v9 = *(void *)(v2 + 80);
  Swift::UInt v27 = *(void *)(v2 + 88);
  Swift::UInt64 v28 = *(void *)(v2 + 104);
  int v31 = *(unsigned __int8 *)(v2 + 96);
  int v32 = *(unsigned __int8 *)(v2 + 112);
  Swift::UInt v10 = *(void *)(v2 + 120);
  int v33 = *(unsigned __int8 *)(v2 + 128);
  int v11 = *(unsigned __int8 *)(v2 + 129);
  int v12 = *(unsigned __int8 *)(v2 + 130);
  if (v4 == 255)
  {
    Hasher._combine(_:)(0);
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    Swift::UInt v24 = *(void *)(v2 + 120);
    int v15 = *(unsigned __int8 *)(v2 + 129);
    int v16 = *(unsigned __int8 *)(v2 + 130);
    Swift::UInt v17 = *(void *)v2;
    Hasher._combine(_:)(1u);
    if (v4)
    {
      if (v4 == 1)
      {
        Hasher._combine(_:)(2uLL);
        Swift::UInt v18 = v17;
      }
      else
      {
        Swift::UInt v18 = 0;
      }
      Hasher._combine(_:)(v18);
    }
    else
    {
      Hasher._combine(_:)(1uLL);
      if ((v17 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v19 = v17;
      }
      else {
        Swift::UInt64 v19 = 0;
      }
      Hasher._combine(_:)(v19);
    }
    int v12 = v16;
    int v11 = v15;
    Swift::UInt v10 = v24;
    if (v6)
    {
LABEL_3:
      Hasher._combine(_:)(0);
      if (!v8) {
        goto LABEL_4;
      }
LABEL_27:
      Hasher._combine(_:)(0);
      if (!v29) {
        goto LABEL_8;
      }
      goto LABEL_28;
    }
  }
  Hasher._combine(_:)(1u);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v20 = v5;
  }
  else {
    Swift::UInt64 v20 = 0;
  }
  Hasher._combine(_:)(v20);
  if (v8) {
    goto LABEL_27;
  }
LABEL_4:
  Hasher._combine(_:)(1u);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v13 = v7;
  }
  else {
    Swift::UInt64 v13 = 0;
  }
  Hasher._combine(_:)(v13);
  if (!v29)
  {
LABEL_8:
    Hasher._combine(_:)(1u);
    if ((v25 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v14 = v25;
    }
    else {
      Swift::UInt64 v14 = 0;
    }
    Hasher._combine(_:)(v14);
    if (!v30) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  Hasher._combine(_:)(0);
  if (!v30)
  {
LABEL_12:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v26);
    goto LABEL_30;
  }
LABEL_29:
  Hasher._combine(_:)(0);
LABEL_30:
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v9);
  swift_bridgeObjectRelease();
  if (v31)
  {
    Hasher._combine(_:)(0);
    if (!v32) {
      goto LABEL_32;
    }
LABEL_39:
    Hasher._combine(_:)(0);
    if (!v33) {
      goto LABEL_36;
    }
LABEL_40:
    Hasher._combine(_:)(0);
    if (v11 != 2) {
      goto LABEL_37;
    }
    goto LABEL_41;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v27);
  if (v32) {
    goto LABEL_39;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  if ((v28 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v21 = v28;
  }
  else {
    Swift::UInt64 v21 = 0;
  }
  Hasher._combine(_:)(v21);
  if (v33) {
    goto LABEL_40;
  }
LABEL_36:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v10);
  if (v11 != 2)
  {
LABEL_37:
    Swift::UInt8 v22 = v11 & 1;
    Hasher._combine(_:)(1u);
    goto LABEL_42;
  }
LABEL_41:
  Swift::UInt8 v22 = 0;
LABEL_42:
  Hasher._combine(_:)(v22);
  if (v12 == 2)
  {
    Swift::UInt8 v23 = 0;
  }
  else
  {
    Swift::UInt8 v23 = v12 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v23);
}

Swift::Int SamplingParameters.hashValue.getter()
{
  Hasher.init(_seed:)();
  SamplingParameters.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SamplingParameters()
{
  Hasher.init(_seed:)();
  SamplingParameters.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SamplingParameters()
{
  Hasher.init(_seed:)();
  SamplingParameters.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t specialized static SamplingParameters.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 8);
  double v5 = *(double *)(a1 + 16);
  char v6 = *(unsigned char *)(a1 + 24);
  double v7 = *(double *)(a1 + 32);
  char v8 = *(unsigned char *)(a1 + 40);
  double v9 = *(double *)(a1 + 48);
  char v10 = *(unsigned char *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  char v12 = *(unsigned char *)(a1 + 72);
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v14 = *(void *)(a1 + 88);
  char v15 = *(unsigned char *)(a1 + 96);
  double v16 = *(double *)(a1 + 104);
  char v17 = *(unsigned char *)(a1 + 112);
  uint64_t v18 = *(void *)(a1 + 120);
  char v19 = *(unsigned char *)(a1 + 128);
  int v20 = *(unsigned __int8 *)(a1 + 129);
  int v21 = *(unsigned __int8 *)(a1 + 130);
  int v22 = *(unsigned __int8 *)(a2 + 8);
  double v23 = *(double *)(a2 + 16);
  int v24 = *(unsigned __int8 *)(a2 + 24);
  double v25 = *(double *)(a2 + 32);
  int v26 = *(unsigned __int8 *)(a2 + 40);
  double v27 = *(double *)(a2 + 48);
  int v28 = *(unsigned __int8 *)(a2 + 56);
  uint64_t v29 = *(void *)(a2 + 64);
  int v30 = *(unsigned __int8 *)(a2 + 72);
  uint64_t v31 = *(void *)(a2 + 80);
  uint64_t v32 = *(void *)(a2 + 88);
  int v33 = *(unsigned __int8 *)(a2 + 96);
  double v34 = *(double *)(a2 + 104);
  unsigned int v65 = *(unsigned __int8 *)(a2 + 112);
  uint64_t v35 = *(void *)(a2 + 120);
  int v36 = *(unsigned __int8 *)(a2 + 128);
  int v37 = *(unsigned __int8 *)(a2 + 129);
  int v38 = *(unsigned __int8 *)(a2 + 130);
  if (v4 == 255)
  {
    if (v22 != 255) {
      return 0;
    }
    goto LABEL_15;
  }
  if (v22 == 255) {
    return 0;
  }
  uint64_t v63 = *(void *)(a2 + 120);
  int v39 = *(unsigned __int8 *)(a2 + 128);
  char v40 = *(unsigned char *)(a1 + 112);
  char v41 = *(unsigned char *)(a1 + 128);
  int v42 = *(unsigned __int8 *)(a2 + 129);
  uint64_t v43 = *(void *)(a1 + 120);
  int v44 = *(unsigned __int8 *)(a1 + 129);
  double v45 = *(double *)a1;
  double v46 = *(double *)a2;
  if (!v4)
  {
    uint64_t v47 = 0;
    if (v22) {
      return v47;
    }
    BOOL v48 = v45 == v46;
LABEL_11:
    int v20 = v44;
    uint64_t v18 = v43;
    int v37 = v42;
    char v19 = v41;
    char v17 = v40;
    int v36 = v39;
    uint64_t v35 = v63;
    if (!v48) {
      return v47;
    }
    goto LABEL_15;
  }
  if (v4 == 1)
  {
    uint64_t v47 = 0;
    if (v22 != 1) {
      return v47;
    }
    BOOL v48 = *(void *)&v45 == *(void *)&v46;
    goto LABEL_11;
  }
  uint64_t v47 = 0;
  if (v22 != 2) {
    return v47;
  }
  int v20 = v44;
  uint64_t v18 = v43;
  int v37 = v42;
  char v19 = v41;
  char v17 = v40;
  int v36 = v39;
  uint64_t v35 = v63;
  if (v46 != 0.0) {
    return v47;
  }
LABEL_15:
  if (v6)
  {
    if (!v24) {
      return 0;
    }
  }
  else
  {
    if (v5 == v23) {
      char v49 = v24;
    }
    else {
      char v49 = 1;
    }
    if (v49) {
      return 0;
    }
  }
  if (v8)
  {
    if (!v26) {
      return 0;
    }
  }
  else
  {
    if (v7 == v25) {
      char v50 = v26;
    }
    else {
      char v50 = 1;
    }
    if (v50) {
      return 0;
    }
  }
  if (v10)
  {
    if (!v28) {
      return 0;
    }
  }
  else
  {
    if (v9 == v27) {
      char v51 = v28;
    }
    else {
      char v51 = 1;
    }
    if (v51) {
      return 0;
    }
  }
  if (v12)
  {
    if (!v30) {
      return 0;
    }
  }
  else
  {
    if (v11 == v29) {
      char v52 = v30;
    }
    else {
      char v52 = 1;
    }
    if (v52) {
      return 0;
    }
  }
  int v62 = v37;
  uint64_t v53 = v18;
  int v54 = v20;
  int v64 = v21;
  if ((specialized static Set.== infix(_:_:)(v13, v31) & 1) == 0) {
    return 0;
  }
  if (v15)
  {
    int v55 = v64;
    int v56 = v54;
    if (!v33) {
      return 0;
    }
  }
  else
  {
    if (v14 == v32) {
      char v57 = v33;
    }
    else {
      char v57 = 1;
    }
    int v55 = v64;
    int v56 = v54;
    if (v57) {
      return 0;
    }
  }
  if (v17)
  {
    uint64_t v47 = v65;
    if (!v65) {
      return v47;
    }
  }
  else
  {
    char v58 = v65;
    if (v16 != v34) {
      char v58 = 1;
    }
    if (v58) {
      return 0;
    }
  }
  if (v19)
  {
    if (!v36) {
      return 0;
    }
  }
  else
  {
    if (v53 == v35) {
      char v59 = v36;
    }
    else {
      char v59 = 1;
    }
    if (v59) {
      return 0;
    }
  }
  if (v56 == 2)
  {
    if (v62 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v47 = 0;
    BOOL v60 = (v56 & 1) == 0;
    if (v62 == 2 || ((v60 ^ v62) & 1) == 0) {
      return v47;
    }
  }
  if (v55 == 2)
  {
    if (v38 != 2) {
      return 0;
    }
  }
  else if (v38 == 2 || ((((v55 & 1) == 0) ^ v38) & 1) == 0)
  {
    return 0;
  }
  return 1;
}

unint64_t lazy protocol witness table accessor for type SamplingParameters and conformance SamplingParameters()
{
  unint64_t result = lazy protocol witness table cache variable for type SamplingParameters and conformance SamplingParameters;
  if (!lazy protocol witness table cache variable for type SamplingParameters and conformance SamplingParameters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingParameters and conformance SamplingParameters);
  }
  return result;
}

uint64_t initializeWithCopy for SamplingParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v3;
  uint64_t v4 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v4;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SamplingParameters(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a2[4];
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = a2[6];
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = a2[8];
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 80) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[11];
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(void *)(a1 + 88) = v9;
  uint64_t v10 = a2[13];
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  *(void *)(a1 + 104) = v10;
  uint64_t v11 = a2[15];
  *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
  *(void *)(a1 + 120) = v11;
  *(unsigned char *)(a1 + 129) = *((unsigned char *)a2 + 129);
  *(unsigned char *)(a1 + 130) = *((unsigned char *)a2 + 130);
  return a1;
}

__n128 __swift_memcpy131_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 127) = *(_DWORD *)(a2 + 127);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for SamplingParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  return a1;
}

uint64_t getEnumTagSinglePayload for SamplingParameters(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 131)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SamplingParameters(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 130) = 0;
    *(_WORD *)(result + 128) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 131) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 80) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 131) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SamplingParameters()
{
  return &type metadata for SamplingParameters;
}

void static SamplingStrategy.argmax()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 2;
}

void static SamplingStrategy.nucleusSampling(threshold:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t static SamplingStrategy.topK(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = 1;
  return result;
}

void SamplingStrategy.Choice.hash(into:)()
{
  Swift::UInt v1 = *(void *)v0;
  if (*(unsigned char *)(v0 + 8))
  {
    if (*(unsigned char *)(v0 + 8) == 1)
    {
      Hasher._combine(_:)(2uLL);
      Swift::UInt v2 = v1;
    }
    else
    {
      Swift::UInt v2 = 0;
    }
    Hasher._combine(_:)(v2);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v3 = v1;
    }
    else {
      Swift::UInt64 v3 = 0;
    }
    Hasher._combine(_:)(v3);
  }
}

BOOL static SamplingStrategy.Choice.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(unsigned char *)(a1 + 8)) {
    return !*(unsigned char *)(a2 + 8) && v2 == v3;
  }
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    if (v4 == 1) {
      return *(void *)&v2 == *(void *)&v3;
    }
    return 0;
  }
  return v4 == 2 && *(void *)&v3 == 0;
}

Swift::Int SamplingStrategy.Choice.hashValue.getter()
{
  Swift::UInt v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2)
  {
    if (v2 == 1)
    {
      Hasher._combine(_:)(2uLL);
      Swift::UInt v3 = v1;
    }
    else
    {
      Swift::UInt v3 = 0;
    }
    Hasher._combine(_:)(v3);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v4 = v1;
    }
    else {
      Swift::UInt64 v4 = 0;
    }
    Hasher._combine(_:)(v4);
  }
  return Hasher._finalize()();
}

void SamplingStrategy.choice.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
}

void SamplingStrategy.hash(into:)()
{
  Swift::UInt v1 = *(void *)v0;
  if (*(unsigned char *)(v0 + 8))
  {
    if (*(unsigned char *)(v0 + 8) == 1)
    {
      Hasher._combine(_:)(2uLL);
      Swift::UInt v2 = v1;
    }
    else
    {
      Swift::UInt v2 = 0;
    }
    Hasher._combine(_:)(v2);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v3 = v1;
    }
    else {
      Swift::UInt64 v3 = 0;
    }
    Hasher._combine(_:)(v3);
  }
}

BOOL static SamplingStrategy.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(unsigned char *)(a1 + 8)) {
    return !*(unsigned char *)(a2 + 8) && v2 == v3;
  }
  if (*(unsigned char *)(a1 + 8) != 1) {
    return v4 == 2 && *(void *)&v3 == 0;
  }
  return v4 == 1 && *(void *)&v2 == *(void *)&v3;
}

Swift::Int SamplingStrategy.hashValue.getter()
{
  Swift::UInt v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2)
  {
    if (v2 == 1)
    {
      Hasher._combine(_:)(2uLL);
      Swift::UInt v3 = v1;
    }
    else
    {
      Swift::UInt v3 = 0;
    }
    Hasher._combine(_:)(v3);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v4 = v1;
    }
    else {
      Swift::UInt64 v4 = 0;
    }
    Hasher._combine(_:)(v4);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SamplingStrategy()
{
  Swift::UInt v1 = *(void *)v0;
  if (*(unsigned char *)(v0 + 8))
  {
    if (*(unsigned char *)(v0 + 8) == 1)
    {
      Hasher._combine(_:)(2uLL);
      Swift::UInt v2 = v1;
    }
    else
    {
      Swift::UInt v2 = 0;
    }
    Hasher._combine(_:)(v2);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v3 = v1;
    }
    else {
      Swift::UInt64 v3 = 0;
    }
    Hasher._combine(_:)(v3);
  }
}

unint64_t lazy protocol witness table accessor for type SamplingStrategy.Choice and conformance SamplingStrategy.Choice()
{
  unint64_t result = lazy protocol witness table cache variable for type SamplingStrategy.Choice and conformance SamplingStrategy.Choice;
  if (!lazy protocol witness table cache variable for type SamplingStrategy.Choice and conformance SamplingStrategy.Choice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategy.Choice and conformance SamplingStrategy.Choice);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SamplingStrategy and conformance SamplingStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type SamplingStrategy and conformance SamplingStrategy;
  if (!lazy protocol witness table cache variable for type SamplingStrategy and conformance SamplingStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategy and conformance SamplingStrategy);
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SamplingStrategy(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(unsigned char *)(a1 + 8)) {
    return !*(unsigned char *)(a2 + 8) && v2 == v3;
  }
  if (*(unsigned char *)(a1 + 8) != 1) {
    return v4 == 2 && *(void *)&v3 == 0;
  }
  return v4 == 1 && *(void *)&v2 == *(void *)&v3;
}

ValueMetadata *type metadata accessor for SamplingStrategy()
{
  return &type metadata for SamplingStrategy;
}

ValueMetadata *type metadata accessor for SamplingStrategy.Choice()
{
  return &type metadata for SamplingStrategy.Choice;
}

uint64_t static WireFormat.decode<A>(_:from:)()
{
  if (one-time initialization token for decoder != -1) {
    swift_once();
  }
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)();
}

uint64_t static WireFormat.encode<A>(_:)()
{
  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t static Serialization.encode<A>(_:)()
{
  return static WireFormat.encode<A>(_:)();
}

uint64_t static Serialization.decode<A>(_:from:)()
{
  return static WireFormat.decode<A>(_:from:)();
}

ValueMetadata *type metadata accessor for Serialization()
{
  return &type metadata for Serialization;
}

uint64_t one-time initialization function for encoder(uint64_t a1)
{
  return one-time initialization function for encoder(a1, MEMORY[0x263F061E0], MEMORY[0x263F061D8], &static WireFormat.encoder);
}

uint64_t one-time initialization function for decoder(uint64_t a1)
{
  return one-time initialization function for encoder(a1, MEMORY[0x263F06128], MEMORY[0x263F06120], &static WireFormat.decoder);
}

uint64_t one-time initialization function for encoder(uint64_t a1, void (*a2)(void), uint64_t (*a3)(void), uint64_t *a4)
{
  a2(0);
  swift_allocObject();
  uint64_t result = a3();
  *a4 = result;
  return result;
}

uint64_t SessionConfiguration.identifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SessionConfiguration.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *double v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*SessionConfiguration.identifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SessionConfiguration.prefferedModelBundles.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SessionConfiguration.prefferedModelBundles.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*SessionConfiguration.prefferedModelBundles.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SessionConfiguration.handlesSensitiveData.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t SessionConfiguration.handlesSensitiveData.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 24) = result;
  return result;
}

uint64_t (*SessionConfiguration.handlesSensitiveData.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t (*SessionConfiguration.cachePolicy.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SessionConfiguration.useCaseID.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SessionConfiguration.useCaseID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*SessionConfiguration.useCaseID.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SessionConfiguration.groupID.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SessionConfiguration.groupID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*SessionConfiguration.groupID.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SessionConfiguration.onBehalfOfPID.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t SessionConfiguration.onBehalfOfPID.setter(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

uint64_t (*SessionConfiguration.onBehalfOfPID.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SessionConfiguration.parentOfOnBehalfOfPid.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t SessionConfiguration.parentOfOnBehalfOfPid.setter(uint64_t result)
{
  *(void *)(v1 + 72) = result;
  return result;
}

uint64_t (*SessionConfiguration.parentOfOnBehalfOfPid.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void __swiftcall SessionConfiguration.init(identifier:useCaseID:preferredModelBundles:handlesSensitiveData:cachePolicy:onBehalfOf:parentOfOnBehalfOf:)(TokenGeneration::SessionConfiguration *__return_ptr retstr, Swift::String identifier, Swift::String useCaseID, Swift::OpaquePointer preferredModelBundles, Swift::Bool handlesSensitiveData, Swift::Int_optional onBehalfOf, Swift::Int_optional parentOfOnBehalfOf)
{
  v15.is_nil = parentOfOnBehalfOf.is_nil;
  LOBYTE(v15.value) = parentOfOnBehalfOf.value & 1;
  v14.is_nil = onBehalfOf.is_nil;
  SessionConfiguration.init(identifier:groupID:useCaseID:preferredModelBundles:handlesSensitiveData:cachePolicy:onBehalfOf:parentOfOnBehalfOf:)(&v16, identifier, (Swift::String_optional)0, useCaseID, preferredModelBundles, handlesSensitiveData, v14, v15);
  Swift::Bool v8 = v16.handlesSensitiveData;
  uint64_t countAndFlagsBits = v16.useCaseID._countAndFlagsBits;
  object = v16.useCaseID._object;
  long long v11 = *(_OWORD *)&v16.identifier._object;
  Swift::String_optional groupID = v16.groupID;
  long long v13 = *(_OWORD *)&v16.onBehalfOfPID;
  retstr->identifier._uint64_t countAndFlagsBits = v16.identifier._countAndFlagsBits;
  *(_OWORD *)&retstr->identifier._object = v11;
  retstr->handlesSensitiveData = v8;
  retstr->useCaseID._uint64_t countAndFlagsBits = countAndFlagsBits;
  retstr->useCaseID._object = object;
  retstr->Swift::String_optional groupID = groupID;
  *(_OWORD *)&retstr->onBehalfOfPID = v13;
}

void __swiftcall SessionConfiguration.init(identifier:groupID:useCaseID:preferredModelBundles:handlesSensitiveData:cachePolicy:onBehalfOf:parentOfOnBehalfOf:)(TokenGeneration::SessionConfiguration *__return_ptr retstr, Swift::String identifier, Swift::String_optional groupID, Swift::String useCaseID, Swift::OpaquePointer preferredModelBundles, Swift::Bool handlesSensitiveData, Swift::Int_optional onBehalfOf, Swift::Int_optional parentOfOnBehalfOf)
{
  Swift::Bool v8 = handlesSensitiveData;
  object = useCaseID._object;
  uint64_t countAndFlagsBits = useCaseID._countAndFlagsBits;
  uint64_t v21 = groupID.value._countAndFlagsBits;
  long long v11 = groupID.value._object;
  char v12 = identifier._object;
  uint64_t v13 = identifier._countAndFlagsBits;
  if (parentOfOnBehalfOf.value)
  {
    TokenGeneration::SessionConfiguration v16 = self;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v17 = objc_msgSend(v16, sel_processInfo);
    LODWORD(v16) = objc_msgSend(v17, sel_processIdentifier);

    Swift::Int v15 = (int)v16;
    Swift::Bool v8 = handlesSensitiveData;
  }
  else
  {
    Swift::Int v15 = *(void *)&onBehalfOf.is_nil;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  if (v23) {
    Swift::Int v18 = 0;
  }
  else {
    Swift::Int v18 = *(void *)&parentOfOnBehalfOf.is_nil;
  }
  retstr->identifier._uint64_t countAndFlagsBits = v13;
  retstr->identifier._object = v12;
  retstr->prefferedModelBundles = preferredModelBundles;
  retstr->handlesSensitiveData = v8;
  retstr->useCaseID._uint64_t countAndFlagsBits = countAndFlagsBits;
  retstr->useCaseID._object = object;
  retstr->groupID.value._uint64_t countAndFlagsBits = v21;
  retstr->groupID.value._object = v11;
  retstr->onBehalfOfPID = v15;
  retstr->parentOfOnBehalfOfPid = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void __swiftcall SessionConfiguration.init(identifier:useCaseID:preferredModelBundles:handlesSensitiveData:cachePolicy:onBehalfOf:)(TokenGeneration::SessionConfiguration *__return_ptr retstr, Swift::String identifier, Swift::String useCaseID, Swift::OpaquePointer preferredModelBundles, Swift::Bool handlesSensitiveData, Swift::Int_optional onBehalfOf)
{
  object = useCaseID._object;
  uint64_t countAndFlagsBits = useCaseID._countAndFlagsBits;
  uint64_t v10 = identifier._object;
  uint64_t v11 = identifier._countAndFlagsBits;
  if (v17)
  {
    Swift::Int_optional v14 = self;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v15 = objc_msgSend(v14, sel_processInfo);
    signed int v16 = objc_msgSend(v15, sel_processIdentifier);

    Swift::Int v13 = v16;
  }
  else
  {
    Swift::Int v13 = *(void *)&onBehalfOf.is_nil;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  retstr->identifier._uint64_t countAndFlagsBits = v11;
  retstr->identifier._object = v10;
  retstr->prefferedModelBundles = preferredModelBundles;
  retstr->handlesSensitiveData = handlesSensitiveData;
  retstr->useCaseID._uint64_t countAndFlagsBits = countAndFlagsBits;
  retstr->useCaseID._object = object;
  retstr->groupID.value._uint64_t countAndFlagsBits = 0;
  retstr->groupID.value._object = 0;
  retstr->onBehalfOfPID = v13;
  retstr->parentOfOnBehalfOfPid = 0;
}

void __swiftcall SessionConfiguration.init(identifier:preferredModelBundles:handlesSensitiveData:cachePolicy:)(TokenGeneration::SessionConfiguration *__return_ptr retstr, Swift::String identifier, Swift::OpaquePointer preferredModelBundles, Swift::Bool handlesSensitiveData)
{
  object = identifier._object;
  uint64_t countAndFlagsBits = identifier._countAndFlagsBits;
  uint64_t v9 = self;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v10 = objc_msgSend(v9, sel_processInfo);
  signed int v11 = objc_msgSend(v10, sel_processIdentifier);

  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  retstr->identifier._uint64_t countAndFlagsBits = countAndFlagsBits;
  retstr->identifier._object = object;
  retstr->prefferedModelBundles = preferredModelBundles;
  retstr->handlesSensitiveData = handlesSensitiveData;
  retstr->useCaseID._uint64_t countAndFlagsBits = 0x6E776F6E6B6E753CLL;
  retstr->useCaseID._object = (void *)0xE90000000000003ELL;
  retstr->groupID.value._uint64_t countAndFlagsBits = 0;
  retstr->groupID.value._object = 0;
  retstr->onBehalfOfPID = v11;
  retstr->parentOfOnBehalfOfPid = 0;
}

void SessionConfiguration.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  Swift::UInt8 v4 = *(unsigned char *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 56);
  Swift::UInt v6 = *(void *)(v1 + 64);
  Swift::UInt v7 = *(void *)(v1 + 72);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v4);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
}

Swift::Int SessionConfiguration.hashValue.getter()
{
  char v1 = *((unsigned char *)v0 + 24);
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v7 = *v0;
  long long v8 = *(_OWORD *)(v0 + 1);
  char v9 = v1;
  uint64_t v10 = v2;
  uint64_t v11 = v3;
  long long v4 = *((_OWORD *)v0 + 4);
  long long v12 = *((_OWORD *)v0 + 3);
  long long v13 = v4;
  Hasher.init(_seed:)();
  SessionConfiguration.hash(into:)((uint64_t)v6);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SessionConfiguration()
{
  char v1 = *((unsigned char *)v0 + 24);
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v7 = *v0;
  long long v8 = *(_OWORD *)(v0 + 1);
  char v9 = v1;
  uint64_t v10 = v2;
  uint64_t v11 = v3;
  long long v4 = *((_OWORD *)v0 + 4);
  long long v12 = *((_OWORD *)v0 + 3);
  long long v13 = v4;
  Hasher.init(_seed:)();
  SessionConfiguration.hash(into:)((uint64_t)v6);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SessionConfiguration()
{
  char v1 = *((unsigned char *)v0 + 24);
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v7 = *v0;
  long long v8 = *(_OWORD *)(v0 + 1);
  char v9 = v1;
  uint64_t v10 = v2;
  uint64_t v11 = v3;
  long long v4 = *((_OWORD *)v0 + 4);
  long long v12 = *((_OWORD *)v0 + 3);
  long long v13 = v4;
  Hasher.init(_seed:)();
  SessionConfiguration.hash(into:)((uint64_t)v6);
  return Hasher._finalize()();
}

BOOL specialized static SessionConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a2 + 16);
  int v8 = *(unsigned __int8 *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v19 = *(void *)(a2 + 48);
  uint64_t v20 = *(void *)(a1 + 48);
  uint64_t v21 = *(void *)(a2 + 64);
  uint64_t v22 = *(void *)(a1 + 64);
  uint64_t v17 = *(void *)(a2 + 72);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    || (char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v12 & 1) != 0))
  {
    char v14 = specialized static Array<A>.== infix(_:_:)(v2, v7);
    BOOL result = 0;
    if ((v14 & 1) != 0 && ((v3 ^ v8) & 1) == 0)
    {
      if (v4 == v9 && v5 == v10 || (char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v15 & 1) != 0))
      {
        if (v6)
        {
          if (!v11) {
            return 0;
          }
          if (v20 == v19 && v6 == v11)
          {
            if (v22 != v21) {
              return 0;
            }
            return v18 == v17;
          }
          char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
          BOOL result = 0;
          if ((v16 & 1) == 0) {
            return result;
          }
LABEL_18:
          if (v22 != v21) {
            return result;
          }
          return v18 == v17;
        }
        BOOL result = 0;
        if (!v11) {
          goto LABEL_18;
        }
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SessionConfiguration and conformance SessionConfiguration()
{
  unint64_t result = lazy protocol witness table cache variable for type SessionConfiguration and conformance SessionConfiguration;
  if (!lazy protocol witness table cache variable for type SessionConfiguration and conformance SessionConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SessionConfiguration and conformance SessionConfiguration);
  }
  return result;
}

uint64_t destroy for SessionConfiguration()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SessionConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SessionConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for SessionConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for SessionConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SessionConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SessionConfiguration()
{
  return &type metadata for SessionConfiguration;
}

uint64_t _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v9);
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v9, &demangling cache variable for type metadata for TaskPriority?);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
LABEL_6:
  uint64_t v15 = *v4;
  char v16 = (void *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    char v16 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t withTimeout<A>(timeout:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 40) = a5;
  *(void *)(v6 + 48) = a6;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = a4;
  *(unsigned char *)(v6 + 144) = a3;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 56) = *(void *)(a6 - 8);
  *(void *)(v6 + 64) = swift_task_alloc();
  *(void *)(v6 + 72) = swift_getTupleTypeMetadata2();
  *(void *)(v6 + 80) = swift_task_alloc();
  return MEMORY[0x270FA2498](withTimeout<A>(timeout:_:), 0, 0);
}

uint64_t withTimeout<A>(timeout:_:)()
{
  if (*(unsigned char *)(v0 + 144))
  {
    uint64_t v7 = *(int **)(v0 + 32);
    *(void *)(v0 + 112) = mach_absolute_time();
    uint64_t v11 = (uint64_t (*)(uint64_t))((char *)v7 + *v7);
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v8;
    *uint64_t v8 = v0;
    v8[1] = withTimeout<A>(timeout:_:);
    uint64_t v9 = *(void *)(v0 + 64);
    return v11(v9);
  }
  else
  {
    uint64_t v1 = *(void *)(v0 + 48);
    uint64_t v2 = *(void *)(v0 + 24);
    uint64_t v3 = swift_task_alloc();
    *(void *)(v0 + 88) = v3;
    long long v4 = *(_OWORD *)(v0 + 32);
    *(void *)(v3 + 16) = v1;
    *(_OWORD *)(v3 + 24) = v4;
    *(void *)(v3 + 40) = v2;
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v5;
    *uint64_t v5 = v0;
    v5[1] = withTimeout<A>(timeout:_:);
    uint64_t v6 = *(void *)(v0 + 80);
    return MEMORY[0x270FA22B8](v6);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = withTimeout<A>(timeout:_:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = withTimeout<A>(timeout:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  unint64_t v1;
  uint64_t (*v2)(__n128);
  __n128 v3;
  uint64_t v5;

  uint64_t v1 = *(void *)(v0[10] + *(int *)(v0[9] + 48));
  (*(void (**)(void))(v0[7] + 32))(v0[2]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(__n128))v0[1];
  v3.n128_u64[0] = v1;
  return v2(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = withTimeout<A>(timeout:_:);
  }
  else {
    uint64_t v2 = withTimeout<A>(timeout:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t (*v10)(__n128);
  uint64_t v12;

  uint64_t v3 = *(void *)(v0 + 112);
  (*(void (**)(void, void, void))(*(void *)(v0 + 56) + 16))(*(void *)(v0 + 16), *(void *)(v0 + 64), *(void *)(v0 + 48));
  long long v4 = mach_absolute_time();
  uint64_t v5 = v4 - v3;
  if (v4 < v3) {
    __break(1u);
  }
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v8 = *(void *)(v0 + 48);
  *(_DWORD *)(v0 + 140) = 0;
  *(_DWORD *)(v0 + 136) = 0;
  mach_timebase_info((mach_timebase_info_t)(v0 + 136));
  LODWORD(v2) = *(_DWORD *)(v0 + 136);
  LODWORD(v1) = *(_DWORD *)(v0 + 140);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(__n128))(v0 + 8);
  v9.n128_f64[0] = (double)v5 * (double)v2 / ((double)v1 * 1000000000.0);
  return v10(v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in withTimeout<A>(timeout:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  *(void *)(v6 + 64) = a5;
  *(double *)(v6 + 56) = a6;
  *(void *)(v6 + 40) = a3;
  *(void *)(v6 + 48) = a4;
  *(void *)(v6 + 24) = a1;
  *(void *)(v6 + 32) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeError?);
  *(void *)(v6 + 72) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for GenerativeError();
  *(void *)(v6 + 80) = v8;
  *(void *)(v6 + 88) = *(void *)(v8 - 8);
  *(void *)(v6 + 96) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  *(void *)(v6 + 104) = v9;
  *(void *)(v6 + 112) = *(void *)(v9 - 8);
  *(void *)(v6 + 120) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for GenerativeError.RuntimeError();
  *(void *)(v6 + 128) = v10;
  *(void *)(v6 + 136) = *(void *)(v10 - 8);
  *(void *)(v6 + 144) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for GenerativeError.ErrorType();
  *(void *)(v6 + 152) = v11;
  *(void *)(v6 + 160) = *(void *)(v11 - 8);
  *(void *)(v6 + 168) = swift_task_alloc();
  type metadata accessor for Optional();
  *(void *)(v6 + 176) = swift_task_alloc();
  *(void *)(v6 + 184) = *(void *)(a5 - 8);
  *(void *)(v6 + 192) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v6 + 200) = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in withTimeout<A>(timeout:_:), 0, 0);
}

uint64_t closure #1 in withTimeout<A>(timeout:_:)()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[7];
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  v0[26] = mach_absolute_time();
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  v7(v1, 1, 1, v6);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  _OWORD v8[4] = v2;
  v8[5] = v5;
  v8[6] = v4;
  swift_retain();
  v0[27] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v9 = type metadata accessor for ThrowingTaskGroup();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF(v1, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in withTimeout<A>(timeout:_:), (uint64_t)v8);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for TaskPriority?);
  v7(v1, 1, 1, v6);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = v2;
  v10[5] = v3;
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF(v1, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in withTimeout<A>(timeout:_:), (uint64_t)v10);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[28] = v11;
  void *v11 = v0;
  v11[1] = closure #1 in withTimeout<A>(timeout:_:);
  uint64_t v12 = v0[22];
  return MEMORY[0x270FA2048](v12, 0, 0, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in withTimeout<A>(timeout:_:);
  }
  else {
    uint64_t v2 = closure #1 in withTimeout<A>(timeout:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v24;

  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v1 + 176);
  uint64_t v4 = *(void *)(v1 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v4) == 1) {
LABEL_7:
  }
    __break(1u);
  uint64_t v5 = *(void *)(v1 + 208);
  uint64_t v6 = *(void *)(v1 + 192);
  uint64_t v7 = *(void *)(v1 + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v6, v3, v4);
  uint64_t v8 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v7, v6, v4);
  uint64_t v9 = mach_absolute_time();
  uint64_t v10 = v9 - v5;
  if (v9 < v5)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v11 = *(void *)(v1 + 192);
  uint64_t v12 = *(void *)(v1 + 184);
  uint64_t v13 = *(void *)(v1 + 64);
  uint64_t v15 = *(void *)(v1 + 24);
  uint64_t v14 = *(uint64_t **)(v1 + 32);
  *(_DWORD *)(v1 + 244) = 0;
  *(_DWORD *)(v1 + 240) = 0;
  mach_timebase_info((mach_timebase_info_t)(v1 + 240));
  LODWORD(v16) = *(_DWORD *)(v1 + 240);
  *(double *)&uint64_t v17 = (double)v16;
  uint64_t v18 = (double)v10 * *(double *)&v17;
  LODWORD(v17) = *(_DWORD *)(v1 + 244);
  uint64_t v19 = v18 / ((double)v17 * 1000000000.0);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  *(double *)(v15 + v8) = v19;
  uint64_t v20 = *v14;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  MEMORY[0x261200EC0](v20, v13, v21, MEMORY[0x263F8E4E0]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(void))(v1 + 8);
  return v22();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(void);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  *(void *)(v0 + 16) = *(void *)(v0 + 232);
  uint64_t v1 = *(void *)(v0 + 88);
  MEMORY[0x261201A80]();
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56);
  if (v2)
  {
    uint64_t v5 = *(void *)(v0 + 160);
    uint64_t v4 = *(void *)(v0 + 168);
    uint64_t v6 = *(void *)(v0 + 152);
    uint64_t v8 = *(void *)(v0 + 88);
    uint64_t v7 = *(void *)(v0 + 96);
    uint64_t v10 = *(void *)(v0 + 72);
    uint64_t v9 = *(void *)(v0 + 80);
    v3(v10, 0, 1, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v7, v10, v9);
    GenerativeError.type.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v5 + 88))(v4, v6) == *MEMORY[0x263F40B80])
    {
      uint64_t v11 = *(void *)(v0 + 168);
      uint64_t v12 = *(void *)(v0 + 144);
      uint64_t v13 = *(void *)(v0 + 128);
      uint64_t v14 = *(void *)(v0 + 136);
      char v16 = *(void *)(v0 + 112);
      uint64_t v15 = *(void *)(v0 + 120);
      uint64_t v17 = *(void *)(v0 + 104);
      (*(void (**)(uint64_t, void))(*(void *)(v0 + 160) + 96))(v11, *(void *)(v0 + 152));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v12, v11, v13);
      GenerativeError.RuntimeError.type.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v16 + 88))(v15, v17) == *MEMORY[0x263F40B50])
      {
        if (one-time initialization token for generator != -1) {
          swift_once();
        }
        uint64_t v18 = type metadata accessor for Logger();
        __swift_project_value_buffer(v18, (uint64_t)static Log.generator);
        uint64_t v19 = Logger.logObject.getter();
        uint64_t v20 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v19, v20))
        {
          uint64_t v21 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v21 = 0;
          _os_log_impl(&dword_25F79F000, v19, v20, "Aborting execution as closure exceeded maxiumum allotted time.", v21, 2u);
          MEMORY[0x261201C80](v21, -1, -1);
        }
        char v23 = *(void *)(v0 + 136);
        uint64_t v22 = *(void *)(v0 + 144);
        int v24 = *(void *)(v0 + 128);
        double v25 = *(void *)(v0 + 112);
        char v49 = *(void *)(v0 + 104);
        char v50 = *(void *)(v0 + 120);
        int v26 = *(void *)(v0 + 88);
        double v27 = *(void *)(v0 + 96);
        int v28 = *(void *)(v0 + 80);

        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v50, v49);
      }
      else
      {
        int v37 = *(void *)(v0 + 136);
        int v36 = *(void *)(v0 + 144);
        int v38 = *(void *)(v0 + 128);
        char v51 = *(void *)(v0 + 120);
        int v39 = *(void *)(v0 + 104);
        char v40 = *(void *)(v0 + 112);
        char v41 = *(void *)(v0 + 88);
        int v42 = *(void *)(v0 + 96);
        uint64_t v43 = *(void *)(v0 + 80);
        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v43);
        (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
        (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v51, v39);
      }
    }
    else
    {
      uint64_t v31 = *(void *)(v0 + 160);
      int v30 = *(void *)(v0 + 168);
      uint64_t v32 = *(void *)(v0 + 152);
      double v34 = *(void *)(v0 + 88);
      int v33 = *(void *)(v0 + 96);
      uint64_t v35 = *(void *)(v0 + 80);
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    }
  }
  else
  {
    uint64_t v29 = *(void *)(v0 + 72);
    v3(v29, 1, 1, *(void *)(v0 + 80));
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v29, &demangling cache variable for type metadata for GenerativeError?);
    swift_willThrow();
  }
  int v44 = *(void *)(v0 + 64);
  double v45 = **(void **)(v0 + 32);
  double v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  MEMORY[0x261200EC0](v45, v44, v46, MEMORY[0x263F8E4E0]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v47 = *(uint64_t (**)(void))(v0 + 8);
  return v47();
}

uint64_t partial apply for closure #1 in withTimeout<A>(timeout:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *((void *)v2 + 2);
  uint64_t v7 = *((void *)v2 + 3);
  uint64_t v8 = *((void *)v2 + 4);
  double v9 = v2[5];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  *uint64_t v10 = v3;
  v10[1] = partial apply for closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in withTimeout<A>(timeout:_:)(a1, a2, v7, v8, v6, v9);
}

uint64_t type metadata instantiation function for StreamWithTimeout.Iterator()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t type metadata completion function for StreamWithTimeout.Iterator()
{
  return swift_initClassMetadata2();
}

uint64_t closure #1 in closure #1 in withTimeout<A>(timeout:_:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  *uint64_t v6 = v4;
  v6[1] = partial apply for closure #2 in register<A>(documents:registrationCallback:);
  return v8(a1);
}

uint64_t closure #2 in closure #1 in withTimeout<A>(timeout:_:)(double a1)
{
  *(double *)(v1 + 16) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(void *)(v1 + 24) = swift_task_alloc();
  uint64_t v2 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = *(void *)(v2 - 8);
  *(void *)(v1 + 48) = swift_task_alloc();
  uint64_t v3 = type metadata accessor for ContinuousClock();
  *(void *)(v1 + 56) = v3;
  *(void *)(v1 + 64) = *(void *)(v3 - 8);
  *(void *)(v1 + 72) = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #2 in closure #1 in withTimeout<A>(timeout:_:), 0, 0);
}

uint64_t closure #2 in closure #1 in withTimeout<A>(timeout:_:)()
{
  uint64_t v1 = static Duration.seconds(_:)();
  uint64_t v3 = v2;
  ContinuousClock.init()();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                        + async function pointer to specialized Clock.sleep(for:tolerance:));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #2 in closure #1 in withTimeout<A>(timeout:_:);
  return v6(v1, v3, 0, 0, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  uint64_t v4 = *(void *)(*(void *)v1 + 56);
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = closure #2 in closure #1 in withTimeout<A>(timeout:_:);
  }
  else {
    uint64_t v5 = closure #2 in closure #1 in withTimeout<A>(timeout:_:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  GenerativeError.RuntimeError.ErrorType.TimeoutErrorInfo.init(retryAfterDate:)();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, *MEMORY[0x263F40B50], v3);
  type metadata accessor for GenerativeError();
  lazy protocol witness table accessor for type GenerativeError and conformance GenerativeError();
  swift_allocError();
  static GenerativeError.runtimeError(type:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t StreamWithTimeout.makeAsyncIterator()()
{
  type metadata accessor for StreamWithTimeout.Iterator();
  uint64_t v1 = __swift_project_boxed_opaque_existential_1((void *)v0, *(void *)(v0 + 24));
  MEMORY[0x270FA5388](v1);
  (*(void (**)(char *))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1Tm((uint64_t *)&v6);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  return StreamWithTimeout.Iterator.__allocating_init(wrapped:timeout:)(&v6, *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
}

uint64_t StreamWithTimeout.Iterator.__allocating_init(wrapped:timeout:)(long long *a1, uint64_t a2, char a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 56) = 0;
  *(unsigned char *)(v6 + 64) = 1;
  *(void *)(v6 + 72) = 0;
  *(unsigned char *)(v6 + 80) = 1;
  outlined init with take of AsyncIteratorProtocol(a1, v6 + 16);
  *(void *)(v6 + 56) = a2;
  *(unsigned char *)(v6 + 64) = a3 & 1;
  return v6;
}

uint64_t StreamWithTimeout.Iterator.next()(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  v2[5] = *(void *)(*(void *)v1 + 80);
  v2[6] = type metadata accessor for Optional();
  v2[7] = swift_getTupleTypeMetadata2();
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v2[10] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  return MEMORY[0x270FA2498](StreamWithTimeout.Iterator.next(), 0, 0);
}

uint64_t StreamWithTimeout.Iterator.next()()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (*(unsigned char *)(v1 + 64)) {
    goto LABEL_2;
  }
  if (*(unsigned char *)(v1 + 80))
  {
    uint64_t v3 = mach_absolute_time();
    *(void *)(v1 + 72) = v3;
    *(unsigned char *)(v1 + 80) = 0;
    if (*(unsigned char *)(v1 + 64))
    {
LABEL_2:
      char v2 = 1;
LABEL_11:
      uint64_t v10 = *(void *)(v1 + 56);
      swift_retain();
      uint64_t v11 = (void *)swift_task_alloc();
      *(void *)(v0 + 112) = v11;
      void *v11 = v0;
      v11[1] = StreamWithTimeout.Iterator.next();
      uint64_t v12 = *(void *)(v0 + 72);
      uint64_t v13 = *(void *)(v0 + 48);
      uint64_t v14 = *(void *)(v0 + 32);
      return withTimeout<A>(timeout:_:)(v12, v10, v2, (uint64_t)&async function pointer to partial apply for closure #1 in StreamWithTimeout.Iterator.next(), v14, v13);
    }
  }
  else
  {
    uint64_t v3 = *(void *)(v1 + 72);
  }
  double v4 = *(double *)(v1 + 56);
  uint64_t v5 = mach_absolute_time();
  BOOL v6 = v5 >= v3;
  unint64_t v7 = v5 - v3;
  if (!v6)
  {
    __break(1u);
LABEL_20:
    swift_once();
    goto LABEL_15;
  }
  *(void *)(v0 + 136) = 0;
  mach_timebase_info((mach_timebase_info_t)(v0 + 136));
  LODWORD(v8) = *(_DWORD *)(v0 + 136);
  LODWORD(v9) = *(_DWORD *)(v0 + 140);
  if (v4 > (double)v7 * (double)v8 / ((double)v9 * 1000000000.0))
  {
    char v2 = *(unsigned char *)(v1 + 64);
    goto LABEL_11;
  }
  if (one-time initialization token for generator != -1) {
    goto LABEL_20;
  }
LABEL_15:
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Log.generator);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 134217984;
    *(double *)(v0 + 16) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_25F79F000, v17, v18, "Aborting execution as stream exceeded maxiumum allotted time %f", v19, 0xCu);
    MEMORY[0x261201C80](v19, -1, -1);
  }
  uint64_t v21 = *(void *)(v0 + 96);
  uint64_t v20 = *(void *)(v0 + 104);
  uint64_t v23 = *(void *)(v0 + 80);
  uint64_t v22 = *(void *)(v0 + 88);

  uint64_t v24 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  GenerativeError.RuntimeError.ErrorType.TimeoutErrorInfo.init(retryAfterDate:)();
  (*(void (**)(uint64_t, void, uint64_t))(v21 + 104))(v20, *MEMORY[0x263F40B50], v22);
  type metadata accessor for GenerativeError();
  lazy protocol witness table accessor for type GenerativeError and conformance GenerativeError();
  swift_allocError();
  static GenerativeError.runtimeError(type:)();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  double v25 = *(uint64_t (**)(void))(v0 + 8);
  return v25();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = *(void *)(v0 + 32);
  *(void *)(*(void *)(v0 + 72) + *(int *)(v0 + 144)) = *(void *)(v0 + 120);
  char v2 = *(void *)(v0 + 72);
  if ((*(unsigned char *)(v1 + 64) & 1) == 0
    && (*(unsigned int (**)(void, uint64_t))(*(void *)(*(void *)(v0 + 40) - 8) + 48))(*(void *)(v0 + 72), 1) != 1)
  {
    uint64_t v3 = *(void *)(v0 + 32);
    *(double *)(v3 + 56) = *(double *)(v3 + 56) - *(double *)(v0 + 120);
    *(unsigned char *)(v3 + 64) = 0;
    char v2 = *(void *)(v0 + 72);
  }
  double v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 48);
  BOOL v6 = *(void *)(v0 + 24);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);
  v7(v4, v2, v5);
  v7(v6, v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t StreamWithTimeout.Iterator.next()(double a1)
{
  uint64_t v3 = *v2;
  *(double *)(v3 + 120) = a1;
  *(void *)(v3 + 128) = v1;
  swift_task_dealloc();
  if (v1)
  {
    double v4 = StreamWithTimeout.Iterator.next();
  }
  else
  {
    uint64_t v5 = *(void *)(v3 + 56);
    swift_release();
    *(_DWORD *)(v3 + 144) = *(_DWORD *)(v5 + 48);
    double v4 = StreamWithTimeout.Iterator.next();
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t closure #1 in StreamWithTimeout.Iterator.next()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return MEMORY[0x270FA2498](closure #1 in StreamWithTimeout.Iterator.next(), 0, 0);
}

uint64_t closure #1 in StreamWithTimeout.Iterator.next()()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v1 + 16;
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(v1 + 48);
  __swift_mutable_project_boxed_opaque_existential_1(v2, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in StreamWithTimeout.Iterator.next();
  uint64_t v6 = v0[5];
  return MEMORY[0x270FA1E80](v6, v3, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](closure #1 in StreamWithTimeout.Iterator.next(), 0, 0);
  }
  else
  {
    swift_endAccess();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_endAccess();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t StreamWithTimeout.Iterator.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for StreamWithTimeout.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance StreamWithTimeout<A>.Iterator(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return StreamWithTimeout.Iterator.next()(a1);
}

uint64_t partial apply for closure #1 in StreamWithTimeout.Iterator.next()(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  v4[5] = a1;
  v4[6] = v1;
  return MEMORY[0x270FA2498](closure #1 in StreamWithTimeout.Iterator.next(), 0, 0);
}

unint64_t lazy protocol witness table accessor for type GenerativeError and conformance GenerativeError()
{
  unint64_t result = lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError;
  if (!lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError)
  {
    type metadata accessor for GenerativeError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError);
  }
  return result;
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance StreamWithTimeout<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = StreamWithTimeout.makeAsyncIterator()();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v2, a1);
  *a2 = v5;
  return result;
}

uint64_t sub_25F882F14()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in closure #1 in withTimeout<A>(timeout:_:)(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 40);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v6 = (void *)swift_task_alloc();
  v5[2] = v6;
  *uint64_t v6 = v5;
  v6[1] = partial apply for closure #2 in register<A>(documents:registrationCallback:);
  return v8(a1);
}

uint64_t sub_25F883078()
{
  swift_unknownObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #2 in closure #1 in withTimeout<A>(timeout:_:)()
{
  double v2 = *(double *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #2 in closure #1 in withTimeout<A>(timeout:_:)(v2);
}

uint64_t initializeWithCopy for StreamWithTimeout(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t assignWithCopy for StreamWithTimeout(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  uint64_t v4 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  return a1;
}

uint64_t assignWithTake for StreamWithTimeout(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for StreamWithTimeout(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StreamWithTimeout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for StreamWithTimeout()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in StreamWithTimeout<A>()
{
  return swift_getWitnessTable();
}

uint64_t TokenGenerationError.toInferenceError()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v98 = a1;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v94 = *(char **)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v92 = (char *)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DocumentResource();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for InferenceError.Context();
  uint64_t v10 = *(void **)(v9 - 8);
  uint64_t v96 = v9;
  id v97 = v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = (char *)type metadata accessor for Prompt.SpecialToken();
  uint64_t v93 = *((void *)v95 - 1);
  MEMORY[0x270FA5388](v95);
  uint64_t v91 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for TokenGenerationError(0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (uint64_t *)((char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  TokenGenerationError.context.getter(&v101);
  uint64_t v17 = v102;
  MEMORY[0x261201A80](v102);
  swift_bridgeObjectRelease();

  if (v17
    && (uint64_t v100 = v17,
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error),
        type metadata accessor for NSError(),
        (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v88 = v3;
    id v18 = v99;
    id v19 = objc_msgSend(v99, sel_domain);
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v89 = v2;
    uint64_t v90 = v12;
    uint64_t v21 = v20;
    uint64_t v23 = v22;

    uint64_t v24 = (void *)MEMORY[0x263F8EE80];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v101 = v24;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v21, v23, 0xD000000000000015, 0x800000025F92C800, isUniquelyReferenced_nonNull_native);
    id v26 = v101;
    swift_bridgeObjectRelease();
    id v101 = objc_msgSend(v18, sel_code);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    int v28 = v8;
    uint64_t v29 = v6;
    uint64_t v30 = v5;
    uint64_t v32 = v31;
    char v33 = swift_isUniquelyReferenced_nonNull_native();
    id v101 = v26;
    uint64_t v34 = v27;
    uint64_t v2 = v89;
    uint64_t v12 = v90;
    uint64_t v35 = v32;
    uint64_t v5 = v30;
    uint64_t v6 = v29;
    uint64_t v8 = v28;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v34, v35, 0xD000000000000013, 0x800000025F92C820, v33);
    id v36 = v101;

    uint64_t v3 = v88;
    swift_bridgeObjectRelease();
  }
  else
  {
    id v36 = (id)MEMORY[0x263F8EE80];
  }
  outlined init with copy of TokenGenerationError(v2, (uint64_t)v16, type metadata accessor for TokenGenerationError);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      int v42 = (void *)v16[2];
      swift_bridgeObjectRetain();
      TokenGenerationError.code.getter();
      uint64_t v38 = v98;
      InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
      swift_bridgeObjectRelease();

      uint64_t v43 = (unsigned int *)MEMORY[0x263F56250];
      goto LABEL_18;
    case 2u:
      int v44 = (void *)v16[2];
      swift_bridgeObjectRetain();
      TokenGenerationError.code.getter();
      uint64_t v38 = v98;
      InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
      swift_bridgeObjectRelease();

      uint64_t v43 = (unsigned int *)MEMORY[0x263F56238];
      goto LABEL_18;
    case 3u:
      double v45 = (void *)*v16;
      double v46 = (void *)v16[1];
      uint64_t v47 = (void *)v16[4];
      uint64_t v96 = v16[2];
      id v97 = v47;
      id v101 = v45;
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v49 = v98;
      uint64_t v51 = v50;
      char v52 = swift_isUniquelyReferenced_nonNull_native();
      id v101 = v36;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v48, v51, 0x746E756F63, 0xE500000000000000, v52);
      id v53 = v101;
      swift_bridgeObjectRelease();
      id v101 = v46;
      uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v56 = v55;
      char v57 = swift_isUniquelyReferenced_nonNull_native();
      id v101 = v53;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v54, v56, 0x6D756D6978616DLL, 0xE700000000000000, v57);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      TokenGenerationError.code.getter();
      InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
      swift_bridgeObjectRelease();

      uint64_t v58 = *MEMORY[0x263F56280];
      uint64_t v59 = type metadata accessor for InferenceError();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 104))(v49, v58, v59);
    case 4u:
      swift_bridgeObjectRelease();
      uint64_t v61 = (void *)v16[2];
      swift_bridgeObjectRelease();

      uint64_t v62 = *MEMORY[0x263F56290];
      uint64_t v63 = type metadata accessor for InferenceError();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 104))(v98, v62, v63);
    case 5u:
    case 9u:
    case 0xCu:
    case 0xDu:
      int v37 = (void *)v16[2];
      swift_bridgeObjectRetain();
      TokenGenerationError.code.getter();
      uint64_t v38 = v98;
      InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
      swift_bridgeObjectRelease();
      int v39 = v37;
      goto LABEL_16;
    case 6u:
      int v64 = (char **)((char *)v16
                    + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, TokenGenerationError.Context))
                             + 48));
      uint64_t v92 = *v64;
      unsigned int v65 = (void (**)(void, char *, void))v97;
      uint64_t v94 = v64[2];
      uint64_t v66 = v93;
      uint64_t v67 = v91;
      (*(void (**)(char *, uint64_t *, char *))(v93 + 32))(v91, v16, v95);
      uint64_t v68 = Prompt.SpecialToken.identifier.getter();
      uint64_t v70 = v69;
      char v71 = swift_isUniquelyReferenced_nonNull_native();
      id v101 = v36;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v68, v70, 0x546C616963657073, 0xEC0000006E656B6FLL, v71);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      TokenGenerationError.code.getter();
      InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
      swift_bridgeObjectRelease();

      (*(void (**)(char *, char *))(v66 + 8))(v67, v95);
      uint64_t v38 = v98;
      v65[4](v98, v12, v96);
      goto LABEL_14;
    case 7u:
    case 8u:
      char v40 = (void *)v16[2];
      swift_bridgeObjectRetain();
      TokenGenerationError.code.getter();
      uint64_t v38 = v98;
      InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
      swift_bridgeObjectRelease();

LABEL_14:
      uint64_t v43 = (unsigned int *)MEMORY[0x263F56288];
      goto LABEL_18;
    case 0xAu:
      uint64_t v72 = *v16;
      uint64_t v73 = v16[1];
      uint64_t v74 = (void *)v16[4];
      char v75 = swift_isUniquelyReferenced_nonNull_native();
      id v101 = v36;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v72, v73, 1701667182, 0xE400000000000000, v75);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      TokenGenerationError.code.getter();
      uint64_t v38 = v98;
      InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
      swift_bridgeObjectRelease();
      int v39 = v74;
LABEL_16:

      goto LABEL_17;
    case 0xBu:
      uint64_t v78 = (char **)((char *)v16
                    + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: DocumentResource, TokenGenerationError.Context))
                             + 48));
      uint64_t v79 = *v78;
      uint64_t v90 = v12;
      uint64_t v91 = v79;
      uint64_t v95 = v78[2];
      (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v8, v16, v5);
      unint64_t v80 = v92;
      DocumentResource.url.getter();
      uint64_t v81 = URL.absoluteString.getter();
      uint64_t v93 = v5;
      uint64_t v82 = v81;
      uint64_t v84 = v83;
      (*((void (**)(char *, uint64_t))v94 + 1))(v80, v3);
      char v85 = swift_isUniquelyReferenced_nonNull_native();
      id v101 = v36;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v82, v84, 7107189, 0xE300000000000000, v85);
      uint64_t v86 = (void (**)(void, void, void))v97;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      TokenGenerationError.code.getter();
      uint64_t v87 = v90;
      InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
      swift_bridgeObjectRelease();

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v93);
      uint64_t v38 = v98;
      ((void (**)(uint64_t, char *, uint64_t))v86)[4](v98, v87, v96);
      goto LABEL_17;
    default:
      char v41 = (void *)v16[2];
      swift_bridgeObjectRelease();

      TokenGenerationError.code.getter();
      uint64_t v38 = v98;
      InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
LABEL_17:
      uint64_t v43 = (unsigned int *)MEMORY[0x263F56280];
LABEL_18:
      uint64_t v76 = *v43;
      uint64_t v77 = type metadata accessor for InferenceError();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 104))(v38, v76, v77);
  }
}

uint64_t type metadata accessor for TokenGenerationError(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for TokenGenerationError);
}

uint64_t TokenGenerationError.inferenceErrorContext.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Prompt.SpecialToken();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v40[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TokenGenerationError(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (void *)((char *)&v40[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25F91CC30;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x800000025F92D120;
  TokenGenerationError.context.getter(v40);
  uint64_t v10 = v40[0];
  uint64_t v11 = v40[1];

  *(void *)(inited + 48) = v10;
  *(void *)(inited + 56) = v11;
  unint64_t v12 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  outlined init with copy of TokenGenerationError(v1, (uint64_t)v8, type metadata accessor for TokenGenerationError);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
      uint64_t v19 = *v8;
      uint64_t v20 = v8[1];
      uint64_t v21 = (void *)v8[4];
      swift_bridgeObjectRelease();

      v40[0] = v19;
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v24 = v23;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v40[0] = v12;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v22, v24, 0x746E756F63, 0xE500000000000000, isUniquelyReferenced_nonNull_native);
      uint64_t v26 = v40[0];
      swift_bridgeObjectRelease();
      v40[0] = v20;
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v29 = v28;
      char v30 = swift_isUniquelyReferenced_nonNull_native();
      v40[0] = v26;
      uint64_t v31 = v27;
      uint64_t v32 = v29;
      uint64_t v33 = 0x6D756D6978616DLL;
      uint64_t v34 = 0xE700000000000000;
LABEL_7:
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, v32, v33, v34, v30);
      swift_bridgeObjectRelease();
      break;
    case 10:
      uint64_t v35 = *v8;
      uint64_t v36 = v8[1];
      int v37 = (void *)v8[4];
      swift_bridgeObjectRelease();

      char v30 = swift_isUniquelyReferenced_nonNull_native();
      v40[0] = v12;
      uint64_t v31 = v35;
      uint64_t v32 = v36;
      uint64_t v33 = 1701667182;
      uint64_t v34 = 0xE400000000000000;
      goto LABEL_7;
    case 6:
      uint64_t v14 = *(void **)((char *)v8
                     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, TokenGenerationError.Context))
                              + 48)
                     + 16);
      swift_bridgeObjectRelease();

      (*(void (**)(char *, uint64_t *, uint64_t))(v3 + 32))(v5, v8, v2);
      uint64_t v15 = Prompt.SpecialToken.identifier.getter();
      uint64_t v17 = v16;
      char v18 = swift_isUniquelyReferenced_nonNull_native();
      v40[0] = v12;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, v17, 0x546C616963657073, 0xEC0000006E656B6FLL, v18);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      break;
    default:
      outlined destroy of TokenGenerationError((uint64_t)v8, type metadata accessor for TokenGenerationError);
      break;
  }
  TokenGenerationError.code.getter();
  return InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
}

uint64_t specialized FixedWidthInteger.init(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0) {
        uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v7 = (uint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10);
      char v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3) {
        goto LABEL_50;
      }
      if (v3 == 1 || (BYTE1(result) - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v7 = (BYTE1(result) - 48);
      uint64_t v14 = v3 - 2;
      if (v14)
      {
        uint64_t v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          unsigned int v16 = *v15 - 48;
          if (v16 > 9) {
            goto LABEL_34;
          }
          uint64_t v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
            goto LABEL_34;
          }
          uint64_t v7 = v17 + v16;
          if (__OFADD__(v17, v16)) {
            goto LABEL_34;
          }
          char v9 = 0;
          ++v15;
          if (!--v14) {
            goto LABEL_37;
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            uint64_t v7 = -(uint64_t)(BYTE1(result) - 48);
            uint64_t v10 = v3 - 2;
            if (v10)
            {
              uint64_t v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                unsigned int v12 = *v11 - 48;
                if (v12 > 9) {
                  goto LABEL_34;
                }
                uint64_t v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
                  goto LABEL_34;
                }
                uint64_t v7 = v13 - v12;
                if (__OFSUB__(v13, v12)) {
                  goto LABEL_34;
                }
                char v9 = 0;
                ++v11;
                if (!--v10) {
                  goto LABEL_37;
                }
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          uint64_t v7 = 0;
          char v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v7 = (result - 48);
      uint64_t v18 = v3 - 1;
      if (v18)
      {
        uint64_t v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          unsigned int v20 = *v19 - 48;
          if (v20 > 9) {
            goto LABEL_34;
          }
          uint64_t v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
            goto LABEL_34;
          }
          uint64_t v7 = v21 + v20;
          if (__OFADD__(v21, v20)) {
            goto LABEL_34;
          }
          char v9 = 0;
          ++v19;
          if (!--v18) {
            goto LABEL_37;
          }
        }
      }
    }
LABEL_36:
    char v9 = 0;
    goto LABEL_37;
  }
  uint64_t v7 = specialized _parseInteger<A, B>(ascii:radix:)();
  char v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease();
  if (v9) {
    return 0;
  }
  else {
    return v7;
  }
}

uint64_t TokenGenerationError.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v116 = a2;
  uint64_t v3 = type metadata accessor for URL.DirectoryHint();
  uint64_t v113 = *(void *)(v3 - 8);
  unint64_t v114 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v112 = (char *)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v111 = (char *)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v108 = *(void *)(v7 - 8);
  uint64_t v109 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v110 = (char *)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v9 = (void *)type metadata accessor for Prompt.SpecialToken();
  uint64_t v106 = *(v9 - 1);
  id v107 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v105 = (char *)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for InferenceError();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for InferenceError.Context();
  uint64_t v120 = *(void *)(v15 - 8);
  uint64_t v121 = v15;
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v105 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v105 - v22;
  uint64_t v24 = type metadata accessor for TokenGenerationError(0);
  uint64_t v117 = *(void *)(v24 - 8);
  uint64_t v118 = v24;
  uint64_t v25 = MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v105 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  long long v115 = (uint64_t *)((char *)&v105 - v28);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v119 = a1;
  v29(v14, a1, v11);
  int v30 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v14, v11);
  if (v30 != *MEMORY[0x263F56270])
  {
    int v31 = v30;
    if (v30 != *MEMORY[0x263F56288]
      && v30 != *MEMORY[0x263F562B0]
      && v30 != *MEMORY[0x263F562A8]
      && v30 != *MEMORY[0x263F56260]
      && v30 != *MEMORY[0x263F562B8]
      && v30 != *MEMORY[0x263F56248]
      && v30 != *MEMORY[0x263F56280]
      && v30 != *MEMORY[0x263F56298]
      && v30 != *MEMORY[0x263F56278])
    {
      if (v30 == *MEMORY[0x263F56250])
      {
        (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
        (*(void (**)(char *, char *, uint64_t))(v120 + 32))(v21, v14, v121);
        unint64_t v124 = 0;
        unint64_t v125 = 0xE000000000000000;
        _StringGuts.grow(_:)(48);
        swift_bridgeObjectRelease();
        unint64_t v124 = 0xD00000000000002ELL;
        unint64_t v125 = 0x800000025F92D8B0;
        uint64_t v32 = InferenceError.Context.userInfo.getter();
        uint64_t v33 = v116;
        if (*(void *)(v32 + 16)
          && (unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(0x7466417972746572, 0xEE00657461447265),
              (v35 & 1) != 0))
        {
          uint64_t v36 = (uint64_t *)(*(void *)(v32 + 56) + 16 * v34);
          uint64_t v38 = *v36;
          uint64_t v37 = v36[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v38 = 0;
          uint64_t v37 = 0;
        }
        swift_bridgeObjectRelease();
        uint64_t v122 = v38;
        uint64_t v123 = v37;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        v58._uint64_t countAndFlagsBits = String.init<A>(describing:)();
        String.append(_:)(v58);
        swift_bridgeObjectRelease();
        unint64_t v59 = v124;
        unint64_t v60 = v125;
        lazy protocol witness table accessor for type Prompt.SpecialToken and conformance Prompt.SpecialToken(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
        uint64_t v61 = swift_allocError();
        uint64_t v62 = v119;
        v29(v63, v119, v11);
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v62, v11);
        (*(void (**)(char *, uint64_t))(v120 + 8))(v21, v121);
        uint64_t v48 = v115;
        *long long v115 = v59;
        v48[1] = v60;
        v48[2] = v61;
        uint64_t v49 = v118;
        swift_storeEnumTagMultiPayload();
        goto LABEL_51;
      }
      uint64_t v33 = v116;
      if (v30 == *MEMORY[0x263F56238])
      {
        (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
        uint64_t v41 = v120;
        (*(void (**)(char *, char *, uint64_t))(v120 + 32))(v18, v14, v121);
        unint64_t v124 = 0;
        unint64_t v125 = 0xE000000000000000;
        _StringGuts.grow(_:)(31);
        swift_bridgeObjectRelease();
        unint64_t v124 = 0xD00000000000001DLL;
        unint64_t v125 = 0x800000025F92D890;
        v42._uint64_t countAndFlagsBits = InferenceError.Context.additionalDescription.getter();
        String.append(_:)(v42);
        swift_bridgeObjectRelease();
        unint64_t v43 = v124;
        unint64_t v114 = v125;
        lazy protocol witness table accessor for type Prompt.SpecialToken and conformance Prompt.SpecialToken(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
        uint64_t v44 = swift_allocError();
        uint64_t v45 = v119;
        v29(v46, v119, v11);
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v45, v11);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v18, v121);
        unint64_t v47 = v114;
        uint64_t v48 = v115;
        *long long v115 = v43;
        v48[1] = v47;
        v48[2] = v44;
        uint64_t v49 = v118;
        swift_storeEnumTagMultiPayload();
LABEL_51:
        uint64_t v66 = v117;
        outlined init with take of TokenGenerationError((uint64_t)v48, v33);
        uint64_t v52 = 0;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v33, v52, 1, v49);
      }
      int v64 = *MEMORY[0x263F56258];
      unsigned int v65 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v65(v119, v11);
      if (v31 != v64) {
        v65((uint64_t)v14, v11);
      }
      goto LABEL_29;
    }
  }
  (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
  (*(void (**)(char *, char *, uint64_t))(v120 + 32))(v23, v14, v121);
  if (InferenceError.Context.domain.getter() == 0xD000000000000019 && v39 == 0x800000025F92C9D0)
  {
    swift_bridgeObjectRelease();
    uint64_t v40 = v119;
  }
  else
  {
    char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v40 = v119;
    if ((v50 & 1) == 0) {
      goto LABEL_22;
    }
  }
  unint64_t v51 = InferenceError.Context.code.getter();
  if (specialized TokenGenerationError.Code.init(rawValue:)(v51) == 14)
  {
LABEL_22:
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v40, v11);
    (*(void (**)(char *, uint64_t))(v120 + 8))(v23, v121);
LABEL_23:
    uint64_t v52 = 1;
    uint64_t v33 = v116;
    goto LABEL_30;
  }
  uint64_t v119 = InferenceError.Context.additionalDescription.getter();
  uint64_t v54 = v53;
  lazy protocol witness table accessor for type Prompt.SpecialToken and conformance Prompt.SpecialToken(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  id v55 = (id)swift_allocError();
  v29(v56, v40, v11);
  switch(v57)
  {
    case 3:
      uint64_t v67 = v54;
      uint64_t v68 = InferenceError.Context.userInfo.getter();
      if (!*(void *)(v68 + 16))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v33 = v116;
LABEL_58:

        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v40, v11);
        (*(void (**)(char *, uint64_t))(v120 + 8))(v23, v121);
        goto LABEL_29;
      }
      unint64_t v69 = specialized __RawDictionaryStorage.find<A>(_:)(0x746E756F63, 0xE500000000000000);
      uint64_t v33 = v116;
      if ((v70 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_58;
      }
      id v107 = v55;
      char v71 = (uint64_t *)(*(void *)(v68 + 56) + 16 * v69);
      uint64_t v72 = *v71;
      unint64_t v73 = v71[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v74 = specialized FixedWidthInteger.init(_:)(v72, v73);
      if (v75)
      {
        swift_bridgeObjectRelease();
        id v55 = v107;
        goto LABEL_58;
      }
      uint64_t v76 = v74;
      uint64_t v77 = InferenceError.Context.userInfo.getter();
      (*(void (**)(char *, uint64_t))(v120 + 8))(v23, v121);
      id v55 = v107;
      if (*(void *)(v77 + 16)
        && (unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)(0x6D756D6978616DLL, 0xE700000000000000),
            (v79 & 1) != 0))
      {
        unint64_t v80 = (uint64_t *)(*(void *)(v77 + 56) + 16 * v78);
        uint64_t v81 = *v80;
        unint64_t v82 = v80[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v83 = specialized FixedWidthInteger.init(_:)(v81, v82);
        LOBYTE(v81) = v84;
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v40, v11);
        if ((v81 & 1) == 0)
        {
          uint64_t v48 = v115;
          *long long v115 = v76;
          v48[1] = v83;
          uint64_t v49 = v118;
          v48[2] = v119;
          v48[3] = v67;
          v48[4] = (uint64_t)v107;
          swift_storeEnumTagMultiPayload();
          goto LABEL_51;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_54:
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v40, v11);
        swift_bridgeObjectRelease();
      }
LABEL_29:
      uint64_t v52 = 1;
LABEL_30:
      uint64_t v66 = v117;
      uint64_t v49 = v118;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v33, v52, 1, v49);
    case 6:
      uint64_t v85 = v54;
      uint64_t v86 = InferenceError.Context.userInfo.getter();
      (*(void (**)(char *, uint64_t))(v120 + 8))(v23, v121);
      if (!*(void *)(v86 + 16)) {
        goto LABEL_53;
      }
      specialized __RawDictionaryStorage.find<A>(_:)(0x546C616963657073, 0xEC0000006E656B6FLL);
      if ((v87 & 1) == 0) {
        goto LABEL_53;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v88 = v105;
      Prompt.SpecialToken.init(identifier:)();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v40, v11);
      uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, TokenGenerationError.Context));
      uint64_t v48 = v115;
      uint64_t v90 = (uint64_t *)((char *)v115 + *(int *)(v89 + 48));
      (*(void (**)(uint64_t *, char *, id))(v106 + 32))(v115, v88, v107);
      *uint64_t v90 = v119;
      v90[1] = v85;
      v90[2] = (uint64_t)v55;
      uint64_t v49 = v118;
      goto LABEL_49;
    case 9:
      uint64_t v91 = v54;
      uint64_t v92 = InferenceError.Context.userInfo.getter();
      (*(void (**)(char *, uint64_t))(v120 + 8))(v23, v121);
      if (!*(void *)(v92 + 16)) {
        goto LABEL_53;
      }
      unint64_t v93 = specialized __RawDictionaryStorage.find<A>(_:)(1701667182, 0xE400000000000000);
      uint64_t v33 = v116;
      if ((v94 & 1) == 0) {
        goto LABEL_54;
      }
      uint64_t v95 = (uint64_t *)(*(void *)(v92 + 56) + 16 * v93);
      uint64_t v96 = (uint64_t)v55;
      uint64_t v98 = *v95;
      uint64_t v97 = v95[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v40, v11);
      uint64_t v48 = v115;
      *long long v115 = v98;
      v48[1] = v97;
      uint64_t v49 = v118;
      v48[2] = v119;
      v48[3] = v91;
      v48[4] = v96;
      swift_storeEnumTagMultiPayload();
      goto LABEL_51;
    case 11:
      uint64_t v99 = v54;
      uint64_t v100 = InferenceError.Context.userInfo.getter();
      (*(void (**)(char *, uint64_t))(v120 + 8))(v23, v121);
      if (!*(void *)(v100 + 16)
        || (unint64_t v101 = specialized __RawDictionaryStorage.find<A>(_:)(7107189, 0xE300000000000000), (v102 & 1) == 0))
      {
LABEL_53:
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v40, v11);
        swift_bridgeObjectRelease();

        goto LABEL_23;
      }
      uint64_t v121 = *(void *)(*(void *)(v100 + 56) + 16 * v101);
      id v107 = v55;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      Swift::String v103 = (uint64_t *)&v27[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: DocumentResource, TokenGenerationError.Context))
                                    + 48)];
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56))(v111, 1, 1, v109);
      (*(void (**)(char *, void, unint64_t))(v113 + 104))(v112, *MEMORY[0x263F06E50], v114);
      URL.init(filePath:directoryHint:relativeTo:)();
      DocumentResource.init(url:)();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v40, v11);
      uint64_t v49 = v118;
      *Swift::String v103 = v119;
      v103[1] = v99;
      v103[2] = (uint64_t)v107;
      swift_storeEnumTagMultiPayload();
      uint64_t v48 = v115;
      outlined init with take of TokenGenerationError((uint64_t)v27, (uint64_t)v115);
LABEL_50:
      uint64_t v33 = v116;
      goto LABEL_51;
    default:
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v40, v11);
      (*(void (**)(char *, uint64_t))(v120 + 8))(v23, v121);
      uint64_t v48 = v115;
      uint64_t v49 = v118;
      *long long v115 = v119;
      v48[1] = v54;
      v48[2] = (uint64_t)v55;
LABEL_49:
      swift_storeEnumTagMultiPayload();
      goto LABEL_50;
  }
}

uint64_t TokenGenerationError.Context.debugDescription.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TokenGenerationError.Context.debugDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*TokenGenerationError.Context.debugDescription.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t TokenGenerationError.Context.underlyingError.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  MEMORY[0x261201A80](v1);
  return v1;
}

void TokenGenerationError.Context.underlyingError.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
}

uint64_t (*TokenGenerationError.Context.underlyingError.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t TokenGenerationError.Context.init(debugDescription:underlyingError:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t TokenGenerationError.errorDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Prompt.SpecialToken();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Locale();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = type metadata accessor for String.LocalizationValue();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v8 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v9 = type metadata accessor for TokenGenerationError(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (uint64_t *)((char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of TokenGenerationError(v1, (uint64_t)v11, type metadata accessor for TokenGenerationError);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
    case 4u:
    case 5u:
    case 7u:
    case 8u:
    case 9u:
    case 0xCu:
    case 0xDu:
      uint64_t v32 = (void *)v11[2];
      swift_bridgeObjectRelease();

      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      return String.init(localized:table:bundle:locale:comment:)();
    case 3u:
      uint64_t v13 = *v11;
      uint64_t v14 = v11[1];
      uint64_t v15 = (void *)v11[4];
      swift_bridgeObjectRelease();

      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v16._uint64_t countAndFlagsBits = 0x64656469766F7250;
      v16._object = (void *)0xE900000000000020;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v16);
      uint64_t v35 = v13;
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      v17._uint64_t countAndFlagsBits = 0xD000000000000024;
      v17._object = (void *)0x800000025F92D780;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v17);
      uint64_t v35 = v14;
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      v18._uint64_t countAndFlagsBits = 46;
      v18._object = (void *)0xE100000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v18);
      String.LocalizationValue.init(stringInterpolation:)();
      static Locale.current.getter();
      return String.init(localized:table:bundle:locale:comment:)();
    case 6u:
      uint64_t v19 = *(void **)((char *)v11
                     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, TokenGenerationError.Context))
                              + 48)
                     + 16);
      swift_bridgeObjectRelease();

      (*(void (**)(char *, uint64_t *, uint64_t))(v3 + 32))(v5, v11, v2);
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v20._uint64_t countAndFlagsBits = 0xD000000000000026;
      v20._object = (void *)0x800000025F92D4C0;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v20);
      v21._uint64_t countAndFlagsBits = Prompt.SpecialToken.identifier.getter();
      String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v21);
      swift_bridgeObjectRelease();
      v22._uint64_t countAndFlagsBits = 46;
      v22._object = (void *)0xE100000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v22);
      String.LocalizationValue.init(stringInterpolation:)();
      static Locale.current.getter();
      uint64_t v23 = String.init(localized:table:bundle:locale:comment:)();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return v23;
    case 0xAu:
      uint64_t v24 = *v11;
      uint64_t v25 = (void *)v11[1];
      uint64_t v26 = (void *)v11[4];
      swift_bridgeObjectRelease();

      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v27._uint64_t countAndFlagsBits = 0xD000000000000039;
      v27._object = (void *)0x800000025F92D360;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v27);
      v28._uint64_t countAndFlagsBits = v24;
      v28._object = v25;
      String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v28);
      swift_bridgeObjectRelease();
      v29._uint64_t countAndFlagsBits = 0;
      v29._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v29);
      String.LocalizationValue.init(stringInterpolation:)();
      static Locale.current.getter();
      return String.init(localized:table:bundle:locale:comment:)();
    case 0xBu:
      int v30 = *(void **)((char *)v11
                     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: DocumentResource, TokenGenerationError.Context))
                              + 48)
                     + 16);
      swift_bridgeObjectRelease();

      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      uint64_t v23 = String.init(localized:table:bundle:locale:comment:)();
      uint64_t v31 = type metadata accessor for DocumentResource();
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v31 - 8) + 8))(v11, v31);
      return v23;
    default:
      uint64_t v12 = (void *)v11[2];
      swift_bridgeObjectRelease();

      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      return String.init(localized:table:bundle:locale:comment:)();
  }
}

uint64_t TokenGenerationError.context.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for TokenGenerationError(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (uint64_t *)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of TokenGenerationError(v2, (uint64_t)v6, type metadata accessor for TokenGenerationError);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 3:
      uint64_t v8 = v6[2];
      uint64_t v9 = v6[3];
      uint64_t v10 = v6[4];
      break;
    case 6:
      uint64_t v11 = (uint64_t *)((char *)v6
                      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, TokenGenerationError.Context))
                               + 48));
      uint64_t v8 = *v11;
      uint64_t v9 = v11[1];
      uint64_t v10 = v11[2];
      uint64_t v12 = type metadata accessor for Prompt.SpecialToken();
      goto LABEL_8;
    case 10:
      uint64_t v8 = v6[2];
      uint64_t v9 = v6[3];
      uint64_t v10 = v6[4];
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 11:
      uint64_t v13 = (uint64_t *)((char *)v6
                      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: DocumentResource, TokenGenerationError.Context))
                               + 48));
      uint64_t v8 = *v13;
      uint64_t v9 = v13[1];
      uint64_t v10 = v13[2];
      uint64_t v12 = type metadata accessor for DocumentResource();
LABEL_8:
      uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v12 - 8) + 8))(v6, v12);
      break;
    default:
      uint64_t v8 = *v6;
      uint64_t v9 = v6[1];
      uint64_t v10 = v6[2];
      break;
  }
  *a1 = v8;
  a1[1] = v9;
  a1[2] = v10;
  return result;
}

uint64_t TokenGenerationError.code.getter()
{
  uint64_t v1 = type metadata accessor for TokenGenerationError(0);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TokenGenerationError(v0, (uint64_t)v3, type metadata accessor for TokenGenerationError);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined destroy of TokenGenerationError((uint64_t)v3, type metadata accessor for TokenGenerationError);
      uint64_t result = 1;
      break;
    case 2u:
      outlined destroy of TokenGenerationError((uint64_t)v3, type metadata accessor for TokenGenerationError);
      uint64_t result = 2;
      break;
    case 3u:
      outlined destroy of TokenGenerationError((uint64_t)v3, type metadata accessor for TokenGenerationError);
      uint64_t result = 3;
      break;
    case 4u:
      outlined destroy of TokenGenerationError((uint64_t)v3, type metadata accessor for TokenGenerationError);
      uint64_t result = 4;
      break;
    case 5u:
      outlined destroy of TokenGenerationError((uint64_t)v3, type metadata accessor for TokenGenerationError);
      uint64_t result = 5;
      break;
    case 6u:
      uint64_t v5 = *(void **)&v3[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, TokenGenerationError.Context))
                                + 48)
                       + 16];
      swift_bridgeObjectRelease();

      uint64_t v6 = type metadata accessor for Prompt.SpecialToken();
      (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v3, v6);
      uint64_t result = 6;
      break;
    case 7u:
      outlined destroy of TokenGenerationError((uint64_t)v3, type metadata accessor for TokenGenerationError);
      uint64_t result = 7;
      break;
    case 8u:
      outlined destroy of TokenGenerationError((uint64_t)v3, type metadata accessor for TokenGenerationError);
      uint64_t result = 8;
      break;
    case 9u:
      outlined destroy of TokenGenerationError((uint64_t)v3, type metadata accessor for TokenGenerationError);
      uint64_t result = 10;
      break;
    case 0xAu:
      outlined destroy of TokenGenerationError((uint64_t)v3, type metadata accessor for TokenGenerationError);
      uint64_t result = 9;
      break;
    case 0xBu:
      uint64_t v7 = *(void **)&v3[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: DocumentResource, TokenGenerationError.Context))
                                + 48)
                       + 16];
      swift_bridgeObjectRelease();

      uint64_t v8 = type metadata accessor for DocumentResource();
      (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v3, v8);
      uint64_t result = 11;
      break;
    case 0xCu:
      outlined destroy of TokenGenerationError((uint64_t)v3, type metadata accessor for TokenGenerationError);
      uint64_t result = 12;
      break;
    case 0xDu:
      outlined destroy of TokenGenerationError((uint64_t)v3, type metadata accessor for TokenGenerationError);
      uint64_t result = 13;
      break;
    default:
      outlined destroy of TokenGenerationError((uint64_t)v3, type metadata accessor for TokenGenerationError);
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t protocol witness for Error._domain.getter in conformance TokenGenerationError()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t protocol witness for Error._code.getter in conformance TokenGenerationError()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance TokenGenerationError()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance TokenGenerationError()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t protocol witness for LocalizedError.failureReason.getter in conformance TokenGenerationError()
{
  return MEMORY[0x270EEE930]();
}

uint64_t protocol witness for LocalizedError.recoverySuggestion.getter in conformance TokenGenerationError()
{
  return MEMORY[0x270EEE950]();
}

uint64_t protocol witness for LocalizedError.helpAnchor.getter in conformance TokenGenerationError()
{
  return MEMORY[0x270EEE920]();
}

uint64_t GenerationError.errorDescription.getter()
{
  uint64_t v1 = type metadata accessor for Prompt.SpecialToken();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = &v21[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for Locale();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v6 = type metadata accessor for String.LocalizationValue();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v8 = type metadata accessor for GenerationError(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t *)&v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of TokenGenerationError(v0, (uint64_t)v10, type metadata accessor for GenerationError);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v2 + 32))(v4, v10, v1);
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v16._uint64_t countAndFlagsBits = 0xD000000000000026;
      v16._object = (void *)0x800000025F92D4C0;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v16);
      v17._uint64_t countAndFlagsBits = Prompt.SpecialToken.identifier.getter();
      String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v17);
      swift_bridgeObjectRelease();
      v18._uint64_t countAndFlagsBits = 46;
      v18._object = (void *)0xE100000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v18);
      String.LocalizationValue.init(stringInterpolation:)();
      static Locale.current.getter();
      uint64_t v19 = String.init(localized:table:bundle:locale:comment:)();
      (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
      return v19;
    case 2u:
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      return String.init(localized:table:bundle:locale:comment:)();
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      return String.init(localized:table:bundle:locale:comment:)();
    default:
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v13._uint64_t countAndFlagsBits = 0x64656469766F7250;
      v13._object = (void *)0xE900000000000020;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v13);
      uint64_t v22 = v11;
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      v14._uint64_t countAndFlagsBits = 0xD000000000000024;
      v14._object = (void *)0x800000025F92D780;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v14);
      uint64_t v22 = v12;
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      v15._uint64_t countAndFlagsBits = 46;
      v15._object = (void *)0xE100000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v15);
      String.LocalizationValue.init(stringInterpolation:)();
      static Locale.current.getter();
      return String.init(localized:table:bundle:locale:comment:)();
  }
}

void GenerationError.hash(into:)()
{
  uint64_t v1 = type metadata accessor for Prompt.SpecialToken();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for GenerationError(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (Swift::UInt *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of TokenGenerationError(v0, (uint64_t)v7, type metadata accessor for GenerationError);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, Swift::UInt *, uint64_t))(v2 + 32))(v4, v7, v1);
      Hasher._combine(_:)(6uLL);
      lazy protocol witness table accessor for type Prompt.SpecialToken and conformance Prompt.SpecialToken(&lazy protocol witness table cache variable for type Prompt.SpecialToken and conformance Prompt.SpecialToken, MEMORY[0x263F7FB28]);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      return;
    case 2u:
      Swift::UInt v10 = 0;
      goto LABEL_10;
    case 3u:
      Swift::UInt v10 = 1;
      goto LABEL_10;
    case 4u:
      Swift::UInt v10 = 3;
      goto LABEL_10;
    case 5u:
      Swift::UInt v10 = 4;
      goto LABEL_10;
    case 6u:
      Swift::UInt v10 = 5;
      goto LABEL_10;
    case 7u:
      Swift::UInt v10 = 7;
      goto LABEL_10;
    default:
      Swift::UInt v8 = *v7;
      Swift::UInt v9 = v7[1];
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(v8);
      Swift::UInt v10 = v9;
LABEL_10:
      Hasher._combine(_:)(v10);
      return;
  }
}

Swift::Int GenerationError.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GenerationError()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GenerationError()
{
  return Hasher._finalize()();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  uint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    Swift::String v20 = *v6;
    if (v18)
    {
LABEL_8:
      Swift::String v21 = (uint64_t *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t *v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  Swift::String v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);
  return swift_bridgeObjectRetain();
}

unint64_t type metadata accessor for NSError()
{
  unint64_t result = lazy cache variable for type metadata for NSError;
  if (!lazy cache variable for type metadata for NSError)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSError);
  }
  return result;
}

uint64_t type metadata accessor for GenerationError(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for GenerationError);
}

uint64_t outlined init with copy of TokenGenerationError(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  Swift::UInt v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + (v12 << 6);
    return outlined assign with take of Prompt.ToolCall((uint64_t)a1, v19);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  Swift::UInt v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_unknownObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
  return swift_bridgeObjectRetain();
}

{
  void *v4;
  void **v5;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  void *v18;
  char v19;
  uint64_t vars8;

  uint64_t v5 = (void **)v4;
  Swift::UInt v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= result && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      *(void *)(v18[7] + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
  return swift_bridgeObjectRetain();
}

uint64_t specialized static GenerationError.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Prompt.SpecialToken();
  uint64_t v24 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for GenerationError(0);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  Swift::UInt v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unint64_t v12 = (uint64_t *)((char *)&v23 - v11);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GenerationError, GenerationError));
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  char v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = &v16[*(int *)(v14 + 56)];
  outlined init with copy of TokenGenerationError(a1, (uint64_t)v16, type metadata accessor for GenerationError);
  outlined init with copy of TokenGenerationError(a2, (uint64_t)v17, type metadata accessor for GenerationError);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of TokenGenerationError((uint64_t)v16, (uint64_t)v10, type metadata accessor for GenerationError);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v20 = v24;
        (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v6, v17, v4);
        char v19 = MEMORY[0x2611FF240](v10, v6);
        unint64_t v21 = *(void (**)(char *, uint64_t))(v20 + 8);
        v21(v6, v4);
        v21(v10, v4);
        goto LABEL_7;
      }
      (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v4);
      goto LABEL_21;
    case 2u:
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_21;
      }
      goto LABEL_19;
    case 3u:
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_21;
      }
      goto LABEL_19;
    case 4u:
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_21;
      }
      goto LABEL_19;
    case 5u:
      if (swift_getEnumCaseMultiPayload() != 5) {
        goto LABEL_21;
      }
      goto LABEL_19;
    case 6u:
      if (swift_getEnumCaseMultiPayload() != 6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    case 7u:
      if (swift_getEnumCaseMultiPayload() != 7) {
        goto LABEL_21;
      }
LABEL_19:
      outlined destroy of TokenGenerationError((uint64_t)v16, type metadata accessor for GenerationError);
      char v19 = 1;
      return v19 & 1;
    default:
      outlined init with copy of TokenGenerationError((uint64_t)v16, (uint64_t)v12, type metadata accessor for GenerationError);
      uint64_t v18 = v12[1];
      if (swift_getEnumCaseMultiPayload())
      {
LABEL_21:
        outlined destroy of (GenerationError, GenerationError)((uint64_t)v16);
LABEL_22:
        char v19 = 0;
        return v19 & 1;
      }
      if (*v12 != *(void *)v17)
      {
        outlined destroy of TokenGenerationError((uint64_t)v16, type metadata accessor for GenerationError);
        goto LABEL_22;
      }
      char v19 = v18 == *((void *)v17 + 1);
LABEL_7:
      outlined destroy of TokenGenerationError((uint64_t)v16, type metadata accessor for GenerationError);
      return v19 & 1;
  }
}

uint64_t base witness table accessor for Error in TokenGenerationError()
{
  return lazy protocol witness table accessor for type Prompt.SpecialToken and conformance Prompt.SpecialToken(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))type metadata accessor for TokenGenerationError);
}

uint64_t lazy protocol witness table accessor for type Prompt.SpecialToken and conformance Prompt.SpecialToken(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in GenerationError()
{
  return lazy protocol witness table accessor for type Prompt.SpecialToken and conformance Prompt.SpecialToken(&lazy protocol witness table cache variable for type GenerationError and conformance GenerationError, (void (*)(uint64_t))type metadata accessor for GenerationError);
}

uint64_t base witness table accessor for Error in GenerationError()
{
  return lazy protocol witness table accessor for type Prompt.SpecialToken and conformance Prompt.SpecialToken(&lazy protocol witness table cache variable for type GenerationError and conformance GenerationError, (void (*)(uint64_t))type metadata accessor for GenerationError);
}

uint64_t *initializeBufferWithCopyOfBuffer for TokenGenerationError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 3u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v7 = a2[3];
        a1[2] = a2[2];
        a1[3] = v7;
        uint64_t v8 = a2[4];
        swift_bridgeObjectRetain();
        MEMORY[0x261201A80](v8);
        a1[4] = v8;
        break;
      case 6u:
        uint64_t v9 = type metadata accessor for Prompt.SpecialToken();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, TokenGenerationError.Context))
                     + 48);
        uint64_t v11 = (uint64_t *)((char *)a1 + v10);
        unint64_t v12 = (uint64_t *)((char *)a2 + v10);
        uint64_t v13 = v12[1];
        void *v11 = *v12;
        v11[1] = v13;
        uint64_t v14 = v12[2];
        swift_bridgeObjectRetain();
        MEMORY[0x261201A80](v14);
        v11[2] = v14;
        break;
      case 0xAu:
        uint64_t v15 = a2[1];
        *a1 = *a2;
        a1[1] = v15;
        uint64_t v16 = a2[3];
        a1[2] = a2[2];
        a1[3] = v16;
        uint64_t v17 = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        MEMORY[0x261201A80](v17);
        a1[4] = v17;
        break;
      case 0xBu:
        uint64_t v18 = type metadata accessor for DocumentResource();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
        uint64_t v19 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: DocumentResource, TokenGenerationError.Context))
                     + 48);
        uint64_t v20 = (uint64_t *)((char *)a1 + v19);
        unint64_t v21 = (uint64_t *)((char *)a2 + v19);
        uint64_t v22 = v21[1];
        *uint64_t v20 = *v21;
        v20[1] = v22;
        uint64_t v23 = v21[2];
        swift_bridgeObjectRetain();
        MEMORY[0x261201A80](v23);
        v20[2] = v23;
        break;
      default:
        uint64_t v24 = a2[1];
        *a1 = *a2;
        a1[1] = v24;
        uint64_t v25 = a2[2];
        swift_bridgeObjectRetain();
        MEMORY[0x261201A80](v25);
        a1[2] = v25;
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for TokenGenerationError(uint64_t a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 4u:
    case 5u:
    case 7u:
    case 8u:
    case 9u:
    case 0xCu:
    case 0xDu:
      goto LABEL_2;
    case 3u:
      goto LABEL_8;
    case 6u:
      uint64_t v4 = type metadata accessor for Prompt.SpecialToken();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      int v5 = &demangling cache variable for type metadata for (Prompt.SpecialToken, TokenGenerationError.Context);
      goto LABEL_10;
    case 0xAu:
      swift_bridgeObjectRelease();
LABEL_8:
      swift_bridgeObjectRelease();
      uint64_t v2 = (void **)(a1 + 32);
      goto LABEL_3;
    case 0xBu:
      uint64_t v6 = type metadata accessor for DocumentResource();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
      int v5 = &demangling cache variable for type metadata for (document: DocumentResource, TokenGenerationError.Context);
LABEL_10:
      a1 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(v5) + 48);
LABEL_2:
      swift_bridgeObjectRelease();
      uint64_t v2 = (void **)(a1 + 16);
LABEL_3:
      uint64_t v3 = *v2;

      break;
    default:
      return;
  }
}

uint64_t initializeWithCopy for TokenGenerationError(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 3u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v4 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v4;
      uint64_t v5 = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
      MEMORY[0x261201A80](v5);
      *(void *)(a1 + 32) = v5;
      break;
    case 6u:
      uint64_t v6 = type metadata accessor for Prompt.SpecialToken();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, TokenGenerationError.Context))
                  + 48);
      uint64_t v8 = (void *)(a1 + v7);
      uint64_t v9 = (void *)(a2 + v7);
      uint64_t v10 = v9[1];
      *uint64_t v8 = *v9;
      v8[1] = v10;
      uint64_t v11 = v9[2];
      swift_bridgeObjectRetain();
      MEMORY[0x261201A80](v11);
      v8[2] = v11;
      break;
    case 0xAu:
      uint64_t v12 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v12;
      uint64_t v13 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v13;
      uint64_t v14 = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      MEMORY[0x261201A80](v14);
      *(void *)(a1 + 32) = v14;
      break;
    case 0xBu:
      uint64_t v15 = type metadata accessor for DocumentResource();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
      uint64_t v16 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: DocumentResource, TokenGenerationError.Context))
                   + 48);
      uint64_t v17 = (void *)(a1 + v16);
      uint64_t v18 = (void *)(a2 + v16);
      uint64_t v19 = v18[1];
      void *v17 = *v18;
      v17[1] = v19;
      uint64_t v20 = v18[2];
      swift_bridgeObjectRetain();
      MEMORY[0x261201A80](v20);
      v17[2] = v20;
      break;
    default:
      uint64_t v21 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v21;
      uint64_t v22 = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      MEMORY[0x261201A80](v22);
      *(void *)(a1 + 16) = v22;
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for TokenGenerationError(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of TokenGenerationError((uint64_t)a1, type metadata accessor for TokenGenerationError);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        uint64_t v4 = a2[4];
        swift_bridgeObjectRetain();
        MEMORY[0x261201A80](v4);
        a1[4] = v4;
        break;
      case 6u:
        uint64_t v5 = type metadata accessor for Prompt.SpecialToken();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
        uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, TokenGenerationError.Context))
                    + 48);
        uint64_t v7 = (void *)((char *)a1 + v6);
        uint64_t v8 = (void *)((char *)a2 + v6);
        *uint64_t v7 = *v8;
        v7[1] = v8[1];
        uint64_t v9 = v8[2];
        swift_bridgeObjectRetain();
        MEMORY[0x261201A80](v9);
        _OWORD v7[2] = v9;
        break;
      case 0xAu:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        uint64_t v10 = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        MEMORY[0x261201A80](v10);
        a1[4] = v10;
        break;
      case 0xBu:
        uint64_t v11 = type metadata accessor for DocumentResource();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
        uint64_t v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: DocumentResource, TokenGenerationError.Context))
                     + 48);
        uint64_t v13 = (void *)((char *)a1 + v12);
        uint64_t v14 = (void *)((char *)a2 + v12);
        *uint64_t v13 = *v14;
        v13[1] = v14[1];
        uint64_t v15 = v14[2];
        swift_bridgeObjectRetain();
        MEMORY[0x261201A80](v15);
        v13[2] = v15;
        break;
      default:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v16 = a2[2];
        swift_bridgeObjectRetain();
        MEMORY[0x261201A80](v16);
        a1[2] = v16;
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for TokenGenerationError(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 11)
  {
    uint64_t v11 = type metadata accessor for DocumentResource();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
    uint64_t v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: DocumentResource, TokenGenerationError.Context))
                 + 48);
    uint64_t v13 = &a1[v12];
    uint64_t v14 = &a2[v12];
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    *((void *)v13 + 2) = *((void *)v14 + 2);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 6)
  {
    uint64_t v7 = type metadata accessor for Prompt.SpecialToken();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, TokenGenerationError.Context))
                + 48);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    *((void *)v9 + 2) = *((void *)v10 + 2);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for TokenGenerationError(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of TokenGenerationError((uint64_t)a1, type metadata accessor for TokenGenerationError);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 11)
    {
      uint64_t v11 = type metadata accessor for DocumentResource();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
      uint64_t v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: DocumentResource, TokenGenerationError.Context))
                   + 48);
      uint64_t v13 = &a1[v12];
      uint64_t v14 = &a2[v12];
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      *((void *)v13 + 2) = *((void *)v14 + 2);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 6)
    {
      uint64_t v7 = type metadata accessor for Prompt.SpecialToken();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, TokenGenerationError.Context))
                  + 48);
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      *((void *)v9 + 2) = *((void *)v10 + 2);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for TokenGenerationError()
{
  uint64_t v5 = &unk_25F92AF68;
  uint64_t v6 = &unk_25F92AF68;
  uint64_t v7 = &unk_25F92AF68;
  uint64_t v8 = &unk_25F92AF80;
  uint64_t v9 = &unk_25F92AF68;
  uint64_t v10 = &unk_25F92AF68;
  uint64_t result = type metadata accessor for Prompt.SpecialToken();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v11 = &v4;
    uint64_t v12 = &unk_25F92AF68;
    uint64_t v13 = &unk_25F92AF68;
    uint64_t v14 = &unk_25F92AF68;
    uint64_t v15 = &unk_25F92AF80;
    uint64_t result = type metadata accessor for DocumentResource();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v16 = &v3;
      uint64_t v17 = &unk_25F92AF68;
      uint64_t v18 = &unk_25F92AF68;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void destroy for TokenGenerationError.Context(uint64_t a1)
{
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void **)(a1 + 16);
}

void *initializeBufferWithCopyOfBuffer for TokenGenerationError.Context(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  swift_bridgeObjectRetain();
  MEMORY[0x261201A80](v4);
  a1[2] = v4;
  return a1;
}

void *assignWithCopy for TokenGenerationError.Context(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a1[2];
  uint64_t v5 = a2[2];
  MEMORY[0x261201A80](v5);
  a1[2] = v5;

  return a1;
}

uint64_t assignWithTake for TokenGenerationError.Context(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

ValueMetadata *type metadata accessor for TokenGenerationError.Context()
{
  return &type metadata for TokenGenerationError.Context;
}

uint64_t *initializeBufferWithCopyOfBuffer for GenerationError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for Prompt.SpecialToken();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t destroy for GenerationError(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v3 = type metadata accessor for Prompt.SpecialToken();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *initializeWithCopy for GenerationError(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Prompt.SpecialToken();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithCopy for GenerationError(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of TokenGenerationError((uint64_t)a1, type metadata accessor for GenerationError);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Prompt.SpecialToken();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t outlined destroy of TokenGenerationError(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *initializeWithTake for GenerationError(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Prompt.SpecialToken();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for GenerationError(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of TokenGenerationError((uint64_t)a1, type metadata accessor for GenerationError);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Prompt.SpecialToken();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for GenerationError()
{
  uint64_t result = type metadata accessor for Prompt.SpecialToken();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t specialized TokenGenerationError.Code.init(rawValue:)(unint64_t result)
{
  if (result >= 0xE) {
    return 14;
  }
  return result;
}

uint64_t outlined destroy of (GenerationError, GenerationError)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GenerationError, GenerationError));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of Prompt.ToolCall(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t one-time initialization function for samplingParametersKey(uint64_t a1)
{
  return one-time initialization function for samplingParametersKey(a1, static GenerativeConfigurationKey.samplingParametersKey);
}

uint64_t one-time initialization function for draftCacheKey(uint64_t a1)
{
  return one-time initialization function for samplingParametersKey(a1, static GenerativeConfigurationKey.draftCacheKey);
}

uint64_t one-time initialization function for grammarKey(uint64_t a1)
{
  return one-time initialization function for samplingParametersKey(a1, static GenerativeConfigurationKey.grammarKey);
}

uint64_t one-time initialization function for partialGrammarKey(uint64_t a1)
{
  return one-time initialization function for samplingParametersKey(a1, static GenerativeConfigurationKey.partialGrammarKey);
}

uint64_t one-time initialization function for schemaKey(uint64_t a1)
{
  return one-time initialization function for samplingParametersKey(a1, static GenerativeConfigurationKey.schemaKey);
}

uint64_t one-time initialization function for documentsKey(uint64_t a1)
{
  return one-time initialization function for samplingParametersKey(a1, static GenerativeConfigurationKey.documentsKey);
}

uint64_t one-time initialization function for toolsKey(uint64_t a1)
{
  return one-time initialization function for samplingParametersKey(a1, static GenerativeConfigurationKey.toolsKey);
}

uint64_t one-time initialization function for toolChoiceKey(uint64_t a1)
{
  return one-time initialization function for samplingParametersKey(a1, static GenerativeConfigurationKey.toolChoiceKey);
}

uint64_t one-time initialization function for localeKey(uint64_t a1)
{
  return one-time initialization function for samplingParametersKey(a1, static GenerativeConfigurationKey.localeKey);
}

uint64_t one-time initialization function for samplingParametersKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for GenerativeConfigurationKey();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return GenerativeConfigurationKey.init(_:)();
}

uint64_t GenerativeConfigurationProtocol.samplingParameters(_:)(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 112);
  v7[6] = *(_OWORD *)(a1 + 96);
  *(_OWORD *)uint64_t v8 = v1;
  *(_DWORD *)&v8[15] = *(_DWORD *)(a1 + 127);
  long long v2 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v2;
  long long v3 = *(_OWORD *)(a1 + 48);
  _OWORD v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v3;
  long long v4 = *(_OWORD *)(a1 + 80);
  _OWORD v7[4] = *(_OWORD *)(a1 + 64);
  v7[5] = v4;
  outlined retain of SamplingParameters((uint64_t)v7);
  if (one-time initialization token for samplingParametersKey != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for GenerativeConfigurationKey();
  __swift_project_value_buffer(v5, (uint64_t)static GenerativeConfigurationKey.samplingParametersKey);
  lazy protocol witness table accessor for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope();
  lazy protocol witness table accessor for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope();
  GenerativeConfigurationProtocol._setOverridableConfiguration<A>(_:value:)();
  return outlined release of SamplingParametersEnvelope((uint64_t)v7);
}

uint64_t outlined retain of SamplingParameters(uint64_t a1)
{
  return a1;
}

uint64_t GenerativeConfigurationProtocol.samplingParameters(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OverrideHint<SamplingParameters>);
  OverrideHint.value.getter();
  if (one-time initialization token for samplingParametersKey != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for GenerativeConfigurationKey();
  __swift_project_value_buffer(v0, (uint64_t)static GenerativeConfigurationKey.samplingParametersKey);
  lazy protocol witness table accessor for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope();
  lazy protocol witness table accessor for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope();
  GenerativeConfigurationProtocol._setOverridableConfiguration<A>(_:value:)();
  return swift_bridgeObjectRelease();
}

uint64_t GenerativeConfigurationProtocol.samplingParameters(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GenerativeConfigurationProtocol.samplingParameters(_:)(a1, a2, a3, &one-time initialization token for samplingParametersKey, (uint64_t)static GenerativeConfigurationKey.samplingParametersKey);
}

uint64_t GenerativeConfigurationProtocol.samplingParameters.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v74 = a1;
  uint64_t v43 = a2;
  uint64_t v2 = type metadata accessor for GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType();
  uint64_t v38 = *(void *)(v2 - 8);
  uint64_t v39 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v37 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  uint64_t v41 = *(void *)(v4 - 8);
  uint64_t v42 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v40 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindableConfiguration?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for BindableConfiguration();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v36 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v44 = (char *)&v36 - v13;
  uint64_t v14 = type metadata accessor for GenerativeConfigurationKey();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for samplingParametersKey != -1) {
    swift_once();
  }
  uint64_t v18 = __swift_project_value_buffer(v14, (uint64_t)static GenerativeConfigurationKey.samplingParametersKey);
  uint64_t v45 = v15;
  uint64_t v46 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v18, v14);
  uint64_t v19 = (void (*)(uint64_t))MEMORY[0x263F62158];
  lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration(&lazy protocol witness table cache variable for type BindableConfiguration and conformance BindableConfiguration, MEMORY[0x263F62158]);
  lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration(&lazy protocol witness table cache variable for type BindableConfiguration and conformance BindableConfiguration, v19);
  GenerativeConfigurationProtocol._getOverridableConfiguration<A>(for:type:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v8, &demangling cache variable for type metadata for BindableConfiguration?);
    lazy protocol witness table accessor for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope();
    lazy protocol witness table accessor for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope();
    GenerativeConfigurationProtocol._getOverridableConfiguration<A>(for:type:)();
    outlined init with take of Locale?((uint64_t)&v71, (uint64_t)&v72, &demangling cache variable for type metadata for SamplingParametersEnvelope?);
    outlined init with take of Locale?((uint64_t)&v72, (uint64_t)&v47, &demangling cache variable for type metadata for SamplingParametersEnvelope?);
    if (_s15TokenGeneration26SamplingParametersEnvelopeVSgWOg((uint64_t)&v47) == 1)
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v17, v46);
      _s15TokenGeneration18SamplingParametersVSgWOi0_((uint64_t)&v63);
    }
    else
    {
      long long v69 = v53;
      *(_OWORD *)char v70 = v54[0];
      *(_WORD *)&v70[16] = v54[1];
      long long v65 = v49;
      long long v66 = v50;
      long long v67 = v51;
      long long v68 = v52;
      long long v63 = v47;
      long long v64 = v48;
      SamplingParametersEnvelope.unseal()((uint64_t)&v55);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v17, v46);
      outlined release of SamplingParametersEnvelope((uint64_t)&v72);
      long long v69 = v61;
      *(_OWORD *)char v70 = v62[0];
      *(_DWORD *)&v70[15] = *(_DWORD *)((char *)v62 + 15);
      long long v65 = v57;
      long long v66 = v58;
      long long v67 = v59;
      long long v68 = v60;
      long long v63 = v55;
      long long v64 = v56;
      protocol witness for Hashable.hash(into:) in conformance CachePolicy(&v63);
    }
    Swift::String v28 = &v63;
    return outlined init with take of Locale?((uint64_t)v28, v43, &demangling cache variable for type metadata for SamplingParameters?);
  }
  uint64_t v20 = v10;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v44, v8, v9);
  uint64_t v21 = GenerativeConfigurationProtocol.configurationBindings.getter();
  uint64_t v22 = BindableConfiguration.name.getter();
  if (*(void *)(v21 + 16))
  {
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v23);
    uint64_t v25 = v45;
    uint64_t v26 = v46;
    if (v27)
    {
      outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v24, (uint64_t)&v72);
    }
    else
    {
      long long v72 = 0u;
      long long v73 = 0u;
    }
  }
  else
  {
    long long v72 = 0u;
    long long v73 = 0u;
    uint64_t v25 = v45;
    uint64_t v26 = v46;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*((void *)&v73 + 1))
  {
    if (swift_dynamicCast())
    {
      long long v53 = v69;
      v54[0] = *(_OWORD *)v70;
      *(_DWORD *)((char *)v54 + 15) = *(_DWORD *)&v70[15];
      long long v49 = v65;
      long long v50 = v66;
      long long v51 = v67;
      long long v52 = v68;
      long long v47 = v63;
      long long v48 = v64;
      (*(void (**)(char *, uint64_t))(v20 + 8))(v44, v9);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v17, v26);
      long long v61 = v53;
      v62[0] = v54[0];
      *(_DWORD *)((char *)v62 + 15) = *(_DWORD *)((char *)v54 + 15);
      long long v57 = v49;
      long long v58 = v50;
      long long v59 = v51;
      long long v60 = v52;
      long long v55 = v47;
      long long v56 = v48;
      protocol witness for Hashable.hash(into:) in conformance CachePolicy(&v55);
      Swift::String v28 = &v55;
      return outlined init with take of Locale?((uint64_t)v28, v43, &demangling cache variable for type metadata for SamplingParameters?);
    }
  }
  else
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)&v72, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v30 = v20;
  uint64_t v31 = v44;
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v36, v44, v9);
  uint64_t v32 = v37;
  GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType.UnboundBindableConfigurationErrorInfo.init(bindableConfiguration:)();
  uint64_t v34 = v38;
  uint64_t v33 = v39;
  (*(void (**)(char *, void, uint64_t))(v38 + 104))(v32, *MEMORY[0x263F40B20], v39);
  uint64_t v35 = v40;
  static GenerativeError.RuntimeError.ErrorType.configurationError(type:)();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v32, v33);
  type metadata accessor for GenerativeError();
  lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
  swift_allocError();
  static GenerativeError.runtimeError(type:)();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v35, v42);
  swift_willThrow();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v17, v46);
}

uint64_t _s15TokenGeneration26SamplingParametersEnvelopeVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double _s15TokenGeneration18SamplingParametersVSgWOi0_(uint64_t a1)
{
  *(_DWORD *)(a1 + 127) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t GenerativeConfigurationProtocol.draftCache(_:)()
{
  if (one-time initialization token for draftCacheKey != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for GenerativeConfigurationKey();
  __swift_project_value_buffer(v0, (uint64_t)static GenerativeConfigurationKey.draftCacheKey);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  return GenerativeConfigurationProtocol._setOverridableConfiguration<A>(_:value:)();
}

{
  uint64_t v0;

  if (one-time initialization token for draftCacheKey != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for GenerativeConfigurationKey();
  __swift_project_value_buffer(v0, (uint64_t)static GenerativeConfigurationKey.draftCacheKey);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OverrideHint<[String]>);
  OverrideHint.value.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  GenerativeConfigurationProtocol._setOverridableConfiguration<A>(_:value:)();
  return swift_bridgeObjectRelease();
}

uint64_t GenerativeConfigurationProtocol.draftCache(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GenerativeConfigurationProtocol.samplingParameters(_:)(a1, a2, a3, &one-time initialization token for draftCacheKey, (uint64_t)static GenerativeConfigurationKey.draftCacheKey);
}

uint64_t GenerativeConfigurationProtocol.samplingParameters(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  if (*a4 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for GenerativeConfigurationKey();
  __swift_project_value_buffer(v6, a5);
  type metadata accessor for BindableConfiguration();
  uint64_t v7 = (void (*)(uint64_t))MEMORY[0x263F62158];
  lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration(&lazy protocol witness table cache variable for type BindableConfiguration and conformance BindableConfiguration, MEMORY[0x263F62158]);
  lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration(&lazy protocol witness table cache variable for type BindableConfiguration and conformance BindableConfiguration, v7);
  return GenerativeConfigurationProtocol._setOverridableConfiguration<A>(_:value:)();
}

uint64_t GenerativeConfigurationProtocol.draftCache.getter(char *a1)
{
  uint64_t v42 = a1;
  uint64_t v1 = type metadata accessor for GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType();
  uint64_t v35 = *(void *)(v1 - 8);
  uint64_t v36 = v1;
  MEMORY[0x270FA5388](v1);
  uint64_t v34 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  uint64_t v38 = *(void *)(v3 - 8);
  uint64_t v39 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v37 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindableConfiguration?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for BindableConfiguration();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v33 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v41 = (char *)&v32 - v12;
  uint64_t v13 = type metadata accessor for GenerativeConfigurationKey();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for draftCacheKey != -1) {
    swift_once();
  }
  uint64_t v17 = __swift_project_value_buffer(v13, (uint64_t)static GenerativeConfigurationKey.draftCacheKey);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v17, v13);
  uint64_t v18 = (void (*)(uint64_t))MEMORY[0x263F62158];
  lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration(&lazy protocol witness table cache variable for type BindableConfiguration and conformance BindableConfiguration, MEMORY[0x263F62158]);
  uint64_t v40 = v13;
  lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration(&lazy protocol witness table cache variable for type BindableConfiguration and conformance BindableConfiguration, v18);
  GenerativeConfigurationProtocol._getOverridableConfiguration<A>(for:type:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
  {
    uint64_t v32 = v14;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v41, v7, v8);
    uint64_t v20 = GenerativeConfigurationProtocol.configurationBindings.getter();
    uint64_t v21 = BindableConfiguration.name.getter();
    if (*(void *)(v20 + 16))
    {
      unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22);
      unint64_t v24 = v16;
      if (v25)
      {
        outlined init with copy of Any(*(void *)(v20 + 56) + 32 * v23, (uint64_t)&v43);
      }
      else
      {
        long long v43 = 0u;
        long long v44 = 0u;
      }
    }
    else
    {
      long long v43 = 0u;
      long long v44 = 0u;
      unint64_t v24 = v16;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((void *)&v44 + 1))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      if (swift_dynamicCast())
      {
        uint64_t v19 = v45;
        (*(void (**)(char *, uint64_t))(v9 + 8))(v41, v8);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v24, v40);
        return v19;
      }
      uint64_t v42 = v24;
    }
    else
    {
      uint64_t v42 = v24;
      outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)&v43, &demangling cache variable for type metadata for Any?);
    }
    uint64_t v26 = v41;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v33, v41, v8);
    char v27 = v34;
    GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType.UnboundBindableConfigurationErrorInfo.init(bindableConfiguration:)();
    uint64_t v29 = v35;
    uint64_t v28 = v36;
    (*(void (**)(char *, void, uint64_t))(v35 + 104))(v27, *MEMORY[0x263F40B20], v36);
    uint64_t v30 = v37;
    static GenerativeError.RuntimeError.ErrorType.configurationError(type:)();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v28);
    uint64_t v19 = type metadata accessor for GenerativeError();
    lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
    swift_allocError();
    static GenerativeError.runtimeError(type:)();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v30, v39);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v26, v8);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v42, v40);
    return v19;
  }
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v7, &demangling cache variable for type metadata for BindableConfiguration?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  GenerativeConfigurationProtocol._getOverridableConfiguration<A>(for:type:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v40);
  return v43;
}

uint64_t GenerativeConfigurationProtocol.grammar(_:)()
{
  if (one-time initialization token for grammarKey != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for GenerativeConfigurationKey();
  __swift_project_value_buffer(v0, (uint64_t)static GenerativeConfigurationKey.grammarKey);
  return GenerativeConfigurationProtocol._setOverridableConfiguration<A>(_:value:)();
}

uint64_t GenerativeConfigurationProtocol.grammar(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GenerativeConfigurationProtocol.grammar(_:)(a1, a2, a3, &one-time initialization token for grammarKey, (uint64_t)static GenerativeConfigurationKey.grammarKey);
}

{
  return GenerativeConfigurationProtocol.samplingParameters(_:)(a1, a2, a3, &one-time initialization token for grammarKey, (uint64_t)static GenerativeConfigurationKey.grammarKey);
}

uint64_t GenerativeConfigurationProtocol.grammar.getter(uint64_t a1, uint64_t a2)
{
  return GenerativeConfigurationProtocol.grammar.getter(a1, a2, &one-time initialization token for grammarKey, (uint64_t)static GenerativeConfigurationKey.grammarKey);
}

uint64_t GenerativeConfigurationProtocol.partialGrammar(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GenerativeConfigurationProtocol.grammar(_:)(a1, a2, a3, &one-time initialization token for partialGrammarKey, (uint64_t)static GenerativeConfigurationKey.partialGrammarKey);
}

{
  return GenerativeConfigurationProtocol.samplingParameters(_:)(a1, a2, a3, &one-time initialization token for partialGrammarKey, (uint64_t)static GenerativeConfigurationKey.partialGrammarKey);
}

uint64_t GenerativeConfigurationProtocol.grammar(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  if (*a4 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for GenerativeConfigurationKey();
  __swift_project_value_buffer(v6, a5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OverrideHint<String>);
  OverrideHint.value.getter();
  GenerativeConfigurationProtocol._setOverridableConfiguration<A>(_:value:)();
  return swift_bridgeObjectRelease();
}

uint64_t GenerativeConfigurationProtocol.partialGrammar.getter(uint64_t a1, uint64_t a2)
{
  return GenerativeConfigurationProtocol.grammar.getter(a1, a2, &one-time initialization token for partialGrammarKey, (uint64_t)static GenerativeConfigurationKey.partialGrammarKey);
}

uint64_t GenerativeConfigurationProtocol.grammar.getter(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v54 = a2;
  uint64_t v58 = a1;
  uint64_t v6 = type metadata accessor for GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType();
  uint64_t v47 = *(void *)(v6 - 8);
  uint64_t v48 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v46 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  uint64_t v50 = *(void *)(v8 - 8);
  uint64_t v51 = v8;
  MEMORY[0x270FA5388](v8);
  long long v49 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindableConfiguration?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for BindableConfiguration();
  uint64_t v53 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v45 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  long long v52 = (char *)&v42 - v16;
  uint64_t v17 = type metadata accessor for GenerativeConfigurationKey();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a3 != -1)
  {
    uint64_t v41 = v19;
    swift_once();
    uint64_t v19 = v41;
  }
  uint64_t v22 = v19;
  uint64_t v23 = __swift_project_value_buffer(v19, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v23, v22);
  unint64_t v24 = (void (*)(uint64_t))MEMORY[0x263F62158];
  lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration(&lazy protocol witness table cache variable for type BindableConfiguration and conformance BindableConfiguration, MEMORY[0x263F62158]);
  lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration(&lazy protocol witness table cache variable for type BindableConfiguration and conformance BindableConfiguration, v24);
  GenerativeConfigurationProtocol._getOverridableConfiguration<A>(for:type:)();
  uint64_t v25 = v53;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v12, 1, v13) != 1)
  {
    uint64_t v27 = v13;
    long long v43 = v21;
    uint64_t v44 = v22;
    uint64_t v28 = v25;
    uint64_t v29 = v27;
    (*(void (**)(char *, char *))(v25 + 32))(v52, v12);
    uint64_t v30 = GenerativeConfigurationProtocol.configurationBindings.getter();
    uint64_t v31 = BindableConfiguration.name.getter();
    if (*(void *)(v30 + 16) && (unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32), (v34 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v30 + 56) + 32 * v33, (uint64_t)&v56);
    }
    else
    {
      long long v56 = 0u;
      long long v57 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((void *)&v57 + 1))
    {
      if (swift_dynamicCast())
      {
        uint64_t v26 = v55;
        (*(void (**)(char *, uint64_t))(v25 + 8))(v52, v29);
        (*(void (**)(char *, uint64_t))(v18 + 8))(v43, v44);
        return v26;
      }
    }
    else
    {
      outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)&v56, &demangling cache variable for type metadata for Any?);
    }
    uint64_t v35 = v52;
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v45, v52, v29);
    uint64_t v36 = v46;
    GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType.UnboundBindableConfigurationErrorInfo.init(bindableConfiguration:)();
    uint64_t v38 = v47;
    uint64_t v37 = v48;
    (*(void (**)(char *, void, uint64_t))(v47 + 104))(v36, *MEMORY[0x263F40B20], v48);
    uint64_t v39 = v49;
    static GenerativeError.RuntimeError.ErrorType.configurationError(type:)();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v36, v37);
    uint64_t v26 = type metadata accessor for GenerativeError();
    lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
    swift_allocError();
    static GenerativeError.runtimeError(type:)();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v39, v51);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v35, v29);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v43, v44);
    return v26;
  }
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v12, &demangling cache variable for type metadata for BindableConfiguration?);
  GenerativeConfigurationProtocol._getOverridableConfiguration<A>(for:type:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v22);
  return v56;
}

uint64_t GenerativeConfigurationProtocol.schema.getter(uint64_t a1, uint64_t a2)
{
  return GenerativeConfigurationProtocol.schema.getter(a1, a2, &one-time initialization token for schemaKey, (uint64_t)static GenerativeConfigurationKey.schemaKey, MEMORY[0x263F40DE8]);
}

uint64_t GenerativeConfigurationProtocol.schema(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GenerativeConfigurationProtocol.schema(_:)(a1, a2, a3, &one-time initialization token for schemaKey, (uint64_t)static GenerativeConfigurationKey.schemaKey, MEMORY[0x263F40DE8]);
}

uint64_t GenerativeConfigurationProtocol.schema(_:)()
{
  if (one-time initialization token for schemaKey != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for GenerativeConfigurationKey();
  __swift_project_value_buffer(v0, (uint64_t)static GenerativeConfigurationKey.schemaKey);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Schema?);
  return GenerativeConfigurationProtocol._setRunnableConfiguration<A>(_:value:)();
}

uint64_t GenerativeConfigurationProtocol.documents(_:)()
{
  if (one-time initialization token for documentsKey != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for GenerativeConfigurationKey();
  __swift_project_value_buffer(v0, (uint64_t)static GenerativeConfigurationKey.documentsKey);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DocumentResourceIdentifier]);
  lazy protocol witness table accessor for type [DocumentResourceIdentifier] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [DocumentResourceIdentifier] and conformance <A> [A], &lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier);
  lazy protocol witness table accessor for type [DocumentResourceIdentifier] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [DocumentResourceIdentifier] and conformance <A> [A], &lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier);
  return GenerativeConfigurationProtocol._setOverridableConfiguration<A>(_:value:)();
}

uint64_t GenerativeConfigurationProtocol.documents.getter()
{
  if (one-time initialization token for documentsKey != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for GenerativeConfigurationKey();
  __swift_project_value_buffer(v0, (uint64_t)static GenerativeConfigurationKey.documentsKey);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DocumentResourceIdentifier]);
  lazy protocol witness table accessor for type [DocumentResourceIdentifier] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [DocumentResourceIdentifier] and conformance <A> [A], &lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier);
  lazy protocol witness table accessor for type [DocumentResourceIdentifier] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [DocumentResourceIdentifier] and conformance <A> [A], &lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier);
  GenerativeConfigurationProtocol._getOverridableConfiguration<A>(for:type:)();
  return v2;
}

uint64_t GenerativeConfigurationProtocol.tools(_:)()
{
  if (one-time initialization token for toolsKey != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for GenerativeConfigurationKey();
  __swift_project_value_buffer(v0, (uint64_t)static GenerativeConfigurationKey.toolsKey);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ToolType]);
  return GenerativeConfigurationProtocol._setRunnableConfiguration<A>(_:value:)();
}

uint64_t GenerativeConfigurationProtocol.tools.getter()
{
  if (one-time initialization token for toolsKey != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for GenerativeConfigurationKey();
  __swift_project_value_buffer(v0, (uint64_t)static GenerativeConfigurationKey.toolsKey);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ToolType]);
  GenerativeConfigurationProtocol._getRunnableConfiguration<A>(for:type:)();
  return v2;
}

uint64_t GenerativeConfigurationProtocol.toolChoice(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GenerativeConfigurationProtocol.schema(_:)(a1, a2, a3, &one-time initialization token for toolChoiceKey, (uint64_t)static GenerativeConfigurationKey.toolChoiceKey, MEMORY[0x263F40BD0]);
}

uint64_t GenerativeConfigurationProtocol.schema(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void (*a6)(void))
{
  if (*a4 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for GenerativeConfigurationKey();
  __swift_project_value_buffer(v8, a5);
  a6(0);
  return GenerativeConfigurationProtocol._setRunnableConfiguration<A>(_:value:)();
}

uint64_t GenerativeConfigurationProtocol.toolChoice.getter(uint64_t a1, uint64_t a2)
{
  return GenerativeConfigurationProtocol.schema.getter(a1, a2, &one-time initialization token for toolChoiceKey, (uint64_t)static GenerativeConfigurationKey.toolChoiceKey, MEMORY[0x263F40BD0]);
}

uint64_t GenerativeConfigurationProtocol.schema.getter(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for GenerativeConfigurationKey();
  __swift_project_value_buffer(v7, a4);
  a5(0);
  return GenerativeConfigurationProtocol._getRunnableConfiguration<A>(for:type:)();
}

uint64_t GenerativeConfigurationProtocol<>.locale(_:)()
{
  if (one-time initialization token for localeKey != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for GenerativeConfigurationKey();
  __swift_project_value_buffer(v0, (uint64_t)static GenerativeConfigurationKey.localeKey);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  lazy protocol witness table accessor for type Locale? and conformance <A> A?(&lazy protocol witness table cache variable for type Locale? and conformance <A> A?, &lazy protocol witness table cache variable for type Locale and conformance Locale);
  lazy protocol witness table accessor for type Locale? and conformance <A> A?(&lazy protocol witness table cache variable for type Locale? and conformance <A> A?, &lazy protocol witness table cache variable for type Locale and conformance Locale);
  return GenerativeConfigurationProtocol._setOverridableConfiguration<A>(_:value:)();
}

uint64_t GenerativeConfigurationProtocol<>.locale.getter()
{
  if (one-time initialization token for localeKey != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for GenerativeConfigurationKey();
  __swift_project_value_buffer(v0, (uint64_t)static GenerativeConfigurationKey.localeKey);
  type metadata accessor for Locale();
  uint64_t v1 = (void (*)(uint64_t))MEMORY[0x263F07690];
  lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
  lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration(&lazy protocol witness table cache variable for type Locale and conformance Locale, v1);
  return GenerativeConfigurationProtocol._getOverridableConfiguration<A>(for:type:)();
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A](unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [DocumentResourceIdentifier] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DocumentResourceIdentifier]);
    lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration(a2, MEMORY[0x263F415B0]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Locale? and conformance <A> A?(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Locale?);
    lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration(a2, MEMORY[0x263F07690]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t TokenGenerator._tokenCount<A>(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[24] = a3;
  v4[25] = v3;
  v4[22] = a1;
  v4[23] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
  v4[26] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for PromptTemplateInfo();
  v4[27] = v6;
  v4[28] = *(void *)(v6 - 8);
  v4[29] = swift_task_alloc();
  v4[30] = type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel(0);
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Prompt();
  v4[33] = v7;
  v4[34] = *(void *)(v7 - 8);
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  v4[37] = swift_task_alloc();
  v4[38] = *(void *)(a2 - 8);
  v4[39] = swift_task_alloc();
  v4[40] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for GenerativeFunctionInstrumenter();
  v4[41] = v8;
  v4[42] = *(void *)(v8 - 8);
  v4[43] = swift_task_alloc();
  v4[44] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenGenerator._tokenCount<A>(configuration:), 0, 0);
}

{
  uint64_t v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4[24] = a3;
  v4[25] = v3;
  v4[22] = a1;
  v4[23] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
  v4[26] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for PromptTemplateInfo();
  v4[27] = v6;
  v4[28] = *(void *)(v6 - 8);
  v4[29] = swift_task_alloc();
  v4[30] = type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel(0);
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Prompt();
  v4[33] = v7;
  v4[34] = *(void *)(v7 - 8);
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  v4[37] = swift_task_alloc();
  v4[38] = *(void *)(a2 - 8);
  v4[39] = swift_task_alloc();
  v4[40] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for GenerativeFunctionInstrumenter();
  v4[41] = v8;
  v4[42] = *(void *)(v8 - 8);
  v4[43] = swift_task_alloc();
  v4[44] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenGenerator._tokenCount<A>(configuration:), 0, 0);
}

uint64_t TokenGenerator._tokenCount<A>(configuration:)()
{
  uint64_t v20 = v0;
  if (*(void *)(*(void *)(v0 + 200) + 24)) {
    swift_bridgeObjectRetain();
  }
  uint64_t v1 = *(void *)(v0 + 352);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v13 = *(void *)(v0 + 344);
  uint64_t v14 = *(void *)(v0 + 328);
  uint64_t v3 = *(void *)(v0 + 320);
  uint64_t v4 = *(void *)(v0 + 304);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 176);
  GenerativeConfigurationProtocol.generateGenerativeFunctionInstrumenter(useCaseIdentifier:eventReporter:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v13, v1, v14);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 360) = v7;
  *(void *)(v0 + 368) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v3, v6, v5);
  RequestMetadata.init<A>(generativeFunctionInstrumenter:configuration:)(v13, v3, v5, &v15);
  *(void *)(v0 + 376) = v15;
  *(_OWORD *)(v0 + 384) = v16;
  *(void *)(v0 + 400) = v17;
  *(_OWORD *)(v0 + 408) = v18;
  *(void *)(v0 + 424) = v19;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 432) = v8;
  *uint64_t v8 = v0;
  v8[1] = TokenGenerator._tokenCount<A>(configuration:);
  uint64_t v9 = *(void *)(v0 + 296);
  uint64_t v10 = *(void *)(v0 + 184);
  uint64_t v11 = *(void *)(v0 + 192);
  return GenerativeConfigurationProtocol<>.renderToTokenGenerationPrompt()(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 440) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = TokenGenerator._tokenCount<A>(configuration:);
  }
  else
  {
    uint64_t v2 = TokenGenerator._tokenCount<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[45];
  uint64_t v2 = v0[39];
  uint64_t v4 = v0[22];
  uint64_t v3 = v0[23];
  (*(void (**)(void, void, void))(v0[34] + 16))(v0[36], v0[37], v0[33]);
  v1(v2, v4, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[56] = v5;
  *uint64_t v5 = v0;
  v5[1] = TokenGenerator._tokenCount<A>(configuration:);
  uint64_t v6 = v0[39];
  uint64_t v7 = v0[36];
  uint64_t v8 = v0[32];
  uint64_t v9 = v0[23];
  uint64_t v10 = v0[24];
  return TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:completionConfiguration:)(v8, v7, v6, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 456) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = TokenGenerator._tokenCount<A>(configuration:);
  }
  else
  {
    uint64_t v2 = TokenGenerator._tokenCount<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  int EnumCaseMultiPayload;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  outlined init with copy of TokenGenerator.PromptInputFromGenerativeModel(v0[32], v0[31]);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v3 = v0[52];
  uint64_t v2 = v0[53];
  uint64_t v5 = v0[50];
  uint64_t v4 = v0[51];
  uint64_t v6 = v0[48];
  uint64_t v7 = v0[49];
  uint64_t v8 = v0[47];
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v22 = v0[52];
    uint64_t v23 = v0[53];
    uint64_t v9 = v0[31];
    uint64_t v11 = v0[28];
    uint64_t v10 = v0[29];
    uint64_t v12 = v0[27];
    uint64_t v20 = v0[26];
    uint64_t v21 = v0[51];
    uint64_t v13 = v9
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplateInfo: PromptTemplateInfo, renderedPrompt: Prompt?))
                 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v10, v9, v12);
    outlined init with take of Prompt?(v13, v20);
    v0[2] = v8;
    v0[3] = v6;
    v0[4] = v7;
    v0[5] = v5;
    v0[6] = v21;
    v0[7] = v22;
    v0[8] = v23;
    uint64_t v14 = (void *)swift_task_alloc();
    v0[60] = v14;
    void *v14 = v0;
    v14[1] = TokenGenerator._tokenCount<A>(configuration:);
    uint64_t v15 = v0[29];
    long long v16 = v0[26];
    return TokenGenerator.countTokens(prompt:promptTemplateInfo:metadata:)(v16, v15, (uint64_t)(v0 + 2));
  }
  else
  {
    (*(void (**)(void, void, void))(v0[34] + 32))(v0[35], v0[31], v0[33]);
    v0[9] = v8;
    v0[10] = v6;
    v0[11] = v7;
    v0[12] = v5;
    v0[13] = v4;
    v0[14] = v3;
    v0[15] = v2;
    long long v18 = (void *)swift_task_alloc();
    v0[58] = v18;
    *long long v18 = v0;
    v18[1] = TokenGenerator._tokenCount<A>(configuration:);
    uint64_t v19 = v0[35];
    return TokenGenerator.countTokens(in:metadata:)(v19, (uint64_t)(v0 + 9));
  }
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(void, void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  uint64_t v1 = v0[32];
  uint64_t v2 = *(void (**)(void, void))(v0[34] + 8);
  v2(v0[35], v0[33]);
  outlined destroy of TokenGenerator.PromptInputFromGenerativeModel(v1);
  uint64_t v3 = v0[44];
  uint64_t v5 = v0[41];
  uint64_t v4 = v0[42];
  uint64_t v8 = v0[17];
  v2(v0[37], v0[33]);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(uint64_t))v0[1];
  return v6(v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v11;
  uint64_t v12;

  uint64_t v1 = v0[34];
  uint64_t v2 = v0[32];
  uint64_t v4 = v0[28];
  uint64_t v3 = v0[29];
  uint64_t v5 = v0[27];
  outlined destroy of Prompt?(v0[26]);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  outlined destroy of TokenGenerator.PromptInputFromGenerativeModel(v2);
  uint64_t v6 = v0[44];
  uint64_t v8 = v0[41];
  uint64_t v7 = v0[42];
  uint64_t v11 = v0[20];
  (*(void (**)(void, void))(v1 + 8))(v0[37], v0[33]);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(uint64_t))v0[1];
  return v9(v11);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[42] + 8))(v0[44], v0[41]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[44];
  uint64_t v2 = v0[41];
  uint64_t v3 = v0[42];
  (*(void (**)(void, void))(v0[34] + 8))(v0[37], v0[33]);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = v0[44];
  uint64_t v3 = v0[41];
  uint64_t v2 = v0[42];
  uint64_t v4 = v0[37];
  uint64_t v6 = v0[32];
  uint64_t v5 = v0[33];
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0[34] + 8);
  v7(v0[35], v5);
  outlined destroy of TokenGenerator.PromptInputFromGenerativeModel(v6);
  v7(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;

  uint64_t v12 = v0[44];
  uint64_t v1 = v0[41];
  uint64_t v2 = v0[42];
  uint64_t v3 = v0[37];
  uint64_t v4 = v0[33];
  uint64_t v5 = v0[34];
  uint64_t v6 = v0[32];
  uint64_t v7 = v0[28];
  uint64_t v8 = v0[29];
  uint64_t v9 = v0[27];
  outlined destroy of Prompt?(v0[26]);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  outlined destroy of TokenGenerator.PromptInputFromGenerativeModel(v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v12, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  long long v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v20 = v0;
  if (*(void *)(*(void *)(v0 + 200) + 24)) {
    swift_bridgeObjectRetain();
  }
  uint64_t v1 = *(void *)(v0 + 352);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v13 = *(void *)(v0 + 344);
  uint64_t v14 = *(void *)(v0 + 328);
  uint64_t v3 = *(void *)(v0 + 320);
  uint64_t v4 = *(void *)(v0 + 304);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 176);
  GenerativeConfigurationProtocol.generateGenerativeFunctionInstrumenter(useCaseIdentifier:eventReporter:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v13, v1, v14);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 360) = v7;
  *(void *)(v0 + 368) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v3, v6, v5);
  RequestMetadata.init<A>(generativeFunctionInstrumenter:configuration:)(v13, v3, v5, &v15);
  *(void *)(v0 + 376) = v15;
  *(_OWORD *)(v0 + 384) = v16;
  *(void *)(v0 + 400) = v17;
  *(_OWORD *)(v0 + 408) = v18;
  *(void *)(v0 + 424) = v19;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 432) = v8;
  *uint64_t v8 = v0;
  v8[1] = TokenGenerator._tokenCount<A>(configuration:);
  uint64_t v9 = *(void *)(v0 + 296);
  uint64_t v10 = *(void *)(v0 + 184);
  uint64_t v11 = *(void *)(v0 + 192);
  return GenerativeConfigurationProtocol<>.renderToTokenGenerationPrompt()(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 440) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = TokenGenerator._tokenCount<A>(configuration:);
  }
  else
  {
    uint64_t v2 = TokenGenerator._tokenCount<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[45];
  uint64_t v2 = v0[39];
  uint64_t v4 = v0[22];
  uint64_t v3 = v0[23];
  (*(void (**)(void, void, void))(v0[34] + 16))(v0[36], v0[37], v0[33]);
  v1(v2, v4, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[56] = v5;
  *uint64_t v5 = v0;
  v5[1] = TokenGenerator._tokenCount<A>(configuration:);
  uint64_t v6 = v0[39];
  uint64_t v7 = v0[36];
  uint64_t v8 = v0[32];
  uint64_t v9 = v0[23];
  uint64_t v10 = v0[24];
  return TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:chatMessagesConfiguration:)(v8, v7, v6, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 456) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = TokenGenerator._tokenCount<A>(configuration:);
  }
  else
  {
    uint64_t v2 = TokenGenerator._tokenCount<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  int EnumCaseMultiPayload;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  outlined init with copy of TokenGenerator.PromptInputFromGenerativeModel(v0[32], v0[31]);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v3 = v0[52];
  uint64_t v2 = v0[53];
  uint64_t v5 = v0[50];
  uint64_t v4 = v0[51];
  uint64_t v6 = v0[48];
  uint64_t v7 = v0[49];
  uint64_t v8 = v0[47];
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v22 = v0[52];
    uint64_t v23 = v0[53];
    uint64_t v9 = v0[31];
    uint64_t v11 = v0[28];
    uint64_t v10 = v0[29];
    uint64_t v12 = v0[27];
    uint64_t v20 = v0[26];
    uint64_t v21 = v0[51];
    uint64_t v13 = v9
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplateInfo: PromptTemplateInfo, renderedPrompt: Prompt?))
                 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v10, v9, v12);
    outlined init with take of Prompt?(v13, v20);
    v0[2] = v8;
    v0[3] = v6;
    v0[4] = v7;
    v0[5] = v5;
    v0[6] = v21;
    v0[7] = v22;
    v0[8] = v23;
    uint64_t v14 = (void *)swift_task_alloc();
    v0[60] = v14;
    void *v14 = v0;
    v14[1] = TokenGenerator._tokenCount<A>(configuration:);
    uint64_t v15 = v0[29];
    long long v16 = v0[26];
    return TokenGenerator.countTokens(prompt:promptTemplateInfo:metadata:)(v16, v15, (uint64_t)(v0 + 2));
  }
  else
  {
    (*(void (**)(void, void, void))(v0[34] + 32))(v0[35], v0[31], v0[33]);
    v0[9] = v8;
    v0[10] = v6;
    v0[11] = v7;
    v0[12] = v5;
    v0[13] = v4;
    v0[14] = v3;
    v0[15] = v2;
    long long v18 = (void *)swift_task_alloc();
    v0[58] = v18;
    *long long v18 = v0;
    v18[1] = TokenGenerator._tokenCount<A>(configuration:);
    uint64_t v19 = v0[35];
    return TokenGenerator.countTokens(in:metadata:)(v19, (uint64_t)(v0 + 9));
  }
}

uint64_t TokenGenerator._tokenCount<A>(configuration:)(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[16] = v2;
  v3[17] = a1;
  v3[18] = v1;
  v3[59] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = TokenGenerator._tokenCount<A>(configuration:);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = TokenGenerator._tokenCount<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v3 = (void *)*v2;
  v3[19] = v2;
  v3[20] = a1;
  v3[21] = v1;
  v3[61] = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v4 = TokenGenerator._tokenCount<A>(configuration:);
  }
  else {
    uint64_t v4 = TokenGenerator._tokenCount<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v3 = (void *)*v2;
  v3[16] = v2;
  v3[17] = a1;
  v3[18] = v1;
  v3[59] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = TokenGenerator._tokenCount<A>(configuration:);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = TokenGenerator._tokenCount<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v3 = (void *)*v2;
  v3[19] = v2;
  v3[20] = a1;
  v3[21] = v1;
  v3[61] = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v4 = TokenGenerator._tokenCount<A>(configuration:);
  }
  else {
    uint64_t v4 = TokenGenerator._tokenCount<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t outlined init with copy of TokenGenerator.PromptInputFromGenerativeModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Prompt?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TokenGenerator.PromptInputFromGenerativeModel(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t protocol witness for CompletionLanguageModelProvidingTokenCountable._tokenCount<A>(configuration:) in conformance TokenGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for CompletionLanguageModelProvidingTokenCountable._tokenCount<A>(configuration:) in conformance TokenGenerator;
  return TokenGenerator._tokenCount<A>(configuration:)(a1, a2, a3);
}

uint64_t protocol witness for ChatLanguageModelProvidingTokenCountable._tokenCount<A>(configuration:) in conformance TokenGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for ChatLanguageModelProvidingTokenCountable._tokenCount<A>(configuration:) in conformance TokenGenerator;
  return TokenGenerator._tokenCount<A>(configuration:)(a1, a2, a3);
}

uint64_t protocol witness for ChatLanguageModelProvidingTokenCountable._tokenCount<A>(configuration:) in conformance TokenGenerator(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15TokenGeneration6PromptV14ToolCallResultVG_AH4TurnVs5NeverOTg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v19[0] = a1;
  v19[1] = a2;
  uint64_t v6 = type metadata accessor for Prompt.Turn(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = MEMORY[0x263F8EE78];
  if (v10)
  {
    uint64_t v21 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    uint64_t v11 = v21;
    uint64_t v12 = (uint64_t *)(a3 + 56);
    while (1)
    {
      uint64_t v13 = *(v12 - 2);
      uint64_t v14 = *(v12 - 1);
      uint64_t v15 = *v12;
      v20[0] = *(v12 - 3);
      v20[1] = v13;
      v20[2] = v14;
      v20[3] = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      ((void (*)(void *))v19[0])(v20);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v21 = v11;
      unint64_t v17 = *(void *)(v11 + 16);
      unint64_t v16 = *(void *)(v11 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        uint64_t v11 = v21;
      }
      v12 += 4;
      *(void *)(v11 + 16) = v17 + 1;
      outlined init with take of PromptCompletionStream((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v17, type metadata accessor for Prompt.Turn);
      if (!--v10) {
        return v11;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v11;
}

uint64_t _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF15TokenGeneration21PromptCompletionEvent_pSg_s5Error_pTg5Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Prompt.Rendering?(a1, (uint64_t)v11, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v12 = type metadata accessor for TaskPriority();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v11, &demangling cache variable for type metadata for TaskPriority?);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v14 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v16 = v15;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v14 = 0;
  uint64_t v16 = 0;
LABEL_6:
  uint64_t v17 = *v6;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  long long v18 = (void *)(v16 | v14);
  if (v16 | v14)
  {
    v21[0] = 0;
    v21[1] = 0;
    long long v18 = v21;
    void v21[2] = v14;
    v21[3] = v16;
  }
  v20[1] = 1;
  v20[2] = v18;
  v20[3] = v17;
  swift_task_create();
  return swift_release();
}

uint64_t _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF15TokenGeneration16PromptCompletionV_s5Error_pTg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Prompt.Rendering?(a1, (uint64_t)v9, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v9, &demangling cache variable for type metadata for TaskPriority?);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
LABEL_6:
  uint64_t v15 = *v4;
  type metadata accessor for PromptCompletion(0);
  uint64_t v16 = (void *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v16 = v19;
    void v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration0E39GeneratorResponsePromptCompletionStreamV13AsyncIteratorV_Tg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v4[7] = swift_task_alloc();
  return MEMORY[0x270FA2498](_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration0E39GeneratorResponsePromptCompletionStreamV13AsyncIteratorV_Tg5TY0_, 0, 0);
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration0E39GeneratorResponsePromptCompletionStreamV13AsyncIteratorV_Tg5TY0_()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v3 = v1 + *(int *)(type metadata accessor for TokenGeneratorResponsePromptCompletionStream.AsyncIterator(0) + 20);
  uint64_t v4 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v3, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v2, 0, 1, v4);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[8] = v6;
  *uint64_t v6 = v0;
  v6[1] = _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration0E39GeneratorResponsePromptCompletionStreamV13AsyncIteratorV_Tg5TQ1_;
  uint64_t v8 = v0[6];
  uint64_t v7 = v0[7];
  uint64_t v9 = v0[3];
  return specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(v9, v7, v8);
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration0E39GeneratorResponsePromptCompletionStreamV13AsyncIteratorV_Tg5TQ1_()
{
  uint64_t v2 = *(void *)(*v1 + 56);
  uint64_t v3 = *v1;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v2, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  if (v0)
  {
    return MEMORY[0x270FA2498](_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration0E39GeneratorResponsePromptCompletionStreamV13AsyncIteratorV_Tg5TY2_, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration0E39GeneratorResponsePromptCompletionStreamV13AsyncIteratorV_Tg5TY2_()
{
  if (*(void *)(v0 + 32))
  {
    swift_getObjectType();
    uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v3 = v2;
  }
  else
  {
    uint64_t v1 = 0;
    uint64_t v3 = 0;
  }
  return MEMORY[0x270FA2498](_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration0E39GeneratorResponsePromptCompletionStreamV13AsyncIteratorV_Tg5TY3_, v1, v3);
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration0E39GeneratorResponsePromptCompletionStreamV13AsyncIteratorV_Tg5TY3_()
{
  v0[2] = v0[9];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF16GenerativeModels47TokenGeneratorResponseStringStreamAsyncIteratorV_Tg5(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v3[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF16GenerativeModels47TokenGeneratorResponseStringStreamAsyncIteratorV_Tg5TY0_, 0, 0);
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF16GenerativeModels47TokenGeneratorResponseStringStreamAsyncIteratorV_Tg5TY0_()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v3 = v1 + *(int *)(type metadata accessor for TokenGeneratorResponseStringStreamAsyncIterator(0) + 20);
  uint64_t v4 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v3, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v2, 0, 1, v4);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[7] = v6;
  *uint64_t v6 = v0;
  v6[1] = _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF16GenerativeModels47TokenGeneratorResponseStringStreamAsyncIteratorV_Tg5TQ1_;
  uint64_t v7 = v0[5];
  uint64_t v8 = v0[6];
  return specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(v8, v7);
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF16GenerativeModels47TokenGeneratorResponseStringStreamAsyncIteratorV_Tg5TQ1_(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  *(void *)(*v3 + 64) = v2;
  swift_task_dealloc();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v6 + 48), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  if (v2)
  {
    return MEMORY[0x270FA2498](_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF16GenerativeModels47TokenGeneratorResponseStringStreamAsyncIteratorV_Tg5TY2_, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
    return v8(a1, a2);
  }
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF16GenerativeModels47TokenGeneratorResponseStringStreamAsyncIteratorV_Tg5TY2_()
{
  if (*(void *)(v0 + 24))
  {
    swift_getObjectType();
    uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v3 = v2;
  }
  else
  {
    uint64_t v1 = 0;
    uint64_t v3 = 0;
  }
  return MEMORY[0x270FA2498](_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF16GenerativeModels47TokenGeneratorResponseStringStreamAsyncIteratorV_Tg5TY3_, v1, v3);
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF16GenerativeModels47TokenGeneratorResponseStringStreamAsyncIteratorV_Tg5TY3_()
{
  v0[2] = v0[8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF16GenerativeModels39StringRenderedPromptSanitizerWithRunnerV_s5NeverO0cD10Foundation0efghI13ConfigurationVTg5Tm@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X3>, uint64_t *a4@<X4>, uint64_t (*a5)(void)@<X5>, uint64_t a6@<X8>)
{
  v21[1] = a2;
  uint64_t v22 = a1;
  uint64_t v11 = a3(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v21 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a4);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Prompt.Rendering?(v6, (uint64_t)v17, a4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v17, 1, v11) == 1)
  {
    uint64_t v18 = a5(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a6, 1, 1, v18);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v17, v11);
    v22(v14);
    if (v7)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      uint64_t v20 = a5(0);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(a6, 0, 1, v20);
    }
  }
}

uint64_t specialized closure #1 in withTimeout<A>(timeout:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  *(double *)(v5 + 136) = a5;
  *(void *)(v5 + 120) = a3;
  *(void *)(v5 + 128) = a4;
  *(void *)(v5 + 104) = a1;
  *(void *)(v5 + 112) = a2;
  uint64_t v6 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  *(void *)(v5 + 144) = v6;
  *(void *)(v5 + 152) = *(void *)(v6 - 8);
  *(void *)(v5 + 160) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for GenerativeError.RuntimeError();
  *(void *)(v5 + 168) = v7;
  *(void *)(v5 + 176) = *(void *)(v7 - 8);
  *(void *)(v5 + 184) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for GenerativeError.ErrorType();
  *(void *)(v5 + 192) = v8;
  *(void *)(v5 + 200) = *(void *)(v8 - 8);
  *(void *)(v5 + 208) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeError?);
  *(void *)(v5 + 216) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for GenerativeError();
  *(void *)(v5 + 224) = v9;
  *(void *)(v5 + 232) = *(void *)(v9 - 8);
  *(void *)(v5 + 240) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v5 + 248) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in withTimeout<A>(timeout:_:), 0, 0);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  *(double *)(v5 + 56) = a5;
  *(void *)(v5 + 40) = a3;
  *(void *)(v5 + 48) = a4;
  *(void *)(v5 + 24) = a1;
  *(void *)(v5 + 32) = a2;
  uint64_t v6 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  *(void *)(v5 + 64) = v6;
  *(void *)(v5 + 72) = *(void *)(v6 - 8);
  *(void *)(v5 + 80) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for GenerativeError.RuntimeError();
  *(void *)(v5 + 88) = v7;
  *(void *)(v5 + 96) = *(void *)(v7 - 8);
  *(void *)(v5 + 104) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for GenerativeError.ErrorType();
  *(void *)(v5 + 112) = v8;
  *(void *)(v5 + 120) = *(void *)(v8 - 8);
  *(void *)(v5 + 128) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeError?);
  *(void *)(v5 + 136) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for GenerativeError();
  *(void *)(v5 + 144) = v9;
  *(void *)(v5 + 152) = *(void *)(v9 - 8);
  *(void *)(v5 + 160) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter)?);
  *(void *)(v5 + 168) = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter));
  *(void *)(v5 + 176) = v10;
  *(void *)(v5 + 184) = *(void *)(v10 - 8);
  *(void *)(v5 + 192) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v5 + 200) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in withTimeout<A>(timeout:_:), 0, 0);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  *(double *)(v5 + 56) = a5;
  *(void *)(v5 + 40) = a3;
  *(void *)(v5 + 48) = a4;
  *(void *)(v5 + 24) = a1;
  *(void *)(v5 + 32) = a2;
  uint64_t v6 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  *(void *)(v5 + 64) = v6;
  *(void *)(v5 + 72) = *(void *)(v6 - 8);
  *(void *)(v5 + 80) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for GenerativeError.RuntimeError();
  *(void *)(v5 + 88) = v7;
  *(void *)(v5 + 96) = *(void *)(v7 - 8);
  *(void *)(v5 + 104) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for GenerativeError.ErrorType();
  *(void *)(v5 + 112) = v8;
  *(void *)(v5 + 120) = *(void *)(v8 - 8);
  *(void *)(v5 + 128) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeError?);
  *(void *)(v5 + 136) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for GenerativeError();
  *(void *)(v5 + 144) = v9;
  *(void *)(v5 + 152) = *(void *)(v9 - 8);
  *(void *)(v5 + 160) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptCompletion?);
  *(void *)(v5 + 168) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for PromptCompletion(0);
  *(void *)(v5 + 176) = v10;
  *(void *)(v5 + 184) = *(void *)(v10 - 8);
  *(void *)(v5 + 192) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v5 + 200) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in withTimeout<A>(timeout:_:), 0, 0);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  *(double *)(v5 + 56) = a5;
  *(void *)(v5 + 40) = a3;
  *(void *)(v5 + 48) = a4;
  *(void *)(v5 + 24) = a1;
  *(void *)(v5 + 32) = a2;
  uint64_t v6 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  *(void *)(v5 + 64) = v6;
  *(void *)(v5 + 72) = *(void *)(v6 - 8);
  *(void *)(v5 + 80) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for GenerativeError.RuntimeError();
  *(void *)(v5 + 88) = v7;
  *(void *)(v5 + 96) = *(void *)(v7 - 8);
  *(void *)(v5 + 104) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for GenerativeError.ErrorType();
  *(void *)(v5 + 112) = v8;
  *(void *)(v5 + 120) = *(void *)(v8 - 8);
  *(void *)(v5 + 128) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeError?);
  *(void *)(v5 + 136) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for GenerativeError();
  *(void *)(v5 + 144) = v9;
  *(void *)(v5 + 152) = *(void *)(v9 - 8);
  *(void *)(v5 + 160) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<String, Error>?);
  *(void *)(v5 + 168) = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<String, Error>);
  *(void *)(v5 + 176) = v10;
  *(void *)(v5 + 184) = *(void *)(v10 - 8);
  *(void *)(v5 + 192) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v5 + 200) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in withTimeout<A>(timeout:_:), 0, 0);
}

{
  uint64_t v5;
  void *v10;
  uint64_t v12;

  *(void *)(v5 + 16) = a1;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v10;
  *uint64_t v10 = v5;
  v10[1] = specialized closure #1 in withTimeout<A>(timeout:_:);
  return specialized closure #1 in withTimeout<A>(timeout:_:)(a2, a3, a4, a5);
}

{
  uint64_t v5;
  void *v10;
  uint64_t v12;

  *(void *)(v5 + 16) = a1;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v10;
  *uint64_t v10 = v5;
  v10[1] = specialized closure #1 in withTimeout<A>(timeout:_:);
  return specialized closure #1 in withTimeout<A>(timeout:_:)(a2, a3, a4, a5);
}

uint64_t specialized closure #1 in withTimeout<A>(timeout:_:)()
{
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[17];
  uint64_t v4 = v0[15];
  uint64_t v3 = v0[16];
  v0[32] = mach_absolute_time();
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v1, 1, 1, v5);
  uint64_t v7 = (void *)swift_allocObject();
  _OWORD v7[2] = 0;
  v7[3] = 0;
  _OWORD v7[4] = v4;
  v7[5] = v3;
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF15TokenGeneration21PromptCompletionEvent_pSg_s5Error_pTg5Tm(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in withTimeout<A>(timeout:_:), (uint64_t)v7, &demangling cache variable for type metadata for PromptCompletionEvent?);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for TaskPriority?);
  v6(v1, 1, 1, v5);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  _OWORD v8[4] = v2;
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF15TokenGeneration21PromptCompletionEvent_pSg_s5Error_pTg5Tm(v1, (uint64_t)&async function pointer to partial apply for specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:), (uint64_t)v8, &demangling cache variable for type metadata for PromptCompletionEvent?);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[33] = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<PromptCompletionEvent?, Error>);
  *uint64_t v9 = v0;
  v9[1] = specialized closure #1 in withTimeout<A>(timeout:_:);
  return MEMORY[0x270FA2048](v0 + 7, 0, 0, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized closure #1 in withTimeout<A>(timeout:_:);
  }
  else {
    uint64_t v2 = specialized closure #1 in withTimeout<A>(timeout:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;

  if (*(void *)(v0 + 80) == 1) {
LABEL_7:
  }
    __break(1u);
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 104);
  outlined init with take of Locale?(v0 + 56, v0 + 16, &demangling cache variable for type metadata for PromptCompletionEvent?);
  outlined init with copy of Prompt.Rendering?(v0 + 16, v2, &demangling cache variable for type metadata for PromptCompletionEvent?);
  uint64_t v3 = mach_absolute_time();
  uint64_t v4 = v3 - v1;
  if (v3 < v1)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v6 = *(uint64_t **)(v0 + 112);
  *(void *)(v0 + 280) = 0;
  mach_timebase_info((mach_timebase_info_t)(v0 + 280));
  LODWORD(v7) = *(_DWORD *)(v0 + 280);
  *(double *)&uint64_t v8 = (double)v7;
  uint64_t v9 = (double)v4 * *(double *)&v8;
  LODWORD(v8) = *(_DWORD *)(v0 + 284);
  uint64_t v10 = v9 / ((double)v8 * 1000000000.0);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0 + 16, &demangling cache variable for type metadata for PromptCompletionEvent?);
  *(double *)(v5 + 40) = v10;
  uint64_t v11 = *v6;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptCompletionEvent?);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  MEMORY[0x261200EC0](v11, v12, v13, MEMORY[0x263F8E4E0]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(void);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  *(void *)(v0 + 96) = *(void *)(v0 + 272);
  uint64_t v1 = *(void *)(v0 + 232);
  MEMORY[0x261201A80]();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v3 = swift_dynamicCast();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56);
  if (v3)
  {
    uint64_t v6 = *(void *)(v0 + 232);
    uint64_t v5 = *(void *)(v0 + 240);
    uint64_t v8 = *(void *)(v0 + 216);
    uint64_t v7 = *(void *)(v0 + 224);
    uint64_t v10 = *(void *)(v0 + 200);
    uint64_t v9 = *(void *)(v0 + 208);
    uint64_t v11 = *(void *)(v0 + 192);
    v4(v8, 0, 1, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v5, v8, v7);
    GenerativeError.type.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v10 + 88))(v9, v11) == *MEMORY[0x263F40B80])
    {
      uint64_t v12 = *(void *)(v0 + 208);
      uint64_t v13 = *(void *)(v0 + 184);
      uint64_t v14 = *(void *)(v0 + 168);
      uint64_t v15 = *(void *)(v0 + 176);
      uint64_t v17 = *(void *)(v0 + 152);
      uint64_t v16 = *(void *)(v0 + 160);
      uint64_t v18 = *(void *)(v0 + 144);
      (*(void (**)(uint64_t, void))(*(void *)(v0 + 200) + 96))(v12, *(void *)(v0 + 192));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v13, v12, v14);
      GenerativeError.RuntimeError.type.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v17 + 88))(v16, v18) == *MEMORY[0x263F40B50])
      {
        if (one-time initialization token for generator != -1) {
          swift_once();
        }
        uint64_t v19 = type metadata accessor for Logger();
        __swift_project_value_buffer(v19, (uint64_t)static Log.generator);
        uint64_t v20 = Logger.logObject.getter();
        uint64_t v21 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v22 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v22 = 0;
          _os_log_impl(&dword_25F79F000, v20, v21, "Aborting execution as closure exceeded maxiumum allotted time.", v22, 2u);
          MEMORY[0x261201C80](v22, -1, -1);
        }
        uint64_t v23 = *(void *)(v0 + 232);
        unint64_t v24 = *(void *)(v0 + 224);
        uint64_t v25 = *(void *)(v0 + 176);
        uint64_t v26 = *(void *)(v0 + 184);
        uint64_t v27 = *(void *)(v0 + 168);
        uint64_t v48 = *(void *)(v0 + 240);
        uint64_t v50 = *(void *)(v0 + 160);
        uint64_t v28 = *(void *)(v0 + 152);
        uint64_t v47 = *(void *)(v0 + 144);

        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v48, v24);
        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v50, v47);
      }
      else
      {
        uint64_t v36 = *(void *)(v0 + 232);
        uint64_t v37 = *(void *)(v0 + 224);
        uint64_t v39 = *(void *)(v0 + 176);
        uint64_t v38 = *(void *)(v0 + 184);
        uint64_t v40 = *(void *)(v0 + 168);
        long long v49 = *(void *)(v0 + 240);
        uint64_t v51 = *(void *)(v0 + 160);
        uint64_t v42 = *(void *)(v0 + 144);
        uint64_t v41 = *(void *)(v0 + 152);
        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
        (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v49, v37);
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v51, v42);
      }
    }
    else
    {
      uint64_t v31 = *(void *)(v0 + 232);
      uint64_t v30 = *(void *)(v0 + 240);
      uint64_t v32 = *(void *)(v0 + 224);
      char v34 = *(void *)(v0 + 200);
      unint64_t v33 = *(void *)(v0 + 208);
      uint64_t v35 = *(void *)(v0 + 192);
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    }
  }
  else
  {
    uint64_t v29 = *(void *)(v0 + 216);
    v4(v29, 1, 1, *(void *)(v0 + 224));
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v29, &demangling cache variable for type metadata for GenerativeError?);
    swift_willThrow();
  }
  long long v43 = **(void **)(v0 + 112);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptCompletionEvent?);
  MEMORY[0x261200EC0](v43, v44, v2, MEMORY[0x263F8E4E0]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v45 = *(uint64_t (**)(void))(v0 + 8);
  return v45();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v1 = v0[22];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  v0[23] = mach_absolute_time();
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v1, 1, 1, v5);
  uint64_t v7 = (void *)swift_allocObject();
  _OWORD v7[2] = 0;
  v7[3] = 0;
  _OWORD v7[4] = v4;
  v7[5] = v3;
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF15TokenGeneration21PromptCompletionEvent_pSg_s5Error_pTg5Tm(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in withTimeout<A>(timeout:_:), (uint64_t)v7, &demangling cache variable for type metadata for String?);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for TaskPriority?);
  v6(v1, 1, 1, v5);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  _OWORD v8[4] = v2;
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF15TokenGeneration21PromptCompletionEvent_pSg_s5Error_pTg5Tm(v1, (uint64_t)&async function pointer to partial apply for specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:), (uint64_t)v8, &demangling cache variable for type metadata for String?);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[24] = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<String?, Error>);
  *uint64_t v9 = v0;
  v9[1] = specialized closure #1 in withTimeout<A>(timeout:_:);
  return MEMORY[0x270FA2048](v0 + 2, 0, 0, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized closure #1 in withTimeout<A>(timeout:_:);
  }
  else {
    uint64_t v2 = specialized closure #1 in withTimeout<A>(timeout:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t (*v12)(uint64_t, uint64_t, __n128);
  unint64_t v14;
  uint64_t v15;

  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  if (v3 == 1) {
LABEL_7:
  }
    __break(1u);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v6 = mach_absolute_time();
  if (v6 < v5)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v14 = v6 - v5;
  uint64_t v7 = *(uint64_t **)(v0 + 40);
  *(_DWORD *)(v0 + 212) = 0;
  *(_DWORD *)(v0 + 208) = 0;
  mach_timebase_info((mach_timebase_info_t)(v0 + 208));
  LODWORD(v2) = *(_DWORD *)(v0 + 208);
  LODWORD(v1) = *(_DWORD *)(v0 + 212);
  uint64_t v8 = *v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  MEMORY[0x261200EC0](v8, v9, v10, MEMORY[0x263F8E4E0]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v0 + 8);
  v11.n128_f64[0] = (double)v14 * (double)v2 / ((double)v1 * 1000000000.0);
  return v12(v4, v3, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(void);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  *(void *)(v0 + 32) = *(void *)(v0 + 200);
  uint64_t v1 = *(void *)(v0 + 160);
  MEMORY[0x261201A80]();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v3 = swift_dynamicCast();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56);
  if (v3)
  {
    uint64_t v6 = *(void *)(v0 + 160);
    uint64_t v5 = *(void *)(v0 + 168);
    uint64_t v8 = *(void *)(v0 + 144);
    uint64_t v7 = *(void *)(v0 + 152);
    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v9 = *(void *)(v0 + 136);
    uint64_t v11 = *(void *)(v0 + 120);
    v4(v8, 0, 1, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v5, v8, v7);
    GenerativeError.type.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v10 + 88))(v9, v11) == *MEMORY[0x263F40B80])
    {
      uint64_t v12 = *(void *)(v0 + 136);
      uint64_t v13 = *(void *)(v0 + 112);
      uint64_t v14 = *(void *)(v0 + 96);
      uint64_t v15 = *(void *)(v0 + 104);
      uint64_t v17 = *(void *)(v0 + 80);
      uint64_t v16 = *(void *)(v0 + 88);
      uint64_t v18 = *(void *)(v0 + 72);
      (*(void (**)(uint64_t, void))(*(void *)(v0 + 128) + 96))(v12, *(void *)(v0 + 120));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v13, v12, v14);
      GenerativeError.RuntimeError.type.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v17 + 88))(v16, v18) == *MEMORY[0x263F40B50])
      {
        if (one-time initialization token for generator != -1) {
          swift_once();
        }
        uint64_t v19 = type metadata accessor for Logger();
        __swift_project_value_buffer(v19, (uint64_t)static Log.generator);
        uint64_t v20 = Logger.logObject.getter();
        uint64_t v21 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v22 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v22 = 0;
          _os_log_impl(&dword_25F79F000, v20, v21, "Aborting execution as closure exceeded maxiumum allotted time.", v22, 2u);
          MEMORY[0x261201C80](v22, -1, -1);
        }
        uint64_t v23 = *(void *)(v0 + 160);
        unint64_t v24 = *(void *)(v0 + 152);
        uint64_t v25 = *(void *)(v0 + 104);
        uint64_t v26 = *(void *)(v0 + 112);
        uint64_t v27 = *(void *)(v0 + 96);
        uint64_t v48 = *(void *)(v0 + 168);
        uint64_t v50 = *(void *)(v0 + 88);
        uint64_t v28 = *(void *)(v0 + 80);
        uint64_t v47 = *(void *)(v0 + 72);

        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v48, v24);
        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v50, v47);
      }
      else
      {
        uint64_t v36 = *(void *)(v0 + 160);
        uint64_t v37 = *(void *)(v0 + 152);
        uint64_t v39 = *(void *)(v0 + 104);
        uint64_t v38 = *(void *)(v0 + 112);
        uint64_t v40 = *(void *)(v0 + 96);
        long long v49 = *(void *)(v0 + 168);
        uint64_t v51 = *(void *)(v0 + 88);
        uint64_t v42 = *(void *)(v0 + 72);
        uint64_t v41 = *(void *)(v0 + 80);
        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
        (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v49, v37);
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v51, v42);
      }
    }
    else
    {
      uint64_t v31 = *(void *)(v0 + 160);
      uint64_t v30 = *(void *)(v0 + 168);
      uint64_t v32 = *(void *)(v0 + 152);
      char v34 = *(void *)(v0 + 128);
      unint64_t v33 = *(void *)(v0 + 136);
      uint64_t v35 = *(void *)(v0 + 120);
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    }
  }
  else
  {
    uint64_t v29 = *(void *)(v0 + 144);
    v4(v29, 1, 1, *(void *)(v0 + 152));
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v29, &demangling cache variable for type metadata for GenerativeError?);
    swift_willThrow();
  }
  long long v43 = **(void **)(v0 + 40);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  MEMORY[0x261200EC0](v43, v44, v2, MEMORY[0x263F8E4E0]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v45 = *(uint64_t (**)(void))(v0 + 8);
  return v45();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  uint64_t v1 = v0[25];
  uint64_t v2 = v0[7];
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  v0[26] = mach_absolute_time();
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v1, 1, 1, v5);
  uint64_t v7 = (void *)swift_allocObject();
  _OWORD v7[2] = 0;
  v7[3] = 0;
  _OWORD v7[4] = v4;
  v7[5] = v3;
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF15TokenGeneration21PromptCompletionEvent_pSg_s5Error_pTg5Tm(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in withTimeout<A>(timeout:_:), (uint64_t)v7, &demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter));
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for TaskPriority?);
  v6(v1, 1, 1, v5);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  _OWORD v8[4] = v2;
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF15TokenGeneration21PromptCompletionEvent_pSg_s5Error_pTg5Tm(v1, (uint64_t)&async function pointer to partial apply for specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:), (uint64_t)v8, &demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter));
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[27] = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<(tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter), Error>);
  *uint64_t v9 = v0;
  v9[1] = specialized closure #1 in withTimeout<A>(timeout:_:);
  uint64_t v11 = v0[21];
  return MEMORY[0x270FA2048](v11, 0, 0, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized closure #1 in withTimeout<A>(timeout:_:);
  }
  else {
    uint64_t v2 = specialized closure #1 in withTimeout<A>(timeout:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  mach_timebase_info *v0;
  mach_timebase_info *v1;
  uint64_t v2;
  mach_timebase_info v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  mach_timebase_info v10;
  mach_timebase_info v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  uint64_t v21;

  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t)v0[21];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)&v0[23] + 48))(v2, 1, *(void *)&v0[22]) == 1)LABEL_7:__break(1u); {
  uint64_t v3 = v0[26];
  }
  uint64_t v4 = (uint64_t)v1[24];
  uint64_t v5 = (uint64_t)v1[3];
  outlined init with take of Locale?(v2, v4, &demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter));
  uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (result: (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter), duration: Double))
              + 48);
  outlined init with copy of Prompt.Rendering?(v4, v5, &demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter));
  uint64_t v7 = mach_absolute_time();
  uint64_t v8 = v7 - *(void *)&v3;
  if (v7 < *(void *)&v3)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v9 = (uint64_t)v1[24];
  uint64_t v10 = v1[22];
  uint64_t v11 = v1[3];
  uint64_t v12 = (uint64_t *)v1[4];
  v1[29].denom = 0;
  v1[29].numer = 0;
  mach_timebase_info(v1 + 29);
  LODWORD(v13) = v1[29].numer;
  *(double *)&uint64_t v14 = (double)v13;
  uint64_t v15 = (double)v8 * *(double *)&v14;
  LODWORD(v14) = v1[29].denom;
  uint64_t v16 = v15 / ((double)v14 * 1000000000.0);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v9, &demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter));
  *(double *)(*(void *)&v11 + v6) = v16;
  uint64_t v17 = *v12;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  ((void (*)(void, void, void, void))MEMORY[0x261200EC0])(v17, v10, v18, MEMORY[0x263F8E4E0]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v1[1];
  return v19();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(void);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  *(void *)(v0 + 16) = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 152);
  MEMORY[0x261201A80]();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v3 = swift_dynamicCast();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56);
  if (v3)
  {
    uint64_t v6 = *(void *)(v0 + 152);
    uint64_t v5 = *(void *)(v0 + 160);
    uint64_t v8 = *(void *)(v0 + 136);
    uint64_t v7 = *(void *)(v0 + 144);
    uint64_t v10 = *(void *)(v0 + 120);
    uint64_t v9 = *(void *)(v0 + 128);
    uint64_t v11 = *(void *)(v0 + 112);
    v4(v8, 0, 1, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v5, v8, v7);
    GenerativeError.type.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v10 + 88))(v9, v11) == *MEMORY[0x263F40B80])
    {
      uint64_t v12 = *(void *)(v0 + 128);
      uint64_t v13 = *(void *)(v0 + 104);
      uint64_t v14 = *(void *)(v0 + 88);
      uint64_t v15 = *(void *)(v0 + 96);
      uint64_t v17 = *(void *)(v0 + 72);
      uint64_t v16 = *(void *)(v0 + 80);
      uint64_t v18 = *(void *)(v0 + 64);
      (*(void (**)(uint64_t, void))(*(void *)(v0 + 120) + 96))(v12, *(void *)(v0 + 112));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v13, v12, v14);
      GenerativeError.RuntimeError.type.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v17 + 88))(v16, v18) == *MEMORY[0x263F40B50])
      {
        if (one-time initialization token for generator != -1) {
          swift_once();
        }
        uint64_t v19 = type metadata accessor for Logger();
        __swift_project_value_buffer(v19, (uint64_t)static Log.generator);
        uint64_t v20 = Logger.logObject.getter();
        uint64_t v21 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v22 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v22 = 0;
          _os_log_impl(&dword_25F79F000, v20, v21, "Aborting execution as closure exceeded maxiumum allotted time.", v22, 2u);
          MEMORY[0x261201C80](v22, -1, -1);
        }
        unint64_t v24 = *(void *)(v0 + 152);
        uint64_t v23 = *(void *)(v0 + 160);
        uint64_t v25 = *(void *)(v0 + 144);
        uint64_t v26 = *(void *)(v0 + 96);
        uint64_t v27 = *(void *)(v0 + 88);
        uint64_t v48 = *(void *)(v0 + 80);
        uint64_t v28 = *(void *)(v0 + 72);
        uint64_t v45 = *(void *)(v0 + 104);
        uint64_t v46 = *(void *)(v0 + 64);

        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v45, v27);
        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v48, v46);
      }
      else
      {
        uint64_t v37 = *(void *)(v0 + 152);
        uint64_t v36 = *(void *)(v0 + 160);
        uint64_t v38 = *(void *)(v0 + 144);
        uint64_t v40 = *(void *)(v0 + 96);
        uint64_t v39 = *(void *)(v0 + 104);
        uint64_t v41 = *(void *)(v0 + 88);
        uint64_t v42 = *(void *)(v0 + 72);
        uint64_t v47 = *(void *)(v0 + 64);
        long long v49 = *(void *)(v0 + 80);
        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
        (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v49, v47);
      }
    }
    else
    {
      uint64_t v31 = *(void *)(v0 + 152);
      uint64_t v30 = *(void *)(v0 + 160);
      uint64_t v32 = *(void *)(v0 + 144);
      char v34 = *(void *)(v0 + 120);
      unint64_t v33 = *(void *)(v0 + 128);
      uint64_t v35 = *(void *)(v0 + 112);
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    }
  }
  else
  {
    uint64_t v29 = *(void *)(v0 + 136);
    v4(v29, 1, 1, *(void *)(v0 + 144));
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v29, &demangling cache variable for type metadata for GenerativeError?);
    swift_willThrow();
  }
  MEMORY[0x261200EC0](**(void **)(v0 + 32), *(void *)(v0 + 176), v2, MEMORY[0x263F8E4E0]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v43 = *(uint64_t (**)(void))(v0 + 8);
  return v43();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v1 = v0[23];
  uint64_t v2 = v0[9];
  uint64_t v4 = v0[7];
  uint64_t v3 = v0[8];
  v0[24] = mach_absolute_time();
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v1, 1, 1, v5);
  uint64_t v7 = (void *)swift_allocObject();
  _OWORD v7[2] = 0;
  v7[3] = 0;
  _OWORD v7[4] = v4;
  v7[5] = v3;
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF15TokenGeneration21PromptCompletionEvent_pSg_s5Error_pTg5Tm(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in withTimeout<A>(timeout:_:), (uint64_t)v7, &demangling cache variable for type metadata for (content: String, tokens: [String]));
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for TaskPriority?);
  v6(v1, 1, 1, v5);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  _OWORD v8[4] = v2;
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF15TokenGeneration21PromptCompletionEvent_pSg_s5Error_pTg5Tm(v1, (uint64_t)&async function pointer to partial apply for specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:), (uint64_t)v8, &demangling cache variable for type metadata for (content: String, tokens: [String]));
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[25] = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<(content: String, tokens: [String]), Error>);
  *uint64_t v9 = v0;
  v9[1] = specialized closure #1 in withTimeout<A>(timeout:_:);
  return MEMORY[0x270FA2048](v0 + 2, 0, 0, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized closure #1 in withTimeout<A>(timeout:_:);
  }
  else {
    uint64_t v2 = specialized closure #1 in withTimeout<A>(timeout:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  mach_timebase_info *v0;
  unint64_t v1;
  unint64_t v2;
  mach_timebase_info v3;
  mach_timebase_info v4;
  mach_timebase_info *v5;
  uint64_t v6;
  mach_timebase_info v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t (*v14)(mach_timebase_info, mach_timebase_info, mach_timebase_info, __n128);
  unint64_t v16;
  mach_timebase_info v17;
  uint64_t v18;

  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  if (!*(void *)&v3) {
LABEL_7:
  }
    __break(1u);
  uint64_t v5 = v0;
  uint64_t v6 = (uint64_t)v0[24];
  uint64_t v7 = v5[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = mach_absolute_time();
  if (v8 < v6)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v16 = v8 - v6;
  uint64_t v17 = v4;
  uint64_t v9 = (uint64_t *)v5[6];
  v5[27].denom = 0;
  v5[27].numer = 0;
  mach_timebase_info(v5 + 27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  LODWORD(v2) = v5[27].numer;
  LODWORD(v1) = v5[27].denom;
  uint64_t v10 = *v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (content: String, tokens: [String]));
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  MEMORY[0x261200EC0](v10, v11, v12, MEMORY[0x263F8E4E0]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(mach_timebase_info, mach_timebase_info, mach_timebase_info, __n128))v5[1];
  v13.n128_f64[0] = (double)v16 * (double)v2 / ((double)v1 * 1000000000.0);
  return ((uint64_t (*)(void, void, void, __n128))v14)(v17, v3, v7, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(void);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  *(void *)(v0 + 40) = *(void *)(v0 + 208);
  uint64_t v1 = *(void *)(v0 + 168);
  MEMORY[0x261201A80]();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v3 = swift_dynamicCast();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56);
  if (v3)
  {
    uint64_t v6 = *(void *)(v0 + 168);
    uint64_t v5 = *(void *)(v0 + 176);
    uint64_t v8 = *(void *)(v0 + 152);
    uint64_t v7 = *(void *)(v0 + 160);
    uint64_t v10 = *(void *)(v0 + 136);
    uint64_t v9 = *(void *)(v0 + 144);
    uint64_t v11 = *(void *)(v0 + 128);
    v4(v8, 0, 1, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v5, v8, v7);
    GenerativeError.type.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v10 + 88))(v9, v11) == *MEMORY[0x263F40B80])
    {
      uint64_t v12 = *(void *)(v0 + 144);
      uint64_t v13 = *(void *)(v0 + 120);
      uint64_t v14 = *(void *)(v0 + 104);
      uint64_t v15 = *(void *)(v0 + 112);
      uint64_t v17 = *(void *)(v0 + 88);
      uint64_t v16 = *(void *)(v0 + 96);
      uint64_t v18 = *(void *)(v0 + 80);
      (*(void (**)(uint64_t, void))(*(void *)(v0 + 136) + 96))(v12, *(void *)(v0 + 128));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v13, v12, v14);
      GenerativeError.RuntimeError.type.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v17 + 88))(v16, v18) == *MEMORY[0x263F40B50])
      {
        if (one-time initialization token for generator != -1) {
          swift_once();
        }
        uint64_t v19 = type metadata accessor for Logger();
        __swift_project_value_buffer(v19, (uint64_t)static Log.generator);
        uint64_t v20 = Logger.logObject.getter();
        uint64_t v21 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v22 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v22 = 0;
          _os_log_impl(&dword_25F79F000, v20, v21, "Aborting execution as closure exceeded maxiumum allotted time.", v22, 2u);
          MEMORY[0x261201C80](v22, -1, -1);
        }
        unint64_t v24 = *(void *)(v0 + 168);
        uint64_t v23 = *(void *)(v0 + 176);
        uint64_t v25 = *(void *)(v0 + 160);
        uint64_t v26 = *(void *)(v0 + 112);
        uint64_t v27 = *(void *)(v0 + 104);
        uint64_t v50 = *(void *)(v0 + 96);
        uint64_t v28 = *(void *)(v0 + 88);
        uint64_t v47 = *(void *)(v0 + 120);
        uint64_t v48 = *(void *)(v0 + 80);

        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v47, v27);
        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v50, v48);
      }
      else
      {
        uint64_t v37 = *(void *)(v0 + 168);
        uint64_t v36 = *(void *)(v0 + 176);
        uint64_t v38 = *(void *)(v0 + 160);
        uint64_t v40 = *(void *)(v0 + 112);
        uint64_t v39 = *(void *)(v0 + 120);
        uint64_t v41 = *(void *)(v0 + 104);
        uint64_t v42 = *(void *)(v0 + 88);
        long long v49 = *(void *)(v0 + 80);
        uint64_t v51 = *(void *)(v0 + 96);
        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
        (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v51, v49);
      }
    }
    else
    {
      uint64_t v31 = *(void *)(v0 + 168);
      uint64_t v30 = *(void *)(v0 + 176);
      uint64_t v32 = *(void *)(v0 + 160);
      char v34 = *(void *)(v0 + 136);
      unint64_t v33 = *(void *)(v0 + 144);
      uint64_t v35 = *(void *)(v0 + 128);
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    }
  }
  else
  {
    uint64_t v29 = *(void *)(v0 + 152);
    v4(v29, 1, 1, *(void *)(v0 + 160));
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v29, &demangling cache variable for type metadata for GenerativeError?);
    swift_willThrow();
  }
  long long v43 = **(void **)(v0 + 48);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (content: String, tokens: [String]));
  MEMORY[0x261200EC0](v43, v44, v2, MEMORY[0x263F8E4E0]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v45 = *(uint64_t (**)(void))(v0 + 8);
  return v45();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  uint64_t v1 = v0[25];
  uint64_t v2 = v0[7];
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  v0[26] = mach_absolute_time();
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v1, 1, 1, v5);
  uint64_t v7 = (void *)swift_allocObject();
  _OWORD v7[2] = 0;
  v7[3] = 0;
  _OWORD v7[4] = v4;
  v7[5] = v3;
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF15TokenGeneration16PromptCompletionV_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in withTimeout<A>(timeout:_:), (uint64_t)v7);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for TaskPriority?);
  v6(v1, 1, 1, v5);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  _OWORD v8[4] = v2;
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF15TokenGeneration16PromptCompletionV_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:), (uint64_t)v8);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[27] = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<PromptCompletion, Error>);
  *uint64_t v9 = v0;
  v9[1] = specialized closure #1 in withTimeout<A>(timeout:_:);
  uint64_t v11 = v0[21];
  return MEMORY[0x270FA2048](v11, 0, 0, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized closure #1 in withTimeout<A>(timeout:_:);
  }
  else {
    uint64_t v2 = specialized closure #1 in withTimeout<A>(timeout:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  mach_timebase_info *v0;
  mach_timebase_info *v1;
  uint64_t v2;
  mach_timebase_info v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  mach_timebase_info v10;
  uint64_t *v11;
  mach_timebase_info v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  uint64_t v21;

  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t)v0[21];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)&v0[23] + 48))(v2, 1, *(void *)&v0[22]) == 1)LABEL_7:__break(1u); {
  uint64_t v3 = v0[26];
  }
  uint64_t v4 = (uint64_t)v1[24];
  uint64_t v5 = (uint64_t)v1[3];
  outlined init with take of PromptCompletionStream(v2, v4, type metadata accessor for PromptCompletion);
  uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (result: PromptCompletion, duration: Double))
              + 48);
  outlined init with copy of PromptCompletion(v4, v5, type metadata accessor for PromptCompletion);
  uint64_t v7 = mach_absolute_time();
  uint64_t v8 = v7 - *(void *)&v3;
  if (v7 < *(void *)&v3)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v9 = (uint64_t)v1[24];
  uint64_t v10 = v1[22];
  uint64_t v12 = v1[3];
  uint64_t v11 = (uint64_t *)v1[4];
  v1[29].denom = 0;
  v1[29].numer = 0;
  mach_timebase_info(v1 + 29);
  LODWORD(v13) = v1[29].numer;
  *(double *)&uint64_t v14 = (double)v13;
  uint64_t v15 = (double)v8 * *(double *)&v14;
  LODWORD(v14) = v1[29].denom;
  uint64_t v16 = v15 / ((double)v14 * 1000000000.0);
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v9, type metadata accessor for PromptCompletion);
  *(double *)(*(void *)&v12 + v6) = v16;
  uint64_t v17 = *v11;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  ((void (*)(void, void, void, void))MEMORY[0x261200EC0])(v17, v10, v18, MEMORY[0x263F8E4E0]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v1[1];
  return v19();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  uint64_t v1 = v0[25];
  uint64_t v2 = v0[7];
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  v0[26] = mach_absolute_time();
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v1, 1, 1, v5);
  uint64_t v7 = (void *)swift_allocObject();
  _OWORD v7[2] = 0;
  v7[3] = 0;
  _OWORD v7[4] = v4;
  v7[5] = v3;
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF15TokenGeneration21PromptCompletionEvent_pSg_s5Error_pTg5Tm(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in withTimeout<A>(timeout:_:), (uint64_t)v7, &demangling cache variable for type metadata for AsyncThrowingStream<String, Error>);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for TaskPriority?);
  v6(v1, 1, 1, v5);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  _OWORD v8[4] = v2;
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF15TokenGeneration21PromptCompletionEvent_pSg_s5Error_pTg5Tm(v1, (uint64_t)&async function pointer to partial apply for specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:), (uint64_t)v8, &demangling cache variable for type metadata for AsyncThrowingStream<String, Error>);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[27] = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<AsyncThrowingStream<String, Error>, Error>);
  *uint64_t v9 = v0;
  v9[1] = specialized closure #1 in withTimeout<A>(timeout:_:);
  uint64_t v11 = v0[21];
  return MEMORY[0x270FA2048](v11, 0, 0, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized closure #1 in withTimeout<A>(timeout:_:);
  }
  else {
    uint64_t v2 = specialized closure #1 in withTimeout<A>(timeout:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v24;

  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v1 + 168);
  uint64_t v4 = *(void *)(v1 + 176);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v4) == 1) {
LABEL_7:
  }
    __break(1u);
  uint64_t v5 = *(void *)(v1 + 208);
  uint64_t v6 = *(void *)(v1 + 192);
  uint64_t v7 = *(void *)(v1 + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v6, v3, v4);
  uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (result: AsyncThrowingStream<String, Error>, duration: Double))
              + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v7, v6, v4);
  uint64_t v9 = mach_absolute_time();
  uint64_t v10 = v9 - v5;
  if (v9 < v5)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v11 = *(void *)(v1 + 192);
  uint64_t v13 = *(void *)(v1 + 176);
  uint64_t v12 = *(void *)(v1 + 184);
  uint64_t v15 = *(void *)(v1 + 24);
  uint64_t v14 = *(uint64_t **)(v1 + 32);
  *(_DWORD *)(v1 + 236) = 0;
  *(_DWORD *)(v1 + 232) = 0;
  mach_timebase_info((mach_timebase_info_t)(v1 + 232));
  LODWORD(v16) = *(_DWORD *)(v1 + 232);
  *(double *)&uint64_t v17 = (double)v16;
  uint64_t v18 = (double)v10 * *(double *)&v17;
  LODWORD(v17) = *(_DWORD *)(v1 + 236);
  uint64_t v19 = v18 / ((double)v17 * 1000000000.0);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  *(double *)(v15 + v8) = v19;
  uint64_t v20 = *v14;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  MEMORY[0x261200EC0](v20, v13, v21, MEMORY[0x263F8E4E0]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(void))(v1 + 8);
  return v22();
}

{
  uint64_t v1;

  return specialized closure #1 in withTimeout<A>(timeout:_:)();
}

uint64_t specialized closure #1 in withTimeout<A>(timeout:_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  *(double *)(v4 + 64) = a4;
  *(void *)(v4 + 48) = a2;
  *(void *)(v4 + 56) = a3;
  *(void *)(v4 + 40) = a1;
  uint64_t v5 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  *(void *)(v4 + 72) = v5;
  *(void *)(v4 + 80) = *(void *)(v5 - 8);
  *(void *)(v4 + 88) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for GenerativeError.RuntimeError();
  *(void *)(v4 + 96) = v6;
  *(void *)(v4 + 104) = *(void *)(v6 - 8);
  *(void *)(v4 + 112) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for GenerativeError.ErrorType();
  *(void *)(v4 + 120) = v7;
  *(void *)(v4 + 128) = *(void *)(v7 - 8);
  *(void *)(v4 + 136) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeError?);
  *(void *)(v4 + 144) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for GenerativeError();
  *(void *)(v4 + 152) = v8;
  *(void *)(v4 + 160) = *(void *)(v8 - 8);
  *(void *)(v4 + 168) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v4 + 176) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in withTimeout<A>(timeout:_:), 0, 0);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  *(double *)(v4 + 72) = a4;
  *(void *)(v4 + 56) = a2;
  *(void *)(v4 + 64) = a3;
  *(void *)(v4 + 48) = a1;
  uint64_t v5 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  *(void *)(v4 + 80) = v5;
  *(void *)(v4 + 88) = *(void *)(v5 - 8);
  *(void *)(v4 + 96) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for GenerativeError.RuntimeError();
  *(void *)(v4 + 104) = v6;
  *(void *)(v4 + 112) = *(void *)(v6 - 8);
  *(void *)(v4 + 120) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for GenerativeError.ErrorType();
  *(void *)(v4 + 128) = v7;
  *(void *)(v4 + 136) = *(void *)(v7 - 8);
  *(void *)(v4 + 144) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeError?);
  *(void *)(v4 + 152) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for GenerativeError();
  *(void *)(v4 + 160) = v8;
  *(void *)(v4 + 168) = *(void *)(v8 - 8);
  *(void *)(v4 + 176) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v4 + 184) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in withTimeout<A>(timeout:_:), 0, 0);
}

{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;

  uint64_t v10 = *v5;
  uint64_t v11 = *v5;
  swift_task_dealloc();
  if (!v4)
  {
    uint64_t v12 = *(void *)(v10 + 16);
    *(void *)uint64_t v12 = a1;
    *(void *)(v12 + 8) = a2;
    *(void *)(v12 + 16) = a3;
    *(double *)(v12 + 24) = a4;
  }
  uint64_t v13 = *(uint64_t (**)(void))(v11 + 8);
  return v13();
}

uint64_t specialized closure #1 in closure #1 in withTimeout<A>(timeout:_:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  *uint64_t v6 = v4;
  v6[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return v8(a1);
}

{
  uint64_t v4;
  void *v5;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;

  *(void *)(v4 + 32) = a1;
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 40) = v5;
  *uint64_t v5 = v4;
  v5[1] = specialized closure #1 in closure #1 in withTimeout<A>(timeout:_:);
  return v7(v4 + 16);
}

{
  uint64_t v4;
  void *v5;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;

  *(void *)(v4 + 40) = a1;
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 48) = v5;
  *uint64_t v5 = v4;
  v5[1] = specialized closure #1 in closure #1 in withTimeout<A>(timeout:_:);
  return v7(v4 + 16);
}

uint64_t specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:)(double a1)
{
  *(double *)(v1 + 16) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(void *)(v1 + 24) = swift_task_alloc();
  uint64_t v2 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = *(void *)(v2 - 8);
  *(void *)(v1 + 48) = swift_task_alloc();
  uint64_t v3 = type metadata accessor for ContinuousClock();
  *(void *)(v1 + 56) = v3;
  *(void *)(v1 + 64) = *(void *)(v3 - 8);
  *(void *)(v1 + 72) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(double *)(v1 + 16) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(void *)(v1 + 24) = swift_task_alloc();
  uint64_t v2 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = *(void *)(v2 - 8);
  *(void *)(v1 + 48) = swift_task_alloc();
  uint64_t v3 = type metadata accessor for ContinuousClock();
  *(void *)(v1 + 56) = v3;
  *(void *)(v1 + 64) = *(void *)(v3 - 8);
  *(void *)(v1 + 72) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:), 0, 0);
}

uint64_t specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:)()
{
  uint64_t v1 = static Duration.seconds(_:)();
  uint64_t v3 = v2;
  ContinuousClock.init()();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                        + async function pointer to specialized Clock.sleep(for:tolerance:));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  *uint64_t v4 = v0;
  v4[1] = specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:);
  return v6(v1, v3, 0, 0, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  uint64_t v4 = *(void *)(*(void *)v1 + 56);
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:);
  }
  else {
    uint64_t v5 = specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, char);
  uint64_t v7;

  uint64_t v1 = static Duration.seconds(_:)();
  uint64_t v3 = v2;
  ContinuousClock.init()();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                        + async function pointer to specialized Clock.sleep(for:tolerance:));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  *uint64_t v4 = v0;
  v4[1] = specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:);
  return v6(v1, v3, 0, 0, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  uint64_t v4 = *(void *)(*(void *)v1 + 56);
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = closure #2 in closure #1 in withTimeout<A>(timeout:_:);
  }
  else {
    uint64_t v5 = specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  GenerativeError.RuntimeError.ErrorType.TimeoutErrorInfo.init(retryAfterDate:)();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, *MEMORY[0x263F40B50], v3);
  type metadata accessor for GenerativeError();
  lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
  swift_allocError();
  static GenerativeError.runtimeError(type:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t RequestMetadata.init<A>(generativeFunctionInstrumenter:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v44 = a1;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v7 - 8);
  uint64_t v43 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ClientInfoSessionTrackingConfig?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for _ClientInfoSessionTrackingConfig();
  uint64_t v13 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v46 = a2;
  uint64_t v17 = GenerativeConfigurationProtocol.trackingConfig.getter();
  if (v17)
  {
    uint64_t v18 = v17;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v47 = v16;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v18, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v47);
    unint64_t v16 = v47;
    swift_bridgeObjectRelease();
  }
  uint64_t v20 = GenerativeConfigurationProtocol._internalTrackingConfig.getter();
  if (v20)
  {
    uint64_t v21 = v20;
    char v22 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v47 = v16;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v21, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v22, &v47);
    unint64_t v16 = v47;
    swift_bridgeObjectRelease();
  }
  GenerativeConfigurationProtocol._internalSessionTrackingConfig.getter();
  uint64_t v23 = v45;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v45) == 1)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v12, &demangling cache variable for type metadata for _ClientInfoSessionTrackingConfig?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, v23);
    uint64_t v24 = _ClientInfoSessionTrackingConfig.sessionTrackingConifg.getter();
    char v25 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v47 = v16;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v24, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v25, &v47);
    unint64_t v26 = v47;
    swift_bridgeObjectRelease();
    uint64_t v27 = _ClientInfoSessionTrackingConfig._internalSessionTrackingConfig.getter();
    char v28 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v47 = v26;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v27, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v28, &v47);
    unint64_t v16 = v47;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v45);
  }
  uint64_t v29 = v44;
  GenerativeFunctionInstrumenter.invocationIdentifier.getter();
  uint64_t v30 = UUID.uuidString.getter();
  uint64_t v32 = v31;
  (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v43);
  uint64_t v33 = GenerativeFunctionInstrumenter.functionIdentifier.getter();
  uint64_t v35 = v34;
  uint64_t v36 = GenerativeFunctionInstrumenter.clientRequestIdentifier.getter();
  uint64_t v38 = v37;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(v46, a3);
  uint64_t v39 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(v29, v39);
  *a4 = v30;
  a4[1] = v32;
  a4[2] = v33;
  a4[3] = v35;
  a4[4] = v36;
  a4[5] = v38;
  a4[6] = v16;
  return result;
}

uint64_t TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:completionConfiguration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplate: PromptTemplate, locale: Locale?)?);
  v5[7] = swift_task_alloc();
  v5[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Prompt();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  v5[12] = swift_task_alloc();
  type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel(0);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Prompt();
  v5[15] = v7;
  v5[16] = *(void *)(v7 - 8);
  v5[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptTemplate?);
  v5[18] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for PromptTemplate();
  v5[19] = v8;
  v5[20] = *(void *)(v8 - 8);
  v5[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:completionConfiguration:), 0, 0);
}

uint64_t TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:completionConfiguration:)()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = GenerativeConfigurationProtocol.variableBindings.getter();
  GenerativeConfigurationProtocol.promptContent.getter();
  Prompt.promptTemplateIfWholePromptIsASinglePromptTemplate()(v1);
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[20];
  uint64_t v5 = v0[18];
  (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) == 1)
  {
    uint64_t v6 = v0[12];
    uint64_t v7 = v0[9];
    uint64_t v8 = v0[10];
    uint64_t v9 = v0[8];
    uint64_t v10 = v0[3];
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[18], &demangling cache variable for type metadata for PromptTemplate?);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v10, v7);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplate: PromptTemplate, locale: Locale?));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 1, 1, v11);
    uint64_t v12 = (void *)swift_task_alloc();
    v0[22] = v12;
    *uint64_t v12 = v0;
    v12[1] = TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:completionConfiguration:);
    uint64_t v13 = v0[14];
    uint64_t v14 = v0[12];
    uint64_t v15 = v0[8];
  }
  else
  {
    uint64_t v16 = v0[20];
    uint64_t v17 = v0[21];
    uint64_t v18 = v0[19];
    uint64_t v19 = v0[10];
    uint64_t v20 = v0[11];
    uint64_t v21 = v0[9];
    uint64_t v22 = v0[7];
    uint64_t v23 = v0[3];
    (*(void (**)(uint64_t, void, uint64_t))(v16 + 32))(v17, v0[18], v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v20, v23, v21);
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplate: PromptTemplate, locale: Locale?));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v22, v17, v18);
    GenerativeConfigurationProtocol<>.locale.getter();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v22, 0, 1, v24);
    char v25 = (void *)swift_task_alloc();
    v0[24] = v25;
    void *v25 = v0;
    v25[1] = TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:completionConfiguration:);
    uint64_t v13 = v0[13];
    uint64_t v14 = v0[11];
    uint64_t v15 = v0[7];
  }
  return TokenGenerator.PromptInputFromGenerativeModel.init(tgPrompt:variableBindings:promptTemplate:)(v13, v14, v2, v15);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:completionConfiguration:);
  }
  else {
    uint64_t v2 = TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:completionConfiguration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:completionConfiguration:);
  }
  else {
    uint64_t v2 = TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:completionConfiguration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[3];
  (*(void (**)(void))(*(void *)(v0[5] - 8) + 8))(v0[4]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[2];
  (*(void (**)(void, void))(v0[20] + 8))(v0[21], v0[19]);
  outlined init with take of PromptCompletionStream(v4, v5, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  (*(void (**)(void))(*(void *)(v0[5] - 8) + 8))(v0[4]);
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[2];
  (*(void (**)(void, void))(v0[10] + 8))(v0[3], v0[9]);
  outlined init with take of PromptCompletionStream(v1, v2, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[3];
  (*(void (**)(void))(*(void *)(v0[5] - 8) + 8))(v0[4]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  (*(void (**)(void, void))(v0[20] + 8))(v0[21], v0[19]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void))(*(void *)(v0[5] - 8) + 8))(v0[4]);
  (*(void (**)(void, void))(v0[10] + 8))(v0[3], v0[9]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:chatMessagesConfiguration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  uint64_t v6 = type metadata accessor for Prompt();
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  v5[11] = swift_task_alloc();
  type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel(0);
  v5[12] = swift_task_alloc();
  v5[13] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplate: PromptTemplate, locale: Locale?)?);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  v5[16] = swift_task_alloc();
  v5[17] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PromptTemplate, Locale?));
  v5[18] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v5[19] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for PromptTemplate();
  v5[20] = v7;
  v5[21] = *(void *)(v7 - 8);
  v5[22] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:chatMessagesConfiguration:), 0, 0);
}

uint64_t TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:chatMessagesConfiguration:)()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = GenerativeConfigurationProtocol.variableBindings.getter();
  GenerativeConfigurationProtocol.promptContent.getter();
  Array<A>.asPromptTemplate()(v0[2], v1);
  uint64_t v3 = v0[16];
  swift_bridgeObjectRelease();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplate: PromptTemplate, locale: Locale?));
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    uint64_t v6 = v0[15];
    uint64_t v7 = v0[11];
    uint64_t v8 = v0[8];
    uint64_t v9 = v0[9];
    uint64_t v10 = v0[4];
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[16], &demangling cache variable for type metadata for (promptTemplate: PromptTemplate, locale: Locale?)?);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v10, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, 1, 1, v4);
    uint64_t v11 = (void *)swift_task_alloc();
    v0[23] = (uint64_t)v11;
    void *v11 = v0;
    v11[1] = TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:chatMessagesConfiguration:);
    uint64_t v12 = v0[15];
    uint64_t v13 = v0[13];
    uint64_t v14 = v0[11];
    uint64_t v15 = v2;
  }
  else
  {
    uint64_t v16 = v0[20];
    uint64_t v27 = v0[22];
    uint64_t v28 = v0[19];
    uint64_t v17 = v0[17];
    uint64_t v18 = v0[18];
    uint64_t v19 = v0[9];
    uint64_t v32 = v0[10];
    uint64_t v33 = v0[14];
    uint64_t v30 = v0[21];
    uint64_t v31 = v0[8];
    uint64_t v29 = v0[4];
    uint64_t v26 = v0[16] + *(int *)(v4 + 48);
    uint64_t v34 = v2;
    uint64_t v20 = v18 + *(int *)(v17 + 48);
    uint64_t v21 = *(void (**)(uint64_t))(v30 + 32);
    v21(v18);
    outlined init with take of Locale?(v26, v20, &demangling cache variable for type metadata for Locale?);
    uint64_t v22 = v18 + *(int *)(v17 + 48);
    ((void (*)(uint64_t, uint64_t, uint64_t))v21)(v27, v18, v16);
    outlined init with take of Locale?(v22, v28, &demangling cache variable for type metadata for Locale?);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v32, v29, v31);
    uint64_t v23 = v33 + *(int *)(v4 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v33, v27, v16);
    outlined init with copy of Prompt.Rendering?(v28, v23, &demangling cache variable for type metadata for Locale?);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v33, 0, 1, v4);
    uint64_t v24 = (void *)swift_task_alloc();
    v0[25] = (uint64_t)v24;
    *uint64_t v24 = v0;
    v24[1] = TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:chatMessagesConfiguration:);
    uint64_t v12 = v0[14];
    uint64_t v13 = v0[12];
    uint64_t v14 = v0[10];
    uint64_t v15 = v34;
  }
  return TokenGenerator.PromptInputFromGenerativeModel.init(tgPrompt:variableBindings:promptTemplate:)(v13, v14, v15, v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:chatMessagesConfiguration:);
  }
  else {
    uint64_t v2 = TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:chatMessagesConfiguration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:chatMessagesConfiguration:);
  }
  else {
    uint64_t v2 = TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:chatMessagesConfiguration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = v0[19];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[4];
  (*(void (**)(void))(*(void *)(v0[6] - 8) + 8))(v0[5]);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v2);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for Locale?);
  uint64_t v5 = v0[12];
  uint64_t v6 = v0[3];
  (*(void (**)(void, void))(v0[21] + 8))(v0[22], v0[20]);
  outlined init with take of PromptCompletionStream(v5, v6, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  (*(void (**)(void))(*(void *)(v0[6] - 8) + 8))(v0[5]);
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[3];
  (*(void (**)(void, void))(v0[9] + 8))(v0[4], v0[8]);
  outlined init with take of PromptCompletionStream(v1, v2, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  uint64_t v4 = v0[19];
  uint64_t v3 = v0[20];
  uint64_t v5 = v0[8];
  uint64_t v6 = v0[9];
  uint64_t v7 = v0[4];
  (*(void (**)(void))(*(void *)(v0[6] - 8) + 8))(v0[5]);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v5);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v4, &demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[4];
  (*(void (**)(void))(*(void *)(v0[6] - 8) + 8))(v0[5]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t static TokenGenerator.map(tokenGenerationError:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v147 = a2;
  uint64_t v148 = a1;
  uint64_t v2 = type metadata accessor for GenerativeError.ToolError.ErrorContext();
  uint64_t v138 = *(void *)(v2 - 8);
  uint64_t v139 = v2;
  MEMORY[0x270FA5388](v2);
  unint64_t v135 = (char *)&v119 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v134 = (char *)&v119 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for GenerativeError.DocumentError.ErrorContext();
  uint64_t v136 = *(void *)(v6 - 8);
  uint64_t v137 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v133 = (char *)&v119 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = type metadata accessor for DocumentResource();
  uint64_t v131 = *(void *)(v132 - 8);
  MEMORY[0x270FA5388](v132);
  unint64_t v130 = (char *)&v119 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = type metadata accessor for GenerativeError.AvailabilityError.ErrorType.ResourceUnavailableErrorInfo.AssetType();
  uint64_t v128 = *(void *)(v129 - 8);
  MEMORY[0x270FA5388](v129);
  uint64_t v10 = (char *)&v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for GenerativeError.PromptError.ErrorType();
  uint64_t v127 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = type metadata accessor for GenerativeError.AvailabilityError.ErrorType();
  uint64_t v145 = *(void *)(v143 - 8);
  MEMORY[0x270FA5388](v143);
  uint64_t v144 = (char *)&v119 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = type metadata accessor for Locale();
  uint64_t v120 = *(void *)(v121 - 8);
  MEMORY[0x270FA5388](v121);
  uint64_t v119 = (char *)&v119 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = type metadata accessor for InferenceError.Context();
  uint64_t v125 = *(void *)(v123 - 8);
  MEMORY[0x270FA5388](v123);
  unint64_t v124 = (char *)&v119 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InferenceError?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v119 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for InferenceError();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v141 = v20;
  uint64_t v142 = v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v119 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v126 = (char *)&v119 - v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v27 = MEMORY[0x270FA5388](v26 - 8);
  uint64_t v122 = (char *)&v119 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v140 = (char *)&v119 - v30;
  MEMORY[0x270FA5388](v29);
  unint64_t v146 = (char *)&v119 - v31;
  uint64_t v32 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  uint64_t v33 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v35 = (char *)&v119 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for TokenGenerationError(0);
  MEMORY[0x270FA5388](v36);
  uint64_t v38 = (char *)&v119 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PromptCompletion(v148, (uint64_t)v38, type metadata accessor for TokenGenerationError);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v44 = (void *)*((void *)v38 + 2);
      if (v44)
      {
        unint64_t v149 = (unint64_t)v44;
        MEMORY[0x261201A80](v44);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v45 = v141;
        int v46 = swift_dynamicCast();
        uint64_t v47 = v142;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v142 + 56))(v19, v46 ^ 1u, 1, v45);
        int v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48))(v19, 1, v45);
        uint64_t v49 = (uint64_t)v146;
        uint64_t v50 = (uint64_t)v140;
        if (v48 != 1)
        {
          uint64_t v51 = v126;
          (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v126, v19, v45);
          (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v24, v51, v45);
          if ((*(unsigned int (**)(char *, uint64_t))(v47 + 88))(v24, v45) == *MEMORY[0x263F56250])
          {
            (*(void (**)(char *, uint64_t))(v47 + 96))(v24, v45);
            long long v52 = v124;
            uint64_t v53 = v24;
            uint64_t v54 = v123;
            (*(void (**)(char *, char *, uint64_t))(v125 + 32))(v124, v53, v123);
            uint64_t v55 = InferenceError.Context.userInfo.getter();
            if (!*(void *)(v55 + 16)
              || (unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001ELL, 0x800000025F92DB40),
                  (v57 & 1) == 0))
            {
              swift_bridgeObjectRelease();
              uint64_t v98 = v143;
LABEL_39:
              uint64_t v102 = InferenceError.Context.userInfo.getter();
              if (*(void *)(v102 + 16)
                && (unint64_t v103 = specialized __RawDictionaryStorage.find<A>(_:)(0x7466417972746572, 0xEE00657461447265),
                    (v104 & 1) != 0))
              {
                uint64_t v105 = (uint64_t *)(*(void *)(v102 + 56) + 16 * v103);
                uint64_t v106 = v105[1];
                uint64_t v148 = *v105;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                id v107 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08790]), sel_init);
                uint64_t v108 = v119;
                Locale.init(identifier:)();
                Class isa = Locale._bridgeToObjectiveC()().super.isa;
                (*(void (**)(char *, uint64_t))(v120 + 8))(v108, v121);
                objc_msgSend(v107, sel_setLocale_, isa);

                uint64_t v110 = (void *)MEMORY[0x261200C10](0xD000000000000015, 0x800000025F92DB60);
                objc_msgSend(v107, sel_setDateFormat_, v110);

                uint64_t v111 = (void *)MEMORY[0x261200C10](v148, v106);
                swift_bridgeObjectRelease();
                id v112 = objc_msgSend(v107, sel_dateFromString_, v111);

                if (v112)
                {
                  uint64_t v113 = (uint64_t)v122;
                  static Date._unconditionallyBridgeFromObjectiveC(_:)();

                  (*(void (**)(char *, uint64_t))(v125 + 8))(v124, v54);
                  (*(void (**)(char *, uint64_t))(v142 + 8))(v126, v141);
                  uint64_t v114 = type metadata accessor for Date();
                  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v114 - 8) + 56))(v113, 0, 1, v114);
                }
                else
                {

                  (*(void (**)(char *, uint64_t))(v125 + 8))(v124, v54);
                  (*(void (**)(char *, uint64_t))(v142 + 8))(v126, v141);
                  uint64_t v116 = type metadata accessor for Date();
                  uint64_t v113 = (uint64_t)v122;
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 56))(v122, 1, 1, v116);
                }
                uint64_t v68 = v147;
                outlined init with take of Locale?(v113, v50, &demangling cache variable for type metadata for Date?);
              }
              else
              {
                swift_bridgeObjectRelease();
                (*(void (**)(char *, uint64_t))(v125 + 8))(v52, v54);
                (*(void (**)(char *, uint64_t))(v142 + 8))(v126, v141);
                uint64_t v115 = type metadata accessor for Date();
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v115 - 8) + 56))(v50, 1, 1, v115);
                uint64_t v68 = v147;
              }
              goto LABEL_32;
            }
            uint64_t v58 = (void **)(*(void *)(v55 + 56) + 16 * v56);
            unint64_t v60 = (unint64_t)*v58;
            unint64_t v59 = (unint64_t)v58[1];
            swift_bridgeObjectRetain();
            uint64_t v61 = swift_bridgeObjectRelease();
            uint64_t v152 = 0;
            uint64_t v62 = MEMORY[0x270FA5388](v61);
            *(&v119 - 2) = (char *)&v152;
            if ((v59 & 0x1000000000000000) != 0 || !(v59 & 0x2000000000000000 | v60 & 0x1000000000000000))
            {
              _StringGuts._slowWithCString<A>(_:)();
              swift_bridgeObjectRelease();
              if (v151)
              {
LABEL_15:
                Date.init(timeIntervalSinceReferenceDate:)();
                (*(void (**)(char *, uint64_t))(v125 + 8))(v124, v54);
                (*(void (**)(char *, uint64_t))(v142 + 8))(v126, v141);
                uint64_t v67 = type metadata accessor for Date();
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v49, 0, 1, v67);
                outlined init with take of Locale?(v49, v50, &demangling cache variable for type metadata for Date?);
                uint64_t v68 = v147;
LABEL_31:
                uint64_t v98 = v143;
LABEL_32:
                outlined init with copy of Prompt.Rendering?(v50, v49, &demangling cache variable for type metadata for Date?);
                uint64_t v99 = v144;
                GenerativeError.AvailabilityError.ErrorType.RateLimitedErrorInfo.init(retryAfterDate:)();
                uint64_t v100 = v145;
                (*(void (**)(char *, void, uint64_t))(v145 + 104))(v99, *MEMORY[0x263F40A20], v98);
                static GenerativeError.availabilityError(type:)();
                swift_bridgeObjectRelease();

                (*(void (**)(char *, uint64_t))(v100 + 8))(v99, v98);
                outlined destroy of GenerativeFunctionsInstrumentationEvent?(v50, &demangling cache variable for type metadata for Date?);
                uint64_t v94 = type metadata accessor for GenerativeError();
                uint64_t v95 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v94 - 8) + 56);
                uint64_t v96 = v68;
                return v95(v96, 0, 1, v94);
              }
            }
            else
            {
              MEMORY[0x270FA5388](v62);
              *(&v119 - 2) = (char *)partial apply for closure #1 in closure #1 in Double.init<A>(_:);
              *(&v119 - 1) = v63;
              if ((v59 & 0x2000000000000000) == 0)
              {
                if ((v60 & 0x1000000000000000) != 0)
                {
                  uint64_t v64 = (v59 & 0xFFFFFFFFFFFFFFFLL) + 32;
                  uint64_t v65 = v60 & 0xFFFFFFFFFFFFLL;
                }
                else
                {
                  uint64_t v64 = _StringObject.sharedUTF8.getter();
                }
                char v66 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(v64, v65, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
                swift_bridgeObjectRelease();
                if (v66) {
                  goto LABEL_15;
                }
                goto LABEL_38;
              }
              unint64_t v149 = v60;
              uint64_t v150 = v59 & 0xFFFFFFFFFFFFFFLL;
              if (v60 <= 0x20u && ((1 << v60) & 0x100003E01) != 0
                || (uint64_t v117 = (unsigned __int8 *)_swift_stdlib_strtod_clocale()) == 0)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                int v118 = *v117;
                swift_bridgeObjectRelease();
                if (!v118) {
                  goto LABEL_15;
                }
              }
            }
LABEL_38:
            uint64_t v98 = v143;
            long long v52 = v124;
            goto LABEL_39;
          }
          unint64_t v101 = *(void (**)(char *, uint64_t))(v47 + 8);
          v101(v51, v45);
          v101(v24, v45);
LABEL_30:
          uint64_t v68 = v147;
          uint64_t v97 = type metadata accessor for Date();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 56))(v50, 1, 1, v97);
          goto LABEL_31;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v142 + 56))(v19, 1, 1, v141);
        uint64_t v49 = (uint64_t)v146;
        uint64_t v50 = (uint64_t)v140;
      }
      outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v19, &demangling cache variable for type metadata for InferenceError?);
      goto LABEL_30;
    case 2u:
      long long v69 = (void *)*((void *)v38 + 2);
      swift_bridgeObjectRelease();

      uint64_t v70 = type metadata accessor for Date();
      uint64_t v71 = (uint64_t)v146;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v146, 1, 1, v70);
      uint64_t v43 = v147;
      static GenerativeError.networkingError(retryAfterDate:)();
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(v71, &demangling cache variable for type metadata for Date?);
      goto LABEL_26;
    case 3u:
      long long v72 = (void *)*((void *)v38 + 4);
      swift_bridgeObjectRelease();

      GenerativeError.PromptError.ErrorType.TooManyTokensErrorInfo.init(tokenCount:tokenCountMaximum:)();
      uint64_t v73 = v127;
      (*(void (**)(char *, void, uint64_t))(v127 + 104))(v13, *MEMORY[0x263F40AE8], v11);
      uint64_t v43 = v147;
      static GenerativeError.promptError(type:)();
      (*(void (**)(char *, uint64_t))(v73 + 8))(v13, v11);
      goto LABEL_26;
    case 4u:
      uint64_t v74 = (void *)*((void *)v38 + 2);
      swift_bridgeObjectRelease();

      uint64_t v43 = v147;
      static GenerativeError.canceledError()();
      goto LABEL_26;
    case 5u:
      char v75 = (void *)*((void *)v38 + 2);
      swift_bridgeObjectRelease();

      (*(void (**)(char *, void, uint64_t))(v128 + 104))(v10, *MEMORY[0x263F40A10], v129);
      uint64_t v76 = v144;
      GenerativeError.AvailabilityError.ErrorType.ResourceUnavailableErrorInfo.init(assetType:)();
      uint64_t v77 = v145;
      uint64_t v78 = v143;
      (*(void (**)(char *, void, uint64_t))(v145 + 104))(v76, *MEMORY[0x263F40A30], v143);
      uint64_t v43 = v147;
      static GenerativeError.availabilityError(type:)();
      (*(void (**)(char *, uint64_t))(v77 + 8))(v76, v78);
      goto LABEL_26;
    case 6u:
      char v79 = *(void **)&v38[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, TokenGenerationError.Context))
                                  + 48)
                         + 16];
      uint64_t v80 = type metadata accessor for Prompt.SpecialToken();
      (*(void (**)(char *, uint64_t))(*(void *)(v80 - 8) + 8))(v38, v80);
      swift_bridgeObjectRelease();
      uint64_t v40 = v79;
      goto LABEL_21;
    case 7u:
    case 8u:
    case 9u:
      uint64_t v39 = (void *)*((void *)v38 + 2);
      swift_bridgeObjectRelease();
      uint64_t v40 = v39;
LABEL_21:

      uint64_t v81 = type metadata accessor for GenerativeError();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v147, 1, 1, v81);
    case 0xAu:
      uint64_t v83 = (void *)*((void *)v38 + 4);
      swift_bridgeObjectRetain();
      char v84 = v135;
      GenerativeError.ToolError.ErrorContext.init(name:description:)();
      uint64_t v43 = v147;
      static GenerativeError.toolError(context:)();
      swift_bridgeObjectRelease();

      (*(void (**)(char *, uint64_t))(v138 + 8))(v84, v139);
      goto LABEL_26;
    case 0xBu:
      uint64_t v85 = *(void **)&v38[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: DocumentResource, TokenGenerationError.Context))
                                  + 48)
                         + 16];
      uint64_t v86 = v131;
      char v87 = v130;
      uint64_t v88 = v132;
      (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v130, v38, v132);
      uint64_t v89 = v134;
      DocumentResource.url.getter();
      uint64_t v90 = type metadata accessor for URL();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56))(v89, 0, 1, v90);
      swift_bridgeObjectRetain();
      uint64_t v91 = v133;
      GenerativeError.DocumentError.ErrorContext.init(url:description:)();
      uint64_t v43 = v147;
      static GenerativeError.documentError(context:)();
      swift_bridgeObjectRelease();

      (*(void (**)(char *, uint64_t))(v136 + 8))(v91, v137);
      (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v88);
      goto LABEL_26;
    case 0xCu:
      uint64_t v92 = (void *)*((void *)v38 + 2);
      swift_bridgeObjectRelease();

      uint64_t v43 = v147;
      static GenerativeError.invalidatedError()();
      goto LABEL_26;
    case 0xDu:
      unint64_t v93 = (void *)*((void *)v38 + 2);
      swift_bridgeObjectRelease();

      uint64_t v43 = v147;
      static GenerativeError.authenticationError()();
      goto LABEL_26;
    default:
      uint64_t v41 = (void *)*((void *)v38 + 2);
      swift_bridgeObjectRelease();

      uint64_t v42 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v146, 1, 1, v42);
      GenerativeError.RuntimeError.ErrorType.TimeoutErrorInfo.init(retryAfterDate:)();
      (*(void (**)(char *, void, uint64_t))(v33 + 104))(v35, *MEMORY[0x263F40B50], v32);
      uint64_t v43 = v147;
      static GenerativeError.runtimeError(type:)();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
LABEL_26:
      uint64_t v94 = type metadata accessor for GenerativeError();
      uint64_t v95 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v94 - 8) + 56);
      uint64_t v96 = v43;
      return v95(v96, 0, 1, v94);
  }
}

uint64_t specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v4[7] = a2;
  v4[8] = a3;
  v4[6] = a1;
  uint64_t v6 = type metadata accessor for GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  v4[12] = v7;
  v4[13] = *(void *)(v7 - 8);
  v4[14] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for BindableVariable();
  v4[15] = v8;
  v4[16] = *(void *)(v8 - 8);
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for GenerativeError.AvailabilityError.ErrorType();
  v4[19] = v9;
  v4[20] = *(void *)(v9 - 8);
  v4[21] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Prompt.RenderError();
  v4[22] = v10;
  v4[23] = *(void *)(v10 - 8);
  v4[24] = swift_task_alloc();
  v4[25] = swift_task_alloc();
  v4[26] = swift_task_alloc();
  v4[27] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for ModelManagerError();
  v4[28] = v11;
  v4[29] = *(void *)(v11 - 8);
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  v4[33] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeError?);
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  v4[37] = swift_task_alloc();
  v4[38] = swift_task_alloc();
  v4[39] = swift_task_alloc();
  v4[40] = swift_task_alloc();
  v4[41] = swift_task_alloc();
  v4[42] = type metadata accessor for TokenGenerationError(0);
  v4[43] = swift_task_alloc();
  v4[44] = swift_task_alloc();
  v4[45] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v4[46] = swift_task_alloc();
  v4[47] = swift_task_alloc();
  v4[48] = swift_task_alloc();
  v4[49] = swift_task_alloc();
  v4[50] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for GenerativeFunctionInstrumenter();
  v4[51] = v12;
  v4[52] = *(void *)(v12 - 8);
  v4[53] = swift_task_alloc();
  v4[54] = swift_task_alloc();
  v4[55] = swift_task_alloc();
  v4[56] = swift_task_alloc();
  v4[57] = swift_task_alloc();
  v4[58] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for GenerativeError();
  v4[59] = v13;
  v4[60] = *(void *)(v13 - 8);
  v4[61] = swift_task_alloc();
  v4[62] = swift_task_alloc();
  v4[63] = type metadata accessor for TokenGenerator();
  uint64_t v14 = (void *)swift_task_alloc();
  v4[64] = v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  void *v14 = v4;
  v14[1] = specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:);
  return MEMORY[0x270FA2100](a1, v15);
}

uint64_t specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)()
{
  *(void *)(*(void *)v1 + 520) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:);
  }
  else {
    uint64_t v2 = specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  void (*v7)(uint64_t, uint64_t);
  uint64_t (*v8)(void);
  uint64_t v10;

  if (!*(void *)(v0[6] + 24))
  {
    uint64_t v1 = v0[58];
    uint64_t v2 = v0[51];
    uint64_t v3 = v0[52];
    uint64_t v4 = v0[8];
    uint64_t v5 = v4 + *(int *)(type metadata accessor for TokenGeneratorResponsePromptCompletionStream.AsyncIterator(0) + 20);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    v6(v1, v5, v2);
    GenerativeFunctionInstrumenter.inferenceEnd()();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v7(v1, v2);
    v6(v1, v5, v2);
    GenerativeFunctionInstrumenter.executionEnd(error:)();
    v7(v1, v2);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  uint64_t v0;
  int v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  void (*v63)(uint64_t, uint64_t, uint64_t);
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t (*v144)(void);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(uint64_t, uint64_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(uint64_t, uint64_t, uint64_t);
  void (*v160)(uint64_t, uint64_t, uint64_t);
  void (*v161)(uint64_t, uint64_t, uint64_t);
  uint64_t v162;

  *(void *)(v0 + 16) = *(void *)(v0 + 520);
  MEMORY[0x261201A80]();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = swift_dynamicCast();
  uint64_t v2 = *(void **)(v0 + 520);
  if (v1)
  {
    uint64_t v4 = *(void *)(v0 + 488);
    uint64_t v3 = *(void *)(v0 + 496);
    uint64_t v5 = *(void *)(v0 + 472);
    uint64_t v6 = *(void *)(v0 + 480);
    uint64_t v7 = *(void *)(v0 + 416);
    char v158 = *(void *)(v0 + 408);
    uint64_t v8 = *(void *)(v0 + 400);
    uint64_t v9 = *(void *)(v0 + 56);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, v3, v5);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, v4, v5);
    outlined init with copy of Prompt.Rendering?(v9, v8, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v158) == 1)
    {
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 400), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    }
    else
    {
      uint64_t v21 = *(void *)(v0 + 456);
      uint64_t v22 = *(void *)(v0 + 408);
      uint64_t v23 = *(void *)(v0 + 416);
      (*(void (**)(uint64_t, void, uint64_t))(v23 + 32))(v21, *(void *)(v0 + 400), v22);
      GenerativeFunctionInstrumenter.executionEnd(error:)();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
    }
    uint64_t v25 = *(void *)(v0 + 480);
    uint64_t v24 = *(void *)(v0 + 488);
    uint64_t v26 = *(void *)(v0 + 472);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);

    goto LABEL_51;
  }

  *(void *)(v0 + 24) = v2;
  MEMORY[0x261201A80](v2);
  uint64_t v11 = swift_dynamicCast();
  uint64_t v12 = *(void **)(v0 + 520);
  if (v11)
  {
    uint64_t v13 = *(void *)(v0 + 472);
    uint64_t v14 = *(void *)(v0 + 480);
    uint64_t v16 = *(void *)(v0 + 352);
    uint64_t v15 = *(void *)(v0 + 360);
    uint64_t v18 = *(void *)(v0 + 320);
    uint64_t v17 = *(void *)(v0 + 328);

    outlined init with take of PromptCompletionStream(v15, v16, type metadata accessor for TokenGenerationError);
    static TokenGenerator.map(tokenGenerationError:)(v16, v17);
    outlined init with copy of Prompt.Rendering?(v17, v18, &demangling cache variable for type metadata for GenerativeError?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v18, 1, v13) == 1)
    {
      uint64_t v19 = *(void *)(v0 + 344);
      uint64_t v20 = *(void *)(v0 + 352);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 320), &demangling cache variable for type metadata for GenerativeError?);
      outlined init with copy of PromptCompletion(v20, v19, type metadata accessor for TokenGenerationError);
    }
    else
    {
      uint64_t v45 = *(void *)(v0 + 472);
      int v46 = *(void *)(v0 + 480);
      int v48 = *(void *)(v0 + 344);
      uint64_t v47 = *(void *)(v0 + 352);
      uint64_t v49 = *(void *)(v0 + 320);
      lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
      uint64_t v50 = swift_allocError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v51, v49, v45);
      outlined init with copy of PromptCompletion(v47, v48, type metadata accessor for TokenGenerationError);
      if (v50)
      {
        outlined destroy of TokenGeneratorCompletionResponseStringStream(*(void *)(v0 + 344), type metadata accessor for TokenGenerationError);
LABEL_15:
        uint64_t v54 = *(void *)(v0 + 408);
        uint64_t v55 = *(void *)(v0 + 416);
        unint64_t v56 = *(void *)(v0 + 392);
        outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 56), v56, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v56, 1, v54) == 1)
        {
          outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 392), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        }
        else
        {
          uint64_t v68 = *(void *)(v0 + 448);
          long long v69 = *(void *)(v0 + 408);
          uint64_t v70 = *(void *)(v0 + 416);
          (*(void (**)(uint64_t, void, uint64_t))(v70 + 32))(v68, *(void *)(v0 + 392), v69);
          GenerativeFunctionInstrumenter.executionEnd(error:)();
          (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v68, v69);
        }
        uint64_t v71 = *(void *)(v0 + 352);
        long long v72 = *(void *)(v0 + 328);
        swift_willThrow();
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(v72, &demangling cache variable for type metadata for GenerativeError?);
        outlined destroy of TokenGeneratorCompletionResponseStringStream(v71, type metadata accessor for TokenGenerationError);

        goto LABEL_51;
      }
    }
    long long v52 = *(void *)(v0 + 344);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))type metadata accessor for TokenGenerationError);
    swift_allocError();
    outlined init with take of PromptCompletionStream(v52, v53, type metadata accessor for TokenGenerationError);
    goto LABEL_15;
  }

  *(void *)(v0 + 32) = v12;
  MEMORY[0x261201A80](v12);
  uint64_t v27 = swift_dynamicCast();
  uint64_t v28 = *(void **)(v0 + 520);
  if ((v27 & 1) == 0)
  {

    *(void *)(v0 + 40) = v28;
    MEMORY[0x261201A80](v28);
    if ((swift_dynamicCast() & 1) == 0)
    {
      uint64_t v80 = *(void *)(v0 + 408);
      uint64_t v81 = *(void *)(v0 + 416);
      unint64_t v82 = *(void *)(v0 + 376);
      uint64_t v83 = *(void *)(v0 + 56);

      outlined init with copy of Prompt.Rendering?(v83, v82, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v82, 1, v80) == 1)
      {
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 376), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
      }
      else
      {
        uint64_t v106 = *(void *)(v0 + 432);
        id v107 = *(void *)(v0 + 408);
        uint64_t v108 = *(void *)(v0 + 416);
        (*(void (**)(uint64_t, void, uint64_t))(v108 + 32))(v106, *(void *)(v0 + 376), v107);
        GenerativeFunctionInstrumenter.executionEnd(error:)();
        (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v106, v107);
      }
      swift_willThrow();
      goto LABEL_51;
    }
    char v57 = *(void *)(v0 + 208);
    uint64_t v58 = *(void *)(v0 + 216);
    unint64_t v59 = *(void *)(v0 + 200);
    unint64_t v60 = *(void *)(v0 + 176);
    uint64_t v61 = *(void *)(v0 + 184);

    uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 32);
    v62(v57, v58, v60);
    long long v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16);
    v63(v59, v57, v60);
    uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 88))(v59, v60);
    if (v64 == *MEMORY[0x263F61FF0] || v64 == *MEMORY[0x263F61FE8])
    {
      uint64_t v65 = *(void *)(v0 + 472);
      char v66 = *(void *)(v0 + 480);
      uint64_t v67 = *(void *)(v0 + 280);
      (*(void (**)(void, void))(*(void *)(v0 + 184) + 8))(*(void *)(v0 + 200), *(void *)(v0 + 176));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v67, 1, 1, v65);
    }
    else
    {
      unint64_t v160 = v63;
      uint64_t v109 = *(void *)(v0 + 200);
      uint64_t v111 = *(void *)(v0 + 176);
      uint64_t v110 = *(void *)(v0 + 184);
      if (v64 == *MEMORY[0x263F61FF8])
      {
        BOOL v156 = *(void *)(v0 + 144);
        id v112 = *(void *)(v0 + 128);
        unint64_t v146 = *(void *)(v0 + 136);
        uint64_t v155 = *(void *)(v0 + 120);
        unint64_t v149 = *(void *)(v0 + 112);
        uint64_t v113 = *(void *)(v0 + 88);
        char v151 = *(void *)(v0 + 104);
        uint64_t v152 = *(void *)(v0 + 96);
        uint64_t v114 = *(void *)(v0 + 80);
        uint64_t v147 = *(void *)(v0 + 480);
        uint64_t v148 = *(void *)(v0 + 72);
        uint64_t v153 = *(void *)(v0 + 472);
        uint64_t v150 = *(void *)(v0 + 280);
        (*(void (**)(uint64_t, uint64_t))(v110 + 96))(v109, v111);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 32))(v156, v109, v155);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 16))(v146, v156, v155);
        GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType.UnboundBindableVariableErrorInfo.init(bindableVariable:)();
        (*(void (**)(uint64_t, void, uint64_t))(v114 + 104))(v113, *MEMORY[0x263F40B30], v148);
        static GenerativeError.RuntimeError.ErrorType.configurationError(type:)();
        (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v113, v148);
        static GenerativeError.runtimeError(type:)();
        (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v149, v152);
        (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v156, v155);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v147 + 56))(v150, 0, 1, v153);
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 480) + 56))(*(void *)(v0 + 280), 1, 1, *(void *)(v0 + 472));
        (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v109, v111);
      }
      long long v63 = v160;
    }
    uint64_t v115 = *(void *)(v0 + 472);
    uint64_t v116 = *(void *)(v0 + 480);
    uint64_t v117 = *(void *)(v0 + 288);
    int v118 = *(void *)(v0 + 272);
    outlined init with take of Locale?(*(void *)(v0 + 280), v117, &demangling cache variable for type metadata for GenerativeError?);
    outlined init with copy of Prompt.Rendering?(v117, v118, &demangling cache variable for type metadata for GenerativeError?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48))(v118, 1, v115) == 1)
    {
      uint64_t v119 = *(void *)(v0 + 208);
      uint64_t v120 = *(void *)(v0 + 192);
      uint64_t v121 = *(void *)(v0 + 176);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 272), &demangling cache variable for type metadata for GenerativeError?);
      v63(v120, v119, v121);
    }
    else
    {
      uint64_t v161 = v63;
      uint64_t v122 = *(void *)(v0 + 472);
      uint64_t v123 = *(void *)(v0 + 480);
      unint64_t v124 = *(void *)(v0 + 272);
      uint64_t v157 = *(void *)(v0 + 208);
      uint64_t v125 = *(void *)(v0 + 192);
      uint64_t v126 = *(void *)(v0 + 176);
      lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
      uint64_t v127 = v62;
      uint64_t v128 = swift_allocError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v123 + 32))(v129, v124, v122);
      unint64_t v130 = v128;
      uint64_t v62 = v127;
      v161(v125, v157, v126);
      if (v130)
      {
        (*(void (**)(void, void))(*(void *)(v0 + 184) + 8))(*(void *)(v0 + 192), *(void *)(v0 + 176));
LABEL_46:
        uint64_t v134 = *(void *)(v0 + 408);
        unint64_t v135 = *(void *)(v0 + 416);
        uint64_t v136 = *(void *)(v0 + 368);
        outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 56), v136, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v136, 1, v134) == 1)
        {
          outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 368), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        }
        else
        {
          uint64_t v138 = *(void *)(v0 + 416);
          uint64_t v137 = *(void *)(v0 + 424);
          uint64_t v139 = *(void *)(v0 + 408);
          (*(void (**)(uint64_t, void, uint64_t))(v138 + 32))(v137, *(void *)(v0 + 368), v139);
          GenerativeFunctionInstrumenter.executionEnd(error:)();
          (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v137, v139);
        }
        uint64_t v140 = *(void *)(v0 + 288);
        uint64_t v141 = *(void *)(v0 + 208);
        uint64_t v142 = *(void *)(v0 + 176);
        uint64_t v143 = *(void *)(v0 + 184);
        swift_willThrow();
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(v140, &demangling cache variable for type metadata for GenerativeError?);
        (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v141, v142);
        uint64_t v105 = *(void **)(v0 + 40);
        goto LABEL_50;
      }
    }
    uint64_t v131 = *(void *)(v0 + 192);
    uint64_t v132 = *(void *)(v0 + 176);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type Prompt.RenderError and conformance Prompt.RenderError, MEMORY[0x263F62000]);
    swift_allocError();
    v62(v133, v131, v132);
    goto LABEL_46;
  }
  uint64_t v29 = *(void *)(v0 + 256);
  uint64_t v30 = *(void *)(v0 + 264);
  uint64_t v31 = *(void *)(v0 + 248);
  uint64_t v32 = *(void *)(v0 + 224);
  uint64_t v33 = *(void *)(v0 + 232);

  unint64_t v154 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32);
  v154(v29, v30, v32);
  uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
  v34(v31, v29, v32);
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 88))(v31, v32);
  uint64_t v36 = *(void *)(v0 + 480);
  uint64_t v37 = *(void *)(v0 + 304);
  uint64_t v38 = *(void *)(v0 + 248);
  uint64_t v39 = *(void *)(v0 + 224);
  uint64_t v40 = *(void *)(v0 + 232);
  BOOL v159 = v34;
  if (v35 == *MEMORY[0x263F56200])
  {
    uint64_t v41 = *(void *)(v0 + 160);
    uint64_t v42 = *(void *)(v0 + 168);
    uint64_t v43 = *(void *)(v0 + 152);
    uint64_t v44 = *(void *)(v0 + 472);
    (*(void (**)(uint64_t, void))(v40 + 96))(v38, *(void *)(v0 + 224));
    GenerativeError.AvailabilityError.ErrorType.UseCaseDisabledErrorInfo.init(useCaseIdentifier:)();
    (*(void (**)(uint64_t, void, uint64_t))(v41 + 104))(v42, *MEMORY[0x263F40A28], v43);
    static GenerativeError.availabilityError(type:)();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v43);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v37, 0, 1, v44);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v36 + 56))(v37, 1, 1, *(void *)(v0 + 472));
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
  }
  uint64_t v73 = *(void *)(v0 + 472);
  uint64_t v74 = *(void *)(v0 + 480);
  char v75 = *(void *)(v0 + 312);
  uint64_t v76 = *(void *)(v0 + 296);
  outlined init with take of Locale?(*(void *)(v0 + 304), v75, &demangling cache variable for type metadata for GenerativeError?);
  outlined init with copy of Prompt.Rendering?(v75, v76, &demangling cache variable for type metadata for GenerativeError?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v76, 1, v73) == 1)
  {
    uint64_t v77 = *(void *)(v0 + 256);
    uint64_t v78 = *(void *)(v0 + 240);
    char v79 = *(void *)(v0 + 224);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 296), &demangling cache variable for type metadata for GenerativeError?);
    v159(v78, v77, v79);
LABEL_30:
    uint64_t v92 = *(void *)(v0 + 240);
    unint64_t v93 = *(void *)(v0 + 224);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type ModelManagerError and conformance ModelManagerError, MEMORY[0x263F56220]);
    swift_allocError();
    v154(v94, v92, v93);
    goto LABEL_31;
  }
  char v84 = *(void *)(v0 + 472);
  uint64_t v85 = *(void *)(v0 + 480);
  uint64_t v86 = *(void *)(v0 + 296);
  char v87 = *(void *)(v0 + 256);
  uint64_t v88 = *(void *)(v0 + 240);
  uint64_t v89 = *(void *)(v0 + 224);
  lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
  uint64_t v90 = swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 32))(v91, v86, v84);
  v159(v88, v87, v89);
  if (!v90) {
    goto LABEL_30;
  }
  (*(void (**)(void, void))(*(void *)(v0 + 232) + 8))(*(void *)(v0 + 240), *(void *)(v0 + 224));
LABEL_31:
  uint64_t v95 = *(void *)(v0 + 408);
  uint64_t v96 = *(void *)(v0 + 416);
  uint64_t v97 = *(void *)(v0 + 384);
  outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 56), v97, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(v97, 1, v95) == 1)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 384), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  }
  else
  {
    uint64_t v98 = *(void *)(v0 + 440);
    uint64_t v99 = *(void *)(v0 + 408);
    uint64_t v100 = *(void *)(v0 + 416);
    (*(void (**)(uint64_t, void, uint64_t))(v100 + 32))(v98, *(void *)(v0 + 384), v99);
    GenerativeFunctionInstrumenter.executionEnd(error:)();
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v98, v99);
  }
  unint64_t v101 = *(void *)(v0 + 312);
  uint64_t v102 = *(void *)(v0 + 256);
  unint64_t v103 = *(void *)(v0 + 224);
  char v104 = *(void *)(v0 + 232);
  swift_willThrow();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v101, &demangling cache variable for type metadata for GenerativeError?);
  (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v102, v103);
  uint64_t v105 = *(void **)(v0 + 32);
LABEL_50:

LABEL_51:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v144 = *(uint64_t (**)(void))(v0 + 8);
  return v144();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 528) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:);
  }
  else {
    uint64_t v2 = specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  void (*v7)(uint64_t, uint64_t);
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v10 = v0[3];
  uint64_t v11 = v0[2];
  if (!v10)
  {
    uint64_t v1 = v0[59];
    uint64_t v2 = v0[52];
    uint64_t v3 = v0[53];
    uint64_t v4 = v0[9];
    uint64_t v5 = v4 + *(int *)(type metadata accessor for TokenGeneratorResponseStringStreamAsyncIterator(0) + 20);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    v6(v1, v5, v2);
    GenerativeFunctionInstrumenter.inferenceEnd()();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v7(v1, v2);
    v6(v1, v5, v2);
    GenerativeFunctionInstrumenter.executionEnd(error:)();
    v7(v1, v2);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v8(v11, v10);
}

{
  uint64_t v0;
  int v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  void (*v63)(uint64_t, uint64_t, uint64_t);
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t (*v144)(void);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(uint64_t, uint64_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(uint64_t, uint64_t, uint64_t);
  void (*v160)(uint64_t, uint64_t, uint64_t);
  void (*v161)(uint64_t, uint64_t, uint64_t);
  uint64_t v162;

  *(void *)(v0 + 32) = *(void *)(v0 + 528);
  MEMORY[0x261201A80]();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = swift_dynamicCast();
  uint64_t v2 = *(void **)(v0 + 528);
  if (v1)
  {
    uint64_t v4 = *(void *)(v0 + 496);
    uint64_t v3 = *(void *)(v0 + 504);
    uint64_t v5 = *(void *)(v0 + 480);
    uint64_t v6 = *(void *)(v0 + 488);
    uint64_t v7 = *(void *)(v0 + 424);
    char v158 = *(void *)(v0 + 416);
    uint64_t v8 = *(void *)(v0 + 408);
    uint64_t v9 = *(void *)(v0 + 64);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, v3, v5);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, v4, v5);
    outlined init with copy of Prompt.Rendering?(v9, v8, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v158) == 1)
    {
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 408), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    }
    else
    {
      uint64_t v21 = *(void *)(v0 + 464);
      uint64_t v22 = *(void *)(v0 + 416);
      uint64_t v23 = *(void *)(v0 + 424);
      (*(void (**)(uint64_t, void, uint64_t))(v23 + 32))(v21, *(void *)(v0 + 408), v22);
      GenerativeFunctionInstrumenter.executionEnd(error:)();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
    }
    uint64_t v25 = *(void *)(v0 + 488);
    uint64_t v24 = *(void *)(v0 + 496);
    uint64_t v26 = *(void *)(v0 + 480);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);

    goto LABEL_51;
  }

  *(void *)(v0 + 40) = v2;
  MEMORY[0x261201A80](v2);
  uint64_t v11 = swift_dynamicCast();
  uint64_t v12 = *(void **)(v0 + 528);
  if (v11)
  {
    uint64_t v13 = *(void *)(v0 + 480);
    uint64_t v14 = *(void *)(v0 + 488);
    uint64_t v16 = *(void *)(v0 + 360);
    uint64_t v15 = *(void *)(v0 + 368);
    uint64_t v18 = *(void *)(v0 + 328);
    uint64_t v17 = *(void *)(v0 + 336);

    outlined init with take of PromptCompletionStream(v15, v16, type metadata accessor for TokenGenerationError);
    static TokenGenerator.map(tokenGenerationError:)(v16, v17);
    outlined init with copy of Prompt.Rendering?(v17, v18, &demangling cache variable for type metadata for GenerativeError?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v18, 1, v13) == 1)
    {
      uint64_t v19 = *(void *)(v0 + 352);
      uint64_t v20 = *(void *)(v0 + 360);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 328), &demangling cache variable for type metadata for GenerativeError?);
      outlined init with copy of PromptCompletion(v20, v19, type metadata accessor for TokenGenerationError);
    }
    else
    {
      uint64_t v45 = *(void *)(v0 + 480);
      int v46 = *(void *)(v0 + 488);
      int v48 = *(void *)(v0 + 352);
      uint64_t v47 = *(void *)(v0 + 360);
      uint64_t v49 = *(void *)(v0 + 328);
      lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
      uint64_t v50 = swift_allocError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v51, v49, v45);
      outlined init with copy of PromptCompletion(v47, v48, type metadata accessor for TokenGenerationError);
      if (v50)
      {
        outlined destroy of TokenGeneratorCompletionResponseStringStream(*(void *)(v0 + 352), type metadata accessor for TokenGenerationError);
LABEL_15:
        uint64_t v54 = *(void *)(v0 + 416);
        uint64_t v55 = *(void *)(v0 + 424);
        unint64_t v56 = *(void *)(v0 + 400);
        outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 64), v56, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v56, 1, v54) == 1)
        {
          outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 400), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        }
        else
        {
          uint64_t v68 = *(void *)(v0 + 456);
          long long v69 = *(void *)(v0 + 416);
          uint64_t v70 = *(void *)(v0 + 424);
          (*(void (**)(uint64_t, void, uint64_t))(v70 + 32))(v68, *(void *)(v0 + 400), v69);
          GenerativeFunctionInstrumenter.executionEnd(error:)();
          (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v68, v69);
        }
        uint64_t v71 = *(void *)(v0 + 360);
        long long v72 = *(void *)(v0 + 336);
        swift_willThrow();
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(v72, &demangling cache variable for type metadata for GenerativeError?);
        outlined destroy of TokenGeneratorCompletionResponseStringStream(v71, type metadata accessor for TokenGenerationError);

        goto LABEL_51;
      }
    }
    long long v52 = *(void *)(v0 + 352);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))type metadata accessor for TokenGenerationError);
    swift_allocError();
    outlined init with take of PromptCompletionStream(v52, v53, type metadata accessor for TokenGenerationError);
    goto LABEL_15;
  }

  *(void *)(v0 + 48) = v12;
  MEMORY[0x261201A80](v12);
  uint64_t v27 = swift_dynamicCast();
  uint64_t v28 = *(void **)(v0 + 528);
  if ((v27 & 1) == 0)
  {

    *(void *)(v0 + 56) = v28;
    MEMORY[0x261201A80](v28);
    if ((swift_dynamicCast() & 1) == 0)
    {
      uint64_t v80 = *(void *)(v0 + 416);
      uint64_t v81 = *(void *)(v0 + 424);
      unint64_t v82 = *(void *)(v0 + 384);
      uint64_t v83 = *(void *)(v0 + 64);

      outlined init with copy of Prompt.Rendering?(v83, v82, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v82, 1, v80) == 1)
      {
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 384), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
      }
      else
      {
        uint64_t v106 = *(void *)(v0 + 440);
        id v107 = *(void *)(v0 + 416);
        uint64_t v108 = *(void *)(v0 + 424);
        (*(void (**)(uint64_t, void, uint64_t))(v108 + 32))(v106, *(void *)(v0 + 384), v107);
        GenerativeFunctionInstrumenter.executionEnd(error:)();
        (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v106, v107);
      }
      swift_willThrow();
      goto LABEL_51;
    }
    char v57 = *(void *)(v0 + 216);
    uint64_t v58 = *(void *)(v0 + 224);
    unint64_t v59 = *(void *)(v0 + 208);
    unint64_t v60 = *(void *)(v0 + 184);
    uint64_t v61 = *(void *)(v0 + 192);

    uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 32);
    v62(v57, v58, v60);
    long long v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16);
    v63(v59, v57, v60);
    uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 88))(v59, v60);
    if (v64 == *MEMORY[0x263F61FF0] || v64 == *MEMORY[0x263F61FE8])
    {
      uint64_t v65 = *(void *)(v0 + 480);
      char v66 = *(void *)(v0 + 488);
      uint64_t v67 = *(void *)(v0 + 288);
      (*(void (**)(void, void))(*(void *)(v0 + 192) + 8))(*(void *)(v0 + 208), *(void *)(v0 + 184));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v67, 1, 1, v65);
    }
    else
    {
      unint64_t v160 = v63;
      uint64_t v109 = *(void *)(v0 + 208);
      uint64_t v111 = *(void *)(v0 + 184);
      uint64_t v110 = *(void *)(v0 + 192);
      if (v64 == *MEMORY[0x263F61FF8])
      {
        BOOL v156 = *(void *)(v0 + 152);
        id v112 = *(void *)(v0 + 136);
        unint64_t v146 = *(void *)(v0 + 144);
        uint64_t v155 = *(void *)(v0 + 128);
        unint64_t v149 = *(void *)(v0 + 120);
        uint64_t v113 = *(void *)(v0 + 96);
        char v151 = *(void *)(v0 + 112);
        uint64_t v152 = *(void *)(v0 + 104);
        uint64_t v114 = *(void *)(v0 + 88);
        uint64_t v147 = *(void *)(v0 + 488);
        uint64_t v148 = *(void *)(v0 + 80);
        uint64_t v153 = *(void *)(v0 + 480);
        uint64_t v150 = *(void *)(v0 + 288);
        (*(void (**)(uint64_t, uint64_t))(v110 + 96))(v109, v111);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 32))(v156, v109, v155);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 16))(v146, v156, v155);
        GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType.UnboundBindableVariableErrorInfo.init(bindableVariable:)();
        (*(void (**)(uint64_t, void, uint64_t))(v114 + 104))(v113, *MEMORY[0x263F40B30], v148);
        static GenerativeError.RuntimeError.ErrorType.configurationError(type:)();
        (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v113, v148);
        static GenerativeError.runtimeError(type:)();
        (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v149, v152);
        (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v156, v155);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v147 + 56))(v150, 0, 1, v153);
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 488) + 56))(*(void *)(v0 + 288), 1, 1, *(void *)(v0 + 480));
        (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v109, v111);
      }
      long long v63 = v160;
    }
    uint64_t v115 = *(void *)(v0 + 480);
    uint64_t v116 = *(void *)(v0 + 488);
    uint64_t v117 = *(void *)(v0 + 296);
    int v118 = *(void *)(v0 + 280);
    outlined init with take of Locale?(*(void *)(v0 + 288), v117, &demangling cache variable for type metadata for GenerativeError?);
    outlined init with copy of Prompt.Rendering?(v117, v118, &demangling cache variable for type metadata for GenerativeError?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48))(v118, 1, v115) == 1)
    {
      uint64_t v119 = *(void *)(v0 + 216);
      uint64_t v120 = *(void *)(v0 + 200);
      uint64_t v121 = *(void *)(v0 + 184);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 280), &demangling cache variable for type metadata for GenerativeError?);
      v63(v120, v119, v121);
    }
    else
    {
      uint64_t v161 = v63;
      uint64_t v122 = *(void *)(v0 + 480);
      uint64_t v123 = *(void *)(v0 + 488);
      unint64_t v124 = *(void *)(v0 + 280);
      uint64_t v157 = *(void *)(v0 + 216);
      uint64_t v125 = *(void *)(v0 + 200);
      uint64_t v126 = *(void *)(v0 + 184);
      lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
      uint64_t v127 = v62;
      uint64_t v128 = swift_allocError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v123 + 32))(v129, v124, v122);
      unint64_t v130 = v128;
      uint64_t v62 = v127;
      v161(v125, v157, v126);
      if (v130)
      {
        (*(void (**)(void, void))(*(void *)(v0 + 192) + 8))(*(void *)(v0 + 200), *(void *)(v0 + 184));
LABEL_46:
        uint64_t v134 = *(void *)(v0 + 416);
        unint64_t v135 = *(void *)(v0 + 424);
        uint64_t v136 = *(void *)(v0 + 376);
        outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 64), v136, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v136, 1, v134) == 1)
        {
          outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 376), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        }
        else
        {
          uint64_t v138 = *(void *)(v0 + 424);
          uint64_t v137 = *(void *)(v0 + 432);
          uint64_t v139 = *(void *)(v0 + 416);
          (*(void (**)(uint64_t, void, uint64_t))(v138 + 32))(v137, *(void *)(v0 + 376), v139);
          GenerativeFunctionInstrumenter.executionEnd(error:)();
          (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v137, v139);
        }
        uint64_t v140 = *(void *)(v0 + 296);
        uint64_t v141 = *(void *)(v0 + 216);
        uint64_t v142 = *(void *)(v0 + 184);
        uint64_t v143 = *(void *)(v0 + 192);
        swift_willThrow();
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(v140, &demangling cache variable for type metadata for GenerativeError?);
        (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v141, v142);
        uint64_t v105 = *(void **)(v0 + 56);
        goto LABEL_50;
      }
    }
    uint64_t v131 = *(void *)(v0 + 200);
    uint64_t v132 = *(void *)(v0 + 184);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type Prompt.RenderError and conformance Prompt.RenderError, MEMORY[0x263F62000]);
    swift_allocError();
    v62(v133, v131, v132);
    goto LABEL_46;
  }
  uint64_t v29 = *(void *)(v0 + 264);
  uint64_t v30 = *(void *)(v0 + 272);
  uint64_t v31 = *(void *)(v0 + 256);
  uint64_t v32 = *(void *)(v0 + 232);
  uint64_t v33 = *(void *)(v0 + 240);

  unint64_t v154 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32);
  v154(v29, v30, v32);
  uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
  v34(v31, v29, v32);
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 88))(v31, v32);
  uint64_t v36 = *(void *)(v0 + 488);
  uint64_t v37 = *(void *)(v0 + 312);
  uint64_t v38 = *(void *)(v0 + 256);
  uint64_t v39 = *(void *)(v0 + 232);
  uint64_t v40 = *(void *)(v0 + 240);
  BOOL v159 = v34;
  if (v35 == *MEMORY[0x263F56200])
  {
    uint64_t v41 = *(void *)(v0 + 168);
    uint64_t v42 = *(void *)(v0 + 176);
    uint64_t v43 = *(void *)(v0 + 160);
    uint64_t v44 = *(void *)(v0 + 480);
    (*(void (**)(uint64_t, void))(v40 + 96))(v38, *(void *)(v0 + 232));
    GenerativeError.AvailabilityError.ErrorType.UseCaseDisabledErrorInfo.init(useCaseIdentifier:)();
    (*(void (**)(uint64_t, void, uint64_t))(v41 + 104))(v42, *MEMORY[0x263F40A28], v43);
    static GenerativeError.availabilityError(type:)();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v43);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v37, 0, 1, v44);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v36 + 56))(v37, 1, 1, *(void *)(v0 + 480));
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
  }
  uint64_t v73 = *(void *)(v0 + 480);
  uint64_t v74 = *(void *)(v0 + 488);
  char v75 = *(void *)(v0 + 320);
  uint64_t v76 = *(void *)(v0 + 304);
  outlined init with take of Locale?(*(void *)(v0 + 312), v75, &demangling cache variable for type metadata for GenerativeError?);
  outlined init with copy of Prompt.Rendering?(v75, v76, &demangling cache variable for type metadata for GenerativeError?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v76, 1, v73) == 1)
  {
    uint64_t v77 = *(void *)(v0 + 264);
    uint64_t v78 = *(void *)(v0 + 248);
    char v79 = *(void *)(v0 + 232);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 304), &demangling cache variable for type metadata for GenerativeError?);
    v159(v78, v77, v79);
LABEL_30:
    uint64_t v92 = *(void *)(v0 + 248);
    unint64_t v93 = *(void *)(v0 + 232);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type ModelManagerError and conformance ModelManagerError, MEMORY[0x263F56220]);
    swift_allocError();
    v154(v94, v92, v93);
    goto LABEL_31;
  }
  char v84 = *(void *)(v0 + 480);
  uint64_t v85 = *(void *)(v0 + 488);
  uint64_t v86 = *(void *)(v0 + 304);
  char v87 = *(void *)(v0 + 264);
  uint64_t v88 = *(void *)(v0 + 248);
  uint64_t v89 = *(void *)(v0 + 232);
  lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
  uint64_t v90 = swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 32))(v91, v86, v84);
  v159(v88, v87, v89);
  if (!v90) {
    goto LABEL_30;
  }
  (*(void (**)(void, void))(*(void *)(v0 + 240) + 8))(*(void *)(v0 + 248), *(void *)(v0 + 232));
LABEL_31:
  uint64_t v95 = *(void *)(v0 + 416);
  uint64_t v96 = *(void *)(v0 + 424);
  uint64_t v97 = *(void *)(v0 + 392);
  outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 64), v97, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(v97, 1, v95) == 1)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 392), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  }
  else
  {
    uint64_t v98 = *(void *)(v0 + 448);
    uint64_t v99 = *(void *)(v0 + 416);
    uint64_t v100 = *(void *)(v0 + 424);
    (*(void (**)(uint64_t, void, uint64_t))(v100 + 32))(v98, *(void *)(v0 + 392), v99);
    GenerativeFunctionInstrumenter.executionEnd(error:)();
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v98, v99);
  }
  unint64_t v101 = *(void *)(v0 + 320);
  uint64_t v102 = *(void *)(v0 + 264);
  unint64_t v103 = *(void *)(v0 + 232);
  char v104 = *(void *)(v0 + 240);
  swift_willThrow();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v101, &demangling cache variable for type metadata for GenerativeError?);
  (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v102, v103);
  uint64_t v105 = *(void **)(v0 + 48);
LABEL_50:

LABEL_51:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v144 = *(uint64_t (**)(void))(v0 + 8);
  return v144();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 520) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:);
  }
  else {
    uint64_t v2 = specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v4 = v0[3];
  uint64_t v5 = v0[2];
  uint64_t v3 = v0[4];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v1(v5, v4, v3);
}

{
  uint64_t v0;
  int v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  void (*v63)(uint64_t, uint64_t, uint64_t);
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t (*v144)(void);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(uint64_t, uint64_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(uint64_t, uint64_t, uint64_t);
  void (*v160)(uint64_t, uint64_t, uint64_t);
  void (*v161)(uint64_t, uint64_t, uint64_t);
  uint64_t v162;

  *(void *)(v0 + 40) = *(void *)(v0 + 520);
  MEMORY[0x261201A80]();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = swift_dynamicCast();
  uint64_t v2 = *(void **)(v0 + 520);
  if (v1)
  {
    uint64_t v4 = *(void *)(v0 + 488);
    uint64_t v3 = *(void *)(v0 + 496);
    uint64_t v5 = *(void *)(v0 + 472);
    uint64_t v6 = *(void *)(v0 + 480);
    uint64_t v7 = *(void *)(v0 + 424);
    char v158 = *(void *)(v0 + 416);
    uint64_t v8 = *(void *)(v0 + 408);
    uint64_t v9 = *(void *)(v0 + 72);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, v3, v5);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, v4, v5);
    outlined init with copy of Prompt.Rendering?(v9, v8, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v158) == 1)
    {
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 408), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    }
    else
    {
      uint64_t v21 = *(void *)(v0 + 464);
      uint64_t v22 = *(void *)(v0 + 416);
      uint64_t v23 = *(void *)(v0 + 424);
      (*(void (**)(uint64_t, void, uint64_t))(v23 + 32))(v21, *(void *)(v0 + 408), v22);
      GenerativeFunctionInstrumenter.executionEnd(error:)();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
    }
    uint64_t v25 = *(void *)(v0 + 480);
    uint64_t v24 = *(void *)(v0 + 488);
    uint64_t v26 = *(void *)(v0 + 472);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);

    goto LABEL_51;
  }

  *(void *)(v0 + 48) = v2;
  MEMORY[0x261201A80](v2);
  uint64_t v11 = swift_dynamicCast();
  uint64_t v12 = *(void **)(v0 + 520);
  if (v11)
  {
    uint64_t v13 = *(void *)(v0 + 472);
    uint64_t v14 = *(void *)(v0 + 480);
    uint64_t v16 = *(void *)(v0 + 360);
    uint64_t v15 = *(void *)(v0 + 368);
    uint64_t v18 = *(void *)(v0 + 328);
    uint64_t v17 = *(void *)(v0 + 336);

    outlined init with take of PromptCompletionStream(v15, v16, type metadata accessor for TokenGenerationError);
    static TokenGenerator.map(tokenGenerationError:)(v16, v17);
    outlined init with copy of Prompt.Rendering?(v17, v18, &demangling cache variable for type metadata for GenerativeError?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v18, 1, v13) == 1)
    {
      uint64_t v19 = *(void *)(v0 + 352);
      uint64_t v20 = *(void *)(v0 + 360);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 328), &demangling cache variable for type metadata for GenerativeError?);
      outlined init with copy of PromptCompletion(v20, v19, type metadata accessor for TokenGenerationError);
    }
    else
    {
      uint64_t v45 = *(void *)(v0 + 472);
      int v46 = *(void *)(v0 + 480);
      int v48 = *(void *)(v0 + 352);
      uint64_t v47 = *(void *)(v0 + 360);
      uint64_t v49 = *(void *)(v0 + 328);
      lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
      uint64_t v50 = swift_allocError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v51, v49, v45);
      outlined init with copy of PromptCompletion(v47, v48, type metadata accessor for TokenGenerationError);
      if (v50)
      {
        outlined destroy of TokenGeneratorCompletionResponseStringStream(*(void *)(v0 + 352), type metadata accessor for TokenGenerationError);
LABEL_15:
        uint64_t v54 = *(void *)(v0 + 416);
        uint64_t v55 = *(void *)(v0 + 424);
        unint64_t v56 = *(void *)(v0 + 400);
        outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 72), v56, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v56, 1, v54) == 1)
        {
          outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 400), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        }
        else
        {
          uint64_t v68 = *(void *)(v0 + 456);
          long long v69 = *(void *)(v0 + 416);
          uint64_t v70 = *(void *)(v0 + 424);
          (*(void (**)(uint64_t, void, uint64_t))(v70 + 32))(v68, *(void *)(v0 + 400), v69);
          GenerativeFunctionInstrumenter.executionEnd(error:)();
          (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v68, v69);
        }
        uint64_t v71 = *(void *)(v0 + 360);
        long long v72 = *(void *)(v0 + 336);
        swift_willThrow();
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(v72, &demangling cache variable for type metadata for GenerativeError?);
        outlined destroy of TokenGeneratorCompletionResponseStringStream(v71, type metadata accessor for TokenGenerationError);

        goto LABEL_51;
      }
    }
    long long v52 = *(void *)(v0 + 352);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))type metadata accessor for TokenGenerationError);
    swift_allocError();
    outlined init with take of PromptCompletionStream(v52, v53, type metadata accessor for TokenGenerationError);
    goto LABEL_15;
  }

  *(void *)(v0 + 56) = v12;
  MEMORY[0x261201A80](v12);
  uint64_t v27 = swift_dynamicCast();
  uint64_t v28 = *(void **)(v0 + 520);
  if ((v27 & 1) == 0)
  {

    *(void *)(v0 + 64) = v28;
    MEMORY[0x261201A80](v28);
    if ((swift_dynamicCast() & 1) == 0)
    {
      uint64_t v80 = *(void *)(v0 + 416);
      uint64_t v81 = *(void *)(v0 + 424);
      unint64_t v82 = *(void *)(v0 + 384);
      uint64_t v83 = *(void *)(v0 + 72);

      outlined init with copy of Prompt.Rendering?(v83, v82, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v82, 1, v80) == 1)
      {
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 384), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
      }
      else
      {
        uint64_t v106 = *(void *)(v0 + 440);
        id v107 = *(void *)(v0 + 416);
        uint64_t v108 = *(void *)(v0 + 424);
        (*(void (**)(uint64_t, void, uint64_t))(v108 + 32))(v106, *(void *)(v0 + 384), v107);
        GenerativeFunctionInstrumenter.executionEnd(error:)();
        (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v106, v107);
      }
      swift_willThrow();
      goto LABEL_51;
    }
    char v57 = *(void *)(v0 + 216);
    uint64_t v58 = *(void *)(v0 + 224);
    unint64_t v59 = *(void *)(v0 + 208);
    unint64_t v60 = *(void *)(v0 + 184);
    uint64_t v61 = *(void *)(v0 + 192);

    uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 32);
    v62(v57, v58, v60);
    long long v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16);
    v63(v59, v57, v60);
    uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 88))(v59, v60);
    if (v64 == *MEMORY[0x263F61FF0] || v64 == *MEMORY[0x263F61FE8])
    {
      uint64_t v65 = *(void *)(v0 + 472);
      char v66 = *(void *)(v0 + 480);
      uint64_t v67 = *(void *)(v0 + 288);
      (*(void (**)(void, void))(*(void *)(v0 + 192) + 8))(*(void *)(v0 + 208), *(void *)(v0 + 184));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v67, 1, 1, v65);
    }
    else
    {
      unint64_t v160 = v63;
      uint64_t v109 = *(void *)(v0 + 208);
      uint64_t v111 = *(void *)(v0 + 184);
      uint64_t v110 = *(void *)(v0 + 192);
      if (v64 == *MEMORY[0x263F61FF8])
      {
        BOOL v156 = *(void *)(v0 + 152);
        id v112 = *(void *)(v0 + 136);
        unint64_t v146 = *(void *)(v0 + 144);
        uint64_t v155 = *(void *)(v0 + 128);
        unint64_t v149 = *(void *)(v0 + 120);
        uint64_t v113 = *(void *)(v0 + 96);
        char v151 = *(void *)(v0 + 112);
        uint64_t v152 = *(void *)(v0 + 104);
        uint64_t v114 = *(void *)(v0 + 88);
        uint64_t v147 = *(void *)(v0 + 480);
        uint64_t v148 = *(void *)(v0 + 80);
        uint64_t v153 = *(void *)(v0 + 472);
        uint64_t v150 = *(void *)(v0 + 288);
        (*(void (**)(uint64_t, uint64_t))(v110 + 96))(v109, v111);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 32))(v156, v109, v155);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 16))(v146, v156, v155);
        GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType.UnboundBindableVariableErrorInfo.init(bindableVariable:)();
        (*(void (**)(uint64_t, void, uint64_t))(v114 + 104))(v113, *MEMORY[0x263F40B30], v148);
        static GenerativeError.RuntimeError.ErrorType.configurationError(type:)();
        (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v113, v148);
        static GenerativeError.runtimeError(type:)();
        (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v149, v152);
        (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v156, v155);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v147 + 56))(v150, 0, 1, v153);
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 480) + 56))(*(void *)(v0 + 288), 1, 1, *(void *)(v0 + 472));
        (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v109, v111);
      }
      long long v63 = v160;
    }
    uint64_t v115 = *(void *)(v0 + 472);
    uint64_t v116 = *(void *)(v0 + 480);
    uint64_t v117 = *(void *)(v0 + 296);
    int v118 = *(void *)(v0 + 280);
    outlined init with take of Locale?(*(void *)(v0 + 288), v117, &demangling cache variable for type metadata for GenerativeError?);
    outlined init with copy of Prompt.Rendering?(v117, v118, &demangling cache variable for type metadata for GenerativeError?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48))(v118, 1, v115) == 1)
    {
      uint64_t v119 = *(void *)(v0 + 216);
      uint64_t v120 = *(void *)(v0 + 200);
      uint64_t v121 = *(void *)(v0 + 184);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 280), &demangling cache variable for type metadata for GenerativeError?);
      v63(v120, v119, v121);
    }
    else
    {
      uint64_t v161 = v63;
      uint64_t v122 = *(void *)(v0 + 472);
      uint64_t v123 = *(void *)(v0 + 480);
      unint64_t v124 = *(void *)(v0 + 280);
      uint64_t v157 = *(void *)(v0 + 216);
      uint64_t v125 = *(void *)(v0 + 200);
      uint64_t v126 = *(void *)(v0 + 184);
      lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
      uint64_t v127 = v62;
      uint64_t v128 = swift_allocError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v123 + 32))(v129, v124, v122);
      unint64_t v130 = v128;
      uint64_t v62 = v127;
      v161(v125, v157, v126);
      if (v130)
      {
        (*(void (**)(void, void))(*(void *)(v0 + 192) + 8))(*(void *)(v0 + 200), *(void *)(v0 + 184));
LABEL_46:
        uint64_t v134 = *(void *)(v0 + 416);
        unint64_t v135 = *(void *)(v0 + 424);
        uint64_t v136 = *(void *)(v0 + 376);
        outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 72), v136, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v136, 1, v134) == 1)
        {
          outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 376), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        }
        else
        {
          uint64_t v138 = *(void *)(v0 + 424);
          uint64_t v137 = *(void *)(v0 + 432);
          uint64_t v139 = *(void *)(v0 + 416);
          (*(void (**)(uint64_t, void, uint64_t))(v138 + 32))(v137, *(void *)(v0 + 376), v139);
          GenerativeFunctionInstrumenter.executionEnd(error:)();
          (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v137, v139);
        }
        uint64_t v140 = *(void *)(v0 + 296);
        uint64_t v141 = *(void *)(v0 + 216);
        uint64_t v142 = *(void *)(v0 + 184);
        uint64_t v143 = *(void *)(v0 + 192);
        swift_willThrow();
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(v140, &demangling cache variable for type metadata for GenerativeError?);
        (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v141, v142);
        uint64_t v105 = *(void **)(v0 + 64);
        goto LABEL_50;
      }
    }
    uint64_t v131 = *(void *)(v0 + 200);
    uint64_t v132 = *(void *)(v0 + 184);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type Prompt.RenderError and conformance Prompt.RenderError, MEMORY[0x263F62000]);
    swift_allocError();
    v62(v133, v131, v132);
    goto LABEL_46;
  }
  uint64_t v29 = *(void *)(v0 + 264);
  uint64_t v30 = *(void *)(v0 + 272);
  uint64_t v31 = *(void *)(v0 + 256);
  uint64_t v32 = *(void *)(v0 + 232);
  uint64_t v33 = *(void *)(v0 + 240);

  unint64_t v154 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32);
  v154(v29, v30, v32);
  uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
  v34(v31, v29, v32);
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 88))(v31, v32);
  uint64_t v36 = *(void *)(v0 + 480);
  uint64_t v37 = *(void *)(v0 + 312);
  uint64_t v38 = *(void *)(v0 + 256);
  uint64_t v39 = *(void *)(v0 + 232);
  uint64_t v40 = *(void *)(v0 + 240);
  BOOL v159 = v34;
  if (v35 == *MEMORY[0x263F56200])
  {
    uint64_t v41 = *(void *)(v0 + 168);
    uint64_t v42 = *(void *)(v0 + 176);
    uint64_t v43 = *(void *)(v0 + 160);
    uint64_t v44 = *(void *)(v0 + 472);
    (*(void (**)(uint64_t, void))(v40 + 96))(v38, *(void *)(v0 + 232));
    GenerativeError.AvailabilityError.ErrorType.UseCaseDisabledErrorInfo.init(useCaseIdentifier:)();
    (*(void (**)(uint64_t, void, uint64_t))(v41 + 104))(v42, *MEMORY[0x263F40A28], v43);
    static GenerativeError.availabilityError(type:)();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v43);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v37, 0, 1, v44);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v36 + 56))(v37, 1, 1, *(void *)(v0 + 472));
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
  }
  uint64_t v73 = *(void *)(v0 + 472);
  uint64_t v74 = *(void *)(v0 + 480);
  char v75 = *(void *)(v0 + 320);
  uint64_t v76 = *(void *)(v0 + 304);
  outlined init with take of Locale?(*(void *)(v0 + 312), v75, &demangling cache variable for type metadata for GenerativeError?);
  outlined init with copy of Prompt.Rendering?(v75, v76, &demangling cache variable for type metadata for GenerativeError?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v76, 1, v73) == 1)
  {
    uint64_t v77 = *(void *)(v0 + 264);
    uint64_t v78 = *(void *)(v0 + 248);
    char v79 = *(void *)(v0 + 232);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 304), &demangling cache variable for type metadata for GenerativeError?);
    v159(v78, v77, v79);
LABEL_30:
    uint64_t v92 = *(void *)(v0 + 248);
    unint64_t v93 = *(void *)(v0 + 232);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type ModelManagerError and conformance ModelManagerError, MEMORY[0x263F56220]);
    swift_allocError();
    v154(v94, v92, v93);
    goto LABEL_31;
  }
  char v84 = *(void *)(v0 + 472);
  uint64_t v85 = *(void *)(v0 + 480);
  uint64_t v86 = *(void *)(v0 + 304);
  char v87 = *(void *)(v0 + 264);
  uint64_t v88 = *(void *)(v0 + 248);
  uint64_t v89 = *(void *)(v0 + 232);
  lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
  uint64_t v90 = swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 32))(v91, v86, v84);
  v159(v88, v87, v89);
  if (!v90) {
    goto LABEL_30;
  }
  (*(void (**)(void, void))(*(void *)(v0 + 240) + 8))(*(void *)(v0 + 248), *(void *)(v0 + 232));
LABEL_31:
  uint64_t v95 = *(void *)(v0 + 416);
  uint64_t v96 = *(void *)(v0 + 424);
  uint64_t v97 = *(void *)(v0 + 392);
  outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 72), v97, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(v97, 1, v95) == 1)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 392), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  }
  else
  {
    uint64_t v98 = *(void *)(v0 + 448);
    uint64_t v99 = *(void *)(v0 + 416);
    uint64_t v100 = *(void *)(v0 + 424);
    (*(void (**)(uint64_t, void, uint64_t))(v100 + 32))(v98, *(void *)(v0 + 392), v99);
    GenerativeFunctionInstrumenter.executionEnd(error:)();
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v98, v99);
  }
  unint64_t v101 = *(void *)(v0 + 320);
  uint64_t v102 = *(void *)(v0 + 264);
  unint64_t v103 = *(void *)(v0 + 232);
  char v104 = *(void *)(v0 + 240);
  swift_willThrow();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v101, &demangling cache variable for type metadata for GenerativeError?);
  (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v102, v103);
  uint64_t v105 = *(void **)(v0 + 56);
LABEL_50:

LABEL_51:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v144 = *(uint64_t (**)(void))(v0 + 8);
  return v144();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 512) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:);
  }
  else {
    uint64_t v2 = specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  int v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  void (*v63)(uint64_t, uint64_t, uint64_t);
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(uint64_t, uint64_t, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t (*v146)(void);
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(uint64_t, uint64_t, uint64_t);
  uint64_t v157;
  void (*v158)(uint64_t, uint64_t, uint64_t);
  uint64_t v159;
  void (*v160)(uint64_t, uint64_t, uint64_t);
  uint64_t v161;

  *(void *)(v0 + 16) = *(void *)(v0 + 512);
  MEMORY[0x261201A80]();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = swift_dynamicCast();
  uint64_t v2 = *(void **)(v0 + 512);
  if (v1)
  {
    uint64_t v4 = *(void *)(v0 + 480);
    uint64_t v3 = *(void *)(v0 + 488);
    uint64_t v5 = *(void *)(v0 + 464);
    uint64_t v6 = *(void *)(v0 + 472);
    uint64_t v7 = *(void *)(v0 + 416);
    BOOL v159 = *(void *)(v0 + 408);
    uint64_t v8 = *(void *)(v0 + 400);
    uint64_t v9 = *(void *)(v0 + 48);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, v3, v5);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, v4, v5);
    outlined init with copy of Prompt.Rendering?(v9, v8, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v159) == 1)
    {
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 400), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    }
    else
    {
      uint64_t v21 = *(void *)(v0 + 456);
      uint64_t v22 = *(void *)(v0 + 408);
      uint64_t v23 = *(void *)(v0 + 416);
      (*(void (**)(uint64_t, void, uint64_t))(v23 + 32))(v21, *(void *)(v0 + 400), v22);
      GenerativeFunctionInstrumenter.executionEnd(error:)();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
    }
    uint64_t v25 = *(void *)(v0 + 472);
    uint64_t v24 = *(void *)(v0 + 480);
    uint64_t v26 = *(void *)(v0 + 464);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);

    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_51;
  }

  *(void *)(v0 + 24) = v2;
  MEMORY[0x261201A80](v2);
  uint64_t v11 = swift_dynamicCast();
  uint64_t v12 = *(void **)(v0 + 512);
  if (v11)
  {
    uint64_t v13 = *(void *)(v0 + 464);
    uint64_t v14 = *(void *)(v0 + 472);
    uint64_t v16 = *(void *)(v0 + 352);
    uint64_t v15 = *(void *)(v0 + 360);
    uint64_t v18 = *(void *)(v0 + 320);
    uint64_t v17 = *(void *)(v0 + 328);

    outlined init with take of PromptCompletionStream(v15, v16, type metadata accessor for TokenGenerationError);
    static TokenGenerator.map(tokenGenerationError:)(v16, v17);
    outlined init with copy of Prompt.Rendering?(v17, v18, &demangling cache variable for type metadata for GenerativeError?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v18, 1, v13) == 1)
    {
      uint64_t v19 = *(void *)(v0 + 344);
      uint64_t v20 = *(void *)(v0 + 352);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 320), &demangling cache variable for type metadata for GenerativeError?);
      outlined init with copy of PromptCompletion(v20, v19, type metadata accessor for TokenGenerationError);
    }
    else
    {
      uint64_t v45 = *(void *)(v0 + 464);
      int v46 = *(void *)(v0 + 472);
      int v48 = *(void *)(v0 + 344);
      uint64_t v47 = *(void *)(v0 + 352);
      uint64_t v49 = *(void *)(v0 + 320);
      lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
      uint64_t v50 = swift_allocError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v51, v49, v45);
      outlined init with copy of PromptCompletion(v47, v48, type metadata accessor for TokenGenerationError);
      if (v50)
      {
        outlined destroy of TokenGeneratorCompletionResponseStringStream(*(void *)(v0 + 344), type metadata accessor for TokenGenerationError);
LABEL_15:
        uint64_t v54 = *(void *)(v0 + 408);
        uint64_t v55 = *(void *)(v0 + 416);
        unint64_t v56 = *(void *)(v0 + 392);
        outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 48), v56, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v56, 1, v54) == 1)
        {
          outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 392), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        }
        else
        {
          uint64_t v68 = *(void *)(v0 + 448);
          long long v69 = *(void *)(v0 + 408);
          uint64_t v70 = *(void *)(v0 + 416);
          (*(void (**)(uint64_t, void, uint64_t))(v70 + 32))(v68, *(void *)(v0 + 392), v69);
          GenerativeFunctionInstrumenter.executionEnd(error:)();
          (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v68, v69);
        }
        uint64_t v71 = *(void *)(v0 + 352);
        long long v72 = *(void *)(v0 + 328);
        swift_willThrow();
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(v72, &demangling cache variable for type metadata for GenerativeError?);
        outlined destroy of TokenGeneratorCompletionResponseStringStream(v71, type metadata accessor for TokenGenerationError);

        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }
    }
    long long v52 = *(void *)(v0 + 344);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))type metadata accessor for TokenGenerationError);
    swift_allocError();
    outlined init with take of PromptCompletionStream(v52, v53, type metadata accessor for TokenGenerationError);
    goto LABEL_15;
  }

  *(void *)(v0 + 32) = v12;
  MEMORY[0x261201A80](v12);
  uint64_t v27 = swift_dynamicCast();
  uint64_t v28 = *(void **)(v0 + 512);
  if ((v27 & 1) == 0)
  {

    *(void *)(v0 + 40) = v28;
    MEMORY[0x261201A80](v28);
    if ((swift_dynamicCast() & 1) == 0)
    {
      uint64_t v80 = *(void *)(v0 + 408);
      uint64_t v81 = *(void *)(v0 + 416);
      unint64_t v82 = *(void *)(v0 + 376);
      uint64_t v83 = *(void *)(v0 + 48);

      outlined init with copy of Prompt.Rendering?(v83, v82, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v82, 1, v80) == 1)
      {
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 376), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
      }
      else
      {
        uint64_t v106 = *(void *)(v0 + 432);
        id v107 = *(void *)(v0 + 408);
        uint64_t v108 = *(void *)(v0 + 416);
        (*(void (**)(uint64_t, void, uint64_t))(v108 + 32))(v106, *(void *)(v0 + 376), v107);
        GenerativeFunctionInstrumenter.executionEnd(error:)();
        (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v106, v107);
      }
      swift_willThrow();
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_51;
    }
    char v57 = *(void *)(v0 + 208);
    uint64_t v58 = *(void *)(v0 + 216);
    unint64_t v59 = *(void *)(v0 + 200);
    unint64_t v60 = *(void *)(v0 + 176);
    uint64_t v61 = *(void *)(v0 + 184);

    uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 32);
    v62(v57, v58, v60);
    long long v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16);
    v63(v59, v57, v60);
    uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 88))(v59, v60);
    if (v64 == *MEMORY[0x263F61FF0] || v64 == *MEMORY[0x263F61FE8])
    {
      uint64_t v65 = *(void *)(v0 + 464);
      char v66 = *(void *)(v0 + 472);
      uint64_t v67 = *(void *)(v0 + 280);
      (*(void (**)(void, void))(*(void *)(v0 + 184) + 8))(*(void *)(v0 + 200), *(void *)(v0 + 176));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v67, 1, 1, v65);
    }
    else
    {
      char v158 = v62;
      uint64_t v109 = *(void *)(v0 + 200);
      uint64_t v111 = *(void *)(v0 + 176);
      uint64_t v110 = *(void *)(v0 + 184);
      if (v64 == *MEMORY[0x263F61FF8])
      {
        uint64_t v157 = *(void *)(v0 + 144);
        id v112 = *(void *)(v0 + 128);
        uint64_t v148 = *(void *)(v0 + 136);
        uint64_t v155 = *(void *)(v0 + 120);
        char v151 = *(void *)(v0 + 112);
        uint64_t v113 = *(void *)(v0 + 88);
        uint64_t v152 = *(void *)(v0 + 104);
        uint64_t v153 = *(void *)(v0 + 96);
        uint64_t v114 = *(void *)(v0 + 80);
        uint64_t v150 = *(void *)(v0 + 72);
        uint64_t v115 = *(void *)(v0 + 472);
        unint64_t v154 = *(void *)(v0 + 464);
        unint64_t v149 = *(void *)(v0 + 280);
        (*(void (**)(uint64_t, void))(v110 + 96))(v109, *(void *)(v0 + 176));
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 32))(v157, v109, v155);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 16))(v148, v157, v155);
        GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType.UnboundBindableVariableErrorInfo.init(bindableVariable:)();
        (*(void (**)(uint64_t, void, uint64_t))(v114 + 104))(v113, *MEMORY[0x263F40B30], v150);
        static GenerativeError.RuntimeError.ErrorType.configurationError(type:)();
        (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v113, v150);
        static GenerativeError.runtimeError(type:)();
        (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v151, v153);
        (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v157, v155);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v115 + 56))(v149, 0, 1, v154);
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 472) + 56))(*(void *)(v0 + 280), 1, 1, *(void *)(v0 + 464));
        (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v109, v111);
      }
      uint64_t v62 = v158;
    }
    uint64_t v116 = *(void *)(v0 + 464);
    uint64_t v117 = *(void *)(v0 + 472);
    int v118 = *(void *)(v0 + 288);
    uint64_t v119 = *(void *)(v0 + 272);
    outlined init with take of Locale?(*(void *)(v0 + 280), v118, &demangling cache variable for type metadata for GenerativeError?);
    outlined init with copy of Prompt.Rendering?(v118, v119, &demangling cache variable for type metadata for GenerativeError?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v117 + 48))(v119, 1, v116) == 1)
    {
      uint64_t v120 = *(void *)(v0 + 208);
      uint64_t v121 = *(void *)(v0 + 192);
      uint64_t v122 = *(void *)(v0 + 176);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 272), &demangling cache variable for type metadata for GenerativeError?);
      v63(v121, v120, v122);
    }
    else
    {
      uint64_t v123 = v62;
      unint64_t v124 = *(void *)(v0 + 464);
      uint64_t v125 = *(void *)(v0 + 472);
      uint64_t v126 = *(void *)(v0 + 272);
      uint64_t v127 = *(void *)(v0 + 208);
      uint64_t v128 = *(void *)(v0 + 192);
      uint64_t v129 = *(void *)(v0 + 176);
      lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
      unint64_t v130 = v63;
      uint64_t v131 = swift_allocError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v125 + 32))(v132, v126, v124);
      uint64_t v62 = v123;
      v130(v128, v127, v129);
      if (v131)
      {
        (*(void (**)(void, void))(*(void *)(v0 + 184) + 8))(*(void *)(v0 + 192), *(void *)(v0 + 176));
LABEL_46:
        uint64_t v136 = *(void *)(v0 + 408);
        uint64_t v137 = *(void *)(v0 + 416);
        uint64_t v138 = *(void *)(v0 + 368);
        outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 48), v138, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v137 + 48))(v138, 1, v136) == 1)
        {
          outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 368), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        }
        else
        {
          uint64_t v140 = *(void *)(v0 + 416);
          uint64_t v139 = *(void *)(v0 + 424);
          uint64_t v141 = *(void *)(v0 + 408);
          (*(void (**)(uint64_t, void, uint64_t))(v140 + 32))(v139, *(void *)(v0 + 368), v141);
          GenerativeFunctionInstrumenter.executionEnd(error:)();
          (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v139, v141);
        }
        uint64_t v142 = *(void *)(v0 + 288);
        uint64_t v143 = *(void *)(v0 + 208);
        uint64_t v144 = *(void *)(v0 + 176);
        uint64_t v145 = *(void *)(v0 + 184);
        swift_willThrow();
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(v142, &demangling cache variable for type metadata for GenerativeError?);
        (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v143, v144);
        uint64_t v105 = *(void **)(v0 + 40);
        goto LABEL_50;
      }
    }
    uint64_t v133 = *(void *)(v0 + 192);
    uint64_t v134 = *(void *)(v0 + 176);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type Prompt.RenderError and conformance Prompt.RenderError, MEMORY[0x263F62000]);
    swift_allocError();
    v62(v135, v133, v134);
    goto LABEL_46;
  }
  uint64_t v29 = *(void *)(v0 + 256);
  uint64_t v30 = *(void *)(v0 + 264);
  uint64_t v31 = *(void *)(v0 + 248);
  uint64_t v32 = *(void *)(v0 + 224);
  uint64_t v33 = *(void *)(v0 + 232);

  BOOL v156 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32);
  v156(v29, v30, v32);
  uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
  v34(v31, v29, v32);
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 88))(v31, v32);
  uint64_t v36 = *(void *)(v0 + 472);
  uint64_t v37 = *(void *)(v0 + 304);
  uint64_t v38 = *(void *)(v0 + 248);
  uint64_t v39 = *(void *)(v0 + 224);
  uint64_t v40 = *(void *)(v0 + 232);
  unint64_t v160 = v34;
  if (v35 == *MEMORY[0x263F56200])
  {
    uint64_t v41 = *(void *)(v0 + 160);
    uint64_t v42 = *(void *)(v0 + 168);
    uint64_t v43 = *(void *)(v0 + 152);
    uint64_t v44 = *(void *)(v0 + 464);
    (*(void (**)(uint64_t, void))(v40 + 96))(v38, *(void *)(v0 + 224));
    GenerativeError.AvailabilityError.ErrorType.UseCaseDisabledErrorInfo.init(useCaseIdentifier:)();
    (*(void (**)(uint64_t, void, uint64_t))(v41 + 104))(v42, *MEMORY[0x263F40A28], v43);
    static GenerativeError.availabilityError(type:)();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v43);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v37, 0, 1, v44);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v36 + 56))(v37, 1, 1, *(void *)(v0 + 464));
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
  }
  uint64_t v73 = *(void *)(v0 + 464);
  uint64_t v74 = *(void *)(v0 + 472);
  char v75 = *(void *)(v0 + 312);
  uint64_t v76 = *(void *)(v0 + 296);
  outlined init with take of Locale?(*(void *)(v0 + 304), v75, &demangling cache variable for type metadata for GenerativeError?);
  outlined init with copy of Prompt.Rendering?(v75, v76, &demangling cache variable for type metadata for GenerativeError?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v76, 1, v73) == 1)
  {
    uint64_t v77 = *(void *)(v0 + 256);
    uint64_t v78 = *(void *)(v0 + 240);
    char v79 = *(void *)(v0 + 224);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 296), &demangling cache variable for type metadata for GenerativeError?);
    v160(v78, v77, v79);
LABEL_30:
    uint64_t v92 = *(void *)(v0 + 240);
    unint64_t v93 = *(void *)(v0 + 224);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type ModelManagerError and conformance ModelManagerError, MEMORY[0x263F56220]);
    swift_allocError();
    v156(v94, v92, v93);
    goto LABEL_31;
  }
  char v84 = *(void *)(v0 + 464);
  uint64_t v85 = *(void *)(v0 + 472);
  uint64_t v86 = *(void *)(v0 + 296);
  char v87 = *(void *)(v0 + 256);
  uint64_t v88 = *(void *)(v0 + 240);
  uint64_t v89 = *(void *)(v0 + 224);
  lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
  uint64_t v90 = swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 32))(v91, v86, v84);
  v160(v88, v87, v89);
  if (!v90) {
    goto LABEL_30;
  }
  (*(void (**)(void, void))(*(void *)(v0 + 232) + 8))(*(void *)(v0 + 240), *(void *)(v0 + 224));
LABEL_31:
  uint64_t v95 = *(void *)(v0 + 408);
  uint64_t v96 = *(void *)(v0 + 416);
  uint64_t v97 = *(void *)(v0 + 384);
  outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 48), v97, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(v97, 1, v95) == 1)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 384), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  }
  else
  {
    uint64_t v98 = *(void *)(v0 + 440);
    uint64_t v99 = *(void *)(v0 + 408);
    uint64_t v100 = *(void *)(v0 + 416);
    (*(void (**)(uint64_t, void, uint64_t))(v100 + 32))(v98, *(void *)(v0 + 384), v99);
    GenerativeFunctionInstrumenter.executionEnd(error:)();
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v98, v99);
  }
  unint64_t v101 = *(void *)(v0 + 312);
  uint64_t v102 = *(void *)(v0 + 256);
  unint64_t v103 = *(void *)(v0 + 224);
  char v104 = *(void *)(v0 + 232);
  swift_willThrow();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v101, &demangling cache variable for type metadata for GenerativeError?);
  (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v102, v103);
  uint64_t v105 = *(void **)(v0 + 32);
LABEL_50:

  swift_release();
  swift_bridgeObjectRelease();
LABEL_51:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v146 = *(uint64_t (**)(void))(v0 + 8);
  return v146();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 496) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  int v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  void (*v63)(uint64_t, uint64_t, uint64_t);
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t (*v144)(void);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(uint64_t, uint64_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(uint64_t, uint64_t, uint64_t);
  void (*v160)(uint64_t, uint64_t, uint64_t);
  void (*v161)(uint64_t, uint64_t, uint64_t);
  uint64_t v162;

  *(void *)(v0 + 16) = *(void *)(v0 + 496);
  MEMORY[0x261201A80]();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = swift_dynamicCast();
  uint64_t v2 = *(void **)(v0 + 496);
  if (v1)
  {
    uint64_t v4 = *(void *)(v0 + 464);
    uint64_t v3 = *(void *)(v0 + 472);
    uint64_t v5 = *(void *)(v0 + 448);
    uint64_t v6 = *(void *)(v0 + 456);
    uint64_t v7 = *(void *)(v0 + 400);
    char v158 = *(void *)(v0 + 392);
    uint64_t v8 = *(void *)(v0 + 384);
    uint64_t v9 = *(void *)(v0 + 48);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, v3, v5);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, v4, v5);
    outlined init with copy of Prompt.Rendering?(v9, v8, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v158) == 1)
    {
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 384), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    }
    else
    {
      uint64_t v21 = *(void *)(v0 + 440);
      uint64_t v22 = *(void *)(v0 + 392);
      uint64_t v23 = *(void *)(v0 + 400);
      (*(void (**)(uint64_t, void, uint64_t))(v23 + 32))(v21, *(void *)(v0 + 384), v22);
      GenerativeFunctionInstrumenter.executionEnd(error:)();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
    }
    uint64_t v25 = *(void *)(v0 + 456);
    uint64_t v24 = *(void *)(v0 + 464);
    uint64_t v26 = *(void *)(v0 + 448);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);

    goto LABEL_51;
  }

  *(void *)(v0 + 24) = v2;
  MEMORY[0x261201A80](v2);
  uint64_t v11 = swift_dynamicCast();
  uint64_t v12 = *(void **)(v0 + 496);
  if (v11)
  {
    uint64_t v13 = *(void *)(v0 + 448);
    uint64_t v14 = *(void *)(v0 + 456);
    uint64_t v16 = *(void *)(v0 + 336);
    uint64_t v15 = *(void *)(v0 + 344);
    uint64_t v18 = *(void *)(v0 + 304);
    uint64_t v17 = *(void *)(v0 + 312);

    outlined init with take of PromptCompletionStream(v15, v16, type metadata accessor for TokenGenerationError);
    static TokenGenerator.map(tokenGenerationError:)(v16, v17);
    outlined init with copy of Prompt.Rendering?(v17, v18, &demangling cache variable for type metadata for GenerativeError?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v18, 1, v13) == 1)
    {
      uint64_t v19 = *(void *)(v0 + 328);
      uint64_t v20 = *(void *)(v0 + 336);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 304), &demangling cache variable for type metadata for GenerativeError?);
      outlined init with copy of PromptCompletion(v20, v19, type metadata accessor for TokenGenerationError);
    }
    else
    {
      uint64_t v45 = *(void *)(v0 + 448);
      int v46 = *(void *)(v0 + 456);
      int v48 = *(void *)(v0 + 328);
      uint64_t v47 = *(void *)(v0 + 336);
      uint64_t v49 = *(void *)(v0 + 304);
      lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
      uint64_t v50 = swift_allocError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v51, v49, v45);
      outlined init with copy of PromptCompletion(v47, v48, type metadata accessor for TokenGenerationError);
      if (v50)
      {
        outlined destroy of TokenGeneratorCompletionResponseStringStream(*(void *)(v0 + 328), type metadata accessor for TokenGenerationError);
LABEL_15:
        uint64_t v54 = *(void *)(v0 + 392);
        uint64_t v55 = *(void *)(v0 + 400);
        unint64_t v56 = *(void *)(v0 + 376);
        outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 48), v56, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v56, 1, v54) == 1)
        {
          outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 376), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        }
        else
        {
          uint64_t v68 = *(void *)(v0 + 432);
          long long v69 = *(void *)(v0 + 392);
          uint64_t v70 = *(void *)(v0 + 400);
          (*(void (**)(uint64_t, void, uint64_t))(v70 + 32))(v68, *(void *)(v0 + 376), v69);
          GenerativeFunctionInstrumenter.executionEnd(error:)();
          (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v68, v69);
        }
        uint64_t v71 = *(void *)(v0 + 336);
        long long v72 = *(void *)(v0 + 312);
        swift_willThrow();
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(v72, &demangling cache variable for type metadata for GenerativeError?);
        outlined destroy of TokenGeneratorCompletionResponseStringStream(v71, type metadata accessor for TokenGenerationError);

        goto LABEL_51;
      }
    }
    long long v52 = *(void *)(v0 + 328);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))type metadata accessor for TokenGenerationError);
    swift_allocError();
    outlined init with take of PromptCompletionStream(v52, v53, type metadata accessor for TokenGenerationError);
    goto LABEL_15;
  }

  *(void *)(v0 + 32) = v12;
  MEMORY[0x261201A80](v12);
  uint64_t v27 = swift_dynamicCast();
  uint64_t v28 = *(void **)(v0 + 496);
  if ((v27 & 1) == 0)
  {

    *(void *)(v0 + 40) = v28;
    MEMORY[0x261201A80](v28);
    if ((swift_dynamicCast() & 1) == 0)
    {
      uint64_t v80 = *(void *)(v0 + 392);
      uint64_t v81 = *(void *)(v0 + 400);
      unint64_t v82 = *(void *)(v0 + 360);
      uint64_t v83 = *(void *)(v0 + 48);

      outlined init with copy of Prompt.Rendering?(v83, v82, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v82, 1, v80) == 1)
      {
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 360), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
      }
      else
      {
        uint64_t v106 = *(void *)(v0 + 416);
        id v107 = *(void *)(v0 + 392);
        uint64_t v108 = *(void *)(v0 + 400);
        (*(void (**)(uint64_t, void, uint64_t))(v108 + 32))(v106, *(void *)(v0 + 360), v107);
        GenerativeFunctionInstrumenter.executionEnd(error:)();
        (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v106, v107);
      }
      swift_willThrow();
      goto LABEL_51;
    }
    char v57 = *(void *)(v0 + 192);
    uint64_t v58 = *(void *)(v0 + 200);
    unint64_t v59 = *(void *)(v0 + 184);
    unint64_t v60 = *(void *)(v0 + 160);
    uint64_t v61 = *(void *)(v0 + 168);

    uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 32);
    v62(v57, v58, v60);
    long long v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16);
    v63(v59, v57, v60);
    uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 88))(v59, v60);
    if (v64 == *MEMORY[0x263F61FF0] || v64 == *MEMORY[0x263F61FE8])
    {
      uint64_t v65 = *(void *)(v0 + 448);
      char v66 = *(void *)(v0 + 456);
      uint64_t v67 = *(void *)(v0 + 264);
      (*(void (**)(void, void))(*(void *)(v0 + 168) + 8))(*(void *)(v0 + 184), *(void *)(v0 + 160));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v67, 1, 1, v65);
    }
    else
    {
      unint64_t v160 = v63;
      uint64_t v109 = *(void *)(v0 + 184);
      uint64_t v111 = *(void *)(v0 + 160);
      uint64_t v110 = *(void *)(v0 + 168);
      if (v64 == *MEMORY[0x263F61FF8])
      {
        BOOL v156 = *(void *)(v0 + 128);
        id v112 = *(void *)(v0 + 112);
        unint64_t v146 = *(void *)(v0 + 120);
        uint64_t v155 = *(void *)(v0 + 104);
        unint64_t v149 = *(void *)(v0 + 96);
        uint64_t v113 = *(void *)(v0 + 72);
        char v151 = *(void *)(v0 + 88);
        uint64_t v152 = *(void *)(v0 + 80);
        uint64_t v114 = *(void *)(v0 + 64);
        uint64_t v147 = *(void *)(v0 + 456);
        uint64_t v148 = *(void *)(v0 + 56);
        uint64_t v153 = *(void *)(v0 + 448);
        uint64_t v150 = *(void *)(v0 + 264);
        (*(void (**)(uint64_t, uint64_t))(v110 + 96))(v109, v111);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 32))(v156, v109, v155);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 16))(v146, v156, v155);
        GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType.UnboundBindableVariableErrorInfo.init(bindableVariable:)();
        (*(void (**)(uint64_t, void, uint64_t))(v114 + 104))(v113, *MEMORY[0x263F40B30], v148);
        static GenerativeError.RuntimeError.ErrorType.configurationError(type:)();
        (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v113, v148);
        static GenerativeError.runtimeError(type:)();
        (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v149, v152);
        (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v156, v155);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v147 + 56))(v150, 0, 1, v153);
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 456) + 56))(*(void *)(v0 + 264), 1, 1, *(void *)(v0 + 448));
        (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v109, v111);
      }
      long long v63 = v160;
    }
    uint64_t v115 = *(void *)(v0 + 448);
    uint64_t v116 = *(void *)(v0 + 456);
    uint64_t v117 = *(void *)(v0 + 272);
    int v118 = *(void *)(v0 + 256);
    outlined init with take of Locale?(*(void *)(v0 + 264), v117, &demangling cache variable for type metadata for GenerativeError?);
    outlined init with copy of Prompt.Rendering?(v117, v118, &demangling cache variable for type metadata for GenerativeError?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48))(v118, 1, v115) == 1)
    {
      uint64_t v119 = *(void *)(v0 + 192);
      uint64_t v120 = *(void *)(v0 + 176);
      uint64_t v121 = *(void *)(v0 + 160);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 256), &demangling cache variable for type metadata for GenerativeError?);
      v63(v120, v119, v121);
    }
    else
    {
      uint64_t v161 = v63;
      uint64_t v122 = *(void *)(v0 + 448);
      uint64_t v123 = *(void *)(v0 + 456);
      unint64_t v124 = *(void *)(v0 + 256);
      uint64_t v157 = *(void *)(v0 + 192);
      uint64_t v125 = *(void *)(v0 + 176);
      uint64_t v126 = *(void *)(v0 + 160);
      lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
      uint64_t v127 = v62;
      uint64_t v128 = swift_allocError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v123 + 32))(v129, v124, v122);
      unint64_t v130 = v128;
      uint64_t v62 = v127;
      v161(v125, v157, v126);
      if (v130)
      {
        (*(void (**)(void, void))(*(void *)(v0 + 168) + 8))(*(void *)(v0 + 176), *(void *)(v0 + 160));
LABEL_46:
        uint64_t v134 = *(void *)(v0 + 392);
        unint64_t v135 = *(void *)(v0 + 400);
        uint64_t v136 = *(void *)(v0 + 352);
        outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 48), v136, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v136, 1, v134) == 1)
        {
          outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 352), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        }
        else
        {
          uint64_t v138 = *(void *)(v0 + 400);
          uint64_t v137 = *(void *)(v0 + 408);
          uint64_t v139 = *(void *)(v0 + 392);
          (*(void (**)(uint64_t, void, uint64_t))(v138 + 32))(v137, *(void *)(v0 + 352), v139);
          GenerativeFunctionInstrumenter.executionEnd(error:)();
          (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v137, v139);
        }
        uint64_t v140 = *(void *)(v0 + 272);
        uint64_t v141 = *(void *)(v0 + 192);
        uint64_t v142 = *(void *)(v0 + 160);
        uint64_t v143 = *(void *)(v0 + 168);
        swift_willThrow();
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(v140, &demangling cache variable for type metadata for GenerativeError?);
        (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v141, v142);
        uint64_t v105 = *(void **)(v0 + 40);
        goto LABEL_50;
      }
    }
    uint64_t v131 = *(void *)(v0 + 176);
    uint64_t v132 = *(void *)(v0 + 160);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type Prompt.RenderError and conformance Prompt.RenderError, MEMORY[0x263F62000]);
    swift_allocError();
    v62(v133, v131, v132);
    goto LABEL_46;
  }
  uint64_t v29 = *(void *)(v0 + 240);
  uint64_t v30 = *(void *)(v0 + 248);
  uint64_t v31 = *(void *)(v0 + 232);
  uint64_t v32 = *(void *)(v0 + 208);
  uint64_t v33 = *(void *)(v0 + 216);

  unint64_t v154 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32);
  v154(v29, v30, v32);
  uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
  v34(v31, v29, v32);
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 88))(v31, v32);
  uint64_t v36 = *(void *)(v0 + 456);
  uint64_t v37 = *(void *)(v0 + 288);
  uint64_t v38 = *(void *)(v0 + 232);
  uint64_t v39 = *(void *)(v0 + 208);
  uint64_t v40 = *(void *)(v0 + 216);
  BOOL v159 = v34;
  if (v35 == *MEMORY[0x263F56200])
  {
    uint64_t v41 = *(void *)(v0 + 144);
    uint64_t v42 = *(void *)(v0 + 152);
    uint64_t v43 = *(void *)(v0 + 136);
    uint64_t v44 = *(void *)(v0 + 448);
    (*(void (**)(uint64_t, void))(v40 + 96))(v38, *(void *)(v0 + 208));
    GenerativeError.AvailabilityError.ErrorType.UseCaseDisabledErrorInfo.init(useCaseIdentifier:)();
    (*(void (**)(uint64_t, void, uint64_t))(v41 + 104))(v42, *MEMORY[0x263F40A28], v43);
    static GenerativeError.availabilityError(type:)();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v43);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v37, 0, 1, v44);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v36 + 56))(v37, 1, 1, *(void *)(v0 + 448));
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
  }
  uint64_t v73 = *(void *)(v0 + 448);
  uint64_t v74 = *(void *)(v0 + 456);
  char v75 = *(void *)(v0 + 296);
  uint64_t v76 = *(void *)(v0 + 280);
  outlined init with take of Locale?(*(void *)(v0 + 288), v75, &demangling cache variable for type metadata for GenerativeError?);
  outlined init with copy of Prompt.Rendering?(v75, v76, &demangling cache variable for type metadata for GenerativeError?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v76, 1, v73) == 1)
  {
    uint64_t v77 = *(void *)(v0 + 240);
    uint64_t v78 = *(void *)(v0 + 224);
    char v79 = *(void *)(v0 + 208);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 280), &demangling cache variable for type metadata for GenerativeError?);
    v159(v78, v77, v79);
LABEL_30:
    uint64_t v92 = *(void *)(v0 + 224);
    unint64_t v93 = *(void *)(v0 + 208);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type ModelManagerError and conformance ModelManagerError, MEMORY[0x263F56220]);
    swift_allocError();
    v154(v94, v92, v93);
    goto LABEL_31;
  }
  char v84 = *(void *)(v0 + 448);
  uint64_t v85 = *(void *)(v0 + 456);
  uint64_t v86 = *(void *)(v0 + 280);
  char v87 = *(void *)(v0 + 240);
  uint64_t v88 = *(void *)(v0 + 224);
  uint64_t v89 = *(void *)(v0 + 208);
  lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
  uint64_t v90 = swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 32))(v91, v86, v84);
  v159(v88, v87, v89);
  if (!v90) {
    goto LABEL_30;
  }
  (*(void (**)(void, void))(*(void *)(v0 + 216) + 8))(*(void *)(v0 + 224), *(void *)(v0 + 208));
LABEL_31:
  uint64_t v95 = *(void *)(v0 + 392);
  uint64_t v96 = *(void *)(v0 + 400);
  uint64_t v97 = *(void *)(v0 + 368);
  outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 48), v97, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(v97, 1, v95) == 1)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 368), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  }
  else
  {
    uint64_t v98 = *(void *)(v0 + 424);
    uint64_t v99 = *(void *)(v0 + 392);
    uint64_t v100 = *(void *)(v0 + 400);
    (*(void (**)(uint64_t, void, uint64_t))(v100 + 32))(v98, *(void *)(v0 + 368), v99);
    GenerativeFunctionInstrumenter.executionEnd(error:)();
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v98, v99);
  }
  unint64_t v101 = *(void *)(v0 + 296);
  uint64_t v102 = *(void *)(v0 + 240);
  unint64_t v103 = *(void *)(v0 + 208);
  char v104 = *(void *)(v0 + 216);
  swift_willThrow();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v101, &demangling cache variable for type metadata for GenerativeError?);
  (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v102, v103);
  uint64_t v105 = *(void **)(v0 + 32);
LABEL_50:

LABEL_51:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v144 = *(uint64_t (**)(void))(v0 + 8);
  return v144();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 496) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(uint64_t a1, uint64_t a2)
{
  v2[8] = a1;
  v2[9] = a2;
  uint64_t v3 = type metadata accessor for GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  v2[13] = v4;
  v2[14] = *(void *)(v4 - 8);
  v2[15] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for BindableVariable();
  v2[16] = v5;
  v2[17] = *(void *)(v5 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for GenerativeError.AvailabilityError.ErrorType();
  v2[20] = v6;
  v2[21] = *(void *)(v6 - 8);
  v2[22] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Prompt.RenderError();
  v2[23] = v7;
  v2[24] = *(void *)(v7 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ModelManagerError();
  v2[29] = v8;
  v2[30] = *(void *)(v8 - 8);
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeError?);
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  v2[43] = type metadata accessor for TokenGenerationError(0);
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  v2[46] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v2[47] = swift_task_alloc();
  v2[48] = swift_task_alloc();
  v2[49] = swift_task_alloc();
  v2[50] = swift_task_alloc();
  v2[51] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for GenerativeFunctionInstrumenter();
  v2[52] = v9;
  v2[53] = *(void *)(v9 - 8);
  v2[54] = swift_task_alloc();
  v2[55] = swift_task_alloc();
  v2[56] = swift_task_alloc();
  v2[57] = swift_task_alloc();
  v2[58] = swift_task_alloc();
  v2[59] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for GenerativeError();
  v2[60] = v10;
  v2[61] = *(void *)(v10 - 8);
  v2[62] = swift_task_alloc();
  v2[63] = swift_task_alloc();
  v2[64] = type metadata accessor for TokenGenerator();
  uint64_t v11 = (void *)swift_task_alloc();
  v2[65] = v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<String, Error>.Iterator);
  void *v11 = v2;
  v11[1] = specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:);
  return MEMORY[0x270FA2100](v2 + 2, v12);
}

uint64_t specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(uint64_t a1, int *a2)
{
  v2[9] = a1;
  uint64_t v4 = type metadata accessor for GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType();
  v2[10] = v4;
  v2[11] = *(void *)(v4 - 8);
  v2[12] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  v2[13] = v5;
  v2[14] = *(void *)(v5 - 8);
  v2[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for BindableVariable();
  v2[16] = v6;
  v2[17] = *(void *)(v6 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for GenerativeError.AvailabilityError.ErrorType();
  v2[20] = v7;
  v2[21] = *(void *)(v7 - 8);
  v2[22] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Prompt.RenderError();
  v2[23] = v8;
  v2[24] = *(void *)(v8 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ModelManagerError();
  v2[29] = v9;
  v2[30] = *(void *)(v9 - 8);
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeError?);
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  v2[43] = type metadata accessor for TokenGenerationError(0);
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  v2[46] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v2[47] = swift_task_alloc();
  v2[48] = swift_task_alloc();
  v2[49] = swift_task_alloc();
  v2[50] = swift_task_alloc();
  v2[51] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for GenerativeFunctionInstrumenter();
  v2[52] = v10;
  v2[53] = *(void *)(v10 - 8);
  v2[54] = swift_task_alloc();
  v2[55] = swift_task_alloc();
  v2[56] = swift_task_alloc();
  v2[57] = swift_task_alloc();
  v2[58] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for GenerativeError();
  v2[59] = v11;
  v2[60] = *(void *)(v11 - 8);
  v2[61] = swift_task_alloc();
  v2[62] = swift_task_alloc();
  v2[63] = type metadata accessor for TokenGenerator();
  uint64_t v14 = (uint64_t (*)(void *))((char *)a2 + *a2);
  uint64_t v12 = (void *)swift_task_alloc();
  v2[64] = v12;
  *uint64_t v12 = v2;
  v12[1] = specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:);
  return v14(v2 + 2);
}

uint64_t specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = v5;
  v9[7] = a3;
  unsigned char v9[8] = a5;
  v9[6] = a2;
  uint64_t v11 = type metadata accessor for GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType();
  v9[9] = v11;
  v9[10] = *(void *)(v11 - 8);
  v9[11] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  v9[12] = v12;
  v9[13] = *(void *)(v12 - 8);
  v9[14] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for BindableVariable();
  v9[15] = v13;
  unsigned char v9[16] = *(void *)(v13 - 8);
  v9[17] = swift_task_alloc();
  v9[18] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for GenerativeError.AvailabilityError.ErrorType();
  v9[19] = v14;
  v9[20] = *(void *)(v14 - 8);
  v9[21] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for Prompt.RenderError();
  v9[22] = v15;
  v9[23] = *(void *)(v15 - 8);
  unsigned char v9[24] = swift_task_alloc();
  v9[25] = swift_task_alloc();
  v9[26] = swift_task_alloc();
  v9[27] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for ModelManagerError();
  v9[28] = v16;
  v9[29] = *(void *)(v16 - 8);
  v9[30] = swift_task_alloc();
  v9[31] = swift_task_alloc();
  unsigned char v9[32] = swift_task_alloc();
  v9[33] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeError?);
  v9[34] = swift_task_alloc();
  v9[35] = swift_task_alloc();
  v9[36] = swift_task_alloc();
  v9[37] = swift_task_alloc();
  v9[38] = swift_task_alloc();
  v9[39] = swift_task_alloc();
  v9[40] = swift_task_alloc();
  v9[41] = swift_task_alloc();
  v9[42] = type metadata accessor for TokenGenerationError(0);
  v9[43] = swift_task_alloc();
  v9[44] = swift_task_alloc();
  v9[45] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v9[46] = swift_task_alloc();
  v9[47] = swift_task_alloc();
  v9[48] = swift_task_alloc();
  v9[49] = swift_task_alloc();
  v9[50] = swift_task_alloc();
  uint64_t v17 = type metadata accessor for GenerativeFunctionInstrumenter();
  v9[51] = v17;
  v9[52] = *(void *)(v17 - 8);
  v9[53] = swift_task_alloc();
  v9[54] = swift_task_alloc();
  v9[55] = swift_task_alloc();
  v9[56] = swift_task_alloc();
  v9[57] = swift_task_alloc();
  uint64_t v18 = type metadata accessor for GenerativeError();
  v9[58] = v18;
  v9[59] = *(void *)(v18 - 8);
  v9[60] = swift_task_alloc();
  v9[61] = swift_task_alloc();
  v9[62] = type metadata accessor for TokenGenerator();
  uint64_t v19 = (void *)swift_task_alloc();
  v9[63] = v19;
  *uint64_t v19 = v9;
  v19[1] = specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:);
  return closure #1 in CatalogClient.modelBundleIdentifier(for:instrumenter:)(a1, a3, a4, a5);
}

uint64_t specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = v3;
  v5[6] = a2;
  uint64_t v7 = type metadata accessor for GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType();
  v5[7] = v7;
  v5[8] = *(void *)(v7 - 8);
  v5[9] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  v5[10] = v8;
  v5[11] = *(void *)(v8 - 8);
  v5[12] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for BindableVariable();
  v5[13] = v9;
  v5[14] = *(void *)(v9 - 8);
  v5[15] = swift_task_alloc();
  v5[16] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for GenerativeError.AvailabilityError.ErrorType();
  v5[17] = v10;
  v5[18] = *(void *)(v10 - 8);
  v5[19] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Prompt.RenderError();
  v5[20] = v11;
  v5[21] = *(void *)(v11 - 8);
  v5[22] = swift_task_alloc();
  v5[23] = swift_task_alloc();
  v5[24] = swift_task_alloc();
  v5[25] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for ModelManagerError();
  v5[26] = v12;
  v5[27] = *(void *)(v12 - 8);
  v5[28] = swift_task_alloc();
  v5[29] = swift_task_alloc();
  v5[30] = swift_task_alloc();
  v5[31] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeError?);
  v5[32] = swift_task_alloc();
  v5[33] = swift_task_alloc();
  v5[34] = swift_task_alloc();
  v5[35] = swift_task_alloc();
  v5[36] = swift_task_alloc();
  v5[37] = swift_task_alloc();
  v5[38] = swift_task_alloc();
  v5[39] = swift_task_alloc();
  v5[40] = type metadata accessor for TokenGenerationError(0);
  v5[41] = swift_task_alloc();
  v5[42] = swift_task_alloc();
  v5[43] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v5[44] = swift_task_alloc();
  v5[45] = swift_task_alloc();
  v5[46] = swift_task_alloc();
  v5[47] = swift_task_alloc();
  v5[48] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for GenerativeFunctionInstrumenter();
  v5[49] = v13;
  v5[50] = *(void *)(v13 - 8);
  v5[51] = swift_task_alloc();
  v5[52] = swift_task_alloc();
  v5[53] = swift_task_alloc();
  v5[54] = swift_task_alloc();
  v5[55] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for GenerativeError();
  v5[56] = v14;
  v5[57] = *(void *)(v14 - 8);
  v5[58] = swift_task_alloc();
  v5[59] = swift_task_alloc();
  v5[60] = type metadata accessor for TokenGenerator();
  uint64_t v17 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  uint64_t v15 = (void *)swift_task_alloc();
  v5[61] = v15;
  *uint64_t v15 = v5;
  v15[1] = specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:);
  return v17(a1);
}

{
  void *v3;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;

  uint64_t v5 = v3;
  v5[6] = a2;
  uint64_t v7 = type metadata accessor for GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType();
  v5[7] = v7;
  v5[8] = *(void *)(v7 - 8);
  v5[9] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  v5[10] = v8;
  v5[11] = *(void *)(v8 - 8);
  v5[12] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for BindableVariable();
  v5[13] = v9;
  v5[14] = *(void *)(v9 - 8);
  v5[15] = swift_task_alloc();
  v5[16] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for GenerativeError.AvailabilityError.ErrorType();
  v5[17] = v10;
  v5[18] = *(void *)(v10 - 8);
  v5[19] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Prompt.RenderError();
  v5[20] = v11;
  v5[21] = *(void *)(v11 - 8);
  v5[22] = swift_task_alloc();
  v5[23] = swift_task_alloc();
  v5[24] = swift_task_alloc();
  v5[25] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for ModelManagerError();
  v5[26] = v12;
  v5[27] = *(void *)(v12 - 8);
  v5[28] = swift_task_alloc();
  v5[29] = swift_task_alloc();
  v5[30] = swift_task_alloc();
  v5[31] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeError?);
  v5[32] = swift_task_alloc();
  v5[33] = swift_task_alloc();
  v5[34] = swift_task_alloc();
  v5[35] = swift_task_alloc();
  v5[36] = swift_task_alloc();
  v5[37] = swift_task_alloc();
  v5[38] = swift_task_alloc();
  v5[39] = swift_task_alloc();
  v5[40] = type metadata accessor for TokenGenerationError(0);
  v5[41] = swift_task_alloc();
  v5[42] = swift_task_alloc();
  v5[43] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v5[44] = swift_task_alloc();
  v5[45] = swift_task_alloc();
  v5[46] = swift_task_alloc();
  v5[47] = swift_task_alloc();
  v5[48] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for GenerativeFunctionInstrumenter();
  v5[49] = v13;
  v5[50] = *(void *)(v13 - 8);
  v5[51] = swift_task_alloc();
  v5[52] = swift_task_alloc();
  v5[53] = swift_task_alloc();
  v5[54] = swift_task_alloc();
  v5[55] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for GenerativeError();
  v5[56] = v14;
  v5[57] = *(void *)(v14 - 8);
  v5[58] = swift_task_alloc();
  v5[59] = swift_task_alloc();
  v5[60] = type metadata accessor for TokenGenerator();
  uint64_t v17 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  uint64_t v15 = (void *)swift_task_alloc();
  v5[61] = v15;
  *uint64_t v15 = v5;
  v15[1] = specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:);
  return v17(a1);
}

uint64_t static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = v4;
  v6[6] = a2;
  v6[7] = v3;
  uint64_t v8 = type metadata accessor for GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType();
  v6[8] = v8;
  v6[9] = *(void *)(v8 - 8);
  v6[10] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  v6[11] = v9;
  v6[12] = *(void *)(v9 - 8);
  v6[13] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for BindableVariable();
  v6[14] = v10;
  v6[15] = *(void *)(v10 - 8);
  v6[16] = swift_task_alloc();
  v6[17] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Prompt.RenderError();
  v6[18] = v11;
  v6[19] = *(void *)(v11 - 8);
  v6[20] = swift_task_alloc();
  v6[21] = swift_task_alloc();
  v6[22] = swift_task_alloc();
  v6[23] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for GenerativeError.AvailabilityError.ErrorType();
  v6[24] = v12;
  v6[25] = *(void *)(v12 - 8);
  v6[26] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for ModelManagerError();
  v6[27] = v13;
  v6[28] = *(void *)(v13 - 8);
  v6[29] = swift_task_alloc();
  v6[30] = swift_task_alloc();
  v6[31] = swift_task_alloc();
  v6[32] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeError?);
  v6[33] = swift_task_alloc();
  v6[34] = swift_task_alloc();
  v6[35] = swift_task_alloc();
  v6[36] = swift_task_alloc();
  v6[37] = swift_task_alloc();
  v6[38] = swift_task_alloc();
  v6[39] = swift_task_alloc();
  v6[40] = swift_task_alloc();
  v6[41] = type metadata accessor for TokenGenerationError(0);
  v6[42] = swift_task_alloc();
  v6[43] = swift_task_alloc();
  v6[44] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v6[45] = swift_task_alloc();
  v6[46] = swift_task_alloc();
  v6[47] = swift_task_alloc();
  v6[48] = swift_task_alloc();
  v6[49] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for GenerativeFunctionInstrumenter();
  v6[50] = v14;
  v6[51] = *(void *)(v14 - 8);
  v6[52] = swift_task_alloc();
  v6[53] = swift_task_alloc();
  v6[54] = swift_task_alloc();
  v6[55] = swift_task_alloc();
  v6[56] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for GenerativeError();
  v6[57] = v15;
  v6[58] = *(void *)(v15 - 8);
  v6[59] = swift_task_alloc();
  v6[60] = swift_task_alloc();
  uint64_t v18 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  uint64_t v16 = (void *)swift_task_alloc();
  v6[61] = v16;
  *uint64_t v16 = v6;
  v16[1] = static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:);
  return v18(a1);
}

uint64_t static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 496) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  int v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  void (*v63)(uint64_t, uint64_t, uint64_t);
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t (*v144)(void);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(uint64_t, uint64_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(uint64_t, uint64_t, uint64_t);
  void (*v160)(uint64_t, uint64_t, uint64_t);
  void (*v161)(uint64_t, uint64_t, uint64_t);
  uint64_t v162;

  *(void *)(v0 + 16) = *(void *)(v0 + 496);
  MEMORY[0x261201A80]();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = swift_dynamicCast();
  uint64_t v2 = *(void **)(v0 + 496);
  if (v1)
  {
    uint64_t v4 = *(void *)(v0 + 472);
    uint64_t v3 = *(void *)(v0 + 480);
    uint64_t v5 = *(void *)(v0 + 456);
    uint64_t v6 = *(void *)(v0 + 464);
    uint64_t v7 = *(void *)(v0 + 408);
    char v158 = *(void *)(v0 + 400);
    uint64_t v8 = *(void *)(v0 + 392);
    uint64_t v9 = *(void *)(v0 + 48);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, v3, v5);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, v4, v5);
    outlined init with copy of Prompt.Rendering?(v9, v8, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v158) == 1)
    {
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 392), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    }
    else
    {
      uint64_t v21 = *(void *)(v0 + 448);
      uint64_t v22 = *(void *)(v0 + 400);
      uint64_t v23 = *(void *)(v0 + 408);
      (*(void (**)(uint64_t, void, uint64_t))(v23 + 32))(v21, *(void *)(v0 + 392), v22);
      GenerativeFunctionInstrumenter.executionEnd(error:)();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
    }
    uint64_t v25 = *(void *)(v0 + 464);
    uint64_t v24 = *(void *)(v0 + 472);
    uint64_t v26 = *(void *)(v0 + 456);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);

    goto LABEL_51;
  }

  *(void *)(v0 + 24) = v2;
  MEMORY[0x261201A80](v2);
  uint64_t v11 = swift_dynamicCast();
  uint64_t v12 = *(void **)(v0 + 496);
  if (v11)
  {
    uint64_t v13 = *(void *)(v0 + 456);
    uint64_t v14 = *(void *)(v0 + 464);
    uint64_t v15 = *(void *)(v0 + 344);
    uint64_t v16 = *(void *)(v0 + 352);
    uint64_t v18 = *(void *)(v0 + 312);
    uint64_t v17 = *(void *)(v0 + 320);

    outlined init with take of PromptCompletionStream(v16, v15, type metadata accessor for TokenGenerationError);
    static TokenGenerator.map(tokenGenerationError:)(v15, v17);
    outlined init with copy of Prompt.Rendering?(v17, v18, &demangling cache variable for type metadata for GenerativeError?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v18, 1, v13) == 1)
    {
      uint64_t v19 = *(void *)(v0 + 336);
      uint64_t v20 = *(void *)(v0 + 344);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 312), &demangling cache variable for type metadata for GenerativeError?);
      outlined init with copy of PromptCompletion(v20, v19, type metadata accessor for TokenGenerationError);
    }
    else
    {
      uint64_t v45 = *(void *)(v0 + 456);
      int v46 = *(void *)(v0 + 464);
      int v48 = *(void *)(v0 + 336);
      uint64_t v47 = *(void *)(v0 + 344);
      uint64_t v49 = *(void *)(v0 + 312);
      lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
      uint64_t v50 = swift_allocError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v51, v49, v45);
      outlined init with copy of PromptCompletion(v47, v48, type metadata accessor for TokenGenerationError);
      if (v50)
      {
        outlined destroy of TokenGeneratorCompletionResponseStringStream(*(void *)(v0 + 336), type metadata accessor for TokenGenerationError);
LABEL_15:
        uint64_t v54 = *(void *)(v0 + 400);
        uint64_t v55 = *(void *)(v0 + 408);
        unint64_t v56 = *(void *)(v0 + 384);
        outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 48), v56, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v56, 1, v54) == 1)
        {
          outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 384), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        }
        else
        {
          uint64_t v68 = *(void *)(v0 + 440);
          long long v69 = *(void *)(v0 + 400);
          uint64_t v70 = *(void *)(v0 + 408);
          (*(void (**)(uint64_t, void, uint64_t))(v70 + 32))(v68, *(void *)(v0 + 384), v69);
          GenerativeFunctionInstrumenter.executionEnd(error:)();
          (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v68, v69);
        }
        uint64_t v71 = *(void *)(v0 + 344);
        long long v72 = *(void *)(v0 + 320);
        swift_willThrow();
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(v72, &demangling cache variable for type metadata for GenerativeError?);
        outlined destroy of TokenGeneratorCompletionResponseStringStream(v71, type metadata accessor for TokenGenerationError);

        goto LABEL_51;
      }
    }
    long long v52 = *(void *)(v0 + 336);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))type metadata accessor for TokenGenerationError);
    swift_allocError();
    outlined init with take of PromptCompletionStream(v52, v53, type metadata accessor for TokenGenerationError);
    goto LABEL_15;
  }

  *(void *)(v0 + 32) = v12;
  MEMORY[0x261201A80](v12);
  uint64_t v27 = swift_dynamicCast();
  uint64_t v28 = *(void **)(v0 + 496);
  if (!v27)
  {

    *(void *)(v0 + 40) = v28;
    MEMORY[0x261201A80](v28);
    if (!swift_dynamicCast())
    {
      uint64_t v80 = *(void *)(v0 + 400);
      uint64_t v81 = *(void *)(v0 + 408);
      unint64_t v82 = *(void *)(v0 + 360);
      uint64_t v83 = *(void *)(v0 + 48);

      outlined init with copy of Prompt.Rendering?(v83, v82, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v82, 1, v80) == 1)
      {
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 360), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
      }
      else
      {
        id v107 = *(void *)(v0 + 408);
        uint64_t v106 = *(void *)(v0 + 416);
        uint64_t v108 = *(void *)(v0 + 400);
        (*(void (**)(uint64_t, void, uint64_t))(v107 + 32))(v106, *(void *)(v0 + 360), v108);
        GenerativeFunctionInstrumenter.executionEnd(error:)();
        (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v106, v108);
      }
      swift_willThrow();
      goto LABEL_51;
    }
    char v57 = *(void *)(v0 + 176);
    uint64_t v58 = *(void *)(v0 + 184);
    unint64_t v59 = *(void *)(v0 + 168);
    unint64_t v60 = *(void *)(v0 + 144);
    uint64_t v61 = *(void *)(v0 + 152);

    uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 32);
    v62(v57, v58, v60);
    long long v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16);
    v63(v59, v57, v60);
    uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 88))(v59, v60);
    if (v64 == *MEMORY[0x263F61FF0] || v64 == *MEMORY[0x263F61FE8])
    {
      uint64_t v65 = *(void *)(v0 + 456);
      char v66 = *(void *)(v0 + 464);
      uint64_t v67 = *(void *)(v0 + 272);
      (*(void (**)(void, void))(*(void *)(v0 + 152) + 8))(*(void *)(v0 + 168), *(void *)(v0 + 144));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v67, 1, 1, v65);
    }
    else
    {
      unint64_t v160 = v63;
      uint64_t v109 = *(void *)(v0 + 168);
      uint64_t v111 = *(void *)(v0 + 144);
      uint64_t v110 = *(void *)(v0 + 152);
      if (v64 == *MEMORY[0x263F61FF8])
      {
        BOOL v156 = *(void *)(v0 + 136);
        id v112 = *(void *)(v0 + 120);
        unint64_t v146 = *(void *)(v0 + 128);
        uint64_t v155 = *(void *)(v0 + 112);
        unint64_t v149 = *(void *)(v0 + 104);
        uint64_t v113 = *(void *)(v0 + 80);
        char v151 = *(void *)(v0 + 96);
        uint64_t v152 = *(void *)(v0 + 88);
        uint64_t v114 = *(void *)(v0 + 72);
        uint64_t v147 = *(void *)(v0 + 464);
        uint64_t v148 = *(void *)(v0 + 64);
        uint64_t v153 = *(void *)(v0 + 456);
        uint64_t v150 = *(void *)(v0 + 272);
        (*(void (**)(uint64_t, uint64_t))(v110 + 96))(v109, v111);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 32))(v156, v109, v155);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 16))(v146, v156, v155);
        GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType.UnboundBindableVariableErrorInfo.init(bindableVariable:)();
        (*(void (**)(uint64_t, void, uint64_t))(v114 + 104))(v113, *MEMORY[0x263F40B30], v148);
        static GenerativeError.RuntimeError.ErrorType.configurationError(type:)();
        (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v113, v148);
        static GenerativeError.runtimeError(type:)();
        (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v149, v152);
        (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v156, v155);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v147 + 56))(v150, 0, 1, v153);
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 464) + 56))(*(void *)(v0 + 272), 1, 1, *(void *)(v0 + 456));
        (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v109, v111);
      }
      long long v63 = v160;
    }
    uint64_t v115 = *(void *)(v0 + 456);
    uint64_t v116 = *(void *)(v0 + 464);
    uint64_t v117 = *(void *)(v0 + 280);
    int v118 = *(void *)(v0 + 264);
    outlined init with take of Locale?(*(void *)(v0 + 272), v117, &demangling cache variable for type metadata for GenerativeError?);
    outlined init with copy of Prompt.Rendering?(v117, v118, &demangling cache variable for type metadata for GenerativeError?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48))(v118, 1, v115) == 1)
    {
      uint64_t v119 = *(void *)(v0 + 176);
      uint64_t v120 = *(void *)(v0 + 160);
      uint64_t v121 = *(void *)(v0 + 144);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 264), &demangling cache variable for type metadata for GenerativeError?);
      v63(v120, v119, v121);
    }
    else
    {
      uint64_t v161 = v63;
      uint64_t v122 = *(void *)(v0 + 456);
      uint64_t v123 = *(void *)(v0 + 464);
      unint64_t v124 = *(void *)(v0 + 264);
      uint64_t v157 = *(void *)(v0 + 176);
      uint64_t v125 = *(void *)(v0 + 160);
      uint64_t v126 = *(void *)(v0 + 144);
      lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
      uint64_t v127 = v62;
      uint64_t v128 = swift_allocError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v123 + 32))(v129, v124, v122);
      unint64_t v130 = v128;
      uint64_t v62 = v127;
      v161(v125, v157, v126);
      if (v130)
      {
        (*(void (**)(void, void))(*(void *)(v0 + 152) + 8))(*(void *)(v0 + 160), *(void *)(v0 + 144));
LABEL_46:
        uint64_t v134 = *(void *)(v0 + 400);
        unint64_t v135 = *(void *)(v0 + 408);
        uint64_t v136 = *(void *)(v0 + 368);
        outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 48), v136, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v136, 1, v134) == 1)
        {
          outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 368), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
        }
        else
        {
          uint64_t v137 = *(void *)(v0 + 424);
          uint64_t v138 = *(void *)(v0 + 400);
          uint64_t v139 = *(void *)(v0 + 408);
          (*(void (**)(uint64_t, void, uint64_t))(v139 + 32))(v137, *(void *)(v0 + 368), v138);
          GenerativeFunctionInstrumenter.executionEnd(error:)();
          (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v137, v138);
        }
        uint64_t v140 = *(void *)(v0 + 280);
        uint64_t v141 = *(void *)(v0 + 176);
        uint64_t v142 = *(void *)(v0 + 144);
        uint64_t v143 = *(void *)(v0 + 152);
        swift_willThrow();
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(v140, &demangling cache variable for type metadata for GenerativeError?);
        (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v141, v142);
        uint64_t v105 = *(void **)(v0 + 40);
        goto LABEL_50;
      }
    }
    uint64_t v131 = *(void *)(v0 + 160);
    uint64_t v132 = *(void *)(v0 + 144);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type Prompt.RenderError and conformance Prompt.RenderError, MEMORY[0x263F62000]);
    swift_allocError();
    v62(v133, v131, v132);
    goto LABEL_46;
  }
  uint64_t v29 = *(void *)(v0 + 248);
  uint64_t v30 = *(void *)(v0 + 256);
  uint64_t v31 = *(void *)(v0 + 240);
  uint64_t v32 = *(void *)(v0 + 216);
  uint64_t v33 = *(void *)(v0 + 224);

  unint64_t v154 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32);
  v154(v29, v30, v32);
  uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
  v34(v31, v29, v32);
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 88))(v31, v32);
  uint64_t v36 = *(void *)(v0 + 464);
  uint64_t v37 = *(void *)(v0 + 296);
  uint64_t v38 = *(void *)(v0 + 240);
  uint64_t v39 = *(void *)(v0 + 216);
  uint64_t v40 = *(void *)(v0 + 224);
  BOOL v159 = v34;
  if (v35 == *MEMORY[0x263F56200])
  {
    uint64_t v41 = *(void *)(v0 + 200);
    uint64_t v42 = *(void *)(v0 + 208);
    uint64_t v43 = *(void *)(v0 + 192);
    uint64_t v44 = *(void *)(v0 + 456);
    (*(void (**)(uint64_t, void))(v40 + 96))(v38, *(void *)(v0 + 216));
    GenerativeError.AvailabilityError.ErrorType.UseCaseDisabledErrorInfo.init(useCaseIdentifier:)();
    (*(void (**)(uint64_t, void, uint64_t))(v41 + 104))(v42, *MEMORY[0x263F40A28], v43);
    static GenerativeError.availabilityError(type:)();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v43);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v37, 0, 1, v44);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v36 + 56))(v37, 1, 1, *(void *)(v0 + 456));
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
  }
  uint64_t v73 = *(void *)(v0 + 456);
  uint64_t v74 = *(void *)(v0 + 464);
  char v75 = *(void *)(v0 + 304);
  uint64_t v76 = *(void *)(v0 + 288);
  outlined init with take of Locale?(*(void *)(v0 + 296), v75, &demangling cache variable for type metadata for GenerativeError?);
  outlined init with copy of Prompt.Rendering?(v75, v76, &demangling cache variable for type metadata for GenerativeError?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v76, 1, v73) == 1)
  {
    uint64_t v77 = *(void *)(v0 + 248);
    uint64_t v78 = *(void *)(v0 + 232);
    char v79 = *(void *)(v0 + 216);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 288), &demangling cache variable for type metadata for GenerativeError?);
    v159(v78, v77, v79);
LABEL_30:
    uint64_t v92 = *(void *)(v0 + 232);
    unint64_t v93 = *(void *)(v0 + 216);
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type ModelManagerError and conformance ModelManagerError, MEMORY[0x263F56220]);
    swift_allocError();
    v154(v94, v92, v93);
    goto LABEL_31;
  }
  char v84 = *(void *)(v0 + 456);
  uint64_t v85 = *(void *)(v0 + 464);
  uint64_t v86 = *(void *)(v0 + 288);
  char v87 = *(void *)(v0 + 248);
  uint64_t v88 = *(void *)(v0 + 232);
  uint64_t v89 = *(void *)(v0 + 216);
  lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
  uint64_t v90 = swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 32))(v91, v86, v84);
  v159(v88, v87, v89);
  if (!v90) {
    goto LABEL_30;
  }
  (*(void (**)(void, void))(*(void *)(v0 + 224) + 8))(*(void *)(v0 + 232), *(void *)(v0 + 216));
LABEL_31:
  uint64_t v95 = *(void *)(v0 + 400);
  uint64_t v96 = *(void *)(v0 + 408);
  uint64_t v97 = *(void *)(v0 + 376);
  outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 48), v97, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(v97, 1, v95) == 1)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 376), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  }
  else
  {
    uint64_t v98 = *(void *)(v0 + 432);
    uint64_t v99 = *(void *)(v0 + 400);
    uint64_t v100 = *(void *)(v0 + 408);
    (*(void (**)(uint64_t, void, uint64_t))(v100 + 32))(v98, *(void *)(v0 + 376), v99);
    GenerativeFunctionInstrumenter.executionEnd(error:)();
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v98, v99);
  }
  unint64_t v101 = *(void *)(v0 + 304);
  uint64_t v102 = *(void *)(v0 + 248);
  unint64_t v103 = *(void *)(v0 + 216);
  char v104 = *(void *)(v0 + 224);
  swift_willThrow();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v101, &demangling cache variable for type metadata for GenerativeError?);
  (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v102, v103);
  uint64_t v105 = *(void **)(v0 + 32);
LABEL_50:

LABEL_51:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v144 = *(uint64_t (**)(void))(v0 + 8);
  return v144();
}

uint64_t closure #1 in static System.defaultInstructionPrompt.getter()
{
  uint64_t v0 = type metadata accessor for Prompt();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v9[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[3] = type metadata accessor for SpecialToken();
  v9[4] = MEMORY[0x263F620D8];
  __swift_allocate_boxed_opaque_existential_1Tm(v9);
  SpecialToken.init(identifier:overestimatedTokenCount:)();
  uint64_t v4 = MEMORY[0x263F620B0];
  static CustomPromptBuilder.buildExpression(_:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt>);
  unint64_t v5 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_25F91CC30;
  (*(void (**)(unint64_t, char *, uint64_t))(v1 + 16))(v6 + v5, v3, v0);
  MEMORY[0x261200680](v6, v0, v4);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t static System.defaultInstruction.getter()
{
  uint64_t v0 = type metadata accessor for Prompt();
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  Prompt.init(_:)();
  return MEMORY[0x261200B00](v2);
}

uint64_t Prompt.promptTemplateIfWholePromptIsASinglePromptTemplate()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Prompt.Component.Value.CustomData();
  uint64_t v59 = *(void *)(v2 - 8);
  uint64_t v60 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v58 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Prompt.Component.Value();
  uint64_t v64 = *(void *)(v4 - 8);
  uint64_t v65 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v50 - v8;
  uint64_t v63 = type metadata accessor for Prompt.Component();
  uint64_t v10 = *(void *)(v63 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v63);
  uint64_t v61 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v50 - v13;
  uint64_t v15 = type metadata accessor for Prompt();
  uint64_t v62 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(Prompt.components.getter() + 16);
  swift_bridgeObjectRelease();
  if (v18 != 1) {
    goto LABEL_14;
  }
  uint64_t v57 = a1;
  uint64_t result = Prompt.components.getter();
  if (!*(void *)(result + 16))
  {
    __break(1u);
    goto LABEL_21;
  }
  unint64_t v55 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v56 = v7;
  uint64_t v20 = v63;
  uint64_t v54 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
  v54(v14, result + v55, v63);
  swift_bridgeObjectRelease();
  Prompt.Component.value.getter();
  uint64_t v53 = *(void (**)(char *, uint64_t))(v10 + 8);
  v53(v14, v20);
  uint64_t v22 = v64;
  uint64_t v21 = v65;
  uint64_t v23 = *(unsigned int (**)(char *, uint64_t))(v64 + 88);
  if (v23(v9, v65) != *MEMORY[0x263F62070])
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v21);
LABEL_13:
    a1 = v57;
LABEL_14:
    uint64_t v45 = type metadata accessor for PromptTemplate();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(a1, 1, 1, v45);
  }
  long long v52 = *(void (**)(char *, uint64_t))(v22 + 96);
  v52(v9, v21);
  uint64_t v24 = v17;
  uint64_t v25 = v15;
  uint64_t v26 = v62;
  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v24, v9, v25);
  uint64_t v27 = *(void *)(Prompt.components.getter() + 16);
  swift_bridgeObjectRelease();
  if (v27 != 1)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v24, v25);
    goto LABEL_13;
  }
  uint64_t v51 = v25;
  uint64_t result = Prompt.components.getter();
  if (!*(void *)(result + 16))
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v28 = v24;
  uint64_t v29 = v61;
  uint64_t v30 = v63;
  v54(v61, result + v55, v63);
  swift_bridgeObjectRelease();
  uint64_t v31 = v56;
  Prompt.Component.value.getter();
  v53(v29, v30);
  uint64_t v32 = v65;
  unsigned int v33 = v23(v31, v65);
  uint64_t v34 = v64;
  if (v33 != *MEMORY[0x263F62060])
  {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v28, v51);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v31, v32);
    goto LABEL_13;
  }
  uint64_t v35 = v28;
  v52(v31, v32);
  uint64_t v37 = v58;
  uint64_t v36 = v59;
  uint64_t v38 = v31;
  uint64_t v39 = v60;
  (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v58, v38, v60);
  uint64_t v40 = Prompt.Component.Value.CustomData.name.getter();
  uint64_t v42 = v41;
  if (v40 == static PromptTemplate.name.getter() && v42 == v43)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v44 = v62;
    goto LABEL_16;
  }
  char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v44 = v62;
  if ((v46 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v39);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v35, v51);
    goto LABEL_13;
  }
LABEL_16:
  uint64_t v47 = type metadata accessor for PromptTemplate();
  lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type PromptTemplate and conformance PromptTemplate, MEMORY[0x263F41548]);
  uint64_t v48 = v57;
  uint64_t v49 = v66;
  Prompt.Component.Value.CustomData.value<A>(type:)();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v39);
  if (v49) {
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v35, v51);
  }
  (*(void (**)(char *, uint64_t))(v44 + 8))(v35, v51);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v48, 0, 1, v47);
}

uint64_t TokenGenerator.PromptInputFromGenerativeModel.init(tgPrompt:variableBindings:promptTemplate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  v4[8] = type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel(0);
  v4[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplate: PromptTemplate, locale: Locale?)?);
  v4[10] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplate: PromptTemplate, locale: Locale?));
  v4[11] = v5;
  v4[12] = *(void *)(v5 - 8);
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  v4[15] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenGenerator.PromptInputFromGenerativeModel.init(tgPrompt:variableBindings:promptTemplate:), 0, 0);
}

uint64_t TokenGenerator.PromptInputFromGenerativeModel.init(tgPrompt:variableBindings:promptTemplate:)()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 56), v3, &demangling cache variable for type metadata for (promptTemplate: PromptTemplate, locale: Locale?)?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 80);
    uint64_t v5 = *(void *)(v0 + 40);
    uint64_t v6 = *(void *)(v0 + 32);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 56), &demangling cache variable for type metadata for (promptTemplate: PromptTemplate, locale: Locale?)?);
    swift_bridgeObjectRelease();
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v4, &demangling cache variable for type metadata for (promptTemplate: PromptTemplate, locale: Locale?)?);
    uint64_t v7 = type metadata accessor for Prompt();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v6, v5, v7);
    swift_storeEnumTagMultiPayload();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 112);
    uint64_t v11 = *(void *)(v0 + 120);
    uint64_t v12 = *(void *)(v0 + 80);
    uint64_t v13 = *(void *)(v0 + 88);
    uint64_t v14 = *(int *)(v13 + 48);
    *(_DWORD *)(v0 + 208) = v14;
    uint64_t v15 = v11 + v14;
    uint64_t v16 = v12 + v14;
    uint64_t v17 = type metadata accessor for PromptTemplate();
    *(void *)(v0 + 128) = v17;
    uint64_t v18 = *(void *)(v17 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v11, v12, v17);
    outlined init with take of Locale?(v16, v15, &demangling cache variable for type metadata for Locale?);
    uint64_t v19 = *(int *)(v13 + 48);
    *(_DWORD *)(v0 + 212) = v19;
    uint64_t v20 = v10 + v19;
    uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
    *(void *)(v0 + 136) = v21;
    *(void *)(v0 + 144) = (v18 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v21(v10, v11, v17);
    outlined init with copy of Prompt.Rendering?(v15, v20, &demangling cache variable for type metadata for Locale?);
    *(void *)(v0 + 16) = PromptTemplate.templateID.getter();
    *(void *)(v0 + 24) = v22;
    *(void *)(v0 + 152) = v22;
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    *(void *)(v0 + 160) = v23;
    *(void *)(v0 + 168) = (v18 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v23(v10, v17);
    uint64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v24;
    *uint64_t v24 = v0;
    v24[1] = TokenGenerator.PromptInputFromGenerativeModel.init(tgPrompt:variableBindings:promptTemplate:);
    uint64_t v25 = *(void *)(v0 + 48);
    return Dictionary<>.richVariableBindings()(v25);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v15 = v4 + *(int *)(v0 + 216);
  uint64_t v12 = *(void *)(v0 + 112) + *(int *)(v0 + 212);
  uint64_t v6 = v2 + *(int *)(v0 + 208);
  uint64_t v7 = v3 + *(int *)(*(void *)(v0 + 88) + 48);
  uint64_t v14 = *(void *)(v0 + 40);
  uint64_t v16 = *(void *)(v0 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 136))(v3, v2, v1);
  outlined init with copy of Prompt.Rendering?(v6, v7, &demangling cache variable for type metadata for Locale?);
  PromptTemplateInfo.init(templateID:richVariableBindings:locale:)();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v5, &demangling cache variable for type metadata for (promptTemplate: PromptTemplate, locale: Locale?)?);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v2, &demangling cache variable for type metadata for (promptTemplate: PromptTemplate, locale: Locale?));
  v13(v3, v1);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v12, &demangling cache variable for type metadata for Locale?);
  uint64_t v8 = type metadata accessor for Prompt();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v15, v14, v8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v15, 0, 1, v8);
  swift_storeEnumTagMultiPayload();
  outlined init with take of PromptCompletionStream(v4, v16, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 112) + *(int *)(v0 + 212);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 56), &demangling cache variable for type metadata for (promptTemplate: PromptTemplate, locale: Locale?)?);
  uint64_t v4 = type metadata accessor for Prompt();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v2, v4);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for (promptTemplate: PromptTemplate, locale: Locale?));
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v3, &demangling cache variable for type metadata for Locale?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t TokenGenerator.PromptInputFromGenerativeModel.init(tgPrompt:variableBindings:promptTemplate:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 184) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = TokenGenerator.PromptInputFromGenerativeModel.init(tgPrompt:variableBindings:promptTemplate:);
  }
  else
  {
    uint64_t v6 = *(void *)(v4 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v4 + 192) = a1;
    *(void *)(v4 + 200) = v6;
    *(_DWORD *)(v4 + 216) = *(_DWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplateInfo: PromptTemplateInfo, renderedPrompt: Prompt?))
                                      + 48);
    uint64_t v5 = TokenGenerator.PromptInputFromGenerativeModel.init(tgPrompt:variableBindings:promptTemplate:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t Dictionary<>.richVariableBindings()(uint64_t a1)
{
  v1[22] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SelfAttention?);
  v1[23] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for SelfAttention();
  v1[24] = v2;
  v1[25] = *(void *)(v2 - 8);
  v1[26] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Prompt.Component.Value.CustomData();
  v1[27] = v3;
  v1[28] = *(void *)(v3 - 8);
  v1[29] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for PromptTemplateInfo.RichVariableBinding.Component.Content();
  v1[30] = v4;
  v1[31] = *(void *)(v4 - 8);
  v1[32] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptTemplateInfo.RichVariableBinding.Component?);
  v1[33] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for PromptTemplateInfo.RichVariableBinding.Component();
  v1[34] = v5;
  v1[35] = *(void *)(v5 - 8);
  v1[36] = swift_task_alloc();
  v1[37] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Prompt.Component();
  v1[38] = v6;
  v1[39] = *(void *)(v6 - 8);
  v1[40] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for PromptTemplateInfo.RichVariableBinding();
  v1[41] = v7;
  v1[42] = *(void *)(v7 - 8);
  v1[43] = swift_task_alloc();
  v1[44] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Component.Privacy?);
  v1[45] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Prompt.Component.Value();
  v1[46] = v8;
  v1[47] = *(void *)(v8 - 8);
  v1[48] = swift_task_alloc();
  v1[49] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Prompt();
  v1[50] = v9;
  v1[51] = *(void *)(v9 - 8);
  v1[52] = swift_task_alloc();
  v1[53] = swift_task_alloc();
  return MEMORY[0x270FA2498](Dictionary<>.richVariableBindings(), 0, 0);
}

uint64_t Dictionary<>.richVariableBindings()()
{
  uint64_t v1 = *(void *)(v0 + 176);
  unint64_t v2 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  unint64_t v3 = v2;
  char v4 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(v0 + 528) = v4;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << v4;
  if (-(-1 << v4) < 64) {
    uint64_t v5 = ~(-1 << -(char)(-1 << v4));
  }
  unint64_t v7 = v5 & *(void *)(v1 + 64);
  *(_DWORD *)(v0 + 512) = *MEMORY[0x263F62078];
  *(_DWORD *)(v0 + 516) = *MEMORY[0x263F62060];
  *(_DWORD *)(v0 + 520) = *MEMORY[0x263F7FC18];
  *(void *)(v0 + 432) = v2;
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v8 = 0;
    unint64_t v9 = __clz(__rbit64(v7));
    uint64_t v10 = (v7 - 1) & v7;
    uint64_t v11 = *(void **)(v0 + 176);
LABEL_5:
    uint64_t v12 = (void *)(v11[6] + 16 * v9);
    uint64_t v13 = v12[1];
    *(void *)(v0 + 72) = *v12;
    *(void *)(v0 + 80) = v13;
    outlined init with copy of PromptCompletionEvent(v11[7] + 40 * v9, v0 + 88);
    swift_bridgeObjectRetain();
    goto LABEL_12;
  }
  unint64_t v14 = 63 - v6;
  if ((unint64_t)(63 - v6) <= 0x7F)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v11 = *(void **)(v0 + 176);
    unint64_t v15 = v11[9];
    if (v15)
    {
      uint64_t v8 = 1;
LABEL_9:
      uint64_t v10 = (v15 - 1) & v15;
      unint64_t v9 = __clz(__rbit64(v15)) + (v8 << 6);
      goto LABEL_5;
    }
    if (v14 < 0xC0)
    {
      uint64_t v8 = 1;
    }
    else
    {
      unint64_t v15 = v11[10];
      if (v15)
      {
        uint64_t v8 = 2;
        goto LABEL_9;
      }
      if (v14 < 0x100)
      {
        uint64_t v8 = 2;
      }
      else
      {
        unint64_t v15 = v11[11];
        if (v15)
        {
          uint64_t v8 = 3;
          goto LABEL_9;
        }
        if (v14 < 0x140)
        {
          uint64_t v8 = 3;
        }
        else
        {
          unint64_t v15 = v11[12];
          if (v15)
          {
            uint64_t v8 = 4;
            goto LABEL_9;
          }
          uint64_t v25 = 0;
          uint64_t v26 = v14 >> 6;
          uint64_t v27 = 5;
          if (v26 > 5) {
            uint64_t v27 = v26;
          }
          uint64_t v28 = v27 - 5;
          while (v28 != v25)
          {
            unint64_t v15 = v11[v25++ + 13];
            if (v15)
            {
              uint64_t v8 = v25 + 4;
              goto LABEL_9;
            }
          }
          uint64_t v8 = v26 - 1;
        }
      }
    }
  }
  uint64_t v10 = 0;
  *(void *)(v0 + 120) = 0;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
LABEL_12:
  *(void *)(v0 + 440) = v8;
  *(void *)(v0 + 448) = v10;
  outlined init with take of Locale?(v0 + 72, v0 + 16, &demangling cache variable for type metadata for (key: String, value: PromptComponentValueConvertible)?);
  uint64_t v16 = *(void *)(v0 + 24);
  *(void *)(v0 + 456) = v16;
  if (v16)
  {
    uint64_t v17 = *(void *)(v0 + 360);
    uint64_t v18 = *(void *)(v0 + 312);
    *(void *)(v0 + 464) = *(void *)(v0 + 16);
    outlined init with take of AsyncIteratorProtocol((long long *)(v0 + 32), v0 + 128);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Component>);
    *(void *)(v0 + 472) = *(void *)(v18 + 72);
    *(_DWORD *)(v0 + 524) = *(_DWORD *)(v18 + 80);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_25F91CC30;
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 128), *(void *)(v0 + 152));
    dispatch thunk of PromptComponentValueConvertible.toValue()();
    uint64_t v19 = type metadata accessor for Prompt.Component.Privacy();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v17, 1, 1, v19);
    Prompt.Component.init(value:priority:privacy:)();
    Prompt.init(components:)();
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 480) = v20;
    *uint64_t v20 = v0;
    v20[1] = Dictionary<>.richVariableBindings();
    uint64_t v21 = *(void *)(v0 + 424);
    uint64_t v22 = *(void *)(v0 + 176);
    uint64_t v23 = MEMORY[0x263F8EE78];
    return MEMORY[0x270F581D0](v21, v22, 1, v23);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v24(v3);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v12;

  unint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 488) = v0;
  swift_task_dealloc();
  if (v0)
  {
    char v4 = v2[51];
    unint64_t v3 = v2[52];
    uint64_t v5 = v2[50];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    swift_bridgeObjectRelease();
    uint64_t v6 = Dictionary<>.richVariableBindings();
  }
  else
  {
    uint64_t v8 = v2[51];
    unint64_t v7 = v2[52];
    unint64_t v9 = v2[50];
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v2[62] = v10;
    v2[63] = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v10(v7, v9);
    uint64_t v6 = Dictionary<>.richVariableBindings();
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  int isUniquelyReferenced_nonNull_native;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  int64_t v93;
  int64_t v94;
  uint64_t v95;
  unint64_t v96;
  int64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t (*v103)(uint64_t);
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void (*v115)(void, unint64_t, void);
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;

  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 496);
  unint64_t v2 = *(void *)(v0 + 424);
  unint64_t v3 = *(void *)(v0 + 400);
  char v4 = Prompt.components.getter();
  v1(v2, v3);
  uint64_t v117 = *(void *)(v4 + 16);
  if (v117)
  {
    uint64_t v116 = v4 + ((*(unsigned __int8 *)(v0 + 524) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 524));
    uint64_t v115 = *(void (**)(void, unint64_t, void))(*(void *)(v0 + 312) + 16);
    uint64_t v110 = *(void **)(v0 + 488);
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    uint64_t v6 = MEMORY[0x263F8EE78];
    do
    {
      unint64_t v7 = *(_DWORD *)(v0 + 512);
      uint64_t v8 = *(void *)(v0 + 376);
      unint64_t v9 = *(void *)(v0 + 384);
      uint64_t v10 = *(void *)(v0 + 368);
      v115(*(void *)(v0 + 320), v116 + *(void *)(v0 + 472) * v5, *(void *)(v0 + 304));
      Prompt.Component.value.getter();
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 88))(v9, v10);
      if (v11 == v7)
      {
        uint64_t v12 = *(unsigned int *)(v0 + 520);
        uint64_t v13 = *(void *)(v0 + 280);
        uint64_t v113 = *(void *)(v0 + 272);
        unint64_t v14 = *(void *)(v0 + 256);
        unint64_t v15 = *(void *)(v0 + 264);
        uint64_t v16 = v6;
        uint64_t v18 = *(void *)(v0 + 240);
        uint64_t v17 = *(void *)(v0 + 248);
        (*(void (**)(void, void))(*(void *)(v0 + 376) + 96))(*(void *)(v0 + 384), *(void *)(v0 + 368));
        PromptTemplateInfo.RichVariableBinding.Component.Content.Text.init(string:)();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 104))(v14, v12, v18);
        uint64_t v6 = v16;
        PromptTemplateInfo.RichVariableBinding.Component.init(content:)();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v113);
      }
      else
      {
        uint64_t v20 = *(void *)(v0 + 376);
        uint64_t v19 = *(void *)(v0 + 384);
        uint64_t v21 = *(void *)(v0 + 368);
        if (v11 == *(_DWORD *)(v0 + 516))
        {
          uint64_t v114 = v6;
          uint64_t v23 = *(void *)(v0 + 224);
          uint64_t v22 = *(void *)(v0 + 232);
          uint64_t v24 = *(void *)(v0 + 216);
          (*(void (**)(uint64_t, uint64_t))(v20 + 96))(v19, v21);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v22, v19, v24);
          lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type SelfAttention and conformance SelfAttention, MEMORY[0x263F41518]);
          uint64_t v25 = v110;
          Prompt.Component.Value.CustomData.value<A>(type:)();
          if (v110)
          {
            uint64_t v26 = *(void *)(v0 + 280);
            uint64_t v108 = *(void *)(v0 + 264);
            uint64_t v111 = *(void *)(v0 + 272);
            uint64_t v28 = *(void *)(v0 + 224);
            uint64_t v27 = *(void *)(v0 + 232);
            uint64_t v29 = *(void *)(v0 + 216);
            uint64_t v31 = *(void *)(v0 + 192);
            uint64_t v30 = *(void *)(v0 + 200);
            uint64_t v32 = *(void *)(v0 + 184);

            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v32, 1, 1, v31);
            (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
            outlined destroy of GenerativeFunctionsInstrumentationEvent?(v32, &demangling cache variable for type metadata for SelfAttention?);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v108, 1, 1, v111);
          }
          else
          {
            uint64_t v105 = *(_DWORD *)(v0 + 520);
            unsigned int v33 = *(void *)(v0 + 280);
            uint64_t v34 = *(void *)(v0 + 256);
            uint64_t v35 = *(void *)(v0 + 248);
            char v104 = *(void *)(v0 + 240);
            uint64_t v36 = *(void *)(v0 + 224);
            uint64_t v109 = *(void *)(v0 + 232);
            id v112 = *(void *)(v0 + 272);
            uint64_t v37 = *(void *)(v0 + 208);
            uint64_t v106 = *(void *)(v0 + 264);
            id v107 = *(void *)(v0 + 216);
            uint64_t v38 = *(void *)(v0 + 192);
            uint64_t v39 = *(void *)(v0 + 200);
            uint64_t v40 = *(void *)(v0 + 184);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v40, 0, 1, v38);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(v37, v40, v38);
            SelfAttention.text.getter();
            static PromptTemplateInfo.RichVariableBinding.Component.Content.Text.selfAttention(string:)();
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, void, uint64_t))(v35 + 104))(v34, v105, v104);
            PromptTemplateInfo.RichVariableBinding.Component.init(content:)();
            (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
            (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v109, v107);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v106, 0, 1, v112);
          }
          uint64_t v110 = 0;
          uint64_t v6 = v114;
        }
        else
        {
          (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 280) + 56))(*(void *)(v0 + 264), 1, 1, *(void *)(v0 + 272));
          (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
        }
      }
      uint64_t v41 = *(void *)(v0 + 272);
      uint64_t v42 = *(void *)(v0 + 280);
      uint64_t v43 = *(void *)(v0 + 264);
      (*(void (**)(void, void))(*(void *)(v0 + 312) + 8))(*(void *)(v0 + 320), *(void *)(v0 + 304));
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v43, 1, v41) == 1)
      {
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 264), &demangling cache variable for type metadata for PromptTemplateInfo.RichVariableBinding.Component?);
      }
      else
      {
        uint64_t v44 = *(void *)(v0 + 288);
        uint64_t v45 = *(void *)(v0 + 296);
        char v46 = *(void *)(v0 + 272);
        uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 280) + 32);
        v47(v45, *(void *)(v0 + 264), v46);
        v47(v44, v45, v46);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1, v6);
        }
        uint64_t v49 = *(void *)(v6 + 16);
        uint64_t v48 = *(void *)(v6 + 24);
        if (v49 >= v48 >> 1) {
          uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1, v6);
        }
        uint64_t v51 = *(void *)(v0 + 280);
        uint64_t v50 = *(void *)(v0 + 288);
        long long v52 = *(void *)(v0 + 272);
        *(void *)(v6 + 16) = v49 + 1;
        v47(v6+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(void *)(v51 + 72) * v49, v50, v52);
      }
      ++v5;
    }
    while (v117 != v5);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v53 = *(void *)(v0 + 456);
  uint64_t v54 = *(void *)(v0 + 464);
  unint64_t v55 = *(void *)(v0 + 432);
  uint64_t v57 = *(void *)(v0 + 344);
  unint64_t v56 = *(void *)(v0 + 352);
  uint64_t v58 = *(void *)(v0 + 328);
  uint64_t v59 = *(void *)(v0 + 336);
  PromptTemplateInfo.RichVariableBinding.init(components:)();
  uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 32);
  v60(v57, v56, v58);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v0 + 168) = v55;
  uint64_t v65 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v53);
  uint64_t v66 = *(void *)(v55 + 16);
  uint64_t v67 = (v62 & 1) == 0;
  uint64_t v68 = v66 + v67;
  if (__OFADD__(v66, v67))
  {
    __break(1u);
    goto LABEL_63;
  }
  long long v69 = v62;
  if (*(void *)(*(void *)(v0 + 432) + 24) >= v68)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      specialized _NativeDictionary.copy()();
    }
  }
  else
  {
    uint64_t v71 = *(void *)(v0 + 456);
    uint64_t v70 = *(void *)(v0 + 464);
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v68, isUniquelyReferenced_nonNull_native);
    long long v72 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v71);
    if ((v69 & 1) != (v73 & 1))
    {
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    }
    uint64_t v65 = v72;
  }
  char v75 = *(void **)(v0 + 168);
  if (v69)
  {
    (*(void (**)(unint64_t, void, void))(*(void *)(v0 + 336) + 40))(v75[7] + *(void *)(*(void *)(v0 + 336) + 72) * v65, *(void *)(v0 + 344), *(void *)(v0 + 328));
    goto LABEL_34;
  }
  uint64_t v77 = *(void *)(v0 + 456);
  uint64_t v76 = *(void *)(v0 + 464);
  char v79 = *(void *)(v0 + 336);
  uint64_t v78 = *(void *)(v0 + 344);
  uint64_t v80 = *(void *)(v0 + 328);
  v75[(v65 >> 6) + 8] |= 1 << v65;
  uint64_t v81 = (void *)(v75[6] + 16 * v65);
  *uint64_t v81 = v76;
  v81[1] = v77;
  uint64_t v68 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v60)(v75[7] + *(void *)(v79 + 72) * v65, v78, v80);
  unint64_t v82 = v75[2];
  uint64_t v83 = __OFADD__(v82, 1);
  char v84 = v82 + 1;
  if (v83)
  {
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  v75[2] = v84;
  swift_bridgeObjectRetain();
LABEL_34:
  uint64_t v85 = *(void *)(v0 + 168);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v68 = __swift_destroy_boxed_opaque_existential_1Tm(v0 + 128);
  char v87 = *(void *)(v0 + 440);
  uint64_t v86 = *(void *)(v0 + 448);
  *(void *)(v0 + 432) = v85;
  if (v86)
  {
    uint64_t v88 = (v86 - 1) & v86;
    uint64_t v89 = __clz(__rbit64(v86)) | (v87 << 6);
    uint64_t v90 = *(void *)(v0 + 176);
LABEL_36:
    uint64_t v91 = (void *)(*(void *)(v90 + 48) + 16 * v89);
    uint64_t v92 = v91[1];
    *(void *)(v0 + 72) = *v91;
    *(void *)(v0 + 80) = v92;
    outlined init with copy of PromptCompletionEvent(*(void *)(v90 + 56) + 40 * v89, v0 + 88);
    swift_bridgeObjectRetain();
    goto LABEL_55;
  }
  unint64_t v93 = v87 + 1;
  if (__OFADD__(v87, 1)) {
    goto LABEL_64;
  }
  uint64_t v94 = (unint64_t)((1 << *(unsigned char *)(v0 + 528)) + 63) >> 6;
  if (v93 < v94)
  {
    uint64_t v90 = *(void *)(v0 + 176);
    uint64_t v95 = v90 + 64;
    uint64_t v96 = *(void *)(v90 + 64 + 8 * v93);
    if (v96)
    {
LABEL_40:
      uint64_t v88 = (v96 - 1) & v96;
      uint64_t v89 = __clz(__rbit64(v96)) + (v93 << 6);
      char v87 = v93;
      goto LABEL_36;
    }
    uint64_t v97 = v87 + 2;
    ++v87;
    if (v93 + 1 < v94)
    {
      uint64_t v96 = *(void *)(v95 + 8 * v97);
      if (v96)
      {
LABEL_43:
        unint64_t v93 = v97;
        goto LABEL_40;
      }
      char v87 = v93 + 1;
      if (v93 + 2 < v94)
      {
        uint64_t v96 = *(void *)(v95 + 8 * (v93 + 2));
        if (v96)
        {
          v93 += 2;
          goto LABEL_40;
        }
        uint64_t v97 = v93 + 3;
        char v87 = v93 + 2;
        if (v93 + 3 < v94)
        {
          uint64_t v96 = *(void *)(v95 + 8 * v97);
          if (v96) {
            goto LABEL_43;
          }
          while (1)
          {
            unint64_t v93 = v97 + 1;
            if (__OFADD__(v97, 1)) {
              break;
            }
            if (v93 >= v94)
            {
              char v87 = v94 - 1;
              goto LABEL_54;
            }
            uint64_t v96 = *(void *)(v95 + 8 * v93);
            ++v97;
            if (v96) {
              goto LABEL_40;
            }
          }
LABEL_65:
          __break(1u);
          return MEMORY[0x270F581D0](v68, v62, v63, v64);
        }
      }
    }
  }
LABEL_54:
  uint64_t v88 = 0;
  *(void *)(v0 + 120) = 0;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
LABEL_55:
  *(void *)(v0 + 440) = v87;
  *(void *)(v0 + 448) = v88;
  outlined init with take of Locale?(v0 + 72, v0 + 16, &demangling cache variable for type metadata for (key: String, value: PromptComponentValueConvertible)?);
  uint64_t v98 = *(void *)(v0 + 24);
  *(void *)(v0 + 456) = v98;
  if (v98)
  {
    uint64_t v99 = *(void *)(v0 + 360);
    uint64_t v100 = *(void *)(v0 + 312);
    *(void *)(v0 + 464) = *(void *)(v0 + 16);
    outlined init with take of AsyncIteratorProtocol((long long *)(v0 + 32), v0 + 128);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Component>);
    *(void *)(v0 + 472) = *(void *)(v100 + 72);
    *(_DWORD *)(v0 + 524) = *(_DWORD *)(v100 + 80);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_25F91CC30;
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 128), *(void *)(v0 + 152));
    dispatch thunk of PromptComponentValueConvertible.toValue()();
    unint64_t v101 = type metadata accessor for Prompt.Component.Privacy();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v101 - 8) + 56))(v99, 1, 1, v101);
    Prompt.Component.init(value:priority:privacy:)();
    Prompt.init(components:)();
    uint64_t v102 = (void *)swift_task_alloc();
    *(void *)(v0 + 480) = v102;
    *uint64_t v102 = v0;
    v102[1] = Dictionary<>.richVariableBindings();
    uint64_t v68 = *(void *)(v0 + 424);
    uint64_t v62 = *(void *)(v0 + 176);
    uint64_t v64 = MEMORY[0x263F8EE78];
    uint64_t v63 = 1;
    return MEMORY[0x270F581D0](v68, v62, v63, v64);
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v103 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v103(v85);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 128);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t Array<A>.asPromptTemplate()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptTemplate?);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PromptTemplate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16) == 1)
  {
    type metadata accessor for ChatMessagePrompt();
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type PromptTemplate and conformance PromptTemplate, MEMORY[0x263F41548]);
    uint64_t result = ChatMessagePrompt.asCustomData<A>(type:)();
    if (v2) {
      return result;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplate: PromptTemplate, locale: Locale?));
      (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(a2, v11, v8);
      ChatMessagePrompt.locale.getter();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a2, 0, 1, v14);
    }
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v7, &demangling cache variable for type metadata for PromptTemplate?);
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplate: PromptTemplate, locale: Locale?));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a2, 1, 1, v13);
}

uint64_t TokenGenerator.complete(promptInputFromGenerativeModel:parameters:tools:toolChoice:documents:schema:metadata:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (**a4)(char *, uint64_t)@<X3>, unsigned int (**a5)(uint64_t, uint64_t, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v100 = a5;
  uint64_t v81 = a6;
  uint64_t v98 = a3;
  uint64_t v99 = a4;
  uint64_t v96 = a2;
  uint64_t v97 = a8;
  uint64_t v83 = a1;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v93 = (uint64_t)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PromptTemplateInfo();
  uint64_t v91 = *(void *)(v11 - 8);
  uint64_t v92 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v90 = (uint64_t)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Prompt();
  uint64_t v85 = *(void *)(v13 - 8);
  uint64_t v86 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v84 = (uint64_t)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel(0);
  MEMORY[0x270FA5388](v82);
  uint64_t v16 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Schema?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Schema();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  uint64_t v25 = MEMORY[0x270FA5388](v24 - 8);
  uint64_t v27 = (char *)&v80 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)&v80 - v28;
  outlined init with take of Locale?(v96, (uint64_t)v134, &demangling cache variable for type metadata for SamplingParameters?);
  uint64_t v30 = a7[1];
  uint64_t v31 = a7[2];
  uint64_t v87 = *a7;
  uint64_t v88 = v31;
  uint64_t v95 = a7[3];
  uint64_t v96 = v30;
  uint64_t v89 = a7[4];
  uint64_t v32 = a7[5];
  uint64_t v33 = a7[6];
  uint64_t v94 = v32;
  outlined init with copy of Prompt.Rendering?(v81, (uint64_t)v19, &demangling cache variable for type metadata for Schema?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v19, &demangling cache variable for type metadata for Schema?);
    uint64_t v34 = type metadata accessor for Constraints(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v29, 1, 1, v34);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v19, v20);
    Schema.type.getter();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
    uint64_t v35 = type metadata accessor for Constraints(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v27, 0, 1, v35);
    outlined init with take of Locale?((uint64_t)v27, (uint64_t)v29, &demangling cache variable for type metadata for Constraints?);
  }
  uint64_t v36 = (uint64_t)v29;
  outlined init with copy of PromptCompletion(v83, (uint64_t)v16, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v37 = (uint64_t)&v16[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplateInfo: PromptTemplateInfo, renderedPrompt: Prompt?))
                               + 48)];
    (*(void (**)(uint64_t, char *, uint64_t))(v91 + 32))(v90, v16, v92);
    outlined init with take of Locale?(v37, v93, &demangling cache variable for type metadata for Prompt?);
    outlined init with take of Locale?((uint64_t)v134, (uint64_t)v133, &demangling cache variable for type metadata for SamplingParameters?);
    if (_s15TokenGeneration26SamplingParametersEnvelopeVSgWOg((uint64_t)v133) == 1)
    {
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      char v46 = -1;
      uint64_t v47 = MEMORY[0x263F8EE88];
      char v48 = 1;
      char v49 = 2;
      char v50 = 2;
      char v51 = 1;
      char v52 = 1;
      char v53 = 1;
      char v54 = 1;
      char v55 = 1;
      char v56 = 1;
    }
    else
    {
      outlined init with take of Locale?((uint64_t)v134, (uint64_t)&v108, &demangling cache variable for type metadata for SamplingParameters?);
      char v49 = v125;
      char v50 = v124;
      uint64_t v38 = v122;
      char v48 = v123;
      uint64_t v39 = v120;
      char v51 = v121;
      char v52 = v119;
      uint64_t v47 = v117;
      uint64_t v40 = v118;
      uint64_t v41 = v115;
      char v53 = v116;
      uint64_t v42 = v113;
      char v54 = v114;
      uint64_t v43 = v111;
      char v55 = v112;
      uint64_t v44 = v109;
      char v56 = v110;
      uint64_t v45 = v108;
      char v46 = BYTE8(v108);
    }
    char v132 = v56;
    char v131 = v55;
    char v130 = v54;
    char v129 = v53;
    char v128 = v52;
    char v127 = v51;
    char v126 = v48;
    *(void *)&long long v108 = v45;
    BYTE8(v108) = v46;
    uint64_t v109 = v44;
    char v110 = v56;
    uint64_t v111 = v43;
    char v112 = v55;
    uint64_t v113 = v42;
    char v114 = v54;
    uint64_t v115 = v41;
    char v116 = v53;
    uint64_t v117 = v47;
    uint64_t v118 = v40;
    char v119 = v52;
    uint64_t v120 = v39;
    char v121 = v51;
    uint64_t v122 = v38;
    char v123 = v48;
    char v124 = v50;
    char v125 = v49;
    uint64_t v101 = v87;
    uint64_t v102 = v96;
    uint64_t v103 = v88;
    uint64_t v104 = v95;
    uint64_t v105 = v89;
    uint64_t v106 = v94;
    uint64_t v107 = v33;
    outlined retain of SamplingParameters((uint64_t)v134);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v76 = v93;
    uint64_t v77 = v90;
    TokenGenerator.complete(prompt:promptTemplateInfo:parameters:tools:toolChoice:documents:constraint:metadata:)(v93, v90, &v108, v98, (uint64_t)v99, (uint64_t)v100, v36, &v101, v97);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v76, &demangling cache variable for type metadata for Prompt?);
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v77, v92);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v85 + 32))(v84, v16, v86);
    outlined init with take of Locale?((uint64_t)v134, (uint64_t)v133, &demangling cache variable for type metadata for SamplingParameters?);
    if (_s15TokenGeneration26SamplingParametersEnvelopeVSgWOg((uint64_t)v133) == 1)
    {
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      char v65 = -1;
      uint64_t v66 = MEMORY[0x263F8EE88];
      char v67 = 1;
      char v68 = 2;
      char v69 = 2;
      char v70 = 1;
      char v71 = 1;
      char v72 = 1;
      char v73 = 1;
      char v74 = 1;
      char v75 = 1;
    }
    else
    {
      outlined init with take of Locale?((uint64_t)v134, (uint64_t)&v108, &demangling cache variable for type metadata for SamplingParameters?);
      char v68 = v125;
      char v69 = v124;
      uint64_t v57 = v122;
      char v67 = v123;
      uint64_t v58 = v120;
      char v70 = v121;
      char v71 = v119;
      uint64_t v66 = v117;
      uint64_t v59 = v118;
      uint64_t v60 = v115;
      char v72 = v116;
      uint64_t v61 = v113;
      char v73 = v114;
      uint64_t v62 = v111;
      char v74 = v112;
      uint64_t v63 = v109;
      char v75 = v110;
      uint64_t v64 = v108;
      char v65 = BYTE8(v108);
    }
    char v132 = v75;
    char v131 = v74;
    char v130 = v73;
    char v129 = v72;
    char v128 = v71;
    char v127 = v70;
    char v126 = v67;
    *(void *)&long long v108 = v64;
    BYTE8(v108) = v65;
    uint64_t v109 = v63;
    char v110 = v75;
    uint64_t v111 = v62;
    char v112 = v74;
    uint64_t v113 = v61;
    char v114 = v73;
    uint64_t v115 = v60;
    char v116 = v72;
    uint64_t v117 = v66;
    uint64_t v118 = v59;
    char v119 = v71;
    uint64_t v120 = v58;
    char v121 = v70;
    uint64_t v122 = v57;
    char v123 = v67;
    char v124 = v69;
    char v125 = v68;
    uint64_t v101 = v87;
    uint64_t v102 = v96;
    uint64_t v103 = v88;
    uint64_t v104 = v95;
    uint64_t v105 = v89;
    uint64_t v106 = v94;
    uint64_t v107 = v33;
    outlined retain of SamplingParameters((uint64_t)v134);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v78 = v84;
    TokenGenerator.complete(prompt:parameters:tools:toolChoice:documents:constraint:metadata:)(v84, &v108, v98, v99, v100, (uint64_t)v29, &v101, v97);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v78, v86);
  }
  return outlined destroy of GenerativeFunctionsInstrumentationEvent?(v36, &demangling cache variable for type metadata for Constraints?);
}

uint64_t TokenGenerator.complete(promptInputFromGenerativeModel:parameters:tools:toolChoice:documents:grammar:metadata:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (**a4)(char *, uint64_t)@<X3>, unsigned int (**a5)(uint64_t, uint64_t, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>, int a10)
{
  uint64_t v96 = a5;
  uint64_t v92 = a7;
  uint64_t v93 = a9;
  uint64_t v88 = a6;
  uint64_t v94 = a3;
  uint64_t v95 = a4;
  uint64_t v81 = a1;
  int v89 = a10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v80 = (uint64_t)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for PromptTemplateInfo();
  uint64_t v84 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v83 = (uint64_t *)((char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = type metadata accessor for Prompt();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel(0);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of Locale?(a2, (uint64_t)v128, &demangling cache variable for type metadata for SamplingParameters?);
  uint64_t v26 = a8[1];
  uint64_t v27 = a8[2];
  uint64_t v85 = *a8;
  uint64_t v86 = v27;
  uint64_t v90 = a8[3];
  uint64_t v91 = v26;
  uint64_t v28 = a8[5];
  uint64_t v87 = a8[4];
  uint64_t v29 = a8[6];
  outlined init with copy of PromptCompletion(v81, (uint64_t)v25, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v82 = v28;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v31 = (uint64_t)&v25[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplateInfo: PromptTemplateInfo, renderedPrompt: Prompt?))
                               + 48)];
    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v16, v25, v14);
    uint64_t v32 = v80;
    outlined init with take of Locale?(v31, v80, &demangling cache variable for type metadata for Prompt?);
    outlined init with take of Locale?((uint64_t)v128, (uint64_t)v127, &demangling cache variable for type metadata for SamplingParameters?);
    int v33 = _s15TokenGeneration26SamplingParametersEnvelopeVSgWOg((uint64_t)v127);
    uint64_t v79 = v14;
    if (v33 == 1)
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      char v42 = -1;
      uint64_t v43 = MEMORY[0x263F8EE88];
      char v44 = 1;
      char v45 = 2;
      char v46 = 2;
      char v47 = 1;
      char v48 = 1;
      char v49 = 1;
      char v50 = 1;
      char v51 = 1;
    }
    else
    {
      outlined init with take of Locale?((uint64_t)v128, (uint64_t)&v119, &demangling cache variable for type metadata for SamplingParameters?);
      char v45 = BYTE2(v126[1]);
      char v46 = BYTE1(v126[1]);
      uint64_t v34 = *((void *)&v126[0] + 1);
      char v44 = v126[1];
      uint64_t v35 = *((void *)&v125 + 1);
      LOBYTE(v33) = v126[0];
      char v47 = v125;
      uint64_t v36 = *((void *)&v124 + 1);
      uint64_t v43 = v124;
      uint64_t v37 = v123;
      char v48 = BYTE8(v123);
      uint64_t v38 = v122;
      char v49 = BYTE8(v122);
      uint64_t v39 = v121;
      char v50 = BYTE8(v121);
      uint64_t v40 = v120;
      char v51 = BYTE8(v120);
      uint64_t v41 = v119;
      char v42 = BYTE8(v119);
    }
    char v118 = v51;
    char v117 = v50;
    char v116 = v49;
    char v115 = v48;
    char v114 = v47;
    char v113 = v33;
    char v112 = v44;
    *(void *)&long long v104 = v41;
    BYTE8(v104) = v42;
    *(void *)&long long v105 = v40;
    BYTE8(v105) = v51;
    *(void *)&long long v106 = v39;
    BYTE8(v106) = v50;
    *(void *)&long long v107 = v38;
    BYTE8(v107) = v49;
    *(void *)&long long v108 = v37;
    BYTE8(v108) = v48;
    *(void *)&long long v109 = v43;
    *((void *)&v109 + 1) = v36;
    LOBYTE(v110) = v47;
    *((void *)&v110 + 1) = v35;
    v111[0] = v33;
    *(void *)&v111[8] = v34;
    v111[16] = v44;
    v111[17] = v46;
    v111[18] = v45;
    uint64_t v72 = (uint64_t)v83;
    uint64_t v73 = v92;
    *uint64_t v83 = v88;
    *(void *)(v72 + 8) = v73;
    uint64_t v74 = type metadata accessor for Constraints(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56))(v72, 0, 1, v74);
    uint64_t v97 = v85;
    uint64_t v98 = v91;
    uint64_t v99 = v86;
    uint64_t v100 = v90;
    uint64_t v101 = v87;
    uint64_t v102 = v82;
    uint64_t v103 = v29;
    outlined retain of SamplingParameters((uint64_t)v128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    TokenGenerator.complete(prompt:promptTemplateInfo:parameters:tools:toolChoice:documents:constraint:metadata:)(v32, (uint64_t)v16, &v104, v94, (uint64_t)v95, (uint64_t)v96, v72, &v97, v93);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v72, &demangling cache variable for type metadata for Constraints?);
    long long v125 = v110;
    v126[0] = *(_OWORD *)v111;
    *(_DWORD *)((char *)v126 + 15) = *(_DWORD *)&v111[15];
    long long v121 = v106;
    long long v122 = v107;
    long long v123 = v108;
    long long v124 = v109;
    long long v119 = v104;
    long long v120 = v105;
    outlined release of SamplingParametersEnvelope((uint64_t)&v119);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v32, &demangling cache variable for type metadata for Prompt?);
    return (*(uint64_t (**)(char *, uint64_t))(v84 + 8))(v16, v79);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v25, v19);
    outlined init with take of Locale?((uint64_t)v128, (uint64_t)v127, &demangling cache variable for type metadata for SamplingParameters?);
    int v52 = _s15TokenGeneration26SamplingParametersEnvelopeVSgWOg((uint64_t)v127);
    uint64_t v84 = v19;
    uint64_t v53 = v20;
    if (v52 == 1)
    {
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      uint64_t v61 = 0;
      char v62 = -1;
      uint64_t v63 = MEMORY[0x263F8EE88];
      char v64 = 1;
      char v65 = 2;
      char v66 = 2;
      char v67 = 1;
      char v68 = 1;
      char v69 = 1;
      char v70 = 1;
      char v71 = 1;
    }
    else
    {
      outlined init with take of Locale?((uint64_t)v128, (uint64_t)&v119, &demangling cache variable for type metadata for SamplingParameters?);
      char v65 = BYTE2(v126[1]);
      char v66 = BYTE1(v126[1]);
      uint64_t v54 = *((void *)&v126[0] + 1);
      char v64 = v126[1];
      uint64_t v55 = *((void *)&v125 + 1);
      LOBYTE(v52) = v126[0];
      char v67 = v125;
      uint64_t v56 = *((void *)&v124 + 1);
      uint64_t v63 = v124;
      uint64_t v57 = v123;
      char v68 = BYTE8(v123);
      uint64_t v58 = v122;
      char v69 = BYTE8(v122);
      uint64_t v59 = v121;
      char v70 = BYTE8(v121);
      uint64_t v60 = v120;
      char v71 = BYTE8(v120);
      uint64_t v61 = v119;
      char v62 = BYTE8(v119);
    }
    char v118 = v71;
    char v117 = v70;
    char v116 = v69;
    char v115 = v68;
    char v114 = v67;
    char v113 = v52;
    char v112 = v64;
    *(void *)&long long v104 = v61;
    BYTE8(v104) = v62;
    *(void *)&long long v105 = v60;
    BYTE8(v105) = v71;
    *(void *)&long long v106 = v59;
    BYTE8(v106) = v70;
    *(void *)&long long v107 = v58;
    BYTE8(v107) = v69;
    *(void *)&long long v108 = v57;
    BYTE8(v108) = v68;
    *(void *)&long long v109 = v63;
    *((void *)&v109 + 1) = v56;
    LOBYTE(v110) = v67;
    *((void *)&v110 + 1) = v55;
    v111[0] = v52;
    *(void *)&v111[8] = v54;
    v111[16] = v64;
    v111[17] = v66;
    v111[18] = v65;
    uint64_t v76 = (uint64_t)v83;
    uint64_t v77 = v92;
    *uint64_t v83 = v88;
    *(void *)(v76 + 8) = v77;
    uint64_t v78 = type metadata accessor for Constraints(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v76, 0, 1, v78);
    uint64_t v97 = v85;
    uint64_t v98 = v91;
    uint64_t v99 = v86;
    uint64_t v100 = v90;
    uint64_t v101 = v87;
    uint64_t v102 = v82;
    uint64_t v103 = v29;
    outlined retain of SamplingParameters((uint64_t)v128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    TokenGenerator.complete(prompt:parameters:tools:toolChoice:documents:constraint:metadata:)((uint64_t)v22, &v104, v94, v95, v96, v76, &v97, v93);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v76, &demangling cache variable for type metadata for Constraints?);
    long long v124 = v109;
    long long v125 = v110;
    v126[0] = *(_OWORD *)v111;
    *(_DWORD *)((char *)v126 + 15) = *(_DWORD *)&v111[15];
    long long v121 = v106;
    long long v122 = v107;
    long long v123 = v108;
    long long v119 = v104;
    long long v120 = v105;
    outlined release of SamplingParametersEnvelope((uint64_t)&v119);
    return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v22, v84);
  }
}

uint64_t TokenGenerator.complete<A>(promptInputFromGenerativeModel:parameters:tools:toolChoice:documents:generating:metadata:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (**a4)(char *, uint64_t)@<X3>, unsigned int (**a5)(uint64_t, uint64_t, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v88 = a6;
  uint64_t v83 = a8;
  uint64_t v84 = a9;
  uint64_t v86 = a4;
  uint64_t v87 = a5;
  uint64_t v85 = a3;
  uint64_t v76 = a1;
  uint64_t v82 = a10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for PromptTemplateInfo();
  uint64_t v75 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Prompt();
  uint64_t v74 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel(0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of Locale?(a2, (uint64_t)v123, &demangling cache variable for type metadata for SamplingParameters?);
  uint64_t v24 = *a7;
  uint64_t v25 = a7[2];
  uint64_t v77 = a7[1];
  uint64_t v78 = v25;
  uint64_t v26 = a7[4];
  uint64_t v79 = a7[3];
  uint64_t v80 = v26;
  uint64_t v27 = a7[5];
  uint64_t v28 = a7[6];
  uint64_t v81 = v27;
  outlined init with copy of PromptCompletion(v76, (uint64_t)v23, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v29 = v28;
    uint64_t v30 = (uint64_t)&v23[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplateInfo: PromptTemplateInfo, renderedPrompt: Prompt?))
                               + 48)];
    uint64_t v31 = v75;
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v17, v23, v15);
    outlined init with take of Locale?(v30, (uint64_t)v14, &demangling cache variable for type metadata for Prompt?);
    outlined init with take of Locale?((uint64_t)v123, (uint64_t)v122, &demangling cache variable for type metadata for SamplingParameters?);
    int v32 = _s15TokenGeneration26SamplingParametersEnvelopeVSgWOg((uint64_t)v122);
    uint64_t v76 = v15;
    uint64_t v33 = v31;
    if (v32 == 1)
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      char v42 = -1;
      uint64_t v43 = MEMORY[0x263F8EE88];
      char v44 = 1;
      char v45 = 2;
      char v46 = 2;
      char v47 = 1;
      char v48 = 1;
      char v49 = 1;
      char v50 = 1;
      char v51 = 1;
      char v52 = 1;
    }
    else
    {
      outlined init with take of Locale?((uint64_t)v123, (uint64_t)&v96, &demangling cache variable for type metadata for SamplingParameters?);
      char v45 = v114;
      char v46 = v113;
      uint64_t v34 = v111;
      char v44 = v112;
      uint64_t v35 = v109;
      char v47 = v110;
      char v48 = v108;
      uint64_t v43 = v106;
      uint64_t v36 = v107;
      uint64_t v37 = v104;
      char v49 = v105;
      uint64_t v38 = v102;
      char v50 = v103;
      uint64_t v39 = v100;
      char v51 = v101;
      uint64_t v40 = v98;
      char v52 = v99;
      uint64_t v41 = v96;
      char v42 = v97;
    }
    char v121 = v52;
    char v120 = v51;
    char v119 = v50;
    char v118 = v49;
    char v117 = v48;
    char v116 = v47;
    char v115 = v44;
    uint64_t v96 = v41;
    char v97 = v42;
    uint64_t v98 = v40;
    char v99 = v52;
    uint64_t v100 = v39;
    char v101 = v51;
    uint64_t v102 = v38;
    char v103 = v50;
    uint64_t v104 = v37;
    char v105 = v49;
    uint64_t v106 = v43;
    uint64_t v107 = v36;
    char v108 = v48;
    uint64_t v109 = v35;
    char v110 = v47;
    uint64_t v111 = v34;
    char v112 = v44;
    char v113 = v46;
    char v114 = v45;
    uint64_t v89 = v24;
    uint64_t v90 = v77;
    uint64_t v91 = v78;
    uint64_t v92 = v79;
    uint64_t v93 = v80;
    uint64_t v94 = v81;
    uint64_t v95 = v29;
    outlined retain of SamplingParameters((uint64_t)v123);
    TokenGenerator.complete<A>(prompt:promptTemplateInfo:parameters:tools:toolChoice:documents:generating:metadata:)((uint64_t)v14, (uint64_t)v17, (uint64_t)&v96, v85, (uint64_t)v86, (uint64_t)v87, &v89, v84, v83, v82);
    swift_bridgeObjectRelease();
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v14, &demangling cache variable for type metadata for Prompt?);
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v17, v76);
  }
  else
  {
    uint64_t v53 = v74;
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v20, v23, v18);
    outlined init with take of Locale?((uint64_t)v123, (uint64_t)v122, &demangling cache variable for type metadata for SamplingParameters?);
    if (_s15TokenGeneration26SamplingParametersEnvelopeVSgWOg((uint64_t)v122) == 1)
    {
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      uint64_t v61 = 0;
      char v62 = -1;
      uint64_t v63 = MEMORY[0x263F8EE88];
      char v64 = 1;
      char v65 = 2;
      char v66 = 2;
      char v67 = 1;
      char v68 = 1;
      char v69 = 1;
      char v70 = 1;
      char v71 = 1;
      char v72 = 1;
    }
    else
    {
      outlined init with take of Locale?((uint64_t)v123, (uint64_t)&v96, &demangling cache variable for type metadata for SamplingParameters?);
      char v65 = v114;
      char v66 = v113;
      uint64_t v54 = v111;
      char v64 = v112;
      uint64_t v55 = v109;
      char v67 = v110;
      char v68 = v108;
      uint64_t v63 = v106;
      uint64_t v56 = v107;
      uint64_t v57 = v104;
      char v69 = v105;
      uint64_t v58 = v102;
      char v70 = v103;
      uint64_t v59 = v100;
      char v71 = v101;
      uint64_t v60 = v98;
      char v72 = v99;
      uint64_t v61 = v96;
      char v62 = v97;
    }
    char v121 = v72;
    char v120 = v71;
    char v119 = v70;
    char v118 = v69;
    char v117 = v68;
    char v116 = v67;
    char v115 = v64;
    uint64_t v96 = v61;
    char v97 = v62;
    uint64_t v98 = v60;
    char v99 = v72;
    uint64_t v100 = v59;
    char v101 = v71;
    uint64_t v102 = v58;
    char v103 = v70;
    uint64_t v104 = v57;
    char v105 = v69;
    uint64_t v106 = v63;
    uint64_t v107 = v56;
    char v108 = v68;
    uint64_t v109 = v55;
    char v110 = v67;
    uint64_t v111 = v54;
    char v112 = v64;
    char v113 = v66;
    char v114 = v65;
    uint64_t v89 = v24;
    uint64_t v90 = v77;
    uint64_t v91 = v78;
    uint64_t v92 = v79;
    uint64_t v93 = v80;
    uint64_t v94 = v81;
    uint64_t v95 = v28;
    outlined retain of SamplingParameters((uint64_t)v123);
    TokenGenerator.complete<A>(prompt:parameters:tools:toolChoice:documents:generating:metadata:)((uint64_t)v20, (uint64_t)&v96, v85, v86, v87, &v89, v83, v84, v82);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v20, v18);
  }
}

uint64_t TokenGenerator._complete<A>(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v4[5] = swift_task_alloc();
  v4[6] = type metadata accessor for TokenGeneratorCompletionResponseStringStream(0);
  uint64_t v8 = swift_task_alloc();
  v4[7] = v8;
  uint64_t v9 = (void *)swift_task_alloc();
  v4[8] = v9;
  *uint64_t v9 = v4;
  v9[1] = TokenGenerator._complete<A>(configuration:);
  return TokenGenerator._streamCompletion<A>(configuration:)(v8, a2, a3, a4);
}

uint64_t TokenGenerator._complete<A>(configuration:)()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = TokenGenerator._complete<A>(configuration:);
  }
  else {
    uint64_t v2 = TokenGenerator._complete<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v1 = v0[7];
  uint64_t v2 = v0[5];
  unint64_t v3 = v1 + *(int *)(v0[6] + 24);
  uint64_t v4 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v3, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v2, 0, 1, v4);
  uint64_t v6 = swift_task_alloc();
  v0[10] = v6;
  *(void *)(v6 + 16) = v1;
  unint64_t v7 = (void *)swift_task_alloc();
  v0[11] = v7;
  *unint64_t v7 = v0;
  v7[1] = TokenGenerator._complete<A>(configuration:);
  uint64_t v8 = v0[5];
  return specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(v8, (int *)&async function pointer to partial apply for specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect());
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v0[7], type metadata accessor for TokenGeneratorCompletionResponseStringStream);
  swift_bridgeObjectRelease();
  v0[2] = v1;
  v0[3] = v2;
  CompletionResponse.init(content:)();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of TokenGeneratorCompletionResponseStringStream(*(void *)(v0 + 56), type metadata accessor for TokenGeneratorCompletionResponseStringStream);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TokenGenerator._complete<A>(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (void *)*v4;
  v8[12] = v3;
  swift_task_dealloc();
  uint64_t v9 = v8[5];
  if (v3)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v9, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    swift_task_dealloc();
    uint64_t v10 = TokenGenerator._complete<A>(configuration:);
  }
  else
  {
    v8[13] = a3;
    v8[14] = a2;
    v8[15] = a1;
    swift_task_dealloc();
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v9, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    uint64_t v10 = TokenGenerator._complete<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v10, 0, 0);
}

uint64_t type metadata accessor for TokenGeneratorCompletionResponseStringStream(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for TokenGeneratorCompletionResponseStringStream);
}

uint64_t TokenGenerator._streamCompletion<A>(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[109] = v4;
  v5[108] = a4;
  v5[107] = a3;
  v5[106] = a2;
  v5[105] = a1;
  v5[110] = *v4;
  v5[111] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter));
  v5[112] = swift_task_alloc();
  uint64_t v7 = *(void *)(a3 - 8);
  v5[113] = v7;
  v5[114] = *(void *)(v7 + 64);
  v5[115] = swift_task_alloc();
  v5[116] = swift_task_alloc();
  v5[117] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (result: (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter), duration: Double));
  v5[118] = swift_task_alloc();
  v5[119] = swift_task_alloc();
  v5[120] = swift_task_alloc();
  v5[121] = swift_task_alloc();
  v5[122] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenGenerator._streamCompletion<A>(configuration:), 0, 0);
}

uint64_t TokenGenerator._streamCompletion<A>(configuration:)()
{
  GenerativeConfigurationProtocol.samplingParameters.getter(*(void *)(v0 + 864), v0 + 16);
  outlined init with take of Locale?(v0 + 16, v0 + 296, &demangling cache variable for type metadata for SamplingParameters?);
  outlined init with take of Locale?(v0 + 296, v0 + 160, &demangling cache variable for type metadata for SamplingParameters?);
  if (_s15TokenGeneration26SamplingParametersEnvelopeVSgWOg(v0 + 160) == 1)
  {
    char v24 = 1;
    uint64_t v1 = 0;
  }
  else
  {
    outlined release of SamplingParametersEnvelope(v0 + 296);
    uint64_t v1 = *(void *)(v0 + 264);
    char v24 = *(unsigned char *)(v0 + 272);
  }
  uint64_t v2 = *(void *)(v0 + 928);
  uint64_t v3 = *(void *)(v0 + 920);
  uint64_t v4 = *(void *)(v0 + 912);
  uint64_t v5 = *(void *)(v0 + 904);
  uint64_t v6 = *(void *)(v0 + 880);
  uint64_t v7 = *(void *)(v0 + 872);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  long long v25 = *(_OWORD *)(v0 + 856);
  uint64_t v9 = *(void *)(v0 + 856);
  v8(v2, *(void *)(v0 + 848), v9);
  v8(v3, v2, v9);
  unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v11 = (v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = swift_allocObject();
  *(void *)(v0 + 984) = v12;
  *(_OWORD *)(v12 + 16) = v25;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v12 + v10, v2, v9);
  *(void *)(v12 + v11) = v7;
  *(void *)(v12 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)) = v6;
  swift_retain_n();
  if (v24)
  {
    uint64_t v13 = *(void *)(v0 + 880);
    *(void *)(v0 + 1016) = mach_absolute_time();
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 1024) = v14;
    void *v14 = v0;
    v14[1] = TokenGenerator._streamCompletion<A>(configuration:);
    uint64_t v15 = *(void *)(v0 + 920);
    uint64_t v16 = *(void *)(v0 + 896);
    uint64_t v17 = *(void *)(v0 + 872);
    uint64_t v18 = *(void *)(v0 + 864);
    uint64_t v19 = *(void *)(v0 + 856);
    return closure #1 in TokenGenerator._streamCompletion<A>(configuration:)(v16, v15, v17, v13, v19, v18);
  }
  else
  {
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 992) = v21;
    void v21[2] = &async function pointer to partial apply for closure #1 in TokenGenerator._streamCompletion<A>(configuration:);
    v21[3] = v12;
    void v21[4] = v1;
    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 1000) = v22;
    *uint64_t v22 = v0;
    v22[1] = TokenGenerator._streamCompletion<A>(configuration:);
    uint64_t v23 = *(void *)(v0 + 968);
    return MEMORY[0x270FA22B8](v23);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 1008) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = TokenGenerator._streamCompletion<A>(configuration:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = TokenGenerator._streamCompletion<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 1032) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = TokenGenerator._streamCompletion<A>(configuration:);
  }
  else {
    uint64_t v2 = TokenGenerator._streamCompletion<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  char v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  uint64_t v1 = *(void *)(v0 + 968);
  uint64_t v2 = *(double *)(v1 + *(int *)(*(void *)(v0 + 936) + 48));
  outlined init with take of Locale?(v1, *(void *)(v0 + 976), &demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter));
  char v44 = *(void *)(v0 + 1008);
  uint64_t v3 = *(void *)(v0 + 976);
  uint64_t v4 = *(void *)(v0 + 936);
  uint64_t v5 = *(void *)(v0 + 920);
  uint64_t v6 = *(void *)(v0 + 904);
  uint64_t v7 = *(void *)(v0 + 864);
  uint64_t v8 = *(void *)(v0 + 856);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v8);
  uint64_t v9 = v4;
  swift_release();
  *(double *)(v3 + *(int *)(v4 + 48)) = v2;
  GenerativeConfigurationProtocol.samplingParameters.getter(v7, v0 + 568);
  if (v44)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 976), &demangling cache variable for type metadata for (result: (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter), duration: Double));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    outlined init with take of Locale?(v0 + 568, v0 + 432, &demangling cache variable for type metadata for SamplingParameters?);
    outlined init with take of Locale?(v0 + 432, v0 + 704, &demangling cache variable for type metadata for SamplingParameters?);
    unint64_t v11 = 0.0;
    if (_s15TokenGeneration26SamplingParametersEnvelopeVSgWOg(v0 + 704) == 1
      || (outlined release of SamplingParametersEnvelope(v0 + 432), (*(unsigned char *)(v0 + 816) & 1) != 0))
    {
      uint64_t v30 = 1;
    }
    else
    {
      uint64_t v30 = 0;
      unint64_t v11 = *(double *)(v0 + 808) - v2;
    }
    uint64_t v43 = *(void *)(v0 + 976);
    uint64_t v12 = *(void *)(v0 + 960);
    char v45 = *(void *)(v0 + 952);
    uint64_t v13 = *(void *)(v0 + 888);
    uint64_t v40 = *(void *)(v0 + 840);
    uint64_t v14 = *(int *)(v13 + 48);
    uint64_t v15 = v43 + v14;
    uint64_t v34 = v43 + v14;
    uint64_t v16 = *(int *)(v13 + 64);
    uint64_t v17 = v43 + v16;
    uint64_t v38 = *(void *)(v0 + 944);
    uint64_t v39 = *(int *)(v4 + 48);
    uint64_t v18 = v12 + v14;
    uint64_t v19 = v12 + v16;
    uint64_t v41 = v12 + v16;
    char v42 = v12 + v14;
    uint64_t v20 = v12;
    uint64_t v36 = v12;
    outlined init with copy of Prompt.Rendering?(v43, v12, &demangling cache variable for type metadata for TokenStream<String>);
    outlined init with copy of Prompt.Rendering?(v15, v18, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    uint64_t v21 = type metadata accessor for GenerativeFunctionInstrumenter();
    uint64_t v37 = *(void *)(v21 - 8);
    uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16);
    v31(v19, v17, v21);
    *(double *)(v20 + v39) = v2;
    int v32 = *(int *)(v9 + 48);
    uint64_t v22 = v45 + *(int *)(v13 + 48);
    uint64_t v35 = v22;
    uint64_t v23 = v45 + *(int *)(v13 + 64);
    outlined init with copy of Prompt.Rendering?(v43, v45, &demangling cache variable for type metadata for TokenStream<String>);
    outlined init with copy of Prompt.Rendering?(v34, v22, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    v31(v23, v17, v21);
    *(double *)(v45 + v32) = v2;
    uint64_t v33 = *(int *)(v9 + 48);
    char v24 = v38 + *(int *)(v13 + 48);
    long long v25 = v38 + *(int *)(v13 + 64);
    outlined init with copy of Prompt.Rendering?(v43, v38, &demangling cache variable for type metadata for TokenStream<String>);
    outlined init with copy of Prompt.Rendering?(v34, v24, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    v31(v25, v17, v21);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v43, &demangling cache variable for type metadata for (result: (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter), duration: Double));
    *(double *)(v38 + v33) = v2;
    outlined init with take of Locale?(v36, v40, &demangling cache variable for type metadata for TokenStream<String>);
    uint64_t v26 = (int *)type metadata accessor for TokenGeneratorCompletionResponseStringStream(0);
    outlined init with take of Locale?(v35, v40 + v26[5], &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v40 + v26[6], v25, v21);
    uint64_t v27 = v40 + v26[7];
    *(double *)uint64_t v27 = v11;
    *(unsigned char *)(v27 + 8) = v30;
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v24, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v38, &demangling cache variable for type metadata for TokenStream<String>);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v28(v23, v21);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v45, &demangling cache variable for type metadata for TokenStream<String>);
    v28(v41, v21);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v42, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v10();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  uint64_t v1 = *(void *)(v0 + 1016);
  outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 896), *(void *)(v0 + 976), &demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter));
  uint64_t v2 = mach_absolute_time();
  uint64_t v3 = v2 - v1;
  if (v2 < v1) {
    __break(1u);
  }
  *(_DWORD *)(v0 + 148) = 0;
  uint64_t v4 = *(void *)(v0 + 896);
  *(_DWORD *)(v0 + 152) = 0;
  mach_timebase_info((mach_timebase_info_t)(v0 + 148));
  LODWORD(v5) = *(_DWORD *)(v0 + 148);
  LODWORD(v6) = *(_DWORD *)(v0 + 152);
  uint64_t v7 = (double)v3 * (double)v5 / ((double)v6 * 1000000000.0);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v4, &demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter));
  uint64_t v8 = *(void *)(v0 + 1032);
  uint64_t v9 = *(void *)(v0 + 976);
  unint64_t v10 = *(void *)(v0 + 936);
  unint64_t v11 = *(void *)(v0 + 920);
  uint64_t v12 = *(void *)(v0 + 904);
  uint64_t v13 = *(void *)(v0 + 864);
  uint64_t v14 = *(void *)(v0 + 856);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v14);
  uint64_t v15 = v10;
  swift_release();
  *(double *)(v9 + *(int *)(v10 + 48)) = v7;
  GenerativeConfigurationProtocol.samplingParameters.getter(v13, v0 + 568);
  if (v8)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 976), &demangling cache variable for type metadata for (result: (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter), duration: Double));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    outlined init with take of Locale?(v0 + 568, v0 + 432, &demangling cache variable for type metadata for SamplingParameters?);
    outlined init with take of Locale?(v0 + 432, v0 + 704, &demangling cache variable for type metadata for SamplingParameters?);
    uint64_t v17 = 0.0;
    if (_s15TokenGeneration26SamplingParametersEnvelopeVSgWOg(v0 + 704) == 1
      || (outlined release of SamplingParametersEnvelope(v0 + 432), (*(unsigned char *)(v0 + 816) & 1) != 0))
    {
      uint64_t v37 = 1;
    }
    else
    {
      uint64_t v37 = 0;
      uint64_t v17 = *(double *)(v0 + 808) - v7;
    }
    char v51 = *(void *)(v0 + 976);
    uint64_t v18 = *(void *)(v0 + 960);
    char v52 = *(void *)(v0 + 952);
    uint64_t v19 = *(void *)(v0 + 888);
    char v48 = *(void *)(v0 + 840);
    uint64_t v20 = *(int *)(v19 + 48);
    uint64_t v21 = v51 + v20;
    char v42 = v51 + v20;
    uint64_t v22 = *(int *)(v19 + 64);
    uint64_t v23 = v51 + v22;
    char v46 = *(void *)(v0 + 944);
    char v47 = *(int *)(v15 + 48);
    char v24 = v18 + v20;
    long long v25 = v18 + v22;
    char v49 = v18 + v22;
    char v50 = v18 + v20;
    uint64_t v26 = v18;
    char v44 = v18;
    outlined init with copy of Prompt.Rendering?(v51, v18, &demangling cache variable for type metadata for TokenStream<String>);
    outlined init with copy of Prompt.Rendering?(v21, v24, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    uint64_t v38 = type metadata accessor for GenerativeFunctionInstrumenter();
    uint64_t v39 = v23;
    char v45 = *(void *)(v38 - 8);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16);
    uint64_t v28 = v23;
    v27(v25, v23, v38);
    *(double *)(v26 + v47) = v7;
    uint64_t v40 = *(int *)(v15 + 48);
    uint64_t v29 = v52 + *(int *)(v19 + 48);
    uint64_t v43 = v29;
    uint64_t v30 = v52 + *(int *)(v19 + 64);
    outlined init with copy of Prompt.Rendering?(v51, v52, &demangling cache variable for type metadata for TokenStream<String>);
    outlined init with copy of Prompt.Rendering?(v42, v29, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    v27(v30, v28, v38);
    *(double *)(v52 + v40) = v7;
    uint64_t v41 = *(int *)(v15 + 48);
    uint64_t v31 = v46 + *(int *)(v19 + 48);
    int v32 = v46 + *(int *)(v19 + 64);
    outlined init with copy of Prompt.Rendering?(v51, v46, &demangling cache variable for type metadata for TokenStream<String>);
    outlined init with copy of Prompt.Rendering?(v42, v31, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    v27(v32, v39, v38);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v51, &demangling cache variable for type metadata for (result: (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter), duration: Double));
    *(double *)(v46 + v41) = v7;
    outlined init with take of Locale?(v44, v48, &demangling cache variable for type metadata for TokenStream<String>);
    uint64_t v33 = (int *)type metadata accessor for TokenGeneratorCompletionResponseStringStream(0);
    outlined init with take of Locale?(v43, v48 + v33[5], &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32))(v48 + v33[6], v32, v38);
    uint64_t v34 = v48 + v33[7];
    *(double *)uint64_t v34 = v17;
    *(unsigned char *)(v34 + 8) = v37;
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v31, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v46, &demangling cache variable for type metadata for TokenStream<String>);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v35(v30, v38);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v52, &demangling cache variable for type metadata for TokenStream<String>);
    v35(v49, v38);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v50, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v16();
}

{
  uint64_t v1;

  return TokenGenerator._streamResponse<A>(configuration:)();
}

{
  uint64_t v1;

  return TokenGenerator._streamResponse<A>(configuration:)();
}

uint64_t TokenGeneratorResponseStringStreamAsyncSequence.collect()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v3[5] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenGeneratorResponseStringStreamAsyncSequence.collect(), 0, 0);
}

{
  uint64_t v2;
  void *v5;
  uint64_t v7;

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = TokenGeneratorResponseStringStreamAsyncSequence.collect();
  return TokenGeneratorResponseStringStreamAsyncSequence.collect()(a1, a2);
}

uint64_t TokenGeneratorResponseStringStreamAsyncSequence.collect()()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  (*(void (**)(uint64_t, uint64_t))(v3 + 40))(v4, v3);
  uint64_t v5 = type metadata accessor for GenerativeFunctionInstrumenter();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v1, 0, 1, v5);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[6] = v6;
  v6[2] = v4;
  v6[3] = v3;
  v6[4] = v2;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[7] = v7;
  *uint64_t v7 = v0;
  v7[1] = TokenGeneratorResponseStringStreamAsyncSequence.collect();
  uint64_t v8 = v0[5];
  return specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(v8, (int *)&async function pointer to partial apply for closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect());
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TokenGeneratorResponseStringStreamAsyncSequence.collect()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v4;
  uint64_t v9 = *v4;
  *(void *)(*v4 + 64) = v3;
  swift_task_dealloc();
  uint64_t v10 = *(void *)(v8 + 40);
  if (v3)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v10, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    swift_task_dealloc();
    return MEMORY[0x270FA2498](TokenGeneratorResponseStringStreamAsyncSequence.collect(), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v10, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    swift_task_dealloc();
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
    return v11(a1, a2, a3);
  }
}

{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  uint64_t v13 = *v4;
  uint64_t v8 = swift_task_dealloc();
  unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 8);
  if (!v3)
  {
    uint64_t v8 = a1;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
  }
  return v11(v8, v9, v10);
}

uint64_t protocol witness for CompletionLanguageModelProviding._complete<A>(configuration:) in conformance TokenGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return TokenGenerator._complete<A>(configuration:)(a1, a2, a3, a4);
}

uint64_t TokenGeneratorCompletionResponse.promptCompletion.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of PromptCompletion(v1, a1, type metadata accessor for PromptCompletion);
}

uint64_t TokenGenerator._oneShotCompletion<A>(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenStream<String>);
  v4[3] = swift_task_alloc();
  v4[4] = type metadata accessor for TokenGeneratorResponsePromptCompletionStream(0);
  v4[5] = swift_task_alloc();
  v4[6] = type metadata accessor for TokenGeneratorCompletionResponseStringStream(0);
  uint64_t v8 = swift_task_alloc();
  v4[7] = v8;
  type metadata accessor for PromptCompletion(0);
  v4[8] = swift_task_alloc();
  uint64_t v9 = (void *)swift_task_alloc();
  v4[9] = v9;
  *uint64_t v9 = v4;
  v9[1] = TokenGenerator._oneShotCompletion<A>(configuration:);
  return TokenGenerator._streamCompletion<A>(configuration:)(v8, a2, a3, a4);
}

uint64_t TokenGenerator._oneShotCompletion<A>(configuration:)()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = TokenGenerator._oneShotCompletion<A>(configuration:);
  }
  else {
    uint64_t v2 = TokenGenerator._oneShotCompletion<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;

  uint64_t v2 = (int *)v0[6];
  uint64_t v1 = v0[7];
  uint64_t v4 = (int *)v0[4];
  uint64_t v3 = v0[5];
  uint64_t v5 = v0[3];
  outlined init with copy of Prompt.Rendering?(v1, v5, &demangling cache variable for type metadata for TokenStream<String>);
  outlined init with take of PromptCompletionStream(v5, v3, type metadata accessor for PromptCompletionStream);
  outlined init with copy of Prompt.Rendering?(v1 + v2[5], v3 + v4[5], &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  uint64_t v6 = v3 + v4[6];
  uint64_t v7 = v1 + v2[6];
  uint64_t v8 = type metadata accessor for GenerativeFunctionInstrumenter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  uint64_t v9 = v1 + v2[7];
  uint64_t v10 = *(void *)v9;
  LOBYTE(v9) = *(unsigned char *)(v9 + 8);
  uint64_t v11 = v3 + v4[7];
  *(void *)uint64_t v11 = v10;
  *(unsigned char *)(v11 + 8) = v9;
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v1, type metadata accessor for TokenGeneratorCompletionResponseStringStream);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[11] = v12;
  *uint64_t v12 = v0;
  v12[1] = TokenGenerator._oneShotCompletion<A>(configuration:);
  uint64_t v13 = v0[8];
  return TokenGeneratorResponsePromptCompletionStream.collect()(v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v2, type metadata accessor for TokenGeneratorResponsePromptCompletionStream);
  if (v0) {
    uint64_t v3 = TokenGenerator._oneShotCompletion<A>(configuration:);
  }
  else {
    uint64_t v3 = TokenGenerator._oneShotCompletion<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined init with take of PromptCompletionStream(v0[8], v0[2], type metadata accessor for PromptCompletion);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TokenGeneratorResponseStringStreamAsyncSequence.promptCompletionStream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenStream<String>);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  outlined init with take of PromptCompletionStream((uint64_t)v8, a3, type metadata accessor for PromptCompletionStream);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(a2 + 32);
  uint64_t v10 = type metadata accessor for TokenGeneratorResponsePromptCompletionStream(0);
  v9(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  uint64_t v12 = a3 + *(int *)(v10 + 28);
  *(void *)uint64_t v12 = result;
  *(unsigned char *)(v12 + 8) = v13 & 1;
  return result;
}

uint64_t TokenGeneratorResponsePromptCompletionStream.collect()(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = type metadata accessor for PromptCompletion(0);
  v2[5] = swift_task_alloc();
  v2[6] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (result: PromptCompletion, duration: Double));
  v2[7] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TokenGeneratorResponsePromptCompletionStream(0);
  v2[8] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[9] = v4;
  v2[10] = *(void *)(v4 + 64);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenGeneratorResponsePromptCompletionStream.collect(), 0, 0);
}

uint64_t TokenGeneratorResponsePromptCompletionStream.collect()()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[3];
  uint64_t v5 = v4 + *(int *)(v0[8] + 28);
  uint64_t v6 = *(void *)v5;
  char v7 = *(unsigned char *)(v5 + 8);
  outlined init with copy of PromptCompletion(v4, v2, type metadata accessor for TokenGeneratorResponsePromptCompletionStream);
  outlined init with copy of PromptCompletion(v2, v1, type metadata accessor for TokenGeneratorResponsePromptCompletionStream);
  unint64_t v8 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v9 = swift_allocObject();
  v0[13] = v9;
  outlined init with take of PromptCompletionStream(v2, v9 + v8, type metadata accessor for TokenGeneratorResponsePromptCompletionStream);
  if (v7)
  {
    mach_absolute_time();
    uint64_t v10 = (void *)swift_task_alloc();
    v0[17] = v10;
    *uint64_t v10 = v0;
    v10[1] = TokenGeneratorResponsePromptCompletionStream.collect();
    uint64_t v11 = v0[11];
    uint64_t v12 = v0[5];
    return closure #1 in TokenGeneratorResponsePromptCompletionStream.collect()(v12, v11);
  }
  else
  {
    uint64_t v14 = (void *)swift_task_alloc();
    v0[14] = v14;
    _OWORD v14[2] = &async function pointer to partial apply for closure #1 in TokenGeneratorResponsePromptCompletionStream.collect();
    v14[3] = v9;
    v14[4] = v6;
    uint64_t v15 = (void *)swift_task_alloc();
    v0[15] = v15;
    *uint64_t v15 = v0;
    v15[1] = TokenGeneratorResponsePromptCompletionStream.collect();
    uint64_t v16 = v0[7];
    return MEMORY[0x270FA22B8](v16);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = TokenGeneratorResponsePromptCompletionStream.collect();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = TokenGeneratorResponsePromptCompletionStream.collect();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = TokenGeneratorResponsePromptCompletionStream.collect();
  }
  else {
    uint64_t v2 = TokenGeneratorResponsePromptCompletionStream.collect();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined init with take of PromptCompletionStream(v0[7], v0[2], type metadata accessor for PromptCompletion);
  swift_release();
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v0[11], type metadata accessor for TokenGeneratorResponsePromptCompletionStream);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  swift_task_dealloc();
  uint64_t v1 = *(void *)(v0 + 88);
  swift_release();
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v1, type metadata accessor for TokenGeneratorResponsePromptCompletionStream);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 40);
  outlined init with copy of PromptCompletion(v1, *(void *)(v0 + 16), type metadata accessor for PromptCompletion);
  mach_absolute_time();
  *(_DWORD *)(v0 + 156) = 0;
  *(_DWORD *)(v0 + 152) = 0;
  mach_timebase_info((mach_timebase_info_t)(v0 + 152));
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v1, type metadata accessor for PromptCompletion);
  swift_release();
  outlined destroy of TokenGeneratorCompletionResponseStringStream(*(void *)(v0 + 88), type metadata accessor for TokenGeneratorResponsePromptCompletionStream);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 88);
  swift_release();
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v1, type metadata accessor for TokenGeneratorResponsePromptCompletionStream);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t protocol witness for CompletionLanguageModelProvidingOneShot._oneShotCompletion<A>(configuration:) in conformance TokenGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return TokenGenerator._oneShotCompletion<A>(configuration:)(a1, a2, a3, a4);
}

uint64_t ModelBundle.modelBundleIdentifier(instrumenter:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  uint64_t v4 = *(void *)(v2 + 8);
  *(void *)(v3 + 32) = *(void *)v2;
  *(void *)(v3 + 40) = v4;
  *(unsigned char *)(v3 + 72) = *(unsigned char *)(v2 + 16);
  return MEMORY[0x270FA2498](ModelBundle.modelBundleIdentifier(instrumenter:), 0, 0);
}

uint64_t ModelBundle.modelBundleIdentifier(instrumenter:)()
{
  char v1 = *(unsigned char *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 48) = v5;
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v2;
  *(unsigned char *)(v5 + 32) = v1;
  *(void *)(v5 + 40) = v4;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v6;
  *uint64_t v6 = v0;
  v6[1] = ModelBundle.modelBundleIdentifier(instrumenter:);
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = *(void *)(v0 + 24);
  return specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(v7, v8, (int *)&async function pointer to partial apply for closure #1 in ModelBundle.modelBundleIdentifier(instrumenter:));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](ModelBundle.modelBundleIdentifier(instrumenter:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in ModelBundle.modelBundleIdentifier(instrumenter:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(unsigned char *)(v5 + 72) = a4;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = a5;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  return MEMORY[0x270FA2498](closure #1 in ModelBundle.modelBundleIdentifier(instrumenter:), 0, 0);
}

uint64_t closure #1 in ModelBundle.modelBundleIdentifier(instrumenter:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 72);
  if (v1 == 2)
  {
    type metadata accessor for CatalogClient();
    swift_allocObject();
    uint64_t v2 = CatalogClient.init()();
    *(void *)(v0 + 48) = v2;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v3;
    *uint64_t v3 = v0;
    v3[1] = closure #1 in ModelBundle.modelBundleIdentifier(instrumenter:);
    uint64_t v5 = *(void *)(v0 + 32);
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v6 = *(void *)(v0 + 16);
    uint64_t v7 = *(void *)(v0 + 24);
    return specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(v6, v4, v2, v7, v5);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 16);
    if (v1)
    {
      type metadata accessor for AssetBackedLLMBundle();
      lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type AssetBackedLLMBundle and conformance AssetBackedLLMBundle, MEMORY[0x263F560D0]);
      swift_bridgeObjectRetain();
      ResourceBundleIdentifier.init(stringLiteral:)();
      uint64_t v10 = (unsigned int *)MEMORY[0x263F41598];
    }
    else
    {
      type metadata accessor for LLMBundle();
      lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type LLMBundle and conformance LLMBundle, MEMORY[0x263F561C0]);
      swift_bridgeObjectRetain();
      ResourceBundleIdentifier.init(stringLiteral:)();
      uint64_t v10 = (unsigned int *)MEMORY[0x263F41590];
    }
    uint64_t v11 = *v10;
    uint64_t v12 = type metadata accessor for ModelBundleIdentifier();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(v9, v11, v12);
    char v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](closure #1 in ModelBundle.modelBundleIdentifier(instrumenter:), 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  int v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in CatalogClient.modelBundleIdentifier(for:instrumenter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[19] = a3;
  v4[20] = a4;
  v4[17] = a1;
  v4[18] = a2;
  uint64_t v5 = type metadata accessor for GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType();
  v4[21] = v5;
  v4[22] = *(void *)(v5 - 8);
  v4[23] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  v4[24] = v6;
  v4[25] = *(void *)(v6 - 8);
  v4[26] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetBackedLLMBundle?);
  v4[27] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for AssetBackedLLMBundle();
  v4[28] = v7;
  v4[29] = *(void *)(v7 - 8);
  v4[30] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LLMBundle?);
  v4[31] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for LLMBundle();
  v4[32] = v8;
  v4[33] = *(void *)(v8 - 8);
  v4[34] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in CatalogClient.modelBundleIdentifier(for:instrumenter:), 0, 0);
}

uint64_t closure #1 in CatalogClient.modelBundleIdentifier(for:instrumenter:)()
{
  dispatch thunk of CatalogClient.resourceBundle(for:)();
  uint64_t v1 = v0[33];
  outlined init with copy of Prompt.Rendering?((uint64_t)(v0 + 2), (uint64_t)(v0 + 7), &demangling cache variable for type metadata for ResourceBundle?);
  uint64_t v2 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56);
  if (v0[10])
  {
    uint64_t v3 = v0[32];
    uint64_t v4 = v0[33];
    uint64_t v5 = v0[31];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResourceBundle);
    int v6 = swift_dynamicCast();
    (*v2)(v5, v6 ^ 1u, 1, v3);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) != 1)
    {
      uint64_t v7 = v0 + 33;
      uint64_t v8 = v0 + 32;
      uint64_t v9 = v0 + 34;
      uint64_t v10 = (*(uint64_t (**)(void, void, void))(v0[33] + 32))(v0[34], v0[31], v0[32]);
      MEMORY[0x2611FF1A0](v10);
      uint64_t v11 = (unsigned int *)MEMORY[0x263F41590];
LABEL_8:
      uint64_t v21 = v0[17];
      (*(void (**)(void, void))(*v7 + 8))(*v9, *v8);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for ResourceBundle?);
      uint64_t v22 = *v11;
      uint64_t v23 = type metadata accessor for ModelBundleIdentifier();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104))(v21, v22, v23);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      char v24 = (uint64_t (*)(void))v0[1];
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v13 = v0[31];
    uint64_t v12 = v0[32];
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)(v0 + 7), &demangling cache variable for type metadata for ResourceBundle?);
    (*v2)(v13, 1, 1, v12);
  }
  uint64_t v7 = v0 + 29;
  uint64_t v14 = v0[29];
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[31], &demangling cache variable for type metadata for LLMBundle?);
  outlined init with copy of Prompt.Rendering?((uint64_t)(v0 + 2), (uint64_t)(v0 + 12), &demangling cache variable for type metadata for ResourceBundle?);
  uint64_t v15 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (v0[15])
  {
    uint64_t v16 = v0[28];
    uint64_t v17 = v0[29];
    uint64_t v8 = v0 + 28;
    uint64_t v18 = v0[27];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResourceBundle);
    int v19 = swift_dynamicCast();
    (*v15)(v18, v19 ^ 1u, 1, v16);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v18, 1, v16) != 1)
    {
      uint64_t v9 = v0 + 30;
      uint64_t v20 = (*(uint64_t (**)(void, void, void))(v0[29] + 32))(v0[30], v0[27], v0[28]);
      MEMORY[0x2611FF170](v20);
      uint64_t v11 = (unsigned int *)MEMORY[0x263F41598];
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v26 = v0[27];
    uint64_t v25 = v0[28];
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)(v0 + 12), &demangling cache variable for type metadata for ResourceBundle?);
    (*v15)(v26, 1, 1, v25);
  }
  uint64_t v27 = v0[26];
  uint64_t v28 = v0[24];
  uint64_t v29 = v0[25];
  uint64_t v31 = v0[22];
  uint64_t v30 = v0[23];
  uint64_t v32 = v0[21];
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[27], &demangling cache variable for type metadata for AssetBackedLLMBundle?);
  swift_bridgeObjectRetain();
  GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType.UnknownModelBundleIdentifierErrorInfo.init(modelBundleIdentifier:)();
  (*(void (**)(uint64_t, void, uint64_t))(v31 + 104))(v30, *MEMORY[0x263F40B38], v32);
  static GenerativeError.RuntimeError.ErrorType.configurationError(type:)();
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
  type metadata accessor for GenerativeError();
  lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
  swift_allocError();
  static GenerativeError.runtimeError(type:)();
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
  swift_willThrow();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for ResourceBundle?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v24 = (uint64_t (*)(void))v0[1];
LABEL_11:
  return v24();
}

uint64_t TokenGenerator.modelBundleIdentifier(generativeFunctionInstrumenter:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenGenerator.modelBundleIdentifier(generativeFunctionInstrumenter:), 0, 0);
}

uint64_t TokenGenerator.modelBundleIdentifier(generativeFunctionInstrumenter:)()
{
  uint64_t v1 = v0[4];
  if (*(void *)(v1 + 24) && (uint64_t v2 = *(void *)(v1 + 32), *(void *)(v2 + 16) == 1))
  {
    uint64_t v3 = v0[3];
    uint64_t v5 = *(void *)(v2 + 32);
    uint64_t v4 = *(void *)(v2 + 40);
    v0[11] = v4;
    char v6 = *(unsigned char *)(v2 + 48);
    swift_bridgeObjectRetain();
    uint64_t v7 = swift_task_alloc();
    v0[12] = v7;
    *(void *)(v7 + 16) = v5;
    *(void *)(v7 + 24) = v4;
    *(unsigned char *)(v7 + 32) = v6;
    *(void *)(v7 + 40) = v3;
    uint64_t v8 = (void *)swift_task_alloc();
    v0[13] = v8;
    *uint64_t v8 = v0;
    v8[1] = TokenGenerator.modelBundleIdentifier(generativeFunctionInstrumenter:);
    uint64_t v9 = v0[2];
    uint64_t v10 = v0[3];
    return specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(v9, v10, (int *)&closure #1 in ModelBundle.modelBundleIdentifier(instrumenter:)partial apply);
  }
  else
  {
    uint64_t v13 = v0[9];
    uint64_t v12 = v0[10];
    uint64_t v15 = v0[7];
    uint64_t v14 = v0[8];
    uint64_t v16 = v0[5];
    uint64_t v17 = v0[6];
    GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType.UnspecifiedModelBundleIdentifierErrorInfo.init()();
    (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))(v15, *MEMORY[0x263F40B40], v16);
    static GenerativeError.RuntimeError.ErrorType.configurationError(type:)();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    type metadata accessor for GenerativeError();
    lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
    swift_allocError();
    static GenerativeError.runtimeError(type:)();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](TokenGenerator.modelBundleIdentifier(generativeFunctionInstrumenter:), 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TokenGenerator.responseSanitizerConfiguration(generativeFunctionInstrumenter:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelBundleIdentifier?);
  v3[5] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v3[6] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ModelBundleIdentifier();
  v3[7] = v5;
  v3[8] = *(void *)(v5 - 8);
  uint64_t v6 = swift_task_alloc();
  v3[9] = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[10] = v7;
  *uint64_t v7 = v3;
  v7[1] = TokenGenerator.responseSanitizerConfiguration(generativeFunctionInstrumenter:);
  return TokenGenerator.modelBundleIdentifier(generativeFunctionInstrumenter:)(v6, a2);
}

uint64_t TokenGenerator.responseSanitizerConfiguration(generativeFunctionInstrumenter:)()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = TokenGenerator.responseSanitizerConfiguration(generativeFunctionInstrumenter:);
  }
  else {
    uint64_t v2 = TokenGenerator.responseSanitizerConfiguration(generativeFunctionInstrumenter:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v13;

  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  outlined init with copy of Prompt.Rendering?(v0[3], v0[6], &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v4, v1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v4, 0, 1, v3);
  if (!*(void *)(v5 + 24))
  {
    uint64_t v8 = objc_msgSend(self, sel_processInfo);
    objc_msgSend(v8, sel_processIdentifier);

    goto LABEL_6;
  }
  uint64_t v7 = *(void *)(v5 + 80);
  if (v7 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v7 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
LABEL_6:
  uint64_t v10 = v0[8];
  uint64_t v9 = v0[9];
  uint64_t v11 = v0[7];
  StringResponseSanitizerRunnerConfiguration.init(generativeFunctionInstrumenter:modelBundleIdentifier:useCaseIdentifier:onBehalfOfProcessId:)();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TokenGenerator.renderedPromptSanitizerConfiguration(generativeFunctionInstrumenter:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelBundleIdentifier?);
  v3[5] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v3[6] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ModelBundleIdentifier();
  v3[7] = v5;
  v3[8] = *(void *)(v5 - 8);
  uint64_t v6 = swift_task_alloc();
  v3[9] = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[10] = v7;
  *uint64_t v7 = v3;
  v7[1] = TokenGenerator.renderedPromptSanitizerConfiguration(generativeFunctionInstrumenter:);
  return TokenGenerator.modelBundleIdentifier(generativeFunctionInstrumenter:)(v6, a2);
}

uint64_t TokenGenerator.renderedPromptSanitizerConfiguration(generativeFunctionInstrumenter:)()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = TokenGenerator.renderedPromptSanitizerConfiguration(generativeFunctionInstrumenter:);
  }
  else {
    uint64_t v2 = TokenGenerator.renderedPromptSanitizerConfiguration(generativeFunctionInstrumenter:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v13;

  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  outlined init with copy of Prompt.Rendering?(v0[3], v0[6], &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v4, v1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v4, 0, 1, v3);
  if (!*(void *)(v5 + 24))
  {
    uint64_t v8 = objc_msgSend(self, sel_processInfo);
    objc_msgSend(v8, sel_processIdentifier);

    goto LABEL_6;
  }
  uint64_t v7 = *(void *)(v5 + 80);
  if (v7 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v7 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
LABEL_6:
  uint64_t v10 = v0[8];
  uint64_t v9 = v0[9];
  uint64_t v11 = v0[7];
  StringRenderedPromptSanitizerRunnerConfiguration.init(generativeFunctionInstrumenter:modelBundleIdentifier:useCaseIdentifier:onBehalfOfProcessId:)();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t TokenGeneratorCompletionResponseStringStream._stringResponseSanitizerWithConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  return TokenGeneratorCompletionResponseStringStream._stringResponseSanitizerWithConfiguration.getter(type metadata accessor for TokenGeneratorCompletionResponseStringStream, a1);
}

uint64_t TokenGeneratorCompletionResponseStringStream._generativeFunctionInstrumenter.getter@<X0>(uint64_t a1@<X8>)
{
  return TokenGeneratorCompletionResponseStringStream._generativeFunctionInstrumenter.getter(type metadata accessor for TokenGeneratorCompletionResponseStringStream, a1);
}

uint64_t TokenGeneratorCompletionResponseStringStream.timeout.getter()
{
  return TokenGeneratorCompletionResponseStringStream.timeout.getter(type metadata accessor for TokenGeneratorCompletionResponseStringStream);
}

uint64_t protocol witness for TokenGeneratorResponseStringStreamAsyncSequence.collect() in conformance TokenGeneratorCompletionResponseStringStream(uint64_t a1)
{
  v2[2] = v1;
  v2[3] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v2[4] = swift_task_alloc();
  return MEMORY[0x270FA2498](protocol witness for TokenGeneratorResponseStringStreamAsyncSequence.collect() in conformance TokenGeneratorCompletionResponseStringStream, 0, 0);
}

uint64_t protocol witness for TokenGeneratorResponseStringStreamAsyncSequence.collect() in conformance TokenGeneratorCompletionResponseStringStream()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[2];
  uint64_t v3 = v2 + *(int *)(v0[3] + 24);
  uint64_t v4 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v3, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v1, 0, 1, v4);
  uint64_t v6 = swift_task_alloc();
  v0[5] = v6;
  *(void *)(v6 + 16) = v2;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[6] = v7;
  *uint64_t v7 = v0;
  v7[1] = protocol witness for TokenGeneratorResponseStringStreamAsyncSequence.collect() in conformance TokenGeneratorCompletionResponseStringStream;
  uint64_t v8 = v0[4];
  return specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(v8, (int *)&closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()specialized partial apply);
}

uint64_t protocol witness for TokenGeneratorResponseStringStreamAsyncSequence.collect() in conformance TokenGeneratorCompletionResponseStringStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v4;
  uint64_t v9 = *v4;
  *(void *)(*v4 + 56) = v3;
  swift_task_dealloc();
  uint64_t v10 = *(void *)(v8 + 32);
  if (v3)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v10, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    swift_task_dealloc();
    return MEMORY[0x270FA2498](protocol witness for TokenGeneratorResponseStringStreamAsyncSequence.collect() in conformance TokenGeneratorCompletionResponseStringStream, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v10, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
    return v11(a1, a2, a3);
  }
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance TokenGeneratorCompletionResponseStringStream@<X0>(uint64_t a1@<X8>)
{
  specialized TokenGeneratorResponseStringStreamAsyncSequence.makeAsyncIterator()(type metadata accessor for TokenGeneratorCompletionResponseStringStream, a1);
  return outlined destroy of TokenGeneratorCompletionResponseStringStream(v1, type metadata accessor for TokenGeneratorCompletionResponseStringStream);
}

uint64_t specialized TokenGeneratorResponseStringStreamAsyncSequence.makeAsyncIterator()@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v22 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v4 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenStream<String>);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for StringResponseSanitizerWithConfiguration();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v22 - v18;
  uint64_t v20 = (int *)a1(0);
  outlined init with copy of Prompt.Rendering?(v2 + v20[5], (uint64_t)v12, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v12, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    outlined init with copy of Prompt.Rendering?(v2, (uint64_t)v9, &demangling cache variable for type metadata for TokenStream<String>);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2 + v20[6], v22);
    return specialized TokenGeneratorResponseStringStreamAsyncIterator.init<A>(tokenStream:generativeFunctionInstrumenter:timeout:)((uint64_t)v9, (uint64_t)v6, *(void *)(v2 + v20[7]), *(unsigned __int8 *)(v2 + v20[7] + 8), v23);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v19, v12, v13);
    outlined init with copy of Prompt.Rendering?(v2, (uint64_t)v9, &demangling cache variable for type metadata for TokenStream<String>);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2 + v20[6], v22);
    specialized TokenGeneratorResponseStringStreamAsyncIterator.init<A>(tokenStream:stringResponseSanitizerWithConfiguration:generativeFunctionInstrumenter:timeout:)((uint64_t)v9, (uint64_t)v17, (uint64_t)v6, *(void *)(v2 + v20[7]), *(unsigned __int8 *)(v2 + v20[7] + 8), v23);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  }
}

uint64_t TokenGeneratorResponseStringStreamAsyncSequence.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v5 = type metadata accessor for GenerativeFunctionInstrumenter();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenStream<String>);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for StringResponseSanitizerWithConfiguration();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v26 - v19;
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v13, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
    (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
    return specialized TokenGeneratorResponseStringStreamAsyncIterator.init<A>(tokenStream:generativeFunctionInstrumenter:timeout:)((uint64_t)v10, (uint64_t)v7, v21, v22 & 1, v27);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v13, v14);
    (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v20, v14);
    (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
    specialized TokenGeneratorResponseStringStreamAsyncIterator.init<A>(tokenStream:stringResponseSanitizerWithConfiguration:generativeFunctionInstrumenter:timeout:)((uint64_t)v10, (uint64_t)v18, (uint64_t)v7, v24, v25 & 1, v27);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v20, v14);
  }
}

uint64_t TokenGeneratorCompletionResponseStringStream.stream.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of PromptCompletion(v1, a1, type metadata accessor for TokenGeneratorCompletionResponseStringStream);
}

uint64_t protocol witness for CompletionLanguageModelResponseStringStream.stream.getter in conformance TokenGeneratorCompletionResponseStringStream@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of PromptCompletion(v1, a1, type metadata accessor for TokenGeneratorCompletionResponseStringStream);
}

uint64_t closure #1 in TokenGenerator._streamCompletion<A>(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[111] = a6;
  v6[110] = a5;
  v6[109] = a4;
  v6[108] = a3;
  v6[107] = a2;
  v6[106] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Schema?);
  v6[112] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenStream<String>);
  v6[113] = swift_task_alloc();
  v6[114] = *(void *)(a5 - 8);
  v6[115] = swift_task_alloc();
  v6[116] = swift_task_alloc();
  type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel(0);
  v6[117] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithRunner?);
  v6[118] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for StringResponseSanitizerRunnerConfiguration();
  v6[119] = v8;
  v6[120] = *(void *)(v8 - 8);
  v6[121] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringRenderedPromptSanitizerWithRunner?);
  v6[122] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  v6[123] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v6[124] = swift_task_alloc();
  v6[125] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for StringRenderedPromptSanitizerRunnerConfiguration();
  v6[126] = v9;
  v6[127] = *(void *)(v9 - 8);
  v6[128] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ToolChoice?);
  v6[129] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  v6[130] = swift_task_alloc();
  v6[131] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Prompt();
  v6[132] = v10;
  v6[133] = *(void *)(v10 - 8);
  v6[134] = swift_task_alloc();
  v6[135] = swift_task_alloc();
  v6[136] = swift_task_alloc();
  v6[137] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for GenerativeFunctionInstrumenter();
  v6[138] = v11;
  v6[139] = *(void *)(v11 - 8);
  v6[140] = swift_task_alloc();
  v6[141] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in TokenGenerator._streamCompletion<A>(configuration:), 0, 0);
}

uint64_t closure #1 in TokenGenerator._streamCompletion<A>(configuration:)()
{
  if (*(void *)(v0[108] + 24)) {
    swift_bridgeObjectRetain();
  }
  uint64_t v1 = v0[141];
  uint64_t v2 = v0[139];
  uint64_t v12 = v0[138];
  uint64_t v3 = v0[125];
  uint64_t v4 = v0[111];
  uint64_t v5 = v0[110];
  GenerativeConfigurationProtocol.generateGenerativeFunctionInstrumenter(useCaseIdentifier:eventReporter:)();
  swift_bridgeObjectRelease();
  GenerativeFunctionInstrumenter.executionBegin()();
  GenerativeFunctionInstrumenter.promptConstructionBegin()();
  v0[142] = GenerativeConfigurationProtocol.documents.getter();
  v0[143] = GenerativeConfigurationProtocol.tools.getter();
  GenerativeConfigurationProtocol.toolChoice.getter(v5, v4);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[144] = v6;
  v0[145] = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v3, v1, v12);
  uint64_t v7 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56);
  v0[146] = v7;
  v0[147] = (v2 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v7(v3, 0, 1, v12);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[148] = v8;
  *uint64_t v8 = v0;
  v8[1] = closure #1 in TokenGenerator._streamCompletion<A>(configuration:);
  uint64_t v9 = v0[128];
  uint64_t v10 = v0[125];
  return TokenGenerator.renderedPromptSanitizerConfiguration(generativeFunctionInstrumenter:)(v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1192) = v0;
  swift_task_dealloc();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v2 + 1000), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = closure #1 in TokenGenerator._streamCompletion<A>(configuration:);
  }
  else
  {
    uint64_t v3 = closure #1 in TokenGenerator._streamCompletion<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  uint64_t v1 = (void *)v0[149];
  GenerativeConfigurationProtocol.stringRenderedPromptSanitizer.getter();
  if (v1)
  {
    uint64_t v2 = v0[128];
    uint64_t v3 = v0[127];
    uint64_t v4 = v0[126];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    uint64_t v5 = v0[141];
    uint64_t v6 = v0[139];
    uint64_t v7 = v0[138];
    uint64_t v8 = v0[129];
    uint64_t v9 = v0[106];
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter));
    uint64_t v11 = v9 + *(int *)(v10 + 48);
    uint64_t v12 = v9 + *(int *)(v10 + 64);
    specialized TokenStream.init(throwing:)(v1, v9);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v8, &demangling cache variable for type metadata for ToolChoice?);
    uint64_t v13 = type metadata accessor for StringResponseSanitizerWithConfiguration();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v11, 1, 1, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v12, v5, v7);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
  else
  {
    uint64_t v16 = v0[128];
    uint64_t v17 = v0[123];
    uint64_t v18 = v0[122];
    uint64_t v19 = swift_task_alloc();
    *(void *)(v19 + 16) = v16;
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF16GenerativeModels39StringRenderedPromptSanitizerWithRunnerV_s5NeverO0cD10Foundation0efghI13ConfigurationVTg5Tm((void (*)(char *))partial apply for closure #1 in closure #1 in TokenGenerator._oneShotResponse<A, B>(type:configuration:), v19, MEMORY[0x263F41480], &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithRunner?, MEMORY[0x263F41610], v17);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v18, &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithRunner?);
    swift_task_dealloc();
    uint64_t v20 = (void *)swift_task_alloc();
    v0[150] = v20;
    *uint64_t v20 = v0;
    v20[1] = closure #1 in TokenGenerator._streamCompletion<A>(configuration:);
    uint64_t v21 = v0[135];
    char v22 = v0[111];
    uint64_t v23 = v0[110];
    return GenerativeConfigurationProtocol<>.renderToTokenGenerationPrompt()(v21, v23, v22);
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v2 = (void *)*v1;
  v2[151] = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x270FA2498](closure #1 in TokenGenerator._streamCompletion<A>(configuration:), 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[152] = v3;
    *uint64_t v3 = v2;
    v3[1] = closure #1 in TokenGenerator._streamCompletion<A>(configuration:);
    uint64_t v4 = v2[136];
    uint64_t v5 = v2[135];
    uint64_t v6 = v2[123];
    return static TokenGenerator.scrubIfNeeded(inputPrompt:stringRenderedPromptSanitizerWithConfiguration:)(v4, v5, v6);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v9;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1224) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2[133] + 8))(v2[135], v2[132]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = closure #1 in TokenGenerator._streamCompletion<A>(configuration:);
  }
  else
  {
    uint64_t v4 = v2[135];
    uint64_t v5 = v2[133];
    uint64_t v6 = v2[132];
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v2[154] = v7;
    v2[155] = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v7(v4, v6);
    uint64_t v3 = closure #1 in TokenGenerator._streamCompletion<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  void *v0;
  void (*v1)(uint64_t, void, uint64_t, uint64_t);
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[146];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[144];
  uint64_t v3 = v0[141];
  uint64_t v4 = v0[138];
  uint64_t v5 = v0[124];
  (*(void (**)(void, void, void))(v0[133] + 32))(v0[137], v0[136], v0[132]);
  v2(v5, v3, v4);
  v1(v5, 0, 1, v4);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[156] = v6;
  *uint64_t v6 = v0;
  v6[1] = closure #1 in TokenGenerator._streamCompletion<A>(configuration:);
  uint64_t v7 = v0[124];
  uint64_t v8 = v0[121];
  return TokenGenerator.responseSanitizerConfiguration(generativeFunctionInstrumenter:)(v8, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1256) = v0;
  swift_task_dealloc();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v2 + 992), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = closure #1 in TokenGenerator._streamCompletion<A>(configuration:);
  }
  else
  {
    uint64_t v3 = closure #1 in TokenGenerator._streamCompletion<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;

  uint64_t v1 = (void *)v0[157];
  GenerativeConfigurationProtocol.stringResponseSanitizer.getter();
  char v49 = v1;
  if (v1)
  {
    uint64_t v2 = v0[128];
    uint64_t v3 = v0[127];
    uint64_t v4 = v0[126];
    uint64_t v5 = v0[121];
    uint64_t v6 = v0[120];
    uint64_t v7 = v0[119];
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[123], &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    char v46 = v1;
    uint64_t v15 = v0[141];
    uint64_t v16 = v0[139];
    uint64_t v17 = v0[138];
    uint64_t v18 = v0[129];
    uint64_t v19 = v0[106];
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter));
    uint64_t v21 = v19 + *(int *)(v20 + 48);
    char v22 = v19 + *(int *)(v20 + 64);
    specialized TokenStream.init(throwing:)(v46, v19);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v18, &demangling cache variable for type metadata for ToolChoice?);
    uint64_t v23 = type metadata accessor for StringResponseSanitizerWithConfiguration();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v21, 1, 1, v23);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v22, v15, v17);
    if (!v49) {
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[131], &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    }
    (*(void (**)(void, void))(v0[133] + 8))(v0[137], v0[132]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(void))v0[1];
    return v24();
  }
  else
  {
    uint64_t v8 = v0[131];
    uint64_t v9 = v0[130];
    uint64_t v10 = v0[121];
    uint64_t v11 = v0[118];
    char v47 = v0[111];
    uint64_t v12 = v0[110];
    uint64_t v13 = swift_task_alloc();
    *(void *)(v13 + 16) = v10;
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF16GenerativeModels39StringRenderedPromptSanitizerWithRunnerV_s5NeverO0cD10Foundation0efghI13ConfigurationVTg5Tm((void (*)(char *))partial apply for closure #1 in closure #1 in TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:), v13, MEMORY[0x263F41478], &demangling cache variable for type metadata for StringResponseSanitizerWithRunner?, MEMORY[0x263F415F0], v9);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v11, &demangling cache variable for type metadata for StringResponseSanitizerWithRunner?);
    swift_task_dealloc();
    outlined init with take of Locale?(v9, v8, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    v0[158] = GenerativeConfigurationProtocol.grammar.getter(v12, v47);
    v0[159] = v14;
    v0[160] = GenerativeConfigurationProtocol.partialGrammar.getter(v0[110], v0[111]);
    v0[161] = v26;
    GenerativeConfigurationProtocol.samplingParameters.getter(v0[111], (uint64_t)(v0 + 36));
    uint64_t v27 = v0[133];
    uint64_t v43 = v0[132];
    char v44 = v0[134];
    uint64_t v28 = v0[128];
    uint64_t v29 = v0[127];
    uint64_t v30 = v0[126];
    uint64_t v31 = v0[121];
    uint64_t v32 = v0[120];
    uint64_t v33 = v0[119];
    char v48 = v0[116];
    char v50 = v0[137];
    uint64_t v34 = v0[114];
    char v45 = v0[110];
    char v42 = v0[107];
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[123], &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    outlined init with take of Locale?((uint64_t)(v0 + 36), (uint64_t)(v0 + 53), &demangling cache variable for type metadata for SamplingParameters?);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v44, v50, v43);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16);
    v0[162] = v35;
    v0[163] = (v34 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v35(v48, v42, v45);
    uint64_t v36 = (void *)swift_task_alloc();
    v0[164] = v36;
    *uint64_t v36 = v0;
    v36[1] = closure #1 in TokenGenerator._streamCompletion<A>(configuration:);
    uint64_t v37 = v0[134];
    uint64_t v38 = v0[117];
    uint64_t v39 = v0[116];
    uint64_t v40 = v0[111];
    uint64_t v41 = v0[110];
    return TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:completionConfiguration:)(v38, v37, v39, v41, v40);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1320) = v0;
  swift_task_dealloc();
  if (v0)
  {
    outlined release of SamplingParametersEnvelope(v2 + 424);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = closure #1 in TokenGenerator._streamCompletion<A>(configuration:);
  }
  else
  {
    uint64_t v3 = closure #1 in TokenGenerator._streamCompletion<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

uint64_t static TokenGenerator.scrubIfNeeded(inputPrompt:stringRenderedPromptSanitizerWithConfiguration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  v4[6] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for StringRenderedPromptSanitizerWithConfiguration();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](static TokenGenerator.scrubIfNeeded(inputPrompt:stringRenderedPromptSanitizerWithConfiguration:), 0, 0);
}

uint64_t static TokenGenerator.scrubIfNeeded(inputPrompt:stringRenderedPromptSanitizerWithConfiguration:)()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[6];
  outlined init with copy of Prompt.Rendering?(v0[4], v3, &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v4 = v0[2];
    uint64_t v5 = v0[3];
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[6], &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
    uint64_t v6 = type metadata accessor for Prompt();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v4, v5, v6);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  else
  {
    uint64_t v9 = v0[9];
    (*(void (**)(uint64_t, void, void))(v0[8] + 32))(v9, v0[6], v0[7]);
    uint64_t v10 = swift_task_alloc();
    v0[10] = v10;
    *(void *)(v10 + 16) = v9;
    uint64_t v11 = (void *)swift_task_alloc();
    v0[11] = v11;
    void *v11 = v0;
    v11[1] = static TokenGenerator.scrubIfNeeded(inputPrompt:stringRenderedPromptSanitizerWithConfiguration:);
    uint64_t v12 = v0[2];
    uint64_t v13 = v0[3];
    return static TokenGenerator.scrubPrompt(_:scrub:)(v12, v13, (uint64_t)&async function pointer to partial apply for closure #1 in static TokenGenerator.scrubIfNeeded(inputPrompt:stringRenderedPromptSanitizerWithConfiguration:), v10);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = static TokenGenerator.scrubIfNeeded(inputPrompt:stringRenderedPromptSanitizerWithConfiguration:);
  }
  else {
    uint64_t v2 = static TokenGenerator.scrubIfNeeded(inputPrompt:stringRenderedPromptSanitizerWithConfiguration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t specialized TokenStream.init(throwing:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v45 = a2;
  uint64_t v44 = type metadata accessor for PromptCompletionStream(0) - 8;
  MEMORY[0x270FA5388](v44);
  uint64_t v43 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v40 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  char v42 = (char *)&v36 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v36 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v36 - v16;
  uint64_t v41 = (char *)&v36 - v16;
  *(void *)(swift_allocObject() + 16) = a1;
  uint64_t v36 = a1;
  MEMORY[0x261201A80](a1);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptCompletionEvent);
  AsyncThrowingStream.init<>(unfolding:)();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a1;
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  uint64_t v37 = v15;
  v19(v15, v17, v4);
  uint64_t v20 = swift_allocObject();
  uint64_t v39 = v20;
  *(void *)(v20 + 16) = partial apply for closure #2 in TokenStream.init(throwing:);
  *(void *)(v20 + 24) = v18;
  v19(v10, v15, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator?);
  uint64_t v21 = swift_allocBox();
  uint64_t v23 = v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  char v25 = v40;
  v19(v40, v10, v4);
  unint64_t v26 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v21;
  uint64_t v28 = *(void (**)(unint64_t, char *, uint64_t))(v5 + 32);
  v28(v27 + v26, v25, v4);
  uint64_t v29 = v36;
  MEMORY[0x261201A80](v36);
  swift_retain();
  swift_retain();
  uint64_t v30 = v42;
  AsyncThrowingStream.init<>(unfolding:)();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v5 + 8);
  v31(v10, v4);
  swift_release();
  v31(v37, v4);
  uint64_t v32 = (uint64_t)v43;
  v28((unint64_t)v43, v30, v4);

  swift_release();
  uint64_t v33 = (void *)(v32 + *(int *)(v44 + 28));
  uint64_t v34 = v39;
  *uint64_t v33 = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @Sendable () -> (@out PromptCompletion, @error @owned Error);
  v33[1] = v34;
  v31(v41, v4);
  return outlined init with take of PromptCompletionStream(v32, v45, type metadata accessor for PromptCompletionStream);
}

uint64_t protocol witness for CompletionLanguageModelProvidingStreamable._streamCompletion<A>(configuration:) in conformance TokenGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return TokenGenerator._streamCompletion<A>(configuration:)(a1, a2, a3, a4);
}

uint64_t TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned char v9[32] = v16;
  v9[33] = v8;
  v9[30] = v14;
  v9[31] = v15;
  v9[28] = a8;
  v9[29] = v13;
  v9[26] = a6;
  v9[27] = a7;
  unsigned char v9[24] = a4;
  v9[25] = a5;
  v9[22] = a1;
  v9[23] = a2;
  v9[34] = *v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v9[35] = swift_task_alloc();
  v9[36] = *(void *)(v14 - 8);
  v9[37] = swift_task_alloc();
  v9[38] = swift_task_alloc();
  v9[39] = type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel(0);
  v9[40] = swift_task_alloc();
  v9[41] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Prompt();
  v9[42] = v10;
  v9[43] = *(void *)(v10 - 8);
  v9[44] = swift_task_alloc();
  v9[45] = swift_task_alloc();
  v9[46] = swift_task_alloc();
  type metadata accessor for PromptCompletion(255);
  v9[47] = swift_getTupleTypeMetadata2();
  v9[48] = swift_task_alloc();
  v9[49] = swift_task_alloc();
  v9[50] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:), 0, 0);
}

uint64_t TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:)()
{
  uint64_t v1 = (int *)v0[26];
  GenerativeFunctionInstrumenter.executionBegin()();
  GenerativeFunctionInstrumenter.promptConstructionBegin()();
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[51] = v2;
  *uint64_t v2 = v0;
  v2[1] = TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:);
  uint64_t v3 = v0[46];
  return v5(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 416) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:);
  }
  else {
    uint64_t v2 = TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  void (*v1)(void, void, void);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  long long v37;
  long long v38;
  uint64_t v39;

  uint64_t v1 = *(void (**)(void, void, void))(*(void *)(v0 + 288) + 16);
  v1(*(void *)(v0 + 304), *(void *)(v0 + 192), *(void *)(v0 + 240));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for any GenerativeConfigurationProtocol<Self.GenerativeConfigurationProtocol.PromptType == CompletionPrompt>);
  if (swift_dynamicCast())
  {
    uint64_t v3 = *(void *)(v0 + 360);
    uint64_t v2 = *(void *)(v0 + 368);
    uint64_t v4 = *(void *)(v0 + 336);
    uint64_t v5 = *(void *)(v0 + 344);
    outlined init with take of AsyncIteratorProtocol((long long *)(v0 + 56), v0 + 16);
    uint64_t v7 = *(void *)(v0 + 40);
    uint64_t v6 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = swift_task_alloc();
    *(void *)(v0 + 424) = v9;
    (*(void (**)(void))(v8 + 16))();
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 432) = v10;
    *uint64_t v10 = v0;
    v10[1] = TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:);
    uint64_t v11 = *(void *)(v0 + 360);
    uint64_t v12 = *(void *)(v0 + 320);
    return TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:completionConfiguration:)(v12, v11, v9, v7, v6);
  }
  else
  {
    v1(*(void *)(v0 + 296), *(void *)(v0 + 192), *(void *)(v0 + 240));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for any GenerativeConfigurationProtocol<Self.GenerativeConfigurationProtocol.PromptType == ChatMessagesPrompt>);
    uint64_t v14 = swift_dynamicCast();
    uint64_t v15 = *(void *)(v0 + 368);
    if (v14)
    {
      uint64_t v17 = *(void *)(v0 + 344);
      uint64_t v16 = *(void *)(v0 + 352);
      uint64_t v18 = *(void *)(v0 + 336);
      outlined init with take of AsyncIteratorProtocol((long long *)(v0 + 136), v0 + 96);
      uint64_t v20 = *(void *)(v0 + 120);
      uint64_t v19 = *(void *)(v0 + 128);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v20);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v15, v18);
      uint64_t v21 = *(void *)(v20 - 8);
      uint64_t v22 = swift_task_alloc();
      *(void *)(v0 + 448) = v22;
      (*(void (**)(void))(v21 + 16))();
      uint64_t v23 = (void *)swift_task_alloc();
      *(void *)(v0 + 456) = v23;
      *uint64_t v23 = v0;
      v23[1] = TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:);
      uint64_t v24 = *(void *)(v0 + 352);
      char v25 = *(void *)(v0 + 320);
      return TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:chatMessagesConfiguration:)(v25, v24, v22, v20, v19);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 344) + 16))(*(void *)(v0 + 320), *(void *)(v0 + 368), *(void *)(v0 + 336));
      swift_storeEnumTagMultiPayload();
      unint64_t v26 = *(void *)(v0 + 328);
      uint64_t v27 = *(void *)(v0 + 280);
      uint64_t v29 = *(void *)(v0 + 256);
      uint64_t v28 = *(void *)(v0 + 264);
      uint64_t v31 = *(void *)(v0 + 192);
      uint64_t v30 = *(void *)(v0 + 200);
      uint64_t v37 = *(_OWORD *)(v0 + 240);
      uint64_t v38 = *(_OWORD *)(v0 + 224);
      outlined init with take of PromptCompletionStream(*(void *)(v0 + 320), v26, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
      GenerativeFunctionInstrumenter.promptConstructionEnd()();
      GenerativeFunctionInstrumenter.inferenceBegin()();
      uint64_t v32 = type metadata accessor for GenerativeFunctionInstrumenter();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v27, 1, 1, v32);
      uint64_t v33 = swift_task_alloc();
      *(void *)(v0 + 472) = v33;
      *(_OWORD *)(v33 + 16) = v38;
      *(_OWORD *)(v33 + 32) = v37;
      *(void *)(v33 + 48) = v29;
      *(void *)(v33 + 56) = v31;
      *(void *)(v33 + 64) = v30;
      *(void *)(v33 + 72) = v28;
      *(void *)(v33 + 80) = v26;
      uint64_t v34 = (void *)swift_task_alloc();
      *(void *)(v0 + 480) = v34;
      *uint64_t v34 = v0;
      v34[1] = TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:);
      uint64_t v35 = *(void *)(v0 + 392);
      uint64_t v36 = *(void *)(v0 + 280);
      return static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(v35, v36, (int *)&async function pointer to partial apply for closure #1 in TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:));
    }
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 440) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  long long v13;
  long long v14;
  uint64_t v15;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v6 = *(void *)(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v13 = *(_OWORD *)(v0 + 240);
  uint64_t v14 = *(_OWORD *)(v0 + 224);
  outlined init with take of PromptCompletionStream(*(void *)(v0 + 320), v1, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  GenerativeFunctionInstrumenter.promptConstructionEnd()();
  GenerativeFunctionInstrumenter.inferenceBegin()();
  uint64_t v7 = type metadata accessor for GenerativeFunctionInstrumenter();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v2, 1, 1, v7);
  uint64_t v8 = swift_task_alloc();
  *(void *)(v0 + 472) = v8;
  *(_OWORD *)(v8 + 16) = v14;
  *(_OWORD *)(v8 + 32) = v13;
  *(void *)(v8 + 48) = v4;
  *(void *)(v8 + 56) = v6;
  *(void *)(v8 + 64) = v5;
  *(void *)(v8 + 72) = v3;
  *(void *)(v8 + 80) = v1;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 480) = v9;
  *uint64_t v9 = v0;
  v9[1] = TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:);
  uint64_t v10 = *(void *)(v0 + 392);
  uint64_t v11 = *(void *)(v0 + 280);
  return static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(v10, v11, (int *)&async function pointer to partial apply for closure #1 in TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 464) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  long long v13;
  long long v14;
  uint64_t v15;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v6 = *(void *)(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v13 = *(_OWORD *)(v0 + 240);
  uint64_t v14 = *(_OWORD *)(v0 + 224);
  outlined init with take of PromptCompletionStream(*(void *)(v0 + 320), v1, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  GenerativeFunctionInstrumenter.promptConstructionEnd()();
  GenerativeFunctionInstrumenter.inferenceBegin()();
  uint64_t v7 = type metadata accessor for GenerativeFunctionInstrumenter();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v2, 1, 1, v7);
  uint64_t v8 = swift_task_alloc();
  *(void *)(v0 + 472) = v8;
  *(_OWORD *)(v8 + 16) = v14;
  *(_OWORD *)(v8 + 32) = v13;
  *(void *)(v8 + 48) = v4;
  *(void *)(v8 + 56) = v6;
  *(void *)(v8 + 64) = v5;
  *(void *)(v8 + 72) = v3;
  *(void *)(v8 + 80) = v1;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 480) = v9;
  *uint64_t v9 = v0;
  v9[1] = TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:);
  uint64_t v10 = *(void *)(v0 + 392);
  uint64_t v11 = *(void *)(v0 + 280);
  return static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(v10, v11, (int *)&async function pointer to partial apply for closure #1 in TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 488) = v0;
  swift_task_dealloc();
  if (v0)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v2 + 280), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    swift_task_dealloc();
    uint64_t v3 = TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 280);
    *(_DWORD *)(v2 + 496) = *(_DWORD *)(*(void *)(v2 + 376) + 48);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v4, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    swift_task_dealloc();
    uint64_t v3 = TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v13 = *(void *)(v0 + 376);
  uint64_t v14 = *(void *)(v0 + 384);
  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v10 = *(void *)(v0 + 336);
  uint64_t v11 = *(void *)(v0 + 368);
  uint64_t v12 = *(void *)(v0 + 328);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v16 = *(void *)(v0 + 184);
  uint64_t v15 = *(void *)(v0 + 176);
  uint64_t v4 = v1 + *(int *)(v0 + 496);
  uint64_t v5 = *(void *)(v0 + 392) + *(int *)(v13 + 48);
  uint64_t v6 = *(void (**)(uint64_t))(*(void *)(v3 - 8) + 32);
  v6(v1);
  outlined init with take of PromptCompletionStream(v5, v4, type metadata accessor for PromptCompletion);
  GenerativeFunctionInstrumenter.inferenceEnd()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v11, v10);
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v12, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  GenerativeFunctionInstrumenter.executionEnd(error:)();
  uint64_t v7 = v14 + *(int *)(v13 + 48);
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v14, v1, v3);
  outlined init with take of PromptCompletionStream(v4, v7, type metadata accessor for PromptCompletion);
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v15, v14, v3);
  outlined init with take of PromptCompletionStream(v7, v16, type metadata accessor for PromptCompletion);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 416);
  MEMORY[0x261201A80](v1);
  GenerativeFunctionInstrumenter.executionEnd(error:)();

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  (*(void (**)(void, void))(v0[43] + 8))(v0[46], v0[42]);
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  uint64_t v1 = (void *)v0[55];
  MEMORY[0x261201A80](v1);
  GenerativeFunctionInstrumenter.executionEnd(error:)();

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  (*(void (**)(void, void))(v0[43] + 8))(v0[46], v0[42]);
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 12));
  uint64_t v1 = (void *)v0[58];
  MEMORY[0x261201A80](v1);
  GenerativeFunctionInstrumenter.executionEnd(error:)();

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[41];
  (*(void (**)(void, void))(v0[43] + 8))(v0[46], v0[42]);
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v1, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  uint64_t v2 = (void *)v0[61];
  MEMORY[0x261201A80](v2);
  GenerativeFunctionInstrumenter.executionEnd(error:)();

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t closure #1 in TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[254] = v17;
  v8[253] = v16;
  v8[252] = a8;
  v8[251] = a6;
  v8[250] = a5;
  v8[249] = a4;
  v8[248] = a3;
  v8[247] = a2;
  v8[246] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithRunner?);
  v8[255] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  v8[256] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v8[257] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for StringResponseSanitizerRunnerConfiguration();
  v8[258] = v10;
  v8[259] = *(void *)(v10 - 8);
  v8[260] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for String.Encoding();
  v8[261] = v11;
  v8[262] = *(void *)(v11 - 8);
  v8[263] = swift_task_alloc();
  v8[264] = type metadata accessor for PromptCompletion(0);
  v8[265] = swift_task_alloc();
  v8[266] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Schema?);
  v8[267] = swift_task_alloc();
  v8[268] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Schema();
  v8[269] = v12;
  v8[270] = *(void *)(v12 - 8);
  v8[271] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenStream<String>);
  v8[272] = swift_task_alloc();
  v8[273] = swift_task_alloc();
  v8[274] = *(void *)(a8 - 8);
  v8[275] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for GenerativeFunctionInstrumenter();
  v8[276] = v13;
  v8[277] = *(void *)(v13 - 8);
  v8[278] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ToolChoice?);
  v8[279] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:), 0, 0);
}

uint64_t closure #1 in TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:)()
{
  uint64_t v97 = v0;
  GenerativeConfigurationProtocol.samplingParameters.getter(*(void *)(v0 + 2032), v0 + 16);
  outlined init with take of Locale?(v0 + 16, v0 + 320, &demangling cache variable for type metadata for SamplingParameters?);
  outlined init with take of Locale?(v0 + 320, v0 + 168, &demangling cache variable for type metadata for SamplingParameters?);
  if (_s15TokenGeneration26SamplingParametersEnvelopeVSgWOg(v0 + 168) == 1)
  {
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    uint64_t v71 = 0;
    uint64_t v69 = 0;
    char v70 = -1;
    uint64_t v81 = MEMORY[0x263F8EE88];
    char v1 = 1;
    char v79 = 2;
    char v78 = 2;
    char v2 = 1;
    char v3 = 1;
    char v4 = 1;
    char v5 = 1;
    char v6 = 1;
    char v7 = 1;
  }
  else
  {
    outlined init with take of Locale?(v0 + 320, v0 + 1824, &demangling cache variable for type metadata for SamplingParameters?);
    char v79 = *(unsigned char *)(v0 + 1954);
    char v78 = *(unsigned char *)(v0 + 1953);
    char v1 = *(unsigned char *)(v0 + 1952);
    uint64_t v76 = *(void *)(v0 + 1928);
    uint64_t v77 = *(void *)(v0 + 1944);
    char v2 = *(unsigned char *)(v0 + 1936);
    uint64_t v75 = *(void *)(v0 + 1912);
    char v3 = *(unsigned char *)(v0 + 1920);
    uint64_t v81 = *(void *)(v0 + 1904);
    uint64_t v74 = *(void *)(v0 + 1888);
    char v4 = *(unsigned char *)(v0 + 1896);
    char v5 = *(unsigned char *)(v0 + 1880);
    uint64_t v72 = *(void *)(v0 + 1856);
    uint64_t v73 = *(void *)(v0 + 1872);
    char v6 = *(unsigned char *)(v0 + 1864);
    uint64_t v71 = *(void *)(v0 + 1840);
    char v7 = *(unsigned char *)(v0 + 1848);
    uint64_t v69 = *(void *)(v0 + 1824);
    char v70 = *(unsigned char *)(v0 + 1832);
  }
  uint64_t v8 = *(void *)(v0 + 2224);
  uint64_t v9 = *(void *)(v0 + 2216);
  uint64_t v10 = *(void *)(v0 + 2200);
  uint64_t v11 = *(void *)(v0 + 2192);
  uint64_t v12 = *(void *)(v0 + 2032);
  uint64_t v13 = *(void *)(v0 + 2016);
  uint64_t v84 = *(void *)(v0 + 1984);
  uint64_t v86 = *(void *)(v0 + 2208);
  uint64_t v14 = *(void *)(v0 + 1976);
  *(unsigned char *)(v0 + 2368) = v7;
  *(unsigned char *)(v0 + 2352) = v6;
  *(unsigned char *)(v0 + 2336) = v5;
  *(unsigned char *)(v0 + 2344) = v4;
  *(unsigned char *)(v0 + 2360) = v3;
  *(unsigned char *)(v0 + 2384) = v2;
  *(unsigned char *)(v0 + 2376) = v1;
  uint64_t v15 = GenerativeConfigurationProtocol.documents.getter();
  uint64_t v16 = MEMORY[0x263F8EE78];
  if (v15) {
    uint64_t v17 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v15;
  }
  else {
    uint64_t v17 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8EE78];
  }
  uint64_t v83 = v17;
  uint64_t v18 = GenerativeConfigurationProtocol.tools.getter();
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = v16;
  }
  uint64_t v82 = v19;
  GenerativeConfigurationProtocol.toolChoice.getter(v13, v12);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  *(void *)(v0 + 2240) = v20;
  *(void *)(v0 + 2248) = (v9 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v20(v8, v84, v86);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v14, v13);
  RequestMetadata.init<A>(generativeFunctionInstrumenter:configuration:)(v8, v10, v13, &v90);
  uint64_t v21 = v91;
  uint64_t v80 = v90;
  uint64_t v22 = v93;
  uint64_t v23 = v95;
  uint64_t v85 = v92;
  uint64_t v87 = v94;
  uint64_t v24 = v96;
  uint64_t v25 = GenerativeConfigurationProtocol.grammar.getter(v13, v12);
  uint64_t v27 = v26;
  uint64_t v88 = v22;
  uint64_t v28 = (_DWORD *)(v0 + 154);
  uint64_t v29 = (_DWORD *)(v0 + 161);
  if (v26)
  {
    uint64_t v30 = v25;
    uint64_t v64 = *(void *)(v0 + 2176);
    uint64_t v62 = *(void *)(v0 + 2000);
    char v67 = *(void (***)(char *, uint64_t))(v0 + 2232);
    *(void *)(v0 + 600) = v69;
    *(unsigned char *)(v0 + 608) = v70;
    *(_DWORD *)(v0 + 609) = *v28;
    *(_DWORD *)(v0 + 612) = *(_DWORD *)(v0 + 157);
    *(void *)(v0 + 616) = v71;
    *(unsigned char *)(v0 + 624) = *(unsigned char *)(v0 + 2368);
    *(_DWORD *)(v0 + 625) = *v29;
    *(_DWORD *)(v0 + 628) = *(_DWORD *)(v0 + 164);
    *(void *)(v0 + 632) = v72;
    *(unsigned char *)(v0 + 640) = *(unsigned char *)(v0 + 2352);
    *(_DWORD *)(v0 + 641) = *(_DWORD *)(v0 + 306);
    *(_DWORD *)(v0 + 644) = *(_DWORD *)(v0 + 309);
    *(void *)(v0 + 648) = v73;
    *(unsigned char *)(v0 + 656) = *(unsigned char *)(v0 + 2336);
    *(_DWORD *)(v0 + 657) = *(_DWORD *)(v0 + 451);
    *(_DWORD *)(v0 + 660) = *(_DWORD *)(v0 + 454);
    *(void *)(v0 + 664) = v74;
    *(unsigned char *)(v0 + 672) = *(unsigned char *)(v0 + 2344);
    int v31 = *(_DWORD *)(v0 + 299);
    *(_DWORD *)(v0 + 676) = *(_DWORD *)(v0 + 302);
    *(_DWORD *)(v0 + 673) = v31;
    *(void *)(v0 + 680) = v81;
    *(void *)(v0 + 688) = v75;
    *(unsigned char *)(v0 + 696) = *(unsigned char *)(v0 + 2360);
    *(_DWORD *)(v0 + 700) = *(_DWORD *)(v0 + 316);
    *(_DWORD *)(v0 + 697) = *(_DWORD *)(v0 + 313);
    *(void *)(v0 + 704) = v76;
    *(unsigned char *)(v0 + 712) = *(unsigned char *)(v0 + 2384);
    *(_DWORD *)(v0 + 713) = *(_DWORD *)(v0 + 147);
    *(_DWORD *)(v0 + 716) = *(_DWORD *)(v0 + 150);
    *(void *)(v0 + 720) = v77;
    *(unsigned char *)(v0 + 728) = *(unsigned char *)(v0 + 2376);
    *(unsigned char *)(v0 + 729) = v78;
    *(unsigned char *)(v0 + 730) = v79;
    protocol witness for Hashable.hash(into:) in conformance CachePolicy(v0 + 600);
    outlined init with take of Locale?(v0 + 600, v0 + 464, &demangling cache variable for type metadata for SamplingParameters?);
    uint64_t v90 = v80;
    uint64_t v91 = v21;
    uint64_t v92 = v85;
    uint64_t v93 = v22;
    uint64_t v94 = v87;
    uint64_t v95 = v23;
    uint64_t v96 = v24;
    TokenGenerator.complete(promptInputFromGenerativeModel:parameters:tools:toolChoice:documents:grammar:metadata:)(v62, v0 + 464, v82, v67, v83, v30, v27, &v90, v64, 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v61 = (_DWORD *)(v0 + 306);
  uint64_t v63 = (_DWORD *)(v0 + 451);
  char v65 = (int *)(v0 + 299);
  char v66 = (_DWORD *)(v0 + 313);
  char v68 = (_DWORD *)(v0 + 147);
  uint64_t v35 = GenerativeConfigurationProtocol.partialGrammar.getter(*(void *)(v0 + 2016), *(void *)(v0 + 2032));
  uint64_t v37 = v36;
  if (v36)
  {
    uint64_t v38 = v35;
    uint64_t v55 = *(void *)(v0 + 2000);
    uint64_t v56 = *(void *)(v0 + 2176);
    uint64_t v59 = *(void (***)(char *, uint64_t))(v0 + 2232);
    *(void *)(v0 + 872) = v69;
    *(unsigned char *)(v0 + 880) = v70;
    *(_DWORD *)(v0 + 881) = *v28;
    *(_DWORD *)(v0 + 884) = *(_DWORD *)(v0 + 157);
    *(void *)(v0 + 888) = v71;
    *(unsigned char *)(v0 + 896) = *(unsigned char *)(v0 + 2368);
    *(_DWORD *)(v0 + 897) = *v29;
    *(_DWORD *)(v0 + 900) = *(_DWORD *)(v0 + 164);
    *(void *)(v0 + 904) = v72;
    *(unsigned char *)(v0 + 912) = *(unsigned char *)(v0 + 2352);
    *(_DWORD *)(v0 + 913) = *v61;
    *(_DWORD *)(v0 + 916) = *(_DWORD *)(v0 + 309);
    *(void *)(v0 + 920) = v73;
    *(unsigned char *)(v0 + 928) = *(unsigned char *)(v0 + 2336);
    *(_DWORD *)(v0 + 929) = *v63;
    *(_DWORD *)(v0 + 932) = *(_DWORD *)(v0 + 454);
    *(void *)(v0 + 936) = v74;
    *(unsigned char *)(v0 + 944) = *(unsigned char *)(v0 + 2344);
    int v39 = *v65;
    *(_DWORD *)(v0 + 948) = *(_DWORD *)(v0 + 302);
    *(_DWORD *)(v0 + 945) = v39;
    *(void *)(v0 + 952) = v81;
    *(void *)(v0 + 960) = v75;
    *(unsigned char *)(v0 + 968) = *(unsigned char *)(v0 + 2360);
    *(_DWORD *)(v0 + 972) = *(_DWORD *)(v0 + 316);
    *(_DWORD *)(v0 + 969) = *v66;
    *(void *)(v0 + 976) = v76;
    *(unsigned char *)(v0 + 984) = *(unsigned char *)(v0 + 2384);
    *(_DWORD *)(v0 + 985) = *v68;
    *(_DWORD *)(v0 + 988) = *(_DWORD *)(v0 + 150);
    *(void *)(v0 + 992) = v77;
    *(unsigned char *)(v0 + 1000) = *(unsigned char *)(v0 + 2376);
    *(unsigned char *)(v0 + 1001) = v78;
    *(unsigned char *)(v0 + 1002) = v79;
    protocol witness for Hashable.hash(into:) in conformance CachePolicy(v0 + 872);
    outlined init with take of Locale?(v0 + 872, v0 + 736, &demangling cache variable for type metadata for SamplingParameters?);
    uint64_t v90 = v80;
    uint64_t v91 = v21;
    uint64_t v92 = v85;
    uint64_t v93 = v22;
    uint64_t v94 = v87;
    uint64_t v95 = v23;
    uint64_t v96 = v24;
    TokenGenerator.complete(promptInputFromGenerativeModel:parameters:tools:toolChoice:documents:grammar:metadata:)(v55, v0 + 736, v82, v59, v83, v38, v37, &v90, v56, 2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v60 = v24;
    uint64_t v40 = *(void *)(v0 + 2160);
    uint64_t v41 = *(void *)(v0 + 2152);
    uint64_t v42 = *(void *)(v0 + 2144);
    GenerativeConfigurationProtocol.schema.getter(*(void *)(v0 + 2016), *(void *)(v0 + 2032));
    int v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v42, 1, v41);
    uint64_t v57 = *(void *)(v0 + 2176);
    uint64_t v58 = *(void (***)(char *, uint64_t))(v0 + 2232);
    if (v43 == 1)
    {
      uint64_t v44 = *(void *)(v0 + 2160);
      uint64_t v52 = *(void *)(v0 + 2152);
      uint64_t v45 = *(void *)(v0 + 2136);
      uint64_t v53 = *(void *)(v0 + 2000);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 2144), &demangling cache variable for type metadata for Schema?);
      *(void *)(v0 + 1552) = v69;
      *(unsigned char *)(v0 + 1560) = v70;
      *(_DWORD *)(v0 + 1561) = *v28;
      *(_DWORD *)(v0 + 1564) = *(_DWORD *)(v0 + 157);
      *(void *)(v0 + 1568) = v71;
      *(unsigned char *)(v0 + 1576) = *(unsigned char *)(v0 + 2368);
      *(_DWORD *)(v0 + 1577) = *v29;
      *(_DWORD *)(v0 + 1580) = *(_DWORD *)(v0 + 164);
      *(void *)(v0 + 1584) = v72;
      *(unsigned char *)(v0 + 1592) = *(unsigned char *)(v0 + 2352);
      int v46 = *v61;
      *(_DWORD *)(v0 + 1596) = *(_DWORD *)(v0 + 309);
      *(_DWORD *)(v0 + 1593) = v46;
      *(void *)(v0 + 1600) = v73;
      *(unsigned char *)(v0 + 1608) = *(unsigned char *)(v0 + 2336);
      *(_DWORD *)(v0 + 1609) = *v63;
      *(_DWORD *)(v0 + 1612) = *(_DWORD *)(v0 + 454);
      *(void *)(v0 + 1616) = v74;
      *(unsigned char *)(v0 + 1624) = *(unsigned char *)(v0 + 2344);
      *(_DWORD *)(v0 + 1625) = *v65;
      *(_DWORD *)(v0 + 1628) = *(_DWORD *)(v0 + 302);
      *(void *)(v0 + 1632) = v81;
      *(void *)(v0 + 1640) = v75;
      *(unsigned char *)(v0 + 1648) = *(unsigned char *)(v0 + 2360);
      *(_DWORD *)(v0 + 1652) = *(_DWORD *)(v0 + 316);
      *(_DWORD *)(v0 + 1649) = *v66;
      *(void *)(v0 + 1656) = v76;
      *(unsigned char *)(v0 + 1664) = *(unsigned char *)(v0 + 2384);
      *(_DWORD *)(v0 + 1668) = *(_DWORD *)(v0 + 150);
      *(_DWORD *)(v0 + 1665) = *v68;
      *(void *)(v0 + 1672) = v77;
      *(unsigned char *)(v0 + 1680) = *(unsigned char *)(v0 + 2376);
      *(unsigned char *)(v0 + 1681) = v78;
      *(unsigned char *)(v0 + 1682) = v79;
      protocol witness for Hashable.hash(into:) in conformance CachePolicy(v0 + 1552);
      outlined init with take of Locale?(v0 + 1552, v0 + 1416, &demangling cache variable for type metadata for SamplingParameters?);
      dispatch thunk of static Generable.schema.getter();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v45, 0, 1, v52);
      uint64_t v90 = v80;
      uint64_t v91 = v21;
      uint64_t v92 = v85;
      uint64_t v93 = v88;
      uint64_t v94 = v87;
      uint64_t v95 = v23;
      uint64_t v96 = v24;
      TokenGenerator.complete(promptInputFromGenerativeModel:parameters:tools:toolChoice:documents:schema:metadata:)(v53, v0 + 1416, v82, v58, v83, v45, &v90, v57);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(v45, &demangling cache variable for type metadata for Schema?);
      outlined init with take of Locale?(v0 + 1416, v0 + 1688, &demangling cache variable for type metadata for SamplingParameters?);
      outlined release of SamplingParametersEnvelope(v0 + 1688);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    uint64_t v47 = *(void *)(v0 + 2168);
    uint64_t v48 = *(void *)(v0 + 2160);
    uint64_t v49 = *(void *)(v0 + 2152);
    uint64_t v50 = *(void *)(v0 + 2136);
    uint64_t v54 = *(void *)(v0 + 2000);
    (*(void (**)(uint64_t, void, uint64_t))(v48 + 32))(v47, *(void *)(v0 + 2144), v49);
    *(void *)(v0 + 1144) = v69;
    *(unsigned char *)(v0 + 1152) = v70;
    *(_DWORD *)(v0 + 1153) = *v28;
    *(_DWORD *)(v0 + 1156) = *(_DWORD *)(v0 + 157);
    *(void *)(v0 + 1160) = v71;
    *(unsigned char *)(v0 + 1168) = *(unsigned char *)(v0 + 2368);
    *(_DWORD *)(v0 + 1169) = *v29;
    *(_DWORD *)(v0 + 1172) = *(_DWORD *)(v0 + 164);
    *(void *)(v0 + 1176) = v72;
    *(unsigned char *)(v0 + 1184) = *(unsigned char *)(v0 + 2352);
    int v51 = *v61;
    *(_DWORD *)(v0 + 1188) = *(_DWORD *)(v0 + 309);
    *(_DWORD *)(v0 + 1185) = v51;
    *(void *)(v0 + 1192) = v73;
    *(unsigned char *)(v0 + 1200) = *(unsigned char *)(v0 + 2336);
    *(_DWORD *)(v0 + 1201) = *v63;
    *(_DWORD *)(v0 + 1204) = *(_DWORD *)(v0 + 454);
    *(void *)(v0 + 1208) = v74;
    *(unsigned char *)(v0 + 1216) = *(unsigned char *)(v0 + 2344);
    *(_DWORD *)(v0 + 1217) = *v65;
    *(_DWORD *)(v0 + 1220) = *(_DWORD *)(v0 + 302);
    *(void *)(v0 + 1224) = v81;
    *(void *)(v0 + 1232) = v75;
    *(unsigned char *)(v0 + 1240) = *(unsigned char *)(v0 + 2360);
    *(_DWORD *)(v0 + 1244) = *(_DWORD *)(v0 + 316);
    *(_DWORD *)(v0 + 1241) = *v66;
    *(void *)(v0 + 1248) = v76;
    *(unsigned char *)(v0 + 1256) = *(unsigned char *)(v0 + 2384);
    *(_DWORD *)(v0 + 1260) = *(_DWORD *)(v0 + 150);
    *(_DWORD *)(v0 + 1257) = *v68;
    *(void *)(v0 + 1264) = v77;
    *(unsigned char *)(v0 + 1272) = *(unsigned char *)(v0 + 2376);
    *(unsigned char *)(v0 + 1273) = v78;
    *(unsigned char *)(v0 + 1274) = v79;
    protocol witness for Hashable.hash(into:) in conformance CachePolicy(v0 + 1144);
    outlined init with take of Locale?(v0 + 1144, v0 + 1008, &demangling cache variable for type metadata for SamplingParameters?);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v50, v47, v49);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v50, 0, 1, v49);
    uint64_t v90 = v80;
    uint64_t v91 = v21;
    uint64_t v92 = v85;
    uint64_t v93 = v88;
    uint64_t v94 = v87;
    uint64_t v95 = v23;
    uint64_t v96 = v60;
    TokenGenerator.complete(promptInputFromGenerativeModel:parameters:tools:toolChoice:documents:schema:metadata:)(v54, v0 + 1008, v82, v58, v83, v50, &v90, v57);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v50, &demangling cache variable for type metadata for Schema?);
    outlined init with take of Locale?(v0 + 1008, v0 + 1280, &demangling cache variable for type metadata for SamplingParameters?);
    outlined release of SamplingParametersEnvelope(v0 + 1280);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
LABEL_12:
  swift_bridgeObjectRelease();
  outlined init with take of Locale?(*(void *)(v0 + 2176), *(void *)(v0 + 2184), &demangling cache variable for type metadata for TokenStream<String>);
  uint64_t v89 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized TokenStream.contentAndPromptCompletion()
                                        + async function pointer to specialized TokenStream.contentAndPromptCompletion());
  uint64_t v32 = (void *)swift_task_alloc();
  *(void *)(v0 + 2256) = v32;
  void *v32 = v0;
  v32[1] = closure #1 in TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:);
  uint64_t v33 = *(void *)(v0 + 2120);
  return v89(v33);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  char v1 = *(void *)(v0 + 2104);
  char v2 = *(void *)(v0 + 2096);
  char v3 = *(void *)(v0 + 2088);
  outlined init with take of PromptCompletionStream(*(void *)(v0 + 2120), *(void *)(v0 + 2128), type metadata accessor for PromptCompletion);
  static String.Encoding.utf8.getter();
  char v4 = String.data(using:allowLossyConversion:)();
  char v6 = v5;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 2288) = v4;
  *(void *)(v0 + 2296) = v6;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v6 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 2216);
    uint64_t v9 = *(void *)(v0 + 2208);
    uint64_t v10 = *(void *)(v0 + 2056);
    (*(void (**)(uint64_t, void, uint64_t))(v0 + 2240))(v10, *(void *)(v0 + 1984), v9);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v9);
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 2304) = v11;
    void *v11 = v0;
    v11[1] = closure #1 in TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:);
    uint64_t v12 = *(void *)(v0 + 2080);
    uint64_t v13 = *(void *)(v0 + 2056);
    return TokenGenerator.responseSanitizerConfiguration(generativeFunctionInstrumenter:)(v12, v13);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  char v2 = *v1;
  *(void *)(*v1 + 2312) = v0;
  swift_task_dealloc();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v2 + 2056), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  if (v0) {
    char v3 = closure #1 in TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:);
  }
  else {
    char v3 = closure #1 in TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  char v1 = v0[289];
  GenerativeConfigurationProtocol.stringResponseSanitizer.getter();
  if (v1)
  {
    char v2 = v0[279];
    char v3 = v0[273];
    char v4 = v0[266];
    char v5 = v0[260];
    char v6 = v0[259];
    char v7 = v0[258];
    outlined consume of Data?(v0[286], v0[287]);
    outlined destroy of TokenGeneratorCompletionResponseStringStream(v4, type metadata accessor for PromptCompletion);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v3, &demangling cache variable for type metadata for TokenStream<String>);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v2, &demangling cache variable for type metadata for ToolChoice?);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  else
  {
    uint64_t v10 = v0[260];
    uint64_t v11 = v0[256];
    uint64_t v12 = v0[255];
    uint64_t v13 = swift_task_alloc();
    *(void *)(v13 + 16) = v10;
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF16GenerativeModels39StringRenderedPromptSanitizerWithRunnerV_s5NeverO0cD10Foundation0efghI13ConfigurationVTg5Tm((void (*)(char *))partial apply for closure #1 in closure #1 in TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:), v13, MEMORY[0x263F41478], &demangling cache variable for type metadata for StringResponseSanitizerWithRunner?, MEMORY[0x263F415F0], v11);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v12, &demangling cache variable for type metadata for StringResponseSanitizerWithRunner?);
    swift_task_dealloc();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[290] = v14;
    void *v14 = v0;
    v14[1] = closure #1 in TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:);
    uint64_t v15 = v0[287];
    uint64_t v16 = v0[286];
    uint64_t v17 = v0[256];
    uint64_t v18 = v0[246];
    return MEMORY[0x270F30040](v18, v16, v15, v17);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  char v2 = *v1;
  *(void *)(*v1 + 2328) = v0;
  swift_task_dealloc();
  if (v0)
  {
    char v3 = closure #1 in TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:);
  }
  else
  {
    *(_DWORD *)(v2 + 460) = *(_DWORD *)(swift_getTupleTypeMetadata2() + 48);
    char v3 = closure #1 in TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  char v1 = *(void *)(v0 + 2232);
  char v2 = *(void *)(v0 + 2184);
  char v3 = *(void *)(v0 + 2128);
  char v4 = *(void *)(v0 + 2080);
  char v5 = *(void *)(v0 + 2072);
  char v6 = *(void *)(v0 + 2064);
  char v7 = *(void *)(v0 + 2048);
  uint64_t v8 = *(void *)(v0 + 1968) + *(int *)(v0 + 460);
  outlined consume of Data?(*(void *)(v0 + 2288), *(void *)(v0 + 2296));
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v7, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v2, &demangling cache variable for type metadata for TokenStream<String>);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for ToolChoice?);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  outlined init with take of PromptCompletionStream(v3, v8, type metadata accessor for PromptCompletion);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  char v1 = v0[279];
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[273], &demangling cache variable for type metadata for TokenStream<String>);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for ToolChoice?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  char v1 = v0[279];
  char v2 = v0[273];
  char v3 = v0[266];
  outlined consume of Data?(v0[286], v0[287]);
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v3, type metadata accessor for PromptCompletion);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v2, &demangling cache variable for type metadata for TokenStream<String>);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for ToolChoice?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  char v1 = v0[279];
  char v2 = v0[273];
  char v3 = v0[266];
  char v4 = v0[260];
  char v5 = v0[259];
  char v6 = v0[258];
  char v7 = v0[256];
  outlined consume of Data?(v0[286], v0[287]);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v7, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v3, type metadata accessor for PromptCompletion);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v2, &demangling cache variable for type metadata for TokenStream<String>);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for ToolChoice?);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t closure #1 in TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 2264) = v2;
  swift_task_dealloc();
  if (v2)
  {
    char v7 = closure #1 in TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:);
  }
  else
  {
    *(void *)(v6 + 2272) = a2;
    *(void *)(v6 + 2280) = a1;
    char v7 = closure #1 in TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:);
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

uint64_t specialized TokenStream.contentAndPromptCompletion()(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for String.Encoding();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  type metadata accessor for PromptCompletion(0);
  v2[10] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized TokenStream.contentAndPromptCompletion(), 0, 0);
}

uint64_t specialized TokenStream.contentAndPromptCompletion()()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = (void *)(v1 + *(int *)(type metadata accessor for PromptCompletionStream(0) + 20));
  uint64_t v6 = (uint64_t (*)(uint64_t))(*v2 + *(int *)*v2);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  *uint64_t v3 = v0;
  v3[1] = specialized TokenStream.contentAndPromptCompletion();
  uint64_t v4 = v0[10];
  return v6(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized TokenStream.contentAndPromptCompletion();
  }
  else {
    uint64_t v2 = specialized TokenStream.contentAndPromptCompletion();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;

  uint64_t v1 = v0[5];
  outlined init with take of PromptCompletionStream(v0[10], v1, type metadata accessor for PromptCompletion);
  if (*(void *)(*(void *)(v1 + 32) + 16))
  {
    uint64_t v2 = v0[12];
    uint64_t v3 = swift_bridgeObjectRetain();
    uint64_t v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15TokenGeneration16PromptCompletionV7SegmentVG_AH7ContentOs5NeverOTg504_s15d32Generation0A6StreamV26contentAndf41Completionx0D0_AA0fG0V06promptG0tyYaKFAG7i4OAG7H52Vcfu_32b1aea282a60d71b97bfb98b78a1fe981AlJTf3nnnpk_nTf1cn_n(v3);
    uint64_t v24 = v2;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v24 = v0[12];
    uint64_t v4 = MEMORY[0x263F8EE78];
  }
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = swift_bridgeObjectRetain() + 40;
    do
    {
      if ((*(unsigned char *)(v6 + 32) & 1) == 0)
      {
        uint64_t v8 = *(void *)(v6 + 16);
        uint64_t v7 = *(void *)(v6 + 24);
        uint64_t v10 = *(void **)v6;
        uint64_t v9 = *(void *)(v6 + 8);
        uint64_t v11 = *(void *)(v6 - 8);
        outlined copy of PromptCompletion.Content(v11, *(void *)v6, v9, v8, v7, 0);
        swift_bridgeObjectRetain();
        v12._uint64_t countAndFlagsBits = v11;
        v12._object = v10;
        String.append(_:)(v12);
        outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v11, (unint64_t)v10, v9, v8, v7, 0);
        swift_bridgeObjectRelease();
      }
      v6 += 48;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = v0[8];
  uint64_t v14 = v0[9];
  uint64_t v15 = v0[7];
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  uint64_t v16 = String.data(using:allowLossyConversion:)();
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  if (v18 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    static Generable.decode(data:)();
    if (v24)
    {
      outlined destroy of TokenGeneratorCompletionResponseStringStream(v0[5], type metadata accessor for PromptCompletion);
      outlined consume of Data?(v16, v18);
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v20 = (uint64_t (*)(void))v0[1];
      return v20();
    }
    else
    {
      outlined consume of Data?(v16, v18);
      uint64_t v21 = v0[2];
      uint64_t v22 = v0[3];
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
      return v23(v21, v22);
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TokenGenerator._complete<A, B>(type:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  type metadata accessor for TokenGeneratorCompletionResponseOneShotGenerableAdditionalInfo(0);
  uint64_t v15 = swift_task_alloc();
  *(void *)(v7 + 16) = v15;
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v16;
  *uint64_t v16 = v7;
  v16[1] = TokenGenerator._complete<A, B>(type:configuration:);
  return TokenGenerator._oneShotCompletion<A, B>(type:configuration:)(a1, v15, a2, a3, a4, a5, a6, a7);
}

uint64_t TokenGenerator._complete<A, B>(type:configuration:)()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 32) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = TokenGenerator._complete<A, B>(type:configuration:);
  }
  else
  {
    outlined destroy of TokenGeneratorCompletionResponseStringStream(*(void *)(v2 + 16), type metadata accessor for TokenGeneratorCompletionResponseOneShotGenerableAdditionalInfo);
    uint64_t v3 = TokenGenerator._complete<A, B>(type:configuration:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

uint64_t TokenGenerator._oneShotCompletion<A, B>(type:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[9] = a8;
  v9[10] = v8;
  v9[7] = a6;
  unsigned char v9[8] = a7;
  uint64_t v9[5] = a4;
  v9[6] = a5;
  v9[3] = a2;
  v9[4] = a3;
  void v9[2] = a1;
  v9[11] = *v8;
  type metadata accessor for PromptCompletion(0);
  v9[12] = swift_task_alloc();
  v9[13] = *(void *)(a5 - 8);
  v9[14] = swift_task_alloc();
  v9[15] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for GenerativeFunctionInstrumenter();
  unsigned char v9[16] = v11;
  v9[17] = *(void *)(v11 - 8);
  v9[18] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenGenerator._oneShotCompletion<A, B>(type:configuration:), 0, 0);
}

uint64_t TokenGenerator._oneShotCompletion<A, B>(type:configuration:)()
{
  uint64_t v1 = *(void *)(v0 + 80);
  if (*(void *)(v1 + 24)) {
    swift_bridgeObjectRetain();
  }
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  long long v16 = *(_OWORD *)(v0 + 56);
  GenerativeConfigurationProtocol.generateGenerativeFunctionInstrumenter(useCaseIdentifier:eventReporter:)();
  swift_bridgeObjectRelease();
  uint64_t v7 = swift_task_alloc();
  *(void *)(v0 + 152) = v7;
  *(void *)(v7 + 16) = v6;
  *(_OWORD *)(v7 + 24) = v16;
  *(void *)(v7 + 40) = v4;
  *(void *)(v7 + 48) = v5;
  *(void *)(v7 + 56) = v1;
  *(void *)(v7 + 64) = v2;
  *(void *)(v7 + 72) = v3;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v8;
  type metadata accessor for CompletionPrompt();
  *uint64_t v8 = v0;
  v8[1] = TokenGenerator._oneShotCompletion<A, B>(type:configuration:);
  uint64_t v9 = *(void *)(v0 + 144);
  uint64_t v10 = *(void *)(v0 + 96);
  uint64_t v11 = *(void *)(v0 + 40);
  uint64_t v12 = *(void *)(v0 + 48);
  uint64_t v13 = *(void *)(v0 + 32);
  uint64_t v14 = *(void *)(v0 + 120);
  return TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:)(v14, v10, v13, v11, v9, (uint64_t)&async function pointer to partial apply for closure #1 in TokenGenerator._oneShotCompletion<A, B>(type:configuration:), v7, v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = TokenGenerator._oneShotCompletion<A, B>(type:configuration:);
  }
  else {
    uint64_t v2 = TokenGenerator._oneShotCompletion<A, B>(type:configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;

  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[15];
  uint64_t v10 = v0[16];
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[12];
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[3];
  (*(void (**)(void, uint64_t, uint64_t))(v4 + 16))(v0[14], v3, v6);
  CompletionResponse.init(content:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
  outlined init with take of PromptCompletionStream(v5, v7, type metadata accessor for PromptCompletion);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[16]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t closure #1 in TokenGenerator._oneShotCompletion<A, B>(type:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[8] = a7;
  v7[9] = v15;
  v7[6] = a4;
  _OWORD v7[7] = a5;
  _OWORD v7[4] = a2;
  v7[5] = a3;
  v7[3] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringRenderedPromptSanitizerWithRunner?);
  v7[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  v7[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v7[12] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for StringRenderedPromptSanitizerRunnerConfiguration();
  v7[13] = v9;
  v7[14] = *(void *)(v9 - 8);
  v7[15] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Prompt();
  v7[16] = v10;
  v7[17] = *(void *)(v10 - 8);
  uint64_t v11 = swift_task_alloc();
  v7[18] = v11;
  uint64_t v12 = (void *)swift_task_alloc();
  v7[19] = v12;
  *uint64_t v12 = v7;
  v12[1] = closure #1 in TokenGenerator._oneShotCompletion<A, B>(type:configuration:);
  return GenerativeConfigurationProtocol<>.renderToTokenGenerationPrompt()(v11, a7, v15);
}

uint64_t closure #1 in TokenGenerator._oneShotCompletion<A, B>(type:configuration:)()
{
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in TokenGenerator._oneShotCompletion<A, B>(type:configuration:);
  }
  else {
    uint64_t v2 = closure #1 in TokenGenerator._oneShotCompletion<A, B>(type:configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = v0[12];
  uint64_t v2 = v0[6];
  uint64_t v3 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v4 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v1, 0, 1, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[21] = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in TokenGenerator._oneShotCompletion<A, B>(type:configuration:);
  uint64_t v6 = v0[15];
  uint64_t v7 = v0[12];
  return TokenGenerator.renderedPromptSanitizerConfiguration(generativeFunctionInstrumenter:)(v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v2 + 96), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  if (v0) {
    uint64_t v3 = closure #1 in TokenGenerator._oneShotCompletion<A, B>(type:configuration:);
  }
  else {
    uint64_t v3 = closure #1 in TokenGenerator._oneShotCompletion<A, B>(type:configuration:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v1 = v0[22];
  GenerativeConfigurationProtocol.stringRenderedPromptSanitizer.getter();
  if (v1)
  {
    uint64_t v2 = v0[15];
    uint64_t v3 = v0[13];
    uint64_t v4 = v0[14];
    (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[16]);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  else
  {
    uint64_t v7 = v0[15];
    uint64_t v9 = v0[10];
    uint64_t v8 = v0[11];
    uint64_t v10 = swift_task_alloc();
    *(void *)(v10 + 16) = v7;
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF16GenerativeModels39StringRenderedPromptSanitizerWithRunnerV_s5NeverO0cD10Foundation0efghI13ConfigurationVTg5Tm((void (*)(char *))partial apply for closure #1 in closure #1 in TokenGenerator._oneShotResponse<A, B>(type:configuration:), v10, MEMORY[0x263F41480], &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithRunner?, MEMORY[0x263F41610], v8);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v9, &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithRunner?);
    swift_task_dealloc();
    uint64_t v11 = (void *)swift_task_alloc();
    v0[23] = v11;
    void *v11 = v0;
    v11[1] = closure #1 in TokenGenerator._oneShotCompletion<A, B>(type:configuration:);
    uint64_t v12 = v0[18];
    uint64_t v13 = v0[11];
    uint64_t v14 = v0[3];
    return static TokenGenerator.scrubIfNeeded(inputPrompt:stringRenderedPromptSanitizerWithConfiguration:)(v14, v12, v13);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in TokenGenerator._oneShotCompletion<A, B>(type:configuration:);
  }
  else {
    uint64_t v2 = closure #1 in TokenGenerator._oneShotCompletion<A, B>(type:configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v4 = v0[15];
  uint64_t v3 = v0[16];
  uint64_t v5 = v0[13];
  uint64_t v6 = v0[14];
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[11], &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[16]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v4 = v0[15];
  uint64_t v3 = v0[16];
  uint64_t v5 = v0[13];
  uint64_t v6 = v0[14];
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[11], &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t protocol witness for CompletionLanguageModelProvidingOneShotGenerable._oneShotCompletion<A, B>(type:configuration:) in conformance TokenGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v17;
  void *v17 = v8;
  v17[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return TokenGenerator._oneShotCompletion<A, B>(type:configuration:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t TokenGenerator._completeSingleElement<A, B>(type:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[8] = a7;
  v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  _OWORD v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  uint64_t v9 = type metadata accessor for GenerativeFunctionInstrumenter();
  v8[10] = v9;
  v8[11] = *(void *)(v9 - 8);
  v8[12] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenGenerator._completeSingleElement<A, B>(type:configuration:), 0, 0);
}

uint64_t TokenGenerator._completeSingleElement<A, B>(type:configuration:)()
{
  uint64_t v1 = v0[9];
  if (*(void *)(v1 + 24)) {
    swift_bridgeObjectRetain();
  }
  uint64_t v2 = v0[12];
  uint64_t v4 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v6 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v7 = v0[4];
  GenerativeConfigurationProtocol.generateGenerativeFunctionInstrumenter(useCaseIdentifier:eventReporter:)();
  swift_bridgeObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[13] = v9;
  void v9[2] = v6;
  v9[3] = v5;
  v9[4] = v4;
  uint64_t v9[5] = v3;
  v9[6] = v7;
  v9[7] = v1;
  unsigned char v9[8] = v2;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[14] = v10;
  swift_getAssociatedConformanceWitness();
  *uint64_t v10 = v0;
  v10[1] = TokenGenerator._completeSingleElement<A, B>(type:configuration:);
  uint64_t v11 = v0[12];
  uint64_t v12 = v0[4];
  uint64_t v13 = v0[5];
  uint64_t v14 = v0[3];
  uint64_t v15 = v0[2];
  return TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(v15, v14, v12, AssociatedTypeWitness, v11, (uint64_t)&async function pointer to partial apply for closure #1 in TokenGenerator._completeSingleElement<A, B>(type:configuration:), (uint64_t)v9, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = TokenGenerator._completeSingleElement<A, B>(type:configuration:);
  }
  else {
    uint64_t v2 = TokenGenerator._completeSingleElement<A, B>(type:configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t closure #1 in TokenGenerator._completeSingleElement<A, B>(type:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 168) = v14;
  *(_OWORD *)(v8 + 152) = v13;
  *(void *)(v8 + 136) = a7;
  *(void *)(v8 + 144) = a8;
  *(void *)(v8 + 120) = a5;
  *(void *)(v8 + 128) = a6;
  *(unsigned char *)(v8 + 328) = a4;
  *(void *)(v8 + 104) = a2;
  *(void *)(v8 + 112) = a3;
  *(void *)(v8 + 96) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  *(void *)(v8 + 176) = swift_task_alloc();
  type metadata accessor for StringResponseSanitizerRunnerConfiguration();
  *(void *)(v8 + 184) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for StringResponseSanitizerWithConfiguration();
  *(void *)(v8 + 192) = v9;
  *(void *)(v8 + 200) = *(void *)(v9 - 8);
  *(void *)(v8 + 208) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for StringResponseSanitizerWithRunner();
  *(void *)(v8 + 216) = v10;
  *(void *)(v8 + 224) = *(void *)(v10 - 8);
  *(void *)(v8 + 232) = swift_task_alloc();
  *(void *)(v8 + 240) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithRunner?);
  *(void *)(v8 + 248) = swift_task_alloc();
  *(void *)(v8 + 256) = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in TokenGenerator._completeSingleElement<A, B>(type:configuration:), 0, 0);
}

uint64_t closure #1 in TokenGenerator._completeSingleElement<A, B>(type:configuration:)()
{
  GenerativeConfigurationProtocol.stringResponseSanitizer.getter();
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 224);
  outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 256), v1, &demangling cache variable for type metadata for StringResponseSanitizerWithRunner?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    char v4 = *(unsigned char *)(v0 + 328);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 248), &demangling cache variable for type metadata for StringResponseSanitizerWithRunner?);
    *(_OWORD *)(v0 + 32) = 0u;
    *(void *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 264) = v5;
    *uint64_t v5 = v0;
    v5[1] = closure #1 in TokenGenerator._completeSingleElement<A, B>(type:configuration:);
    uint64_t v6 = *(void *)(v0 + 104);
    uint64_t v7 = *(void *)(v0 + 112);
    uint64_t v8 = *(void *)(v0 + 96);
    return MEMORY[0x270F2EED8](v8, v6, v7, v4 & 1);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 240);
    uint64_t v11 = *(void *)(v0 + 224);
    uint64_t v10 = *(void *)(v0 + 232);
    uint64_t v12 = *(void *)(v0 + 216);
    uint64_t v13 = *(void *)(v0 + 176);
    uint64_t v14 = *(void *)(v0 + 136);
    (*(void (**)(uint64_t, void, uint64_t))(v11 + 32))(v9, *(void *)(v0 + 248), v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v9, v12);
    uint64_t v15 = type metadata accessor for GenerativeFunctionInstrumenter();
    uint64_t v16 = *(void *)(v15 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 280) = v17;
    void *v17 = v0;
    v17[1] = closure #1 in TokenGenerator._completeSingleElement<A, B>(type:configuration:);
    uint64_t v19 = *(void *)(v0 + 176);
    uint64_t v18 = *(void *)(v0 + 184);
    return TokenGenerator.responseSanitizerConfiguration(generativeFunctionInstrumenter:)(v18, v19);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)v1 + 16;
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v2, &demangling cache variable for type metadata for _StreamSanitizer?);
  if (v0) {
    uint64_t v3 = closure #1 in TokenGenerator._completeSingleElement<A, B>(type:configuration:);
  }
  else {
    uint64_t v3 = closure #1 in TokenGenerator._completeSingleElement<A, B>(type:configuration:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v2 = *v1;
  (*v1)[36] = v0;
  swift_task_dealloc();
  if (v0)
  {
    char v4 = v2[28];
    uint64_t v3 = v2[29];
    uint64_t v5 = v2[27];
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v2[22], &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v2[39] = (uint64_t)v6;
    v2[40] = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v6(v3, v5);
    uint64_t v7 = closure #1 in TokenGenerator._completeSingleElement<A, B>(type:configuration:);
  }
  else
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v2[22], &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    uint64_t v7 = closure #1 in TokenGenerator._completeSingleElement<A, B>(type:configuration:);
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t *boxed_opaque_existential_1Tm;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 192);
  char v4 = *(unsigned char *)(v0 + 328);
  StringResponseSanitizerWithConfiguration.init(stringResponseSanitizer:configuration:)();
  *(void *)(v0 + 80) = v3;
  *(void *)(v0 + 88) = lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type StringResponseSanitizerWithConfiguration and conformance StringResponseSanitizerWithConfiguration, MEMORY[0x263F415F0]);
  boxed_opaque_existential_1Tm = __swift_allocate_boxed_opaque_existential_1Tm((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 16))(boxed_opaque_existential_1Tm, v1, v3);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v6;
  *uint64_t v6 = v0;
  v6[1] = closure #1 in TokenGenerator._completeSingleElement<A, B>(type:configuration:);
  uint64_t v7 = *(void *)(v0 + 104);
  uint64_t v8 = *(void *)(v0 + 112);
  uint64_t v9 = *(void *)(v0 + 96);
  return MEMORY[0x270F2EED8](v9, v7, v8, v4 & 1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 304) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = closure #1 in TokenGenerator._completeSingleElement<A, B>(type:configuration:);
  }
  else
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v2 + 56, &demangling cache variable for type metadata for _StreamSanitizer?);
    uint64_t v3 = closure #1 in TokenGenerator._completeSingleElement<A, B>(type:configuration:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

uint64_t TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 960) = v8;
  *(void *)(v9 + 952) = v20;
  *(_OWORD *)(v9 + 936) = v19;
  *(void *)(v9 + 928) = v18;
  *(void *)(v9 + 920) = v17;
  *(void *)(v9 + 912) = v16;
  *(void *)(v9 + 904) = a8;
  *(void *)(v9 + 896) = a7;
  *(void *)(v9 + 888) = a6;
  *(void *)(v9 + 880) = a5;
  *(void *)(v9 + 872) = a4;
  *(void *)(v9 + 864) = a3;
  *(void *)(v9 + 856) = a1;
  *(void *)(v9 + 968) = *v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  *(void *)(v9 + 976) = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<String, Error>);
  *(void *)(v9 + 984) = v10;
  *(void *)(v9 + 992) = *(void *)(v10 - 8);
  *(void *)(v9 + 1000) = swift_task_alloc();
  uint64_t v11 = *(void *)(v18 - 8);
  *(void *)(v9 + 1008) = v11;
  *(void *)(v9 + 1016) = *(void *)(v11 + 64);
  *(void *)(v9 + 1024) = swift_task_alloc();
  *(void *)(v9 + 1032) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for GenerativeFunctionInstrumenter();
  *(void *)(v9 + 1040) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v9 + 1048) = v13;
  *(void *)(v9 + 1056) = *(void *)(v13 + 64);
  *(void *)(v9 + 1064) = swift_task_alloc();
  *(void *)(v9 + 1072) = swift_task_alloc();
  *(void *)(v9 + 1080) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (result: AsyncThrowingStream<String, Error>, duration: Double));
  *(void *)(v9 + 1088) = swift_task_alloc();
  *(void *)(v9 + 1096) = swift_task_alloc();
  *(void *)(v9 + 1104) = swift_task_alloc();
  *(void *)(v9 + 1112) = *(void *)(v17 - 8);
  *(void *)(v9 + 1120) = swift_task_alloc();
  *(void *)(v9 + 1128) = swift_task_alloc();
  *(void *)(v9 + 1136) = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:), 0, 0);
}

uint64_t TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)()
{
  GenerativeConfigurationProtocol.samplingParameters.getter(*(void *)(v0 + 952), v0 + 16);
  outlined init with take of Locale?(v0 + 16, v0 + 296, &demangling cache variable for type metadata for SamplingParameters?);
  outlined init with take of Locale?(v0 + 296, v0 + 160, &demangling cache variable for type metadata for SamplingParameters?);
  if (_s15TokenGeneration26SamplingParametersEnvelopeVSgWOg(v0 + 160) == 1)
  {
    char v31 = 1;
    uint64_t v1 = 0;
  }
  else
  {
    outlined release of SamplingParametersEnvelope(v0 + 296);
    uint64_t v1 = *(void *)(v0 + 264);
    char v31 = *(unsigned char *)(v0 + 272);
  }
  uint64_t v36 = *(void *)(v0 + 1056);
  uint64_t v2 = *(void *)(v0 + 1048);
  uint64_t v3 = *(void *)(v0 + 1040);
  uint64_t v4 = *(void *)(v0 + 1032);
  uint64_t v34 = *(void *)(v0 + 1064);
  uint64_t v35 = *(void *)(v0 + 1024);
  uint64_t v38 = *(void *)(v0 + 1016);
  uint64_t v5 = *(void *)(v0 + 1008);
  uint64_t v33 = v5;
  uint64_t v45 = *(void *)(v0 + 968);
  uint64_t v43 = *(void *)(v0 + 960);
  uint64_t v42 = *(void *)(v0 + 920);
  uint64_t v44 = *(void *)(v0 + 872);
  uint64_t v32 = *(void *)(v0 + 864);
  long long v39 = *(_OWORD *)(v0 + 928);
  long long v40 = *(_OWORD *)(v0 + 944);
  long long v41 = *(_OWORD *)(v0 + 904);
  uint64_t v6 = *(void *)(v0 + 928);
  uint64_t v37 = v6;
  uint64_t v7 = *(void (**)(void))(v2 + 16);
  uint64_t v8 = *(void *)(v0 + 1072);
  v7();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v9(v4, v32, v6);
  ((void (*)(uint64_t, uint64_t, uint64_t))v7)(v34, v8, v3);
  v9(v35, v4, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v11 = (v36 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (*(unsigned __int8 *)(v33 + 80) + v11 + 8) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  unint64_t v13 = (v38 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = swift_allocObject();
  *(void *)(v0 + 1144) = v14;
  *(_OWORD *)(v14 + 16) = v41;
  *(void *)(v14 + 32) = v42;
  *(_OWORD *)(v14 + 40) = v39;
  *(_OWORD *)(v14 + 56) = v40;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v14 + v10, v8, v3);
  *(void *)(v14 + v11) = v43;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v33 + 32))(v14 + v12, v4, v37);
  *(void *)(v14 + v13) = v44;
  *(void *)(v14 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8)) = v45;
  swift_retain();
  if (v31)
  {
    uint64_t v15 = *(void *)(v0 + 968);
    *(void *)(v0 + 1176) = mach_absolute_time();
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 1184) = v16;
    *uint64_t v16 = v0;
    v16[1] = TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
    uint64_t v17 = *(void *)(v0 + 1064);
    uint64_t v18 = *(void *)(v0 + 1024);
    uint64_t v19 = *(void *)(v0 + 1000);
    uint64_t v20 = *(void *)(v0 + 960);
    uint64_t v21 = *(void *)(v0 + 912);
    uint64_t v22 = *(void *)(v0 + 904);
    uint64_t v23 = *(void *)(v0 + 872);
    return closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(v19, v17, v20, v18, v23, v15, v22, v21);
  }
  else
  {
    uint64_t v25 = *(void *)(v0 + 1024);
    uint64_t v26 = *(void *)(v0 + 1008);
    uint64_t v27 = *(void *)(v0 + 928);
    (*(void (**)(void, void))(*(void *)(v0 + 1048) + 8))(*(void *)(v0 + 1064), *(void *)(v0 + 1040));
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    uint64_t v28 = (void *)swift_task_alloc();
    *(void *)(v0 + 1152) = v28;
    void v28[2] = &async function pointer to partial apply for closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
    v28[3] = v14;
    v28[4] = v1;
    uint64_t v29 = (void *)swift_task_alloc();
    *(void *)(v0 + 1160) = v29;
    *uint64_t v29 = v0;
    v29[1] = TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
    uint64_t v30 = *(void *)(v0 + 1096);
    return MEMORY[0x270FA22B8](v30);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 1168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1192) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[128];
  uint64_t v4 = v2[126];
  uint64_t v5 = v2[116];
  (*(void (**)(void, void))(v2[131] + 8))(v2[133], v2[130]);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v6 = TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  else {
    uint64_t v6 = TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

{
  uint64_t v0;
  double v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  uint64_t v22;

  uint64_t v1 = *(double *)(*(void *)(v0 + 1096) + *(int *)(*(void *)(v0 + 1080) + 48));
  (*(void (**)(void))(*(void *)(v0 + 992) + 32))(*(void *)(v0 + 1104));
  uint64_t v2 = *(void **)(v0 + 1168);
  uint64_t v3 = *(void *)(v0 + 1104);
  uint64_t v4 = *(void *)(v0 + 1080);
  uint64_t v5 = *(void *)(v0 + 952);
  swift_release();
  *(double *)(v3 + *(int *)(v4 + 48)) = v1;
  *(void *)(v0 + 840) = 0;
  *(unsigned char *)(v0 + 848) = 1;
  GenerativeConfigurationProtocol.samplingParameters.getter(v5, v0 + 704);
  if (v2)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 1104), &demangling cache variable for type metadata for (result: AsyncThrowingStream<String, Error>, duration: Double));
    MEMORY[0x261201A80](v2);
    GenerativeFunctionInstrumenter.executionEnd(error:)();

    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  else
  {
    outlined init with take of Locale?(v0 + 704, v0 + 568, &demangling cache variable for type metadata for SamplingParameters?);
    outlined init with take of Locale?(v0 + 568, v0 + 432, &demangling cache variable for type metadata for SamplingParameters?);
    if (_s15TokenGeneration26SamplingParametersEnvelopeVSgWOg(v0 + 432) != 1)
    {
      outlined release of SamplingParametersEnvelope(v0 + 568);
      if ((*(unsigned char *)(v0 + 544) & 1) == 0)
      {
        *(double *)(v0 + 840) = *(double *)(v0 + 536) - v1;
        *(unsigned char *)(v0 + 848) = 0;
      }
    }
    uint64_t v8 = *(void *)(v0 + 1104);
    uint64_t v9 = *(void *)(v0 + 1088);
    unint64_t v10 = *(void *)(v0 + 992);
    unint64_t v11 = *(void *)(v0 + 984);
    unint64_t v12 = *(void *)(v0 + 952);
    uint64_t v19 = *(_OWORD *)(v0 + 920);
    uint64_t v20 = *(_OWORD *)(v0 + 904);
    uint64_t v18 = *(_OWORD *)(v0 + 936);
    uint64_t v21 = *(_OWORD *)(v0 + 888);
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 1048) + 56))(*(void *)(v0 + 976), 1, 1, *(void *)(v0 + 1040));
    unint64_t v13 = *(int *)(v4 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v8, v11);
    *(double *)(v9 + v13) = v1;
    uint64_t v14 = swift_task_alloc();
    *(void *)(v0 + 1200) = v14;
    *(_OWORD *)(v14 + 16) = v20;
    *(_OWORD *)(v14 + 32) = v19;
    *(_OWORD *)(v14 + 48) = v18;
    *(void *)(v14 + 64) = v12;
    *(_OWORD *)(v14 + 72) = v21;
    *(void *)(v14 + 88) = v9;
    *(void *)(v14 + 96) = v0 + 840;
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 1208) = v15;
    *uint64_t v15 = v0;
    v15[1] = TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
    uint64_t v16 = *(void *)(v0 + 1128);
    uint64_t v17 = *(void *)(v0 + 976);
    return static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(v16, v17, (int *)&async function pointer to partial apply for closure #2 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:));
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  swift_task_dealloc();
  uint64_t v1 = *(void **)(v0 + 1168);
  swift_release();
  MEMORY[0x261201A80](v1);
  GenerativeFunctionInstrumenter.executionEnd(error:)();

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  uint64_t v31;

  uint64_t v1 = *(void *)(v0 + 1176);
  (*(void (**)(void, void, void))(*(void *)(v0 + 992) + 16))(*(void *)(v0 + 1104), *(void *)(v0 + 1000), *(void *)(v0 + 984));
  uint64_t v2 = mach_absolute_time();
  uint64_t v3 = v2 >= v1;
  uint64_t v4 = v2 - v1;
  if (!v3) {
    __break(1u);
  }
  *(_DWORD *)(v0 + 148) = 0;
  uint64_t v5 = *(void *)(v0 + 1000);
  uint64_t v6 = *(void *)(v0 + 992);
  uint64_t v7 = *(void *)(v0 + 984);
  *(_DWORD *)(v0 + 152) = 0;
  mach_timebase_info((mach_timebase_info_t)(v0 + 148));
  LODWORD(v8) = *(_DWORD *)(v0 + 148);
  LODWORD(v9) = *(_DWORD *)(v0 + 152);
  unint64_t v10 = (double)v4 * (double)v8 / ((double)v9 * 1000000000.0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  unint64_t v11 = *(void **)(v0 + 1192);
  unint64_t v12 = *(void *)(v0 + 1104);
  unint64_t v13 = *(void *)(v0 + 1080);
  uint64_t v14 = *(void *)(v0 + 952);
  swift_release();
  *(double *)(v12 + *(int *)(v13 + 48)) = v10;
  *(void *)(v0 + 840) = 0;
  *(unsigned char *)(v0 + 848) = 1;
  GenerativeConfigurationProtocol.samplingParameters.getter(v14, v0 + 704);
  if (v11)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 1104), &demangling cache variable for type metadata for (result: AsyncThrowingStream<String, Error>, duration: Double));
    MEMORY[0x261201A80](v11);
    GenerativeFunctionInstrumenter.executionEnd(error:)();

    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
  else
  {
    outlined init with take of Locale?(v0 + 704, v0 + 568, &demangling cache variable for type metadata for SamplingParameters?);
    outlined init with take of Locale?(v0 + 568, v0 + 432, &demangling cache variable for type metadata for SamplingParameters?);
    if (_s15TokenGeneration26SamplingParametersEnvelopeVSgWOg(v0 + 432) != 1)
    {
      outlined release of SamplingParametersEnvelope(v0 + 568);
      if ((*(unsigned char *)(v0 + 544) & 1) == 0)
      {
        *(double *)(v0 + 840) = *(double *)(v0 + 536) - v10;
        *(unsigned char *)(v0 + 848) = 0;
      }
    }
    uint64_t v17 = *(void *)(v0 + 1104);
    uint64_t v18 = *(void *)(v0 + 1088);
    uint64_t v19 = *(void *)(v0 + 992);
    uint64_t v20 = *(void *)(v0 + 984);
    uint64_t v21 = *(void *)(v0 + 952);
    uint64_t v28 = *(_OWORD *)(v0 + 920);
    uint64_t v29 = *(_OWORD *)(v0 + 904);
    uint64_t v27 = *(_OWORD *)(v0 + 936);
    uint64_t v30 = *(_OWORD *)(v0 + 888);
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 1048) + 56))(*(void *)(v0 + 976), 1, 1, *(void *)(v0 + 1040));
    uint64_t v22 = *(int *)(v13 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v17, v20);
    *(double *)(v18 + v22) = v10;
    uint64_t v23 = swift_task_alloc();
    *(void *)(v0 + 1200) = v23;
    *(_OWORD *)(v23 + 16) = v29;
    *(_OWORD *)(v23 + 32) = v28;
    *(_OWORD *)(v23 + 48) = v27;
    *(void *)(v23 + 64) = v21;
    *(_OWORD *)(v23 + 72) = v30;
    *(void *)(v23 + 88) = v18;
    *(void *)(v23 + 96) = v0 + 840;
    uint64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 1208) = v24;
    *uint64_t v24 = v0;
    v24[1] = TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
    uint64_t v25 = *(void *)(v0 + 1128);
    uint64_t v26 = *(void *)(v0 + 976);
    return static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(v25, v26, (int *)&async function pointer to partial apply for closure #2 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:));
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 1192);
  swift_release();
  MEMORY[0x261201A80](v1);
  GenerativeFunctionInstrumenter.executionEnd(error:)();

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1216) = v0;
  swift_task_dealloc();
  if (v0)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v2 + 976), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    swift_task_dealloc();
    uint64_t v3 = TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 1088);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v2 + 976), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    swift_task_dealloc();
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v4, &demangling cache variable for type metadata for (result: AsyncThrowingStream<String, Error>, duration: Double));
    uint64_t v3 = TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = v0[142];
  uint64_t v2 = v0[140];
  uint64_t v3 = v0[139];
  uint64_t v4 = v0[138];
  uint64_t v5 = v0[115];
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 32))(v1, v0[141], v5);
  GenerativeFunctionInstrumenter.inferenceEnd()();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v4, &demangling cache variable for type metadata for (result: AsyncThrowingStream<String, Error>, duration: Double));
  GenerativeFunctionInstrumenter.executionEnd(error:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v5);
  CompletionResponse.init(content:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[136];
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[138], &demangling cache variable for type metadata for (result: AsyncThrowingStream<String, Error>, duration: Double));
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for (result: AsyncThrowingStream<String, Error>, duration: Double));
  uint64_t v2 = (void *)v0[152];
  MEMORY[0x261201A80](v2);
  GenerativeFunctionInstrumenter.executionEnd(error:)();

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t TokenGenerator._completeMultiElement<A, B>(type:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[9] = a7;
  v8[10] = v7;
  v8[7] = a5;
  v8[8] = a6;
  v8[5] = a3;
  v8[6] = a4;
  v8[3] = a1;
  _OWORD v8[4] = a2;
  uint64_t v9 = type metadata accessor for GenerativeFunctionInstrumenter();
  v8[11] = v9;
  v8[12] = *(void *)(v9 - 8);
  v8[13] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenGenerator._completeMultiElement<A, B>(type:configuration:), 0, 0);
}

uint64_t TokenGenerator._completeMultiElement<A, B>(type:configuration:)()
{
  uint64_t v1 = v0[10];
  if (*(void *)(v1 + 24)) {
    swift_bridgeObjectRetain();
  }
  uint64_t v16 = v0[13];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[5];
  GenerativeConfigurationProtocol.generateGenerativeFunctionInstrumenter(useCaseIdentifier:eventReporter:)();
  swift_bridgeObjectRelease();
  swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Array();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[14] = v8;
  v8[2] = v4;
  v8[3] = v5;
  _OWORD v8[4] = v2;
  v8[5] = v3;
  v8[6] = v6;
  v8[7] = v1;
  v8[8] = v16;
  uint64_t v9 = (void *)swift_task_alloc();
  v0[15] = v9;
  type metadata accessor for GenerativeStream();
  v0[2] = swift_getAssociatedConformanceWitness();
  swift_getWitnessTable();
  *uint64_t v9 = v0;
  v9[1] = TokenGenerator._completeMultiElement<A, B>(type:configuration:);
  uint64_t v10 = v0[13];
  uint64_t v11 = v0[5];
  uint64_t v12 = v0[6];
  uint64_t v13 = v0[4];
  uint64_t v14 = v0[3];
  return TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(v14, v13, v11, v7, v10, (uint64_t)&async function pointer to partial apply for closure #1 in TokenGenerator._completeMultiElement<A, B>(type:configuration:), (uint64_t)v8, v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = TokenGenerator._completeMultiElement<A, B>(type:configuration:);
  }
  else {
    uint64_t v2 = TokenGenerator._completeMultiElement<A, B>(type:configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t closure #1 in TokenGenerator._completeMultiElement<A, B>(type:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 168) = v14;
  *(_OWORD *)(v8 + 152) = v13;
  *(void *)(v8 + 136) = a7;
  *(void *)(v8 + 144) = a8;
  *(void *)(v8 + 120) = a5;
  *(void *)(v8 + 128) = a6;
  *(unsigned char *)(v8 + 328) = a4;
  *(void *)(v8 + 104) = a2;
  *(void *)(v8 + 112) = a3;
  *(void *)(v8 + 96) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  *(void *)(v8 + 176) = swift_task_alloc();
  type metadata accessor for StringResponseSanitizerRunnerConfiguration();
  *(void *)(v8 + 184) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for StringResponseSanitizerWithConfiguration();
  *(void *)(v8 + 192) = v9;
  *(void *)(v8 + 200) = *(void *)(v9 - 8);
  *(void *)(v8 + 208) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for StringResponseSanitizerWithRunner();
  *(void *)(v8 + 216) = v10;
  *(void *)(v8 + 224) = *(void *)(v10 - 8);
  *(void *)(v8 + 232) = swift_task_alloc();
  *(void *)(v8 + 240) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithRunner?);
  *(void *)(v8 + 248) = swift_task_alloc();
  *(void *)(v8 + 256) = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in TokenGenerator._completeMultiElement<A, B>(type:configuration:), 0, 0);
}

uint64_t closure #1 in TokenGenerator._completeMultiElement<A, B>(type:configuration:)()
{
  GenerativeConfigurationProtocol.stringResponseSanitizer.getter();
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 224);
  outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 256), v1, &demangling cache variable for type metadata for StringResponseSanitizerWithRunner?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    char v4 = *(unsigned char *)(v0 + 328);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 248), &demangling cache variable for type metadata for StringResponseSanitizerWithRunner?);
    *(_OWORD *)(v0 + 32) = 0u;
    *(void *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 264) = v5;
    *uint64_t v5 = v0;
    v5[1] = closure #1 in TokenGenerator._completeSingleElement<A, B>(type:configuration:);
    uint64_t v6 = *(void *)(v0 + 160);
    uint64_t v7 = *(void *)(v0 + 144);
    uint64_t v8 = *(void *)(v0 + 104);
    uint64_t v9 = *(void *)(v0 + 112);
    uint64_t v10 = *(void *)(v0 + 96);
    return MEMORY[0x270F2EEE0](v10, v8, v9, v4 & 1, v0 + 16, v7, v6);
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 240);
    uint64_t v13 = *(void *)(v0 + 224);
    uint64_t v12 = *(void *)(v0 + 232);
    uint64_t v14 = *(void *)(v0 + 216);
    uint64_t v15 = *(void *)(v0 + 176);
    uint64_t v16 = *(void *)(v0 + 136);
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 32))(v11, *(void *)(v0 + 248), v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v11, v14);
    uint64_t v17 = type metadata accessor for GenerativeFunctionInstrumenter();
    uint64_t v18 = *(void *)(v17 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 280) = v19;
    *uint64_t v19 = v0;
    v19[1] = closure #1 in TokenGenerator._completeMultiElement<A, B>(type:configuration:);
    uint64_t v21 = *(void *)(v0 + 176);
    uint64_t v20 = *(void *)(v0 + 184);
    return TokenGenerator.responseSanitizerConfiguration(generativeFunctionInstrumenter:)(v20, v21);
  }
}

{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v2 = *v1;
  (*v1)[36] = v0;
  swift_task_dealloc();
  if (v0)
  {
    char v4 = v2[28];
    uint64_t v3 = v2[29];
    uint64_t v5 = v2[27];
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v2[22], &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v2[39] = (uint64_t)v6;
    v2[40] = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v6(v3, v5);
    uint64_t v7 = closure #1 in TokenGenerator._completeSingleElement<A, B>(type:configuration:);
  }
  else
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v2[22], &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    uint64_t v7 = closure #1 in TokenGenerator._completeMultiElement<A, B>(type:configuration:);
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t *boxed_opaque_existential_1Tm;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 192);
  char v4 = *(unsigned char *)(v0 + 328);
  StringResponseSanitizerWithConfiguration.init(stringResponseSanitizer:configuration:)();
  *(void *)(v0 + 80) = v3;
  *(void *)(v0 + 88) = lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type StringResponseSanitizerWithConfiguration and conformance StringResponseSanitizerWithConfiguration, MEMORY[0x263F415F0]);
  boxed_opaque_existential_1Tm = __swift_allocate_boxed_opaque_existential_1Tm((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 16))(boxed_opaque_existential_1Tm, v1, v3);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v6;
  *uint64_t v6 = v0;
  v6[1] = closure #1 in TokenGenerator._completeSingleElement<A, B>(type:configuration:);
  uint64_t v7 = *(void *)(v0 + 160);
  uint64_t v8 = *(void *)(v0 + 144);
  uint64_t v9 = *(void *)(v0 + 104);
  uint64_t v10 = *(void *)(v0 + 112);
  uint64_t v11 = *(void *)(v0 + 96);
  return MEMORY[0x270F2EEE0](v11, v9, v10, v4 & 1, v0 + 56, v8, v7);
}

uint64_t closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 120) = v16;
  *(_OWORD *)(v8 + 104) = v15;
  *(void *)(v8 + 88) = v13;
  *(void *)(v8 + 96) = v14;
  *(void *)(v8 + 72) = a7;
  *(void *)(v8 + 80) = a8;
  *(void *)(v8 + 56) = a5;
  *(void *)(v8 + 64) = a6;
  *(void *)(v8 + 40) = a3;
  *(void *)(v8 + 48) = a4;
  *(void *)(v8 + 24) = a1;
  *(void *)(v8 + 32) = a2;
  *(void *)(v8 + 128) = *(void *)(v14 - 8);
  *(void *)(v8 + 136) = swift_task_alloc();
  type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel(0);
  *(void *)(v8 + 144) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Prompt();
  *(void *)(v8 + 152) = v9;
  *(void *)(v8 + 160) = *(void *)(v9 - 8);
  *(void *)(v8 + 168) = swift_task_alloc();
  *(void *)(v8 + 176) = swift_task_alloc();
  *(void *)(v8 + 184) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringRenderedPromptSanitizerWithRunner?);
  *(void *)(v8 + 192) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  *(void *)(v8 + 200) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  *(void *)(v8 + 208) = swift_task_alloc();
  *(void *)(v8 + 216) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for StringRenderedPromptSanitizerRunnerConfiguration();
  *(void *)(v8 + 224) = v10;
  *(void *)(v8 + 232) = *(void *)(v10 - 8);
  *(void *)(v8 + 240) = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:), 0, 0);
}

uint64_t closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[4];
  GenerativeFunctionInstrumenter.executionBegin()();
  GenerativeFunctionInstrumenter.promptConstructionBegin()();
  uint64_t v3 = type metadata accessor for GenerativeFunctionInstrumenter();
  v0[31] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  uint64_t v5 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56);
  v0[32] = v5;
  v0[33] = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v5(v1, 0, 1, v3);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[34] = v6;
  *uint64_t v6 = v0;
  v6[1] = closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  uint64_t v7 = v0[30];
  uint64_t v8 = v0[27];
  return TokenGenerator.renderedPromptSanitizerConfiguration(generativeFunctionInstrumenter:)(v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 280) = v0;
  swift_task_dealloc();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v2 + 216), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  if (v0) {
    uint64_t v3 = closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  else {
    uint64_t v3 = closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v1 = v0[35];
  GenerativeConfigurationProtocol.stringRenderedPromptSanitizer.getter();
  if (v1)
  {
    (*(void (**)(void, void))(v0[29] + 8))(v0[30], v0[28]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    uint64_t v4 = v0[30];
    uint64_t v6 = v0[24];
    uint64_t v5 = v0[25];
    uint64_t v7 = swift_task_alloc();
    *(void *)(v7 + 16) = v4;
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF16GenerativeModels39StringRenderedPromptSanitizerWithRunnerV_s5NeverO0cD10Foundation0efghI13ConfigurationVTg5Tm((void (*)(char *))partial apply for closure #1 in closure #1 in TokenGenerator._oneShotResponse<A, B>(type:configuration:), v7, MEMORY[0x263F41480], &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithRunner?, MEMORY[0x263F41610], v5);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v6, &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithRunner?);
    swift_task_dealloc();
    uint64_t v8 = (void *)swift_task_alloc();
    v0[36] = v8;
    *uint64_t v8 = v0;
    v8[1] = closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
    uint64_t v9 = v0[22];
    uint64_t v10 = v0[15];
    uint64_t v11 = v0[12];
    return GenerativeConfigurationProtocol<>.renderToTokenGenerationPrompt()(v9, v11, v10);
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v2 = (void *)*v1;
  v2[37] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:), 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[38] = v3;
    *uint64_t v3 = v2;
    v3[1] = closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
    uint64_t v4 = v2[25];
    uint64_t v6 = v2[22];
    uint64_t v5 = v2[23];
    return static TokenGenerator.scrubIfNeeded(inputPrompt:stringRenderedPromptSanitizerWithConfiguration:)(v5, v6, v4);
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  void (*v8)(uint64_t, uint64_t);
  uint64_t (*v9)();
  uint64_t v11;

  uint64_t v2 = (void *)*v1;
  v2[39] = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[22];
  uint64_t v4 = v2[20];
  uint64_t v5 = v2[19];
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  uint64_t v6 = v4 + 8;
  uint64_t v7 = v8;
  if (v0)
  {
    v7(v3, v5);
    uint64_t v9 = closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  else
  {
    v2[40] = v7;
    v2[41] = v6 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v7(v3, v5);
    uint64_t v9 = closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  return MEMORY[0x270FA2498](v9, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[6];
  (*(void (**)(void, void, void))(v0[20] + 16))(v0[21], v0[23], v0[19]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[42] = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  uint64_t v6 = v0[21];
  uint64_t v8 = v0[17];
  uint64_t v7 = v0[18];
  uint64_t v9 = v0[15];
  uint64_t v10 = v0[12];
  return TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:completionConfiguration:)(v7, v6, v8, v10, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 344) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  else {
    uint64_t v2 = closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  uint64_t v17;

  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v14 = *(_OWORD *)(v0 + 88);
  long long v15 = *(_OWORD *)(v0 + 72);
  uint64_t v13 = *(_OWORD *)(v0 + 104);
  uint64_t v16 = *(_OWORD *)(v0 + 48);
  GenerativeFunctionInstrumenter.promptConstructionEnd()();
  GenerativeFunctionInstrumenter.inferenceBegin()();
  v1(v3, 1, 1, v2);
  uint64_t v8 = swift_task_alloc();
  *(void *)(v0 + 352) = v8;
  *(_OWORD *)(v8 + 16) = v15;
  *(_OWORD *)(v8 + 32) = v14;
  *(_OWORD *)(v8 + 48) = v13;
  *(void *)(v8 + 64) = v5;
  *(void *)(v8 + 72) = v7;
  *(void *)(v8 + 80) = v4;
  *(_OWORD *)(v8 + 88) = v16;
  *(void *)(v8 + 104) = v6;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 360) = v9;
  *uint64_t v9 = v0;
  v9[1] = closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  uint64_t v10 = *(void *)(v0 + 208);
  uint64_t v11 = *(void *)(v0 + 24);
  return specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(v11, v10, (int *)&async function pointer to partial apply for closure #2 in closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 368) = v0;
  swift_task_dealloc();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v2 + 208), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  swift_task_dealloc();
  if (v0) {
    uint64_t v3 = closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  else {
    uint64_t v3 = closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 144);
  (*(void (**)(void, void))(v0 + 320))(*(void *)(v0 + 184), *(void *)(v0 + 152));
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v4, &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v5, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[29];
  uint64_t v1 = v0[30];
  uint64_t v3 = v0[28];
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[25], &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[29];
  uint64_t v1 = v0[30];
  uint64_t v3 = v0[28];
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[25], &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 200);
  (*(void (**)(void, void))(v0 + 320))(*(void *)(v0 + 184), *(void *)(v0 + 152));
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v4, &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 144);
  (*(void (**)(void, void))(v0 + 320))(*(void *)(v0 + 184), *(void *)(v0 + 152));
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v4, &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v5, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t closure #2 in closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[82] = v17;
  v8[81] = v16;
  v8[80] = v15;
  v8[79] = v14;
  v8[78] = v13;
  v8[77] = a8;
  v8[76] = a7;
  v8[75] = a6;
  v8[74] = a5;
  v8[73] = a4;
  v8[72] = a3;
  v8[71] = a2;
  v8[70] = a1;
  v8[83] = *(void *)(v14 - 8);
  v8[84] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for GenerativeFunctionInstrumenter();
  v8[85] = v9;
  v8[86] = *(void *)(v9 - 8);
  v8[87] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ToolChoice?);
  v8[88] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for TokenStream();
  v8[89] = v10;
  v8[90] = *(void *)(v10 - 8);
  v8[91] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #2 in closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:), 0, 0);
}

uint64_t closure #2 in closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)()
{
  uint64_t v37 = v0;
  GenerativeConfigurationProtocol.samplingParameters.getter(*(void *)(v0 + 656), v0 + 16);
  uint64_t v26 = v0 + 424;
  uint64_t v22 = v0 + 288;
  uint64_t v28 = *(void *)(v0 + 712);
  uint64_t v1 = *(void *)(v0 + 696);
  uint64_t v2 = *(void *)(v0 + 688);
  uint64_t v19 = *(void *)(v0 + 680);
  uint64_t v20 = *(void (***)(char *, uint64_t))(v0 + 704);
  uint64_t v32 = *(void *)(v0 + 728);
  uint64_t v33 = *(void *)(v0 + 672);
  uint64_t v3 = *(void *)(v0 + 664);
  uint64_t v4 = *(void *)(v0 + 656);
  uint64_t v30 = *(void *)(v0 + 720);
  uint64_t v31 = *(void *)(v0 + 648);
  uint64_t v17 = *(void *)(v0 + 600);
  uint64_t v5 = *(void *)(v0 + 584);
  uint64_t v24 = *(void *)(v0 + 576);
  uint64_t v25 = *(void *)(v0 + 592);
  long long v27 = *(_OWORD *)(v0 + 616);
  long long v34 = *(_OWORD *)(v0 + 632);
  uint64_t v23 = *(void *)(v0 + 616);
  uint64_t v29 = *(void *)(v0 + 608);
  outlined init with take of Locale?(v0 + 16, v0 + 152, &demangling cache variable for type metadata for SamplingParameters?);
  outlined init with take of Locale?(v0 + 152, v0 + 288, &demangling cache variable for type metadata for SamplingParameters?);
  uint64_t v6 = v4;
  uint64_t v7 = GenerativeConfigurationProtocol.tools.getter();
  uint64_t v8 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8EE78];
  if (v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = MEMORY[0x263F8EE78];
  }
  uint64_t v21 = v9;
  GenerativeConfigurationProtocol.toolChoice.getter(v34, v6);
  uint64_t v10 = GenerativeConfigurationProtocol.documents.getter();
  if (v10) {
    uint64_t v11 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v10;
  }
  else {
    uint64_t v11 = v8;
  }
  uint64_t v18 = v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v17, v19);
  (*(void (**)(uint64_t, uint64_t, void))(v3 + 16))(v33, v5, v34);
  RequestMetadata.init<A>(generativeFunctionInstrumenter:configuration:)(v1, v33, v34, v35);
  v36[0] = v35[0];
  v36[1] = v35[1];
  v36[2] = v35[2];
  v36[3] = v35[3];
  v36[4] = v35[4];
  v36[5] = v35[5];
  v36[6] = v35[6];
  TokenGenerator.complete<A>(promptInputFromGenerativeModel:parameters:tools:toolChoice:documents:generating:metadata:)(v24, v22, v21, v20, v18, v25, v36, v23, v32, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v20, &demangling cache variable for type metadata for ToolChoice?);
  outlined init with take of Locale?(v22, v26, &demangling cache variable for type metadata for SamplingParameters?);
  outlined release of SamplingParametersEnvelope(v26);
  type metadata accessor for TokenStream.AsyncIterator();
  uint64_t v12 = swift_allocBox();
  TokenStream.makeAsyncIterator()(v13);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v29;
  *(_OWORD *)(v14 + 24) = v27;
  *(_OWORD *)(v14 + 40) = v34;
  *(void *)(v14 + 56) = v31;
  *(void *)(v14 + 64) = v6;
  *(void *)(v14 + 72) = v12;
  swift_retain();
  AsyncThrowingStream.init<>(unfolding:)();
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v28);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t closure #1 in closure #2 in closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(uint64_t a1)
{
  v1[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Token?);
  v1[6] = swift_task_alloc();
  v1[7] = type metadata accessor for TokenStream.AsyncIterator();
  v1[8] = swift_projectBox();
  return MEMORY[0x270FA2498](closure #1 in closure #2 in closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:), 0, 0);
}

uint64_t closure #1 in closure #2 in closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)()
{
  swift_beginAccess();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in closure #2 in closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  uint64_t v2 = *(void *)(v0 + 48);
  return TokenStream.AsyncIterator.next()(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in closure #2 in closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  else
  {
    swift_endAccess();
    uint64_t v2 = closure #1 in closure #2 in closure #1 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t closure #2 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return MEMORY[0x270FA2498](closure #2 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:), 0, 0);
}

uint64_t closure #2 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)()
{
  uint64_t v1 = (uint64_t *)v0[6];
  uint64_t v2 = *v1;
  uint64_t v3 = *((unsigned __int8 *)v1 + 8);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[3] + *(int *)v0[3]);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[7] = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #2 in TokenGenerator._complete<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[2];
  return v8(v6, v5, v2, v3);
}

uint64_t protocol witness for CompletionLanguageModelProvidingGenerativeStreamable._completeMultiElement<A, B>(type:configuration:) in conformance TokenGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v15;
  *uint64_t v15 = v7;
  v15[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return TokenGenerator._completeMultiElement<A, B>(type:configuration:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for CompletionLanguageModelProvidingGenerativeStreamable._completeSingleElement<A, B>(type:configuration:) in conformance TokenGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v15;
  *uint64_t v15 = v7;
  v15[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return TokenGenerator._completeSingleElement<A, B>(type:configuration:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t TokenGenerator._respond<A>(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v4[5] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ChatMessageRole();
  v4[6] = v8;
  v4[7] = *(void *)(v8 - 8);
  v4[8] = swift_task_alloc();
  v4[9] = type metadata accessor for TokenGeneratorChatResponseStringStream(0);
  uint64_t v9 = swift_task_alloc();
  v4[10] = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  v4[11] = v10;
  *uint64_t v10 = v4;
  v10[1] = TokenGenerator._respond<A>(configuration:);
  return TokenGenerator._streamResponse<A>(configuration:)(v9, a2, a3, a4);
}

uint64_t TokenGenerator._respond<A>(configuration:)()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = TokenGenerator._respond<A>(configuration:);
  }
  else {
    uint64_t v2 = TokenGenerator._respond<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[5];
  (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], *MEMORY[0x263F62118], v0[6]);
  uint64_t v4 = v2 + *(int *)(v1 + 24);
  uint64_t v5 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v4, v5);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v3, 0, 1, v5);
  uint64_t v7 = swift_task_alloc();
  v0[13] = v7;
  *(void *)(v7 + 16) = v2;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[14] = v8;
  *uint64_t v8 = v0;
  v8[1] = TokenGenerator._respond<A>(configuration:);
  uint64_t v9 = v0[5];
  return specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(v9, (int *)&async function pointer to partial apply for specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect());
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[10];
  swift_bridgeObjectRelease();
  v0[2] = v1;
  v0[3] = v2;
  ChatMessageResponse.init(role:content:)();
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v3, type metadata accessor for TokenGeneratorChatResponseStringStream);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[10];
  (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v1, type metadata accessor for TokenGeneratorChatResponseStringStream);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TokenGenerator._respond<A>(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (void *)*v4;
  v8[15] = v3;
  swift_task_dealloc();
  uint64_t v9 = v8[5];
  if (v3)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v9, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    swift_task_dealloc();
    uint64_t v10 = TokenGenerator._respond<A>(configuration:);
  }
  else
  {
    unsigned char v8[16] = a3;
    v8[17] = a2;
    v8[18] = a1;
    swift_task_dealloc();
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v9, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    uint64_t v10 = TokenGenerator._respond<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v10, 0, 0);
}

uint64_t TokenGenerator._streamResponse<A>(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[109] = v4;
  v5[108] = a4;
  v5[107] = a3;
  v5[106] = a2;
  v5[105] = a1;
  v5[110] = *v4;
  v5[111] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter));
  v5[112] = swift_task_alloc();
  uint64_t v7 = *(void *)(a3 - 8);
  v5[113] = v7;
  v5[114] = *(void *)(v7 + 64);
  v5[115] = swift_task_alloc();
  v5[116] = swift_task_alloc();
  v5[117] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (result: (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter), duration: Double));
  v5[118] = swift_task_alloc();
  v5[119] = swift_task_alloc();
  v5[120] = swift_task_alloc();
  v5[121] = swift_task_alloc();
  v5[122] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenGenerator._streamResponse<A>(configuration:), 0, 0);
}

uint64_t TokenGenerator._streamResponse<A>(configuration:)()
{
  GenerativeConfigurationProtocol.samplingParameters.getter(*(void *)(v0 + 864), v0 + 16);
  outlined init with take of Locale?(v0 + 16, v0 + 296, &demangling cache variable for type metadata for SamplingParameters?);
  outlined init with take of Locale?(v0 + 296, v0 + 160, &demangling cache variable for type metadata for SamplingParameters?);
  if (_s15TokenGeneration26SamplingParametersEnvelopeVSgWOg(v0 + 160) == 1)
  {
    char v24 = 1;
    uint64_t v1 = 0;
  }
  else
  {
    outlined release of SamplingParametersEnvelope(v0 + 296);
    uint64_t v1 = *(void *)(v0 + 264);
    char v24 = *(unsigned char *)(v0 + 272);
  }
  uint64_t v2 = *(void *)(v0 + 928);
  uint64_t v3 = *(void *)(v0 + 920);
  uint64_t v4 = *(void *)(v0 + 912);
  uint64_t v5 = *(void *)(v0 + 904);
  uint64_t v6 = *(void *)(v0 + 880);
  uint64_t v7 = *(void *)(v0 + 872);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  long long v25 = *(_OWORD *)(v0 + 856);
  uint64_t v9 = *(void *)(v0 + 856);
  v8(v2, *(void *)(v0 + 848), v9);
  v8(v3, v2, v9);
  unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v11 = (v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = swift_allocObject();
  *(void *)(v0 + 984) = v12;
  *(_OWORD *)(v12 + 16) = v25;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v12 + v10, v2, v9);
  *(void *)(v12 + v11) = v7;
  *(void *)(v12 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)) = v6;
  swift_retain_n();
  if (v24)
  {
    uint64_t v13 = *(void *)(v0 + 880);
    *(void *)(v0 + 1016) = mach_absolute_time();
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 1024) = v14;
    void *v14 = v0;
    v14[1] = TokenGenerator._streamResponse<A>(configuration:);
    uint64_t v15 = *(void *)(v0 + 920);
    uint64_t v16 = *(void *)(v0 + 896);
    uint64_t v17 = *(void *)(v0 + 872);
    uint64_t v18 = *(void *)(v0 + 864);
    uint64_t v19 = *(void *)(v0 + 856);
    return closure #1 in TokenGenerator._streamResponse<A>(configuration:)(v16, v15, v17, v13, v19, v18);
  }
  else
  {
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 992) = v21;
    void v21[2] = &async function pointer to partial apply for closure #1 in TokenGenerator._streamResponse<A>(configuration:);
    v21[3] = v12;
    void v21[4] = v1;
    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 1000) = v22;
    *uint64_t v22 = v0;
    v22[1] = TokenGenerator._streamResponse<A>(configuration:);
    uint64_t v23 = *(void *)(v0 + 968);
    return MEMORY[0x270FA22B8](v23);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 1008) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = TokenGenerator._streamResponse<A>(configuration:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = TokenGenerator._streamResponse<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 1032) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = TokenGenerator._streamResponse<A>(configuration:);
  }
  else {
    uint64_t v2 = TokenGenerator._streamResponse<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  char v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  uint64_t v1 = *(void *)(v0 + 968);
  uint64_t v2 = *(double *)(v1 + *(int *)(*(void *)(v0 + 936) + 48));
  outlined init with take of Locale?(v1, *(void *)(v0 + 976), &demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter));
  uint64_t v44 = *(void *)(v0 + 1008);
  uint64_t v3 = *(void *)(v0 + 976);
  uint64_t v4 = *(void *)(v0 + 936);
  uint64_t v5 = *(void *)(v0 + 920);
  uint64_t v6 = *(void *)(v0 + 904);
  uint64_t v7 = *(void *)(v0 + 864);
  uint64_t v8 = *(void *)(v0 + 856);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v8);
  uint64_t v9 = v4;
  swift_release();
  *(double *)(v3 + *(int *)(v4 + 48)) = v2;
  GenerativeConfigurationProtocol.samplingParameters.getter(v7, v0 + 568);
  if (v44)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 976), &demangling cache variable for type metadata for (result: (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter), duration: Double));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    outlined init with take of Locale?(v0 + 568, v0 + 432, &demangling cache variable for type metadata for SamplingParameters?);
    outlined init with take of Locale?(v0 + 432, v0 + 704, &demangling cache variable for type metadata for SamplingParameters?);
    unint64_t v11 = 0.0;
    if (_s15TokenGeneration26SamplingParametersEnvelopeVSgWOg(v0 + 704) == 1
      || (outlined release of SamplingParametersEnvelope(v0 + 432), (*(unsigned char *)(v0 + 816) & 1) != 0))
    {
      uint64_t v30 = 1;
    }
    else
    {
      uint64_t v30 = 0;
      unint64_t v11 = *(double *)(v0 + 808) - v2;
    }
    uint64_t v43 = *(void *)(v0 + 976);
    uint64_t v12 = *(void *)(v0 + 960);
    uint64_t v45 = *(void *)(v0 + 952);
    uint64_t v13 = *(void *)(v0 + 888);
    long long v40 = *(void *)(v0 + 840);
    uint64_t v14 = *(int *)(v13 + 48);
    uint64_t v15 = v43 + v14;
    long long v34 = v43 + v14;
    uint64_t v16 = *(int *)(v13 + 64);
    uint64_t v17 = v43 + v16;
    uint64_t v38 = *(void *)(v0 + 944);
    long long v39 = *(int *)(v4 + 48);
    uint64_t v18 = v12 + v14;
    uint64_t v19 = v12 + v16;
    long long v41 = v12 + v16;
    uint64_t v42 = v12 + v14;
    uint64_t v20 = v12;
    uint64_t v36 = v12;
    outlined init with copy of Prompt.Rendering?(v43, v12, &demangling cache variable for type metadata for TokenStream<String>);
    outlined init with copy of Prompt.Rendering?(v15, v18, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    uint64_t v21 = type metadata accessor for GenerativeFunctionInstrumenter();
    uint64_t v37 = *(void *)(v21 - 8);
    uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16);
    v31(v19, v17, v21);
    *(double *)(v20 + v39) = v2;
    uint64_t v32 = *(int *)(v9 + 48);
    uint64_t v22 = v45 + *(int *)(v13 + 48);
    uint64_t v35 = v22;
    uint64_t v23 = v45 + *(int *)(v13 + 64);
    outlined init with copy of Prompt.Rendering?(v43, v45, &demangling cache variable for type metadata for TokenStream<String>);
    outlined init with copy of Prompt.Rendering?(v34, v22, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    v31(v23, v17, v21);
    *(double *)(v45 + v32) = v2;
    uint64_t v33 = *(int *)(v9 + 48);
    char v24 = v38 + *(int *)(v13 + 48);
    long long v25 = v38 + *(int *)(v13 + 64);
    outlined init with copy of Prompt.Rendering?(v43, v38, &demangling cache variable for type metadata for TokenStream<String>);
    outlined init with copy of Prompt.Rendering?(v34, v24, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    v31(v25, v17, v21);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v43, &demangling cache variable for type metadata for (result: (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter), duration: Double));
    *(double *)(v38 + v33) = v2;
    outlined init with take of Locale?(v36, v40, &demangling cache variable for type metadata for TokenStream<String>);
    uint64_t v26 = (int *)type metadata accessor for TokenGeneratorChatResponseStringStream(0);
    outlined init with take of Locale?(v35, v40 + v26[5], &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v40 + v26[6], v25, v21);
    long long v27 = v40 + v26[7];
    *(double *)long long v27 = v11;
    *(unsigned char *)(v27 + 8) = v30;
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v24, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v38, &demangling cache variable for type metadata for TokenStream<String>);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v28(v23, v21);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v45, &demangling cache variable for type metadata for TokenStream<String>);
    v28(v41, v21);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v42, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v10();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  swift_task_dealloc();
  uint64_t v1 = v0[115];
  uint64_t v2 = v0[113];
  uint64_t v3 = v0[107];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  uint64_t v1 = *(void *)(v0 + 1016);
  outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 896), *(void *)(v0 + 976), &demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter));
  uint64_t v2 = mach_absolute_time();
  uint64_t v3 = v2 - v1;
  if (v2 < v1) {
    __break(1u);
  }
  *(_DWORD *)(v0 + 148) = 0;
  uint64_t v4 = *(void *)(v0 + 896);
  *(_DWORD *)(v0 + 152) = 0;
  mach_timebase_info((mach_timebase_info_t)(v0 + 148));
  LODWORD(v5) = *(_DWORD *)(v0 + 148);
  LODWORD(v6) = *(_DWORD *)(v0 + 152);
  uint64_t v7 = (double)v3 * (double)v5 / ((double)v6 * 1000000000.0);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v4, &demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter));
  uint64_t v8 = *(void *)(v0 + 1032);
  uint64_t v9 = *(void *)(v0 + 976);
  unint64_t v10 = *(void *)(v0 + 936);
  unint64_t v11 = *(void *)(v0 + 920);
  uint64_t v12 = *(void *)(v0 + 904);
  uint64_t v13 = *(void *)(v0 + 864);
  uint64_t v14 = *(void *)(v0 + 856);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v14);
  uint64_t v15 = v10;
  swift_release();
  *(double *)(v9 + *(int *)(v10 + 48)) = v7;
  GenerativeConfigurationProtocol.samplingParameters.getter(v13, v0 + 568);
  if (v8)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 976), &demangling cache variable for type metadata for (result: (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter), duration: Double));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    outlined init with take of Locale?(v0 + 568, v0 + 432, &demangling cache variable for type metadata for SamplingParameters?);
    outlined init with take of Locale?(v0 + 432, v0 + 704, &demangling cache variable for type metadata for SamplingParameters?);
    uint64_t v17 = 0.0;
    if (_s15TokenGeneration26SamplingParametersEnvelopeVSgWOg(v0 + 704) == 1
      || (outlined release of SamplingParametersEnvelope(v0 + 432), (*(unsigned char *)(v0 + 816) & 1) != 0))
    {
      uint64_t v37 = 1;
    }
    else
    {
      uint64_t v37 = 0;
      uint64_t v17 = *(double *)(v0 + 808) - v7;
    }
    int v51 = *(void *)(v0 + 976);
    uint64_t v18 = *(void *)(v0 + 960);
    uint64_t v52 = *(void *)(v0 + 952);
    uint64_t v19 = *(void *)(v0 + 888);
    uint64_t v48 = *(void *)(v0 + 840);
    uint64_t v20 = *(int *)(v19 + 48);
    uint64_t v21 = v51 + v20;
    uint64_t v42 = v51 + v20;
    uint64_t v22 = *(int *)(v19 + 64);
    uint64_t v23 = v51 + v22;
    uint64_t v46 = *(void *)(v0 + 944);
    uint64_t v47 = *(int *)(v15 + 48);
    char v24 = v18 + v20;
    long long v25 = v18 + v22;
    uint64_t v49 = v18 + v22;
    uint64_t v50 = v18 + v20;
    uint64_t v26 = v18;
    uint64_t v44 = v18;
    outlined init with copy of Prompt.Rendering?(v51, v18, &demangling cache variable for type metadata for TokenStream<String>);
    outlined init with copy of Prompt.Rendering?(v21, v24, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    uint64_t v38 = type metadata accessor for GenerativeFunctionInstrumenter();
    long long v39 = v23;
    uint64_t v45 = *(void *)(v38 - 8);
    long long v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16);
    uint64_t v28 = v23;
    v27(v25, v23, v38);
    *(double *)(v26 + v47) = v7;
    long long v40 = *(int *)(v15 + 48);
    uint64_t v29 = v52 + *(int *)(v19 + 48);
    uint64_t v43 = v29;
    uint64_t v30 = v52 + *(int *)(v19 + 64);
    outlined init with copy of Prompt.Rendering?(v51, v52, &demangling cache variable for type metadata for TokenStream<String>);
    outlined init with copy of Prompt.Rendering?(v42, v29, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    v27(v30, v28, v38);
    *(double *)(v52 + v40) = v7;
    long long v41 = *(int *)(v15 + 48);
    uint64_t v31 = v46 + *(int *)(v19 + 48);
    uint64_t v32 = v46 + *(int *)(v19 + 64);
    outlined init with copy of Prompt.Rendering?(v51, v46, &demangling cache variable for type metadata for TokenStream<String>);
    outlined init with copy of Prompt.Rendering?(v42, v31, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    v27(v32, v39, v38);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v51, &demangling cache variable for type metadata for (result: (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter), duration: Double));
    *(double *)(v46 + v41) = v7;
    outlined init with take of Locale?(v44, v48, &demangling cache variable for type metadata for TokenStream<String>);
    uint64_t v33 = (int *)type metadata accessor for TokenGeneratorChatResponseStringStream(0);
    outlined init with take of Locale?(v43, v48 + v33[5], &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32))(v48 + v33[6], v32, v38);
    long long v34 = v48 + v33[7];
    *(double *)long long v34 = v17;
    *(unsigned char *)(v34 + 8) = v37;
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v31, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v46, &demangling cache variable for type metadata for TokenStream<String>);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v35(v30, v38);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v52, &demangling cache variable for type metadata for TokenStream<String>);
    v35(v49, v38);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v50, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v16();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[115];
  uint64_t v2 = v0[113];
  uint64_t v3 = v0[107];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t TokenGeneratorChatResponseStringStream.role.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x263F62118];
  uint64_t v3 = type metadata accessor for ChatMessageRole();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);
  return v4(a1, v2, v3);
}

uint64_t protocol witness for ChatLanguageModelProviding._respond<A>(configuration:) in conformance TokenGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return TokenGenerator._respond<A>(configuration:)(a1, a2, a3, a4);
}

uint64_t TokenGeneratorChatResponse.role.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ChatMessageRole();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t TokenGeneratorChatResponse.promptCompletion.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TokenGeneratorChatResponse(0);
  return outlined init with copy of PromptCompletion(v1 + *(int *)(v3 + 20), a1, type metadata accessor for PromptCompletion);
}

uint64_t TokenGenerator._oneShotResponse<A>(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  uint64_t v8 = type metadata accessor for ChatMessageRole();
  v4[3] = v8;
  v4[4] = *(void *)(v8 - 8);
  v4[5] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenStream<String>);
  v4[6] = swift_task_alloc();
  v4[7] = type metadata accessor for TokenGeneratorResponsePromptCompletionStream(0);
  v4[8] = swift_task_alloc();
  type metadata accessor for PromptCompletion(0);
  v4[9] = swift_task_alloc();
  v4[10] = type metadata accessor for TokenGeneratorChatResponseStringStream(0);
  uint64_t v9 = swift_task_alloc();
  v4[11] = v9;
  unint64_t v10 = (void *)swift_task_alloc();
  v4[12] = v10;
  *unint64_t v10 = v4;
  v10[1] = TokenGenerator._oneShotResponse<A>(configuration:);
  return TokenGenerator._streamResponse<A>(configuration:)(v9, a2, a3, a4);
}

uint64_t TokenGenerator._oneShotResponse<A>(configuration:)()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = TokenGenerator._oneShotResponse<A>(configuration:);
  }
  else {
    uint64_t v2 = TokenGenerator._oneShotResponse<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;

  uint64_t v2 = (int *)v0[10];
  uint64_t v1 = v0[11];
  uint64_t v4 = (int *)v0[7];
  uint64_t v3 = v0[8];
  uint64_t v5 = v0[6];
  outlined init with copy of Prompt.Rendering?(v1, v5, &demangling cache variable for type metadata for TokenStream<String>);
  outlined init with take of PromptCompletionStream(v5, v3, type metadata accessor for PromptCompletionStream);
  outlined init with copy of Prompt.Rendering?(v1 + v2[5], v3 + v4[5], &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  uint64_t v6 = v3 + v4[6];
  uint64_t v7 = v1 + v2[6];
  uint64_t v8 = type metadata accessor for GenerativeFunctionInstrumenter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  uint64_t v9 = v1 + v2[7];
  unint64_t v10 = *(void *)v9;
  LOBYTE(v9) = *(unsigned char *)(v9 + 8);
  uint64_t v11 = v3 + v4[7];
  *(void *)uint64_t v11 = v10;
  *(unsigned char *)(v11 + 8) = v9;
  uint64_t v12 = (void *)swift_task_alloc();
  v0[14] = v12;
  *uint64_t v12 = v0;
  v12[1] = TokenGenerator._oneShotResponse<A>(configuration:);
  uint64_t v13 = v0[9];
  return TokenGeneratorResponsePromptCompletionStream.collect()(v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)(*(void *)v1 + 64);
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v2, type metadata accessor for TokenGeneratorResponsePromptCompletionStream);
  if (v0) {
    uint64_t v3 = TokenGenerator._oneShotResponse<A>(configuration:);
  }
  else {
    uint64_t v3 = TokenGenerator._oneShotResponse<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = v0[11];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[2];
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v3, *MEMORY[0x263F62118], v4);
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v1, type metadata accessor for TokenGeneratorChatResponseStringStream);
  uint64_t v7 = type metadata accessor for TokenGeneratorChatResponse(0);
  outlined init with take of PromptCompletionStream(v2, v6 + *(int *)(v7 + 20), type metadata accessor for PromptCompletion);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v6, v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of TokenGeneratorCompletionResponseStringStream(*(void *)(v0 + 88), type metadata accessor for TokenGeneratorChatResponseStringStream);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t protocol witness for ChatLanguageModelProvidingOneShot._oneShotResponse<A>(configuration:) in conformance TokenGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return TokenGenerator._oneShotResponse<A>(configuration:)(a1, a2, a3, a4);
}

uint64_t TokenGeneratorChatResponseStringStream.rawStream.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Prompt.Rendering?(v1, a1, &demangling cache variable for type metadata for TokenStream<String>);
}

uint64_t TokenGeneratorCompletionResponseStringStream.events.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenStream<String>);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Prompt.Rendering?(v1, (uint64_t)v5, &demangling cache variable for type metadata for TokenStream<String>);
  return outlined init with take of PromptCompletionStream((uint64_t)v5, a1, type metadata accessor for PromptCompletionStream);
}

uint64_t TokenGeneratorChatResponseStringStream._stringResponseSanitizerWithConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  return TokenGeneratorCompletionResponseStringStream._stringResponseSanitizerWithConfiguration.getter(type metadata accessor for TokenGeneratorChatResponseStringStream, a1);
}

uint64_t TokenGeneratorCompletionResponseStringStream._stringResponseSanitizerWithConfiguration.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1(0);
  return outlined init with copy of Prompt.Rendering?(v2 + *(int *)(v4 + 20), a2, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
}

uint64_t TokenGeneratorChatResponseStringStream._generativeFunctionInstrumenter.getter@<X0>(uint64_t a1@<X8>)
{
  return TokenGeneratorCompletionResponseStringStream._generativeFunctionInstrumenter.getter(type metadata accessor for TokenGeneratorChatResponseStringStream, a1);
}

uint64_t TokenGeneratorCompletionResponseStringStream._generativeFunctionInstrumenter.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 24);
  uint64_t v5 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t TokenGeneratorChatResponseStringStream.timeout.getter()
{
  return TokenGeneratorCompletionResponseStringStream.timeout.getter(type metadata accessor for TokenGeneratorChatResponseStringStream);
}

uint64_t TokenGeneratorCompletionResponseStringStream.timeout.getter(uint64_t (*a1)(void))
{
  return *(void *)(v1 + *(int *)(a1(0) + 28));
}

uint64_t protocol witness for TokenGeneratorResponseStringStreamAsyncSequence.rawStream.getter in conformance TokenGeneratorChatResponseStringStream@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Prompt.Rendering?(v1, a1, &demangling cache variable for type metadata for TokenStream<String>);
}

uint64_t protocol witness for TokenGeneratorResponseStringStreamAsyncSequence.collect() in conformance TokenGeneratorChatResponseStringStream(uint64_t a1)
{
  v2[2] = v1;
  v2[3] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v2[4] = swift_task_alloc();
  return MEMORY[0x270FA2498](protocol witness for TokenGeneratorResponseStringStreamAsyncSequence.collect() in conformance TokenGeneratorChatResponseStringStream, 0, 0);
}

uint64_t protocol witness for TokenGeneratorResponseStringStreamAsyncSequence.collect() in conformance TokenGeneratorChatResponseStringStream()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[2];
  uint64_t v3 = v2 + *(int *)(v0[3] + 24);
  uint64_t v4 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v3, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v1, 0, 1, v4);
  uint64_t v6 = swift_task_alloc();
  v0[5] = v6;
  *(void *)(v6 + 16) = v2;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[6] = v7;
  *uint64_t v7 = v0;
  v7[1] = protocol witness for TokenGeneratorResponseStringStreamAsyncSequence.collect() in conformance TokenGeneratorChatResponseStringStream;
  uint64_t v8 = v0[4];
  return specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(v8, (int *)&closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()specialized partial apply);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t protocol witness for TokenGeneratorResponseStringStreamAsyncSequence.collect() in conformance TokenGeneratorChatResponseStringStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v4;
  uint64_t v9 = *v4;
  *(void *)(*v4 + 56) = v3;
  swift_task_dealloc();
  uint64_t v10 = *(void *)(v8 + 32);
  if (v3)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v10, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    swift_task_dealloc();
    return MEMORY[0x270FA2498](protocol witness for TokenGeneratorResponseStringStreamAsyncSequence.collect() in conformance TokenGeneratorChatResponseStringStream, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v10, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
    return v11(a1, a2, a3);
  }
}

uint64_t protocol witness for TokenGeneratorResponseStringStreamAsyncSequence._stringResponseSanitizerWithConfiguration.getter in conformance TokenGeneratorChatResponseStringStream@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of Prompt.Rendering?(v2 + *(int *)(a1 + 20), a2, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
}

uint64_t protocol witness for TokenGeneratorResponseStringStreamAsyncSequence._generativeFunctionInstrumenter.getter in conformance TokenGeneratorCompletionResponseStringStream@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for TokenGeneratorResponseStringStreamAsyncSequence.timeout.getter in conformance TokenGeneratorChatResponseStringStream(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 28));
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance TokenGeneratorChatResponseStringStream@<X0>(uint64_t a1@<X8>)
{
  specialized TokenGeneratorResponseStringStreamAsyncSequence.makeAsyncIterator()(type metadata accessor for TokenGeneratorChatResponseStringStream, a1);
  return outlined destroy of TokenGeneratorCompletionResponseStringStream(v1, type metadata accessor for TokenGeneratorChatResponseStringStream);
}

uint64_t TokenGeneratorChatResponseStringStream.stream.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of PromptCompletion(v1, a1, type metadata accessor for TokenGeneratorChatResponseStringStream);
}

uint64_t protocol witness for ChatLanguageModelResponseStringStream.role.getter in conformance TokenGeneratorChatResponseStringStream@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x263F62118];
  uint64_t v3 = type metadata accessor for ChatMessageRole();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);
  return v4(a1, v2, v3);
}

uint64_t protocol witness for ChatLanguageModelResponseStringStream.stream.getter in conformance TokenGeneratorChatResponseStringStream@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of PromptCompletion(v1, a1, type metadata accessor for TokenGeneratorChatResponseStringStream);
}

uint64_t closure #1 in static TokenGenerator.scrubIfNeeded(inputPrompt:stringRenderedPromptSanitizerWithConfiguration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for InferenceSessionProtocol.request(loggingIdentifier:data:requiredAssets:) in conformance ModelManagerSession;
  return MEMORY[0x270F30020](a1, a2);
}

uint64_t static TokenGenerator.scrubIfNeeded(promptTurns:stringRenderedPromptSanitizerWithConfiguration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v3[5] = swift_task_alloc();
  v3[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Prompt.ImageAttachment();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Prompt.Turn.Segment(0);
  v3[10] = v5;
  v3[11] = *(void *)(v5 - 8);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  v3[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for StringRenderedPromptSanitizerWithConfiguration();
  v3[16] = v6;
  v3[17] = *(void *)(v6 - 8);
  v3[18] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Prompt.Turn(0);
  v3[19] = v7;
  v3[20] = *(void *)(v7 - 8);
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  return MEMORY[0x270FA2498](static TokenGenerator.scrubIfNeeded(promptTurns:stringRenderedPromptSanitizerWithConfiguration:), 0, 0);
}

uint64_t static TokenGenerator.scrubIfNeeded(promptTurns:stringRenderedPromptSanitizerWithConfiguration:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 16);
  *(void *)(v0 + 200) = v1;
  unint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 160);
    *(_DWORD *)(v0 + 312) = *(_DWORD *)(v3 + 80);
    *(void *)(v0 + 208) = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    uint64_t v4 = 0;
    uint64_t v5 = v2;
    while (1)
    {
      *(void *)(v0 + 216) = v4;
      *(void *)(v0 + 224) = v5;
      uint64_t v11 = *(void *)(v0 + 128);
      uint64_t v10 = *(void *)(v0 + 136);
      uint64_t v12 = *(void *)(v0 + 120);
      uint64_t v13 = *(void *)(v0 + 32);
      outlined init with copy of PromptCompletion(*(void *)(v0 + 24)+ ((*(unsigned __int8 *)(v0 + 312) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 312))+ *(void *)(v0 + 208) * v4, *(void *)(v0 + 192), type metadata accessor for Prompt.Turn);
      outlined init with copy of Prompt.Rendering?(v13, v12, &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1, v11) == 1) {
        break;
      }
      uint64_t v14 = *(unsigned char **)(v0 + 192);
      (*(void (**)(void, void, void))(*(void *)(v0 + 136) + 32))(*(void *)(v0 + 144), *(void *)(v0 + 120), *(void *)(v0 + 128));
      if (*v14 != 2)
      {
        (*(void (**)(void, void))(*(void *)(v0 + 136) + 8))(*(void *)(v0 + 144), *(void *)(v0 + 128));
        goto LABEL_18;
      }
      uint64_t v15 = *(int **)(v0 + 152);
      uint64_t v16 = *(void *)(*(void *)(v0 + 192) + v15[6]);
      *(void *)(v0 + 232) = v16;
      uint64_t v17 = *(void *)(v16 + 16);
      *(void *)(v0 + 240) = v17;
      if (v17)
      {
        uint64_t v18 = *(void *)(v0 + 88);
        *(_DWORD *)(v0 + 316) = *(_DWORD *)(v18 + 80);
        *(void *)(v0 + 248) = *(void *)(v18 + 72);
        swift_bridgeObjectRetain();
        uint64_t v19 = 0;
        unint64_t v20 = v2;
        while (1)
        {
          *(void *)(v0 + 256) = v19;
          *(void *)(v0 + 264) = v20;
          outlined init with copy of PromptCompletion(*(void *)(v0 + 232)+ ((*(unsigned __int8 *)(v0 + 316) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 316))+ *(void *)(v0 + 248) * v19, *(void *)(v0 + 112), type metadata accessor for Prompt.Turn.Segment);
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          uint64_t v22 = *(uint64_t **)(v0 + 112);
          if (EnumCaseMultiPayload != 1) {
            break;
          }
          uint64_t v23 = *(void *)(v0 + 96);
          uint64_t v24 = *(void *)(v0 + 72);
          uint64_t v26 = *(void *)(v0 + 56);
          uint64_t v25 = *(void *)(v0 + 64);
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(v25 + 32))(v24, v22, v26);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v23, v24, v26);
          swift_storeEnumTagMultiPayload();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v20 + 16) + 1, 1, v20);
          }
          unint64_t v28 = *(void *)(v20 + 16);
          unint64_t v27 = *(void *)(v20 + 24);
          if (v28 >= v27 >> 1) {
            unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1, v20);
          }
          uint64_t v29 = *(void *)(v0 + 248);
          uint64_t v30 = *(unsigned __int8 *)(v0 + 316);
          uint64_t v31 = *(void *)(v0 + 96);
          uint64_t v32 = *(void *)(v0 + 64);
          uint64_t v33 = *(void *)(v0 + 72);
          uint64_t v34 = *(void *)(v0 + 56);
          *(void *)(v20 + 16) = v28 + 1;
          outlined init with take of PromptCompletionStream(v31, v20 + ((v30 + 32) & ~v30) + v29 * v28, type metadata accessor for Prompt.Turn.Segment);
          (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
          uint64_t v19 = *(void *)(v0 + 256) + 1;
          if (v19 == *(void *)(v0 + 240))
          {
            swift_bridgeObjectRelease();
            uint64_t v15 = *(int **)(v0 + 152);
            goto LABEL_23;
          }
        }
        uint64_t v56 = *v22;
        uint64_t v55 = v22[1];
        *(void *)(v0 + 272) = v55;
        uint64_t v57 = (void *)swift_task_alloc();
        *(void *)(v0 + 280) = v57;
        *uint64_t v57 = v0;
        v57[1] = static TokenGenerator.scrubIfNeeded(promptTurns:stringRenderedPromptSanitizerWithConfiguration:);
        return MEMORY[0x270F30020](v56, v55);
      }
      unint64_t v20 = v2;
LABEL_23:
      uint64_t v37 = *(unsigned char **)(v0 + 176);
      uint64_t v60 = *(void *)(v0 + 184);
      uint64_t v39 = *(void *)(v0 + 40);
      uint64_t v38 = *(void *)(v0 + 48);
      uint64_t v40 = type metadata accessor for Locale();
      long long v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56);
      v41(v38, 1, 1, v40);
      outlined init with copy of Prompt.Rendering?(v38, v39, &demangling cache variable for type metadata for Locale?);
      uint64_t v42 = (uint64_t)&v37[v15[5]];
      v41(v42, 1, 1, v40);
      uint64_t v43 = v15[9];
      *uint64_t v37 = 2;
      *(void *)&v37[v15[6]] = v20;
      unint64_t v44 = MEMORY[0x263F8EE78];
      *(void *)&v37[v15[8]] = MEMORY[0x263F8EE78];
      uint64_t v45 = &v37[v43];
      *uint64_t v45 = 0u;
      v45[1] = 0u;
      v37[v15[7]] = 0;
      swift_bridgeObjectRetain();
      outlined assign with take of Locale?(v39, v42);
      outlined init with take of PromptCompletionStream((uint64_t)v37, v60, type metadata accessor for Prompt.Turn);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(v38, &demangling cache variable for type metadata for Locale?);
      swift_bridgeObjectRelease();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v5 = *(void *)(v0 + 224);
      unint64_t v2 = v44;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v5 + 16) + 1, 1, *(void *)(v0 + 224));
      }
      unint64_t v48 = *(void *)(v5 + 16);
      unint64_t v47 = *(void *)(v5 + 24);
      if (v48 >= v47 >> 1) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1, v5);
      }
      uint64_t v49 = *(void *)(v0 + 208);
      uint64_t v50 = *(unsigned __int8 *)(v0 + 312);
      uint64_t v51 = *(void *)(v0 + 184);
      uint64_t v8 = *(void *)(v0 + 192);
      uint64_t v53 = *(void *)(v0 + 136);
      uint64_t v52 = *(void *)(v0 + 144);
      uint64_t v54 = *(void *)(v0 + 128);
      *(void *)(v5 + 16) = v48 + 1;
      outlined init with take of PromptCompletionStream(v51, v5 + ((v50 + 32) & ~v50) + v49 * v48, type metadata accessor for Prompt.Turn);
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
LABEL_4:
      outlined destroy of TokenGeneratorCompletionResponseStringStream(v8, type metadata accessor for Prompt.Turn);
      uint64_t v4 = *(void *)(v0 + 216) + 1;
      if (v4 == *(void *)(v0 + 200))
      {
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
    }
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 120), &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
LABEL_18:
    outlined init with copy of PromptCompletion(*(void *)(v0 + 192), *(void *)(v0 + 168), type metadata accessor for Prompt.Turn);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v5 + 16) + 1, 1, v5);
    }
    unint64_t v36 = *(void *)(v5 + 16);
    unint64_t v35 = *(void *)(v5 + 24);
    if (v36 >= v35 >> 1) {
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1, v5);
    }
    uint64_t v6 = *(void *)(v0 + 208);
    uint64_t v7 = *(unsigned __int8 *)(v0 + 312);
    uint64_t v8 = *(void *)(v0 + 192);
    uint64_t v9 = *(void *)(v0 + 168);
    *(void *)(v5 + 16) = v36 + 1;
    outlined init with take of PromptCompletionStream(v9, v5 + ((v7 + 32) & ~v7) + v6 * v36, type metadata accessor for Prompt.Turn);
    goto LABEL_4;
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
LABEL_33:
  static Prompt.transcript(turns:)(v5, *(void *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v58 = *(uint64_t (**)(void))(v0 + 8);
  return v58();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void, void, void, void);
  int *v13;
  unsigned char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned char *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int EnumCaseMultiPayload;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(void);
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void (*v67)(void, void, void, void);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  uint64_t v1 = *(void *)(v0 + 296);
  unint64_t v2 = *(void **)(v0 + 104);
  *unint64_t v2 = *(void *)(v0 + 304);
  v2[1] = v1;
  swift_storeEnumTagMultiPayload();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v4 = *(void *)(v0 + 264);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1, *(void *)(v0 + 264));
  }
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v5 = *(void *)(v4 + 24);
  if (v6 >= v5 >> 1) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1, v4);
  }
  uint64_t v7 = *(void *)(v0 + 248);
  uint64_t v8 = *(unsigned __int8 *)(v0 + 316);
  uint64_t v9 = *(void *)(v0 + 104);
  *(void *)(v4 + 16) = v6 + 1;
  outlined init with take of PromptCompletionStream(v9, v4 + ((v8 + 32) & ~v8) + v7 * v6, type metadata accessor for Prompt.Turn.Segment);
  while (2)
  {
    uint64_t v10 = *(void *)(v0 + 256) + 1;
    if (v10 != *(void *)(v0 + 240))
    {
      uint64_t v60 = *(void *)(v0 + 248);
      LOBYTE(v59) = *(unsigned char *)(v0 + 316);
      uint64_t v61 = *(void *)(v0 + 232);
      goto LABEL_26;
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = type metadata accessor for Locale();
    uint64_t v12 = *(void (**)(void, void, void, void))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = *(int **)(v0 + 152);
    char v67 = v12;
    char v68 = v11;
    while (2)
    {
      uint64_t v14 = *(unsigned char **)(v0 + 176);
      uint64_t v69 = *(void *)(v0 + 184);
      uint64_t v16 = *(void *)(v0 + 40);
      uint64_t v15 = *(void *)(v0 + 48);
      v12(v15, 1, 1, v11);
      outlined init with copy of Prompt.Rendering?(v15, v16, &demangling cache variable for type metadata for Locale?);
      uint64_t v17 = (uint64_t)&v14[v13[5]];
      v12(v17, 1, 1, v11);
      uint64_t v18 = v13[9];
      unsigned char *v14 = 2;
      *(void *)&v14[v13[6]] = v4;
      *(void *)&v14[v13[8]] = MEMORY[0x263F8EE78];
      uint64_t v19 = &v14[v18];
      *uint64_t v19 = 0u;
      v19[1] = 0u;
      v14[v13[7]] = 0;
      swift_bridgeObjectRetain();
      outlined assign with take of Locale?(v16, v17);
      outlined init with take of PromptCompletionStream((uint64_t)v14, v69, type metadata accessor for Prompt.Turn);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(v15, &demangling cache variable for type metadata for Locale?);
      swift_bridgeObjectRelease();
      unint64_t v20 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v21 = *(void *)(v0 + 224);
      if ((v20 & 1) == 0) {
        uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v21 + 16) + 1, 1, *(void *)(v0 + 224));
      }
      uint64_t v23 = *(void *)(v21 + 16);
      uint64_t v22 = *(void *)(v21 + 24);
      if (v23 >= v22 >> 1) {
        uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1, v21);
      }
      uint64_t v24 = *(void *)(v0 + 208);
      uint64_t v25 = *(unsigned __int8 *)(v0 + 312);
      uint64_t v26 = *(void *)(v0 + 184);
      unint64_t v27 = *(void *)(v0 + 192);
      uint64_t v29 = *(void *)(v0 + 136);
      unint64_t v28 = *(void *)(v0 + 144);
      uint64_t v30 = *(void *)(v0 + 128);
      *(void *)(v21 + 16) = v23 + 1;
      outlined init with take of PromptCompletionStream(v26, v21 + ((v25 + 32) & ~v25) + v24 * v23, type metadata accessor for Prompt.Turn);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      while (1)
      {
        outlined destroy of TokenGeneratorCompletionResponseStringStream(v27, type metadata accessor for Prompt.Turn);
        uint64_t v31 = *(void *)(v0 + 216) + 1;
        if (v31 == *(void *)(v0 + 200))
        {
          swift_bridgeObjectRelease();
          static Prompt.transcript(turns:)(v21, *(void *)(v0 + 16));
          swift_bridgeObjectRelease();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v62 = *(uint64_t (**)(void))(v0 + 8);
          return v62();
        }
        *(void *)(v0 + 216) = v31;
        *(void *)(v0 + 224) = v21;
        uint64_t v33 = *(void *)(v0 + 128);
        uint64_t v32 = *(void *)(v0 + 136);
        uint64_t v34 = *(void *)(v0 + 120);
        unint64_t v35 = *(void *)(v0 + 32);
        outlined init with copy of PromptCompletion(*(void *)(v0 + 24)+ ((*(unsigned __int8 *)(v0 + 312) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 312))+ *(void *)(v0 + 208) * v31, *(void *)(v0 + 192), type metadata accessor for Prompt.Turn);
        outlined init with copy of Prompt.Rendering?(v35, v34, &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v34, 1, v33) == 1)
        {
          outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 120), &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
          goto LABEL_18;
        }
        unint64_t v36 = *(unsigned char **)(v0 + 192);
        (*(void (**)(void, void, void))(*(void *)(v0 + 136) + 32))(*(void *)(v0 + 144), *(void *)(v0 + 120), *(void *)(v0 + 128));
        if (*v36 == 2) {
          break;
        }
        (*(void (**)(void, void))(*(void *)(v0 + 136) + 8))(*(void *)(v0 + 144), *(void *)(v0 + 128));
LABEL_18:
        outlined init with copy of PromptCompletion(*(void *)(v0 + 192), *(void *)(v0 + 168), type metadata accessor for Prompt.Turn);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v21 + 16) + 1, 1, v21);
        }
        uint64_t v38 = *(void *)(v21 + 16);
        uint64_t v37 = *(void *)(v21 + 24);
        if (v38 >= v37 >> 1) {
          uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1, v21);
        }
        uint64_t v39 = *(void *)(v0 + 208);
        uint64_t v40 = *(unsigned __int8 *)(v0 + 312);
        unint64_t v27 = *(void *)(v0 + 192);
        long long v41 = *(void *)(v0 + 168);
        *(void *)(v21 + 16) = v38 + 1;
        outlined init with take of PromptCompletionStream(v41, v21 + ((v40 + 32) & ~v40) + v39 * v38, type metadata accessor for Prompt.Turn);
      }
      uint64_t v13 = *(int **)(v0 + 152);
      uint64_t v42 = *(void *)(*(void *)(v0 + 192) + v13[6]);
      *(void *)(v0 + 232) = v42;
      uint64_t v43 = *(void *)(v42 + 16);
      *(void *)(v0 + 240) = v43;
      uint64_t v4 = MEMORY[0x263F8EE78];
      uint64_t v12 = v67;
      uint64_t v11 = v68;
      if (!v43) {
        continue;
      }
      break;
    }
    uint64_t v58 = *(void *)(v0 + 88);
    uint64_t v59 = *(_DWORD *)(v58 + 80);
    *(_DWORD *)(v0 + 316) = v59;
    uint64_t v60 = *(void *)(v58 + 72);
    *(void *)(v0 + 248) = v60;
    uint64_t v61 = swift_bridgeObjectRetain();
    uint64_t v10 = 0;
LABEL_26:
    *(void *)(v0 + 256) = v10;
    *(void *)(v0 + 264) = v4;
    outlined init with copy of PromptCompletion(v61 + ((v59 + 32) & ~(unint64_t)v59) + v60 * v10, *(void *)(v0 + 112), type metadata accessor for Prompt.Turn.Segment);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v45 = *(uint64_t **)(v0 + 112);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v46 = *(void *)(v0 + 96);
      unint64_t v47 = *(void *)(v0 + 72);
      uint64_t v49 = *(void *)(v0 + 56);
      unint64_t v48 = *(void *)(v0 + 64);
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v48 + 32))(v47, v45, v49);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v46, v47, v49);
      swift_storeEnumTagMultiPayload();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1, v4);
      }
      uint64_t v51 = *(void *)(v4 + 16);
      uint64_t v50 = *(void *)(v4 + 24);
      if (v51 >= v50 >> 1) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1, v4);
      }
      uint64_t v52 = *(void *)(v0 + 248);
      uint64_t v53 = *(unsigned __int8 *)(v0 + 316);
      uint64_t v54 = *(void *)(v0 + 96);
      uint64_t v56 = *(void *)(v0 + 64);
      uint64_t v55 = *(void *)(v0 + 72);
      uint64_t v57 = *(void *)(v0 + 56);
      *(void *)(v4 + 16) = v51 + 1;
      outlined init with take of PromptCompletionStream(v54, v4 + ((v53 + 32) & ~v53) + v52 * v51, type metadata accessor for Prompt.Turn.Segment);
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
      continue;
    }
    break;
  }
  char v65 = *v45;
  uint64_t v64 = v45[1];
  *(void *)(v0 + 272) = v64;
  char v66 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v66;
  *char v66 = v0;
  v66[1] = static TokenGenerator.scrubIfNeeded(promptTurns:stringRenderedPromptSanitizerWithConfiguration:);
  return MEMORY[0x270F30020](v65, v64);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[24];
  (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[16]);
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v1, type metadata accessor for Prompt.Turn);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t static TokenGenerator.scrubIfNeeded(promptTurns:stringRenderedPromptSanitizerWithConfiguration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 288) = v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = static TokenGenerator.scrubIfNeeded(promptTurns:stringRenderedPromptSanitizerWithConfiguration:);
  }
  else
  {
    *(void *)(v6 + 296) = a2;
    *(void *)(v6 + 304) = a1;
    uint64_t v7 = static TokenGenerator.scrubIfNeeded(promptTurns:stringRenderedPromptSanitizerWithConfiguration:);
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

uint64_t closure #1 in TokenGenerator._streamResponse<A>(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[111] = a6;
  v6[110] = a5;
  v6[109] = a4;
  v6[108] = a3;
  v6[107] = a2;
  v6[106] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Schema?);
  v6[112] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenStream<String>);
  v6[113] = swift_task_alloc();
  v6[114] = *(void *)(a5 - 8);
  v6[115] = swift_task_alloc();
  v6[116] = swift_task_alloc();
  type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel(0);
  v6[117] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithRunner?);
  v6[118] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for StringResponseSanitizerRunnerConfiguration();
  v6[119] = v8;
  v6[120] = *(void *)(v8 - 8);
  v6[121] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringRenderedPromptSanitizerWithRunner?);
  v6[122] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  v6[123] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v6[124] = swift_task_alloc();
  v6[125] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for StringRenderedPromptSanitizerRunnerConfiguration();
  v6[126] = v9;
  v6[127] = *(void *)(v9 - 8);
  v6[128] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ToolChoice?);
  v6[129] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  v6[130] = swift_task_alloc();
  v6[131] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Prompt();
  v6[132] = v10;
  v6[133] = *(void *)(v10 - 8);
  v6[134] = swift_task_alloc();
  v6[135] = swift_task_alloc();
  v6[136] = swift_task_alloc();
  v6[137] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for GenerativeFunctionInstrumenter();
  v6[138] = v11;
  v6[139] = *(void *)(v11 - 8);
  v6[140] = swift_task_alloc();
  v6[141] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in TokenGenerator._streamResponse<A>(configuration:), 0, 0);
}

uint64_t closure #1 in TokenGenerator._streamResponse<A>(configuration:)()
{
  if (*(void *)(v0[108] + 24)) {
    swift_bridgeObjectRetain();
  }
  uint64_t v1 = v0[141];
  uint64_t v2 = v0[139];
  uint64_t v12 = v0[138];
  uint64_t v3 = v0[125];
  uint64_t v4 = v0[111];
  uint64_t v5 = v0[110];
  GenerativeConfigurationProtocol.generateGenerativeFunctionInstrumenter(useCaseIdentifier:eventReporter:)();
  swift_bridgeObjectRelease();
  GenerativeFunctionInstrumenter.executionBegin()();
  GenerativeFunctionInstrumenter.promptConstructionBegin()();
  v0[142] = GenerativeConfigurationProtocol.documents.getter();
  v0[143] = GenerativeConfigurationProtocol.tools.getter();
  GenerativeConfigurationProtocol.toolChoice.getter(v5, v4);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[144] = v6;
  v0[145] = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v3, v1, v12);
  uint64_t v7 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56);
  v0[146] = v7;
  v0[147] = (v2 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v7(v3, 0, 1, v12);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[148] = v8;
  *uint64_t v8 = v0;
  v8[1] = closure #1 in TokenGenerator._streamResponse<A>(configuration:);
  uint64_t v9 = v0[128];
  uint64_t v10 = v0[125];
  return TokenGenerator.renderedPromptSanitizerConfiguration(generativeFunctionInstrumenter:)(v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1192) = v0;
  swift_task_dealloc();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v2 + 1000), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = closure #1 in TokenGenerator._streamResponse<A>(configuration:);
  }
  else
  {
    uint64_t v3 = closure #1 in TokenGenerator._streamResponse<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  uint64_t v1 = (void *)v0[149];
  GenerativeConfigurationProtocol.stringRenderedPromptSanitizer.getter();
  if (v1)
  {
    uint64_t v2 = v0[128];
    uint64_t v3 = v0[127];
    uint64_t v4 = v0[126];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    uint64_t v5 = v0[141];
    uint64_t v6 = v0[139];
    uint64_t v7 = v0[138];
    uint64_t v8 = v0[129];
    uint64_t v9 = v0[106];
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter));
    uint64_t v11 = v9 + *(int *)(v10 + 48);
    uint64_t v12 = v9 + *(int *)(v10 + 64);
    specialized TokenStream.init(throwing:)(v1, v9);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v8, &demangling cache variable for type metadata for ToolChoice?);
    uint64_t v13 = type metadata accessor for StringResponseSanitizerWithConfiguration();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v11, 1, 1, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v12, v5, v7);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
  else
  {
    uint64_t v16 = v0[128];
    uint64_t v17 = v0[123];
    uint64_t v18 = v0[122];
    uint64_t v19 = swift_task_alloc();
    *(void *)(v19 + 16) = v16;
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF16GenerativeModels39StringRenderedPromptSanitizerWithRunnerV_s5NeverO0cD10Foundation0efghI13ConfigurationVTg5Tm((void (*)(char *))partial apply for closure #1 in closure #1 in TokenGenerator._streamResponse<A>(configuration:), v19, MEMORY[0x263F41480], &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithRunner?, MEMORY[0x263F41610], v17);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v18, &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithRunner?);
    swift_task_dealloc();
    unint64_t v20 = (void *)swift_task_alloc();
    v0[150] = v20;
    *unint64_t v20 = v0;
    v20[1] = closure #1 in TokenGenerator._streamResponse<A>(configuration:);
    uint64_t v21 = v0[135];
    uint64_t v22 = v0[111];
    uint64_t v23 = v0[110];
    return GenerativeConfigurationProtocol<>.renderToTokenGenerationPrompt()(v21, v23, v22);
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v2 = (void *)*v1;
  v2[151] = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x270FA2498](closure #1 in TokenGenerator._streamResponse<A>(configuration:), 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[152] = v3;
    *uint64_t v3 = v2;
    v3[1] = closure #1 in TokenGenerator._streamResponse<A>(configuration:);
    uint64_t v4 = v2[136];
    uint64_t v5 = v2[135];
    uint64_t v6 = v2[123];
    return static TokenGenerator.scrubIfNeeded(inputPrompt:stringRenderedPromptSanitizerWithConfiguration:)(v4, v5, v6);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v9;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1224) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2[133] + 8))(v2[135], v2[132]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = closure #1 in TokenGenerator._streamResponse<A>(configuration:);
  }
  else
  {
    uint64_t v4 = v2[135];
    uint64_t v5 = v2[133];
    uint64_t v6 = v2[132];
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v2[154] = v7;
    v2[155] = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v7(v4, v6);
    uint64_t v3 = closure #1 in TokenGenerator._streamResponse<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  void *v0;
  void (*v1)(uint64_t, void, uint64_t, uint64_t);
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[146];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[144];
  uint64_t v3 = v0[141];
  uint64_t v4 = v0[138];
  uint64_t v5 = v0[124];
  (*(void (**)(void, void, void))(v0[133] + 32))(v0[137], v0[136], v0[132]);
  v2(v5, v3, v4);
  v1(v5, 0, 1, v4);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[156] = v6;
  *uint64_t v6 = v0;
  v6[1] = closure #1 in TokenGenerator._streamResponse<A>(configuration:);
  uint64_t v7 = v0[124];
  uint64_t v8 = v0[121];
  return TokenGenerator.responseSanitizerConfiguration(generativeFunctionInstrumenter:)(v8, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1256) = v0;
  swift_task_dealloc();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v2 + 992), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = closure #1 in TokenGenerator._streamResponse<A>(configuration:);
  }
  else
  {
    uint64_t v3 = closure #1 in TokenGenerator._streamResponse<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;

  uint64_t v1 = (void *)v0[157];
  GenerativeConfigurationProtocol.stringResponseSanitizer.getter();
  uint64_t v49 = v1;
  if (v1)
  {
    uint64_t v2 = v0[128];
    uint64_t v3 = v0[127];
    uint64_t v4 = v0[126];
    uint64_t v5 = v0[121];
    uint64_t v6 = v0[120];
    uint64_t v7 = v0[119];
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[123], &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    uint64_t v46 = v1;
    uint64_t v15 = v0[141];
    uint64_t v16 = v0[139];
    uint64_t v17 = v0[138];
    uint64_t v18 = v0[129];
    uint64_t v19 = v0[106];
    unint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter));
    uint64_t v21 = v19 + *(int *)(v20 + 48);
    uint64_t v22 = v19 + *(int *)(v20 + 64);
    specialized TokenStream.init(throwing:)(v46, v19);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v18, &demangling cache variable for type metadata for ToolChoice?);
    uint64_t v23 = type metadata accessor for StringResponseSanitizerWithConfiguration();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v21, 1, 1, v23);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v22, v15, v17);
    if (!v49) {
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[131], &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    }
    (*(void (**)(void, void))(v0[133] + 8))(v0[137], v0[132]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(void))v0[1];
    return v24();
  }
  else
  {
    uint64_t v8 = v0[131];
    uint64_t v9 = v0[130];
    uint64_t v10 = v0[121];
    uint64_t v11 = v0[118];
    unint64_t v47 = v0[111];
    uint64_t v12 = v0[110];
    uint64_t v13 = swift_task_alloc();
    *(void *)(v13 + 16) = v10;
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF16GenerativeModels39StringRenderedPromptSanitizerWithRunnerV_s5NeverO0cD10Foundation0efghI13ConfigurationVTg5Tm((void (*)(char *))partial apply for closure #2 in closure #1 in TokenGenerator._streamResponse<A>(configuration:), v13, MEMORY[0x263F41478], &demangling cache variable for type metadata for StringResponseSanitizerWithRunner?, MEMORY[0x263F415F0], v9);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v11, &demangling cache variable for type metadata for StringResponseSanitizerWithRunner?);
    swift_task_dealloc();
    outlined init with take of Locale?(v9, v8, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    v0[158] = GenerativeConfigurationProtocol.grammar.getter(v12, v47);
    v0[159] = v14;
    v0[160] = GenerativeConfigurationProtocol.partialGrammar.getter(v0[110], v0[111]);
    v0[161] = v26;
    GenerativeConfigurationProtocol.samplingParameters.getter(v0[111], (uint64_t)(v0 + 36));
    unint64_t v27 = v0[133];
    uint64_t v43 = v0[132];
    unint64_t v44 = v0[134];
    unint64_t v28 = v0[128];
    uint64_t v29 = v0[127];
    uint64_t v30 = v0[126];
    uint64_t v31 = v0[121];
    uint64_t v32 = v0[120];
    uint64_t v33 = v0[119];
    unint64_t v48 = v0[116];
    uint64_t v50 = v0[137];
    uint64_t v34 = v0[114];
    uint64_t v45 = v0[110];
    uint64_t v42 = v0[107];
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[123], &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    outlined init with take of Locale?((uint64_t)(v0 + 36), (uint64_t)(v0 + 53), &demangling cache variable for type metadata for SamplingParameters?);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v44, v50, v43);
    unint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16);
    v0[162] = v35;
    v0[163] = (v34 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v35(v48, v42, v45);
    unint64_t v36 = (void *)swift_task_alloc();
    v0[164] = v36;
    *unint64_t v36 = v0;
    v36[1] = closure #1 in TokenGenerator._streamResponse<A>(configuration:);
    uint64_t v37 = v0[134];
    uint64_t v38 = v0[117];
    uint64_t v39 = v0[116];
    uint64_t v40 = v0[111];
    long long v41 = v0[110];
    return TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:chatMessagesConfiguration:)(v38, v37, v39, v41, v40);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1320) = v0;
  swift_task_dealloc();
  if (v0)
  {
    outlined release of SamplingParametersEnvelope(v2 + 424);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = closure #1 in TokenGenerator._streamResponse<A>(configuration:);
  }
  else
  {
    uint64_t v3 = closure #1 in TokenGenerator._streamResponse<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (**v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (**v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (**v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(void);
  void (*v43)(uint64_t, uint64_t, uint64_t);
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  unsigned int (**v46)(uint64_t, uint64_t, uint64_t);
  unsigned int (**v47)(uint64_t, uint64_t, uint64_t);
  unsigned int (**v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (**v58)(char *, uint64_t);
  uint64_t v59;
  void (**v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  void (**v72)(char *, uint64_t);
  void (*v73)(uint64_t, uint64_t);
  void (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;

  uint64_t v89 = v0;
  uint64_t v1 = v0[159];
  GenerativeFunctionInstrumenter.promptConstructionEnd()();
  GenerativeFunctionInstrumenter.inferenceBegin()();
  if (v1)
  {
    unint64_t v44 = (void (*)(uint64_t, uint64_t, uint64_t))v0[162];
    uint64_t v63 = v0[158];
    char v66 = v0[159];
    uint64_t v73 = (void (*)(uint64_t, uint64_t))v0[154];
    uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[144];
    uint64_t v3 = v0[141];
    uint64_t v4 = v0[140];
    uint64_t v5 = v0[138];
    uint64_t v71 = v0[137];
    char v68 = v0[132];
    uint64_t v60 = (void (**)(char *, uint64_t))v0[129];
    uint64_t v57 = v0[117];
    uint64_t v6 = v0[115];
    uint64_t v54 = v0[113];
    uint64_t v7 = v0[110];
    if (v0[143]) {
      uint64_t v8 = v0[143];
    }
    else {
      uint64_t v8 = MEMORY[0x263F8EE78];
    }
    if (v0[142]) {
      uint64_t v9 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v0[142];
    }
    else {
      uint64_t v9 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8EE78];
    }
    unint64_t v48 = v9;
    uint64_t v51 = v8;
    uint64_t v10 = v0[107];
    swift_bridgeObjectRelease();
    outlined init with take of Locale?((uint64_t)(v0 + 53), (uint64_t)(v0 + 70), &demangling cache variable for type metadata for SamplingParameters?);
    v2(v4, v3, v5);
    v44(v6, v10, v7);
    RequestMetadata.init<A>(generativeFunctionInstrumenter:configuration:)(v4, v6, v7, &v75);
    uint64_t v82 = v75;
    uint64_t v83 = v76;
    uint64_t v84 = v77;
    uint64_t v85 = v78;
    uint64_t v86 = v79;
    uint64_t v87 = v80;
    uint64_t v88 = v81;
    TokenGenerator.complete(promptInputFromGenerativeModel:parameters:tools:toolChoice:documents:grammar:metadata:)(v57, (uint64_t)(v0 + 70), v51, v60, v48, v63, v66, &v82, v54, 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of SamplingParametersEnvelope((uint64_t)(v0 + 53));
    outlined destroy of TokenGeneratorCompletionResponseStringStream(v57, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v60, &demangling cache variable for type metadata for ToolChoice?);
    v73(v71, v68);
  }
  else
  {
    uint64_t v11 = (uint64_t)(v0 + 53);
    uint64_t v12 = v0[161];
    uint64_t v74 = (void (*)(uint64_t, uint64_t, uint64_t))v0[162];
    if (v12)
    {
      uint64_t v69 = (void (*)(uint64_t, uint64_t))v0[154];
      uint64_t v13 = (void (*)(uint64_t, uint64_t, uint64_t))v0[144];
      uint64_t v14 = v0[141];
      uint64_t v15 = v0[140];
      uint64_t v16 = v0[138];
      char v67 = v0[137];
      uint64_t v61 = v0[160];
      uint64_t v64 = v0[132];
      uint64_t v55 = v0[117];
      uint64_t v58 = (void (**)(char *, uint64_t))v0[129];
      uint64_t v17 = v0[115];
      uint64_t v18 = v0[110];
      uint64_t v52 = v0[113];
      if (v0[143]) {
        uint64_t v19 = v0[143];
      }
      else {
        uint64_t v19 = MEMORY[0x263F8EE78];
      }
      if (v0[142]) {
        unint64_t v20 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v0[142];
      }
      else {
        unint64_t v20 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8EE78];
      }
      uint64_t v46 = v20;
      uint64_t v49 = v19;
      uint64_t v21 = v0[107];
      outlined init with take of Locale?(v11, (uint64_t)(v0 + 19), &demangling cache variable for type metadata for SamplingParameters?);
      v13(v15, v14, v16);
      v74(v17, v21, v18);
      RequestMetadata.init<A>(generativeFunctionInstrumenter:configuration:)(v15, v17, v18, &v75);
      uint64_t v82 = v75;
      uint64_t v83 = v76;
      uint64_t v84 = v77;
      uint64_t v85 = v78;
      uint64_t v86 = v79;
      uint64_t v87 = v80;
      uint64_t v88 = v81;
      TokenGenerator.complete(promptInputFromGenerativeModel:parameters:tools:toolChoice:documents:grammar:metadata:)(v55, (uint64_t)(v0 + 19), v49, v58, v46, v61, v12, &v82, v52, 2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of SamplingParametersEnvelope((uint64_t)(v0 + 53));
      outlined destroy of TokenGeneratorCompletionResponseStringStream(v55, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v58, &demangling cache variable for type metadata for ToolChoice?);
      v69(v67, v64);
    }
    else
    {
      char v65 = (void (*)(uint64_t, uint64_t))v0[154];
      uint64_t v45 = (uint64_t)(v0 + 87);
      uint64_t v43 = (void (*)(uint64_t, uint64_t, uint64_t))v0[144];
      uint64_t v22 = v0[141];
      uint64_t v23 = v0[140];
      uint64_t v24 = v0[138];
      uint64_t v62 = v0[137];
      uint64_t v56 = (uint64_t)(v0 + 2);
      uint64_t v59 = v0[132];
      char v70 = v0[117];
      uint64_t v72 = (void (**)(char *, uint64_t))v0[129];
      uint64_t v25 = v0[115];
      uint64_t v26 = v0[112];
      unint64_t v27 = v0[111];
      unint64_t v28 = v0[110];
      uint64_t v53 = v0[113];
      if (v0[143]) {
        uint64_t v29 = v0[143];
      }
      else {
        uint64_t v29 = MEMORY[0x263F8EE78];
      }
      if (v0[142]) {
        uint64_t v30 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v0[142];
      }
      else {
        uint64_t v30 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8EE78];
      }
      unint64_t v47 = v30;
      uint64_t v50 = v29;
      uint64_t v31 = v0[107];
      outlined init with take of Locale?(v11, (uint64_t)(v0 + 87), &demangling cache variable for type metadata for SamplingParameters?);
      GenerativeConfigurationProtocol.schema.getter(v28, v27);
      v43(v23, v22, v24);
      v74(v25, v31, v28);
      RequestMetadata.init<A>(generativeFunctionInstrumenter:configuration:)(v23, v25, v28, &v75);
      uint64_t v82 = v75;
      uint64_t v83 = v76;
      uint64_t v84 = v77;
      uint64_t v85 = v78;
      uint64_t v86 = v79;
      uint64_t v87 = v80;
      uint64_t v88 = v81;
      TokenGenerator.complete(promptInputFromGenerativeModel:parameters:tools:toolChoice:documents:schema:metadata:)(v70, v45, v50, v72, v47, v26, &v82, v53);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(v26, &demangling cache variable for type metadata for Schema?);
      outlined init with take of Locale?(v45, v56, &demangling cache variable for type metadata for SamplingParameters?);
      outlined release of SamplingParametersEnvelope(v56);
      outlined destroy of TokenGeneratorCompletionResponseStringStream(v70, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v72, &demangling cache variable for type metadata for ToolChoice?);
      v65(v62, v59);
    }
  }
  uint64_t v32 = v0[141];
  uint64_t v33 = v0[139];
  uint64_t v34 = v0[138];
  unint64_t v35 = v0[131];
  unint64_t v36 = v0[113];
  uint64_t v37 = v0[106];
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter));
  uint64_t v39 = v37 + *(int *)(v38 + 48);
  uint64_t v40 = v37 + *(int *)(v38 + 64);
  outlined init with take of Locale?(v36, v37, &demangling cache variable for type metadata for TokenStream<String>);
  outlined init with take of Locale?(v35, v39, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v40, v32, v34);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v41 = (uint64_t (*)(void))v0[1];
  return v41();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;

  uint64_t v1 = (void *)v0[149];
  uint64_t v2 = v0[141];
  uint64_t v3 = v0[139];
  uint64_t v4 = v0[138];
  uint64_t v5 = v0[129];
  uint64_t v6 = v0[106];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter));
  uint64_t v8 = v6 + *(int *)(v7 + 48);
  uint64_t v9 = v6 + *(int *)(v7 + 64);
  specialized TokenStream.init(throwing:)(v1, v6);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v5, &demangling cache variable for type metadata for ToolChoice?);
  uint64_t v10 = type metadata accessor for StringResponseSanitizerWithConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 1, 1, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v9, v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;

  uint64_t v1 = v0[128];
  uint64_t v2 = v0[127];
  uint64_t v3 = v0[126];
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[123], &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)v0[151];
  uint64_t v5 = v0[141];
  uint64_t v6 = v0[139];
  uint64_t v7 = v0[138];
  uint64_t v8 = v0[129];
  uint64_t v9 = v0[106];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter));
  uint64_t v11 = v9 + *(int *)(v10 + 48);
  uint64_t v12 = v9 + *(int *)(v10 + 64);
  specialized TokenStream.init(throwing:)(v4, v9);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v8, &demangling cache variable for type metadata for ToolChoice?);
  uint64_t v13 = type metadata accessor for StringResponseSanitizerWithConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v11, 1, 1, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v12, v5, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;

  uint64_t v1 = v0[128];
  uint64_t v2 = v0[127];
  uint64_t v3 = v0[126];
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[123], &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)v0[153];
  uint64_t v5 = v0[141];
  uint64_t v6 = v0[139];
  uint64_t v7 = v0[138];
  uint64_t v8 = v0[129];
  uint64_t v9 = v0[106];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter));
  uint64_t v11 = v9 + *(int *)(v10 + 48);
  uint64_t v12 = v9 + *(int *)(v10 + 64);
  specialized TokenStream.init(throwing:)(v4, v9);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v8, &demangling cache variable for type metadata for ToolChoice?);
  uint64_t v13 = type metadata accessor for StringResponseSanitizerWithConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v11, 1, 1, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v12, v5, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;

  uint64_t v1 = v0[128];
  uint64_t v2 = v0[127];
  uint64_t v3 = v0[126];
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[123], &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)v0[157];
  uint64_t v5 = v0[141];
  uint64_t v6 = v0[139];
  uint64_t v7 = v0[138];
  uint64_t v8 = v0[129];
  uint64_t v9 = v0[106];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenStream: TokenStream<String>, stringResponseStream: StringResponseSanitizerWithConfiguration?, instrumenter: GenerativeFunctionInstrumenter));
  uint64_t v11 = v9 + *(int *)(v10 + 48);
  uint64_t v12 = v9 + *(int *)(v10 + 64);
  specialized TokenStream.init(throwing:)(v4, v9);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v8, &demangling cache variable for type metadata for ToolChoice?);
  uint64_t v13 = type metadata accessor for StringResponseSanitizerWithConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v11, 1, 1, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v12, v5, v7);
  (*(void (**)(void, void))(v0[133] + 8))(v0[137], v0[132]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[154];
  uint64_t v2 = v0[141];
  uint64_t v3 = v0[139];
  uint64_t v4 = v0[138];
  uint64_t v5 = v0[137];
  uint64_t v6 = v0[132];
  uint64_t v7 = v0[131];
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[129], &demangling cache variable for type metadata for ToolChoice?);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v7, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  v1(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t protocol witness for ChatLanguageModelProvidingStreamable._streamResponse<A>(configuration:) in conformance TokenGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return TokenGenerator._streamResponse<A>(configuration:)(a1, a2, a3, a4);
}

uint64_t TokenGenerator._respond<A, B>(type:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  type metadata accessor for TokenGeneratorChatResponseGenerableAdditionalInfo(0);
  uint64_t v15 = swift_task_alloc();
  *(void *)(v7 + 16) = v15;
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v16;
  *uint64_t v16 = v7;
  v16[1] = TokenGenerator._respond<A, B>(type:configuration:);
  return TokenGenerator._oneShotResponse<A, B>(type:configuration:)(a1, v15, a2, a3, a4, a5, a6, a7);
}

uint64_t TokenGenerator._respond<A, B>(type:configuration:)()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 32) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = TokenGenerator._respond<A, B>(type:configuration:);
  }
  else
  {
    outlined destroy of TokenGeneratorCompletionResponseStringStream(*(void *)(v2 + 16), type metadata accessor for TokenGeneratorChatResponseGenerableAdditionalInfo);
    uint64_t v3 = TokenGenerator._respond<A, B>(type:configuration:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TokenGenerator._oneShotResponse<A, B>(type:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[9] = a8;
  v9[10] = v8;
  v9[7] = a6;
  unsigned char v9[8] = a7;
  uint64_t v9[5] = a4;
  v9[6] = a5;
  v9[3] = a2;
  v9[4] = a3;
  void v9[2] = a1;
  v9[11] = *v8;
  uint64_t v11 = type metadata accessor for ChatMessageRole();
  v9[12] = v11;
  v9[13] = *(void *)(v11 - 8);
  v9[14] = swift_task_alloc();
  type metadata accessor for PromptCompletion(0);
  v9[15] = swift_task_alloc();
  unsigned char v9[16] = *(void *)(a5 - 8);
  v9[17] = swift_task_alloc();
  v9[18] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for GenerativeFunctionInstrumenter();
  v9[19] = v12;
  v9[20] = *(void *)(v12 - 8);
  v9[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenGenerator._oneShotResponse<A, B>(type:configuration:), 0, 0);
}

uint64_t TokenGenerator._oneShotResponse<A, B>(type:configuration:)()
{
  uint64_t v1 = *(void *)(v0 + 80);
  if (*(void *)(v1 + 24)) {
    swift_bridgeObjectRetain();
  }
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  long long v16 = *(_OWORD *)(v0 + 56);
  GenerativeConfigurationProtocol.generateGenerativeFunctionInstrumenter(useCaseIdentifier:eventReporter:)();
  swift_bridgeObjectRelease();
  uint64_t v7 = swift_task_alloc();
  *(void *)(v0 + 176) = v7;
  *(void *)(v7 + 16) = v6;
  *(_OWORD *)(v7 + 24) = v16;
  *(void *)(v7 + 40) = v4;
  *(void *)(v7 + 48) = v5;
  *(void *)(v7 + 56) = v1;
  *(void *)(v7 + 64) = v2;
  *(void *)(v7 + 72) = v3;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v8;
  type metadata accessor for ChatMessagesPrompt();
  *uint64_t v8 = v0;
  v8[1] = TokenGenerator._oneShotResponse<A, B>(type:configuration:);
  uint64_t v9 = *(void *)(v0 + 168);
  uint64_t v10 = *(void *)(v0 + 120);
  uint64_t v11 = *(void *)(v0 + 40);
  uint64_t v12 = *(void *)(v0 + 48);
  uint64_t v13 = *(void *)(v0 + 32);
  uint64_t v14 = *(void *)(v0 + 144);
  return TokenGenerator.completeGenerable<A, B, C>(type:configuration:generativeFunctionInstrumenter:scrubbedInputPrompt:)(v14, v10, v13, v11, v9, (uint64_t)&async function pointer to partial apply for closure #1 in TokenGenerator._oneShotResponse<A, B>(type:configuration:), v7, v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = TokenGenerator._oneShotResponse<A, B>(type:configuration:);
  }
  else {
    uint64_t v2 = TokenGenerator._oneShotResponse<A, B>(type:configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v2 = v0[20];
  uint64_t v1 = v0[21];
  uint64_t v3 = v0[18];
  uint64_t v5 = v0[16];
  uint64_t v4 = v0[17];
  uint64_t v6 = v0[15];
  uint64_t v7 = v0[6];
  uint64_t v10 = v0[3];
  uint64_t v11 = v0[19];
  (*(void (**)(void, void, void))(v0[13] + 104))(v0[14], *MEMORY[0x263F62118], v0[12]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v7);
  ChatMessageResponse.init(role:content:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v7);
  outlined init with take of PromptCompletionStream(v6, v10, type metadata accessor for PromptCompletion);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[20] + 8))(v0[21], v0[19]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t closure #1 in TokenGenerator._oneShotResponse<A, B>(type:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[8] = a7;
  v7[9] = v13;
  v7[6] = a4;
  _OWORD v7[7] = a5;
  _OWORD v7[4] = a2;
  v7[5] = a3;
  v7[3] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringRenderedPromptSanitizerWithRunner?);
  v7[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  v7[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v7[12] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for StringRenderedPromptSanitizerRunnerConfiguration();
  v7[13] = v9;
  v7[14] = *(void *)(v9 - 8);
  v7[15] = swift_task_alloc();
  uint64_t v10 = (void *)swift_task_alloc();
  v7[16] = v10;
  *uint64_t v10 = v7;
  v10[1] = closure #1 in TokenGenerator._oneShotResponse<A, B>(type:configuration:);
  return GenerativeConfigurationProtocol<>.renderToTokenGenerationPromptTurns()(a7, v13);
}

uint64_t closure #1 in TokenGenerator._oneShotResponse<A, B>(type:configuration:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 136) = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    return MEMORY[0x270FA2498](closure #1 in TokenGenerator._oneShotResponse<A, B>(type:configuration:), 0, 0);
  }
}

uint64_t closure #1 in TokenGenerator._oneShotResponse<A, B>(type:configuration:)()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[6];
  uint64_t v3 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v4 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v1, 0, 1, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[18] = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in TokenGenerator._oneShotResponse<A, B>(type:configuration:);
  uint64_t v6 = v0[15];
  uint64_t v7 = v0[12];
  return TokenGenerator.renderedPromptSanitizerConfiguration(generativeFunctionInstrumenter:)(v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v2 + 96), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = closure #1 in TokenGenerator._oneShotResponse<A, B>(type:configuration:);
  }
  else
  {
    uint64_t v3 = closure #1 in TokenGenerator._oneShotResponse<A, B>(type:configuration:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v1 = v0[19];
  GenerativeConfigurationProtocol.stringRenderedPromptSanitizer.getter();
  if (v1)
  {
    uint64_t v3 = v0[14];
    uint64_t v2 = v0[15];
    uint64_t v4 = v0[13];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  else
  {
    uint64_t v7 = v0[15];
    uint64_t v9 = v0[10];
    uint64_t v8 = v0[11];
    uint64_t v10 = swift_task_alloc();
    *(void *)(v10 + 16) = v7;
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF16GenerativeModels39StringRenderedPromptSanitizerWithRunnerV_s5NeverO0cD10Foundation0efghI13ConfigurationVTg5Tm((void (*)(char *))partial apply for closure #1 in closure #1 in TokenGenerator._oneShotResponse<A, B>(type:configuration:), v10, MEMORY[0x263F41480], &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithRunner?, MEMORY[0x263F41610], v8);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v9, &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithRunner?);
    swift_task_dealloc();
    uint64_t v11 = (void *)swift_task_alloc();
    v0[20] = v11;
    void *v11 = v0;
    v11[1] = closure #1 in TokenGenerator._oneShotResponse<A, B>(type:configuration:);
    uint64_t v12 = v0[17];
    uint64_t v13 = v0[11];
    uint64_t v14 = v0[3];
    return static TokenGenerator.scrubIfNeeded(promptTurns:stringRenderedPromptSanitizerWithConfiguration:)(v14, v12, v13);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = closure #1 in TokenGenerator._oneShotResponse<A, B>(type:configuration:);
  }
  else {
    uint64_t v2 = closure #1 in TokenGenerator._oneShotResponse<A, B>(type:configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[13];
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[11], &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[13];
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[11], &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t protocol witness for ChatLanguageModelProvidingOneShotGenerable._oneShotResponse<A, B>(type:configuration:) in conformance TokenGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v17;
  void *v17 = v8;
  v17[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return TokenGenerator._oneShotResponse<A, B>(type:configuration:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t TokenGenerator._respondMultiElement<A, B>(type:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[9] = a7;
  v8[10] = v7;
  v8[7] = a5;
  v8[8] = a6;
  v8[5] = a3;
  v8[6] = a4;
  v8[3] = a1;
  _OWORD v8[4] = a2;
  uint64_t v9 = type metadata accessor for GenerativeFunctionInstrumenter();
  v8[11] = v9;
  v8[12] = *(void *)(v9 - 8);
  v8[13] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenGenerator._respondMultiElement<A, B>(type:configuration:), 0, 0);
}

uint64_t TokenGenerator._respondMultiElement<A, B>(type:configuration:)()
{
  uint64_t v1 = v0[10];
  if (*(void *)(v1 + 24)) {
    swift_bridgeObjectRetain();
  }
  uint64_t v16 = v0[13];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[5];
  GenerativeConfigurationProtocol.generateGenerativeFunctionInstrumenter(useCaseIdentifier:eventReporter:)();
  swift_bridgeObjectRelease();
  swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Array();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[14] = v8;
  v8[2] = v4;
  v8[3] = v5;
  _OWORD v8[4] = v2;
  v8[5] = v3;
  v8[6] = v6;
  v8[7] = v1;
  v8[8] = v16;
  uint64_t v9 = (void *)swift_task_alloc();
  v0[15] = v9;
  type metadata accessor for GenerativeStream();
  v0[2] = swift_getAssociatedConformanceWitness();
  swift_getWitnessTable();
  *uint64_t v9 = v0;
  v9[1] = TokenGenerator._respondMultiElement<A, B>(type:configuration:);
  uint64_t v10 = v0[13];
  uint64_t v11 = v0[5];
  uint64_t v12 = v0[6];
  uint64_t v13 = v0[4];
  uint64_t v14 = v0[3];
  return TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(v14, v13, v11, v7, v10, (uint64_t)&async function pointer to partial apply for closure #1 in TokenGenerator._respondMultiElement<A, B>(type:configuration:), (uint64_t)v8, v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = TokenGenerator._respondMultiElement<A, B>(type:configuration:);
  }
  else {
    uint64_t v2 = TokenGenerator._respondMultiElement<A, B>(type:configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t closure #1 in TokenGenerator._respondMultiElement<A, B>(type:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 168) = v14;
  *(_OWORD *)(v8 + 152) = v13;
  *(void *)(v8 + 136) = a7;
  *(void *)(v8 + 144) = a8;
  *(void *)(v8 + 120) = a5;
  *(void *)(v8 + 128) = a6;
  *(unsigned char *)(v8 + 328) = a4;
  *(void *)(v8 + 104) = a2;
  *(void *)(v8 + 112) = a3;
  *(void *)(v8 + 96) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  *(void *)(v8 + 176) = swift_task_alloc();
  type metadata accessor for StringResponseSanitizerRunnerConfiguration();
  *(void *)(v8 + 184) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for StringResponseSanitizerWithConfiguration();
  *(void *)(v8 + 192) = v9;
  *(void *)(v8 + 200) = *(void *)(v9 - 8);
  *(void *)(v8 + 208) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for StringResponseSanitizerWithRunner();
  *(void *)(v8 + 216) = v10;
  *(void *)(v8 + 224) = *(void *)(v10 - 8);
  *(void *)(v8 + 232) = swift_task_alloc();
  *(void *)(v8 + 240) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithRunner?);
  *(void *)(v8 + 248) = swift_task_alloc();
  *(void *)(v8 + 256) = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in TokenGenerator._respondMultiElement<A, B>(type:configuration:), 0, 0);
}

uint64_t closure #1 in TokenGenerator._respondMultiElement<A, B>(type:configuration:)()
{
  GenerativeConfigurationProtocol.stringResponseSanitizer.getter();
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 224);
  outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 256), v1, &demangling cache variable for type metadata for StringResponseSanitizerWithRunner?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    char v4 = *(unsigned char *)(v0 + 328);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 248), &demangling cache variable for type metadata for StringResponseSanitizerWithRunner?);
    *(_OWORD *)(v0 + 32) = 0u;
    *(void *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 264) = v5;
    *uint64_t v5 = v0;
    v5[1] = closure #1 in TokenGenerator._respondMultiElement<A, B>(type:configuration:);
    uint64_t v6 = *(void *)(v0 + 160);
    uint64_t v7 = *(void *)(v0 + 144);
    uint64_t v8 = *(void *)(v0 + 104);
    uint64_t v9 = *(void *)(v0 + 112);
    uint64_t v10 = *(void *)(v0 + 96);
    return MEMORY[0x270F2EEE0](v10, v8, v9, v4 & 1, v0 + 16, v7, v6);
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 240);
    uint64_t v13 = *(void *)(v0 + 224);
    uint64_t v12 = *(void *)(v0 + 232);
    uint64_t v14 = *(void *)(v0 + 216);
    uint64_t v15 = *(void *)(v0 + 176);
    uint64_t v16 = *(void *)(v0 + 136);
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 32))(v11, *(void *)(v0 + 248), v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v11, v14);
    uint64_t v17 = type metadata accessor for GenerativeFunctionInstrumenter();
    uint64_t v18 = *(void *)(v17 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 280) = v19;
    *uint64_t v19 = v0;
    v19[1] = closure #1 in TokenGenerator._respondMultiElement<A, B>(type:configuration:);
    uint64_t v21 = *(void *)(v0 + 176);
    uint64_t v20 = *(void *)(v0 + 184);
    return TokenGenerator.responseSanitizerConfiguration(generativeFunctionInstrumenter:)(v20, v21);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)v1 + 16;
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v2, &demangling cache variable for type metadata for _StreamSanitizer?);
  if (v0) {
    uint64_t v3 = closure #1 in TokenGenerator._respondMultiElement<A, B>(type:configuration:);
  }
  else {
    uint64_t v3 = closure #1 in TokenGenerator._respondMultiElement<A, B>(type:configuration:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v2 = *v1;
  (*v1)[36] = v0;
  swift_task_dealloc();
  if (v0)
  {
    char v4 = v2[28];
    uint64_t v3 = v2[29];
    uint64_t v5 = v2[27];
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v2[22], &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v2[39] = (uint64_t)v6;
    v2[40] = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v6(v3, v5);
    uint64_t v7 = closure #1 in TokenGenerator._respondMultiElement<A, B>(type:configuration:);
  }
  else
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v2[22], &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    uint64_t v7 = closure #1 in TokenGenerator._respondMultiElement<A, B>(type:configuration:);
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t *boxed_opaque_existential_1Tm;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 192);
  char v4 = *(unsigned char *)(v0 + 328);
  StringResponseSanitizerWithConfiguration.init(stringResponseSanitizer:configuration:)();
  *(void *)(v0 + 80) = v3;
  *(void *)(v0 + 88) = lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type StringResponseSanitizerWithConfiguration and conformance StringResponseSanitizerWithConfiguration, MEMORY[0x263F415F0]);
  boxed_opaque_existential_1Tm = __swift_allocate_boxed_opaque_existential_1Tm((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 16))(boxed_opaque_existential_1Tm, v1, v3);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v6;
  *uint64_t v6 = v0;
  v6[1] = closure #1 in TokenGenerator._respondMultiElement<A, B>(type:configuration:);
  uint64_t v7 = *(void *)(v0 + 160);
  uint64_t v8 = *(void *)(v0 + 144);
  uint64_t v9 = *(void *)(v0 + 104);
  uint64_t v10 = *(void *)(v0 + 112);
  uint64_t v11 = *(void *)(v0 + 96);
  return MEMORY[0x270F2EEE0](v11, v9, v10, v4 & 1, v0 + 56, v8, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 304) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = closure #1 in TokenGenerator._respondMultiElement<A, B>(type:configuration:);
  }
  else
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v2 + 56, &demangling cache variable for type metadata for _StreamSanitizer?);
    uint64_t v3 = closure #1 in TokenGenerator._respondMultiElement<A, B>(type:configuration:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[30];
  uint64_t v2 = v0[27];
  uint64_t v3 = v0[28];
  (*(void (**)(void, void))(v0[25] + 8))(v0[26], v0[24]);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[32], &demangling cache variable for type metadata for StringResponseSanitizerWithRunner?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 256), &demangling cache variable for type metadata for StringResponseSanitizerWithRunner?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 256), &demangling cache variable for type metadata for StringResponseSanitizerWithRunner?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 256);
  (*(void (**)(void, void))(v0 + 312))(*(void *)(v0 + 240), *(void *)(v0 + 216));
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for StringResponseSanitizerWithRunner?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = v0[32];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[27];
  char v4 = v0[28];
  (*(void (**)(void, void))(v0[25] + 8))(v0[26], v0[24]);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for StringResponseSanitizerWithRunner?);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)(v0 + 7), &demangling cache variable for type metadata for _StreamSanitizer?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 960) = v8;
  *(void *)(v9 + 952) = v21;
  *(_OWORD *)(v9 + 936) = v20;
  *(void *)(v9 + 928) = v19;
  *(void *)(v9 + 920) = v18;
  *(void *)(v9 + 912) = v17;
  *(void *)(v9 + 904) = a8;
  *(void *)(v9 + 896) = a7;
  *(void *)(v9 + 888) = a6;
  *(void *)(v9 + 880) = a5;
  *(void *)(v9 + 872) = a4;
  *(void *)(v9 + 864) = a3;
  *(void *)(v9 + 856) = a1;
  *(void *)(v9 + 968) = *v8;
  uint64_t v10 = type metadata accessor for ChatMessageRole();
  *(void *)(v9 + 976) = v10;
  *(void *)(v9 + 984) = *(void *)(v10 - 8);
  *(void *)(v9 + 992) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  *(void *)(v9 + 1000) = swift_task_alloc();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<String, Error>);
  *(void *)(v9 + 1008) = v11;
  *(void *)(v9 + 1016) = *(void *)(v11 - 8);
  *(void *)(v9 + 1024) = swift_task_alloc();
  uint64_t v12 = *(void *)(v19 - 8);
  *(void *)(v9 + 1032) = v12;
  *(void *)(v9 + 1040) = *(void *)(v12 + 64);
  *(void *)(v9 + 1048) = swift_task_alloc();
  *(void *)(v9 + 1056) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for GenerativeFunctionInstrumenter();
  *(void *)(v9 + 1064) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v9 + 1072) = v14;
  *(void *)(v9 + 1080) = *(void *)(v14 + 64);
  *(void *)(v9 + 1088) = swift_task_alloc();
  *(void *)(v9 + 1096) = swift_task_alloc();
  *(void *)(v9 + 1104) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (result: AsyncThrowingStream<String, Error>, duration: Double));
  *(void *)(v9 + 1112) = swift_task_alloc();
  *(void *)(v9 + 1120) = swift_task_alloc();
  *(void *)(v9 + 1128) = swift_task_alloc();
  *(void *)(v9 + 1136) = *(void *)(v18 - 8);
  *(void *)(v9 + 1144) = swift_task_alloc();
  *(void *)(v9 + 1152) = swift_task_alloc();
  *(void *)(v9 + 1160) = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:), 0, 0);
}

uint64_t TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)()
{
  GenerativeConfigurationProtocol.samplingParameters.getter(*(void *)(v0 + 952), v0 + 16);
  outlined init with take of Locale?(v0 + 16, v0 + 296, &demangling cache variable for type metadata for SamplingParameters?);
  outlined init with take of Locale?(v0 + 296, v0 + 160, &demangling cache variable for type metadata for SamplingParameters?);
  if (_s15TokenGeneration26SamplingParametersEnvelopeVSgWOg(v0 + 160) == 1)
  {
    char v31 = 1;
    uint64_t v1 = 0;
  }
  else
  {
    outlined release of SamplingParametersEnvelope(v0 + 296);
    uint64_t v1 = *(void *)(v0 + 264);
    char v31 = *(unsigned char *)(v0 + 272);
  }
  uint64_t v36 = *(void *)(v0 + 1080);
  uint64_t v2 = *(void *)(v0 + 1072);
  uint64_t v3 = *(void *)(v0 + 1064);
  uint64_t v4 = *(void *)(v0 + 1056);
  uint64_t v34 = *(void *)(v0 + 1088);
  uint64_t v35 = *(void *)(v0 + 1048);
  uint64_t v38 = *(void *)(v0 + 1040);
  uint64_t v5 = *(void *)(v0 + 1032);
  uint64_t v33 = v5;
  uint64_t v45 = *(void *)(v0 + 968);
  uint64_t v43 = *(void *)(v0 + 960);
  uint64_t v42 = *(void *)(v0 + 920);
  uint64_t v44 = *(void *)(v0 + 872);
  uint64_t v32 = *(void *)(v0 + 864);
  long long v39 = *(_OWORD *)(v0 + 928);
  long long v40 = *(_OWORD *)(v0 + 944);
  long long v41 = *(_OWORD *)(v0 + 904);
  uint64_t v6 = *(void *)(v0 + 928);
  uint64_t v37 = v6;
  uint64_t v7 = *(void (**)(void))(v2 + 16);
  uint64_t v8 = *(void *)(v0 + 1096);
  v7();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v9(v4, v32, v6);
  ((void (*)(uint64_t, uint64_t, uint64_t))v7)(v34, v8, v3);
  v9(v35, v4, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v11 = (v36 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (*(unsigned __int8 *)(v33 + 80) + v11 + 8) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  unint64_t v13 = (v38 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = swift_allocObject();
  *(void *)(v0 + 1168) = v14;
  *(_OWORD *)(v14 + 16) = v41;
  *(void *)(v14 + 32) = v42;
  *(_OWORD *)(v14 + 40) = v39;
  *(_OWORD *)(v14 + 56) = v40;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v14 + v10, v8, v3);
  *(void *)(v14 + v11) = v43;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v33 + 32))(v14 + v12, v4, v37);
  *(void *)(v14 + v13) = v44;
  *(void *)(v14 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8)) = v45;
  swift_retain();
  if (v31)
  {
    uint64_t v15 = *(void *)(v0 + 968);
    *(void *)(v0 + 1200) = mach_absolute_time();
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 1208) = v16;
    *uint64_t v16 = v0;
    v16[1] = TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
    uint64_t v17 = *(void *)(v0 + 1088);
    uint64_t v18 = *(void *)(v0 + 1048);
    uint64_t v19 = *(void *)(v0 + 1024);
    uint64_t v20 = *(void *)(v0 + 960);
    uint64_t v21 = *(void *)(v0 + 912);
    uint64_t v22 = *(void *)(v0 + 904);
    uint64_t v23 = *(void *)(v0 + 872);
    return closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(v19, v17, v20, v18, v23, v15, v22, v21);
  }
  else
  {
    uint64_t v25 = *(void *)(v0 + 1048);
    uint64_t v26 = *(void *)(v0 + 1032);
    uint64_t v27 = *(void *)(v0 + 928);
    (*(void (**)(void, void))(*(void *)(v0 + 1072) + 8))(*(void *)(v0 + 1088), *(void *)(v0 + 1064));
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    unint64_t v28 = (void *)swift_task_alloc();
    *(void *)(v0 + 1176) = v28;
    void v28[2] = &async function pointer to partial apply for closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
    v28[3] = v14;
    v28[4] = v1;
    uint64_t v29 = (void *)swift_task_alloc();
    *(void *)(v0 + 1184) = v29;
    *uint64_t v29 = v0;
    v29[1] = TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
    uint64_t v30 = *(void *)(v0 + 1120);
    return MEMORY[0x270FA22B8](v30);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 1192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1216) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[131];
  uint64_t v4 = v2[129];
  uint64_t v5 = v2[116];
  (*(void (**)(void, void))(v2[134] + 8))(v2[136], v2[133]);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v6 = TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  else {
    uint64_t v6 = TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

{
  uint64_t v0;
  double v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  uint64_t v22;

  uint64_t v1 = *(double *)(*(void *)(v0 + 1120) + *(int *)(*(void *)(v0 + 1104) + 48));
  (*(void (**)(void))(*(void *)(v0 + 1016) + 32))(*(void *)(v0 + 1128));
  uint64_t v2 = *(void **)(v0 + 1192);
  uint64_t v3 = *(void *)(v0 + 1128);
  uint64_t v4 = *(void *)(v0 + 1104);
  uint64_t v5 = *(void *)(v0 + 952);
  swift_release();
  *(double *)(v3 + *(int *)(v4 + 48)) = v1;
  *(void *)(v0 + 840) = 0;
  *(unsigned char *)(v0 + 848) = 1;
  GenerativeConfigurationProtocol.samplingParameters.getter(v5, v0 + 704);
  if (v2)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 1128), &demangling cache variable for type metadata for (result: AsyncThrowingStream<String, Error>, duration: Double));
    MEMORY[0x261201A80](v2);
    GenerativeFunctionInstrumenter.executionEnd(error:)();

    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  else
  {
    outlined init with take of Locale?(v0 + 704, v0 + 568, &demangling cache variable for type metadata for SamplingParameters?);
    outlined init with take of Locale?(v0 + 568, v0 + 432, &demangling cache variable for type metadata for SamplingParameters?);
    if (_s15TokenGeneration26SamplingParametersEnvelopeVSgWOg(v0 + 432) != 1)
    {
      outlined release of SamplingParametersEnvelope(v0 + 568);
      if ((*(unsigned char *)(v0 + 544) & 1) == 0)
      {
        *(double *)(v0 + 840) = *(double *)(v0 + 536) - v1;
        *(unsigned char *)(v0 + 848) = 0;
      }
    }
    uint64_t v8 = *(void *)(v0 + 1128);
    uint64_t v9 = *(void *)(v0 + 1112);
    unint64_t v10 = *(void *)(v0 + 1016);
    unint64_t v11 = *(void *)(v0 + 1008);
    unint64_t v12 = *(void *)(v0 + 952);
    uint64_t v19 = *(_OWORD *)(v0 + 920);
    uint64_t v20 = *(_OWORD *)(v0 + 904);
    uint64_t v18 = *(_OWORD *)(v0 + 936);
    uint64_t v21 = *(_OWORD *)(v0 + 888);
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 1072) + 56))(*(void *)(v0 + 1000), 1, 1, *(void *)(v0 + 1064));
    unint64_t v13 = *(int *)(v4 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v8, v11);
    *(double *)(v9 + v13) = v1;
    uint64_t v14 = swift_task_alloc();
    *(void *)(v0 + 1224) = v14;
    *(_OWORD *)(v14 + 16) = v20;
    *(_OWORD *)(v14 + 32) = v19;
    *(_OWORD *)(v14 + 48) = v18;
    *(void *)(v14 + 64) = v12;
    *(_OWORD *)(v14 + 72) = v21;
    *(void *)(v14 + 88) = v9;
    *(void *)(v14 + 96) = v0 + 840;
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 1232) = v15;
    *uint64_t v15 = v0;
    v15[1] = TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
    uint64_t v16 = *(void *)(v0 + 1152);
    uint64_t v17 = *(void *)(v0 + 1000);
    return static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(v16, v17, (int *)&async function pointer to partial apply for closure #2 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:));
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  swift_task_dealloc();
  uint64_t v1 = *(void **)(v0 + 1192);
  swift_release();
  MEMORY[0x261201A80](v1);
  GenerativeFunctionInstrumenter.executionEnd(error:)();

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  uint64_t v31;

  uint64_t v1 = *(void *)(v0 + 1200);
  (*(void (**)(void, void, void))(*(void *)(v0 + 1016) + 16))(*(void *)(v0 + 1128), *(void *)(v0 + 1024), *(void *)(v0 + 1008));
  uint64_t v2 = mach_absolute_time();
  uint64_t v3 = v2 >= v1;
  uint64_t v4 = v2 - v1;
  if (!v3) {
    __break(1u);
  }
  *(_DWORD *)(v0 + 148) = 0;
  uint64_t v5 = *(void *)(v0 + 1024);
  uint64_t v6 = *(void *)(v0 + 1016);
  uint64_t v7 = *(void *)(v0 + 1008);
  *(_DWORD *)(v0 + 152) = 0;
  mach_timebase_info((mach_timebase_info_t)(v0 + 148));
  LODWORD(v8) = *(_DWORD *)(v0 + 148);
  LODWORD(v9) = *(_DWORD *)(v0 + 152);
  unint64_t v10 = (double)v4 * (double)v8 / ((double)v9 * 1000000000.0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  unint64_t v11 = *(void **)(v0 + 1216);
  unint64_t v12 = *(void *)(v0 + 1128);
  unint64_t v13 = *(void *)(v0 + 1104);
  uint64_t v14 = *(void *)(v0 + 952);
  swift_release();
  *(double *)(v12 + *(int *)(v13 + 48)) = v10;
  *(void *)(v0 + 840) = 0;
  *(unsigned char *)(v0 + 848) = 1;
  GenerativeConfigurationProtocol.samplingParameters.getter(v14, v0 + 704);
  if (v11)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 1128), &demangling cache variable for type metadata for (result: AsyncThrowingStream<String, Error>, duration: Double));
    MEMORY[0x261201A80](v11);
    GenerativeFunctionInstrumenter.executionEnd(error:)();

    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
  else
  {
    outlined init with take of Locale?(v0 + 704, v0 + 568, &demangling cache variable for type metadata for SamplingParameters?);
    outlined init with take of Locale?(v0 + 568, v0 + 432, &demangling cache variable for type metadata for SamplingParameters?);
    if (_s15TokenGeneration26SamplingParametersEnvelopeVSgWOg(v0 + 432) != 1)
    {
      outlined release of SamplingParametersEnvelope(v0 + 568);
      if ((*(unsigned char *)(v0 + 544) & 1) == 0)
      {
        *(double *)(v0 + 840) = *(double *)(v0 + 536) - v10;
        *(unsigned char *)(v0 + 848) = 0;
      }
    }
    uint64_t v17 = *(void *)(v0 + 1128);
    uint64_t v18 = *(void *)(v0 + 1112);
    uint64_t v19 = *(void *)(v0 + 1016);
    uint64_t v20 = *(void *)(v0 + 1008);
    uint64_t v21 = *(void *)(v0 + 952);
    unint64_t v28 = *(_OWORD *)(v0 + 920);
    uint64_t v29 = *(_OWORD *)(v0 + 904);
    uint64_t v27 = *(_OWORD *)(v0 + 936);
    uint64_t v30 = *(_OWORD *)(v0 + 888);
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 1072) + 56))(*(void *)(v0 + 1000), 1, 1, *(void *)(v0 + 1064));
    uint64_t v22 = *(int *)(v13 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v17, v20);
    *(double *)(v18 + v22) = v10;
    uint64_t v23 = swift_task_alloc();
    *(void *)(v0 + 1224) = v23;
    *(_OWORD *)(v23 + 16) = v29;
    *(_OWORD *)(v23 + 32) = v28;
    *(_OWORD *)(v23 + 48) = v27;
    *(void *)(v23 + 64) = v21;
    *(_OWORD *)(v23 + 72) = v30;
    *(void *)(v23 + 88) = v18;
    *(void *)(v23 + 96) = v0 + 840;
    uint64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 1232) = v24;
    *uint64_t v24 = v0;
    v24[1] = TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
    uint64_t v25 = *(void *)(v0 + 1152);
    uint64_t v26 = *(void *)(v0 + 1000);
    return static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(v25, v26, (int *)&async function pointer to partial apply for closure #2 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:));
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 1216);
  swift_release();
  MEMORY[0x261201A80](v1);
  GenerativeFunctionInstrumenter.executionEnd(error:)();

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1240) = v0;
  swift_task_dealloc();
  if (v0)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v2 + 1000), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    swift_task_dealloc();
    uint64_t v3 = TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 1112);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v2 + 1000), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    swift_task_dealloc();
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v4, &demangling cache variable for type metadata for (result: AsyncThrowingStream<String, Error>, duration: Double));
    uint64_t v3 = TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = v0[145];
  uint64_t v2 = v0[143];
  uint64_t v3 = v0[142];
  uint64_t v4 = v0[141];
  uint64_t v5 = v0[124];
  uint64_t v6 = v0[123];
  uint64_t v7 = v0[122];
  uint64_t v8 = v0[115];
  (*(void (**)(uint64_t))(v3 + 32))(v1);
  GenerativeFunctionInstrumenter.inferenceEnd()();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v4, &demangling cache variable for type metadata for (result: AsyncThrowingStream<String, Error>, duration: Double));
  GenerativeFunctionInstrumenter.executionEnd(error:)();
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, *MEMORY[0x263F62118], v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v8);
  ChatMessageResponse.init(role:content:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[139];
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[141], &demangling cache variable for type metadata for (result: AsyncThrowingStream<String, Error>, duration: Double));
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for (result: AsyncThrowingStream<String, Error>, duration: Double));
  uint64_t v2 = (void *)v0[155];
  MEMORY[0x261201A80](v2);
  GenerativeFunctionInstrumenter.executionEnd(error:)();

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t TokenGenerator._respondSingleElement<A, B>(type:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[8] = a7;
  v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  _OWORD v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  uint64_t v9 = type metadata accessor for GenerativeFunctionInstrumenter();
  v8[10] = v9;
  v8[11] = *(void *)(v9 - 8);
  v8[12] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenGenerator._respondSingleElement<A, B>(type:configuration:), 0, 0);
}

uint64_t TokenGenerator._respondSingleElement<A, B>(type:configuration:)()
{
  uint64_t v1 = v0[9];
  if (*(void *)(v1 + 24)) {
    swift_bridgeObjectRetain();
  }
  uint64_t v2 = v0[12];
  uint64_t v4 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v6 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v7 = v0[4];
  GenerativeConfigurationProtocol.generateGenerativeFunctionInstrumenter(useCaseIdentifier:eventReporter:)();
  swift_bridgeObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[13] = v9;
  void v9[2] = v6;
  v9[3] = v5;
  v9[4] = v4;
  uint64_t v9[5] = v3;
  v9[6] = v7;
  v9[7] = v1;
  unsigned char v9[8] = v2;
  unint64_t v10 = (void *)swift_task_alloc();
  v0[14] = v10;
  swift_getAssociatedConformanceWitness();
  *unint64_t v10 = v0;
  v10[1] = TokenGenerator._respondSingleElement<A, B>(type:configuration:);
  uint64_t v11 = v0[12];
  uint64_t v12 = v0[4];
  uint64_t v13 = v0[5];
  uint64_t v14 = v0[3];
  uint64_t v15 = v0[2];
  return TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(v15, v14, v12, AssociatedTypeWitness, v11, (uint64_t)&async function pointer to partial apply for closure #1 in TokenGenerator._respondSingleElement<A, B>(type:configuration:), (uint64_t)v9, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = TokenGenerator._respondSingleElement<A, B>(type:configuration:);
  }
  else {
    uint64_t v2 = TokenGenerator._respondSingleElement<A, B>(type:configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 120) = v16;
  *(_OWORD *)(v8 + 104) = v15;
  *(void *)(v8 + 88) = v13;
  *(void *)(v8 + 96) = v14;
  *(void *)(v8 + 72) = a7;
  *(void *)(v8 + 80) = a8;
  *(void *)(v8 + 56) = a5;
  *(void *)(v8 + 64) = a6;
  *(void *)(v8 + 40) = a3;
  *(void *)(v8 + 48) = a4;
  *(void *)(v8 + 24) = a1;
  *(void *)(v8 + 32) = a2;
  *(void *)(v8 + 128) = *(void *)(v14 - 8);
  *(void *)(v8 + 136) = swift_task_alloc();
  type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel(0);
  *(void *)(v8 + 144) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Prompt();
  *(void *)(v8 + 152) = v9;
  *(void *)(v8 + 160) = *(void *)(v9 - 8);
  *(void *)(v8 + 168) = swift_task_alloc();
  *(void *)(v8 + 176) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringRenderedPromptSanitizerWithRunner?);
  *(void *)(v8 + 184) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  *(void *)(v8 + 192) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  *(void *)(v8 + 200) = swift_task_alloc();
  *(void *)(v8 + 208) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for StringRenderedPromptSanitizerRunnerConfiguration();
  *(void *)(v8 + 216) = v10;
  *(void *)(v8 + 224) = *(void *)(v10 - 8);
  *(void *)(v8 + 232) = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:), 0, 0);
}

uint64_t closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[4];
  GenerativeFunctionInstrumenter.executionBegin()();
  GenerativeFunctionInstrumenter.promptConstructionBegin()();
  uint64_t v3 = type metadata accessor for GenerativeFunctionInstrumenter();
  v0[30] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  uint64_t v5 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56);
  v0[31] = v5;
  v0[32] = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v5(v1, 0, 1, v3);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[33] = v6;
  *uint64_t v6 = v0;
  v6[1] = closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  uint64_t v7 = v0[29];
  uint64_t v8 = v0[26];
  return TokenGenerator.renderedPromptSanitizerConfiguration(generativeFunctionInstrumenter:)(v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 272) = v0;
  swift_task_dealloc();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v2 + 208), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  if (v0) {
    uint64_t v3 = closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  else {
    uint64_t v3 = closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = v0[34];
  GenerativeConfigurationProtocol.stringRenderedPromptSanitizer.getter();
  if (v1)
  {
    (*(void (**)(void, void))(v0[28] + 8))(v0[29], v0[27]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    uint64_t v4 = v0[29];
    uint64_t v6 = v0[23];
    uint64_t v5 = v0[24];
    uint64_t v7 = swift_task_alloc();
    *(void *)(v7 + 16) = v4;
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF16GenerativeModels39StringRenderedPromptSanitizerWithRunnerV_s5NeverO0cD10Foundation0efghI13ConfigurationVTg5Tm((void (*)(char *))partial apply for closure #1 in closure #1 in TokenGenerator._oneShotResponse<A, B>(type:configuration:), v7, MEMORY[0x263F41480], &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithRunner?, MEMORY[0x263F41610], v5);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v6, &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithRunner?);
    swift_task_dealloc();
    uint64_t v8 = (void *)swift_task_alloc();
    v0[35] = v8;
    *uint64_t v8 = v0;
    v8[1] = closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
    uint64_t v9 = v0[15];
    uint64_t v10 = v0[12];
    return GenerativeConfigurationProtocol<>.renderToTokenGenerationPromptTurns()(v10, v9);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 312) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  else {
    uint64_t v2 = closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[6];
  (*(void (**)(void, void, void))(v0[20] + 16))(v0[21], v0[22], v0[19]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[40] = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  uint64_t v6 = v0[21];
  uint64_t v8 = v0[17];
  uint64_t v7 = v0[18];
  uint64_t v9 = v0[15];
  uint64_t v10 = v0[12];
  return TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:chatMessagesConfiguration:)(v7, v6, v8, v10, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 328) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  else {
    uint64_t v2 = closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  uint64_t v17;

  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v14 = *(_OWORD *)(v0 + 88);
  long long v15 = *(_OWORD *)(v0 + 72);
  uint64_t v13 = *(_OWORD *)(v0 + 104);
  uint64_t v16 = *(_OWORD *)(v0 + 48);
  GenerativeFunctionInstrumenter.promptConstructionEnd()();
  GenerativeFunctionInstrumenter.inferenceBegin()();
  v1(v3, 1, 1, v2);
  uint64_t v8 = swift_task_alloc();
  *(void *)(v0 + 336) = v8;
  *(_OWORD *)(v8 + 16) = v15;
  *(_OWORD *)(v8 + 32) = v14;
  *(_OWORD *)(v8 + 48) = v13;
  *(void *)(v8 + 64) = v5;
  *(void *)(v8 + 72) = v7;
  *(void *)(v8 + 80) = v4;
  *(_OWORD *)(v8 + 88) = v16;
  *(void *)(v8 + 104) = v6;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 344) = v9;
  *uint64_t v9 = v0;
  v9[1] = closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  uint64_t v10 = *(void *)(v0 + 200);
  uint64_t v11 = *(void *)(v0 + 24);
  return specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(v11, v10, (int *)&async function pointer to partial apply for closure #2 in closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 352) = v0;
  swift_task_dealloc();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v2 + 200), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  swift_task_dealloc();
  if (v0) {
    uint64_t v3 = closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  else {
    uint64_t v3 = closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v2 = v0[28];
  uint64_t v1 = v0[29];
  uint64_t v3 = v0[27];
  uint64_t v4 = v0[24];
  uint64_t v5 = v0[18];
  (*(void (**)(void, void))(v0[20] + 8))(v0[22], v0[19]);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v4, &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v5, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[28];
  uint64_t v1 = v0[29];
  uint64_t v3 = v0[27];
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[24], &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[28];
  uint64_t v1 = v0[29];
  uint64_t v3 = v0[27];
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[24], &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v2 = v0[28];
  uint64_t v1 = v0[29];
  uint64_t v3 = v0[27];
  uint64_t v4 = v0[24];
  (*(void (**)(void, void))(v0[20] + 8))(v0[22], v0[19]);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v4, &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v2 = v0[28];
  uint64_t v1 = v0[29];
  uint64_t v3 = v0[27];
  uint64_t v4 = v0[24];
  uint64_t v5 = v0[18];
  (*(void (**)(void, void))(v0[20] + 8))(v0[22], v0[19]);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v4, &demangling cache variable for type metadata for StringRenderedPromptSanitizerWithConfiguration?);
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v5, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v5 = (void *)*v2;
  v4[36] = a1;
  v4[37] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x270FA2498](closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:), 0, 0);
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v4[38] = v6;
    *uint64_t v6 = v5;
    v6[1] = closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
    uint64_t v7 = v4[24];
    uint64_t v8 = v4[22];
    return static TokenGenerator.scrubIfNeeded(promptTurns:stringRenderedPromptSanitizerWithConfiguration:)(v8, a1, v7);
  }
}

uint64_t closure #1 in closure #1 in TokenGenerator._streamCompletion<A>(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(void), uint64_t (*a6)(char *, char *))
{
  uint64_t v10 = a4(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v13 = (char *)v18 - v12;
  a5(0);
  MEMORY[0x270FA5388]();
  long long v15 = (char *)v18 - v14;
  (*(void (**)(char *, uint64_t))(v16 + 16))((char *)v18 - v14, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  return a6(v15, v13);
}

uint64_t closure #2 in closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[82] = v17;
  v8[81] = v16;
  v8[80] = v15;
  v8[79] = v14;
  v8[78] = v13;
  v8[77] = a8;
  v8[76] = a7;
  v8[75] = a6;
  v8[74] = a5;
  v8[73] = a4;
  v8[72] = a3;
  v8[71] = a2;
  v8[70] = a1;
  v8[83] = *(void *)(v14 - 8);
  v8[84] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for GenerativeFunctionInstrumenter();
  v8[85] = v9;
  v8[86] = *(void *)(v9 - 8);
  v8[87] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ToolChoice?);
  v8[88] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for TokenStream();
  v8[89] = v10;
  v8[90] = *(void *)(v10 - 8);
  v8[91] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #2 in closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:), 0, 0);
}

uint64_t closure #2 in closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)()
{
  uint64_t v37 = v0;
  GenerativeConfigurationProtocol.samplingParameters.getter(*(void *)(v0 + 656), v0 + 16);
  uint64_t v26 = v0 + 424;
  uint64_t v22 = v0 + 288;
  uint64_t v28 = *(void *)(v0 + 712);
  uint64_t v1 = *(void *)(v0 + 696);
  uint64_t v2 = *(void *)(v0 + 688);
  uint64_t v19 = *(void *)(v0 + 680);
  uint64_t v20 = *(void (***)(char *, uint64_t))(v0 + 704);
  uint64_t v32 = *(void *)(v0 + 728);
  uint64_t v33 = *(void *)(v0 + 672);
  uint64_t v3 = *(void *)(v0 + 664);
  uint64_t v4 = *(void *)(v0 + 656);
  uint64_t v30 = *(void *)(v0 + 720);
  uint64_t v31 = *(void *)(v0 + 648);
  uint64_t v17 = *(void *)(v0 + 600);
  uint64_t v5 = *(void *)(v0 + 584);
  uint64_t v24 = *(void *)(v0 + 576);
  uint64_t v25 = *(void *)(v0 + 592);
  long long v27 = *(_OWORD *)(v0 + 616);
  long long v34 = *(_OWORD *)(v0 + 632);
  uint64_t v23 = *(void *)(v0 + 616);
  uint64_t v29 = *(void *)(v0 + 608);
  outlined init with take of Locale?(v0 + 16, v0 + 152, &demangling cache variable for type metadata for SamplingParameters?);
  outlined init with take of Locale?(v0 + 152, v0 + 288, &demangling cache variable for type metadata for SamplingParameters?);
  uint64_t v6 = v4;
  uint64_t v7 = GenerativeConfigurationProtocol.tools.getter();
  uint64_t v8 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8EE78];
  if (v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = MEMORY[0x263F8EE78];
  }
  uint64_t v21 = v9;
  GenerativeConfigurationProtocol.toolChoice.getter(v34, v6);
  uint64_t v10 = GenerativeConfigurationProtocol.documents.getter();
  if (v10) {
    uint64_t v11 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v10;
  }
  else {
    uint64_t v11 = v8;
  }
  uint64_t v18 = v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v17, v19);
  (*(void (**)(uint64_t, uint64_t, void))(v3 + 16))(v33, v5, v34);
  RequestMetadata.init<A>(generativeFunctionInstrumenter:configuration:)(v1, v33, v34, v35);
  v36[0] = v35[0];
  v36[1] = v35[1];
  v36[2] = v35[2];
  v36[3] = v35[3];
  v36[4] = v35[4];
  v36[5] = v35[5];
  v36[6] = v35[6];
  TokenGenerator.complete<A>(promptInputFromGenerativeModel:parameters:tools:toolChoice:documents:generating:metadata:)(v24, v22, v21, v20, v18, v25, v36, v23, v32, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v20, &demangling cache variable for type metadata for ToolChoice?);
  outlined init with take of Locale?(v22, v26, &demangling cache variable for type metadata for SamplingParameters?);
  outlined release of SamplingParametersEnvelope(v26);
  type metadata accessor for TokenStream.AsyncIterator();
  uint64_t v12 = swift_allocBox();
  TokenStream.makeAsyncIterator()(v13);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v29;
  *(_OWORD *)(v14 + 24) = v27;
  *(_OWORD *)(v14 + 40) = v34;
  *(void *)(v14 + 56) = v31;
  *(void *)(v14 + 64) = v6;
  *(void *)(v14 + 72) = v12;
  swift_retain();
  AsyncThrowingStream.init<>(unfolding:)();
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v28);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t closure #1 in closure #2 in closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(uint64_t a1)
{
  v1[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Token?);
  v1[6] = swift_task_alloc();
  v1[7] = type metadata accessor for TokenStream.AsyncIterator();
  v1[8] = swift_projectBox();
  return MEMORY[0x270FA2498](closure #1 in closure #2 in closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:), 0, 0);
}

uint64_t closure #1 in closure #2 in closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)()
{
  swift_beginAccess();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in closure #2 in closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  uint64_t v2 = *(void *)(v0 + 48);
  return TokenStream.AsyncIterator.next()(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in closure #2 in closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  else
  {
    swift_endAccess();
    uint64_t v2 = closure #1 in closure #2 in closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = v0[6];
  uint64_t v2 = type metadata accessor for Token();
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for Token?);
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v4 = Token.text.getter();
    uint64_t v5 = v6;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  }
  uint64_t v7 = (uint64_t *)v0[5];
  *uint64_t v7 = v4;
  v7[1] = v5;
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_endAccess();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #2 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return MEMORY[0x270FA2498](closure #2 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:), 0, 0);
}

uint64_t closure #2 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)()
{
  uint64_t v1 = (uint64_t *)v0[6];
  uint64_t v2 = *v1;
  uint64_t v3 = *((unsigned __int8 *)v1 + 8);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[3] + *(int *)v0[3]);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[7] = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #2 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:);
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[2];
  return v8(v6, v5, v2, v3);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t protocol witness for ChatLanguageModelProvidingGenerativeStreamable._respondMultiElement<A, B>(type:configuration:) in conformance TokenGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v15;
  *uint64_t v15 = v7;
  v15[1] = partial apply for closure #2 in register<A>(documents:registrationCallback:);
  return TokenGenerator._respondMultiElement<A, B>(type:configuration:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for ChatLanguageModelProvidingGenerativeStreamable._respondSingleElement<A, B>(type:configuration:) in conformance TokenGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v15;
  *uint64_t v15 = v7;
  v15[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return TokenGenerator._respondSingleElement<A, B>(type:configuration:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t specialized TokenGeneratorResponseStringStreamAsyncIterator.init<A>(tokenStream:stringResponseSanitizerWithConfiguration:generativeFunctionInstrumenter:timeout:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v37 = a5;
  uint64_t v36 = a4;
  uint64_t v43 = a3;
  uint64_t v48 = a2;
  uint64_t v38 = a1;
  uint64_t v46 = a6;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<String, Error>.Iterator);
  uint64_t v44 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  uint64_t v42 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v8 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  long long v39 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<String, Error>);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  unint64_t v47 = (char *)&v35 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenStream<String>);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<TokenStream<String>, String>);
  uint64_t v41 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Prompt.Rendering?(a1, (uint64_t)v18, &demangling cache variable for type metadata for TokenStream<String>);
  lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(&lazy protocol witness table cache variable for type TokenStream<String> and conformance TokenStream<A>, &demangling cache variable for type metadata for TokenStream<String>);
  AsyncMapSequence.init(_:transform:)();
  lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(&lazy protocol witness table cache variable for type AsyncMapSequence<TokenStream<String>, String> and conformance AsyncMapSequence<A, B>, &demangling cache variable for type metadata for AsyncMapSequence<TokenStream<String>, String>);
  uint64_t v21 = v47;
  StringResponseSanitizerWithConfiguration.scrub<A>(_:elementToContent:)();
  v52[3] = v10;
  v52[4] = lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(&lazy protocol witness table cache variable for type AsyncThrowingStream<String, Error> and conformance AsyncThrowingStream<A, B>, &demangling cache variable for type metadata for AsyncThrowingStream<String, Error>);
  boxed_opaque_existential_1Tm = __swift_allocate_boxed_opaque_existential_1Tm(v52);
  (*(void (**)(uint64_t *, char *, uint64_t))(v11 + 16))(boxed_opaque_existential_1Tm, v21, v10);
  v52[5] = v36;
  char v53 = v37 & 1;
  outlined init with copy of Prompt.Rendering?((uint64_t)v52, (uint64_t)v51, &demangling cache variable for type metadata for StreamWithTimeout<String>);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = 0;
  outlined init with copy of Prompt.Rendering?((uint64_t)v51, (uint64_t)v49, &demangling cache variable for type metadata for StreamWithTimeout<String>);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v23;
  long long v25 = v49[1];
  *(_OWORD *)(v24 + 24) = v49[0];
  *(_OWORD *)(v24 + 40) = v25;
  *(_OWORD *)(v24 + 56) = v49[2];
  *(unsigned char *)(v24 + 72) = v50;
  swift_retain();
  AsyncThrowingStream.init<>(unfolding:)();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v51, &demangling cache variable for type metadata for StreamWithTimeout<String>);
  swift_release();
  uint64_t v26 = v39;
  uint64_t v27 = v43;
  uint64_t v28 = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v39, v43, v40);
  uint64_t v29 = v42;
  MEMORY[0x261200F50](v10);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v11 + 8);
  v30(v14, v10);
  uint64_t v31 = v46;
  (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(v46, v29, v45);
  uint64_t v32 = type metadata accessor for TokenGeneratorResponseStringStreamAsyncIterator(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v31 + *(int *)(v32 + 20), v26, v28);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v27, v28);
  uint64_t v33 = type metadata accessor for StringResponseSanitizerWithConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(v48, v33);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v38, &demangling cache variable for type metadata for TokenStream<String>);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v52, &demangling cache variable for type metadata for StreamWithTimeout<String>);
  v30(v47, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v20, v35);
}

uint64_t closure #1 in TokenGeneratorResponseStringStreamAsyncIterator.init<A>(tokenStream:stringResponseSanitizerWithConfiguration:generativeFunctionInstrumenter:timeout:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return MEMORY[0x270FA2498](closure #1 in TokenGeneratorResponseStringStreamAsyncIterator.init<A>(tokenStream:stringResponseSanitizerWithConfiguration:generativeFunctionInstrumenter:timeout:), 0, 0);
}

uint64_t closure #1 in TokenGeneratorResponseStringStreamAsyncIterator.init<A>(tokenStream:stringResponseSanitizerWithConfiguration:generativeFunctionInstrumenter:timeout:)()
{
  uint64_t v1 = *(uint64_t **)(v0 + 16);
  *uint64_t v1 = Token.text.getter();
  v1[1] = v2;
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t closure #2 in TokenGeneratorResponseStringStreamAsyncIterator.init<A>(tokenStream:stringResponseSanitizerWithConfiguration:generativeFunctionInstrumenter:timeout:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t specialized TokenGeneratorResponseStringStreamAsyncIterator.init<A>(tokenStream:generativeFunctionInstrumenter:timeout:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v48 = a4;
  uint64_t v47 = a3;
  uint64_t v53 = a2;
  uint64_t v46 = a1;
  uint64_t v56 = a5;
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<String, Error>.Iterator);
  uint64_t v54 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  uint64_t v52 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v50 = *(void *)(v51 - 8);
  MEMORY[0x270FA5388](v51);
  uint64_t v49 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenStream<String>);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<TokenStream<String>, String>);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v44 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<String, Error>);
  uint64_t v45 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v57 = (char *)&v44 - v22;
  outlined init with copy of Prompt.Rendering?(a1, (uint64_t)v10, &demangling cache variable for type metadata for TokenStream<String>);
  lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(&lazy protocol witness table cache variable for type TokenStream<String> and conformance TokenStream<A>, &demangling cache variable for type metadata for TokenStream<String>);
  AsyncMapSequence.init(_:transform:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<TokenStream<String>, String>.Iterator?);
  uint64_t v23 = swift_allocBox();
  uint64_t v25 = v24;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<TokenStream<String>, String>.Iterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
  unint64_t v27 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v23;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v28 + v27, v15, v11);
  swift_retain();
  uint64_t v29 = v57;
  AsyncThrowingStream.init<>(unfolding:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  swift_release();
  v61[3] = v18;
  v61[4] = lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(&lazy protocol witness table cache variable for type AsyncThrowingStream<String, Error> and conformance AsyncThrowingStream<A, B>, &demangling cache variable for type metadata for AsyncThrowingStream<String, Error>);
  boxed_opaque_existential_1Tm = __swift_allocate_boxed_opaque_existential_1Tm(v61);
  uint64_t v31 = v45;
  (*(void (**)(uint64_t *, char *, uint64_t))(v45 + 16))(boxed_opaque_existential_1Tm, v29, v18);
  v61[5] = v47;
  char v62 = v48 & 1;
  outlined init with copy of Prompt.Rendering?((uint64_t)v61, (uint64_t)v60, &demangling cache variable for type metadata for StreamWithTimeout<String>);
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = 0;
  outlined init with copy of Prompt.Rendering?((uint64_t)v60, (uint64_t)v58, &demangling cache variable for type metadata for StreamWithTimeout<String>);
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = v32;
  long long v34 = v58[1];
  *(_OWORD *)(v33 + 24) = v58[0];
  *(_OWORD *)(v33 + 40) = v34;
  *(_OWORD *)(v33 + 56) = v58[2];
  *(unsigned char *)(v33 + 72) = v59;
  swift_retain();
  AsyncThrowingStream.init<>(unfolding:)();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v60, &demangling cache variable for type metadata for StreamWithTimeout<String>);
  swift_release();
  uint64_t v35 = v50;
  uint64_t v36 = v49;
  uint64_t v37 = v53;
  uint64_t v38 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v49, v53, v51);
  long long v39 = v52;
  MEMORY[0x261200F50](v18);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v31 + 8);
  v40(v21, v18);
  uint64_t v41 = v56;
  (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v56, v39, v55);
  uint64_t v42 = type metadata accessor for TokenGeneratorResponseStringStreamAsyncIterator(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v41 + *(int *)(v42 + 20), v36, v38);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v37, v38);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v46, &demangling cache variable for type metadata for TokenStream<String>);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v61, &demangling cache variable for type metadata for StreamWithTimeout<String>);
  return ((uint64_t (*)(char *, uint64_t))v40)(v57, v18);
}

uint64_t closure #1 in TokenGeneratorResponseStringStreamAsyncIterator.init<A>(tokenStream:generativeFunctionInstrumenter:timeout:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return MEMORY[0x270FA2498](closure #1 in TokenGeneratorResponseStringStreamAsyncIterator.init<A>(tokenStream:generativeFunctionInstrumenter:timeout:), 0, 0);
}

uint64_t TokenGeneratorResponseStringStreamAsyncIterator.next()()
{
  *(void *)(v1 + 16) = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  *(void *)(v1 + 24) = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenGeneratorResponseStringStreamAsyncIterator.next(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v1 + *(int *)(type metadata accessor for TokenGeneratorResponseStringStreamAsyncIterator(0) + 20);
  uint64_t v4 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v3, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v2, 0, 1, v4);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[4] = v6;
  *uint64_t v6 = v0;
  v6[1] = TokenGeneratorResponseStringStreamAsyncIterator.next();
  uint64_t v7 = v0[2];
  uint64_t v8 = v0[3];
  return specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(v8, v7);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TokenGeneratorResponseStringStreamAsyncIterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  *(void *)(*v3 + 40) = v2;
  swift_task_dealloc();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v6 + 24), &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  if (v2)
  {
    return MEMORY[0x270FA2498](TokenGeneratorResponseStringStreamAsyncIterator.next(), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
    return v8(a1, a2);
  }
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance TokenGeneratorResponseStringStreamAsyncIterator(uint64_t a1, uint64_t a2)
{
  v3[3] = v2;
  v3[4] = a2;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v3[5] = swift_task_alloc();
  return MEMORY[0x270FA2498](protocol witness for AsyncIteratorProtocol.next() in conformance TokenGeneratorResponseStringStreamAsyncIterator, 0, 0);
}

{
  uint64_t v2;
  void *v3;
  void *v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v10;

  uint64_t v6 = (void *)*v3;
  v6[7] = v2;
  swift_task_dealloc();
  uint64_t v7 = v6[5];
  if (v2)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v7, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    uint64_t v8 = protocol witness for AsyncIteratorProtocol.next() in conformance TokenGeneratorResponseStringStreamAsyncIterator;
  }
  else
  {
    v6[8] = a2;
    v6[9] = a1;
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v7, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
    uint64_t v8 = protocol witness for AsyncIteratorProtocol.next() in conformance TokenGeneratorResponseStringStreamAsyncIterator;
  }
  return MEMORY[0x270FA2498](v8, 0, 0);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance TokenGeneratorResponseStringStreamAsyncIterator()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[3] + *(int *)(v0[4] + 20);
  uint64_t v3 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v4 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v1, 0, 1, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[6] = v5;
  *uint64_t v5 = v0;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance TokenGeneratorResponseStringStreamAsyncIterator;
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[3];
  return specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(v6, v7);
}

{
  int8x16_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(int8x16_t *)v0[1].i64[0] = vextq_s8(v0[4], v0[4], 8uLL);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0->i64[1];
  return v1();
}

uint64_t _s16GenerativeModels47TokenGeneratorResponseStringStreamAsyncIteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF16GenerativeModels47TokenGeneratorResponseStringStreamAsyncIteratorV_Tg5Tu
                                                + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF16GenerativeModels47TokenGeneratorResponseStringStreamAsyncIteratorV_Tg5Tu);
  uint64_t v7 = (void *)swift_task_alloc();
  v4[4] = v7;
  *uint64_t v7 = v4;
  v7[1] = _s16GenerativeModels47TokenGeneratorResponseStringStreamAsyncIteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return v9(a2, a3);
}

uint64_t _s16GenerativeModels47TokenGeneratorResponseStringStreamAsyncIteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  swift_task_dealloc();
  if (v2)
  {
    **(void **)(v6 + 24) = v2;
  }
  else
  {
    uint64_t v9 = *(void **)(v6 + 16);
    *uint64_t v9 = a1;
    v9[1] = a2;
  }
  uint64_t v8 = *(uint64_t (**)(void))(v7 + 8);
  return v8();
}

uint64_t specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()(uint64_t a1)
{
  v1[6] = a1;
  uint64_t v2 = type metadata accessor for TokenGeneratorCompletionResponseStringStream(0);
  v1[7] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[8] = v3;
  v1[9] = *(void *)(v3 + 64);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect(), 0, 0);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1[6] = a1;
  uint64_t v2 = type metadata accessor for TokenGeneratorChatResponseStringStream(0);
  v1[7] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[8] = v3;
  v1[9] = *(void *)(v3 + 64);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect(), 0, 0);
}

uint64_t specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[6];
  uint64_t v5 = v4 + *(int *)(v0[7] + 28);
  uint64_t v6 = *(void *)v5;
  char v7 = *(unsigned char *)(v5 + 8);
  outlined init with copy of PromptCompletion(v4, v2, type metadata accessor for TokenGeneratorCompletionResponseStringStream);
  outlined init with copy of PromptCompletion(v2, v1, type metadata accessor for TokenGeneratorCompletionResponseStringStream);
  unint64_t v8 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v9 = swift_allocObject();
  v0[12] = v9;
  outlined init with take of PromptCompletionStream(v2, v9 + v8, type metadata accessor for TokenGeneratorCompletionResponseStringStream);
  if (v7)
  {
    mach_absolute_time();
    uint64_t v10 = (void *)swift_task_alloc();
    v0[16] = v10;
    *uint64_t v10 = v0;
    v10[1] = specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
    uint64_t v11 = v0[10];
    return specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()(v11);
  }
  else
  {
    outlined destroy of TokenGeneratorCompletionResponseStringStream(v0[10], type metadata accessor for TokenGeneratorCompletionResponseStringStream);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (content: String, tokens: [String]));
    uint64_t v13 = (void *)swift_task_alloc();
    v0[13] = v13;
    v13[2] = &async function pointer to partial apply for specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
    v13[3] = v9;
    v13[4] = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (result: (content: String, tokens: [String]), duration: Double));
    uint64_t v14 = (void *)swift_task_alloc();
    v0[14] = v14;
    void *v14 = v0;
    v14[1] = specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
    return MEMORY[0x270FA22B8](v0 + 2);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  mach_absolute_time();
  *(_DWORD *)(v0 + 172) = 0;
  *(_DWORD *)(v0 + 168) = 0;
  mach_timebase_info((mach_timebase_info_t)(v0 + 168));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 144);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8);
  return v4(v2, v1, v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  swift_release();
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[4];
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v4(v2, v1, v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v13;
  void *v14;
  uint64_t v15;

  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[6];
  uint64_t v5 = v4 + *(int *)(v0[7] + 28);
  uint64_t v6 = *(void *)v5;
  char v7 = *(unsigned char *)(v5 + 8);
  outlined init with copy of PromptCompletion(v4, v2, type metadata accessor for TokenGeneratorChatResponseStringStream);
  outlined init with copy of PromptCompletion(v2, v1, type metadata accessor for TokenGeneratorChatResponseStringStream);
  unint64_t v8 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v9 = swift_allocObject();
  v0[12] = v9;
  outlined init with take of PromptCompletionStream(v2, v9 + v8, type metadata accessor for TokenGeneratorChatResponseStringStream);
  if (v7)
  {
    mach_absolute_time();
    uint64_t v10 = (void *)swift_task_alloc();
    v0[16] = v10;
    *uint64_t v10 = v0;
    v10[1] = specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
    uint64_t v11 = v0[10];
    return specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()(v11);
  }
  else
  {
    outlined destroy of TokenGeneratorCompletionResponseStringStream(v0[10], type metadata accessor for TokenGeneratorChatResponseStringStream);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (content: String, tokens: [String]));
    uint64_t v13 = (void *)swift_task_alloc();
    v0[13] = v13;
    v13[2] = &async function pointer to partial apply for specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
    v13[3] = v9;
    v13[4] = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (result: (content: String, tokens: [String]), duration: Double));
    uint64_t v14 = (void *)swift_task_alloc();
    v0[14] = v14;
    void *v14 = v0;
    v14[1] = specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
    return MEMORY[0x270FA22B8](v0 + 2);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v1;

  return specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()();
}

{
  uint64_t v1;

  return specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()();
}

{
  uint64_t v1;

  return specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()();
}

{
  uint64_t v1;

  return specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()();
}

uint64_t specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = (void *)*v4;
  v8[17] = v3;
  swift_task_dealloc();
  uint64_t v9 = v8[10];
  if (v3)
  {
    outlined destroy of TokenGeneratorCompletionResponseStringStream(v9, type metadata accessor for TokenGeneratorCompletionResponseStringStream);
    uint64_t v10 = specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  else
  {
    v8[18] = a3;
    unsigned char v8[19] = a2;
    v8[20] = a1;
    outlined destroy of TokenGeneratorCompletionResponseStringStream(v9, type metadata accessor for TokenGeneratorCompletionResponseStringStream);
    uint64_t v10 = specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  return MEMORY[0x270FA2498](v10, 0, 0);
}

{
  uint64_t v3;
  void *v4;
  void *v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v12;

  unint64_t v8 = (void *)*v4;
  v8[17] = v3;
  swift_task_dealloc();
  uint64_t v9 = v8[10];
  if (v3)
  {
    outlined destroy of TokenGeneratorCompletionResponseStringStream(v9, type metadata accessor for TokenGeneratorChatResponseStringStream);
    uint64_t v10 = specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  else
  {
    v8[18] = a3;
    unsigned char v8[19] = a2;
    v8[20] = a1;
    outlined destroy of TokenGeneratorCompletionResponseStringStream(v9, type metadata accessor for TokenGeneratorChatResponseStringStream);
    uint64_t v10 = specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  return MEMORY[0x270FA2498](v10, 0, 0);
}

uint64_t closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[11] = a3;
  v4[12] = a4;
  v4[9] = a1;
  v4[10] = a2;
  uint64_t v5 = *(void *)(a3 - 8);
  v4[13] = v5;
  v4[14] = *(void *)(v5 + 64);
  v4[15] = swift_task_alloc();
  v4[16] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect(), 0, 0);
}

uint64_t closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()()
{
  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v3 = v0[13];
  uint64_t v5 = v0[11];
  uint64_t v4 = v0[12];
  uint64_t v6 = v0[10];
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 48))(v5, v4);
  char v19 = v7;
  unint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v8(v1, v6, v5);
  v8(v2, v1, v5);
  unint64_t v9 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = swift_allocObject();
  v0[17] = v10;
  *(void *)(v10 + 16) = v5;
  *(void *)(v10 + 24) = v4;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v10 + v9, v1, v5);
  if (v19)
  {
    mach_absolute_time();
    uint64_t v13 = (void *)swift_task_alloc();
    v0[21] = v13;
    *uint64_t v13 = v0;
    v13[1] = closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
    uint64_t v14 = v0[15];
    uint64_t v15 = v0[11];
    uint64_t v16 = v0[12];
    return closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()((uint64_t)(v0 + 6), v14, v15, v16);
  }
  else
  {
    (*(void (**)(void, void))(v0[13] + 8))(v0[15], v0[11]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (content: String, tokens: [String]));
    uint64_t v11 = (void *)swift_task_alloc();
    v0[18] = v11;
    v11[2] = &async function pointer to partial apply for closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
    v11[3] = v10;
    v11[4] = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (result: (content: String, tokens: [String]), duration: Double));
    uint64_t v12 = (void *)swift_task_alloc();
    v0[19] = v12;
    *uint64_t v12 = v0;
    v12[1] = closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
    return MEMORY[0x270FA22B8](v0 + 2);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  uint64_t v3 = *(void *)(*(void *)v1 + 104);
  uint64_t v4 = *(void *)(*(void *)v1 + 88);
  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  else {
    uint64_t v5 = closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

{
  uint64_t v0;
  long long v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  swift_release();
  uint64_t v1 = *(_OWORD *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 72);
  *(void *)uint64_t v2 = *(void *)(v0 + 16);
  *(_OWORD *)(v2 + 8) = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  mach_absolute_time();
  *(_DWORD *)(v0 + 188) = 0;
  *(_DWORD *)(v0 + 184) = 0;
  mach_timebase_info((mach_timebase_info_t)(v0 + 184));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = *(void **)(v0 + 72);
  *uint64_t v4 = v2;
  v4[1] = v1;
  v4[2] = v3;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()(uint64_t a1)
{
  v1[4] = a1;
  uint64_t v2 = type metadata accessor for Token();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  v1[8] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for StringResponseSanitizerWithConfiguration();
  v1[9] = v3;
  v1[10] = *(void *)(v3 - 8);
  v1[11] = swift_task_alloc();
  uint64_t v6 = (uint64_t (*)(void *))((char *)&async function pointer to specialized TokenStream.collect()
                                        + async function pointer to specialized TokenStream.collect());
  uint64_t v4 = (void *)swift_task_alloc();
  v1[12] = v4;
  *uint64_t v4 = v1;
  v4[1] = specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  return v6(v1 + 2);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v3 = *v2;
  *(void *)(v3 + 104) = a1;
  *(void *)(v3 + 112) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  else {
    uint64_t v4 = specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v6)(void *);
  uint64_t v7;

  v1[4] = a1;
  uint64_t v2 = type metadata accessor for Token();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  v1[8] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for StringResponseSanitizerWithConfiguration();
  v1[9] = v3;
  v1[10] = *(void *)(v3 - 8);
  v1[11] = swift_task_alloc();
  uint64_t v6 = (uint64_t (*)(void *))((char *)&async function pointer to specialized TokenStream.collect()
                                        + async function pointer to specialized TokenStream.collect());
  uint64_t v4 = (void *)swift_task_alloc();
  v1[12] = v4;
  *uint64_t v4 = v1;
  v4[1] = specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  return v6(v1 + 2);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v3 = *v2;
  *(void *)(v3 + 104) = a1;
  *(void *)(v3 + 112) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  else {
    uint64_t v4 = specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 16);
  *(void *)(v0 + 120) = v2;
  uint64_t v4 = type metadata accessor for TokenGeneratorCompletionResponseStringStream(0);
  *(_DWORD *)(v0 + 168) = *(_DWORD *)(v4 + 24);
  GenerativeFunctionInstrumenter.inferenceEnd()();
  GenerativeFunctionInstrumenter.responseProcessingBegin()();
  int64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v0 + 104);
  if (v5)
  {
    uint64_t v27 = v3;
    uint64_t v7 = *(void *)(v0 + 48);
    uint64_t v31 = MEMORY[0x263F8EE78];
    uint64_t v28 = v2;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    unint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v7 += 16;
    uint64_t v9 = v6 + ((*(unsigned __int8 *)(v7 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 64));
    uint64_t v29 = *(void *)(v7 + 56);
    uint64_t v30 = v8;
    uint64_t v10 = (void (**)(uint64_t, uint64_t))(v7 - 8);
    do
    {
      uint64_t v11 = *(void *)(v0 + 56);
      uint64_t v12 = *(void *)(v0 + 40);
      v30(v11, v9, v12);
      uint64_t v13 = Token.text.getter();
      uint64_t v15 = v14;
      (*v10)(v11, v12);
      uint64_t v16 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v31 + 16) + 1, 1);
        uint64_t v16 = v31;
      }
      unint64_t v18 = *(void *)(v16 + 16);
      unint64_t v17 = *(void *)(v16 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        uint64_t v16 = v31;
      }
      *(void *)(v16 + 16) = v18 + 1;
      uint64_t v19 = v16 + 16 * v18;
      *(void *)(v19 + 32) = v13;
      *(void *)(v19 + 40) = v15;
      v9 += v29;
      --v5;
    }
    while (v5);
    uint64_t v2 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = v27;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = MEMORY[0x263F8EE78];
  }
  *(void *)(v0 + 128) = v16;
  uint64_t v21 = *(void *)(v0 + 72);
  uint64_t v20 = *(void *)(v0 + 80);
  uint64_t v22 = *(void *)(v0 + 64);
  outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 32) + *(int *)(v4 + 20), v22, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v22, 1, v21) == 1)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 64), &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    GenerativeFunctionInstrumenter.responseProcessingEnd()();
    GenerativeFunctionInstrumenter.executionEnd(error:)();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8);
    uint64_t v24 = *(void *)(v0 + 128);
    return v23(v3, v2, v24);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 80) + 32))(*(void *)(v0 + 88), *(void *)(v0 + 64), *(void *)(v0 + 72));
    uint64_t v26 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v26;
    *uint64_t v26 = v0;
    v26[1] = specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
    return MEMORY[0x270F30000](v3, v2);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v6;

  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  GenerativeFunctionInstrumenter.responseProcessingEnd()();
  GenerativeFunctionInstrumenter.executionEnd(error:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  uint64_t v4 = v0[16];
  return v3(v1, v2, v4);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  void (**v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;

  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 16);
  *(void *)(v0 + 120) = v2;
  uint64_t v4 = type metadata accessor for TokenGeneratorChatResponseStringStream(0);
  *(_DWORD *)(v0 + 168) = *(_DWORD *)(v4 + 24);
  GenerativeFunctionInstrumenter.inferenceEnd()();
  GenerativeFunctionInstrumenter.responseProcessingBegin()();
  int64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v0 + 104);
  if (v5)
  {
    uint64_t v27 = v3;
    uint64_t v7 = *(void *)(v0 + 48);
    uint64_t v31 = MEMORY[0x263F8EE78];
    uint64_t v28 = v2;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    unint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v7 += 16;
    uint64_t v9 = v6 + ((*(unsigned __int8 *)(v7 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 64));
    uint64_t v29 = *(void *)(v7 + 56);
    uint64_t v30 = v8;
    uint64_t v10 = (void (**)(uint64_t, uint64_t))(v7 - 8);
    do
    {
      uint64_t v11 = *(void *)(v0 + 56);
      uint64_t v12 = *(void *)(v0 + 40);
      v30(v11, v9, v12);
      uint64_t v13 = Token.text.getter();
      uint64_t v15 = v14;
      (*v10)(v11, v12);
      uint64_t v16 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v31 + 16) + 1, 1);
        uint64_t v16 = v31;
      }
      unint64_t v18 = *(void *)(v16 + 16);
      unint64_t v17 = *(void *)(v16 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        uint64_t v16 = v31;
      }
      *(void *)(v16 + 16) = v18 + 1;
      uint64_t v19 = v16 + 16 * v18;
      *(void *)(v19 + 32) = v13;
      *(void *)(v19 + 40) = v15;
      v9 += v29;
      --v5;
    }
    while (v5);
    uint64_t v2 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = v27;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = MEMORY[0x263F8EE78];
  }
  *(void *)(v0 + 128) = v16;
  uint64_t v21 = *(void *)(v0 + 72);
  uint64_t v20 = *(void *)(v0 + 80);
  uint64_t v22 = *(void *)(v0 + 64);
  outlined init with copy of Prompt.Rendering?(*(void *)(v0 + 32) + *(int *)(v4 + 20), v22, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v22, 1, v21) == 1)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(*(void *)(v0 + 64), &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    GenerativeFunctionInstrumenter.responseProcessingEnd()();
    GenerativeFunctionInstrumenter.executionEnd(error:)();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8);
    uint64_t v24 = *(void *)(v0 + 128);
    return v23(v3, v2, v24);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 80) + 32))(*(void *)(v0 + 88), *(void *)(v0 + 64), *(void *)(v0 + 72));
    uint64_t v26 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v26;
    *uint64_t v26 = v0;
    v26[1] = specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
    return MEMORY[0x270F30000](v3, v2);
  }
}

uint64_t specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 144) = v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  else
  {
    *(void *)(v6 + 152) = a2;
    *(void *)(v6 + 160) = a1;
    uint64_t v7 = specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v6 = *v3;
  *(void *)(*v3 + 144) = v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  else
  {
    *(void *)(v6 + 152) = a2;
    *(void *)(v6 + 160) = a1;
    uint64_t v7 = specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

{
  uint64_t v2;
  void *v4;
  uint64_t v6;

  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  *uint64_t v4 = v2;
  v4[1] = specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  return specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()(a2);
}

{
  uint64_t v2;
  void *v4;
  uint64_t v6;

  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  *uint64_t v4 = v2;
  v4[1] = specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  return specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()(a2);
}

uint64_t closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = type metadata accessor for Token();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  v4[11] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for StringResponseSanitizerWithConfiguration();
  v4[12] = v6;
  v4[13] = *(void *)(v6 - 8);
  v4[14] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for GenerativeFunctionInstrumenter();
  v4[15] = v7;
  v4[16] = *(void *)(v7 - 8);
  v4[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenStream<String>);
  v4[18] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect(), 0, 0);
}

uint64_t closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()()
{
  (*(void (**)(void))(v0[7] + 16))(v0[6]);
  uint64_t v3 = (uint64_t (*)(void *))((char *)&async function pointer to specialized TokenStream.collect()
                                        + async function pointer to specialized TokenStream.collect());
  uint64_t v1 = (void *)swift_task_alloc();
  v0[19] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  return v3(v0 + 2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(void);
  void (*v6)(uint64_t, uint64_t);
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  void (**v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t (*v32)(void);
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;

  uint64_t v1 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[7];
  long long v39 = v0[6];
  uint64_t v41 = v0[20];
  uint64_t v37 = v0[2];
  uint64_t v38 = v0[3];
  v0[22] = v38;
  uint64_t v5 = *(void (**)(void))(v4 + 40);
  v0[23] = v5;
  v0[24] = (v4 + 40) & 0xFFFFFFFFFFFFLL | 0x65BD000000000000;
  v5();
  GenerativeFunctionInstrumenter.inferenceEnd()();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v0[25] = v6;
  v0[26] = (v1 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v2, v3);
  ((void (*)(uint64_t, uint64_t))v5)(v39, v4);
  GenerativeFunctionInstrumenter.responseProcessingBegin()();
  v6(v2, v3);
  uint64_t v7 = *(void *)(v41 + 16);
  unint64_t v8 = v0[20];
  if (v7)
  {
    uint64_t v9 = v0[9];
    uint64_t v43 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    v9 += 16;
    uint64_t v11 = v8 + ((*(unsigned __int8 *)(v9 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 64));
    uint64_t v40 = *(void *)(v9 + 56);
    uint64_t v42 = v10;
    uint64_t v12 = (void (**)(uint64_t, uint64_t))(v9 - 8);
    do
    {
      uint64_t v13 = v0[10];
      uint64_t v14 = v0[8];
      v42(v13, v11, v14);
      uint64_t v15 = Token.text.getter();
      unint64_t v17 = v16;
      (*v12)(v13, v14);
      unint64_t v18 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v43 + 16) + 1, 1);
        unint64_t v18 = v43;
      }
      uint64_t v20 = *(void *)(v18 + 16);
      uint64_t v19 = *(void *)(v18 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        unint64_t v18 = v43;
      }
      *(void *)(v18 + 16) = v20 + 1;
      uint64_t v21 = v18 + 16 * v20;
      *(void *)(v21 + 32) = v15;
      *(void *)(v21 + 40) = v17;
      v11 += v40;
      --v7;
    }
    while (v7);
    uint64_t v22 = v38;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v18 = MEMORY[0x263F8EE78];
    uint64_t v22 = v38;
  }
  v0[27] = v18;
  uint64_t v24 = v0[12];
  uint64_t v23 = v0[13];
  uint64_t v25 = v0[11];
  (*(void (**)(void))(v0[7] + 32))(v0[6]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v25, 1, v24) == 1)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[11], &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    uint64_t v26 = (void (*)(uint64_t, uint64_t))v0[25];
    uint64_t v27 = (void (*)(uint64_t))v0[23];
    uint64_t v28 = v0[17];
    uint64_t v36 = v0[27];
    uint64_t v29 = v0[15];
    uint64_t v30 = v0[6];
    uint64_t v35 = v0[7];
    uint64_t v31 = (void *)v0[4];
    v27(v30);
    GenerativeFunctionInstrumenter.responseProcessingEnd()();
    v26(v28, v29);
    ((void (*)(uint64_t, uint64_t))v27)(v30, v35);
    GenerativeFunctionInstrumenter.executionEnd(error:)();
    v26(v28, v29);
    *uint64_t v31 = v37;
    v31[1] = v38;
    v31[2] = v36;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v32 = (uint64_t (*)(void))v0[1];
    return v32();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[13] + 32))(v0[14], v0[11], v0[12]);
    long long v34 = (void *)swift_task_alloc();
    v0[28] = v34;
    *long long v34 = v0;
    v34[1] = closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
    return MEMORY[0x270F30000](v37, v22);
  }
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t);
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
  uint64_t v11 = v0[30];
  uint64_t v12 = v0[31];
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[25];
  uint64_t v2 = (void (*)(uint64_t))v0[23];
  uint64_t v3 = v0[17];
  uint64_t v10 = v0[27];
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[6];
  uint64_t v9 = v0[7];
  uint64_t v6 = (void *)v0[4];
  v2(v5);
  GenerativeFunctionInstrumenter.responseProcessingEnd()();
  v1(v3, v4);
  ((void (*)(uint64_t, uint64_t))v2)(v5, v9);
  GenerativeFunctionInstrumenter.executionEnd(error:)();
  v1(v3, v4);
  *uint64_t v6 = v12;
  v6[1] = v11;
  v6[2] = v10;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 144);
  *(void *)(v3 + 160) = a1;
  *(void *)(v3 + 168) = v1;
  swift_task_dealloc();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v4, &demangling cache variable for type metadata for TokenStream<String>);
  if (v1) {
    uint64_t v5 = closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  else {
    uint64_t v5 = closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 232) = v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  else
  {
    *(void *)(v6 + 240) = a2;
    *(void *)(v6 + 248) = a1;
    uint64_t v7 = closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

uint64_t specialized TokenStream.collect()(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = type metadata accessor for String.Encoding();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Token?);
  v2[11] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Token();
  v2[12] = v4;
  v2[13] = *(void *)(v4 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  type metadata accessor for PromptCompletion(0);
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized TokenStream.collect(), 0, 0);
}

uint64_t specialized TokenStream.collect()()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = (void *)(v1 + *(int *)(type metadata accessor for PromptCompletionStream(0) + 20));
  uint64_t v6 = (uint64_t (*)(uint64_t))(*v2 + *(int *)*v2);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[18] = v3;
  *uint64_t v3 = v0;
  v3[1] = specialized TokenStream.collect();
  uint64_t v4 = v0[16];
  return v6(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized TokenStream.collect();
  }
  else {
    uint64_t v2 = specialized TokenStream.collect();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  void *v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t result;
  uint64_t (*v44)(void);
  void *v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  uint64_t v48;
  uint64_t v49;
  void (**v50)(uint64_t, uint64_t, uint64_t);
  unsigned int (**v51)(uint64_t, uint64_t, uint64_t);
  void *v52;
  void (**v53)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v54;

  uint64_t v1 = v0[17];
  outlined init with take of PromptCompletionStream(v0[16], v1, type metadata accessor for PromptCompletion);
  uint64_t v2 = *(void **)(v1 + 32);
  swift_bridgeObjectRetain();
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v1, type metadata accessor for PromptCompletion);
  uint64_t v52 = v0;
  if (v2[2])
  {
    uint64_t v3 = v0[19];
    uint64_t v4 = v2[4];
    uint64_t v5 = v2[7];
    uint64_t v7 = v2[8];
    uint64_t v6 = v2[9];
    unint64_t v8 = v2[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of FinishReason(v5, v7);
    outlined copy of Data._Representation(v6, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of FinishReason(v5, v7);
    outlined consume of Data._Representation(v6, v8);
    uint64_t v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15TokenGeneration16PromptCompletionV7SegmentVG_AH7ContentOs5NeverOTg504_s15d32Generation0A6StreamV26contentAndf41Completionx0D0_AA0fG0V06promptG0tyYaKFAG7i4OAG7H52Vcfu_32b1aea282a60d71b97bfb98b78a1fe981AlJTf3nnnpk_nTf1cn_n(v4);
    swift_bridgeObjectRelease();
    uint64_t v10 = *(void *)(v9 + 16);
    if (v10)
    {
LABEL_3:
      int v48 = v3;
      uint64_t v11 = v0[13];
      uint64_t v53 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
      uint64_t v49 = v11;
      uint64_t v50 = (void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
      uint64_t v51 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
      swift_bridgeObjectRetain();
      uint64_t v12 = v9 + 40;
      uint64_t v13 = MEMORY[0x263F8EE78];
      while (1)
      {
        uint64_t v15 = v0[11];
        uint64_t v14 = v0[12];
        if (*(unsigned char *)(v12 + 32))
        {
          (*v53)(v0[11], 1, 1, v0[12]);
        }
        else
        {
          unint64_t v17 = *(void *)(v12 + 16);
          uint64_t v16 = *(void *)(v12 + 24);
          unint64_t v18 = v13;
          uint64_t v19 = *(void *)v12;
          uint64_t v20 = *(void *)(v12 + 8);
          uint64_t v21 = *(void *)(v12 - 8);
          outlined copy of PromptCompletion.Content(v21, *(void *)v12, v20, v17, v16, 0);
          swift_bridgeObjectRetain();
          Token.init(text:)();
          (*v53)(v15, 0, 1, v14);
          uint64_t v22 = v20;
          uint64_t v13 = v18;
          uint64_t v0 = v52;
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v21, v19, v22, v17, v16, 0);
          if ((*v51)(v15, 1, v14) != 1)
          {
            uint64_t v24 = v52[14];
            uint64_t v23 = v52[15];
            uint64_t v25 = v52[12];
            uint64_t v26 = *v50;
            (*v50)(v23, v52[11], v25);
            v26(v24, v23, v25);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1, v13);
            }
            uint64_t v28 = *(void *)(v13 + 16);
            uint64_t v27 = *(void *)(v13 + 24);
            if (v28 >= v27 >> 1) {
              uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1, v13);
            }
            uint64_t v29 = v52[14];
            uint64_t v30 = v52[12];
            *(void *)(v13 + 16) = v28 + 1;
            v26(v13+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(void *)(v49 + 72) * v28, v29, v30);
            goto LABEL_6;
          }
        }
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[11], &demangling cache variable for type metadata for Token?);
LABEL_6:
        v12 += 48;
        if (!--v10)
        {
          swift_bridgeObjectRelease();
          uint64_t v3 = v48;
          goto LABEL_17;
        }
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = v0[19];
    uint64_t v9 = MEMORY[0x263F8EE78];
    uint64_t v10 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (v10) {
      goto LABEL_3;
    }
  }
  uint64_t v13 = MEMORY[0x263F8EE78];
LABEL_17:
  swift_bridgeObjectRelease();
  uint64_t v31 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15TokenGeneration0D0VG_SSs5NeverOTg504_s15D116Generation22CompletePromptResponseV6tokensACSayAA0A0VG_tcfcSSAFcfu_33_2c83176e6c929c34cc0288687e3e762dAFSSTf3nnnpk_nTf1cn_n(v13);
  uint64_t v32 = *(void *)(v31 + 16);
  if (v32)
  {
    swift_bridgeObjectRetain();
    uint64_t v33 = (void **)(v31 + 40);
    do
    {
      long long v34 = (uint64_t)*(v33 - 1);
      uint64_t v35 = *v33;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36._uint64_t countAndFlagsBits = v34;
      v36._object = v35;
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v33 += 2;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
  }
  uint64_t v37 = v0[9];
  uint64_t v38 = v0[10];
  long long v39 = v0[8];
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  uint64_t v40 = String.data(using:allowLossyConversion:)();
  uint64_t v42 = v41;
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
  if (v42 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    static Generable.decode(data:)();
    if (v3)
    {
      outlined consume of Data?(v40, v42);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v44 = (uint64_t (*)(void))v0[1];
      return v44();
    }
    else
    {
      uint64_t v45 = (void *)v0[6];
      outlined consume of Data?(v40, v42);
      uint64_t v46 = v0[3];
      *uint64_t v45 = v0[2];
      v45[1] = v46;
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v47 = (uint64_t (*)(uint64_t))v0[1];
      return v47(v13);
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TokenGeneratorResponsePromptCompletionStream.makeAsyncIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v21 = a1;
  uint64_t v20 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v2 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PromptCompletionStream(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for StringResponseSanitizerWithConfiguration();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  unint64_t v17 = (char *)&v20 - v16;
  unint64_t v18 = (int *)type metadata accessor for TokenGeneratorResponsePromptCompletionStream(0);
  outlined init with copy of Prompt.Rendering?(v1 + v18[5], (uint64_t)v10, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v10, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    outlined init with copy of PromptCompletion(v1, (uint64_t)v7, type metadata accessor for PromptCompletionStream);
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v1 + v18[6], v20);
    return TokenGeneratorResponsePromptCompletionStream.AsyncIterator.init(promptCompletionStream:generativeFunctionInstrumenter:timeout:)((uint64_t)v7, (uint64_t)v4, *(void *)(v1 + v18[7]), *(unsigned __int8 *)(v1 + v18[7] + 8), v21);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v10, v11);
    outlined init with copy of PromptCompletion(v1, (uint64_t)v7, type metadata accessor for PromptCompletionStream);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v1 + v18[6], v20);
    TokenGeneratorResponsePromptCompletionStream.AsyncIterator.init(promptCompletionStream:stringResponseSanitizerWithConfiguration:generativeFunctionInstrumenter:timeout:)((uint64_t)v7, (uint64_t)v15, (uint64_t)v4, *(void *)(v1 + v18[7]), *(unsigned __int8 *)(v1 + v18[7] + 8), v21);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  }
}

uint64_t TokenGeneratorResponsePromptCompletionStream.AsyncIterator.init(promptCompletionStream:stringResponseSanitizerWithConfiguration:generativeFunctionInstrumenter:timeout:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v31 = a5;
  uint64_t v30 = a4;
  uint64_t v35 = a3;
  uint64_t v32 = a2;
  uint64_t v33 = a1;
  uint64_t v38 = a6;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  uint64_t v36 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  long long v34 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  unint64_t v17 = (char *)&v29 - v16;
  type metadata accessor for PromptCompletionStream(0);
  lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type PromptCompletionStream and conformance PromptCompletionStream, (void (*)(uint64_t))type metadata accessor for PromptCompletionStream);
  StringResponseSanitizerWithConfiguration.scrub<A>(_:elementToContent:)();
  v42[3] = v11;
  v42[4] = lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(&lazy protocol witness table cache variable for type AsyncThrowingStream<PromptCompletionEvent, Error> and conformance AsyncThrowingStream<A, B>, &demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  boxed_opaque_existential_1Tm = __swift_allocate_boxed_opaque_existential_1Tm(v42);
  (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 16))(boxed_opaque_existential_1Tm, v17, v11);
  v42[5] = v30;
  char v43 = v31 & 1;
  outlined init with copy of Prompt.Rendering?((uint64_t)v42, (uint64_t)v41, &demangling cache variable for type metadata for StreamWithTimeout<PromptCompletionEvent>);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = 0;
  outlined init with copy of Prompt.Rendering?((uint64_t)v41, (uint64_t)v39, &demangling cache variable for type metadata for StreamWithTimeout<PromptCompletionEvent>);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v19;
  long long v21 = v39[1];
  *(_OWORD *)(v20 + 24) = v39[0];
  *(_OWORD *)(v20 + 40) = v21;
  *(_OWORD *)(v20 + 56) = v39[2];
  *(unsigned char *)(v20 + 72) = v40;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptCompletionEvent);
  AsyncThrowingStream.init<>(unfolding:)();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v41, &demangling cache variable for type metadata for StreamWithTimeout<PromptCompletionEvent>);
  swift_release();
  uint64_t v22 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v35, v7);
  uint64_t v23 = v34;
  MEMORY[0x261200F50](v11);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v12 + 8);
  v24(v15, v11);
  uint64_t v25 = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v36 + 32))(v38, v23, v37);
  uint64_t v26 = type metadata accessor for TokenGeneratorResponsePromptCompletionStream.AsyncIterator(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v25 + *(int *)(v26 + 20), v10, v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v22, v7);
  uint64_t v27 = type metadata accessor for StringResponseSanitizerWithConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v32, v27);
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v33, type metadata accessor for PromptCompletionStream);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v42, &demangling cache variable for type metadata for StreamWithTimeout<PromptCompletionEvent>);
  return ((uint64_t (*)(char *, uint64_t))v24)(v17, v11);
}

uint64_t TokenGeneratorResponsePromptCompletionStream.AsyncIterator.init(promptCompletionStream:generativeFunctionInstrumenter:timeout:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v27 = a4;
  uint64_t v29 = a2;
  uint64_t v28 = a1;
  uint64_t v31 = a5;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  uint64_t v7 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v9 = &v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = &v26[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  unint64_t v17 = &v26[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v35[3] = type metadata accessor for PromptCompletionStream(0);
  v35[4] = lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type PromptCompletionStream and conformance PromptCompletionStream, (void (*)(uint64_t))type metadata accessor for PromptCompletionStream);
  boxed_opaque_existential_1Tm = __swift_allocate_boxed_opaque_existential_1Tm(v35);
  outlined init with copy of PromptCompletion(a1, (uint64_t)boxed_opaque_existential_1Tm, type metadata accessor for PromptCompletionStream);
  v35[5] = a3;
  char v36 = v27 & 1;
  outlined init with copy of Prompt.Rendering?((uint64_t)v35, (uint64_t)v34, &demangling cache variable for type metadata for StreamWithTimeout<PromptCompletionEvent>);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = 0;
  outlined init with copy of Prompt.Rendering?((uint64_t)v34, (uint64_t)v32, &demangling cache variable for type metadata for StreamWithTimeout<PromptCompletionEvent>);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v19;
  long long v21 = v32[1];
  *(_OWORD *)(v20 + 24) = v32[0];
  *(_OWORD *)(v20 + 40) = v21;
  *(_OWORD *)(v20 + 56) = v32[2];
  *(unsigned char *)(v20 + 72) = v33;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptCompletionEvent);
  AsyncThrowingStream.init<>(unfolding:)();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v34, &demangling cache variable for type metadata for StreamWithTimeout<PromptCompletionEvent>);
  swift_release();
  uint64_t v22 = v29;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(v13, v29, v10);
  MEMORY[0x261200F50](v14);
  (*(void (**)(unsigned char *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v23 = v31;
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v7 + 32))(v31, v9, v30);
  uint64_t v24 = type metadata accessor for TokenGeneratorResponsePromptCompletionStream.AsyncIterator(0);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v11 + 32))(v23 + *(int *)(v24 + 20), v13, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v22, v10);
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v28, type metadata accessor for PromptCompletionStream);
  return outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v35, &demangling cache variable for type metadata for StreamWithTimeout<PromptCompletionEvent>);
}

uint64_t closure #1 in TokenGeneratorResponsePromptCompletionStream.AsyncIterator.init(promptCompletionStream:stringResponseSanitizerWithConfiguration:generativeFunctionInstrumenter:timeout:)(uint64_t a1)
{
  outlined init with copy of PromptCompletionEvent(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptCompletionEvent);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v1 = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data?(v4, v5);
  return v1;
}

uint64_t TokenGeneratorResponsePromptCompletionStream.AsyncIterator.next()(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v2[4] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenGeneratorResponsePromptCompletionStream.AsyncIterator.next(), 0, 0);
}

uint64_t TokenGeneratorResponsePromptCompletionStream.AsyncIterator.next()()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v3 = v1 + *(int *)(type metadata accessor for TokenGeneratorResponsePromptCompletionStream.AsyncIterator(0) + 20);
  uint64_t v4 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v3, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v2, 0, 1, v4);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[5] = v6;
  *uint64_t v6 = v0;
  v6[1] = TokenGeneratorResponsePromptCompletionStream.AsyncIterator.next();
  uint64_t v8 = v0[3];
  uint64_t v7 = v0[4];
  uint64_t v9 = v0[2];
  return specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(v9, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = *(void *)(*v1 + 32);
  uint64_t v3 = *v1;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v2, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  if (v0)
  {
    return MEMORY[0x270FA2498](TokenGeneratorResponsePromptCompletionStream.AsyncIterator.next(), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance TokenGeneratorResponsePromptCompletionStream.AsyncIterator(uint64_t a1, uint64_t a2)
{
  v3[3] = v2;
  v3[4] = a2;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v3[5] = swift_task_alloc();
  return MEMORY[0x270FA2498](protocol witness for AsyncIteratorProtocol.next() in conformance TokenGeneratorResponsePromptCompletionStream.AsyncIterator, 0, 0);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance TokenGeneratorResponsePromptCompletionStream.AsyncIterator()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[3] + *(int *)(v0[4] + 20);
  uint64_t v3 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v4 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v1, 0, 1, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[6] = v5;
  *uint64_t v5 = v0;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance TokenGeneratorResponsePromptCompletionStream.AsyncIterator;
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[2];
  uint64_t v8 = v0[3];
  return specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(v7, v6, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = *(void *)(*v1 + 40);
  uint64_t v3 = *v1;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v2, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  if (v0)
  {
    return MEMORY[0x270FA2498](protocol witness for AsyncIteratorProtocol.next() in conformance TokenGeneratorResponsePromptCompletionStream.AsyncIterator, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t _s15TokenGeneration0A39GeneratorResponsePromptCompletionStreamV13AsyncIteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration0E39GeneratorResponsePromptCompletionStreamV13AsyncIteratorV_Tg5Tu
                                                          + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration0E39GeneratorResponsePromptCompletionStreamV13AsyncIteratorV_Tg5Tu);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v8;
  *uint64_t v8 = v4;
  v8[1] = _s15TokenGeneration0A39GeneratorResponsePromptCompletionStreamV13AsyncIteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return v10(a1, a2, a3);
}

uint64_t _s15TokenGeneration0A39GeneratorResponsePromptCompletionStreamV13AsyncIteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0) {
    **(void **)(v2 + 16) = v0;
  }
  uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
  return v4();
}

uint64_t closure #1 in TokenGeneratorResponsePromptCompletionStream.collect()(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  v2[4] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for StringResponseSanitizerWithConfiguration();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  type metadata accessor for PromptCompletion(0);
  v2[8] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in TokenGeneratorResponsePromptCompletionStream.collect(), 0, 0);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v4 = (void *)*v3;
  v4[29] = a1;
  v4[30] = a2;
  v4[31] = v2;
  swift_task_dealloc();
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = closure #1 in TokenGeneratorResponsePromptCompletionStream.collect();
  }
  else
  {
    uint64_t v5 = closure #1 in TokenGeneratorResponsePromptCompletionStream.collect();
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t closure #1 in TokenGeneratorResponsePromptCompletionStream.collect()()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = (void *)(v1 + *(int *)(type metadata accessor for PromptCompletionStream(0) + 20));
  uint64_t v6 = (uint64_t (*)(uint64_t))(*v2 + *(int *)*v2);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[9] = v3;
  *uint64_t v3 = v0;
  v3[1] = closure #1 in TokenGeneratorResponsePromptCompletionStream.collect();
  uint64_t v4 = v0[8];
  return v6(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in TokenGeneratorResponsePromptCompletionStream.collect();
  }
  else {
    uint64_t v2 = closure #1 in TokenGeneratorResponsePromptCompletionStream.collect();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t (*v34)(void);
  uint64_t v36;

  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  outlined init with take of PromptCompletionStream(v0[8], v0[2], type metadata accessor for PromptCompletion);
  uint64_t v5 = type metadata accessor for TokenGeneratorResponsePromptCompletionStream(0);
  outlined init with copy of Prompt.Rendering?(v4 + *(int *)(v5 + 20), v3, &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[4], &demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
LABEL_17:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v34 = (uint64_t (*)(void))v0[1];
    return v34();
  }
  uint64_t v6 = v0[2];
  (*(void (**)(void, void, void))(v0[6] + 32))(v0[7], v0[4], v0[5]);
  uint64_t v7 = *(void *)(v6 + 32);
  v0[11] = v7;
  uint64_t v8 = *(void *)(v7 + 16);
  v0[12] = v8;
  if (!v8)
  {
LABEL_16:
    (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
    goto LABEL_17;
  }
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v11 = 0;
  while (1)
  {
    v0[13] = v11;
    uint64_t v12 = v0[11];
    if (v11 >= *(void *)(v12 + 16))
    {
      __break(1u);
      return MEMORY[0x270F30000](v9, v10);
    }
    uint64_t v13 = v12 + 32;
    uint64_t v14 = (uint64_t *)(v13 + 56 * v11);
    uint64_t v15 = *v14;
    v0[14] = *v14;
    v0[15] = v14[1];
    uint64_t v16 = v14[3];
    v0[16] = v16;
    unint64_t v17 = v14[4];
    v0[17] = v17;
    unint64_t v18 = v14[5];
    v0[18] = v18;
    uint64_t v19 = v14[6];
    v0[19] = v19;
    uint64_t v20 = *(void *)(v15 + 16);
    v0[20] = v20;
    if (v20) {
      break;
    }
LABEL_5:
    if (++v11 == v8)
    {
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
  }
  v0[21] = *(void *)(v13 + 56 * v11 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of FinishReason(v16, v17);
  outlined copy of Data._Representation(v18, v19);
  long long v21 = v0[14];
  swift_bridgeObjectRetain();
  uint64_t v22 = 0;
  uint64_t v23 = (unsigned char *)(v21 + 72);
  while (1)
  {
    v0[22] = v22;
    uint64_t v24 = *((void *)v23 - 5);
    v0[23] = v24;
    uint64_t v25 = *((void *)v23 - 4);
    v0[24] = v25;
    uint64_t v26 = *((void *)v23 - 3);
    v0[25] = v26;
    int v27 = *((void *)v23 - 2);
    v0[26] = v27;
    uint64_t v28 = *((void *)v23 - 1);
    v0[27] = v28;
    if ((*v23 & 1) == 0) {
      break;
    }
    ++v22;
    v23 += 48;
    if (v22 == v0[20])
    {
      uint64_t v30 = v0[18];
      uint64_t v29 = v0[19];
      uint64_t v32 = v0[16];
      uint64_t v31 = v0[17];
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of FinishReason(v32, v31);
      uint64_t v9 = outlined consume of Data._Representation(v30, v29);
      uint64_t v8 = v0[12];
      uint64_t v11 = v0[13];
      goto LABEL_5;
    }
  }
  outlined copy of PromptCompletion.Content(v24, v25, v26, v27, v28, 0);
  outlined copy of PromptCompletion.Content(v24, v25, v26, v27, v28, 0);
  char v33 = (void *)swift_task_alloc();
  v0[28] = v33;
  *char v33 = v0;
  v33[1] = closure #1 in TokenGeneratorResponsePromptCompletionStream.collect();
  uint64_t v9 = v24;
  uint64_t v10 = v25;
  return MEMORY[0x270F30000](v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  unint64_t v4;
  void *v5;
  void *v6;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(void);
  void *v44;
  uint64_t v45;

  uint64_t v3 = *(void **)(v2[2] + 32);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_20:
  }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  uint64_t v4 = v2[13];
  if (v4 >= v3[2])
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = &v3[7 * v4];
    uint64_t v6 = (void *)v5[4];
    uint64_t v1 = v5 + 4;
    uint64_t v0 = v6;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v1 = (uint64_t)v6;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
  }
  char isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v0);
  uint64_t v0 = (void *)isUniquelyReferenced_nonNull_native;
  *uint64_t v1 = isUniquelyReferenced_nonNull_native;
LABEL_4:
  uint64_t v9 = v2[22];
  if (v9 >= v0[2])
  {
    __break(1u);
    return MEMORY[0x270F30000](isUniquelyReferenced_nonNull_native, v8);
  }
  else
  {
    uint64_t v10 = v2[30];
    uint64_t v12 = v2[26];
    uint64_t v11 = v2[27];
    uint64_t v14 = v2[24];
    uint64_t v13 = v2[25];
    uint64_t v15 = v2[23];
    uint64_t v16 = v2[2];
    unint64_t v17 = &v0[6 * v9];
    unint64_t v18 = v17[4];
    uint64_t v19 = v17[5];
    uint64_t v20 = v17[6];
    long long v21 = v17[7];
    uint64_t v22 = v17[8];
    uint64_t v23 = *((unsigned char *)v17 + 72);
    v17[4] = v2[29];
    v17[5] = v10;
    v17[6] = v13;
    *(_OWORD *)(v17 + 7) = xmmword_25F91CC60;
    *((unsigned char *)v17 + 72) = 0;
    outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v18, v19, v20, v21, v22, v23);
    outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v15, v14, v13, v12, v11, 0);
    outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v15, v14, v13, v12, v11, 0);
    *(void *)(v16 + 32) = v3;
    uint64_t v24 = v2[22];
    uint64_t v25 = v2[14];
    while (++v24 != v2[20])
    {
LABEL_6:
      v2[22] = v24;
      uint64_t v26 = v25 + 48 * v24;
      int v27 = *(void *)(v26 + 32);
      v2[23] = v27;
      uint64_t v28 = *(void *)(v26 + 40);
      v2[24] = v28;
      uint64_t v29 = *(void *)(v26 + 48);
      v2[25] = v29;
      uint64_t v30 = *(void *)(v26 + 56);
      v2[26] = v30;
      uint64_t v31 = *(void *)(v26 + 64);
      v2[27] = v31;
      if ((*(unsigned char *)(v26 + 72) & 1) == 0)
      {
        outlined copy of PromptCompletion.Content(v27, v28, v29, v30, v31, 0);
        outlined copy of PromptCompletion.Content(v27, v28, v29, v30, v31, 0);
        uint64_t v44 = (void *)swift_task_alloc();
        v2[28] = v44;
        *uint64_t v44 = v2;
        v44[1] = closure #1 in TokenGeneratorResponsePromptCompletionStream.collect();
        char isUniquelyReferenced_nonNull_native = v27;
        uint64_t v8 = v28;
        return MEMORY[0x270F30000](isUniquelyReferenced_nonNull_native, v8);
      }
    }
    uint64_t v3 = (void *)v2[21];
    uint64_t v1 = (uint64_t *)v2[18];
    uint64_t v0 = (void *)v2[19];
    char v33 = v2[16];
    uint64_t v32 = v2[17];
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of FinishReason(v33, v32);
    outlined consume of Data._Representation((uint64_t)v1, (unint64_t)v0);
    long long v34 = v2[12];
    uint64_t v35 = v2[13];
    char v36 = 56 * v35 + 88;
    uint64_t v37 = v35 + 1;
    while (v34 != v37)
    {
      v2[13] = v37;
      uint64_t v38 = v2[11];
      if (v37 >= *(void *)(v38 + 16))
      {
        __break(1u);
        goto LABEL_20;
      }
      uint64_t v3 = *(void **)(v38 + v36);
      v2[14] = v3;
      v2[15] = *(void *)(v38 + v36 + 8);
      uint64_t v1 = *(uint64_t **)(v38 + v36 + 24);
      v2[16] = v1;
      long long v39 = *(void *)(v38 + v36 + 32);
      v2[17] = v39;
      uint64_t v0 = *(void **)(v38 + v36 + 40);
      v2[18] = v0;
      char v40 = *(void *)(v38 + v36 + 48);
      v2[19] = v40;
      uint64_t v41 = v3[2];
      v2[20] = v41;
      v36 += 56;
      ++v37;
      if (v41)
      {
        v2[21] = *(void *)(v38 + v36 - 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of FinishReason((uint64_t)v1, v39);
        outlined copy of Data._Representation((uint64_t)v0, v40);
        swift_bridgeObjectRetain();
        uint64_t v24 = 0;
        uint64_t v25 = v2[14];
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    (*(void (**)(void, void))(v2[6] + 8))(v2[7], v2[5]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v42 = (uint64_t (*)(void))v2[1];
    return v42();
  }
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v1 = v0[26];
  uint64_t v2 = v0[27];
  uint64_t v4 = v0[24];
  uint64_t v3 = v0[25];
  uint64_t v5 = v0[23];
  uint64_t v11 = v0[18];
  uint64_t v12 = v0[19];
  uint64_t v6 = v0[16];
  uint64_t v10 = v0[17];
  uint64_t v7 = v0[6];
  uint64_t v13 = v0[5];
  uint64_t v14 = v0[7];
  uint64_t v15 = v0[2];
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v5, v4, v3, v1, v2, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of FinishReason(v6, v10);
  outlined consume of Data._Representation(v11, v12);
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v5, v4, v3, v1, v2, 0);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v14, v13);
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v15, type metadata accessor for PromptCompletion);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance TokenGeneratorResponsePromptCompletionStream@<X0>(uint64_t a1@<X8>)
{
  TokenGeneratorResponsePromptCompletionStream.makeAsyncIterator()(a1);
  return outlined destroy of TokenGeneratorCompletionResponseStringStream(v1, type metadata accessor for TokenGeneratorResponsePromptCompletionStream);
}

uint64_t TokenGenerator._render<A>(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[19] = a4;
  v5[20] = v4;
  v5[17] = a2;
  v5[18] = a3;
  v5[16] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
  v5[21] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for PromptTemplateInfo();
  v5[22] = v7;
  v5[23] = *(void *)(v7 - 8);
  v5[24] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Prompt.Rendering();
  v5[25] = v8;
  v5[26] = *(void *)(v8 - 8);
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  v5[29] = type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel(0);
  v5[30] = swift_task_alloc();
  v5[31] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Prompt();
  v5[32] = v9;
  v5[33] = *(void *)(v9 - 8);
  v5[34] = swift_task_alloc();
  v5[35] = swift_task_alloc();
  v5[36] = *(void *)(a3 - 8);
  v5[37] = swift_task_alloc();
  v5[38] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for GenerativeFunctionInstrumenter();
  v5[39] = v10;
  v5[40] = *(void *)(v10 - 8);
  v5[41] = swift_task_alloc();
  v5[42] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenGenerator._render<A>(configuration:), 0, 0);
}

{
  uint64_t v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5[19] = a4;
  v5[20] = v4;
  v5[17] = a2;
  v5[18] = a3;
  v5[16] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
  v5[21] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for PromptTemplateInfo();
  v5[22] = v7;
  v5[23] = *(void *)(v7 - 8);
  v5[24] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Prompt.Rendering();
  v5[25] = v8;
  v5[26] = *(void *)(v8 - 8);
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  v5[29] = type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel(0);
  v5[30] = swift_task_alloc();
  v5[31] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Prompt();
  v5[32] = v9;
  v5[33] = *(void *)(v9 - 8);
  v5[34] = swift_task_alloc();
  v5[35] = swift_task_alloc();
  v5[36] = swift_task_alloc();
  v5[37] = *(void *)(a3 - 8);
  v5[38] = swift_task_alloc();
  v5[39] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for GenerativeFunctionInstrumenter();
  v5[40] = v10;
  v5[41] = *(void *)(v10 - 8);
  v5[42] = swift_task_alloc();
  v5[43] = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenGenerator._render<A>(configuration:), 0, 0);
}

uint64_t TokenGenerator._render<A>(configuration:)()
{
  uint64_t v20 = v0;
  if (*(void *)(*(void *)(v0 + 160) + 24)) {
    swift_bridgeObjectRetain();
  }
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v13 = *(void *)(v0 + 328);
  uint64_t v14 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 304);
  uint64_t v4 = *(void *)(v0 + 288);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 136);
  GenerativeConfigurationProtocol.generateGenerativeFunctionInstrumenter(useCaseIdentifier:eventReporter:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v13, v1, v14);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 344) = v7;
  *(void *)(v0 + 352) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v3, v6, v5);
  RequestMetadata.init<A>(generativeFunctionInstrumenter:configuration:)(v13, v3, v5, &v15);
  *(void *)(v0 + 360) = v15;
  *(_OWORD *)(v0 + 368) = v16;
  *(void *)(v0 + 384) = v17;
  *(_OWORD *)(v0 + 392) = v18;
  *(void *)(v0 + 408) = v19;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 416) = v8;
  *uint64_t v8 = v0;
  v8[1] = TokenGenerator._render<A>(configuration:);
  uint64_t v9 = *(void *)(v0 + 280);
  uint64_t v10 = *(void *)(v0 + 144);
  uint64_t v11 = *(void *)(v0 + 152);
  return GenerativeConfigurationProtocol<>.renderToTokenGenerationPrompt()(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 424) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = TokenGenerator._render<A>(configuration:);
  }
  else
  {
    uint64_t v2 = TokenGenerator._render<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[43];
  uint64_t v2 = v0[37];
  uint64_t v4 = v0[17];
  uint64_t v3 = v0[18];
  (*(void (**)(void, void, void))(v0[33] + 16))(v0[34], v0[35], v0[32]);
  v1(v2, v4, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[54] = v5;
  *uint64_t v5 = v0;
  v5[1] = TokenGenerator._render<A>(configuration:);
  uint64_t v6 = v0[37];
  uint64_t v7 = v0[34];
  uint64_t v8 = v0[31];
  uint64_t v9 = v0[18];
  uint64_t v10 = v0[19];
  return TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:completionConfiguration:)(v8, v7, v6, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 440) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = TokenGenerator._render<A>(configuration:);
  }
  else
  {
    uint64_t v2 = TokenGenerator._render<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  int EnumCaseMultiPayload;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  outlined init with copy of PromptCompletion(v0[31], v0[30], type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v3 = v0[50];
  uint64_t v2 = v0[51];
  uint64_t v5 = v0[48];
  uint64_t v4 = v0[49];
  uint64_t v7 = v0[46];
  uint64_t v6 = v0[47];
  uint64_t v8 = v0[45];
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v28 = v0[50];
    uint64_t v29 = v0[51];
    uint64_t v9 = v0[30];
    uint64_t v11 = v0[23];
    uint64_t v10 = v0[24];
    uint64_t v12 = v0[22];
    uint64_t v26 = v0[21];
    int v27 = v0[49];
    uint64_t v13 = v9
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplateInfo: PromptTemplateInfo, renderedPrompt: Prompt?))
                 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v10, v9, v12);
    outlined init with take of Locale?(v13, v26, &demangling cache variable for type metadata for Prompt?);
    v0[2] = v8;
    v0[3] = v7;
    v0[4] = v6;
    v0[5] = v5;
    v0[6] = v27;
    v0[7] = v28;
    v0[8] = v29;
    uint64_t v14 = (void *)swift_task_alloc();
    v0[60] = v14;
    void *v14 = v0;
    v14[1] = TokenGenerator._render<A>(configuration:);
    uint64_t v15 = v0[27];
    long long v16 = v0[24];
    uint64_t v17 = v0[21];
    return TokenGenerator.render(prompt:promptTemplateInfo:metadata:)(v15, v17, v16, (uint64_t)(v0 + 2));
  }
  else
  {
    uint64_t v19 = v0[32];
    uint64_t v20 = v0[33];
    uint64_t v21 = v0[30];
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v0[56] = v22;
    v0[57] = (v20 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v22(v21, v19);
    v0[9] = v8;
    v0[10] = v7;
    v0[11] = v6;
    v0[12] = v5;
    v0[13] = v4;
    v0[14] = v3;
    v0[15] = v2;
    uint64_t v23 = (void *)swift_task_alloc();
    v0[58] = v23;
    *uint64_t v23 = v0;
    v23[1] = TokenGenerator._render<A>(configuration:);
    uint64_t v24 = v0[35];
    uint64_t v25 = v0[27];
    return TokenGenerator.render(prompt:metadata:)(v25, v24, (uint64_t)(v0 + 9));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 472) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = TokenGenerator._render<A>(configuration:);
  }
  else {
    uint64_t v2 = TokenGenerator._render<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v12 = v0[42];
  uint64_t v10 = v0[40];
  uint64_t v11 = v0[39];
  uint64_t v1 = v0[33];
  uint64_t v8 = v0[32];
  uint64_t v9 = v0[35];
  uint64_t v7 = v0[31];
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[26];
  (*(void (**)(uint64_t))(v4 + 32))(v2);
  Prompt.Rendering.renderedString.getter();
  Prompt.Rendering.originalPrompt.getter();
  Prompt.Rendering.segments.getter();
  Prompt.Rendering.tokenIDs.getter();
  RawPrompt.init(text:originalPrompt:segments:tokenIDs:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v7, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v9, v8);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 488) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = TokenGenerator._render<A>(configuration:);
  }
  else {
    uint64_t v2 = TokenGenerator._render<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v2 = v0[23];
  uint64_t v1 = v0[24];
  uint64_t v3 = v0[22];
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[21], &demangling cache variable for type metadata for Prompt?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v15 = v0[42];
  uint64_t v13 = v0[40];
  uint64_t v14 = v0[39];
  uint64_t v4 = v0[33];
  uint64_t v11 = v0[32];
  uint64_t v12 = v0[35];
  uint64_t v10 = v0[31];
  uint64_t v5 = v0[28];
  uint64_t v6 = v0[25];
  uint64_t v7 = v0[26];
  (*(void (**)(uint64_t))(v7 + 32))(v5);
  Prompt.Rendering.renderedString.getter();
  Prompt.Rendering.originalPrompt.getter();
  Prompt.Rendering.segments.getter();
  Prompt.Rendering.tokenIDs.getter();
  RawPrompt.init(text:originalPrompt:segments:tokenIDs:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v10, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v12, v11);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[40] + 8))(v0[42], v0[39]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[42];
  uint64_t v2 = v0[39];
  uint64_t v3 = v0[40];
  (*(void (**)(void, void))(v0[33] + 8))(v0[35], v0[32]);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[56];
  uint64_t v2 = v0[42];
  uint64_t v3 = v0[39];
  uint64_t v4 = v0[40];
  uint64_t v5 = v0[35];
  uint64_t v6 = v0[32];
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v0[31], type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  v1(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;

  uint64_t v12 = v0[42];
  uint64_t v1 = v0[39];
  uint64_t v2 = v0[40];
  uint64_t v3 = v0[35];
  uint64_t v4 = v0[32];
  uint64_t v5 = v0[33];
  uint64_t v6 = v0[31];
  uint64_t v7 = v0[23];
  uint64_t v8 = v0[24];
  uint64_t v9 = v0[22];
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[21], &demangling cache variable for type metadata for Prompt?);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v6, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v12, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  long long v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v20 = v0;
  if (*(void *)(*(void *)(v0 + 160) + 24)) {
    swift_bridgeObjectRetain();
  }
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 328);
  uint64_t v13 = *(void *)(v0 + 336);
  uint64_t v14 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 296);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 136);
  GenerativeConfigurationProtocol.generateGenerativeFunctionInstrumenter(useCaseIdentifier:eventReporter:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v13, v1, v14);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 352) = v7;
  *(void *)(v0 + 360) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v3, v6, v5);
  RequestMetadata.init<A>(generativeFunctionInstrumenter:configuration:)(v13, v3, v5, &v15);
  *(void *)(v0 + 368) = v15;
  *(_OWORD *)(v0 + 376) = v16;
  *(void *)(v0 + 392) = v17;
  *(_OWORD *)(v0 + 400) = v18;
  *(void *)(v0 + 416) = v19;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 424) = v8;
  *uint64_t v8 = v0;
  v8[1] = TokenGenerator._render<A>(configuration:);
  uint64_t v9 = *(void *)(v0 + 288);
  uint64_t v10 = *(void *)(v0 + 144);
  uint64_t v11 = *(void *)(v0 + 152);
  return GenerativeConfigurationProtocol<>.renderToTokenGenerationPrompt()(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 432) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = TokenGenerator._render<A>(configuration:);
  }
  else
  {
    uint64_t v2 = TokenGenerator._render<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[44];
  uint64_t v2 = v0[38];
  uint64_t v4 = v0[17];
  uint64_t v3 = v0[18];
  (*(void (**)(void, void, void))(v0[33] + 16))(v0[35], v0[36], v0[32]);
  v1(v2, v4, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[55] = v5;
  *uint64_t v5 = v0;
  v5[1] = TokenGenerator._render<A>(configuration:);
  uint64_t v6 = v0[38];
  uint64_t v7 = v0[35];
  uint64_t v8 = v0[31];
  uint64_t v9 = v0[18];
  uint64_t v10 = v0[19];
  return TokenGenerator.PromptInputFromGenerativeModel.init<A>(tgPrompt:chatMessagesConfiguration:)(v8, v7, v6, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 448) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = TokenGenerator._render<A>(configuration:);
  }
  else
  {
    uint64_t v2 = TokenGenerator._render<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  int EnumCaseMultiPayload;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  outlined init with copy of PromptCompletion(v0[31], v0[30], type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v3 = v0[51];
  uint64_t v2 = v0[52];
  uint64_t v5 = v0[49];
  uint64_t v4 = v0[50];
  uint64_t v6 = v0[47];
  uint64_t v7 = v0[48];
  uint64_t v8 = v0[46];
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v24 = v0[51];
    uint64_t v25 = v0[52];
    uint64_t v9 = v0[30];
    uint64_t v11 = v0[23];
    uint64_t v10 = v0[24];
    uint64_t v12 = v0[22];
    uint64_t v22 = v0[21];
    uint64_t v23 = v0[50];
    uint64_t v13 = v9
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplateInfo: PromptTemplateInfo, renderedPrompt: Prompt?))
                 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v10, v9, v12);
    outlined init with take of Locale?(v13, v22, &demangling cache variable for type metadata for Prompt?);
    v0[2] = v8;
    v0[3] = v6;
    v0[4] = v7;
    v0[5] = v5;
    v0[6] = v23;
    v0[7] = v24;
    v0[8] = v25;
    uint64_t v14 = (void *)swift_task_alloc();
    v0[59] = v14;
    void *v14 = v0;
    v14[1] = TokenGenerator._render<A>(configuration:);
    uint64_t v15 = v0[27];
    long long v16 = v0[24];
    uint64_t v17 = v0[21];
    return TokenGenerator.render(prompt:promptTemplateInfo:metadata:)(v15, v17, v16, (uint64_t)(v0 + 2));
  }
  else
  {
    (*(void (**)(void, void, void))(v0[33] + 32))(v0[34], v0[30], v0[32]);
    v0[9] = v8;
    v0[10] = v6;
    v0[11] = v7;
    v0[12] = v5;
    v0[13] = v4;
    v0[14] = v3;
    v0[15] = v2;
    uint64_t v19 = (void *)swift_task_alloc();
    v0[57] = v19;
    *uint64_t v19 = v0;
    v19[1] = TokenGenerator._render<A>(configuration:);
    uint64_t v20 = v0[34];
    uint64_t v21 = v0[27];
    return TokenGenerator.render(prompt:metadata:)(v21, v20, (uint64_t)(v0 + 9));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 464) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = TokenGenerator._render<A>(configuration:);
  }
  else {
    uint64_t v2 = TokenGenerator._render<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  void (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v13 = v0[43];
  uint64_t v11 = v0[41];
  uint64_t v12 = v0[40];
  uint64_t v10 = v0[36];
  uint64_t v8 = v0[32];
  uint64_t v9 = v0[31];
  uint64_t v2 = v0[27];
  uint64_t v1 = v0[28];
  uint64_t v4 = v0[25];
  uint64_t v3 = v0[26];
  uint64_t v7 = *(void (**)(void))(v0[33] + 8);
  v7();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v4);
  Prompt.Rendering.renderedString.getter();
  Prompt.Rendering.originalPrompt.getter();
  Prompt.Rendering.segments.getter();
  Prompt.Rendering.tokenIDs.getter();
  RawPrompt.init(text:originalPrompt:segments:tokenIDs:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v9, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  ((void (*)(uint64_t, uint64_t))v7)(v10, v8);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 480) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = TokenGenerator._render<A>(configuration:);
  }
  else {
    uint64_t v2 = TokenGenerator._render<A>(configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[21], &demangling cache variable for type metadata for Prompt?);
  uint64_t v13 = v0[43];
  uint64_t v11 = v0[41];
  uint64_t v12 = v0[40];
  uint64_t v1 = v0[33];
  uint64_t v9 = v0[32];
  uint64_t v10 = v0[36];
  uint64_t v8 = v0[31];
  uint64_t v2 = v0[27];
  uint64_t v3 = v0[28];
  uint64_t v4 = v0[25];
  uint64_t v5 = v0[26];
  (*(void (**)(void))(v0[23] + 8))();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v3, v2, v4);
  Prompt.Rendering.renderedString.getter();
  Prompt.Rendering.originalPrompt.getter();
  Prompt.Rendering.segments.getter();
  Prompt.Rendering.tokenIDs.getter();
  RawPrompt.init(text:originalPrompt:segments:tokenIDs:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v8, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v10, v9);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[41] + 8))(v0[43], v0[40]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[43];
  uint64_t v2 = v0[40];
  uint64_t v3 = v0[41];
  (*(void (**)(void, void))(v0[33] + 8))(v0[36], v0[32]);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = v0[43];
  uint64_t v2 = v0[40];
  uint64_t v3 = v0[41];
  uint64_t v4 = v0[36];
  uint64_t v6 = v0[31];
  uint64_t v5 = v0[32];
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0[33] + 8);
  v7(v0[34], v5);
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v6, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  v7(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;

  uint64_t v12 = v0[43];
  uint64_t v1 = v0[40];
  uint64_t v2 = v0[41];
  uint64_t v3 = v0[36];
  uint64_t v4 = v0[32];
  uint64_t v5 = v0[33];
  uint64_t v6 = v0[31];
  uint64_t v7 = v0[23];
  uint64_t v8 = v0[24];
  uint64_t v9 = v0[22];
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[21], &demangling cache variable for type metadata for Prompt?);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  outlined destroy of TokenGeneratorCompletionResponseStringStream(v6, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v12, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t protocol witness for CompletionLanguageModelProvidingRenderable._render<A>(configuration:) in conformance TokenGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return TokenGenerator._render<A>(configuration:)(a1, a2, a3, a4);
}

uint64_t protocol witness for ChatLanguageModelProvidingRenderable._render<A>(configuration:) in conformance TokenGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return TokenGenerator._render<A>(configuration:)(a1, a2, a3, a4);
}

uint64_t closure #1 in static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Prompt();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v13[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PromptTemplate();
  v13[3] = v6;
  v13[4] = lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type PromptTemplate and conformance PromptTemplate, MEMORY[0x263F41548]);
  boxed_opaque_existential_1Tm = __swift_allocate_boxed_opaque_existential_1Tm(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(boxed_opaque_existential_1Tm, a1, v6);
  uint64_t v8 = MEMORY[0x263F620B0];
  static CustomPromptBuilder.buildExpression(_:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt>);
  unint64_t v9 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_25F91CC30;
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 16))(v10 + v9, v5, v2);
  MEMORY[0x261200680](v10, v2, v8);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for Prompt.Turn);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  uint64_t v5 = a2();
  if (!*(void *)(a1 + 16))
  {
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v11 = (*(void *)(v5 + 24) >> 1) - v10;
  uint64_t v12 = *(void *)(a3(0) - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v15 = v5 + v14 + v13 * v10;
  unint64_t v16 = a1 + v14;
  uint64_t v17 = v13 * v4;
  unint64_t v18 = v15 + v17;
  unint64_t v19 = v16 + v17;
  if (v16 < v18 && v15 < v19) {
    goto LABEL_21;
  }
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v5;
    return result;
  }
  uint64_t v21 = *(void *)(v5 + 16);
  BOOL v22 = __OFADD__(v21, v4);
  uint64_t v23 = v21 + v4;
  if (!v22)
  {
    *(void *)(v5 + 16) = v23;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t textSegment #2 (from:to:) in static TokenGenerator.getTurnsForMessage(for:with:binding:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[9] = a5;
  v6[10] = a6;
  v6[7] = a3;
  v6[8] = a4;
  v6[5] = a1;
  v6[6] = a2;
  uint64_t v7 = type metadata accessor for Prompt();
  v6[11] = v7;
  v6[12] = *(void *)(v7 - 8);
  v6[13] = swift_task_alloc();
  return MEMORY[0x270FA2498](textSegment #2 (from:to:) in static TokenGenerator.getTurnsForMessage(for:with:binding:), 0, 0);
}

uint64_t textSegment #2 (from:to:) in static TokenGenerator.getTurnsForMessage(for:with:binding:)()
{
  uint64_t v1 = v0[6];
  if (v1 < v0[7])
  {
    uint64_t v2 = v0[8];
    uint64_t v3 = v0[9];
    uint64_t v4 = v3 + 16;
    ChatMessagePrompt.prompt.getter();
    swift_beginAccess();
    if (v1 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v4 = *(void *)(v3 + 16);
      unint64_t v5 = v0[6];
      uint64_t v2 = v0[7];
      unint64_t v6 = *(void *)(v4 + 16);
      if (v6 >= v5 && (uint64_t)v6 >= v2)
      {
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain_n();
        uint64_t v8 = swift_dynamicCastClass();
        if (v8)
        {
          uint64_t v9 = v2;
        }
        else
        {
          swift_bridgeObjectRelease();
          unint64_t v5 = v0[6];
          uint64_t v9 = v0[7];
          uint64_t v8 = MEMORY[0x263F8EE78];
        }
        uint64_t v14 = *(void *)(v8 + 16);
        swift_release();
        if (v14 == v9 - v5)
        {
          if (!swift_dynamicCastClass()) {
            swift_bridgeObjectRelease();
          }
          goto LABEL_16;
        }
LABEL_21:
        uint64_t v18 = v0[6];
        swift_bridgeObjectRelease();
        uint64_t v19 = *(void *)(type metadata accessor for Prompt.Component() - 8);
        specialized _copyCollectionToContiguousArray<A>(_:)(v4, v4 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80)), v18, (2 * v2) | 1);
LABEL_16:
        swift_bridgeObjectRelease();
        Prompt.components.setter();
        unint64_t v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        v0[14] = v15;
        unint64_t v16 = (void *)swift_task_alloc();
        v0[15] = v16;
        *unint64_t v16 = v0;
        v16[1] = textSegment #2 (from:to:) in static TokenGenerator.getTurnsForMessage(for:with:binding:);
        uint64_t v17 = v0[10];
        return MEMORY[0x270F58210](v15, v17);
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v10 = v0[5];
  uint64_t v11 = type metadata accessor for Prompt.Turn.Segment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = v0[17];
  if ((v1 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(v1) & 0xF;
  }
  else {
    uint64_t v2 = v0[16] & 0xFFFFFFFFFFFFLL;
  }
  (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
  uint64_t v3 = v0[17];
  if (v2)
  {
    uint64_t v4 = (void *)v0[5];
    *uint64_t v4 = v0[16];
    v4[1] = v3;
    unint64_t v5 = type metadata accessor for Prompt.Turn.Segment(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 0, 1, v5);
  }
  else
  {
    unint64_t v6 = v0[5];
    uint64_t v7 = type metadata accessor for Prompt.Turn.Segment(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t textSegment #2 (from:to:) in static TokenGenerator.getTurnsForMessage(for:with:binding:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[16] = a1;
  v4[17] = a2;
  v4[18] = v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v2) {
    unint64_t v5 = textSegment #2 (from:to:) in static TokenGenerator.getTurnsForMessage(for:with:binding:);
  }
  else {
    unint64_t v5 = textSegment #2 (from:to:) in static TokenGenerator.getTurnsForMessage(for:with:binding:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t closure #3 in static TokenGenerator.getTurnsForMessage(for:with:binding:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v3 = type metadata accessor for Prompt.Turn(0);
  uint64_t v4 = (int *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v22 - v11;
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v15 = a1[2];
  uint64_t v16 = a1[3];
  ChatMessagePrompt.locale.getter();
  outlined init with copy of Prompt.Rendering?((uint64_t)v12, (uint64_t)v10, &demangling cache variable for type metadata for Locale?);
  uint64_t v17 = (uint64_t)&v6[v4[7]];
  uint64_t v18 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  uint64_t v19 = &v6[v4[11]];
  *unint64_t v6 = 3;
  uint64_t v20 = MEMORY[0x263F8EE78];
  *(void *)&v6[v4[8]] = MEMORY[0x263F8EE78];
  *(void *)&v6[v4[10]] = v20;
  *uint64_t v19 = v14;
  v19[1] = v13;
  void v19[2] = v15;
  v19[3] = v16;
  v6[v4[9]] = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined assign with take of Locale?((uint64_t)v10, v17);
  outlined init with take of PromptCompletionStream((uint64_t)v6, v23, type metadata accessor for Prompt.Turn);
  return outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v12, &demangling cache variable for type metadata for Locale?);
}

uint64_t specialized Clock.sleep(for:tolerance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return MEMORY[0x270FA2498](specialized Clock.sleep(for:tolerance:), 0, 0);
}

uint64_t specialized Clock.sleep(for:tolerance:)()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, MEMORY[0x263F8F710]);
  dispatch thunk of Clock.now.getter();
  lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant, MEMORY[0x263F8F6D8]);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *uint64_t v7 = v0;
  v7[1] = specialized Clock.sleep(for:tolerance:);
  uint64_t v8 = v0[11];
  return MEMORY[0x270FA2380](v8, v0 + 2, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return MEMORY[0x270FA2498](specialized Clock.sleep(for:tolerance:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_21;
  }
  if (!v5) {
    return MEMORY[0x263F8EE78];
  }
  if (v5 <= 0)
  {
    uint64_t v11 = (void *)MEMORY[0x263F8EE78];
    if (v4 != a3)
    {
LABEL_10:
      if (v5 < 0) {
        goto LABEL_24;
      }
      uint64_t v14 = *(void *)(type metadata accessor for Prompt.Component() - 8);
      uint64_t v15 = (char *)v11 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      uint64_t v16 = *(void *)(v14 + 72);
      unint64_t v17 = a2 + v16 * a3;
      uint64_t v18 = v16 * v5;
      uint64_t v19 = &v15[v18];
      unint64_t v20 = v17 + v18;
      if (v17 < (unint64_t)v19 && (unint64_t)v15 < v20) {
        goto LABEL_24;
      }
      swift_arrayInitWithCopy();
      return (uint64_t)v11;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Component>);
  uint64_t v8 = *(void *)(type metadata accessor for Prompt.Component() - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (void *)swift_allocObject();
  size_t v12 = _swift_stdlib_malloc_size(v11);
  if (v9)
  {
    if (v12 - v10 == 0x8000000000000000 && v9 == -1) {
      goto LABEL_23;
    }
    v11[2] = v5;
    v11[3] = 2 * ((uint64_t)(v12 - v10) / v9);
    if (v4 != a3) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = specialized LazyMapSequence.Iterator.next()();
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v11 = v7;
  uint64_t v12 = v8;
  uint64_t v13 = v9;
  uint64_t v14 = v10;
  uint64_t v15 = (void *)*a5;
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char v21 = v16;
  if (v15[3] >= v20)
  {
    if (a4)
    {
      uint64_t v24 = (void *)*a5;
      if (v16) {
        goto LABEL_9;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      uint64_t v24 = (void *)*a5;
      if (v21) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v24[(v17 >> 6) + 8] |= 1 << v17;
    uint64_t v26 = (uint64_t *)(v24[6] + 16 * v17);
    *uint64_t v26 = v11;
    v26[1] = v12;
    int v27 = (void *)(v24[7] + 16 * v17);
    *int v27 = v13;
    v27[1] = v14;
    uint64_t v28 = v24[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v24[2] = v30;
LABEL_13:
    uint64_t v31 = specialized LazyMapSequence.Iterator.next()();
    if (v32)
    {
      uint64_t v35 = v31;
      uint64_t v36 = v32;
      uint64_t v37 = v33;
      uint64_t v38 = v34;
      do
      {
        char v43 = (void *)*a5;
        unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
        uint64_t v46 = v43[2];
        BOOL v47 = (v44 & 1) == 0;
        uint64_t v48 = v46 + v47;
        if (__OFADD__(v46, v47)) {
          goto LABEL_25;
        }
        char v49 = v44;
        if (v43[3] < v48)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v48, 1);
          unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
          if ((v49 & 1) != (v51 & 1)) {
            goto LABEL_27;
          }
          unint64_t v45 = v50;
        }
        uint64_t v52 = (void *)*a5;
        if (v49)
        {
          swift_bridgeObjectRelease();
          long long v39 = (void *)(v52[7] + 16 * v45);
          swift_bridgeObjectRelease();
          *long long v39 = v37;
          v39[1] = v38;
        }
        else
        {
          v52[(v45 >> 6) + 8] |= 1 << v45;
          uint64_t v53 = (uint64_t *)(v52[6] + 16 * v45);
          uint64_t *v53 = v35;
          v53[1] = v36;
          uint64_t v54 = (void *)(v52[7] + 16 * v45);
          *uint64_t v54 = v37;
          v54[1] = v38;
          uint64_t v55 = v52[2];
          BOOL v29 = __OFADD__(v55, 1);
          uint64_t v56 = v55 + 1;
          if (v29) {
            goto LABEL_26;
          }
          v52[2] = v56;
        }
        uint64_t v35 = specialized LazyMapSequence.Iterator.next()();
        uint64_t v36 = v40;
        uint64_t v37 = v41;
        uint64_t v38 = v42;
      }
      while (v40);
    }
LABEL_24:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [String : Any].Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, a4 & 1);
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
  if ((v21 & 1) == (v23 & 1))
  {
    unint64_t v17 = v22;
    uint64_t v24 = (void *)*a5;
    if ((v21 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v25 = (void *)(v24[7] + 16 * v17);
    swift_bridgeObjectRelease();
    void *v25 = v13;
    v25[1] = v14;
    goto LABEL_13;
  }
LABEL_27:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in AsyncThrowingStream<>.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v6;
  *uint64_t v6 = v3;
  v6[1] = specialized closure #1 in AsyncThrowingStream<>.init<A>(_:);
  return specialized closure #1 in AsyncThrowingStream<>.init<A>(_:)(a2, a3);
}

{
  uint64_t v3;
  void *v6;
  uint64_t v8;

  *(void *)(v3 + 16) = a1;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v6;
  *uint64_t v6 = v3;
  v6[1] = specialized closure #1 in AsyncThrowingStream<>.init<A>(_:);
  return specialized closure #1 in AsyncThrowingStream<>.init<A>(_:)(a2, a3);
}

{
  void *v3;

  v3[24] = a2;
  v3[25] = a3;
  v3[23] = a1;
  return MEMORY[0x270FA2498](specialized closure #1 in AsyncThrowingStream<>.init<A>(_:), 0, 0);
}

{
  void *v3;
  uint64_t v4;
  uint64_t v6;

  v3[11] = a1;
  v3[12] = a3;
  unint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  v3[13] = v4;
  v3[14] = *(void *)(v4 - 8);
  v3[15] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator?);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = swift_projectBox();
  return MEMORY[0x270FA2498](specialized closure #1 in AsyncThrowingStream<>.init<A>(_:), 0, 0);
}

{
  void *v3;
  uint64_t v4;
  uint64_t v6;

  v3[11] = a1;
  v3[12] = a3;
  unint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<AsyncThrowingStream<CompletePromptResponseElement, Error>, PromptCompletionEvent>);
  v3[13] = v4;
  v3[14] = *(void *)(v4 - 8);
  v3[15] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<AsyncThrowingStream<CompletePromptResponseElement, Error>, PromptCompletionEvent>.Iterator?);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = swift_projectBox();
  return MEMORY[0x270FA2498](specialized closure #1 in AsyncThrowingStream<>.init<A>(_:), 0, 0);
}

uint64_t specialized closure #1 in closure #1 in withTimeout<A>(timeout:_:)()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized closure #1 in closure #1 in withTimeout<A>(timeout:_:);
  }
  else {
    uint64_t v2 = specialized closure #1 in closure #1 in withTimeout<A>(timeout:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;

  *(_OWORD *)*(void *)(v0 + 32) = *(_OWORD *)(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized closure #1 in closure #1 in withTimeout<A>(timeout:_:);
  }
  else {
    uint64_t v2 = specialized closure #1 in closure #1 in withTimeout<A>(timeout:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  long long v2;

  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(_OWORD *)(v0 + 24);
  *(void *)uint64_t v1 = *(void *)(v0 + 16);
  *(_OWORD *)(v1 + 8) = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:)(uint64_t a1, double a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  *uint64_t v4 = v2;
  v4[1] = specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:);
  return specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:)(a2);
}

{
  uint64_t v2;
  void *v4;
  uint64_t v6;

  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  *uint64_t v4 = v2;
  v4[1] = specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:);
  return specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:)(a2);
}

uint64_t specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  swift_task_dealloc();
  if (!v2)
  {
    uint64_t v8 = *(void **)(v6 + 16);
    *uint64_t v8 = a1;
    v8[1] = a2;
  }
  uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
  return v9();
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&long long v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }
    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v24, 0, sizeof(v24));
  long long v23 = 0u;
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  BOOL v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = outlined init with take of Locale?((uint64_t)&v23, (uint64_t)v22, &demangling cache variable for type metadata for (key: String, value: Any)?);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    void v21[2] = v22[2];
    v19(v21);
    return outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v21, &demangling cache variable for type metadata for (key: String, value: Any));
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  void (*v14)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  void v23[4];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = 16 * v6;
    unint64_t v8 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    uint64_t v11 = (uint64_t *)(*(void *)(v1 + 56) + v7);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    v0[3] = v4;
    v0[4] = v5;
    int64_t v14 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v23[0] = v9;
    v23[1] = v10;
    v23[2] = v12;
    void v23[3] = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(&v22, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v22;
  }
  unint64_t v16 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    int64_t v17 = (unint64_t)(v0[2] + 64) >> 6;
    if (v16 < v17)
    {
      int64_t v18 = v0[1];
      BOOL v19 = *(void *)(v18 + 8 * v16);
      if (v19)
      {
LABEL_7:
        uint64_t v5 = (v19 - 1) & v19;
        unint64_t v6 = __clz(__rbit64(v19)) + (v16 << 6);
        int64_t v4 = v16;
        goto LABEL_3;
      }
      uint64_t v20 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v17)
      {
        BOOL v19 = *(void *)(v18 + 8 * v20);
        if (v19)
        {
LABEL_10:
          unint64_t v16 = v20;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v17)
        {
          BOOL v19 = *(void *)(v18 + 8 * (v3 + 3));
          if (v19)
          {
            unint64_t v16 = v3 + 3;
            goto LABEL_7;
          }
          uint64_t v20 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v17)
          {
            BOOL v19 = *(void *)(v18 + 8 * v20);
            if (v19) {
              goto LABEL_10;
            }
            unint64_t v16 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v17)
            {
              BOOL v19 = *(void *)(v18 + 8 * v16);
              if (v19) {
                goto LABEL_7;
              }
              int64_t v4 = v17 - 1;
              char v21 = v3 + 6;
              while (v17 != v21)
              {
                BOOL v19 = *(void *)(v18 + 8 * v21++);
                if (v19)
                {
                  unint64_t v16 = v21 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  *uint64_t v4 = v2;
  v4[1] = specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  return specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()(a2);
}

{
  uint64_t v2;
  void *v4;
  uint64_t v6;

  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  *uint64_t v4 = v2;
  v4[1] = specialized closure #1 in closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect();
  return specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()(a2);
}

uint64_t partial apply for specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()
                                                + async function pointer to specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect());
  return v6(a1, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v8;

  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()
                                                + async function pointer to specialized closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect());
  return v6(a1, v4);
}

uint64_t partial apply for closure #1 in TokenGenerator._streamCompletion<A>(configuration:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  unint64_t v7 = (*(void *)(*(void *)(v4 - 8) + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = v1 + v6;
  uint64_t v9 = *(void *)(v1 + v7);
  uint64_t v10 = *(void *)(v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in TokenGenerator._streamCompletion<A>(configuration:)(a1, v8, v9, v10, v4, v5);
}

uint64_t partial apply for specialized closure #1 in withTimeout<A>(timeout:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *((void *)v2 + 2);
  uint64_t v7 = *((void *)v2 + 3);
  double v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return specialized closure #1 in withTimeout<A>(timeout:_:)(a1, a2, v6, v7, v8);
}

{
  double *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  double v8;
  void *v9;
  uint64_t v11;

  uint64_t v6 = *((void *)v2 + 2);
  uint64_t v7 = *((void *)v2 + 3);
  double v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return specialized closure #1 in withTimeout<A>(timeout:_:)(a1, a2, v6, v7, v8);
}

{
  double *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  double v8;
  void *v9;
  uint64_t v11;

  uint64_t v6 = *((void *)v2 + 2);
  uint64_t v7 = *((void *)v2 + 3);
  double v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return specialized closure #1 in withTimeout<A>(timeout:_:)(a1, a2, v6, v7, v8);
}

{
  double *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  double v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v6 = *((void *)v2 + 2);
  uint64_t v7 = *((void *)v2 + 3);
  double v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  uint64_t v10 = async function pointer to specialized closure #1 in withTimeout<A>(timeout:_:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, double))((char *)&async function pointer to specialized closure #1 in withTimeout<A>(timeout:_:)
                                                                             + v10))(a1, a2, v6, v7, v8);
}

{
  double *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  double v8;
  void *v9;
  uint64_t v11;

  uint64_t v6 = *((void *)v2 + 2);
  uint64_t v7 = *((void *)v2 + 3);
  double v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return specialized closure #1 in withTimeout<A>(timeout:_:)(a1, a2, v6, v7, v8);
}

{
  double *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  double v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v6 = *((void *)v2 + 2);
  uint64_t v7 = *((void *)v2 + 3);
  double v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  uint64_t v10 = async function pointer to specialized closure #1 in withTimeout<A>(timeout:_:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, double))((char *)&async function pointer to specialized closure #1 in withTimeout<A>(timeout:_:)
                                                                             + v10))(a1, a2, v6, v7, v8);
}

uint64_t partial apply for closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in TokenGeneratorResponseStringStreamAsyncSequence.collect()(a1, v6, v4, v5);
}

uint64_t type metadata accessor for TokenGeneratorResponsePromptCompletionStream(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for TokenGeneratorResponsePromptCompletionStream);
}

uint64_t outlined destroy of TokenGeneratorCompletionResponseStringStream(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of PromptCompletionStream(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of PromptCompletion(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_25F8D4CF4()
{
  return objectdestroy_17Tm(type metadata accessor for TokenGeneratorResponsePromptCompletionStream);
}

uint64_t partial apply for closure #1 in TokenGeneratorResponsePromptCompletionStream.collect()(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for TokenGeneratorResponsePromptCompletionStream(0) - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in TokenGeneratorResponsePromptCompletionStream.collect()(a1, v5);
}

uint64_t partial apply for closure #1 in ModelBundle.modelBundleIdentifier(instrumenter:)(uint64_t a1)
{
  long long v8 = *(_OWORD *)(v1 + 16);
  char v4 = *(unsigned char *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 40) = v5;
  *(unsigned char *)(v6 + 72) = v4;
  *(_OWORD *)(v6 + 24) = v8;
  *(void *)(v6 + 8) = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  *(void *)(v6 + 16) = a1;
  return MEMORY[0x270FA2498](closure #1 in ModelBundle.modelBundleIdentifier(instrumenter:), 0, 0);
}

uint64_t type metadata accessor for TokenGeneratorCompletionResponseOneShotGenerableAdditionalInfo(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for TokenGeneratorCompletionResponseOneShotGenerableAdditionalInfo);
}

uint64_t partial apply for closure #1 in TokenGenerator._oneShotCompletion<A, B>(type:configuration:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t v8 = v1[9];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in TokenGenerator._oneShotCompletion<A, B>(type:configuration:)(a1, v6, v7, v9, v8, v4, v5);
}

uint64_t partial apply for closure #1 in TokenGenerator._completeSingleElement<A, B>(type:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v9 = a4 & 1;
  uint64_t v10 = v4[2];
  uint64_t v11 = v4[6];
  uint64_t v13 = v4[7];
  uint64_t v12 = v4[8];
  int64_t v14 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v14;
  void *v14 = v5;
  v14[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in TokenGenerator._completeSingleElement<A, B>(type:configuration:)(a1, a2, a3, v9, v11, v13, v12, v10);
}

uint64_t partial apply for closure #1 in TokenGenerator._completeMultiElement<A, B>(type:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v9 = a4 & 1;
  uint64_t v10 = v4[2];
  uint64_t v11 = v4[6];
  uint64_t v13 = v4[7];
  uint64_t v12 = v4[8];
  int64_t v14 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v14;
  void *v14 = v5;
  v14[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in TokenGenerator._completeMultiElement<A, B>(type:configuration:)(a1, a2, a3, v9, v11, v13, v12, v10);
}

uint64_t type metadata accessor for TokenGeneratorChatResponseStringStream(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for TokenGeneratorChatResponseStringStream);
}

uint64_t specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v4;
  uint64_t v9 = *v4;
  swift_task_dealloc();
  if (!v3)
  {
    uint64_t v10 = *(void **)(v8 + 16);
    *uint64_t v10 = a1;
    v10[1] = a2;
    v10[2] = a3;
  }
  uint64_t v11 = *(uint64_t (**)(void))(v9 + 8);
  return v11();
}

uint64_t objectdestroyTm()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_release();
  return MEMORY[0x270FA0238](v0, ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v4);
}

uint64_t partial apply for closure #1 in TokenGenerator._streamResponse<A>(configuration:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  unint64_t v7 = (*(void *)(*(void *)(v4 - 8) + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = v1 + v6;
  uint64_t v9 = *(void *)(v1 + v7);
  uint64_t v10 = *(void *)(v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in TokenGenerator._streamResponse<A>(configuration:)(a1, v8, v9, v10, v4, v5);
}

uint64_t type metadata accessor for TokenGeneratorChatResponse(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for TokenGeneratorChatResponse);
}

uint64_t type metadata accessor for TokenGeneratorChatResponseGenerableAdditionalInfo(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for TokenGeneratorChatResponseGenerableAdditionalInfo);
}

uint64_t partial apply for closure #1 in TokenGenerator._oneShotResponse<A, B>(type:configuration:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t v8 = v1[9];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in TokenGenerator._oneShotResponse<A, B>(type:configuration:)(a1, v6, v7, v9, v8, v4, v5);
}

uint64_t partial apply for closure #1 in TokenGenerator._respondMultiElement<A, B>(type:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v9 = a4 & 1;
  uint64_t v10 = v4[2];
  uint64_t v11 = v4[6];
  uint64_t v13 = v4[7];
  uint64_t v12 = v4[8];
  int64_t v14 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v14;
  void *v14 = v5;
  v14[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in TokenGenerator._respondMultiElement<A, B>(type:configuration:)(a1, a2, a3, v9, v11, v13, v12, v10);
}

uint64_t partial apply for closure #1 in TokenGenerator._respondSingleElement<A, B>(type:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v9 = a4 & 1;
  uint64_t v10 = v4[2];
  uint64_t v11 = v4[6];
  uint64_t v13 = v4[7];
  uint64_t v12 = v4[8];
  int64_t v14 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v14;
  void *v14 = v5;
  v14[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in TokenGenerator._completeSingleElement<A, B>(type:configuration:)(a1, a2, a3, v9, v11, v13, v12, v10);
}

uint64_t type metadata accessor for TokenGeneratorResponseStringStreamAsyncIterator(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for TokenGeneratorResponseStringStreamAsyncIterator);
}

uint64_t type metadata accessor for TokenGeneratorResponsePromptCompletionStream.AsyncIterator(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for TokenGeneratorResponsePromptCompletionStream.AsyncIterator);
}

uint64_t type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for TokenGenerator.PromptInputFromGenerativeModel);
}

uint64_t associated type witness table accessor for CompletionLanguageModelProviding.CompletionStringResponse : CompletionLanguageModelResponse in TokenGenerator()
{
  return lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(&lazy protocol witness table cache variable for type CompletionResponse<String> and conformance CompletionResponse<A>, &demangling cache variable for type metadata for CompletionResponse<String>);
}

uint64_t associated type witness table accessor for CompletionLanguageModelProvidingOneShot.CompletionStringResponseOneShot : CompletionLanguageModelResponseBase in TokenGenerator()
{
  return lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse, (void (*)(uint64_t))type metadata accessor for TokenGeneratorCompletionResponse);
}

uint64_t type metadata accessor for TokenGeneratorCompletionResponse(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for TokenGeneratorCompletionResponse);
}

uint64_t instantiation function for generic protocol witness table for TokenGeneratorCompletionResponseStringStream(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type TokenGeneratorCompletionResponseStringStream and conformance TokenGeneratorCompletionResponseStringStream, (void (*)(uint64_t))type metadata accessor for TokenGeneratorCompletionResponseStringStream);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in TokenGeneratorCompletionResponseStringStream()
{
  return lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type TokenGeneratorResponseStringStreamAsyncIterator and conformance TokenGeneratorResponseStringStreamAsyncIterator, (void (*)(uint64_t))type metadata accessor for TokenGeneratorResponseStringStreamAsyncIterator);
}

uint64_t associated type witness table accessor for CompletionLanguageModelResponseStringStream.Stream : AsyncSequence in TokenGeneratorCompletionResponseStringStream()
{
  return lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type TokenGeneratorCompletionResponseStringStream and conformance TokenGeneratorCompletionResponseStringStream, (void (*)(uint64_t))type metadata accessor for TokenGeneratorCompletionResponseStringStream);
}

uint64_t associated type witness table accessor for CompletionLanguageModelResponseStringStream.Stream.AsyncSequence.Element : CompletionLanguageModelResponseStringStreamString in TokenGeneratorCompletionResponseStringStream()
{
  return MEMORY[0x263F40EA0];
}

uint64_t associated type witness table accessor for CompletionLanguageModelProvidingStreamable.CompletionStringStreamResponse : CompletionLanguageModelResponseStringStream in TokenGenerator()
{
  return lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type TokenGeneratorCompletionResponseStringStream and conformance TokenGeneratorCompletionResponseStringStream, (void (*)(uint64_t))type metadata accessor for TokenGeneratorCompletionResponseStringStream);
}

uint64_t associated type witness table accessor for ChatLanguageModelProviding.ChatStringResponse : ChatLanguageModelResponse in TokenGenerator()
{
  return lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(&lazy protocol witness table cache variable for type ChatMessageResponse<String> and conformance ChatMessageResponse<A>, &demangling cache variable for type metadata for ChatMessageResponse<String>);
}

uint64_t associated type witness table accessor for ChatLanguageModelProvidingOneShot.ChatStringResponseOneShot : ChatLanguageModelResponseBase in TokenGenerator()
{
  return lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type TokenGeneratorChatResponse and conformance TokenGeneratorChatResponse, (void (*)(uint64_t))type metadata accessor for TokenGeneratorChatResponse);
}

uint64_t instantiation function for generic protocol witness table for TokenGeneratorChatResponseStringStream(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type TokenGeneratorChatResponseStringStream and conformance TokenGeneratorChatResponseStringStream, (void (*)(uint64_t))type metadata accessor for TokenGeneratorChatResponseStringStream);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for ChatLanguageModelResponseStringStream.Stream : AsyncSequence in TokenGeneratorChatResponseStringStream()
{
  return lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type TokenGeneratorChatResponseStringStream and conformance TokenGeneratorChatResponseStringStream, (void (*)(uint64_t))type metadata accessor for TokenGeneratorChatResponseStringStream);
}

uint64_t associated type witness table accessor for ChatLanguageModelResponseStringStream.Stream.AsyncSequence.Element : ChatLanguageModelResponseStringStreamString in TokenGeneratorChatResponseStringStream()
{
  return MEMORY[0x263F40E98];
}

uint64_t associated type witness table accessor for ChatLanguageModelProvidingStreamable.ChatStringStreamResponse : ChatLanguageModelResponseStringStream in TokenGenerator()
{
  return lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type TokenGeneratorChatResponseStringStream and conformance TokenGeneratorChatResponseStringStream, (void (*)(uint64_t))type metadata accessor for TokenGeneratorChatResponseStringStream);
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in TokenGeneratorResponsePromptCompletionStream()
{
  return lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse(&lazy protocol witness table cache variable for type TokenGeneratorResponsePromptCompletionStream.AsyncIterator and conformance TokenGeneratorResponsePromptCompletionStream.AsyncIterator, (void (*)(uint64_t))type metadata accessor for TokenGeneratorResponsePromptCompletionStream.AsyncIterator);
}

uint64_t getEnumTagSinglePayload for TokenGeneratorCompletionResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0);
}

uint64_t storeEnumTagSinglePayload for TokenGeneratorCompletionResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0);
}

uint64_t getEnumTagSinglePayload for TokenGeneratorCompletionResponseStringStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_80Tm);
}

uint64_t storeEnumTagSinglePayload for TokenGeneratorCompletionResponseStringStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_81Tm);
}

uint64_t getEnumTagSinglePayload for TokenGeneratorCompletionResponseOneShotGenerableAdditionalInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0_0);
}

uint64_t storeEnumTagSinglePayload for TokenGeneratorCompletionResponseOneShotGenerableAdditionalInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0_0);
}

uint64_t *initializeBufferWithCopyOfBuffer for TokenGeneratorChatResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ChatMessageRole();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    char v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v8);
    uint64_t v12 = *(uint64_t *)((char *)a2 + v8 + 8);
    *(void *)char v9 = v11;
    *((void *)v9 + 1) = v12;
    uint64_t v13 = *((void *)v10 + 3);
    *((void *)v9 + 2) = *((void *)v10 + 2);
    *((void *)v9 + 3) = v13;
    *((void *)v9 + 4) = *((void *)v10 + 4);
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(v10 + 40);
    uint64_t v14 = *((void *)v10 + 7);
    unint64_t v15 = *((void *)v10 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v14, v15);
    *((void *)v9 + 7) = v14;
    *((void *)v9 + 8) = v15;
    uint64_t v16 = *(int *)(type metadata accessor for PromptCompletion(0) + 36);
    int64_t v17 = &v9[v16];
    int64_t v18 = &v10[v16];
    uint64_t v19 = type metadata accessor for Prompt.Rendering();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
  }
  return a1;
}

uint64_t destroy for TokenGeneratorChatResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ChatMessageRole();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(v5 + 56), *(void *)(v5 + 64));
  uint64_t v6 = v5 + *(int *)(type metadata accessor for PromptCompletion(0) + 36);
  uint64_t v7 = type metadata accessor for Prompt.Rendering();
  uint64_t v10 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v6, 1, v7);
  if (!result)
  {
    char v9 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
    return v9(v6, v7);
  }
  return result;
}

uint64_t initializeWithCopy for TokenGeneratorChatResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ChatMessageRole();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7);
  uint64_t v11 = *(void *)(a2 + v7 + 8);
  *(void *)uint64_t v8 = v10;
  *(void *)(v8 + 8) = v11;
  uint64_t v12 = *(void *)(v9 + 24);
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(void *)(v8 + 24) = v12;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
  uint64_t v13 = *(void *)(v9 + 56);
  unint64_t v14 = *(void *)(v9 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v13, v14);
  *(void *)(v8 + 56) = v13;
  *(void *)(v8 + 64) = v14;
  uint64_t v15 = *(int *)(type metadata accessor for PromptCompletion(0) + 36);
  uint64_t v16 = (void *)(v8 + v15);
  int64_t v17 = (const void *)(v9 + v15);
  uint64_t v18 = type metadata accessor for Prompt.Rendering();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  return a1;
}

uint64_t assignWithCopy for TokenGeneratorChatResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ChatMessageRole();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[1] = v9[1];
  v8[2] = v9[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[3] = v9[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  _OWORD v8[4] = v9[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[5] = v9[5];
  v8[6] = v9[6];
  uint64_t v10 = v9[7];
  unint64_t v11 = v9[8];
  outlined copy of Data._Representation(v10, v11);
  uint64_t v12 = v8[7];
  unint64_t v13 = v8[8];
  v8[7] = v10;
  v8[8] = v11;
  outlined consume of Data._Representation(v12, v13);
  uint64_t v14 = *(int *)(type metadata accessor for PromptCompletion(0) + 36);
  uint64_t v15 = (char *)v8 + v14;
  uint64_t v16 = (char *)v9 + v14;
  uint64_t v17 = type metadata accessor for Prompt.Rendering();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v8) = v19(v15, 1, v17);
  int v20 = v19(v16, 1, v17);
  if (!v8)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v15, v16, v17);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v15, v16, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t initializeWithTake for TokenGeneratorChatResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ChatMessageRole();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  long long v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
  uint64_t v11 = *(int *)(type metadata accessor for PromptCompletion(0) + 36);
  uint64_t v12 = (void *)(v8 + v11);
  unint64_t v13 = (const void *)(v9 + v11);
  uint64_t v14 = type metadata accessor for Prompt.Rendering();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for TokenGeneratorChatResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ChatMessageRole();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)(a1 + v7) = *(void *)v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(v9 + 16);
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  *(void *)(v8 + 16) = v10;
  swift_bridgeObjectRelease();
  *(void *)(v8 + 24) = *(void *)(v9 + 24);
  swift_bridgeObjectRelease();
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
  uint64_t v11 = *(void *)(v8 + 56);
  unint64_t v12 = *(void *)(v8 + 64);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
  outlined consume of Data._Representation(v11, v12);
  uint64_t v13 = *(int *)(type metadata accessor for PromptCompletion(0) + 36);
  uint64_t v14 = (void *)(v8 + v13);
  uint64_t v15 = (void *)(v9 + v13);
  uint64_t v16 = type metadata accessor for Prompt.Rendering();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v14, v15, v16);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v14, v15, v16);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenGeneratorChatResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F8D6FA4);
}

uint64_t sub_25F8D6FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ChatMessageRole();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for PromptCompletion(0);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for TokenGeneratorChatResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F8D70B0);
}

uint64_t sub_25F8D70B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for ChatMessageRole();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for PromptCompletion(0);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata completion function for TokenGeneratorChatResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for TokenGeneratorChatResponse(a1, a2, a3, MEMORY[0x263F62120], type metadata accessor for PromptCompletion);
}

uint64_t getEnumTagSinglePayload for TokenGeneratorChatResponseStringStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F8D71F4);
}

uint64_t __swift_get_extra_inhabitant_index_80Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenStream<String>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for TokenGeneratorChatResponseStringStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F8D7360);
}

uint64_t __swift_store_extra_inhabitant_index_81Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenStream<String>);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);
  return v17(v19, a2, a2, v18);
}

void type metadata completion function for TokenGeneratorCompletionResponseStringStream()
{
  type metadata accessor for PromptCompletionStream(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for StringResponseSanitizerWithConfiguration?(319, &lazy cache variable for type metadata for StringResponseSanitizerWithConfiguration?, MEMORY[0x263F415F0]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for GenerativeFunctionInstrumenter();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for TokenGeneratorCompletionResponse(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for PromptCompletion(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = *a2;
  *(void *)a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = v6 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v7;
    uint64_t v8 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    uint64_t v9 = a2[7];
    unint64_t v10 = a2[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v9, v10);
    *(void *)(a1 + 56) = v9;
    *(void *)(a1 + 64) = v10;
    uint64_t v11 = *(int *)(v4 + 36);
    uint64_t v12 = (void *)(a1 + v11);
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for Prompt.Rendering();
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
  }
  return a1;
}

uint64_t destroy for TokenGeneratorCompletionResponse(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(a1 + 56), *(void *)(a1 + 64));
  uint64_t v2 = a1 + *(int *)(type metadata accessor for PromptCompletion(0) + 36);
  uint64_t v3 = type metadata accessor for Prompt.Rendering();
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v3);
  if (!result)
  {
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(v2, v3);
  }
  return result;
}

uint64_t initializeWithCopy for TokenGeneratorCompletionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 56);
  unint64_t v7 = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v6, v7);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v7;
  uint64_t v8 = *(int *)(type metadata accessor for PromptCompletion(0) + 36);
  uint64_t v9 = (void *)(a1 + v8);
  unint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for Prompt.Rendering();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

void *assignWithCopy for TokenGeneratorCompletionResponse(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  uint64_t v4 = a2[7];
  unint64_t v5 = a2[8];
  outlined copy of Data._Representation(v4, v5);
  uint64_t v6 = a1[7];
  unint64_t v7 = a1[8];
  a1[7] = v4;
  a1[8] = v5;
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = *(int *)(type metadata accessor for PromptCompletion(0) + 36);
  uint64_t v9 = (char *)a1 + v8;
  unint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Prompt.Rendering();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t initializeWithTake for TokenGeneratorCompletionResponse(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = *(int *)(type metadata accessor for PromptCompletion(0) + 36);
  uint64_t v6 = (void *)(a1 + v5);
  unint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = type metadata accessor for Prompt.Rendering();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t assignWithTake for TokenGeneratorCompletionResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a1 + 56);
  unint64_t v6 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  outlined consume of Data._Representation(v5, v6);
  uint64_t v7 = *(int *)(type metadata accessor for PromptCompletion(0) + 36);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Prompt.Rendering();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenGeneratorChatResponseGenerableAdditionalInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F8D7F3C);
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PromptCompletion(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TokenGeneratorChatResponseGenerableAdditionalInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F8D7FC0);
}

uint64_t __swift_store_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PromptCompletion(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for TokenGeneratorCompletionResponse()
{
  uint64_t result = type metadata accessor for PromptCompletion(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TokenGeneratorResponseStringStreamAsyncIterator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for TokenGeneratorResponseStringStreamAsyncIterator(a1, a2, a3, &demangling cache variable for type metadata for AsyncThrowingStream<String, Error>.Iterator);
}

uint64_t destroy for TokenGeneratorResponseStringStreamAsyncIterator(uint64_t a1, uint64_t a2)
{
  return destroy for TokenGeneratorResponseStringStreamAsyncIterator(a1, a2, &demangling cache variable for type metadata for AsyncThrowingStream<String, Error>.Iterator);
}

uint64_t initializeWithCopy for TokenGeneratorResponseStringStreamAsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for TokenGeneratorResponseStringStreamAsyncIterator(a1, a2, a3, &demangling cache variable for type metadata for AsyncThrowingStream<String, Error>.Iterator);
}

uint64_t assignWithCopy for TokenGeneratorResponseStringStreamAsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for TokenGeneratorResponseStringStreamAsyncIterator(a1, a2, a3, &demangling cache variable for type metadata for AsyncThrowingStream<String, Error>.Iterator);
}

uint64_t initializeWithTake for TokenGeneratorResponseStringStreamAsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for TokenGeneratorResponseStringStreamAsyncIterator(a1, a2, a3, &demangling cache variable for type metadata for AsyncThrowingStream<String, Error>.Iterator);
}

uint64_t assignWithTake for TokenGeneratorResponseStringStreamAsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for TokenGeneratorResponseStringStreamAsyncIterator(a1, a2, a3, &demangling cache variable for type metadata for AsyncThrowingStream<String, Error>.Iterator);
}

uint64_t getEnumTagSinglePayload for TokenGeneratorResponseStringStreamAsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F8D811C);
}

uint64_t sub_25F8D811C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_95Tm(a1, a2, a3, &demangling cache variable for type metadata for AsyncThrowingStream<String, Error>.Iterator);
}

uint64_t storeEnumTagSinglePayload for TokenGeneratorResponseStringStreamAsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F8D813C);
}

uint64_t sub_25F8D813C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_96Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AsyncThrowingStream<String, Error>.Iterator);
}

uint64_t type metadata completion function for TokenGeneratorResponseStringStreamAsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for TokenGeneratorChatResponse(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for AsyncThrowingStream<String, Error>.Iterator, MEMORY[0x263F40EC8]);
}

void type metadata accessor for AsyncThrowingStream<String, Error>.Iterator()
{
  if (!lazy cache variable for type metadata for AsyncThrowingStream<String, Error>.Iterator)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    unint64_t v0 = type metadata accessor for AsyncThrowingStream.Iterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AsyncThrowingStream<String, Error>.Iterator);
    }
  }
}

uint64_t dispatch thunk of TokenGeneratorResponseStringStreamAsyncSequence.rawStream.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of TokenGeneratorResponseStringStreamAsyncSequence.collect()(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 24) + **(int **)(a2 + 24));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = dispatch thunk of TokenGeneratorResponseStringStreamAsyncSequence.collect();
  return v7(a1, a2);
}

uint64_t dispatch thunk of TokenGeneratorResponseStringStreamAsyncSequence.collect()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *v3;
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
  return v7(a1, a2, a3);
}

uint64_t dispatch thunk of TokenGeneratorResponseStringStreamAsyncSequence._stringResponseSanitizerWithConfiguration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of TokenGeneratorResponseStringStreamAsyncSequence._generativeFunctionInstrumenter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of TokenGeneratorResponseStringStreamAsyncSequence.timeout.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t *initializeBufferWithCopyOfBuffer for TokenGeneratorCompletionResponseStringStream(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(type metadata accessor for PromptCompletionStream(0) + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    uint64_t v12 = a3[5];
    int v13 = (char *)a1 + v12;
    int v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for StringResponseSanitizerWithConfiguration();
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    swift_retain();
    if (v17(v14, 1, v15))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v20 = a3[6];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = type metadata accessor for GenerativeFunctionInstrumenter();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
    uint64_t v24 = a3[7];
    uint64_t v25 = (char *)a1 + v24;
    uint64_t v26 = (char *)a2 + v24;
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = v26[8];
  }
  return a1;
}

uint64_t destroy for TokenGeneratorCompletionResponseStringStream(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  type metadata accessor for PromptCompletionStream(0);
  swift_release();
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for StringResponseSanitizerWithConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 24);
  uint64_t v9 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  return v10(v8, v9);
}

uint64_t initializeWithCopy for TokenGeneratorCompletionResponseStringStream(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(type metadata accessor for PromptCompletionStream(0) + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  uint64_t v11 = a3[5];
  uint64_t v12 = (void *)(a1 + v11);
  int v13 = (const void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for StringResponseSanitizerWithConfiguration();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
  swift_retain();
  if (v16(v13, 1, v14))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v18 = a3[6];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for GenerativeFunctionInstrumenter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  uint64_t v22 = a3[7];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(void *)uint64_t v23 = *(void *)v24;
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  return a1;
}

uint64_t assignWithCopy for TokenGeneratorCompletionResponseStringStream(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(type metadata accessor for PromptCompletionStream(0) + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  uint64_t v11 = a3[5];
  uint64_t v12 = (void *)(a1 + v11);
  int v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for StringResponseSanitizerWithConfiguration();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  uint64_t v20 = a3[6];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = type metadata accessor for GenerativeFunctionInstrumenter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 24))(v21, v22, v23);
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  char v27 = *(unsigned char *)(v26 + 8);
  *(void *)uint64_t v25 = *(void *)v26;
  *(unsigned char *)(v25 + 8) = v27;
  return a1;
}

uint64_t initializeWithTake for TokenGeneratorCompletionResponseStringStream(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for PromptCompletionStream(0);
  *(_OWORD *)(a1 + *(int *)(v7 + 20)) = *(_OWORD *)(a2 + *(int *)(v7 + 20));
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for StringResponseSanitizerWithConfiguration();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for GenerativeFunctionInstrumenter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
  uint64_t v18 = a3[7];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(void *)uint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  return a1;
}

uint64_t assignWithTake for TokenGeneratorCompletionResponseStringStream(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for PromptCompletionStream(0);
  *(_OWORD *)(a1 + *(int *)(v7 + 20)) = *(_OWORD *)(a2 + *(int *)(v7 + 20));
  swift_release();
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for StringResponseSanitizerWithConfiguration();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  uint64_t v17 = a3[6];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for GenerativeFunctionInstrumenter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 40))(v18, v19, v20);
  uint64_t v21 = a3[7];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenGeneratorResponsePromptCompletionStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F8D9048);
}

uint64_t sub_25F8D9048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PromptCompletionStream(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = type metadata accessor for GenerativeFunctionInstrumenter();
  int v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for TokenGeneratorResponsePromptCompletionStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F8D91AC);
}

uint64_t sub_25F8D91AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for PromptCompletionStream(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringResponseSanitizerWithConfiguration?);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);
  return v17(v19, a2, a2, v18);
}

uint64_t *initializeBufferWithCopyOfBuffer for TokenGeneratorResponsePromptCompletionStream.AsyncIterator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for TokenGeneratorResponseStringStreamAsyncIterator(a1, a2, a3, &demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
}

uint64_t *initializeBufferWithCopyOfBuffer for TokenGeneratorResponseStringStreamAsyncIterator(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a4);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for GenerativeFunctionInstrumenter();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t destroy for TokenGeneratorResponsePromptCompletionStream.AsyncIterator(uint64_t a1, uint64_t a2)
{
  return destroy for TokenGeneratorResponseStringStreamAsyncIterator(a1, a2, &demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
}

uint64_t destroy for TokenGeneratorResponseStringStreamAsyncIterator(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t v7 = type metadata accessor for GenerativeFunctionInstrumenter();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  return v8(v6, v7);
}

uint64_t initializeWithCopy for TokenGeneratorResponsePromptCompletionStream.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for TokenGeneratorResponseStringStreamAsyncIterator(a1, a2, a3, &demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
}

uint64_t initializeWithCopy for TokenGeneratorResponseStringStreamAsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for GenerativeFunctionInstrumenter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t assignWithCopy for TokenGeneratorResponsePromptCompletionStream.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for TokenGeneratorResponseStringStreamAsyncIterator(a1, a2, a3, &demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
}

uint64_t assignWithCopy for TokenGeneratorResponseStringStreamAsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for GenerativeFunctionInstrumenter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t initializeWithTake for TokenGeneratorResponsePromptCompletionStream.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for TokenGeneratorResponseStringStreamAsyncIterator(a1, a2, a3, &demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
}

uint64_t initializeWithTake for TokenGeneratorResponseStringStreamAsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for GenerativeFunctionInstrumenter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t assignWithTake for TokenGeneratorResponsePromptCompletionStream.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for TokenGeneratorResponseStringStreamAsyncIterator(a1, a2, a3, &demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
}

uint64_t assignWithTake for TokenGeneratorResponseStringStreamAsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for GenerativeFunctionInstrumenter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenGeneratorResponsePromptCompletionStream.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F8D97F4);
}

uint64_t sub_25F8D97F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_95Tm(a1, a2, a3, &demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
}

uint64_t __swift_get_extra_inhabitant_index_95Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == a2)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v9(a1, a2, v7);
  }
  else
  {
    uint64_t v11 = type metadata accessor for GenerativeFunctionInstrumenter();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 20);
    return v12(v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for TokenGeneratorResponsePromptCompletionStream.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F8D990C);
}

uint64_t sub_25F8D990C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_96Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
}

uint64_t __swift_store_extra_inhabitant_index_96Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v10 = *(void *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v11(a1, a2, a2, v9);
  }
  else
  {
    uint64_t v13 = type metadata accessor for GenerativeFunctionInstrumenter();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + *(int *)(a4 + 20);
    return v14(v16, a2, a2, v15);
  }
}

uint64_t type metadata completion function for TokenGeneratorResponsePromptCompletionStream.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for TokenGeneratorChatResponse(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator, MEMORY[0x263F40EC8]);
}

uint64_t type metadata completion function for TokenGeneratorChatResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t result = a4(319);
  if (v7 <= 0x3F)
  {
    uint64_t result = a5(319);
    if (v8 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void type metadata accessor for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator()
{
  if (!lazy cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PromptCompletionEvent);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    unint64_t v0 = type metadata accessor for AsyncThrowingStream.Iterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for TokenGenerator.PromptInputFromGenerativeModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for PromptTemplateInfo();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplateInfo: PromptTemplateInfo, renderedPrompt: Prompt?))
                  + 48);
      unint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for Prompt();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
    }
    else
    {
      uint64_t v14 = type metadata accessor for Prompt();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for TokenGenerator.PromptInputFromGenerativeModel(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for PromptTemplateInfo();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
    uint64_t v3 = a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplateInfo: PromptTemplateInfo, renderedPrompt: Prompt?))
                + 48);
    uint64_t v4 = type metadata accessor for Prompt();
    uint64_t v10 = *(void *)(v4 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v3, 1, v4);
    if (result) {
      return result;
    }
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
    uint64_t v9 = v3;
    uint64_t v8 = v4;
  }
  else
  {
    uint64_t v6 = type metadata accessor for Prompt();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  return v7(v9, v8);
}

uint64_t initializeWithCopy for TokenGenerator.PromptInputFromGenerativeModel(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for PromptTemplateInfo();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    uint64_t v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplateInfo: PromptTemplateInfo, renderedPrompt: Prompt?))
                + 48);
    uint64_t v6 = (void *)(a1 + v5);
    uint64_t v7 = (const void *)(a2 + v5);
    uint64_t v8 = type metadata accessor for Prompt();
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
      memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v6, v7, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  else
  {
    uint64_t v11 = type metadata accessor for Prompt();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for TokenGenerator.PromptInputFromGenerativeModel(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of TokenGeneratorCompletionResponseStringStream(a1, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for PromptTemplateInfo();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      uint64_t v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplateInfo: PromptTemplateInfo, renderedPrompt: Prompt?))
                  + 48);
      uint64_t v6 = (void *)(a1 + v5);
      uint64_t v7 = (const void *)(a2 + v5);
      uint64_t v8 = type metadata accessor for Prompt();
      uint64_t v9 = *(void *)(v8 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      {
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
        memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v6, v7, v8);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
      }
    }
    else
    {
      uint64_t v11 = type metadata accessor for Prompt();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for TokenGenerator.PromptInputFromGenerativeModel(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for PromptTemplateInfo();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
    uint64_t v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplateInfo: PromptTemplateInfo, renderedPrompt: Prompt?))
                + 48);
    uint64_t v6 = (void *)(a1 + v5);
    uint64_t v7 = (const void *)(a2 + v5);
    uint64_t v8 = type metadata accessor for Prompt();
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
      memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  else
  {
    uint64_t v11 = type metadata accessor for Prompt();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for TokenGenerator.PromptInputFromGenerativeModel(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of TokenGeneratorCompletionResponseStringStream(a1, type metadata accessor for TokenGenerator.PromptInputFromGenerativeModel);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for PromptTemplateInfo();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
      uint64_t v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplateInfo: PromptTemplateInfo, renderedPrompt: Prompt?))
                  + 48);
      uint64_t v6 = (void *)(a1 + v5);
      uint64_t v7 = (const void *)(a2 + v5);
      uint64_t v8 = type metadata accessor for Prompt();
      uint64_t v9 = *(void *)(v8 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      {
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
        memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
      }
    }
    else
    {
      uint64_t v11 = type metadata accessor for Prompt();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void type metadata completion function for TokenGenerator.PromptInputFromGenerativeModel()
{
  uint64_t v0 = type metadata accessor for Prompt();
  if (v1 <= 0x3F)
  {
    v4[4] = *(void *)(v0 - 8) + 64;
    type metadata accessor for PromptTemplateInfo();
    if (v2 <= 0x3F)
    {
      type metadata accessor for StringResponseSanitizerWithConfiguration?(319, &lazy cache variable for type metadata for Prompt?, MEMORY[0x263F7FB90]);
      if (v3 <= 0x3F)
      {
        swift_getTupleTypeLayout2();
        v4[5] = v4;
        swift_initEnumMetadataMultiPayload();
      }
    }
  }
}

void type metadata accessor for StringResponseSanitizerWithConfiguration?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unsigned char *partial apply for closure #1 in closure #1 in Double.init<A>(_:)@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

void *partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_25F8DA89C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for specialized closure #1 in AsyncThrowingStream<>.init<A>(_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return specialized closure #1 in AsyncThrowingStream<>.init<A>(_:)(a1, v4, v1 + 24);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>)
                 - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  BOOL v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return specialized closure #1 in AsyncThrowingStream<>.init<A>(_:)(a1, v5, v6);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  BOOL v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in AsyncThrowingStream<>.init<A>(_:)
                                                         + async function pointer to specialized closure #1 in AsyncThrowingStream<>.init<A>(_:));
  return v6(a1, v4, v1 + 24);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<TokenStream<String>, String>)
                 - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  BOOL v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in AsyncThrowingStream<>.init<A>(_:)
                                                         + async function pointer to specialized closure #1 in AsyncThrowingStream<>.init<A>(_:));
  return v8(a1, v5, v6);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<AsyncThrowingStream<CompletePromptResponseElement, Error>, PromptCompletionEvent>)
                 - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  BOOL v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return specialized closure #1 in AsyncThrowingStream<>.init<A>(_:)(a1, v5, v6);
}

uint64_t partial apply for specialized closure #1 in closure #1 in withTimeout<A>(timeout:_:)(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  BOOL v6 = (void *)swift_task_alloc();
  v5[2] = v6;
  *BOOL v6 = v5;
  v6[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return v8(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  void *v5;
  void *v6;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;

  uint64_t v4 = *(int **)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  BOOL v6 = (void *)swift_task_alloc();
  v5[2] = v6;
  *BOOL v6 = v5;
  v6[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return v8(a1);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  void *v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v10;

  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  BOOL v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&async function pointer to specialized closure #1 in closure #1 in withTimeout<A>(timeout:_:)
                                                                + async function pointer to specialized closure #1 in closure #1 in withTimeout<A>(timeout:_:));
  return v8(a1, v4, v5, v6);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  void *v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v10;

  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  BOOL v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&async function pointer to specialized closure #1 in closure #1 in withTimeout<A>(timeout:_:)
                                                                + async function pointer to specialized closure #1 in closure #1 in withTimeout<A>(timeout:_:));
  return v8(a1, v4, v5, v6);
}

{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  void *v5;
  void *v6;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;

  uint64_t v4 = *(int **)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  BOOL v6 = (void *)swift_task_alloc();
  v5[2] = v6;
  *BOOL v6 = v5;
  v6[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return v8(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  void *v5;
  void *v6;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;

  uint64_t v4 = *(int **)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  BOOL v6 = (void *)swift_task_alloc();
  v5[2] = v6;
  *BOOL v6 = v5;
  v6[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return v8(a1);
}

uint64_t sub_25F8DAAB0()
{
  swift_unknownObjectRelease();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:)()
{
  double v2 = *(double *)(v0 + 32);
  unsigned int v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unsigned int v3 = v1;
  v3[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:)(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  double v2;
  void *v3;
  uint64_t v5;

  double v2 = *(double *)(v0 + 32);
  unsigned int v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unsigned int v3 = v1;
  v3[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:)(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  double v2;
  void *v3;
  uint64_t v5;

  double v2 = *(double *)(v0 + 32);
  unsigned int v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unsigned int v3 = v1;
  v3[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:)(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  double v2;
  void *v3;
  uint64_t v5;

  double v2 = *(double *)(v0 + 32);
  unsigned int v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unsigned int v3 = v1;
  v3[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return specialized closure #2 in closure #1 in withTimeout<A>(timeout:_:)(v2);
}

uint64_t partial apply for closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v20 = v1[2];
  uint64_t v18 = v1[3];
  uint64_t v5 = v1[5];
  uint64_t v6 = *(void *)(type metadata accessor for GenerativeFunctionInstrumenter() - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v8 + *(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  unint64_t v10 = (*(void *)(*(void *)(v5 - 8) + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = (uint64_t)v1 + v7;
  uint64_t v12 = *(void *)((char *)v1 + v8);
  uint64_t v13 = (uint64_t)v1 + v9;
  uint64_t v14 = *(void *)((char *)v1 + v10);
  uint64_t v15 = *(void *)((char *)v1 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v16;
  *uint64_t v16 = v3;
  v16[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(a1, v11, v12, v13, v14, v15, v20, v18);
}

uint64_t partial apply for closure #2 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v1 + 72);
  long long v6 = *(_OWORD *)(v1 + 88);
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  *(_OWORD *)(v4 + 40) = v6;
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 16) = a1;
  return MEMORY[0x270FA2498](closure #2 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:), 0, 0);
}

uint64_t partial apply for closure #2 in closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[9];
  uint64_t v7 = v1[10];
  uint64_t v8 = v1[11];
  uint64_t v10 = v1[12];
  uint64_t v9 = v1[13];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #2 in closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(a1, v6, v7, v8, v10, v9, v4, v5);
}

uint64_t sub_25F8DB1FC()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in closure #2 in closure #1 in TokenGenerator._respond<A, B, C, D>(type:configuration:generatingContent:instrumenter:_:)(a1);
}

uint64_t specialized static TokenGenerator.getTurnsForMessage(for:with:binding:)(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 120) = a2;
  *(void *)(v3 + 128) = a3;
  uint64_t v5 = type metadata accessor for Prompt.Turn(0);
  *(void *)(v3 + 136) = v5;
  *(void *)(v3 + 144) = *(void *)(v5 - 8);
  *(void *)(v3 + 152) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  *(void *)(v3 + 160) = swift_task_alloc();
  *(void *)(v3 + 168) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Prompt.ToolCall.Content();
  *(void *)(v3 + 176) = v6;
  *(void *)(v3 + 184) = *(void *)(v6 - 8);
  *(void *)(v3 + 192) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Prompt.ToolCall.Function();
  *(void *)(v3 + 200) = v7;
  *(void *)(v3 + 208) = *(void *)(v7 - 8);
  *(void *)(v3 + 216) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Prompt.ToolCall();
  *(void *)(v3 + 224) = v8;
  *(void *)(v3 + 232) = *(void *)(v8 - 8);
  *(void *)(v3 + 240) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Prompt.ToolResult.Content();
  *(void *)(v3 + 248) = v9;
  *(void *)(v3 + 256) = *(void *)(v9 - 8);
  *(void *)(v3 + 264) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Prompt.ToolResult.Text();
  *(void *)(v3 + 272) = v10;
  *(void *)(v3 + 280) = *(void *)(v10 - 8);
  *(void *)(v3 + 288) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Prompt.ToolResult();
  *(void *)(v3 + 296) = v11;
  *(void *)(v3 + 304) = *(void *)(v11 - 8);
  *(void *)(v3 + 312) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Prompt.ImageAttachment();
  *(void *)(v3 + 320) = v12;
  *(void *)(v3 + 328) = *(void *)(v12 - 8);
  *(void *)(v3 + 336) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Prompt.ImageFormat();
  *(void *)(v3 + 344) = v13;
  *(void *)(v3 + 352) = *(void *)(v13 - 8);
  *(void *)(v3 + 360) = swift_task_alloc();
  *(void *)(v3 + 368) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for Prompt.ImageAttachment.Format();
  *(void *)(v3 + 376) = v14;
  *(void *)(v3 + 384) = *(void *)(v14 - 8);
  *(void *)(v3 + 392) = swift_task_alloc();
  *(void *)(v3 + 400) = swift_task_alloc();
  *(void *)(v3 + 408) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Turn.Segment?);
  *(void *)(v3 + 416) = swift_task_alloc();
  *(void *)(v3 + 424) = swift_task_alloc();
  uint64_t v15 = type metadata accessor for Prompt.Turn.Segment(0);
  *(void *)(v3 + 432) = v15;
  *(void *)(v3 + 440) = *(void *)(v15 - 8);
  *(void *)(v3 + 448) = swift_task_alloc();
  *(void *)(v3 + 456) = swift_task_alloc();
  *(void *)(v3 + 464) = swift_task_alloc();
  *(void *)(v3 + 472) = swift_task_alloc();
  *(void *)(v3 + 480) = swift_task_alloc();
  uint64_t v16 = type metadata accessor for Prompt.ImageData();
  *(void *)(v3 + 488) = v16;
  *(void *)(v3 + 496) = *(void *)(v16 - 8);
  *(void *)(v3 + 504) = swift_task_alloc();
  *(void *)(v3 + 512) = swift_task_alloc();
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Prompt.Component));
  *(void *)(v3 + 520) = v17;
  *(void *)(v3 + 528) = *(void *)(v17 - 8);
  *(void *)(v3 + 536) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Prompt.Component)?);
  *(void *)(v3 + 544) = swift_task_alloc();
  *(void *)(v3 + 552) = swift_task_alloc();
  uint64_t v18 = type metadata accessor for GenerativeError.PromptError.ErrorType();
  *(void *)(v3 + 560) = v18;
  *(void *)(v3 + 568) = *(void *)(v18 - 8);
  *(void *)(v3 + 576) = swift_task_alloc();
  uint64_t v19 = type metadata accessor for GenerativeError();
  *(void *)(v3 + 584) = v19;
  *(void *)(v3 + 592) = *(void *)(v19 - 8);
  *(void *)(v3 + 600) = swift_task_alloc();
  uint64_t v20 = type metadata accessor for GenerativeError.PromptError.ErrorType.InvalidPromptFormatInfo();
  *(void *)(v3 + 608) = v20;
  *(void *)(v3 + 616) = *(void *)(v20 - 8);
  *(void *)(v3 + 624) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Component.Value?);
  *(void *)(v3 + 632) = swift_task_alloc();
  uint64_t v21 = type metadata accessor for Prompt.Component.Value();
  *(void *)(v3 + 640) = v21;
  *(void *)(v3 + 648) = *(void *)(v21 - 8);
  *(void *)(v3 + 656) = swift_task_alloc();
  *(void *)(v3 + 664) = swift_task_alloc();
  *(void *)(v3 + 672) = swift_task_alloc();
  *(void *)(v3 + 680) = swift_task_alloc();
  uint64_t v22 = type metadata accessor for BindableVariable();
  *(void *)(v3 + 688) = v22;
  *(void *)(v3 + 696) = *(void *)(v22 - 8);
  *(void *)(v3 + 704) = swift_task_alloc();
  *(void *)(v3 + 712) = swift_task_alloc();
  uint64_t v23 = type metadata accessor for Prompt.Component();
  *(void *)(v3 + 720) = v23;
  *(void *)(v3 + 728) = *(void *)(v23 - 8);
  *(void *)(v3 + 736) = swift_task_alloc();
  *(void *)(v3 + 744) = swift_task_alloc();
  *(void *)(v3 + 752) = swift_task_alloc();
  *(void *)(v3 + 760) = swift_task_alloc();
  uint64_t v24 = type metadata accessor for Prompt();
  *(void *)(v3 + 768) = v24;
  *(void *)(v3 + 776) = *(void *)(v24 - 8);
  *(void *)(v3 + 784) = swift_task_alloc();
  *(void *)(v3 + 792) = swift_task_alloc();
  *(void *)(v3 + 800) = swift_task_alloc();
  *(void *)(v3 + 808) = swift_task_alloc();
  *(unsigned char *)(v3 + 1044) = *a1;
  return MEMORY[0x270FA2498](specialized static TokenGenerator.getTurnsForMessage(for:with:binding:), 0, 0);
}

uint64_t specialized static TokenGenerator.getTurnsForMessage(for:with:binding:)()
{
  uint64_t v1 = swift_allocObject();
  v0[102] = v1;
  *(void *)(v1 + 16) = MEMORY[0x263F8EE78];
  ChatMessagePrompt.prompt.getter();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[103] = v2;
  *uint64_t v2 = v0;
  v2[1] = specialized static TokenGenerator.getTurnsForMessage(for:with:binding:);
  uint64_t v3 = v0[101];
  return MEMORY[0x270F582D8](v3, 1);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  void (*v8)(uint64_t, uint64_t);
  uint64_t (*v9)();
  uint64_t v11;

  uint64_t v2 = (void *)*v1;
  v2[104] = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[100];
  uint64_t v4 = v2[97];
  uint64_t v5 = v2[96];
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  uint64_t v6 = v4 + 8;
  uint64_t v7 = v8;
  if (v0)
  {
    v7(v3, v5);
    uint64_t v9 = specialized static TokenGenerator.getTurnsForMessage(for:with:binding:);
  }
  else
  {
    v2[105] = v7;
    v2[106] = v6 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v7(v3, v5);
    uint64_t v9 = specialized static TokenGenerator.getTurnsForMessage(for:with:binding:);
  }
  return MEMORY[0x270FA2498](v9, 0, 0);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(void, uint64_t, void);
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(uint64_t, uint64_t, uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  NSObject *v160;
  os_log_type_t v161;
  BOOL v162;
  uint64_t v163;
  void (**v164)(uint64_t, uint64_t);
  uint8_t *v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  Swift::String v176;
  uint64_t v177;
  uint64_t (*v178)(void);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void (*v189)(void, uint64_t, void);
  void *v190;
  unint64_t v191;
  void (*v192)(uint64_t, uint64_t);
  void *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;

  uint64_t v197 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
  uint64_t v2 = *(void *)(v0 + 808);
  uint64_t v3 = *(void *)(v0 + 768);
  uint64_t v4 = Prompt.components.getter();
  *(void *)(v0 + 856) = v4;
  v1(v2, v3);
  uint64_t v5 = *(void *)(v4 + 16);
  *(void *)(v0 + 864) = v5;
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(v0 + 728);
    *(_DWORD *)(v0 + 1000) = *(_DWORD *)(v7 + 80);
    *(void *)(v0 + 872) = *(void *)(v7 + 72);
    *(_DWORD *)(v0 + 1004) = *MEMORY[0x263F62048];
    *(void *)(v0 + 880) = *(void *)(v7 + 16);
    do
    {
      *(void *)(v0 + 888) = v6;
      uint64_t v8 = *(_DWORD *)(v0 + 1004);
      uint64_t v9 = *(void *)(v0 + 680);
      uint64_t v10 = *(void *)(v0 + 648);
      uint64_t v11 = *(void *)(v0 + 640);
      (*(void (**)(void, unint64_t, void))(v0 + 880))(*(void *)(v0 + 760), *(void *)(v0 + 856)+ ((*(unsigned __int8 *)(v0 + 1000) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1000))+ *(void *)(v0 + 872) * v6, *(void *)(v0 + 720));
      Prompt.Component.value.getter();
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 88))(v9, v11);
      uint64_t v13 = *(void *)(v0 + 680);
      uint64_t v14 = *(void *)(v0 + 648);
      uint64_t v15 = *(void *)(v0 + 640);
      if (v12 == v8)
      {
        uint64_t v31 = *(void *)(v0 + 712);
        uint64_t v32 = *(void *)(v0 + 696);
        uint64_t v33 = *(void *)(v0 + 688);
        uint64_t v34 = *(void *)(v0 + 128);
        (*(void (**)(void, uint64_t))(v14 + 96))(*(void *)(v0 + 680), v15);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v31, v13, v33);
        uint64_t v35 = BindableVariable.name.getter();
        if (*(void *)(v34 + 16) && (uint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36), (v38 & 1) != 0))
        {
          outlined init with copy of PromptCompletionEvent(*(void *)(*(void *)(v0 + 128) + 56) + 40 * v37, v0 + 16);
        }
        else
        {
          *(void *)(v0 + 48) = 0;
          *(_OWORD *)(v0 + 16) = 0u;
          *(_OWORD *)(v0 + 32) = 0u;
        }
        swift_bridgeObjectRelease();
        uint64_t v140 = *(void *)(v0 + 648);
        uint64_t v141 = *(void *)(v0 + 640);
        uint64_t v142 = *(void *)(v0 + 632);
        if (*(void *)(v0 + 40))
        {
          __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
          dispatch thunk of PromptComponentValueConvertible.toValue()();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v140 + 56))(v142, 0, 1, v141);
          __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v140 + 48))(v142, 1, v141) != 1)
          {
            uint64_t v143 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 880);
            uint64_t v144 = *(void *)(v0 + 760);
            uint64_t v145 = *(void *)(v0 + 752);
            unint64_t v146 = *(void *)(v0 + 720);
            uint64_t v147 = *(void *)(v0 + 672);
            uint64_t v148 = *(void *)(v0 + 664);
            unint64_t v149 = *(void *)(v0 + 648);
            uint64_t v150 = *(void *)(v0 + 640);
            uint64_t v191 = (*(unsigned __int8 *)(v0 + 1000) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1000);
            (*(void (**)(uint64_t, void, uint64_t))(v149 + 32))(v147, *(void *)(v0 + 632), v150);
            v143(v145, v144, v146);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v149 + 16))(v148, v147, v150);
            Prompt.Component.value.setter();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Component>);
            char v151 = swift_allocObject();
            *(_OWORD *)(v151 + 16) = xmmword_25F91CC30;
            v143(v151 + v191, v145, v146);
            Prompt.init(components:)();
            uint64_t v152 = (void *)swift_task_alloc();
            *(void *)(v0 + 896) = v152;
            *uint64_t v152 = v0;
            v152[1] = specialized static TokenGenerator.getTurnsForMessage(for:with:binding:);
            uint64_t v153 = *(void *)(v0 + 792);
            return MEMORY[0x270F582D8](v153, 1);
          }
        }
        else
        {
          outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0 + 16, &demangling cache variable for type metadata for PromptComponentValueConvertible?);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v140 + 56))(v142, 1, 1, v141);
        }
        unint64_t v154 = *(void *)(v0 + 632);
        swift_bridgeObjectRelease();
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(v154, &demangling cache variable for type metadata for Prompt.Component.Value?);
        if (one-time initialization token for generator != -1) {
          goto LABEL_71;
        }
        goto LABEL_63;
      }
      uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 880);
      uint64_t v17 = *(void *)(v0 + 816);
      uint64_t v18 = *(void *)(v0 + 760);
      uint64_t v19 = *(void *)(v0 + 744);
      uint64_t v20 = *(void *)(v0 + 720);
      (*(void (**)(void, uint64_t))(v14 + 8))(*(void *)(v0 + 680), v15);
      v16(v19, v18, v20);
      uint64_t v21 = *(void *)(v17 + 16);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v21 + 16) + 1, 1, v21);
      }
      uint64_t v23 = *(void *)(v21 + 16);
      uint64_t v22 = *(void *)(v21 + 24);
      if (v23 >= v22 >> 1) {
        uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1, v21);
      }
      uint64_t v24 = *(void *)(v0 + 872);
      uint64_t v25 = *(unsigned __int8 *)(v0 + 1000);
      uint64_t v26 = *(void *)(v0 + 816);
      char v27 = *(void *)(v0 + 760);
      uint64_t v28 = *(void *)(v0 + 744);
      BOOL v29 = *(void *)(v0 + 728);
      uint64_t v30 = *(void *)(v0 + 720);
      *(void *)(v21 + 16) = v23 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v29 + 32))(v21 + ((v25 + 32) & ~v25) + v24 * v23, v28, v30);
      *(void *)(v26 + 16) = v21;
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v30);
      uint64_t v6 = *(void *)(v0 + 888) + 1;
    }
    while (v6 != *(void *)(v0 + 864));
  }
  swift_bridgeObjectRelease();
  long long v39 = *(void *)(*(void *)(v0 + 816) + 16);
  *(void *)(v0 + 912) = v39;
  *(void *)(v0 + 920) = *(void *)(v39 + 16);
  *(_DWORD *)(v0 + 1008) = *MEMORY[0x263F62088];
  *(_DWORD *)(v0 + 1012) = *MEMORY[0x263F62038];
  *(_DWORD *)(v0 + 1016) = *MEMORY[0x263F62090];
  *(_DWORD *)(v0 + 1020) = *MEMORY[0x263F62020];
  *(_DWORD *)(v0 + 1024) = *MEMORY[0x263F61FC8];
  *(_DWORD *)(v0 + 1028) = *MEMORY[0x263F61FE0];
  *(_DWORD *)(v0 + 1032) = *MEMORY[0x263F61FD8];
  *(_DWORD *)(v0 + 1036) = *MEMORY[0x263F7FB48];
  *(_DWORD *)(v0 + 1040) = *MEMORY[0x263F7FB50];
  swift_bridgeObjectRetain();
  uint64_t v40 = 0;
  uint64_t v41 = (void *)MEMORY[0x263F8EE78];
  uint64_t v42 = MEMORY[0x263F8EE78];
  char v43 = (void *)MEMORY[0x263F8EE78];
LABEL_15:
  unint64_t v190 = v43;
  uint64_t v193 = v41;
  *(void *)(v0 + 944) = v43;
  *(void *)(v0 + 936) = v41;
  *(void *)(v0 + 928) = v42;
  while (1)
  {
    if (v40 == *(void *)(v0 + 920))
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 528) + 56))(*(void *)(v0 + 544), 1, 1, *(void *)(v0 + 520));
      uint64_t v40 = *(void *)(v0 + 920);
      goto LABEL_21;
    }
    if ((v40 & 0x8000000000000000) != 0) {
      break;
    }
    char v44 = *(void *)(v0 + 912);
    if (v40 >= *(void *)(v44 + 16)) {
      goto LABEL_70;
    }
    unint64_t v45 = *(void *)(v0 + 728);
    uint64_t v46 = *(void *)(v0 + 720);
    BOOL v47 = *(unint64_t **)(v0 + 544);
    uint64_t v48 = *(void *)(v0 + 528);
    char v49 = *(void *)(v0 + 520);
    unint64_t v50 = *(void *)(v0 + 536) + *(int *)(v49 + 48);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v45 + 16))(v50, v44+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v40, v46);
    char v51 = (char *)v47 + *(int *)(v49 + 48);
    *BOOL v47 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v51, v50, v46);
    (*(void (**)(unint64_t *, void, uint64_t, uint64_t))(v48 + 56))(v47, 0, 1, v49);
    ++v40;
LABEL_21:
    *(void *)(v0 + 952) = v40;
    uint64_t v52 = *(void *)(v0 + 552);
    uint64_t v53 = *(void *)(v0 + 528);
    uint64_t v54 = *(void *)(v0 + 520);
    outlined init with take of Locale?(*(void *)(v0 + 544), v52, &demangling cache variable for type metadata for (offset: Int, element: Prompt.Component)?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v52, 1, v54) == 1)
    {
      char v126 = *(void *)(v0 + 816);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      char v127 = *(void *)(*(void *)(v126 + 16) + 16);
      char v128 = (void *)swift_task_alloc();
      *(void *)(v0 + 984) = v128;
      *char v128 = v0;
      v128[1] = specialized static TokenGenerator.getTurnsForMessage(for:with:binding:);
      char v129 = *(void *)(v0 + 816);
      char v130 = *(void *)(v0 + 416);
      char v131 = *(void *)(v0 + 120);
      char v132 = *(void *)(v0 + 128);
      uint64_t v133 = v127;
LABEL_52:
      return textSegment #2 (from:to:) in static TokenGenerator.getTurnsForMessage(for:with:binding:)(v130, 0, v133, v131, v129, v132);
    }
    uint64_t v55 = *(_DWORD *)(v0 + 1008);
    uint64_t v56 = *(void *)(v0 + 736);
    uint64_t v57 = *(void *)(v0 + 728);
    uint64_t v58 = *(void *)(v0 + 720);
    char v59 = *(void *)(v0 + 656);
    uint64_t v60 = *(void *)(v0 + 648);
    uint64_t v61 = *(void *)(v0 + 640);
    char v62 = *(uint64_t **)(v0 + 552);
    uint64_t v63 = *(void *)(v0 + 520);
    uint64_t v64 = *v62;
    *(void *)(v0 + 960) = *v62;
    (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v56, (char *)v62 + *(int *)(v63 + 48), v58);
    Prompt.Component.value.getter();
    char v65 = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 88))(v59, v61);
    if (v65 == v55)
    {
      uint64_t v134 = *(void *)(v0 + 656);
      unint64_t v135 = *(void *)(v0 + 512);
      uint64_t v136 = *(void *)(v0 + 488);
      uint64_t v137 = *(void *)(v0 + 496);
      (*(void (**)(uint64_t, void))(*(void *)(v0 + 648) + 96))(v134, *(void *)(v0 + 640));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v137 + 32))(v135, v134, v136);
      uint64_t v138 = (void *)swift_task_alloc();
      *(void *)(v0 + 968) = v138;
      *uint64_t v138 = v0;
      v138[1] = specialized static TokenGenerator.getTurnsForMessage(for:with:binding:);
      char v129 = *(void *)(v0 + 816);
      char v130 = *(void *)(v0 + 424);
      char v131 = *(void *)(v0 + 120);
      char v132 = *(void *)(v0 + 128);
      uint64_t v133 = v64;
      goto LABEL_52;
    }
    if (v65 == *(_DWORD *)(v0 + 1012))
    {
      uint64_t v69 = *(uint64_t **)(v0 + 656);
      (*(void (**)(uint64_t *, void))(*(void *)(v0 + 648) + 96))(v69, *(void *)(v0 + 640));
      char v70 = *v69;
      uint64_t v71 = *(void *)(*v69 + 16);
      if (v71)
      {
        uint64_t v72 = *(void *)(v0 + 304);
        uint64_t v73 = v70 + ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80));
        swift_bridgeObjectRetain();
        uint64_t v74 = *(void *)(v72 + 72);
        uint64_t v75 = *(void (**)(void, uint64_t, void))(v72 + 16);
        char v188 = v74;
        do
        {
          uint64_t v76 = *(_DWORD *)(v0 + 1024);
          char v78 = *(void *)(v0 + 256);
          uint64_t v77 = *(void *)(v0 + 264);
          char v79 = *(void *)(v0 + 248);
          v75(*(void *)(v0 + 312), v73, *(void *)(v0 + 296));
          Prompt.ToolResult.content.getter();
          if ((*(unsigned int (**)(uint64_t, uint64_t))(v78 + 88))(v77, v79) == v76)
          {
            uint64_t v81 = *(void *)(v0 + 280);
            uint64_t v80 = *(void *)(v0 + 288);
            uint64_t v83 = *(void *)(v0 + 264);
            uint64_t v82 = *(void *)(v0 + 272);
            (*(void (**)(uint64_t, void))(*(void *)(v0 + 256) + 96))(v83, *(void *)(v0 + 248));
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 32))(v80, v83, v82);
            uint64_t v84 = Prompt.ToolResult.id.getter();
            uint64_t v86 = v85;
            uint64_t v87 = Prompt.ToolResult.Text.value.getter();
            uint64_t v89 = v88;
            if (swift_isUniquelyReferenced_nonNull_native()) {
              uint64_t v90 = v193;
            }
            else {
              uint64_t v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v193[2] + 1, 1, v193);
            }
            uint64_t v92 = v90[2];
            uint64_t v91 = v90[3];
            uint64_t v193 = v90;
            if (v92 >= v91 >> 1) {
              uint64_t v193 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v91 > 1), v92 + 1, 1, v90);
            }
            uint64_t v94 = *(void *)(v0 + 280);
            uint64_t v93 = *(void *)(v0 + 288);
            uint64_t v95 = *(void *)(v0 + 272);
            v193[2] = v92 + 1;
            uint64_t v96 = &v193[4 * v92];
            v96[4] = v84;
            v96[5] = v86;
            v96[6] = v87;
            v96[7] = v89;
            (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v93, v95);
            uint64_t v74 = v188;
          }
          else
          {
            (*(void (**)(void, void))(*(void *)(v0 + 256) + 8))(*(void *)(v0 + 264), *(void *)(v0 + 248));
          }
          (*(void (**)(void, void))(*(void *)(v0 + 304) + 8))(*(void *)(v0 + 312), *(void *)(v0 + 296));
          v73 += v74;
          --v71;
        }
        while (v71);
LABEL_48:
        swift_bridgeObjectRelease();
      }
LABEL_49:
      (*(void (**)(void, void))(*(void *)(v0 + 728) + 8))(*(void *)(v0 + 736), *(void *)(v0 + 720));
      swift_bridgeObjectRelease();
      uint64_t v40 = *(void *)(v0 + 952);
      uint64_t v42 = MEMORY[0x263F8EE78];
      char v43 = v190;
      uint64_t v41 = v193;
      goto LABEL_15;
    }
    if (v65 == *(_DWORD *)(v0 + 1016))
    {
      uint64_t v97 = *(uint64_t **)(v0 + 656);
      (*(void (**)(uint64_t *, void))(*(void *)(v0 + 648) + 96))(v97, *(void *)(v0 + 640));
      uint64_t v98 = *v97;
      char v99 = *(void *)(*v97 + 16);
      if (v99)
      {
        uint64_t v100 = *(void *)(v0 + 232);
        char v101 = v98 + ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80));
        swift_bridgeObjectRetain();
        uint64_t v102 = *(void *)(v100 + 72);
        uint64_t v189 = *(void (**)(void, uint64_t, void))(v100 + 16);
        uint64_t v183 = v102;
        do
        {
          char v103 = *(_DWORD *)(v0 + 1020);
          char v105 = *(void *)(v0 + 184);
          uint64_t v104 = *(void *)(v0 + 192);
          uint64_t v106 = *(void *)(v0 + 176);
          v189(*(void *)(v0 + 240), v101, *(void *)(v0 + 224));
          Prompt.ToolCall.content.getter();
          if ((*(unsigned int (**)(uint64_t, uint64_t))(v105 + 88))(v104, v106) == v103)
          {
            char v108 = *(void *)(v0 + 208);
            uint64_t v107 = *(void *)(v0 + 216);
            char v110 = *(void *)(v0 + 192);
            uint64_t v109 = *(void *)(v0 + 200);
            (*(void (**)(uint64_t, void))(*(void *)(v0 + 184) + 96))(v110, *(void *)(v0 + 176));
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v108 + 32))(v107, v110, v109);
            uint64_t v111 = Prompt.ToolCall.id.getter();
            char v113 = v112;
            char v114 = Prompt.ToolResult.id.getter();
            unint64_t v186 = v115;
            char v116 = Prompt.ToolCall.Function.arguments.getter();
            char v118 = v117;
            if (swift_isUniquelyReferenced_nonNull_native()) {
              char v119 = v190;
            }
            else {
              char v119 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v190[2] + 1, 1, v190);
            }
            char v121 = v119[2];
            char v120 = v119[3];
            if (v121 >= v120 >> 1) {
              char v119 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v120 > 1), v121 + 1, 1, v119);
            }
            long long v123 = *(void *)(v0 + 208);
            long long v122 = *(void *)(v0 + 216);
            long long v124 = *(void *)(v0 + 200);
            v119[2] = v121 + 1;
            unint64_t v190 = v119;
            long long v125 = &v119[8 * v121];
            v125[4] = v111;
            v125[5] = v113;
            v125[6] = v114;
            v125[7] = v186;
            v125[8] = v116;
            v125[9] = v118;
            *((_OWORD *)v125 + 5) = xmmword_25F91CC60;
            (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v122, v124);
            uint64_t v102 = v183;
          }
          else
          {
            (*(void (**)(void, void))(*(void *)(v0 + 184) + 8))(*(void *)(v0 + 192), *(void *)(v0 + 176));
          }
          (*(void (**)(void, void))(*(void *)(v0 + 232) + 8))(*(void *)(v0 + 240), *(void *)(v0 + 224));
          v101 += v102;
          --v99;
        }
        while (v99);
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    char v66 = *(void *)(v0 + 656);
    char v67 = *(void *)(v0 + 648);
    char v68 = *(void *)(v0 + 640);
    (*(void (**)(void, void))(*(void *)(v0 + 728) + 8))(*(void *)(v0 + 736), *(void *)(v0 + 720));
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  swift_once();
LABEL_63:
  uint64_t v155 = *(void *)(v0 + 712);
  BOOL v156 = *(void *)(v0 + 704);
  uint64_t v157 = *(void *)(v0 + 696);
  char v158 = *(void *)(v0 + 688);
  BOOL v159 = type metadata accessor for Logger();
  __swift_project_value_buffer(v159, (uint64_t)static Log.generator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v157 + 16))(v156, v155, v158);
  unint64_t v160 = Logger.logObject.getter();
  uint64_t v161 = static os_log_type_t.error.getter();
  uint64_t v162 = os_log_type_enabled(v160, v161);
  unint64_t v163 = *(void *)(v0 + 704);
  unint64_t v164 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 696) + 8);
  if (v162)
  {
    uint64_t v194 = *(void *)(v0 + 688);
    v165 = (uint8_t *)swift_slowAlloc();
    uint64_t v166 = swift_slowAlloc();
    uint64_t v195 = v166;
    *(_DWORD *)v165 = 136315138;
    uint64_t v167 = BindableVariable.name.getter();
    *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v167, v168, &v195);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v192 = *v164;
    (*v164)(v163, v194);
    _os_log_impl(&dword_25F79F000, v160, v161, "Variable binding not found: %s", v165, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261201C80](v166, -1, -1);
    MEMORY[0x261201C80](v165, -1, -1);
  }
  else
  {
    uint64_t v192 = *v164;
    (*v164)(*(void *)(v0 + 704), *(void *)(v0 + 688));
  }

  BOOL v187 = *(void *)(v0 + 760);
  uint64_t v184 = *(void *)(v0 + 728);
  uint64_t v185 = *(void *)(v0 + 720);
  uint64_t v181 = *(void *)(v0 + 712);
  v182 = *(void *)(v0 + 688);
  uint64_t v179 = *(void *)(v0 + 624);
  uint64_t v169 = *(void *)(v0 + 616);
  unint64_t v180 = *(void *)(v0 + 608);
  v170 = *(void *)(v0 + 600);
  uint64_t v171 = *(void *)(v0 + 592);
  uint64_t v172 = *(void *)(v0 + 584);
  uint64_t v173 = *(void *)(v0 + 576);
  uint64_t v174 = *(void *)(v0 + 568);
  v175 = *(void *)(v0 + 560);
  uint64_t v195 = 0;
  BOOL v196 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  uint64_t v195 = 0xD00000000000001CLL;
  BOOL v196 = 0x800000025F92DBD0;
  v176._uint64_t countAndFlagsBits = BindableVariable.name.getter();
  String.append(_:)(v176);
  swift_bridgeObjectRelease();
  GenerativeError.PromptError.ErrorType.InvalidPromptFormatInfo.init(debugDescription:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v169 + 16))(v173, v179, v180);
  (*(void (**)(uint64_t, void, uint64_t))(v174 + 104))(v173, *MEMORY[0x263F40AE0], v175);
  static GenerativeError.promptError(type:)();
  (*(void (**)(uint64_t, uint64_t))(v174 + 8))(v173, v175);
  lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v171 + 16))(v177, v170, v172);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v171 + 8))(v170, v172);
  (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v179, v180);
  v192(v181, v182);
  (*(void (**)(uint64_t, uint64_t))(v184 + 8))(v187, v185);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v178 = *(uint64_t (**)(void))(v0 + 8);
  return v178();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 904) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2 + 840))(*(void *)(v2 + 784), *(void *)(v2 + 768));
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = specialized static TokenGenerator.getTurnsForMessage(for:with:binding:);
  }
  else
  {
    uint64_t v3 = specialized static TokenGenerator.getTurnsForMessage(for:with:binding:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t i;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(void, uint64_t, void);
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(uint64_t, uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  NSObject *v159;
  os_log_type_t v160;
  BOOL v161;
  uint64_t v162;
  void (**v163)(uint64_t, uint64_t);
  uint8_t *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  Swift::String v175;
  uint64_t v176;
  uint64_t (*v177)(void);
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void (*v193)(void, uint64_t, void);
  uint64_t v194;
  void *v195;
  unint64_t v196;
  void (*v197)(uint64_t, uint64_t);
  uint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;

  uint64_t v203 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
  uint64_t v2 = *(void *)(v0 + 792);
  uint64_t v3 = *(void *)(v0 + 768);
  uint64_t v4 = *(void *)(v0 + 728);
  uint64_t v181 = *(void *)(v0 + 720);
  uint64_t v194 = *(void *)(v0 + 712);
  v198 = *(void *)(v0 + 760);
  uint64_t v5 = *(void *)(v0 + 696);
  char v188 = *(void *)(v0 + 672);
  uint64_t v191 = *(void *)(v0 + 688);
  uint64_t v6 = *(void *)(v0 + 648);
  uint64_t v183 = *(void *)(v0 + 640);
  unint64_t v186 = *(void *)(v0 + 752);
  uint64_t v7 = Prompt.components.getter();
  v1(v2, v3);
  specialized Array.append<A>(contentsOf:)(v7, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), MEMORY[0x263F62098]);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v186, v181);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v188, v183);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v194, v191);
  v8(v198, v181);
  for (unint64_t i = *(void *)(v0 + 888) + 1; i != *(void *)(v0 + 864); unint64_t i = *(void *)(v0 + 888) + 1)
  {
    *(void *)(v0 + 888) = i;
    uint64_t v97 = *(_DWORD *)(v0 + 1004);
    uint64_t v98 = *(void *)(v0 + 680);
    char v99 = *(void *)(v0 + 648);
    uint64_t v100 = *(void *)(v0 + 640);
    (*(void (**)(void, unint64_t, void))(v0 + 880))(*(void *)(v0 + 760), *(void *)(v0 + 856)+ ((*(unsigned __int8 *)(v0 + 1000) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1000))+ *(void *)(v0 + 872) * i, *(void *)(v0 + 720));
    Prompt.Component.value.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v99 + 88))(v98, v100) == v97)
    {
      char v130 = *(void *)(v0 + 712);
      char v131 = *(void *)(v0 + 696);
      char v132 = *(void *)(v0 + 688);
      uint64_t v133 = *(void *)(v0 + 680);
      uint64_t v134 = *(void *)(v0 + 128);
      (*(void (**)(uint64_t, void))(*(void *)(v0 + 648) + 96))(v133, *(void *)(v0 + 640));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v131 + 32))(v130, v133, v132);
      unint64_t v135 = BindableVariable.name.getter();
      if (*(void *)(v134 + 16)
        && (uint64_t v137 = specialized __RawDictionaryStorage.find<A>(_:)(v135, v136), (v138 & 1) != 0))
      {
        outlined init with copy of PromptCompletionEvent(*(void *)(*(void *)(v0 + 128) + 56) + 40 * v137, v0 + 16);
      }
      else
      {
        *(void *)(v0 + 48) = 0;
        *(_OWORD *)(v0 + 16) = 0u;
        *(_OWORD *)(v0 + 32) = 0u;
      }
      swift_bridgeObjectRelease();
      uint64_t v139 = *(void *)(v0 + 648);
      uint64_t v140 = *(void *)(v0 + 640);
      uint64_t v141 = *(void *)(v0 + 632);
      if (*(void *)(v0 + 40))
      {
        __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
        dispatch thunk of PromptComponentValueConvertible.toValue()();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v139 + 56))(v141, 0, 1, v140);
        __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v139 + 48))(v141, 1, v140) != 1)
        {
          uint64_t v142 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 880);
          uint64_t v143 = *(void *)(v0 + 760);
          uint64_t v144 = *(void *)(v0 + 752);
          uint64_t v145 = *(void *)(v0 + 720);
          unint64_t v146 = *(void *)(v0 + 672);
          uint64_t v147 = *(void *)(v0 + 664);
          uint64_t v148 = *(void *)(v0 + 648);
          unint64_t v149 = *(void *)(v0 + 640);
          BOOL v196 = (*(unsigned __int8 *)(v0 + 1000) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1000);
          (*(void (**)(uint64_t, void, uint64_t))(v148 + 32))(v146, *(void *)(v0 + 632), v149);
          v142(v144, v143, v145);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v148 + 16))(v147, v146, v149);
          Prompt.Component.value.setter();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Component>);
          uint64_t v150 = swift_allocObject();
          *(_OWORD *)(v150 + 16) = xmmword_25F91CC30;
          v142(v150 + v196, v144, v145);
          Prompt.init(components:)();
          char v151 = (void *)swift_task_alloc();
          *(void *)(v0 + 896) = v151;
          *char v151 = v0;
          v151[1] = specialized static TokenGenerator.getTurnsForMessage(for:with:binding:);
          uint64_t v152 = *(void *)(v0 + 792);
          return MEMORY[0x270F582D8](v152, 1);
        }
      }
      else
      {
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0 + 16, &demangling cache variable for type metadata for PromptComponentValueConvertible?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 56))(v141, 1, 1, v140);
      }
      uint64_t v153 = *(void *)(v0 + 632);
      swift_bridgeObjectRelease();
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(v153, &demangling cache variable for type metadata for Prompt.Component.Value?);
      if (one-time initialization token for generator != -1) {
        goto LABEL_69;
      }
      goto LABEL_61;
    }
    char v101 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 880);
    uint64_t v102 = *(void *)(v0 + 816);
    char v103 = *(void *)(v0 + 760);
    uint64_t v104 = *(void *)(v0 + 744);
    char v105 = *(void *)(v0 + 720);
    (*(void (**)(void, void))(*(void *)(v0 + 648) + 8))(*(void *)(v0 + 680), *(void *)(v0 + 640));
    v101(v104, v103, v105);
    uint64_t v106 = *(void *)(v102 + 16);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v106 + 16) + 1, 1, v106);
    }
    char v108 = *(void *)(v106 + 16);
    uint64_t v107 = *(void *)(v106 + 24);
    if (v108 >= v107 >> 1) {
      uint64_t v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v107 > 1, v108 + 1, 1, v106);
    }
    uint64_t v109 = *(void *)(v0 + 872);
    char v110 = *(unsigned __int8 *)(v0 + 1000);
    uint64_t v111 = *(void *)(v0 + 816);
    char v112 = *(void *)(v0 + 760);
    char v113 = *(void *)(v0 + 744);
    char v114 = *(void *)(v0 + 728);
    char v115 = *(void *)(v0 + 720);
    *(void *)(v106 + 16) = v108 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v114 + 32))(v106 + ((v110 + 32) & ~v110) + v109 * v108, v113, v115);
    *(void *)(v111 + 16) = v106;
    (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v112, v115);
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v0 + 816) + 16);
  *(void *)(v0 + 912) = v10;
  *(void *)(v0 + 920) = *(void *)(v10 + 16);
  *(_DWORD *)(v0 + 1008) = *MEMORY[0x263F62088];
  *(_DWORD *)(v0 + 1012) = *MEMORY[0x263F62038];
  *(_DWORD *)(v0 + 1016) = *MEMORY[0x263F62090];
  *(_DWORD *)(v0 + 1020) = *MEMORY[0x263F62020];
  *(_DWORD *)(v0 + 1024) = *MEMORY[0x263F61FC8];
  *(_DWORD *)(v0 + 1028) = *MEMORY[0x263F61FE0];
  *(_DWORD *)(v0 + 1032) = *MEMORY[0x263F61FD8];
  *(_DWORD *)(v0 + 1036) = *MEMORY[0x263F7FB48];
  *(_DWORD *)(v0 + 1040) = *MEMORY[0x263F7FB50];
  swift_bridgeObjectRetain();
  uint64_t v11 = 0;
  uint64_t v12 = (void *)MEMORY[0x263F8EE78];
  uint64_t v13 = MEMORY[0x263F8EE78];
  uint64_t v14 = (void *)MEMORY[0x263F8EE78];
LABEL_3:
  uint64_t v195 = v14;
  uint64_t v199 = v12;
  *(void *)(v0 + 944) = v14;
  *(void *)(v0 + 936) = v12;
  *(void *)(v0 + 928) = v13;
  while (1)
  {
    if (v11 == *(void *)(v0 + 920))
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 528) + 56))(*(void *)(v0 + 544), 1, 1, *(void *)(v0 + 520));
      uint64_t v11 = *(void *)(v0 + 920);
      goto LABEL_9;
    }
    if ((v11 & 0x8000000000000000) != 0) {
      break;
    }
    uint64_t v15 = *(void *)(v0 + 912);
    if (v11 >= *(void *)(v15 + 16)) {
      goto LABEL_68;
    }
    uint64_t v16 = *(void *)(v0 + 728);
    uint64_t v17 = *(void *)(v0 + 720);
    uint64_t v18 = *(unint64_t **)(v0 + 544);
    uint64_t v19 = *(void *)(v0 + 528);
    uint64_t v20 = *(void *)(v0 + 520);
    uint64_t v21 = *(void *)(v0 + 536) + *(int *)(v20 + 48);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v16 + 16))(v21, v15+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v11, v17);
    uint64_t v22 = (char *)v18 + *(int *)(v20 + 48);
    *uint64_t v18 = v11;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v22, v21, v17);
    (*(void (**)(unint64_t *, void, uint64_t, uint64_t))(v19 + 56))(v18, 0, 1, v20);
    ++v11;
LABEL_9:
    *(void *)(v0 + 952) = v11;
    uint64_t v23 = *(void *)(v0 + 552);
    uint64_t v24 = *(void *)(v0 + 528);
    uint64_t v25 = *(void *)(v0 + 520);
    outlined init with take of Locale?(*(void *)(v0 + 544), v23, &demangling cache variable for type metadata for (offset: Int, element: Prompt.Component)?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v23, 1, v25) == 1)
    {
      char v116 = *(void *)(v0 + 816);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      char v117 = *(void *)(*(void *)(v116 + 16) + 16);
      char v118 = (void *)swift_task_alloc();
      *(void *)(v0 + 984) = v118;
      *char v118 = v0;
      v118[1] = specialized static TokenGenerator.getTurnsForMessage(for:with:binding:);
      char v119 = *(void *)(v0 + 816);
      char v120 = *(void *)(v0 + 416);
      char v121 = *(void *)(v0 + 120);
      long long v122 = *(void *)(v0 + 128);
      long long v123 = v117;
LABEL_47:
      return textSegment #2 (from:to:) in static TokenGenerator.getTurnsForMessage(for:with:binding:)(v120, 0, v123, v121, v119, v122);
    }
    uint64_t v26 = *(_DWORD *)(v0 + 1008);
    char v27 = *(void *)(v0 + 736);
    uint64_t v28 = *(void *)(v0 + 728);
    BOOL v29 = *(void *)(v0 + 720);
    uint64_t v30 = *(void *)(v0 + 656);
    uint64_t v31 = *(void *)(v0 + 648);
    uint64_t v32 = *(void *)(v0 + 640);
    uint64_t v33 = *(uint64_t **)(v0 + 552);
    uint64_t v34 = *(void *)(v0 + 520);
    uint64_t v35 = *v33;
    *(void *)(v0 + 960) = *v33;
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v27, (char *)v33 + *(int *)(v34 + 48), v29);
    Prompt.Component.value.getter();
    uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 88))(v30, v32);
    if (v36 == v26)
    {
      long long v124 = *(void *)(v0 + 656);
      long long v125 = *(void *)(v0 + 512);
      char v126 = *(void *)(v0 + 488);
      char v127 = *(void *)(v0 + 496);
      (*(void (**)(uint64_t, void))(*(void *)(v0 + 648) + 96))(v124, *(void *)(v0 + 640));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 32))(v125, v124, v126);
      char v128 = (void *)swift_task_alloc();
      *(void *)(v0 + 968) = v128;
      *char v128 = v0;
      v128[1] = specialized static TokenGenerator.getTurnsForMessage(for:with:binding:);
      char v119 = *(void *)(v0 + 816);
      char v120 = *(void *)(v0 + 424);
      char v121 = *(void *)(v0 + 120);
      long long v122 = *(void *)(v0 + 128);
      long long v123 = v35;
      goto LABEL_47;
    }
    if (v36 == *(_DWORD *)(v0 + 1012))
    {
      uint64_t v40 = *(uint64_t **)(v0 + 656);
      (*(void (**)(uint64_t *, void))(*(void *)(v0 + 648) + 96))(v40, *(void *)(v0 + 640));
      uint64_t v41 = *v40;
      uint64_t v42 = *(void *)(*v40 + 16);
      if (v42)
      {
        char v43 = *(void *)(v0 + 304);
        char v44 = v41 + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
        swift_bridgeObjectRetain();
        unint64_t v45 = *(void *)(v43 + 72);
        uint64_t v46 = *(void (**)(void, uint64_t, void))(v43 + 16);
        uint64_t v192 = v45;
        do
        {
          BOOL v47 = *(_DWORD *)(v0 + 1024);
          char v49 = *(void *)(v0 + 256);
          uint64_t v48 = *(void *)(v0 + 264);
          unint64_t v50 = *(void *)(v0 + 248);
          v46(*(void *)(v0 + 312), v44, *(void *)(v0 + 296));
          Prompt.ToolResult.content.getter();
          if ((*(unsigned int (**)(uint64_t, uint64_t))(v49 + 88))(v48, v50) == v47)
          {
            uint64_t v52 = *(void *)(v0 + 280);
            char v51 = *(void *)(v0 + 288);
            uint64_t v54 = *(void *)(v0 + 264);
            uint64_t v53 = *(void *)(v0 + 272);
            (*(void (**)(uint64_t, void))(*(void *)(v0 + 256) + 96))(v54, *(void *)(v0 + 248));
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v51, v54, v53);
            uint64_t v55 = Prompt.ToolResult.id.getter();
            uint64_t v57 = v56;
            uint64_t v58 = Prompt.ToolResult.Text.value.getter();
            uint64_t v60 = v59;
            if (swift_isUniquelyReferenced_nonNull_native()) {
              uint64_t v61 = v199;
            }
            else {
              uint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v199[2] + 1, 1, v199);
            }
            uint64_t v63 = v61[2];
            char v62 = v61[3];
            uint64_t v199 = v61;
            if (v63 >= v62 >> 1) {
              uint64_t v199 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v62 > 1), v63 + 1, 1, v61);
            }
            char v65 = *(void *)(v0 + 280);
            uint64_t v64 = *(void *)(v0 + 288);
            char v66 = *(void *)(v0 + 272);
            v199[2] = v63 + 1;
            char v67 = &v199[4 * v63];
            v67[4] = v55;
            v67[5] = v57;
            v67[6] = v58;
            v67[7] = v60;
            (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
            unint64_t v45 = v192;
          }
          else
          {
            (*(void (**)(void, void))(*(void *)(v0 + 256) + 8))(*(void *)(v0 + 264), *(void *)(v0 + 248));
          }
          (*(void (**)(void, void))(*(void *)(v0 + 304) + 8))(*(void *)(v0 + 312), *(void *)(v0 + 296));
          v44 += v45;
          --v42;
        }
        while (v42);
LABEL_36:
        swift_bridgeObjectRelease();
      }
LABEL_37:
      (*(void (**)(void, void))(*(void *)(v0 + 728) + 8))(*(void *)(v0 + 736), *(void *)(v0 + 720));
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(v0 + 952);
      uint64_t v13 = MEMORY[0x263F8EE78];
      uint64_t v14 = v195;
      uint64_t v12 = v199;
      goto LABEL_3;
    }
    if (v36 == *(_DWORD *)(v0 + 1016))
    {
      char v68 = *(uint64_t **)(v0 + 656);
      (*(void (**)(uint64_t *, void))(*(void *)(v0 + 648) + 96))(v68, *(void *)(v0 + 640));
      uint64_t v69 = *v68;
      char v70 = *(void *)(*v68 + 16);
      if (v70)
      {
        uint64_t v71 = *(void *)(v0 + 232);
        uint64_t v72 = v69 + ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80));
        swift_bridgeObjectRetain();
        uint64_t v73 = *(void *)(v71 + 72);
        uint64_t v193 = *(void (**)(void, uint64_t, void))(v71 + 16);
        uint64_t v184 = v73;
        do
        {
          uint64_t v74 = *(_DWORD *)(v0 + 1020);
          uint64_t v76 = *(void *)(v0 + 184);
          uint64_t v75 = *(void *)(v0 + 192);
          uint64_t v77 = *(void *)(v0 + 176);
          v193(*(void *)(v0 + 240), v72, *(void *)(v0 + 224));
          Prompt.ToolCall.content.getter();
          if ((*(unsigned int (**)(uint64_t, uint64_t))(v76 + 88))(v75, v77) == v74)
          {
            char v79 = *(void *)(v0 + 208);
            char v78 = *(void *)(v0 + 216);
            uint64_t v81 = *(void *)(v0 + 192);
            uint64_t v80 = *(void *)(v0 + 200);
            (*(void (**)(uint64_t, void))(*(void *)(v0 + 184) + 96))(v81, *(void *)(v0 + 176));
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 32))(v78, v81, v80);
            uint64_t v189 = Prompt.ToolCall.id.getter();
            uint64_t v83 = v82;
            uint64_t v84 = Prompt.ToolResult.id.getter();
            uint64_t v86 = v85;
            uint64_t v87 = Prompt.ToolCall.Function.arguments.getter();
            uint64_t v89 = v88;
            if (swift_isUniquelyReferenced_nonNull_native()) {
              uint64_t v90 = v195;
            }
            else {
              uint64_t v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v195[2] + 1, 1, v195);
            }
            uint64_t v92 = v90[2];
            uint64_t v91 = v90[3];
            if (v92 >= v91 >> 1) {
              uint64_t v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v91 > 1), v92 + 1, 1, v90);
            }
            uint64_t v94 = *(void *)(v0 + 208);
            uint64_t v93 = *(void *)(v0 + 216);
            uint64_t v95 = *(void *)(v0 + 200);
            v90[2] = v92 + 1;
            uint64_t v195 = v90;
            uint64_t v96 = &v90[8 * v92];
            v96[4] = v189;
            v96[5] = v83;
            v96[6] = v84;
            v96[7] = v86;
            v96[8] = v87;
            v96[9] = v89;
            *((_OWORD *)v96 + 5) = xmmword_25F91CC60;
            (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v93, v95);
            uint64_t v73 = v184;
          }
          else
          {
            (*(void (**)(void, void))(*(void *)(v0 + 184) + 8))(*(void *)(v0 + 192), *(void *)(v0 + 176));
          }
          (*(void (**)(void, void))(*(void *)(v0 + 232) + 8))(*(void *)(v0 + 240), *(void *)(v0 + 224));
          v72 += v73;
          --v70;
        }
        while (v70);
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    uint64_t v37 = *(void *)(v0 + 656);
    uint64_t v38 = *(void *)(v0 + 648);
    long long v39 = *(void *)(v0 + 640);
    (*(void (**)(void, void))(*(void *)(v0 + 728) + 8))(*(void *)(v0 + 736), *(void *)(v0 + 720));
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
  }
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  swift_once();
LABEL_61:
  unint64_t v154 = *(void *)(v0 + 712);
  uint64_t v155 = *(void *)(v0 + 704);
  BOOL v156 = *(void *)(v0 + 696);
  uint64_t v157 = *(void *)(v0 + 688);
  char v158 = type metadata accessor for Logger();
  __swift_project_value_buffer(v158, (uint64_t)static Log.generator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v156 + 16))(v155, v154, v157);
  BOOL v159 = Logger.logObject.getter();
  unint64_t v160 = static os_log_type_t.error.getter();
  uint64_t v161 = os_log_type_enabled(v159, v160);
  uint64_t v162 = *(void *)(v0 + 704);
  unint64_t v163 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 696) + 8);
  if (v161)
  {
    v200 = *(void *)(v0 + 688);
    unint64_t v164 = (uint8_t *)swift_slowAlloc();
    v165 = swift_slowAlloc();
    unint64_t v201 = v165;
    *(_DWORD *)unint64_t v164 = 136315138;
    uint64_t v166 = BindableVariable.name.getter();
    *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v166, v167, &v201);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v197 = *v163;
    (*v163)(v162, v200);
    _os_log_impl(&dword_25F79F000, v159, v160, "Variable binding not found: %s", v164, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261201C80](v165, -1, -1);
    MEMORY[0x261201C80](v164, -1, -1);
  }
  else
  {
    uint64_t v197 = *v163;
    (*v163)(*(void *)(v0 + 704), *(void *)(v0 + 688));
  }

  unint64_t v190 = *(void *)(v0 + 760);
  uint64_t v185 = *(void *)(v0 + 728);
  BOOL v187 = *(void *)(v0 + 720);
  unint64_t v180 = *(void *)(v0 + 712);
  v182 = *(void *)(v0 + 688);
  uint64_t v178 = *(void *)(v0 + 624);
  uint64_t v168 = *(void *)(v0 + 616);
  uint64_t v179 = *(void *)(v0 + 608);
  uint64_t v169 = *(void *)(v0 + 600);
  v170 = *(void *)(v0 + 592);
  uint64_t v171 = *(void *)(v0 + 584);
  uint64_t v172 = *(void *)(v0 + 576);
  uint64_t v173 = *(void *)(v0 + 568);
  uint64_t v174 = *(void *)(v0 + 560);
  unint64_t v201 = 0;
  char v202 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  unint64_t v201 = 0xD00000000000001CLL;
  char v202 = 0x800000025F92DBD0;
  v175._uint64_t countAndFlagsBits = BindableVariable.name.getter();
  String.append(_:)(v175);
  swift_bridgeObjectRelease();
  GenerativeError.PromptError.ErrorType.InvalidPromptFormatInfo.init(debugDescription:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v168 + 16))(v172, v178, v179);
  (*(void (**)(uint64_t, void, uint64_t))(v173 + 104))(v172, *MEMORY[0x263F40AE0], v174);
  static GenerativeError.promptError(type:)();
  (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v172, v174);
  lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v170 + 16))(v176, v169, v171);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v170 + 8))(v169, v171);
  (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v178, v179);
  v197(v180, v182);
  (*(void (**)(uint64_t, uint64_t))(v185 + 8))(v190, v187);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v177 = *(uint64_t (**)(void))(v0 + 8);
  return v177();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 976) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = specialized static TokenGenerator.getTurnsForMessage(for:with:binding:);
  }
  else
  {
    uint64_t v2 = specialized static TokenGenerator.getTurnsForMessage(for:with:binding:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (**v20)(void, void, void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void (*v39)(uint64_t, uint64_t);
  void *v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(void *, uint64_t, void);
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(void, void, void);
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  NSObject *v141;
  os_log_type_t v142;
  BOOL v143;
  uint64_t v144;
  uint64_t v145;
  uint8_t *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  Swift::String v157;
  void (*v158)(uint64_t, uint64_t);
  uint64_t v159;
  uint64_t (*v160)(void);
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(void, void, void);
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void (*v182)(uint64_t, uint64_t);
  uint64_t v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;

  uint64_t v193 = v0;
  uint64_t v1 = *(void *)(v0 + 424);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 440) + 48))(v1, 1, *(void *)(v0 + 432)) == 1)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for Prompt.Turn.Segment?);
    v177 = *(void **)(v0 + 928);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 472);
    uint64_t v2 = *(void *)(v0 + 480);
    outlined init with take of PromptCompletionStream(v1, v2, type metadata accessor for Prompt.Turn.Segment);
    outlined init with copy of PromptCompletion(v2, v3, type metadata accessor for Prompt.Turn.Segment);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v5 = *(void *)(v0 + 928);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v5 + 16) + 1, 1, v5);
    }
    uint64_t v7 = *(void *)(v5 + 16);
    uint64_t v6 = *(void *)(v5 + 24);
    if (v7 >= v6 >> 1) {
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1, v5);
    }
    uint64_t v8 = *(void *)(v0 + 472);
    uint64_t v9 = *(void *)(v0 + 480);
    uint64_t v10 = *(void *)(v0 + 440);
    *(void *)(v5 + 16) = v7 + 1;
    v177 = (void *)v5;
    outlined init with take of PromptCompletionStream(v8, v5+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v7, type metadata accessor for Prompt.Turn.Segment);
    outlined destroy of TokenGeneratorCompletionResponseStringStream(v9, type metadata accessor for Prompt.Turn.Segment);
  }
  uint64_t v11 = *(_DWORD *)(v0 + 1028);
  uint64_t v12 = *(void *)(v0 + 368);
  uint64_t v13 = *(void *)(v0 + 344);
  uint64_t v14 = *(void *)(v0 + 352);
  Prompt.ImageData.format.getter();
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 88))(v12, v13);
  if (v15 == v11)
  {
    uint64_t v16 = 1040;
  }
  else
  {
    if (v15 != *(_DWORD *)(v0 + 1032))
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for generator != -1) {
        swift_once();
      }
      uint64_t v136 = *(void *)(v0 + 504);
      uint64_t v137 = *(void *)(v0 + 512);
      uint64_t v138 = *(void *)(v0 + 488);
      uint64_t v139 = *(void *)(v0 + 496);
      uint64_t v140 = type metadata accessor for Logger();
      __swift_project_value_buffer(v140, (uint64_t)static Log.generator);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v139 + 16))(v136, v137, v138);
      uint64_t v141 = Logger.logObject.getter();
      uint64_t v142 = static os_log_type_t.error.getter();
      uint64_t v143 = os_log_type_enabled(v141, v142);
      uint64_t v145 = *(void *)(v0 + 496);
      uint64_t v144 = *(void *)(v0 + 504);
      if (v143)
      {
        uint64_t v189 = *(void *)(v0 + 488);
        unint64_t v146 = (uint8_t *)swift_slowAlloc();
        uint64_t v147 = swift_slowAlloc();
        uint64_t v191 = v147;
        *(_DWORD *)unint64_t v146 = 136315138;
        Prompt.ImageData.format.getter();
        uint64_t v148 = String.init<A>(describing:)();
        *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v148, v149, &v191);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v182 = *(void (**)(uint64_t, uint64_t))(v145 + 8);
        v182(v144, v189);
        _os_log_impl(&dword_25F79F000, v141, v142, "Unsupported image format: %s", v146, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x261201C80](v147, -1, -1);
        MEMORY[0x261201C80](v146, -1, -1);
      }
      else
      {
        v182 = *(void (**)(uint64_t, uint64_t))(v145 + 8);
        v182(*(void *)(v0 + 504), *(void *)(v0 + 488));
      }

      uint64_t v172 = *(void *)(v0 + 736);
      uint64_t v169 = *(void *)(v0 + 728);
      v170 = *(void *)(v0 + 720);
      uint64_t v150 = *(void *)(v0 + 616);
      uint64_t v162 = *(void *)(v0 + 624);
      unint64_t v163 = *(void *)(v0 + 608);
      unint64_t v164 = *(void *)(v0 + 600);
      char v151 = *(void *)(v0 + 592);
      uint64_t v166 = *(void *)(v0 + 584);
      uint64_t v152 = *(void *)(v0 + 576);
      uint64_t v153 = *(void *)(v0 + 568);
      unint64_t v186 = *(void *)(v0 + 560);
      v165 = *(void *)(v0 + 512);
      unint64_t v154 = *(void *)(v0 + 360);
      uint64_t v167 = *(void *)(v0 + 488);
      uint64_t v168 = *(void *)(v0 + 368);
      uint64_t v155 = *(void *)(v0 + 344);
      unint64_t v190 = *(void *)(v0 + 352);
      uint64_t v191 = 0;
      uint64_t v192 = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      BOOL v156 = v192;
      *(void *)(v0 + 80) = v191;
      *(void *)(v0 + 88) = v156;
      v157._object = (void *)0x800000025F92DBB0;
      v157._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v157);
      Prompt.ImageData.format.getter();
      _print_unlocked<A, B>(_:_:)();
      char v158 = *(void (**)(uint64_t, uint64_t))(v190 + 8);
      v158(v154, v155);
      GenerativeError.PromptError.ErrorType.InvalidPromptFormatInfo.init(debugDescription:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v150 + 16))(v152, v162, v163);
      (*(void (**)(uint64_t, void, uint64_t))(v153 + 104))(v152, *MEMORY[0x263F40AE0], v186);
      static GenerativeError.promptError(type:)();
      (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v152, v186);
      lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
      swift_allocError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v151 + 16))(v159, v164, v166);
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v164, v166);
      (*(void (**)(uint64_t, uint64_t))(v150 + 8))(v162, v163);
      v182(v165, v167);
      (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v172, v170);
      swift_bridgeObjectRelease();
      v158(v168, v155);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v160 = *(uint64_t (**)(void))(v0 + 8);
      return v160();
    }
    uint64_t v16 = 1036;
  }
  uint64_t v17 = *(void *)(v0 + 464);
  uint64_t v19 = *(void *)(v0 + 400);
  uint64_t v18 = *(void *)(v0 + 408);
  uint64_t v20 = *(void (***)(void, void, void))(v0 + 384);
  uint64_t v21 = *(void *)(v0 + 392);
  uint64_t v22 = *(void *)(v0 + 376);
  uint64_t v24 = *(void *)(v0 + 328);
  uint64_t v23 = *(void *)(v0 + 336);
  uint64_t v183 = *(void *)(v0 + 320);
  v20[13](v19, *(unsigned int *)(v0 + v16), v22);
  v20[4](v18, v19, v22);
  v20[2](v21, v18, v22);
  Prompt.ImageData.data.getter();
  Prompt.ImageAttachment.init(format:data:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v17, v23, v183);
  swift_storeEnumTagMultiPayload();
  uint64_t v25 = v177;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_64:
  }
    uint64_t v25 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, (unint64_t)v25);
  char v27 = v25[2];
  uint64_t v26 = v25[3];
  uint64_t v28 = v27 + 1;
  if (v27 >= v26 >> 1)
  {
    uint64_t v161 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, (unint64_t)v25);
    uint64_t v28 = v27 + 1;
    uint64_t v178 = (void *)v161;
  }
  else
  {
    uint64_t v178 = v25;
  }
  BOOL v29 = *(void *)(v0 + 728);
  uint64_t v184 = *(void *)(v0 + 720);
  BOOL v187 = *(void *)(v0 + 736);
  uint64_t v179 = *(void *)(v0 + 512);
  uint64_t v30 = *(void *)(v0 + 496);
  uint64_t v31 = *(void *)(v0 + 464);
  uint64_t v32 = *(void *)(v0 + 440);
  uint64_t v174 = *(void *)(v0 + 408);
  char v176 = *(void *)(v0 + 488);
  uint64_t v34 = *(void *)(v0 + 376);
  uint64_t v33 = *(void *)(v0 + 384);
  uint64_t v35 = *(void *)(v0 + 328);
  uint64_t v36 = *(void *)(v0 + 336);
  uint64_t v37 = *(void *)(v0 + 320);
  uint64_t v38 = v178;
  v178[2] = v28;
  outlined init with take of PromptCompletionStream(v31, (uint64_t)v178+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(void *)(v32 + 72) * v27, type metadata accessor for Prompt.Turn.Segment);
  long long v39 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
  uint64_t v25 = (void *)(v35 + 8);
  v39(v36, v37);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v174, v34);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v179, v176);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v187, v184);
  uint64_t v171 = *(void *)(v0 + 960);
  uint64_t v40 = *(void **)(v0 + 944);
  uint64_t v41 = *(void **)(v0 + 936);
LABEL_16:
  uint64_t v42 = *(void *)(v0 + 952);
  uint64_t v185 = v40;
  char v188 = v41;
  *(void *)(v0 + 944) = v40;
  *(void *)(v0 + 936) = v41;
  *(void *)(v0 + 928) = v38;
  while (1)
  {
    if (v42 == *(void *)(v0 + 920))
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 528) + 56))(*(void *)(v0 + 544), 1, 1, *(void *)(v0 + 520));
      uint64_t v42 = *(void *)(v0 + 920);
    }
    else
    {
      if ((v42 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
      char v43 = *(void *)(v0 + 912);
      if (v42 >= *(void *)(v43 + 16)) {
        goto LABEL_63;
      }
      char v44 = *(void *)(v0 + 728);
      unint64_t v45 = *(void *)(v0 + 720);
      uint64_t v46 = *(unint64_t **)(v0 + 544);
      BOOL v47 = *(void *)(v0 + 528);
      uint64_t v48 = *(void *)(v0 + 520);
      char v49 = *(void *)(v0 + 536) + *(int *)(v48 + 48);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v44 + 16))(v49, v43+ ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))+ *(void *)(v44 + 72) * v42, v45);
      unint64_t v50 = (char *)v46 + *(int *)(v48 + 48);
      *uint64_t v46 = v42;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v50, v49, v45);
      (*(void (**)(unint64_t *, void, uint64_t, uint64_t))(v47 + 56))(v46, 0, 1, v48);
      ++v42;
    }
    *(void *)(v0 + 952) = v42;
    char v51 = *(void *)(v0 + 552);
    uint64_t v52 = *(void *)(v0 + 528);
    uint64_t v53 = *(void *)(v0 + 520);
    outlined init with take of Locale?(*(void *)(v0 + 544), v51, &demangling cache variable for type metadata for (offset: Int, element: Prompt.Component)?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v51, 1, v53) == 1)
    {
      char v121 = *(void *)(v0 + 816);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      long long v122 = *(void *)(*(void *)(v121 + 16) + 16);
      long long v123 = (void *)swift_task_alloc();
      *(void *)(v0 + 984) = v123;
      *long long v123 = v0;
      v123[1] = specialized static TokenGenerator.getTurnsForMessage(for:with:binding:);
      long long v124 = *(void *)(v0 + 816);
      long long v125 = *(void *)(v0 + 416);
      char v126 = *(void *)(v0 + 120);
      char v127 = *(void *)(v0 + 128);
      char v128 = v171;
      char v129 = v122;
      goto LABEL_51;
    }
    uint64_t v54 = *(_DWORD *)(v0 + 1008);
    uint64_t v55 = *(void *)(v0 + 736);
    uint64_t v56 = *(void *)(v0 + 728);
    uint64_t v57 = *(void *)(v0 + 720);
    uint64_t v58 = *(void *)(v0 + 656);
    char v59 = *(void *)(v0 + 648);
    uint64_t v60 = *(void *)(v0 + 640);
    uint64_t v61 = *(uint64_t **)(v0 + 552);
    char v62 = *(void *)(v0 + 520);
    uint64_t v63 = *v61;
    *(void *)(v0 + 960) = *v61;
    (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v55, (char *)v61 + *(int *)(v62 + 48), v57);
    Prompt.Component.value.getter();
    uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 88))(v58, v60);
    if (v64 == v54) {
      break;
    }
    if (v64 == *(_DWORD *)(v0 + 1012))
    {
      uint64_t v25 = *(void **)(v0 + 656);
      (*(void (**)(void *, void))(*(void *)(v0 + 648) + 96))(v25, *(void *)(v0 + 640));
      char v67 = *v25;
      char v68 = *(void *)(*v25 + 16);
      if (v68)
      {
        uint64_t v69 = *(void *)(v0 + 304);
        char v70 = v67 + ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80));
        swift_bridgeObjectRetain();
        uint64_t v71 = *(void *)(v69 + 72);
        uint64_t v72 = *(void (**)(void *, uint64_t, void))(v69 + 16);
        unint64_t v180 = v71;
        do
        {
          uint64_t v73 = *(_DWORD *)(v0 + 1024);
          uint64_t v25 = *(void **)(v0 + 312);
          uint64_t v75 = *(void *)(v0 + 256);
          uint64_t v74 = *(void *)(v0 + 264);
          uint64_t v76 = *(void *)(v0 + 248);
          v72(v25, v70, *(void *)(v0 + 296));
          Prompt.ToolResult.content.getter();
          if ((*(unsigned int (**)(uint64_t, uint64_t))(v75 + 88))(v74, v76) == v73)
          {
            char v78 = *(void *)(v0 + 280);
            uint64_t v77 = *(void *)(v0 + 288);
            uint64_t v80 = *(void *)(v0 + 264);
            char v79 = *(void *)(v0 + 272);
            (*(void (**)(uint64_t, void))(*(void *)(v0 + 256) + 96))(v80, *(void *)(v0 + 248));
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 32))(v77, v80, v79);
            uint64_t v81 = Prompt.ToolResult.id.getter();
            uint64_t v83 = v82;
            uint64_t v25 = (void *)Prompt.ToolResult.Text.value.getter();
            uint64_t v85 = v84;
            uint64_t v86 = v188;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v188[2] + 1, 1, v188);
            }
            uint64_t v88 = v86[2];
            uint64_t v87 = v86[3];
            char v188 = v86;
            if (v88 >= v87 >> 1) {
              char v188 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v87 > 1), v88 + 1, 1, v86);
            }
            uint64_t v90 = *(void *)(v0 + 280);
            uint64_t v89 = *(void *)(v0 + 288);
            uint64_t v91 = *(void *)(v0 + 272);
            v188[2] = v88 + 1;
            uint64_t v92 = &v188[4 * v88];
            v92[4] = v81;
            v92[5] = v83;
            v92[6] = v25;
            v92[7] = v85;
            (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v89, v91);
            uint64_t v71 = v180;
          }
          else
          {
            (*(void (**)(void, void))(*(void *)(v0 + 256) + 8))(*(void *)(v0 + 264), *(void *)(v0 + 248));
          }
          (*(void (**)(void, void))(*(void *)(v0 + 304) + 8))(*(void *)(v0 + 312), *(void *)(v0 + 296));
          v70 += v71;
          --v68;
        }
        while (v68);
LABEL_47:
        swift_bridgeObjectRelease();
      }
LABEL_48:
      (*(void (**)(void, void))(*(void *)(v0 + 728) + 8))(*(void *)(v0 + 736), *(void *)(v0 + 720));
      swift_bridgeObjectRelease();
      uint64_t v38 = v178;
      uint64_t v40 = v185;
      uint64_t v41 = v188;
      goto LABEL_16;
    }
    if (v64 == *(_DWORD *)(v0 + 1016))
    {
      uint64_t v25 = *(void **)(v0 + 656);
      (*(void (**)(void *, void))(*(void *)(v0 + 648) + 96))(v25, *(void *)(v0 + 640));
      uint64_t v93 = *v25;
      uint64_t v94 = *(void *)(*v25 + 16);
      if (v94)
      {
        uint64_t v95 = *(void *)(v0 + 232);
        uint64_t v96 = v93 + ((*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80));
        swift_bridgeObjectRetain();
        uint64_t v97 = *(void *)(v95 + 72);
        uint64_t v98 = *(void (**)(void, void, void))(v95 + 16);
        uint64_t v173 = v98;
        v175 = v97;
        do
        {
          char v99 = *(_DWORD *)(v0 + 1020);
          uint64_t v25 = *(void **)(v0 + 240);
          char v101 = *(void *)(v0 + 184);
          uint64_t v100 = *(void *)(v0 + 192);
          uint64_t v102 = *(void *)(v0 + 176);
          v98(v25, v96, *(void *)(v0 + 224));
          Prompt.ToolCall.content.getter();
          if ((*(unsigned int (**)(uint64_t, uint64_t))(v101 + 88))(v100, v102) == v99)
          {
            uint64_t v104 = *(void *)(v0 + 208);
            char v103 = *(void *)(v0 + 216);
            uint64_t v106 = *(void *)(v0 + 192);
            char v105 = *(void *)(v0 + 200);
            (*(void (**)(uint64_t, void))(*(void *)(v0 + 184) + 96))(v106, *(void *)(v0 + 176));
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v104 + 32))(v103, v106, v105);
            uint64_t v181 = Prompt.ToolCall.id.getter();
            char v108 = v107;
            uint64_t v109 = Prompt.ToolResult.id.getter();
            uint64_t v111 = v110;
            uint64_t v25 = (void *)Prompt.ToolCall.Function.arguments.getter();
            char v113 = v112;
            char v114 = v185;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              char v114 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v185[2] + 1, 1, v185);
            }
            char v116 = v114[2];
            char v115 = v114[3];
            uint64_t v185 = v114;
            if (v116 >= v115 >> 1) {
              uint64_t v185 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v115 > 1), v116 + 1, 1, v114);
            }
            char v118 = *(void *)(v0 + 208);
            char v117 = *(void *)(v0 + 216);
            char v119 = *(void *)(v0 + 200);
            v185[2] = v116 + 1;
            char v120 = &v185[8 * v116];
            v120[4] = v181;
            v120[5] = v108;
            v120[6] = v109;
            v120[7] = v111;
            v120[8] = v25;
            v120[9] = v113;
            *((_OWORD *)v120 + 5) = xmmword_25F91CC60;
            (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v117, v119);
            uint64_t v98 = v173;
            uint64_t v97 = v175;
          }
          else
          {
            (*(void (**)(void, void))(*(void *)(v0 + 184) + 8))(*(void *)(v0 + 192), *(void *)(v0 + 176));
          }
          (*(void (**)(void, void))(*(void *)(v0 + 232) + 8))(*(void *)(v0 + 240), *(void *)(v0 + 224));
          v96 += v97;
          --v94;
        }
        while (v94);
        goto LABEL_47;
      }
      goto LABEL_48;
    }
    uint64_t v25 = *(void **)(v0 + 656);
    char v65 = *(void *)(v0 + 648);
    char v66 = *(void *)(v0 + 640);
    (*(void (**)(void, void))(*(void *)(v0 + 728) + 8))(*(void *)(v0 + 736), *(void *)(v0 + 720));
    (*(void (**)(void *, uint64_t))(v65 + 8))(v25, v66);
  }
  char v130 = *(void *)(v0 + 656);
  char v131 = *(void *)(v0 + 512);
  char v132 = *(void *)(v0 + 488);
  uint64_t v133 = *(void *)(v0 + 496);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 648) + 96))(v130, *(void *)(v0 + 640));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v133 + 32))(v131, v130, v132);
  uint64_t v134 = (void *)swift_task_alloc();
  *(void *)(v0 + 968) = v134;
  *uint64_t v134 = v0;
  v134[1] = specialized static TokenGenerator.getTurnsForMessage(for:with:binding:);
  long long v124 = *(void *)(v0 + 816);
  long long v125 = *(void *)(v0 + 424);
  char v126 = *(void *)(v0 + 120);
  char v127 = *(void *)(v0 + 128);
  char v128 = v171;
  char v129 = v63;
LABEL_51:
  return textSegment #2 (from:to:) in static TokenGenerator.getTurnsForMessage(for:with:binding:)(v125, v128, v129, v126, v124, v127);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 992) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized static TokenGenerator.getTurnsForMessage(for:with:binding:);
  }
  else {
    uint64_t v2 = specialized static TokenGenerator.getTurnsForMessage(for:with:binding:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned char *v15;
  int *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned char *v32;
  int *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned char *v43;
  int *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(void);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  uint64_t v1 = *(void *)(v0 + 416);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 440) + 48))(v1, 1, *(void *)(v0 + 432)) != 1)
  {
    uint64_t v4 = *(void *)(v0 + 448);
    uint64_t v3 = *(void *)(v0 + 456);
    outlined init with take of PromptCompletionStream(v1, v3, type metadata accessor for Prompt.Turn.Segment);
    outlined init with copy of PromptCompletion(v3, v4, type metadata accessor for Prompt.Turn.Segment);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v2 = *(void *)(v0 + 928);
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_31;
  }
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v1, &demangling cache variable for type metadata for Prompt.Turn.Segment?);
  uint64_t v2 = *(void *)(v0 + 928);
  while (1)
  {
    uint64_t v11 = *(void *)(v0 + 944);
    if (!*(void *)(v11 + 16)) {
      break;
    }
    if (*(void *)(v2 + 16))
    {
      __break(1u);
    }
    else if (*(unsigned char *)(v0 + 1044) == 1 && !*(void *)(*(void *)(v0 + 936) + 16))
    {
      uint64_t v13 = *(void *)(v0 + 160);
      uint64_t v12 = *(void *)(v0 + 168);
      uint64_t v14 = *(void *)(v0 + 144);
      uint64_t v15 = *(unsigned char **)(v0 + 152);
      uint64_t v16 = *(int **)(v0 + 136);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn>);
      uint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_25F91CC30;
      uint64_t v60 = v18;
      uint64_t v61 = v18 + v17;
      uint64_t v19 = type metadata accessor for Locale();
      uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
      v20(v12, 1, 1, v19);
      outlined init with copy of Prompt.Rendering?(v12, v13, &demangling cache variable for type metadata for Locale?);
      uint64_t v21 = (uint64_t)&v15[v16[5]];
      v20(v21, 1, 1, v19);
      uint64_t v22 = &v15[v16[9]];
      *uint64_t v15 = 1;
      *(void *)&v15[v16[6]] = MEMORY[0x263F8EE78];
      *(void *)&v15[v16[8]] = v11;
      *uint64_t v22 = 0u;
      v22[1] = 0u;
      v15[v16[7]] = 0;
      swift_bridgeObjectRetain();
      outlined assign with take of Locale?(v13, v21);
      outlined init with take of PromptCompletionStream((uint64_t)v15, v61, type metadata accessor for Prompt.Turn);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(v12, &demangling cache variable for type metadata for Locale?);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
LABEL_12:
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    __break(1u);
LABEL_31:
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, v2);
LABEL_4:
    uint64_t v7 = *(void *)(v2 + 16);
    uint64_t v6 = *(void *)(v2 + 24);
    if (v7 >= v6 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1, v2);
    }
    uint64_t v8 = *(void *)(v0 + 448);
    uint64_t v9 = *(void *)(v0 + 456);
    uint64_t v10 = *(void *)(v0 + 440);
    *(void *)(v2 + 16) = v7 + 1;
    outlined init with take of PromptCompletionStream(v8, v2+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v7, type metadata accessor for Prompt.Turn.Segment);
    outlined destroy of TokenGeneratorCompletionResponseStringStream(v9, type metadata accessor for Prompt.Turn.Segment);
  }
  uint64_t v23 = *(void *)(v0 + 936);
  if (!*(void *)(v23 + 16))
  {
    switch(*(unsigned char *)(v0 + 1044))
    {
      case 1:
        uint64_t v41 = *(void *)(v0 + 160);
        uint64_t v40 = *(void *)(v0 + 168);
        uint64_t v42 = *(void *)(v0 + 144);
        char v43 = *(unsigned char **)(v0 + 152);
        char v44 = *(int **)(v0 + 136);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn>);
        unint64_t v45 = (*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
        uint64_t v46 = swift_allocObject();
        *(_OWORD *)(v46 + 16) = xmmword_25F91CC30;
        uint64_t v60 = v46;
        char v62 = v46 + v45;
        swift_bridgeObjectRetain();
        ChatMessagePrompt.locale.getter();
        outlined init with copy of Prompt.Rendering?(v40, v41, &demangling cache variable for type metadata for Locale?);
        BOOL v47 = (uint64_t)&v43[v44[5]];
        uint64_t v48 = type metadata accessor for Locale();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v47, 1, 1, v48);
        char v49 = v44[9];
        *char v43 = 1;
        *(void *)&v43[v44[6]] = v2;
        unint64_t v50 = &v43[v49];
        *(void *)&v43[v44[8]] = MEMORY[0x263F8EE78];
        char *v50 = 0u;
        v50[1] = 0u;
        v43[v44[7]] = 0;
        swift_bridgeObjectRetain();
        outlined assign with take of Locale?(v41, v47);
        outlined init with take of PromptCompletionStream((uint64_t)v43, v62, type metadata accessor for Prompt.Turn);
        swift_bridgeObjectRelease();
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(v40, &demangling cache variable for type metadata for Locale?);
        goto LABEL_25;
      case 2:
        BOOL v29 = *(void *)(v0 + 160);
        uint64_t v28 = *(void *)(v0 + 168);
        uint64_t v30 = v2;
        char v51 = *(void *)(v0 + 144);
        uint64_t v32 = *(unsigned char **)(v0 + 152);
        uint64_t v33 = *(int **)(v0 + 136);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn>);
        uint64_t v52 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
        uint64_t v53 = swift_allocObject();
        *(_OWORD *)(v53 + 16) = xmmword_25F91CC30;
        uint64_t v60 = v53;
        uint64_t v36 = v53 + v52;
        swift_bridgeObjectRetain();
        ChatMessagePrompt.locale.getter();
        outlined init with copy of Prompt.Rendering?(v28, v29, &demangling cache variable for type metadata for Locale?);
        uint64_t v37 = (uint64_t)&v32[v33[5]];
        uint64_t v54 = type metadata accessor for Locale();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v37, 1, 1, v54);
        long long v39 = v33[9];
        void *v32 = 2;
        goto LABEL_24;
      case 3:
        uint64_t v56 = *(void *)(v0 + 576);
        uint64_t v57 = *(void *)(v0 + 568);
        uint64_t v58 = *(void *)(v0 + 560);
        GenerativeError.PromptError.ErrorType.InvalidPromptFormatInfo.init(debugDescription:)();
        (*(void (**)(uint64_t, void, uint64_t))(v57 + 104))(v56, *MEMORY[0x263F40AE0], v58);
        lazy protocol witness table accessor for type TokenGeneratorCompletionResponse and conformance TokenGeneratorCompletionResponse((unint64_t *)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
        swift_allocError();
        static GenerativeError.promptError(type:)();
        (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        char v59 = *(uint64_t (**)(void))(v0 + 8);
        return v59();
      default:
        BOOL v29 = *(void *)(v0 + 160);
        uint64_t v28 = *(void *)(v0 + 168);
        uint64_t v30 = v2;
        uint64_t v31 = *(void *)(v0 + 144);
        uint64_t v32 = *(unsigned char **)(v0 + 152);
        uint64_t v33 = *(int **)(v0 + 136);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn>);
        uint64_t v34 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
        uint64_t v35 = swift_allocObject();
        *(_OWORD *)(v35 + 16) = xmmword_25F91CC30;
        uint64_t v60 = v35;
        uint64_t v36 = v35 + v34;
        swift_bridgeObjectRetain();
        ChatMessagePrompt.locale.getter();
        outlined init with copy of Prompt.Rendering?(v28, v29, &demangling cache variable for type metadata for Locale?);
        uint64_t v37 = (uint64_t)&v32[v33[5]];
        uint64_t v38 = type metadata accessor for Locale();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
        long long v39 = v33[9];
        void *v32 = 0;
LABEL_24:
        *(void *)&v32[v33[6]] = v30;
        uint64_t v55 = &v32[v39];
        *(void *)&v32[v33[8]] = MEMORY[0x263F8EE78];
        *uint64_t v55 = 0u;
        v55[1] = 0u;
        v32[v33[7]] = 0;
        swift_bridgeObjectRetain();
        outlined assign with take of Locale?(v29, v37);
        outlined init with take of PromptCompletionStream((uint64_t)v32, v36, type metadata accessor for Prompt.Turn);
        swift_bridgeObjectRelease();
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(v28, &demangling cache variable for type metadata for Locale?);
LABEL_25:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        break;
    }
    goto LABEL_12;
  }
  if (*(unsigned char *)(v0 + 1044) != 3 || *(void *)(v2 + 16))
  {
    __break(1u);
    JUMPOUT(0x25F8E0C3CLL);
  }
  uint64_t v24 = *(void *)(v0 + 120);
  uint64_t v25 = swift_task_alloc();
  *(void *)(v25 + 16) = v24;
  swift_bridgeObjectRetain();
  uint64_t v60 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15TokenGeneration6PromptV14ToolCallResultVG_AH4TurnVs5NeverOTg5((uint64_t)partial apply for closure #3 in static TokenGenerator.getTurnsForMessage(for:with:binding:), v25, v23);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
LABEL_17:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v26(v60);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;

  uint64_t v11 = v0[95];
  uint64_t v1 = v0[90];
  uint64_t v2 = v0[89];
  uint64_t v3 = v0[87];
  uint64_t v4 = v0[86];
  uint64_t v5 = v0[84];
  uint64_t v6 = v0[81];
  uint64_t v7 = v0[80];
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0[91] + 8);
  v8(v0[94], v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v8(v11, v1);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[92];
  uint64_t v2 = v0[91];
  uint64_t v3 = v0[90];
  (*(void (**)(void, void))(v0[62] + 8))(v0[64], v0[61]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for Prompt.Turn(0);
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  v3[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ChatMessageRole();
  v3[10] = v5;
  v3[11] = *(void *)(v5 - 8);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ChatMessagePrompt();
  v3[15] = v6;
  v3[16] = *(void *)(v6 - 8);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Prompt();
  v3[19] = v7;
  v3[20] = *(void *)(v7 - 8);
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ChatMessagesPrompt();
  v3[24] = v8;
  v3[25] = *(void *)(v8 - 8);
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplate: PromptTemplate, locale: Locale?)?);
  v3[28] = swift_task_alloc();
  v3[29] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PromptTemplate, Locale?));
  v3[30] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v3[31] = swift_task_alloc();
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for PromptTemplate();
  v3[34] = v9;
  v3[35] = *(void *)(v9 - 8);
  v3[36] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:), 0, 0);
}

uint64_t specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:)()
{
  uint64_t v1 = Array<A>.bind(chatMessagesPromptBindings:)();
  Array<A>.asPromptTemplate()(v1, *(void *)(v0 + 224));
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptTemplate: PromptTemplate, locale: Locale?));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3) == 1)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v2, &demangling cache variable for type metadata for (promptTemplate: PromptTemplate, locale: Locale?)?);
    *(void *)(v0 + 312) = v1;
    *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
    uint64_t v4 = *(void *)(v1 + 16);
    *(void *)(v0 + 320) = v4;
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)(v0 + 128);
      *(_DWORD *)(v0 + 496) = *(_DWORD *)(v6 + 80);
      *(_DWORD *)(v0 + 500) = *MEMORY[0x263F62110];
      *(_DWORD *)(v0 + 504) = *MEMORY[0x263F62100];
      *(_DWORD *)(v0 + 508) = *MEMORY[0x263F62118];
      *(_DWORD *)(v0 + 512) = *MEMORY[0x263F620F8];
      *(void *)(v0 + 328) = *(void *)(v6 + 72);
      *(void *)(v0 + 336) = *(void *)(v6 + 16);
      while (1)
      {
        *(void *)(v0 + 344) = v5;
        uint64_t v7 = *(unsigned int *)(v0 + 500);
        unint64_t v8 = *(void *)(v0 + 144);
        char v66 = *(void (**)(unint64_t, unint64_t, uint64_t))(v0 + 336);
        unint64_t v68 = *(void *)(v0 + 136);
        uint64_t v9 = *(void *)(v0 + 120);
        uint64_t v11 = *(void *)(v0 + 104);
        uint64_t v10 = *(void *)(v0 + 112);
        uint64_t v13 = *(void *)(v0 + 80);
        uint64_t v12 = *(void *)(v0 + 88);
        v66(v8, *(void *)(v0 + 312)+ ((*(unsigned __int8 *)(v0 + 496) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 496))+ *(void *)(v0 + 328) * v5, v9);
        ChatMessagePrompt.role.getter();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(v11, v7, v13);
        LOBYTE(v7) = static ChatMessageRole.== infix(_:_:)();
        uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
        *(void *)(v0 + 352) = v14;
        *(void *)(v0 + 360) = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        v14(v11, v13);
        v14(v10, v13);
        v66(v68, v8, v9);
        if ((v7 & 1) == 0) {
          break;
        }
        uint64_t v16 = *(void *)(v0 + 168);
        uint64_t v15 = *(void *)(v0 + 176);
        uint64_t v18 = *(void *)(v0 + 152);
        uint64_t v17 = *(void *)(v0 + 160);
        uint64_t v20 = *(void *)(v0 + 128);
        uint64_t v19 = *(void *)(v0 + 136);
        uint64_t v21 = *(void *)(v0 + 120);
        ChatMessagePrompt.prompt.getter();
        Prompt.init(_:)();
        char v22 = static Prompt.== infix(_:_:)();
        uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
        v23(v16, v18);
        v23(v15, v18);
        uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
        v24(v19, v21);
        if ((v22 & 1) == 0) {
          goto LABEL_17;
        }
        uint64_t v26 = *(void *)(v0 + 248);
        uint64_t v25 = *(void *)(v0 + 256);
        uint64_t v28 = *(unsigned char **)(v0 + 64);
        uint64_t v27 = *(void *)(v0 + 72);
        BOOL v29 = *(int **)(v0 + 48);
        ChatMessagePrompt.locale.getter();
        outlined init with copy of Prompt.Rendering?(v25, v26, &demangling cache variable for type metadata for Locale?);
        uint64_t v30 = (uint64_t)&v28[v29[5]];
        uint64_t v31 = type metadata accessor for Locale();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
        uint64_t v32 = v29[9];
        unsigned char *v28 = 1;
        uint64_t v33 = MEMORY[0x263F8EE78];
        *(void *)&v28[v29[6]] = MEMORY[0x263F8EE78];
        *(void *)&v28[v29[8]] = v33;
        uint64_t v34 = &v28[v32];
        *uint64_t v34 = 0u;
        v34[1] = 0u;
        v28[v29[7]] = 1;
        outlined assign with take of Locale?(v26, v30);
        outlined init with take of PromptCompletionStream((uint64_t)v28, v27, type metadata accessor for Prompt.Turn);
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(v25, &demangling cache variable for type metadata for Locale?);
        unint64_t v35 = *(void *)(v0 + 16);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v35 + 16) + 1, 1, v35);
        }
        unint64_t v37 = *(void *)(v35 + 16);
        unint64_t v36 = *(void *)(v35 + 24);
        if (v37 >= v36 >> 1) {
          unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, v35);
        }
        uint64_t v38 = *(void *)(v0 + 144);
        uint64_t v39 = *(void *)(v0 + 120);
        uint64_t v40 = *(void *)(v0 + 72);
        uint64_t v41 = *(void *)(v0 + 56);
        *(void *)(v35 + 16) = v37 + 1;
        outlined init with take of PromptCompletionStream(v40, v35+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(void *)(v41 + 72) * v37, type metadata accessor for Prompt.Turn);
        *(void *)(v0 + 16) = v35;
        v24(v38, v39);
        uint64_t v5 = *(void *)(v0 + 344) + 1;
        if (v5 == *(void *)(v0 + 320))
        {
          swift_bridgeObjectRelease();
          uint64_t v60 = *(void *)(v0 + 16);
          goto LABEL_21;
        }
      }
      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 128) + 8);
      v24(*(void *)(v0 + 136), *(void *)(v0 + 120));
LABEL_17:
      *(void *)(v0 + 368) = v24;
      int v52 = *(_DWORD *)(v0 + 500);
      uint64_t v54 = *(void *)(v0 + 88);
      uint64_t v53 = *(void *)(v0 + 96);
      uint64_t v55 = *(void *)(v0 + 80);
      ChatMessagePrompt.role.getter();
      int v56 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 88))(v53, v55);
      if (v56 == v52)
      {
        uint64_t v57 = (unsigned char *)(v0 + 520);
        *(unsigned char *)(v0 + 520) = 0;
        uint64_t v58 = (void *)swift_task_alloc();
        *(void *)(v0 + 376) = v58;
        *uint64_t v58 = v0;
        char v59 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
      }
      else if (v56 == *(_DWORD *)(v0 + 504))
      {
        uint64_t v57 = (unsigned char *)(v0 + 519);
        *(unsigned char *)(v0 + 519) = 2;
        uint64_t v58 = (void *)swift_task_alloc();
        *(void *)(v0 + 400) = v58;
        *uint64_t v58 = v0;
        char v59 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
      }
      else if (v56 == *(_DWORD *)(v0 + 508))
      {
        uint64_t v57 = (unsigned char *)(v0 + 518);
        *(unsigned char *)(v0 + 518) = 1;
        uint64_t v58 = (void *)swift_task_alloc();
        *(void *)(v0 + 424) = v58;
        *uint64_t v58 = v0;
        char v59 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
      }
      else if (v56 == *(_DWORD *)(v0 + 512))
      {
        uint64_t v57 = (unsigned char *)(v0 + 517);
        *(unsigned char *)(v0 + 517) = 3;
        uint64_t v58 = (void *)swift_task_alloc();
        *(void *)(v0 + 448) = v58;
        *uint64_t v58 = v0;
        char v59 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
      }
      else
      {
        uint64_t v57 = (unsigned char *)(v0 + 516);
        *(unsigned char *)(v0 + 516) = 2;
        uint64_t v58 = (void *)swift_task_alloc();
        *(void *)(v0 + 472) = v58;
        *uint64_t v58 = v0;
        char v59 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
      }
      v58[1] = v59;
      uint64_t v62 = *(void *)(v0 + 144);
      uint64_t v63 = *(void *)(v0 + 40);
      return specialized static TokenGenerator.getTurnsForMessage(for:with:binding:)(v57, v62, v63);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v60 = MEMORY[0x263F8EE78];
LABEL_21:
      uint64_t v64 = v60;
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v61 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v61(v64);
    }
  }
  else
  {
    uint64_t v42 = *(void *)(v0 + 272);
    uint64_t v65 = *(void *)(v0 + 288);
    uint64_t v67 = *(void *)(v0 + 264);
    uint64_t v43 = *(void *)(v0 + 232);
    uint64_t v44 = *(void *)(v0 + 240);
    uint64_t v45 = v2 + *(int *)(v3 + 48);
    uint64_t v46 = v44 + *(int *)(v43 + 48);
    BOOL v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 280) + 32);
    v47(v44, v2, v42);
    outlined init with take of Locale?(v45, v46, &demangling cache variable for type metadata for Locale?);
    swift_bridgeObjectRelease();
    uint64_t v48 = v44 + *(int *)(v43 + 48);
    v47(v65, v44, v42);
    outlined init with take of Locale?(v48, v67, &demangling cache variable for type metadata for Locale?);
    *(void *)(swift_task_alloc() + 16) = v65;
    Prompt.init(_:)();
    swift_task_dealloc();
    char v49 = (void *)swift_task_alloc();
    *(void *)(v0 + 296) = v49;
    void *v49 = v0;
    v49[1] = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    uint64_t v50 = *(void *)(v0 + 208);
    return Prompt.parseAsChatMessagesPrompt()(v50);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 304) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[20] + 8))(v2[23], v2[19]);
  if (v0) {
    uint64_t v3 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
  }
  else {
    uint64_t v3 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned char *v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned char *v54;
  void *v55;
  uint64_t (*v56)(uint64_t);
  uint64_t v57;
  uint64_t (*v58)(uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(unint64_t, unint64_t, uint64_t);
  unint64_t v64;
  uint64_t v65;

  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 272);
  uint64_t v5 = *(void *)(v0 + 208);
  uint64_t v6 = *(void *)(v0 + 216);
  uint64_t v7 = *(void *)(v0 + 192);
  unint64_t v8 = *(void *)(v0 + 200);
  ChatMessagesPrompt.locale(_:)();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v5, v7);
  uint64_t v10 = ChatMessagesPrompt.chatMessages.getter();
  v9(v6, v7);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v4, &demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 312) = v10;
  uint64_t v11 = *(void *)(v10 + 16);
  *(void *)(v0 + 320) = v11;
  if (v11)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(v0 + 128);
    *(_DWORD *)(v0 + 496) = *(_DWORD *)(v13 + 80);
    *(_DWORD *)(v0 + 500) = *MEMORY[0x263F62110];
    *(_DWORD *)(v0 + 504) = *MEMORY[0x263F62100];
    *(_DWORD *)(v0 + 508) = *MEMORY[0x263F62118];
    *(_DWORD *)(v0 + 512) = *MEMORY[0x263F620F8];
    *(void *)(v0 + 328) = *(void *)(v13 + 72);
    *(void *)(v0 + 336) = *(void *)(v13 + 16);
    while (1)
    {
      *(void *)(v0 + 344) = v12;
      uint64_t v14 = *(unsigned int *)(v0 + 500);
      uint64_t v15 = *(void *)(v0 + 144);
      uint64_t v63 = *(void (**)(unint64_t, unint64_t, uint64_t))(v0 + 336);
      uint64_t v64 = *(void *)(v0 + 136);
      uint64_t v16 = *(void *)(v0 + 120);
      uint64_t v18 = *(void *)(v0 + 104);
      uint64_t v17 = *(void *)(v0 + 112);
      uint64_t v20 = *(void *)(v0 + 80);
      uint64_t v19 = *(void *)(v0 + 88);
      v63(v15, *(void *)(v0 + 312)+ ((*(unsigned __int8 *)(v0 + 496) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 496))+ *(void *)(v0 + 328) * v12, v16);
      ChatMessagePrompt.role.getter();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 104))(v18, v14, v20);
      LOBYTE(v14) = static ChatMessageRole.== infix(_:_:)();
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      *(void *)(v0 + 352) = v21;
      *(void *)(v0 + 360) = (v19 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v21(v18, v20);
      v21(v17, v20);
      v63(v64, v15, v16);
      if ((v14 & 1) == 0) {
        break;
      }
      uint64_t v23 = *(void *)(v0 + 168);
      char v22 = *(void *)(v0 + 176);
      uint64_t v25 = *(void *)(v0 + 152);
      uint64_t v24 = *(void *)(v0 + 160);
      uint64_t v27 = *(void *)(v0 + 128);
      uint64_t v26 = *(void *)(v0 + 136);
      uint64_t v28 = *(void *)(v0 + 120);
      ChatMessagePrompt.prompt.getter();
      Prompt.init(_:)();
      BOOL v29 = static Prompt.== infix(_:_:)();
      uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v30(v23, v25);
      v30(v22, v25);
      uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
      v31(v26, v28);
      if ((v29 & 1) == 0) {
        goto LABEL_13;
      }
      uint64_t v33 = *(void *)(v0 + 248);
      uint64_t v32 = *(void *)(v0 + 256);
      unint64_t v35 = *(unsigned char **)(v0 + 64);
      uint64_t v34 = *(void *)(v0 + 72);
      unint64_t v36 = *(int **)(v0 + 48);
      ChatMessagePrompt.locale.getter();
      outlined init with copy of Prompt.Rendering?(v32, v33, &demangling cache variable for type metadata for Locale?);
      unint64_t v37 = (uint64_t)&v35[v36[5]];
      uint64_t v38 = type metadata accessor for Locale();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
      uint64_t v39 = v36[9];
      *unint64_t v35 = 1;
      uint64_t v40 = MEMORY[0x263F8EE78];
      *(void *)&v35[v36[6]] = MEMORY[0x263F8EE78];
      *(void *)&v35[v36[8]] = v40;
      uint64_t v41 = &v35[v39];
      char *v41 = 0u;
      v41[1] = 0u;
      v35[v36[7]] = 1;
      outlined assign with take of Locale?(v33, v37);
      outlined init with take of PromptCompletionStream((uint64_t)v35, v34, type metadata accessor for Prompt.Turn);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(v32, &demangling cache variable for type metadata for Locale?);
      uint64_t v42 = *(void *)(v0 + 16);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v42 + 16) + 1, 1, v42);
      }
      uint64_t v44 = *(void *)(v42 + 16);
      uint64_t v43 = *(void *)(v42 + 24);
      if (v44 >= v43 >> 1) {
        uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1, v42);
      }
      uint64_t v45 = *(void *)(v0 + 144);
      uint64_t v46 = *(void *)(v0 + 120);
      BOOL v47 = *(void *)(v0 + 72);
      uint64_t v48 = *(void *)(v0 + 56);
      *(void *)(v42 + 16) = v44 + 1;
      outlined init with take of PromptCompletionStream(v47, v42+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(void *)(v48 + 72) * v44, type metadata accessor for Prompt.Turn);
      *(void *)(v0 + 16) = v42;
      v31(v45, v46);
      uint64_t v12 = *(void *)(v0 + 344) + 1;
      if (v12 == *(void *)(v0 + 320))
      {
        swift_bridgeObjectRelease();
        uint64_t v57 = *(void *)(v0 + 16);
        goto LABEL_17;
      }
    }
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 128) + 8);
    v31(*(void *)(v0 + 136), *(void *)(v0 + 120));
LABEL_13:
    *(void *)(v0 + 368) = v31;
    char v49 = *(_DWORD *)(v0 + 500);
    char v51 = *(void *)(v0 + 88);
    uint64_t v50 = *(void *)(v0 + 96);
    int v52 = *(void *)(v0 + 80);
    ChatMessagePrompt.role.getter();
    uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 88))(v50, v52);
    if (v53 == v49)
    {
      uint64_t v54 = (unsigned char *)(v0 + 520);
      *(unsigned char *)(v0 + 520) = 0;
      uint64_t v55 = (void *)swift_task_alloc();
      *(void *)(v0 + 376) = v55;
      *uint64_t v55 = v0;
      int v56 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else if (v53 == *(_DWORD *)(v0 + 504))
    {
      uint64_t v54 = (unsigned char *)(v0 + 519);
      *(unsigned char *)(v0 + 519) = 2;
      uint64_t v55 = (void *)swift_task_alloc();
      *(void *)(v0 + 400) = v55;
      *uint64_t v55 = v0;
      int v56 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else if (v53 == *(_DWORD *)(v0 + 508))
    {
      uint64_t v54 = (unsigned char *)(v0 + 518);
      *(unsigned char *)(v0 + 518) = 1;
      uint64_t v55 = (void *)swift_task_alloc();
      *(void *)(v0 + 424) = v55;
      *uint64_t v55 = v0;
      int v56 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else if (v53 == *(_DWORD *)(v0 + 512))
    {
      uint64_t v54 = (unsigned char *)(v0 + 517);
      *(unsigned char *)(v0 + 517) = 3;
      uint64_t v55 = (void *)swift_task_alloc();
      *(void *)(v0 + 448) = v55;
      *uint64_t v55 = v0;
      int v56 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else
    {
      uint64_t v54 = (unsigned char *)(v0 + 516);
      *(unsigned char *)(v0 + 516) = 2;
      uint64_t v55 = (void *)swift_task_alloc();
      *(void *)(v0 + 472) = v55;
      *uint64_t v55 = v0;
      int v56 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    v55[1] = v56;
    uint64_t v60 = *(void *)(v0 + 144);
    uint64_t v61 = *(void *)(v0 + 40);
    return specialized static TokenGenerator.getTurnsForMessage(for:with:binding:)(v54, v60, v61);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v57 = MEMORY[0x263F8EE78];
LABEL_17:
    uint64_t v62 = v57;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v58 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v58(v62);
  }
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned char *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned char *v47;
  void *v48;
  uint64_t (*v49)(uint64_t);
  uint64_t v50;
  uint64_t v51;
  void (*v52)(unint64_t, unint64_t, uint64_t);
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;

  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 120);
  specialized Array.append<A>(contentsOf:)(*(void *)(v0 + 392), (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for Prompt.Turn);
  v1(v2, v3);
  uint64_t v4 = *(void *)(v0 + 344) + 1;
  if (v4 == *(void *)(v0 + 320))
  {
LABEL_2:
    swift_bridgeObjectRelease();
    uint64_t v54 = *(void *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v5(v54);
  }
  else
  {
    while (1)
    {
      *(void *)(v0 + 344) = v4;
      uint64_t v7 = *(unsigned int *)(v0 + 500);
      unint64_t v8 = *(void *)(v0 + 144);
      int v52 = *(void (**)(unint64_t, unint64_t, uint64_t))(v0 + 336);
      uint64_t v53 = *(void *)(v0 + 136);
      uint64_t v9 = *(void *)(v0 + 120);
      uint64_t v11 = *(void *)(v0 + 104);
      uint64_t v10 = *(void *)(v0 + 112);
      uint64_t v13 = *(void *)(v0 + 80);
      uint64_t v12 = *(void *)(v0 + 88);
      v52(v8, *(void *)(v0 + 312)+ ((*(unsigned __int8 *)(v0 + 496) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 496))+ *(void *)(v0 + 328) * v4, v9);
      ChatMessagePrompt.role.getter();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(v11, v7, v13);
      LOBYTE(v7) = static ChatMessageRole.== infix(_:_:)();
      uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      *(void *)(v0 + 352) = v14;
      *(void *)(v0 + 360) = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v14(v11, v13);
      v14(v10, v13);
      v52(v53, v8, v9);
      if ((v7 & 1) == 0) {
        break;
      }
      uint64_t v16 = *(void *)(v0 + 168);
      uint64_t v15 = *(void *)(v0 + 176);
      uint64_t v18 = *(void *)(v0 + 152);
      uint64_t v17 = *(void *)(v0 + 160);
      uint64_t v20 = *(void *)(v0 + 128);
      uint64_t v19 = *(void *)(v0 + 136);
      uint64_t v21 = *(void *)(v0 + 120);
      ChatMessagePrompt.prompt.getter();
      Prompt.init(_:)();
      char v22 = static Prompt.== infix(_:_:)();
      uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v23(v16, v18);
      v23(v15, v18);
      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v24(v19, v21);
      if ((v22 & 1) == 0) {
        goto LABEL_14;
      }
      uint64_t v26 = *(void *)(v0 + 248);
      uint64_t v25 = *(void *)(v0 + 256);
      uint64_t v28 = *(unsigned char **)(v0 + 64);
      uint64_t v27 = *(void *)(v0 + 72);
      BOOL v29 = *(int **)(v0 + 48);
      ChatMessagePrompt.locale.getter();
      outlined init with copy of Prompt.Rendering?(v25, v26, &demangling cache variable for type metadata for Locale?);
      uint64_t v30 = (uint64_t)&v28[v29[5]];
      uint64_t v31 = type metadata accessor for Locale();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
      uint64_t v32 = v29[9];
      unsigned char *v28 = 1;
      uint64_t v33 = MEMORY[0x263F8EE78];
      *(void *)&v28[v29[6]] = MEMORY[0x263F8EE78];
      *(void *)&v28[v29[8]] = v33;
      uint64_t v34 = &v28[v32];
      *uint64_t v34 = 0u;
      v34[1] = 0u;
      v28[v29[7]] = 1;
      outlined assign with take of Locale?(v26, v30);
      outlined init with take of PromptCompletionStream((uint64_t)v28, v27, type metadata accessor for Prompt.Turn);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(v25, &demangling cache variable for type metadata for Locale?);
      unint64_t v35 = *(void *)(v0 + 16);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v35 + 16) + 1, 1, v35);
      }
      unint64_t v37 = *(void *)(v35 + 16);
      unint64_t v36 = *(void *)(v35 + 24);
      if (v37 >= v36 >> 1) {
        unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, v35);
      }
      uint64_t v38 = *(void *)(v0 + 144);
      uint64_t v39 = *(void *)(v0 + 120);
      uint64_t v40 = *(void *)(v0 + 72);
      uint64_t v41 = *(void *)(v0 + 56);
      *(void *)(v35 + 16) = v37 + 1;
      outlined init with take of PromptCompletionStream(v40, v35+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(void *)(v41 + 72) * v37, type metadata accessor for Prompt.Turn);
      *(void *)(v0 + 16) = v35;
      v24(v38, v39);
      uint64_t v4 = *(void *)(v0 + 344) + 1;
      if (v4 == *(void *)(v0 + 320)) {
        goto LABEL_2;
      }
    }
    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 128) + 8);
    v24(*(void *)(v0 + 136), *(void *)(v0 + 120));
LABEL_14:
    *(void *)(v0 + 368) = v24;
    uint64_t v42 = *(_DWORD *)(v0 + 500);
    uint64_t v44 = *(void *)(v0 + 88);
    uint64_t v43 = *(void *)(v0 + 96);
    uint64_t v45 = *(void *)(v0 + 80);
    ChatMessagePrompt.role.getter();
    uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 88))(v43, v45);
    if (v46 == v42)
    {
      BOOL v47 = (unsigned char *)(v0 + 520);
      *(unsigned char *)(v0 + 520) = 0;
      uint64_t v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 376) = v48;
      *uint64_t v48 = v0;
      char v49 = (uint64_t (*)(uint64_t))specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else if (v46 == *(_DWORD *)(v0 + 504))
    {
      BOOL v47 = (unsigned char *)(v0 + 519);
      *(unsigned char *)(v0 + 519) = 2;
      uint64_t v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 400) = v48;
      *uint64_t v48 = v0;
      char v49 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else if (v46 == *(_DWORD *)(v0 + 508))
    {
      BOOL v47 = (unsigned char *)(v0 + 518);
      *(unsigned char *)(v0 + 518) = 1;
      uint64_t v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 424) = v48;
      *uint64_t v48 = v0;
      char v49 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else if (v46 == *(_DWORD *)(v0 + 512))
    {
      BOOL v47 = (unsigned char *)(v0 + 517);
      *(unsigned char *)(v0 + 517) = 3;
      uint64_t v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 448) = v48;
      *uint64_t v48 = v0;
      char v49 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else
    {
      BOOL v47 = (unsigned char *)(v0 + 516);
      *(unsigned char *)(v0 + 516) = 2;
      uint64_t v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 472) = v48;
      *uint64_t v48 = v0;
      char v49 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    v48[1] = v49;
    uint64_t v50 = *(void *)(v0 + 144);
    char v51 = *(void *)(v0 + 40);
    return specialized static TokenGenerator.getTurnsForMessage(for:with:binding:)(v47, v50, v51);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0 + 368))(*(void *)(v0 + 144), *(void *)(v0 + 120));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned char *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned char *v47;
  void *v48;
  uint64_t (*v49)(uint64_t);
  uint64_t v50;
  uint64_t v51;
  void (*v52)(unint64_t, unint64_t, uint64_t);
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;

  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 120);
  specialized Array.append<A>(contentsOf:)(*(void *)(v0 + 416), (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for Prompt.Turn);
  v1(v2, v3);
  uint64_t v4 = *(void *)(v0 + 344) + 1;
  if (v4 == *(void *)(v0 + 320))
  {
LABEL_2:
    swift_bridgeObjectRelease();
    uint64_t v54 = *(void *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v5(v54);
  }
  else
  {
    while (1)
    {
      *(void *)(v0 + 344) = v4;
      uint64_t v7 = *(unsigned int *)(v0 + 500);
      unint64_t v8 = *(void *)(v0 + 144);
      int v52 = *(void (**)(unint64_t, unint64_t, uint64_t))(v0 + 336);
      uint64_t v53 = *(void *)(v0 + 136);
      uint64_t v9 = *(void *)(v0 + 120);
      uint64_t v11 = *(void *)(v0 + 104);
      uint64_t v10 = *(void *)(v0 + 112);
      uint64_t v13 = *(void *)(v0 + 80);
      uint64_t v12 = *(void *)(v0 + 88);
      v52(v8, *(void *)(v0 + 312)+ ((*(unsigned __int8 *)(v0 + 496) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 496))+ *(void *)(v0 + 328) * v4, v9);
      ChatMessagePrompt.role.getter();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(v11, v7, v13);
      LOBYTE(v7) = static ChatMessageRole.== infix(_:_:)();
      uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      *(void *)(v0 + 352) = v14;
      *(void *)(v0 + 360) = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v14(v11, v13);
      v14(v10, v13);
      v52(v53, v8, v9);
      if ((v7 & 1) == 0) {
        break;
      }
      uint64_t v16 = *(void *)(v0 + 168);
      uint64_t v15 = *(void *)(v0 + 176);
      uint64_t v18 = *(void *)(v0 + 152);
      uint64_t v17 = *(void *)(v0 + 160);
      uint64_t v20 = *(void *)(v0 + 128);
      uint64_t v19 = *(void *)(v0 + 136);
      uint64_t v21 = *(void *)(v0 + 120);
      ChatMessagePrompt.prompt.getter();
      Prompt.init(_:)();
      char v22 = static Prompt.== infix(_:_:)();
      uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v23(v16, v18);
      v23(v15, v18);
      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v24(v19, v21);
      if ((v22 & 1) == 0) {
        goto LABEL_14;
      }
      uint64_t v26 = *(void *)(v0 + 248);
      uint64_t v25 = *(void *)(v0 + 256);
      uint64_t v28 = *(unsigned char **)(v0 + 64);
      uint64_t v27 = *(void *)(v0 + 72);
      BOOL v29 = *(int **)(v0 + 48);
      ChatMessagePrompt.locale.getter();
      outlined init with copy of Prompt.Rendering?(v25, v26, &demangling cache variable for type metadata for Locale?);
      uint64_t v30 = (uint64_t)&v28[v29[5]];
      uint64_t v31 = type metadata accessor for Locale();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
      uint64_t v32 = v29[9];
      unsigned char *v28 = 1;
      uint64_t v33 = MEMORY[0x263F8EE78];
      *(void *)&v28[v29[6]] = MEMORY[0x263F8EE78];
      *(void *)&v28[v29[8]] = v33;
      uint64_t v34 = &v28[v32];
      *uint64_t v34 = 0u;
      v34[1] = 0u;
      v28[v29[7]] = 1;
      outlined assign with take of Locale?(v26, v30);
      outlined init with take of PromptCompletionStream((uint64_t)v28, v27, type metadata accessor for Prompt.Turn);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(v25, &demangling cache variable for type metadata for Locale?);
      unint64_t v35 = *(void *)(v0 + 16);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v35 + 16) + 1, 1, v35);
      }
      unint64_t v37 = *(void *)(v35 + 16);
      unint64_t v36 = *(void *)(v35 + 24);
      if (v37 >= v36 >> 1) {
        unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, v35);
      }
      uint64_t v38 = *(void *)(v0 + 144);
      uint64_t v39 = *(void *)(v0 + 120);
      uint64_t v40 = *(void *)(v0 + 72);
      uint64_t v41 = *(void *)(v0 + 56);
      *(void *)(v35 + 16) = v37 + 1;
      outlined init with take of PromptCompletionStream(v40, v35+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(void *)(v41 + 72) * v37, type metadata accessor for Prompt.Turn);
      *(void *)(v0 + 16) = v35;
      v24(v38, v39);
      uint64_t v4 = *(void *)(v0 + 344) + 1;
      if (v4 == *(void *)(v0 + 320)) {
        goto LABEL_2;
      }
    }
    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 128) + 8);
    v24(*(void *)(v0 + 136), *(void *)(v0 + 120));
LABEL_14:
    *(void *)(v0 + 368) = v24;
    uint64_t v42 = *(_DWORD *)(v0 + 500);
    uint64_t v44 = *(void *)(v0 + 88);
    uint64_t v43 = *(void *)(v0 + 96);
    uint64_t v45 = *(void *)(v0 + 80);
    ChatMessagePrompt.role.getter();
    uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 88))(v43, v45);
    if (v46 == v42)
    {
      BOOL v47 = (unsigned char *)(v0 + 520);
      *(unsigned char *)(v0 + 520) = 0;
      uint64_t v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 376) = v48;
      *uint64_t v48 = v0;
      char v49 = (uint64_t (*)(uint64_t))specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else if (v46 == *(_DWORD *)(v0 + 504))
    {
      BOOL v47 = (unsigned char *)(v0 + 519);
      *(unsigned char *)(v0 + 519) = 2;
      uint64_t v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 400) = v48;
      *uint64_t v48 = v0;
      char v49 = (uint64_t (*)(uint64_t))specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else if (v46 == *(_DWORD *)(v0 + 508))
    {
      BOOL v47 = (unsigned char *)(v0 + 518);
      *(unsigned char *)(v0 + 518) = 1;
      uint64_t v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 424) = v48;
      *uint64_t v48 = v0;
      char v49 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else if (v46 == *(_DWORD *)(v0 + 512))
    {
      BOOL v47 = (unsigned char *)(v0 + 517);
      *(unsigned char *)(v0 + 517) = 3;
      uint64_t v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 448) = v48;
      *uint64_t v48 = v0;
      char v49 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else
    {
      BOOL v47 = (unsigned char *)(v0 + 516);
      *(unsigned char *)(v0 + 516) = 2;
      uint64_t v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 472) = v48;
      *uint64_t v48 = v0;
      char v49 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    v48[1] = v49;
    uint64_t v50 = *(void *)(v0 + 144);
    char v51 = *(void *)(v0 + 40);
    return specialized static TokenGenerator.getTurnsForMessage(for:with:binding:)(v47, v50, v51);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0 + 368))(*(void *)(v0 + 144), *(void *)(v0 + 120));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned char *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned char *v47;
  void *v48;
  uint64_t (*v49)(uint64_t);
  uint64_t v50;
  uint64_t v51;
  void (*v52)(unint64_t, unint64_t, uint64_t);
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;

  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 120);
  specialized Array.append<A>(contentsOf:)(*(void *)(v0 + 440), (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for Prompt.Turn);
  v1(v2, v3);
  uint64_t v4 = *(void *)(v0 + 344) + 1;
  if (v4 == *(void *)(v0 + 320))
  {
LABEL_2:
    swift_bridgeObjectRelease();
    uint64_t v54 = *(void *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v5(v54);
  }
  else
  {
    while (1)
    {
      *(void *)(v0 + 344) = v4;
      uint64_t v7 = *(unsigned int *)(v0 + 500);
      unint64_t v8 = *(void *)(v0 + 144);
      int v52 = *(void (**)(unint64_t, unint64_t, uint64_t))(v0 + 336);
      uint64_t v53 = *(void *)(v0 + 136);
      uint64_t v9 = *(void *)(v0 + 120);
      uint64_t v11 = *(void *)(v0 + 104);
      uint64_t v10 = *(void *)(v0 + 112);
      uint64_t v13 = *(void *)(v0 + 80);
      uint64_t v12 = *(void *)(v0 + 88);
      v52(v8, *(void *)(v0 + 312)+ ((*(unsigned __int8 *)(v0 + 496) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 496))+ *(void *)(v0 + 328) * v4, v9);
      ChatMessagePrompt.role.getter();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(v11, v7, v13);
      LOBYTE(v7) = static ChatMessageRole.== infix(_:_:)();
      uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      *(void *)(v0 + 352) = v14;
      *(void *)(v0 + 360) = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v14(v11, v13);
      v14(v10, v13);
      v52(v53, v8, v9);
      if ((v7 & 1) == 0) {
        break;
      }
      uint64_t v16 = *(void *)(v0 + 168);
      uint64_t v15 = *(void *)(v0 + 176);
      uint64_t v18 = *(void *)(v0 + 152);
      uint64_t v17 = *(void *)(v0 + 160);
      uint64_t v20 = *(void *)(v0 + 128);
      uint64_t v19 = *(void *)(v0 + 136);
      uint64_t v21 = *(void *)(v0 + 120);
      ChatMessagePrompt.prompt.getter();
      Prompt.init(_:)();
      char v22 = static Prompt.== infix(_:_:)();
      uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v23(v16, v18);
      v23(v15, v18);
      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v24(v19, v21);
      if ((v22 & 1) == 0) {
        goto LABEL_14;
      }
      uint64_t v26 = *(void *)(v0 + 248);
      uint64_t v25 = *(void *)(v0 + 256);
      uint64_t v28 = *(unsigned char **)(v0 + 64);
      uint64_t v27 = *(void *)(v0 + 72);
      BOOL v29 = *(int **)(v0 + 48);
      ChatMessagePrompt.locale.getter();
      outlined init with copy of Prompt.Rendering?(v25, v26, &demangling cache variable for type metadata for Locale?);
      uint64_t v30 = (uint64_t)&v28[v29[5]];
      uint64_t v31 = type metadata accessor for Locale();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
      uint64_t v32 = v29[9];
      unsigned char *v28 = 1;
      uint64_t v33 = MEMORY[0x263F8EE78];
      *(void *)&v28[v29[6]] = MEMORY[0x263F8EE78];
      *(void *)&v28[v29[8]] = v33;
      uint64_t v34 = &v28[v32];
      *uint64_t v34 = 0u;
      v34[1] = 0u;
      v28[v29[7]] = 1;
      outlined assign with take of Locale?(v26, v30);
      outlined init with take of PromptCompletionStream((uint64_t)v28, v27, type metadata accessor for Prompt.Turn);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(v25, &demangling cache variable for type metadata for Locale?);
      unint64_t v35 = *(void *)(v0 + 16);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v35 + 16) + 1, 1, v35);
      }
      unint64_t v37 = *(void *)(v35 + 16);
      unint64_t v36 = *(void *)(v35 + 24);
      if (v37 >= v36 >> 1) {
        unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, v35);
      }
      uint64_t v38 = *(void *)(v0 + 144);
      uint64_t v39 = *(void *)(v0 + 120);
      uint64_t v40 = *(void *)(v0 + 72);
      uint64_t v41 = *(void *)(v0 + 56);
      *(void *)(v35 + 16) = v37 + 1;
      outlined init with take of PromptCompletionStream(v40, v35+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(void *)(v41 + 72) * v37, type metadata accessor for Prompt.Turn);
      *(void *)(v0 + 16) = v35;
      v24(v38, v39);
      uint64_t v4 = *(void *)(v0 + 344) + 1;
      if (v4 == *(void *)(v0 + 320)) {
        goto LABEL_2;
      }
    }
    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 128) + 8);
    v24(*(void *)(v0 + 136), *(void *)(v0 + 120));
LABEL_14:
    *(void *)(v0 + 368) = v24;
    uint64_t v42 = *(_DWORD *)(v0 + 500);
    uint64_t v44 = *(void *)(v0 + 88);
    uint64_t v43 = *(void *)(v0 + 96);
    uint64_t v45 = *(void *)(v0 + 80);
    ChatMessagePrompt.role.getter();
    uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 88))(v43, v45);
    if (v46 == v42)
    {
      BOOL v47 = (unsigned char *)(v0 + 520);
      *(unsigned char *)(v0 + 520) = 0;
      uint64_t v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 376) = v48;
      *uint64_t v48 = v0;
      char v49 = (uint64_t (*)(uint64_t))specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else if (v46 == *(_DWORD *)(v0 + 504))
    {
      BOOL v47 = (unsigned char *)(v0 + 519);
      *(unsigned char *)(v0 + 519) = 2;
      uint64_t v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 400) = v48;
      *uint64_t v48 = v0;
      char v49 = (uint64_t (*)(uint64_t))specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else if (v46 == *(_DWORD *)(v0 + 508))
    {
      BOOL v47 = (unsigned char *)(v0 + 518);
      *(unsigned char *)(v0 + 518) = 1;
      uint64_t v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 424) = v48;
      *uint64_t v48 = v0;
      char v49 = (uint64_t (*)(uint64_t))specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else if (v46 == *(_DWORD *)(v0 + 512))
    {
      BOOL v47 = (unsigned char *)(v0 + 517);
      *(unsigned char *)(v0 + 517) = 3;
      uint64_t v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 448) = v48;
      *uint64_t v48 = v0;
      char v49 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else
    {
      BOOL v47 = (unsigned char *)(v0 + 516);
      *(unsigned char *)(v0 + 516) = 2;
      uint64_t v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 472) = v48;
      *uint64_t v48 = v0;
      char v49 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    v48[1] = v49;
    uint64_t v50 = *(void *)(v0 + 144);
    char v51 = *(void *)(v0 + 40);
    return specialized static TokenGenerator.getTurnsForMessage(for:with:binding:)(v47, v50, v51);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0 + 368))(*(void *)(v0 + 144), *(void *)(v0 + 120));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned char *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned char *v47;
  void *v48;
  uint64_t (*v49)(uint64_t);
  uint64_t v50;
  uint64_t v51;
  void (*v52)(unint64_t, unint64_t, uint64_t);
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;

  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 120);
  specialized Array.append<A>(contentsOf:)(*(void *)(v0 + 464), (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for Prompt.Turn);
  v1(v2, v3);
  uint64_t v4 = *(void *)(v0 + 344) + 1;
  if (v4 == *(void *)(v0 + 320))
  {
LABEL_2:
    swift_bridgeObjectRelease();
    uint64_t v54 = *(void *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v5(v54);
  }
  else
  {
    while (1)
    {
      *(void *)(v0 + 344) = v4;
      uint64_t v7 = *(unsigned int *)(v0 + 500);
      unint64_t v8 = *(void *)(v0 + 144);
      int v52 = *(void (**)(unint64_t, unint64_t, uint64_t))(v0 + 336);
      uint64_t v53 = *(void *)(v0 + 136);
      uint64_t v9 = *(void *)(v0 + 120);
      uint64_t v11 = *(void *)(v0 + 104);
      uint64_t v10 = *(void *)(v0 + 112);
      uint64_t v13 = *(void *)(v0 + 80);
      uint64_t v12 = *(void *)(v0 + 88);
      v52(v8, *(void *)(v0 + 312)+ ((*(unsigned __int8 *)(v0 + 496) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 496))+ *(void *)(v0 + 328) * v4, v9);
      ChatMessagePrompt.role.getter();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(v11, v7, v13);
      LOBYTE(v7) = static ChatMessageRole.== infix(_:_:)();
      uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      *(void *)(v0 + 352) = v14;
      *(void *)(v0 + 360) = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v14(v11, v13);
      v14(v10, v13);
      v52(v53, v8, v9);
      if ((v7 & 1) == 0) {
        break;
      }
      uint64_t v16 = *(void *)(v0 + 168);
      uint64_t v15 = *(void *)(v0 + 176);
      uint64_t v18 = *(void *)(v0 + 152);
      uint64_t v17 = *(void *)(v0 + 160);
      uint64_t v20 = *(void *)(v0 + 128);
      uint64_t v19 = *(void *)(v0 + 136);
      uint64_t v21 = *(void *)(v0 + 120);
      ChatMessagePrompt.prompt.getter();
      Prompt.init(_:)();
      char v22 = static Prompt.== infix(_:_:)();
      uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v23(v16, v18);
      v23(v15, v18);
      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v24(v19, v21);
      if ((v22 & 1) == 0) {
        goto LABEL_14;
      }
      uint64_t v26 = *(void *)(v0 + 248);
      uint64_t v25 = *(void *)(v0 + 256);
      uint64_t v28 = *(unsigned char **)(v0 + 64);
      uint64_t v27 = *(void *)(v0 + 72);
      BOOL v29 = *(int **)(v0 + 48);
      ChatMessagePrompt.locale.getter();
      outlined init with copy of Prompt.Rendering?(v25, v26, &demangling cache variable for type metadata for Locale?);
      uint64_t v30 = (uint64_t)&v28[v29[5]];
      uint64_t v31 = type metadata accessor for Locale();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
      uint64_t v32 = v29[9];
      unsigned char *v28 = 1;
      uint64_t v33 = MEMORY[0x263F8EE78];
      *(void *)&v28[v29[6]] = MEMORY[0x263F8EE78];
      *(void *)&v28[v29[8]] = v33;
      uint64_t v34 = &v28[v32];
      *uint64_t v34 = 0u;
      v34[1] = 0u;
      v28[v29[7]] = 1;
      outlined assign with take of Locale?(v26, v30);
      outlined init with take of PromptCompletionStream((uint64_t)v28, v27, type metadata accessor for Prompt.Turn);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(v25, &demangling cache variable for type metadata for Locale?);
      unint64_t v35 = *(void *)(v0 + 16);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v35 + 16) + 1, 1, v35);
      }
      unint64_t v37 = *(void *)(v35 + 16);
      unint64_t v36 = *(void *)(v35 + 24);
      if (v37 >= v36 >> 1) {
        unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, v35);
      }
      uint64_t v38 = *(void *)(v0 + 144);
      uint64_t v39 = *(void *)(v0 + 120);
      uint64_t v40 = *(void *)(v0 + 72);
      uint64_t v41 = *(void *)(v0 + 56);
      *(void *)(v35 + 16) = v37 + 1;
      outlined init with take of PromptCompletionStream(v40, v35+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(void *)(v41 + 72) * v37, type metadata accessor for Prompt.Turn);
      *(void *)(v0 + 16) = v35;
      v24(v38, v39);
      uint64_t v4 = *(void *)(v0 + 344) + 1;
      if (v4 == *(void *)(v0 + 320)) {
        goto LABEL_2;
      }
    }
    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 128) + 8);
    v24(*(void *)(v0 + 136), *(void *)(v0 + 120));
LABEL_14:
    *(void *)(v0 + 368) = v24;
    uint64_t v42 = *(_DWORD *)(v0 + 500);
    uint64_t v44 = *(void *)(v0 + 88);
    uint64_t v43 = *(void *)(v0 + 96);
    uint64_t v45 = *(void *)(v0 + 80);
    ChatMessagePrompt.role.getter();
    uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 88))(v43, v45);
    if (v46 == v42)
    {
      BOOL v47 = (unsigned char *)(v0 + 520);
      *(unsigned char *)(v0 + 520) = 0;
      uint64_t v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 376) = v48;
      *uint64_t v48 = v0;
      char v49 = (uint64_t (*)(uint64_t))specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else if (v46 == *(_DWORD *)(v0 + 504))
    {
      BOOL v47 = (unsigned char *)(v0 + 519);
      *(unsigned char *)(v0 + 519) = 2;
      uint64_t v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 400) = v48;
      *uint64_t v48 = v0;
      char v49 = (uint64_t (*)(uint64_t))specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else if (v46 == *(_DWORD *)(v0 + 508))
    {
      BOOL v47 = (unsigned char *)(v0 + 518);
      *(unsigned char *)(v0 + 518) = 1;
      uint64_t v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 424) = v48;
      *uint64_t v48 = v0;
      char v49 = (uint64_t (*)(uint64_t))specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else if (v46 == *(_DWORD *)(v0 + 512))
    {
      BOOL v47 = (unsigned char *)(v0 + 517);
      *(unsigned char *)(v0 + 517) = 3;
      uint64_t v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 448) = v48;
      *uint64_t v48 = v0;
      char v49 = (uint64_t (*)(uint64_t))specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else
    {
      BOOL v47 = (unsigned char *)(v0 + 516);
      *(unsigned char *)(v0 + 516) = 2;
      uint64_t v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 472) = v48;
      *uint64_t v48 = v0;
      char v49 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    v48[1] = v49;
    uint64_t v50 = *(void *)(v0 + 144);
    char v51 = *(void *)(v0 + 40);
    return specialized static TokenGenerator.getTurnsForMessage(for:with:binding:)(v47, v50, v51);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0 + 368))(*(void *)(v0 + 144), *(void *)(v0 + 120));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned char *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned char *v50;
  void *v51;
  uint64_t (*v52)();
  uint64_t v53;
  uint64_t v54;
  void (*v55)(unint64_t, unint64_t, uint64_t);
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;

  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 80);
  specialized Array.append<A>(contentsOf:)(*(void *)(v0 + 488), (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for Prompt.Turn);
  v1(v3, v4);
  v2(v5, v6);
  uint64_t v7 = *(void *)(v0 + 344) + 1;
  if (v7 == *(void *)(v0 + 320))
  {
LABEL_2:
    swift_bridgeObjectRelease();
    uint64_t v57 = *(void *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v8 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v8(v57);
  }
  else
  {
    while (1)
    {
      *(void *)(v0 + 344) = v7;
      uint64_t v10 = *(unsigned int *)(v0 + 500);
      uint64_t v11 = *(void *)(v0 + 144);
      uint64_t v55 = *(void (**)(unint64_t, unint64_t, uint64_t))(v0 + 336);
      int v56 = *(void *)(v0 + 136);
      uint64_t v12 = *(void *)(v0 + 120);
      uint64_t v14 = *(void *)(v0 + 104);
      uint64_t v13 = *(void *)(v0 + 112);
      uint64_t v16 = *(void *)(v0 + 80);
      uint64_t v15 = *(void *)(v0 + 88);
      v55(v11, *(void *)(v0 + 312)+ ((*(unsigned __int8 *)(v0 + 496) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 496))+ *(void *)(v0 + 328) * v7, v12);
      ChatMessagePrompt.role.getter();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 104))(v14, v10, v16);
      LOBYTE(v10) = static ChatMessageRole.== infix(_:_:)();
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      *(void *)(v0 + 352) = v17;
      *(void *)(v0 + 360) = (v15 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v17(v14, v16);
      v17(v13, v16);
      v55(v56, v11, v12);
      if ((v10 & 1) == 0) {
        break;
      }
      uint64_t v19 = *(void *)(v0 + 168);
      uint64_t v18 = *(void *)(v0 + 176);
      uint64_t v21 = *(void *)(v0 + 152);
      uint64_t v20 = *(void *)(v0 + 160);
      uint64_t v23 = *(void *)(v0 + 128);
      char v22 = *(void *)(v0 + 136);
      uint64_t v24 = *(void *)(v0 + 120);
      ChatMessagePrompt.prompt.getter();
      Prompt.init(_:)();
      uint64_t v25 = static Prompt.== infix(_:_:)();
      uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v26(v19, v21);
      v26(v18, v21);
      uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      v27(v22, v24);
      if ((v25 & 1) == 0) {
        goto LABEL_14;
      }
      BOOL v29 = *(void *)(v0 + 248);
      uint64_t v28 = *(void *)(v0 + 256);
      uint64_t v31 = *(unsigned char **)(v0 + 64);
      uint64_t v30 = *(void *)(v0 + 72);
      uint64_t v32 = *(int **)(v0 + 48);
      ChatMessagePrompt.locale.getter();
      outlined init with copy of Prompt.Rendering?(v28, v29, &demangling cache variable for type metadata for Locale?);
      uint64_t v33 = (uint64_t)&v31[v32[5]];
      uint64_t v34 = type metadata accessor for Locale();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 1, 1, v34);
      unint64_t v35 = v32[9];
      *uint64_t v31 = 1;
      unint64_t v36 = MEMORY[0x263F8EE78];
      *(void *)&v31[v32[6]] = MEMORY[0x263F8EE78];
      *(void *)&v31[v32[8]] = v36;
      unint64_t v37 = &v31[v35];
      *unint64_t v37 = 0u;
      v37[1] = 0u;
      v31[v32[7]] = 1;
      outlined assign with take of Locale?(v29, v33);
      outlined init with take of PromptCompletionStream((uint64_t)v31, v30, type metadata accessor for Prompt.Turn);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(v28, &demangling cache variable for type metadata for Locale?);
      uint64_t v38 = *(void *)(v0 + 16);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v38 + 16) + 1, 1, v38);
      }
      uint64_t v40 = *(void *)(v38 + 16);
      uint64_t v39 = *(void *)(v38 + 24);
      if (v40 >= v39 >> 1) {
        uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1, v38);
      }
      uint64_t v41 = *(void *)(v0 + 144);
      uint64_t v42 = *(void *)(v0 + 120);
      uint64_t v43 = *(void *)(v0 + 72);
      uint64_t v44 = *(void *)(v0 + 56);
      *(void *)(v38 + 16) = v40 + 1;
      outlined init with take of PromptCompletionStream(v43, v38+ ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))+ *(void *)(v44 + 72) * v40, type metadata accessor for Prompt.Turn);
      *(void *)(v0 + 16) = v38;
      v27(v41, v42);
      uint64_t v7 = *(void *)(v0 + 344) + 1;
      if (v7 == *(void *)(v0 + 320)) {
        goto LABEL_2;
      }
    }
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 128) + 8);
    v27(*(void *)(v0 + 136), *(void *)(v0 + 120));
LABEL_14:
    *(void *)(v0 + 368) = v27;
    uint64_t v45 = *(_DWORD *)(v0 + 500);
    BOOL v47 = *(void *)(v0 + 88);
    uint64_t v46 = *(void *)(v0 + 96);
    uint64_t v48 = *(void *)(v0 + 80);
    ChatMessagePrompt.role.getter();
    char v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 88))(v46, v48);
    if (v49 == v45)
    {
      uint64_t v50 = (unsigned char *)(v0 + 520);
      *(unsigned char *)(v0 + 520) = 0;
      char v51 = (void *)swift_task_alloc();
      *(void *)(v0 + 376) = v51;
      *char v51 = v0;
      int v52 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else if (v49 == *(_DWORD *)(v0 + 504))
    {
      uint64_t v50 = (unsigned char *)(v0 + 519);
      *(unsigned char *)(v0 + 519) = 2;
      char v51 = (void *)swift_task_alloc();
      *(void *)(v0 + 400) = v51;
      *char v51 = v0;
      int v52 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else if (v49 == *(_DWORD *)(v0 + 508))
    {
      uint64_t v50 = (unsigned char *)(v0 + 518);
      *(unsigned char *)(v0 + 518) = 1;
      char v51 = (void *)swift_task_alloc();
      *(void *)(v0 + 424) = v51;
      *char v51 = v0;
      int v52 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else if (v49 == *(_DWORD *)(v0 + 512))
    {
      uint64_t v50 = (unsigned char *)(v0 + 517);
      *(unsigned char *)(v0 + 517) = 3;
      char v51 = (void *)swift_task_alloc();
      *(void *)(v0 + 448) = v51;
      *char v51 = v0;
      int v52 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    else
    {
      uint64_t v50 = (unsigned char *)(v0 + 516);
      *(unsigned char *)(v0 + 516) = 2;
      char v51 = (void *)swift_task_alloc();
      *(void *)(v0 + 472) = v51;
      *char v51 = v0;
      int v52 = specialized static TokenGenerator.render(chatMessagesPromptContent:bindingChatMessagesPrompts:bindingVariables:);
    }
    v51[1] = v52;
    uint64_t v53 = *(void *)(v0 + 144);
    uint64_t v54 = *(void *)(v0 + 40);
    return specialized static TokenGenerator.getTurnsForMessage(for:with:binding:)(v50, v53, v54);
  }
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  (*(void (**)(void, void))(v0 + 368))(*(void *)(v0 + 144), *(void *)(v0 + 120));
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[35];
  uint64_t v1 = v0[36];
  uint64_t v3 = v0[34];
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[33], &demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}